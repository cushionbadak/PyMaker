Natural Text
I have a string listand I also have a  to check the format of the strings, something like:Now I want to check every string in list, and of course I can use for to check one by one. But could I use  to make code more readable...?
You can map your list to your function and then use  to check if it returns  for every item:Actually, it would be cleaner to just get rid of the  function and use  directly:Also, as an added bonus,  uses lazy-evaluation.  Meaning, it only checks as many items as are necessary before returning a result.Note however that a more common approach would be to use a generator expression instead of :In my opinion, generator expressions are always better than  because:They are slightly more readable.They are just as fast if not faster than using .  Also, in Python 2.x,  creates a list object that is often unnecessary (wastes memory).  Only in Python 3.x does  use lazy-computation like a generator expression.They are more powerful.  In addition to just mapping items to a function, generator expressions allow you to perform operations on each item as they are produced.  For example:They are preferred by most Python programmers.  Keeping with convention is important when programming because it eases maintenance and makes your code more understandable.There is talk of removing functions like , , etc. from a future version of the language. Though this is not set in stone, it has come up many times in the Python community.Of course, if you are a fan of functional programming, there isn't much chance you'll agree to points one and four. :)
An example, how you could do:
 is a list of booleans such that  is . If you want to further check if all of those values are True, you could use :This returns  if and only if all the values in  are . However, you may do this without listifying:


Answer URL
https://docs.python.org/3/library/functions.html#all
https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression
