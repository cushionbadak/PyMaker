Natural Text
convert a 2d array of integers into String. For example myArray = [[1,2,3],[3,4,5]] into   myArrayL = [[a,b,c],[c,d,e]] and retain the shape of the 2d arraywhere 1 = "a" , 2 = "b", 3 = "c"
There are two parts to this.First, how do you convert a number like  to a letter like , according to your rule? Second, how do you apply a function to all elements of a list?For the first, one way to write it is with the  function. This function takes an number and gives you the single-character string for the character with that code point. In particular,  is ,  is , etc. So, we could just do . Or we could use the  function, which is the inverse of , so instead of hardcoding 64 and having to remember that's 1 less than , we can write 1 less than  directly:Of course this isn't the only way to do it. You could also, e.g., use .(Note that either of these solutions not only works in Python 3, where the "code points" are always Unicode, but also in Python 2, where the "code points" are values in some unspecific 8-bit encoding, as long as the intended encoding has all of the lowercase letters in contiguous order, which is true for almost anything you're likely to ever encounter unless you've got some old EBCDIC files lying around.)For the second, you can use a list comprehension. Your examples are flat (1D) lists, so we'd use a flat list comprehension:If you have 2D lists of lists, just use a nested list comprehension:
You can corresponding Alphabets by indexing  which returns all lower case alphabets.Result array: 


Answer URL
https://docs.python.org/3/library/functions.html#chr
https://docs.python.org/3/library/functions.html#ord
https://docs.python.org/3/library/string.html#string.ascii_lowercase
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions
