Natural Text
I have to access the Nth line in a CSV file.Here's what I did:...but this does not feel optimal. Edit for precision: If the file is huge, I do not want to go through all the lines and I do not want to have to load the whole file into memory.I do hope something like  exists, but I have not found it.Edit for answer: This line (coming from chosen answer) is what I was looking for:
It makes little difference but it is slightly cleaner to use  rather than making your own counter variable.You can also use  which is designed for this type of scenario - accessing a particular slice of an iterable without reading the whole thing into memory. It should be a bit more efficient than looping through the unwanted rows.But if your CSV file is small, just read the entire thing into a list, which you can then access with an index in the normal way. This also has the advantage that you can access several different rows in random order without having to reset the csv reader.
Your solution is actually not that bad.  Advancing the file iterator to the line you want is a good approach and is used in many situations like this.If you want it more concise though, you can use  and  with a generator expression:The  in there is what will be returned if the line is not found ( is too large).  You can pick any other value though.You could also open the file with a with-statement to have it be automatically closed:If you really want to cut down on size, you could do:
You can simply do:Or even better to utilize less memory by not loading entire file into memory:
Themodule has a number of functions for creating specialized iterators — and its function could be used to easily solve this problem:P.S. For the curious, my initial response — which also works (arguably better) — was:
You could minimize your  loop into a comprehension expression, e.g.
As a  now you can get any line by its  :


Answer URL
https://docs.python.org/3/library/functions.html#next
https://docs.python.org/3/library/functions.html#enumerate
https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression
https://docs.python.org/3/reference/compound_stmts.html#the-with-statement
https://docs.python.org/3/library/itertools.html#itertools.islice
