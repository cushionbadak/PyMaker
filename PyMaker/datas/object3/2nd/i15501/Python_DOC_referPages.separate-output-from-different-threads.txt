Natural Text
All my code is writing log via say() to sys.stderr and error redirect. In a multithreaded server I want each thread to write to a separate log file. Can I accomplish this without rewriting all code used by threads? Output is mixed in, the goal is to redirect it to a differnt log file for each thread:My understanding is that if I try to redirect stderr to a file inside thread the redirection will be shared by all threads:Result as expected:Updates@Amber, I already have a unique identifier and can use it as a thread name:I cannot dynamically choose logfile for each thread because say() is global -- would need to either put a semaphore on this global log file storage, or pass a logging object to every single function that logs progress.
You could use thread local storage (via the  class) to store a separate file object for each thread. The  function could then look up the right file:I'm using  to get a hopefully unique value to generate a log file name. If there's a more logical way to name the files in your program, I'd suggest you use it instead. You might even want to separate out the creation of the file from the  function. For instance, you could make it part of the thread's startup code:
You could call  in your  function to decide where to write the line. It's not perfect (since thread ID numbers are allowed to be reused after a thread ends and another is created), but if your threads are long-running then it might work for your purposes.


Answer URL
https://docs.python.org/3/library/threading.html#threading.get_ident
