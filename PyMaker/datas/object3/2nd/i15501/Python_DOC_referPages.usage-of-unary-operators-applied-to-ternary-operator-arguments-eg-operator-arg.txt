Natural Text
Here's what I was doing: Here's what I expected: Here's what I actually got: The  operator is unpacking the  string. So here's what I should have been doing: So the  operator gets applied to the entire ternary statement. But this does not seem to happen with the  operator: The negative  operator does not apply to the entire ternary statement, whereas the  operator does. Why? What is special about the  operator?
You already found the right way to write your code in your own answer:But that doesn't answer your question of "what is special about the  operator".The first thing to notice is that  isn't actually an operator at all, it's part of function call syntax. But in loose conversation (including within the actual documentation), it's often called "the splat operator", so this isn't much of an answer. (And the same is true for conditional expressions, which also aren't operator expressions, but it's still frequently called "the ternary operator" or "the if-else operator".)But, more importantly, if you want to treat both  and  (loosely) as operators, you have to consider operator precedence. The ternary operator just binds more tightly than the splat operator, while it doesn't bind more tightly than the negation operator.So, it's just like asking "what is special about the  operator" when you write  and . The  applies to the entire , but the  only applies to the  because of operator precedence.
EDIT: I changed the question but I'll leave this answer here because of the useful comment below. The answer to the revised question can be summarized thusly: "Operator precedence, dummy." Ah ha! I should have experimented a little more:Result as expected: 


Answer URL
https://docs.python.org/3/reference/expressions.html#calls
https://docs.python.org/3/reference/expressions.html#conditional-expressions
https://docs.python.org/3/reference/expressions.html#grammar-token-argument_list
