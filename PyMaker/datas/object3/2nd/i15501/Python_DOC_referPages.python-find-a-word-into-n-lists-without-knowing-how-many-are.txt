Natural Text
as the title (I searched the site but have not found the answer) I have to find a word in common in  lists.for example if I have these lists:list1 and list2 have one thing in common, namely "a" ...Obviously I could have 100 lists as well ... but I do not know the number, the algorithm must always work, of course:PI thought of a for loop, but I never managed to get to something concrete (making for num in range (len (list1)), because if the lists are of different lengths can not do anything.Edit: I apologize maybe I explained bad, I do not have lists of lists.I'm working with graphs, and in the node's information of the graph, I have a list, in cui I have the information, and I need to find the nodes that share in common information in order to connect them with a bow.In the graph I have  nodes, according to how it generates the program, and therefore I have  lists.
You could use intersection of sets, like this (and modify accordingly if you have a list of lists)
I asked which of two things you want, and you answered "exactly", and then clarified in a way that still doesn't tell me which of the two things you want. So, I still don't know which problem you're trying to solve. So I'll explain them both.First, from the fact that you tried a loop over , you may be looking only for matches at the same position—that is,  is a match, but  is not.For that, you normally want the  function. But in this case, given your comment "if the lists are of different lengths can not do anything", I assume you want to keep going until the end of the longest list. For that, you want the  function. Like this:Most likely, you're going to want to check all the combinations of listX vs. listY. The smart way to do that is to use :And this goes along with what I said in the comments: if you have anywhere from 3 to 100 lists, you do not want them in separate variables like , , …, , you want them in a big list (or dict) of lists.Alternatively, you may just want to treat the lists as sets, and find matches regardless of position, so if  that counts.In that case, all you're asking for is whether the set  is non-empty. Like this:(Or, equivalently, you could  over , or a couple other ways to do the same thing.)However, if you want to use your lists as sets, you should be storing them as sets in the first place. (And, again, you should be storing them in a list of sets, not 3-100 separate variables.)
Write a function that takes a list of iterables, turns them into sets, and takes the intersection, which returns the elements common to both sets:
Output


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
https://docs.python.org/3/library/itertools.html#itertools.combinations
https://docs.python.org/3/library/stdtypes.html#set.isdisjoint
