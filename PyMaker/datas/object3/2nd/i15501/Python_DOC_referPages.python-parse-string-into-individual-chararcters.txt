Natural Text
In Python 2.7 how do I parse 'abc' into 'a b c' for a very long string (like 1000 chars)?Or how would I convert 'abccda' to '1 2 3 3 4 1'? (where each unique letter maps to a unique digit, 1-4)I imagine I could pop the chars off, one by one, but I'm new to Python and wonder if there is a simple function that does it.
For the first one use :For the second one:or you could simply use a dictionary to map letters to numbers:And yet another way is to use : would be the preferred one since, as opposed to the naive dict lookup, it handles unmapped characters without errors:
For simple conversion you can try this.For mapping you can define you function in .An example can be
Do you mean the list method?s='abccda'list(s)   # ['a', 'b', 'c', 'c', 'd', 'a']
To convert each letter into a number, you can use . This is probably overkill in this simple case, but it's worth learning.The details are different in Python 2 and Python 3.For Python 3, you can just use a mapping from Unicode ordinals to replacement strings, like this:For Python 2, you need a special translation table, which in this case is a little less convenient (and will only let you translate characters to single characters, not to arbitrary strings like the Python 3 versionâ€”not a problem here, but if you wanted to convert  to ' it wouldn't work):Then, to add spaces, use mhawke's solution:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.translate
