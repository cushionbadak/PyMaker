Natural Text
The code is as below: What makes me confused is the first argument of I get the meaning of other two arguments:Besides, I know that the lambda expression (the first argument of ) is to turn a sequence of bits （0 or 1） into a integer. It seems we should do one bitwise right shift at one time, but here is , what's that? PS: my question is not the lambda expression itself, but how it works with the sequence which returns
 is the index of the item. is the current item from the iterable. is the result so far(with initial value of 0). is taking the advantage of tuple argument unpacking(supported in Python 2 only), you can also write it as:Tuple argument unpacking in action:Note that this feature has been removed in Python 3 and PEP-3113 recommends doing something like this:As s don't allow assignment statements, you can use indexing to get the value of  and :
The signature is . From the doc:Apply  of two arguments cumulatively to the items of , from left to right, so as to reduce the sequence to a single value.This translates to:Apply to the items of from left to right, so as to reduce the sequence to a single value.Since your  is a function "of two arguments" that can be applied to the the items of the , everything looks fine.Edit returns a list of tuples:
A bit late, But here is the same code without the use of nested functions and lambdas:Output:
The entire statement is just turning a data image into a series of bits and then packing those bits into a single int.A better, and more readable way of doing this might be to do something like.


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
https://docs.python.org/3/library/functions.html#enumerate
