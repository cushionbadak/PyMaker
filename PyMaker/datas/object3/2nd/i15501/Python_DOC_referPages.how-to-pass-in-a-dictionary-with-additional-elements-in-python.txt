Natural Text
I have a dictionary:(Note: My dictionary isn't actually numbers to strings)I am passing this dictionary into a function that calls for it. I use the dictionary often for different functions. However, on occasion I want to send in  with an extra key:item pair such that the dictionary I want to send in would be equivalent to: But I don't want to actually add the value to the dictionary. I could make a copy of the dictionary and add it there, but I'd like to avoid the memory + CPU cycles this would consume.The code I currently have is:While this works, it seems rather kludgy. If this were a string I'd do:Is there any equivalent way of doing this with a dictionary?
As pointed out by Veedrac in his answer, this problem has already been solved in Python 3.3+ in the form of the  class:If you don't have Python 3.3 you should use a backport, and if for some reason you don't want to, then below you can see how to implement it by yourself :)You can create a wrapper, similarly to this:You need to supply all other  method of course, or use the  as a base class, which should simplify this.and then use it like this:This can be easily extended to a whole additional dictionary of "special" keys and values, not just single additional element.You can also extend this approach to reach something similar as in your string example:and use it like this:
If you're on 3.3+, just use . Otherwise use a backport.
You can add the extra key-value pair leaving original dictionary as such like this:
This is a bit annoying too, but you could just have the function take two parameters, one of them being big_dict, and another being a temporary dictionary, created just for the function (so something like  ).  Then you could access both dictionaries without changing your first one, and without copying .


Answer URL
https://docs.python.org/3/library/collections.html#chainmap-objects
https://docs.python.org/3/library/collections.html#chainmap-objects
