Natural Text
I'm trying to learn neat pythonic ways of doing things, and was wondering why my for loop cannot be refactored this way:I tried replacing the for loop with:But it doesn't work. The  loop evicts numbers from  based on when they come next in .
What you are using is called a list comprehension in Python, not an inline for-loop (even though it is similar to one). You would write your loop as a list comprehension like so:When using a list comprehension, you do not call  because the list is being constructed from the comprehension itself.  Each item in the list will be what is returned by the expression on the left of the  keyword, which in this case is .  Incidentially, if you do use  inside a comprehension, then you will get a list of  values because that is what the  method always returns.
your list comphresnion will, work but will return list of None because append return None:demo:better way to use it like this:
you can use enumerate keeping the ind/index of the elements is in vm, if you make  a set you will also have  lookups:
Output:Instead of using  in the list comprehension you can reference the p as direct output, and use  and  in the LC.Not sure if this is intentional but note that  will find just the first occurrence of , even tho you have several in . If you want to get the index of all  in , consider using a  and a list of already visited Something in those lines(pseudo-code):


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
