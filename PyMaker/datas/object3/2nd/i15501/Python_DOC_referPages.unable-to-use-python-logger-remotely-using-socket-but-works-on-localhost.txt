Natural Text
I am using the logging utility on my local network to get log data from one python script to another. The server and client scripts works on the same machine, but does not work from a different machine.The client script snippet, running on IP "192.168.1.9" is-The server script snippet, running on IP "192.168.1.10" locally is - When I run this, both the client and server are unresponsive, as if no message was ever sent.My iptables is empty (default), and there is nothing except a simple switch between the two machines on the network. I can remotely use MySQL just fine. Even a basic TCP socket connection at a random open port worked fine. So what could be going wrong here? Is it something to do with the logger code above, or could be an entirely different networking reason? 
When you construct a , the  ultimately gets passed to .The Socket Programming HOWTO explains a bit about what this means, but the short version is that the point of specifying a host is to tell the listener socket which interface(s) to listen to. It resolves the name to an address, asks your OS which interface owns that address, and listens only to that interface.I'll use my Macintosh as an example here, but the details will be pretty much the same anywhere, except some slight differences in the names. resolves to , which belongs to an interface named , the "loopback" interface, which listens to nothing but connections from the same machine on the localhost address. belongs to an interface named , an Ethernet adapter that listens to everything coming over my Ethernet port. So, that's why it works for you. But it's still not what you (probably) want. is a special address that belongs to every interface. So this may be what you want.But notice that specifying an IPv4 address—even —means, at least on some platforms, that you'll only listen for IPv4 connections. If you want to handle IPv6 as well, how do you do that? Well, you can't do it on all platforms, but on those you can, it's just .(On some platforms, that still won't work for IPv6; you need to actually create IPv6 and IPv4 sockets, and bind them to the specific IPv6 and IPv4 "any" addresses separately. But on such platforms, Python still lets you use  for both "any" addresses, and the default socket will be IPv4, so work-case scenario, this works just as well as .)So, most likely, you just want:


Answer URL
https://docs.python.org/3/library/socketserver.html#server-objects
https://docs.python.org/3/library/socket.html#socket.socket.bind
https://docs.python.org/3/howto/sockets.html#creating-a-socket
