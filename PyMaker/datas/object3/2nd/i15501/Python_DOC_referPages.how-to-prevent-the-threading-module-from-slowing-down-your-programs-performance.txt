Natural Text
When I would click a button on my Tkinter, Python program, the button would freeze and I wouldn't be able to do anything else on the program. The actual command for the button would still work, but the functionality of the entire program went away. To combat this issue, I implemented threading, which in turn fixed the problem. But after I implemented threading, the performance of the program slowed way down.Does anyone know what causes this? And how I can fix it?EDIT----------------------------------------EDITThis is what I tried to do when using the multiprocessing module as opposed to the threading module.
It's hard to say for certain without actually seeing the code, but the most likely reason for the performance hit is the Global Interpreter Lock, or GIL. The Python interpreter isn't thread-safe, so it uses the GIL to protect itself bugs and crashes caused by concurrency issues. The lock only allows a single thread to actually execute Python instructions a time, which means you don't get true parallelism across CPU cores the way you can in other, GIL-less languages. Effectively, one thread executes for a bit, it gets suspended, then another thread can start, then it gets suspended, etc. You still get concurrency, but not true parallelism.The most common way to fix this is to use the  module, instead of . The  utilizes processes for concurrency instead of threads, thereby avoiding the limitations of the GIL. This has some drawbacks, though, since it's more difficult and more overhead to share state between processes than threads.


Answer URL
https://docs.python.org/3/library/asyncio.html
