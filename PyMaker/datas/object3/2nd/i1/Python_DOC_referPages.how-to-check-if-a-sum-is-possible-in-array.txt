Natural Text
Given an array of N integers, check if it is possible to obtain a sum of S, by choosing some (or none) elements of the array and adding them. I tried solving this using a greedy approach by first sorting the array and then approaching closer and closer to the sum. However it does not work.Can anyone please tell me how should I approach this problem?
A brute-force (and arguably very slow) solution with :
Dynamic and combination solutions and time/results test code:I added the dynamic programming solution and modified DYZ's code to avoid obvious pitfall with if_possible_sum_obvious(a, s) call. The same function can be added instead of two first lines in is_possible_sum_dynamic function, but then I have to run this long test again and remake the graphic.Axis X is the number integers, axis Y - log10(time in nanoseconds): 3=10**3 ns = 1 Î¼s, 9 = 1 sec, 12 = 1000 secOutput:
you check this code


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
