Natural Text
It's used as a function, but why:How to understand the above output, where it shows a class and some methods?Thanks.
The misunderstanding is due to poor documentation that doesn't catch a major change in specs, or due to the CPython implementation which dare to write a class for what is listed as a built-in function in the specs.In Python 2, it is a function that returns a list. In the online documentation of Python 2, it is listed under Built-in Functions. The first line of  on CPython 2.7.10 readsHelp on built-in function map in module builtincorrectly calling it a function. In Python 3, they changed the specs that it returns an iterator instead of a list. As @RafaelC noted, it has an advantage of lazy loading. Althiugh it is still under "Built-n Functions", the CPython implementation decided to make it a class. This change is reflected in , which you have seen and quoted in the question.What you are doing when you call  in CPython 3 is, you are creating an object of class  with the parameters you throw. This is clearly shown when you try to print what  returns.CPython 2.7.10:CPython 3.7.2:So you are clearly creating an object of class , which makes what you've seen in  sound very fine.So it seems that, to the CPython core developers, a class can be a "function" with some definiton of a "function". This is clearly misleading. Anyway, it implements the necessary methods that enables it to be used as an iterator. (as the docs says, if you ignore that it's listed under builtin functions.)It's used as a functionThat's because the syntax of calling a function and fetching its return value is identical to creating a class object (by calling its initializer) and fetching the object.For example, using a function  as in  is syntactically no different from creating a class object of  as in . When you call  in CPython 3, you are creating an object of class . But you would write the same even if  were a function. That's why you're confused.So in short, was a function in CPython 2, but is a class in CPython 3. That is clear from  on both versions, and that's what the CPython implementation does.The documentation keeps it under "Built-in functions" while CPython implementation finds liberty to write a class for it, causing confusion.It's a shame that the two aren't clearly distinguished in the docs.


Answer URL
https://docs.python.org/3/library/functions.html#map
