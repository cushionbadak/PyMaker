Natural Text
How can I check if something in a dictionary is the same as the max in that dictionary. In other words, get all the max values instead of the max value with lowest position.I have this code which returns the max variable name and value:Now it prints the variable with the highest value plus the value itself, but what if there are two or three variables with the same max value? I would like to print all of the max values.Edit:The user has to fill in a form, which adds values to the variables in the dictionary. When the user is done, there will be one, two or more variables with the highest value. For example, the code gives me this:Now it tells me that  has the highest value of 9, but if you look at , it also had 9 but it doesn't get printed because it's at a higher position in the dictionary. So how do I print them both? And what if it has 3 variables with the same max value?
Given a dictionarythe following command:yields: 
Let me introduce you to a more complicated but more powerful answer.  If you sort your dictionary items, you can use itertools.groupby for some powerful results:The  line takes the key/value pairs of dictionary items and sorts them based on the value.  I put a  in front so that the values will end up being sorted descending.  The results of that line are:>>> print(sorted_kvp)[('tres', 3), ('troi', 3), ('three', 3), ('two', 2), ('dos', 2), ('one', 1)]Note, as the comments said above, the order of the keys (in this case, 'tres', 'troi', and 'three', and then 'two' and 'dos', is arbitrary, since the order of the keys in the dictionary is arbitrary.The  line makes groups out of the runs of data.  The lambda tells it to look at  for each key-value pair, i.e. the value.At the moment, you're only interested in the max, so you can then do this:And get the following results:3: [('tres', 3), ('troi', 3), ('three', 3)]But if you wanted all the information sorted, instead, with this method, that's just as easy:produces:3: [('tres', 3), ('troi', 3), ('three', 3)] 2: [('two', 2), ('dos', 2)] 1: [('one', 1)]One last note: you can use  or you can use the for loop, but using both will give you different results.   is an iterator, and calling  on it moves it to its next result (and the for loop consumes the entire iterator, so a subsequent  would cause a  exception).
You could do something like this:This will get the maximum value, then loop through all the keys and values in your dictionary and add all the ones matching that max value to a list. Then you print the list and it should print all of them.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/whatsnew/2.7.html#pep-0372
