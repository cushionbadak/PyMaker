Natural Text
I have a class that needs to run a TensorFlow session for each instance of the class, as long as that instance exists.TensorFlow sessions use context managers, but I don't want to force anyone who uses my class to put my class into a context manager.Is there any way to auto-close the session once the instance is no longer in use without using a context manager?Can I just put in an  method and not an  method and start the session without the context manager and just close the session in the exit?
Is there any way to auto-close the session once the instance is no longer in use without using a context manager?Not really, how would an object figure out when it’s no longer being used? If there was a safe way to do this, there wouldn’t be a need for context managers in the first place.So you have to use context managers and the  statement to get this kind of feedback. But just because you have to use context managers, that does not mean that you actually need to have some separate “thing” you open. You can return anything in the  method, including the current object.So the simplest context manager implementation that closes itself when the context is closed looks like this:In fact, this pattern is so common, that there is a built-in recipe for this context manager: . Using that, you do not actually need to modify your class at all, you can just wrap it in a  call and have it call  when the context is exited:
You must define an  method, but you can just define it as:and have the session defined in the init. Then, define  like so:Then, define a close method that closes whatever resources were opened in . (In my case, it's a TensorFlow session.)This way, if the user decides to use the context manager, it will close it for them, and if they don't, they'll have to close it on their own.


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.closing
