Natural Text
I have a program that can be started or stopped at any moment. The program is used to download data from web pages. First, a user will define a bunch of web pages in a  file, then save that  file, then start the program. That program will read the  file and turn it into a list of jobs. Next, the jobs are split among 5 separate  functions that work in parallel but may take different times to download. After a  (which there are 5 of) finished downloading a web page, I need it to open the  file and remove the link. This way, as time passes, the  file will get smaller and smaller. The issue is that sometimes two  functions will try to update the  file at the same time and will cause the program to crash. How can I deal with this? 
If this is a continuation of your project from yesterday you already have your download list in memory - just remove the entries from the loaded list as their processes finish download and only write down the whole list over the input file once you're exiting the 'downloader'. There is no reason to constantly write down the changes.If you want to know (say from an external process) when a url gets downloaded even while your 'downloader' is running, write in a  a new line each time a process returns that download was successful.Of course, in both cases, write from within your main process/thread so you don't have to worry about mutex.UPDATE - Here's how to do it with an additional file, using the same code base as yesterday:The whole idea is, as I wrote in the comment, to use a file to store downloaded links as they get downloaded, and then on the next run to filter out the downloaded links and update the input file. That way even if you forcibly kill it, it will always resume where it left off (except for the partial downloads).
Look into locking files in python. Locking a file will make the next process wait until the file is unlocked to modify it. Locking files is platform specific so you will have to use whichever method works for the os you are on. If you need to figure out the os use a switch statement like this.Then I would look at this article  and figure out exactly how you want to implement your lock.
Use a 'Lock' from the multiprocessing library to serialize operations with the file.You will want to pass the lock into each process. Each process should 'acquire' the lock before it opens the file and 'release' the lock after it closes the file.https://docs.python.org/2/library/multiprocessing.html


Answer URL
https://docs.python.org/3/library/multiprocessing.html?highlight=multiprocessing.lock#multiprocessing.Lock
