Natural Text
I am writing a database program and personica is my test subject (I would usually have a variable in the place of the file path, but for test and demo purposes I just have a string.). There is a text file at this exact location on my computer (I have changed my username on here, by the way because I am paranoid.), but it says:This is the line of code:I am certain that it is there and when I copy that address into Windows Explorer, it takes me right to the text file.Anyone know why this is not working?
The new-ish  module (available in Python >= 3.4) is great for working with path-like objects (both Windows and for other OSes). It's Paths - Paths all the way downTo simplify: you can build up any path (directory and file path objects are treated exactly the same) as an object, which can be an absolute path object or a relative path object. You can use raw strings to make complex paths (i.e., ) and  will be very forgiving. However, note that there are better ways to build up paths than raw strings (see further down). Here are examples:Note that if you're on Windows  forgives you for using the "wrong slash" in the second example. See discussion at the end about why you should probably always use the forward slash. Simple displaying of some useful paths- such as the current working directory and the user home- works like this: To navigate down the file tree, you can do things like this. Note that the first object, , is a  and the rest are just strings: To read a file located at a path, you can use its  method rather than the  function: But you can also just grab the text directly! ...and WRITE text directly!Check to see if it is a file or a directory (and exists) this way: Make a new, empty file without opening it like this (silently replaces any existing file): To make the file only if it doesn't exist, use :Make a new directory (under the current directory, ) like this: Get the file extension or filename of a path this way:Use  for the entire last part of the path (stem and extension if they are there):Rename a file using the  method (which returns the same path object but with a new filename):You can iterate through all the "stuff' in a directory like so using : Sidebar: backslashes ()Be careful when using backslashes in a path string, especially ending a path with a backslash. As with any string, Python will read that terminating backslash as an escape character even in raw input mode. Observe:So this will give a pretty cryptic error message if you are not aware of this issue: The reason for this error is that  is assumed to be a single quotation in the string. This works fine:  (the second single quotation ends the string).If you insist on using backslashes, be sure to use raw input mode or you will run into problems. For example, the  character represents a tab. So when you do this (without raw input): You are putting a tab character into your path. This is perfectly legal and Python won't complain until you do something that causes Windows to try turning it into a real Windows path: This is also a very cryptic error if you do not know what is going on! Best to avoid the backslash characters altogether when messing about with paths. Preventing Your ProblemYour problem occurred when you created your file and erroneously added a double extension. To prevent this issue using , use the  method to make the file:
On Windows, I like to use Python's raw string format for file paths:Note the  at the beginning of the string. Also note that the forward slash can be important as well.Then I can just do the regular Python  command:See the String Literals section in Python's lexical analysis document:https://docs.python.org/2/reference/lexical_analysis.html#string-literals
Ok, I fixed it. When I named the file, it was called personica.txt, as well as being a text file. So it's full name was personica.txt.txt. When I changed the name, it worked fine. Thanks to everyone for their help and input, I learnt from it even it it did not contribute to the solution.


Answer URL
https://docs.python.org/3/library/pathlib.html
