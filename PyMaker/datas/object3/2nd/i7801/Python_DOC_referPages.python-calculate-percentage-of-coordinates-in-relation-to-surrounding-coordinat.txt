Natural Text
I am having a dictionary with 3D tuple coordinates as keys and string scores as values. Now I want to get a new list/dict/array of coordinates which should be the percent value of the coordinate and all surrounding coordinates in a 12x12x12 box. Is there a faster way than to grab the coordinates from a dictionary like in my first approach? (sparse1 is the dictionary with the original coordinates). In the code sparse1 is only an extraction of coordinates from one Tube (because i dont know how to add more characters here :( ):  
While your solution is clever, it adds unnecessary processing due to treating each key in  as being completely unrelated to every other key except through the makeshift lookup table .  If you preprocess  to calculate the Chebyshev distances between the geometric values described by the keys, you can use that to find the neighboring values and sum them.  This eliminates the loop over  array, replacing it with a more efficient index and sum.This is an attempt to replicate your code using  from sklearn.neighbors:There are a few things here of note:I convert the tuple keys into the numpy array , which costs memory.I perform the neighbor calculations up front and store them, which costs memory (though  is sparse, so not too much).I convert the values of the map into floats once and store them in , which also costs memory, but saves having to repeatedly perform the conversions.The line marked as a potential bug replicates a feature of your algorithm:  replicates the adding the value from  when looping over , so the OP adds this value twice.Running some simple benchmarks, this version of the algorithm runs about 70 times faster, give or take.  My guess is most of that comes from the removal of the loop over .


Answer URL
https://docs.python.org/3/library/functions.html#zip
