Natural Text
In Python 3.5, say I have:I want to get the list  from the class.I know I can do:Is there a way to get  without instantiating an object?
No because the attributes are dynamic (so called instance attributes).  Consider the following,In the first print, only  was set, so that's the only attributes that's shown when printing the attribute keys.  But after calling , you create a new attribute to  and now printing it show both  and .
Warning -The following isn't foolproof in always providing 100% correct data. If you end up having something like  in your , you will end up including the  in your collection of attributes, which is not a wanted result for your goals. Furthermore, if you happen to add a dynamic attribute somewhere in your code like , then you will never see that either. Be aware of what it is that you are inspecting at what point of your code, and understand why you have and don't have those inclusions in your result. There are probably other "breakages" that will not give you the full 100% expectation of what are all the attributes associated with this class, but nonetheless, the following should give you something that you might be looking for. However, I strongly suggest you take the advice of the other answers here and the duplicate that was flagged that explains why you can't/should not do this. The following is a form of solution you can try to mess around with: I will expand on the  answer.However, I do question (and probably would advice against) the validity of doing something like this in production-ready code. For investigative purposes, sure, knock yourself out. By using the inspect module as indicated already in one of the other answers, you can use the getmembers method which you can then iterate through the attributes and inspect the appropriate data you wish to investigate.For example, you are questioning the dynamic attributes in the Therefore, we can take this example to illustrate: Your output will be a tuple: Ultimately, as you inspect the class  to get its members, there are attributes you can further investigate as you iterate each member. Each member has attributes to further inspect, and so on. For this particular example, we focus on  and inspect the  (per documentation: The  object representing the compiled function body) attribute which has an attribute called  which provides a tuple of members as indicated above with the output of running the code.
As LÃ¦rne mentioned, attributes declared inside of functions (like ), are dynamic. They effectively don't exist until the  function is called.However, there is a way to do what you want.You can create class attributes, like so:And you can access those attributes like this:Which gives this result:


Answer URL
https://docs.python.org/3/library/inspect.html
https://docs.python.org/3/library/inspect.html#inspect.getmembers
