Natural Text
Suppose I want to generate index for a large header row automatically using forloop, to prevent writing index for each header.In a file, I have say a header with lots of fruits name. Each column has a data which I have to access using index for downstream parsing. Rather than preparing index for each fruit name, I want to run a forloop to create the index values on fly to save time.How can this be made possible? in a very simply way.Post Edit: After doing a lots of reading, I realized that it is possible to create a  using  of another varible in bash:how to use a variable's value as other variable's name in bashhttps://unix.stackexchange.com/questions/98419/creating-variable-using-variable-value-as-part-of-new-variable-nameBut, not possible in python as I had thought. My gut feeling is that, it is possible to prepare this method within python programming language (if hacked or if author decided), but it is also possible that author of python thought and knew about possible dangers or using this method.The danger is that you always want  to be visible in the written python script. Preparing a dynamic variable_names would have been nice, but it could lead to a problem when tracing back, if any problem arose. Since, the variable name was never typed in it would be a nightmare to track and debug if any problem arose (especially in large programme), say when the variable_value was like  or  which is not a valid variable_name.This is my thought. Please other people can chime in as to Why this capability was not introduced in python?Dict method over comes this issue since we have the record of the origin of the , but still the issue with valid vs. invalid variable_name doesn't go away.I am going to take some the provided answer using  and see if I can work out a very simple-comprehensive way of making this possible.Thanks everyone !
Hopefully the code below will give you some ideas on ways that you might move forward. There are actually better ways than these to do some of these things, but for a beginner it is best to learn the basics first. Mind you: there's nothing really WRONG with the code below, but it could be a lot shorter and even more usable if we used some more advanced concepts. If you want to have a look at ALL the fruits (in the original order as before), you can do that this way: If you don't care about the order ( do not have order*), you can forget about your fruits list and just loop over the data dictionary itself: OR to get the values (the data lists), use  ( in Python 2.7):OR to get both the keys (fruits) and the values, use  ( in Python 2.7):TIP: if you want to mutate (change) the dictionary, DO NOT use . Instead, you need to make sure you use the , , or  ( in Python 2.7) methods. If you don't, you will have problems:* Quick note: s have been undergoing some changes and it is very likely you will be allowed to assume that they will actually remember their order in the upcoming next version of Python (3.7). 
EDIT: now that the question has been edited I'll provide a much more useful answer later if I have time. I don't fully understand what it is you actually are trying to do, but here are some things that might help. The thing to recognize is you already have an object that has all the information you are after in it: a list with all the object names. By its very nature, your list of names already has the indexes in it. The data exists; it is there. What you need to do is learn to access this information the right way. What you probably need is the  function. This function generates a two tuple (which is a pair of objects) that contain the list indexes and the contents of the list as you go: There is no reason to STORE these indexes in some other data structure; THEY ARE ALREADY IN your list. If you insist that you want to access some arbitrary value by some name (a string), you should do that with a dictionary, or : However, since you are after the index values, this seems a little bit odd to do because a  by its very nature is intended to be un-ordered. And as I have said, you already KNOW the indexes in your list. Storing indexes with the names a second time most likely makes little sense, although there may be situations where you'd want to do it. 
The built-in functions  and  are relevant here.From the Python documentation:: "The expression argument is parsed and evaluated as a Python expression": "This function supports dynamic execution of Python code"Really, you only need  for your problem, as follows:(Notice that we need quotes in the second , since otherwise Python will think that you are trying to get the index of some variable named , rather than passing it the string .If you now type  (for example) into your console, it should return .


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
https://docs.python.org/3/library/functions.html#eval
