Natural Text
I am trying to wrap my head around python asyncio. The output (from Jupyter notebook)I have the following questions about the above programIn this case is the function  considered a coroutine (as in contains  statement?does ensure_future() creates a separate task/process each time it is called? In that sense is it analogous to fork()The current loop is running for ever. How do I gracefully exit after say 10 iterations.?
In this case is the function print_time considered a coroutine (as in contains yield statement?You can create coroutine from function when you need it (for example, if it should await another coroutine). To create coroutine you should use special decorator  (or define coroutine with  in Python 3.5+):In your case generator considered as coroutine only because asyncio's coroutines implemented using generators. You shouldn't use regular generators as coroutines, instead you should always explicitly use decorator  (or ) to create coroutines.does ensure_future() creates a separate task/process each time it is called? In that sense is it analogous to fork() doesn't create OS thread or process. Usually all your coroutines/tasks run in single OS thread, single process. is a way to rule flow of execution your async script. When you just await for some coroutine, code below it would be run only after coroutine finished.  allows you to "run coroutine in background" without blocking code below it from execution.Example 1:Example 2:The current loop is running for ever. How do I gracefully exit after say 10 iterations.?You have many ways to do it, depending of how you want your code to work. Here's one, for example:Output:


Answer URL
https://docs.python.org/3/library/asyncio-task.html#tasks-and-coroutines
