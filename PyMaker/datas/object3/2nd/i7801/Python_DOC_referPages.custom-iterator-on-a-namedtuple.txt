Natural Text
Is there a pythonic way to have a custom iterator on a namedtuple?A custom iterator appears to require an index attribute. Normally a namedtuple has a "" declaration, which avoids the overhead of a dynamic dict and reduces latency in attribute lookup. However, this breaks the iterator (). Adding  to the slots results in Context: I will be working with a large number of Bezier splines. Each spline consists of a list of 'knot' points, and list of pairs of control points. By commenting out the  declaration, my code works. But, at the cost of having a per-instance dynamic dict. The overhead from the dict in attribute lookup is probably negligible compared to everything else, but it doesn't seem pythonic.The SVG method uses the iterator to make SVG formating trivial. This:Results in:But it also is trivial to use in the  of a Gtk.DrawingArea:Note: the 'knots' is a  and 'ctrl_pts' is a :I am very new to python and I am certain this can be done in a more pythonic way.
To make your code work as is, add  to the attribute list in the call to namedtuple().Note that inheriting from a namedtuple class makes further sub-classing less useful because inheritors can not add new attributes. This may or may not matter in your application. As an alternative you can inherit from  and call out the attribute names in . This will preserve much of the performance benefits of inheriting from a namedtuple, and make it so that inheritors can define new attributes in their .Changes below include: now returns a generator that manages looping for you so you don't need  anymore. Check out itertools for interesting ways of creating iterators. Defining  is often more work than is necessary.The svg property now accumulates strings in a list and then joins them. This is usually faster than the increment operator on str.The last bit is changing the svg property to lowercase. This is purely style but it is more in line with the core language's style guide. .
Rather than implementing the iterator protocol manually, make  a generator for the values you want.  The generator object implements the iterator protocol for you.If you only expect  to be used as part of , you really don't need it, and can use something like this:


Answer URL
https://docs.python.org/3/library/itertools.html
