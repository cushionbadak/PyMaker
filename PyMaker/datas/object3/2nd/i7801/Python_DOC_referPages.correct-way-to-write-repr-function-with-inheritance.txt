Natural Text
I'm experimenting with OOP python and I wasn't sure about the  function inheritance. Since the parent class function looked like this:I wanted to know if it is better to use a generic approach (which could be suitable for children classes as well) like the following one:or if it is a good practice to override the function in every class.Also, please ignore the encoding part, since I'm leaving it behind.
Well the  has a special meaning in Pythons data model:Called by the  built-in function to compute the “official” string representation of an object. If at all possible, this should look like a valid Python expression that could be used to recreate an object with the same value (given an appropriate environment). If this is not possible, a string of the form  should be returned. The return value must be a string object. If a class defines  but not , then  is also used when an “informal” string representation of instances of that class is required.This is typically used for debugging, so it is important that the representation is information-rich and unambiguous.That means the string that is returned by  should be usable to create another object just like it. So  is something that quite often needs overriding, not because of the  but because the "state" has to captured in the representation.Then you absolutely should override the  when you add parameters for :But in case the  of the superclass still accuratly "describes" the subclass then there's no point overloading the :However it's always a good choice to use  over hard-coding the class name, just in case you or someone else subclasses it.
Yes - - it is not just "ok", but it is what is more practical in almost every project and class hierarchy.Actually, this is almost a perfect "text book example" of when to use class inheritance, and just let the code in the superclasses be reused. 
Here, you can have a look, how I inherited the  method from Pesron class in Student class.Main():Base class: PersonDerived class: Student


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__repr__
