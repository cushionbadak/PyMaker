Natural Text
We are building a library, and part of that is a module that provides different database interfaces on different systems.We'd like to skip imports that aren't used. For instance, on a system that has , we will use  and should not require  to be installed. That is, on system A, we would use it like this:Obviously, this will not work:We assumed that moving the imports into the classes that use them would work, since the library client won't import something it's not using, but it still has failed dependencies.What is the correct way to do this? Is it even possible?
Why don't you wrap your imports in a try-except block?  This should allow to run your script even if neither module is installed.  You can modify the above method to track if the imported modules exist in order to verify if a class can be used on a certain system.   Then you could store that information in a class variable and check it before instantiating the class.  Or you could use a dictionary (eg ) and import it along with your class.  


Answer URL
https://docs.python.org/3/library/modules.html
