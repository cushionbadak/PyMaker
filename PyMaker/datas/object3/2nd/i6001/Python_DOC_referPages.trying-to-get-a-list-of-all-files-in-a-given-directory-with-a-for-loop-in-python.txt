Natural Text
How can I list all files of a directory in Python and add them to a ?
 will get you everything that's in a directory - files and directories.If you want just files, you could either filter this down using :or you could use  which will yield two lists for each directory it visits - splitting into files and dirs for you. If you only want the top directory you can just break the first time it yieldsAnd lastly, as that example shows, adding one list to another you can either use  or Personally, I prefer 
I prefer using the  module, as it does pattern matching and expansion.It will return a list with the queried files:
will return a list of all files and directories in "somedirectory".
Get a list of files with Python 2 and 3I have also made a short video here:  Python: how to get a list of file in a directoryos.listdir()or..... how to get all the files (and directories) in the current directory (Python 3)The simplest way to have the file in the current directory in Python 3 is this. It's really simple; use the  module and the  function and you'll have the file in that directory (and eventual folders that are in the directory, but you will not have the file in the subdirectory, for that you can use walk - I will talk about it later).Using globI found glob easier to select the file of the same type or with something in common. Look at the following example:Using list comprehensionGetting the full path name with os.path.abspathAs you noticed, you don't have the full path of the file in the code above. If you need to have the absolute path, you can use another function of the  module called , putting the file that you get from  as an argument. There are other ways to have the full path, as we will check later (I replaced, as suggested by mexmex, _getfullpathname with ).Get the full path name of a type of file into all subdirectories with I find this very useful to find stuff in many directories, and it helped me find a file about which I didn't remember the name:os.listdir(): get files in the current directory (Python 2)In Python 2 you, if you want the list of the files in the current directory, you have to give the argument as '.' or os.getcwd() in the os.listdir method.To go up in the directory treeGet files: os.listdir() in a particular directory (Python 2 and 3)Get files of a particular subdirectory with os.listdir()os.walk('.') - current directoryglob module - all filesnext(os.walk('.')) and os.path.join('dir','file')next(os.walk('F:\') - get the full path - list comprehensionos.walk - get full path - all files in sub dirsos.listdir() - get only txt filesglob - get only txt filesUsing glob to get the full path of the filesIf I should need the absolute path of the files:Other use of globIf I want all the files in the directory:Using os.path.isfile to avoid directories in the listUsing pathlib from (Python 3.4)If you want to use list comprehension*You can use also just pathlib.Path() instead of pathlib.Path(".")Use glob method in pathlib.Path()output:Get all and only files with os.walkGet only files with next and walk in a directoryGet only directories with next and walk in a directoryGet all the subdir names with os.scandir() from Python 3.5 onEx. 1: How many files are there in the subdirectories?In this example, we look for the number of files that are included in all the directory and its subdirectories.Ex.2: How to copy all files from a directory to another?A script to make order in your computer finding all files of a type (default: pptx) and copying them in a new folder.Ex. 3: How to get all the files in a txt fileIn case you want to create a txt file with all the file names:Example: txt with all the files of an hard driveAll the file of C:\\ in one text fileThis is a shorter version of the previous code. Change the folder where to start finding the files if you need to start from another position. This code generate a 50 mb on text file on my computer with something less then 500.000 lines with files with the complete path.A function to search for a certain type of file
A one-line solution to get only list of files (no subdirectories):or absolute pathnames:
Getting Full File Paths From a Directory and All Its SubdirectoriesThe path I provided in the above function contained 3 filesâ€” two of them in the root directory, and another in a subfolder called "SUBFOLDER."  You can now do things like: which will print the list:If you'd like, you can open and read the contents, or focus only on files with the extension ".dat" like in the code below:
Since version 3.4 there are builtin iterators for this which are a lot more efficient than :: New in version 3.4.According to PEP 428, the aim of the  library is to provide a simple hierarchy of classes to handle filesystem paths and the common operations users do over them.: New in version 3.5.Note that  uses  instead of  from version 3.5, and its speed got increased by 2-20 times according to PEP 471.Let me also recommend reading ShadowRanger's comment below.
I really liked adamk's answer, suggesting that you use , from the module of the same name. This allows you to have pattern matching with s.But as other people pointed out in the comments,  can get tripped up over inconsistent slash directions. To help with that, I suggest you use the  and  functions in the  module, and perhaps the  function in the  module, as well.As examples:The above is terrible - the path has been hardcoded and will only ever work on Windows between the drive name and the s being hardcoded into the path.The above works better, but it relies on the folder name  which is often found on Windows and not so often found on other OSs. It also relies on the user having a specific name, .This works perfectly across all platforms.Another great example that works perfectly across platforms and does something a bit different:Hope these examples help you see the power of a few of the functions you can find in the standard Python library modules.
Preliminary notesAlthough there's a clear differentiation between file and directory terms in the question text, some may argue that directories are actually special filesThe statement: "all files of a directory" can be interpreted in two ways:All direct (or level 1) descendants onlyAll descendants in the whole directory tree (including the ones in sub-directories)When the question was asked, I imagine that Python 2, was the LTS version, however the code samples will be run by Python 3(.5) (I'll keep them as Python 2 compliant as possible; also, any code belonging to Python that I'm going to post, is from v3.5.4 - unless otherwise specified). That has consequences related to another keyword in the question: "add them into a list

If you are looking for a Python implementation of find, this is a recipe I use rather frequently:So I made a PyPI package out of it and there is also a GitHub repository. I hope that someone finds it potentially useful for this code.
Returning a list of absolute filepaths, does not recurse into subdirectories
Here I use a recursive structure.
For greater results, you can use  method of the  module along with a generator (a generator is a powerful iterator that keeps its state, remember?). The following code works fine with both versions: Python 2 and Python 3.Here's a code:The  method returns the list of entries for the given directory. The method  returns  if the given entry is a file. And the  operator quits the func but keeps its current state, and it returns only the name of the entry detected as a file. All the above allows us to loop over the generator function.Hope this helps.
I am assuming that all your files are of  format, and are stored inside a directory with path .One can use glob module of  to list all files of the directory, and add them to a list named , in the following manner:

Using generators
You can use this code, for get iterator that run all over the full path of files (Directories + file name). Or use that, for get it in list.

Use this function if you want to use a different file type or get the full directory:
Another very readable variant for Python 3.4+ is using pathlib.Path.glob:It is simple to make more specific, e.g. only look for Python source files which are not symbolic links, also in all subdirectories:
A wise teacher told me once that:When there are several established ways to do something, none of them is good for all cases.I will thus add a solution for a subset of the problem: quite often, we only want to check whether a file matches a start string and an end string, without going into subdirectories. We would thus like a function that returns a list of filenames, like:If you care to first declare two functions, this can be done:This solution could be easily generalized with regular expressions (and you might want to add a  argument, if you do not want your patterns to always stick to the start or end of the filename).
Here's my general-purpose function for this.  It returns a list of file paths rather than filenames since I found that to be more useful.  It has a few optional arguments that make it versatile.  For instance, I often use it with arguments like  or .
For python2:pip install rglob
I will provide a sample one liner where sourcepath and file type can be provided as input. The code returns a list of filenames with csv extension. Use . in case all files needs to be returned. This will also recursively scans the subdirectories. Modify file extensions and source path as needed. 
To get all files from a specified folder (including subdirectories as well).
to display full path and filter with an extension, use,change number 5 based on the '.' + 'characters in extension/type of file'


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#more-on-lists
https://docs.python.org/3/library/glob.html
