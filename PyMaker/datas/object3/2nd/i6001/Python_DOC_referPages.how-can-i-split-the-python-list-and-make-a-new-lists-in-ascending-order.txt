Natural Text
In the PythonIf there are lists,I want to split the list when the size is reduced like thisHow do I code it?
You can use Pandas to do this in three lines:Output:Details how it works:First create a pandas series from the list, then use the  method in pd.Series to get the difference from the previous value:The negative values are indicate the start of a new "sub" list.  So, we use  to mark those records where a new "sub" list should start.Next, we are going to use  to create a grouping term.  will only increment when True, so all falses that are next to each other get the same value, then True increments and next group of falses get that new value, until the next True.Now, we can use  with  to create a new series with these sublist as rows.  We are grouping on that newly create grouping term from above and apply the python  to those values in a that group, thus creating the "sub" list.Lastly, we apply the  method on the series to return the series as a list.Final Output:
This might be the algorithm you are looking for - It outputs a list of sorted lists - Let me know if that helps.
If you are looking to split the list when the next number is less than previous one than this might help:Output: Hope this helps.
Just for fun, I wanted to see if you could rework the code given in the docs as a sample implementation of  to suit your needs in a general way. The result is a generator whose elements are sub-generators representing your sub-lists. The determination when to split is done by a user-defined function of two variables that accepts each successive pair of neighboring elements and returns  when they are in different groups:The whole thing can be applied to your input list with a splitter function of  or  if your list will only ever contain ints. A suitable wrapping in  will not only properly consume the elements, but will also make the output match your question:The result is:Here is an IDEOne link: https://ideone.com/UW483UTL;DRThis is massive overkill for most situations, so don't do it this way. I was just having some fun, but the code here does technically solve your problem. If you put the class into your library somewhere, the actual usage is a one-liner.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/library/operator.html#operator.gt
https://docs.python.org/3/reference/datamodel.html#object.__gt__
