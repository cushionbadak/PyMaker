Natural Text
I've created my own thread class that will be used in a threadpool as follows:In the main thread of the program, after I have processed all of my files, I try and shut down the threadpool as follows:My understanding is that if I call  it will block the calling thread, in this case the main thread, from continuing until the joined thread finishes processing. My issue is that despite the thread completing, it never returns to the main thread and the program just hangs. Am I doing anything wrong when shutting down my threadpool?
if  is a  or , then its  method will block until something arrives in the queue. Try using  but you may have to wrap it in a try block if you want execution to continue even when the queue is empty.see queue docs for more
There are two things. First, from a design standpoint it's a bit odd to have the  flag be at the class-level. It's usually better to have it be a flag on each class instance.Second, you have a race condition. The  flag is accessed by more than one thread, and not protected by a synchronization primitive, such as a mutex. This means that the  call can be run (and the flag set) after any worker thread checks the flag, but before that thread tries to dequeue the next filename. Because you're calling  without a timeout, the worker thread will hang here, and the main thread will block in the  call. Deadlock ensues.There are many ways around this. You can use a thread-synchronization primitive such as a mutex to protect the  flag, or use a  object in place of a simple boolean. Another, and in my opinion simpler, solution is to send a "sentinel" value on the same queue, which indicates that the thread should quit. It looks like you're sending string filenames, so an empty string could be a good choice. ( is also commonly used.)The work-loop for each thread now looks like this:Rather than the  static method, the main thread places an empty string (i.e., ) for each worker thread you have.


Answer URL
https://docs.python.org/3/library/threading.html#threading.Thread
