Natural Text
Is there a difference between using  and  for getting the current user's username on Linux?At different times I've seen someone recommend looking at the environment variables  or , and other times  was recommended.So I'm curious: is one preferred, or are there situations where you would use one over the other, or are they simply two ways of doing the same thing?
Update: use  conveniently searches through the various user environment variables to get the username.  This avoids the issues with  enumerated below.If you're worried about people modifying the environment variables, then use .From the docs:This function checks the environment variables , ,  and , in order, and returns the value of the first one which is set to a non-empty string. If none are set, the login name from the password database is returned on systems which support the pwd module, otherwise, an exception is raised.In general, this function should be preferred over .From the Python docs for :For most purposes, it is more useful to use  since the latter checks the environment variables  or  to find out who the user is, and falls back to  to get the login name of the current real user id.Old Answer: Problems with TL;DR can throw errors when run in certain situations.  Using the , , , etc. environment variables (after checking that they exist) is the safer option.  If you're really worried about people changing the environment variables, then you can pull the username from the current process ID using .Longer explainationOne issue with  is that you can`t run it without a controlling terminal.  From the docs:os.getlogin()Return the name of the user logged in on the controlling terminal of the process. For most purposes, it is more useful to use the environment variables LOGNAME or USERNAME to find out who the user is, or pwd.getpwuid(os.getuid())[0] to get the login name of the current real user id.If you try to call  without a controlling terminal, you will getSo using the , , , etc. environment variables is safer than .  If you're really worried about people changing the environment variables, then you can use .
 can lie, with no security controls at all,  doesn't have that problem.If you're using the ID check for security purposes of any kind, don't rely on the environment.Example, running as user , checking the environment would tell you you're root when run like so in :
I guess in UNIX based systems it really just comes down to personal preference. I'd use  if I plan to write the code for other platforms such as windows. Moreover, enviroment variables and easier be manipulated. so it's more secure to use it in cases where security is a priority.


Answer URL
https://docs.python.org/3/library/getpass.html#getpass.getuser
https://docs.python.org/3/library/getpass.html#getpass.getuser
https://docs.python.org/3/library/os.html#os.getlogin
https://docs.python.org/3/library/os.html#os.getlogin
