Natural Text
This question already has an answer here:Boolean operators vs Bitwise operators                    8 answers                Below are the different scenarios tried using '&' and 'and' conditional operators and its result. (using Python 2.7)Using '&' operator:Using 'and' operator:Wondering why both conditional operators showing different behaviour?Explanation with real scenarios would be helpful.Thanks in advance.
 is not a conditional operator. It stands for the bitwise and. Not only it is a different operator but also the operator precedence is different ( is below  while  is above).So first of all an example:Now lets analyze your case:Now the operator precedence kicks in and the last line is equivalent toNote that  and  have equivalent precedence. So lets evaluate that:The last line is equivalent to  (when operators have equal precedence then you simply go from left to right). Lets evaulate that:All in allCan you break down the evaluation for your second statement now?
The issue is that  is not actually a logical "and", it's a bitwise operator. So it'll compare two numbers by each bit, and produce a number that has a bit set if both of the first two numbers had that bit set. So  will give you 0.This wouldn't usually be a problem (True is 1, False is 0) - except that the operator precedence for & and  relative to  and  are different.So  (the first case):This is interpreted as , or , and since  is False the whole thing is False.Whereas  (the second case):This is interpreted as , and since both of those cases are True, the whole thing is True.
and tests whether both expressions are logically True while & (when used with True/False values) tests if both are True.
 is a bitwise AND operator, whereas  is a logical operator.


Answer URL
https://docs.python.org/3/reference/expressions.html#operator-precedence
