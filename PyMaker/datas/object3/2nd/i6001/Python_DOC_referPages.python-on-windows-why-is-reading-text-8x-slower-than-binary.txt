Natural Text
I am running python 3.6 on Windows 10 (both 64 bit) with a fast SSD, 32GB RAM and a very fast processor (AMD Threadripper). I also get similar results running on an Intel i7. I am opening XML text files about 5MB in size and noticed very slow performance even using lxml. I boiled the problem down to disk read performance. If I load as binary, it is over 8x faster. The following tests were performed with the file already in disk cache. The disk was never hit during these runs. Similar results were obtained with a cold read.I understand the encoding has to be processed for the text version, but 8x slower seems excessive running on a fast processor. Also, 1.6ms seems slow to me to read such a small file already in cache. Disk performance measured with Passmark is as expected at > 2GB/s. Any advice/suggestions would be appreciated. Thanks.
When you're using , the file can be read with an unlimited/very big block size directly in the final buffer memory ().When you're using , the file must be read with a smaller block size in order to be able to post-process the blocks & remove the  chars before the  chars (if it's not done char by char, which would be the easiest but the slowest way)if you can afford to duplicate the memory (which  mode doesn't do), I would suggest:also to save decoding & replacing as comments stated:


Answer URL
https://docs.python.org/3/library/functions.html#open
