Natural Text
I came around this question and got quite disappointed by how the tensorflow developers try to make the  directory appear as the actual package, whereas the actual package root is actually . By using a  file of the formthey try to achieve this goal. This results in some inconsistent behaviour (at least so it seems to me) when working with the package, e.g.Now, I was wondering whether/how it could be possible to avoid most/all of these issues to get a more consistent behaviour. The first set of inconsistencies could be easily resolved by not deleting the  attribute. However, given that the goal would be to make the complete package appear as if it is a sub-package, this might not be entirely satisfactory.To keep things simple, let's consider the following package structurewhere  looks something likeand  would bewould it be possible to create  so that the following worksI believe that the last four lines of code should give the expected result by adding to , but I do not seem to be able to find a way to make  fail.Would anyone have an idea on how this could be done? Feel free to point me to use-cases that I am overlooking or should consider to achieve the above-mentioned goal.
First of all - I must say that I literally hate "shady" techniques like this. It has a bad effect on various IDE intellisense and makes the library structure less understandable. But still...If you want the submodule code.py to act as an actual subpackage, you need to create a dummy module:Add this in code/__init__py:And this in package/__init__.py:And then this part should work as intended:If you further add this to the package/__init__.py:You basically disconnect user from accessing package.api, but nothing else, and they can still access the submodule through subpackage using 'from x import y':
I managed to write something that almost works (in ):The import errors suggest that it is still quite a hack, but apart from that most all of the examples work as specified iff the package has already been loaded once (i.e. if  or alike has been invoked before running the statements from my question). If the first statement is , there is thus no  as I would like. In an attempt to find a solution for this problem, I stumbled upon this answer, which practically leads to the same behaviour with much more elegant code:However, this still suffers from the problem that if the first import is something like , no  is thrown. 


Answer URL
https://docs.python.org/3/reference/import.html
