Natural Text
I would like to construct list  from two lists  and . I want all elements from  be placed where  elements point. For example:So,  must be Another example:So,  must be I've written function that does what I want but it looks ugly:How to write it in pythonic way?
If the lists are very long, repeatedly calling  might not be very efficient. Alternatively, you could create two  from the lists and construct a list by getting the  element from either of the iterators depending on whether the current index is in  (or a  thereof):Note: this will insert the elements from  in the order they appear in  itself, i.e. the first element of  is inserted at the lowest index in , not necessarily at the first index in . If the elements of  should be inserted at the index of the corresponding element of , then either  has to be in ascending order (i.e. the first index of  is also the lowest), or the iterator of  has to be sorted by the same order as the indices in  (afterwards,  itself does not have to be sorted, as we are turning it into a  anyway).
You should use , this is what it was made for!and a test:
With large lists, it might be a good idea to work with .Algorithmcreate a new array as large as calculate coordinates for  valuesassign  values to  at assign  values to  at The complexity should be , with  being the total number of values.As a bonus, it also works fine when  isn't sorted:PerformanceWith  set to 1 million, this approach is a bit faster than @tobias_k's answer and 500 times faster than @Joe_Iddon's answer.The lists were created this way:Here are the results with  and IPython:
Assuming that the  indices are sorted, here is another solution using iterators, though this one also supports  of unknown or infinite length:
If you want the elements in  to be placed at the  index where each element's index in  should correspond with the same  index's element:Initialize  to the required size using all null values.Iterate through the zipped  and  elements to fill in each corresponding  element into .Iterate through  and replace each remaining null value with  values where each replacement will choose from  in increasingorder.
Pythonic wayoutput[11, 12, 13, 14, 15]In a functionoutoput[11, 12, 13, 14, 15]Using zip[out:] 


Answer URL
https://docs.python.org/3/library/timeit.html
