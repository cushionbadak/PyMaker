Natural Text
What would be the way for python decorator to become "polymorphic"? What I mean is it seeks for one exact parameter of decorated function, does something to/with it, then passes the modified parameter to the function. However, this parameter with common name has arbitrary position in any decorated function.
With keyword arguments (kwargs) this would be easy since *kwargs gives you the names and values of keyword arguments inside the decorator. So you would receive something like this:would give you:So you could just search for "exactly_this_param" and change it ..BUT you chose to use normal args. This is one step more but also possible.So here is a possible solution: (I used python 3)With "non keyword arguments" (args) you can use the combination of:args -> gives you a tuple of the actual values of this func callfunc.code.co_varnames -> gives you the argument names as in the function definitionI assigned them to the varaible func_paramsSo you can look for the index of "exactly_this_param" in func.code.co_varnames and change the value in args at exactly this index as well.  This is this block:You also have to convert args to a list (new_args) and back to a tuple, since tuples are immutable in python.This results in something like this (example code - but running):The resulting output shows that the paramter is always found and changed to 999.Answer based on this SO question.


Answer URL
https://docs.python.org/3/library/inspect.html
