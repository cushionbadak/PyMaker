Natural Text
I'm starting here a new topic that will be linked with this question.I invite you to just read on the background in order to get the global idea.So I’ve a download function which relies on a python 3.2 API (developed by a private company). The process can take up to 400 seconds per file.Obviously, I don't have only one file to download, so I've been trying for days to put every download process in a thread pool. Each thread in the pool should be completely autonomous from the GUI Main Thread. When one of them has finished, it should just send a signal to the GUI.I did several tests but whatever the technique used, but the GUI is freezing;the result is only given at the end of the processing of all threads and not – as wanted – one by one.I think that the download method given by the API is a blocking function that can't be threaded.So my question is simple: how to know if a I/O method can be handled through a thread.November 24,2017 UpdateYou will find below a first draft (with the tandem multiprocessing.pool / map_async) that partially meets my expectations. As you will see, I unfortunately had to insert a "Busy Waiting Loop" in order to get on the QPlainTextEdit some information on what was going on.The results of the tasks are given only at the end of the global processing (behaviour map_async). That's not exactly what I'm looking for. I would like to insert a little more real time and see for each completed task its message immediately on the console.QuestionsAt first glance does the above code for you present conceptual errors?Do I have to use the apply_async method in this specific case to get something more interactive?Could you guide me on how to use a callback function to post a custom event to update the console (methodology suggested by @ekhumoro)?November 25,2017 UpdateI had a try with apply_async:with a callback:Unfortunately, by doing this way the application crashes. I think I'll have to put a lock mechanism to prevent all the tasks from writing in the text edit at the same time.
Below is a simplified version of your example script that shows how to post a custom event using a callback. Each job is processed separately via , so a simple counter is updated to indicate when all the jobs have been completed.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing
