Natural Text
I recently wrote this Python 3 code that is supposed to alternate among all iterables given to it. That is, if the function is given as arguments  then it yields . If  runs out before the others, then it is skipped:  until all iterables are exhausted.Here it is. It is functional, but it doesn't look very "pythonic". I especially don't like having to keep an array of flags that tell me if the generators are empty.
You are basically re-implementing the  function documented in the itertools documentation recipes section:This cycles through iterators and slicing off the last one each time a  exception is raised; that last iterator is always the one that just got exhausted.Specifically, for the input example,  starts as a circular list of , in those positions, and  is , after which the algorithm then progresses through:yielding  and leaving yielding  and leaving yielding  and leaving yielding  and leaving trying to yield but hitting a  exception; the cycle is then at , so  becomes ,  sets the cycle to  and  loop continues toyielding  and leaving yielding  and leaving after which the final two empty iterators trigger further  exceptions, and  goes from 2 to 1 to 0 and the  loop ends.You could implement the same with a  object, and manual rotation:but this approach is slower than the  variant, as rotation is done 'manually', incurring a cost every iteration, outweighing the simpler 'exhausted' exception case implementation.Like your approach, this saves you having to repeatedly attempt to iterate over any already-exhausted iterators, and unlike the  approaches posted by others, doesn't require you to test for a sentinel value ( or  or ) each iteration.
You zip the  and  them together


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/itertools.html#itertools-recipes
