Natural Text
I have some fairly hairy unicode strings with numbers in them that I'd like to test the value of.  Normally, I'd just use  to test for whether it could be converted via  but I'm encountering cases where  returns  but  raises an exception.Here's an example program:Unicode is always full of surprises, so I'm happy to just be robust to this case and use a try/except block to catch unusual numbers.  However, I'd be happier if I could still convert them to integers.  Is there a consistent way to do this?
If you want to test if a string can be passed to , use . Both  and  include decimal-like characters that aren't compatible with .And as @abarnert has mentioned in the comments, the most guaranteed way to test if a string can be passed to  is to simply do it in a  block.On the other hand, '‚íç' can be converted to an actual digit with the help of the  module, e.g.would output .
I don't know how much luck you'll have, but unicodedata may handle some cases (python 3 code):Slightly better. As to testing, if you want an int you could just int() it and catch the exception.
The best way to find out if a string can be converted to int is to just  it:Sure, you can try to figure out the right way to test the string in advance, but why? If the rule you want is "whatever  accepts", just use .If you want to convert something that is a digit, but isn't a decimal, use the  module:The  character's entry in the database has Digit and Numeric values, despite being a  rather than a  (and therefore not being compatible with ).


Answer URL
https://docs.python.org/3/library/unicodedata.html#unicodedata.decimal
