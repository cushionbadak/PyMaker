Natural Text
I have a  array for example . I would like to get the number of objects that contain each prefix such as  so the number of  objects would be 2.so far I've been counting each by filtering the array e.g . I'm not sure if this is slower than looping through all the fields and incrementing each counter since I am filtering the array for each prefix I am counting. Are functions such as  faster than a for loop? For this scenario I don't need to build the filtered list if I use a for loop so that may make it faster.Also perhaps instead of the  I could use list comprehension to make it faster?
You can use  with a regular expression (if all of your strings have prefixes):Output:If not all of your strings have prefixes, this will throw an error, since  will return None.  If this is a possibility, just add an extra step:Output:
Another way would be to use a  object. You just go over the whole list once and count each prefix as you encounter it by splitting at the underscore. You need to check the underscore exists, else the whole word will be taken as a prefix (otherwise it wouldn't distinguish between  and ).The logic is similar to user3483203's answer, in that all prefixes are calculated in one pass. However, it seems invoking regex methods is a bit slower than simple string operations. But I also have to echo Michael's comment, in that the speed difference is insignificant for even 1 million items.Timing results:
If I'm understanding what you're asking for, it seems like you really want to use Regular Expressions (Regex).  They're built for just this sort of pattern-matching use. I don't know Python, but I do see that regular expressions are supported, so it's a matter of using them.  I use this tool because it makes it easy to craft and test your regex.
You could also try using  to extract the string before the separator and the separator, then just concatenate these two to form the prefix. Then you just have to check if this prefix exists in the prefixes set, and count them with :Which Outputs:


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/stdtypes.html#str.partition
https://docs.python.org/3/library/collections.html#collections.Counter
