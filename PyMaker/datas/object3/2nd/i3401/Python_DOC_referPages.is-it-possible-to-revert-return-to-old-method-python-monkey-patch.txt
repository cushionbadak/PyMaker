Natural Text
I use a specialized python module which modifies some of the Django class methods in the runtime (aka monkey-patching). If I need these 'old' versions is it possible to 'come back' to them overriding monkey patching? Something like importing the initial version of these classes, for example?Here is an example of how patching was done in the package:
It depends on what the patch did. Monkeypatching is nothing special, it's just an assignment of a different object to a name. If nothing else references the old value anymore, then it's gone from Python's memory.But if the code that patched the name has kept a reference to the original object in the form of a different variable, then the original object is still there to be 'restored':Here the name  in the  module namespace was re-bound to point to , but the original object is still available as  in the namespace of the patching code.If this is done in a function, then the original could be available as a closure too. For your specific example, you can get the original with:or, if you prefer access by name:Otherwise, you can tell Python to reload the original module with :This refreshes the module namespace, 'resetting' all global names to what they'd been set to at import time (any additional names are retained).Note, however, that any code holding a direct reference to the patched object (such as your class object), would not see the updated objects! That's because  creates a new reference to the  object in the current namespace and no amount of reloading of the original  module will update any of the other direct references. You'd have to update those other references manually, or reload their namespaces too.


Answer URL
https://docs.python.org/3/library/importlib.html#importlib.reload
