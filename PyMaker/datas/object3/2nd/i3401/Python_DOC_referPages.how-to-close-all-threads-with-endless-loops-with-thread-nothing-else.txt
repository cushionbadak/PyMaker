Natural Text
How can I stop the two threads for example in case of KeyboardInterrupts?Because for "except KeyboardInterrupt" the threads are still running :/Important:The question is about closing threads only with the module _thread!Is it possible?
There's no way to directly interact with another thread, except for the main thread. While some platforms do offer thread cancel or kill semantics, Python doesn't expose them, and for good reason.1So, the usual solution is to use some kind of signal to tell everyone to exit. One possibility is a  flag with a  around it:Of course the same thing is a lot cleaner if you use  (or a different higher-level API like Qt's threads). Plus, you can use a  or  to make the background threads exit as soon as possible, instead of only after their next  finishes.The  module doesn't have an  or , of course, but you can always build one yourselfâ€”or just borrowing from the  source.Or, if you wanted the threads to be killed asynchronously (which obviously isn't safe if they're, e.g., writing files, but if they're just doing computation or downloads or the like that you don't care about if you're canceling, that's fine),  makes it even easier:As a side note, the behavior you're seeing isn't actually reliable across platforms:Background threads created with  may keep running, or shut down semi-cleanly, or terminate hard. So, when you use  in a portable application, you have to write code that can handle any of the three. may be delivered to an arbitrary thread rather than the main thread. If it is, it will usually kill that thread, unless you've set up a handler. So, if you're using , you usually want to handle  and call .Also, I don't think your  is doing what you think it is. That  only covers the  calls. If the threads start successfully, the main thread exits the  block and reaches the end of the program. If a  or other exception is raised, the  isn't going to be triggered. (Also, using a bare  and not even logging which exception got handled is a really bad idea if you want to be able to understand what your code is doing.) Presumably, on your platform, background threads continue running, and the main thread blocks on them (and probably at the OS level, not the Python level, so there's no code you can write that gets involved there).If you want your main thread to keep running to make sure it can handle a  and so something with it (but see the caveats above!), you have to give it code to keep running:1.  on Windows makes it impossible to do all the cleanup Python needs to do.  on POSIX systems like Linux and macOS makes it possible, but very difficult. And the semantics are different enough between the two that trying to write a cross-platform wrapper would be a nightmare. Not to mention that Python supports systems (mostly older Unixes) that don't have the full  API, or even have a completely different threading API.


Answer URL
https://docs.python.org/3/library/_thread.html
