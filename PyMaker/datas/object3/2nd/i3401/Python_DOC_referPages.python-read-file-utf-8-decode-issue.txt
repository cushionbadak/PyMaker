Natural Text
I am running into an issue with reading a file that has UTF8 and ASCII character. The problem is I am using seek to only read some part of the data, but I have no idea if I am "read" in the "middle" of an UTF8. osxpython 3.6.6to simply it, my issue can demoed with following code.I know I can open the file in binary then read it without issue by seeking to any position, however, I need to process the string, so I will end up with same issue when decode into string. without using seek, I can read it correctly even just calling read(1).one thing I can think is after seek to a location, try to read, on UnicodeDecodeError, position = position -1, seek(position), until I can read it correctly.Is there a better (right) way to handle it?
As the documentation explains, when you  on text files:offset must either be a number returned by , or zero. Any other offset value produces undefined behaviour.In practice, what  actually does is seek 1 byte into the file—which puts it in the middle of a character. So, what ends up happening is similar to this:So,  happens to work, even though it's not legal, because you happen to be seeking to the start of a character. It's equivalent to this:If you want to rely on that undocumented behavior to try to seek randomly into the middle of a UTF-8 text file, you can usually get away with it by doing what you suggested. For example:Or you could use knowledge of the UTF-8 encoding to manually scan for a valid start byte in a binary file:However, if you're actually just looking for the next complete line before or after some arbitrary point, that's a whole lot easier.In UTF-8, the newline character is encoded as a single byte, and the same byte as in ASCII—that is,  encodes to . (If you have Windows-style endings, the same is true for return, so  also encodes to .) This is by design, to make it easier to handle this kind of problem. So, if you open the file in binary mode, you can seek forward or backward until you find a newline byte. And then, you can just use the (binary-file)  method to read from there until the next newline.The exact details depend on exactly what rule you want to use here. Also, I'm going to show a stupid, completely unoptimized version that reads a character at a time; in real life you probably want to back up, read, and scan (e.g., with ), say, 80 characters at a time, but this is hopefully simpler to understand:Here it is in action:


Answer URL
https://docs.python.org/3/library/io.html#io.TextIOBase.seek
