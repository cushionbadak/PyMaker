Natural Text
I want to make a code which counts all triplets in a sequence. I've read a plenty of posts so far, but none of them could help me.This is my code:Does Biopython provide a function to solve this problem?EDIT:Note that, for instance, in the sequence 'ATGAAG', 'TGA' or 'GAA' are not "valid" triplets, only 'ATG' and 'AAG', because in biology and bioinformatics, we read it 'ATG' and 'AAG', thats the information we need to translate it or whatever else.You can imagine it as a sequence of words, for example "Hello world". The way we read it is "Hello" and "world", not "Hello", "ello ", "llo  w",...
You can use clever techniques, as suggested in the other answers, but I will build a solution starting from your code, which is almost working: Your problem is that every time you do , you reset the count of  to 1.A minimal fixYou could solve this by testing if the key is present, if not, create the entry in the dict, then increment the value, but there are more convenient tools in python.A minimal change to your code would be to use a  instead of a dict. Whenever a new key is encountered, it is assumed to have the associated default value for an int: 0. So you can increment the value instead of resetting:It works as desired:Some possible improvementsNow let's try to improve your code a bit.First, as I wrote in the comments, let's avoid the un-necessary conversion of your sequence to a list, and use a better variable name for the currently counted codon:Now lets simplify the nested loop part, trying all possible codons, by generating in advance the set of possible codons:Now, your code simply ignores the triplets that are not valid codons. Maybe you should instead issue a warning:A more fancy solutionNow a more fancy solution, using cytoolz (probably needs to be installed because it is not part of usual python distributions: , if you are using pip):Hope this helps.
It took me a while to understand that you do not want to count the number of codons but the frequency of each codon. Your title is a bit misleading in this respect. Anyway, you can employ  for your task:Sample output:
You could do something like this:Output:2
It is unclear what output is expected.  Here we use one of many grouping functions from  to build adjacent triplets or "codons".Count the number of codons by calling .For more detailed analysis, consider splitting the problem into smaller functions that (1) extract codons and (2) compute occurrences.CodeDemo


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
