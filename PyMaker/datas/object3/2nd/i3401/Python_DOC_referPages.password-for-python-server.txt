Natural Text
I have the following shell script for a very simple HTTP server:I was wondering how I can enable or add a CORS header like  to this server?
Unfortunately, the simple HTTP server is really that simple that it does not allow any customization, especially not for the headers it sends. You can however create a simple HTTP server yourself, using most of , and just add that desired header.For that, simply create a file  (or whatever) and, depending on the Python version you are using, put one of the following codes inside.Then you can do  and it will launch your modified server which will set the CORS header for every response.With the shebang at the top, make the file executable and put it into your PATH, and you can just run it using  too.Python 3 solutionPython 3 uses  and  from the  module to run the server:Python 2 solutionPython 2 uses  and the  module to run the server.Python 2 & 3 solutionIf you need compatibility for both Python 3 and Python 2, you could use this polyglot script that works in both versions. It first tries to import from the Python 3 locations, and otherwise falls back to Python 2:
Try an alternative like http-serverAs SimpleHTTPServer is not really the kind of server you deploy to production, I'm assuming here that you don't care that much about which tool you use as long as it does the job of exposing your files at  with CORS headers in a simple command lineSome related tools you might find usefulngrok: when running , it creates an url  that permits anyone to access your  server. It can expose to the world what runs locally on your computer (including local backends/apis)localtunnel: almost the same as ngroknow: when running , it uploads your static assets online and deploy them to . They remain online forever unless you decide otherwise. Deployment is fast (except the first one) thanks to diffing. Now is suitable for production frontend/SPA code deployment It can also deploy Docker and NodeJS apps. It is not really free, but they have a free plan.
I had the same problem and came to this solution:I simply created a new class inheriting from SimpleHTTPRequestHandler that only changes the  method.
You'll need to provide your own instances of do_GET() (and do_HEAD() if choose to support HEAD operations). something like this:


Answer URL
https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler
https://docs.python.org/3/library/http.server.html#http.server.HTTPServer
https://docs.python.org/3/library/http.server.html
