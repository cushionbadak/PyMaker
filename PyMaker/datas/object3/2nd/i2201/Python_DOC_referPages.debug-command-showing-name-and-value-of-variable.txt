Natural Text
Often when I need to debug the value of a variable at runtime I use .But when there are many variables, I need to identify the name of the variable along with the value.This way, with several variables, print becomes more laborious:    The ideal would be a simple command, such as:    ... which would automatically add variables as in the print above.The idea would be just to have a simple and quick command to facilitate debugging since during this process it would not be nice to lose focus by building a series of commands just to debug. I already use Pycharm which has an excellent debugging. The problem is that to follow the evolution of values at runtime, I have to use  because the Pycharm debugger shows the values only during a breakpoint. Hence my question, if I had a facilitator, something simple?Is there any simple command to do this?
There is an excellent solution created by user @Anderson Carlos Woss. Here, adapted for English:As discussed, one option for displaying variable debug is using the inspect module. With the help of the inspect.stack function you can check the context where the function was executed and access the local and global variables in this context. So, instead of passing the variable itself to function, you can only pass its name so that the function will be in charge of accessing its value by inspection. For this example I still used the tabulate module to format the output easily and legibly.An example of use would be:See on Repl.itExample call within a functionDebugging a local and a global variable:See on Repl.itHowever, for expression, like doing  the function will not  work. It is possible to implement the function for this, but I believe  it will be impractical. It will be much simpler for you to assign the  expression to another variable and pass it to the function. For  example:Which shows:


Answer URL
https://docs.python.org/3/library/inspect.html
https://docs.python.org/3/library/inspect.html#inspect.stack
