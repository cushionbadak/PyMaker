Natural Text
My teacher challenged me of finding a way to count the occurences of the word "bob" in any random string variable without . So I did,but I wanted to find a way to do that with a word of any length as shown below, but I have no clue on how to do that... 
If you want your search to be case-insensitive, then you can use  function: For the user inputthe first approach will output  and the second approach will output 
To count all overlapping occurrences (like in your example) you could just slice the string in a loop:
You can use string slicing. One way to adapt your code:A more succinct way of writing this is possible via  and a generator expression:This works because  is a subclass of  in Python, i.e.  /  values are considered  and  respectively.Note  won't work here, as it only counts non-overlapping matches. You could utilise  if built-ins are allowed. 
The fastest way to calculate overlapping matches is the Knuth-Morris-Pratt algorithm [wiki] which runs in O(m+n) with m the string to match, and n the size of the string.The algorithm first builds a lookup table that acts more or less as the description of a finite state machine (FSM). First we construct such table with:Then we can count with:The above counts overlapping instances in linear time in the string to be searched, which was an improvements of the "slicing" approach that was earlier used, that works in O(m√ón).


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.find
