Natural Text
I was previously using the  module. Now I'm using  -> . Previously, I was using the following code to exit/kill/finish a thread:This doesn't appear to be working with futures interface. What's the best practice here? Just ? My threads are controlling Selenium instances. I need to make sure that when I kill a thread, the Selenium instance is torn down.Edit: I had already seen the post that is referenced as duplicate. It's insufficient because when you venture into something like futures, behaviors can be radically different. In the case of the previous threading module, my  function is acceptable and not applicable to the criticism of the other q/a. It's not the same as "killing". Please take a look at the code I posted to see that.I don't want to kill. I want to check if its still alive and gracefully exit the thread in the most proper way. How to do with futures?
How about  on the thread result?cancel() Attempt to cancel the call. If the call is currently being  executed and cannot be cancelled then the method will return False,  otherwise the call will be cancelled and the method will return True.https://docs.python.org/3/library/concurrent.futures.html
If you want to let the threads finish their current work use:If you want to bash the current futures being run on the head and stop all ...future...(heh) futures use:This uses your terminate_thread function to call an exception in the threads in the thread pool executor. Those futures that were disrupted will return with the exception set.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
