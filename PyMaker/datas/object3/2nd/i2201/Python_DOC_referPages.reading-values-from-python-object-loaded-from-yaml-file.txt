Natural Text
I have a script that reads a YAML file into a python dictionary.  How do I read the values and concatenate some of them to be more meaningful?Contents of YAML file:
Your yaml file is incorrectly configured. There should be a space between each key and its value. You should have something like:yaml.load will return a dictionary whose values you can access normally.Your code will look like this
Your  is inappropriately formatted.  There should be a space after the  in each of the sub items like so:After that if you do a  it should pass the data correctly as such:Also, you don't need the line  since you already  in its entirety.Once the data is loaded, you can do pretty much anything you wish with it.  You might want to use  or f strings (Python 3.6+) as such:this is called string formatting .  The  bit is essentially unpacking the dictionary within `data['os2'] so you can refer to the keys directly in your string as such:Note that since your  doesn't include the key or value "ubuntu" there's no way for you to get reference that string unless you update your .Also Note: Don't confuse dictionary keys with attributes.  You cannot reference  as no such attribute exist under dictionary.  You can however reference  (note they are in strings) to retrieve the data stored.
Your YAML is perfectly normal, and it loads as you can see here.You have one key () and as value, a multiline plain scalar that loads, following the YAML standard, as a string with a space where the YAML has newline+spaces. That value thus loads as . Since you indicate you expect values (multiple), you either have to introduce make the value for  a flow-style mapping (in which case you must quote the scalars, otherwise you could e.g. not write plain URLs as scalars in valid YAML):or you should follow the guideline from the YAML standard thatNormally, YAML insists the “:” mapping value indicator be separated from the value by white space.You should load YAML (when using PyYAML), using  as there is absolutely no need to use  function, which is documented to be potentially unsafe.With either of the above in , you can do:to get:


Answer URL
https://docs.python.org/3/whatsnew/3.6.html
