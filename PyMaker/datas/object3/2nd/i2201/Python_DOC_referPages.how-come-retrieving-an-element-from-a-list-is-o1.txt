Natural Text
Today in class, we learned that retrieving an element from a list is  in Python. Why is this the case? Suppose I have a list of four items, for example:These items have different sizes in memory. And so it is not possible to take the memory location of  and add three times the size of each element to get the memory location of . So how does the interpreter know where  is without having to traverse the list in order to retrieve the element?
A list in Python is implemented as an array of pointers1. So, what's really happening when you create the list:is that you are actually creating an array of pointers like so:Each pointer "points" to the respective objects in memory, so that the string  will be stored at address  and the number  will be stored at , etc. Since all pointers are the same size, the interpreter can in fact add 3 times the size of an element to the address of  to get to the pointer stored at . 1 Get more details from: the horse's mouth (CPython source code on GitHub). 
When you say ,  is effectively a pointer to a  containing an array of pointers to s.When you ask for , the interpreter first follows the pointer to the list's , then adds  to the address of the array inside it, then returns that pointer. The same happens if you ask for  or .Basically, all Python objects are accessed by reference instead of by value, even integer literals like . There are just some tricks in the pointer system to keep this all efficient. And pointers have a known size, so they can be stored conveniently in C-style arrays.
Short answer: Python lists are arrays.Long answer: The computer science term list usually means either a singly-linked list (as used in functional programming) or a doubly-linked list (as used in procedural programming). These data structures support O(1) insertion at either the head of the list (functionally) or at any position that does not need to be searched for (procedurally). A Python ``list'' has none of these characteristics. Instead it supports (amortized) O(1) appending at the end of the list (like a C++ std::vector or Java ArrayList). Python lists are really resizable arrays in CS terms.The following comment from the Python documentation explains some of the performance characteristics of Python ``lists'':It is also possible to use a list as a queue, where the first element added is the first element retrieved (“first-in, first-out”); however, lists are not efficient for this purpose. While appends and pops from the end of list are fast, doing inserts or pops from the beginning of a list is slow (because all of the other elements have to be shifted by one).


Answer URL
https://docs.python.org/3/c-api/structures.html#c.PyVarObject
