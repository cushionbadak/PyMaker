Natural Text
I am in a beginning coding class and I can not seem to turn the basics I'm taught into a working program with a list this complicated. What functions should I be using to do this?At this point we have not discussed importing any extra features (numpy etc) and I know people use lambda a lot (though I don't really understand what it does), but that has not been introduced in this class. EditSorry, I'm not trying to get an answer. I see how that looks. I feel like I've written out and deleted a million things and that's my problem. I'm having trouble even getting started.I was hoping for a point in the right direction in terms of maybe what commands can grab highest grades etc. all I really have so far is something like:But I know that's not even really getting me started. It doesn't have three inputs and it's not looking for the max, it's looking for the manually entered value 4, and it's not even coming close to tying at back to student names or making another list. Edit 2Also tried that gave an error I was trying to sort the dictionary rather than the list. Edit 3OK, I've maybe made a little headway? These seem to be sorting by assignment. I don't understand what lambda is doing, but I at least can generate a list with the highest grade coming up first. I think that's a baby step. Edit 4Here is a function I created. It seems to get me what I want, it outputs the highest 3 students, but it prints it 5 times? and I know this isn't really flexible but it's a start. output: 
This can be done using  and .  When using  with  we set first . Now you can think of that  representing a list index, so to sort by  we are going to want to go  this will take us to the assignments, then the next step, if our assignment is  we know that that is the  index of  so together it would be . Now we can also  a secondary option and that will be our tie breaker, we will use  and will be in a tuple with our primary sorting factor.  Of course we should use  to get descending scores, but since we want our tiebreaker to be in ascending order we can offset the reverse on  using Altogether the sort looks like this :The tricky part would be choosing the proper assignment index for the passed assignment, for that you could use  (when using  on  we generate a new list that is  in this case we can take now the  index of  which is  as an  and subtract 1 to get  which is the corresponding index, as well as for the rest being that all are off 1 from their index.Demonstration of tie-breaker case, using pseudo scores:Further readingon  https://docs.python.org/3/library/stdtypes.htmlon using https://docs.python.org/3/library/functions.htmlhttps://wiki.python.org/moin/HowTo/Sorting
This is a difficult assignment for a beginner's course. The difficulties are lambdas, multiple-key sorting, lists, list slices and tuples, dictionaries and even ordered versus unordered data types. I've been programming in Python for 10 years and didn't find it straightforward.A lambda is a tiny function that you define on the fly.  takes a function as its second argument. It needs to call this function for each student to generate a sort key. The sort function compares the sort keys of two students to decide which student goes first in the sort.A good  place to start with lambdas is to remember that:is equivalent to:Furthermoreis equivalent to:For sorting on multiple values I'd be looking at stable sorts and their properties. Stable sort algorithms are great for sorting on more than one value. Most Python sorting functions are 'stable'.Here's a solution using the present structure:But if you now want the student's name rather than his/her id, you'll have to do another serial search to get it.As a different approach, the following copies the original list-based student database into a dictionary-based one.Listing the top grades becomes:It doesn't matter with just a few students, but if you had many students and many assignments, this new version would be faster. You can also use the student database to look stuff up now, rather than having to search and match.As an example:Side note: if you deal with tuples a lot, you might be interested in named tuples, as they often make tuple-related code (including lambda functions) easier to read, write and understand. Have a look at my recent answer to this question for an example.


Answer URL
https://docs.python.org/3/library/stdtypes.html
https://docs.python.org/3/library/functions.html
