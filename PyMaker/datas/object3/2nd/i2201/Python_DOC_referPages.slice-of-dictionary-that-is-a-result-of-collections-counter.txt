Natural Text
While I am trying to create a dictionary using dict(x), where x is a slice of another dictionary,d(y) where y is collections.Counter() object. This is the one-liner:The exception I am getting is thisAccording to my understanding, this error is caused when the update function is called with only one value(instead of key value pair). I know something is bad in the nested function calls, but couldn't find it.How can I get a slice of dictionary items? Is there a way I could do this without actually iterating through the entire dictionary and updating to a new dictionary?
Iterating a dictionary will only yield keys. To slice a dictionary, you need to extract both key and value via . In addition, note  is a subclass of , so no  conversion is necessary.How can I get a slice of dictionary items? Is there a way I could do  this without actually iterating through the entire dictionary and  updating to a new dictionary?No, you cannot slice a dictionary without iteration. You can create a new  object and use  to return the first 3 values by insertion order. This still requires iteration, and works in Python 3.6+ where dictionaries are insertion ordered.A couple of points to note:The order in which  objects are printed do not correspond to the internal order in which items are stored, which is still insertion ordered. See also How are Counter / defaultdict ordered in Python 3.7?You may wonder why, if dictionaries are ordered, as they are inPython 3.6+, you cannot slice directly. There are structuralreasons why this is not possible: see Accessing dictionary items byposition in Python 3.6+efficiently.
So isslice expects a iterables. So to slice a dictionary you should probably convert the dictionary to list of tuples. But dictionary does not maintain the insertion order. So to maintain that you can probably go with Ordered dict from collections lib in python.
You can use  on the items of the  (which is a dict subclass so no need for dict conversion) object and then convert the sliced items to a dict using the dict constructor.For example,returns: (note the absence of ,  and )
(Python 2.6+) I could solve this using the OrderedCounter. You can see for the explanation of it here : How Ordered Counter recipe worksFurther adding, most_common(n) is a method of collections.Counter class that returns the first n elements in that dictionary. Ref: 


Answer URL
https://docs.python.org/3/library/collections.html#ordereddict-examples-and-recipes
