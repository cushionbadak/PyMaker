Natural Text
In the Execution Model section of the Python 3.7 reference manual I read the following statement:The  statement has the same scope as a name binding operation in the same block. If the nearest enclosing scope for a free variable contains a  statement, the free variable is treated as a global.So I typed the following code into the Python Interpreter:After calling  I would have expected the value of  in the global scope to change to .What did I get wrong?
 in  is not a free variable. It's just another local; you are binding to the name and names bound to are, by default, locals unless you tell Python otherwise.From the same Execution model documentation:If a name is bound in a block, it is a local variable of that block, unless declared as  or . [...] If a variable is used in a code block but not defined there, it is a free variable.(Bold emphasis mine)You bound the name in the block with , so it is a local variable in that block, and can't be a free variable. So section you found doesn't apply, because that would only apply to free variables:If the nearest enclosing scope for a free variable contains a  statement, the free variable is treated as a global.You should not bind  in , because only names that are not binding in the scope are free variables.So this works: in  is now a free variable; it is not defined in the scope of , so picks it up from the parent scope. The parent scope here is , but  is marked a global there so when reading  for the  function the global value is used.Contrast this with  not being marked as a global in :Here the global name  is set to , but this doesn't affect what is printed.  in  is a free variable, but the parent scope  only has  as a local name.It becomes all the more interesting when you add a new outer-most scope where  is still local: in  is bound, so not a free variable. It is therefore a local in that scope. However, in , the  declaration marks  as a global in the nested scrope. In   is a free variable, and by the statement that you found, it is treated as a global.


Answer URL
https://docs.python.org/3/reference/executionmodel.html#resolution-of-names
https://docs.python.org/3/reference/executionmodel.html
