Natural Text
I have a function that can be run in parallel, however, as I try running it, it appears that the function is being called serially. What I find is that the print statements are printed one at a time, and each is only printed once the previous process is finished, I'm running this on a machine with 4 cores. Is this because the processes in the inner function each occupy more than 2 cores (so that it cannot be parallelized)? Or is there another reason?
 waits for the result to be ready, so you're not submitting a new job until the previous job finishes. You'd have to use something like  or , but even then, there's no guarantee you'll see interleaved or out-of-order execution, and the benefits of parallelization will probably be swamped by overhead for a function like this.
This looks okay to me. It is likely an issue with waiting for the print buffer to fill. Look into apply_async: https://docs.python.org/2/library/multiprocessing.html#multiprocessing.pool.multiprocessing.Pool.apply_asyncAlso,The print command is being called, python will not send your  to stdout unless there is enough stuff in there. Try adding a  into your  to force printing ASAP.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.apply
