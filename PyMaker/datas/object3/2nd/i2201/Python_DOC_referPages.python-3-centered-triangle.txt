Natural Text
I'm trying to hone my Python 3 (specifically, nested loops) with the good old triangle exercises (which only takes an odd input for now). However, I have come across a problem I can't warp my head around with.I have a  (which is 7 for now so I don't have to give an input each time I run). A variable  and  used for the  loopAnother orary variable that holds my  (in case I decrement it as not to 'damage' the original variable).A variable  and another variable  (which should be self explanatory as I'm trying to draw a triangle based on asterisks).I have a variable  which is equal to Expected output of 7 should be like this:The reason I have made  equal to  is because the first row has spaces equal to . So let's say our input was 7, first row's amount of spaces is 5.If our input is 9, first row's amount of spaces is 7The first  loop will loop from 1 to 7 (1, 3 , 5, 7) which is why I made  equal to .The second  loop should loop from  until 0.Weird thing is, that if my  is equal to , it outputs just how I expected it to be.But once I enter something like , it builds a triangle from 1 to 9 (1, 3, 5, 7, 9)But I expect it to end right before the last row, it should output as many asterisks as my input. Is my thought process wrong? If so, where did I end up wrong?I hope I have clarified everything as much as possible.Thanks a bunch.
Seems overly complicated. Why not just:Or even simpler, using :
Let's clarify a bit your code a bit : is useless since it holds only 0 and never changes, use 0 instead is never used except to make , use  instead of temp. As for decrementing it, it doesn't happen, and anyway you never return it to the user so it would be ok.that's kind of a typo so it's ok, but avoid letting your debugging prints like  when you show some code on Stack Overflow, it's harder for us to understand the whole code.If you change back  at the end of the , just use .You do nothing between the two  so you can "merge" them with an  on conditions.So now we have :As you can see, you have two stopping conditions on your  when only one would be clearer. The reason behind your code works with 7 and not more is because 7 is the limit between when one condition stops loop and when the other does.I would suggest to change your code to :
There is a bug in your code. Here is the rectified code.It is not necessary to check  since your first while loop is enough to meet the requirement. Because of that extra  you are getting ambiguous values of .
The lazy solution using the builtin  and the format mini language:Output:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.center
