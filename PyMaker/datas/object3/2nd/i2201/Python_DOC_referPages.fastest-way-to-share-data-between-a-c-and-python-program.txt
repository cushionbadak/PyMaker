Natural Text
I'm trying to build a algorithmic trading program. The program has execution flow like this:The reason I'm not building the whole thing in C++ is because Broker's API only supports Python and I cannot perform the operations I wish to perform fast enough if I switch to Python. The frequency of data is going to be at least ~50kb (binary and Json) per second. So far I've found the following alternatives:Embed Python in C++ code. This seems great, but I'm not sure if would be able to import whole library and use classes/methods (broker's client) in C++. Communicate through sending packets (latency is the issue here)Put the data received in SQL database and have C++ query it every X ms. (again, latency)Is there any better way to do this? 
If you are using CPython (the most common implementation of python) then you can create a dynamic library that can be used as a python module. There Boost.PythonWhich can be used as:To build with python 3.7 and boost 1.68.0 you can use following CMake file
One way to exchange data between python and C++ is to use a message queue library. One possible library which is designed to be fast is Ã˜MQ (zeroMQ). Is this the fastest way? It depends on your use case. It might be worth evaluating. Especially considering the easy to implement part, good documentation and community support.
You can implement your C++ code as shared library (so or dll).Your interface should be .Then you can call your native functions directly in python and pass your data via pointers within the same process and memory.To call the native functions you can use Python CTypes.


Answer URL
https://docs.python.org/3/library/ctypes.html
