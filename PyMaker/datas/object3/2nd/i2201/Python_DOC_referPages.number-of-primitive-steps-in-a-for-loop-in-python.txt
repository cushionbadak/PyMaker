Natural Text
I am reading about algorithms' complexity. And I have a code for which I'm suppose to tell it's number of primitive operations.I understand that line 1 is 1 operation. And line 3 is 1 operation but because it's been executing n times, it makes it n operations in total. And last line is 3 operations. But I don't understand why is the loop 5 * n + 2I would really appreciate if someone could break it down for me. 
I'm not sure where your instructor is getting those numbers from. If you want to see the primitive operations that the stack-based Python virtual machine executes for a piece of code you can use the  function. From the docs:Disassemble the  object.  can denote either a module, a class, a  method, a function, a generator, an asynchronous generator, a  coroutine, a code object, a string of source code or a byte sequence  of raw bytecode. For a module, it disassembles all functions. For a  class, it disassembles all methods (including class and static  methods). For a code object or sequence of raw bytecode, it prints one  line per bytecode instruction. It also recursively disassembles nested  code objects (the code of comprehensions, generator expressions and  nested functions, and the code used for building nested classes).  Strings are first compiled to code objects with the  built-in  function before being disassembled. If no object is provided, this  function disassembles the last traceback.We can put your code into a string and pass it to  like this:outputHopefully, you can roughly follow what's going on there, but please see the  docs for the meanings of the various instructions.


Answer URL
https://docs.python.org/3/library/dis.html#dis.dis
