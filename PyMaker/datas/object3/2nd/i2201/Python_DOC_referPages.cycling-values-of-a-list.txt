Natural Text
I'm new to coding and am trying to write a simple code that will take a list, say [1,2,3] and cycle the elements n number of times. So if n=1, I should get A=[3,1,2]. If n=2, I should get A=[2,3,1].The code I have written is:The problem is that no matter what the value of n is I get the same answer which is only cycled once. I think the problem is that the loop is cycling through the same B every time, so I need to store the new B as something else and then repeat the loop with new B. But I can't figure out how to do that. Any tips would be appreciated
I think you're overcomplicating it. Consider changing it to something like the following:In case of , you get , and  gives you Note that what you are trying to do is implemented in  (I suppose you're asking about the process, not the result, but just in case)
A simpler function for this is:Taking the modulus () avoids the need to keep cycling through. We then just concatenate an appropriate-sized slice off the end of the list to the beginning of it.
See @sacul's answer for the problem with your code. But  is not the most appropriate structure for such a requirement as each shift has O(n) complexity. ("double-ended queue") from the  module provides this feature via its  method. This method works in-place and has O(k) complexity, where k is argument representing the number of rotations. Here's an example:
@sacul's answer works, but you were close! You missed updating  for the next iteration of the while loop after you created your new .This results in the following print statements:
An  based solutionIf we cycle through the values in x (we'd actually only do this at most twice). Then slice it so that it begins at the element we want and includes the correct number of  elements.It's probably a little more esoteric than some of the other solutions, but worth throwing into the bag, given there are so many alternatives. returns a generator. If you wanted to print the result you'd need to convert it to .
Not going to in depth since someone already answered your question.. But an important property to note here is also that


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
