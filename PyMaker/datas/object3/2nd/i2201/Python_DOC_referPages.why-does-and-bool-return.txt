Natural Text
This question already has an answer here:python and / or operators return value [duplicate]                    4 answers                I am trying to return a boolean in a function like this:The behavior should be to return  if the list is empty or if any element in it meets the condition. I am using the first operand as a shortcircuit since  would return  if the list was empty, which is not what I am after.I would expect  to return  since the list is empty, but to my surprise it returns  whether  is  or . I would expect the first operand to be automatically evaluated as a boolean since it is involved in a comparison operation, and not whatever is happening.I am not really asking how to solve my problem, which is easily done by an explicit type conversion: , but rather asking what is happening and why.edit: when I ask "why" this is happening I am not looking for the "facts" only, as they are already explained in the linked duplicate question, but also the reasons behind the implementation of this behavior.
The  and  operators do not return . They return the last thing evaluated (that's the case in other dynamic languages too, eg. javascript). The official documentation describes thatfor , the first falsy value, or the last operandfor , the first truthy value, or the last operandThat's by design, so you can create expressions like . So, if you want guarantee that a boolean value is returned, you have to instead of 
Because as khelwood said: gives  if  is falsey, otherwise it gives .That's the point, ( is not  :-)), so still best is:
This has to do with how python evaluate the expression. An empty list is considered as false by python, that means that the code after 'and' will not be executed, as this will not change the result. Python does not need to convert the empty list into bool as it is not compared to anything, and just return it as empty list.This shouldn't change anything for you, if you test the returned value of the function, it will be evaluate the same way as if the function did return False.


Answer URL
https://docs.python.org/3/reference/expressions.html#boolean-operations
https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not
