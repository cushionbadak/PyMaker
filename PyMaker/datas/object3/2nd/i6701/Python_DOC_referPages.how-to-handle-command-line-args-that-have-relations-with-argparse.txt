Natural Text
suppose I have a program called  that takes some filename as input, and I also want use command line args to set the open mode for each file.For exampleWhich means open file  with mode , file  doesn't have a --mode arg, so open it with default mode , and for the file , use the  mode to open it.
This is a tricky problem because argparse doesn't give you any way to know which  a particular  is associated with.  You could change the structure of the command so that the filename and the mode are separated by a sentinel character:Obviously this assumes you don't have files whose names end in  where  is any acceptable file mode.  If this is an OK structure, then this becomes as simple as writing a custom action or type to parse the string and return a suitable object. e.g.Other solutions could involve using  and then parsing out the list of arguments passed.Finally, to implement what you've actually asked for without too much difficulty, we need to make an assumption.  The assumption is that  will parse items from left to right.  Given the functionality of the library, that is the only reasonable choice for implementation as far as I can tell...Given that implementation, we can do this with a custom type and a custom Action.  The type is simply a structure to keep a  and a  grouped together.  We'll use  to construct a new instance of this type every time we hit an  and append it to a list (This is supported out of the box by ).  Next, we'll write a custom action to update the  of the last "file struct" in the list every time we encouter a  argument.I've chosen to throw an error if  shows up before any , but if 2  follow an , I'm just overwriting the previous value.  If you wanted to more error checking, it'd be a simple matter of writing a little more code in the  class to make sure that no mode has already been set when you go to update the mode.
If the command line is like this:It's ok to add some code like this:Then you can parse the args object, args_dict variable.  The value is like this:You can iterate both 'input' key and 'mode' key in the args_dict variable, for the remain of input list(it's 'test2.txt' here), you can open it with 'r' mode.But if your command line have to write something like:I don't think it's easy to parse the b.txt with 'r' mode, because argparse don't know which mode is bind to the relative input...Get inspiration from @mgilson 's comment and answer, I have found another way to define Action subclass, and make the 'mode' input useful.And the client code can be something like this:Then we can parse the args object, args_dict variable more easier.  If the command line is like this: The result will be:In the other special way, if the command line is like this:The result will be:And then you can parse the dict more easier, the 'test2.txt ~ test4.txt' in the input argument will have the default 'r' mode :)


Answer URL
https://docs.python.org/3/library/argparse.html#argparse.Action
