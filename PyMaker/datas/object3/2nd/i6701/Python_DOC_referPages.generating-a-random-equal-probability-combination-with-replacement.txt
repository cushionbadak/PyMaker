Natural Text
I want to generate one random combination out of all possible . The tricky bit is that I want each of the possible outcomes to have the same probability without needing to generate (not even implicit) all the possible outcomes.For example:That approach is way too slow (and memory expensive) because it needs to create all possible combinations whereas I only want one. It's not so bad if I determine how many  there will be and use  together with  and  on the . That doesn't need to generate all possible combinations (except in the worst-case). But it's still too slow.On the other hand the recipe mentioned in the  documentation is fast but not each combination has the same probability.
Well, I'm in a bit of a dilemma, because I've found an algorithm that works, but I don't know why. So do what you want of if, maybe some mathematician in the room can work out the probabilities, but it does empirically work. The idea is to pick one element at a time, increasing the probability of the selected elements. I suspect the reasoning must be similar to that of reservoir sampling, but I didn't work it out.The output is the number of times each possibility has appeared after 100,000 runs:
As you did not provide any estimates for the parameters in your task: here some approach for small k.The basic idea: acceptance-rejection sampling with a full-restart if some partial-solution is infeasible (according to the sorted-characteristic). Of course the probability of not restarting is decreasing with  (compare with bogosort). There is no extra memory used.The following code compares this approach with the original, a wrong naive one, and a wrong one based on the other (now deleted) answer (which had an upvote). The code is pretty much garbage and just for demo-purporses:Code:Output:Yes, i put those labels in some sub-optimal position.Alternative timings:Only comparing original with deque-based AR-sampling. Also only relative-timings matter here.::Remark: one might argue that the original approach should re-use the sample-space (which will shift those benchmarks) if memory allows this storage at all.


Answer URL
https://docs.python.org/3/library/random.html#random.choices
