Natural Text
This is a programming language concept question, e.g. similar to the level of Programming Language Pragmatics, by Scott.In Python, the classes of some kinds of objects are defined in terms of having some methods with special names, for example,a descriptors' class is defined as a class which has a method named , , or .an iterators' class is defined as a class which has a method named .Questions:What is the language feature in Python called in programming language design? Is it duck typing?How does the language feature work underneath?In C++, C#, and Java, is it correct that a descriptor's class and aniterator's class would have been defined as subclasses of someparticular classes? (similarly to C# interface )In Python, Can descriptors' classes be defined as subclasses of some particular class?Can iterators' classes be defined as subclasses of some particular class?
What is the language feature in Python called in programming language design? Is it duck typing?"Any object with a member with a specific name (or signature), can work here" is duck typing. I don't think there is a more specific term for "any object  with a member with a specific name (or signature), can work for this language feature", if that's what you were asking.How does the language feature work underneath?I don't understand the question. If a language feature means that it calls a method with a specific name, it calls a method with that name. That's it.In C++, C#, and Java, is it correct that a descriptor's class and an iterator's class would have been defined as subclasses of some particular classes?I'm not aware of anything similar to descriptor in any of these languages and I don't think it makes sense to speculate on how it would look if it did exist.As for iterators, each of these languages has a foreach loop, so you can look at that:In C++, the range-based  loop works on any type that has instance members  and  or for which the  and  functions exist. The returned type has to support the ,  and  operators.In C#, the  loop works on any type that has instance method , which returns a type with a  method and a  property. There is also the  interface, which describes the same shape. Enumerable types commonly implement this interface, but they're not required to do so.In Java, the enhanced  loop works on any type that implements .So, there are no subclasses anywhere (C# and Java differentiate between implementing an interface and deriving from a base class). Java requires you to implement an interface. C# uses duck typing, but also optionally allows you to implement an interface. C++ uses duck typing, there is no interface or base class at all.Note that, depending on the language, the decision whether to use duck typing for a certain language feature might be complicated. As an extreme example, one feature of C# (collection initializers) requires implementing of a specific interface () and also the presence of a method with a specific name (). So this feature is partially duck typed.
The term you are looking for is The Python Data Model (there's more to this than just dunder-methods and -attributes, but they are an integral part of it).
This is an aspect of duck typing.Python, as a dynamically-typed language, cares less about the actual types of objects than about their behaviour. As the saying goes, if it quacks like a duck, then it's probably a duck; in the case of your descriptor, Python just wants to know it defines the special methods, and if it does then it accepts that it is a descriptor.


Answer URL
https://docs.python.org/3/reference/datamodel.html
