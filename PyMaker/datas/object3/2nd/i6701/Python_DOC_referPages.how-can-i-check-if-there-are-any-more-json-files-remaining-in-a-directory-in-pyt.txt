Natural Text
This is what I have:but I want to search the subfolders of src. Something like this would work:But this is obviously limited and clunky.
Python 3.5+Starting with Python version 3.5, the  module supports the  directive (which is parsed only if you pass  flag):If you need a list, just use  instead of .For cases where matching files beginning with a dot (.); like files in the current directory or hidden files on Unix based system, use the  solution below.Python 2.2 to 3.4For older Python versions, starting with Python 2.2, use  to recursively walk a directory and  to match against a simple expression:Python 2.1 and earlierFor even older Python versions, use  against each filename instead of .
Similar to other solutions, but using fnmatch.fnmatch instead of glob, since os.walk already listed the filenames:Also, using a generator alows you to process each file as it is found, instead of finding all the files and then processing them.
I've modified the glob module to support ** for recursive globbing, e.g:https://github.com/miracle2k/python-glob2/Useful when you want to provide your users with the ability to use the ** syntax, and thus  os.walk() alone is not good enough.
Starting with Python 3.4, one can use the  method of one of the  classes in the new pathlib module, which supports  wildcards. For example:Update:Starting with Python 3.5, the same syntax is also supported by .
 gives you exactly the same patterns as , so this is really an excellent replacement for  with very close semantics.  An iterative version (e.g. a generator), IOW a replacement for , is a trivial adaptation (just  the intermediate results as you go, instead of ing a single results list to return at the end).
You'll want to use  to collect filenames that match your criteria. For example:
Here's a solution with nested list comprehensions,  and simple suffix matching instead of :It can be compressed to a one-liner:or generalized as a function:If you do need full  style patterns, you can follow Alex's andBruno's example and use :
Johan and Bruno provide excellent solutions on the minimal requirement as stated. I have just released Formic which implements Ant FileSet and Globs which can handle this and more complicated scenarios. An implementation of your requirement is:
based on other answers this is my current working implementation, which retrieves nested xml files in a root directory:I'm really having fun with python :)
Recently I had to recover my pictures with the extension .jpg. I ran photorec and recovered 4579 directories 2.2 million files within, having tremendous variety of extensions.With the script below I was able to select 50133 files havin .jpg extension within minutes:
Another way to do it using just the glob module. Just seed the rglob method with a starting base directory and a pattern to match and it will return a list of matching file names.
Just made this.. it will print files and directory in hierarchical wayBut I didn't used fnmatch or walk
In addition to the suggested answers, you can do this with some lazy generation and list comprehension magic:Besides fitting in one line and avoiding unnecessary lists in memory, this also has the nice side effect, that you can use it in a way similar to the ** operator, e.g., you could use  in order to get all .c files in all sub directories of src that have this structure.
Simplified version of Johan Dahlin's answer, without fnmatch.
Or with a list comprehension:
That one uses fnmatch or regular expression:
Here is my solution using list comprehension to search for multiple file extensions recursively in a directory and all subdirectories:

I modified the top answer in this posting.. and recently created this script which will loop through all files in a given directory (searchdir) and the sub-directories under it... and prints filename, rootdir, modified/creation date, and size.Hope this helps someone... and they can walk the directory and get fileinfo.
Here is a solution that will match the pattern against the full path and not just the base filename.It uses  to convert a glob-style pattern into a regular expression, which is then matched against the full path of each file found while walking the directory. is optional, but desirable on Windows since the file system itself is not case-sensitive. (I didn't bother compiling the regex because docs indicate it should be cached internally.)
I needed a solution for python 2.x that works fast on large directories.I endet up with this:Note that you might need some exception handling in case  doesn't find any matching file.


Answer URL
https://docs.python.org/3/library/glob.html
https://docs.python.org/3/library/glob.html#glob.glob
https://docs.python.org/3/library/glob.html#glob.iglob
https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob
https://docs.python.org/3/library/pathlib.html
