Natural Text
Let's imagine I have a single class . The purpose of  is to wrap a  or  and provide event-listening capabilities. All works well.So this can be used to wrap a  like so:Or a :Great. Almost to what I wanted to accomplish ...Now the current issue is that, because  is for both  and  objects, it can't inherit from either. This means I don't have the magic class functions, such as .Which leads code like thisThrowing a .How can I work around this without defining every magic method I need inside of . If I did it this way, for each of those definitions I would have to write two return values based off whether  is a  or .I thought I could do this with metaclasses at first but that doesn't seem to be a solution, since I need access to the values being passed to check whether it's a  or .
An easy way would be to use a proxy class, for example . It will behave exactly like the "proxied" class except for the overridden methods. However instead of  you can simply use  to access the "unproxied" object.This behaves like a dict if you wrap a dict:and like a list, if a list is wrapped:
You can use  or  from collections
Try something like Or what ever method it is you want to inherit. When an instance method is called, the instance is auto-passed with self. But if you call the method from the class decleration you need to pass an object because self requires a value.This will print out  and 


Answer URL
https://docs.python.org/3/library/collections.html#collections.UserList
