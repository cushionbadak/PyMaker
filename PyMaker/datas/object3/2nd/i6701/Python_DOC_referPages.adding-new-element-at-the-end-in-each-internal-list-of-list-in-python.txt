Natural Text
I have a list of list like below: Now I want to append a new number (same number) to each of internal list at the end. so result should be like: I want to use a list comprehension as I don't want to do it the normal way by iterating over each internal list in main list and then use a temporary list to add to it. Any help?
ApproachesNative Python (@acushner presented this first):Alternatively, with :For fun, a third-party library  ():CaveatSome answers attempt to mutate a list while iterating.  While those options give equivalent results, are possibly more memory efficient and may even be faster for larger data for this specific problem, they are arguably non-pythonic and not recommended practices.From the Python docs:It is sometimes tempting to change a list while you are looping over it; however, it is often simpler and safer to create a new list instead.This is especially true when removing or inserting elements from a list while iterating it.  The latter approaches adopt this convention of creating a new list.  However, for certain innocuous circumstances, a compromise may be iterating over a copy of the nested list:Otherwise, default to @acushner's approach, which is the next performant option discussed here.
you can just use list addition to accomplish this:
This also works[[1, 345, 0, 304, 90], [0, 345, 678, 946, 90, 90], [0, 23, 3, 56, 3,  5, 9, 0, 90]]
And another one:
Another option


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.chain
https://docs.python.org/3/tutorial/datastructures.html#looping-techniques
