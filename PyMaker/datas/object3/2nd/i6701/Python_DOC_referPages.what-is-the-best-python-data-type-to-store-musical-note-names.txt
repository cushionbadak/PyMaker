Natural Text
What is the best python data type to store note names?I want it to be iterable but some notes have alternative names. For example, C# (C sharp) is the same note as Db (D flat). If I use a list or a tuple then entering the alternative names will 'break' the iteration process and I won't be able to find a note, say 3 semitones above it by simply looking up the position 3 steps up from the initial note. (I have already worked out %12 to make it behave in a 'circular' way)Ideally I would like the two alternative note names to occupy the same position in a 'list' (or whatever date type is best) and to be able to specify which name I want returned by the way I call it. Something like notes.flats for example.Is there actually a data type that supports something like this or am I looking completely the wrong way? My next thought would be to make a class.
Separate your internal representation--what your code works with--from the external one--what the user sees. Note names are great for people, not so much for a program.Internal representation: There are twelve notes in an octave, so store notes as numbers 0 through 11.Now you need functions to convert between internal and external representations. One to convert note names into note numbers, and another to do the reverse.Those could be the signatures for the two methods. The first parses a note name like C♯ or D♭ and returns a number between 0 and 11. The second converts a number 0-11 into a note name. Since there are multiple enharmonic names for notes, you could have a parameter like  to control whether sharps or flats are returned.You could implement the name parsing by listing out all the 21 flavors of note names (seven natural, seven sharp, seven flat). A cleverer implementation would handle the letter first, then the symbol: convert the letter to a note number, then if there's a ♯ add 1; if there's a ♭ subtract 1.
What about a list of lists:Will both return F#
Dictionary sounds suitable for you.You can associate each element of a dictionary with a key that allows you to access it.It looks like this:And you can iterate over the dictionary like this:Hope that helps!


Answer URL
https://docs.python.org/3/library/enum.html
