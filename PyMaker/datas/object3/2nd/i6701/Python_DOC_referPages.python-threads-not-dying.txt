Natural Text
I have the following code which spawns 10 threads that copy files from a file list. I am calling this over and over again for different lists of files and I found that the threads don't seem to be dying once the fileQueue has run out... I noticed that the code seemed to slow down with long operations, and then I had a crash within the threads and started to see "Exception in thread Thread-45:"!Here's my code, from everything I know in reading the manual this is pretty clean and simple:Does anyone know why the threads are not just cleanly dying in between calls of this code? From what I understand once the fileQueue has run out then they should just quietly die!EDIT: Here's the fixed code
Why do you think the threads will die? There's nothing in  that breaks out of the  loop, so I'd expect the threads to remain alive indefinitely. Once all the items have been consumed, they'll be permanently blocked trying to  another value from the empty queue, but they won't quit or free their resources.If you want your threads to quit when there's no more work to be done, you will need to tell them to do so. A common way of doing that is to send a sentinel value over the queue, which the consuming thread will recognize as being the signal that there's no more data. You'll need to send one copy of the sentinel for each thread you've started. Here's a quick untested solution based on your current code. I'm using  as the sentinel, since it doesn't look like it could be a normal value for the filename.There are a few other things you could do which I've omitted for simplicity. For instance, it might be a good idea to keep a reference to each thread you start and  them all from the main thread to make sure they've all exited. This could be an alternative to ing the queue, perhaps. There's also no reason for the threads to be daemons if they're exiting properly.You could also reorder some of the code so that you don't need two  loops. If you  all the values into the queue first, before starting the threads, you could combine the two loops.
You probably forgot to call  for every thread. From documentationNeed to add code after . But you should add all thread to  after (look to an exemple)


Answer URL
https://docs.python.org/3/library/queue.html#queue.Queue.join
