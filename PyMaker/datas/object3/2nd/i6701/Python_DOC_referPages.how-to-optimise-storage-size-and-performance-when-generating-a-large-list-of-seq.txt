Natural Text
ProblemI am generating all possible sequences of this form, for a given integer n:the sequence has length the sequence must contain the numbers , , ,  ,  for some . The numbers can be repeated.For example, for , the possible sequences are:In other words, the sequence must contain  and numbers counting down from  without any jumps, but in no particular order and with repetitions allowed.Given , the number of such sequences is given by the ordered Bell numbers or Fubini numbers, which grow extremely fast.Here is the code that I am using to generate the sequences: QuestionsThe code posted above works as intended. My two main concerns are the following:Storage: For my particular application, once  is chosen, I need to store all the sequences. I will eventually need to go through the list and remove sequences that do not satisfy a particular condition. However, even for small  (i.e. ), a lot of memory is required (order of GBs).Generation time: My code takes a long time to generate the sequences, even for small .How can I generate the sequences in a way that optimises storage and generation time?
I would certainly store those values as binary. For numbers up to 16 you could even use a nibble (4 bits - using some bit shifting) to store each value. So for  you would 'only' need 545835 * 4 bytes = ± 2MB -- for  ± 500MB.For faster processing and writing to file, you can use memory mapping (calculate the required size up front, create a file of that size, and open it with memory mapping).This way every value can be written directly into the mapping (i.e. the file, as if it were memory), which would also eliminate the slower . Also consider writing only the sequences you need, because if you want to remove them later you'll need to shift all other data.You could also add a small header to the file with some values: , , , in binary.


Answer URL
https://docs.python.org/3/library/mmap.html
https://docs.python.org/3/library/itertools.html
