Natural Text
The following data representation: Is generated from this loop: Based on data that looks, more or less, like so: I've tried to find the maximum value of the second value in each dict, i.e.How can I access all of the second values (the ones that look like ) from that set of nested dictionaries, record and output the  and the ? To precisely define terms: In the example up top, i.e.: I'd like to search on the basis of ,  and - that's what I mean by "second" value. The selection of  I'd like to make would be on the basis of the number alone, so in that case . EDIT:Trying to call it in the following way, I generated the error reproduced below: 
Once you have your data in a tractable form, it's a one-liner.In this case, since those dictionaries are obviously records of some sort, the ideal data type is either a custom class or a.I went with the , since all the values are atomic and immutable.(Also, it comes with many handy features like decent  and  methods, and it's more efficient too.)All of the effort below is in , which generates immutable key-value pairs from that frustrating list of one-item dictionaries.It also converts the stringified integers()into the actual integers you wish they were.After that, using the data is easy.Output (Python 3):I've included a couple suggestions in the comments:Is it important that those dictionaries have exactly one item each?Should those hexadecimal strings(which I called )also be converted into integers?I can't tell what you're using this for, so I can't answer either of those questions.
Are you constrained to using dictionaries here? A list of tuples might be simpler to use: yields: for the minimumand for the maximumEdit to show example using :sorted(dict_hash_gas, key=lambda x: int(x.second))


Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
https://docs.python.org/3/library/collections.html#namedtuple-factory-function-for-tuples-with-named-fields
https://docs.python.org/3/library/functions.html#min
https://docs.python.org/3/library/collections.html#collections.namedtuple
