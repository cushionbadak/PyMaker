Natural Text
I am looking to interface with an interactive command line application using Python 3.5. The idea is that I start the process at the beginning of the Python script and leave it open. In a loop, I print a file path, followed by a line return, to , wait for a quarter second or so as it processes, and read from  until it reaches a newline.This is quite similar to the  feature of , but I am waiting for a line return instead of waiting for the process to terminate. Anyone aware of a relatively simple way to do this?Edit: it would be preferable to use the standard library to do this, rather than third-party libraries such as , if possible.
You can use subprocess.Popen for this.Something like this:Now  and  are your ends of pipes that send data to the subprocess stdin and read from the subprocess stdout.Since you're only interested in reading newline-terminated lines, you can probably get around any problems caused by buffering. Buffering is one of the big gotchas when using subprocess to communicate with interactive processes. Usually I/O is line-buffered, meaning that if the subprocess doesn't terminate a line with newline, you might never see any data on , and vice versa with you writing to  - it might  not see it if you're not ending with newline. You can turn buffering off, but that's not so simple, and not platform independent.Another problem you might have to solve is that you can't determine whether the subprocess is waiting for input or has sent you output except by writing and reading from the pipes. So you might need to start a second thread so you can wait for output on  and write to  at the same time without running into a deadlock because both processes are blocking on pipe I/O (or, if you're on a Unix which supports select with file handles, use  to determine which pipes are ready to receive or ready to be read from).
This sounds like a job for an event loop. The  module starts to show its strain under complex tasks.I've done this with Twisted, by subclassing the following:Most documentation for Twisted uses sockets as endpoints, but it's not hard to adjust the code for processes.


Answer URL
https://docs.python.org/3/library/asyncio-subprocess.html
