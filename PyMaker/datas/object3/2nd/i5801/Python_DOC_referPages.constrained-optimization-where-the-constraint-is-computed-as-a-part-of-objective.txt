Natural Text
I made a function  that takes a long time to run. The constraints are calculated at the end of 's routine. How can I return these constraints to cobyla without evaluating  twice?
LRU CacheThis is implementing Paul Panzer's suggestion, it relies on @lru_cache which is a Python 3 feature. We cannot directly apply this decorator to the objective function, because it receives a NumPy array, which is mutable and therefore not hashable. So we need two functions:  computes the objective and constraint, given scalar arguments. calls  and returns either objective or constraint, based on  argument. Note that we need  parameter in the call to , because without it the same extra arguments  will be passed to the constraint function. Output: So, the cache works. I changed the constraint from x1-x0 to x0-x1 to show that it also works (the original constraint x1-x0 is satisfied by the global minimum of this function, so it would have no effect on the result). Cache size can be much smaller: with  we would have 40 hits (vs 41 with the above size). Global variableThis is implementing Jakob Lovern's suggestion. The function f stores the constraint in a global variable, from which the function cons retrieves it. The use of a global has obvious drawbacks, but then again, this works in Python 2.7.  This returns  since the global minimum [2, 4] is disallowed by the constraint.


Answer URL
https://docs.python.org/3/library/functools.html#functools.lru_cache
