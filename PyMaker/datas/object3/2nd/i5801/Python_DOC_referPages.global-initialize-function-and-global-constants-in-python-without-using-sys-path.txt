Natural Text
My use case is the following:several scripts that can be run individuallyone 'mother' script that can run all the scriptseach script has global variables it uses (paths to specific locations, constants used by all scripts)some of these global variables are inputted in a settings.yaml file which gets dynamically loaded with several people are running the system, we want to avoid environment variables or any kind of low-level path settingsThe use cases were satisfied with an at the beginning of each export module. The settings.py script is our 'initialize' script that loads and create variables used for all the modules, e.g.:The 'mother module' export_all.py uses  to run all the scripts sequentially.Originally all files were in the root:With time, though, this became messy and we decided to restructure it:And then all hell broke loose.We discovered that one can only use 'import' for modules that are either underneath the module or specifically within sys.path.The solution we've come up with involves inserting this beauty at the top of all of our scripts:but it just seems like overkill to us.We triedbut that doesn't run the code that generates the constants from the yaml fileAlso, we tried squeezing the s in __init.py__ in each directory, but then the  didn't work.We're kind of missing a pythonesque way to have some global constants, and an initialiazing script that runs only once (even when the 'mother' script is running).Is it us, or is python just weird and ugly here?
I am not sure what exactly the problem is, but here are several options you can choose from:The best approach is to reference your scripts as if they are submodules of a package. In this case, everything should work if you run all scripts from the directory where  lives. The only change is that you should run them as modules, and not as scripts:butYou can use  environment variable to pass additional paths for  to your script. The variable will be inherited by subprocesses.Assuming you run your scripts in a virtual environment, you can put a  file in your site-packages directory with absolute paths of the  and  directories. The paths will be added to  each time a script is started with  without  switch. You can read about  files in the documentation for standard site module.
You need to turn your directories into modules: https://docs.python.org/2/tutorial/modules.html#packagesto allow you use a structure like this:or to use:in case you are inside a subfolderhttps://docs.python.org/2/tutorial/modules.html#intra-package-references


Answer URL
https://docs.python.org/3/library/site.html
