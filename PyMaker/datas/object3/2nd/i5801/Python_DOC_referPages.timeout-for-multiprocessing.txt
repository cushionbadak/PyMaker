Natural Text
This code pings various machines. Could you please help me change this code so if a process of pinging hangs for more then 7 seconds it shuts down and returns some flag?(I'd like to pull various data from machines using WMI. For that I'll change ping function to something else. The issue is on some machines WMI is corrupted and process of pulling data hangs indefinitely. Timeout is needed.)UPDATE:While I appreciate for the tip on adding timeout to subprocess the question remains. How do I shutdown hanged function? Let's say I've changed pinging to pulling WMI data from a machine (this one pulls list of installed software from Windows machine). There is no subprocess to set timer on:
There are several ways to tackle long running executions. Each way has its benefits and drawbacks.APIsAs already suggested, the simplest ways is to rely on the APIs timeouts. Modules such as , ,  etc... expose timeout parameters within their APIs.This is the preferable approach whenever feasible. ThreadsThe long-running/hanging logic is executed within a separate thread. The main loop can continue undisturbed and ignore the hanging execution.One of the issue with this approach is that the hanging thread will continue to execute in the background consuming resources.Another limitation is due to the fact that threads share memory. If your your function happens to crash badly it might affect your main execution as well.ProcessesMy favourite approach is to execute the problematic logic in a separate process using the  facilities. As processes do not share memory, whatever happens in the problematic function remains limited to the child process which you can terminate at any point in time.The pebble library was built on top of this principle. Allowing to easily separate problematic code and deal with failures and catastrophes. The drawback of using processes is that they are a bit heavier than the other two approaches. Moreover, as memory between processes is isolated, it's a bit more complicated to share data. 
use asyncio it's available in python since 3.5.4https://docs.python.org/3/library/asyncio-task.html
 is a default choice when it comes to using  module. It allows you to create a process and then read its stdout and stderr with specified timeout:Also, beware that  on a linux or osx may never exit and continue to ping so this is going to return false on these OSes:


Answer URL
https://docs.python.org/3/library/asyncio-task.html
https://docs.python.org/3/library/subprocess.html#subprocess.check_output
