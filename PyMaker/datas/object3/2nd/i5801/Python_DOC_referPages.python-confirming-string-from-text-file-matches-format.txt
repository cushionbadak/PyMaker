Natural Text
I've got a program that needs to take a text file as input and do a few things with each line of code. Before i can do anything with the text file though, i need to ensure that every line matches a specific format which in this case, would be city name (which could be any string, it wouldn't need to be a real city name) followed by a ',' followed by a number.a typical line would look like this:towna,2.43This is what I have at the moment, it works in terms of making the program function but it doesn't verify that the data is correct, so if its wrong (and it will be from time to time) its going to give me an error. I read some stuff about re.match, but I don't understand how to use it.
Before I answer, I just have to point out that you are messing with the data before the validation even starts.What if the user enters ? Then this line  in your code will replace it with .Anyways, to solve this, it is simple and can be done with a bit of regex.You can make it even shorter with generator expressions:This line:Compiles a regex for reuse. This is often more efficient for complex regex expressions so that the regex engine does not have to re-evaluate and rebuild it's internal state each time the regex is used for matching.The equivalent for matching without pre-compiling the regex would be:The scary looking regular expression you see (this one ) is used for matching ints or floats, and this is why it is soo long. Python has some defined here. The one I used here combines matching ints and floats, and you can see an example of it's use here.
Some people, when confronted with a problem, think "I know, I'll use regular expressions." Now they have two problems. (Jamie Zawinski)Compare the  regular expression to the following validation definition proposed below:Regular Expressions: Now You Have Two ProblemsI would treat the file as a CSV file which would allow us to use a  module to read it and also use a CSV schema validation package like . You don't have to use a third-party for this problem, but it provides a nice separation of concerns and allows for a nice validation logic definition.For example, if you would have a  file with the following content (note the  in the "Average Rainfall" column):And, execute the following code (note how we define a unique "City Name" value requirement and a float value validator for the "Average Rainfall"):You would see printed:


Answer URL
https://docs.python.org/3/library/re.html#simulating-scanf
https://docs.python.org/3/library/csv.html
