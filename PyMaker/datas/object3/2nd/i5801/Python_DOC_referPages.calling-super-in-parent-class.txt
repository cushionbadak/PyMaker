Natural Text
I'm reading Raymond Hettinger's Pythonâ€™s super() considered super!  About a page in, there's this example:Why is it necessary to call  in  here?  My understanding is that this calls  since  implicitly inherits from .  Even without that statement, we've alreadyestablished  already in the parent's ,established the child class's  in an explicit method override,then invoked the parent's  with  in .As far as I can tell, dropping this line produces the same behavior & functionality:What is the purpose of  within  here?
I see that @user2357112 has already provided a correct answer. I was working on an example that I'd though I'd leave here because it's pretty much what user2357112 is describing.  Consider a mixin class like this:Let's say you apply that to your  class:If  doesn't call , then when you do this:You get:The call to  in shape is necessary to call the  method on .
The point is cooperative multiple inheritance. The point of the whole entire article is cooperative multiple inheritance, really.You look at  and you don't see any parents besides . Sure, but that doesn't mean there aren't any siblings, or anything else on the MRO after .  isn't just for superclasses; it searches for the next implementation of the method in the method resolution order. For example, one of the later classes in the article isIn this case,  needs to call , or  and all further  calls will be skipped.


Answer URL
https://docs.python.org/3/whatsnew/2.2.html#multiple-inheritance-the-diamond-rule
