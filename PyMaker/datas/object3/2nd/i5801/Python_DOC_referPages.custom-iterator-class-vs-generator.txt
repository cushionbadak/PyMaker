Natural Text
The following is an illustration. I'd like to understand in general whether there is a reason for defining a custom iterator class when a generator function can be defined instead.I need to iterate over a sequence converting every element to int, e.g.I can use either a custom iterator class:or a generator function:Are these solutions always interchangeable?Are they equivalently efficient (time- and space-wise)?Stylistically, is any of them considered better?  Thanks! 
If I'm going to write it as an answer then lets add some examples to demonstrate the difference. Say we have a simple iterable like:If you want to turn it into a string list, there are a plethora of ways apart from the already mentioned  which is designed for that purpose - you can do a simple generator:Or you can write a full iterator class:So far, they are the same - but what happens if you want to skip a few elements while iterating? You cannot instruct a generator to do so and in order to skip elements you need to add skipping-by-exhaustion logic within your iterating code itself, i.e.:On the other hand, with an iterator class you can encapsulate your control by adding a simple  method like:And then you can elegantly do the same as:But that's just the tip of the iceberg - what happens if you want to stop producing strings mid way through the iteration and use the original data? There is no way to inform the generator to do so (unless you've built it by passing some external control variable), while a simple change to the iterator class allows you to do exactly that:This way you can add any arbitrary control over your iteration, including reversal, recurring iteration, even switching the iterator source mid-way through the iteration, etc. Simple generators do not allow you to do any of that without some major hassle.As to efficiency, it's obvious from this example that the generator is more efficient as we're relying on an internal generator anyway, but the performance penalty will quickly evaporate if you need to control the life cycle of your iterable where you'd have to add more complex checks and generally make your life miserable trying to work around generator limits.I won't comment on style but I'd claim that, in general, it's best to use the best tool for a job - if you don't need life-cycle control of your iterable, go ahead and use a generator, if you do - an iterator class is a way to go.
It all depends on the functionality that you expect from your object. If you just want a one-shot iterable as the result, which is optimized in terms of memory and not a container like list, tuple, etc., the best way is using a generator expression. If you want your object to be iterable for multiple times you should go with a list comprehension or other equivalents (set comprehension, etc.).If you want more functionalities that a container or a generator can't satisfy, you should go with the custom object and add your expected functionalities as different methods to the class.


Answer URL
https://docs.python.org/3/library/functions.html#map
