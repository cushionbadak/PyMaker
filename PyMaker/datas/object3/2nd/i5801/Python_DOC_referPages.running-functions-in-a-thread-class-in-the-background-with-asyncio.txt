Natural Text
This is my first attempt at using  in a project.  I'd like my class to initialize and run, with several of its functions running periodically "in the background".  I'd like the class' init to return after starting these background tasks, so that it can continue to do its synchronous stuff at the same time.What I have:I'm sure unsurprisingly, this doesn't work.  I've also tried using a "normal"  function with  in init, but of course init never returns then.How can I run  functions that belong to this class periodically in the background, while the rest of the class () continues to do synchronous work?
Passing loop as argument to  doesn't start this loop. You should call  or  to force you coroutines being started, there's no other way to do it.How can I run asyncio functions that belong to this class periodically  in the background, while the rest of the class (run()) continues to do  synchronous work?You can't. Just as you can't run event loop and synchronious code simultaneously in the main thread. Loop starting - blocks thread's execution flow until loop is stopped. This is just how  works.If you want to run  in background you should run it in separate thread and do your synchronous things in main thread. Example of how to do it can be found here.It you need to run blocking code in thread alongside with  most convenient way now is to run  in the main thread and to run blocking code in a background thread using  function. You can find example of doing it here.It's important to say that  itself usually is used in main thread (without other threads) to achieve benefits of asynchronous programming. Are you sure you need second thread? If not please read this answer to see why  is used.


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#run-an-event-loop
