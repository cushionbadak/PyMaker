Natural Text
I used to believe that  operator in Python checks the presence of element in some collection using equality checking , so  is roughly equivalent to . For example:orHowever, it is well-known that  is not equal to itself. So I expected that  is . And it is  indeed.However, if we use  instead of , the situation is quite different:But  still gives !How is it possible? What's the difference between  and ? How does  deal with ?
To check if the item is in the list, Python tests for object identity first, and then tests for equality only if the objects are different.1 is False because two different   objects are involved in the comparison. The test for identity therefore returns False, and then the test for equality also returns False since . however is True because the same  object is involved in the comparison. The test for object identity returns True and so Python immediately recognises the item as being in the list.The  method (invoked using ) for many of Python's other builtin Container types, such as tuples and sets, is implemented using the same check. 1 At least this is true in CPython. Object identity here means that the objects are found at the same memory address: the contains method for lists is performed using  which quickly compares object pointers before a potentially more complicated object comparison. Other Python implementations may differ.
One thing worth mentioning is that numpy arrays do behave as expected:Variations of the theme:Everything else is covered in @AlexRiley's excellent answer.


Answer URL
https://docs.python.org/3/library/stdtypes.html#common-sequence-operations
