Natural Text
In my code I have:and in my testcase it contains:when I run the self.assertRaises it gets to the except block and does the print(e) but doesn't raise the exception. I can't add a raise after the print statement because I don't want to end the script. How can I raise the exception?
You need to either re- the exception, or accept that callers of your method (including your test) won't ever see the exception because you handle that exception in your method.The point of exceptions is that you can walk up the stack to the nearest  block, allowing any given caller to insulate its own callers from exceptions that it shouldn't have to know about. That means that, as your function is written, it may be working as intended: You've made it so that the call to  can be done even if it throws an exception, and you recover by printing that exception and moving on. That would imply your test and specs need to change, not your production code.However, sometimes you need to intervene and still throw an exception: You might want to log the exception (as you're doing via ), inspect the exception to see whether to re-throw it, or wrap the exception in a different one that carries additional useful information (what data were you processing?) or abstraction (HighLevelException happened, because of LowLevelException).Python has a simple syntax for re-raising an exception from within an  block: Just call  without an instance.If you need to determine whether an exception was raised but donâ€™t intend to handle it, a simpler form of the raise statement allows you to re-raise the exception:So if you want to re-raise your exception, do so here:...but be careful: This can make your code confusing or frustrating, because you have unconditionally logged that an exception happened without handling it. If the caller handles the exception, they may not want your additional logging, and if they don't, the program ends anyway and your log may not help. There is no way for the caller to disable your  statement. Instead, consider wrapping the exception before re-throwing, or not handling the exception at all and letting the calling code be responsible for handling it.


Answer URL
https://docs.python.org/3/tutorial/errors.html#raising-exceptions
