Natural Text
I have a list of floats. If I simply  it, it shows up like this:I could use , which would require a  loop to traverse the list, but then it wouldn't work for more complex data structures.I'd like something like (I'm completely making this up)
It's an old question but I'd add something potentially useful:I know you wrote your example in raw Python lists, but if you decide to use  arrays instead (which would be perfectly legit in your example, because you seem to be dealing with arrays of numbers), there is (almost exactly) this command you said you made up:Or even better in your case if you still want to see all decimals of really precise numbers, but get rid of trailing zeros for example, use the formatting string :For just printing once and not changing global behavior, use  with the same arguments as above.
As noone has added it, it should be noted that going forward from Python 2.6+ the recommended way to do string formating is with , to get ready for Python 3+.The new string formating syntax is not hard to use, and yet is quite powerfull.I though that may be  could have something, but I haven't found anything.
A more permanent solution is to subclass :The problem with subclassing  is that it breaks code that's explicitly looking for a variable's type.  But so far as I can tell, that's the only problem with it.  And a simple  undoes the conversion to .Tragically, you can't just monkey-patch , because 's immutable.If you don't want to subclass , but don't mind defining a function,  is a lot more concise than 
You can do:
Note that you can also multiply a string like "%.2f" (example: "%.2f "*10).
This will avoid the rounding errors in the binary representation when printed, without introducing a fixed precision constraint (like formating with ):
The most easy option should be to use a rounding routine:This produces the output:
I believe that Python 3.1 will print them nicer by default, without any code changing. But that is useless if you use any extensions that haven't been updated to work with Python 3.1
List comps are your friend.Try it:
You could use pandas. Here is an example with a list:If you have a dict d, and you want its keys as rows:And another way of giving dict to a DataFrame:
Python 2:Python 3:Output:
First, elements inside a collection print their repr. you should learn about  and .This is the difference between print repr(1.1) and print 1.1. Let's join all those strings instead of the representations:
I just ran into this problem while trying to use pprint to output a list of tuples of floats.Nested comprehensions might be a bad idea, but here's what I did:I used generator expressions at first, but pprint just repred the generator...
I had this problem, but none of the solutions here did exactly what I wanted (I want the printed output to be a valid python expression), so how about this:Usage:(I know .format() is supposed to be the more standard solution, but I find this more readable)
The code below works nice to me.
To control the number of significant digits, use the format specifier %g.Let's name Emile's solution prettylist2f. Here is the modified one:Usage:If you want flexibility in the number of significant digits, use f-string formatting instead:
I agree with SilentGhost's comment, the for loop isn't that bad.  You can achieve what you want with:
As of Python 3.6, you can use f-strings:You can use print parameters while keeping code very readable:


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals
