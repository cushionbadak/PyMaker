Natural Text
Consider:How do I get the number of elements in the list?
The  function can be used with several different types in Python - both built-in types and library types. For example:Official 2.x documentation is here: Official 3.x documentation is here: 
How to get the size of a list?To find the size of a list, use the builtin function, :And now:returns 3.ExplanationEverything in Python is an object, including lists. All objects have a header of some sort in the C implementation. Lists and other similar builtin objects with a "size" in Python, in particular, have an attribute called , where the number of elements in the object is cached. So checking the number of objects in a list is very fast.But if you're checking if list size is zero or not, don't use  - instead, put the list in a boolean context - it treated as False if empty, True otherwise.From the docsReturn the length (the number of items) of an object. The argument may be a sequence (such as a string, bytes, tuple, list, or range) or  a collection (such as a dictionary, set, or frozen set). is implemented with , from the data model docs:Called to implement the built-in function . Should return the length of the object, an integer >= 0. Also, an object that doesnâ€™t  define a  [in Python 2 or  in Python 3] method and whose  method returns zero  is considered to be false in a Boolean context.And we can also see that  is a method of lists:returns 3.Builtin types you can get the  (length) ofAnd in fact we see we can get this information for all of the described types:Do not use  to test for an empty or nonempty listTo test for a specific length, of course, simply test for equality:But there's a special case for testing for a zero length list or the inverse. In that case, do not test for equality.Also, do not do:Instead, simply do:orI explain why here but in short,  or  is both more readable and more performant.
While this may not be useful due to the fact that it'd make a lot more sense as being "out of the box" functionality, a fairly simple hack would be to build a class with a  property:You can use it like so:Essentially, it's exactly identical to a list object, with the added benefit of having an OOP-friendly  property.As always, your mileage may vary.
Besides  you can also use  (requires Python 3.4+). For a normal  both are equivalent, but  makes it possible to get the length of a list-iterator, which could be useful in certain circumstances:But  is by definition only a "hint", so most of the time  is better.I've seen several answers suggesting accessing . This is all right when dealing with built-in classes like , but it could lead to problems with custom classes, because  (and ) implement some safety checks. For example, both do not allow negative lengths or lengths that exceed a certain value (the  value). So it's always safer to use the  function instead of the  method!
Answering your question as the examples also given previously:
And for completeness, it is possible without using the  function (I would not condone this as a good option):(The colon in  is implicit and is therefore also optional.)


Answer URL
https://docs.python.org/3/library/functions.html#len
