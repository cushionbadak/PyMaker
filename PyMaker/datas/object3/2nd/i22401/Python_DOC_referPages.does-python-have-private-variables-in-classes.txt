Natural Text
I'm coming from the Java world and reading Bruce Eckels' Python 3 Patterns, Recipes and Idioms. While reading about classes, it goes on to say that in Python there is no need to declare instance variables. You just use them in the constructor, and boom, they are there. So for example:If thatâ€™s true, then any object of class  can just change the value of variable  outside of the class. For example: In Java, we have been taught about public/private/protected variables.  Those keywords make sense because at times you want variables in a class to which no one outside the class has access to. Why is that not required in Python?
It's cultural.  In Python, you don't write to other classes' instance or class variables.  In Java, nothing prevents you from doing the same if you really want to - after all, you can always edit the source of the class itself to achieve the same effect. Python drops that pretence of security and encourages programmers to be responsible. In practice, this works very nicely.If you want to emulate private variables for some reason, you can always use the  prefix from PEP 8. Python mangles the names of variables like  so that they're not easily visible to code outside the class that contains them (although you can get around it if you're determined enough, just like you can get around Java's protections if you work at it).By the same convention, the  prefix means stay away even if you're not technically prevented from doing so. You don't play around with another class's variables that look like  or .
Private variables in python is more or less a hack: the interpreter intentionally renames the variable.Now, if you try to access  outside the class definition, it will fail:But you can easily get away with this:You probably know that methods in OOP are invoked like this: , if  can access some field in , this field can also be accessed outside ...after all, functions are created for reusability, there is no special power given to the statements inside.The game is different when there is a compiler involved (privacy is a compiler level concept). It know about class definition with access control modifiers so it can error out if the rules are not being followed at compile time
As correctly mentioned by many of the comments above, let's not forget the main goal of Access Modifiers: To help users of code understand what is supposed to change and what is supposed not to. When you see a private field you don't mess around with it. So it's mostly syntactic sugar which is easily achieved in Python by the _ and __.
"In java, we have been taught about public/private/protected variables""Why is that not required in python?"For the same reason, it's not required in Java.You're free to use -- or not use  and .As a Python and Java programmer, I've found that  and  are very, very important design concepts.  But as a practical matter, in tens of thousands of lines of Java and Python, I've never actually used  or .Why not?Here's my question "protected from whom?"  Other programmers on my team?  They have the source.  What does protected mean when they can change it?Other programmers on other teams?  They work for the same company.  They can -- with a phone call -- get the source.Clients?  It's work-for-hire programming (generally).  The clients (generally) own the code.So, who -- precisely -- am I protecting it from?
There is a variation of private variables in the underscore convention.There are some subtle differences, but for the sake of programming pattern ideological purity, its good enough.There are examples out there of @private decorators that more closely implement the concept, but YMMV. Arguably one could also write a class defintion that uses meta
Python has limited support for private identifiers, through a feature that automatically prepends the class name to any identifiers starting with two underscores.  This is transparent to the programmer, for the most part, but the net effect is that any variables named this way can be used as private variables.See here for more on that.In general, Python's implementation of object orientation is a bit primitive compared to other languages.  But I enjoy this, actually.  It's a very conceptually simple implementation and fits well with the dynamic style of the language.
The only time I ever use private variables is when I need to do other things when writing to or reading from the variable and as such I need to force the use of a setter and/or getter.Again this goes to culture, as already stated. I've been working on projects where reading and writing other classes variables was free-for-all. When one implementation became deprecated it took a lot longer to identify all code paths that used that function. When use of setters and getters was forced, a debug statement could easily be written to identify that the deprecated method had been called and the code path that calls it.When you are on a project where anyone can write an extension, notifying users about deprecated methods that are to disappear in a few releases hence is vital to keep module breakage at a minimum upon upgrades.So my answer is; if you and your colleagues maintain a simple code set then protecting class variables is not always necessary. If you are writing an extensible system then it becomes imperative when changes to the core is made that needs to be caught by all extensions using the code. 
private and protected concepts are very important. But python - just a tool for prototyping and rapid development with restricted resources available for development, that is why some of protection levels are not so strict followed in python. You can use "__" in class member, it works properly, but looks not good enough - each access to such field contains these characters. Also, you can noticed that python OOP concept is not perfect, smaltalk or ruby much closer to pure OOP concept. Even C# or Java are closer. Python is very good tool. But it is simplified OOP language. Syntactically and conceptually simplified. The main goal of python existence is to bring to developers possibility to write easy readable code with high abstraction level in a very fast manner.  
As mentioned earlier, you can indicate that a variable or method is private by prefixing it with an underscore. If you don't feel like this is enough, you can always use the  decorator. Here's an example:This way, someone or something that references  is actually referencing the return value of the  function rather than the variable itself, and therefore it can be accessed but not changed. However, if someone really wanted to, they could simply use  and assign a new value to it. There is no surefire way to prevent someone from accessing variables and methods that you wish to hide, as has been said repeatedly. However, using  is the clearest message you can send that a variable is not to be edited.  can also be used for more complex getter/setter/deleter access paths, as explained here: https://docs.python.org/3/library/functions.html#property
Sorry guys for "resurrecting" the thread, but, I hope this will help someone:In Python3 if you just want to "encapsulate" the class attributes, like in Java, you can just do the same thing like this:To instantiate this do:Note that:  will throw an error.In practice, Python3 will obfuscate the global attribute name. Turning this like a "private" attribute, like in Java. The attribute's name is still global, but in an inaccessible way, like a private attribute in other languages. But don't be afraid of it. It doesn't matter. It does the job too.  ;)
Python does not have any private variables like C++ or Java does. You could access any member variable at any time if wanted, too. However, you don't need private variables in Python, because in Python it is not bad to expose your classes member variables. If you have the need to encapsulate a member variable, you can do this by using "@property" later on without breaking existing client code.In python the single underscore "_" is used to indicate, that a method or variable is not considered as part of the public api of a class and that this part of the api could change between different versions. You can use these methods/variables, but your code could break, if you use a newer version of this class.The double underscore "__"  does not mean a "private variable". You use it to define variables which are "class local" and which can not be easily overidden by subclasses. It mangles the variables name.For example:self.__foobar's name is automatically mangled to self._A__foobar in class A. In class B it is mangled to self._B__foobar. So every subclass can define its own variable __foobar without overriding its parents variable(s). But nothing prevents you from accessing variables beginning with double underscores. However, name-mangling prevents you from calling this variables /methods incidentally.  I strongly recommend to watch Raymond Hettingers talk "Pythons class development toolkit" from Pycon 2013 (should be available on Youtube), which gives a good example why and how you should use @property and "__"-instance variables.


Answer URL
https://docs.python.org/3/library/functions.html#property
