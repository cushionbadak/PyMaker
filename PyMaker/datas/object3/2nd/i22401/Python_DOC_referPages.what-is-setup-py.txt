Natural Text
Can anyone please explain, what is  and how can it be configured or used?
 is a python file, which usually tells you that the module/package you are about to install has been packaged and distributed with Distutils, which is the standard for distributing Python Modules.This allows you to easily install Python packages. Often it's enough to write:and the module will install itself.https://docs.python.org/3/installing/index.html#installing-index
It helps to install a python package  on your machine (can also be in ) so that you can import the package  from other projects and also from [I]Python prompts.  It does the similar job of ,  etc.,Using  Let's start with some definitions:Package - A folder/directory that contains  file.Module  - A valid python file with  extension.Distribution - How one package relates to other packages and modules.  Let's say you want to install a package named . Then you do,  Instead, if you don't want to actually install it but still would like to use it. Then do,  This command will create symlinks to the source directory within site-packages instead of copying things. Because of this, it is quite fast (particularly for large packages).  Creating  If you have your package tree like,  Then, you do the following in your  script so that it can be installed on some machine:  Instead, if your package tree is more complex like the one below:  Then, your  in this case would be like:Add more stuff to () & make it decent:The  is used in pypi.org as the README description of your package.  And finally, you're now ready to upload your package to PyPi.org so that others can install your package using .  First step is to claim your package name & space in pypi using:Once your package name is registered, nobody can claim or use it. After successful registration, you have to upload your package there (to the cloud) by,Optionally, you can also sign your package with  by,Bonus: See a sample  from a real project here: 
 is Python's answer to a multi-platform installer and  file. If youâ€™re familiar with command line installations, then  translates to . Some packages are pure Python, and are only byte compiled. Others may contain native code, which will require a native compiler (like  or ) and a Python interfacing module (like  or ).
If you downloaded package that has "setup.py" in root folder, you can install it by runningIf you are developing a project and are wondering what this file is useful for, check Python documentation on writing the Setup Script
 is a Python script that is usually shipped with libraries or programs, written in that language. It's purpose is the correct installation of the software.Many packages use the  framework in conjuction with .http://docs.python.org/distutils/
setup.py can be used in two scenarios , First, you want to install a Python package. Second, you want to create your own Python package. Usually standard Python package has couple of important files like setup.py, setup.cfg and Manifest.in. When you are creating the Python package, these three files will determine the (content in PKG-INFO under egg-info folder) name, version, description, other required installations (usually in .txt file) and few other parameters. setup.cfg is read by setup.py while package is created (could be tar.gz ). Manifest.in is where you can define what should be included in your package. Anyways you can do bunch of stuff using setup.py like There are bunch of other commands which could be used with setup.py . for help 
When you download a package with  open your Terminal (Mac,Linux) or Command Prompt (Windows). Using   and helping you with Tab button set the path right to the folder where you have downloaded the file and where there is  :Press enter, you should see something like this:Then type after this  :Press . Done!
To install a Python package you've downloaded, you extract the archive and run the setup.py script inside:To me, this has always felt odd. It would be more natural to point a package manager at the download, as one would do in Ruby and Nodejs, eg. A package manager is more comfortable too, because it's familiar and reliable. On the other hand, each  is novel, because it's specific to the package. It demands faith in convention "I trust this setup.py takes the same commands as others I have used in the past". That's a regrettable tax on mental willpower. I'm not saying the setup.py workflow is less secure than a package manager (I understand Pip just runs the setup.py inside), but certainly I feel it's awkard and jarring. There's a harmony to commands all being to the same package manager application. You might even grow fond it.
 is a Python file like any other.  It can take any name, except by convention it is named  so that there is not a different procedure with each script.Most frequently  is used to install a Python module but server other purposes:Modules:Perhaps this is most famous usage of  is in modules.  Although they can be installed using ,  old Python versions did not include  by default and they needed to be installed separately.  If you wanted to install a module but did not want to install , just about the only alternative was to install the module from  file.  This could be achieved via .  This would install the Python module to the root dictionary (without ,  ect).This method is often used when  will fail.  For example if the correct Python version of the desired package is not available via perhaps because it is no longer maintained, , downloading the source and running  would perform the same thing, except in the case of compiled binaries are required,  (but will disregard the Python version -unless an error is returned).Another use of  is to install a package from source.  If a module is still under development the wheel files will not be available and the only way to install is to install from the source directly. Building Python extensions:When a module has been built it can be converted into module ready for distribution using a distutils setup script. Once built these can be installed using the command above.A setup script is easy to build and once the file has been properly configured and can be compiled by running  (see link for all commands).Once again it is named  for ease of use and by convention, but can take any name.Cython:Another famous use of  files include compiled extensions.  These require a setup script with user defined values.  They allow fast (but once compiled are platform dependant) execution.  Here is a simple example from the documentation:This can be compiled via Cx_Freeze:Another module requiring a setup script is .  This converts Python script to executables.  This allows many commands such as descriptions, names, icons, packages to include, exclude ect and once run will produce a distributable application.  An example from the documentation:This can be compiled via .So what is a  file?Quite simply it is a script that builds or configures something in the Python environment.A package when distributed should contain only one setup script but it is not uncommon to combine several together into a single setup script.  Notice this often involves  but not always (as I showed in my last example).  The thing to remember it just configures Python package/script in some way. It takes the name so the same command can always be used when building or installing.
To make it simple, setup.py is run as  when you call the install functions the other answers mentioned. Inside setup.py, you should put everything needed to install your package.Common setup.py functionsThe following two sections discuss two things many setup.py modules have. setuptools.setupThis function allows you to specify project attributes like the name of the project, the version.... Most importantly, this function allows you to install other functions if they're packaged properly. See this webpage for an example of setuptools.setupThese attributes of setuptools.setup enable installing these types of packages:Packages that are imported to your project and listed in PyPI using setuptools.findpackages:packages=find_packages(exclude=["docs","tests", ".gitignore", "README.rst","DESCRIPTION.rst"])Packages not in PyPI, but can be downloaded from a URL using dependency_links dependency_links=["http://peak.telecommunity.com/snapshots/",]Custom functionsIn an ideal world,  would handle everything for you. Unfortunately this isn't always the case. Sometimes you have to do specific things, like installing dependencies with the subprocess command, to get the system you're installing on in the right state for your package. Try to avoid this, these functions get confusing and often differ between OS and even distribution.


Answer URL
https://docs.python.org/3/installing/index.html#installing-index
https://docs.python.org/3/installing/index.html
https://docs.python.org/3/installing/index.html
