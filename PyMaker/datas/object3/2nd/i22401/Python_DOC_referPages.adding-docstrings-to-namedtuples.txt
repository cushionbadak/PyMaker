Natural Text
Is it possible to add a documentation string to a namedtuple in an easy manner?I triedbut that doesn't cut it. Is it possible to do in some other way?
You can achieve this by creating a simple, empty wrapper class around the returned value from .  Contents of a file I created ():Then in the Python REPL:Or you could do:If you don't like doing that by hand every time, it's trivial to write a sort-of factory function to do this:which outputs:
Came across this old question via Google while wondering the same thing.Just wanted to point out that you can tidy it up even more by calling namedtuple() right from the class declaration:
In Python 3, no wrapper is needed, as the  attributes of types is writable.This closely corresponds to a standard class definition, where the docstring follows the header.This does not work in Python 2.. 
Is it possible to add a documentation string to a namedtuple in an easy manner?Python 3In Python 3, you can easily alter the doc on your namedtuple:Which allows us to view the intent for them when we call help on them:This is really straightforward compared to the difficulties we have accomplishing the same thing in Python 2.Python 2In Python 2, you'll need tosubclass the namedtuple, and declare  Declaring  is an important part that the other answers here miss . If you don't declare  - you could add mutable ad-hoc attributes to the instances, introducing bugs.And now:Each instance will create a separate  when  is accessed (the lack of  won't otherwise impede the functionality, but the lightweightness of the tuple, immutability, and declared attributes are all important features of namedtuples). You'll also want a , if you want what is echoed on the command line to give you an equivalent object:a  like this is needed if you create the base namedtuple with a different name (like we did above with the name string argument, ):To test the repr, instantiate, then test for equality of a pass to Example from the documentationThe docs also give such an example, regarding  - I'm adding my own docstring to it:...The subclass shown above sets  to an empty tuple. This helps  keep memory requirements low by preventing the creation of instance  dictionaries.This demonstrates in-place usage (like another answer here suggests), but note that the in-place usage may become confusing when you look at the method resolution order, if you're debugging, which is why I originally suggested using  as a suffix for the base namedtuple:To prevent creation of a  when subclassing from a class that uses it, you must also declare it in the subclass. See also this answer for more caveats on using .
Since Python 3.5, docstrings for  objects can be updated.From the whatsnew:
In Python 3.6+ you can use:
No need to use a wrapper class as suggested by the accepted answer. Simply literally add a docstring:This results in: (example using ):Voilà!
You could concoct your own version of the namedtuple factory function by Raymond Hettinger and add an optional  argument.  However it would be easier -- and arguably better -- to just define your own factory function using the same basic technique as in the recipe.  Either way, you'll end up with something reusable.
I created this function to quickly create a named tuple and document the tuple along with each of its parameters:You can then create a new named tuple:Then instantiate the described named tuple with your own data, ie.When executing  via the python3 command line the following is shown:Alternatively, you can also specify the parameter's type via:
No, you can only add doc strings to modules, classes and function (including methods)


Answer URL
https://docs.python.org/3/whatsnew/3.5.html#collections
https://docs.python.org/3/library/typing.html#typing.NamedTuple
