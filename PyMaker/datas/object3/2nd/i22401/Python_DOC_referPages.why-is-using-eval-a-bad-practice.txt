Natural Text
I am using the following class to easily store data of my songs.I feel that this is just much more extensible than writing out an  block. However,  seems to be considered a bad practice and unsafe to use. If so, can anyone explain to me why and show me a better way of defining the above class?
Yes, using eval is a bad practice. Just to name a few reasons:There is almost always a better way to do itVery dangerous and insecureMakes debugging difficultSlowIn your case you can use setattr instead:EDIT:There are some cases where you have to use eval or exec. But they are rare. Using eval in your case is a bad practice for sure. I'm emphasizing on bad practice because eval and exec are frequently used in the wrong place.EDIT 2:It looks like some disagree that eval is 'very dangerous and insecure' in the OP case. That might be true for this specific case but not in general. The question was general and the reasons I listed are true for the general case as well.EDIT 3:Reordered point 1 and 4
Using  is weak, not a clearly bad practice.It violates the "Fundamental Principle of Software".  Your source is not the sum total of what's executable.  In addition to your source, there are the arguments to , which must be clearly understood.  For this reason, it's the tool of last resort.It's usually a sign of thoughtless design.  There's rarely a good reason for dynamic source code, built on-the-fly.  Almost anything can be done with delegation and other OO design techniques.It leads to relatively slow on-the-fly compilation of small pieces of code.  An overhead which can be avoided by using better design patterns.As a footnote, in the hands of deranged sociopaths, it may not work out well.  However, when confronted with deranged sociopathic users or administrators, it's best to not give them interpreted Python in the first place.  In the hands of the truly evil, Python can a liability;  doesn't increase the risk at all.  
In this case, yes. Instead ofyou should use the builtin function :
Yes, it is:Hack using Python:The below code will list all tasks running on a Windows machine.In Linux:
It's worth noting that for the specific problem in question, there are several alternatives to using :The simplest, as noted, is using :A less obvious approach is updating the object's  object directly.  If all you want to do is initialize the attributes to , then this is less straightforward than the above.  But consider this:This allows you to pass keyword arguments to the constructor, e.g.:It also allows you to make your use of  more explicit, e.g.:...and, if you really want to assign  to the attributes whose names are found in :Another approach to providing an object with default values for a list of attributes is to define the class's  method:This method gets called when the named attribute isn't found in the normal way.  This approach somewhat less straightforward than simply setting the attributes in the constructor or updating the , but it has the merit of not actually creating the attribute unless it exists, which can pretty substantially reduce the class's memory usage.The point of all this:  There are lots of reasons, in general, to avoid  - the security problem of executing code that you don't control, the practical problem of code you can't debug, etc.  But an even more important reason is that generally, you don't need to use it.  Python exposes so much of its internal mechanisms to the programmer that you rarely really need to write code that writes code.
Other users pointed out how your code can be changed as to not depend on ; I'll offer a legitimate use-case for using , one that is found even in CPython: testing.Here's one example I found in  where a test on whether  raises a :The usage is clearly not bad practice here; you define the input and merely observe behavior.  is handy for testing.Take a look at this search for , performed on the CPython git repository; testing with eval is heavily used.
When  is used to process user-provided input, you enable the user to Drop-to-REPL providing something like this:You may get away with it, but normally you don't want vectors for arbitrary code execution in your applications.
In addition to @Nadia Alramli answer, since I am new to Python and was eager to check how using  will affect the timings, I tried a small program and below were the observations: 


Answer URL
https://docs.python.org/3/library/code.html
