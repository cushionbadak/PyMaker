Natural Text
I saw this in someone's code. What does it mean?
Using these magic methods (, ) allows you to implement objects which can be used easily with the  statement. The idea is that it makes it easy to build code which needs some 'cleandown' code executed (think of it as a  block). Some more explanation here.A useful example could be a database connection object (which then automagically closes the connection once the corresponding 'with'-statement goes out of scope):As explained above, use this object with the  statement (you may need to do  at the top of the file if you're on Python 2.5).PEP343 -- The 'with' statement' has a nice writeup as well.
If you know what context managers are then you need nothing more to understand  and  magic methods. Lets see a very simple example.In this example I am opening myfile.txt with help of open function. The try/finally block ensures that even if an unexpected exception occurs myfile.txt will be closed.Now I am opening same file with with statement:If you look at the code, I  didn't close the file & there is no try/finally block. Because with statement automatically closes  myfile.txt . You can even check it by calling  attribute -- which returns .This is because the file objects (fp in my example) returned by open function has two built-in methods  and . It is  also known as context manager.  method is called at the start of with block and   method is called at the end.  Note: with statement only works with objects that support the context mamangement protocol i.e. they have  and  methods. A class which implement both methods is known as context manager class.Now lets define our own context manager class.I hope now you have basic understanding of both  and  magic methods.
I found it strangely difficult to locate the python docs for  and  methods by Googling, so to help others here is the link:https://docs.python.org/2/reference/datamodel.html#with-statement-context-managershttps://docs.python.org/3/reference/datamodel.html#with-statement-context-managers(detail is the same for both versions)  Enter the runtime context related to this object. The  statement will bind this method’s return value to the target(s) specified in the as clause of the statement, if any.  Exit the runtime context related to this object. The parameters describe the exception that caused the context to be exited. If the context was exited without an exception, all three arguments will be .If an exception is supplied, and the method wishes to suppress the exception (i.e., prevent it from being propagated), it should return a true value. Otherwise, the exception will be processed normally upon exit from this method.Note that  methods should not reraise the passed-in exception; this is the caller’s responsibility.I was hoping for a clear description of the  method arguments. This is lacking but we can deduce them...Presumably  is the class of the exception.It says you should not re-raise the passed-in exception. This suggests to us that one of the arguments might be an actual Exception instance ...or maybe you're supposed to instantiate it yourself from the type and value?We can answer by looking at this article:http://effbot.org/zone/python-with-statement.htmFor example, the following  method swallows any TypeError, but lets all other exceptions through:...so clearly  is an Exception instance.And presumably  is a Python traceback object.
In addition to the above answers to exemplify invocation order, a simple run exampleProduces the output: A reminder: when using the syntax , variable mc gets the value returned by , in the above case ! For such use, need to define return value, such as: 
try adding my answers (my thought of learning) : and  both are methods that are invoked on entry to and exit from the body of "the with statement" (PEP 343) and implementation of both is called context manager.the with statement is intend to hiding flow control of try finally clause and make the code inscrutable.the syntax of the with statement is :which translate to (as mention in PEP 343) :try some code:and now try manually (following translate syntax):the result of the server side same as beforesorry for my bad english and my unclear explanations, thank you....


Answer URL
https://docs.python.org/3/reference/datamodel.html#with-statement-context-managers
