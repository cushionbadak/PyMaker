Natural Text
Python has an ordered dictionary. What about an ordered set?
There is an ordered set (possible new link) recipe for this which is referred to from the Python 2 Documentation. This runs on Py2.6 or later and 3.0 or later without any modifications. The interface is almost exactly the same as a normal set, except that initialisation should be done with a list.This is a MutableSet, so the signature for  doesn't match that of set, but since it includes  something similar can easily be added:
An ordered set is functionally a special case of an ordered dictionary.The keys of a dictionary are unique. Thus, if one disregards the values in an ordered dictionary (e.g. by assigning them ), then one has essentially an ordered set.As of Python 3.1 there is . The following is an example implementation of an OrderedSet. (Note that only few methods need to be defined or overridden:  and  do the heavy lifting.)
Implementations on PyPIWhile others have pointed out that there is no built-in implementation of an insertion-order preserving set in Python (yet), I am feeling that this question is missing an answer which states what there is to be found on PyPI.To the best of my knowledge there currently is:ordered-setosetBoth implementations are based on the recipe posted by Raymond Hettinger to ActiveState which is also mentioned in other answers here. I have checked out both and identified the following critical differences:ordered-set (version 1.1)advantage: O(1) for lookups by index (e.g. )disadvantage:  not implemented oset (version 0.1.3)advantage: O(1) for disadvantage: apparently O(n) for lookups by indexBoth implementations have O(1) for  and  ().Unfortunately neither implementation has method-based set operations like  -> You have to use the operator-based form like  instead. See the Python documentation on Set Objects for a full list of set operation methods and their operator-based equivalents.I first went with ordered-set until I used  for the first time which crashed my script with a . As I have never used lookup by index so far, I meanwhile switched to oset. If you know about other implementations on PyPI, let me know in the comments.
I can do you one better than an OrderedSet: boltons has a pure-Python, 2/3-compatible  type that is not only an ordered set, but also supports indexing (as with lists).Simply  (or copy  into your codebase), import the  and:Everything is unique and retained in order. Full disclosure: I wrote the , but that also means you can bug me if there are any issues. :)
The answer is no, but you can use , which is in the Python Standard Library, with just keys (and values as ) for the same purpose.Here's an example of how to use  as an ordered set to filter out duplicate items while preserving order:
If you're using the ordered set to maintain a sorted order, consider using a sorted set implementation from PyPI. The sortedcontainers module provides a SortedSet for just this purpose. Some benefits: pure-Python, fast-as-C implementations, 100% unit test coverage, hours of stress testing.Installing from PyPI is easy with pip:Note that if you can't , simply pull down the sortedlist.py and sortedset.py files from the open-source repository.Once installed you can simply:The sortedcontainers module also maintains a performance comparison with several alternative implementations.For the comment that asked about Python's bag data type, there's alternatively a SortedList data type which can be used to efficiently implement a bag.
A little late to the game, but I've written a class  as part of  that fully implements both  and GitHub: https://github.com/mlenzen/collections-extendedDocumentation: http://collections-extended.lenzm.net/en/latest/PyPI: https://pypi.python.org/pypi/collections-extended
In case you're already using pandas in your code, its  object behaves pretty like an ordered set, as shown in this article.
There's no  in official library.I make an exhaustive cheatsheet of all the data structure for your reference.
For many purposes simply calling sorted will suffice.  For exampleIf you are going to use this repeatedly, there will be overhead incurred by calling the sorted function so you might want to save the resulting list, as long as you're done changing the set.  If you need to maintain unique elements and sorted, I agree with the suggestion of using OrderedDict from collections with an arbitrary value such as None.
The ParallelRegression package provides a setList( ) ordered set class that is more method-complete than the options based on the ActiveState recipe.  It supports all methods available for lists and most if not all methods available for sets.
So i also had a small list where i clearly had the possibility of introducing non-unique values.I searched for the existence of a unique list of some sort, but then realized that testing the existence of the element before adding it works just fine.I don't know if there are caveats to this simple approach, but it solves my problem.
There are four kinds of ordering one might want, I believe:Ordered by keyOrdered by value (I've not heard of anyone ask for this one though)Ordered by modification timeOrdered by addition timeI believe collections.OrderedDict gets you #4.  Or you could remove a key and re-add it, for #3.For #1, you probably should check into a red-black tree or treap:http://pypi.python.org/pypi/bintrees/0.3.0http://pypi.python.org/pypi/rbtree/http://stromberg.dnsalias.org/~dstromberg/treap/Red-Black trees have low variability in operation times (so might be better for interactive applications), but aren't as fast as treaps on average (which might be better for batch processing - treaps don't reorganize themselves often making them fast on average, but when they do reorganize it might take a relatively long while).Both of these are established data structures with implementations in many languages.


Answer URL
https://docs.python.org/3/library/collections.html
