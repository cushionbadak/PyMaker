Natural Text
Possible Duplicates:Python: defining my own operators?Rules of thumb for when to use operator overloading in python Is it possible to overload operators in Python? If so, can one define new operators, such as  and ?
As other answers have mentioned, you can indeed overload operators (by definining special methods in the class you're writing, i.e., methods whose names start and end with two underscores).  All the details are here.To complete the answers to you questions: you cannot define new operators; but  is not a new operator, it's an existing one, and it's overloaded by defining in the class the method .As a historical note, this is also pretty much the situation in C++ -- but the exact set of operators you can overload differs between the two languages. For example, in C++, you cannot overload attribute access, ; in Python, you can, with  (or , with different semantics) and . Vice versa, in Python  (plain assignment) is not an operator, so you cannot overload that, while in C++ it is an operator and you can overload it. is an operator, and can be overloaded, in both languages -- that's how  and , while not losing their initial connotation of left and right shifts, also became I/O formatting operators in C++ (not in Python!-).
See: http://docs.python.org/reference/datamodel.html#special-method-names.A class can implement certain operations that are invoked by special syntax (such as arithmetic operations or subscripting and slicing) by defining methods with special names. This is Pythonâ€™s approach to operator overloading, allowing classes to define their own behavior with respect to language operators. 
Yes, and no. I don't think you can define your own operators, but you can overload the existing ones - you can do that by overriding the operator's special method. For example, to override >, you can override , for != override  and so on. 


Answer URL
https://docs.python.org/3/library/operator.html#operator.__lshift__
