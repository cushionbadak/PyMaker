Natural Text
This question already has an answer here:List of lists changes reflected across sublists unexpectedly                    12 answers                I need to initialize 2d array with list.For example 2X3 array: First attempt:  This is strange. So I checked:Same address.Second attempt:Right.Let me check memory address again:Well, strange. Same address again. I expected different addresses. My initial guess is that the address returned is the address of pointer to value. Then how can I retrieve the address of the slot?Is there anyone who can explain the workings of Python that caused this behavior? In Python, I think it's very hard to know which is pointer and which is value.
In Python the expression  is equivalent to "append a reference to  to the outer list  times".This is always fine for  being a literal:However, the same mechanism applies for  being a mutable. A reference to  is inserted  times. If you then modify any element of , all the others will also be modified, since they are all references to the same list.You can learn more about this behavior by reading the docs on common sequence operations.The suggested way of creating a multidimensional list is:This works, because in each iteration of the loop a new list instance is created and then appended to the outer list.
You're comparing the memory address of the values in the lists not the addresses of your lists.The memory addresses of your lists differ:But in your first example the "sub" lists are identical:The question why the values have the same memory adress is more complicated:Python reuses the integers -5 to 255 (CPython at least) so  will always have the same memory address.literal numbers like  have the same memory address if they are defined in the same block (used in the same function - maybe also same module - or in the same "line" when not in a function).When you multiply a  the references are reused. In this case it doesn't matter because it's a literal number, so the reference is always reused. But in case it's not a literal number that may be important:In your case you define the number in the same line and it's a small integers so they will always have the same memory address.


Answer URL
https://docs.python.org/3/library/stdtypes.html#typesseq-common
