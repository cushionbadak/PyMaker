Natural Text
I have situation similar to:Then I want to test  function using mocking of  function.I'm doing something like this:But it doesn't work as I expect.. As I thought,  returns my list from  function, but it looks like it's still an Mock object, which is not expected for me.What is wrong here?
There are two main problems that you are facing here. The primary issue that is raising the current problem you are experiencing is because of how you are actually mocking. Now, since you are actually patching the  for , you want to make sure that you are still using the real ConcreteClient but mocking the attributes of the instance that you want to mock when testing. You can actually see this illustration in the documentation. Unfortunately there is no explicit anchor for the exact line, but if you follow this link: https://docs.python.org/3/library/unittest.mock-examples.htmlThe section that states:Where you use patch() to create a mock for you, you can get a  reference to the mock using the “as” form of the with statement:The code in reference is: The critical item to notice here is how the everything is being called. Notice that the real instance of the class is created. In your example, when you are doing this: You are creating a  object that is specced on ConcreteClient. So, ultimately this is just a  object that holds the attributes for your . You will not actually be holding the real instance of . To solve this problem. simply create a real instance after you patch your object. Also, to make your life easier so you don't have to manually start/stop your patch.object, use the context manager, it will save you a lot of hassle.Finally, your second problem, is your . Your  is actually returning the uncalled  function. You actually want the data itself, so it needs to be the return of that function. You could just put the data itself as your . With these two corrections in mind, your test should now just look like this: I took the liberty of actually returning the result of  in  just to have something to compare to. I'm not sure what your real code looks like. But, ultimately, the structure of your test in how you should be doing this, is illustrated above. 


Answer URL
https://docs.python.org/3/library/unittest.mock-examples.html
