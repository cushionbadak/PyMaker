Natural Text
While reading the Logical operators in python i came across with expressions :output : 1 output : 5 Can anyone explain how is this working ?I know that the operands of the logical operators are Boolean
that is well documented:both short-circuit (e.g.  will not evaluate  if  is truthy).the documentation also states what is considered falsy (, , , empty sequences/mappings, ...) - everything else is considered truthy.a few examples:note how the last two show the short-circuit behavior: the second statement (that would raise an ) is not executed.your statement that the operands are boolean is a bit moot. python does have booleans (actually just 2 of them:  and ; they are subtypes of int). but logical operations in python just check if operands are truthy or falsy. the  function is not called on the operands.the terms truthy and falsy seem not to be used in the official python documentation. but books teaching python and the community here do use these terms. there is a discussion about the terms on english.stackexchange.com and also a mention on wikipedia.
This is because of the short-circuit evaluation method.For the , all of the clauses must be , so all of them must be evaluated. Once a  is encountered, the whole thing evaluates to , we don't even need to evaluate the next ones.But for , any of the clauses being evaluated to  is enough for the whole thing to be . So once it finds something to be , the value of the whole thing is decided to be , without even evaluating the subsequent clauses.
This is called short circuiting or lazy evaluation. Example, if you have "a or b" and a meets the criteria, then python will output it. Conversely, if you have "a and b" and "a" does not meet the criteria, then python will stop evaluating it since it cannot be satisfied.
In the first case when the and keyword is there, it is the second value that determines whether it is logically true or not, provided the first number is non-zero. Thus the second value is printed eventually.In the second case, the keyword is or so when the first non-zero operand is encountered, since it makes the statement logically true, it is printed onto the output screen.It is an example of lazy evaluation.


Answer URL
https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not
https://docs.python.org/3/library/stdtypes.html#truth-value-testing
