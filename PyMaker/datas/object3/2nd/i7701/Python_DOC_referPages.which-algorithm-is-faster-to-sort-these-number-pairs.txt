Natural Text
I wrote two solutions in python.. It is supposed to take a list of numbers and sort the ones that add up to a sum, both these return the same pairs, but which one is more efficient? I'm not sure if using python's count method does more work behind the scene making the second one longerIs there an even better solution that I'm missing?
When comparing algorithms, you should compare their time complexities. Measuring the time is also a good idea, but heavily dependent on the input, which now is tiny.The first algorithm takes:O(N2)because of the double for loop.For the second algorithm, you should take into account that  has a time complexity of . You have on for loop, and in its body  will be called twice, once after  and once in whichever body of the if-else statement you go into. As a result the time complexity is , which yields:O(N2)That means that both algorithm have the same time complexity. As a result it now has meaning to measure the performance, by running many experiments and taking the average of the time measurements, with big enough input to reflect performance.
It's almost always useful to measure complexity of your algorithms.Both of your algorithms has O(N^2) complexity, so there are almost  interchangeable in terms of performance. You may improve your algorithm by keeping a mapping of value-index pairs.  It will reduce complexity to O(N), basically you'll have one loop.
you can run test yourself using the  module:also note that  is a built-in and therefore not a good name for a variable...there are way better algorithms for that! especially considering you have duplicates in your list.here is a faster version that will only give you the matches but not the multiplicity of the matches:
Yes there is better algorithm which can be used if you know  and  of the data.  which takes  time and space is not constant (which depends on the range of upper bound and lower bound).Refer Counting SortPS: Counting Sort is not a comparison based sort algorithm. Refer below sample code:


Answer URL
https://docs.python.org/3/library/timeit.html
