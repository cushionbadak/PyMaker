Natural Text
In C++ and C# and others, you can overload or adjust the return type to match the input types.  Using Python I find references that the return type should be consistent regardless.  Like in this questionNow for my code that wants to match return type to param typeoutputSo how bad is this python sin?  I mostly still work in 2.7 I know 3.3 has type hints, learning that will need to wait for later in the summer.Anyone have a less sinful way to achieve most of the benefits? or a coherent argument why this should not be done?Addendum:Other than the Python3 Moses which I like. I feel compelled to find if this question is best answered with something like in python 2.7In summary spread comprehension stuff out in the code even if is quite common.  Choose proliferation of comprehension over obscure return data types?I suspect I would remove 400+ comprehension lines in the final code if I did it with adjusting return types.  But if that is too strange then so be it.It comes down to readability ver violation of the unwritten rule about 1 function 1 return type.   
If you're looking to have some consistency of the return type with the argument (precisely, first argument), you can create overloaded implementations of your function with ; one of the reasons I'll say you start moving to Python 3:
Putting my five cents there:
You can actually check the type instead of relying on exceptions.
You could use  - and passing the keys / values of a dict as well as the items of a list recursively to the function will handle more types:


Answer URL
https://docs.python.org/3/library/functools.html#functools.singledispatch
