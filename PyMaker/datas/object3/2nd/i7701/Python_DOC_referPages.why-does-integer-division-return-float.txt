Natural Text
From what I understand, the integer division  operator is guaranteed to return an integer. However, while , I also get . Why doesn't python produce an integer, and, is it always safe to cast the output to ?
You misunderstood the operator. It is a floor division operator, not an integer division operator.For floating point inputs, it'll still return a floored float value.From the Binary arithmetic operations section:The  (division) and  (floor division) operators yield the quotient of their arguments. The numeric arguments are first converted to a common type. Division of integers yields a float, while floor division of integers results in an integer; the result is that of mathematical division with the ‘floor’ function applied to the result.The result of flooring is safe to convert to an integer.


Answer URL
https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations
