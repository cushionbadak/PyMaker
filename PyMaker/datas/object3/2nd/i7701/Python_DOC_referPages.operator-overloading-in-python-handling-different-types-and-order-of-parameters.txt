Natural Text
This question already has an answer here:Python commutative operator override                    1 answer                I have a simple class that helps with mathematical operations on vectors (i.e. lists of numbers). My  can be multiplied by other instances of  or a scalar ( or ).In other, more strongly typed, languages I would create a method to multiply two s and a separate method to multiply a  by and /. I'm still pretty new to Python and am not sure how I would implement this. The only way I can think of doing it is override  and test the incoming parameter:Even if I do it that way I would be forced to multiply a  by a scalar like this:What if I wanted to reverse the order of the operands in the multiplication?What is the right way to do that in Python?
You also need to implement . When the initial call to  fails, Python will next try .As Rawing points out, you could simply write  for this definition.  exists to allow for non-commutative multiplication where simply deferring to  with the operands reversed isn't sufficient.For instance, if you were writing a  class and wanted to support multiplication by a nested list, e.g.,Here, the  class wouldn't know how to multiple a list by a  instance, so when  fails, Python would next try . However,  and  are two different results in general, so ;  has to do a little extra work to generate the right answer.
There are special methods for reversed operations: for the reverse of  and  for ,...These are called when the left hand side operator returns  for the normal operation (so the operation  will first try:  but if this returns  then  is called).However I wouldn't use  checks in the arithmetic special methods, that will lead to a lot of code repetition. You could actually create a special case in  and implement a conversion from scalars to a  there:This should work as expected:Note that this was a quick and dirty draft (that could have several bugs). I just wanted to present the "general idea" how it could be solved without special casing the type in each arithmetic operation.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__radd__
