Natural Text
If you do this  where  is a list of whatever, you'll get a dictionary with all the odd elements as keys and even ones as their values. woah!I have a basic understanding of how dictionary comprehensions work, how  works, how  extracts arguments, how  concatenates two copies of the list, and so I was expecting a one-to-one correspondence like .What's going on here?
This is an interesting little piece of code for sure! The main thing it utilizes that you might not expect is that objects are, in effect, passed by reference (they're actually passed by assignment, but hey).  constructs an object, so "copying" it (using multiplication on a list, in this case) doesn't create a new one, but rather adds another reference to the same one. That means you have a list where  is an iterator, and  is the same iterator - accessing them both accesses the very same object.Every time the next element of the iterator is accessed, it continues where it last left off. Since elements are accessed alternately between the first and second elements of the tuples that  creates, the single iterator's state is advanced across both elements in the tuple.After that, the dictionary comprehension simply consumes these pair tuples as they expand to  - as they would in any other dictionary comprehension.
This  creates an iterator over the iterable (list or similar) .  This iterator gets copied using .  Now you have a list of two times the same iterator.  This means, if I ask one of them for a value, the other (which is the same) gets incremented as well. now gets the two iterators (which are the same) as two parameters via the  syntax.  This means, it creates a list of pairs of the two arguments it got.  It will ask the first iterator for a value (and receive ), then it will ask the other iterator for a value (and receive ), then it will form a pair of the two values and put that in its output.  Then it will do this repeatedly until the iterators are exhausted.  By this it will form a pair of  and , then a pair of  and , etc.This list of pairs then is passed to the dictionary comprehension which will form the pairs into key/values of a dictionary.Easier to read might be this:But that might not be as efficient.


Answer URL
https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference
