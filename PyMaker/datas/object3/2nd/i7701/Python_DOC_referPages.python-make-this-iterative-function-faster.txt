Natural Text
i have this functionwhere some_function takes 2 floats does some simple math operation and returns a float.the problem is that the length of the argument of f is potentially big and i must loop n times over the result, i.e:the question is, how to make this simple algorithm faster? i know that map improves "speed" a bit, but i dont know how to use it in this case. of corse any othre ideas are usefull.thank you very much !!!(if i have some lenguage mistake, be indulgent, english is not my native tongue)
Replacing a loop iteration with a map or list comprehension gives, at best a modest speed improvement - my guess is at best 2x.  But using the last calculated value with a comprehension or map is tricky (but not impossible).Your function:sample function:streamlining your function:testing:time tests:A generator approach:With a preallocated result (also suggested by  in a comment):We can get a sense of the theoretically possible improvement by using  performs this action, but only returns the last value.Cumulative sum with list comprehension tells us that Py3  has an  function:Unfortunately,  does not take an initial value parameter (while  does).Let's get a sense of what list comprehension and map can do for us, without trying to capture the accumulative action:The generator approach looks pretty good.  It is correct, and its times are close to the  and list comprehension ones.  Streamlining the function evaluation makes the biggest difference.  The method of collecting values in a list isn't so important.  If you have , you may be able to cast the problem as a  one.  For example with this simple summation:https://docs.python.org/3/library/itertools.html#itertool-functionsFirst-order recurrence relations can be modeled by supplying the initial value in the iterable and using only the accumulated total in func argumentSo:Though this does depend on  returning .
Maybe using list comprehension :


Answer URL
https://docs.python.org/3/library/itertools.html#itertool-functions
