Natural Text
Python3.6 now asynchronous iterables. Is there builtin way to transform a asynchronous iterable to a synchronous iterable. I currently have this helper function, but it feels very un-pythonic. Is there a better way to do this?
You can use aiostream.stream.list:More operators and examples in the documentation.
Your "asynchronous to synchronous" helper is itself asynchronous; not a big change at all. In general: no, you cannot make something asynchronous synchronous. An asynchronous value will be supplied "sometime later"; you cannot make that into "now" because the value doesn't exist "now" and you will have to wait for it, asynchronously.
These functions allow you to convert from / to  <==> , not just simple lists.Basic importsThe function  will convert any async iterable to a sync iterable:You can use it like this:The function to_async_iterable will convert any sync iterable to an async iterable:This one is specially useful for asyncio programs because it won't block the event loop even if the the sync iterable blocks. You can use it like this:


Answer URL
https://docs.python.org/3/glossary.html#term-asynchronous-iterable
