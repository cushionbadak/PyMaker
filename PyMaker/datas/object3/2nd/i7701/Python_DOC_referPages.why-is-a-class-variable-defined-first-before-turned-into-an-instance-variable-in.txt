Natural Text
when learning python property decorator in this link, I stumbled upon following lines of code:this code basically let you modify/add restraint to a  object, without having anybody who inherited  class refactor their code.why does it define a class variable  first, rather than just let  and done?EDIT: Due to conflict opinions in comments, I will now restore the code to original state, regardless if there is a typo, to make it easy for people read this afterwards.
The answer lies in the descriptor protocol and attribute lookup order. If you did this: It will not behave the way you expect. At all. WHY? Because you overwrote the property object with the number that was provided to the initializer. Observe: A property should be an instance of :But your temperature isn't a property anymore: You overwrote it with this line: Sprinkle some  statements to see what is going on: Therefore, the property object needs to be stored at the class level so it doesn't get overwritten at the instance level. When a class level property object is accessed at the instance level, the descriptor protocol is automatically invoked (a  is a type of descriptor; descriptors have unusual behavior so go study them carefully). Learn more about class level objects vs. instance level objects at this much more detailed answer.Also note that the temperature needs to be set in the initializer using the property. Do not do this:Using this code you could do this without an error, which is bad: . Typically the initializer should use the property to get or set the private variable just like any other method would: Now an invalid initial temperature will cause an error, as expected. 
In the snippet above there are two things addressed:1. Setting temperature during object creation using parameterized constructor.In this case Celsius with temperature 8 will be created as:2. Setting and retrieving temperature using object property usingIn this case Celsius with temperature 8 will be created, set/retrieved as:
Because methods are class properties. And  does not exist in that scope.Note, that code is very out of date; you should use  as a decorator:


Answer URL
https://docs.python.org/3/howto/descriptor.html
