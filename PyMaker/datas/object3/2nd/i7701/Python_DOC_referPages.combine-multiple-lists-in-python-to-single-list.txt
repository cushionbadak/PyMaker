Natural Text
The function above combines 2 lists into a single list. E.g.  could be somthing like What is the most pythonic way to extend this from just 2 input parameters to an arbitrary number of lists as input. The output should still be a list of lists--EDITThe expected answer for lt1 = [1, 2, 3], lt2=[4, 5, 6] should be [[1, 2, 3], [4, 5, 6]] 
You can simply use list comprehension here, and let it work for an arbitrary number of arguments using :The code works as follows, by using list comprehesion, we will iterate over the , a tuple of the unnamed arguments with which  was called. For each of these lists , we check  if that is the case, then we add  to the list, otherwise we add .Note that this program can raise an error: in case one of the s can not be indexed, or has no element at index 0. So it is quite unsafe.You can - by altering the semantics slighly - prevent this from happening: if we are dealing with an empty list, then we add that list in the following example:This will work given all objects are lists, tuples, etc.
If I understand your question, you want something like this:So, we're using positional arguments from  (which are stored in a ) and converting them to a list. It works for any number of arguments, and it'll happily combine anything (not just lists) into a list.
You can simply do this. It will give you the list of the two lists you have.
You can use  with multiple arguments  and return a  like this example:Output:


Answer URL
https://docs.python.org/3/reference/expressions.html#calls
