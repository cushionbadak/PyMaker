Natural Text
According to , two or three arguments are accepted:Doing some simple tests, we can confirm this:Too few/too many arguments also behave as expected:The argument names specified in the help text do not seem to be accepted as keyword arguments:The  module is no help here:Now, the question: Is there a straightforward way to write my own Python function with a signature that behaves exactly like 's signature? That is, keyword arguments are not allowed, and minumum/maximum number of arguments are enforced? The closest I've come is the following:But now instead of meaningful argument names like  and  we get  and . It's also a lot of boilerplate, and feels downright unpleasant. I know that, being a builtin,  must have vastly different implementation than typical Python code, and perhaps there's no way to perfectly emulate the way it behaves. But it's a curiosity I've had for a while.
This code ticks most of your requirements:keyword arguments are not allowedA minumum/maximum number of arguments are enforcedmeaningful argument namesnot a lot of boilerplate
These kinds of function signatures are particular to functions written in C, using the C-level  family of functions and the Argument Clinic preprocessor. There's no built-in way to write that kind of signature in Python. The closest you can get is what you already came up with, using .(As an aside, there is already syntax picked out in case they do decide to implement this functionality, described in PEP 457, but for now, that syntax is only used in documentation, and a slight variant is used in Argument Clinic.)


Answer URL
https://docs.python.org/3/c-api/arg.html
https://docs.python.org/3/howto/clinic.html
