Natural Text
Inspecting the  class in Python with , I see that it has attributes  and . Indeed I saw that the following code works:However, I cannot see which logic is implemented for this comparison, nor its usecase. Can anyone point me to that?I am not asking about tuple comparison. Even if slice and tuple are compared the same way, I don't think this makes my question a duplicate. What's more, I also asked for a possible usecase of slice comparison, which the suggested duplicate does not give.
Looking at the source code for  reveals that the comparison is implemented by first converting the two objects into  tuples, and then comparing those tuples:https://github.com/python/cpython/blob/6cca5c8459cc439cb050010ffa762a03859d3051/Objects/sliceobject.c#L598As to the use cases, I am not sure of the authors' intent. I do note that there don't appear to be any comparison unit tests for anything other than equality:https://github.com/python/cpython/blob/6f0eb93183519024cb360162bdd81b9faec97ba6/Lib/test/test_slice.py#L87
Comparing tuples :  returns  because .However,  returns  because .NB:  and  doesn't mean  or , but  and .So, in other words, you're comapring which is coming before and which is coming after.Some "odd" cases (Or, misleading cases within  and ): returns  because the missing value of the first tuple will be equal to  value of the operation which is zero in this case. Or you can think of it that .And: will returns  because Another case: will returns  because .Same logic for ,  and even .For more informations, visit this answer.
Python data model only mentions that slice objects have three read-only attributes and one method. It does not mention any other properties of slices.As mentioned by @NPE, CPython implementation indeed provides a comparison for slice objects, which simply treats  as a tuple of . I've checked it with a small Python program which confirmed that:However, that looks like a non-standard extension. For example, Jython also implements comparison for slices, but in a different way. Moreover, it looks like it implements comparison for all possible pairs of objects by comparing objects of the same type by their s, which is propagated to slices.So, order of slices in Jython is non-deterministic. For example, the following snippet prints  on my system with Jython and  with CPython:Summarizing:  is implemented in CPython for some obscure reason, but it's not described anywhere in documentation and other implementations may behave not only differently, but "incorrectly" (in mathematical sense). So, one should not compare slices for inequality.


Answer URL
https://docs.python.org/3/reference/datamodel.html#index-64
