Natural Text
Given a file object, how do I determine whether it is opened in bytes mode ( returns ) or in text mode ( returns )? It should work with reading and writing.In other words:(Another question which sounds related is not. That question is about guessing whether a file is binary or not from it's contents.)
File objects have a  attribute:This limits the test to files; in-memory file objects like  and  do not have that attribute. You could also test for the appropriate abstract base classes:or the inverse
For streams opened as reading, perhaps the most reliable way to determine its mode is to actually read from it:Through it does have a caveat that it won't work if the stream was already closed (which may raise ) it would reliably determine binary-ness of any custom file-like objects neither extending from appropriate  ABCs nor providing the  attribute.If only Python 3 support is required, it is also possible to determine text/binary mode of writable streams given the clear distinction between bytes and text:Unless you are to frequently test if a stream is in binary mode or not (which is unnecessary since binary-ness of a stream should not change for the lifetime of the object), I suspect any performance drawbacks resulting from extensive usage of catching exceptions would be an issue (you could certainly optimize for the likelier path, though).
There is one library called mimetypes where guess_type returns the The return value is a tuple (type, encoding) where type is None if the type canâ€™t be guessed (missing or unknown suffix) or a string of the form 'type/subtype'


Answer URL
https://docs.python.org/3/library/io.html#io.FileIO.mode
https://docs.python.org/3/library/io.html#class-hierarchy
