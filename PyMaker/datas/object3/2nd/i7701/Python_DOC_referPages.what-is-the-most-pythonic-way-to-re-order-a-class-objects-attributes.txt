Natural Text
I'm in the process of creating a set of Python 2.7/3+ tools to programmatically modify the contents of XML files my team uses constantly. So far, I'm parsing the XML into meaningful class object attributes (via  and  or ), to which I've associated some fairly complex methods. I really love being able to define my automation in terms of method calls, e.g. .I am now at the point where I would like to write my modified data back into an XML file, to be used by the rest of our software. The contents of the file are just fine, but unfortunately our legacy tools only accepts the XML with the order preserved, something I can't count on Python object dictionaries to provide. I can read in the "proper" order when parsing the XML without a problem and store that somehow, but modifying the legacy systems is not an option.Possibly related, there is also an XSD schema for the XML.Question: What is the most pythonic or elegant way to serialize my class attributes so that they preserve their original order? If appropriate, how would I go about writing, say,  when reading back from the object's ?ReturnsAnd is un-ordered on any version prior to Python 3.6.
The biggest problem is probably because you keep passing keyword arguments around, which doesn't preserve the order they in which they were defined. The other issue is that a  is unordered. Here's a way to work around both these things (which doesn't assume you want the attributes alphabetically ordered by their name). The technique of replacing the class' special  attribute is allowable because, as the documentation says, it can be a "dictionary or other mapping object" (emphasis mine). This true in both Python 2 and 3.Output:An alternative to using  would be to create your own mapping class. Here's an example takien from PEP 3115 (which is about metaclasses in Python 3, but the subject's not relevant). It also works in both Python 2 and 3):Yet another way to do it, that doesn't involve changing the instance's , would be to make the class keep track of the order attributes were added to it and then iterate them in that order:Note that in all of these implementations, if  wasn't used the  function the attributes would be accessed in the order they were added (which was the only thing you originally seemed to want before revising your question).
Even if you sort the class attributes, as soon as they are stored in a  the order will change. The best way is to use an  which will preserve the order from the  method.


Answer URL
https://docs.python.org/3/library/stdtypes.html#object.__dict__
