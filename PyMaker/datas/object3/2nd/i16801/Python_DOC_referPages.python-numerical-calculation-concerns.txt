Natural Text
I computed the following 2 values in python and got different results! It would be great if someone could reason it why it is happening like this. gives 34947 as output. gives 34948 as output.Both terms are mathematically equivalent.
This has to do with the rounding rules. Consider a simpler example: is rounded down to , and  is rounded down to . Consistent, in a way.Doc reference:Plain or long integer division yields an integer of the same type; the  result is that of mathematical division with the ‘floor’ function  applied to the result.If you want a floating point result in Python 2.x, you need either an explicit conversion (or just use float literals), or do . In Python 3.x, division always produces a float (ref).
You're doing integer math, which rounds the fractional result differently depending on whether it's negative or positive. Using floating point division:
It comes down to the way that python handles integer division.If iether the numerator(top) or divisor(bottom) of your division is negative then python will round away from zero. A simple way to convince yourself of this is to compare two simpler fractions:  and .  These will yield 4 and -5 respectively. In order to get the same results you could us a float ie 14.0 to shift to floating point arithmatic.If you are interested in more of the mathematics this seemed to be a pretty good article:http://python-history.blogspot.co.nz/2010/08/why-pythons-integer-division-floors.html
As mentioned earlier python division and rounding seems issueHere is how to fix it


Answer URL
https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations
