Natural Text
Pythonâ€™s for statement iterates over the items of any sequence (a list or a string).But where does the sequence come from in below code?Is this related to the  method?Just some quote:https://docs.python.org/3/glossary.html#term-iterableAn object capable of returning its members one at a time. Examples of iterables include all sequence types (such as list, str, and tuple) and some non-sequence types like dict, file objects, and objects of any classes you define with an  or  method. Iterables can be used in a for loop and in many other places where a sequence is needed (, , ...). When an iterable object is passed as an argument to the built-in function , it returns an iterator for the object. This iterator is good for one pass over the set of values. When using iterables, it is usually not necessary to call iter() or deal with iterator objects yourself. The for statement does that automatically for you, creating a temporary unnamed variable to hold the iterator for the duration of the loop. See also iterator, sequence, and generator.
Python's  statement iterates over the items of any iterable object, not just sequences:The  statement is used to iterate over the elements of a sequence (such as a string, tuple or list) or other iterable objectIterables are objects that either have an  method or a  method. objects implement an  method; they also are iterator objects, in that they have a  method (Python 3) or  method (Python 2), so all the  method of a file object has to do is .For Python 3, also see the  documentation: (and its subclasses) supports the iterator protocol, meaning that an  object can be iterated over yielding the lines in a stream.


Answer URL
https://docs.python.org/3/glossary.html#term-iterable
https://docs.python.org/3/reference/compound_stmts.html#the-for-statement
https://docs.python.org/3/glossary.html#term-iterable
https://docs.python.org/3/reference/datamodel.html#object.__iter__
https://docs.python.org/3/reference/datamodel.html#object.__getitem__
https://docs.python.org/3/library/stdtypes.html#iterator.__next__
https://docs.python.org/3/library/io.html#i-o-base-classes
