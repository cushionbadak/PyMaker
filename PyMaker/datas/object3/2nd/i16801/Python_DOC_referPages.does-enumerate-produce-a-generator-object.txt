Natural Text
As a complete Python newbie, it certainly looks that way. Running thefollowing...... I notice that: (a)  does have a  method, as seems to berequired for generators, and (b)  can only be iterated over once, acharacteristic of generators emphasized in this famous -taganswer.On the other hand, the two most highly-upvoted answers to thisquestionabout how to determine whether an object is a generator would seem toindicate that  does not return a generator.... while a third poorly-upvoted answer to that question would seem to indicate that  does in fact return a generator:So what's going on? Is  a generator or not? Is it in some sense"generator-like", but not an actual generator? Does Python's use ofduck-typing mean that the test outlined in the final code block aboveis actually the best one?Rather than continue to write down the possibilities running through myhead, I'll just throw this out to those of you who will immediatelyknow the answer. 
While the Python documentation says that  is functionally equivalent to:The real  function returns an iterator, but not an actual generator. You can see this if you call  after doing creating an  object:In Python, generators are basically a specific type of iterator that's implemented by using a  to return data from a function. However,  is actually implemented in C, not pure Python, so there's no  involved. You can find the source here: http://hg.python.org/cpython/file/2.7/Objects/enumobject.c
Testing for enumerate types:I would include this important test in an exploration of the enumerate type and how it fits into the Python language:But we see that:So we know that enumerate objects are not generators.The Source:In the source (of Python 2.7), we can see that the enumerate object (PyEnum_Type) that iteratively returns the tuple, and in the ABC module we can see that any item with a  and  method (actually, attribute) is defined to be an iterator. ( in Python 3.)The Standard Library TestSo the Abstract Base Class library uses the following test:So we know that enumerate types are iterators. But we see that a Generator type is created by a function with yield in the documentation or a generator expression. So generators are iterators, because they have the  and  methods, but not all iterators are necessarily generators, as we've seen with this enumerate object. So what do we know about ?From the docs and the source, we know that enumerate returns an enumerate object, and we know by definition that it is an iterator, even if our testing states that it is explicitly not a generator. We also know from the documentation that generator types simply "provide a convenient way to implement the iterator protocol." Therefore, generators are a subset of iterators. Furthermore, this allows us to derive the following generalization:All generators are iterators, but not all iterators are generators.So while we can make our enumerate object into a generator:We can't expect that it is a generator itself, so this would be the wrong test.So What to Test?And what this means is that you should not be testing for a generator, and you should probably use the first of the tests I provided, and not reimplement the Standard Library (which I hope I can be excused from doing today.):If you require an enumerate type, you'll probably want to allow for iterables or iterators of tuples with integer indexes, and the following will return :If you only want specifically an enumerate type:PS In case you're interested, here's the source implementation of generators: http://hg.python.org/cpython/file/785e29d8ce13/Objects/genobject.c 
Is it in some sense "generator-like", but not an actual generator?Yes, it is.  You shouldn't really care if it is a duck, but only if it walks, talks, and smells like one.  It just as well be a generator, shouldn't make a real difference.It is typical to have generator-like types instead of actual generators, when you want to extend the functionality. E.g.  is also generator-like, but it also supports things like  and  ( in python2.x). 
You can try a few things out to prove to yourself that it's neither a generator nor a subclass of a generator:As Daniel points out, it is its own type, . That type happens to be iterable. Generators are also iterable. That second, down-voted answer you reference basically just points that out somewhat indirectly by talking about the  method. So they implement some of the same methods by virtue of both being iterable. Just like lists and generators are both iterable, but are not the same thing. So rather than say that something of type  is "generator-like", it makes more sense to simply say that both the  and  classes are iterable (along with lists, etc.). How they iterate over data (and shape of the data they store) might be quite different, but the interface is the same.Hope that helps!
 generates an enumerate-object. It is a iterator, like a generator. 


Answer URL
https://docs.python.org/3/library/stdtypes.html#iterator-types
https://docs.python.org/3/library/stdtypes.html#generator-types
