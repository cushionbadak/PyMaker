Natural Text
Here is a toy example that downloads the home page from several websites using asyncio and aiohttp:If I run it, I get:But I don't want to await it.In twisted I can do:And If I don't explicitly "yield" or add a callback to the returned Deferred, it just runs without blocking nor complaining. I can't access the result, but in this case I don't need it.In JS I can do:And again, it doesn't block nor does it requires anything from my part.I found a way to do:But:this is really not obvious to find it out. I it's hard to remember.it's hard to understand what it does. "waits" seems to say "i block", but does not convey clearly it block for the entire list of coroutine to finish.you can't pass in a generator, it needs to be a real list, which i feels really unatural in Python.what if I have only ONE awaitable ? what if I don't want to wait at all on my tasks, and just schedule them for execution then carry on with the rest of my code ?it's way more verbose thant twisted and JS solution.It there a better way ?
this is really not obvious to find it out. I it's hard to remember.The documentation on coroutines does make it pretty clear what 's purpose is.it's hard to understand what it does. "waits" seems to say "i block", but does not convey clearly it block for the entire list of coroutine to finish.Again, see the documentation.you can't pass in a generator, it needs to be a real list, which i feels really unatural in Python.Again, see the documentation, specifically what if I have only ONE awaitable ?It should still work.what if I don't want to wait at all on my tasks, and just schedule them for execution then carry on with the rest of my code ?Then you can use . In fact,  is a convenience function around  (and some other logic).it's way more verbose thant twisted and JS solution.Maybe, but that's not a bad thing (from my perspective).
In order to schedule a coroutine as a task, use asyncio.ensure_future:It replaces the deprecated function asyncio.async in version 3.4.4.Then you can manage those futures using , asyncio.wait or asyncio.gather.


Answer URL
https://docs.python.org/3/library/asyncio-task.html
https://docs.python.org/3/library/asyncio-task.html#asyncio.wait
https://docs.python.org/3/library/asyncio-task.html#asyncio.as_completed
https://docs.python.org/3/library/asyncio-task.html#asyncio.ensure_future
https://docs.python.org/3/library/asyncio-task.html#asyncio.ensure_future
https://docs.python.org/3/library/asyncio-task.html#asyncio.async
https://docs.python.org/3/library/asyncio-task.html#asyncio.wait
https://docs.python.org/3/library/asyncio-task.html#asyncio.gather
