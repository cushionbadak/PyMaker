Natural Text
Is there a way to have a class delete an instance of itself. I know for variables you can do  but how do you do that for classes? If I do something like:The output of the code isThe instance of foo wasn't deleted. Is there a way to make a class do this?
No, if you have a reference to an instance of the class, then by definition it has remaining references. You can use the  keyword to delete a name (releasing the reference from that name to the object), but if a reference to the instance is held elsewhere, the instance remains.If what you're going for is deterministic cleanup behavior, don't use  (which is not deterministic in an obvious or consistent way, and prior to Python 3.4, could cause reference cycle leaks if any member of the cycle was an instance of a class that defined a  finalizer). Have the class implement the context manager protocol, and use instances with  statements to get deterministic cleanup; the instance will still exist until the last reference goes away, but as long as  performs the necessary release of resources, the empty shell of the instance costs you almost nothing.As an example of context management, we'll make  an instance attribute of , not a class attribute, and we'll say we need ensure the instance's reference to  goes away at a known time (note, because  just deletes our reference, if someone else saved off , the object won't actually be freed until the other reference(s) are also released):
By defining  I believe you're overriding the default behavior of . As you can read here,  is called once the reference count of an object reaches 0. It is not recommended to use  unless you know what you're doing.EDIT: this is incorrect, please check shadowranger's answer. Although the link is still relevant to python 2
 should do the trick:Code: Output:


Answer URL
https://docs.python.org/3/library/stdtypes.html#typecontextmanager
