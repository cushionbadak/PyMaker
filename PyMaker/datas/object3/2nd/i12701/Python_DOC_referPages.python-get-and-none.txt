Natural Text
I love python one liners:Problem I face is, I have no control over what 'payload' contains, other than knowing it is a dictionary.  So, if 'payload' does not have "actor", or it does and actor does or doesn't have "username", this one-liner is fine.Problem of course arises when payload DOES have actor, but actor is not a dictionary.Is there as pretty a way to do this comprehensively as a one liner, and consider the possibility that 'actor' may not be a dictionary? Of course I can check the type using 'isinstance', but that's not as nice.I'm not requiring a one liner per se, just asking for the most efficient way to ensure 'u' gets populated, without exception, and without prior knowledge of what exactly is in 'payload'.
Using EAFPAs xnx suggested, you can take advantage of the following python paradigm:Easier to ask for forgiveness than permissionyou can use it on s as well:Using a wrapper with forgiving indexingSometimes it would be nice to have something like null-conditional operators in Python. With some helper class this can be compressed into a one-liner expression:ps: one could redefine  as well besides , so you could even write .
Why not use an Exception:
The answer hege_hegedus gave is correct, however there's one caveat in that exception handling is a lot slower than going through if..else statement.For example if you're iterating over thousands of  object and an actor entry is only occasionally not a dictionary, this code is perfectly valid.However if you're iterating over thousands of  objects and every other  entry is not a dictionary then you'd be better off with this code.For more discussion go here -- https://mail.python.org/pipermail/tutor/2011-January/081143.htmlUPDATEAlso the code statement can be re-written as a one-liner albeit not nearly as legible as two-line statement
If you really need to do it in 1 line, you'll have to implement the functionality yourself. Which is worth doing if you use this semantics many times in your program.There are two ways to do it: function or custom dictionary-like object for .1) Function handles the case of  being not a . It can check for  or do the  or whatever else -- it's not essential. The usage would look something like  or  (with arbitrary amount of nested calls for items in ).2) A class of custom objects is a powerful thing -- do it if you can and really need this abstraction in the program. A descendant of  or  (in Python3) can check for what it stores or outputs on  calls.


Answer URL
https://docs.python.org/3/glossary.html#term-eafp
