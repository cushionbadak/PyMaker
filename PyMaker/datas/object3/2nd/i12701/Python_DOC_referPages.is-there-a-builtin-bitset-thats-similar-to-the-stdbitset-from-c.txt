Natural Text
I want to use a bit array in Python that I could use like the standard bitset from C++. Example:However, I don't know if there is something similar in Python, preferably built-in.
Thre is nothing built-in for that. If you need such a data structure in order to have a proper output of bytes, with the correct bits set, such as for a network protocol, a binary file structure or hardware control, sequencing a list of True and False values to a sequence of Bytes is easily feasible.One could also create a class to allow direct manypulation of in-memory bits in a bytearray object.  However, unlikely what takes place in C++, you won't gain speed or memory (ok, for large bitsets you could gain memory) advantages for that - Python will process each bit as a full  reference to the True or False objects (or to full 0 and 1 integers) regardless of what you do in code.That said, if you have a list with True and False values you want to output to, say, a file, as a sequence of bits, code like this might work:A more sophisticated way is to create a full-class support for it, by keeping the values ina  bytearray object, and computing each bit index at set and reset operations - a minimalist way of doing that is:As you can see, there is no speed gain in doing so, and you'd need a lot of bits to take any benefit of memory savings with that.  This is an example of the above class in use at the interactive prompt:
Well, you could make a "bitset" using a list of booleans:I lack context to give you a more appropriate response.
You could use an ordinary ; however this would not be very effective memorywise: on 32-bit Python builds it would waste 4 bytes per "bit", and on 64-bit builds 8 bytes. This is because the elements of a list are really (references to) other Python objects.Python standard library does also have the built-in  module, which is much more efficient for storing homogeneous values than the generic , but it unfortunately does not support bits as the data type. Furthermore, it does not provide the  interface.Thus, if memory efficiency is of concern, then your choices would boil down to either building your own Python bitset implementation over the , or installing a 3rd-party module from , such as the 
Normally, you just the builtin  class (or  in python2). Maybe wrap it in a class if you particularly care about hiding the shifts.


Answer URL
https://docs.python.org/3/library/array.html
