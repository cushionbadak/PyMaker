Natural Text
I'm using a  web server to provide an interface to a time-consuming calculation. To increase performance, I want tostart the calculation as a new subprocess to be able to use multiple CPU cores for multiple concurrent calculationslet the calculations run asynchronously using To call  coroutines from Flask I started using , which is working nicely for simple delay tasks as shown in the examples.However, I fail to call the asynchronous subprocess from inside Flask:The process is being created, but never returns:What am I doing wrong?
Reason: running asyncio subprocesses from sub-threads has limits, see asyncio docs Subprocess and threads.Detail: with , Flask-aiohttp handle requests in a sub-thread started by Werkzeug's . Turn debug off and your code runs correctly.Alternatively according to the docs above, Flask-aiohttp should add a call to  right before calling . With this call, your code runs even with .


Answer URL
https://docs.python.org/3/library/asyncio-subprocess.html#subprocess-and-threads
