Natural Text
This question already has an answer here:Does Python have “private” variables in classes?                    11 answers                (I've checked out Does Python have “private” variables in classes? -- it asks about classes rather than modules. As such, answers there don't cover  which is what I'm interested in.)Consider, there is a module called  with variable  . If any other module tries to  the module , how to avoid loading the variable  in Python? For example:We then use this in some other module:How to avoid accessing x.y from the module x.py ? 
If you do , there's no way to hide any global members, and that's intentional: the module object returned is the "true" one, the very same that's used by the module's members. Dirty hacks like  are also prohibited for modules. One way is to mark "internal" entities with a leading underscore to hint the user they are not intended for external use. This isn't necessary for references to other modules imported by yours since the guidelines explicitly discourage external use of them (the only exception is if the referenced module is inaccessible the normal way).When doing , however, you don't get a module reference but import things from it directly into the current namespace. By default, everything except names starting from an underscore is imported. You can override this by defining the  module attribute.
In normal use  only imports the module once; all other imports see that it has been imported, and doesn't load it again.Quoth https://docs.python.org/3/reference/import.html#the-module-cache:During import, the module name is looked up in sys.modules and if  present, the associated value is the module satisfying the import, and  the process completes. However, if the value is None, then an  ImportError is raised. If the module name is missing, Python will  continue searching for the module.This has been long been a feature of the interpreter going back at least to version 2.7 and probably earlier.Speaking to your specific question, there is no variable , there is  because that's what you imported. If you do the highly unrecommended  you can end up with a , but you shouldn't do that.


Answer URL
https://docs.python.org/3/reference/import.html#the-module-cache
