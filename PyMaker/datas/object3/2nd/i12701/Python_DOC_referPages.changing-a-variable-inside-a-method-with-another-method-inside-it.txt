Natural Text
The following code raises an :Is there a way to accomplish this?
Use  statement For more information on this new statement added in python 3.x, go to https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement
You can use  as an argument like this:
See 9.2. Python Scopes and Namespaces:if no  statement is in effect – assignments to names always go into the innermost scope.Also:The  statement can be used to indicate that particular variables live in the global scope and should be rebound there; the statement indicates that particular variables live in an enclosing scope and should be rebound there.You have many solutions:Pass  as an argument  ✓  (I would go with this one)Use  keywordNote that in Python2.x you can access non-local variables but you can't change them.
People have answered your question but no one seems to address why exactly this is happening. The following code raises an So, why? Let's take a quote from the FAQ:When you make an assignment to a variable in a scope, that variable becomes local to that scope and shadows any similarly named variable in the outer scope.Inside your nested function you are performing an assignment with the  operator. What this means is that  will approximately perform  (from a binding perspective). As a result  in the expression  will be searched for in the local scope (because it is used in the assignment statement) for function  where it will not be found, resulting in an  .There's many ways you can tackle this and python 3 is more elegant in the approach you can take than python 2. Python 3 :The  statements tells Python to look for a name in the enclosing scope (so in this case, in the scope of function ) for name references:Function attributes Python  and :Remember that functions are first class objects, as such they can store state. Use function attributes to access and mutate function state, the good thing with this approach is it works on all pythons and doesn't require  statements.The  Statement (Python , ):Really the ugliest of the bunch, but gets the job done:The option of passing an argument to the function gets the same result but it doesn't relate to mutating the enclosing scope in the sense  and  are and is more like the function attributes presented. It is creating a new local variable in function  and then re-binding the name to  with the  but, it does indeed get the job done.
In Python, int are immutable. So you could put your int in a mutable object.
You can make  global and use it.but the most preferred way is to pass  as a param to 
you could also use a lambda function:I think the code is cleaner this way
Simple function attributes will not work in this case.You re assign your foo.i to  for every call of .It better to use . But code become more complicated.Also you can try this idea:May be it is more handy to wrap you incr into decorator.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement
https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces
https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement
https://docs.python.org/3/reference/simple_stmts.html#the-global-statement
