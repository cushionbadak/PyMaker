Natural Text
I would like to handle a  exception by injecting the desired missing variable into the frame and then continue the execution from last attempted instruction.The following pseudo-code should illustrate my needs.Read the whole unittest on repl.it NotesAs pointed out by ivan_pozdeev in his answer, this is known as resumption.After more research, I found Veedrac's answer to the question Resuming program at line number in the context before an exception using a custom sys.excepthook posted by lc2817 very interesting. It relies on Richie Hindle's work.BackgroundThe code runs in a slave process, which is controlled by a parent. Tasks (functions really) are written in the parent and latter passed to the slave using dill. I expect some tasks (running in the slave process) to try to access variables from outer scopes in the parent and I'd like the slave to request those variables to the parent on the fly.p.s.: I don't expect this magic to run in a production environment.
On the contrary to what various commenters are saying, "resume-on-error" exception handling is possible in Python. The library  implements said strategy. It steamrollers errors by rewriting the source code of your module at import time, inserting  blocks around every statement and swallowing all exceptions. So perhaps you could try a similar sort of tactic?It goes without saying: that library is intended as a joke. Don't ever use it in production code.You mentioned that your use case is to trap references to missing names. Have you thought about using metaprogramming to run your code in the context of a "smart" namespace such as a ? (This is perhaps only marginally less of a bad idea than .) is a metaclass - a language construct for customising the behaviour of the  statement. Here we're using the  method to customise the dictionary which will be used as the class's namespace during creation of the class. Thus, because we're using a  instead of a regular dictionary, a class whose metaclass is  will never get a . Any names referred to during the creation of the class will be auto-initialised to .This approach is similar to @Andr√©Fratelli's idea of manually requesting the lazily-initialised data from a  object. In production I'd do that, not this. The metaclass version requires less typing to write the client code, but at the expense of a lot more magic. (Imagine yourself debugging this code in two years, trying to understand why non-existent variables are dynamically being brought into scope!)
The "resumption" exception handling technique has proven to be problematic, that's why it's missing from C++ and later languages.Your best bet is to use a  loop to not resume where the exception was thrown but rather repeat from a predetermined place:
You really can't unwind the stack after an exception is thrown, so you'd have to deal with the issue before hand. If your requirement is to generate these variables on the fly (which wouldn't be recommended, but you seem to understand that), then you'd have to actually request them. You can implement a mechanism for that (such as having a global custom  class instance and overriding , or using something like the  function), but not as you are asking for it.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getitem__
https://docs.python.org/3/reference/datamodel.html#object.__getitem__
