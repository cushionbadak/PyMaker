Natural Text
I'd like to keep track of  pairs I've processed already in a dictionary (or something else if it's better), where  is some input and  is the return output of some complex function/calculation. The main purpose is to prevent doing the same process over again if I wish to get the value for a key that has been seen before. I've tried using  and  to solve this problem, but the function I call ends up getting executed regardless if the key exists in the dictionary.Sample code: ends up getting carried out regardless if  is in . I've also tried using  with the same result. For now, this is my fixed solution:Here are my questions. First, is using a dictionary for this purpose the right approach? Second, am I using  correctly? And third, is my current fix a good solution to the problem? (I end up calling  twice if  doesn't exist)
So I went ahead and took Vincent's suggestion of using a decorator.Here's what the new fix looks like:From what I understand so far,  uses a dictionary to cache the results. The  in this dictionary refers to argument(s) to the decorated function () and the  refers to the return value of the decorated function (). So, if the function gets called with an argument that's previously been passed before, it would simply return the value referenced in the decorator's dictionary instead of running the function. If the argument hasn't been seen, the function proceeds as normal, and in addition, the decorator creates a new key-value pair in its dictionary. I set the  to 16 for now as I don't expect  to represent more than 10 unique values. One thing to note is that the arguments for the decorated function are required to be non-mutable and hashable, as it uses the arguments as keys for its dictionary.
For every key that you access now, run the following command : To check if you have already accessed a key, run the following code : I hope this helps
Your current solution is fine. You are creating slightly more work, but significantly reducing the computational workload when the key is already present.However,  is almost what you need here. By modifying it a little bit we can make it work exactly as you want.


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
