Natural Text
This question already has an answer here:What is the most efficient way to get first and last line of a text file?                    12 answers                Read a file in reverse order using python                    18 answers                I'm trying to iterate over a very large, ever-changing file (typically around 1.5M lines) and perform operations on each line. It's a log file, so new lines are appended at the end of the file. My program will allow users to specify parameters each line must match and return the most recent matches. As a result, I'd like to start at the end of the file and work up to make the program efficient (instead of making a list of lines and reversing it).Here is an example situation:If a user requested 1 line that matched "apple," I'd like to return "2016-01-04 00:00 apple," the line closest to the end of the file. This is not difficult when there are only five lines, but performance suffers when there are millions. I've tried using  to start at the end of the file, but this method does not scale well; I cannot use an iteration to improve performance (if the result is the last line in the file, I don't want to iterate through 1,500,000 lines).Another method I've tried is breaking the file into "chunks":I would then use GNU  to stream only the lines in each chunk. I found, however, that the performance of the program had hardly improved (and actually suffered when n was smaller).Is there a better way of doing this (minimizing run-time while iterating over a file)? I've been using other programs from the Linux command line (through "subprocess"), but it may be nice to use something built into Python. I would much appreciate any information that would lead me in the right direction.I am using Linux with access to Python 2.7.3, 2.7.10, 2.7.11-c7, 3.3.6, and 3.5.1.
After you open a file, you can use the file handle's  method to skip to an arbitrary location in the file, denoted by a number of bytes. For example:This will print every line in the file, except for the first kilobyte. If you supply a negative number, it'll go backwards, and supplying a value of  to the second argument will make it count from the end of the file. Hence, a call of  would have caused the above to only print the last kilobyte of the file.May need some security measures to prevent it from dying when the file is smaller than your chunk size, but that's how I'd do it. (And if it turns out that you need to go back further, that's also quite trivial: simply call  again.)
You can use:And in Python 3:This was already answered here: Read a file in reverse order using python


Answer URL
https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects
