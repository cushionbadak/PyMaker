Natural Text
I've got a python dictionary of the form . Dictionary keys are strings, consisting of ip:port pairs. Values are not important for this task.I need a list of  combinations with unique IP addresses, ports can be any of those that appear among original keys. For example above, two variants are acceptable:  and .What is the most pythonic way for doing it?Currently my solution isI don't like it, because it creates additional lists and then discards them.
You can use  to group by same IP addresses:Then just pick any one from the different groups of IPs.Or shorter, making a generator expression for just the first key from the groups:However, note that  requires the input data to be sorted. So if you want to avoid sorting all the keys in the dict, you should instead just use a  of already seen keys. This is similar to your solution, but instead of looping the unique keys and finding a matching key in the dict for each, you loop the keys and check whether you've already seen the IP.
One way to do this is to transform your keys into a custom class that only looks at the IP part of the string when doing an equality test. It also needs to supply an appropriate  method.The logic here is that the  constructor will "see" keys with the same IP as identical, ignoring the port part in the comparison, so it will avoid adding a key to the set if a key with that IP is already present in the set.Here's some code that runs on Python 2 or Python 3.outputIf you are running Python 2.7 or later, the function can use a set comprehension instead of that generator expression inside the  constructor call.The  method isn't strictly necessary, but I like to give all my classes a  since it can be handy during development.Here's a much more succinct solution which is very efficient, courtesy of Jon Clements. It builds the desired list via a dictionary comprehension.
I've changed few characters in my solution and now am satisfied with it.Thanks to @Ignacio Vazquez-Abrams and @M.T. for explanations.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
