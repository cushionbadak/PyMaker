Natural Text
From Chapter "Classes" of the official Python tutorial:[...] if a function modifies an object passed as an argument, the caller will see the change â€” this eliminates the need for two different argument passing mechanisms as in Pascal.What would be an example of how exactly the caller will see a change? Or how could it be (not in Python but in general) that the caller doesn't see the change?
It basically means that if a mutable object is changed, it will change everywhere.For an example of passing by reference (which is what Python does):vs something like Pascal, where you can pass copies of an object as a parameter, instead of the object itself:You can get the behavior of the second example in Python if you pass a copy of the object. For lists, you use .For your second question about how the caller might not see the change, let's take that same  function and change it a little so that it doesn't modify the object, but instead replaces it.
What would be an example of how exactly the caller will see a change?Or how could it be (not in Python but in general) that the caller doesn't see the change?Hypothetically, a language could exist where a deep copy of  is created and assigned to , and any change made to  has no effect on , in which case  would display  both times. But this isn't what happens in Python.Edit: note that assigning a new value to an old variable name typically doesn't count as "modification".


Answer URL
https://docs.python.org/3/tutorial/classes.html
