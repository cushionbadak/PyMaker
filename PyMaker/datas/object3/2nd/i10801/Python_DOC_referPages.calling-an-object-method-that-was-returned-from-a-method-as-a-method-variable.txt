Natural Text
I have a list of things, I'll use files as an example.  Each type of file needs to be processed in a different manner.  I created a class, "MyFile" and rather than maintaining a giant if:elif:else: structure I created a dictionary with the file type as the key. This is stored as a class variable.  Within a different class/object/module I instantiate the MyFile class and start stepping through the files.  The MyFile objects are created properly.file_type has a tuple with the key and a function object. Here is an example:    xls_0386.xlsx - ('Excel File', )    doc_0386.docx - ('Word File', )Question: How do I call the function that was returned from f.get_filetype()?Returns: process_xlsx() missing 1 required positional argument: 'self'Creates no errors, but never actually makes the call (breakpoints never reached within the process_???? methods)So again, What is the syntax to call an object method in this manner?I know this is a bit convoluted to explain with my specifics, and for that I apologize.Thanks in advance.
You call it with the first argument being what you want self to be. For example:This way, you can also use any other file with the function. If you want to only call the specific file with , have a function that is partially filled in, so  is already an argument. You can do this with functools.partial
When you create a , the methods you define in it are just functions. Only when you retrieve their names from an instance of the class, will they be bound to that instance, producing bound methods. This is done via the descriptor protocol.So when you create your  dictionary:those are plain functions.You have three options, basically:Don't create the dictionary at class definition time. Create it when you create an instance, so you can store bound methods in it:Because this looks up the methods on , they are bound.Bind the method 'manually' when you look them up in :Return a  object with  as a positional argument instead of just the function:All three approaches result in an object being returned to the caller that, when called, will pass in the right instance of  to the chosen function.
Because those functions are declared inside a class, they have the argument  representing the object from that class that's calling the function. When you try to call that function separately, outside of the context of a  object, there is no  variable anymore associated with the function call. That's why you get the error:missing 1 required positional argument: 'self'Just give it the instance of  that you already created to use as the  variable:


Answer URL
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/library/functools.html#functools.partial
