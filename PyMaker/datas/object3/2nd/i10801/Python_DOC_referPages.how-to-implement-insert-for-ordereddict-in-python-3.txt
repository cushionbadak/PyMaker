Natural Text
I want to insert an item into an OrderedDict at a certain position.Using the gist of this SO answer i have the problem that it doesn't work on python 3.This is the implementation usedUsing it likegivesIt works with python 2.7. What is the reason that it fails in python 3?Checking the source code of the OrderedDict implementation shows that  is used instead of . Changing the code to the usage of  givesHow come? And how can i make this work in python 3? OrderedDict uses the internal  attribute to store a doubly linked list. So how can i access this attribute properly?
I'm not sure you wouldn't be better served just keeping up with a separate list and dict in your code, but here is a stab at a pure Python implementation of such an object. This will be an order of magnitude slower than an actual  in Python 3.5, which as I pointed out in my comment has been rewritten in C.I ended up implementing the whole  contract because none of the methods were very long, but you probably won't use all of them. In particular,  and  are a little arbitrary. I changed your signature on the  methods to a 4-argument one that feels a little more natural to me. Final note: Only tested on Python 3.5. Certainly will not work on Python 2 without some (minor) changes.
Trying out the new dict object in 3.7 and thought I'd try to implement what Two-Bit Alchemist had done with his answer but just overriding the native dict class because in 3.7 dict's are ordered.A little testing:Edit: I decided to do a little benchmark test to see what kind of performance hit this would take. I will use Get a baseline. Create a dict with arbitrary values.See how much longer it would take to initialize the MutableDict with the same arbitrary values as before.1.82 / 2.38 = 0.76. So if I'm thinking about this right MutableDict is 24% slower on creation.Lets see how long it takes to do an insert. For this test I'll use the insert_after method as it is slightly bigger. Will also look for a key close to the end for insertion. 't' in this case. 2.38 / 3.91 = 0.60, 40% slower inserting_after than it's initialization. Not bad on a small test of 1 million loops. For a comparison in time relation we'll test this:Not quite an apples to apples comparison but I hope these tests will aid you in your(reader not necessarily OP) decision to use or not use this class in your 3.7 projects.
Since Python 3.2,  can be used to move items around in an . The following code will implement the  functionality by moving all items after the provided index to the end.Note that this isn't very efficient and should be used sparingly (if at all).There are obvious optimizations and improvements that could be made, but that's the general idea.



Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict.move_to_end
https://docs.python.org/3/library/collections.html#ordereddict-objects
