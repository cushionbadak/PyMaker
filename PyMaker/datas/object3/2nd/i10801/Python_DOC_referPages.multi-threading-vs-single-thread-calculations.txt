Natural Text
Results:And now let's do it in 1 thread:Results:Why is single threaded and multi-threaded scripts have the same processing time?Shouldn't the multi-threaded implementation only be 1/#number of threads less? (I know when you reach your max cpu threads there is diminishing returns) Did I mess up my implementation?
Multithreading in Python does not work like other languages, it has something to do with the global interpreter lock if I recalled correctly. There are a lot of different workarounds though, for example you can use gevent's coroutine based "threads". I myself prefer dask for work that needs to run concurrently. For exampleand the outputIn this case dask uses  to do the work, which may or may not be desireable for your case.Also instead of using cpython, you can try other implementation of python, for example pypy, stackless python etc. which claimed to provide workaround/solution to the problem.
Here is a link to presentations about the GIL http://www.dabeaz.com/GIL/The author of these presentations explained GIL in detail with examples. He also has a few videos posted on YoutubeIn addition to using threads you might also interested in asynchronous programming. In python 3, This library is added to python to provide asynchronous concurrency
In CPython, threads don't run in parallel because of the Global Intepreter Lock. From the Python wiki (https://wiki.python.org/moin/GlobalInterpreterLock):In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython's memory management is not thread-safe
Here is a complete test and example regarding multithreading and multiprocessing vs single threaded/process.The computation, you can pick any computation you want.The test:And here is the sample output:


Answer URL
https://docs.python.org/3/library/asyncio.html
https://docs.python.org/3/library/multiprocessing.html
