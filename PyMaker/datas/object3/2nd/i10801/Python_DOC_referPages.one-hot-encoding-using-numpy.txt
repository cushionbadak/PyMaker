Natural Text
This question already has an answer here:Convert array of indices to 1-hot encoded numpy array                    16 answers                If the input is zero I want to make an array which looks like this:and if the input is 5:For the above I wrote:but it did not work.Is there any way in which, this can be implemented in one line?
Usually, when you want to get a one-hot encoding for classification in machine learning, you have an array of indices.The  is nowThe  is there to make sure you have the right labels format (you might also have ). The  is a special value which means "put all remaining stuff in this dimension". As there is only one, it flattens the array.Copy-Paste solutionPackageYou can use mpu.ml.indices2one_hot. It's tested and simple to use:
Something like : Should do the trick.But I suppose there exist other solutions using numpy.edit : the reason why your formula does not work : np.put does not return anything, it just modifies the element given in first parameter. The good answer while using  is :The problem is that it can't be done in one line, as you need to define the array before passing it to 
You could use List comprehension:turns to
Taking a quick look at the manual, you will see that  does not return a value. While your technique is fine, you are accessing  instead of your result array.For a 1-D array it is better to just use direct indexing, especially for such a simple case.Here is how to rewrite your code with minimal modification:Here is how to do the second line with indexing instead of :
The problem here is that you save your array nowhere. The  function works in place on the array and returns nothing. Since you never give your array a name you can not address it later. So thiswould work, but then you could just use indexing:In my opinion that would be the correct way to do this if no special reason exists to do this as a one liner. This might also be easier to read and readable code is good code.
The  mutates its array arg in-place. It's conventional in Python for functions / methods that perform in-place mutation to return ;  adheres to that convention. So if  is a 1D array and you dothen  will get replaced by .Your code is similar to that, but it passes an un-named array to .A compact & efficient way to do what you want is with a simple function, eg:output
Use  or . You can try something like this with your input i, and the array size s:For example,  will result:If you are using TensorFlow, you can use : https://www.tensorflow.org/api_docs/python/array_ops/slicing_and_joining#one_hot

I'm not sure the performance, but the following code works and it's neat.


Answer URL
https://docs.python.org/3/library/timeit.html
