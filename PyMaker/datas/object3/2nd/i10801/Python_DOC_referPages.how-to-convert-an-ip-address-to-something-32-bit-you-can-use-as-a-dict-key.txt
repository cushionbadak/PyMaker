Natural Text
If I have an IP address I can use it as a key in a dict as follows:However, if I have a lot of them this is very memory inefficient. How can I convert the IP to a 32 bit representation which I can still  use a key in a dict?I could just convert the IP to an int. But python ints seem to consume 24 bytes each which is 192 bits so this does not solve my problem.As I have  100s of millions of these IPs I would really like to represent them as 32 bits each.From the comments it seems this may be hard in pure Python. I would be happy with a practical non-pure solution too (including using numpy or any other easily available package).
Given the number of entries you intend to store, I suggest you use SQLite. It's both easy and probably efficient enough. In fact, it has the nice property that for every record it uses only as much space as necessary. For an IP address that is between 1 and 5 bytes depending on the IP address (so on average, 3 bytes).Here's an example:*Although I don't know exactly what your application is about, I highly suspect that there's no need to keep the whole database in memory all the time. You can save greatly on memory usage while not losing too much in access time by using a (temporary) file and relying on file caching. Replace  by  for a temporary file, or by a filename for a persistent one. 
Yes you can use the   module:output:and back:output:


Answer URL
https://docs.python.org/3/library/ipaddress.html#module-ipaddress
