Natural Text
This question already has an answer here:“Least Astonishment” and the Mutable Default Argument                    32 answers                I am confused by the following example:The point here is supposed to be that you are resetting "to" to an empty list at the beginning of every function call to avoid the following:But how can you check that "to" is None to set it to []? It seems to me that you are either pulling in the "to" defined in the definition, or you are pulling in the "to" modified by the last call. How does this work?
When you define a function with a default argument, the function uses that default values for that argument if it is not supplied. So in the case of ,  is not specified, so the function assumes the value of  to be  - it's effectively the same as calling .So now, the function checks , which it is, so  gets reassigned to an empty list.  gets appended to the list, and the list is returned.When you make the second call , it is again as if you called . Again, the  evaluates to , and  is reassigned to an empty list. Then,  is appended to that empty list, and the list is returned.Since the default argument (in this case ) is immutable, the operations on  do not persist the end of the function call. The function has its own chunk of memory which gets cleared when the function returns.However, if the default argument was mutable (like for instance ), that value is created when the function is defined (i.e. when python sees , it creates an empty list in memory and uses that list every time this function is called). Thus, any changes made to that list will persist the end of the function, since that mutable default argument was created when the function was defined (before the function was ever called).
I'll be quoting Common Gotchas — The Hitchhiker's Guide to Python here:For example like:A new list is created once when the function is defined, and the same  list is used in each successive call.Python’s default arguments are evaluated once when the function is  defined, not each time the function is called (like it is in say,  Ruby). This means that if you use a mutable default argument and  mutate it, you will and have mutated that object for all future calls  to the function as well.Also if you don't like to use none ant consider it an antipattern, you can use more fancier kind of this:I don't know if it's better though


Answer URL
https://docs.python.org/3/reference/executionmodel.html#resolution-of-names
https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces
