Natural Text
I want to populate three lists: ,  and I have a function that based on a singular input returns N objects that should append to each list. That is,  returns , ,  where each  is a list containing N items. I want to join each of those to their respective lists as I loop over the iterable that sends input to .How can I write a super fast list comprehension to create these 3 lists?Note: I can restructure the output of  (such as zipping the items together) if that makes things easier.EDIT: Here's some pseudo-code with the bottom list comprehension being incorrect.
If , , and  exist, the following will update them with the returned values from : is called, cause  is lazy in python 3.
It appears that you want the same result asbut with only one pass over . With an explicit  loop, you would useWith a single list comprehension, you can get a list of triples:which you could then transpose into a triple of lists:Your original  function returns a triple, so you can use use that in place of the triple in the preceding:
To create the lists from the returned tuples, you can use that multiple assignment with  and unpacking on a generator expression:This will return the respective items for each list grouped in 3 tuples.Trial:To return them as lists instead, you can use a list comprehension with the previous operation:In the event the function returns a tuple of 3 iterables, then you can use  to flatten the results from :
Extend A, B, C directly, without returning things?https://repl.it/Chl6(I use  with lists inside because your functions return lists, otherwise use  to add individual things. I also renamed  to  because  is a built-in function in Python)


Answer URL
https://docs.python.org/3/library/functions.html#zip
