Natural Text
I stumbled upon this behavior for double underscore name that I don't understand:I know about the name mangling for , which doesn't apply for  (more for overloading operator methods).  behaves just like a regular class variable which can be accessed via Class name as well as instance.However,  can only be accessed via Class name and in fact I can even explicitly introduce  in C:I'd like to understand if this behavior is some python internal magic or can it be achieved in regular python code.[python version 3.4.3]
This has to do with the lookup order.Letting descriptors aside, python first checks the objects  to find an attribute. If it cannot find it, it will look at the class of the object and the bases of the class to find the attribute. If it cannot be found there either, AttributeError is raised.This is probably not understandable, so let us show this with a short example:The output is:As you can see,  has been declared on the metaclass . It is accessible through the instance of the metaclass, the class , but not on the instance  of , because it is only in the  in , not in the  of  or . Python only checks one step up in the "meta" hierarchy.For more on metaclass magic, see the excellent answers on the question What is a metaclass in python?.This, however, is not sufficient to describe the behaviour, because  is different for each instance of  (that is, for each class).This can be achieved using descriptors. Before the attribute name is looked up at the objects , python checks the  of the class and its bases to see if there is a descriptor object assigned to the name. A descriptor is any object which has a  method. If that is the case, the descriptor objects   method is called and the result is returned from the attribute lookup. With a descriptor assigned to an attribute of the metaclass, the behaviour seen can be achieved: The descriptor can return a different value based on the instance argument, but nevertheless the attribute can only be accessed through the class and the metaclass, not instances of the class.A prime example of descriptors is . Here is a simple example with a descriptor which has the same behaviour as :The output is:As you can see,  and  both have the  attribute accessible, but  does not. Still,  can have a different value for each  instance, that is, each class using the  metaclass.Metaclasses are confusing at first, and even more so when descriptors are in play. I suggest reading up on metaclasses the linked question, as well as descriptors in python in general.


Answer URL
https://docs.python.org/3/reference/datamodel.html#implementing-descriptors
https://docs.python.org/3/reference/datamodel.html#object.__get__
https://docs.python.org/3/library/functions.html#property
