Natural Text
I have a big array and a part of that is shown below. in each list, the first number is start and the 2nd number is end (so there is a range). what I want to do is:1: filter out those lists (ranges) which are smaller than 300 (e.g. the 18th list in the following array must be removed) 2: get a smaller ranges (lists) in this way: (start+100) to (start+200). e.g the first list would be [ 569, 669]. I tried to use different split functions in numpy but non of them gives what I am looking for.do you guys know how to do that in python?thanks
Assuming your array is called , then:Or maybe something like:
A general note before:You should use tuples to represnt such ranges, not lists, They are immutable data types with a meaning to the order of items in them.As for 1, it is pretty easy to filter in python:A clearer way (in my opinion) to do this is with a list comprehension:As for 2, I don't fully understand what you mean, but if you mean creating a new list of ranges, where each range is changes using a single function, you mean a map (or my preferred way, a list comprehension which is equal but more descriptive):
Explanation:The first command uses the builtin filter method to filter the remaining elements based on a lambda expression.The second iterates over the list and generates a new one while doing so.If the input and output should be numpy arrays try the following. Note: There is no way to filter an numpy array without creating a new one.
We can find which rows have the small difference with:We can use that  to select those rows, or to deselect themTo make a new set of ranges; get the first column; here I am using  so the selection remains a column array:Add to that the desired offsets.  This takes advantage of broadcasting.There are other ways of constructing such an arrayOther answers have suggested the  list .  I'm partial to list comprehensions in this kind of use, for example:For small lists of lists, the pure Python approach tends to be faster.  But if the object is already a  array, it is faster to use the  operations that work on the whole array at once (i.e. do the iteration in compiled code).  Hence my suggestion to use the boolean mask.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences
https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions
