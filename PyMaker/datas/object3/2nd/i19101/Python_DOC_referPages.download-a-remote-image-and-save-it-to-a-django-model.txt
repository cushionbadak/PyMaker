Natural Text
I am writing a Django app which will fetch all images of particular URL and save them in the database.But I am not getting on how to use ImageField in Django.Settings.pymodels.pydownload_img.pyI am calling download_imgs.py inside one view like
Django Documentation is always good place to startUPDATEDSo this script works.Loop over images to downloadDownload imageSave to temp fileApply to modelSave model.Some reference links:requests - "HTTP for Humans", I prefer this to urllib2tempfile - Save temporay file and not to diskDjango filefield save
If you want to save downloaded images without saving them to disk first (without using  etc) then there's an easy way to do that.This will be slightly quicker than downloading the file and writing it to disk as it is all done in memory. Note that this example is written for Python 3 - the process is similar in Python 2 but slightly different.Where  is an instance of the model you'd like to save to and  is the name of the .See the documentation for io for more info.
As an example of what I think you're asking:In forms.py:In models.py:So there will be a POST request from the user (when the user completes the form).  That request will contain basically a dictionary of data.  The dictionary holds the submitted files.  To focus the request on the file from the field (in our case, an ImageField), you would use:You would use that when you construct the model object (instantiating your model class):To save that the simple way, you'd just use the save() method bestowed upon your object (because Django is that awesome):Your image will be stored, by default, to the directory you indicate for MEDIA_ROOT in settings.py.Accessing the image in the template:The urls can be tricky, but here's a basic example of a simple url pattern to call the stored images:I hope it helps.
Try doing it this way instead of assigning path to the image...        use the above function like this..
Similar to @boltsfrombluesky's answer above you can do this in Python 3 without any external dependencies like so:



Answer URL
https://docs.python.org/3/library/io.html
