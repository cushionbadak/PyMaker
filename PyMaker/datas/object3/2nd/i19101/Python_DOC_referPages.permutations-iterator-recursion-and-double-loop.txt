Natural Text
Here is a function that iterates over permutations of letters in a string:In  in  part, I have two loops. In the first one Ipick the next item that I append to the  string. The second loopiterates the next partial results and yields them.  So, the second  is only tohandle the iterator for the recursive call and "bubble-up" its results.I have found this pattern frequently when yielding results from recursive calls, e.g. when working with backtracking.Question:Is there an idiomatic, elegant way to use only one loop there, instead of two? Although I know there is nothing wrong there with those two loops, maybe there is some iterator kung-fu that would allow me to use only one (the simpler, the better).Edit:I know , my  is just a toy example 
In modern Python, you can use yield from to avoid the innermost loop.  Time to upgrade? :^)
Because "simple is better than complex", you can simply use itertools.permutations:Output:If you still want to use your function, yo can use the new python3's  statement as @DSM explained.
A shorter version of your, almost the same:BTW: The equivalent code in Scala as following:


Answer URL
