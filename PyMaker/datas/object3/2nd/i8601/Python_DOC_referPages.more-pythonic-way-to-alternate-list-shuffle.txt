Natural Text
Trying to 'shuffle' a list with even number of items. Splitting the list,  in half and alternating taking an element from each.I've tried , but that approach was unable to get me to a one-liner. ( loop) and I know there is likely some more succinct way to move through it.The  from  isn't exactly what I need, either â€“ because that randomizes the entire order instead of alternating between the split list. If a one-liner isn't possible, is that because it's more readable in a  loop?other attempt:
Use slice assignment with a step:
If I understand correctly, you could also opt for  after zipping to get the alternating effect. Demo
One possibility (requires an external library but the recipe can also be found in the -recipes section) is:This is probably slower than list assignment but it also works for arbitary amounts of iterables without problems and it doesn't require odd-sized-input handling:I did some timings and @user2357112 definetly has the fastest solution but my solution is at least on the second place (note that this graph is in log-log, that means the difference in absolute terms may seem smaller than it really is!):Disclaimer: I'm the author of that  library.
list comprehension with index calculation using modulo and floor divisionstill one line for the general casethe index calc  can be parsed as adding which gives and where  alternates 0, 1 for even/odd sum:
Found two solutions. First one is very unpythonic (using python 2.7)Method One (using string magic):Method Two:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
https://docs.python.org/3/library/itertools.html#itertools-recipes
