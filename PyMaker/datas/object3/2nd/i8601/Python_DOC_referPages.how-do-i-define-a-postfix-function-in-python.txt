Natural Text
I know that if you create your own object you can define your own methods on that object. I also know you can define infix functions with the infix package. What I want is the ability to define a function which accepts an existing type in postfix notation.For example given a list  we may want to check if it is sorted. Defining a typical function might give usbut it might be more idiomatic if one could writeIs this possible without creating a custom type?
The correct way is inheritance, creating a custom type by inheriting  and adding the new functionality.  Monkeypatching is not a strength of Python.  But since you specifically asked:Is this possible without creating a custom type?What kindall mentioned stands, Python does not allow it.  But since nothing in the implementation is truly read-only, you can approximate the result by hacking in the class dict.  The new "method" will appear in , the name will be there in , and it will also be available/usable on instances which were created before the monkeypatch was applied.  This approach uses the garbage collector interface to obtain, via the class , a reference to the underlying dict.  And garbage collection by reference counting is a CPython implementation detail.  Suffice it to say, this is dangerous/fragile and you should not use it in any serious code.  If you like this kind of feature, you might enjoy ruby as a programming language.  
Python does not generally allow monkey-patching of built-in types because the common built-in types aren't written in Python (but rather C) and do not allow the class dictionary to be modified. You have to subclass them to add methods as you want to.


Answer URL
https://docs.python.org/3/library/gc.html
