Natural Text
In Python, I'd like to get the variable to which an object is being assigned to. Something like: I have come up with this: which, if I understand correctly, literally looks at the outermost call and there takes the left string part, which happens to be the variable - but to me this looks weird. Is there a better way? 
Yes, you can do it, using both  and  to parse the source code which you can find using .Note that your solution prints  for me, and I'm testing on Python 3.5.2, so the answer might be slightly different for other Python versions.This only works for simple assign statements. If you have a more complex assign statement, say , you will need to add more steps to parsing the AST. In principle, all valid statements involving  can be parsed, but in some cases there is no assignment involved (e.g. ).The code listed above can therefore only serve as an example how to approach the problem, not as a complete solution.
You cannot get the instance name within the  method(in a regular way)1. Because the  method called right after the instance has been created by  and then, python returned the created object to the caller. That means python maps the variable name to the object within the global namespace.Nevertheless, one way to get around this problem is defining another method for your object in order to get the instance name after initialization. You can use  built-in function for this aim:DEMO: 1. Actually depends on the environment that you're executing your code in, it might be different, but you might be able to extract the variable by parsing the executed lines of the source code or maybe in lower levels like looking at the stack but it's not a proper and save way at all while you can simply get the names from an upper level like global namespace.
For the various reasons presented, that is not ordinarily feasible. It is doubly unfeasible in the  or other class initialization method, since the object is not ready yet - only when it is initialization is complete, the new object will be returned to the calling context and (possibly) assigned to a variable.But in Python, as you can see, "unfeasible" differs from "impossible" - you and some of the answers have ways to find it out that involve parsing teh source code file, to find where the assignment is taking place, and thus, guess the name.You didn't tell why you want this, but this looks mostly useless  for anything I can think of.  The variable an object is assigned too is of little use at runtime - and either way, it is known.So, if you check, in the stdlib itself you have namedtuple, and ohf course, class creation itself, both of which require one to pass the name explicitly on creation:If you can know the name after the object has been created and assigned, there are ways that can retrieve it by inspecting either the calling frames or using the garbage collection mechanism - they would be a little better than your hack as they don't depend on the source code file being available. But them, again, I'd recommend against that in "production" code.  Just to mention, the way using "gc" is to call "gc.get_referrers". You can put your "name finding" in a method, or even a property doing something along:The other way is checking the globals dict in the caller code-frame, but then, you'd get the name of "self" in the code that called  instead of where the instance was defined.But again, I've ever only wanted something like this for class attributes - then you have three possible ways of assigning the name as an attribute on the instance of  itself: at the metaclass  or  methods, and, from Python 3.6 on, at the base class of classes containing instances of "Parent" as attributes  method,  or, if your  class is  a descriptor (i.e., does have a  method), in which case, also from Python 3.6 on, it can have a   method that will be called at the (container) class creation time.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__init__
