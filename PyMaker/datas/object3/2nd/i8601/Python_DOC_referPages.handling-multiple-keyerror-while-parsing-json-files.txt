Natural Text
Today, I came across the  method  which, given a key in the dictionary, returns the associated value.For what purpose is this function useful? If I wanted to find a value associated with a key in a dictionary, I can just do , and it returns the same thing:
It allows you to provide a default value if the key is missing:returns  (whatever you choose it to be), whereaswould raise a .  If omitted,  is , such thatreturns  just like would. 
What is the  method?As already mentioned the  method contains an additional parameter which indicates the missing value. From the documentationReturn the value for key if key is in the dictionary, else default. If default is not given, it defaults to None, so that this method never raises a .An example can be Are there speed improvements anywhere?As mentioned here,It seems that all three approaches now exhibit similar performance (within about 10% of each other), more or less independent of the properties of the list of words.Earlier  was considerably slower, However now the speed is almost comparable along with the additional advantage of returning the default value. But to clear all our queries, we can test on a fairly large list (Note that the test includes looking up all the valid keys only)Now timing these two functions using As we can see the lookup is faster than the get as there is no function lookup. This can be seen through Where will it be useful?It will be useful whenever you want to provide a default value whenever you are looking up a dictionary. This reducesTo a single line, Where will it be NOT useful?Whenever you want to return a  stating that the particular key is not available. Returning a default value also carries the risk that a particular default value may be a key too! Is it possible to have  like feature in ?Yes! We need to implement the  in a dict subclass.A sample program can beA small demonstration can be
 takes a second optional value.  If the specified key does not exist in your dictionary, then this value will be returned.If you do not give the second parameter,  will be returned.If you use indexing as in , nonexistent keys will raise .
I will give a practical example in scraping web data using python, a lot of the times you will get keys with no values, in those cases you will get errors if you use dictionary['key'], whereas dictionary.get('key', 'return_otherwise') has no problems.Similarly, I would use ''.join(list) as opposed to list[0] if you try to capture a single value from a list.hope it helps.[Edit] Here is a practical example:Say, you are calling an API, which returns a JOSN file you need to parse. The first JSON looks like following:The second JOSN is like this:Note that the second JSON is missing the "submitdate_ts" key, which is pretty normal in any data structure.So when you try to access the value of that key in a loop, can you call it with the following:You could, but it will give you a traceback error for the second JSON line, because the key simply doesn't exist.The appropriate way of coding this, could be the following:{'x': None} is there to avoid the second level getting an error. Of course you can build in more fault tolerance into the code if you are doing scraping. Like first specifying a if condition
The purpose is that you can give a default value if the key is not found, which is very useful
For what purpose is this function useful?One particular usage is counting with dictionary. Let's assume you want to count a number of occurrences of each element in a given list. The common way to do so is to make a dictionary where keys are elements and values are the number of occurrences.Using the .get() method you can make this code more compact and clear:
Why dict.get(key) instead of dict[key]?0. SummaryComparing to ,  provides a fallback value when looking up for a key.1. Definitionget(key[, default])   4. Built-in Types â€” Python 3.6.4rc1 documentation Return the value for key if key is in the dictionary, else default. If default is not given, it defaults to None, so that this method never raises a KeyError.2. Problem it solves.If without , you have to write cumbersome codes to handle such an exception.As a convenient solution,  introduces an optional default value avoiding above unwiedly codes.3. Conclusion has an additional default value option to deal with exception if key is absent from the dictionary
Based on usage should use this  method.Example1Example2
 will default return nothing if the key doesn't exist, but if you put second argument of it, it will return that if the key does not exist.OTOH  will raise  if key does not exist.Here is an example (read comments):


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.get
https://docs.python.org/3/library/timeit.html
https://docs.python.org/3/library/dis.html
https://docs.python.org/3/reference/datamodel.html#object.__missing__
https://docs.python.org/3/library/stdtypes.html#dict.get
