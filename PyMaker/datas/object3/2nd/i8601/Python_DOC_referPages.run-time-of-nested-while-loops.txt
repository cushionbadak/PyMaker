Natural Text
To find the number of iterations of the inner while loop, is it the same as finding the run time of inner loop? Also since, the inner loop is dependent on on the outer loop,I know I should multiply the number of times the inner while loop runs with the outer while loop to get the number of times it is iterated, right? I'm kind of confused on how to calculate # of iterations for while loops. Any help would be appreciated. Thanks!Thanks everyone for all the help! I think I understand what the answer is. So, since we're trying to find the number of times the inner loop iterates (which is n-1), I also need to consider the # of times the outer loop iterates of the inner loop (which is n). Therefore, we'll iterate the inner loop (n-1), n times, thus giving us (n(n-1))/2 if we use summation notation. Hopefully that's right. 
You've got a two questions, so I've broken them apart.To find the number of iterations of the inner while loop, is it the same as finding the run time of inner loop?No. I've taken the liberty to modify your code a bit to use time.process_time to measure run time without interference from the operating system's scheduler, and to eliminate your interior  statement (I/O calls are deceptively expensive).Then I add a logging statement:Finally, I run it a few times. Here are the results:As you can see, as the number of iterations increases, using relative run times to try to estimate the number of iterations becomes less accurate.Also since, the inner loop is dependent on on the outer loop,I know I should multiply the number of times the inner while loop runs with the outer while loop to get the number of times it is iterated, right?This is true for theoretical applications. If I have n instructions in an inner loop, and the inner loop is run m times, I'd predict that the total run time is in fact, mn. However, you have to keep in mind that a line of code does not equal a single instruction. In fact, even some instructions don't equal other instructions in terms of execution time (floating point arithmetic versus integer arithmetic, for example). We saw that in our timed example.For purposes of calculating Big-O runtime bounds, the technique you suggest for multiplying inner loop statement counts by number of loops works. In the real world, it gets more complicated, and doubly so for interpreted languages like Python.
The short answer is:    
Time complexity is  (and this is the number of times the inner loop repeats itself).Outer loop runs  times. For the th iteration of the outer loop, the inner loop runs  times.Summing it together we get:And since  is in , this is your time complexity.


Answer URL
https://docs.python.org/3/library/time.html#time.process_time
