Natural Text
What is the reason packages are distributed separately?Why do we have separate 'add-on' packages like pandas, numpy? Since these modules seem so important, why are these not part of Python itself?Are the the "single distributions" of Python to come pre-loaded?If it's part of design to keep the 'core' separate from additional functionality, still in that case it should at least come 'pre-imported' as soon as you start Python.Where can I find such distributions if they exist?
Many of these tools, including core Python, are separately developed and distributed by different team, so it is up to aggregators to curate them and put them into a single distribution.  Here are some notable examples:The Anaconda distribution from Continuum AnalyticsThe Canopy distribution from EnthoughtActivePython from ActiveStatePythonXY for scientific programmingWinPython for WindowsPyIMSL Studio from Rogue Wave Software
You can make the interactive interpreted launch with "pre-imported" modules, as well as with pre-run code, using The Interactive start-up file.Alternatively, you can use The Customization modules to pre-run code on every invocation of python.Regarding whether pandas and numpy should be part of the standard library - it's a matter of opinion.
This is a bit like asking "Why doesn't every motor come with a car around it?"  While a car without a motor is pretty useless, the inverse doesn't hold: Most motors aren't even used for cars. Of course one could try selling a complete car to people who want to have a generator, but they wouldn't buy it.Also the people designing cars might not be the best to build a motor and vice versa. Similarly with python. Most python distributions are not used with numpy, scipy or pandas. Distributing python with those packages would create a massive overhead. However, there is of course a strong demand for prebuilt distributions which combine those modules with a respective python and make sure everything interacts smoothly. Some examples are Anaconda, Canopy, python(x,y), winpython, etc. So an end user who simply wants a car that runs, best chooses one of those, instead of installing everything from scratch. Other users who do want to always have the newest version of everything might choose to tinker them together themselves.  
PyPi currently has over 100,000 libraries available. I'm sure someone thinks each of these is important.Why do you need or want to pre-load libraries, considering how easy a  is especially in a virtual environment?


Answer URL
https://docs.python.org/3/tutorial/appendix.html#the-interactive-startup-file
https://docs.python.org/3/tutorial/appendix.html#the-customization-modules
