Natural Text
I see lot of examples of generator functions, but I want to know how to write generators for classes. Lets say, I wanted to write Fibonacci series as a class. Output:Why is the value  not getting printed?  Also, how do I write  for generators?   
How to write a generator class?You're almost there, writing an Iterator class (I show a Generator at the end of the answer), but  gets called every time you call the object with , returning a generator object. Instead, use :To make the class itself an iterator:And now:Why is the value self.a not getting printed?Here's your original code with my comments:So every time you called  you got the generator object that  returns:Also, how do I write unittest for generators?You still need to implement a send and throw method for a And now:    So let's implement a generator object, and leverage the  abstract base class from the collections module (see the source for its implementation), which means we only need to implement  and  - giving us ,  (returns self), and  (same as ) for free (see the Python data model on coroutines):and using the same tests above:Python 2The ABC  is only in Python 3. To do this without , we need to write at least , , and  in addition to the methods we defined above.Note that I copied  directly from the Python 3 standard library, without modification. 
 should return an item, not yield it. You can either write the following, in which  returns a suitable iterator:or make each instance itself an iterator by defining .
Do not use  in  function and implement  also for compatibility with python2.7+Code
If you give the class an  method implemented as a generator, it will automatically return a generator object when called, so that object's  and  methods will be the ones used.Here's what I mean:Output:


Answer URL
https://docs.python.org/3/reference/datamodel.html#coroutine-objects
https://docs.python.org/3/library/stdtypes.html#generator-types
