Natural Text
I need a way to find all combinations from two different lists where each element may or may not be null. For example with the two lists I'd like to call a function that returns a list of all these combinations:Should return:I can do this trivial example but if the list is more complicated say  then the possible options are much more complicated:
I will assume the elements of  are hashable. In that case you can use the following code:Here we first convert the  into a set to boost performance. This is strictly speaking not necessary. Then we use a recursive algorithm where for each element  in  that is in , we have a decision point whether to or not to include it in the result (that's why we perform the recursion again when that element is popped). When we reach the end of the list, we convert our running list  into a . You can also use  to convert it into a list.We use a running list to boost performance a bit since concatenating two lists is done in O(n) whereas the running list can  and  in O(1) amortized cost.This will produce a generator of s. You can materialize the outcome of each generator with  like:In case s are required, you can use  to convert them to lists, like:
After playing around I found an alternative way to Willem Van Onsem's answer. Not quite as clean but also works.When called gives:


Answer URL
https://docs.python.org/3/library/itertools.html
