Natural Text
I have an embarrassingly parallel problem but have been wondering how to "design" function so that it achieves the end resultSo, here is the sequential versionSo, I am just slicing a column from a matrix (train and test matrices)and then passing it to the function..Note that, order of output matters.. which is the index of weight in weights list corresponds to a particular "i" and same for error.How do i parallelize this?
it can easily achieved using concurrents.futures libraryhere's the example code:here executor returns future for every task it submits. keep in mind that if you use  finished task from thread returns to the main thread (which would block your main thread) if you really want true parallelism then you should wait for future objects separately. here's the code snippet for that.
Since this is just a general parallel processing problem, you can use  from .Since I don't have your data set, let's instead consider this following example.Pool creates an amount of worker processes (in this case ). Each worker then continuously execute a job until all jobs have been executed. In other words  first returns when all jobs have been executed.All in all, the above example, when calling  it returns a list of results which are in the same order as they're given. So in the end the above code prints ,  then .
check out joblibhttps://pythonhosted.org/joblib/parallel.htmlJoblib provides a simple helper class to write parallel for loops  using multiprocessing. The core idea is to write the code to be  executed as a generator expression, and convert it to parallel  computing:can be spread over 2 CPUs using the following:
Here's one way to parallelize the code using Ray. Some advantages of using RayLarge data will be stored in shared memory and can be accessed by multiple workers (in a read only fashion) so that workers don't need to create their own copy of the data.The same code will run on one machine or on multiple machines.Ray is a library for writing parallel and distributed Python.You can read more in the Ray documentation. Note I'm one of the Ray developers.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
