Natural Text
I use the following code to temporarily modify environment variables. This  context is mainly used in test cases. For example,My question: is there a simple/elegant way to write ? I thought about actually doing  and then  .. but I am not sure if that would affect the program behavior (eg: if  is referenced elsewhere in the Python interpreter).

I suggest you the following implementation:EDIT: more advanced implementationThe context manager below can be used to add/remove/update your environment variables:Usage examples:EDIT2A demonstration of this context manager is available on GitHub.
I was looking to do the same thing but for unit testing, here is how I have done it using the  function:Basically using  with , we are making  as a dictionnary containing solely .Removing the  will let the original os.environ and add/replace the specified key/value pair inside .Removing  will just create an empty dictionary,  will thus be empty within the .
For unit testing I prefer using a decorator function with optional parameters. This way I can use the modified environment values for a whole test function. The decorator below also restores the original environment values in case the function raises an Exception:Usage in unit tests:
Using the gist here, you can save/restore local, global scope variable and environment variables:https://gist.github.com/earonesty/ac0617a5672ae1a41be1eaf316dd63e4This outputs:


Answer URL
https://docs.python.org/3/library/unittest.mock.html
https://docs.python.org/3/library/unittest.mock.html#patch-dict
