Natural Text
I am using getopt to process a command line optional argument, which should accept a list. Something like this: But this trims everything after "[1,"My questions are:A) Is there a way to specify a list without converting it into a string? (using getopt) B) If I am to convert the list into a string, how to convert this list to a string? e.g. something like  mylist.split("?") to get rid of square brackets ?? is there a better way?Thank you
There are two options that I can think of:Use optparse, and use  action to specify what you want to do as: .Specify your commandline as , and then use  to get your values in a list.   You can use  or  for this method.The advantage of the first method is that you can get integer values in the list directly, at the expense of the commandline being longer (but you can add a single-charecter option for  if you want).  The advantage of the second is shorter command line, but after the , you need to convert the string values , , etc., to integers (pretty easy as well).
If I can't use a standard parser (optparse or argparse) to my application then I use the ast.literal_eval function to parse input arguments of type list as follows:Let suppose that this code is stored in testParser.py file. By executing the script:we get the following output:So, using the secure enough ast.literal_eval function and inserting the list as a string of code we have the desirable result. Useful links:Using python's eval() vs. ast.literal_eval()?http://docs.python.org/2/library/functions.html?highlight=eval#eval
Maybe you should just enclose the argument in quotes?Otherwise every space will be treated as a separator for arguments.
An updated way is to use the  library and add the list as a command line argument. This way, you don't have to do any manual parsing.Example:Which you would then call like this:
From the python optparse help page:"As it parses the command lineoptparse will set"
I have been redirected from the dup question:How to pass an array to python through command line - Stack OverflowIâ€™m answering that question:The arguments on the command line are strings, they're not parsed like literals in the program.argv construct the strings automatically to a list from command line arguments (as separated by spaces), in short,  is a list.


Answer URL
https://docs.python.org/3/library/argparse.html
https://docs.python.org/3/library/optparse.html#standard-option-actions
