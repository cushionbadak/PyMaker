Natural Text
My code just scrapes a web page, then converts it to Unicode.But I get a :I assume that means the HTML contains some wrongly-formed attempt at Unicode somewhere. Can I just drop whatever code bytes are causing the problem instead of getting an error?
2018 Update:As of February 2018, using compressions like  has become quite popular (around 73% of all websites use it, including large sites like Google, YouTube, Yahoo, Wikipedia, Reddit, Stack Overflow and Stack Exchange Network sites).If you do a simple decode like in the original answer with a gzipped response, you'll get an error like or similar to this:UnicodeDecodeError: 'utf8' codec can't decode byte 0x8b in position 1: unexpected code byteIn order to decode a gzpipped response you need to add the following modules (in Python 3):Note: In Python 2 you'd use  instead of Then you can parse the content out like this:This code reads the response, and places the bytes in a buffer. The  module then reads the buffer using the  function. After that, the gzipped file can be read into bytes again and decoded to normally readable text in the end.Original Answer from 2010:Can we get the actual value used for ?In addition, we usually encounter this problem here when we are trying to  an already encoded byte string. So you might try to decode it first as inAs an example:Fails withWhile:Succeeds without error. Do note that "windows-1252" is something I used as an example. I got this from chardet and it had 0.5 confidence that it is right! (well, as given with a 1-character-length string, what do you expect) You should change that to the encoding of the byte string returned from  to what applies to the content you retrieved.Another problem I see there is that the  string method returns the modified string and does not modify the source in place. So it's kind of useless to have  as html is not the encoded string from html.encode (if that is what you were originally aiming for).As Ignacio suggested, check the source webpage for the actual encoding of the returned string from . It's either in one of the Meta tags or in the ContentType header in the response. Use that then as the parameter for .Do note however that it should not be assumed that other developers are responsible enough to make sure the header and/or meta character set declarations match the actual content. (Which is a PITA, yeah, I should know, I was one of those before).
EDIT:Decode the string you get back, using either the charset in the the appropriate  tag in the response or in the  header, then encode.The method  accepts other values as "ignore". For example: 'replace', 'xmlcharrefreplace', 'backslashreplace'. See https://docs.python.org/3/library/stdtypes.html#str.encode
As an extension to Ignacio Vazquez-Abrams' answerIt is sometimes desirable to remove accents from characters and print the base form. This can be accomplished withYou may also want to translate other characters (such as punctuation) to their nearest equivalents, for instance the RIGHT SINGLE QUOTATION MARK unicode character does not get converted to an ascii APOSTROPHE when encoding.Although there are more efficient ways to accomplish this. See this question for more details Where is Python's "best ASCII for this Unicode" database?
Use unidecode - it even converts weird characters to ascii instantly, and even converts Chinese to phonetic ascii.then:
I use this helper function throughout all of my projects. If it can't convert the unicode, it ignores it. This ties into a django library, but with a little research you could bypass it.I no longer get any unicode errors after using this.
For broken consoles like  and HTML output you can always use:This will preserve all the non-ascii chars while making them printable in pure ASCII and in HTML.WARNING: If you use this in production code to avoid errors then most likely there is something wrong in your code. The only valid use case for this is printing to a non-unicode console or easy conversion to HTML entities in an HTML context. And finally, if you are on windows and use cmd.exe then you can type  to enable utf-8 output (works with Lucida Console font). You might need to add .
You wrote """I assume that means the HTML contains some wrongly-formed attempt at unicode somewhere."""The HTML is NOT expected to contain any kind of "attempt at unicode", well-formed or not. It must of necessity contain Unicode characters encoded in some encoding, which is usually supplied up front ... look for "charset". You appear to be assuming that the charset is UTF-8 ... on what grounds? The "\xA0" byte that is shown in your error message indicates that you may have a single-byte charset e.g. cp1252.If you can't get any sense out of the declaration at the start of the HTML, try using chardet to find out what the likely encoding is.Why have you tagged your question with "regex"?Update after you replaced your whole question with a non-question:
If you have a string , you can use the  method for strings to convert encoding types.For more information about handling ASCII and unicode in Python, this is a really useful site: https://docs.python.org/2/howto/unicode.html
I think the answer is there but only in bits and pieces, which makes it difficult to quickly fix the problem such as Let's take an example, Suppose I have file which has some data in the following form ( containing ascii and non-ascii chars )1/10/17, 21:36 - Land : Welcome ï¿½ï¿½and we want to ignore and preserve only ascii characters. This code will do:and type(rline) will give you 
Works for me
Looks like you are using python 2.x. Python 2.x defaults to ascii and it doesn’t know about Unicode. Hence the exception.Just paste the below line after shebang, it will work


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.encode
