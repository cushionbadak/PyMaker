Natural Text
I'm trying to schedule a repeating event to run every minute in Python 3.I've seen class  but I'm wondering if there's another way to do it. I've heard mentions I could use multiple threads for this, which I wouldn't mind doing.I'm basically requesting some JSON and then parsing it; its value changes over time.To use  I have to create a loop to request it to schedule the even to run for one hour:What other ways to do this are there?
You could use , but that also schedules a one-off event, similarly to the  method of scheduler objects.The normal pattern (in any language) to transform a one-off scheduler into a periodic scheduler is to have each event re-schedule itself at the specified interval.  For example, with , I would not use a loop like you're doing, but rather something like:and initiate the whole "forever periodic schedule" with a callOr, I could use  instead of , but the pattern's quite similar.If you need a more refined variation (e.g., stop the periodic rescheduling at a given time or upon certain conditions), that's not too hard to accomodate with a few extra parameters.
My humble take on the subject:Usage:Features:Standard library only, no external dependenciesUses the pattern suggested by Alex Martnelli and  are safe to call multiple times even if the timer has already started/stoppedfunction to be called can have positional and named argumentsYou can change  anytime, it will be effective after next run. Same for ,  and even !
You could use schedule. It works on Python 2.7 and 3.3 and is rather lightweight:
You could use the Advanced Python Scheduler. It even has a cron-like interface.
Based on MestreLion answer, it solve a little problem with multithreading: 
Use Celery.
Here's a quick and dirty non-blocking loop with :There's nothing particularly special, the  creates a new thread of itself with a delay.  Might not be most efficient, but simple enough. northtree's answer would be the way to go if you need more sophisticated solution.And based on this, we can do the same, just with :
Based on Alex Martelli's answer, I have implemented decorator version which is more easier to integrated.
See my sample


Answer URL
