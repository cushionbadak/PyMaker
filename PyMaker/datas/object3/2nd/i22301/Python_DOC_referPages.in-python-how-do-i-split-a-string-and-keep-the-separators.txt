Natural Text
Here's the simplest way to explain this. Here's what I'm using:Here's what I want:The reason is that I want to split a string into tokens, manipulate it, then put it back together again.

If you are splitting on newline, use .(Not a general solution, but adding this here in case someone comes here not realizing this method existed.)
Another no-regex solution that works well on Python 3
If you have only 1 separator, you can employ list comprehensions:Appending/prepending separator:Separator as it's own element:
another example, split on non alpha-numeric and keep the separatorsoutput:explanation
You can also split a string with an array of strings instead of a regular expression, like this:

If one wants to split string while keeping separators by regex without capturing group:If one assumes that regex is wrapped up into capturing group:Both ways also will remove empty groups which are useless and annoying in most of the cases.
One Lazy and Simple SolutionAssume your regex pattern is First, you add some same character as the new separator, like '[cut]'Then you split the new separator, 
I had a similar issue trying to split a file path and struggled to find a simple answer.This worked for me and didn't involve having to substitute delimiters back into the split text:returns:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.splitlines
