Natural Text
I'm using a for loop to read a file, but I only want to read specific lines, say line #26 and #30. Is there any built-in feature to achieve this?Thanks
If the file to read is big, and you don't want to read the whole file in memory at once:Note that  for the th line.In Python 2.6 or later:
The quick answer:or:There is a more elegant solution for extracting many lines: linecache (courtesy of "python: how to jump to a particular line in a huge text file?", a previous stackoverflow.com question).Quoting the python documentation linked above:Change the  to your desired line number, and you're on. Note that 4 would bring the fifth line as the count is zero-based.If the file might be very large, and cause problems when read into memory, it might be a good idea to take @Alok's advice and use enumerate().To Conclude:Use  or  as a quick solution for small files. Use  for a more elegant solution, which will be quite fast for reading many files, possible repeatedly.Take @Alok's advice and use  for files which could be very large, and won't fit into memory. Note that using this method might slow because the file is read sequentially.
A fast and compact approach could be:this accepts any open file-like object  (leaving up to the caller whether it should be opened from a disk file, or via e.g a socket, or other file-like stream) and a set of zero-based line indices , and returns a list, with low memory footprint and reasonable speed.  If the number of lines to be returned is huge, you might prefer a generator:which is basically only good for looping upon -- note that the only difference comes from using rounded rather than square parentheses in the  statement, making a list comprehension and a generator expression respectively.Further note that despite the mention of "lines" and "file" these functions are much, much more general -- they'll work on any iterable, be it an open file or any other, returning a list (or generator) of items based on their progressive item-numbers.  So, I'd suggest using more appropriately general names;-).
For the sake of offering another solution:I hope this is quick and easy :)
if you want line 7
For the sake of completeness, here is one more option.Let's start with a definition from python docs:slice An object usually containing a portion of a sequence. A slice is created using the subscript notation, [] with colons between numbers when several are given, such as in variable_name[1:3:5]. The bracket (subscript) notation uses slice objects internally (or in older versions, __getslice__() and __setslice__()).Though the slice notation is not directly applicable to iterators in general, the  package contains a replacement function:The additional advantage of the function is that it does not read the iterator until the end. So you can do more complex things:And to answer the original question:
Reading files is incredible fast. Reading a 100MB file takes less than 0.1 seconds (see my article Reading and Writing Files with Python). Hence you should read it completely and then work with the single lines.What most answer here do is not wrong, but bad style. Opening files should always be done with  as it makes sure that the file is closed again.So you should do it like this:Huge filesIf you happen to have a huge file and memory consumption is a concern, you can process it line by line:
Some of these are lovely, but it can be done much more simply:That will use simply list slicing, it loads the whole file, but most systems will minimise memory usage appropriately, it's faster than most of the methods given above, and works on my 10G+ data files. Good luck!
You can do a seek() call which positions your read head to a specified byte within the file. This won't help you unless you know exactly how many bytes (characters) are written in the file before the line you want to read. Perhaps your file is strictly formatted (each line is X number of bytes?) or, you could count the number of characters yourself (remember to include invisible characters like line breaks) if you really want the speed boost. Otherwise, you do have to read every line prior to the line you desire, as per one of the many solutions already proposed here.
How about this:
If you don't mind importing then fileinput does exactly what you need (this is you can read the line number of the current line)

I prefer this approach because it's more general-purpose, i.e. you can use it on a file, on the result of , on a  object, whatever:
Here's my little 2 cents, for what it's worth ;)
A better and minor change for Alok Singhal's answer
File objects have a .readlines() method which will give you a list of the contents of the file, one line per list item. After that, you can just use normal list slicing techniques.http://docs.python.org/library/stdtypes.html#file.readlines
@OP, you can use enumerate
Using the with statement, this opens the file, prints lines 26 and 30, then closes the file. Simple!
You can do this very simply with this syntax that someone already mentioned, but it's by far the easiest way to do it:
To print line# 3,   Original author: Frank Hofmann
If your large text file  is strictly well-structured (meaning every line has the same length ), you could use for -th lineDisclaimer This does only work for files with the same length!
To print desired line.To print line above/below required line.execute---->dline("D:\dummy.txt",6)  i.e dline("file path", line_number, if you want upper line of the searched line give 1 for lower -1 this is optional default value will be taken 0)
Fairly quick and to the point.To print certain lines in a text file.  Create a "lines2print" list and thenjust print when the enumeration is "in" the lines2print list.To get rid of extra '\n' use line.strip() or line.strip('\n').I just like "list comprehension" and try to use when I can.I like the "with" method to read text files in order to preventleaving a file open for any reason.or if list is small just type in list as a list into the comprehension.

I think this would work


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#with
