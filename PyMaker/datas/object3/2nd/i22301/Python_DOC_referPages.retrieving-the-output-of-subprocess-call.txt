Natural Text
This question already has an answer here:Store output of subprocess.Popen call in a string                    9 answers                How can I get the output of a process run using ?Passing a  object to  gives this error:
Output from  should only be redirected to files.You should use  instead. Then you can pass  for the stderr, stdout, and/or stdin parameters and read from the pipes by using the  method:The reasoning is that the file-like object used by  must have a real file descriptor, and thus implement the  method. Just using any file-like object won't do the trick.See here for more info.
If you have Python version >= 2.7, you can use subprocess.check_output which basically does exactly what you want (it returns standard output as string).Simple example (linux version, see note):Note that the ping command is using linux notation ( for count). If you try this on Windows remember to change it to  for same result.As commented below you can find a more detailed explanation in this other answer.
I have the following solution. It captures the exit code, the stdout, and the stderr too of the executed external command:I also have a blog post on it here.Edit: the solution was updated to a newer one that doesn't need to write to temp. files.
For python 3.5+ it is recommended that you use the run function from the subprocess module. This returns a  object, from which you can easily obtain the output as well as return code.
I recently just figured out how to do this, and here's some example code from a current project of mine:You now have the output of the command stored in the variable "output".  "stdout = subprocess.PIPE" tells the class to create a file object named 'stdout' from within Popen.  The communicate() method, from what I can tell, just acts as a convenient way to return a tuple of the the output and the errors from the process you've run.  Also, the process is run when instantiating Popen.
In  shell:Based on sargue's answer. Credit to sargue.
The following captures stdout and stderr of the process in a single variable.  It is Python 2 and 3 compatible:If your command is a string rather than an array, prefix this with:


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.run
https://docs.python.org/3/library/subprocess.html#subprocess.run
