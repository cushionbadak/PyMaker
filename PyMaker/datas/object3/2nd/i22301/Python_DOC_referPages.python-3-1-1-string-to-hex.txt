Natural Text
I am trying to use  but I getI have tried a bunch of variations and they seem to all work in Python 2.5.2, so what do I need to do to get them to work in Python 3.1?
The  codec has been chucked in 3.x. Use  instead:
You've already got some good answers, but I thought you might be interested in a bit of the background too.Firstly you're missing the quotes. It should be:Secondly this codec hasn't been ported to Python 3.1. See here. It seems that they haven't yet decided whether or not these codecs should be included in Python 3 or implemented in a different way.If you look at the diff file attached to that bug you can see the proposed method of implementing it:
binascii methodes are easier by the wayHope it helps. :)
In Python 3, encode the string to bytes and use the  method, returning a string.Optionally convert the string back to bytes:
In Python 3, all strings are unicode. Usually, if you encode an unicode object to a string, you use , since  is not a text encoding, you should use  to handle arbitrary codecs. For example:Again, since "hello" is unicode, you need to indicate it as a byte string before encoding to hexadecimal. This may be more inline with what your original approach of using the  method.The differences between  and  are as follow:binascii.hexlifyHexadecimal representation of binary data.The return value is a bytes object.Type:      builtin_function_or_methodcodecs.encodeencode(obj, [encoding[,errors]]) -> objectEncodes obj using the codec registered for encoding. encoding defaultsto the default encoding. errors may be given to set a different errorhandling scheme. Default is 'strict' meaning that encoding errors raisea ValueError. Other possible values are 'ignore', 'replace' and'xmlcharrefreplace' as well as any other name registered withcodecs.register_error that can handle ValueErrors.Type:      builtin_function_or_method
 and  convert bytes to and from hex and work across all Python versions.  The codecs approach also works, but is less straightforward in Python 3.
Use hexlify - http://epydoc.sourceforge.net/stdlib/binascii-module.html
Yet another method:This basically splits the string into chars, does the conversion through , and joins the chars back together. In case you want the result without the prefix  then do:Tested with Python 3.5.3.
The easiest way to do it in Python 3.x is:If you manually enter a string into a Python Interpreter using the  characters, you can do it even faster by typing  before the string:Equivalent in Python 2.x:


Answer URL
https://docs.python.org/3/library/codecs.html#binary-transforms
