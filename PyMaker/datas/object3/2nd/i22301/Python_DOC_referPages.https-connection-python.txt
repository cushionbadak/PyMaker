Natural Text
I am trying to verify the that target exposes a https web service. I have code to connect via HTTP but I am not sure how to connect via HTTPS. I have read you use SSL but I have also read that it did not support certificate errors. The code I have got is from the python docs:Does anyone know how to connect to HTTPS?I already tried the HTTPSConenction but it responds with an error code claiming httplib does not have attribute HTTPSConnection. I also don't have socket.ssl available.I have installed Python 2.6.4 and I don't think it has SSL support compiled into it. Is there a way to integrate this suppot into the newer python without having to install it again.I have installed OpenSSL and pyOpenSsl and I have tried the below code from one of the answers:I have got an error:Does anyone know how to get this working?I have found out what the problem was, the Python version I was using did not have support for SSL. I have found this solution currently at: http://www.webtop.com.au/compiling-python-with-ssl-support. The code will now work after this solution which is very good. When I import ssl and HTTPSConnection I know don't get an error.Thanks for the help all.
Python 2.x: docs.python.org/2/library/httplib.html:Note: HTTPS support is only available if the socket module was compiled with SSL support.Python 3.x: docs.python.org/3/library/http.client.html:Note HTTPS support is only available if Python was compiled with SSL support (through the ssl module).To verify if SSL is enabled, try:
To check for ssl support in Python 2.6+:To connect via https:
using http://docs.python.org/library/httplib.html#httplib.HTTPSConnection

Why haven't you tried httplib.HTTPSConnection? It doesn't do SSL validation but this isn't required to connect over https.Your code works fine with https connection:
If using httplib.HTTPSConnection:Please take a look at:Changed in version 2.7.9: This class now performs all the necessary certificate and hostname checks by default. To revert to the previous, unverified, behavior ssl._create_unverified_context() can be passed to the context parameter. You can use:
Assuming SSL support is enabled for the  module.
I had some code that was failing with an , but as soon as I switched to  it worked perfectly again with no other changes needed.  That's a very simple fix!  


Answer URL
https://docs.python.org/3/library/http.client.html
