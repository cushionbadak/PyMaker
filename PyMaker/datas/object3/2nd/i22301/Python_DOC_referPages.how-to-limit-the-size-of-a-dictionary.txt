Natural Text
I'd like to work with a dict in python, but limit the number of key/value pairs to X. In other words, if the dict is currently storing X key/value pairs and I perform an insertion, I would like one of the existing pairs to be dropped. It would be nice if it was the least recently inserted/accesses key but that's not completely necessary.If this exists in the standard library please save me some time and point it out!
Python 2.7 and 3.1 have OrderedDict and there are pure-Python implementations for earlier Pythons.You would also have to override other methods that can insert items, such as .  The primary use of  is so you can control what gets popped easily, otherwise a normal  would work.
cachetools will provide you nice implementation of Mapping Hashes that does this (and it works on python 2 and 3).Excerpt of the documentation:For the purpose of this module, a cache is a mutable mapping of a fixed  maximum size. When the cache is full, i.e. by adding another item the  cache would exceed its maximum size, the cache must choose which item(s)   to discard based on a suitable cache algorithm.
Here's a simple, no-LRU Python 2.6+ solution (in older Pythons you could do something similar with , but in 2.6 and better that's not recommended, and the ABCs from  are preferable anyway...):As other answers mentioned, you probably don't want to subclass dict -- the explicit delegation to  is unfortunately boilerplatey but it does guarantee that every other method is properly supplied by .
Here is a simple and efficient LRU cache written with dirt simple Python code that runs on any python version 1.5.2 or later:
A dict does not have this behavior. You could make your own class that does this, for example something likeA few notes about thisIt would be tempting for some to subclass  here. You can technically do this, but it is bug-prone because the methods do not depend on each other. You can use  to save having to define all methods. There are few methods you would be able re-use if you subclass .A dict does not know what the least recently added key is, since dicts are unordered. 2.7 will introduce , but for now keeping the keys in order separately should work fine (use a  as a queue).If getting the oldest isn't all that imporant, you can just use the  method to delete one arbitrary item.I interprettered oldest to mean first insertion, approximately. You would have to do something a bit different to eliminate the LRU items. The most obvious efficient strategy would involve keeping a doubly-linked list of keys with references to the nodes themselves stored as dict values (along with the real values). This gets more complicated and implementing it in pure Python carries a lot of overhead.
You can create a custom dictionary class by subclassing dict. In your case, you would have to override  to have check your own length and delete something if the limit is recahed. The following example would print the current lenght after every insertion:
There have been many good answers, but I want to point out a simple, pythonic implementation for LRU cache. It's similar to Alex Martelli's answer.


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
