Natural Text
Hey, I just started wondering about this as I came upon a code that expected an object with a certain set of attributes (but with no specification of what type this object should be).One solution would be to create a new class that has the attributes the code expects, but as I call other code that also needs objects with (other) attributes, I'd have to create more and more classes.A shorter solution is to create a generic class, and then set the attributes on instances of it (for those who thought of using an instance of  instead of creating a new class, that won't work since  instances don't allow new attributes).The last, shortest solution I came up with was to create a class with a constructor that takes keyword arguments, just like the  constructor, and then sets them as attributes:But I can't help feeling like I've missed something obvious... Isn't there a built-in way to do this (preferably supported in Python 2.5)?
The original code can be streamlined a little by using :
 will create an object that can have arbitrary attributes.Example: with three arguments creates a new type.The first argument  is the name of the new type. We don't care about the name, so we leave it empty.The second argument  is a tuple of base types, here  (implicit).The third argument is a dictionary of attributes of the new object - again we don't care to it's an empty dictionary And in the end we instantiate a new instance of this new type with  at the end.
Use .It works well.
This works in 2.5, 2.6, and 3.1:EDIT:I thought maybe giving the source would help out as well.http://docs.python.org/tutorial/classes.html#odds-and-endsEDIT:Added assignment to result, as I was using the interactive interpreters to verify, and you might not be.
This is the shortest way I knowusing dict instead of {} insures your attribute names are valid
Use a combination between lambda and type build-in, I think is the smallest way to do that:
A function is an object. So you could assign attributes to a function. Or make one. This is the simplest way in terms of lines of code, I think.but the easiest & most elegant way (but python >3.3) is to use Standard Libary's simpleNamespacehttps://docs.python.org/3/library/types.html#types.SimpleNamespace
If you don't need to pass values in the constructor, you can do this:You use the class static member variables to hold your data.
If I understand your question correctly, you need records. Python classes may be used this way, which is what you do. I believe the most pythonic way of dealing with "records" is simply... dictionaries! A class is a sort of dictionary on steroids.Your class example  is essentially a way of converting a dictionary into a class.(On a side note, I would rather use .)
This is typically something you would use a dict for, not making a class at all.
You might be interested in the "Struct", which is part of the IPython package. It does what you want to do, with lots of useful methods.http://ipython.org/ipython-doc/rel-0.13/api/generated/IPython.utils.ipstruct.html


Answer URL
https://docs.python.org/3/library/types.html#types.SimpleNamespace
