Natural Text
Does Python have a package/module management system, similar to how Ruby has rubygems where you can do ?On Installing Python Modules, I only see references to , but that requires you to find the package first.
Recent progressMarch 2014: Good news! Python 3.4 ships with Pip. Pip has long been Python's de-facto standard package manager. You can install a package like this:Wahey! This is the best feature of any Python release. It makes the community's wealth of libraries accessible to everyone. Newbies are no longer excluded from using community libraries by the prohibitive difficulty of setup.However, there remains a number of outstanding frustrations with the Python packaging experience. Cumulatively, they make Python very unwelcoming for newbies. Also, the long history of neglect (ie. not shipping with a package manager for 14 years from Python 2.0 to Python 3.3) did damage to the community. I describe both below.Outstanding frustrationsIt's important to understand that while experienced users are able to work around these frustrations, they are significant barriers to people new to Python. In fact, the difficulty and general user-unfriendliness is likely to deter many of them. PyPI website is counter-helpfulEvery language with a package manager has an official (or quasi-official) repository for the community to download and publish packages. Python has the Python Package Index, PyPI.  https://pypi.python.org/pypi Let's compare its pages with those of RubyGems and Npm (the Node package manager).https://rubygems.org/gems/rails RubyGems page for the package  https://www.npmjs.org/package/express Npm page for the package https://pypi.python.org/pypi/simplejson/ PyPI page for the package You'll see the RubyGems and Npm pages both begin with a one-line description of the package, then large friendly instructions how to install it.Meanwhile, woe to any hapless Python user who naively browses to PyPI. On https://pypi.python.org/pypi/simplejson/ , they'll find no such helpful instructions. There is however, a large green 'Download' link. It's not unreasonable to follow it. Aha, they click! Their browser downloads a  file. Many Windows users can't even open it, but if they persevere they may eventually extract it, then run  and eventually with the help of Google . Some will give up and reinvent the wheel..  Of course, all of this is wrong. The easiest way to install a package is with a Pip command. But PyPI didn't even mention Pip. Instead, it led them down an archaic and tedious path.Error: Unable to find vcvarsall.batNumpy is one of Python's most popular libraries. Try to install it with Pip, you get this cryptic error message:Error: Unable to find vcvarsall.batTrying to fix that is one of the most popular questions on Stack Overflow: "error: Unable to find vcvarsall.bat"Few people succeed.For comparison, in the same situation, Ruby prints this message, which explains what's going on and how to fix it:Please update your PATH to include build tools or download the DevKit from http://rubyinstaller.org/downloads and follow the instructions at http://github.com/oneclick/rubyinstaller/wiki/Development-KitPublishing packages is hardRuby and Nodejs ship with full-featured package managers, Gem (since 2007) and Npm (since 2011), and have nurtured sharing communities centred around GitHub. Npm makes publishing packages as easy as installing them, it already has 64k packages. RubyGems lists 72k packages. The venerable Python package index lists only 41k.HistoryFlying in the face of its "batteries included" motto, Python shipped without a package manager until 2014. Until Pip, the de facto standard was a command  . It was woefully inadequate. The was no command to uninstall packages.Pip was a massive improvement. It had most the features of Ruby's Gem. Unfortunately, Pip was--until recently--ironically difficult to install. In fact, the problem remains a top Python question on Stack Overflow: "How do I install pip on Windows?"
The Python Package Index (PyPI) seems to be standard:To install a package:To update a packageTo fix a version of a package You can install the package manager as follows:References:http://guide.python-distribute.org/http://pypi.python.org/pypi/distribute
And just to provide a contrast, there's also pip.
As a Ruby and Perl developer and learning-Python guy, I haven't found easy_install or pip to be the equivalent to RubyGems or CPAN. I tend to keep my development systems running the latest versions of modules as the developers update them, and freeze my production systems at set versions. Both RubyGems and CPAN make it easy to find modules by listing what's available, then install and later update them individually or in bulk if desired.easy_install and pip make it easy to install a module ONCE I located it via a browser search or learned about it by some other means, but they won't tell me what is available. I can explicitly name the module to be updated, but the apps won't tell me what has been updated nor will they update everything in bulk if I want.So, the basic functionality is there in pip and easy_install but there are features missing that I'd like to see that would make them friendlier and easier to use and on par with CPAN and RubyGems.
There are at least two, easy_install and its successor pip.
As of at least late 2014, Continuum Analytics' Anaconda Python distribution with the conda package manager should be considered. It solves most of the serious issues people run into with Python in general (managing different Python versions, updating Python versions, package management, virtual environments, Windows/Mac compatibility) in one cohesive download.It enables you to do pretty much everything you could want to with Python without having to change the system at all. My next preferred solution is pip + virtualenv, but you either have to install virtualenv into your system Python (and your system Python may not be the version you want), or build from source. Anaconda makes this whole process the click of a button, as well as adding a bunch of other features.
That'd be easy_install.
It's called setuptools. You run it with the "easy_install" command.You can find the directory at http://pypi.python.org/
On Windows install http://chocolatey.org/ then Open a new cmd-window with the updated PATH. Next, doAfter that you can
I don't see either MacPorts or Homebrew mentioned in other answers here, but since I do see them mentioned elsewhere on Stack Overflow for related questions, I'll add my own US$0.02 that many folks seem to consider MacPorts as not only a package manager for packages in general (as of today they list 16311 packages/ports, 2931 matching "python", albeit only for Macs), but also as a decent (maybe better) package manager for Python packages/modules:Question"...what is the method that Mac python developers use to manage their modules?"Answers"MacPorts is perfect for Python on the Mac.""The best way is to use MacPorts.""I prefer MacPorts...""With my MacPorts setup...""I use MacPorts to install ... third-party modules tracked by MacPorts"SciPy"Macs (unlike Linux) don’t come with a package manager, but there are a couple of popular package managers you can install.Macports..."I'm still debating on whether or not to use MacPorts myself, but at the moment I'm leaning in that direction.
Since no one has mentioned pipenv here, I would like to describe my views why everyone should use it for managing python packages.As @ColonelPanic mentioned there are several issues with the Python Package Index and with pip and virtualenv also.Pipenv solves most of the issues with pip and provides additional features also.Pipenv featuresPipenv is intended to replace pip and virtualenv, which means pipenv will automatically create a separate virtual environment for every project thus avoiding conflicts between different python versions/package versions for different projects.Enables truly deterministic builds, while easily specifying only what you want.Generates and checks file hashes for locked dependencies.Automatically install required Pythons, if pyenv is available.Automatically finds your project home, recursively, by looking for a Pipfile.Automatically generates a Pipfile, if one doesn’t exist.Automatically creates a virtualenv in a standard location.Automatically adds/removes packages to a Pipfile when they are un/installed.Automatically loads .env files, if they exist.If you have worked on python projects before, you would realize these features make managing packages way easier. Other Commands checks for security vulnerabilities and asserts that PEP 508 requirements are being met by the current environment. (which I think is a great feature especially after this - Malicious packages on PyPi) will show you a dependency graph, of your installed dependencies.You can read more about it here - Pipenv.InstallationYou can find the installation documentation hereP.S.: If you liked working with the Python Package requests , you would be pleased to know that pipenv is by the same developer Kenneth Reitz
In 2019 poetry is the package and dependency manager you are looking for.https://github.com/sdispater/poetry#whyIt's modern, simple and reliable.
Poetry is what you're looking for. It takes care of dependency management, virtual environments, running.


Answer URL
https://docs.python.org/3/whatsnew/3.4.html
