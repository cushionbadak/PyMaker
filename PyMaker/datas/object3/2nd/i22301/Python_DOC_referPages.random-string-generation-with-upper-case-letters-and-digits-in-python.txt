Natural Text
I want to generate a string of size N.It should be made up of numbers and uppercase English letters such as:6U1S754Z4UKKU911K4How can I achieve this in a pythonic way?
Answer in one line:or even shorter starting with Python 3.6 using :A cryptographically more secure version; see https://stackoverflow.com/a/23728630/2213647:In details, with a clean function for further reuse:How does it work ?We import , a module that contains sequences of common ASCII characters, and , a module that deals with random generation. just concatenates the list of characters representing uppercase ASCII chars and digits:Then we use a list comprehension to create a list of 'n' elements:In the example above, we use  to create the list, but we don't in the  function so Python doesn't create the list in memory, but generates the elements on the fly, one by one (more about this here).Instead of asking to create 'n' times the string , we will ask Python to create 'n' times a random character, picked from a sequence of characters:Therefore  really is creating a sequence of  characters. Characters that are randomly picked from :Then we just join them with an empty string so the sequence becomes a string:
This Stack Overflow quesion is the current top Google result for "random string Python". The current top answer is:This is an excellent method, but the PRNG in random is not cryptographically secure. I assume many people researching this question will want to generate random strings for encryption or passwords. You can do this securely by making a small change in the above code:Using  instead of just random uses /dev/urandom on *nix machines and  in Windows.  These are cryptographically secure PRNGs. Using  instead of  in an application that requires a secure PRNG could be potentially devastating, and given the popularity of this question, I bet that mistake has been made many times already.If you're using python3.6 or above, you can use the new secrets module.The module docs also discuss convenient ways to generate secure tokens and best practices.
Simply use Python's builtin uuid:If UUIDs are okay for your purposes, use the built-in uuid package.One Line Solution:In Depth Version:Example:If you need exactly your format (for example, "6U1S75"), you can do it like this:
A simpler, faster but slightly less random way is to use  instead of choosing each letter separately, If n-repetitions are allowed, enlarge your random basis by n times e.g.Note:random.sample prevents character reuse, multiplying the size of the character set makes multiple repetitions possible, but they are still less likely then they are in a pure random choice. If we go for a string of length 6, and we pick 'X' as the first character, in the choice example, the odds of getting 'X' for the second character are the same as the odds of getting 'X' as the first character. In the random.sample implementation, the odds of getting 'X' as any subsequent character are only 6/7 the chance of getting it as the first character
 is a random value like  is 
Taking the answer from Ignacio, this works with Python 2.6:Example output:JQUBT2
A faster, easier and more flexible way to do this is to use the  module ().Generate a 6-character random string with upper case letters and digits:Get a unique list:Guarantee one "special" character in the string:A random HTML color:etc. We need to be aware that this:might not have a digit (or uppercase character) in it. is faster in developer-time than any of the above solutions. The solution from Ignacio is the fastest run-time performing and is the right answer using the Python Standard Library. But you will hardly ever use it in that form. You will want to use SystemRandom (or fallback if not available), make sure required character sets are represented, use unicode (or not), make sure successive invocations produce a unique string, use a subset of one of the string module character classes, etc. This all requires lots more code than in the answers provided. The various attempts to generalize a solution all have limitations that strgen solves with greater brevity and expressive power using a simple template language.It's on PyPI:Disclosure: I'm the author of the strgen module.
If you need a random string rather than a pseudo random one, you should use  as the source
I thought no one had answered this yet lol! But hey, here's my own go at it:
Based on another StackÂ Overflow answer, Most lightweight way to create a random string and a random hexadecimal number, a better version than the accepted answer would be:much faster.
This method is slightly faster, and slightly more annoying, than the random.choice() method Ignacio posted.It takes advantage of the nature of pseudo-random algorithms, and banks on bitwise and and shift being faster than generating a new random number for each character....create a generator that takes out 5 bit numbers at a time 0..31 until none left...join() the results of the generator on a random number with the right bitsWith Timeit, for 32-character strings, the timing was:...but for 64 character strings, randbits loses out ;)I would probably never use this approach in production code unless I really disliked my co-workers.edit: updated to suit the question (uppercase and digits only), and use bitwise operators & and >> instead of % and //
From Python 3.6 on you should use the  module if you need it to be cryptographically secure instead of the  module (otherwise this answer is identical to the one of @Ignacio Vazquez-Abrams):One additional note: a list-comprehension is faster in the case of  than using a generator expression!
I'd do it this way:Or just:
Use Numpy's random.choice() functionDocumentation is here http://docs.scipy.org/doc/numpy-1.10.0/reference/generated/numpy.random.choice.html
the following logic still generates 6 character random sample No need to multiply by 6
For those of you who enjoy functional python:It generates an indefinite [infinite] iterator, of joined random sequences, by first generating an indefinite sequence of randomly selected symbol from the giving pool, then breaking this sequence into length parts which is then joined, it should work with any sequence that supports getitem, by default it simply generates a random sequence of alpha numeric letters, though you can easily modify to generate other things:for example to generate random tuples of digits:if you don't want to use next for generation you can simply make it callable:if you want to generate the sequence on the fly simply set join to identity.As others have mentioned if you need more security then set the appropriate select function:the default selector is  which may select the same symbol multiple times for each chunk, if instead you'd want the same member selected at most once for each chunk then, one possible usage:we use  as our selector, to do the complete selection, so the chunks are actually length 1, and to join we simply call  which fetches the next completely generated chunk, granted this example seems a bit cumbersome and it is ...
(1) This will give you all caps and numbers:(2) If you later want to include lowercase letters in your key, then this will also work:
this is a take on Anurag Uniyal 's response and something that i was working on myself.

Here length of string can be changed in for loop i.e for i in range(1,length) It is simple algorithm which is easy to understand. it uses list so you can discard characters that you do not need. 
The  function picks a random entry in a list. You also create a list so that you can append the character in the  statement. At the end str is ['t', 'm', '2', 'J', 'U', 'Q', '0', '4', 'C', 'K'], but the  takes care of that, leaving you with .Hope this helps!
A simple one:
I would like to suggest you next option:Paranoic mode:
Two methods :Benchmark :Output :The performance of first method is better.  
for python 3import string, random''.join(random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits) for _ in range(15))
I have gone though almost all of the answers but none of them looks easier. I would suggest you to try the passgen library which is generally used to create random passwords.You can generate random strings of your choice of length, punctuation, digits, letters and case.Here's the code for your case:
I found this to be simpler and cleaner.Just change the 64 to vary the length, vary the CharacterPool to do alpha only alpha numeric or numeric only or strange characters or whatever you want.
You can use the code This will random spit out a random 7 alphanumeric pattern, simply change the 7 to any number you wish and it will produce that many numbers and/or letters.Another way to write this is as follows...I am unsure of how to add restrictions such as making it to where it does not allow certain numbers and/or letters to be next to each other or repeat such as getting "AAA123" if anyone knows how to restrict the outcome to have something like this please comment back


Answer URL
https://docs.python.org/3/library/random.html#random.choices
https://docs.python.org/3/library/secrets.html
https://docs.python.org/3/library/secrets.html#generating-tokens
https://docs.python.org/3/library/secrets.html#recipes-and-best-practices
