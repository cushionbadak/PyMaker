Natural Text
I would like to load a  file at runtime.  This  file is basically a config file with the following format:Once this file is loaded, I would like to be able to access ,  and . For each line, I'll pass it to the predicate function, and if it returns false, I'll ignore it.In any case, I'm not sure how to load a python file at runtime and access its variables.Clarification: there may be any number of these config files that I need to pass to the main program and I won't know their names until runtime.  Google tells me I should use .  I'm not sure how to correctly use that method and then access the variables of the imported file.
You just need to be able to dynamically specify the imports and then dynamically get at the variables.Let's say your config file is bar.py and looks like this:Then your code should look like this:I get this output:Then you at least have all the variables and functions. I didn't quite get what you wanted from the predicate functions, but maybe you can get that on your own now.
As written in the python official documentation, if you just want to import a module by name, you can look it up in the  dictionary after using .Supposing your configuration is in , you would do like that :You can also use the return value of  statement but you will have to understand fully how python works with namespaces and scopes.
To access another Python module, you import it.  has been mentioned by a couple people, but it is messy and dangerous.  clutters your namespace, possibly even messing up the code you are running. When you want to access another Python source file, use the  statement.Even better would be not to use a Python file for configuration at all, but rather to use the builtin module  or a serialization format like JSON. This way your configuration files don't allow execution of arbitrary (possibly malicious) code, doesn't require people to know Python to configure your program, and can easily be altered programatically.
If the imported module is on the regular search path, you can use .If you need to load the module from an arbitrary path in the filesystem, use .Be sure to consider the security implications of loading arbitrary user-specified code.
In Python , execfile works (I recommend passing a specific dictionary and accessing the variables from there -- as the note in the docs says,  can't affect the calling function's  dictionary).In Python , execfile has been removed, so do, instead:
I'm kinda late to the party, but I want to present an alternative answer nonetheless.If you want to import code without affecting the global module namespace, you can create an anonymous module (using ) and load arbitrary code in it (using  and ). For instance, like this:You can then access the variables as , &c.
If you want to have a configuration file that will only be edited by the user when the program isn't running, just import it as a normal python fileie.main.py:config.py:
try the imp module : http://docs.python.org/library/imp.html
Since the Python version hasn't been clearly mentioned, it is worth pointing out that the imp module has been deprecated in newer Python versions in favor of the importlib module. Example here.


Answer URL
https://docs.python.org/3/library/importlib.html
