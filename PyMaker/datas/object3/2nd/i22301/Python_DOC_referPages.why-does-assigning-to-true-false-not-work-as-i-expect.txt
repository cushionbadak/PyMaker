Natural Text
As part of answering another question, I wrote the following code whose behaviour seems bizarre at first glance:Can anyone explain this strange behaviour? I think it has something to do with Python's object model but I'm not sure.It's version 2.5.2 under Cygwin.
Python has these two (among others) builtin objects. They are just objects; in the beginning, they don't have any names yet, but to know what we refer to, let's call them  and .Before starting to execute a Python (2.x) script, the name  gets bound to the object , and the name  gets bound to the object , so when the program refers to , it looks at .Because  and  know that they are usually used by the names  and , that's what they output when they get printed, i.e. the  method of  returns  and so on.now binds the name  to a different object. From now on, both names  and  refer to the same object , which, when printed, outputs .doesn't really do anything: It takes the object referred to by the name , and binds  the new (and old) name  to this object. Since (because of the previous step)  refers to  before this, it still refers to  after this. Hence, printing still outputs .first takes the object that the name  is bound to, which is . It gives this object to the  operator.  doesn't care (or know) what name is used here to refer to , it just knows that when given  it should return . This return value is then given to the assignment operator , binding the name  to this object.Since the name  now once more refers to the object , calling  outputs , and the world is good again.
Imagine this instead:The exact same thing is going on, but in your version it's confusing, because you don't expect that you can redefine True and False.
In 2.x, True and False are not keywords so it's possible to shadow the built-ins in this manner.
You can check whether True/False is a keyword:Since it's not (in my version), assigning True=False just means "True" is another "variable" name.
You could easily restore the original values using simple Boolean comparisons:Or by converting integer literals to bools:


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#keywords
