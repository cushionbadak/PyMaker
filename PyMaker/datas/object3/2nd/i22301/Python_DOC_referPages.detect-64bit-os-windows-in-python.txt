Natural Text
Does anyone know how I would go about detected what bit version Windows is under Python.  I need to know this as a way of using the right folder for Program Files.Many thanks
 module  --  Access to underlying platformâ€™s identifying dataOn 64-bit Windows, 32-bit Python returns:And that means that this answer, even though it has been accepted, is incorrect. Please see some of the answers below for options that may work for different situations.
I think the best solution to the problem has been posted by Mark Ribau.The best answer to the question for Python 2.7 and newer is:On windows the cross-platform-function  internally uses the environmental variables used in Matthew Scoutens answer.I found the following values:WinXP-32: x86Vista-32: x86Win7-64: AMD64Debian-32: i686Debian-64: x86_64For Python 2.6 and older:To find the Python interpreter bit version I use:
I guess you should look in  for the program files folder.
Came here searching for properly detecting if running on 64bit windows, compiling all the above into something more concise. Below you will find a function to test if running on 64bit windows, a function to get the 32bit Program Files folder, and a function to get the 64bit Program Files folder; all regardless of running 32bit or 64bit python. When running 32bit python, most things report as if 32bit when running on 64bit, even . Note: Yes, this is a bit hackish. All other methods that "should just work", do not work when running 32bit Python on 64bit Windows (at least for the various 2.x and 3.x versions I have tried).Edits:2011-09-07 - Added a note about why only this hackish method works properly.
http://blogs.msdn.com/b/david.wang/archive/2006/03/26/howto-detect-process-bitness.aspx
Many of these proposed solutions, such as platform.architecture(), fail because their results depend on whether you are running 32-bit or 64-bit Python.The only reliable method I have found is to check for the existence of os.environ['PROGRAMFILES(X86)'], which is unfortunately hackish.
You should be using environment variables to access this. The program files directory is stored in the environment variable  on x86 Windows, the 32-bit program files is directory is stored in the  environment variable, these can be accessed by using .Use  or the existence of  () to determine what version of Windows you are using.
Following this documentation, try this code:
I just found another way to do this, which may be useful in some situations.I tested this code in the following environments:Ubuntu 16.04 + Python 2.7.12Mac OS Sierra + Python 2.7.11Windows 7 Pro 32-bit + Python 2.7.5 (32-bit)Windows 10 Home 64-bit + Python 2.7.13 (32-bit)
It will return '32bit' or '64bit' depending on system architecture. 
The subject lines asks about detecting 64 or 32bit OS, while the body talks about determining the location of ProgramFiles. The latter has a couple of workable answers here. I'd like to add another solution generalized to handle StartMenu, Desktop, etc. as well as ProgramFiles: How to get path of Start Menu's Programs directory?
When you need to find out things about windows system, it is usually somewhere in the registry, according to MS documentation, you should look at (http://support.microsoft.com/kb/556009) this key value:HKLM\HARDWARE\DESCRIPTION\System\CentralProcessor\0and if it is:0x00000020 (32 in decimal)It is a 32 bit machine.
Just to update this old thread - it looks like the platform module reports the correct architecture now (at least, in Python 2.7.8):(sorry I don't have the rep to comment on the first answer which still claims to be wrong :)
Im aware that in comments of the question this method was already used.This is the method the .net framework uses:
64-bit versions of Windows use something called registry redirection and reflection keys. There is a compatibility layer called WoW64 which enables compatibility of 32-bit applications. Starting from Windows 7 and Windows Server 2008 R2 WoW64 registry keys are not longer reflected but shared. You can read about it here:registry-reflection: msdn.microsoft.com/en-us/library/aa384235(v=vs.85).aspxaffected-keys: msdn.microsoft.com/en-us/library/aa384253(v=vs.85).aspxwikipedia: en.wikipedia.org/wiki/WoW64All you need to do is detect existence of those keys. You can use _winreg for that. Use try: and try opening key, example:
just run this code if you are working on 64 bit windows  machine this will print AMD64 or if you are working on 32 bit it will print AMD32i hope this code can help to solve this problem fully 
This works for me in the Python versions I use: 2.7 and 2.5.4

There should be a directory under Windows 64bit, a Folder called  for 64 bit, under Windows 32bit, it's WinSxS.


Answer URL
https://docs.python.org/3/library/platform.html#cross-platform
