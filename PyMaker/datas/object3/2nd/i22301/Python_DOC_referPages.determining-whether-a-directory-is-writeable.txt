Natural Text
What would be the best way in Python to determine whether a directory is writeable for the user executing the script? Since this will likely involve using the os module I should mention I'm running it under a *nix environment. 
Although what Christophe suggested is a more Pythonic solution, the os module does have the os.access function to check access: # W_OK is for writing, R_OK for reading, etc.
It may seem strange to suggest this, but a common Python idiom is It's easier to ask for forgiveness  than for permissionFollowing that idiom, one might say:Try writing to the directory in question, and catch the error if you don't have the permission to do so.
My solution using the  module:
Stumbled across this thread searching for examples for someone. First result on Google, congrats!People talk about the Pythonic way of doing it in this thread, but no simple code examples? Here you go, for anyone else who stumbles in:This attempts to open a filehandle for writing, and exits with an error if the file specified cannot be written to: This is far easier to read, and is a much better way of doing it rather than doing prechecks on the file path or the directory, as it avoids race conditions; cases where the file becomes unwriteable between the time you run the precheck, and when you actually attempt to write to the file. 
If you only care about the file perms,  should do what you ask for. If you instead want to know whether you can write to the directory,  a test file for writing (it shouldn't exist beforehand), catch and examine any , and clean up the test file afterwards.More generally, to avoid TOCTOU attacks (only a problem if your script runs with elevated privileges -- suid or cgi or so), you shouldn't really trust these ahead-of-time tests, but drop privs, do the , and expect the .
Check the mode bits: 
Here is something I created based on ChristopheD's answer:
more info about access can be find it here
I ran into this same need while adding an argument via argparse. The built in  wouldn't work for me as I was looking for a directory. I ended up writing my own method to solve my problem. Here is the result with argparse snippet.That results in the following:I went back and added print opts.dir to the end, and everything appears to be functioning as desired.
If you need to check the permission of another user (yes, I realize this contradicts the question, but may come in handy for someone), you can do it through the  module, and the directory's mode bits.Disclaimer - does not work on Windows, as it doesn't use the POSIX permissions model (and the  module is not available there), e.g. - solution only for *nix systems.Note that a directory has to have all the 3 bits set - Read, Write and eXecute.Ok, R is not an absolute must, but w/o it you cannot list the entries in the directory (so you have to know their names). Execute on the other hand is absolutely needed - w/o it the user cannot read the file's inodes; so even having W, without X files cannot be created or modified. More detailed explanation at this link.Finally, the modes are available in the  module, their descriptions are in inode(7) man.Sample code how to check:


Answer URL
https://docs.python.org/3/library/os.html#os.access
