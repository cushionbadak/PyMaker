Natural Text
I'd like to point to a function that does nothing:my use case is something like thisOf course, I could use the  defined above, but a built-in would certainly run faster (and avoid bugs introduced by my own).Apparently,  and  use  for the identity, but this is specific to their implementations.
Doing some more research, there is none, a feature was asked in issue 1673203 And from Raymond Hettinger said there won't be:Better to let people write their own trivial pass-throughs  and think about the signature and time costs.So a better way to do it is actually (a lambda avoids naming the function):advantage: takes any number of parametersdisadvantage: the result is a boxed version of the parametersORadvantage: doesn't change the type of the parameterdisadvantage: takes exactly 1 positional parameter
yours will work fine. When the number of parameters is fix you can use an anonymous function like this:
An identity function, as defined in https://en.wikipedia.org/wiki/Identity_function, takes a single argument and returns it unchanged:What you are asking for when you say you want the signature  is not strictly an identity function, as you want it to take multiple arguments. That's fine, but then you hit a problem as Python functions don't return multiple results, so you have to find a way of cramming all of those arguments into one return value.The usual way of returning "multiple values" in Python is to return a tuple of the values - technically that's one return value but it can be used in most contexts as if it were multiple values. But doing that here means you getAnd fixing that problem quickly gives other issues, as the various answers here have shown.So, in summary, there's no identity function defined in Python because:The formal definition (a single argument function) isn't that useful, and is trivial to write.Extending the definition to multiple arguments is not well-defined in general, and you're far better off defining your own version that works the way you need it to for your particular situation.For your precise case,is almost certainly what you want - a function that has the same calling convention and return as , which returns its argument unchanged, and is clearly named to describe what it does and where it's intended to be used. I'd be pretty shocked if performance were a crucial consideration here.
No, there isn't.Note that your :is equivalent to lambda *args: argsWill box its args - i.e. So, you may want to use  if you want a true identity function.
There is no a built-in identity function in Python. An imitation of the Haskell's  function would be:Example usage:Since  does nothing except returning the given arguments, I do not think that it is slower than a native implementation would be. It might even be faster, because it saves a call to a native function.
Stub of a single-argument function (the OP's example use case) accepts a single argument, . If one needs a stub for it, there's no reason to return  instead of  (). Thus both fit perfectly....but a built-in would certainly run faster (and avoid bugs introduced by my own).Bugs in such a trivial case are barely relevant. For an argument of predefined type, say , we can use  itself as an identity function (because of string interning it even retains object identity, see  note below) and compare its performance with the lambda solution:A micro-optimisation is possible. For example, the following Cython code:test.pyxThen:Build-in object identity functionDon't confuse an identity function with the  built-in function which returns the 'identity' of an object (meaning a unique identifier for that particular object rather than that object's value, as compared with  operator), its memory address in CPython.
The thread is pretty old. But still wanted to post this.It is possible to build an identity method for both arguments and objects. In the example below, ObjOut is an identity for ObjIn. All other examples above haven't dealt with dict **kwargs.


Answer URL
https://docs.python.org/3/library/gettext.html#gettext.gettext
https://docs.python.org/3/library/functions.html#id
