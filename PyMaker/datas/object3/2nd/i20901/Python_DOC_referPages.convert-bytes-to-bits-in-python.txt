Natural Text
I am working with Python3.2. I need to take a hex stream as an input and parse it at bit-level. So I used to convert the string to actual bytes. Now how do I convert these bytes to bits?
Another way to do this is by using the  module:And if you need to strip the leading :The  module isn't a requirement, as jcollado's answer shows, but it has lots of performant methods for turning input into bits and manipulating them. You might find this handy (or not), for example:etc.
Operations are much faster when you work at the integer level. In particular, converting to a string as suggested here is really slow.If you want bit 7 and 8 only, use e.g.(this is: shift the byte 6 bits to the right - dropping them. Then keep only the last two bits  is the number with the first two bits set...)These can easily be translated into simple CPU operations that are super fast.
What about something like this?This will convert the hexadecimal string you have to an integer and that integer to a string in which each byte is set to 0/1 depending on the bit-value of the integer.As pointed out by a comment, if you need to get rid of the  prefix, you can do it this way:or this way:
To binary:
I think simplest would be use  here. For example you can read a file as bytes and then expand it to bits easily like this:
Use  when reading reading bytes:OrUsing :
Here how to do it using   It is important the 08b . That means it will be a maximum of 8 leading zeros be appended to complete a byte. If you don't specify this then the format will just have a variable bit length for each converted byte.
The other answers here provide the bits in big-endian order ( becomes )In case you're interested in little-endian order of bits, which is useful in many cases, like common representations of bignums etc -here's a snippet for that:And for the other direction:
using python format string syntaxThe second line is where the magic happens. All byte objects have a  function, which returns a hex string. Using this hex string, we convert it to an integer, telling the  function that it's a base 16 string (because hex is base 16). Then we apply formatting to that integer so it displays as a binary string. The  is where the real magic happens. It is using the Format Specification Mini-Language . Specifically it's using the  and the  parts of the format_spec syntax. The  sets  to 8, which is how we get the nice 0000 padding, and the  sets the type to binary.I prefer this method over the  method because using a format string gives a lot more flexibility.


Answer URL
https://docs.python.org/3/library/string.html#format-string-syntax
https://docs.python.org/3/library/string.html#format-specification-mini-language
