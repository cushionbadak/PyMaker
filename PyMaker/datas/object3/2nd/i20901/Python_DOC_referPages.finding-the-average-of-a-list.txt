Natural Text
I have to find the average of a list in Python. This is my code so farI've got it so it adds together the values in the list, but I don't know how to make it divide into them?
If your reduce is already returning your sum, then all you have left to do is divide.though  would be simpler, as you wouldn't need a lambda.If you want a more exact float result instead of an int then just use  instead of .

Or you could use numpy.mean:
A statistics module has been added to python 3.4. It has a function to calculate the average called mean. An example with the list you provided would be:
Why would you use  for this when Python has a perfectly cromulent  function?(The  is necessary to force Python to do a floating-point division.)
There is a statistics library if you are using python >= 3.4https://docs.python.org/3/library/statistics.htmlYou may use it's mean method like this. Let's say you have a list of numbers of which you want to find mean:-It has other methods too like stdev, variance, mode, harmonic mean, median etc which are too useful.
Instead of casting to float, you can add 0.0 to the sum:
 is the right answer, but just for completeness you can compute an average with a single reduce:Note that this can result in a slight rounding error:
I tried using the options above but didn't work.Try this: worked on python 3.5
I had a similar question to solve in a Udacity´s problems. Instead of a built-in function i coded:Much more longer than usual but for a beginner its quite challenging.
If you wanted to get more than just the mean (aka average) you might check out scipy stats
Or use 's  method:Demo:From the docs:¶And here is the docs for this:https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.mean.htmlAnd the whole documentation:https://pandas.pydata.org/pandas-docs/stable/10min.html
In order to use  for taking a running average, you'll need to track the total but also the total number of elements seen so far.  since that's not a trivial element in the list, you'll also have to pass  an extra argument to fold into.  
Both can give you close to similar values on an integer or at least 10 decimal values. But if you are really considering long floating values both can be different. Approach can vary on what you want to achieve.Floating values@Andrew Clark was correct on his statement.
suppose thatyou can notice that  has dimension 3*10 if you need to get the  to each row you can type thisdon't forget to 
as a beginner, I just coded this:

or like posted previouslyThe 1.0 is to make sure you get a floating point division
Combining a couple of the above answers, I've come up with the following which works with reduce and doesn't assume you have  available inside the reducing function:
I want to add just another approach



Answer URL
https://docs.python.org/3/library/statistics.html
