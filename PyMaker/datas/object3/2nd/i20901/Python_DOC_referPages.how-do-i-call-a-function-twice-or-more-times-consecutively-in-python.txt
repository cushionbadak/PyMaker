Natural Text
Is there a short way to call a function twice or more consecutively in  python? For example:maybe like :
I would:The  is convention for a variable whose value you don't care about.You might also see some people write:however that is slightly more expensive because it creates a list containing the return values of each invocation of  (even if it's ), and then throws away the resulting list. I wouldn't suggest using this unless you are using the list of return values.
You could define a function that repeats the passed function N times. If you want to make it even more flexible, you can even pass arguments to the function being repeated:Usage:
A simple for loop?Or, if you're interested in the results and want to collect them, with the bonus of being a 1 liner:
My two cents:
Three more ways of doing so:(I) I think using  may also be an option, though is requires generation of an additional list with s in some cases and always needs a list of arguments:(II)  contain functions which can be used used to iterate through other functions as well https://docs.python.org/2/library/itertools.html(III) Using lists of functions was not mentioned so far I think (and it is actually the closest in syntax to the one originally discussed) :Or as a one liner:
Here is an approach that doesn't require the use of a  loop or defining an intermediate function or lambda function (and is also a one-liner). The method combines the following two ideas:calling the  built-in function with the optional sentinel argument, andusing the  recipe for  advancing an iterator  steps (see the recipe for ).Putting these together, we get:(The idea to pass  as the sentinel comes from this accepted Stack Overflow answer.)And here is what this looks like from the interactive prompt:
See the repeatfunc recipe from the itertools module that is actually much more powerful. If you need to just call the method but don't care about the return values you can use it in a for loop:but that's getting ugly.
You may try while loop as shown below;Thus make call the do1 function 5 times.


Answer URL
https://docs.python.org/3/library/functions.html#iter
https://docs.python.org/3/library/itertools.html#itertools-recipes
