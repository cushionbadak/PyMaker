Natural Text
I have a Python codebase, built for Python 3, which uses Python 3 style open() with encoding parameter:https://github.com/miohtama/vvv/blob/master/vvv/textlineplugin.py#L47Now I'd like to backport this code to Python 2.x, so that I would have a codebase which works with Python 2 and Python 3.What's the recommended strategy to work around  differences and lack of encoding parameter?Could I have a Python 3  style file handler which streams bytestrings, so it would act like Python 2 ?
1. To get an encoding parameter in Python 2:If you only need to support Python 2.6 and 2.7 you can use  instead of .  is the new io subsystem for Python 3, and it exists in Python 2,6 ans 2.7 as well. Please be aware that in Python 2.6 (as well as 3.0) it's implemented purely in python and very slow, so if you need speed in reading files, it's not a good option.If you need speed, or you need to support Python 2.5 or earlier, you can use  instead. It also has an encoding parameter, and is quite similar to  except it handles line-endings differently.2. To get a Python 3  style file handler which streams bytestrings:Note the 'b', meaning 'binary'.
I think should do.
Here's one way:
This may do the trick:Then you can keep you code in the python3 way.Note that some APIs like , ,  do not work


Answer URL
https://docs.python.org/3/library/functions.html#open
https://docs.python.org/3/howto/pyporting.html
https://docs.python.org/3/library/io.html?highlight=io#io.open
