Natural Text
I am using Django which allows people to add extra parameters to a class by using .The only thing I found in Python's documentation was:However, I don't think this is the same thing.
You are asking a question about two different things: inner class in Django models:This is just a class container with some options (metadata) attached to the model. It defines such things as available permissions, associated database table name, whether the model is abstract or not, singular and plural versions of the name etc.Short explanation is here: Django docs: Models: Meta optionsList of available meta options is here: Django docs: Model Meta optionsMetaclass in Python:The best description is here: What is a metaclass in Python?
Extending on Tadeck's Django answer above, the use of 'class Meta:' in Django is just normal Python too.The internal class is a convenient namespace for shared data among the class instances (hence the name Meta for 'metadata' but you can call it anything you like). While in Django it's generally read-only configuration stuff, there is nothing to stop you changing it:You can explore it in Django directly too e.g:However, in Django you are more likely to want to explore the  attribute which is an  object created by the model  when a model is created. That is where you'll find all of the Django class 'meta' information. In Django,  is just used to pass information into the process of creating the   object.
Django's  class specifically handles having an attribute named  which is a class. It's not a general Python thing.Python metaclasses are completely different.
Answers that claim Django model's  and metaclasses are "completely different" are misleading answers.The construction of Django model class objects (that is to say the object that stands for the class definition itself; yes, classes are also objects) are indeed controlled by a metaclass called , you can see that code here:https://github.com/django/django/blob/master/django/db/models/base.py#L61And one of the things that  does is to create the  attribute on every Django model which contains validation machinery, field details, saving machinery and so forth. And, during this operation, anything that is specified in the model's inner  class is read and used within that process.So, while yes, in a sense  and metaclasses are different 'things', within the mechanics of Django model construction they are intimately related; understanding how they work together will deepen your insight into both at once.This might be a helpful source of information to better understand how Django models employ metaclasses.https://code.djangoproject.com/wiki/DevModelCreationAnd this might help too if you want to better understand how objects work in general.https://docs.python.org/3/reference/datamodel.html
Inner Meta Class DocumentThis document of djangoModel metadata is “anything that’s not a field”, such as ordering options (ordering), database table name (db_table), or human-readable singular and plural names (verbose_name and verbose_name_plural). None are required, and adding class Meta to a model is completely optional.https://docs.djangoproject.com/en/dev/topics/db/models/#meta-options


Answer URL
https://docs.python.org/3/reference/datamodel.html
