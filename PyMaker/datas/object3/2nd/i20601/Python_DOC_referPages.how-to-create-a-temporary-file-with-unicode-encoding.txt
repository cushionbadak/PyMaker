Natural Text
When I use  to open a file, I am not able to write unicode strings. I have learned that I need to use  and open the file with Unicode encoding (see http://docs.python.org/howto/unicode.html#reading-and-writing-unicode-data).Now I need to create some temporary files. I tried to use the  library, but it doesn't have any encoding option. When I try to write any unicode string in a temporary file with , it fails:How can I create a temporary file with Unicode encoding in Python?Edit:I am using Linux and the error message that I get for this code is:This is just an example. In practice I am trying to write a string that some API returned.
Everyone else's answers are correct, I just want to clarify what's going on:The difference between the literal  and the literal  is that the former is a string of bytes and the latter is the Unicode object.First, understand that Unicode is the character set. UTF-8 is the encoding. The Unicode object is the about the former—it's a Unicode string, not necessarily a UTF-8 one. In your case, the encoding for a string literal will be UTF-8, because you specified it in the first lines of the file.To get a Unicode string from a byte string, you call the  method:Similarly, you could call your string.encode in the  call and achieve the same effect as just removing the .  If you didn't specify the encoding in the top, say if you were reading the Unicode data from another file, you would specify what encoding it was in before it reached a Python string.  This would determine how it would be represented in bytes (i.e., the  type).  The error you're getting, then, is only because the  module is expecting a  object.  This doesn't mean it can't handle unicode, just that it expects you to pass in a byte string rather than a Unicode object—because without you specifying an encoding, it wouldn't know how to write it to the temp file.
tempfile.TemporaryFile has encoding option in Python 3:Note that now you need to specify mode='w+' instead of the default binary mode. Also note that string literals are implicitly Unicode in Python 3, there's no u modifier.If you're stuck with Python 2.6, temporary files are always binary, and you need to encode the Unicode string before writing it to the file:Unicode specifies the character set, not the encoding, so in either case you need a way to specify how to encode the Unicode characters!
I have figured out one solution: create a temporary file that is not automatically deleted with , close it and open it again using :
Since I am working on a Python program with TemporaryFile objects that should run in both Python 2 and Python 3, I don't find it satisfactory to manually encode all strings written as UTF-8 like the other answers suggest.Instead, I have written the following small polyfill (because I could not find something like it in six) to wrap a binary file-like object into a UTF-8 file-like object:It is used in the following way:
You are trying to write a unicode object  to the temporary file where you should use an encoded string .  You don't have to explicitly pass an  parameter, because you've already stated the encoding in line two .  Just use  instead of  and you should be fine.
Dropping the u made your code work for me:I guess it's because it's already unicode.
Setting the sys as default encoding to UTF-8 will fix the encoding issue


Answer URL
https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile
