Natural Text
Trying to use a format specifier to print a float that will be less than 1 without the leading zero. I came up with a bit of a hack but I assume there is a way to just drop the leading zero in the format specifier. I couldn't find it in the docs.IssueHack
You may use the following  class instead of the builtin  class.Using this class you'll have to use  function instead of the modulus operator () for formatting. Following are some examples:If you also want to make the modulus operator () of  class to behave the same way then you'll have to override the  method of  class by subclassing the class. But it won't be as easy as overriding the  method of  class, as in that case the formatted float number could be present at any position in the resultant string.[Note: All the above code is written in Python3. You'll also have to override  in Python2 and also have to change the  calls.]P.S.: You may also override  method similar to , if you also want to change the official string representation of .Edit: Actually you can add new syntax to format sting using  method. So, if you want to keep both behaviours, i.e. show leading zero when needed and don't show leading zero when not needed. You may create the  class as follows:And use this class as follows:Note that using 'fz' instead of 'f' removes the leading zero.Also, the above code works in both Python2 and Python3.
Here is another way:It is slightly more general than  in that it also works with numbers >=1.Neither method correctly handles negative numbers, however. The following is better in this respect:Not particularly elegant, but right now I can't think of a better method.
As much as I like cute regex tricks, I think a straightforward function is the best way to do this:This has the benefit of being easy to understand, partially because  is a simple string match rather than a regex.
One viable option which works without regex and with negative numbers greater than 10
I'd rather go for readable and simple than anything else: Let's handle the sign and the numerics independently. And a little in-line if statement never hurt anyone.
This is short, simple and I can't find a scenario for which it doesn't work.Examples:Edit:If you are only considering numbers > -10 and < 10 The following will work:
Use , after using string formatting to convert to a string: can be used to remove any of the leading characters of a string:From the docs:string.lstrip(s[, chars])        Return a copy of the string with leading characters removed
Since we're only considering > -1 to < 1 then the following edit will work.This will maintain the sign, only removing the digit to the left of the decimal.
I am surprised nobody suggested a more mathematical way to do it:Looks much nicer to me. :)But interestingly yours is the fastest.
Python's standard lib's str.format() can be used to generate the string conversion of the float value.  Then the string can be manipulated to form a final result for either a positive or negative number.
For Python 3When you want something simple and don't need negative number support:There are other solutions when you need negative number support, including the excellent regex by @nettux443. 


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__repr__
