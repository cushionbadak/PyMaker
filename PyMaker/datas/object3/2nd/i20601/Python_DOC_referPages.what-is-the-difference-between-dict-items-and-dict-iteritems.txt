Natural Text
Are there any applicable differences between  and ?From the Python docs:: Return a copy of the dictionary’s list of (key, value) pairs.: Return an iterator over the dictionary’s (key, value) pairs.If I run the code below, each seems to return a reference to the same object. Are there any subtle differences that I am missing?Output:
It's part of an evolution. Originally, Python  built a real list of tuples and returned that. That could potentially take a lot of extra memory. Then, generators were introduced to the language in general, and that method was reimplemented as an iterator-generator method named . The original remains for backwards compatibility. One of Python 3’s changes is that   now return iterators, and a list is never fully built. The  method is also gone, since  in Python 3 works like  in Python 2.7. 
 returns a list of 2-tuples (), whereas  is a generator that yields 2-tuples. The former takes more space and time initially, but accessing each element is fast, whereas the second takes less space and time initially, but a bit more time in generating each element.
In Py2.xThe commands ,  and  return a copy of the dictionary's list of  pair, keys and values.This could take a lot of memory if the copied list is very large.The commands ,  and  return an iterator over the dictionary’s  pair, keys and values.The commands ,  and  return the view objects, which can reflect the dictionary's changes.(I.e. if you  an item or add a  pair in the dictionary, the view object can automatically change at the same time.)While in Py3.xIn Py3.x, things are more clean, since there are only ,  and  available, which return the view objects just as  in Py2.x did. ButJust as @lvc noted, view object isn't the same as iterator, so if you want to return an iterator in Py3.x, you could use  :
You asked: 'Are there any applicable differences between dict.items() and dict.iteritems()'This may help (for Python 2.x):You can see that  returns a list of tuples of the key, value pairs and  returns a dictionary-itemiterator.As a list, d.items() is slice-able:But would not have an  method:As an iterator, d.iteritems() is not slice-able:But does have :So the items themselves are same -- the container delivering the items are different. One is a list, the other an iterator (depending on the Python version...) So the applicable differences between dict.items() and dict.iteritems() are the same as the applicable differences between a list and an iterator. 
 return list of tuples, and  return iterator object of tuple in dictionary as . The tuples are the same, but container is different.  basically copies all dictionary into list. Try using following code to compare the execution times of the  and . You will see the difference.Output in my machine:This clearly shows that  is much more efficient.
If you have In Python 2,  copies each tuples and returns the list of tuples in dictionary i.e. . Implications are that the whole dictionary is copied to new list containing tuples returns the dictionary item iterator. The value of the item returned is also the same i.e. , but this is not a list. This is only dictionary item iterator object. That means less memory usage (50% less).Lists as mutable snapshots:  Iterator objects: The tuples are the same. You compared tuples in each so you get same.In Python 3,  returns iterator object. dict.iteritems() is removed so there is no more issue.
: gives you an iterator. You may use the iterator in other patterns outside of the loop.
If you want a way to iterate the item pairs of a dictionary that works with both Python 2 and 3, try something like this:Use it like this:
 is gone in Python3.x So use  to get the same output and memory alocation
dict.iteritems() in python 2 is equivalent to dict.items() in python 3.


Answer URL
https://docs.python.org/3/whatsnew/3.0.html#views-and-iterators-instead-of-lists
