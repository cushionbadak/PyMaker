Natural Text
I'm trying to set a umask using the os module. Please note my normal umask set in my ~/.profile is umask 0027.In a bash shell,will allow a file to be created with permissionsHowever, when us import the os module and do this:I get permissions ofFirst, how do I make os.umask(mask) behave like umask in the shell?Second, what is the logic between the difference of the two?Note: I tried converting the 0022 to decimal in case it is expecting a decimal by doing:but it gave permissions ofAlso note, I triedandWhich didn't work either.
Misunderstanding of umask, I think.The umask sets the default denials, not the default permissions.Soshould indeed produce files as follows:The umask 022 removes write access for group and others, which is exactly the behaviour we see there.I find it helps to go back to the binary that the octal numbers represent:The program is behaving as you asked it to, not necessarily as you thought it should. Common situation, that, with computers :-)
You'll probably need to show us the code that constitutes:The code you have works fine on my system:producing files as follows:You should also note the restoration of the old  value which minimises the impact of changing it to the local operation.As you can see from the results above, you also need to be aware that the  value is "subtracted" from the mode you're using to create the file and we don't know what that mode is in your particular case.That's evident even in your  sample since a  value of  when creating a file of mode  would result in , not  as you have it.Based on your comments below where you indicate you're using  rather than , a cursory glance of the Python source seems to indicate that this translates to a C  call which uses  as the initial mode. This is supported by the slightly modified code:which gives us:So I'm not entirely certain why you're getting  permissions in your case.It would be worth seeing what the results are when you run that above program in your environment. If it's the same as I get then the problem may well lie somewhere else.
Being picky/careful, and Python 3k-compatible, here is my slightly different answer (that still doesn't explain what the OP's original issue was):
Even though this would seem to be a straight system call, in this case it does seems to matter what Python version you are using:It appears that os.open handles the pre-existing umask differently in Python 2.x and Python 3.x, possibly because 2.x is closer to the OS and 3.x does a bit more abstraction.https://docs.python.org/2/library/os.html"The default mode is 0777 (octal), and the current umask value is first masked out."There is no similar statement in https://docs.python.org/3/library/os.html


Answer URL
https://docs.python.org/3/library/os.html
