Natural Text
So I have a list containing a number of instances of a class.As time moves forward, I would like, at each step, to call the  method of the class.So far, I have what's below. But is there a better or more Pythonic way of achieving the  block?Thanks!
No, what you have is perfectly reasonable and Pythonic. The list comprehension syntax:Saves you one line, but using list comprehensions for side effects is generally considered bad style.
No, what you have is perfectly fine.Using a list comprehension or map here would make your code less clear and harder to read. I would strongly recommend against doing either.A list comprehension is designed to create a list. Where you want to make a loop, use a loop.Even if you did need to optimise this (and it's highly unlikely that using a list comp or map would be an effective optimisation anyway) then do it when you have proof it's a bottleneck. Readability comes first, optimise only where you have to.
There's also the  builtin function which does basically the same thing as the list comprehension:but most consider list comprehensions to be more "pythonic".  Additionally, any reservations people have about using list comprehensions for side-effects can probably be applied to  as well.  The only reason I bring it up is because the  module has a  class which has a map method to do the computation in parallel, and works basically the same as the builtin  ( http://docs.python.org/library/multiprocessing.html ).  If the run method takes a while to complete, and each one is independent of the others, it might be worthwhile.EDIT As stated in the comments, you can do this faster (removing the ) using the operator module.  However, the point is (and remains) that you can use  or  almost interchangeably and pick up a performance boost in a lot of applications with the latter.
For python 3, you cannot simply use map, as you have to deal with it being a generator.Alternatively, you could create a dummy function, and use the  operator:As others have pointed out, none of these are very pretty to read.  Stick to what you have, so that people can read it.EDIT: Improved exhaust function, thanks wim.  


Answer URL
