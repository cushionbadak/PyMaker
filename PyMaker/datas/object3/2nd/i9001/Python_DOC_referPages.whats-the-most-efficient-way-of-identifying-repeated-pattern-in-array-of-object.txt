Natural Text
I have two arrays of 5 objectsa = ['a', 'b', 'c', 'd', 'e', 'f', 'e', 'f']b = ['a', 'b', 'd', 'f', 'e', 'f']I would like to identify the repeated patterns of more than one object and their occurrences like ['a', 'b']: 2 ['e', 'f']: 3['f', 'e', 'f']: 2The first sequence ['a', 'b'] appeared once in a and once in b, so total count 2. The 2nd sequence ['e', 'f'] appeared twice in a, once in b, so total 3. The 3rd sequence ['f', 'e', 'f'] appeared once in a, and once in b, so total 2. Is there a good way to do this in Python?Also the universe of objects is limited. Was wondering if there's an efficient solution that utilizes hash table?
If the approach is only for two lists, the following approach should work. I am not sure if this is the most efficient solution though.A nice description of find n-grams is given in this blog post.This approach provides the min length and determines the max length that a repeating sequence of a list might have (at most half the length of the list). We then find all the sequences for each of the lists by combining the sequences for individual lists. Then we have a counter of every sequence and its count.Finally we return a dictionary of all the sequences that occur more than once.Do let me know if you are unsure about anything.
When you mentioned that you were looking for an efficient solution, my first thought was of the approaches to solving the longest common subsequence problem. But in your case, we actually do need to enumerate all common subsequences so that we can count them, so a dynamic programming solution will not do. Here's my solution. It's certainly shorter than SSSINISTER's solution (mostly because I use the  class).Resulting in ...The advantage to using  is that not only do you not need to produce the actual code to iterate and count, you get access to all of the  methods as well as a few specialized methods for using those counts.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
