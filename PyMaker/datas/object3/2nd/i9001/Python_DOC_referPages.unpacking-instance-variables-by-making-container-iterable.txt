Natural Text
I just want to be able to unpack the instance variables of class foo, for example:I am not sure as to which is the correct method for doing so when implementing my own  method, however, the latter is the one that has worked with mixed "success".  I say mixed because doing so with the presented code appears to alter the original instance object , such that it is no longer valid. I have read the myriad posts on this site regarding , , generators etc., and also a python book and docs.python.org and seem unable to figure what I am not understanding. I've gathered that  needs to return an iterable (which can be just be , but I am not sure how that works for what I want). I've also tried various ways of playing around with implementing  and iterating over , either by casting to a list or as a dictionary, with no success. I don't believe this is a duplicate post on account that the only similar questions I've seen present a single list sequence object attribute or employ a range of numbers instead of a four non-container variables.
If you want the instance's variables, you should access them with :with this change, will get you the variables. You could go to the more risky method of using  or , sort it by the variables name (and that's why it is also a limited one, the variables are saved in no-order), and extract the second element of each tuple. But I would say the iterator is definitely better.
You can store the arguments in an attribute ( below) or return them on function call:


Answer URL
https://docs.python.org/3/library/collections.abc.html
