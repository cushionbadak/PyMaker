Natural Text
I have a list of lists, which looks likeI want to count the number of lists which have a particular element. For Example, my output should be As you can see, I don't need the total count of an element. In the case of , though its total count is 5, the output is 3 as it occurs only in 3 lists.I am using a counter to get the counts. The same can be seen below.So, when I print count, I getI want to know if there's a much better way to accomplish my goal.
Use a  and convert each list to a set. The  will remove any duplicates from each list so that you don't count duplicate values in the same list:If you like functional programming you can also feed a  of -ped  to the :Which is totally equivalent (except maybe being a bit faster) to the first approach.
I would convert each list as a set before counting in a generator comprehension passed to :result:(that's practically what you did, but the above code shorts a lot of loops and temporary list creations)
You can do it without a , too:Not the most elegant, but should be considerably faster.
A bit of a stylistic difference on the  approach with  may look like DemoRough benchmark
Just convert to , flatten using  and then feed into a . 
This approach calculates the unique entries in  using set comprehension, and then counts occurrences in each list using dictionary comprehensionI'll admit it's a little ugly, but it's a possible solution (and a cool use of dictionary comprehension).You could also make this a one-liner by moving the calculation of  right into the dictionary comprehension
Here is another version using loops:So create an empty dictionary called final. Then loop through each letter of each list. Create a new key and value = 1 if the letter does not yet exist in final as a key. Otherwise add 1 to the value for that key.


Answer URL
https://docs.python.org/3/library/collections.html
https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
