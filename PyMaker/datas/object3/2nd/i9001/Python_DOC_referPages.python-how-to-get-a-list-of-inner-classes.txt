Natural Text
I'm writing a small Python application that contains a few nested classes, like the example below:I'm using nested classes to create some sort of hierarchy and to provide a clean way to implement features for a parser.At some point, I want to create a list of the inner classes. I'd like to have the following output:The question is: What is the recommended method to get a list of inner classes in a pythonic way?
I managed to get a list of inner class objects with the method below:It works, but I'm not sure if using  directly is a good thing to do. I'm using it because it contains the actual  instances that I need and seems to be portable across Python 2 and 3.
First: I can't see how nested classes can be of any use for you. Once you have an instance  of , do you realize that  and  will be the same object for all instances? That is - you can't record any attribute specific from  on , like  - or it will collide with an attribute from another instance .To overcome this, and actually, the only thing that makes sense, you'd need to have instances of  and  attached to the instance . These instances usually can't be declared on the class body - you have to create them on your Foo's  method.The only thing that Bar and AntherBar can do doing there is: (1) to have a lot of class and static methods, then they work as namespaces only.  Or, if a metaclass for  or themselves implement the descriptor protocol - https://docs.python.org/3/reference/datamodel.html#implementing-descriptors  - but them, you'd be much better if  itself would implement the descriptor prootocol (by having either  or  methods), and attached to Foo's body you'd have instances  of these classes, not the classes themselves.That said, you came with the solution of using  to getting the inner classes: that won't work if  itself inherit from other classes that also have nested classes. The Superclasses of  are never searched. You can have a method to either look on all classes on  Foo's , or simply use   and  :(If you want this to work to all classes like Foo that does not share a common base, the same code will work if it is nto declared as a class method, of course - and also,  can be a parameter to this function, if you have more than one nested-class hierarchy.) Now you have this, we urge you to ask other questions saying what do you want to actually do - and to read about "descriptors" - and even "properties". Really: there is very little use one can think of to nested subclasses. 


Answer URL
https://docs.python.org/3/reference/datamodel.html#implementing-descriptors
