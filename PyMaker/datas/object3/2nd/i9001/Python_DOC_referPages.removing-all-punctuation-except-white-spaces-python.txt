Natural Text
It seems like there should be a simpler way than:Is there?
From an efficiency perspective, you're not going to beat For higher versions of Python use the following code:It's performing raw string operations in C with a lookup table - there's not much that will beat that but writing your own C code.If speed isn't a worry, another option though is:This is faster than s.replace with each char, but won't perform as well as non-pure python approaches such as regexes or string.translate, as you can see from the below timings.  For this type of problem, doing it at as low a level as possible pays off.Timing code:This gives the following results:
Regular expressions are simple enough, if you know them. In above code, we are substituting(re.sub) all NON[alphanumeric characters(\w) and spaces(\s)] with empty string.Hence . and ? punctuation won't be present in variable 's' after running s variable through regex.
For the convenience of usage, I sum up the note of striping punctuation from a string in both Python 2 and Python 3. Please refer to other answers for the detailed description.Python 2Python 3

I usually use something like this:
 is ASCII only! A more correct (but also much slower) way is to use the unicodedata module:
Not necessarily simpler, but a different way, if you are more familiar with the re family. 
For Python 3  or Python 2  values,  only takes a dictionary; codepoints (integers) are looked up in that mapping and anything mapped to  is removed.To remove (some?) punctuation then, use:The  class method makes it trivial to create the mapping, setting all values to  based on the sequence of keys.To remove all punctuation, not just ASCII punctuation, your table needs to be a little bigger; see J.F. Sebastian's answer (Python 3 version):
 misses loads of punctuation marks that are commonly used in the real world. How about a solution that works for non-ASCII punctuation?Personally, I believe this is the best way to remove punctuation from a string in Python because:It removes all Unicode punctuationIt's easily modifiable, e.g. you can remove the  if you want to remove punctuation, but keep symbols like .You can get really specific about what you want to keep and what you want to remove, for example  will only remove dashes.This regex also normalizes whitespace. It maps tabs, carriage returns, and other oddities to nice, single spaces.This uses Unicode character properties, which you can read more about on Wikipedia.
This might not be the best solution however this is how I did it.
Here is a function I wrote. It's not very efficient, but it is simple and you can add or remove any punctuation that you desire:
Here's a one-liner for Python 3.5:
I haven't seen this answer yet. Just use a regex; it removes all characters besides word characters () and number characters (), followed by a whitespace character ():
Here's a solution without regex.Replaces the punctuations with spaces Replace multiple spaces in between words with a single space Remove the trailing spaces, if any withstrip()
Just as an update, I rewrote the @Brian example in Python 3 and made changes to it to move regex compile step inside of the function. My thought here was to time every single step needed to make the function work. Perhaps you are using distributed computing and can't have regex object shared between your workers and need to have  step at each worker. Also, I was curious to time two different implementations of maketrans for Python 3vs Plus I added another method to use set, where I take advantage of intersection function to reduce number of iterations.This is the complete code:This is my results:


A one-liner might be helpful in not very strict cases:
Do search and replace using the regex functions, as seen here.. If you have to repeatedly perform the operation, you can keep a compiled copy of the regex pattern (your punctuation) around, which will speed things up a bit.


Remove stop words from the text file using Python 
This is how to change our documents to uppercase or lower case.
I like to use a function like this:


Answer URL
https://docs.python.org/3/library/re.html
