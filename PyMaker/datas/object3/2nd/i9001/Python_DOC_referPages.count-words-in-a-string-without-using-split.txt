Natural Text
I have a problem on which I am working where I need to count the number of words in a string without using the  function in Python.I thought of an approach where I can take a variable  and increment it every time there's an empty space in the string, but it doesn't seems to work as it always gave a count less than the actual count.I know it's a simple question but I am struggling to understand what else I can keep into account to make sure I get the right count.The second approach I was thinking of involves too much for loop and array creation and then back string conversion.Can anyone point me to a simpler approach, where I don't increase the time complexity for this.
Counting the number of spaces is a good approach and works most of the time. Of course you have to add 1 to get the correct number of words.However, since you seem to be concerned about poorly formatted strings, you have to consider multiple whitespaces, whitespaces at the beginning and the end as well as punctuation.If you do not want to use regular expressions (as in Ezsrac's answer), here is an alternative that considers combinations of characters, numbers and the underscore as word, just like  does. It simply counts all transitions between word characters and non-word characters. The end requires special attention to consider non-word characters at the end (for example  vs. ).Here are some test cases:If you also want to include other characters you can simply extend the  function, but be aware that it is not possible to consider all corner cases without using very advanced techniques. For example, consider  vs. . It is not possible for such a simple program to recognize that the first one is a compound adjective while the second one consists of two sentences which are poorly linked.
You could also use , grouping by whether the characters are alpha-numeric or not, and summing all the values ( equaling ).
The simplest finite automata with states -  inside a word or outside. Pseudocode:
if you really don't want to use split you could try regex:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
