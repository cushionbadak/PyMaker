Natural Text
When designing a class, I find that in the class methods, there are repeated steps are called each time when invoke the class method. For example:And there are many methods require the similar steps to 'plug' and 'unplug' the 'probe'. In this design we need to 'plug' and 'unplug' the 'probe' each time we perform the actions.Thus I am thinking about the wrap those functions by decorator to make the code looking less repeated.But this strategy is not working. How could I use a method in the class to decorate other methods to perform such actions before and after calling a method?
You should define your decorator function outside of the class body and your decorator function should return the wrapped function in order for it to work. Something like:
Seems like a bit of muddled arguments to me:file deco.py, sayCheck:Observe that the decorator function is called at definition time of the to-be-wrapped function, i.e. before the class definition is completed and long before the first instance is created. Therefore you can't reference  in the way you tried.


Answer URL
https://docs.python.org/3/library/functions.html#classmethod
