Natural Text
Right, this is extremely obscure...So on Windows, when you hit control-C to interrupt a console program, this sends a  to the process. You can also do this manually via . In Python,  acts as a wrapper around the C-level , and allows us to send a  to the current process by doing:However, this doesn't just go to the current process â€“ it actually goes to the whole "process group" that this process is a part of.I have a test suite which calls  like you see above, as part of some tests to make sure my program's control-C handling works correctly. When running this test suite on appveyor, though, this causes a problem, because apparently some of appveyor's infrastructure is in the same "progress group" and gets broken.The solution is that we need to spawn the test suite with the  flag set, so that its s don't "leak" to the parent. That's easily done. BUT...If I use  and run the child script using , then it works as expected: the  is confined to the child.If I use  and run the child script using  (i.e., using the python launcher, which is supposed to be equivalent to running  directly), then the  seems not to have any effect: the  affects the parent as well!Here's a minimal sample program that just uses  on itself and then checks that it worked (minor wrinkle:  sets  to be ignored in child processes, so there's a bit of fluff here using  to un-ignore it):https://github.com/njsmith/appveyor-ctrl-c-test/blob/master/a.pyHere's the wrapper script I use to run the above program:https://github.com/njsmith/appveyor-ctrl-c-test/blob/master/run-a.pyIf the wrapper script runs , then everything works. If the wrapper script runs , then the wrapper script receives a .So my question is: what the heck is going on here? What is the  launcher doing differently from  that causes the  to "leak" into the parent process, even though it's in a different process group? And how is that even possible?(I originally discovered this because running  acts like , i.e. is broken, but  works, presumably because the  entry point uses the  launcher.)
Every process is in a process group. It either inherits its parent's group, or it gets created as the leader of a new group via the  creation flag. As far as I know,  is the only API that uses process groups, and there's no API to query the process group ID. You could grab it from the  in the PEB, but that involves using undocumented internal structures. No one should do that, so  should only send to either group 0 to broadcast an event or to a child process that you know was created as a new group.The problem that you've uncovered here is that sending an event to a process that's attached to the console but not the leader of a group gets silently handled as if the target were group 0. Specifically in your case you're starting py.exe as the group leader and then trying to send  to python.exe, i.e. . You'd have to send to  in this case. This problem is common with Python scripts on Windows because of the confusing implementation of . It conflates process IDs and process group IDs. It would have been less confusing had  been used for   (currently not implemented on Windows) and  alone used for . Experiencing random hangs when calling   may be due to a race condition.  is implemented by  in Modules/timemodule.c. On Windows, when called in the main thread, it waits on an event that gets set by the signal handler for  (but not  for some reason). The possible race here is that  resets the event before waiting on it. The signal handler executes on a new thread, and occasionally it may have already set the event before  resets it. This is conceivable since executing CPython bytecode is relatively slow. That said, I'd expect it to be a close race because there are a lot of steps involved to create the control handler thread, as the following overview shows for Windows 10.If the race condition is the problem, then giving  enough time to reset the event before  gets called should resolve it. Try calling  using a  with a small delay. 


Answer URL
https://docs.python.org/3/using/windows.html#python-launcher-for-windows
https://docs.python.org/3/using/windows.html#shebang-lines
