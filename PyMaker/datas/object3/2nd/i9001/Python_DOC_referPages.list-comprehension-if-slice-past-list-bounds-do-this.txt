Natural Text
I am fairly new to python and am using a list comprehension in the following snippet:The snippet loops through the  and adds up to 16 elements to s in a formatted manner, then adds 16 to the offset value to obtain the next 16 until all elements are seen. This works in my unsimplified code, but I'd like to impose a placeholder for when the slice exceeds the list size, instead of having it just stop adding elements to . I know I can do this with a full for loop but would like to try and do this in comprehension for the sake of keeping this concise to one line. I imagine I would need an  in the comprehension but cannot seem to figure out what conditions are needed.
You can dynamically pad the sliced chunk to a fixed size. For example:For example with fixed size of 4, this code:Yields:
Concatenate your slice with a  list containing  placeholders - thus when the slice is over, the placeholders will be fetched, and add to the loop a secondary iterator with the final size you want (a  will do), to limit the yielded items from the first part:
The easiest way would be to use some sort of  that gives you the blocks. The -module presents such a function:And with that function you can do it like this:yielding this output:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
