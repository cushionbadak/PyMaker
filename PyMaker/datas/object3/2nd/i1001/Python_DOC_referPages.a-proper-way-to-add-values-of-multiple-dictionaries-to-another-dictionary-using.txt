Natural Text
I want to add 3 different  of 3 different dictionaries to 1 "all_in_one" dictionary based on the same .I have 3 big dictionaries based on the same text corpora (each of the files in it contains the  from the same line -- multiple lines, actually -- of these files, but different columns of them). All 3 dictionaries have the same .They look like this:I want to add these values to another dictionary to have it look like this:I have such a loop:The problem is, it works (don't know if it's fine), but with small amount of files. I have 500k files. Haven't tried to run it with the final corpora, because even the first try with 100 files took a few hours and haven't finished (100 files = 6500 tokens, so I assume it's 6500^3 loops...). I've only tested it with 10 and 20 files.Is it even a proper loop for doing this (adding values of 3 dics into another dic)? If yes (I doubt, based on the time needed), maybe there's a way to optimize it?
My answer assumes that all three dictionaries have equal and exact same keys. In that case, I don't think you need 3 for loops here. You just need a single for loop. Since the keys are the same, and you only need to club together the values of same keys, you can simply loop over any one of the dictionary's keys and do
Since keys are identical across all dictionaries, you can use a dictionary comprehension iterating over the keys of any one of those dictionaries. To reduce repeated logic, you can use :Other alternatives include defining a list explicitly or using a list comprehension:
If the keys between all three dictionaries are not the same, you can use a  here:Additionally, You can condense the above with  as well:You can also extract the same keys with set intersection:Which also prevents  from being raised if the dictionaries for some reason don't have the same keys. 


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/itertools.html#itertools.chain
