Natural Text
Given an integer total calculate number of possible ways to represent total.Sum required is 5 while integers can be considered as [1,2,3]The 5 ways to target sum are:Input is 5, 3, where 3 is the range[1,2,3] to reach total 5Output is 5
Because your question only requires the number of possibilities and not the possibilities themselves, this is one of the fastest ways to do it:Here,  is the number you are trying to partition and  is the limit on the largest number. It handles even very large numbers very quickly:
I don't think using  will work here- the function returns combinations of the array you pass it, but does not create duplicates of any given element. You could get around this by using a variant , but even then you'll end up with an excess of invalid combinations, and for lengthy lists the runtime would become intractable. Instead, consider a recursive solution like the following.Here I take a target sum and a list of numbers, and try subtracting out each number from the target. If the difference exactly equals 0, I add that last value to the list. If its great than zero, I keep attempting to add elements to the list by calling  with the new target value, and a subset of the original numbers which prevents permutations of the same answer. I combine all these, prepend the previously chosen value from the list, and continue in this fashion until a list of all combinations has been built.The result for your example  and -


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
