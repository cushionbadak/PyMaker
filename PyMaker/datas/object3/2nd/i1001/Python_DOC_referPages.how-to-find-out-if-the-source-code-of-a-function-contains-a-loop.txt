Natural Text
Let's say, I have a bunch of functions , , ,  and  and I want to find out if they directly use a loop:I want to write a function  so I can expect these assertions to pass:(I expect  to return  because  uses a list comprehension instead of a loop.)I can't modify , , ,  and . So I thought it might be possible to use  for this and walk along the function's code which I get from . But I'm open to any other proposals, this was only an idea how it could work.This is as far as I've come with :
You need to check if the function's Abstract Syntaxt Tree has any nodes that are an instance of  or  or . You can use  to visit every node of the ASTSee the documentation for ,  was added in 3.5. 
You were almost there! All you had to do was to find out how to get the data from the body objects. They are all attributes after all of some Node type. I just used  to get the children and if any of them are of  or  return a True. Note: I was just tinkering around the code. Not sure if this is documented somewhere and can be relied upon. I guess may be you can look it up? :)
If you are just trying to check if the function body contains the keywords 'for' or 'while', you can do the following:


Answer URL
https://docs.python.org/3/library/ast.html#ast.walk
https://docs.python.org/3/library/ast.html#abstract-grammar
https://docs.python.org/3/whatsnew/3.5.html#pep-492-coroutines-with-async-and-await-syntax
