Natural Text
I'm running a program from the command line. This program prints out some of my CPU's statistics (link to program if anyone's interested: https://github.com/opcm/pcm). The program doesn't exit. It'll print updated stats periodically in the same terminal. I'm trying to use these stats that the program is retrieving in another program that I'm writing myself. The program I'm writing is just supposed to graph some of these CPU statistics vs. time in real time in python. I'm not sure how to retrieve and use the stats being printed to the console in my program in real time. I know I can direct output to a text file instead of to the console by typing . My first thought is to push the outputted statistics to a text file, and simultaneously be reading from that text file in my program. But this feels like a brute force method, and I'm not sure it'll work. Does anyone know how I can use the real-time output from one program in another program? 
You can achieve this result in more than one way.On a unix system the easiest one i believe would be the use of pipesLets say you have program1 (p1) that outputs some data and program2(p2) that reads and use this data.You could pipe the output of p1 to p2 as suggested by @Charles Landau using  which creates a pipe between the stdout and stdin of teh 2 programsIf you want to also visualize the output of p1 you could use  which take the stdin and forks it to the stdout and to a programNow This would work only if you intend to launch p1 and p2 at the same time (at which point a believe it would be better to make it a single program).A more generic use of pipe would be for p1 to create a named pipe (FIFO) and for p2 to read from this pipe:p1.py (server)p2.py (client)You can do some simple testing on FIFO's in linux also using the shellIn a similar manner you could use the TCP protocol for the 2 program to communicateSee python https://docs.python.org/3/library/socket.html for more info on this method
You can make something like tail in python. This is sample of code but can't handle if the file is deleted.
It sounds like you want pipes. Pipes take the standard output of a program and pass it directly to the next. The absolute simplest example I can think of:It's easy to remember because the pipe operator kinda looks like a pipe More about pipes: http://web.cse.ohio-state.edu/~mamrak.1/CIS762/pipes_lab_notes.htmlEdit: using  to read pipes forever is explained well hereThe important pattern to take from this is right there:


Answer URL
https://docs.python.org/3/library/socket.html
