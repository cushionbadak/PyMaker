Natural Text
I want to sort values in a csv file based on timestamp and print it to another file, but for files with many lines python runs out of memory (when the file is being read). Is there something I can do to make this more efficient or should I use something else then csv.DictReader?UPDATE: I have used pandas and divided the large file into smaller chunks that I could sort individually.This currently doesn't solve the issue for wildly misplaced values if I append the files after each other.My algorithm theory (no code) to solve the issue with random values is: Step 1 - divide into smaller chunks where "chunk_size = max lines to handle in memory divided by two"Step 2 - Loop through files in order, merge two files at a time and sort them together, then split them up again so no file is larger than chunk_size. Step 3 - Loop through backwards, merging two files at a time and sorting them, then split up again so no file is larger than chunk_size. Step 4 - Now all wildly misplaced low values should have travelled to the lowest part, and all the wildly misplaced high values should have travelled to the highest part. Append the files in order!Cons; The time complexity for this is not preferable at all, basically O(N^2) if I'm not mistaken
Try pandas csv reader, which is quite efficient. (https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html). You can easily convert between pandas and dictionaries using https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_dict.html
You explained that an in-memory sort wouldn't work for you, as file size exceeds memory size. There are at least two ways out of this. Both rely on doing more file I/O.Compress long records down to a single memory-efficient file offset. Call  as you read each record (or sum the line lengths), and retain just timestamps plus file offsets in memory. Sort the offsets by timestamp. Repeatedly call  as you go through the sorted tuples, do random read of a record, and append that to your output file.A much better approach is to let  do an external mergesort. Windows users can obtain coreutils GNU sort from https://git-scm.com/download/. Use the subprocess module to call it.


Answer URL
https://docs.python.org/3/library/io.html?highlight=tell#io.TextIOBase.seek
https://docs.python.org/3/library/subprocess.html#subprocess.run
