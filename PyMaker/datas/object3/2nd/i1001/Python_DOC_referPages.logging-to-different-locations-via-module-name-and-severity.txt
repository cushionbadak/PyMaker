Natural Text
I have a repository that is best characterized as a specialized application rather than a library.Here's an example structure:I would like to use an instance of  for each module and each standard severity level found in the logging package.  Each  file currently contains just ; for  this would produce .  What I would like to achieve is to set up multiple handlers for each logger:One that pertains to just the respective module, i.e. .  The level of this handler should be NOTSET.Five that pertain to the five logging levels besides , i.e. levels 10 thru 50.  Each of these has the appropriate  to filter only log records of that severity, but the source may come from any logger instance.A picture probably says a lot more:(Yes, I realize this will log messages redundantly.)What is the recommended and efficient way to design such as setup?  It seems like  would be useful, except that gets away from the  calls. If the above is a bit unclear: I have a  instance for each module besides , each of which is created via .  I realize that I can add 5 filehandlers to the root logger, because all of the other loggers inherit from that.  However, is there a more programmatic way to add the "module-level" file handler for each logger?I know that the adding of severity-level handlers could be done like this:But am unsure of how to treat the second part.
My current solution has two parts (still certainly appreciate other approaches):Set up the level-based handlers within , and add them to a parent logger there.  As pointed out by @Sraw, this should be , not the root logger, from which other packages might inherit.Add a helper function  that mimics  within , but also add a file handler specific to the module there.Each module then calls  just as it would normally call , and no additional setup is required.From :From  (similar structure for others):Illustration:


Answer URL
https://docs.python.org/3/library/logging.html#logging-levels
