Natural Text
may I know what is main reason for me to make decision if I should put  as class attribution or not? lets say if I know  is single class and definitely does not have plan to be inherited by any classIs it correct to use as class  does where it does not set any  as class attribute or ?test1.pytest2.py
Neither of these implementations has any real benefit.In test2.py,  is essentially a no-op. It does not change the state of the module. This is completely useless.test1.py doesn't actually behave particularly differently, either. It just sets  as a class attribute, which means that it looks to the class to find  instead of the module. This might perform better in some very heavy load circumstances, but not enough that you should be worried about it unless you already know what you're doing.The fact they invoke , though, suggests to me that the author's (assuming you saw someone doing this in their own code) intention was that  could be temporarily replaced at runtime, like this:To me, this looks like a misguided attempt to enable using a mock or stub for automated tests. They probably intend for it to be used something like this:The standard solution to mocking in Python is the  module (or the  package if using Python 3.2 or older). This module encourages patching to replace dependencies, rather than something manual like the code you presented:test3.pytest3tests.py
Based on the subject did you mean?thisvs. thisIt appears your imports should be at the top of your python file.  So, in that case, Test1 is the correct way to go.In Python, what happens when you import inside of a function?"In general practice, it's probably not that beneficial. In fact, most Python style guides encourage programmers to place all imports at the beginning of the module file."


Answer URL
https://docs.python.org/3/library/unittest.mock.html
