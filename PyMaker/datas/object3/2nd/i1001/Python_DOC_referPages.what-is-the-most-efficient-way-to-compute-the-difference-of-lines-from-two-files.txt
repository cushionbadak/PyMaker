Natural Text
I have two lists in python  and . The  have some images links, and the  too. 99% of the items are the same, but i have to know this 1%. The all surplus items are in , that means all items in  are in . My initial idea is subtract all items:, where the  are my surplus items. My code is:I think the logic is right, if i have some items, the code is run fast. But i dont have 10 items, or 1.000, or even 100.000. I have  items in my  and  in my list . I dont't know the cost of this expression: . But if i execute this code, i think wont finish in this year.My pc have 8GB, and i allocate 15gb for swap to not explode my RAM.My question is, there's another way to make this operation more efficiently(Faster)?The  is ordinate but the  not.Each item have this size: The order doesnt matter, i want know the surplus.
you can create one set of the first file contents, then just use  or  depending on what you call a differenceif  contains more items than  you want to swap them or use  instead, depending on what you need. works but still has to construct a new  internally. Not a great performance gain (see set issubset performance difference depending on the argument type), but it's shorter.
Try using sets:The complexity of subtracting two sets is O(n) in the size of the set a.
To extend the comment of @L3viathanIf order of element is not important set is the rigth way.here a dummy example you can adapt:as you see is pretty straightforward in python.
In case order matters you can presort the lists together with item indices and then iterate over them together:This has time complexity of the sorting algorithm, i.e. O(n*log n).


Answer URL
https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset
