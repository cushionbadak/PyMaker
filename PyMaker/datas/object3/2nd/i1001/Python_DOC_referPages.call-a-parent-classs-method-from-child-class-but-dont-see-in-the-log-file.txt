Natural Text
I would like to call a parent class's method from child class but I don't see the logging entry in the log file when I run the following command:If I call the  method in the  code then I see the logging entry.The following piece of Python code is  file: file: file:Actual result is an empty log file. The question is what should I change on my source code to make the logging function complete?Will be grateful for any help.
You are configuring and re-configuring the  module, and each time you call  you leave the  parameter to  to . See the Dictionary Schema Details section of the documentation: - whether any existing loggers are to be disabled. This setting mirrors the parameter of the same name in . If absent, this parameter defaults to True. This value is ignored if  is True.So each time you call  any  instances are being disabled.Your code works if you only call  once, before you use  to create your single  object. But when you expanded to two modules, your  line imports , executes  and creates a  before control returns to the  module, which then again runs  (the  reference you create in  is otherwise unused anywhere).You only need to configure logging once, preferably as early as possible from the main entry point (the script you run with Python), and if your code has already created  instances you want to continue to use, you either need to set  to True (but understand [that only a subset of your configuration will be applied then), or set  to .Remember that you can always update the dictionary you load from the  file, so you could just use:before you pass  to .I'd use a  guard to ensure that you only configure logging at that point. Don't run top-level code in a module that alters global configuration without such a guard:


Answer URL
https://docs.python.org/3/library/logging.config.html#dictionary-schema-details
https://docs.python.org/3/library/logging.config.html#logging-config-dict-incremental
