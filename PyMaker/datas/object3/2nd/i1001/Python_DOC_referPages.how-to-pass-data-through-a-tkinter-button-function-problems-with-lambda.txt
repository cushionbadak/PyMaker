Natural Text
Start page has two buttons: pull data and plot data in a new frame. figure(f,a) has been defined, but is not included in the section of code below:Button2 launches the function "animate" it takes in an argument(J), pulls data corresponding to J then plots a scatter plot. Button1 then shows the figure in a new frameThe issue: The data I want to get plotted is being correctly executed by animate. I can see the data in the command prompt. The new tkinter window pops up, but without plotting any of the data generated from "animate". If I REMOVE the LAMBDA from Button 2, I see the correct plot in the new frame, but is not how I want to structure the code for the future.  I can not remove lambda because eventually there will be 30 buttons just like Button 2. What is going on with LAMBDA in button 2?
What is going on with LAMBDA in button 2?The command parameter in  expects a references to a function. is syntax to create an anonymous, simple function. It's syntax is virtually identical to a function's signature.Because  is an easy way to create a function, people often use it in  to bundle functions with predetermined arguments specific to the given callback/command.Button2 launches the function "animate" it takes in an argument(J), pulls data corresponding to J then plots a scatter plot. [...] Button1 then shows the figure in a new frame [...] If I REMOVE the LAMBDA from Button 2, I see the correct plot in the new frameRemoving the  keyword executes  immediately when the code is executed to configure  instead of creating an anonymous function. The command for  is then set to whatever  returns. If it is not callable, then it is effectively ignored.Because you did not provide workable code for  or , it's not possible for any of us to know for sure what it does, but from the results it is safe to assume that  stores the  in an attribute/variable, and then  (or some portion of  which is not provided) retrieves the  from that attribute/variable. This is why the code appears to still be working: because with only one  to store,  will always retrieve the correct figure. If you had multiple buttons, presumably  would always display the  for the last button created no matter which button was pressed, as that is the most recently stored .Obviously, the issue at the center of all this is likely how  is storing the  and the way / is retrieving the figure. Two generalized explanations:Something is created after or during the initialization of  which interacts with  (and/or influences the instantiation of ). With , this object has a certain value while being created which is not changed until after the object has completed its process (whether that's initializing, calling a subsequent method, setting a tertiary variable, etc). Without ,  is called immediately which changes this object to reflect the creation of .The variable housing  or another intermediary variable is being garbage collected because you aren't maintaining a reference to it.Since I think the first is more likely, I'll specifically pick out  and  as candidates: neither of these variables are method parameters (and they don't appear to be pulled from , per your code), so they are references that could easily be changed during execution in a higher scope.If you reduce your code to a MVCE, it would be easier to see what exactly the problem is. You also might find that the issue goes away when you writing the MVCE, which will tell you exactly what went wrong and will let you fix it right away instead of waiting for Stack Overflow answers.


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions
