Natural Text
Suppose I have the following module:blah.pyIn the next python session I get the following:It appears that when I modify an object that I imported from another module, and then re-import that object, it recovers its original value expressed in the module. But this doesn't apply to values in a dictionary. If I want to recover the original value of  after making any modification, I have to close the current python session and open a new one. I find that this is even true if I merely called a function that modifies the dict elements.Why does this happen? And is there some way I can re-import the dictionary with its original value without starting a new python session?
Because you denamespaced the  (with  syntax), you need to do this as a two-step process (three including the necessary imports):Do  to gain access to the  function, and the actual module to call it onRun  to throw away the module cache of , and reread it afresh from disk (the fresh version is stored in the cache, so future s related to  see the new version)Run  again to pull the refreshed contents of The reason you didn't see a problem with  is that after doing ,  wasn't special;  was just another alias to , but since  rebinds  to a completely new  anyway (and since s are immutable, even  would actually perform a rebinding), you never changed  (you'd have to explicitly do ,  to have that happen). was a problem because, like ,  and  end up as aliases of the same , and you mutate that , you're not rebinding  itself. If you want to avoid mutating 's values in the first place, make sure the first modification to  rebinds it to a fresh , rather than modifying the one it's sharing with , e.g. instead of:do:to make a fresh  with a copy of , but with the value of  in it replaced with a new value.


Answer URL
https://docs.python.org/3/library/importlib.html#importlib.reload
