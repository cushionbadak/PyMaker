Natural Text
I was trying to fix something related to what an object returns when you use an object as an argument.For example, I have a custom object and I want to use it as a parent for another tkinter widget, so I need to return a tkinter object to place the new tkinter object into my custom object, but my custom object returns that is an object of a custom class.I can explain this much better on code:Now I want to use the "self.externalobject.interior" as the parent for label1But I want to make it friendly just calling "cfr1" instead of "self.externalobject.interior"I know that if I use the call method and I return the value that I need it will work if I pass "cfr1" as a function, but I want to make it the more Pythonic as possible.So I need to know if there's another special method or something to modify what it returns.EDIT:So, this is part of the code I am using:This is the code of the vertical scrolled frame (not my code).And this is the code for my custom object:So, if i pass the argument like  it works, but I want it to make it work just passing cfr1 as an argument.
I think I understand the issue the OP is having here. They are unable to use the frame as the container for their label and that is because they are missing  and need to inherit from Frame.Change this:To this:And you should be able to use the customer frame as the container for your label.Based on your comments below try this:This should inherit all methods and attributes of that object.
You are trying to implicitly cast/coerce one type of object to another.If you want to be "pythonic", recall, Implicitly doing things can cause trouble.I see nothing wrong with using the  magic function to get the attribute you want, or start looking at properties and decorators.There's a full list of magic methods here
You could probably achieve what you want if you created your own custom subclass of  that basically does the unpacking for you.(Disclaimer: I have never used tkinter, so I cannot tell if this actually works in the context of that framework. This example is merely to demonstrate the concept I am trying to outline here.)With that you should be able to use .However, I strongly support the message that @doctorlove conveys in their answer. IMHO, the most pythonic way would indeed be , your suggested approach using  or a property inside  that provides a shortcut to :which you would use like so 


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-names
