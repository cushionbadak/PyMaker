Natural Text
This question already has an answer here:How can I get the source code of a Python function?                    11 answers                I recently asked a question with title "python find the type of a function" and got very helpful answers. Here is a related question.Suppose I import *.py files written by me, and these imports result in  being one of the functions defined by me. Now I write to my python interpreter . Later, I want to see the full definition of , preferably with comments still in place, knowing only . Is this possible? Does python remember which file the definition was imported from, which is, of course, not enough to give the full definition of , unless one can find the actual relevant definition?
The built in  will give you the correct documentation if you alias  to some function you commented - same for  - they know which function is ment by your variable name alias  at this time.See:the  built in (taken from here)Example:Prints:Same goes for :prints:
You should think of the way Python uses variables. You have objects (can be classes, functions, lists, scalars or whatelse) and variables that only hold references to those objects.That explains why when multiple variables point to the same mutable object, if you change it through one of those variables, the change in visible in all other ones.This is the same thing here. The function object manages all its attributes: its docstring, its code, and its source (if it has: C function show no source). Assigning the function to a new variable does not hide the object behind anything: you still access the original object.Things would go differently with decorators, because the decorator creates a new object, and the original object is only available to the decorated one.


Answer URL
https://docs.python.org/3/library/functions.html#help
https://docs.python.org/3/library/inspect.html#inspect.getsource
https://docs.python.org/3/library/inspect.html#inspect.getsource
