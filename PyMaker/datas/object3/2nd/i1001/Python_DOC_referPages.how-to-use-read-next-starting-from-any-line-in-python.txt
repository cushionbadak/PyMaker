Natural Text
I'm trying to start reading some file from line 3, but I can't. I've tried to use  + the index number of the line, as seen bellow:but I get this result:I would like to be able to set any line, as a variable, and from there, all the time that I use  it goes to the next line. IMPORTANT: as this is a new feature and all my code already uses , the solution needs to be able to work with it.
Try this (uses )::Output:This solution is better than  because it doesn't load the entire file into memory and only loads parts of it when needed. It also doesn't waste time iterating previous lines when  can do that, making it much faster than @MadPhysicist's answer.Also, consider using the  syntax to guarantee the file gets closed:
The  method returns a list of strings for the lines. So when you take  you're getting the third line, as a string. Calling  on that string then makes no sense, so you get an error.The easiest way to do this is to slice the list:  gives a list of everything from line  onwards. Then you can use that list however you like.If you have your heart set on an iterator, you can turn a list (or pretty much anything) into an iterator with the  builtin function. Then you can  it to your heart's content.
The following code will allow you to use an iterator to print the first line:This code will allow you to print the lines starting from the xth line:Edit: Edited the solution based on @Tomothy32's observation.
The line you printed returns a string: returns a file object. Its  method returns a list of strings. Indexing with  returns the third line in the file as a single string.The first problem is that you open the file without closing it. The second is that your index doesn't specify a range of lines until the end. Here's an incremental improvement:Now  is a list of all the lines you want. But you first read the whole file into memory, then discarded the first two lines. Also, a list is an iterable, not an iterator, so to use  on it effectively, you'd need to take an extra step:If you want to harness the fact that the file is already a rather efficient iterator, apply  to it as many times as you need to discard unwanted lines:After the  loop, any read operation you do on the file will start from the third line, whether it be , , etc.There are a few other ways to strip the first lines. In all cases, including the example above,  can be replaced with :orAfter you run either of these loops,  will return the th line.
Just call  as many times as you need to. (There's no need to overcomplicate this with , nor to slurp the entire file with .)Output:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.islice
