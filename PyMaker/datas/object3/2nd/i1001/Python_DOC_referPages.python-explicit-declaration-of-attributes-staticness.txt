Natural Text
I come from a C++ and Java enviroment and just started learning Python, hence this question. From The Zen of Python there's a quote:Explicit is better than implicit.So, is there a way to explicitly declare a static and/or non-static attributes in Python all at once?For example (not fully a python code):Although this 'static' and 'non_static' keywords don't exist in Python, this is the behavior that I would want to achieve:The  attribute should be accessible through  as well as  and . Being all distinct instances.The  attribute, since it's "static", should be owned by (and accessed through) the  instance only.It would be ok if  worked as a reference to , for example.The  attribute, since it's "non-static", should be accessible through  and , being both distinct instances, and must not be acessible directly through  since it must not have this attribute.I think the first desired behavior is what is really going on.Regarding the seccond one, it's clear why a attribute like  is important and desired.And about the tird one, I know that it's possible to declare an attribute as such along the methods of the class. But can it be declare all at once? And if not, why? Again if not, is it better this way?Explicitly declaring all inside the  function can be a problem since I can want an attribute to don't be initialized. Or is this a bias from C++/Java?
Python has no concept of 'static' attributes, not in the way that C++ defines them.Instead, Python attribute lookup on an instnace goes through the following steps; if a step succeeds then that determines the outcome and further steps are skipped:Check for a data descriptor on the class (including the full MRO hierarchy). These get priority over an instance attribute. The descriptor is bound and the result of binding is returned. E.g. a  object.If the instance has its own  namespace, check for the attribute thereCheck for the attribute on the class hierarchy (step 1 will have cached this if it wasn't a data descriptor). If it is a descriptor, bind it, e.g. a function is bound to produce a method at this stage.If the class hierarchy has a  method defined it is called to see if it can provide a result.That's it; instances and classes are, at its most basic, a layered namespace. Attributes are not declared, they exist because they are simply used.You can use type hinting to help tools like IDEs and static type validators check for type correctness, and you can use such hints to declare that your class will use specific instance attributes with a given type, e.g.:but the Python runtime will not enforce any rules about what attributes can be set where. A static type checker like mypy will, however, raise an error when you run it on code that sets  on an instance of :If you are not using type hinting, then you never have to 'declare' attributes. Attributes just 'are', you use them or you don't. Python assumes we are all grown-ups that can write unit tests where deemed necessary, and is otherwise almost entirely dynamic. This gives you a great deal of flexibility and power to do things that are much harder and much more verbose in C++ or Java.
Python is simple, it doesnâ€™t require a static keyword. Variables assigned in the class declaration are class variables or static variables, while those inside the class methods are instance variables.


Answer URL
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/library/typing.html
https://docs.python.org/3/library/dataclasses.html
