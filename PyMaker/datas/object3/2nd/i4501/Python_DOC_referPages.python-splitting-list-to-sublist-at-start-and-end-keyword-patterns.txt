Natural Text
If I were to have a list, say:with a character of , how would I return a list given:I'm having some difficulty finding a solution for this. Here's one approach I've tried:Any help would be greatly appreciated.
Assuming that there is no elements which starts & ends with  like .First of all we can write helper predicates likeThen we can write generator-function (because they are awesome)Tests:as we can see from the last example if there are more closing elements than opening ones remaining closing elements will be ignored (this is because we're ing from generator). So if  has invalid signature (difference between opening and closing elements is not equal to zero) then we can have some unpredictable behavior. As a way out of this situation we can validate given data before processing and raise error if data is invalid.We can write validator likeTestsFinally we can write function with validation likeTestsEDITIf we want to handle elements which starts & ends with  like  we can modify  function using  likealso we need to complete validation by just modifying  functionTests
Here's an iterative solution that can handle arbitrarily nested lists:Test run:The way it works is to maintain a stack of nested lists. Every time a new nested list is created, it gets pushed onto the stack. Elements are always appended to the last list in the stack. When an element that ends with "!" is found, the topmost list is removed from the stack.
I would first determine where the start and end points of your sublist are, then cut up the list accordingly, then remove the s.
Here is a quite simple implementation:First we join  into a single  and then split it on . Now, this results in . We can now use the appearing whitespace characters in the beginning or end of the elements to signify where the embedded  should appear. The words that should appear individually are packed into s, just to distinguish them from the (s). All of this results in . The final thing to do is to unpack the s into their single elements, which is what the loop is doing.
I think you should insert to array rather assign it. and you also need to delete up to index + 3
Please Try below : 


Answer URL
https://docs.python.org/3/glossary.html#term-generator
https://docs.python.org/3/library/itertools.html#itertools.chain
