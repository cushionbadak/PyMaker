Natural Text
I'm exploring the REPL and I noticed the  module.I enteredand hit Tab, then Python REPL showed me a list of builtin identifiers, including , ,  and , ,  etc.The first test passed without doubt:But the second one didn't:Why?
We can observe this change in the language from the keywords list of Python 2 and Python 3. ,  and  were added as keywords to avoid confusion should someone e.g. try to overwrite one of them. This is valid, but highly misleading, Python 2. Python 3 responds differently:The History of Python has a writeup on the story of None, True and False.Here's another stack overflow question on the topic. Another effect of this change is that the compiler knows precisely which objects they are, and doesn't need a namespace lookup when they're referenced. Python 2:Python 3:
 is a keyword. As such, it can not be used with the dot notation, much like how ,  and  are also a syntax error.This can be bypassed by using :Unlike , ,  etc (which are top-level functions), ,  and  are keywords in Python 3 (see https://docs.python.org/3/reference/lexical_analysis.html#keywords).In Python 2  and  where not keywords (just a built-in name/constant) (See https://docs.python.org/2/reference/lexical_analysis.html#keywords) so you called reassign to them. As mention above this is impossible in Python 3 since they became keywords.Also see this question: True=False assignment in Python 2.xWith that said, one can still mess around with  in Python 3, but it will not affect the actual  as it used to be in Python 2:


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#keywords
https://docs.python.org/3/reference/lexical_analysis.html#keywords
