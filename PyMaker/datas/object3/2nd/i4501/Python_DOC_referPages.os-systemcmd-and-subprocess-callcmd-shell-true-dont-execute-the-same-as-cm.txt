Natural Text
I'm trying to convert a long, complex, Windows batch file into Python.Things work except for subtle problems, which I suspect have something to do with quoting, but can't quite figure out.In a batch file, this works fine:This Python code is meant to, but doesn't, do the same thing:Note that the (raw) string  and the batch file are exactly identical.Both the os.system() and subprocess.call() result in the same thing - no error (Reg.exe says everything is fine), but a different effect on the system.In my testing, the batch file configures the archiver 7z to open the .ZIP file itself (correct result).The Python code causes 7z to open the folder where the .ZIP is located (wrong). How to get Python to do what the batch file does?
OK, shot in the dark:I would drop  and use a argument list to pass to . The quoting will be handled automatically:also check the return code of If you want to process several commands like this "automatically", I'd suggest to use , I'm not saying that it will solve everything, but it does a fine job with the quotes (protecting the quoted arguments, with quote nesting):result:same thing with raw prefix would be:pretty close right? :)
Jean-Fran√ßois Fabre's answer is good, and probably the most Pythonic answer.Unfortunately for me, I don't have the patience to analyze the batch file to figure out whatever other filters might be needed, so I came up with this solution, which works regardless of the syntax, quoting, and escape sequences in the batch file lines:All it does is create a one-line batch file and then run it. Brute-force.It's a bit slow because it has the overhead of creating, calling, and deleting the one-line batch file each time.Here's a faster version that creates one big batch file with all the command lines. Whenever you call it with , it executes all the commands to date:


Answer URL
https://docs.python.org/3/library/shlex.html#shlex.split
