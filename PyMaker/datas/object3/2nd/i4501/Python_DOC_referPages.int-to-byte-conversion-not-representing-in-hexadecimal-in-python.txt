Natural Text
I'm having some difficulty in understanding how python converts between int and byte data types and specifically why it isn't consistent with representing it as hexadecimal numbers.Consider the following where I convert the number 13 into a 2 byte representation:Why does it use the character  in the second byte location? In this case I would have expected it to output:Doing the reverse in both cases outputs the correct answer.And both have the correct number of bytes
There is a difference between  and a hexadecimal representation.  is a datatype; hexadecimal is a way of representing bit patterns on the screen.A  is an immutable sequence of 8-bit values. The interpreter displays it, where possible, as characters or as string escape sequences, and where not possible, in hexadecimal. The corresponding literal is called a bytestring. In other words, hexadecimal is a sort of last resort. You can construct the   using hexadecimal notation:  but the interpreter will still report it as . That is no different from the way quotes are handled:The interpreter has a standard way of displaying its data and takes no account of the way you entered that data in the first place. This isn't a roundtrip failure, because no information is lost. You are seeing an equivalent representation rather than the same representation, is all.If you want to see a hexadecimal representation then you should ask for it explicitly, instead of relying on the interpreter's default way of displaying a particular datatype. 
There are some special escape sequences which are so common that they are not explicitly represented with their hex values:you find a full list of escape sequences and how they work here.Note that there is also  in the C language.


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#literals
