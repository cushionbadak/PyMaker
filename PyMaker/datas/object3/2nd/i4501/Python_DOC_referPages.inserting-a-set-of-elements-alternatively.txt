Natural Text
There is a list with elements of similar nature (4 7's,3 5's, etc.) that I want to insert in right left order into a another list ().So the first thing being inserted into newlst is the group of 7's:Subsequently, the group of 5's is inserted into the list on the right:And then the group of 3's is inserted on the left, and after that the group of 2's is inserted on the right. The final list looks like thisIn order to add elements in the list on a right left basis, I did this:The insert method inserts elements into the 0 index (which is the right of the list) and append adds elements at the end of the list (which is the left of the list). However, I'm having problems adding the group of elements into the newlst. To that end, I thought using a dictionary would be a good idea.EDIT:The intention of this dictionary is for each key, I want to insert the key value 'x' times, e.g. the key 7, would be inserted 4 times: [7,7,7,7]. Is there a way to achieve this in Python so I can get the output newlist: [3, 3, 3, 7, 7, 7, 7, 5, 5, 5, 2, 2] ?
You can accomplish this pretty easily with a deque, along with cycle and groupby
Here is your initial code:You have a few major problems here: is always in , by definition. That means your check is not a valid way to alternate.Your data is getting appended/prepended to  instead of .A  is a hash-table. This means that the order of the keys will pretty much never be in the order you defined them in.The first item can be solved through enumeration:I've fixed the list you are appending to, and am using  to construct the prepended/appended list.  is equivalent to . However, keep in mind that  creates a new list object rather than concatenating in-place.The third item can be fixed using  instead of a regular :That will make the keys run in the order that you want. In fact, you don't need to construct  by hand at all. You can combine  with a  to get the exact same result dynamically. The recipe for this is given in the  docs:All this is pretty verbose and not very efficient. As @Wondercricket's answer points out, you can use the functions in  to perform the same task using generators.
This is what you want to do?


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
https://docs.python.org/3/library/itertools.html#itertools.cycle
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/library/collections.html#ordereddict-objects
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#ordereddict-examples-and-recipes
https://docs.python.org/3/library/itertools.html
