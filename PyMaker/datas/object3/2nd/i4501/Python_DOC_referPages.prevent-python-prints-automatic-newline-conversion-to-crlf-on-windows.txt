Natural Text
This question already has an answer here:Print LF with Python 3 to Windows stdout                    1 answer                I'd like to pipe text with unix-like EOL (LF) from Python via Windows CMD (console). However, Python seems to automatically convert single newlines into Windows-style end-of-line (EOL) characters (i.e. , , , ):results in or in hexadecimal The second EOL is because defaults to , but it also does the conversion.There is no  argument or property for print like there is for , so how can this be controlled?
See this answer: https://stackoverflow.com/a/34997357/1619432 usually writes to . The following are excerpts of the documentation, for non-interactive mode:stdout is used for the output of print() sys.stdout: File object used by the interpreter for standard ... output These streams are regular text files like those returned by the open() function.character encoding on Windows is ANSIstandard streams are ... block-buffered like regular text files.Note  To write or read binary data from/to the standard streams, use the  underlying binary buffer object. For example, to write bytes to stdout,   use sys.stdout.buffer.write(b'abc').Let's try this direct approach first:results in The buffer write seems to work as desired, although it's "messing" with the output order.Flushing before writing to the buffer directly helps:results inBut still it's not "fixing" print(). Back to the file objects / streams / text files (short info on IO objects in Python Data model):https://docs.python.org/3/glossary.html#term-text-fileA file object able to read and write str objects. Often, a text file actually accesses a byte-oriented datastream and handles the text encoding automatically. Examples of text files are files opened in text mode ('r' or 'w'), sys.stdin, sys.stdout, and instances of io.StringIO.So (how) can the sys.stdout file be reconfigured or reopened to control the newline behaviour? And what exactly is it?Docs: class io.TextIOWrapper(buffer, encoding=None, errors=None, newline=None, line_buffering=False, write_through=False):newline controls how line endings are handled. It can be None, '',  '\n', '\r', and '\r\n'.  It works as follows:  When reading input from the stream, if newline is None, universal newlines mode is enabled.   Lines in the input can end in '\n', '\r', or '\r\n', and these are translated into '\n' before being returned to the caller.  If it is '', universal newlines mode is enabled, but line endings are returned to the caller untranslated.  If it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated.When writing output to the stream, if newline is None, any '\n' characters written are translated to the system default line separator, os.linesep.  If newline is '' or '\n', no translation takes place.  If newline is any of the other legal values, any '\n' characters written are translated to the given string.Let's see:OK, and what aboutDoes not work:because the property does not exist:Which I should have checked earlier .. So really, there's no  attribute for us to redefine.Any useful methods?Not really.But we can at least replace the default interface to the buffer end specify the required newline character(s):which finally results in To restore, just reassign  to a copy you made. Or, apparently not recommended, use the internally kept  to do that.Warning: See 's comment below, this requires some care. Use his solution instead (link below):It seems it might also be possible to reopen the file, see Wrap an open stream with io.TextIOWrapper for inspiration, and this answer https://stackoverflow.com/a/34997357/1619432 for the implementation.If you want to take a closer look, check out the Python (CPython) sources:https://github.com/python/cpython/blob/master/Modules/_io/textio.cThere's also os.linesep, let's see if it's really "\r\n" for Windows:Could this be redefined?It can in the interactive mode, but apparently not otherwise:


Answer URL
https://docs.python.org/3/library/functions.html#print
https://docs.python.org/3/library/functions.html#print
https://docs.python.org/3/library/sys.html#sys.stdout
https://docs.python.org/3/reference/datamodel.html#index-53
https://docs.python.org/3/glossary.html#term-text-file
https://docs.python.org/3/library/io.html#io.TextIOWrapper
https://docs.python.org/3/library/sys.html#sys.__stdout__
https://docs.python.org/3/library/os.html#os.linesep
