Natural Text
I have a list of item, where I want to remove the occurrence of any duplicates for one item, but keep any duplicates for the rest.I.e. I start with the following listI want to remove any duplicates of  but keep the duplicates of  and .My current solution is the following:Is there a nice way of keeping one occurrence of  besides the following?The second approach takes more than double the time for this example.Clarification:currently, I don't care about the order of items in the list, as I currently sort it after it has been created and cleaned, but that might change later.currently, I only need to remove duplicates for one specific item (that is  in my example)
The solution:looks good enough, except if  is not in , in which case you're wrongly adding 0.Besides, adding 2 lists like this isn't very good performance wise. I'd do:(or using filter  which could be slightly faster because there are no native python loops)Appending to a list at the last position is very efficient ( object uses pre-allocation and most of the time no memory is copied). The length test trick is  and allows to avoid to test 
It sounds like a better data structure for you to use would be  (which is in the standard library):
Here is a generator-based approach with approximately O(n) complexity that also preserves the order of the original list:Also if you are dealing with larger lists you can use following vectorized and optimized approach using Numpy:
If performance is an issue and you are happy to use a 3rd party library, use .Python standard library is great for many things. Computations on numeric arrays is not one of them.Here the first argument of  is the input array. The second argument extracts the indices of all occurrences of 0, then extracts the second instance onwards.Performance benchmarkingTested on Python 3.6.2 / Numpy 1.13.1. Performance will be system and array specific.
Slicing should doInput:Output:
You can use this:You can now change your desired value,you can also make it as a list like this
Maybe you can use a .
You can use an itertools.count counter which will return 0, 1, ... each time it is iterated on:The order is kept, and it can be easily modified to deduplicate an arbitrary number of values:
here's on line for it: where  is number to be occured once,and the order is keptResult


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.count
