Natural Text
Suppose I need to create 10 functions called add1, add2, ..., add10. For each i, addi takes in an integer x and outputs x+i. Python gave me a NameError when I tried the following and evaluated add2(10).I know the above code is wrong, since the addi functions I've defined aren't mutable; I'm pretty sure all I've done is redefine addi 10 times. How can these 10 functions be quickly defined?
Use  combined with a dictionary in this situation.I assume what you really want to do is more complex, since multiple functions are not necessary for this specific task.ExplanationIt is good practice to store a variable number of related objects in a specially defined dictionary. is a higher order function which returns an input function with selected argument(s) fixed.
Functions aren't mutable in general; but they may have references to data that is. In your snippet, this reference is a little unclear, but  only occurs once in the function body, as a read. It therefore reads from some outer scope, typically the function or module your  loop is contained within. Because this happens to be a shared context, every  function will end up with the same . Another issue is that you're using the name  on every iteration, and the function never appeared under another name. So whatever  functions were defined earlier are lost. This leads us to the third question; why would you want to create names (such as function names) dynamically? It's almost always better to use a collection, such as the  dictionary in jpp's answer. Otherwise, what code would even refer to the functions you created? All that said, it is still possible to do what you asked for, albeit very strange. Here's one way:This abuses  to inject dynamically created names into the module's namespace, and nests each of these functions within another to create the namespaces holding their individual  values. Another classic hack was using a default argument, and partial application of  is a neater functional style. 
A solution:Using the copy function from https://stackoverflow.com/a/34796018/7529716
does this help?Then just create the functions and store them in a array:
As others have noted, it's questionable if you should do this in production code. However, for educational purposes, here's how to do it by generating function names and and injecting them in the global namespace: implements currying in Python to create a copy of a single function definition where each copy "hardcodes" one or more of the function arguments.


Answer URL
https://docs.python.org/3/library/functions.html#globals
https://docs.python.org/3/library/functools.html#functools.partial
https://docs.python.org/3/library/operator.html#operator.add
