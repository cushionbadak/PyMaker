Natural Text
I am trying to convert strings to datetime objects. These strings are stored in csv columns. The file being huge I want to multiprocess it.My code looks like this :I am getting :Before someone gives me a solution for the code, it would be really helpful if can get some insight into how daemon processes work.
If you look at the  code (you don't seem to be using Python 3.6, so the line numbers are a bit different, but this part of the code is unchanged), you can see pretty clearly that the string about daemon processes isn't relevant; it's just part of an  that your code managed to get past without any problems, before failing for a completely unrelated reason a few lines later.The actual problem is on that line 105, and it's explained in the error message:You're trying to pass an object to a child process that can't be pickled. This is explained a bit in the  docs, e.g., under Programming Guidelines, although those docs assume you understand what "pickle" means, and that you've read quite a bit of the earlier sections of the documentation. You really should read those earlier sections, and look up  in the docs as well, but the basic idea is this:The  module uses the  module to pass arguments to functions, return values from functions, put values on queues, etc. The  module can only handle data types that are designed to be pickled. So, some types can't be passed around with .In this case, there should be a very easy workaround: Just pass the filename, and let the child process read it. Of course that won't work for more complicated cases, but if it works for yours, keep it simple.For more complicated cases, the usual solution with Pandas is to replace the standard pickler with a third-party library like  or  that knows more about Pandas and can coerce it into shape to pass over the network. (Or, sometimes, to replace  itself with a third-party library like .) This isn't that hard to learn, but you do need to look over the options, pick one, and read about how to hook it in, which you may not want to do if it's not needed.If you're still interested in what daemon processes are anyway, see Processes in the reference docs. But the short version is that a daemon process, in this context, is one that doesn't get edâ€”in other words, you don't wait for it to finish when the main process finishes, as you do with a normal process.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#programming-guidelines
https://docs.python.org/3/library/multiprocessing.html#process-and-exceptions
