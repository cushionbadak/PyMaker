Natural Text
I'm currently taking some classes on algorithms and data structures and using Python to implement some of the stuff I've been studying.At the moment I'm implementing a Stack based on a fixed-size array. Given the particularities of python I opted to use numpy.empty().For a test I've written I'm basically pushing 9 elements into the stack. Up to that point everything is ok because the resulting array has the 9 elements plus space for another 7.I started popping elements out and when I reach the critical point of just having 4 elements in an array, I expect the array to copy the elements into a new array of size 8.The thing is that when I create this new array, instead of being created with empty values is already populated.Here an image of my terminal at that specific step when debugging with PDBIs there anything I'm missing out?EDIT: Seems like if I use Python 3 everything works as expected, this is just the case for Python 2 
Short answerUse  instead of  to get rid of the surprise garbage values in your new arrays.detailsThe arrays created by  have all of their elements initialized to a "zero value". For arrays with , this will be the empty string . From the Numpy docs:Notesempty, unlike zeros, does not set the array values to zero, and may therefore be marginally faster. On the other hand, it requires the user to manually set all the values in the array, and should be used with caution.The fact that it works in Python 3 (but not Python 2) is undefined behavior. Basically, it's a quirk of the implementation which the Numpy developers didn't plan. The best practice is to not rely on such things in your code. As you've seen, the outcome of an undefined behavior is not guaranteed to be consistent across versions, implementations, different computers that you run your code on, etc.Also, it sounds like you might be a little bit confused about how Numpy arrays work. A numpy array starts off at a fixed size when you create it. This is unlike a normal Python list , which grows dynamically as you add values to it.Also, you don't need both  and  in . Just use one or the other, like this:Aside from that your code is fine.


Answer URL
https://docs.python.org/3/library/collections.html#deque-objects
