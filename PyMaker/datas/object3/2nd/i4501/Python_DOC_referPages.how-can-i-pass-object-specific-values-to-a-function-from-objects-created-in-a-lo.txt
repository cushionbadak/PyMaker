Natural Text
This question already has an answer here:Passing argument to a function via a Button in Tkinter, starnge behaviour in loop                    1 answer                I have searched deeply for a solution to this problem, but, being new to Python and tkinter, it is difficult to find solutions to problems in a language you are largely unfamiliar with. I hope this is not a repeat question.Suppose I create a series of buttons in tkinter, each of which will sequentially display a letter of the alphabet, defined as such:Somewhere below this in the  loop is a  for all of these. The function that is being referenced in the  attribute is as the following:So I recognize two problems with my code:The function in the  attribute is executing immediately upon running the code, because I am specifying a function call rather than a function name.Even if that was the proper way to call the function with a parameter, using  wouldn't work, because it would pass whatever the value of  is upon click, and not whatever  was upon execution of the  loop.So my questions are the following:How can I specify a function in the  attribute and pass to that function with a parameter?How can I specify that parameter to be the letter of the alphabet specific to that button, without defining a button explicitly for every letter?I am fairly certain I could use a list comprehension to solve the second problem, perhaps a dictionary with the key equal to the letter and the value equal to the button, but then I still wouldn't know how to get the key value from the button on its own.
You should use a higher order function (a function that returns a function). To demonstrate, I will not use tkinter but the principle is the same:Note, you can inline this if you don't want to keep a  around using a lambda:A common trick is that is less verbose is to use a default-argument with your lambda, however, I consider this more hacky, although it is quite common in Python:Note also, it is consider an antipattern to use  when you can simply iterate over the iterable instead. Usually, you just want the actual value, so you just do .
Currying is the practice of passing some arguments to a function to produce a new function which can be called later but "remembers" its earlier arguments. You can use this technique to pass the state.So  would call the function, but only using one set of parentheses simply stores the value for later.


Answer URL
https://docs.python.org/3/library/functools.html#functools.partial
