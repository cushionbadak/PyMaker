Natural Text
I have a table that I want to convert to an indented outline document using the "depth" column as indent value and the "pos" column as each element's relative position within its level of the hierarchySo, this: tableConverted to this: outlineI am able to parse the table into a python dictionary:And I know how to sort a list or dictionary if it's not nested:But what I am confused about is how to loop through the nested levels and do sorting on each level.
First, you have have strings and lists at the same level. Python won't let you compare these:If you come up with a rule for what you want to do with these, you can write a key function to apply that rule. For example, let's say we want to sort lists before strings. We could sort each element  as if it were the pair :A bit hacky, but it works, and since you haven't specified how you want to handle this, I'm going to go with that key function.For your actual answer, you'll need to add on to that key function to use  for 2-element lists, or something like that (it's not entirely clear how you want to distinguish between the "special" lists and normal nested ones), but I'll leave that for you to do.Now, we just need to sort recursively. If you want to do it in-place, you just sort the list, then, for each element, if it's a list, nested-sort it. Again, you'll want to add in some rule for special-casing those 2-element lists, but I'm not sure what rule you want, so you can figure it out for yourself.You might want to change things to sort every mutable sequence, not just lists, orâ€¦ well, whatever seems appropriate.If you want a sorted copy instead, the recursion is even easier. Again, you'll have to write your own code for the special-case lists, and now you have even more options for types to handle as nested (e.g., maybe all sequences except string types?), but here's the basic idea:


Answer URL
https://docs.python.org/3/howto/sorting.html#key-functions
