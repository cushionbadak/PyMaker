Natural Text
I'm using a basler camera to take images and also using pypylon to interface camera software(pylon) with pythonI want to create two parts grab images (i.e 1000 or 2000)with some specific exposure time and shutter speed.and save it parallelly without disturbing fps.Or is there any way to save them in a buffer and use it afterward which won't affect fps?Right now my concern is to save images without affecting fps ThanksFollowing is my code
First things first: 's  has been deprecated, and is scheduled to be removed. Use 's  instead.Now for the code. There are a few ways of doing this. I'll move from fewest modifications to most modifications.Fix up codeI'm just going to make some changes to your program, to make it easier to modify later and so that it won't break in the future:Future modifications will be based on this. I recommend looking up what some of these do, like , since it looks like you blindly copied these from the example.BufferIn order to store these images in a buffer, we can simply read them all straight away by converting the iterable into a  (a read-only list). Once we're done with the buffer we can ete it to free up some memory.Asynchronous savingI need to do something with multiprocessing. Oh, look, there's a Python module called . I've never used this before, but by reading it I can create this:This solution is the one you asked for in the title. The most cryptic part of this is . This is there because each item generated by  is a tuple of the form . This is only one argument, so it's passed to  as one argument. We need to expand that into the two variables  and  so that the rest of the code will work, which is what the first line of the function achieves.You might also have noticed . This makes sure that the code only runs when the program is imported as a module, which is used internally by  to find the  function.I hope this does what you wanted. If you want clarification, feel free to post a comment. If you have a separate question, please ask another question.


Answer URL
https://docs.python.org/3/library/multiprocessing.html
