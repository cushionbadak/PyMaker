Natural Text
I have a lot of tests that basically do the same actions but with different data, so I wanted to implement them using pytest, I managed to do it in a typical junit way like this:Which gives me the following outputC:\Temp>pytest test_prueba.py -s============================= test session starts =============================platform win32 -- Python 3.6.5, pytest-3.5.0, py-1.5.3, pluggy-0.6.0rootdir: C:\Temp, inifile:collected 4 itemstest_prueba.py setUpTest with data 1Hi.tearDownsetUpTest with data 2How.tearDownsetUpTest with data 3Are.tearDownsetUpTest with data 4You ?.tearDown========================== 4 passed in 0.03 seconds ===========================The problem now is that I would perform some actions also in the setup and teardown that I need to access to the test_input valueIs there any elegant solution for this ?Maybe to achieve this I should use the parametrization or the setup teardown in a different way ?If that the case can someone put an example of data driven testing with setup and teardown parametrized ?Thanks !!!
 on a test is more for just specifying raw inputs and expected outputs. If you need access to the parameter in the setup, then it's more part of a fixture than a test.So you might like to try:Which outputs:However, that requires that you create a parameterized fixture for each set of parameters you might want to use with a fixture.You could alternatively mix and match the parameterized mark and a fixture that reads those params, but that requires the test to uses specific names for the parameters. It will also need to make sure such names are unique so it won't conflict with any other fixtures trying to do the same thing. For instance:Which outputs:
I think that what you are looking for is yield fixtures, you can make an auto_use fixture the run something before every test and afterand you can access all the test metadata (marks, parameters and etc)you can read it hereand the access to parameters is via function argument called request 
IMO, set_up and tear_down should not access test_input values. If you want it to be that way, then probably there is some problem in your test logic. set_up and tear_down must be independent of values used by test. However, you may use another fixture to get the task done.


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#the-with-statement
