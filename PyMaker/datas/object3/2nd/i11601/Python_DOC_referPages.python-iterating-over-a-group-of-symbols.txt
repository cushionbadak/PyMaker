Natural Text
I'm frequently finding myself in a situation where I have a group of logically connected symbols that I want to iterate over. The obvious solution is to add these symbols to a list, but the duplication is a pain to maintain and I have to trust that if my fellow devs change one they also change the other. Is there a way to create symbols while simultaneously adding their value to, say, a list?For examplePsuedo-code for what I want
This sounds like what object-oriented programming is for:Typically, in Python, classes have an init method. This can seem mysterious, but all it really is is some code that is called when an object is instantiated based on the class. (Think of the class as a template for creating objects, and the init method runs when the object is created.) Inside the class, make an empty list. This is a class-level list and can be accessed in your code with Animal.list. It's not connected with any particular instantiated object (i.e., cat or mouse). When the init method is called, the name of the newly-created object is added to the class-level list. So if you create ten animals (Animal('ocelot'), Animal('kangaroo'), etc), you can call Animal.list to see the names of all the animals.EDIT: You requested a more general solution to your problem: 
A idea it to just maintain the the list : .If at a moment you want for convenience to define variable with the same name, will do it. But it's surely a bad idea in serious projects.
I'm not sure if this is a good idea for any large project, but you could do the following:The function will take a list of strings, create variables for each string, enter these variables into the  dictionary, and assign the string to each variables, returning the list of strings as a result. Then even your Mom could type:after which,both work as expected.This might be helpful in some smallish programs, but if program maintenance is a concern -- why not just use a regular dictionary of valid animals?
@T. Arboreus was right; the solution was object oriented programing. In order to declare symbols in the local scope while simultaneously adding them to an iterable, all I needed was a return value on an append action which could then be assigned to my symbol.I did this by inheriting from  and adding a  method.Now I only have to maintain the one declaration.


Answer URL
https://docs.python.org/3/library/enum.html
