Natural Text
Suppose a dictionary is expected to have certain keys present. Is there a simple way of adding these specific keys with default values if they are missing?For example:would update the dictionary  towhere the original values of  are kept and only the missing keys are added.The  should not be destroyed in the process.
To update an existing dictionary, I might use the dictionary's  method:If I was creating a new dictionary where I had a small number of keys, I'd probably do something more along the lines of the solution that was posted by Martijn.
Create a copy of the defaults, and update it with ; if all keys in  are strings, you can do so with one  call:For dictionaries with non-string keys, you'd use two steps:or you could use a loop to update  with any keys not present using dictionary views; this is not as fast however:Replace  with  in Python 3.If you are using Python 3.5 or newer, you can use similar syntax to create a new dictionary:The key-value pairs of  are applied first, followed by whatever new keys you set; these will override the old. See PEP 448 - Additional Unpacking Generalizations in the 3.5 What's New documentation.Any of the methods creating a new dictionary can update an existing dictionary simply by wrapping in a  call. So the first could update  in-place with:
You may consider using a  to associate a fallback:Also note that since all mutating methods will only modify the first mapping  is safe from  or other methods.


Answer URL
https://docs.python.org/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations
https://docs.python.org/3/library/collections.html#collections.ChainMap
