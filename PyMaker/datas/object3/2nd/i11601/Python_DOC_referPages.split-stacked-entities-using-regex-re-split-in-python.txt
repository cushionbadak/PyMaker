Natural Text
I am having trouble splitting continuous strings into more reasonable parts:E.g. 'MarieM端ller' should become 'Marie M端ller'So far I've used this, which works if no special characters occur:This outputs for e.g. 'TinaTurner' -> 'Tina Turner', but doesn't workfor 'MarieM端ller', which outputs: 'MarieM端ller' -> 'Marie M \utf8 ller'Now I came accros using regex \p{L}: But this produces weird things like: 'JenniferLawrence' -> 'Jennifer L awrence' Could anyone give me a hand?
If you work with Unicode and need to use Unicode categories, you should consider using PyPi regex module. There, you have support for all the Unicode categories:Here, the  regex finds all locations between the lower- () and uppercase () letters, and then the  inserts a space there. Note that regex module automatically compiles the regex with  flag if the pattern is a Unicode string (-prefixed).
It won't work for extended characterYou can use  for this. It will be much simplerFor handling spacesFor handling cases of consecutive capital lettersIdeone DemoRegex Breakdown
Using a function constructed of Python's string operations instead of regular expressions, this should work:


Answer URL
