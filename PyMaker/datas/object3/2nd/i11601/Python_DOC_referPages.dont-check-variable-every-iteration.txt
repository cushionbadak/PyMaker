Natural Text
I currently have a , which is going through an incredible number of iterations to check something, and when it goes to a new iteration, I need it to check whether or not a variable I have is the same size of the current iteration.Here is an example code of what I'm doing:However, since it's going through possibly millions of math heavy operations before I get my answer, I noticed that by striping this code of the 'printcounter' variable and not giving me a progress report gave me a significant speedup, by whole minutes sometimes.  Is there any way of only checking whether or not the 'printercounter' variable is equal to 10000, however without making it check every single iteration?I personally can't think of anyway without resorting to nesting for loops, which can get very dirty, and I'd rather not have.  By the way, I'm using Windows 8.1, Python 3.5.1, if that makes any difference.Edit:I understand that it takes a significant portion of time to print, however, if I instead print to a file; my harddisk being very fast, then I still get the same, albeit reduced, difference in time. Also, I have been wanting to get the solution to this implemented in a lot of other scripts, so even if it's not a major problem here, I'd still like to know how to do it.Edit 2:Perhaps it's my fault for not being clear. I was looking to see if it was possible to check a value every once in a while, not every single time. For example, I don't want my code to check if 'printcounter' is equal to 1000000000 when it's 1, that's ridiculous. I know machines operate ridiculously fast, and so it doesn't matter, but I was curious to see if it was possible to reduce the number of times it checks that way, rather than having a dumb code which allows itself to be sloppy or lazy just because it's quick enough to correct for it.
If you don't want to check the variable every iteration, make it unnecessary...by doing something like this instead:
The speedup isn't because of checking that variable.  It's because of the print statement itself.  So no, there's no way to speed it up further besides removing that statement.And to answer your specific question explicitly: you could restructure your code such that it isn't necessary to make that check, for example, using nested for loops.  But that will likely be slower.  The time it takes to check that one boolean comparison is very small.
Since  is incremented at every iteration, why not use nested for loops?Something roughly like this:
It's not going to make much difference because the int math is small compared to the actual print statement, but:This structure will eliminate a few operations, but none of them are slow operations.  But in terms of code structuring this is how I'd do it. 


Answer URL
https://docs.python.org/3/library/functions.html?highlight=divmod#divmod
https://docs.python.org/3/library/timeit.html#module-timeit
