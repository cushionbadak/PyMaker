Natural Text
I need to create an UNBOUND method call to Plant to setup name and leaves and I don't know how. Any help is appreciated.My code:Exact wording of the assignment:Create a new class called Flower. Flower is subclassed from the Plant class; so besides name, and leaves, it adds 2 new attributes; color, petals. Color is a string that contains the color of the flower, and petal is an int that has the number of petals on the flower. You should be able to create an init method to setup the instance. With the init you should make an UNBOUND method call to plant to setup the name and leaves. In addition, create a method called pick_petal that decrements the number of petals on the flower.
An "unbound method call" means you're calling a method on the class rather than on an instance of the class. That means something like . The only sort of unbound call that makes sense in this context is to call the  method of the base class. That seems to fulfill the requirement to "setup the names and leaves", and in the past was the common way to do inheritance.It looks like this:You will need to pass in the appropriate arguments to . The first is , the rest are defined by  in the base class. You'll also need to fix the syntax for the list of arguments, as `color : str' is not valid python. Note: generally speaking, a better solution is to call super rather than doing an unbound method call on the parent class . I'm not sure what you can do with that advice, though. Maybe the instructor is having you do inheritance the old way first before learning the new way? For this assignment you should probably use  since that's what the assignment is explicitly asking you to do. You might follow up with the instructor to ask about .
The answer from Bryan is perfect. Just for the sake of completion:This is the "classic", "non-cooperative" inheritance style and came out of fashion a long time ago (almost 15 years as of 2016), because it breaks with multiple inheritance. For reference see the post "Unifying types and classes in Python 2.2" by the BDFL. At first I thought it could be a very old assignment, but I see the assignment uses the "new-style" inheritance (inheriting from  was the signature of the new-style in Python 2 because the default is the old-style, in Python 3 there is only the new-style). In order to make it work for multiple inheritance, instead of calling the parent class explicitly (the  statement), we use the  function like this in Python 2:Or just this after Python 3 (after PEP 0367 to be precise):Even if in Python 3 the new-style of inheritance is the default, you are still encouraged to explicitly inherit from .


Answer URL
https://docs.python.org/3/library/functions.html#super
