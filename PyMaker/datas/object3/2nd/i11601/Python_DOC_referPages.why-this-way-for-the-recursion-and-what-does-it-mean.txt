Natural Text
This question already has an answer here:Why is “if not someobj:” better than “if someobj == None:” in Python?                    9 answers                I'm trying to understand this piece of code Two things bug me a bit  - What does it mean? As nothing has been specified, what is it looking for? - I've tried using  only and I have running error. Why? Why should I stick to ?
Imagine it's called...It get down to......which is evaluated as...Then  as .Then  as .Then  as , which is where the  kicks in and returns .So, the complete thing is then evaluated as...Notes: is shortening the list each time - reducing the complexity of the remaining problem, until an invocation of  receives an empty list: the trivial case that  handlesrecursive solutions are often made up of two parts: a solution for the simplest possible input (or sometimes, a couple very simple cases), and something saying how to take an arbitrarily complicated input and reduce it to a formula making one or more recusive calls that are each at least a little bit simpler, always moving towards that simplest possible input"I've tried using " -  returns a copy of  - it would ask for the same list to be processed ad infinitumit's arguably more intuitive to explicitly handle a list of one element -  - but then if anyone called  you'd try to access  (in the other code below the ) and raise an exception; handling the empty list makes the function easier to use if  returning  is sane for your application, but on the other hand having  raise an exception might uncover bugs where lists are unexpectedly empty - you can decide which is more useful to you; happily if you do handle the empty-list case,  case then "just works" with the same recursion logic


Answer URL
https://docs.python.org/3/library/stdtypes.html#truth-value-testing
