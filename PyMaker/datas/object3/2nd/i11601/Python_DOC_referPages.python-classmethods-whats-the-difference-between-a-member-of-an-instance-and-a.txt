Natural Text
In python, s are "just functions", and I can refer to them in two different ways:Both  and  are names that refer to the same object, which happens to be "just a function". Great.Now, say I have a :I know that  and  are not functions: they're bound mothods. This means that the  argument is implicit, and is always equal to . Because of this, I would understand that if  is a subclass of ,  would be false, because they're bound methods with different  arguments. But I don't understand why  yields . Shouldn't they be the same object, just like  and ?EDIT: This question is not the same as "What is the difference between @staticmethod and @classmethod in Python?". I know the difference between  and . I want to know one specific thing, which is not addressed in the "umbrella" question linked.
 and  are different objects because Python creates a new bound method object each time you refer to a non-static method via attribute access.For example,  is also .Similarly, you will get a new method object even if the instance stays the same: creates a new static method object, butWhen a static method object is retrieved from a class or a class  instance, the object actually returned is the wrapped object, which is  not subject to any further transformation.(from Data model)In this case  always returns the same  function object.


Answer URL
https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy
