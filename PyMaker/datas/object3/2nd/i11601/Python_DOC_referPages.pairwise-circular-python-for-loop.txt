Natural Text
Is there a nice Pythonic way to loop over a list, retuning a pair of elements? The last element should be paired with the first.So for instance, if I have the list [1, 2, 3], I would like to get the following pairs:1 - 22 - 33 - 1
A Pythonic way to access a list pairwise is: . To connect the last item to the first one:
I would use a  with  to achieve this.
I'd use a slight modification to the  recipe from the  documentation:This will simply keep a reference to the first value and when the second iterator is exhausted,  will fill the last place with the first value.(Also note that it works with iterators like generators as well as iterables like lists/tuples.)Note that @Barry's solution is very similar to this but a bit easier to understand in my opinion and easier to extend beyond one element.
I would pair  with : returns an iterable that yields the values of its argument in order, looping from the last value to the first.We skip the first value, so it starts at position  (rather than ).Next, we  it with the original, unmutated list.   is good, because it stops when any of its argument iterables are exhausted.  Doing it this way avoids the creation of any intermediate lists:  holds a reference to the original, but doesn't copy it.   operates in the same way.It's important to note that this will break if the input is an , such as a , (or a  or  in python-3), as advancing in one place (through ) will automatically advance the iterator in all the others.  This is easily solved using , which produces two independently operating iterators over the original iterable: can use large amounts of additional storage, for example, if one of the returned iterators is used up before the other is touched, but as we only ever have one step difference, the additional storage is minimal.
There are more efficient ways (that don't built temporary lists), but I think this is the most concise:
I would use a list comprehension, and take advantage of the fact that  is the last element.You don't need a temporary list that way.
Pairwise circular Python 'for' loopIf you like the accepted answer, you can go much more memory light with semantically the same code using :And this barely materializes anything in memory beyond the original list (assuming the list is relatively large):To use, just consume (for example, with a list):This can be made extensible to any width:and usage:Unlimited generation with  with You can also use  to avoid making a redundant cycle object:and now:This is incredibly efficient, an expected usage of  with , and elegant usage of , , and .Don't pass  directly to  unless you have saved your work and have time for your computer to creep to a halt as you max out its memory - if you're lucky, after a while your OS will kill the process before it crashes your computer. Pure Python Builtin FunctionsFinally, no standard lib imports, but this only works for up to the length of original list (IndexError otherwise.)You can continue this with modulo:
Amazing how many different ways there are to solve this problem.Here's one more. You can use the  recipe but instead of zipping with ,  it with the first element that you already popped off. Don't need to  when we just need a single extra value:
I like a solution that does not modify the original list and does not copy the list to temporary storage:Output:I can imagine this being used on some very large in-memory data.
This one will work even if the list  has consumed most of the system's memory. (If something guarantees this case to be impossible, then zip as posted by chepner is fine)or more generalizably (works for any offset  i.e.  )provided you are on a system with decently fast modulo division (i.e. not some pea-brained embedded system). There seems to be a often-held belief that indexing a list with an integer subscript is un-pythonic and best avoided. Why? 
This is my solution, and it looks Pythonic enough to me:prints:The generator function version:
How about this?
(As above with @j-f-sebastian's "zip" answer, but using itertools.)NB: EDITED given helpful nudge from @200_success. previously was:
Just another try
If you don't want to consume too much memory, you can try my solution:It's a little slower, but consume less memory.
L = [1, 2, 3]a = zip(L, L[1:]+L[:1])for i in a:    b = list(i)    print b
this seems like combinations would do the job.this would yield a generator. this can then be iterated over as suchthe results would look something like 


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/itertools.html#itertools-recipes
