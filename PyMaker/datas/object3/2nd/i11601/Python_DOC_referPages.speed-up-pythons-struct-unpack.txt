Natural Text
I am trying to speed up my script. It basically reads a pcap file with Velodyne's Lidar HDL-32 information and allows me to get X, Y, Z, and Intensity values. I have profiled my script using  and it is spending the most amount of time in my  function calls. In a small test (80 MB file) the unpacking portion takes around 56% of the execution time. I call the  function like this ( refers to the pcap file):The  function itself is defined like this:Any ideas on how I can speed up the process? By the way, I am using numpy for the X, Y, Z, Intensity calculations. 
Numpy lets you do this very quickly. In this case I think the easiest way is to use the  constructor directly: This returns separate arrays instead of the nested list, which should be much easier to process further. As input it takes a  object (in Python 2) or anything that exposes the buffer interface. Unfortunately, it depends on your Python version (2/3) what objects you can use exactly. But this method is very fast:
Compile a  ahead of time, to avoid the Python level wrapping code using the module level methods. Do it outside the loops, so the construction cost is not paid repeatedly.The  methods themselves are implemented in C in CPython (and the module level methods are eventually delegating to the same work after parsing the format string), so building the  once and storing bound methods saves a non-trivial amount of work, particularly when unpacking a small number of values.You can also save some work by unpacking multiple values together, rather than one at a time:As Dan notes, you could further improve this with , which would further reduce the amount of byte code execution and small slice operations.
You can unpack the raw  and  values together in one call. Especially because you're just putting them into a list together: that's what  does when it unpacks multiple values. In your case, you need to then multiple the  by , but you might save time by leaving this until later, because you can use  to parse the whole list of raw pairs in one call. That function gives you a generator, which can be sliced with  and then turned into a list. Something like this:Unfortunately this is a little harder to read, so you might want to find a way to spread this out into more lines of code, with more descriptive variable names, or add a comment for the future when you forget why you wrote thisâ€¦


Answer URL
https://docs.python.org/3/library/struct.html#struct.iter_unpack
https://docs.python.org/3/library/itertools.html#itertools.islice
