Natural Text
I am working on a system which is embedding a Python interpreter, and I need to construct a  given a string from the C API.I have a  representing a dictionary, in the proper format for  to work properly from within Python, ie: .  Currently, this is being passed into Python as a  using the  api (representing a string), so in my python interpreter, I can successfully write:I would like to change this to automatically "eval" the  on the C side, and return a  representing a completed dictionary.  How do I go about converting this string into a dictionary in the C API?
There are two basic ways to do this.The first is to simply call  the same way you do in Python. The only trick is that you need a handle to the  module, because you don't get that for free in the C API. There are a number of ways to do this, but one really easy way is to just import it:(This is untested code, and it at least leaks references, and doesn't check for NULL return if you want to handle exceptions on the C sideâ€¦ But it should be enough to get the idea across.)One nice thing about this is that you can use  in exactly the same way as  (which means you get some free validation); just change  to , and  to . But the real win is that you're doing exactly what  does in Python, which you already know is exactly what you wanted.The alternative is to use the compilation APIs. At the really high level, you can just build  a Python statement out of  and  it. Below that, use  to parse and compile the expression (you can also parse and compile in separate steps, but that isn't useful here), then  to evaluate it in the appropriate globals and locals. (If you're not tracking globals yourself, use the interpreter-reflection APIs  and .) Note that I'm giving the super-simplified version of each function; often you want to use one of the sibling functions. But you can find them easily in the docs.


Answer URL
