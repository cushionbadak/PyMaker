Natural Text
My question is about python 3.0 strings.My understanding is that for the line , the charcter 'a' is encoded (using utf-8 - for example) and stored in the str object. If UTF-8 representation of 'a' is 1 byte the string is 1 byte long. Am I right?if the above is true what happens when we read a binary file using read(). Suppose I have a two byte file with two bytes of binary data and I read it in a string using read command likenow  will be two bytes long and each byte will be what was stored in the fileName. Am I right?If I am right in the above point then the str object is not in any particual encoding format (like UTF, etc.), So what does it mean that python strings are always unicode? Also what will happen if I call str.encode(). It will make no sense?As the  object read from file is actually a array of bytes. Is there any way to convert it to bytearray type?
You are confused. "Encodings" pertain to byte strings, not to unicode strings. Meaningful statements: "This byte string is utf-8 encoded.", "This byte string is 2 bytes long." Meaningless statements: "This unicode string is utf-8 encoded", "This unicode string is 2 bytes long" means "create a unicode string 'a' and a reference to it named ". Unicode strings are of course stored in some encoding because it needs to exist as bytes in memory, but that is not relevant. All your code treats it as if it has no encoding at all--it has been abstracted away from bytes. A unicode string is a sequence of unicode code points (i.e. of integers that represent characters).Yes and no.  here (the return value of ) is a byte string, not a unicode string. .Your byte-string  possesses an unknown encoding and must be decoded to produce a unicode string. Byte strings don't have an  method because it is meaningless--they are either already an encoding of a unicode string, or they are not representing a unicode string at all (e.g. an image).It's not an array of bytes, it's a byte-string. A  is a mutable list of bytes. You can produce a bytearray with , but bytearrays are intended for fairly specialized uses (e.g., to avoid copying for send-recv buffers), not casual use. Normally you just want a byte string.
When you read a file in binary mode, the value returned from the  method is a  object, not a  object. The documentation covers this in depth.
Python strings store Unicode codepoints.Codepoints are not the same thing as bytes. Bytes are a computer representation of numbers (most commonly between 0 and 255), and those numbers can be translated to codepoints through the process of decoding, and in the other direction with encoding. Python 3 strings contain codepoints, one for each character in the text.Python source code can define string literals using a series of bytes, that the interpreter decodes to unicode using the UTF-8 codec by default, but you can set other codecs at the top of the file. On disk, the letter  in UTF-8 encoding is indeed just one byte, that is the nature of the UTF-8 standard.If you read a file in text mode, Python applies the decoding process for you automatically, but when you open it in binary mode, no decoding is done and you get a  object instead. The contents of that object should reflect the contents of the file exactly. Note that it is not of type , it is not unicode, it is not even a Python string. To turn bytes into a string you'd need to explicitly decode with the  method.A  is trivially created from a  value, just call  on it.


Answer URL
