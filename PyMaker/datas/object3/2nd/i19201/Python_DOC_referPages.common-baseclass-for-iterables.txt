Natural Text
I'm trying to create a method which only accepts an iterable parameter, such as , ,  or .Here's my code:However, I was wondering if there's an easier way, such as  but I couldn't find anything.I already tried finding baseclass for  etc. but they all seem to derive from :Is this possible or do I have to stick with the awful  loop?
Yes, use :However, I'd just have the method assume it is passed an iterable, it's the responsibility of the caller to ensure the correct type is passed in.The  module is new in Python 3.3; its contents formerly lived in the  module instead, albeit that the names are still available in the old location even in Python 3.3 and up.
One weakness of the  option is it can't cope with custom iterable classes like this...It's often claimed that the 'Pythonic' way of doing this is to use duck typing, i.e. to try treating the object as an iterable, and handling the exception if it fails. For example......however, both methods have the weakness of treating strings to be the same thing as, say, lists, which isn't usually what you want. Usually you want to test for an iterable container, which is slightly different, so it's common to see code which treats strings as a special case like this......which is a little messy, but gets the job done.


Answer URL
https://docs.python.org/3/library/collections.abc.html
https://docs.python.org/3/library/collections.abc.html
