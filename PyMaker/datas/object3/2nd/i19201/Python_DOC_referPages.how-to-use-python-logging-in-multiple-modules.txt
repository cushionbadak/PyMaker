Natural Text
I was wondering what the standard set up is for performing logging from within a Python app.I am using the Logging class, and I've written my own logger class that instantiates the Logging class. My main then instantiates my logger wrapper class. However, my main instantiates other classes and I want those other classes to also be able to write to he log file via the logger object in the main.How do I make that logger object such that it can be called by other classes? It's almost like we need some sort of static logger object to get this to work.I guess the long and short of the question is: how do you implement logging within your code structure such that all classes instantiated from within main can write to the same log file? Do I just have to create a new logging object in each of the classes that points to the same file?
I don't know what you mean by the  class - there's no such class in Python's built-in logging. You don't really need wrappers: here's an example of how to do logging from arbitrary classes that you write:Generally it's not necessary to have loggers at class level: in Python, unlike say Java, the unit of program (de)composition is the module. However, nothing stops you from doing it, as I've shown above. The script, when run, displays:Note that code from both classes logged to the same file, myapp.log. This would have worked even with A and B in different modules.
Try using logging.getLogger() to get your logging object instance:http://docs.python.org/3/library/logging.html#logging.getLoggerAll calls to this function with a given name return the same logger instance. This means that logger instances never need to be passed between different parts of an application.UPDATE:The recommended way to do this is to use the getLogger() function and configure it (setting a handler, formatter, etc...):If you really need to extend the logger class take a look at logging.setLoggerClass(klass)UPDATE 2:Example on how to add a custom logging level without changing the Logging class:Note that adding custom level is not recommended: http://docs.python.org/2/howto/logging.html#custom-levelsDefining a custom handler and maybe using more than one logger may do the trick for your other requirement: optional output to stderr.


Answer URL
