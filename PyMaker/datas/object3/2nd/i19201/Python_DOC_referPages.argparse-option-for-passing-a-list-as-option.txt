Natural Text
I am trying to pass a list as an argument to a command line program. Is there an  option to pass a list as option?Script is called like below
TL;DRUse the  option or the  setting of the  option (depending on how you want the user interface to behave).nargs takes 1 or more arguments,  takes zero or more.appendWith  you provide the option multiple times to build up the list.Don't use !!! - There is probably no situation where you would want to use  with . Ever.Let's take a look in more detail at some of the different ways one might try to do this, and the end result.Here is the output you can expect:Takeaways:Use  or  can be more straightforward from a user perspective, but it can be unintuitive if there are positional arguments because  can't tell what should be a positional argument and what belongs to the ; if you have positional arguments then  may end up being a better choice.The above is only true if  is given , , or . If you provide an integer number (such as ) then there will be no problem mixing options with  and positional arguments because  will know exactly how many values to expect for the option.Don't use quotes on the command line1Don't use , as it will return a list of listsThis happens because under the hood  uses the value of  to coerce each individual given argument you your chosen , not the aggregate of all arguments.You can use  (or whatever) to get a list of ints (or whatever)1: I don't mean in general.. I mean using quotes to pass a list to  is not what you want. 
I prefer passing a delimited string which I parse later in the script. The reasons for this are; the list can be of any type  or , and sometimes using  I run into problems if there are multiple optional arguments and positional arguments.Then,or,will work fine. The delimiter can be a space, too, which would though enforce quotes around the argument value like in the example in the question.
Additionally to , you might want to use  if you know the list in advance:
If you are intending to make a single switch take multiple parameters, then you use . If your example '-l' is actually taking integers:ProducesIf you specify the same argument multiple times, the default action () replaces the existing data.The alternative is to use the  action:Which producesOr you can write a custom handler/action to parse comma-separated values so that you could do
In ,  is just a callable object that receives string and returns option value.This will allow to:
Using nargs parameter in argparse's add_argument methodI use nargs='' as an add_argument parameter. I specifically used nargs='' to the option to pick defaults if I am not passing any explicit argumentsIncluding a code snippet as example:Example: temp_args1.pyPlease Note: The below sample code is written in python3. By changing the print statement format, can run in python2Note: I am collecting multiple string arguments that gets stored in the list - opts.alistIf you want list of integers, change the type parameter on parser.add_argument to intExecution Result:
Maybe the simplest answer


Answer URL
https://docs.python.org/3/library/argparse.html
