Natural Text
Hello everyone I have a noob question. how do I set up the following code to print:The numerator is increasing \ denominator decreasing  I have the following:but printshow do I get Thank you for your help and guidance. 
I presume you want the strings instead of the numerical values, correct?Read this documentation to get a grasp of it.  Essentially, it's formatting the string, using the two pairs of curly braces as placeholders, and passing in the value 31-j in the first slot, and j in the second.Surely there is a more elegant way to do it, but this is the quick and dirty method.
You only need one loop! The denominator is always 31 minus the numerator.
I think at leastzipping together  and  results in a new tuple you then iterate over this putting each numerator and denominator into a string resulting in a list like , we do this with format strings  , although it would be better form to use  instead but thats another storythen you simply join this list using  as the glue
What's happening here is that your numbers are being evaluated to a floating-point number before being printed. Since you want to print them without evaluating, you should be inserting them into a string. The following line demonstrates how to insert variables into the output without evaluating them:See http://docs.python.org/release/2.5.2/lib/typesseq-strings.html for information about how to format strings for the print function.However, this still puts each result on a separate line, because the print function automatically inserts a new line. You could build a string with the following loop (notice how you can neatly pack it into one loop rather than two because you can get the denominator by subtracting):and this will give you "1/30 + 2/29 + ... + 30/1 + ", but this still includes the last plus sign and surrounding spaces. To fix that, change the last line towhich removes those last characters.See http://docs.python.org/2/library/string.html#formatstrings for information about how to use the format function.
I'm not sure exactly what you're trying to do, but you can do it with just a single loop.  Each time through the loop, the denominator is just 31 minus the numerator:When you're building a result - either adding to a sum, or appending to a string, or outputting something on every iteration - you can do that more succinctly with list comprehensions and list functions.  For example, instead of something like this:You can just do this:And instead of this:You can just do this:Putting those concepts together, here are three possibilities I see for what you're trying to do:Print out the literal string ...:Evaluate that as an arithmetic expression and print the result:... but as a fraction instead of a decimal:...


Answer URL
