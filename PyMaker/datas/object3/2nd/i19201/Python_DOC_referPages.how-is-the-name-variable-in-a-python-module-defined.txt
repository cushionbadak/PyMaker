Natural Text
I'm aware of the standard example: if you execute a module directly then it's  global variable is defined as . However, nowhere in the documentation can I find a precise description of how  is defined in the general case. The module documentation says...Within a module, the module's name (as a string) is available as the value of the global variable . ...but what does it mean by "the module's name"? Is it just the name of the module (the filename with  removed), or does it include the fully-qualified package name as well?How is the value of the  variable in a Python module determined? For bonus points, indicate precisely where in the Python source code this operation is performed.
It is set to the absolute name of the module as imported. If you imported it as , then  is set to .The name is determined in the  module, but because that module handles various different types of imports (including zip imports, bytecode-only imports and extension modules) there are several code paths to trace through. Normally,  statements are translated to a call to , which is by default implemented as a call to . See the  documentation to get a feel for what the arguments mean. Within  relative names are resolved, so you can chase down the  variables there if you want to.The rest of the module handles the actual imports, with  creating the actual namespace object and setting the  key, but you can trace that  value back to . By creating a module object, it's  value is set in the  object constructor.
The  variable is an attribute of the module that would be accessible by the name.Example self created module that scetches the import mechanism:Lines from types module:


Answer URL
