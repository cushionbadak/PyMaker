Natural Text
The question came up, when I started implementing asynchronous set and get operations on an object using the  module like this:But now, setting a value and waiting for it becomes a little bit awkward to use and semantically "incorrect"although I feel it's still valid, because the  object is at the lowest level and further abstractions could be built on top of the futures.So, to sum up my problem:Are futures the right kind of abstractions to get/set values asynchronously from an object? Especially for setters which do not return any value?Should I add a  parameter to  in order to get rid of the  call? I have my doubts with this approach, because then I'd encourage not to use futures at all.How would you do it?
If the action must be completed before you can continue past a certain point in the code, you need some way to block/join/wait.Python properties are much preferred to Java-style getters and setters (like  and ). Because properties masquerade as regular attributes, it'd be bad style to have asynchronous code triggered by a property.Many people find that object-orientation gets them into trouble with asynchronous code and they prefer to use a more functional style. Luckily, Python supports using either programming paradigm.


Answer URL
https://docs.python.org/3/library/functions.html#property
