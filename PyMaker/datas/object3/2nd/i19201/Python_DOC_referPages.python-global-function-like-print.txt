Natural Text
This question already has an answer here:create a global function in python                    1 answer                How to add builtin functions                    1 answer                I am looking to make a global function in python 3.3 like the print function. In particular we have embedded python in our own application and we want to expose a simple 'debug(value)' global function, available to any script. It is possible for us to do this by attaching the function to a module, however, for convenience it would be easier for it to be global like 'print(value)'.How do you declare a global function that becomes available to any python file without imports, or is this a black box in python? Is it possible to do from the C side binding?
This is almost always a bad idea, but if you really want to do it…If you print out or otherwise inspect the  function, you'll see it's in the module . That's your clue. So, you can do this:debugmodule.py:Now, after an , any other module can just call  instead of .Is it possible to do from the C side binding?In CPython, C extension module can basically do the same thing that a pure Python module does. Or, even more simply, write a  in C, then a  that imports it and copies  into .If you're embedding CPython, you can do this just by injecting the function into the  module before starting the script/interactive shell/whatever, or at any later time.While this definitely works, it's not entirely clear whether this is actually guaranteed to work. If you read the docs, it says:As an implementation detail, most modules have the name  made available as part of their globals. The value of  is normally either this module or the value of this module’s  attribute. Since this is an implementation detail, it may not be used by alternate implementations of Python.And, at least in CPython, it's actually that  module or dict that gets searched as part of the lookup chain, not the  module. So, it might be possible that another implementation could look things up in  like CPython does, but at the same time not make  (or user modifications to it) automatically available in , in which case this wouldn't work. (Since CPython is the only 3.x implementation available so far, it's hard to speculate…)If this doesn't work on some future Python 3.x implementation, the only option I can think of is to get your function injected into each module, instead of into builtins. You could do that with a PEP-302 import hook (which is a lot easier in 3.3 than it was when PEP 302 was written… read The import system for details).In 2.x, instead of a module  that automatically injects things into a magic module , there's just a magic module  (notice the missing ). You may or may not have to  it (so you might as well, to be safe). And you may or may not be able to change it. But it works in (at least) CPython and PyPy.So, what's the right way to do it? Simple: instead of , just  in all of your other modules. That way it ends up being a module-level global in every module that needs it.


Answer URL
