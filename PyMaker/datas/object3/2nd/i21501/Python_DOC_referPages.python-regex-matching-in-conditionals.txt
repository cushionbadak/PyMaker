Natural Text
I am parsing file and I want to check each line against a few complicated regexs.  Something like thisOf course, to do the stuff, I need the match objects.  I can only think of three possibilities, each of which leaves something to be desired.which requires doing the complicated matching twice (these are long files and long regex :/) which gets terrible as I indent further and further.which just looks weird.What's the right way to do this?
You could define a function for the action required by each regex and do something like
I like Tim's answer because it separates out the per-regex matching code to keep things simple. For my answer, I wouldn't put more than a line or two of code for each match, and if you need more, call a separate method.
First off, do you really need to use regexps for your matching?  Where I would use regexps in, e.g., perl, I'll often use string functions in python (find, startswith, etc).If you really need to use regexps, you can make a simple search function that does the search, and if the match is returned, sets a store object to keep your match around before returning True.e.g.,
In this particular case there appears to be no convenient way to do this in python.if python would accept the syntax: then all would be fine, but apparently youcannot do that
Your last suggestion is slightly more Pythonic when wrapped up in a function:That said, you can get closer to what you want using a simple container class with some operator overloading class:
I would break your regex up into smaller components and search for simple first with longer matches later. something like:
Why not use a dictionnary/switch statement ?
FWIW, I've stressed over the same thing, and I usually settle for the 2nd form (nested s) or some variation. I don't think you'll find anything much better in general, if you're looking to optimize readability (many of these answers seem significantly less readable than your candidates to me).Sometimes if you're in an outer loop or a short function, you can use a variation of your 3rd form (the one with  statements) where you either  or , and that's readable enough, but I definitely wouldn't create a  block just to avoid the "ugliness" of the other candidates.
My solution with an exemple; there is only one  that is performed:result
Make a class with the match as state. Instantiate it before conditional, this should store the string that you are matching against as well.
You can define a local function that accepts a regex, tests it against your input, and stores the result to a closure-scoped variable:I'm not sure how Pythonic that approach is, but it's the cleanest way I've found to do regex matching in an if-elif-else chain and preserve the match objects.Note that this approach will only work in Python 3.0+ as it requires the PEP 3104  statement. In earlier Python versions there's no clean way for a function to assign to a variable in a non-global parent scope.It's also worth noting that if you have a big enough file that you're worried about running a regex twice for each line you should also be pre-compiling them with  and passing the resulting regex object to your check function instead of the raw string.
You can define a class wrapping the match object with a call method to perform the match:Then call it in your conditions and use it as if it was a match object in the resulting blocks:This should work in nearly any Python version, with slight adjustments in versions before new-style classes. As in my other answer, you should use  if you're concerned about regex performance.


Answer URL
https://docs.python.org/3/library/re.html#re.compile
