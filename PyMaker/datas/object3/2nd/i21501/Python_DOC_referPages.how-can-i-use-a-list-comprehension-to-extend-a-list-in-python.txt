Natural Text
This question already has an answer here:list.extend and list comprehension                    6 answers                I'm not experienced in Python, and I often write code that (simplified) looks like this:Then after my test passes, I refactor to But suppose it turns out a little different, and my loop looks like this:where the  list returns a list. What is the most Pythonic way to accomplish this? Obviously, the previous list comprehension would give a list of lists.
Much simpler and cleaner with list comprehension:
Do you mean something like this?or shorter code (but not optimal):or the same:Thanks to @eyquem for the hint (if using Python 2.x):
Python's in-place add operator (, available as  in  module) is equivalent of  for list. Pair it with  to get what you want.
I think the answers involving add or iadd run in quadratic time, which probably isn't good.  I'd try:
I don't think there is special syntax for this case. But you could make the for loop shorter:If you insist, you could use functional programming to flatten the list:But I wouldn't call this pythonic, I think it's harder to read than a for loop.
Functionally, you can use  with . For an input list :If you need an iterator, simply remove the  call. Here's a demo:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
https://docs.python.org/3/library/functions.html#map
