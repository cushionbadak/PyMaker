Natural Text
I find myself writing a lot of functions that I want to be able to operate on arguments , and on collections of e.g. .Is there a clear and simple decorator, pattern or technique for writing functions like this? Here's an arbitrary example:
Python 3.4 introduces single-dispatch generic functions with the  decorator, providing a simple way to implement different behaviours when calling the same function with different argument types. For example, to allow your  function to accept iterables:The 'base' version of your function is decorated with , transforming it into a generic function. Next, a function  is defined to call  on each element in an iterable, and registered to the generic function with .Although the example above uses  for the sake of maximum generality, it's also possible to register a function for multiple concrete types:Using the technique above, it's possible to write a decorator  which transforms an arbitrary function into a generic function, and registers another function to it to handle iterables appropriately:Example usage:CAVEAT: As pointed out by Blckknght in comments, you'll get unexpected results if you call a function decorated with  intending it to run in "single" mode, but passing it an argument that happens to be iterable, like a string.That's really a result of the ambiguity inherent in the behaviour requested in the question rather than the implementation outlined here, but it's worth bearing in mind when considering whether to use this technique.


Answer URL
https://docs.python.org/3/library/functools.html#functools.singledispatch
https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable
