Natural Text
I would like to combine  and  from  in one object, which shall be an ordered, default dict. Is this possible?
The following (using a modified version of this recipe) works for me:
Here is another possibility, inspired by Raymond Hettinger's super() Considered Super, tested on Python 2.7.X and 3.4.X:If you check out the class's MRO (aka, ), you'll see this:meaning that when an instance of  is initialized, it defers to the 's init, but this one in turn will call the 's methods before calling , which is precisely what we want.
Here's another solution to think about if your use case is simple like mine and you don't necessarily want to add the complexity of a  class implementation to your code.( is my desired default value.)Note that this solution won't work if one of your requirements is to dynamically insert new keys with the default value.  A tradeoff of simplicity. Update 3/13/17 - I learned of a convenience function for this use case.  Same as above but you can omit the line  and just:Output:And if your keys are single characters, you can just pass one string:This has the same output as the two examples above.You can also pass a default value as the second arg to .
If you want a simple solution that doesn't require a class, you can just use  or . If you only get / set from a few places, say in a loop, you can easily just setdefault.It is even easier for lists with :But if you use it more than a few times, it is probably better to set up a class, like in the other answers.
A simpler version of @zeekay 's answer is:
A simple and elegant solution building on @NickBread. Has a slightly different API to set the factory, but good defaults are always nice to have.
Another simple approach would be to use dictionary  method
Inspired by other answers on this thread, you can use something like,I would like to know if there're any downsides of initializing another object of the same class in the missing method. 
i tested the default dict and discovered it's also sorted!maybe it was just a coincidence but anyway you can use the sorted function:i think it's simpler


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.setdefault
https://docs.python.org/3/library/stdtypes.html#dict.get
