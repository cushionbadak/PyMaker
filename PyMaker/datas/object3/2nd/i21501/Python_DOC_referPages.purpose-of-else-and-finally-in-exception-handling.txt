Natural Text
Are the  and  sections of exception handling redundant? For example, is there any difference between the following two code snippets?and More generally, can't the contents of  always be moved into the , and can't the contents of  just be moved outside the try/catch block? If so, what is the purpose of  and ? Is it just to enhance readability?
The idea is that you keep the code for which you are handling exceptions as small as possible. Anything in the  block could get moved into the , yes, but then you might end up catching an exception when you really want it to be raised. You may have successfully opened the file, but if the  causes an  and it's in the , that will be caught too.From the horse's mouth:The use of the  clause is better than adding additional code to the  clause because it avoids accidentally catching an exception that wasn’t raised by the code being protected by the  statement.As the other two answers have already said, the  block is there for code that will get executed whether or not there is an exception raised anywhere, including inside the  or the , and whether or not that exception is handled. The canonical use case for this is making absolutely sure that a file handle is closed, no matter what.*The official phrasing of this:When an exception has occurred in the  clause and has not been handled by an  clause (or it has occurred in a  or  clause), it is re-raised after the  clause has been executed. The  clause is also executed “on the way out” when any other clause of the  statement is left via a , , or  statement.*This particular use has been somewhat obviated by context managers ( blocks).
 is executed regardless of whether the statements in the try block fail or succeed.  is executed only if the statements in the try block don't raise an exception.
No matter what happens, the block in the  always gets executed. Even if an exception wasn't handled or the exception handlers themselves generate new exceptions.
If you move the contents of the  block inside the  block, you will also catch exceptions that might happen during the  block.  If the linein your example throws an , your first code snippet won't catch that error, while your second snippet will.  You try to keep  blocks as small as possible generally to really only catch the exceptions you want to catch.The  block gets always executed, no matter what.  If for example the  block contains a  statement, a  block will still be executed, while any code beneath the whole / block won't.


Answer URL
https://docs.python.org/3/tutorial/errors.html
