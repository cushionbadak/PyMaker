Natural Text
In my test files, I would like to mock a helper function that I have contained within a module.  I am able to 'successfully' (ie no compile or run time errors as everything is linked properly) mock the function, but the mock does not trickle through to the class I am testing.I have looked into dependency injection, but I am not exactly sure how to inject my module which only has one function mocked for now.  Eventually I plan on mocking almost all of the functions; I just want to get a baseline working first.Here is what I have so farThe assert command is failing and reporting that the method was never called. I am assuming the mock never makes it through to my_obj.I understand that I could create a flag in the init method of MyObj like testing=False and import modules accordingly, but how could I import the module that was mocked only in the test files?  This is the approach I am thinking about right now, but I am open to other implementations that get me the same result.In response to Daniel Roseman's comment,In MyOBJ, I have the following lineHowever, I am getting the error My patch line now looks likeAny help is always appreciated; Thank you!
I guess the problem is that mock_hf is not what you want to patch.try with:
As mentioned in Daniel Roseman's comment to my original post, the issue was with where I was patching.I should have been patching MyObj.helper_function.  Additionally, I had, in the init.py, a from MyObj import MyObj.  This caused me to only be able to reference the MyObj class in my tests, but I needed to overwrite the helper_function for the whole file.  I had to remove that line.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#where-to-patch
