Natural Text
Assume  is the parent class of  and  is an instance of . Then an overriden method of  can be called with super: .The docs state " returns " in its basic invocation.It should follow that , but that's not the case (interactive version):So where did I go wrong? Does the super mechanism not work for magic methods? Does  not invoke  in this case? Is it related to this paragraph:Note that  is implemented as part of the binding process for explicit dotted attribute lookups such as . It does so by implementing its own  method for searching classes in a predictable order that supports cooperative multiple inheritance. Accordingly,  is undefined for implicit lookups using statements or operators such as .
 doesn't look up the  method through the normal attribute lookup procedure. Instead, it performs a direct search for the  method in the s of its argument's class hierarchy, in MRO order. This finds , which gives .However, when you look up  manually, that goes through , the hook  uses to provide its special attribute lookup behavior. The lookup through  will resolve to  and call that.Consider this class, which illustrates the difference (I hope):The problem in this case and likewise for  is that these are proxies that rely on  to forward it. So any function or method that doesn't go through  doesn't forward. And  is such a function.Just for completeness because it was mentioned in the comments and the other answer.But  isn't equivalent to  because  even avoids the normal attribute lookup procedure of the "function on the class". It only checks the  (or if that's NULL the ) slot of the class. So it doesn't even invoke  of the metaclass, which  would do:However in the absense of a metaclass it might be helpful to think of  as equivalent to . But while (potentially) helpful it's not correct.
The docs are wrong. is actually equivalent to .If you , you get the obvious result.(even this might be oversimplified in the case of weird metaclasses)


Answer URL
https://docs.python.org/3/library/functions.html#super
https://docs.python.org/3/library/stdtypes.html#str
https://docs.python.org/3/reference/datamodel.html#object.__getattribute__
