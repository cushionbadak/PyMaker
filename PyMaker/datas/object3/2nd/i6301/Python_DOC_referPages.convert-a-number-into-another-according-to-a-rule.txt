Natural Text
i have a sequence of numbers like:I want to convert them into a form where they start from the lowest number possibleExample:I tried to do:But it converts numbers like 5675 to 1234, so it doesn't work.Is there a better way to do this and what am i doing wrong?
This can be done with dictionaries:Edit: So I might have misinterpreted the question. From the example cases I presumed it meant convert the first digit appearing to a 1, the second to a 2, etc..
Demo:
You only check whether the digit is equal to the last digit, but that does not work for, e.g., . You have to keep track of all the past digits, using e.g. a dictionary, as in @wjmccann answer.You can make this a bit shorter, though, by combining a  with a . The  will memorize already seen digits, and the  provides values for new ones.Or even shorter, as suggested in comments:This again uses , but uses  from a list of digits as the factory function, removing elements from the end of the list as new digits are needed.
One line solution using :After being misled about what was trying to be achieved, this is my second answer which I think meets the requirements rather succinctly.and some examples:The  takes advantage of the fact that  will essentially give you the  of a  directly - without the need for a .First, we remove the  from the  using . Then from this, we can check the  of each  in that to get its . We need to add  to the  as the first one should be  (not ).
TL;DRThe following code works for your requirements, making use of .#driver values : 
if code[index] == code[index-1]:newCode.append(1)           else: digit += 1   newCode.append(digit) 


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#dictionaries
https://docs.python.org/3/library/collections.html#collections.defaultdict
