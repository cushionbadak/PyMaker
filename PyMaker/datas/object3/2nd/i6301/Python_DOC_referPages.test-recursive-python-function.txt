Natural Text
I have a recursive function that I'm looking to test, however I'm having difficulty limiting the recursive call during testing. For example, below is a simple example of a recursive function that calls a bool_function(n) to check if it should break the recursive loop. What would be the best way to test or mock bool_function(n) so that it is true for the first iteration and false for any call after? 
You could always implement a class to encapsulate the state and give you more flexibility, here's a sketch:
If, beside other suggested solutions, you really want to mock it, and want to do it yourself (without the mocking libraries) by just replacing the mocked function.If these are two separate modules, then instead of  &  just use the .If you want to use the mocking library, then it depends on which library you use. If that is , then you should play with  &  (see the manual). The same approach: mock it, and un-mock it from inside the side effect on the first use.
I generally try not to leave debug code around unless I expect to use it regularly, but you could just include a default argument for the sake of debugging to force the execution to follow a particular path.This naturally implies that you're also externally testing 
Just pass the function as an argument. If function is None you can apply some default behavior if that is desired. This is a common approach used in  (e.g. Django queries or Peewee queries) in most of languages. A function that returns boolean is usually called a predicate


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock
