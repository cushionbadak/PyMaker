Natural Text
I have a dataframe as below : For example , I want to replace all character 'o' to 'a':Then I do It give back what I need .However, when I want to replace 'o' to  , It will change entire string to . Is there any explanation from pandas' document? I can find some information through the source code .More Information:(It will change whole string to ) 
NaN is consistently used as a placeholder for missing, when replacing part of a string with "missing" it can only mean the entire entry is compromised. I've heard this called NaN pollution (or similar, will see if I can find some references), in that if NaN touches the data is compromised.That said, that's not always the case:In some languages you'll see skipna=False as the default behaviour, some vehemently argue that NaN should always pollute all data. Pandas takes a somewhat more pragmatic approach...The real question is what do you expect it to do in the case of NaN?
In python there are cmath.nan and math.nan.CPython implementation detail: The math module consists mostly of thin wrappers around the platform C math library functions. Behavior in exceptional cases follows Annex F of the C99 standard where appropriate. The current implementation will raise ValueError for invalid operations like sqrt(-1.0) or log(0.0) (where C99 Annex F recommends signaling invalid operation or divide-by-zero), and OverflowError for results that overflow (for example, exp(1000.0)). A NaN will not be returned from any of the functions above unless one  or more of the input arguments was a NaN; in that case, most functions  will return a NaN, but (again following C99 Annex F) there are some  exceptions to this rule, for example pow(float('nan'), 0.0) or  hypot(float('nan'), float('inf')).In short word, when your input arguments have  it would return And also:Note that Python makes no effort to distinguish signaling NaNs from  quiet NaNs, and behavior for signaling NaNs remains unspecified.  Typical behavior is to treat all NaNs as though they were quiet.


Answer URL
https://docs.python.org/3/library/cmath.html?highlight=nan#cmath.nan
https://docs.python.org/3/library/math.html?highlight=nan#math.nan
https://docs.python.org/3/library/math.html?highlight=nan#math.nan
