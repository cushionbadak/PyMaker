Natural Text
I cannot figure out this behavior. I'm using Python 3.6.4.In here, I have 4 async functions. In , I call  and turn the coroutine into a task. On the others (, , ) I didn't call , I just created the coroutine and passed them into a list and then passed the list into the event loop.I left  out of the list I passed into the event loop. So I was under the impression test1 would not run, but in my output, it clearly did. Can someone explain to me why  still outputed when it wasn't inside the event loop?Output
As others pointed out,  will add the task to the default event loop, to run at the next opportunity.  converts an arbitrary awaitable into an , which in case of a coroutine object is accomplished by wrapping it into a  (a subclass of ) with a call to . The task will run the next time the event loop spins regardless of whether the code that calls  stores a reference to the returned future.The other important thing to notice is that  means "submit  to the event loop and run the loop until  completes", it does nothing to prevent tasks added before the call to  from running.In Python 3.7, there is a new function  that creates a new event loop and submits the given coroutine to it. Replacing  with  would produce the behavior you expect.
From the docs for :Schedule the execution of a coroutine objectWhen you call , the coroutine is schedule and will be eligible to run whenever the event loop is running.
From the docs:Calling a coroutine does not start its code running – the coroutine object returned by the call doesn’t do anything until you schedule its execution. There are two basic ways to start it running: call  or  from another coroutine (assuming the other coroutine is already running!), or schedule its execution using the  function or the  method.As @dirn's answer implies,  by itself does not start the task unless there is an event loop already running. However, the subsequent loop kickoff with  does start the task.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.ensure_future
https://docs.python.org/3/library/asyncio-task.html#asyncio.Future
https://docs.python.org/3/library/asyncio-task.html#asyncio.Task
https://docs.python.org/3/library/asyncio-task.html#asyncio.run
https://docs.python.org/3/library/asyncio-task.html#asyncio.ensure_future
