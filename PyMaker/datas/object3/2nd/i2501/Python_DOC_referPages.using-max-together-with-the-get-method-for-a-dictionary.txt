Natural Text
So, I was watching this presentation and it introduced me to this awesome way of finding the maximum value in a dictionary. This probably isn't breaking any ground for most folks on here, but here it is:I don't understand quite how it works. The 'get' method returns the value for a key, if the key exists in the dictionary. So does the 'max' iterate through each key, find the associated value and then return the key associated with the maximum value? How does it work when the dictionary has multiple maximum values?So, to experiment and confuse myself further, I tried this:So, why did it return '1' instead of '2'? Please un-confuse this soul!
Don't confuse the idea of the key of the dictionary, with the "key-function"When two values are the same,  or  will return the first matching key. Since iteration of dict is unordered until Python3.6, it's not a good idea to rely on which particular key would be returnedIn your last example, you are asking the dict to use the values as keys to the dict. This will usually return  unless the value also happens to be a key (This will never happen if all the keys are str and all the values are int, for example). In Python2, since  isn't greater than , the first key that is encountered will be the one that is eventually returned. In Python3, doing this comparison throws an exception.
When you call:the  function internally iterates over the first parameter; for a dictionary this will iterate over the keys of the dictionary, in... some order, this is where things get hairy.before Python 3.6, this order was arbitrary and not guaranteed to be any specific orderin the CPython implementation of Python 3.6, the order was changed - as an implementation detail - to be the order in which the keys were inserted into the dictionary. (In your case, the order in which they're written in the literal, so , , , as of Python 3.7, this behaviour is guaranteed by the language specification.(See also the Python documentation on the  type.)Now we know that the  function will see two possible keys that map to the maximum value,  and , in this order. The documentation for the  function states:If multiple items are maximal, the function returns the first one encountered.So in Python 3.7 as well as CPython 3.6, what is returned depends on the order in which the keys are inserted into the dictionary:In Python 3.5, which maximum will be the first encountered is arbitrary, but it will be the first key with a maximum value seen in In Python 2.7, the behaviour of the  function I cited above isn't specified in the documentation, so who knows really.As for your second example, it really plain doesn't make sense, so I'll just rush past it:  will return  when you pass it a key that doesn't exist in the dictionary. In Python 2.x, it was allowed to compare  with  using the  operator that  uses to determine the maximum; I'm guessing since it compares two same objects, they were considered equal and thus the result of that comparison was , and every item in your case would be considered the "maximum". Since the order of the keys is unspecified in Python 2.x, and neither is which one is returned by , the result you get is essentially arbitrary. Not that it matters, since there is no sense the whole thing could be making.You could prevent this by avoiding the use of , and writing more assertive code that fails early because it's clear accessing a key that doesn't exist in the dictionary is a mistake:


Answer URL
https://docs.python.org/3/library/stdtypes.html#mapping-types-dict
https://docs.python.org/3/library/functions.html?highlight=max#max
