Natural Text
I understand that conditional expressions (or ternary operators) are lazy in Python. They represent conditional execution rather than conditional selection. In other words, only one of  or  is evaluated in the following:What I'm interested to know is how this is implemented internally. Does Python convert to an  statement as below and, if so, at what stage does this conversion occur?Or is the ternary operator actually a distinct and separate expression, defined entirely separately? If so, can I access the CPython code for conditional expressions?I've looked at the following which explain what the ternary operator does, but none of them make clear how they are implemented:Does Python have a ternary conditional operator?Putting a simple if-then-else statement on one linepython ? (conditional/ternary) operator for assignmentsIs there an equivalent of C’s ”?:” ternary operator?Conditional expressionsEdit: You can assume CPython reference implementation.
Python doesn't have to convert anything, and couldn't if it wanted to.The conditional expression is parsed by using the language grammar into an abstract syntax tree, which in turn is then compiled to bytecode. You can produce the AST by using the  function:Note the  node in the AST produced for the assignment; this is a dedicated node for conditional expressions. It has ,  and  parts to represent the 3 expressions that make up the condition, true and false parts. This is documented in the  module Abstract Grammar section:This shows that the type of each element is another  expression node.The parse tree is then compiled to bytecode that uses the stack to conditionally jump to the right section based on the test; we can pass the AST produced by  directly to the  function, after which the  module lets us look at a human-friendly form of the bytecode produced by compilation:So if the condition is false, the interpreter loop jumps forward to instruction 8, otherwise instructions 4 and 6 are executed, with instruction 6 jumping forward to instruction 10 (so past the  expression). The end result is that either instruction 4 or instruction 8 puts a new result on the top of the stack for  to move to a variable.An  statement results in a different AST node, and the resulting bytecode happens to be very similar in that it too would use jumps. But the compiler treats them as distinct pieces of syntax, and it has to.Expressions and statements are two very different fundamental building blocks of a programming language. Statements can contain expressions, but expressions can't contain statements, only other expressions. And expressions can produce a value (for the surrounding syntax to use), but statements can't. So Python has to treat conditional expressions very differently from statements, in that the grammar parser knows when to expect a statement and when an expression is allowed. If you transformed a conditional expression into a statement, you would not be able to ever use such an expression as part of a bigger expression!Because an  statement is not an expression, it doesn't return a value (as only expressions can produce a value), and so the resulting bytecode would not produce a value on the top of the stack to be used by the surrounding Python code (there is no ).  statements contain a condition expression, and a suite, which must always consist of more statements (there is such a thing as an 'expression statement' to let you put just an expression in a statement, such as  on a single line), and those statements can 'do stuff' like assignments or return from a function, but nothing they do would ever make  return something.This is reflected in the AST node definition for  statements:So for an  node,  is the only expression node, and  and  both consist of zero or more statements. The  part would hold any  tests as further  nodes, or any other type of statement to form an unconditional . With zero-or-more elements, you can't expect a single result.So this isn't unique to CPython, this applies to all Python implementations. The Python grammar is not an implementation detail.
Does Python convert to an if statement as belowAlmost.This outputs:These look almost the same, except for the location of  and an additional  as pointed out by @L3viathan.We also get almost the same execution times (with a negligible difference):As to when this conversion happens, I'd assume sometime during "compilation" to bytecode.
WhatIf you are asking what, then to best understand it, you need to understand the difference between functional and procedural. One can be converted to the other, but both can be view independently, you don't have to translate one to the other to understand them. is functional, and returns a value  or .is procedural, it does  or .Note: Procedural is about doing, do this, then do that, or that. Functional is about value, is this or is that.HowIf you are asking how, then you will need to look at the source-code of one of the implementations. Note that each implementation does not have to do it the same way, so long as behaviour is correct.


Answer URL
https://docs.python.org/3/reference/expressions.html#conditional-expressions
https://docs.python.org/3/reference/grammar.html
https://docs.python.org/3/library/ast.html
https://docs.python.org/3/library/ast.html#ast.parse
https://docs.python.org/3/library/ast.html#abstract-grammar
https://docs.python.org/3/library/functions.html#compile
https://docs.python.org/3/library/dis.html
