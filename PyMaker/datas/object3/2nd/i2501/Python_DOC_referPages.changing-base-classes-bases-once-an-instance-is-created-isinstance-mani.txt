Natural Text
I am looking to see if there is a good way to create a wrapping object.  I am looking for a solution I can write in Wrapper class (or potentially a metaclass of Wrapper) so the following code is accurate. I don't have ability to change Thing_A or Thing_B classes in my real world scenario.I tried looking at , metaclasses and type class creation but I am not getting the result I want. If there is a better way to go at this without directly subclassing Thing_A or Thing_B please let me know. I also found that  but because I can't change Thing_A class or Thing_B class, I can't use it.Thanks,Jason
I'm not sure what you mean by this:I also found that  is possible to use for the last two  checks but not the first two.For the last two, you don't need to do anything. The default  is already going to return , because your objects really are  instances.For the first two, it certainly is possible. Obviously it depends on how you implement the , but any option you pick will work here, as long as you make it look at something on the instance.Rather than hardcode something that looks at , let's write something more general: a protocol where any object can declare, dynamically, that it wants to be an instance of  or  by just adding it to some iterable called . So,  will be true if  is in  (the usual rule) or in  (the rule you want to add):Now,  can support that protocol by setting :â€¦ or, maybe even better, use a :Notice that  doesn't have to use the  metaclass, because the default  rules work fine with  as the class; it's  and  where you want different behavior.And here's that different behavior:
Do your best to look for other solutions. This kind of thing is prone to a lot of weird bugs, and it's going to be even more of an arcane mess to debug than it will be to write.That said, if you really want to give yourself this maintenance nightmare, then the way to do it is to lie about :Ideone demo.This only handles ; if you want to forward attribute lookup to , you'll need to implement a forwarding  or , and if you want magic methods to work, you're going to have to separately define forwarding implementations of every magic method you want to forward to .


Answer URL
https://docs.python.org/3/reference/datamodel.html#class.__instancecheck__
