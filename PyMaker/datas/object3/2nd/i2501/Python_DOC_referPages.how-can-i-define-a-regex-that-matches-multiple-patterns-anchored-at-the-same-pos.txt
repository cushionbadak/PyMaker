Natural Text
I'm trying to use Python's findall to try and find all the hypenated and non-hypenated identifiers in a string (this is to plug into existing code, so using any constructs beyond  won't work). If you imagine code like this:I would like the  value to be  (although not , because it's hypenated, but does not appear as a standalone space-separated identifier). Order of the array/set is not important.A simple regex which matches the non-hypenated identifiers is  and one which matches the hypenated ones is . However, I cannot figure out one which does both simultaneously (I don't have total control over the code, so cannot concatenate the lists together - I would like to do this in one Regex if possible). I have tried  but since the expression is greedy, this misses out  for example, only matching  since  has already been matched and it won't retry the pattern from the same starting position. I would like to find matches for (for example) both  and  which begin (are anchored) at the same string position (which I think  simply doesn't consider).I've been trying some tricks such as lookaheads/lookbehinds such as mentioned, but I can't find any way to make them applicable to my scenario.Any help would be appreciated.
You may usePattern details - no non-whitespace right before - 1+ word chars - zero or more repetitions of - a hyphen - 1+ word chars - no non-whitespace right after.See the pattern demo online.Note that to get all items, I split the matches with  and add these items to the resulting list. Then, with , I remove any eventual dupes.
If you don't have to use regexJust use split(below is example)
This is not possible with findall alone, since it finds all non-overlapping matches, as the documentation says.All you can do is find all longest matches with  or something like that, and then generate all valid spans out of them (most probably starting from their  on ).Please note that  will also match , , and , so something like or  could be preferable (but you would still have to filter out the  from ).


Answer URL
https://docs.python.org/3/library/re.html#re.findall
