Natural Text
In its essence, I do this:And what happens is that whatever happens to  is decoupled from the list after the first inclusion. Is there any way to update  and also have the list updating itself, in a clean way?Of course I could simply do  and be done. But in a large project, with many moving parts, I'd like to avoid non-descriptive bracket indexing.I assume I could do some messy construct of an instantiated class, and then iterate over the attributes, but that sounds like messy business. Or is it?
If you want to avoid indexing and have easy to read attributes then you could just use a class that has class attributes:and keep multiple references to it:Note that if you instantiate the class you'll need to keep a reference to the instance rather than the class as the original class won't be updated anymore:From Python 3.7 you can use a dataclass, which makes instantiate with custom data simpler:Finally, if you do care about variable states then there's a good chance you'll be working in a class anyway, in which case you could use a property:
I suggest you this quite simple solution defining  as a function instead of a simple list. In this way,  will always returns the updated values of and . The code is very close to your original code:  


Answer URL
https://docs.python.org/3/library/dataclasses.html
