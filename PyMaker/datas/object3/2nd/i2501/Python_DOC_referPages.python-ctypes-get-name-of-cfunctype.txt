Natural Text
I am looking into some code I have not written with pdb.Is it possible for me to find out where self.function was defined, or what the name of the function is? self.function._objects points towards a DLL, but it's not clear to me how or if I can find the function's name so I can look it up in the source code.Further, is it possible to step into the function when it is called? It is called in the code in the following way:
Is it possible for me to find out where self.function was defined, No, because it was defined in some source code written in C (or another language) that you don't even have (or maybe you do, but Python has no idea where it is); all you have is the DLL/so/dylib that resulted from compiling it.… or what the name of the function is? Yes. You can usually get the name of a ctypes C function the same way as many other objects in Python: via the  special attribute:self.function._objects points towards a DLL, but it's not clear to me how or if I can find the function's name so I can look it up in the source code.You can't get the function name from there. But you can get the library name from there via the  attribute:(Despite the underscore, this is a public attribute, as the docs explain.)This will usually be the name passed to the  constructor or  call. On Windows, for libraries loaded with the  magic, I think you actually get the resolved pathname, like , not just  or , but I'm not positive.Further, is it possible to step into the function when it is called?No, because the function is compiled machine code; it doesn't have any Python bytecode for you to step into.You could, of course, attach a debugger like Visual Studio, lldb, or gdb and step into the machine code that way.


Answer URL
https://docs.python.org/3/library/ctypes.html#ctypes.PyDLL._name
