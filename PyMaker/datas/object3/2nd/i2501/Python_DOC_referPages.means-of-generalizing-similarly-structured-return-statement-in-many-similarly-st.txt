Natural Text
I have a little mathematics-practicing application in which, to add new problems, I just define a new function which returns some dictionaries like this: Just for some context, this is a Django app. where the text of each problem is stored in a model, and, when the user looks at the problem on the webpage, the text of the model is formatted according to  and the multiple-choice answers are generated according to .Now, every problem, defined above, has the line . Is there a way I can call a function like this, with these two dictionaries, and have the same functionality while omitting the return? I feel as if—if every function needs to have that line—then there's something I can do to generalize it (... A decorator, maybe? I've never used one, but now may be a good excuse).The model method which processes the dictionaries looks like this: The only thing I could think of was combining  and  into a dictionary of dictionaries, and returning that—but it wouldn't really save much code, it'd just move defining the keys outside of the return statement.
I see two options.First, you want to generalize that all problem functions return something of the form . You can represent this as a , or if you have Python 3.7, a data class.Named tuple example:This solves the problem of the generalizing the structure somewhat, but you still have the return.A much more general and more difficult approach would be to store each question in a configuration file. Of course, you would have to write some small language and parser to have the dynamic sort of data that you want, but I imagine if you scale up to thousands of questions it would be worth the effort.
Here's a way to make it a little less verbose:(I note you have a discrepancy between "answer" and "answers" in your examples.)Another option is to return a tuple, and unpack the tuple in your gen_QAPair() function:...then...


Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
