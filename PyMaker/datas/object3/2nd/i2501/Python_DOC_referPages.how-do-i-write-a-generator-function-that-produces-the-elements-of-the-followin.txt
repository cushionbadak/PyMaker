Natural Text
a) I want to create a generator function that produces the elements of the list = [1,3,4,"hello", 5,3,4, "create"].b) I then want to create a new list which is this list sorted with only unique elements by using the same generator function created. Does this work for a) or does it defeat the purpose of using a generator because of the for loop?
The vast majority of the time, all you care about is having an iterable—something you can use in a  loop.A list is already an iterable over its elements. You can do  just as well as , and in fact it'll be a little more efficient.Sometimes, you specifically need an iterator—an iterable that keeps track of its current position so you can call  on it. For example, if you want to group an iterable into tuples of 2 values, the simplest way to do that is with an iterator over the iterable. But the builtin  function already does this—you can use  just as well as , and again, it'll be a little more efficient.Rarely, you specifically need a generator—an iterator that provides a few extra methods. I'm not sure why you'd ever need one that just iterates over a list, because it doesn't have anything useful to do with those extra methods, but maybe someone wrote some silly function that checks  and refuses to work with a list or a list iterator, and you can't change that function.But even in that case, you could just write a generator expression, , instead of .Finally, you might need, not just a generator, but a function that returns a generator. Maybe you need to pass it as a callback to be called later; I don't know.In that case, what you've written makes sense. However, unless you're on Python 2.7 or 3.2 or earlier, you probably still want to use :I then want to create a new list which is this list sorted with only unique elements by using the same generator function created.There's no reason to use the generator function here, when all you need is an iterable—but if you're required to use it for some assignment, there's no reason you can't. In fact, it's not going to be any different from using the list.If you wanted to sort the unique values in a list, you could either uniquify and sort:… or sort and uniquify (e.g., using the  recipe in the  docs):How do you do the same thing with your generator? Just pass the generator instead of the list:
The  function you have is already enough to accomplish the first half of your question: simply pass to it the required list. However, if you wish to always return the generator for that one list, you can hard-code it:To quickly get rid of duplicates, you can cast the returning list (or generator) to a set:To sort it, simply cast it back to a list and sort it:


Answer URL
https://docs.python.org/3/library/functions.html#iter
