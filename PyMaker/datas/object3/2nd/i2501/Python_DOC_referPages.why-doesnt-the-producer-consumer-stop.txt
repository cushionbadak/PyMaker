Natural Text
I've found an example representing producer-consumer with two threads. But, when I send a signal to the process to stop, it doesn't. It expects second signal e.g.  to completely stop. I thought the problem is with  but it seems not.Output:
It's because only the main-thread get's stopped by the KeyboardInterrupt. You can watch this by letting your child threads print  which returns all alive threads + the main thread.Example Output with KeyboardInterrupt. Note the MainThread listed as 'stopped' after the KeyboardInterrupt:You could make the child-threads daemons to let them exit with the main-thread. But that should be only considered in case your threads don't hold any resources:Note Daemon threads are abruptly stopped at shutdown. Their resources (such as open files, database transactions, etc.) may not be released properly. If you want your threads to stop gracefully, make them non-daemonic and use a suitable signalling mechanism such as an Event docs.The better way would be to catch the  like in the code above and send a sentinel value over the queue to the child-threads to let them know they should finish, allowing them to do clean-up before exit.


Answer URL
https://docs.python.org/3/library/threading.html#threading.Event
