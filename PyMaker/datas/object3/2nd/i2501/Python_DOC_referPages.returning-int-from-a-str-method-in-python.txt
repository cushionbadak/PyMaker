Natural Text
I know, that the purpose of  method is to return the string representation of an object, so I wanted to test what happens if I force it to make something else.I've created a class and an object:When I call:The interpreter complains:And this is fully understandable because the str() method is trying to return int.But if I try:I get the output: 5.So why the interpreter allows me to return int when I call  directly, but not when I'm using str(mc) which - as I understand - is also evaluated to .
 calls . Here is the source code where  is defined. If you search this document for "", you will see where the function calls  and makes sure the return type is actually a string.
The built-in  function (and also ) do more than just calling  (or ) – they also have defaults to cope with objects that don't have a  or  method, and some cleverness to deal with objects whose string representation is recursive.You can see the source (in C) for  and  here and here. As you can see, they enforce the return type of  and :If you just call the  method on an object, Python itself doesn't enforce that any method called  can only return a string – it's the  function that enforces that restriction.
 isn't justI think very few of the standard functions or operators map directly to a magic method like that, although I'm not sure of the exact counts. tries , but it also tries  if there's no , and it enforces the  return type. (It also calls the return value's  for technical reasons, which can get weird for  subclasses.)  tries , but it also tries .  tries , but it also tries . The list goes on and on.
 provides a contract: you return a string, and the program won't break when it tries to use a non-string value when the program expects a string. Determining whether  actually obeys that contract is uncomputable in general, so it is up to the programmer to enforce the contract.As @Juanpa.arrivillaga points out,  is simply stricter about the  method returning what it should be. Your explicit call to  doesn't actually invoke the protocol; it returns an  value, but that value itself has a  method which  calls when it wants a  value.
__str __ is used similarly ToString method in Java where you will get a friendly print of a class object. 


Answer URL
https://docs.python.org/3/c-api/object.html#c.PyObject_Str
https://docs.python.org/3/reference/datamodel.html#object.__str__
