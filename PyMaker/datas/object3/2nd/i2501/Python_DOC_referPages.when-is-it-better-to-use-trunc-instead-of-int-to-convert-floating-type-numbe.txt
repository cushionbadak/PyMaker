Natural Text
 and  functions return the same output for every float type inputs that I have tried. They differ in the way that  can also be used to convert numerical strings to integers. So I have a two-fold question:I would like to know if, apart from strings, is there any input for which  and  give different outputs?If not, when is it better to just use  to convert floating type numbers to integers?
 and  have a somewhat similar relationship as  and .  delegates to an type's  method, and falls back to the  method if  is not found.  delegates to the type's  method directly and has no fallback. Unlike  and , which are always defined for , both  and  can raise errors out of the box.For all the built-in types that I am aware of, both  and  are defined sensibly where appropriate. However, you can define your own set of test classes to see what errors you get: and  will both raise .  will raise . However, ,  and  will all succeed.In the end the decision as to which method to use is one of connotation.  is inherently a math operation similar to , while  is a general purpose conversion, and succeeds in more cases.And don't forget about  and the  method.


Answer URL
https://docs.python.org/3/library/functions.html#int
https://docs.python.org/3/library/math.html#math.trunc
https://docs.python.org/3/library/functions.html#func-str
https://docs.python.org/3/library/functions.html#repr
https://docs.python.org/3/reference/datamodel.html#object.__int__
https://docs.python.org/3/reference/datamodel.html#object.__trunc__
https://docs.python.org/3/reference/datamodel.html#object.__str__
https://docs.python.org/3/reference/datamodel.html#object.__repr__
https://docs.python.org/3/library/operator.html#operator.index
https://docs.python.org/3/reference/datamodel.html#object.__index__
