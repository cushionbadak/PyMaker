Natural Text
This is somewhat academic, but nevertheless.Python syntax forbids starting a variable name with a number. But this can be sidestepped like so:Likewise for .Does that mean, that Python actually allows it, just not very visible?edit:My question is not, whether it is allowed. I am aware, that it is formally not allowed in Python. The question is why can I work around it by addressing  directly, and does that break other rules or guidelines, does it maybe even have a good reason/application to allow that.
Python parser forbids naming variables that way, for the sake of parsing numbers and variables separately, as naming a variable  would create a chaos - is it the number  or the variable ?"Python, please output for me !" - "Why is it 10.0? I stored 100 over there!"But the variables are actually stored in a way that allows binding a string that starts with a number to a value, because that feature is no harm in hashing maps of any kind, and so using this "trick" you can achieve your wanted numeral-prefixed-name variable without hurting the parser severability.I would say that technically, naming variables in that manner is not a violation to python guidelines, but it is highly discouraged, and as a rule unnecessary. Using  for injecting variables is known as a very bad practice and this case should not be an outstanding.Of course, python could have used an encloser to numerals like strings, say , but I believe the intent of inventing python was to make programming easier, not stretching the limits of variable naming space. Practically speaking, if you must use number-headed names you better do it with your own dictionary, rather than :That way you can create your own variables system - and avoid abusing .
This is what you can and can't do with that  in globals. You can't really use it in a variable, unless you use all of it's definition in globals (I mean accessing that dictionary), which makes it very uncomfortable for usage (another reason for not doing that).Basically,  is not a real variable as  , as shown in the following output:


Answer URL
https://docs.python.org/3/library/functions.html#locals]
