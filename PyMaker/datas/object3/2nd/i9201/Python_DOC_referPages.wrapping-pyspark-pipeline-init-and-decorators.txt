Natural Text
I am trying to wrap the constructor for pyspark Pipeline.init constructor, and monkey patch in the newly wrapped constructor. However, I am running into an error that seems to have something to do with the way Pipeline.init uses decoratorsHere is the code that actually does the monkey patch:However, when I run a simple program: I get this error:Looking into the pyspark interface, I see that  Pipeline.init looks like this:And noting the @keyword_only decorator, I inspected that code as well:I'm totally confused both about how this code works in the first place, and also why it seems to cause problems with my own wrapper. I see that wrapper is adding a _input_kwargs field to itself, but how is Pipeline.__init__ about to read that field with self.__init__._input_kwargs?  And why doesn't the same thing happen when I wrap Pipeline.__init__ again?
Decorator 101. Decorator is a higher-order function which takes a function as its first argument (and typically only), and returns a function.  annotation is just a syntactic sugar for a simple function call, so following can be rewritten for example as:So  is actually a   which captures defined  ( argument of the ) as a part of its closure. When it is called, it uses received  as a function attribute of itself. Basically what happens here can be simplified to:When you further wrap (decorate)  the external function won't have  attached, hence the error. If you want to make it work you have apply the same process, as used by the original , to your own version, for example with the same decorator:but I liked I mentioned in the comments, you should rather consider subclassing. 


Answer URL
https://docs.python.org/3/library/functools.html#functools.wraps
