Natural Text
This question already has an answer here:Return None if Dictionary key is not available                    11 answers                I tried few solved questions on stackoverflow but couldn't make it work. Can someone kindly help me to fix this. I am using Flask for one of my project and this is the error I am getting. Following is the code and traceback.The code is related to line 12 in sqlutils.py.Traceback:
You need to provide some sensible defaults for when the environment doesn't contain your settings:Or raise an error if critical settings are not provided:
To debug try:And log/print .
As others have mentioned, using  on a dictionary will result in a  if the value does not exist:get(key[, default])Return the value for key if key is in the dictionary, else default. If default is not given, it defaults to , so that this method never raises a .It's a dictionary, so you could even do things like  instead of using . Why? Because then you'd get an error on startup if the value didn't exist! Which might be nifty in something so critical to your application. :)Okay, so apparently  in your code has returned . Why is that? gives you access to the operating system's environment variables from the shell. Apparently, the variable  hasn't been set anywhere!To solve your problem, you'll have to set the environment variable for  in your OS, or else provide the information in some other way. Personally, I like passing these values in as command-line arguments via argparse, but that's up to you!In case you really want to use the OS's environment, I'll give you an example of setting a variable in bash (my shell). You'd have to look up parallel instructions for other shells.From the bash command line:Note that use of  in Python cannot set a new value for this variable outside of its own interactions. That is to say:
When the key you request the value of doesn't exist in the dictionary, .get() returns .So, given the error you're getting, it appears that there is no  in .If there's some default value ( perhaps?) that makes sense for you to use in such cases, you can add it as the second parameter in your call to , and then that value will be returned rather than  whenever the key doesn't exist.And if it's at all possible that the other keys ( and ) might not exist, you should either add appropriate default values for them, or employ some form of error handling.


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.get
https://docs.python.org/3/library/exceptions.html#KeyError
https://docs.python.org/3/library/os.html#os.environ
https://docs.python.org/3/library/argparse.html
https://docs.python.org/3/library/stdtypes.html#dict.get
