Natural Text
I have a String that looks likeI am trying to split it into two parts, the digits, and the name. The format will always be [date][show] the date is stripped of format and is digit only in the direction of YYYYMMDD (dont think that matters)I am trying to use . I have a working version by writing.Simple enough, this gives me the values I need in a list. However, as you will note, there is an empty string in the first position. I could theoretically just ignore it, but I want to learn why it is there in the first place, and if/how I can avoid it.I also tried telling it to match the begininning of the string as well, and got the same results. Does anyone have any input as to why this is there / how I can avoid the empty string? 
Other answers have explained why what you're doing does what it does, but if you have a constant format for the date, there is no reason to abuse a  to parse this data:Will split your strings just fine.
What you are actually doing by entering  is, that your test string is splitted on any occurence of a number with at least one character.So, if you haveThis is happening:The string is split into three parts, everything before the number, the number itself and everything after the number.Maybe it is easier to understand if you have a sentence of words, separated by a whitespace character.
You're getting an empty result in the beginning because your input string starts with digits and you're splitting it by digits only. Hence you get an empty string which is before first set of digits.To avoid that you can use :
Why  when you can just match and get the groups?...I realize now the intention was to parse the text, not fix the regex usage.  I'm with the others, you shouldn't use regex for this simple task when you already know the format won't change and the date is fixed size and will always be first.  Just use string indexing.
From the documentation:If there are capturing groups in the separator and it matches at the start of the string, the result will start with an empty string. The same holds for the end of the string. That way, separator components are always found at the same relative indices within the result list.So if you have:The indexes would remain unaffected:
If the date is always 8 digits long, I would access the substrings directly (without using regex):If the length of the date might vary, I would use:


Answer URL
https://docs.python.org/3/library/functions.html#filter
