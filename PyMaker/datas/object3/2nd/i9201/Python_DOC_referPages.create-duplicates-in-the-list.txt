Natural Text
I haveandI want to get a list of the type of:This is what I have so far:
Here's one way to do it using , string multiplication and a list comprehension:Pay attention to the choice of names when using Python. A name like  renders the builtin list function unusable.If the items in  are not strings you can simply use a nested comprehension on , to duplicate the items in the list.
A nested list comprehension works:The "sub-loop"  repeats the value  times.Here  can hold any object, not only strings.Example:but this flattens the sub list:not exactly the desired result.
As a general approach for any object (not only string) you can use   within a generator expression:Demo:Here is a benchmark on 3 main approaches. Note that the last one onley works for strings:
You can use  as another option:
Another way to do it with a loop would be:Now we have:
If you are unsure of how list comprehensions work,    
This will work regardless of whether a, b, c and d are variables or strings:You might want to uncomment the if statement (and indent the line underneath) to check if the lists have the same length, otherwise new_lst will only contain as many items as the shorter list.This, this and the documentation section on nested list comprehensions are worth reading.
That's my solution, just to add a different one.
Assuming that both lists are the same length and the second is always a list of numbers, here is a solution without using  or any imports:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions
