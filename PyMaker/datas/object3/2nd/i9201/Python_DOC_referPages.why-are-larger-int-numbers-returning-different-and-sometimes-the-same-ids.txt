Natural Text
Today I learned about  and decided to put it to use and test things out. I know integers are immutable, so the id should be (?) the same. But as I was testing things out in the prompt, I noticed slight differences and wanted to find out the reason behind it.Cool! All checks out so far. But then...Ok, so testing things out, I noticed this behavior happened until 256. The id would be up to 8 digits long, and then 257 would return a larger id of 15 digits long. So  types need to be 8 bytes.. Testing this out:So I figured out it has something to do with being 8 bytes long, but anything larger than 256 would re-use some of the same ids:Please note the above list is non-exhaustive.What is happening here under-the-hood? Why are some ids being re-used? Testing out multiple variables:TL;DR - For integers above 256, why are some of the ids reused? I thought these id's were supposed to be unique during their lifetime, but some of these id's look identical but when comparing them, they are different? Please look at last example provided.Also, why are there a select few id's used for these larger integers? Maybe this is different for systems using many more variables?Tested this on Python 3.4.3, GCC 4.8.4 on linux.
As an optimization, Python pre-creates a range of int objects (I think it's -5...256 by default, this is a compile-time option), and always uses those objects in preference to creating a new int.  For ints outside that range, the chance of ever needing the exact same int again is considered too low to be worth the effort of checking to see if the needed int object already exists.This is PURELY an implementation detail.  If your code ever actually cares about it, you are doing something horribly wrong.


Answer URL
https://docs.python.org/3/library/functions.html#id](python#id)
