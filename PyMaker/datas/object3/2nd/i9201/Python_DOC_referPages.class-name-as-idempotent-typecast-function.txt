Natural Text
I'm writing a custom type  and I'd like to achieve the following: when writingthen if  is already an instance of , then  returns that object unmodified, so  and  refer to the same object. Otherwise a new object of type  should be created, using information from  in whatever way  deems appropriate.How can I do this?I would assume that  is the key to this. It should be fairly easy to have  return the existing object if the  check succeeds, and to call  otherwise. But the documentation for  writes this:If  returns an instance of cls, then the new instanceâ€™s  method will be invoked like , where self is the new instance and the remaining arguments are the same as were passed to .In this case I would be returning an instance of the requested class, albeit not a new one. Can I somehow prevent the call to ? Or do I have to add a check inside  to detect whether it is being invoked for a newly created instance or for an already existing one? The latter sounds like code duplication which should be avoidable.
IMHO, you should directly use  and . The test in init to see whether you should init a new object or already have an existing one is so simple that there is no code duplication and the added complexity is IMHO acceptableIt gives as expected:
One way to achieve this is by moving the required code into a metaclass like this:That metaclass adds a  method unless there exists a base class that already added a  method. So for class hierarchies where some such class extends another such class, the  method will get added but once. It also wraps the constructor to perform the check whether the first argument is identical to  (thanks to the answer by Serge Ballesta for pointing out this simple check). Otherwise it calls the original constructor, or the base constructor if no constructor had been defined.Quite a bit of code, but you only need that once, and can use it to introduce these semantics for as many types as you want. If you only need this for a single class, other answers may be more appropriate.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__new__
