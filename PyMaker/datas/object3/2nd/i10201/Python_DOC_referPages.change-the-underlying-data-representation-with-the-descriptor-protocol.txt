Natural Text
Suppose I have an existing class, for example doing some mathematical stuff:Now, for some reason, I'd like to have that Python does not store the members  and  like any variable. I'd rather want that Python internally stores them as strings. Or that it stores them into a dedicated buffer, maybe for interoperability with some C code. So (for the string case) I build the following descriptor:And I wrap the existing vector class in a new class where members  and  become :Finally, some driving code:After all, I replaced the internal representation of  and  to be strings without any change in the original class, but still with its full functionality.I just wonder: Will that concept work universally or do I run into serious pitfalls? As I said, the main idea is to store the data into a specific buffer location that is later on accessed by a C code.Edit: The intention of what I'm doing is as follows. Currently, I have a nicely working program where some physical objects, all of type  interact with each other. The code inside the objects is vectorized with Numpy. Now I'd also like to vectorize some code over all objects. For example, each object has an  that is computed by a complicated vectorized code per-object. Now I'd like to sum up all energies. I can iterate over all objects and sum up, but that's slow. So I'd rather have that property  for each object automatically stored into a globally predefined buffer, and I can just use  over that buffer.
There is one pitfall regarding python descriptors.Using your code, you will reference the same value, stored in StringVector.x.prop and StringVector.y.prop respectively:will have the following output:I suppose this is not what you want=). To store unique value per object inside object, make the following changes:Output:Also, you definitely could save data inside centralized store, using descriptor's  method.Refer to this document: https://docs.python.org/3/howto/descriptor.html
If you need a generic convertor('convert') like you did, this is the way to go.The biggest downside will be performance when you will need to create a lot of instances( I assumed you might, since the class called ). This will be slow since python class initiation is slow.In this case you might consider using namedTuple you can see the docs have a similar scenario as you have.As a side note: If that possible, why not creating a dict with the string representation of x and y on the init method? and then keep using the x and y as normal variables without all the converting


Answer URL
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/library/collections.html#collections.namedtuple
