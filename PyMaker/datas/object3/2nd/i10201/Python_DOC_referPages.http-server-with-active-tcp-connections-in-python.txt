Natural Text
I am writing a pseudo-http application in python, the requirements for which are:It should handle HTTP requests.The connections between the client and the server outlive the request-response, i.e. the underlying TCP connection remains alive after a response has been sent to a client.The server needs to be able to send data to a particular client for which it already has an opened connection.I looked at twisted and python's TCPServer/BaseHTTPServer, but they don't quite fit the bill. The way I see it, I have two options:Start from a HTTP server implementation and override my way down to connection management.Have a simple socket server that will manage the connections and pass data between the "http" server and the client.Has anyone tackled a similar issue? Any ideas on other approaches or which one will be a better option?Thanks!EDIT 1I cannot use HTTP 2 or web sockets; HTTP <2 over TCP is a hard requirement.
Since you cannot use websockets or http/2, and you require the ability to push data from the server to the client, then long-polling is probably the best option remaining.See Nevow, at https://github.com/twisted/nevow, for one possible implementation of long-polling, via the athena module.
I ended up overriding methods in http.server.HTTPServer, it was less work than expected and it's all from the standard packages.Depending on your situation the below could end up being more involved, e.g. using more structured session representation, etc. Then again you should probably consider more developed frameworks like twisted in that case.The main points are:Use a ThreadingMixIn - as the connections are long-lived, a separate handler thread would be needed in order to take more than one connection at a time.Note that if you are using the BaseHTTPRequestHandler, the connection is closed after each response, unless there is a  header or you set  on EVERY request.Anyway, a snippet to get you started:


Answer URL
https://docs.python.org/3/library/http.server.html#http.server.HTTPServer
https://docs.python.org/3/library/socketserver.html#socketserver.ThreadingMixIn
https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler
