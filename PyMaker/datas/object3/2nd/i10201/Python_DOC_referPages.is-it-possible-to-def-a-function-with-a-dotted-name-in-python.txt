Natural Text
In the question What does the "yield" keyword do?, I found a Python syntax being used that I didn't expect to be valid. The question is old and has a huge number of votes, so I'm surprised nobody at least left a comment about this function definition:What I tried to get this sort of syntax evaluated:assigning an attribute to a class or objectredefining a function of an imported modulefails so far with SyntaxError: invalid syntaxI looked up the link (maybe outdated) given in the question, and searched the web for the usage of , but I found nothing explaining this "dotted name" pattern. I'm using Python 3, maybe this is a feature of Python 2?Is (or was) this syntax valid, if yes what does it mean?
No, the syntax is not valid. It is easy to prove by checking the documentation. In Python 2, an identifier is constructed by the following rules:In Py3 the rules are more or less the same, beside being expanded up to the range of Unicode characters.It seems that the author probably meant something like
As in my comment you cannot, the valid identifiers for python3 are in the docs:Identifiers (also referred to as names) are described by the following lexical definitions.The syntax of identifiers in Python is based on the Unicode standard annex UAX-31, with elaboration and changes as defined below; see also PEP 3131 for further details.Within the ASCII range (U+0001..U+007F), the valid characters for identifiers are the same as in Python 2.x: the uppercase and lowercase letters A through Z, the underscore _ and, except for the first character, the digits 0 through 9.Python 3.0 introduces additional characters from outside the ASCII range (see PEP 3131). For these characters, the classification uses the version of the Unicode Character Database as included in the unicodedata module.If you examine the code you can see it is a typo in the original question:And this is the caller:So the method  is called on the instance. So really the actual code looks like:And this is the caller:


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#identifiers
https://docs.python.org/3/reference/lexical_analysis.html#identifiers
https://docs.python.org/3/reference/lexical_analysis.html#identifiers
