Natural Text
I am experimenting with recursive functions. My goal is to produce:A function  that generates all non-increasing series that add up to nSome sample inputs/outputs:After a lot of trial and error, I came up with the following function which does exactly what I want:My question: Is there a way (pythonic or not) to return this same result using a single list comprehension, without appending to and extending ?Here are two things I've tried, along with their mangled results:I realize that the answer may be quite ugly, but I've spent enough time trying that I just want to know if it is possible.
Convert extending to appending and it becomes easier to grok how to convert this:You can now move the  case into the other branch (using a helper  variable here for readability):If , this causes the loop iterate once and produce an empty list, so you effectively get .This can then trivially be converted to a list comprehension (inlining  into the  loop):Wether or not you should is another matter; this is hardly easier to read.


Answer URL
https://docs.python.org/3/reference/expressions.html#conditional-expressions
https://docs.python.org/3/reference/expressions.html#expression-lists
https://docs.python.org/3/reference/compound_stmts.html#the-for-statement
https://docs.python.org/3/reference/expressions.html#grammar-token-comprehension
