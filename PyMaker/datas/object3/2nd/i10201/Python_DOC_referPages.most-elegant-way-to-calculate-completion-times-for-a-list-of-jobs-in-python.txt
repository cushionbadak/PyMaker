Natural Text
I have a list of jobs in form of , e.g.But much larger. And i've written a function that schedules them according to different keys that I pass as a parameter. This means that for each job I calculate its finishing time as a sum of all the previous jobs. The ultimate goal is to calculate the weighted finishing times: Currently I don't see an elegant way to do this without separating all the lengths in a separate list, which doesn't seem very Pythonic to me.Here is the codeand here is the sample usage:Ideally I would like the solution to be both human-readable and memory efficient (i.e. without creating another list of lengths)
You want to use the  iterable to produce the acumulative weight of your lengths:Note that this at no point builds new lists other than the sorted list. Both by avoiding building intermediary lists as well as avoiding re-summing longer and longer sublists (making this O(N) vs your O(N^2) approach), the above is also much more efficient; just on your short sample there is a 25% improvement in timings:The difference is far more pronounced when you increase the job list size to 1000 however:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.accumulate
