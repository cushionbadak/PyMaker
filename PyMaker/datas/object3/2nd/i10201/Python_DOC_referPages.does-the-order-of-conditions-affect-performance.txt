Natural Text
Does it matter how I order the conditions in Python in respect to the speed of the script? In SQL e.g. it does not as the "Interpreter" assumes which condition ordering would be the fastest. In Python, as far as I know, the order of conditions will be taken as given by the interpreter. So as an example, if I chain or-conditions, is it better to order the conditions by assumed time they will consume because maybe the interpreter stops even looking for the other conditions when the first one doesn't apply anyway?
Yes, the order of conditions matters. They are evaluated left-to-right unless you change that by using parentheses, for example.And yes, conditions are only evaluated if the outcome of the expression isn't already clear. For example, inPython will return  immediately and not even attempt to calculate .
Python will not reorder your conditions like in SQL, but it will short circuit. What this means is that it will stop evaluating as soon as possible. So if you have ,  will never be evaluated. This works similarly for  with something like . It would be in your best interest to consider this when writing conditional statements and can result in changes in performance.
Boolean operators in Python are short-circuiting - as soon as the result of an expression is clear, evaluation stops. This plays an important role in Python's late-binding.For example, this is a common check:Python is in general very conservative about premature optimizations. If there is any chance that something might break, Python will not try it.If you want to check Interpreter optimizations, try the  module. It shows the instructions actually being run by the Python core. For example, Python will resolve constant expressions ( => ) and back out of an  early ().Note that not even pypy does any further optimization on this code!


Answer URL
https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not
