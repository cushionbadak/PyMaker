Natural Text
Super new to to python here, I've been struggling with this code for a while now. Basically the function returns a dictionary with the integers as keys and the values are all the words where the length of the word corresponds with each key.So far I'm able to create a dictionary where the values are the total number of each word but not the actual words themselves.So passing the following textto the functionreturnsWhere I need the output to be:I think I need to have to return the values as a list. But I'm not sure how to approach it.
I think that what you want is a dic of lists.
Fixing Sabian's answer so that duplicates aren't added to the list:
Check out list comprehensionsIntegers are legal dictionaries keys so there is no need to make the numbers strings unless you want it that way for some other reason. in the  controls flow to add word only once. You could get this effect more automatically if you use  type instead of  as your value data structure. See more in the docs. I believe the following does the job:try to make it better ;)
Instead of defining the default value as , assign it as  and within  condition do, . Also, instead of preassigning , you should use . Since you need non-repetitive words, I am using  as value instead of . Hence, your final code should be:In case it is must that you want  as values (I think  should suffice your requirement), you need to further iterate it as:
What you need is a map to list-construct (if not many words, otherwise a 'Counter' would be fine):Each list stands for a word class (number of characters). Map is checked whether word class ('3') found before. List is checked whether word ('had') found before.-->
the problem here is you are counting the word by length, instead you want to group them. You can achieve this by storing a list instead of a int:Other improvements:don't hardcode the key in the initialized  but let it empty instead. Let the code add the new keys dynamically when necessaryyou can use  as keys instead of strings, it will save you the conversionuse s to avoid repetitionsUsing Well, I'll try to propose something different: you can group by length using  from the python standard library
You say you want the keys to be integers but then you convert them to strings before storing them as a key. There is no need to do this in Python; integers can be dictionary keys.Regarding your question, simply initialize the values of the keys to empty lists instead of the number 0. Then, in the loop, append the word to the list stored under the appropriate key (the length of the word), like this:This results in the following:If you, as you mentioned, wish to remove the duplicate words when collecting your input string, it seems elegant to use a set and convert to a list as a final processing step, if this is needed. Also note the use of  so you don't have to manually initialize the dictionary keys and values as a default value  (i.e. the empty set) gets inserted for each key that we try to access but not others:This gives the following output:
Your code is counting the occurrence of each word length - but not storing the words themselves.In addition to capturing each word into a list of words with the same size, you also appear to want:If a word length is not represented, do not return an empty list for that length - just don't have a key for that length.No duplicates in each word listEach word list is sortedA set container is ideal for accumulating the words - sets naturally eliminate any duplicates added to them. Using defaultdict(sets) will setup an empty dictionary of sets -- a dictionary key will only be created if it is referenced in our loop that examines each word.In your example string of Calling the function like this:Returns the following list:The type of each value in the dictionary is "list".


Answer URL
https://docs.python.org/3/tutorial/datastructures.html
https://docs.python.org/3/tutorial/errors.html
https://docs.python.org/3/howto/sorting.html
