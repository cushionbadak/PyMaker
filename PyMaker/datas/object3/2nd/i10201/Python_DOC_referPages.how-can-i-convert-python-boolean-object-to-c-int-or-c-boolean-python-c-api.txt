Natural Text
I have a variable  that I know is a Python bool. It either is  or  (eg.  or ). Now I would like to convert it to C++ somehow.Doing this with strings isn't so hard, there is a helper function for that -  that converts python string into C string. Now I need something like that for boolean (or int as there is no  in C).Or if there isn't conversion, maybe some function that can compare with true or false? Something like ?Here is some example code for easier understanding of what I need:This obviously wouldn't work as there is no such function like  :( how can I do that?Snippet of Python header (boolobject.h):
Every Python object can have its truthiness evaluated with , and you should use this in preference to direct / singleton checking unless you absolutely know, for certain, that the object is a .Usage is:You can just test  if you know it's definitely a bool, or use  to convert any logical integer type (anything implementing , and  is a subclass of , so it's also logically an integer) to a signed  value (if  returns a number that doesn't fit in signed , it will return -1 with exception set).The reason not to do  in general is because it's like doing  at the Python layer. If  is , or an non-empty , that will treat it as false, when Pythonic code is rarely concerned about being  or , but rather, "truthiness" and "falsiness".In addition, this:is flat wrong. That will incref  and return it; none of the subsequent code will execute. You'd want:for a borrowed reference, adding a subsequent:to make it an owned reference if you intended to return it later (since it's a singleton that won't go away, using a borrowed reference is fine unless you know it will be ed later, e.g. because you returned it and passed ownership to a caller who can't know it's a borrowed reference).
The answer is in Python headers but may not be obvious.Python headers declare 2 somewhat static objects here, with couple of macros:It seems that both  and  are in fact Python objects and all values in Python that are  or  are in fact references to these two global  and  objects. When such object is returned using , the reference count is incremented.This means that every C pointer that points to PyObject of value  in fact points to same memory address. Therefore checking if  is true or false is as simple as:It's generally good idea to use  to verify if object in question is Python boolean.


Answer URL
https://docs.python.org/3/c-api/object.html#c.PyObject_IsTrue
https://docs.python.org/3/c-api/number.html#c.PyNumber_AsSsize_t
