Natural Text
What I'm trying to do is ship my code to a remote server, that may have different python version installed and/or may not have packages my app requires.Right now to achieve such portability I have to build relocatable virtualenv with interpreter and code. That approach has some issues (for example, you have to manually copy a bunch of libraries into your virtualenv, since  doesn't work as expected) and generally slow.There's (in theory) a way to build python itself statically.I wonder if I could pack interpreter with my code into one binary and run my application as module. Something like that:  or .
There are two ways you could go about to solve your problemUse a static builder, like freeze, or pyinstaller, or py2exeCompile using cythonI will explain how you can go about doing it using the second, since the first method is not cross platform and version, and has been explained in other answers. Also, using programs like pyinstaller typically results in huge file sizes, where as using cython will result in a file that's KBs in sizeFirst, install cython. Then, rename your python file (say test.py) into a pyx file Then, you can use cython along with GCC to compile it (Cython generates a C file out of a Python .pyx file, and then GCC compiles the C file)(in reference to https://stackoverflow.com/a/22040484/5714445)NOTE: Depending on your version of python, you might have to change the last command. To know which version of python you are using, simply useYou will now have a binary file 'test', which is what you are looking forNOTE: Cython is used to use C-Type Variable definitions for static memory allocation to speed up Python programs. In your case however, you will still be using traditional Python definitions.NOTE2: If you are using additional libraries (like opencv, for example), you might have to provide the directory to them using -L and then specify the name of the library using -l in the GCC Flags. For more information on this, please refer to GCC flags
You might wish to investigate Nuitka. It takes python source code and converts it in to C++ API calls. Then it compiles into an executable binary (ELF on Linux). It has been around for a few years now and supports a wide range of Python versions.You will probably also get a performance improvement if you use it. Recommended.
Freeze options:https://pypi.python.org/pypi/bbfreeze/1.1.3http://cx-freeze.sourceforge.net/However, your target server should have the environment you want -> you should be able to 'create' it. If it doesn't, you should build your software to match the environment. I found this handy guide on how to install custom version of python to a virtualenv, assuming you have ssh access: https://stackoverflow.com/a/5507373/5616110In virtualenv, you should be able to pip install anything and you shouldn't need to worry about sudo privileges. Of course, having those and access to package manager like apt makes everything a lot easier.
You're probably looking for something like Freeze, which is able to compile your Python application with all its libraries into a static binary:PyPi page of FreezePython Wiki page of FreezeSourceforge page of Freeze
To freeze your python executable and ship it along your code, embed it in an empty shell app. Follow the instructions how to embed python in an application from the official documentation. You can start building a sample app directly from the C sample code they give on the web page. Make that program execute your python application through the embedded python. Ship the program, the embedded python you used and your python program. Execute that program.
If you are on a Mac you can use py2app to create a .app bundle, which starts your Django app when you double-click on it.I described how to bundle Django and CherryPy into such a bundle at https://moosystems.com/articles/14-distribute-django-app-as-native-desktop-app-01.htmlIn the article I use pywebview to display your Django site in a local application window.


Answer URL
https://docs.python.org/3/extending/embedding.html#embedding-python-in-another-application
