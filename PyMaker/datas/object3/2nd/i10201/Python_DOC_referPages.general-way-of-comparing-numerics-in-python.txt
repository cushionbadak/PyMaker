Natural Text
This question already has an answer here:What is the best way to compare floats for almost-equality in Python?                    13 answers                I have been looking around to find a general way of comparing two numerics in Python. In particular, I want to figure out whether they are the same or not.The numeric types in Python are:For example, I can compare 2 integers (a type of numeric) by simply saying:For floats, we have to be more careful due to rounding precision, but I can compare them within some tolerance.QuestionWe get 2 general numerics  and : How do we compare them? I was thinking of casting both to complex (which would then have a 0 imaginary part if the type is, say, ) and compare in that domain?This question is more general than simply comparing floats directly. Certainly, it is related to this problem, but it is not the same.
In Python 3.5 (and in Numpy) you can use Read the PEP 485 that describes it, Python 3.5 math library listing and numpy.isclose for more. The numpy version works in all versions of Python that numpy is supported. Examples:The relative and absolute tolerance can be changed.  Relative tolerance can be thought of as +- a percentage between the two values:The absolute tolerance is a absolute value between the two values. It is the same as the test of All numeric types of Python are support with the Python 3.5 version. (Use the  version for complex)I think longer term, this is your better bet for numerics. For older Python, just import the source. There is a version on Github. Or, (forgoing error checking and  and  support) you can just use:
If you are looking to compare different types of numerics, there is nothing wrong with the  operator: Python will handle the type-casting. Consider the following:In cases where you are doing mathematical operations that could result in loss of precision (especially with floats), a common technique is to check if the values are within a certain tolerance. For example:In this case, you can find the absolute value of the difference and make sure it is under a certain threshold:
Why not just use   ?I'm pretty sure this works for all numeric types.


Answer URL
https://docs.python.org/3/library/math.html#math.isclose
