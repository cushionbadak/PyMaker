Natural Text
I've read tons of articles and tutorial about Python's 3.5 async/await thing. I have to say I'm pretty confused, because some use get_event_loop() and run_until_complete(), some use ensure_future(), some use asyncio.wait(), and some use call_soon().It seems like I have a lot choices, but I have no idea if they are completely identical or there are cases where you use loops and there are cases where you use wait().But the thing is all examples work with  as simulation of real slow operation which returns an awaitable object. Once I try to swap this line for some real code the whole thing fails. What the heck are the differences between approaches written above and how should I run a third-party library which is not ready for async/await. I do use the Quandl service to fetch some stock data.I hope you get the point how lost I feel and how simple thing I would like to have running in parallel.
If a third-party library is not compatible with  then obviously you can't use it easily. There are two cases:Let's say that the function in the library is asynchronous and it gives you a callback, e.g.So you can do:In that case you can wrap such functions into the asyncio protocol like this:(use  on exception)Then you can simply call that wrapper in some  function with :Note that  works with any  object. You don't have to declare  as .If the function in the library is synchronous then you can run it in a separate thread (probably you would use some thread pool for that). The whole code may look like this:If you can't use threads for whatever reason then using such a library simply makes entire asynchronous code pointless.Note however that using synchronous library with async is probably a bad idea. You won't get much and yet you complicate the code a lot.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
