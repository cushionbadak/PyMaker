Natural Text
In my application, I use boost_python and python 3.5.2. All built from source in Ubuntu 14.When I built Python 3.5.2 from source with  options in Ubuntu, I got  (7.6kB) and  (12MB). I assume the big one is the real one and the small one might be something forwarding calls to the real interfaces.As boost_python might assume the client to link against python (https://svn.boost.org/trac/boost/ticket/2615), I linked  with my application. But when I run it, I got the unresolved symbols error. or  both listed all python symbols unresolved which could be found in . depend on  but itself has no those symbols. I think based on that I should link my application with  instead of with . But the weird thing is that if I use LD_PRELOAD to load the libpython3.so, those symbols are found in Why having the  and how to use it? Or shall I just only use the  directly?
The  library is there to support PEP 384 -- Defining a Stable ABI.Historically, Python has not guaranteed ABI stability at the C level between minor version releases (e.g. between 3.4 and 3.5).  They might be source compatible but certain structures might change size, or structure members change type, etc.  However, there are portions of the ABI that are mature and have remained stable over a longer period.The Stable ABI PEP identified a subset of the Python C API that was stable wouldn't place undue restrictions on future Python development if the developers committed to maintaining binary compatibility for the subset.  If a program or extension limited itself to only using this subset, then it could theoretically be used across different Python versions without recompilation.Once you've compiled some code using the stable ABI, there is still the question of how to link to the runtime.  For Python 3.5.x, you'd want to link using .  For Python 3.6.x, you want .  This is where  comes in.The  library only has one purpose: for Python 3.5 it links to , and on 3.6 it links to , etc.  So if an extension links using , it will have access to the runtime of the version of Python installed on the system.Now back to your original problem: unless you are absolutely sure that you are only using features found in the stable ABI (which in your case means finding out whether  only uses the stable ABI), then you probably want to link to the versioned .If in doubt, you're better off linking to the versioned library: it is much easier to debug a dynamic link error than a segfault due to ABI changes, should you upgrade to a newer version of Python.


Answer URL
https://docs.python.org/3/extending/embedding.html
