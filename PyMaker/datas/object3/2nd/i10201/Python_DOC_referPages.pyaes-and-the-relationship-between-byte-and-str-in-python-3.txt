Natural Text
I'm trying to use pyaes (https://github.com/ricmoo/pyaes/blob/master/README.md) in Python 3 to encrypt and decrypt text using pyaes. When I encrypt text, I give pyaes a  value i.e.when I decrypt though, I get back a  type:Printing  produces the following output, which seems to contain the original text:But its not quite the same; one is a  the other is a :I'm struggling to understand the relationship between  and whatever Python 3's internal representation of  is. How do I convert the  type into  to get my plaintext? I have confirmed that running the examples on the pyaes readme page have the same problem. I'm guessing that is going to be something to do with encodings.
In Python 3  type represents a string in unicode format. It is composed of relatively abstract codepoints, that is numbers coding characters.There are several ways to transform (encode) those codepoints to actual bytes which are known as "encodings". utf-8 and utf-16 are some encodings which allow to encode unicode characters.Note that some encoding (as ASCII) does not allow to encode unicode characters.When you encode a  string in Python, you obtain a list of bytes of type . You can then decode this list of bytes to get a string.The point to keep in mind is that you have to specify an encoding to encode a  string and you have to know the encoding of a string to be able to decode it. If you don't specify encoding, Python will try to encode and decode with its default encoding and you could obtain "random" results.In you specific case, the difference is not visible because all the characters of your strings are ASCII chars and, fortunately, the 128 first codepoints of unicode match the ASCII table.Try to introduce some 'exeotic' characters (like é, ç or Ë) in your string and you will see a difference.Now, pyaes does not encrypt/decrypt unicode codepoints but bytes.So you have to encode the strings you encrypt and you have to know the used encoding to decode the decrypted strings.More information in the Python doc:bytesstrstrings and bytes litterals
 will give you a , which will most likely be what you want.  A  object is a raw string of bytes in an unspecified encoding.  To convert that to a , you have to tell Python to decode it using .   defaults to UTF-8, but you can tell it which encoding to use.I just took a glance at the source and I see nothing encoding-specific, so the encoding of the decrypted string should match that of the encrypted string.
for all others, this can help you: if decrypted.decode('utf-8') == plaintext:


Answer URL
https://docs.python.org/3/library/stdtypes.html#bytes
https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str
https://docs.python.org/3/reference/lexical_analysis.html#strings
https://docs.python.org/3/library/stdtypes.html#bytes.decode
