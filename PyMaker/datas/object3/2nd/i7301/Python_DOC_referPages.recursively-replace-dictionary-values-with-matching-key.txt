Natural Text
I'm trying to take a dictionary and find all of the keys that match  and replace their value with . The dictionaries can in theory be infinitely deep, so it must be done recursively. My current solution replaces values correctly, but raises an exception saying "maximum recursion depth exceeded while calling a Python object" (not to mention the fact that it's poor use of recursion with no return values).An example of an operation it would perform would be the following:Original DictionaryThen I'd make a call to , which I'd preferably like to change over to returning the updated dictionary ().Replaced Value DictionaryHow can I go about fixing my recursion? Thank you in advance.
You have some strange behavior where you are expecting a  but you don't have one.  Also your description implies it should replace nested keys, but your code you will miss when a dictionary at the top level does not have the key but at a lower level does.  I believe the below code accomplishes what you described:EDIT: As @dashiell suggested, moving the top level reassignment after the recursive search/replace avoids the infinite recursion trap of having  exist in the .
Here's a functional-style take:It's not efficient in Python (since all values/subdicts are re-created), but demonstrates how to solve your problem without side-effects and without mutating objects.
I think this is enough.. no need of extra variables,and in most of the systems, default recursion depth is around 1000, you can change it https://docs.python.org/3/library/sys.html#sys.setrecursionlimit


Answer URL
https://docs.python.org/3/library/sys.html#sys.setrecursionlimit
