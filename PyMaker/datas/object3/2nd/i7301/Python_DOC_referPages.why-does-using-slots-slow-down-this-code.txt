Natural Text
I read in Usage of __slots__? that using  in Python can actually save time. But, when I tried to find the time taken using , the results were contrary.... gave output: And using slots:... gave output: Using slots actually took longer. Why do we need to use  then?
The article you quoted says using slots provides for fasterattribute access - you tested the time of object creation, andnever accessed attributes of your object.Testing a single operation is not statistically meaningful - measure the times of, say, 100000 operations.
 can save time (depends on Python version), but that's not usually what you use it for. What it really saves is memory. Instead of a  of fairly large size for every instance, you store attributes directly in the C struct backing the object, and the class itself stores a single copy of the lookup table mapping from names to struct offsets for each attribute. Even on modern Py3 x64 with key-sharing dicts, it's still 96 bytes for a key-sharing  where the class has a single instance attribute, on top of the 56 bytes for the object structure itself.By using , you eliminate the 16 bytes for the pointers to the  and  attributes, and eliminate the  entirely.For comparison on Py 3.5:That's a savings of over 100 bytes per-instance; on Py2 (w/o key sharing dictionaries) the savings are even greater.So it's not that  is faster in general (it's usually pretty similar), but if you're making millions of instances, saving 100+ B per instance might help you keep your code in cache, in RAM, etc., rather than running out of memory and paging out half your data to swap.As the other answer notes, you never actually accessed your attributes, so you weren't benchmarking slot access at all, which is why you saw no difference at all. Using   magic, I find that loading the  attribute of a given instance repeatedly is about 15% faster when it's slotted (33.5 ns with  vs. 39.2 ns without), but that's only noticeable in microbenchmarks; it rarely matters in real code (where the actual work is doing a lot more than just attribute lookup). Reducing memory usage by a factor of 2-3x is a much bigger gain when it matters.


Answer URL
https://docs.python.org/3/library/timeit.html
