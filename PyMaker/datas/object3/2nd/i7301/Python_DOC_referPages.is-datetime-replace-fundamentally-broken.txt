Natural Text
This question already has an answer here:Python datetime object show wrong timezone offset                    1 answer                Converting a timezone naive date time to a specific timezone gives a completely incorrect result.returns a one minute not one hour offset vs UTCI've seen a few datetime peculiarities before but this one is breathtaking.
The main problem here is that you are using a  time zone.  zones do not follow the  interface and cannot be simply attached to  objects (either through the constructor or through ). If you would like to use  time zones, you should use  with a naive . If the  is already timezone-aware, you can use  to convert it between zones.This is because 's interface uses  to attach a static time zone to a . For the same reason, if you do arithmetic on the now-localized  object, it may give similar improper results and you'll have to use  to fix it. The reason this is done this way is that, historically, it has not been possible to handle ambiguous datetimes using a Pythonic  interface, which changed with PEP 495 in Python 3.6, making 's workaround less necessary.If you would like to pass a  to a  using  or the constructor, or you would prefer to use the pythonic interface, 's time zone suite implements a PEP 495-compliant  interface. The equivalent using a  zone is:
I have often had bad luck using  with  objects.  I have however found this construct to be reliable:Code:Update from Comments:From the (pytz DOCS)Unfortunately using the tzinfo argument of the standard datetime constructors ‘’does not work’’ with pytz for many timezones.It is safe for timezones without daylight saving transitions though, such as UTCSo it is not just bad luck, it is problematic for pytz objects with timezones having DST.Test Code:Results:


Answer URL
https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone
https://docs.python.org/3/library/datetime.html#datetime.datetime.replace
https://docs.python.org/3/library/datetime.html#tzinfo-objects
