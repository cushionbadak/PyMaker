Natural Text
I want to match a string to a specific pattern or set of words, like below: is the query and is the pattern to match.The pipes would represent words that would substitute each other. The pattern could also be grouped like . I would like the module to return True or False whether the query matches the pattern, naturally.What is the best way to accomplish this if there is not a library that does this already? If this can be done with simple regex, great; however I know next to nothing about regex. I am using Python 2.7.11
please let me know if this correctly answers your question.Here's an example of it running:If there are no matches then  will return nothing.You may know "next to nothing about regex" but you nearly wrote the pattern.The sections within the parentheses can also have their own regex patterns, too. So you could match "apple" and "apples" with
The  based solutions for this kind of problem work great. But it would sure be nice if there were an easy way to pull data out of strings in Python without have to learn regex (or to learn it AGAIN, which what I always end up having to do since my brain is broken). Thankfully, someone took the time to write .  is a nice package for this kind of thing. It uses regular expressions under the hood, but the API is based on the  format specification mini-language, which most Python users will already be familiar with. For a format spec you will use over and over again, you'd use . Here is an example: I have put a package I created for my own use on pypi  in case others find it useful. It make things just a little bit nicer. It makes heavy usage of . The idea is to combine the functionality of a  and a  into a single object, which I have called a  (also the package name). The package contains a number of useful custom parmatter types.  has a precompiled parsing specification (similar to the object from  above). Use it like this: Note that for "unformatting", the  package uses the method name . However, my package uses . The reason for this is that  classes are subclassed from , and  already has a  method (which provides different functionality). Additionally, I think  is a more  intuitive method name, anyway. EDIT: see also my previous answer to another question, which discusses these packages as well. 


Answer URL
https://docs.python.org/3/library/string.html#format-specification-mini-language
