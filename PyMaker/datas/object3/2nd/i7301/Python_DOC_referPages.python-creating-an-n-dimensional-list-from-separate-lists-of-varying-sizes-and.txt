Natural Text
Say I have these lists:I would like to create a 3-Dimensional data structure that contains new lists combining all the elements of each list together in all possible ways. I would then like to access these new list using matrix like indexing. So for example, say f is a function that does what I want. Then I could do this:Then m[0][0][0] would give [1,6,'a'], m[1][0][0] would give [2,6,'a'], and so on. Basically, I know I can already do this using nested for loops.This gives me a list of lists of lists of lists.This is fine, but I have to do this for dimensions higher than 3, and the many nested for loops just seems like it can't possibly be the best or most efficient way to build this type of data structure. I can't help but thinking there must be a better solution, something in some library like the function I made up above, maybe numpy function, but I've done a lot of searching and have not found something for lists of varying sizes and data types like I have. Any ideas?
You can use  to take the cartesian product of the lists, then use  for reshaping, taking the last dimension from the number of lists, then to the length of the innermost list and up until the length of the outermost:You can generate the shape on the fly by using:  (suggested by @StevenRumbalski), so that you now have:Or:Without needing to specify the last dimension.
Vanilla Python.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
