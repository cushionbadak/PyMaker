Natural Text
This question already has an answer here:Why can't decimal numbers be represented exactly in binary?                    20 answers                Is floating point math broken?                    28 answers                Here is my code,The output is 0.9999999999999999, Why not output 0.9?
Consider this fraction. What will be it's output?  simple right. Now for  what will be the output? seems okay because More accurately,or even moreHell if you do the same for say 10 decimal points you still get,As you see we are getting more and more nearer to the value  but neverare we exactly equal. So that means we are getting more and more accurate with such high precisions.However you won't normally require such precisions for your simple programs. See what Python docs say about it,0.999999999 , That is more digits than most people find useful, so Python keeps the number of digits manageable by displaying a rounded value insteadButIt’s important to realize that this is, in a real sense, an illusion: the value in the machine is not exactly 1/10, you’re simply rounding the display of the true machine value. This fact becomes apparent as soon as you try to do arithmetic with these valuesWhat this means basically is just because you seein the interpreter doesn't mean it is just  the true value in the machine would be something like,Try this in your interpreter,So this is what is happening to all those  to finally get yourFor more reference, see this YouTube video.
Your code iterates from  to , in total 10 iterations. This gives , but because of python float accuracy adding  ten times results in .


Answer URL
https://docs.python.org/3/tutorial/floatingpoint.html
