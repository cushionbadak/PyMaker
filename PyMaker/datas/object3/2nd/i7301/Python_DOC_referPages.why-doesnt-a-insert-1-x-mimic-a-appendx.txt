Natural Text
So I have the following Python code, which appends numbers 1-10 to the list :And, as expected, gives us .Although impractical, just out of curiosity, I attempted to recreate this result using  instead of :Which gave me the result .I tried this with other ranges as well, and the same thing happens every time: It is in ascending order, except for the smallest number being at the end.From the Python Documentation Tutorial, I now know that  can be used to mimic . However, I still do not understand why inserting the values to the last position in a list works except for the smallest value.
The fundamental thing to understand is that  is not the same as . It is indeed the same as :When the list has size 1 and more, then  will always point to the spot just before the last element (or, technically, to the spot at which the last element currently is), which is where  will put your new item.As you've already figured out,  points to the spot just after the last element, which is where  inserts elements. So, , or  will point to the spot of the last element, and  will push the last element to the right, and place the new element in the last element's old position. 
I think this happens because  puts in the element right before the specified position. So what  does is, it puts the  right before the last element, and hence becomes the second to last. But when the list is empty, there is no such second to last element and it places it in the last index.
That's because  matches the  or the index of the last item in your list, so if you unpack your  calls your  list changes as:
When you insert the very first item, the number 1, it is inserted at the exact end of the list because there isn't any other item in the list. Once this has happened, the rest of the inserts occur before the last item of the list, because -1 is the last item of the list and  inserts before the specified index. I am actually sort of surprised that  works at all on an empty list.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html
