Natural Text
I am importing a module with a few functions which connect to a database. I call functions from that module like so:Every function established a database connection. I am trying to reduce code duplication so I can have a function which connects to the DB like so:in :but i would have to call  from every . Is there a way to ensure if a function from an imported module is called another function runs by default? so I dont have to have  as the top like in every function within ? and so the connection isn't made for every single call? I know it wouldnt hurt the performance for my purposes but I am just curious. I know I can pass the connection back to the caller after the first call and then for the subsequent call(s) I can pass the connection to the function in the imported module but that is something I want to avoid doing.like when you do  everything under  is run is there perhaps something like?
You can use a decorator to first call , then call the function as normal:You can also make it pass a database argument to avoid global variables:
I don't know how you define your , but its globals are more than enough as long as you immediately execute your function that sets up the stage for all the other functions, e.g.:And now if you import it anywhere:Here's a simple setup with an in-memory SQLite instance:And when you want to use it:


Answer URL
https://docs.python.org/3/glossary.html#term-decorator
https://docs.python.org/3/library/functools.html#functools.wraps
