Natural Text
I made some script for modify text.But I can't make result.below is my script.i just begin study python.I think my script didn't work because please help me.below is my text file. text file has data multi data.I want result like below.
The problem is that each time you open file with , it gets erased. You can use "temporal" file with different name to store results of your first  loop, or I would suggest to aggregate content of each line to list, and then write it straight away. Additionally, you have problems with your "split_line" value, it is always 0. I guess what you mean is .Here is a code:
The new-ish  module (available in Python >= 3.4) is a much, much easier way for reading and writing files than the traditional  function. It is also great for working with path-like objects (both in Windows and for other OSes). To read a file located at a path, you can just grab the text directly from the  object! ...and WRITE text directly!You can also use its  method rather than the  function: The  statement is a context manager. It automatically "cleans up" by closing the file when you are done (no matter what happens- even if there is an error). It's Paths - Paths all the way downHere is more about the  library copied from another of my answers. To simplify: you can build up any path (directory and file path objects are treated exactly the same) as an object, which can be an absolute path object or a relative path object. You can use raw strings to make complex paths (i.e., ) and  will be very forgiving. However, note that there are better ways to build up paths than raw strings (see further down). Here are examples:Note that if you're on Windows  forgives you for using the "wrong slash" in the second example. See discussion at the end about why you should probably always use the forward slash. Simple displaying of some useful paths- such as the current working directory and the user home- works like this: To navigate down the file tree, you can do things like this. Note that the first object, , is a  and the rest are just strings: Check to see if it is a file or a directory (and exists) this way: Make a new, empty file without opening it like this (silently replaces any existing file): To make the file only if it doesn't exist, use :Make a new directory (under the current directory, ) like this: Get the file extension or filename of a path this way:Use  for the entire last part of the path (stem and extension if they are there):Rename a file using the  method (which returns the same path object but with a new filename):You can iterate through all the "stuff' in a directory like so using : Sidebar: backslashes ()Be careful when using backslashes in a path string, especially ending a path with a backslash. As with any string, Python will read that terminating backslash as an escape character even in raw input mode. Observe:So this will give a pretty cryptic error message if you are not aware of this issue: The reason for this error is that  is assumed to be a single quotation in the string. This works fine:  (the second single quotation ends the string).If you insist on using backslashes, be sure to use raw input mode or you will run into problems. For example, the  character represents a tab. So when you do this (without raw input): You are putting a tab character into your path. This is perfectly legal and Python won't complain until you do something that causes Windows to try turning it into a real Windows path: This is also a very cryptic error if you do not know what is going on! Best to avoid the backslash characters altogether when messing about with paths. 
It's work.I change strings content.Thank you so much.


Answer URL
https://docs.python.org/3/library/pathlib.html
