Natural Text
I think this is basic and I've seen multiple versions of the question I am asking although they are all not exactly what I am facing.I have a script with two functions currently, and I want the ability to evoke just the second function but it needs to run the first function. My script is still messy so I am using an example:Is there a way to execute the second function without having to call the first function when importing a script? I have no clue where to input the func1_list variable in func2 so that anyone can just go straight to func2 and run it (and it will automatically execute func1 anyways).EDIT:Both func1 and func2 should be able to be executed individually - func2 relies on func1. Both will show information (func2 just showing modified information). Example: func1 will run some input and show the raw result, whereas func2 will take that raw result and modify it. I'd want the ability to see the raw and modified result if needed.
If you want  to only invoke when directly executing your script, you'll need to modify your script a bit so it is ignored when called from a module. You'll use an if condition like this: equals  only when the script is invoked directly, so it will not execute when called from a module.For a detailed description of how it works, look here.
If you are trying to import your script, you must follow the best practices and conventions.Without starting to build a full-package, you need to, at least, ensure that you do not execute code that is not requested when importing the module.Either you wrap your code into a , or you remove function calls from within the root of your module and you provided an  which must be called to prepare the environment.There is no shame in using an init_function() and a lot of libraries do that. However, I recommend that you structure your code within Python classes. Example of :And then in your main code:
Note, your question is basically asking for a primer on dependency injection.  You would probably do well to read up on it.  It's language-agnostic - it applies as nicely to Java as it does to Python.There are several different approaches you can take for this; the best choice depends on your needs and what the functions involved do (which is why I was asking all the questions in the comment).The simplest form of what you're looking for is to just have one function invoke the other.  (COLDSPEED made reference to this.):In that case, func1 and func2 are both able to be called.  The importing code doesn't have to worry about calling func1 before func2 - that's taken care of by func2.Before I get into your other choices, you mentioned that both functions output information.  It's a good practice to separate your calculations from your output of them.  So, DON'T do this:Because then calling  would print out the "func1" line and the "func2" line.  Instead, separate the logic from the output.  It may seem more complicated, but it gives you more building blocks to play with:Now you have a lot of reusable functions that don't generate a lot of noise.This is a good step, and you can use this easily.  What happens if  takes an hour to run?  You don't want to run it again if it's already been run.  Then you want to use module variables to save state.  Something like this:Now you get code calling its dependencies only if it needs to.  We're getting better.  But we're passing input into func2, and we only care about it in func1.  You could make a module variable  that func1 refers to, and your importing code could set it before calling any of the funcs:And invoke it as:This could be nice, but it's dangerous - what if the importing code doesn't set ?  The solution to that is what Fabien mentioned about having a class:This would be invoked as:This does the nice thing of not letting you run functions without constructing the object, and the way the  is structured, you can't create the object without passing .  The results found by  are stored within the object, so they're always associated together.  In your case, this is likely the cleanest way to do what you want.


Answer URL
https://docs.python.org/3/tutorial/classes.html
https://docs.python.org/3/library/__main__.html
