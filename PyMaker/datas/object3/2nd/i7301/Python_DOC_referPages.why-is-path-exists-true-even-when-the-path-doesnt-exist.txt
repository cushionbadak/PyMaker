Natural Text
This question already has an answer here:Why does “if foo:” follow the branch even if the function foo returns False?                    3 answers                I'm supposed to ask the user to enter a directory and if the directory doesn't exist, we tell them and then make a directory for them.This is my code so far. It acts in the same way whether or not the directory whose path is entered actually exists.
Because you have to call the  method. See:Method/function objects always evaluate to , hence why you are always seeing that the path exists.
The mkdir you are using is this one in  (some of the comments were assuming )  Create a new  directory at this given path. If mode is given, it is combined with  the process’ umask value to determine the file mode and access flags.  If the path already exists,  is raised.If parents is true, any missing parents of this path are created as  needed; they are created with the default permissions without taking  mode into account (mimicking the POSIX mkdir -p command).If parents is false (the default), a missing parent raises  FileNotFoundError.If exist_ok is false (the default),  is raised if the  target directory already exists.If exist_ok is true,  exceptions will be ignored (same  behavior as the POSIX mkdir -p command), but only if the last path  component is not an existing non-directory file.Changed in version 3.5: The exist_ok parameter was added.It should work fine without parameters if you provide a valid path.Note if you want to check if it exists, you'll need to call the  method - don't forget the However, it's not a great approach, because someone else could make the directory(or a file) at that path between when you check for it and when you get around to creating it. This is called a race condition.It's better to wrap the  in a  and let the OS tell you if there's a problem. There are a lot more possibilities for exceptions than just already existing. eg.


Answer URL
https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir
