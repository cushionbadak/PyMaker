Natural Text
How can I access the local variables of a super class method in an overridden method in the subclass? The code below gives a This isn't surprising, and it can be fixed by making  an instance attribute, but can  be accessed as-is in  more directly?
SummaryQ. ... can x be accessed as-is in Bar.foo_method more directly?As written, the answer is no.By the time the  has returned, the stack frame for that method has been wrapped-up and the local variables are gone.  There is nothing to access.Alternative solution:  return statementThe easiest solution to sharing the data is to have  return x:Alternative solution:  dynamic scopingIf you're looking for something akin to dynamic scoping, the easiest solution is to pass in a shared namespace:If you want to simulate dynamic scoping in nested calls, consider using collections.ChainMap(). 


Answer URL
https://docs.python.org/3/library/collections.html#collections.ChainMap
