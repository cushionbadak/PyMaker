Natural Text
How does this swapping of values of a and b work internally? Its definitely not using a temp variable.
Python separates the right-hand side expression from the left-hand side assignment. First the right-hand side is evaluated, and the result is stored on the stack, and then the left-hand side names are assigned using opcodes that take values from the stack again.For tuple assignments with 2 or 3 items, Python just uses the stack directly:After the two  opcodes (which push a value from a variable onto the stack), the top of stack holds . The  opcode swaps the top two positions on the stack so the stack now has  at the top. The two  opcodes then takes those two values and store them in the names on the left-hand side of the assignment. The first  pops a value of the top of the stack and puts it into , the next pops again, storing the value in . The rotation is needed because Python guarantees that assignments in a target list on the left-hand side are done from left to right.For a 3-name assignment,  followed by  is executed to reverse the top three items on the stack.For longer left-hand-side assignments, an explicit tuple is built:Here the stack with  is used to build a tuple (in reverse order,  pops from the stack again, pushing the resulting tuple onto the stack), and then  pops the tuple from the stack again, pushes all elements back from the tuple back onto the stack again for the  operations.The latter may seem like a wasteful operation, but the right-hand side of an assignment may be something entirely different, a function call that produces a tuple perhaps, so the Python interpreter makes no assumptions and uses the  opcode always. It does so even for the two and three-name assignment operations, but a later (peephole) optimization step replaces a  /  combination with 2 or 3 arguments with the above  and  opcodes for efficiency.


Answer URL
