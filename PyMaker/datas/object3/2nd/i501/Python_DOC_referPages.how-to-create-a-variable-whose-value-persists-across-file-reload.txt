Natural Text
Common Lisp has  whichcreates a global variable but only sets it if it is new: if it alreadyexists, it is not reset. This is useful when reloading a file from a long running interactive process, because it keeps the data.I want the same in Python.I have file  which contains something like this:When I do , the value of  is lost which I wantto avoid.How do I keep  across ?PS. I guess I can follow How do I check if a variable exists? :but it does not look "Pythonic" for some reason... If it is TRT, please tell me so!Answering comments:I am not interested in cross-invocation persistence; I am already handling that.I am painfully aware that reloading changes class meta-objects and I am already handling that.The values in  are huge, I cannot go to disk every time I need them.
Here are a couple of options. One is to use a temporary file as persistent storage for your cache, and try to load every time you load the module:The only issue with this is that you need to trust the environment not to write anything malicious in place of the temporary file (the  module is not secure against erroneous or maliciously constructed data).Another option is to use another module for the cache, one that does not get reloaded:And then:
Since the whole point of a reload is to ensure that the executed module's code is run a second time, there is essentially no way to avoid some kind of "reload detection."The code you use appears to be the best answer from those given in the question you reference.


Answer URL
https://docs.python.org/3/library/importlib.html
