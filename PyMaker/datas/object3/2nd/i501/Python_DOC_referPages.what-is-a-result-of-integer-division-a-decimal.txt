Natural Text
I'm not sure how integer division actually works with decimal. Considering these two examples on :Regular division gives 10 but the integer division of 4 by 0.4 results in 9.0. Do you know the behavior of integer division with decimal and why the result is this way?
The CPython's implementation of floor division of a float number, as either a dividend or a divisor, lies in the  function, which calls the  function (which implements the  function) for the actual calculation, which, with the following lines of code:tells you that the way that floor division works for a float number is to first call the  function to obtain the remainder of the division, subtract the remainder from the dividend , and then divide it by the divisor , before applying the  function on the resulting quotient .And if you try performing the modulo operation of , expecting it to be  because 4 / 0.4 should be mathematically 10:You'll see the classic floating error inherent from the way decimal numbers are approximated by the binary system. As a result 0.4 is actually stored as something slightly greater than 0.4, which you can verify by instantiating a high-precision  object with 0.4:which is why 4 % 0.4 has a remainder of 0.3999999999999998 instead of 0, and as a result, with the way  calculated the quotient, by first subtracting the remainder from the dividend, you get:so naturally,


Answer URL
https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations
