Natural Text
I'm not asking how to cancel such task. It is not possible and it it is explained here: https://stackoverflow.com/a/33578893/5378816My concern is this change in wait_for:Changed in version 3.7: When aw is cancelled due to a timeout,  wait_for waits for aw to be cancelled. Previously, it raised  asyncio.TimeoutError immediately.Don't get me wrong, I like it, it is an improvement.However, this program will now hang in  (Python 3.7):An uncancellable task is a programming error. But if I need to be defensive, how do I prevent the  from hanging indefinitely?I tried this. First timeout: before cancelling, second timeout: before giving up.There is one tiny issue I don't much care about. When it raises  I cannot tell if it happened at first or at the second timeout. Basically I think it works, but is it really correct?
But if I need to be defensive, how do I prevent the wait_for from  hanging indefinitely?I don't think to consider each task as potentially uncancellable is a good idea.Usually you just assume this situation won't happen and it's ok because, yes, uncancellable task is a programming error and it's not a kind of error that you expect to see often. Same way you usually don't expect some inner code will suppress  or any other .There's nothing wrong in expecting third-party code to follow some contracts (like in example above or, let's say not randomly to call ). Otherwise you'll have to write much more code and probably still not cover all possible cases.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.wait_for
