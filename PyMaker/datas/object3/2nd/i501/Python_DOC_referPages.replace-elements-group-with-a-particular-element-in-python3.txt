Natural Text
I have a list of over 50 elements. These elements are lowercase and uppercase alphabets, numbers, special characters.eg.I want to interchange particular elements with a special character.eg. and so on, I have to replace a particular set of elements with 11 selected special characters. Like I replaced few selected elements with 3 of the special characters.How to do it efficiently.
You could do it using  method following way:Output: method of  is used for creating translation table, just feed it with two equal length s with first consisting of keys and second of values.  method accept that table and replace characters accordingly, or left original intact if that there is not such key in table.EDIT: As noted by Olivier Melan√ßon it can be used only if you want to replace 1 character with 1 character.
You first need to define your replacement rules, by example with a . In particular, since  allows O(1) access, this is as fast as your method will be able to get time-complexity-wise: that is solve it in a single traversal of the list.You can then traverse the list and replace each element if it has a replacement rule.If you wish to create a new list instead of mutating the initial one, you can use a list-comprehensionExampleOutput
Try this and set all of your maping in dictionary:
You can use the map function:Ex for the first replacement:sample_list can be a string too (each character is one element, but map will return an array either way).On a "string" list, you could just use the replace method:Of course if the source list is variable, write a loop around it...
Start with a simple function and refine it. Simple would be using 3  (for lookup set is better then lists) - if sets do not need to mutate, use  instead. Use a simple loop - straight forward:Output:To get more fancy use a dictionary and list-comp: Output:See: set()/frozenset()list comprehensionsWhy dict.get(key) instead of dict[key]?


Answer URL
https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
