Natural Text
What is the most Pythonic way of constructing an object to open multiple (context managed) resources and do work with those resources?I have a class which opens several managed resources, which are then operated on in class methods.For example, if I had to open a connection to a local cache database and to a web server at the same time (e.g. check for data in the cache first, then pull from the server if not there).I've been able to come up with some code to manage the resources using a yield statement, but it doesn't seem very intuitive. In Python, is there a canonical way of approaching this problem?Minimal example:Opening and closingUsing with a context managerThe code above seems to work fine, but it doesn't seem very intuitive. Specifically, the yield-next idiom seems a bit hard to digest.Is there a better way to open/close multiple managed resources which will be subsequently used in class methods in Python?
I think,  will make your code easierIMO, using  and  explicitly is more readable than  thingyNot actually about CMs, but big part of idiomatic python code includes naming.  and  reads as properties that should return boolean not be called, i.e. . This is what most people would expect from your interface. Actions, on other hand, should be spelled as verbs, like  and .Simple example with ideas above:


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack
