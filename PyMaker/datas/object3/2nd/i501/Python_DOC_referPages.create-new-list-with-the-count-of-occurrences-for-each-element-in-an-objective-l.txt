Natural Text
New to Python here.I am looking for a simple way of creating a list (Output), which returns the count of the elements of another objective list (MyList) while preserving the indexing(?).This is what I would like to get:I found solutions to a similar problem. Count the number of occurrences for each element in a list.This, however, returns a Counter object which doesn't preserve the indexing.I assume that given the keys in the Counter I could construct my desired output, however I am not sure how to proceed.Extra info, I have pandas imported in my script and MyList is actually a column in a pandas dataframe.
Instead of listcomp as in another solution you can use the function :UPDATE: As @ALollz mentioned in the comments this solution seems to be the fastet one. If OP needs a list instead of a tuple the result must be converted wih .
You can use the  method, which will count the amount of times each string takes place in . You can generate a new list with the counts by using a list comprehension:
Use  to create a dictionary of value counts and map the values. This will be fast, though not as fast as the Counter methods:Some timings for a moderate sized list:Larger list:
You just need to implement below piece of codenow list lout is your desired output
A pandas solution looks like this:Edit: One shouldn't use pandas if this is the only thing you want to do. I only answered this question because of the pandas tag.The performance depends on the number of groups:
This is one from the hettinger's classic snippets :)


Answer URL
https://docs.python.org/3/tutorial/datastructures.html
https://docs.python.org/3/tutorial/datastructures.html
