Natural Text
I am not sure why we need  in  statements. In my opinion, this code blockis the same with this one using :Am I missing something?
It makes a difference if you return early:Compare to this:Other situations that can cause differences:If an exception is thrown inside the except block.If an exception is thrown in  but it's not a .Other control flow statements such as  and  statements.
You can use  to make sure files or resources are closed or released regardless of whether an exception occurs, even if you don't catch the exception. (Or if you don't catch that specific exception.)In this example you'd be better off using the  statement, but this kind of structure can be used for other kinds of resources.A few years later, I wrote a blog post about an abuse of  that readers may find amusing.
They are not equivalent. Finally code is run no matter what else happens. It is useful for cleanup code that has to run.
To add to the other answers above, the  clause executes no matter what whereas the  clause executes only if an exception was not raised.For example, writing to a file with no exceptions will output the following:OUTPUT:If there is an exception, the code will output the following, (note that a deliberate error is caused by keeping the file read-only.OUTPUT:We can see that the  clause executes regardless of an exception. Hope this helps.
The code blocks are not equivalent.  The  clause will also be run if  throws an exception other than , or if  throws an exception, while  in the first version wouldn't be run in these cases.
In your first example, what happens if  raises an exception that is not ? ...  will not be executed.Compare that with the  version:  is guaranteed to be executed regardless of any exception being raised.
 is for defining "clean up actions". The  clause is executed in any event before leaving the  statement, whether an exception (even if you do not handle it) has occurred or not. I second @Byers's example.
Finally can also be used when you want to run "optional" code before running the code for your main work and that optional code may fail for various reasons.In the following example, we don't know precisely what kind of exceptions  might throw.We could run:But, most linters will complain about catching too vague of an exception.  Also, since we're choosing to just  for errors, the  block doesn't really add value.The above code has the same effect as the 1st block of code but is more concise.
Perfect example is as below:
As explained in the documentation, the  clause is intended to define clean-up actions that must be executed under all circumstances.If  is present, it specifies a ‘cleanup’ handler. The   clause is executed, including any  and  clauses. If an  exception occurs in any of the clauses and is not handled, the  exception is temporarily saved. The  clause is executed. If  there is a saved exception it is re-raised at the end of the   clause. An example:As you can see, the  clause is executed in any event. The  raised by dividing two strings is not handled by the  clause and therefore re-raised after the  clause has been executed.In real world applications, the finally clause is useful for releasing external resources (such as files or network connections), regardless of whether the use of the resource was successful.
Using delphi professionally for some years taught me to safeguard my cleanup routines using finally. Delphi pretty much enforces the use of finally to clean up any resources created before the try block, lest you cause a memory leak. This is also how Java, Python and Ruby works.and resource will be cleaned up regardless of what you do between try and finally. Also, it won't be cleaned up if execution never reaches the  block. (i.e.  itself throws an exception) It makes your code "exception safe".As to why you actually need a finally block, not all languages do. In C++ where you have automatically called destructors which enforce cleanup when an exception unrolls the stack. I think this is a step up in the direction of cleaner code compared to try...finally languages.
A try block has just one mandatory clause: The try statement.The except, else and finally clauses are optional and based on user preference.finally: Before Python leaves the try statement, it will run the code in the finally block under any conditions, even if it's ending the program. E.g., if Python ran into an error while running code in the except or else block, the finally block will still be executed before stopping the program.
Run these Python3 codes to watch the need of finally:CASE1:CASE2:Try the following inputs each time:random integerscorrect code which is 586(Try this and you will get your answer)random strings** At a very early stage of learning Python.


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#finally
