Natural Text
I was a bit curious if I could do more work in a function after returning a result.  Basically I'm making a site using the pyramid framework(which is simply coding in python) after I process the inputs I return variables to render the page but sometimes I want to do more work after I render the page.For example, you come to my site and update your profile and all you care about is that its successful so I output a message saying 'success!' but after that done I want to take your update and update my activity logs of what your doing, update your friends activity streams, etc..  Right now I'm doing all that before I return the result status that you care about but I'm curious if I can do it after so users get their responses faster.I have done multi-processing before and worst case I might just fork a thread to do this work but if there was a way to do work after a return statement then that would be simpler.example:
No, unfortunately, once you hit the  statement, you return from the function/method (either with or without a return value).From the docs for return:return leaves the current function call with the expression list (or None) as return value.You may want to look into generator functions and the yield statement, this is a way to return a value from a function and continue processing and preparing another value to be returned when the function is called the next time.
Why don't you use a contextmanager? It basically does exactly what you want.Here's the canonical example from the Python docs.So for your function, you'd just do:And to call it, you'd just do:EDIT: I was just testing things out, and it turns out that, with a yield statement, the function still executes to the end.  Here's a dumb example that illustrates the point and when things get executed.A contextmanager has the advantage of not requiring two  calls to get to the stop iteration (and cleaner syntax), but if you wanted to return multiple values or something, you could also do it this way, but you can see that the post yield statement doesn't actually get called until the generator raises StopIteration on the  call (the for loop ends when it gets )If for some reason, you require a higher degree of control than  offers, you can also define a class with  and  methods:
You could still do some work after return if you return from a try-block, the finally-block would still be executed, e.g.:Quoting the docs:When return passes control out of a try statement with a finally  clause, that finally clause is executed before really leaving the  function.
No, a return gives the value back to the caller and stops.If the caller(s) are also under your control (not part of the pyramid framework), you could change  to look like the following:And then code the caller to expect a pair of , rather than just a response. It can do something immediately with the  part (communicate it to the user), then call  to handle the post-processing.This allows  to determine what code needs to be executed afterwards (and keep those details hidden and encapsulated from the higher level), but allows the higher level to determine the flow of communicating a response to the user and then executing the post-processing in the background.
Here we use the threading functionality of python. First we call the update function(you can also use this function in the thread if needed and if the response doesn't depend on this function and  if you need to give the response immediately). Then we have create a thread which will complete the maintainence_function function and stop  after finishing it. But the response will not be delayed until that function is finished. ie: return "it worked" will be returned and then also the thread maintains the working of the function maintainence_function if ts a bit process.
It is possible to cheat with the  structure. Example:Note, that the  statement will be executed even if an exception was caught.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#the-return-statement
