Natural Text
I've got following problem. I wrote a 2-dimensional list, where each column is of a different type (bool, str, int, list), to a csv-file.Now I want to read out the data from the csv-file again. But every cell I read is interpreted as a string.How can I automatically convert the read-in data into the correct type? Or better: Is there a possibility, to tell the csv-reader the correct data-type of each column?Sample Data (like in csv-file):
As the docs explain, the CSV reader doesn't perform automatic data conversion. You have the QUOTE_NONNUMERIC format option, but that would only convert all non-quoted fields into floats. This is a very similar behaviour to other csv readers.I don't believe Python's csv module would be of any help for this case at all. As others have already pointed out,  is a far better choice.The following does work and converts:strings intfloatslistsdictionariesYou may also use it for booleans and NoneType, although these have to be formatted accordingly for  to pass. LibreOffice Calc displays booleans in capital letters, when in Python booleans are Capitalized. Also, you would have to replace empty strings with  (without quotes)I'm writing an importer for mongodb that does all this. The following is part of the code I've written so far.[NOTE: My csv uses tab as field delimiter. You may want to add some exception handling too]
You have to map your rows:results in
Props to Jon Clements and cortopy for teaching me about ! Here's what I ended up going with (Python 2; changes for 3 should be trivial):(I'm a little wary that I might have missed some corner cases involving quoting. Please comment if you see any issues!)
An alternative (although it seems a bit extreme) in lieu of using  is the  module available on PyPi - and see if the http://pyparsing.wikispaces.com/file/view/parsePythonValue.py code sample is either appropriate for what you require, or can be easily adapted.
I know this is a fairly old question, tagged python-2.5, but here's answer that works with Python 3.6+ which might be of interest to folks using more up-to-date versions of the language.It leverages the built-in  class which was added in Python 3.5. What may not be evident from the documentation is that the "type" of each field can be a function. The example usage code also uses so-called f-string literals which weren't added until Python 3.6, but their use isn't required to do the core data-type transformations.Output:


Answer URL
https://docs.python.org/3/library/csv.html#csv.reader
https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals
