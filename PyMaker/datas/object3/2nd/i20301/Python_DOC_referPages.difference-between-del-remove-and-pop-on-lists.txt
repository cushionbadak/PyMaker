Natural Text
Is there any difference between the above three methods to remove an element from a list?
Yes,  removes the first matching value, not a specific index: removes the item at a specific index:and  removes the item at a specific index and returns it.Their error modes are different too:
Use  to remove an element by index,  to remove it by index if you need the returned value, and  to delete an element by value.  The latter requires searching the list, and raises  if no such value occurs in the list.When deleting index  from a list of  elements, the computational complexities of these methods are
Since no-one else has mentioned it, note that  (unlike ) allows the removal of a range of indexes because of list slicing:This also allows avoidance of an  if the index is not in the list:
Already answered quite well by others. This one from my end :)Evidently,  is the only one which returns the value, and  is the only one which searches the object, while  limits itself to a simple deletion. 
pop    - Takes Index and returns Valueremove - Takes value, removes first occurrence, and returns nothing delete - Takes index, removes value at that index, and returns nothing
Many best explanations are here but I will try my best to simplify more.Among all these methods, reverse & pop are postfix while delete is prefix.remove(): It used to remove first occurrence of element => first occurrence of i value pop(): It used to remove element if:unspecified  => from end of listspecified  => of indexWARNING: Dangerous Method Aheaddelete(): Its a prefix method. Keep an eye on two different syntax for same method: [] and (). It possesses power to:1.Delete index   => used to delete index and its associated value just like pop.2.Delete values in range [index 1:index N]  => multiple values in range3.Last but not list, to delete whole list in one shot  => as said above.Hope this clarifies the confusion if any.
Any operation/function on different data structures is defined for particular actions. Here in your case i.e. removing an element, delete, Pop and remove. (If you consider sets, Add another operation - discard)Other confusing case is while adding. Insert/Append. For Demonstration, Let us Implement deque. deque is a hybrid linear data structure, where you can add elements / remove elements from both ends.(Rear and front Ends) In here, see the operations:Operations have to return something. So, pop -  With and without an index. If I don't want to return the value:del self.items[0]Delete by value not Index: remove : Returns [1,3,5,7]let us consider the case of sets.
While pop and delete both take indices to remove an element as stated in above comments. A key difference is the time complexity for them. The time complexity for pop() with no index is O(1) but is not the same case for deletion of last element.If your use case is always to delete the last element, it's always preferable to use pop() over delete(). For more explanation on time complexities, you can refer to https://www.ics.uci.edu/~pattis/ICS-33/lectures/complexitypython.txt 
The remove operation on a list is given a value to remove. It searches the list to find an item with that value and deletes the first matching item it finds. It is an error if there is no matching item, raises a ValueError.The del statement can be used to delete an entire list. If you have a specific list item as your argument to del (e.g. listname[7] to specifically reference the 8th item in the list), it'll just delete that item. It is even possible to delete a "slice" from a list. It is an error if there index out of range, raises a IndexError.The usual use of pop is to delete the last item from a list as you use the list as a stack. Unlike del, pop returns the value that it popped off the list. You can optionally give an index value to pop and pop from other than the end of the list (e.g listname.pop(0) will delete the first item from the list and return that first item as its result). You can use this to make the list behave like a queue, but there are library routines available that can provide queue operations with better performance than pop(0) does. It is an error if there index out of range, raises a IndexError.See collections.deque for more details.
You can also use remove to remove a value by index as well.  n would then refer to [1, 5]


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque.remove
https://docs.python.org/3/library/exceptions.html#ValueError
https://docs.python.org/3/tutorial/datastructures.html#the-del-statement
https://docs.python.org/3/library/exceptions.html#IndexError
https://docs.python.org/3/library/collections.html#collections.deque.pop
https://docs.python.org/3/library/exceptions.html#IndexError
https://docs.python.org/3/library/collections.html#collections.deque
