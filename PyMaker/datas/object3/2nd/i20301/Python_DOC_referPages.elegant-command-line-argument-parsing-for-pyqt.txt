Natural Text
I'm writing a new PyQt app. I'm trying to do everything related to the program and ui using as much of the PyQt APIs as possible as a means to improve my knowledge of PyQt and Qt in general.The question I have is, is there an API within PyQt/Qt to handle command line argument parsing elegantly?My research so far has turned up:an example of how to make it play nice with python's opt_parser module, except it doesn't handle QApplication's built in arg parsing.PyKDE's KCmdLineArgs (which introduces an unwanted KDE dependency)it looks like KCmdLineArgs is being ported upstream for Qt5.1 as QCommandLineParser, which is cool, but I'd like to be able to use it now, not 18 months from now.So how do PyQt applications normally handle this? or is opt_parser/argparse the way to go? This is far from a nice solution...
Use argparse if you're using  (optparse if < ), the package doesn't have to be specific to PyQt for you to handle commandline options.
The best solution here is using the  module's  method (docs) to process the non-Qt command line options first. It's no more work in configuring the â€”it just changes which method you call, and gives you a tuple instead of a single object in the return. That gives you the best of both worlds. A simplified example that catches only a couple of the Qt 4.8 arguments and a few others, but gives the general idea.Assume you were to run this like so:Then  would have the usual  with  set to  and  set to , while  would have a simple list: . This in turn can be passed normally to the  with the inclusion of the program name from  (thanks to marcin for pointing this out). We use  to get an array for concatenation with ; you could just as well do Among other things, this lets you set up your application to specify whether to launch the Qt UI, to run as a command line, to run unit tests, and so forth instead if you so desired. Handling the non-Qt (or anything else) arguments first is better because it does not leave  dependent on the setup you're using, but the other way around.
You should really try docopt. It doesn't need any argument definitions. You have "Usage: " string and unparsed arguments as input, pass them into docopt() function, and you have parsed arguments as output.


Answer URL
