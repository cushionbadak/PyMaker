Natural Text
Okay I'm having trouble not only with the problem itself but even with trying to explain my question. I have a directory tree consisting of about 7 iterations, so: The thing is some may have 5 subdirectory levels and some may have as many as ten, such as: or:The only thing they have in common is that the destination directory is always named the same thing. The way I'm using the glob function is as follows:However, this only works for the directories with that precise number of intermediate subdirectories. Is there any way for me not to have to specify that number of ; in other words having the function arrive at the destinationdir no matter what the number of intermediate subdirectories is, and allowing me to iterate through them. Thanks a lot!
I think this could be done more easily with :Of course, this doesn't allow you to have a glob expression in the filename portion, but you could check that stuff using regex or fnmatch.EDITOr to find a directory:
You can create a pattern for each level of indentation (increase  if needed):This will iterate over:If you have to iterate over directories with arbitrary depth then I suggest dividing the algorithm in two steps: one phase where you investigate where all 'destinationdir' directories are located and a second phase where you perform your operations.
If you are looking for files, you can use the Formic package (disclosure: I wrote it) - this implements Apache Ant's FileSet Globs with the '**' wildcard:
This looks much easier to accomplish with a more versatile tool, like the  command (your  call indicates you're on a unix-like system, so this will work)...Note that if you are going to put any user-supplied string into that command, this becomes drastically unsafe, and you should use subprocess.Popen instead, executing the shell and splitting the arguments yourself. It's safe as shown, though.
Python 3 glob.glob now accepts double wildcards to designate any number of intermediate directories 


Answer URL
https://docs.python.org/3/library/glob.html
