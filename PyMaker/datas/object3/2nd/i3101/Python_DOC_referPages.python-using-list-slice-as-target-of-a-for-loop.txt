Natural Text
I found this code snippet to be very interesting.Output is as follows:I am trying to understand why python does that. Is it because python is trying to re-use the index? For loop somehow slices the list?We can add or delete an element while iterating the list, but when we are trying to access the variable using index, it gives bizarre output.Can someone help me understand the interaction between for loop and index in the list? Or simply explain this output?
It works as expected. (For some interpretation of "expected", at least.)Re-writing your code to this, to prevent any misinterpretation of what  is at any point:shows uswhich makes it clear that the  assignment to  is done immediately, changing the list while iterating.The four loops do the following: gets set to the first value of the list, . The result is now . gets set to the second value, . The result is (quite obviously) . gets set to  and so the result is  – again, only  gets changed.Finally,  gets set to the last value in , so effectively it does not change and the final result is .
a[-1] prints the same value in a[3], the last index in the list. Edit: see comment below for the explanation for this.The result reads as follows:
What happens is*So if someone could clarify that TOS2 is actually the 'visited' value of the ARRAY?


Answer URL
https://docs.python.org/3/library/stdtypes.html?highlight=negative#common-sequence-operations
