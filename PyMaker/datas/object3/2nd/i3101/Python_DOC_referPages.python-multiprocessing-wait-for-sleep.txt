Natural Text
Im trying to find out how multiprocessing works in Python.The following example is what I made:What I tried to simulate in f is a request to a URL that has a timeout of 15 seconds. What I expected to happen is that all the request would start at almost the same time and finish at the same time. But what actually happens is they all start one after each other and wait till the previous one is finished. So the result is:hello http://python-requests.org ended http://python-requests.orghello http://httpbin.org ended http://httpbin.org hello http://python-guide.org ended http://python-guide.orgSo what actually happens? why would one use the code above instead of just doing:
the problem is your loop:you're starting the process then you wait for it to complete, then you start the next one ...Instead, create your process list, start them, and wait for them:note that in that case, using  is probably overkill, since threads would do the job very well (no massive python computing involved, only system calls & networking)To switch to threads, just use  instead so your program structure remains the same.
You only spawn one process. Thus, the process (a unique worker) takes the first input, runs f, timeouts during 15 sec, quit f; and then takes the second input. c.f. docYou could try to map your function f with the inputs. In the example below, you spawn 2 processes (2 workers).


Answer URL
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy
