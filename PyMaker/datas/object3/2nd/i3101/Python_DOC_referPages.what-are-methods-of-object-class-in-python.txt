Natural Text
Given a Python object of any kind, is there an easy way to get the list of all methods that this object has?Or,if this is not possible, is there at least an easy way to check if it has a particular method other than simply checking if an error occurs when the method is called?
It appears you can use this code, replacing 'object' with the object you're interested in:I discovered it at this site. Hopefully, that should provide some further detail!
You can use the built in  function to get a list of all the attributes a module has.  Try this at the command line to see how it works.Also, you can use the  function to find out if a module has a specific attribute.See the Guide to Python introspection for more information.
The simplest method is to use . It will display all the methods available for that object. Cool trick.
To check if it has a particular method:
I believe that what you want is something like this: a list of attributes from an objectIn my humble opinion, the built-in function  can do this job for you. Taken from  output on your Python Shell:dir(...)If called without an argument, return the names in the current scope.Else, return an alphabetized list of names comprising (some of) the attributes of the given object, and of attributes reachable from it.If the object supplies a method named , it will be used; otherwise     the default dir() logic is used and returns:for a module object: the module's attributes.for a class object:  its attributes, and recursively the attributes of its bases.for any other object: its attributes, its class's attributes, and     recursively the attributes of its class's base classes.For example:As I was checking your issue, I decided to demonstrate my train of thought, with a better formatting of the output of .dir_attributes.py (Python 2.7.6)dir_attributes.py (Python 3.4.3)Hope that I have contributed :).
On top of the more direct answers, I'd be remiss if I didn't mention iPython.Hit 'tab' to see the available methods, with autocompletion.And once you've found a method, try:to see the pydocs, method signature, etc.Ahh... REPL.
If you specifically want methods, you should use inspect.ismethod.For method names:For the methods themselves:Sometimes  can be useful too (for built-ins, C extensions, Cython without the "binding" compiler directive).
Open bash shell (ctrl+alt+T on Ubuntu). Start python3 shell in it. Create object to observe methods of. Just add a dot after it and press twice "tab" and you'll see something like that:
The problem with all methods indicated here is that you CAN'T be sure that a method doesn't exist.In Python you can intercept the dot calling thru  and , making it possible to create method "at runtime"Exemple:If you execute it, you can call method non existing in the object dictionary...And it's why you use the Easier to ask for forgiveness than permission paradigms in Python.
The simplest way to get list of methods of any object is to use  command.It will list out all the available/important methods associated with that object.For example:
One can create a  function that will return an object's callable property namesThat'd return
There is no reliable way to list all object's methods.  is usually useful, but in some cases it may not list all methods. According to  documentation: "With an argument, attempt to return a list of valid attributes for that object."Checking that method exists can be done by  as already mentioned there.
...is there at least an easy way to check if it has a particular method other than simply checking if an error occurs when the method is calledWhile "Easier to ask for forgiveness than permission" is certainly the Pythonic way, what you are looking for maybe:
Take a list as an objectYou get:
In order to search for a specific method in a whole module


Answer URL
https://docs.python.org/3/library/inspect.html#inspect.isroutine
