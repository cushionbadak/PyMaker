Natural Text
I would like to define a class so that its instances can be casted to both  and . An example:I have found that if I define  as an iterator that yields single values then the instance can be casted to  and if it instead yields double values then it can be casted to :Is there any way to make instances castable to both  and  in Python 2.7?
You could just subclass  (Other types are available, ask your doctor.):.If the tool you are using has any regard for idiomatic Python, the named tuple should be acceptable as is, anyway. I would try it!If you were to use dictionaries, I would recommend using the explicit  (when subclassing) or maybe  or  as property (when wrapping), rather than relying on some magic behing the scenes.Legacy version, no warranty.
You can't do what you originally wanted to do (ie, have two different  methods) because it doesn't make any sense. But you can fake it using the mapping protocol (see below).However before going into that, if you really want to cast to a , have a look at this answer for some better options.My suggestion is to either:Do what was suggested in the other answer and utilize , which gives you the  method "for free".Implement the class utilizing the mapping protocol (as explained in the previous link above). If you do that, you can circumvent the  method entirely when casting to .You might do that like this; however this is a little bit odd:With the above, the  is created using the  and  rather than :Using the mapping protocol can also come in handy because you can "cast"- that is, unpack your object in the form of keyword arguments- to any other type that accepts the same field names as keyword arguments, e.g.:For other people (not the OP) who are able to benefit from the latest version of Python 3 (3.7): I highly recommend using the  module:Use it like so:


Answer URL
https://docs.python.org/3/library/dataclasses.html
