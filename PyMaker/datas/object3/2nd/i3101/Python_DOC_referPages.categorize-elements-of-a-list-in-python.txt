Natural Text
I want to efficiently categorize the elements of a given list . This list can be arbitrary long, so I am looking for an efficient way to do the following.The list  contains several elements  that can be compared with a generic function called . If this function returns , it means that both elements belong to the same category. At the end, I want to have another list , which in turn contains different lists . Each  list contains all the elements from the same category.
Assuming that the function is transitive and reflective (and if it's not, the whole grouping does not seem to make much sense), it is enough to compare each word to one "representative" from each group, e.g. just the first or last element. If no such group exists, create a new group, e.g. using  with an empty list as default element.Result: Still, this has complexity O(n*k), where n is the number of words and k the number of groups. It would be more efficient if instead of  you had a function , then you'd have O(n). That is, instead of testing whether two elements belong to the same group, that function would extract the attribute(s) that determine which group the element belongs to. In my example, that's just the  of the strings, but in your case it might be more complex.Result: 
I believe you can use itertools groupby function but might need to modify the  function so it will be a keyfunc, i.e. will yield some kind of key.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
