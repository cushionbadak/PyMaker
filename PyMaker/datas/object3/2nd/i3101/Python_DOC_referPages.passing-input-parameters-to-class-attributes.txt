Natural Text
I'm devloping a module that works with another module. The other module requires class attributes to be set before the  method (let's work under the assumption that the behavior of this other module cannot be changed). These class attributes ( in the example below) are derived partially from an object that comes from my code. The method shown below is a disaster for many reasons. For example,  and  are not guaranteed to exist; the import in the other module will fail in this case. There could be a need to create 2 different instances of  using 2 different instances from my code ().This is a skeleton of the code to explain:Question:Is there a way to "input" parameters to the construction of a class (not to the initialization of a class instance)?What I tried and why each did not work.Metaclasses. These feel close to the right approach but I wasn't able to get it to work.  but this doesn't populate the namespace within the class definition (before the )Setting  until an  instance is needed and then modifying the class attribute before instantiating an object:An example of attempt 3:However, here the output is:I anticipate responses that focus completely on changing the approach. That is warranted. However, my immediate question is how to best band-aid what I have. 
This may need some massaging to make it work with your code, but you can use   in a parent class to accept arguments to class creation.  This was introduced in Python 3.6You could also make  a  subclass to clean up the signatures of your subclasses.
Example with a metaclass in Python 3:The metaclass takes action when the classes A and B are created (not instantiated).


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__init_subclass__
