Natural Text
I want to write my own socket class for server-client talking with RSA and AES encryption, and for server side I need to overload accept() function to return not (socket, address) pair, but (MySocket, address). So that's why I need MySocket class to be initializable with another socket.This is simplified version of my code:And after executing this code, I get an error:As I understand, the problem is in the #9 string , but googling the error didn't give anything.
If  is a subclass of , then a  instance is a  instance; it can't become a different  instance, nor can you change another  instance into a  if it wasn't one already.1Just assigning  doesn't do anything useful.  is just a local variable inside the  method. So, for the rest of the body of that method, when you do something to , you're doing it to  instead of to your actual self. Assigning to its  attribute fails, as you saw. But, even if it didn't fail, all you would have done would be to modify , while leaving yourself basically uninitialized.There are two possible things that do make sense here, however.First, instead of being a , your  can own a , and provide the same interface as the  type by delegating calls to its owned . Then, you can easily choose whether to own a newly-created socket, or one that was passed in. Something like this:Writing explicit delegators (whether manually, or by looping over  and creating them programmatically) is probably a better design here than , but this gets the idea across.The other option is to to do effectively what  does.Socket objects are basically just a thin wrapper around a file descriptor. You can call  on a socket to steal its fd, and then you can pass that fd into the  initializer:What  actually does is more complicated (although it's not that complicated, and it may be worth reading the source).But also, notice that its interface is different. Stealing another socket's fd is kind of a strange thing to do in a constructor call, so instead,  will raise a , and you're instead required to use a  function. This is probably a less confusing design.However, if you don't need the extra complexity of having different Context objects that all wrap sockets differently, you might just want a  alternate constructor method, instead of an external factory function.1. Actually, in Python, you can sometimes change the type of a live object, by setting its  attribute. But this is almost always a bad idea, and wanting to do so is usually a sign that your design has gone very wrong somewhere.


Answer URL
https://docs.python.org/3/library/ssl.html#ssl.SSLSocket
https://docs.python.org/3/library/socket.html#socket.socket.detach
https://docs.python.org/3/library/socket.html#socket.socket
https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket
