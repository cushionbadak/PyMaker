Natural Text
Suppose I have a string:When I run :I get the following error:But when I run :I get the correct output i.e. Why does converting to  and then converting to  work but directly converting to  not work ?Thanks and regards
It is because your string has float format. So when you directly cast "0.1" to int, it returns a error. But if you cast to float and after to int, it is able to truncate your number.
This is documented behaviour (emphasis mine):If  is a number, it can be a plain integer, a long integer, or a floating point number. If  is floating point, the conversion truncates towards zero.If  is not a number or if  is given, then  must be a string or Unicode object representing an integer literal in radix So as to your question why, the only answer is: because it is like that by design.
From the python docsIf x is not a number or if base is given, then x must be a string, bytes, or bytearray instance representing an integer literal in radix base. Optionally, the literal can be preceded by + or - (with no space in between) and surrounded by whitespace. A base-n literal consists of the digits 0 to n-1, with a to z (or A to Z) having values 10 to 35. The default base is 10. The allowed values are 0 and 2â€“36. Base-2, -8, and -16 literals can be optionally prefixed with 0b/0B, 0o/0O, or 0x/0X, as with integer literals in code. then x must be a string, bytes, or bytearray instance representing an integerSo if you add a  to the string it won't represent an integer anymore
If you pass a string to , it only works if the string directly represents an integer.  It doesn't work if the string represents a non-integer number.  But if you pass a float to , it always works, by truncating the float.   just doesn't accept "strings that could be made into ints by first making them into floats and then truncating them"; it only accepts strings that directly represent integers.  That's just how  works.
The difference is that numeric objects like floats have a special  or  method which computes their integer value while strings are parsed. See int() in the docs.Thus the result of  comes from the  object and the result of  comes from the  function.


Answer URL
https://docs.python.org/3/library/functions.html#int
