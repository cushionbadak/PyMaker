Natural Text
If you have a list in Python 3.7:You can turn that into a list of chunks each of length  with one of two common Python idioms:Which drops the last incomplete tuple since  is not length You can also do:if you want the last sub list even if it has less than  elements.Suppose now I have a generator, , unknown length or termination (so calling  or  would not be wise) where I want every chunk.The best generator expression that I have been able to come up with is something along these lines:That works for the intended purpose:It just seems -- clumsy. I tried:using  but the lack of length seems hard to surmount;using a sentinel in  but the sentinel version of  requires a callable, not an iterable.Is there a more idiomatic Python 3 technique for a generator of chunks of length  including the last chuck that might be less than ?I am open to a generator function as well. I am looking for something idiomatic and mostly more readable. Update:DSM's method in his deleted answer is very good I think:I am open to this question being a dup but the linked question is almost 10 years old and focused on a list. There is no new method in Python 3 with generators where you don't know the length and don't want any more than a chunk at a time?  
I think this is always going to be messy as long as you're trying to fit this into a one liner.I would just bite the bullet and go with a generator function here. Especially useful if you don't know the actual size (say, if  is an infinite generator, etc).Someone may have a better suggestion, but this is how I'd do it.
This feels like a pretty reasonable approach that builds just on itertools.
I have put together some timings for the answers here.The way I originally wrote it is actually the fastest on Python 3.7. For a one liner, that is likely the best. A modified version of cold speed's answer is both fast and Pythonic and readable. The other answers are all similar speed.The benchmark:And the results:
This solution with a generator function is fairly explicit and short:
The  section of the doc offers various generator helpers. Here you can modify  with the second form of  to create a chunk generator.ExampleOutput
:See also the source:
My attempt using  and . With  you can choose a pattern how to group your elements, so it's versatile:Outputs:
we can do this by using grouper function given in itertools documentation page.Output:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/functions.html#iter
