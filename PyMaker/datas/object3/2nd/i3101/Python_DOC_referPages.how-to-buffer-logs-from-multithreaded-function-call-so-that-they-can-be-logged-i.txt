Natural Text
the problemI'm trying to use the  library to run a function on a list of "things". The code looks something like this.As the code is now, the logging can happen in any order.For example:I want to change the code so that the records for a particular call of  are buffered until the future finishes.In other words, all of the records for a particular call stick together. These 'groups' of records are ordered by when the call finished.So from the example above the log output above would instead look likewhat I've triedI tried making a logger for each call that would have its own custom handler, possibly subclassing BufferingHandler. But eventually there will be lots of "things" and I read that making a lot of loggers is bad.I'm open to anything that works! Thanks.
Here's a little recipe for a  class that puts all calls to 's methods into a list instead of actually performing the call, until you finally do a  where they are all fired up.In your example, you could use it like so:            There may be ways to beautfiy this or make it more compact, but it should get the job done if that's what you really want.
First I modified @Jeronimo's answer to come up with thisWhich can be used like thisThe problem here is that  now needs to take the logger as an argument and the logger is limited in scope. If  calls subroutines then the their logging won't be delayed.Probably the solution is just to not try to do this at all. Instead threads can make a log filter or some other way to distinguish their messages.


Answer URL
https://docs.python.org/3/library/logging.handlers.html#logging.handlers.BufferingHandler
