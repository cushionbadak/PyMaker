Natural Text
Below is a code to remove the recurrent alphabets from a string in python. I would like to know the time complexity of this code. More specifically time complexity of line . Searching in a list.Also if possible can this be explained using space allocated by a list.
This line does two things:First, it accesses . That takes constant time, because strings are basically just arrays of characters.Then it searches in a list , comparing that character  to each element until one matches. That takes (worst-case) linear time in the length of . And, since  could (worst-case) be all of the characters in , that's linear in the length of .So, this line is .And of course this line is inside an outer loop that's even more obviously : . So, that combination of the two is .Even if you fix that  test to be constant time, you also do  inside the loop. String concatenation is worst-case linear in the length of the string. Recent versions of CPython and PyPy have some optimizations so it's sometimes amortized constant time, like appending to a list, but Python the language doesn't guarantee those optimizations. And  is, worst-case, also as long as . So, the whole thing is still , unless your interpreter is extra nice.You could reduce the whole thing to  by making two small changes.First, use a  rather than a  for . Searching a set, and adding to it, are both amortized constant-time operations.Second, use a  rather than a  for , then do  at the end. Appending to a list is amortized constant-time. Converting a list back to a string is of course linear time, but you're not doing it inside your loops, so that's fine.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
