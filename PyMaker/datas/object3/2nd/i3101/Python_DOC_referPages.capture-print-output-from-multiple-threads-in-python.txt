Natural Text
I have a function which inside lauches multiple threads running in parallel. Threads print something and I want to capture this output from external function. I tried the next code to capture the output:This code works. But the problem is that output is printed only when all theads complete. So I have a freeze. Once all threads are done - whole output is printed. What I would like to have - have output once it is generated inside - in other words in real-time. Now I have the whole outout buffer printed at once.How get all of the threads to output in real-time?
What you want to do is write your own  class (or, if you want binary data, write your own  and then wrap a stock  around it), where you can put whatever behavior you want.As you can see from the docs. all you need to implement for  is , , , and . And the first three aren't relevant for what you're doing.So, what should your  look like? Well, it depends on what you want to do. it sounds like your goal is to tee everything to both real stdout and to a . If so, this is pretty trivial. The only question is what you want to do if one of the targets raises an exception, or writes fewer bytes than the other, etc. Since an  is never going to do either of those, we can write something really dumb that just assumes that whatever real stdout did was the right thing to do.And now:Now, the output has gone to the real  as it came in, but it's also been stored in the  for whatever you want to do with it later.(Notice that this class will work with any , like a file you , not just with . It didn't cost us anything to make it general, so why not?)What if you wanted to do something totally different, like spread each  randomly among 10 different files? It should be obvious:


Answer URL
https://docs.python.org/3/library/io.html#class-hierarchy
