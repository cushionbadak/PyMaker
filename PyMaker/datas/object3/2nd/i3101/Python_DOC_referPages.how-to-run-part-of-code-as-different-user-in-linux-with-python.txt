Natural Text
I am looking for a way to run part of python code/function to be run as the different user in Linux, instead of make another script. For example:I would like to call the function  from  with passing couple of arguments and the  should accept those arguments and execute the stuffs as the different user and return the result. Since I have to call some stuffs in between during the entire execution and so I don't want to create multiple scripts for small piece of code. Basically am trying to connect database in the function  (the database connection can be done as that particular user only) and run the query and get the result. 
This is a bit more difficult than you might expect. First of all, Python provides  and  to change the current user/group of the running script and you can create a context manager to do your bidding for you and automatically revert back to the currently executing user:And to test it:You can even create a neat decorator to select that some functions should always execute as another user:The kicker? Next to not being thread-safe, it will only work if both the current user, and the user you want to execute the function as, have  and, optionally,  capabilities.You can get away with having only one user with these capabilities run the main script and then fork when necessary, changing the UID/GID only on the forked process:The kicker here? You don't get the return data from the forked function. If you need it, you'll have to pipe it back to the parent process and then wait in the parent for it to finish. You'll also need to choose a format to pass the data between processes (if simple enough, I'd recommend JSON or resort back to native )...At that point, you're already doing half of what the  module is doing so you might as well just launch your function as a subprocess and be done with it. If you have to go through such hoops to achieve your desired result, chances are your original design is at fault. In your case - why not just provide the permissions to the current user to access the DB? The user will need to have the capabilities to switch to another user who can so you're not gaining anything in terms of security from it - you're only complicating your life.


Answer URL
https://docs.python.org/3/library/os.html#os.setuid
https://docs.python.org/3/library/os.html#os.setgid
https://docs.python.org/3/library/subprocess.html
