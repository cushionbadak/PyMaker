Natural Text
I have a line of code like this: takes the data item and then uses an object attached to self to make a request to a server, using an instance variable of that object containing an authentication token, set earlier. The issue I have is that each process seems to get a new instance of that object (or ), and therefore that instance has not had the token set and therefore the request fails.Is there a way to share self between pooled processes?
TLDR: the way you describe it - no - it is not possible.Whenever you fork a process (i.e. via creating a pool of those) all data from the memory is copied into a fork (i.e. not referenced).As a result any mutation that you make to the original payload does not affect the fork's replica.You have three options here:Use a thread pool (threads share memory): https://docs.python.org/3/library/threading.htmlEmploy IPC structures: https://pymotw.com/2/multiprocessing/communication.htmlAssign the authentication token to self before you create a process pool. This will make sure that self's replica will contain the token.
While you could do it using a manager, it means the object will be copied to all other processes every time it is modified.I suggest passing the token itself to the process, instead of copying the entire object around. If you don't have the token available at the time you call , then the idiomatic idea is to create a  to send the token to your process later. Your process can sit at the other end of the  and wait for the token before issuing the request.


Answer URL
https://docs.python.org/3/library/threading.html
