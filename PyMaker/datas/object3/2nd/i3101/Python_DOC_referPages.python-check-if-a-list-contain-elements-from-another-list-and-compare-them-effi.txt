Natural Text
I have created 2 lists, which contain log files coming from different machines.So I have  folder that contains ,  and so on.Then I have  folder, that contains the same file names as above. In some cases, I may have logs from one machine but not from the other.What I did so far, to compare their content, is to parse all the files in one folder, and add the full path to a list, and then do the same with the second folder. Then I would like to compare the correspondent logs (like perf_log.txt), between the 2 machines.But I end up parsing the first list once, but I have to check every time if the second list contain the entry, and if it does, I have to go and retrieve the index, before I can compare the files. This seems pretty expensive, in the case of many files in a folderHow can I simplify this, and try to get to a O(n) complexity?
Use a dictionary instead of using a list.So instead of      you can do This will help in the later part of code where you are doing  which traverses the whole list to find it. Instead you can do  to check if the file exists in 2nd path in O(1). You can just pass in the path to your  method then. I hope it makes sense.Here is the code that should work. (I havent tested it though)
Since order doesn't matter. You are performing an intersection operation between the two lists, which are first made to sets. Now you have a list of entries that are in  AND in . After you have a common list of entries you can perform comparisons between these two files. This is not an O(n) solution, probably a O(nlogn) solution. Still better performing than the code given in the question. 
I'm not sure if  provide O(n) complexity but they would certainly make finding the differences between the two lists easier as you can perform subtraction: https://docs.python.org/3/tutorial/datastructures.html#setsI'm assuming the file names/paths are unique.
You might be able to get some good improvements if you use numpy and pandas' series.Before starting, import numpy and pandas.Now transform your lists into numpy arrays.Now you can make use of indexing to find out which files from one group are also in the other.Now,  contains all items that appear in both lists. With this, you can call your  function once for each element in .


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#sets
