Natural Text
I have a generator function .For example (in reality I have a more complex function ),Writing another generator function , I want to enumerate all elements that  returns except the first element.What are concise ways to implement this in Python 3?
Usually, you don't need this in an expression, so you just call , ignoring the results, to consume and discard the first element.However, if the iterator might be empty, you have to decide what you want to happen:Maybe you want to raise , in which case  is fine.Maybe you want to raise something else, in which case you  inside an .Maybe you just want to leave the iterator empty, in which case you can call . You can find examples of these in the stdlib and docs. For example, if you scan through the recipes in :This is doing exactly what you want to doâ€”skip the first element of . And if  is empty, you don't want an error here; you just want to iterate nothing. So, .What if you need to do this in the middle of an expression?Then you can write a function that skips the first element:(Again, you have to decide what you want to happen for an empty iterable.)This returns a first-skipped version of the iterator, so you can use it inline. (It also mutates the iterator you passed in, of course, but you normally only use on a temporary value that you're not keeping any references to, so that's not a problem.)Or, if you need to return a generator instead of an arbitrary iterator (usually you don't):Or you can use the more general version of the same idea, . The following have the same effect:While we're on the  recipes, it's worth looking at :Forget the  part; the interesting bit is that it skips  elements with an  and a . (Notice that it's mutating  in-place, not returning something.)
Use :
Disclaimer: See @abarnert and @Solaxun's answers above.Just thought that the following should be mentionedIf you have e.g. Thenwhere  is the iterator without the first element. 


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/itertools.html#itertools.islice
https://docs.python.org/3/library/itertools.html#itertools.islice
