Natural Text
Sometimes inside one function we need to use the  statement several times.When developer changes a function with multiple returns inside, it's easy to oversee some parts of code where yet another return was "hidden".If unit tests do not cover all possible paths, disaster is guaranteed - it's only a question of time.Let's assume here: last return is wrong, because other callers expect tuple of 3 items.I wonder if you know an easy way how to catch such parts of code automatically? I thought I could use AST, but I could not find any useful example of this.This question is about automatic code analysis and listing such cases found - could be with running a separate script. Of course I could write a try-to-guess parser (with e.g. regex) and then 'manually' check all unclear cases, but maybe there is a simpler way...
Depending on what version of Python you're using and what you really want to achieve, there are several ways to refactor the code.One way, as has been already suggested, is to use Type Hints in Python 3.Another way is refactor your code such that instead of using multiple  statements, you call other more atomic methods that handle those conditions and return the appropriate values. You use exception handling in those atomic methods to make sure the output is as desired, or raise an exception if final return type is unexpected.Additionally, ensure that you're using the right constructs for your conditions (such as whether you want to use multiple  or the  construct). You could even re-factor your calling code to call the right function instead of calling one that has so many conditional statements.
Why not set a variable that gets returned at the end and check for its length
My proposal for the final type check of the result would be:Advantage: as assert is easily switched off after debugging phase; still succinct statement for formulating the expectation.


Answer URL
https://docs.python.org/3/library/typing.html
https://docs.python.org/3/library/typing.html
