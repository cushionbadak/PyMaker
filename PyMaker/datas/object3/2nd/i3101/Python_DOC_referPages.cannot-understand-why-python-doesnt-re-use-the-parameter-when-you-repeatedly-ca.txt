Natural Text
I'm watching a tutorial on python and it uses this example:If you call  repeatedly then the menu list increases in size. This is new to me since I am from a C# background. But OK, fair enough.To get around this it says that you should set the menu parameter to  but I cannot understand why that works. Here is the code they use:If you call it the first time though menu will be set to [], and the second time surely if it's 'remembering' the parameter as in the first example, menu will be [] at that point and therefore it will just append spam to the list as in the first example.The video neglects any explanation other than you should use an immutable type so I cannot understand how this works.Edit cos I still don't get it:What I'm seeing is that the function captures the variable, so it takes menu=[] and stores that secretly somewhere, imagine a private variable called _menu, so that if you call it again it doesn't re-evaluate it just continues to use _menu and thus it grows.In the second example, I do not understand why it isn't simply taking menu=None and storing that secretly as _menu, so _menu = None and then when you call the 2nd function, it sets _menu=[] and it continues exactly as the first example and it grows.The fact that None is immutable doesn't seem relevant to me, as you're not doing None=[] you're doing menu=[] so menu then stops being what it was before and becomes [] and you can modify it as you like.Unless it's some hard-coded feature that if you put None it will not do the copying behaviour then I do not understand the difference between the two.
Python’s default arguments are evaluated once when the function is defined, not each time the function is called (like it is in say, Ruby).https://docs.python-guide.org/writing/gotchas/From Python's docs, some more detail:Default parameter values are evaluated from left to right when the function definition is executed. This means that the expression is evaluated once, when the function is defined, and that the same “pre-computed” value is used for each call.https://docs.python.org/3/reference/compound_stmts.html#function-definitionsLists are mutable objects, whereas  is immutable, hence the behavior you see.
Setting  inside the function is just rebinding the name  to a new object inside the scope of that function call. It doesn't change the original  object in the scope where the function was defined. Appending to  within the function, on the other hand, actually modifies the object in memory associated with the name  in the function definition (because lists are mutable). This object was created when the function was first defined, and is shared between calls of the function. If you want to understand more, look into the python scoping/namespace behavior, of which default argument sharing is mostly just a subset. But basically,


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#function-definitions
