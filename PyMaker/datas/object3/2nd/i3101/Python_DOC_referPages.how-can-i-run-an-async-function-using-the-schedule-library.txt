Natural Text
I'm writing a discord bot using discord.py rewrite, and I want to run a function every day at a certain time.  I'm not experienced with async functions at all and I can't figure out how to run one without using "await."  This is only a piece of my code which is why some things may not be defined.Using the  function, I get this error when I put  in the paramaters of :self.job_func = functools.partial(job_func, *args, **kwargs)  TypeError: the first argument must be callableBut when I don't use await, and I just have  as parameters, I get this error:RuntimeWarning: coroutine 'send_channel' was never awaitedI'm not super good at programming so if someone could try to dumb it down for me that would be awesome.Thanks
What you're doing doesn't work because  takes a function (or another callable), but you're trying to  or call a function, and then pass it the result. blocks until the send finishes and then gives you , which isn't a function.  returns a coroutine that you can await later to do some work, and that isn't a function either.If you passed it just , well, that is a function, but it's an  coroutine function, which  won't know how to run.Also, rather than trying to integrate  into the  event loop, and figure out how to wrap async jobs up as  tasks and vice versa and so on, it would far easier to just give  its own thread.There's a FAQ entry on this:How to continuously run the scheduler without blocking the main thread?Run the scheduler in a separate thread. Mrwhick wrote up a nice solution in to this problem here (look for run_continuously()).The basic idea is simple. Change your  function to this:Do this at the start of your program, before you even start your  event loop.At exit time, to stop the scheduler thread:Now, to add a task, it doesn't matter whether you're in your top-level code, or in an async coroutine, or in a  task, you just add it like this:Now, back to your first problem. The task you want to run isn't a normal function, it's an  coroutine, which has to be run on the main thread as part of the main event loop.But that's exactly what  is for. What you want to call is:To ask  to run that, you just pass  as the function and  as the argument.So, putting it all together:
This is an old question, but I recently ran into the same issue. You can use  to schedule a coroutine to the event loop (rather than a callback):


Answer URL
https://docs.python.org/3/library/asyncio-dev.html#concurrency-and-multithreading
https://docs.python.org/3/library/asyncio-task.html#asyncio.run_coroutine_threadsafe
