Natural Text
Dumping and loading a dict with  as key, results in a dictionary with  as the key.Values are un-affected, but things get even worse if a string-key  actually exists.What am I doing wrong here? Why can't I serialize/deserialize a  with  keys?Example
JSON objects are maps of strings to values.  If you try to use another type of key, they'll get converted to strings.
According to the specification,  is not a valid key. It would amount to a JSON object expression, which looks likewhich is not valid (i.e., cannot be generated using the syntax diagram.)Arguably, the JSON module should have raised an exception upon serialization instead of silently generating a string representation of the value.EDIT Just saw, that the behaviour of the module is documented (somewhat implicitly):If skipkeys is True (default: False), then dict keys that are not of a basic type (str, unicode, int, long, float, bool, None) will be skipped instead of raising a TypeError.so it seems, as if this behaviour is intentional (I still find it questionable given the current JSON specification).
As @dan04 shows, None is converted to 'null'.Everything is fine, the value is stored into the dict with "null: 'What happened to None?'"But then came another Key with 'null'.So the old value with the None/'null'-Key ("What happened to None?") is overwritten with "boom".


Answer URL
https://docs.python.org/3/library/constants.html#None
