Natural Text
I'm trying to get Python to a read line from a .txt file and write the elements of the first line into a list. The elements in the file were tab- separated so I used  to separate the elements. Because the .txt file has a lot of elements I saved the data found in each line into a separate list.The problem I currently have is that it's showing each list like this:How can I remove  from the last element of the list and make it just ?
If you want to remove  from the last element only, use this:If you want to remove  from all the elements, use this:You might also consider removing  before splitting the line:
From Python3 onwards no longer returns a  but a , thus the answer will look something likeYou can read more about it on What’s New In Python 3.0. and  return iterators. If you really need a , a quick fix is e.g. So now what are the ways of getting trough this?Case 1 - The  call over  with a  returns an iterator.  is a function that can convert an iterator to a list. Hence you will need to wrap a  call around . So the answer now becomes,Very good, we get the output. Now we check the amount of time it takes for this piece of code to execute.2.22 microseconds. That is not so bad. But are there more efficient ways?Case 2 - The  call over  withOUT a  is frowned upon by many in the Python community (including Guido). Apart from that it will greatly reduce the speed of the program. Hence we need to avoid that as much as possible. The toplevel function . Comes to our aid here. The  can be re-written without using  using  asAnd now for the times. Fantastic. You can see the efficiency differences between the two ways. It is nearly 60% faster. Thus the approach without using a  is a better choice here.Case 3 - Following Guidelines, The Regular wayAnother important point from What’s New In Python 3.0 is that it advices us to avoid  where possible.Particularly tricky is  invoked for the side effects of the  function; the correct transformation is to use a regular  loop  (since creating a list would just be wasteful).So we can solve this problem without a  by using a regular  loop. The trivial way of solving (the brute-force) would be:-The timing setupAnd the result. As you can see the brute-force is a bit slower here. But it is definitely more readable to a common programmer than a  clause. Case 4 - List ComprehensionsA list comprehension here is also possible and is the same as in Python2.Now for the timings:As you can see the list-comprehension is more effective than  (even that without a ). Hence the thumb rule in Python3 is to use a list comprehension instead of Case 5 - In-Place mechanisms and Space Efficiency (T-M-T)A final way is to make the changes in-place within the list itself. This will save a lot of memory space. This can be done using .The timing result would be . But however this way is space effective. ConclusionA comparitive list of timings (Both Python 3.4.3 and Python 3.5.0) Finally note that the list-comprehension is the best way and the  using  is the worst. But again --- ONLY IN PYTHON3
It sounds like you want something like the Perl  function.That's trivial to do in Python:... assuming you're using Python 2.6 or later.  Otherwise just use the slightlymore verbose:If you want to remove all new lines from the end of a string (in the odd case where one might have multiple trailing newlines for some reason):Obviously you should never see such a string returned by any normal Python file object's  nor  methods.I've seen people blindly remove the last characters (using  slicing) from the results of file  and similar functions.  This is a bad idea because it can lead to an error on the last line of the file (in the case where a file ends with anything other than a newline).At first you might be lulled into a false sense of security when blindly stripping final characters off lines you've read.  If you use a normal text editor to create your test suite files you'll have a newline silently added to the end of the last line by most of them.  To create a valid test file use code something like:... and then if you re-open that file and use the  or  file methods on it you'll find that the text is read without the trailing newline.This failure to account for text files ending in non-newline characters has plagued many UNIX utilities and scripting languages for many years.  It's a stupid corner base bug that creeps into code just often enough to be a pest but not often enough for people to learn from it.  We could argue that "text" files without the ultimate newline are "corrupt" or non-standard; and that may be valid for some programming specifications.However, it's all too easy to ignore corner cases in our coding and have that ignorance bite people who are depending on your code later.  As my wife says: when it comes to programming ... practice safe hex!
Using list comprehension:
from this link:you can use rstrip() method. Example
As an alternate method, if you know that there are no spaces in your data, which it seems is the case, you can use split() (with no arguments). This splits on white space and uses a more efficient algorithm than the other version of split. It also strips whitespace from both ends.And that's it.
You could do -The  has got all the contents of your file. One could also use list comprehensions to make this more compact.
This will also work,
str.strip() removes the whitespace characters. you can also pass custom characters as argument to strip. The strip function removes the whitespace/custom characters on both ends of the string. lstrip() and rstrip() are left strip and right strip functions resp.Eg:test_str's now Vishaka
You access the last element of the set and then store the value in a variable.So you have:then just do:which will leave you with . Then store that value back in the last element of the set. You can use  or  to remove just the left or right side.
This works to take out the  (new line) off a item in a listit just takes the first item in string off
I had this issue and solved it using the chomp function described above:
To handle many newline delimiters, including character combinations like , use splitlines.Combine join and splitlines to remove/replace all newlines from a string :To remove exactly one trailing
Since the OP's question is about stripping the newline character from the last element, I would reset it with :It's O(1).
Output Will be like this


Answer URL
https://docs.python.org/3/library/functions.html#func-list
https://docs.python.org/3/library/stdtypes.html#str.strip
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/library/functions.html#enumerate
https://docs.python.org/3/library/stdtypes.html#str.splitlines
https://docs.python.org/3/library/stdtypes.html#str.join
https://docs.python.org/3/library/stdtypes.html#str.splitlines
