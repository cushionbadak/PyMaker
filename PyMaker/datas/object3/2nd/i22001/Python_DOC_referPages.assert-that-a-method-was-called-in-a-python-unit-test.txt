Natural Text
Suppose I have the following code in a Python unit test:Is there an easy way to assert that a particular method (in my case ) was called during the second line of the test? e.g. is there something like this:
I use Mock (which is now unittest.mock on py3.3+) for this:For your case, it could look like this:Mock supports quite a few useful features, including ways to patch an object or module, as well as checking that the right thing was called, etc etc. Caveat emptor! (Buyer beware!)If you mistype  (to  or ) your test may still run, as Mock will think this is a mocked function and happily go along, unless you use . For more info read assert_called_once: Threat or Menace.
Yes if you are using Python 3.3+. You can use the built-in  to assert method called. For Python 2.6+ use the rolling backport , which is the same thing.Here is a quick example in your case:
I'm not aware of anything built-in.  It's pretty simple to implement:This requires that the object itself won't modify self.b, which is almost always true.
Yes, I can give you the outline but my Python is a bit rusty and I'm too busy to explain in detail.Basically, you need to put a proxy in the method that will call the original, eg:This StackOverflow answer about callable may help you understand the above.In more detail:Although the answer was accepted, due to the interesting discussion with Glenn and having a few minutes free, I wanted to enlarge on my answer:
You can mock out , either manually or using a testing framework like pymox. Manually, you'd do it using something like this:Using pymox, you'd do it like this:


Answer URL
https://docs.python.org/3/library/unittest.mock.html
