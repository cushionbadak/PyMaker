Natural Text
What exactly are views in Python3.1? They seem to behave in a similar manner as that of iterators and they can be materialized into lists too. How are iterators and views different?
From what I can tell, a view is still attached to the object it was created from. Modifications to the original object affect the view.from the docs (for dictionary views):
I would recommend that you read this. It seems to do the best job of explaining.As far as I can tell, views seem to be associated more with s and can be forced into s. You can also make an iterator out of them, through which you could then iterate (in a  loop or by calling )Update: updated link from wayback machine
How are iterators and views different?I'll rephrase the question as "what's the difference between an iterable objects and an iterator"?An iterable is an object that can be iterated over (e.g. used in a  loop).An iterator is an object that can be called with the  function, that is it implements the  method in Python2 and  in python3. An iterator is often used to wrap an iterable and return each item of interest. All iterators are iterable, but the reverse is not necessarily true (all iterables are not iterators).Views are iterable objects, not iterators.Let's look at some code to see the distinction (Python 3):The "What's new in Python 3" document is very specific about which functions return iterators. , , and  definitely return an iterator, whereas , ,  are said to return a view object. As for , although the description of what it returns exactly lacks precision, we know it's not an iterator.Using  to double all numbers in a listUsing  to extract all odd numbersTrying to use  in the same manner to produce a sequence of numberBut it's an iterable, so we should be able to wrap it with an iterator as well as  and  also do not return iterators in Python 3 An iterator can only be used in a single  loop, whereas an iterable can be used repeatedly in subsequent  loops. Each time an iterable is used in this context it implicitely returns a new iterator (from its  method). The following custom class demonstrates this by outputting the memory  of both the list object and the returning iterator object:A  loop can use the iterable object and will implicitly get an iteratorA subsequent  loop can use the same iterable object, but will get another iteratorWe can also obtain an iterator explicitlybut it can then only be used once


Answer URL
https://docs.python.org/3/whatsnew/3.0.html#views-and-iterators-instead-of-lists
