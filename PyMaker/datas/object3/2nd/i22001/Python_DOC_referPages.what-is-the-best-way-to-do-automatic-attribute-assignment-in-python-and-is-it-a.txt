Natural Text
Instead of writing code like this every time I define a class:I could use this recipe for automatic attribute assignment.Two questions:Are there drawbacks or pitfalls associated with this shortcut?Is there a better way to achieve similar convenience?
There are some things about the autoassign code that bug me (mostly stylistic, but one more serious problem): does not assign an'args' attribute: acts like a decorator.But  calls afunction which returns a decorator.To achieve this magic, needs to test the type of its firstargument. If given a choice, Iprefer functions not testthe type of its arguments.There seems to be a considerableamount of code devoted to setting up, lambdas within lambdas,ifilters, and lots of conditions.I think there might be a simpler way. (Seebelow).. I don't think or  was meant to callfunctions, whose only purpose is theirside effects. It could have beenwritten more clearly with the mundane:Here is an alternative simpler implementation which has the same functionality as autoassign (e.g. can do includes and excludes), and which addresses the above points:And here is the unit test I used to check its behavior:PS. Using  or  is compatible with IPython code completion.
Is there a better way to achieve similar convenience?I don't know if it is necessarily better, but you could do this:Courtesy Peter Norvig's Python: Infrequently Answered Questions.
One drawback: many IDEs parse  to discover an object's attributes. If you want automatic code completion in your IDE to be more functional, then you may be better off spelling it out the old-fashioned way.
From Python 3.7+ you can use a Data Class, which achieves what you want and more. It allows you to define fields for your class, which are attributes automatically assigned. It would look something like that: The  method will be automatically created in your class, and it will assign the arguments of instance creation to those attributes (and validate the arguments). Note that here type hinting is required, that is why I have used  and  in the example. If you don't know the type of your field, you can use Any from the  module.  
If you have a lot of variables, you could pass one single configuration dict or object.
Similar to the above, though not the same... the following is very short, deals with  and :Use like this:
This a simple implementation by judy2k:
In this package you can now find  inspired by answer-3653049 to transform the fields generated by  into , for use in combination with a validation library such as enforce or pycontracts. Note that this has been validated for python 3.5+
You just can't use *args, but you can store in some instance list (like self.args, don't know)


Answer URL
https://docs.python.org/3/library/typing.html#typing.Any
