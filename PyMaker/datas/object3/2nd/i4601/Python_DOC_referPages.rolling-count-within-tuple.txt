Natural Text
I have a list of tuples as follows, with the output as follows:I want a rolling count of each cycle... example output:I can do the first cycle:I'm stuck on how to expand this condition to all cycles.Any help appreciated.
if your cycles appear in order you can use :which prints:
In this case, you would want to keep a running total for every cycle type, for example in a dictionary that maps a cycle to its current count. Then on each iteration the relevant dictionary entry can be incremented and the current value added to the array. For example, using a :This program will always record the total number of each cycle type, even if there was a gap between instances of a type: for example, for inputit would produce
Use a  instead to store your count: 
Try this:
A little late to the party, but allow me to drop in the full itertools solution:whereproduces:You could clean it up a little by making the input a  (so there aren't so many s and magic indexes floating around).In general, I'd prefer itertools over re-inveting the well because (1) it's almost certainly correct (and already tested & verified by lots of people), (2) because everyone uses it, your intent is a lot more immediately clear, and (3) it's all written in C so (in general) it's going to be faster than any python you could write.


Answer URL
https://docs.python.org/3/library/itertools.html?highlight=itertools%20groupby#itertools.groupby
