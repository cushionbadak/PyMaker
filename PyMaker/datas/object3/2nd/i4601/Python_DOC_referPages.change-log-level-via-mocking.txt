Natural Text
I want to change the log-level temporarily.My current strategy is to use mocking.All  calls inside the method should get ignored and not logged to the console.How to implement the  to make logs of level INFO get ignored?The code is single-process and single-thread and executed during testing only.
I want to change the log-level temporarily.A way to do this without mocking is This example would only show messages of level  and above for each test in the  class. (You call  at the start and end of each test as needed. This seems a bit cleaner.)To unset this temporary throttling, call :If  is called, it effectively removes this overriding level, so that logging output again depends on the effective levels of individual loggers.
I don't think mocking is going to do what you want. The loggers are presumably already instantiated in this scenario, and  is an instance variable for each of the loggers (and also any of the handlers that each logger has).You can create a custom context manager. That would look something like this:Context ManagerTest CodeResultsNotesThe code would need to be enhanced to support multithreading; for example,  is a shared variable that's guarded by locks in the  code.
Using @cryptoplex's approach of using Context Managers, here's the official version from the logging cookbook:
You could use dependency injection to pass the logger instance to the method you are testing. It is a bit more invasive though since you are changing your method a little, however it gives you more flexibility. Add the logger parameter to your method signature, something along the lines of:In your unit test file:python logger docs: https://docs.python.org/3/library/logging.html
I use this pattern to write all logs to a list. It ignores logs of level INFO and smaller.


Answer URL
https://docs.python.org/3/library/logging.html
https://docs.python.org/3/library/logging.handlers.html#logging.StreamHandler
