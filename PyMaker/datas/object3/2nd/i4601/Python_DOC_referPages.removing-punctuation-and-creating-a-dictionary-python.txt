Natural Text
I'm trying to create a function that removes punctuation and lowercases every letter in a string. Then, it should return all this in the form of a dictionary that counts the word frequency in the string.This is the code I wrote so far:But this what i'm getting after executing it:I just need to remove he punctuation at the end of the words.
 creates a new string without the punctuation, but it doesn't do anything with it; it's thrown away immediately, because you never store the result.Really, the best way to do this is to normalize your keys before counting them in . For example, you might do:Now  never has keys with punctuation (and the counts for  and  are summed under the key  alone), and there is no need for another pass to strip the punctuation after the fact.Alternatively, if you only care about leading and trailing punctuation on each word (so  should be preserved as is, not converted to ), you can simplify a lot further. Simply , then change:to:This matches what you specifically asked for in your question (remove punctuation at the end of words, but not at the beginning or embedded within the word).
Another option is to use that famous Python's batteries included.Leverages  for counting words, and  for replacing everything that's not a word character.
You can use  to recognize punctuation and use  to count occurence once the string is correctly decomposed.Using  instead of  allows to preserve words such as It's.The method  is simply a more general case of .
Maybe if you want to reuse the words later, you can store them in a sub-dictionary along with its ocurrences number. Each word will have its place in a dictionary. We can create our own function to remove punctuation, pretty simple.See if the code bellow serves your needs:and you'll have an output like this:Then you can easily access each word and its ocurrences simply doing:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/re.html#re.sub
