Natural Text
It would be convenient when distributing applications to combine all of the eggs into a single zip file so that all you need to distribute is a single zip file and an executable (some custom binary that simply starts, loads the zip file's main function and kicks python off or similar). I've seen some talk of doing this online, but no examples of how to actually do it.I'm aware that you can (if its zip safe) convert eggs into zip files.What I'm not sure about is:Can you somehow combine all your eggs into a single zip file? If so, how?How would you load and run code from a specific egg?How would you ensure that the code in that egg could access all the dependencies (ie. other eggs in the zip file)?People ask this sort of stuff a lot and get answers like; use py2exe. Yes, I get it, that's one solution. It's not the question I'm asking here though...
You can automate most of the work with regular python tools. Let's start with clean virtualenv.Now let's install set of packages that will go into zipped library. The trick is to force installing them into specific directory.(Note: don't use --egg option either on command-line or in pip.conf/pip.ini because it will break file layout making it non-importable in zip)Update: pip now has  switch, that does the same thing as .Now let's pack all of them into one zipNote that those files should be at top of zip, you can't just Checking the result:Update: since python 3.5 there is also zipapp module which can help with bundling the whole package into .pyz file. For more complex needs pyinstaller, py2exe or py2app might better fit the bill.
Python will execute zip files as if they were single scripts if they contain an __main__.py[c] file inside at the top level. Package imports will then also check inside the zip that __main__ is executing from within.So create your setup.py ( is important here along with specifying all your packages and other modules).Then run  to create the zip file. Now if you want it to be executable you can do the following. At this point you can execute the resulting zip file like any other python script.One more step for Linux/Mac users reading this to improve convenience (although probably not your scenario as you mention py2exe)This just prepends a #! line to the zip file so that when run from the shell you do not need to specify the interpreter. At this point you can execute it like any other binary on the system although secretly it is a zip file full of python. I typically create a makefile to run setup.py and then do this conversion.
Yes, one zip-file/egg can provide multiple modules, so you can combine them into one file. I'm however highly skeptical to that being a good idea. You still need to install that zip-file, and it may still clash with other already installed versions, etc.So the first question to ask is what the aim is. Why do you want just one file? Is it for ease of install, or ease of distribution, or what?Having just one file will not really make the install easier, there are other, better ways. You can let the install download and install the dependencies automatically, that's easy to do.And having them in one zip-file still means you need to expand that zip-file and run setup.py, which isn't very userfriendly.So having just one file doesn't really solve many problems, so the question is which problem you are trying to solve.
You could use a self-extracting zip file, set up to launch a Python interpreter after decompressing the eggs from within the very same .exe file that contains them.
Well, it's possible to create your own "packages/eggs" in your {app-home-dir/packages} (by coping eggs there for example) and configure extra files in setup.py (setuptools) to pack it all as single distribution (What is setup.py?). Note, that before you launch your app main function you need to inform Python where exactly your external "packages/eggs" are -  by adding {app-home-dir/packages} to sys.path. That is the easies way to create standalone package ..however with that goes dangers regarding dependencies and their versions, Python modules mixed with Ansi C code, etc.
Can you somehow combine all your eggs into a single zip file? If so, how?Yes you can. Python will load from zip archive that are added in sys.path (see PEP 273). If you put all python libraries inside an archive, the archive is treated as a directory. This is what some of the py2exe, bbfreeze, etc. tools can do to isolate the libraries.As for the how, it really depends on how your eggs are installed: pip, easy_install, etc. The logic would be to inspect all you dependent eggs and gather their install path and then zip the eggs inside an archive.How would you load and run code from a specific egg?You need to define load and run. If you are talking about importing module and packages, you do not have to do anything special. Here is an interesting blog post on the subject including some caveat Packaging Python programs as runnable ZIP files How would you ensure that the code in that egg could access all the dependencies (ie. other eggs in the zip file)?This is built-in as long as the eggs are not extensions (ie zip safe). See also zipimport


Answer URL
https://docs.python.org/3/library/zipapp.html
