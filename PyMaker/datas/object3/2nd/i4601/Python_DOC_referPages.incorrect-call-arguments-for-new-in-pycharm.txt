Natural Text
Pycharm suggests me to remove the  which is in the . Why?It said: This inspection reports discrepancies between declared parameters and actual arguments, as well as incorrect arguments (e.g. duplicate named arguments) and incorrect argument order. Decorators are analyzed, too.But its output was what I expected.Example:I'm new to Python, so I think this may lack of standardization.How should I improve it?
This is not specific to , calling most builtin type's special method leads PyCharm to get confused with type signatures.PyCharm resolves  as being inherited from . This is not the real method used to create a tuple, but it fails to find the correct one (which is not in a  file since it is written in C).This is most likely a bug and, unfortunately, this is not something you can fix through settings, except by disabling Incorrect call arguments inspection which I do not recommend.The bottom line is that PyCharm inspection sometimes gives false positives due to having to inspect a dynamically typed language. This is not a surprise and you will sometimes have to ignore inspection errors it raises.A word on your codeOn another note, I want to point out that you might want to cover the case where you create an empty  in the same way it can be done with .For this you could have a default .
It is saying this because 's  method accepts parameters .You probably found documentation that you could construct a  instance using  to pre-fill the tuple with initial values. This  is an argument to the  method of the  class, not the  method.I think what you meant to use was  instead of . In Python, the  method is used mostly for metaprogramming. The  method can be seen as the constructor like you would use it in other languages. The  method is used to create an instance of the class, so you'd need to construct an  and return that. You could use  to implement the singleton pattern for instance, by always returning the same static object. The  method just initialises the instance after it's been created, like a normal constructor does.So you'd be using something like:
I'm not expert, but as pointed in the documentation:ClassesClasses are callable. These objects normally act as factories for new instances of themselves, but variations are possible for class types that override new(). The arguments of the call are passed to new() and, in the typical case, to init() to initialize the new instance.Classes: Types that overrides In the instatiation of your  you are passing a list, but since you are inheriting from  it might be conflicting there, because a  expects a sequence in the type  instead of  at its instatiation.Correction:I meant conflicting with PyCharm only. Sometimes PyCharm makes very unecessary inpections that really bother us. You have the choice of disabling them. And for the sake of clearification,  can be generated from any iterable, so your code is really fine. Also, just a note, you could simply use pass  to your method, it works fine as well. PyCharm might get confused about all this.And what if you want to expand the scope of your code a little bit? Your code works fine and it's short, but here's an alternative, if you want more flexibility in the future (not really necessary though and you might find better approches):output


Answer URL
https://docs.python.org/3/reference/datamodel.html
