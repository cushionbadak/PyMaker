Natural Text
I have a large collection of functions and methods that normally accept date/time objects. I want to adapt these to also accept string representations of a date/time objects.Consider the following function, which is a simple caseUsing dateutil, I would approach this by altering the function as follows.While this works, the code is very repetitive and it is tedious to do across a large collection of functions, some of which accept as many as five datetimes.Is there an automatic/generic way to accomplish this conversion to achieve code that is DRY?
One could create a decorator that does this. Here, we just blindly attempt to convert each argument into a date/time. If it works, great, we use the date/time, otherwise just use the object.Which allows you to simply add the decorator to the existing functions like soThis works in this particular case. However, in some cases you may have arguments that should actually be strings, but would be converted into datetimes erroneously, if the string happened to be a valid datetime as well.Take for example the followingThe result could potentially be unexpectedAs a workaround for this, we can have a decorator whose parameters are the names of the arguments we want to convert in the decorated function. This solution cheats a little by using  to work with the signature of the decorated function. However, it allows us to bind the signature, appropriately handling positional and keyword arguments.Then the problem encountered in the ambiguous case can be avoided by specifically specifying that only  should be converted.Then the result is no longer unexpectedA downside compared to the naive approach is, in this case, you still need to visit each function and identify the datetime argument names. Also, this hack uses a feature of  that is not available in Python2.x -- in which case you would need to either rework this using , or use a third party module that provides the backport for the legacy version of Python.


Answer URL
https://docs.python.org/3/library/typing.html
