Natural Text
Method overloading is not possible in Python!Can you please explain why  in Python is not a case of method overloading?In the above code, I have two methods with the same name 'val' (but different set of args) and both behave differently.
First, the  decorator creates a descriptor named  and sets it aside to add to the class once it is defined. Then, the  decorated takes its function and simplyeffectively adds a reference to it to the  descriptor.Your code is roughly equivalent to 
It's not method overloading because there aren't two methods with different signatures that can be called. If it was method overloading, you could do something like this:But that doesn't work, because  is a property and not an overloaded method.So what's going on there? Why are we defining two methods with the same name, and what happens to them, if not overloading?The magic happens in the decorators. As a prerequisite, you have to know thatis equivalent toSo, the first thing that happens is that the  decorator turns your getter function into a property with that function as its getter function:After this, the  decorator creates a new property with a getter and setter function:(The getter and setter functions have the same name because they were both defined as , but they're still different functions. That's why they have different ids.)So in the end you have a  property with a getter and a setter function. You do not have an overloaded method.For details about how properties work and how the getter and setter functions are called, see the descriptor documentation.


Answer URL
https://docs.python.org/3/library/functions.html#property
https://docs.python.org/3/howto/descriptor.html
