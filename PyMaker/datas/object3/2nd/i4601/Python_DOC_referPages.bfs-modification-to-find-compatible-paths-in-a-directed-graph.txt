Natural Text
I have the following directed graph and every node has one or more attributes. I try to modify bfs algorithm to find all possible paths from a starting node until the given attributes are covered. I also want the path that i found to not be a part of a cycle. For this graph if i start from node 1 and i want to cover attr 4 the paths that my algorithm will find are:If i add the edge  then the paths  and  i want not to be accepted because are part of a cycle. So in my algorithm i try to check the neighbors of the last visited node and if the neighbor has already visited then i try to discard this path but my algorithm doesnt work in this case. If i add the edge  it returns the same paths. How can i fix this?Here is my code:
I'll assume that you don't care if nodes are part of a bigger cycle. E.g. if 4 is connected to 1 and 3 is in a cycle 1-2-3-4. If you want to handle this, you may start a dfs from each matching node, with the current path set as visited.First, you should use snake case in Python Second, you should use s to compare the attributes covered to the attributes to be covered. For a path, compute the set of covered attributes and compare the sets:Third, some remarks on the  function:A test  is equivalent to , because for a boolean  (try with True and False to convince yourself)The way you append a path to  may be shortened to You probably do not need a synchonized : use a listUse return instead of print or even better, create a generator that yields paths when they are found.Four: what is the problem? Look at the  loop. Whether you  or not, you go to the line . That's why you do not exclude the paths with cycles. You want to distinguish the normal end of the loop from the break. That's a perfect case for confidential loop syntax in Python: the  loop.I quote the doc: "a loopâ€™s else clause runs when no  occurs". This gives the following code:But you can also use  for a more natural expression:This gives the following code:Try it with:


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops
