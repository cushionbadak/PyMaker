Natural Text
For an application I'm working on, I'm searching a directory of files, and expecting to find matching pairs of files to perform some further analysis on.In this case, a pair is defined as matching on some subset of attributes, but differing in some other attributes.As part of the error handling/warning, I want to identify any files found that are "incomparable," i.e. files for which the expected "partner" in the pair is not found.I have a class of objects to store the structured attribute information, and when I read files in the directory, I store each file I find as an element in list of these objects.Here's a silly simple exampleLet's assume that there's no duplicate elements in the list, and let's define a "pair" as two  objects that have matching  and  but different values of  (i.e. one is Right and one is Left).Now I'd like to identify incomplete pairs (perhaps into a list of  so that I could error or warn appropriately, e.g. "No Left lg blue glove found" "No Left med tan glove found."I've seen answers that teach how to identify items "missing" from pairs of lists, but my application has a couple of complexities that I couldn't figure out how to address: linking on attributes of an object, and linking on multiple attributes of an object.I imagine something is possible with for loops and list comprehension, but I can't quite figure out how to link it all together.
It's pretty easy if you can implement equality/hash for your class:Output:You can also consider using , which actually does these for you.Here is an alternative that does not require implementing equals and hash, nor creating new objects:Output:
With no duplicates allowed, the problem is relatively simple.Concatenate your identifiers: Build left/right subsets on the ID's alone.Now, simply reverse the key process to get the glove objects:


Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
