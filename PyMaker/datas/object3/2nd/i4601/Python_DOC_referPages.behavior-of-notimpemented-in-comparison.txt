Natural Text
I recently found out that python has a special value NotImpemented to be used with respect to binary special methods to indicate that some operation has not been implemented.The peculiar about this is that when checked in a binary situation it is always equivalent to .For example using  (which is a case where  in not implemented for example) for two objects in comparison will virtually return . As in this example ( and  are objects of the  class):EqualUnequalSince the second style is a bit too verbose and normally not prefered (even my pyCharm suggests to remove the explicit comparison with ) isn't a bit tricky behavior? I wouldn't have noticed it if I haven't explicitly print the result of the Boolean operation (which is not Boolean in this case at all).I guess suggesting to be considered  would cause the same problem with  so we arew back to step one.So, the only way to check out for these cases is by doing an  exact comparison with  or  in the opposite case.I know that  is preferred over  for various reasons so I am not asking for any explanation over why this matter.
Per convention, objects that do not define a  method are considered truthy. From the docs:By default, an object is considered true unless its class defines either a  method that returns  or a  method that returns zeroThis means that most classes, functions, and other builtin singletons are considered true, since they don't go out of their way to specify different behavior. (An exception is , which is one of the few built-in singletons that does specifically signal it should be considered false):There is no real reason for the  object to break this convention. The problem with your code isn't that  is considered truthy; the real problem is that  is not equivalent to .If you want to compare two objects for equality, doing it with  is incorrect. Using  instead is still incorrect.The correct solution is to do comparison with the  operator. If, for whatever reason, you can't use the  operator directly, you should use the  function instead.


Answer URL
https://docs.python.org/3/library/constants.html#NotImplemented
https://docs.python.org/3/reference/datamodel.html#object.__bool__
https://docs.python.org/3/library/stdtypes.html#truth-value-testing
https://docs.python.org/3/library/operator.html#operator.eq
