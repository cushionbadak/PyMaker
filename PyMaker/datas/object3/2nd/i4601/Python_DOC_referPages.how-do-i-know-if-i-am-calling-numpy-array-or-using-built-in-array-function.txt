Natural Text
If, for example, I import as follows:Then I might have some list that I generated:then, I realize I have to do some math! so I type:Since I didn't have to type numpy.array or np.array, based on how I declared my imports, how do I know that my IDE is preferring the numpy version over the built in version? Is this automatic?I checked the docs on for numpy.array() and python's built in array(), and it looks like they both accept the same "list like" argument. 
As the commenters have said, you can easily tell which one is being used just by looking at the most recent import statement. However, in case you get worried/confused, you can also directly check the module from which a function or class originates using Python's handy built-in reflection features.For example, the following Python statement:will print out the string  if  was imported from the  package, or the string  if it was imported from the  package.If  fails, explore alternatives via @ShadowRanger raises the good point that some Python objects don't have the  property. In particular, if you run just , then  is a module and the  call will fail. In these kinds of situations you can always discover what reflection information is actually available via the  function. is easily my favorite feature of Python. For any Python object ,  prints out the complete list of the attributes of . For example, given that you just ran , executing  would then print out:Which shows that even though the array module lacks , if does have other reflection information available such as  and .
The best way is probably to keep your namespaces clean, if you can:  do:  or ,  instead of: In case it is not up to you, and it is unclear what came earlier, , or , or  will be handy. (as mentioned in the comments)


Answer URL
https://docs.python.org/3/library/functions.html#built-in-funcs
https://docs.python.org/3/library/constants.html#built-in-consts
