Natural Text
Below is a simple test snippet for PyMongo connections:Here is the output:...   ...  998  999And here is the output in MongoDB Console:2018-03-24T20:00:55.746+0530 I NETWORK  [listener] connection  accepted      from 127.0.0.1:51272 #1500 (1000 connections now open)      2018-03-24T20:00:55.747+0530 I NETWORK  [conn1500] received client      metadata from 127.0.0.1:51272 conn: { driver: { name: "PyMongo",      version: "3.6.1" }, os: { type: "Darwin", name: "Darwin",      architecture: "x86_64", version: "10.10.1" }, platform: "CPython      3.6.0.final.0" } 2018-03-24T20:00:55.773+0530 I NETWORK  [conn1486] end connection 127.0.0.1:51286 (999 connections now open)      2018-03-24T20:00:55.773+0530 I NETWORK  [conn1485] end connection      127.0.0.1:51285 (998 connections now open) 2018-03-24T20:00:55.773+0530 I NETWORK  [conn1484] end connection      127.0.0.1:51284 (997 connections now open)      . . .      . . .I see MongoClient has a keyword argument . This has the default value of only 100. But how the above code works?
MongoClient has a keyword argument maxPoolSize. This has the default value of only 100.That is correct. The default value of  in PyMongo (as of v3.6) MongoClient is 100. However, the  parameter controls the maximum built-in connection pool per MongoDB server for an instance of MongoClient. Your example snippet creates 1000 MongoClient instances. Please note that you only need one MongoClient for each process, and reuse it for all operations. It is a common mistake to create a new client for each request, which is very inefficient.But how the above code works?If you would like to check whether the limit works, you can utilise Python threading module to create threads to test the limit of MongoClient connections. There are two other parameters that you could utilise:: this parameter sets the limit of how many threads can wait in the queue before getting a connection from the pool. By setting a low  and low  your code would receive ExceededMaxWaiters exception. : this parameter sets the time of how long threads should wait in the queue before getting a connection from the pool. By setting a low  and low  your code would receive ConnectionFailure exception. Example: See How does connection pooling work in PyMongo? for more details. Please use the default values provided unless you have specific use case that requires alteration of the above values. 


Answer URL
https://docs.python.org/3/library/threading.html
