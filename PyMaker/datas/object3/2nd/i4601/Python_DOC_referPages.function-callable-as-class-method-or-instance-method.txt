Natural Text
This question already has an answer here:can a function be static and non-static in python 2                    1 answer                I have a Python class that I created previously, it looks something like this:Now I would like to retrofit this interface with some state, so that the caller can create a  object, give it some properties, and then call its  method, which has access to  and its properties:Unfortunately, this breaks the previous interface -  will now give , because  is a simple function reference.I can add a  decorator to get part way there:Is it possible to create a  decorator that converts the other direction?  Specifically - if called as an instance method like , then do nothing; if called as a class method like  then create a new  object (using no-arg constructor) and pass that as the  argument.I was going to try this myself by looking at the source for , but it looks like it's implemented at the C level.
The Descriptor HOWTO has entire section on how  and  work, and how to implement variations on them, including this pure-Python equivalent to :If it isn't obvious to you how that works, you probably need to read the whole HOWTO. I've got a blog post that tries to provide an introduction to the method-related stuff first, which may help get over the abstraction hump of the first part of the HOWTO.


Answer URL
https://docs.python.org/3/howto/descriptor.html#static-methods-and-class-methods
