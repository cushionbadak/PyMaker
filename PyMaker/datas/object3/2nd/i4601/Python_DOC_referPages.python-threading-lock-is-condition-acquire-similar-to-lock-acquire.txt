Natural Text
Is condition.acquire(threading.Condition()) similar to lock.acquire(threading.Lock). Does both of get access to the lock. Can i use condition.wait,notify with lock.acquire or i have to use condition.wait, notify with condition.acquire.
If your condition was created like this:… then yes, as the docs explain,  is just calling , so you could do that instead and get the same effect. And likewise for . However, it's likely to be misleading to human readers (and maybe to static analysis tools), so unless you have a really good reason, you shouldn't do it.On the other hand, if they're unrelated objects, created like this:… then no. It is illegal to call  if you haven't acquired the lock used by the condition. It's guaranteed to raise a . It doesn't matter if some other  object happens to be ensuring that nobody else will access ; the whole point of  is that it atomically releases its lock and blocks on , so if it's not holding its lock, it's useless as a condition.As a side note, it's almost always better to acquire both s and s in a  statement:The way you've written things, if anything after that  raises an exception, you will never release the condition, so no other thread waiting on it can wake up.While we're at it, using  is almost always a sign of a problem with your threading design. Why can't you just  instead? If you have too many spurious  calls, you should fix that. If  is not getting reset properly so the  loop may exit early, that's even more important to fix. Whatever problem you think you're solving with , you're probably just disguising it.
The notify part of code is as below.


Answer URL
https://docs.python.org/3/library/threading.html#threading.Condition
https://docs.python.org/3/library/threading.html#using-locks-conditions-and-semaphores-in-the-with-statement
