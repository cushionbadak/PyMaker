Natural Text
I have defined an abstract base class  that acts as a collection of items with specified supertype . The convenience classmethods in  are annotated/type hinted to work with objects of type . Here is a minimal example:Now there are multiple static implementations (e.g. ) which are each supposed to work with their own type of items (like ), being subclasses of the original generic type .The repositories are static, meaning that they are not instantiated but rather function as namespaces for proper access to items that I load from YAML configuration files. The main perk is that I can create one of these  and simply override the deserialization method , and the resulting repository will have all convenience methods from the base class. As I need to ensure that all of these  work with items  that have a specific interface in order for the  methods function properly, the  must work with items that inherit from .Strongly-typed languages like Java or C# have the concept of Generic Collections, where the elements in the subclassed collections all assume a specific type. Is the same possible with type hinting in Python?In particular, I would like the inherited  method in  to be hinted as  with minimal effort (not override it just for the sake of type hints). Optimally, the correct return value should be linted by PyCharm.Currently, even though  holds  items, my autocompletion in PyCharm only shows me members of . I read about  and , but I'm unsure how to use them in this case.
You're programming to an interface, so only  members are exposed.Output:A generic collection will expose the generic type's members.Return typePasses the buckAutocompletion will now show members of .


Answer URL
https://docs.python.org/3/library/typing.html
