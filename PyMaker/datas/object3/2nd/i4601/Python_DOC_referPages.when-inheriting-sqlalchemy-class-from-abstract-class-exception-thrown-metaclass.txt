Natural Text
The following code is a very simple implementation of a SqlAlchemy ORM with one simple table. The Mytable class tries to inherit from BaseAbstract.The code throws the following exception:Message: metaclass conflict: the metaclass of a derived class must be  a (non-strict) subclass of the metaclasses of all its basesIf you change the class declaration line to class Mytable(Base):the code will work fine. Also if you change  to  the code will again work fine.How do I inherit from an abstract class in SQLAlchemy?
Mixing metaclasses is not easy and you should avoid it. SQLAlchemy offers a way to handle abstract base classes or augmenting the base, and on the other hand what you're trying to do looks a lot like a mixin.You can instruct SQLAlchemy to skip creating a table and a mapper for a class using :You could also augment the  class:But in my opinion the easiest solution is to forego using an "abstract base" altogether and think of it as a mixin, as you had done already in a way:But if you insist on using an actual  abstract base class, register your model classes as virtual subclasses:The downside is that  decorated methods are not checked upon instantiating virtual subclasses.If the above do not fulfill your needs and you want to use  for checking that required methods are implemented, you could try and do as the exception instructed and create a new metaclass that is the combination of  and :I cannot vouch for this, though. It might contain more than a few surprises.
You should be able to solve the issue by introducing an intermediate base class for your . For example:


Answer URL
https://docs.python.org/3/library/abc.html#abc.ABCMeta.register
https://docs.python.org/3/library/abc.html#abc.ABCMeta
