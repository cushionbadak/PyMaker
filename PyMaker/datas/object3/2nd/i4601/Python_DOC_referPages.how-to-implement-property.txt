Natural Text
I was comparing three slightly different implementations of  in python. Python documentation and "Source 1" initialize the private variable, .  Furthermore, the code from Source 1 has a bug; it doesn't access  when initializing.  By contrast, the third example correctly initializes the public variable .Is there a good reason to initialize  in place of  in ?  Are there any additional differences between these that I haven't described?From the docs:Source 1: Source 2: 
Is there a good reason to initialize  or  in place of  in ?Properties are often used to transform the input in some way. An internal method (including ) often already has the transformed data, and doesn't want it to get transformed again. For example, consider this somewhat silly but obvious example:Even when you're not doing anything that would be wrong to pass through the setter, internal code often knows about the class invariants, so the checks done by setters may be extra overhead for no benefit. For example, if you wanted a method to set the temperature to 0°C, it could just set  instead of , because you know that  doesn't need to be checked.On the other hand, some internal methods may want to see  the same way the public does. In that case, it should use the property rather than the underlying attribute. In fact, your Source 1 is a perfect example— just saves its parameter directly to , allowing you to construct temperatures below absolute 0 (which is bad, because that's actually hotter than infinity, and CPUs like to be cold). And it would be silly to repeat the same precondition test in  that you already wrote in ; in this case, just set  instead.There is additional difference in whether a single or double underscore is used.A single underscore makes the attribute "private by convention"; a double underscore goes further and mangles the name, which means it can't be accidentally accessed from outside your class's code.Using  works on your instances;  raises . But it only prevents accidental access—they can still use  if they really want to get at it. The main reason to do this is to protect subclasses or superclasses from accidentally using the same names.


Answer URL
https://docs.python.org/3/library/functions.html?highlight=property#property
