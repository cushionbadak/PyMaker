Natural Text
Write a program to compute the sum of the terms of the series: 4 - 8 + 12 - 16 + 20 -24 + 28 - 32 + .... +/- n, where n is an input. Consider that n is always valid (whichmeans it follows the series pattern).Can't seem to find the issues that Ihave
How about an explicit formula?The series doesn't do anything too interesting, it just keeps adding  every two steps, and flips the sign in even steps:Some examples:Output:
First of all, know that your series sum has a closed form.But in general, infinite series are a good usecase for generators.Thus for getting the sum you can do this.An interesting question asked in the comment is also, given some value, how can we recover the sum up until that value is reached in the series. The generator approach is well suited for these kind of problems.
Python can be used to easily compute mathematical sequences and series.  We find the sum of all values computed up to and including Giventhe following mathematical components:generating function ()sample alternating arithmetic sequence ()summation equation ()We now implement two approaches  and  verified by .  CodeGenerating Function, Summation Equation, DetailsGenerating FunctionThis first approach simply sums an arithmetic sequence generated by a list comprehension.  The signs of values alternate by the expression :Similarly, an infinite sequence can be made using a generator expression and :Here the sum is returned for a slice of  values.  Note, we can use the  itertools recipe and  to compute some arbitrary number of summations, e.g. 10 sums (see also ).Summation EquationThe second approach comes from inspection, where a pattern is determined from the outputs of a sample sequence:For an arbitrary final value , a value of the sequence is generated ().  When multiplied with some unknown function, , a resultant sum is computed  ().  We determine a pattern for  by deducing the relationship between the sequence values and expected sums.  Once determined, we directly implement a function that computes our desired sums.HighlightsMathematical sequences can be generated from list comprehensions.Infinite sequences can be made from generator expressions.Mathematical series/generating functions can be computed using reducing functions, e.g. , , etc. applied to sequences.General summation equations can be implemented as simple Python functions.
As @John Coleman pointed out,  produces one result not as you expected.Below is my solution:Using  to determinate the sign, then sum up. at last, put it into another loop to create the series you'd like.Output:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.count
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/itertools.html#itertools.accumulate
https://docs.python.org/3/library/itertools.html#itertools.takewhile
