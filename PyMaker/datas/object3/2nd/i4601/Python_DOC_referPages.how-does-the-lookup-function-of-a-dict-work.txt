Natural Text
It is well known that mutable types cannot be the key of a dictionary.However if you were using say C++, then regular maps let you use vectors and arrays as map keys because regular maps are implemented as trees.However, C++ also lets you use an array as the key of an unordered map, which is closer in spirit to a python dictionary because it hashes the keys as long as you provide the hash function for types it doesn't know how to hash.So I wanted to know if Python would let you do the same as long as you provide an   method.I added the  inside the  to figure out what is being hashed and when the function is invoked.Right before the  is thrown, the contents of  are printed, indicated that  was just hashed. Now shouldn't it just check if this hash value if the hash value of one of the keys? Why does it throw a key error?If it is also hashing all the keys one by one to figure out if one of them hash the same hash value as the query shouldn't the code below work?If you were determined to have a mutable key with a semi robust hashing function similar to cpp is it possible?
How are dicts stored in memory? (simplified version)for each key in the dict,  is calculated and then both key and value are stored in a place defined by the hashif multiple keys have the same hash (or have hashes pointing to the same storage destination), there will be a list of key-value pairs in that placeHow are dict values read from memory? (simplified version)the  of the key is calculated and location in memory is calculated from that hashkey-value pairs are read from that location one by one and compared to the sought key using  operatorConclusionTo for a key (call it ) to be found in the dict, the dict should contain a key (call it ), for which .So why are mutable keys a bad idea?Because  is calculated when key is written into the dict and it matches the value of  at that point in time, but if  is mutable, and you mutate it while it is in the dict, dict will not recalculate , so it will no longer be possible to find the key.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__hash__
