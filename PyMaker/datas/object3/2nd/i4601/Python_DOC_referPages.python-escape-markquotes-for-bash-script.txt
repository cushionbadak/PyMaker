Natural Text
When using os.system() it's often necessary to escape filenames and other arguments passed as parameters to commands.  How can I do this?  Preferably something that would work on multiple operating systems/shells but in particular for bash.I'm currently doing the following, but am sure there must be a library function for this, or at least a more elegant/robust/efficient option:Edit: I've accepted the simple answer of using quotes, don't know why I didn't think of that; I guess because I came from Windows where ' and " behave a little differently.Regarding security, I understand the concern, but, in this case, I'm interested in a quick and easy solution which os.system() provides, and the source of the strings is either not user-generated or at least entered by a trusted user (me).
This is what I use:The shell will always accept a quoted filename and remove the surrounding quotes before passing it to the program in question. Notably, this avoids problems with filenames that contain spaces or any other kind of nasty shell metacharacter.Update: If you are using Python 3.3 or later, use shlex.quote instead of rolling your own.
 does what you want since python 3.(Use  to support both python 2 and python 3)
Perhaps you have a specific reason for using . But if not you should probably be using the  module. You can specify the pipes directly and avoid using the shell.The following is from PEP324:
Maybe  is a better shot?
Note that pipes.quote is actually broken in Python 2.5 and Python 3.1 and not safe to use--It doesn't handle zero-length arguments.See Python issue 7476; it has been fixed in Python 2.6 and 3.2 and newer.
I believe that os.system just invokes whatever command shell is configured for the user, so I don't think you can do it in a platform independent way.  My command shell could be anything from bash, emacs, ruby, or even quake3.  Some of these programs aren't expecting the kind of arguments you are passing to them and even if they did there is no guarantee they do their escaping the same way.
Notice: This is an answer for Python 2.7.x.According to the source,  is a way to "Reliably quote a string as a single argument for /bin/sh
The function I use is:that is: I always enclose the argument in double quotes, and then backslash-quote the only characters special inside double quotes.
If you do use the system command, I would try and whitelist what goes into the os.system() call.. For example..The subprocess module is a better option, and I would recommend trying to avoid using anything like os.system/subprocess wherever possible.
The real answer is: Don't use  in the first place. Use  instead and supply the unescaped arguments.


Answer URL
https://docs.python.org/3/library/shlex.html#shlex.quote
