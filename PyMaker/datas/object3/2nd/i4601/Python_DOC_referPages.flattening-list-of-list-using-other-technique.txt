Natural Text
I am trying to understand this code for flattening list:Source: Making a flat list out of a multi-type nested listHowever I am not able to understand recursive statement and how control is flowing. Specially these two lines:Can I get gist of how recursive is working at every iteration, that would be a great help. And Can we use some other approch to do this problem?
Iterate protocolIn python there is such a key concept as iteration protocol. Iteration protocol is used every time you:Use a for loopUnpack/pack a tupleUse list comprehensionYield any valueBasically iteration protocol is used every time you want to process some sequence of data. Let's use list creation as example. Whenever you call:Python interpreter is calling __next__ method on x and then adding result to end of result list (which is empty at the beginning). And it stops when next(x) throws StopIteration.So what with this yields?Yield is pretty similar to return but it does not terminate the function. Result of the function with yields inside is generator. Generators implements __next__ method and they can be used in iterate protocol.Let's look at this function:This function will be generator and it will behave like this:So every time you call next(i) python only execute code till next yield and returns it's value.If you want to learn more about it I recommend this lecture or answers to this question. P.SInstead of this lines: you can use:
(I deleted my comment and posted is as answer, because my edit was too long.)The flow control is as follows: is the nested list you have at the beginning,the  and later  differentiates if the  (element from ) is a  or  type,if yes, then the statement under  makes the recurrence happen and the  becomes new ,...this happens for every element inside the main list until the  isn't  or the function returns  object, so to get to all outputs you have to call a  on it.What you also can do, is adding  statements to see what is happening; for example:If we input  and say  we get:This way we can see, what the function was working on in every step.


Answer URL
https://docs.python.org/3/library/stdtypes.html#iterator.__next__
https://docs.python.org/3/library/exceptions.html#StopIteration
https://docs.python.org/3/reference/expressions.html#yieldexpr
https://docs.python.org/3/glossary.html#term-generator
https://docs.python.org/3/library/stdtypes.html#iterator.__next__
https://docs.python.org/3/reference/expressions.html#yieldexpr
