Natural Text
I'm looking at a 3rd party API and they have the following piece of code:I understand that  means , does  have any special meaning or does it just mean 2 s?
It just assures that two bytes are provided  times so the size of the array will be equal to . If  was provided, the resulting array would have a  (due to the type-code  requiring  bytes); that is obviously counter intuitive:Note that, in Python , if you need the same snippet to work you must provide a  object as the  argument to :As you also can't provide a  string in Python 2. Other than that, the behavior stays exactly the same.So  is for convenience reasons, nothing more. No semantics are attached to . No semantics are really attached to  either (as they do in, for example, )  is just another string in Python.As a further example for this behavior, take the initialization of an array with a type-code of  for unsigned ints  with a minimum of  bytes but  on  builds of Python. In the spirit of the snippet you've provided, you'd initialize the array by doing something like this:Yes, four times the  string to get  elements.As a final note -- the following timings are performed on Python 3 but 2 is the same -- you might be wondering why he used  instead of the more intuitive-looking  to initialize the array. Well, it's quite faster:Of course, you can do better (for type-codes other than ) by feeding a  to . One way to initialize a  is by providing an  as the number of items to initialize with null bytes:but, if I remember correctly, the  way of initializing a bytearray might get deprecated in  :-).
The  class accepts a format character (called a typecode) followed by an initializer.  means an unsigned short, with a minimum size of 2 bytes so,  satisfies that. The  part is to initialize the entire array to NULL bytes.
It looks like this function returns an array made of 16-bits; thus  probably stands for creating two bytes (which is 16 bits) of data. In other words, it returns n words of two bytes.


Answer URL
https://docs.python.org/3/library/array.html#array.array
https://docs.python.org/3/library/functions.html#bytearray
