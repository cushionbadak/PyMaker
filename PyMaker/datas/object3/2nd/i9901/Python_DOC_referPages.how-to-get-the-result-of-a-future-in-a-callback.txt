Natural Text
The  method was recently added to the distributed  object which allows you to take some action after the future finishes, irrespective of whether it succeeded or not.http://distributed.readthedocs.io/en/latest/api.html?highlight=add_done_callback#distributed.client.Future.add_done_callbackThe callback function will hang if you try to directly call any of the methods ,  or  on the passed future object.The exception and traceback can however be accessed in the callback as follows:Trying the same pattern with the result - i.e.  raises an exception:Without being able to access the result of the future in the callback, being able to add a callback is of limited use to me.Am I missing something - is there a way to get the result of the future in the callback?In the asyncio documentation it seems to give an example where accessing the  method directly is possible:https://docs.python.org/3/library/asyncio-task.html#example-future-with-run-forever...I'm not sure how this related to tornado/distributed, but it would be very useful to be able to do the same.
Currently your callback gets called within the Tornado Event loop.  If you want to get the result of the future you'll have to use the Tornado API.Here is a minimal example:However, your question highlights that perhaps this is not the most intuitive way for users to interact with add_done_callback, so I wouldn't be surprised if we introduced a breaking change for later versions.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#example-future-with-run-forever
