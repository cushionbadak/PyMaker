Natural Text
I have a list of words and their meanings:Every word is followed by its meaning. So  means ,  means  and so on. Words which have multiple meanings have their meanings separated by a . For example 'meretricious' has meanings . What I want to do is to combine word-meaning pairs such that that my final list is this:How can I do this ?
You need to iterator over the list in pairs, and there's a simple idiom to do this by ing up 2 of the same :
A pythonic way of doing it:
You can simply create a list of tuples using this code:This list will look like the following list:Then you can iterate through this list and concatenate each tuple.#1#2
My answer is very similar to AChampion's:This code may be a bit mysterious, so I'll try to explain what's going on. creates an iterator object from .  As the docs say, this isan object representing a stream of data. Repeated calls to the  iteratorâ€™s  method (or passing it to the built-in function  ) return successive items in the stream.We then duplicate the iterator and  it. This lets us iterate over the items from the pair of iterators in parallel. But we don't actually have two separate iterators: we have two references to the one iterator object, so what we get is successive pairs of the items in . FWIW, this technique is discussed in How do you split a list into evenly sized chunks?.We use  to call the  method on each tuple of strings yielded by . Finally, we use  to convert the iterable returned by  into a list (in Python 2 this step isn't needed since the Python 2  returns a list).We can use this same technique to produce a dictionary instead of a list. A dictionary is a more useful structure for this data.outputAnd we can split the  strings into lists, which makes it easier to get at the individual words:output


Answer URL
https://docs.python.org/3/library/functions.html#iter
https://docs.python.org/3/glossary.html#term-iterator
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/functions.html#map
