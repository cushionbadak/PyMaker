Natural Text
As the question asks, why doesn't the below code work:I am executing the above in pycharm via python 3.5.2 console.I initially thought it was a context issue but after reading the documentation, I haven't come closer to understanding why this error ocurs.Thanks in advance :)EDIT: I understand that it works without exec() by the way, I'm curious why it won't work with exec (as my circumstances required it) - comprehensive answers welcome.
This is because  is ignorant to your surrounding while loop. So the only statement that  sees in your example is . Instead of using , simply use  as is.The only access the  function has to its surrounding scope, is the  and  dictionaries. The documentation for  provides some insight into how  works:This function supports dynamic execution of Python code. object must be either a string or a code object. If it is a string, the string is parsed as a suite of Python statements which is then executed (unless a syntax error occurs). [1] If it is a code object, it is simply executed. In all cases, the code that’s executed is expected to be valid as file input (see the section “File input” in the Reference Manual). Be aware that the return and yield statements may not be used outside of function definitions even within the context of code passed to the exec() function. The return value is None.In all cases, if the optional parts are omitted, the code is executed in the current scope. If only globals is provided, it must be a dictionary, which will be used for both the global and the local variables. If globals and locals are given, they are used for the global and local variables, respectively. If provided, locals can be any mapping object. Remember that at module level, globals and locals are the same dictionary. If exec gets two separate objects as globals and locals, the code will be executed as if it were embedded in a class definition.If the globals dictionary does not contain a value for the key builtins, a reference to the dictionary of the built-in module builtins is inserted under that key. That way you can control what builtins are available to the executed code by inserting your own builtins dictionary into globals before passing it to exec().
The  statement runs a bit of code independently from the rest of your code.Hence, the line:is tantamount to calling  out of nowhere, in a script where nothing else happens, and where no loop exists.The right way to call the  statement is:EDITThe comment from Leaf made me think about it.Actually, the  statement does not run the code out of nowhere.A better answer, as far as I understand, is that  runs a piece of code in the same environment as the original code, but independently from it.This basically means that all the variables that exist at the moment  is called can be used in the code called by . But the context is all new, so , ,  and other statements that need a context, will not work, unless the right context is created.By the way, I kept the word "statement" when talking about , but it has become a function in Python3, the same way  did.
 is a function. Assuming for simplicity that a function call constitutes a statement of its own (just like in your example), it may end in one of the following ways:the function returns normally - in this case the next statement according to the control flow is executed;an exception is raised/thrown from the function - in this case the matching  clause on the call stack (if any) is executedthe entire program is terminated due to an explicit call to exit() or equivalent - there is nothing to execute.Calling a  (as well as  or ) from inside  would modify the program execution flow in a way that is incompatible with the described aspect of the function call semantics.Note that the documentation on  contains a special note on the use of  and  inside :Be aware that the  and  statements may not be used outside  of function definitions even within the context of code passed to the   function.A similar restriction applies to the  statement (with the difference that it may not be used outside loops), and I wonder why it was not included in the documentation.
 is a built in function ,Python insists that  should happen inside the loop,not inside a What is happening in your code is you are putting  inside a  which is  you can't break out of a loop by executing a  within a function that's called inside the loop. For Ex
Try break without exec():
 function runs code inside a code and that means it runs out of nowhere! So, your while loop doesn't catch it. Your file is .  runs on another file called . it doesn't recognize it where are you trying to break a loop where there is not a loop. So, your code is this:It should be like this:


Answer URL
https://docs.python.org/3/library/functions.html#exec
https://docs.python.org/3/library/functions.html#exec
https://docs.python.org/3/library/functions.html#exec
