Natural Text
I'm making a client-server program, and there is problem with client part.Problem is in infinite receiving data. I've tested this particular class, listed below, in a python interpreter. I've succesfuly(maybe not) connected to google, but then program stoped in function recvData() in data = self.socket.recv(1024)about commented part :I thought problem in Case realization, so used just if-then statement. But it's not.
Your problem is that  only returns an empty string when the socket has been shut down on the server side and all data has been received. The way you coded your client, it has no idea that the full message has been received and waits for more. How you deal with the problem depends very much on the protocol used by the server. Consider a web server. It sends a line-delimited header including a  parameter telling the client exactly how many bytes it should read. The client scans for newlines until the header is complete and then uses that value to do  (if large, it can read chunks instead) so that the recv won't block when the last byte comes in.Even then, there a decisions to make. The client knows how large the web page is but may want to send a partial data to the caller so it can start painting the page before all the data is received. Of course, the caller needs to know that is what happens - there is a protocol or set of rules for the API itself.You need to define how the client knows a message is complete and what exactly it passes back to its caller. A great way to deal with the problem is to let some other protocol such as [zeromq](http://zeromq.org/ do the work for you. A simple python client / server can be implemented with xmlrpc. And there are many other ways.You said you are implementing a client/server program then you mentioned "connected to google" and telnet... These are all very different things and a single client strategy won't work with all of them.


Answer URL
https://docs.python.org/3/library/xmlrpc.client.html
