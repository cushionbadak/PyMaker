Natural Text
Here is the scenario:Storage system  (Java) is the default and has a Python API . Storage system  (Java/C++) was recently introduced, but did not have a Python API. People "somehow" made  work with , but it is extremely slow, especially as the scale increases. Since, this was the only choice for a Python API, a lot of code now depends on  to interact with .The team from Storage system  now has a Python API, .  is clearly more efficient. However, there are a lot of variations between  and . For example, the list directory methods return objects with completely different fields.  does not allow recursive deletes for directories, but  does. And so on...The Question:What is the best way to merge the two APIs without breaking compatibility? In particular, since  has been in the use, what is the best way to integrate  into it transparently?I don't think creating decorators will work as method signatures vary between the APIs. There are some methods in  not present in . (Raising  is the only option here).The only solution I can think of is the naive one, where I have to do this checking in every function in :I am looking for a better and more maintainable way to do this. Any help is greatly appreciated!
Write a wrapper library for API B that "looks like" API AIn particular, it must provide exactly the same methods with exactly the same signatures.  If API B does not implement some functionality (like recursive enumeration), the wrapper must re-implement this functionality in terms of API B.  For example, you might write a function that enumerates the current directory, then every subdirectory, and so on recursively, to replace the native functionality of API A.  If it is not possible to do this (that is, if there is some functionality which API A provides and which cannot be done with API B at all), then API B is not a suitable replacement for API A and you should not go forward with your plan.You should also write a series of unit tests for your wrapper which ensure that it behaves the same as API A does in a variety of conditions specifically including edge cases.  If A already has unit tests, then just use those.Finally, once you're certain the wrapper is indistinguishable from A, you can replace A with the wrapper.  It's simple enough to just replace the modules and packages, but if this does not work for you for whatever reason, you can replace A in  to ensure imports of A get the wrapper instead.


Answer URL
https://docs.python.org/3/library/sys.html#sys.modules
