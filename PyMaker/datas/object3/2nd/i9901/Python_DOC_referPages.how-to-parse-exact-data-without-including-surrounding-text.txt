Natural Text
My code is very close to succeeding but I just need a little help. I have 100's of pages of data but I am working on parsing only 1 page perfectly before I apply it to the others. In this one page, which is an email, I need to extract several things: a Date, Sector, Fish Species, Pounds, and Money. So far I have been successful in using RegularExpressions to recognize certain words and extract the data from that line: such as looking for "Sent" because I know the Date information will always follow that, and looking for either "Pounds" or "lbs" because the Pounds information will always precede that.The problem I am having is that my code is grabbing the entire line that the data is on, not just the numeric data. I want to grab just the number value for Pounds, for example, but I realize this will be extremely difficult because every one of the 100's of emails is worded differently. I'm not sure if it is even possible to make this code foolproof because I need RegEx to recognize the text that surrounds the data, but not include it in my export command. So will I simply be blindly grabbing at characters following certain recognized words?Here is a piece of my code used for extracting the Pounds data:And here is what it prints out:Ideally I would just like the 5,000 lb numeric value to be exported but I am not sure how I would go about grabbing just that number. Here is the original email text I need to parse:Here is another separate email though that will need to be parsed; this is why writing this code is difficult because it'll have to tackle a variety of differently worded emails, since all are written by different people: Any and all help is appreciated, as well as question asking criticism. Thanks. 
Here's a regex flexible enough:You could be more thorough with the regex if needed.Hope this helps!UPDATEThe main part here is the regular expression . This is a basic one, explained as follows:The parenthesis define the capturing group, so  is the stuff being captured, so basically the numeric part. The parenthesis with a  define a non-capturing group.  This regex will match:2,890 lbs (capturing '2,890')3.6 pounds (capturing '3.6')5678829 Pounds23       lbs9,894PoundsetcAs well as unwanted stuff like:2..... lbs3,4,6,7,8 poundsIt will not match:7,42323m lbs45 ppounds2.8 PoundYou could make a much more complicated regex depending on the complexity of the contents you have. I would think this regex is good enough for your purposes.Hope this helps clarify
Regex can recognize and not export text around a value, this is called a non-capturing group. For example:To recognize, , the value you want, and  you could write a regex like this:Essentially  is a matching group that isn't captured, so the regex only captures the middle bracketed group.If you provide the exact surrounding text you want I can be more specific. Edit:Going off your new examples I can see that the only similarity between all examples is that you have a number (in the thousands so it has a ), followed by some amount of whitespace, followed by . So your regex would look like:This will return the matches of the numbers themselves. You can see an example it working here. This regex will exclude the smaller values, by virtue of ignoring values that are not in the thousands (i.e. that do not contain a ).Edit 2: Also I'd figure I'd point out that this can be done entirely without regex using str.split(). Instead of trying to find a particular word pattern, you can just use the fact that the number you want will be the word before , i.e. if  is at position , then your number is at position . The only other consideration you have to face is how to deal with multiple values, the two obvious ones are:Biggest value.First value.Here's how both cases would work with your original code:The one caveat is that the code doesn't handle the edge case where  is the first word, but this is easily handled with a .Neither regex or split will work if the value before  is something other than the number. If you run into that problem I would suggest searching your data for offending emails - and if the number is small enough editing them by hand. 


Answer URL
https://docs.python.org/3/library/string.html
