Natural Text
I am building a python script to basically edit lots of files by means of searching and replacing words in the file.There is an original file named: There is a file containing the words I want to replace (search words) in the original document and a text file that has the list of the new words that I would like to be placed into the final document.The script then runs and works perfect. The final document is then created and named based on a line in the final text file (code begins on line 72). A way so I can tell what the final product is by looking at it. This file is originally named  and later in the script it is renamed based on line 37 in the script.  All that works fine. So the seemingly simple part left that I can't seem to figure out is how to take this one file and move it to a directory where it belongs. That directory is created based on the same line in that the file gets its name from (code starts on line 82). How do I simply move my file into a directory that has been created by the script, i.e. based on a variable (code starts on line 84 for this) so the name of the file is based on a variable. Why does it format it with extra  in the code?Why does it seem to not give me a error if I use a  vs. a  slash? Here is the entire code, like I said only the last part of moving the file does not work: 
backslashes do not have a mind of their own.When you paste windows paths as-is and they contain , , , , ,  (python 3), (refer to table here for all of them), you're just using escape sequences without noticing it.When the escape sequence doesn't exist (ex ) it works. But when it's known the filenames are often invalid. Which explains the apparent randomness of the issue.To be able to safely paste windows paths without changing/escaping them, just use the raw prefix:so the backslashes won't be interpreted. One exception though: if string ends with backslash you still have to double it.


Answer URL
https://docs.python.org/3/library/os.path.html?highlight=os.path.join#os.path.join
