Natural Text
I have two strings: one a word and one a scramble of letters. I want to see if this scramble of letters holds enough letters to spell the word. I have come up with an algorithm to do this but it isn't efficient enough and I was hoping I could get some help making it faster. Here's what I have so far:I have an issue where once X matches I need to increment X but I didn't know how so I just take it out of the equation by making it the at symbol.  I tried using break but it doesn't reach far enough to break the to the s2 loop. Either way, I'm pretty sure this double for loop idea is super slow compared to what someone with some experience would use. Any ideas?
Your code is not efficient, no, because you iterate in a double loop. For each letter in , in the worst-case scenario (no matches) you loop over all of .Use a  object instead; these act as multi-sets, where you can both test if a character is present in O(1) time and manage remaining counts:You can also turn  into a multi-set, and check if the multi-set for  contains enough letters for each entry:The latter can be reduced further with the  function, which returns  early if any of the results it is passed is ,  otherwise:In all these you only have to iterate over both  and  once (either directly or to produce the multi-set).Demo of the latter:
Extending @Martijn_Pieters solution you can use  in this way:You can rely on the fact  will default to returning 0 if  doesn't exist.
Do it the other way round. Remove the characters from :
Here's a vectorized approach using  -Sample run -Here's another NumPy based one using  -Here's another one that processes a list of words in one go against one scramble at a time -Sample run -One more to process a list of words in a different way -


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/functions.html#all
