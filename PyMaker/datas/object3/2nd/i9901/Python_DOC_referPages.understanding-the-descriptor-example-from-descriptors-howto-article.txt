Natural Text
I am trying to wrap my head around the concept of descriptors and I have had no success lately. This article of descriptor How to has really helped and at the same time it has also confused me. I am struggling with this example hereon why  calls I believe the reason i am struggling with this is because I am confused by the following statement in the articleThe details of invocation depend on whether obj is an object or a  class. For objects, the machinery is in   which transforms  into .  The implementation works through a precedence chain that gives data  descriptors priority over instance variables, instance variables  priority over non-data descriptors, and assigns lowest priority to   if providedI am not sure what the author means here by object or class. Does object mean an instance of a class ? I understand that when we do  python internally does a  if that is not found then it does . I kind of lost it after that concept. Could anyone explain a little on how this example is working. How is the definition  being called with . I would be very grateful if anyone could clear this up.
Yes, by object the author means an instance, not a class. The distinction comes from where the descriptor lives; the descriptor is defined on the class, so when accessing that descriptor directly on the class a different path is followed from when you access that descriptor on an instance of the class.In your example,  is an instance. That instance itself has no attribute  ( is ). Python also looks at  to resolve that attribute, and  here is .  is , and  exists, so Python now knows that that object is a descriptor.So, because there is no , but there is a , that method is called with  and  as arguments, leading to . If  is true but  did not exist (so that object is not a descriptor object), then  would have been returned directly.The situation gets more interesting if you tried to add the  attribute to the instance too. In that case it matters if  or  exist, making the descriptor a data descriptor. Data descriptors always win in the case of a tie. So if  and at least one of  or  exist, it doesn't matter anymore if  also exists. Python won't even look for it.However, if there are no  or  methods on the descriptor object on the class, then  wins and is returned. In that case the descriptor is a regular, non-data descriptor and it loses out to the instance attribute.Last but not least, if  is false (there is no object on the class), then  is returned. The descriptor protocol is only applied to objects found on the class, never to attributes on the instance.
Does object mean an instance of a class ?Yes.How is the definition  being called with .Because of just what the documentation you quoted says:For objects, the machinery is in  which transforms  into .  is mechanism that implements what happens when you do something like .  So, explicitly:so the last line calls the  method of the  class.


Answer URL
https://docs.python.org/3/howto/descriptor.html
