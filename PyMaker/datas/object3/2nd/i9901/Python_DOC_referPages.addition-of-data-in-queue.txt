Natural Text
I think of queue as a line where a person who came at first is served first. Then other people join him at the back. I wrote the following implementation in Python to achieve that:But when I checked online tutorials, I found the following implementation for queue:According to this online implementation, item is added to the first. But my intuition says that item should be added to the back of the list (appended) and removed from the front (remove first item). I want to know which form is correct, and if I am incorrect then what is the thing that I am not understanding properly ?
Either way works.  I agree with your intuition of adding on the right and popping on the left so the the underlying list is always in the order of oldest-to-newest.For what it is worth, both implementations are inefficient -- either inserting or popping at position zero is an O(n) operation.See collections.deque() for an O(1) implementation.
There is no difference in behaviour or performance.The second example considers the head of the queue to be the last element whereas your code considers the first element as the head.I would advise that you go with the implementation that is intuitive to most people, and I would suggest that that is to append to the list and pop from the front, as you have done.One thing to note is that, in both implementations, calling  on an empty list will raise an  exception which leaks details of the implementation, i.e. that it is implemented as a list. If that bothers you, you could dress it up with your own exception.


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
