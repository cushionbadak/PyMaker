Natural Text
I'm a new programmer learning python and am having trouble with how to approach this task:So essentially I have a string of numbers to read imported from a file, and need to add the sum of the first number to the second and convert it to the correct ascii character.  So, for example if I am reading the string:I would want to add 36 to 30, then 25 to 40, then 80 to 4 and so on, before converting them to the corresponding ASCII character and printing (so in this case 'CAT').So far i recognize that i need to use a split command to split the string, and then a for loop to take the data for consecutive numbers. I can get the correct value for the first letter, but am having trouble 'telling' the program to atuomatically move on to add [2] to [3] after adding [1] to [0]. I also need to do this for multiple lines.  Again, I'm a new coder so any help is greatly appreciated. Thanks!
Another method that is less opaque (though more verbose) than Patrick's proposal would be:
You can use a special usage of  to pair up elements: Edit: technically the  is unnecessary here, but I write it because I sometimes forget when I do need it.Edit 2: addressing jsbuenos points below: takes a function and an iterable (like a list) and applies the function to every element of that iterable. So  is the same as .  The  is there because  actually returns an iterator that produces the values one at a time instead of all at once.The usage of  here looks complex, but that's mostly all the punctuation.  Let's try and break it down.  As I mentioned, we don't need the  here because  is a  object, and thus already an iterator, so we don't have to make an iterator for it.  So now it looks likeAll the  is doing is adding up the pairs after we pair them up, so let's discard that too.The trick to understanding this is understanding that list multiplication happens firstThe  in front of an iterable is the unpacking operator.  Think of it as the list dumping its arguments into the functionSo what is  actually doing?  The normal usage of  is to take two iterables and pair the elements up, like so.It works with more than two lists too, but that's not what we're here for.It's important to note that in  the two  arguments are the same object.  This means that when zip makes the first pair, it first gets the next element from its first argument, .  That's .  Then it gets the next element from its second argument which is the same .  So the next element is .  It then yields those two elements in a tuple, and goes on to repeat the process for the rest of the iterator.If you're asking yourself "Why write  when  means the same thing?" it's because you have to make sure that the arguments are the same object, or it doesn't work.  Doing  wouldn't work because each  returns a different, though identical, iterator. I have trouble remembering when I have to use , so to play it safe I just use it all the time.
If this is ascii encoding, I think you actually have 'BAT' instead of 'CAT'.  
You can do it with a no brainer like this:Possibly you want to check, that the len(nums) is even. If not an IndexError will be thrown.
You can use for loop with range with step 2This way you can tell program to go to wanted index. Here i in loop will get values: [0, 2, 4]
Another solution:Output: BAT
You may do it using list comprehesnion as:
A slight alteration from Patricks answer. 
you can use extended list slicing to get pairs of adjacent numbers:Then you can use  to pair the halves to be summed:then you can map  on each part of paris:to finally convert to a string, call:
Many way to do this but without creating a number of intermediate lists you can simply create an iterator and use a generator to construct the string:
You can convert the string to the iterator returning ints, and use  function inside a list comprehension:IMO this is a bit cleaner because there is no explicit indexing.


Answer URL
https://docs.python.org/3/library/functions.html#zip
