Natural Text
Suppose I have a function taking one parameter, an iterable, as input, and I want to iterate more than once on the iterable.If I write it like this:the second loop may be executed or not.it is executed if the iterable is a , , , which are not iterator/generator functions, or  which rearms itselfnot for a custom generator function or a file object (obtained with ). (the reuse of a file iterator is the subject of many questions here at SO)Of course, I could do this to avoid creating an unnecessary  if not needed:that would work for a lot of common cases, but not the general case.Is there a clean way to detect if I can iterate many times on my iterable object?
You can use the  class to see if the iterable is actually a sequence:This wont work for sets:If you want to include sets and mappings use the  and :You may want to create an helper function that converts an iterable to a sequence if needed:And now you can just do:A simpler alternative is to check that  argument does not have a  method:This works because well-implemented containers are only iterables and not iterator themselves, so they only have an  method that returns an iterator which has the  method that advances the iteration.This would lead to:The final alternative is the simplest: document the argument as a sequence and not an iterable and let the user be responsible for providing the correct type.
You could check whether the object has a  method (Python 3), or a  method (Python 2). If it does then you might assume that it implements the iterator protocol and its values will therefore not be reusable.If there is a  attribute you should then check that it is callable:


Answer URL
https://docs.python.org/3/library/stdtypes.html#iterator.__next__
