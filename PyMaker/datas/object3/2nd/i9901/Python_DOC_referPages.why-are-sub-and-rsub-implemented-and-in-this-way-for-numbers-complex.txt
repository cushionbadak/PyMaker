Natural Text
I was looking at the implementation of  in the  module and noticed  and s implementation that looked like this:This confused me. Firstly, I'm not really sure why these were implemented (guessing all subclasses of  can fall-back to it?) and, secondly, I can't understand why they chose to use the unary  like this for its implementation. Any ideas?
This is a generic implementation that subclasses can use, yes, if they so desire. This is an additional goal; the primary goal of these ABC types is to be able to duck-type numeric types (see PEP 3141 – A Type Hierarchy for Numbers.The implementation uses unary minus to avoid recursion; if you used  then Python uses  or  again.Because subtraction can be cast as addition with a unary minus operation, the authors of the ABC were able to provide you these methods as a bonus; the alternative would be to provide  methods instead, forcing subclasses to provide a concrete implementation. Your subclass can now, optionally, implement those methods in a different way if that is more efficient, but they don't have to.This is a pattern used in all ABCs the standard library provides. If you take a look at the documentation for the  module you'll notice a Mixin Methods column; these are all methods the respective ABC has provided as concrete implementations that may or may not rely on the abstract methods defined by that ABC or its base classes.Also see the general PEP 3119 – Introducing Abstract Base Classes upon which PEP 3141 is built:Some ABCs also provide concrete (i.e. non-abstract) methods; for example, the  class has an  method returning itself, fulfilling an important invariant of iterators (which in Python 2 has to be implemented anew by each iterator class). These ABCs can be considered "mix-in" classes.


Answer URL
https://docs.python.org/3/library/collections.abc.html#module-collections.abc
