Natural Text
I wrote this function:I also wrote a function that counts the frequency of occurrences of each letter:
Counting letter frequency would be much more efficient with a dictionary, yes. Note that you are manually lining up each letter with a number ("A" with 0, et cetera). Wouldn't it be easier if we could have a data type that directly associated a letter with the number of times it occurs, without adding an extra set of numbers in between?Consider the code:This dictionary is used to count frequencies much more efficiently than your current code does. You just add one to an entry for a given letter each time you see it.I will also mention that you can count frequencies effectively with certain libraries. If you are interested in analyzing frequencies, look into collections.Counter() and possibly the collections.Counter.most_common() method.Whether or not you decide to just use collections.Counter(), I would attempt to learn why dictionaries are useful in this context.One final note: I personally found typing out the values for the "freq" dictionary to be tedious. If you want you could construct an empty dictionary of alphabet letters on-the-fly with this code:
If you want to convert strings in the list to upper case using , you may use it with  as:As per the  document:map(function, iterable, ...)Apply function to every item of iterable and return a list of the results.For finding the frequency of each character in word, you may use  (sub class  type) as:As per  Document:A Counter is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values.
for the letter counting, don't reinvent the wheel collections.CounterA Counter is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts. The Counter class is similar to bags or multisets in other languages.
def punc_remove(words):def letter_cnt_dic(word,freq_d):    for let in word:        freq_d[let] += 1import stringdef letter_freq(fname):    fhand = open(fname)    freqs = dict()    alpha = list(string.uppercase[:26])    for let in alpha: freqs[let] = freqs.get(let,0) 
You can read the docs about the Counter and the List Comprehensions or run this as a small demo:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html
