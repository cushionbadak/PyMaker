Natural Text
I have a JSON file and would like to write a function to return a list of the next 10 objects in the file.  I've started with a class, , and the method  which returns a generator that yields a single JSON object from the file.  Another method, , should return the next 10 objects. Here is what I have so far: I've tried like this, but it only returns the first 10 rows every time.So what is the correct way to write ?
Here's a simple generator that gets values from another generator and puts them into a list. It should work with your  method.outputNote that this only yields complete chunks. If that's a problem, you can do this:which will printafter the previous output.A better way to do this is to use , which will handle a partial final chunk:Thanks to Antti Haapala for reminding me about . :)
(note: PM 2Ring beat me to it!)Your  method doesn't return a row - it returns a generator that will produce rows as you iterate through it. You can see that in the  method that does . The annoying thing is that every time you call  it will open the file again and return the first object. The problem with  is that you don't pass in the number of rows you want and you don't limit the  loop to that number.  gets all of the rows in the file.How about a rethink? All you really need is a generator that reads lines and deserializes the json. The  function is already built to do that. You can get a single row with python's  function and multiple rows with . Your class is just a thin wrapper around stuff that's already implemented so just use the native tools and skip writing your own class completely.Fist I generate a test file... Now I can create an iterator that can be used to get a row or list of rows. In cpython, you can open the file in the  function safely, but you can also do your work in a  clause.I can get all of the objects in a loopOr put some of them in a listor combine operationsThe point is, the simple  based iterator can do what you want, without having to update a wrapper class every time you think of a new use case.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.islice
