Natural Text
What is the point of python's  module? There are many obviously redundant functions there and I don't understand why should one prefer to use these functions rather than other ways to do the same thing.For example:seem to do exactly the same thing.
Its sometimes useful to be able to access the functionality of an operator but as a function. For example to add two numbers together you could do.You could also doA use case for the function approach could be you need to write a calculator function which returns an answer given a simple formula.
For completeness and consistency. Because having all operators in one place lets you do dynamic lookups later on:Omitting some operations because they are redundant would defeat that purpose. And because Python names are just references, it is cheap and easy to add a name to the  module that is simply another reference.
Given the existence of , it's hard to think of any use-case for  these days.  Note that  was new in 2.2.1, and operator predates that, so it may only exist now for historical reasons.  There are also other useless functions in the operator module, such as  - which simply calls the built-in .  The operator module is sometimes useful for functional programming.  For example, Python has a built-in  function, but neglected to include an analogous  function.  This could be succintly implemented using operator's functional interface to multiplication:It's true that there are other ways to implement this.  Arguably the procedural method, i.e. using a plain old for loop and accumulating with the  operator, is more pythonic.  For users who, for whatever reason, choose not to use an imperative style, the operator module offers a more palatable implementation than using anonymous functions  Operator's C implementation (if available) offers performance gains over the inferior  version.  The ,  and  functions provided in operator module also offer more readable and better performing options for the kind of simple tasks which are often handled by anonymous functions.


Answer URL
https://docs.python.org/3/library/functions.html#sum
