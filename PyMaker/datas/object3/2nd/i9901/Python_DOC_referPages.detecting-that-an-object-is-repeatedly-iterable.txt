Natural Text
Does  imply that  isn't repeatedly iterable and vice versa? I didn't see any such wording in the docs, but according to this comment, the standard library checks if an object is repeatedly iterable by testing :@agf: There are parts of the Python standard library that rely on this part of the spec; they detect whether something is an iterator/generator by testing , because a true iterator/generator object will have  defined as the identity function. If the test is true, they convert to  to allow repeated iteration, otherwise, it's assumed that the object is repeatably iterable, and they can use it as is.  – ShadowRanger Jun 3 at 17:23 The docs do state that if  is an iterator, it's required that  returns . But I don't think that's enough to conclude that non-repeatedly iterable objects can be identified using .
All iterators are iterables, but not all iterables are iterators.The only requirement of an iterable is that it defines an  method which returns an iterator:One method needs to be defined for container objects to provide iteration support:  Return an iterator object.An iterator must follow the iterator protocol, which has two requirements:It has an  method that returns the object itself:  Return the iterator object itself.It has a  method which returns the next item on each call, and, once exhausted, raises  on every subsequent call:Once an iterator’s  method raises , it must continue to do so on subsequent calls. Implementations that do not obey this property are deemed broken.These requirements mean that iterators are never repeatable, and that you can always confirm that an iterable is an iterator (and therefore unrepeatable by definition) by confirming that  is :However: since the only requirement of an iterable is that  returns some iterator, you can't prove that it is repeatable. An iterable could define an  method which returns an iterator with different behaviour each time it's called: for instance, it could return an iterator which iterates over its elements the first time it's called, but on subsequent calls, return an iterator which immediately raises .This behaviour would be strange (and annoying), but is not prohibited. Here's an example of a non-repeatable iterable class which is not an iterator:I wouldn't hesitate to call such a "fake iterator" badly-behaved, and I can't think of a situation where you'd find one in the wild, but as demonstrated above, it is possible.


Answer URL
https://docs.python.org/3/library/stdtypes.html#container.__iter__
https://docs.python.org/3/library/stdtypes.html#iterator-types
https://docs.python.org/3/library/stdtypes.html#iterator.__iter__
https://docs.python.org/3/library/stdtypes.html#iterator.__next__
