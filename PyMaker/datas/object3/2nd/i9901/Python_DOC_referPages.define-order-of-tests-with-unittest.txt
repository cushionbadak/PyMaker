Natural Text
Is there a way in Python  to set the order in which test cases are run? In my current  class, some testcases have side-effects that set conditions for the others to run properly. Now I realize the proper way to do this is to use  to do all setup realted things, but I would like to implement a design where each successive test builds slightly more state that the next can use. I find this much more elegant.Ideally, I would like the tests to be run in the order they appear in the class. It appears that they run in alphabetical order.
Don't make them independent tests - if you want a monolithic test, write a monolithic test.If the test later starts failing and you want information on all failing steps instead of halting the test case at the first failed step, you can use the  feature: https://docs.python.org/3/library/unittest.html#distinguishing-test-iterations-using-subtests(The subtest feature is available via  for versions prior to Python 3.4: https://pypi.python.org/pypi/unittest2 )
Its a good practice to always write a monolithic test for such expectations, however if yer a goofy dude like me, then you could simply write ugly looking methods in alphabetical order so that they are sorted from a to b as mentioned in the python docs http://docs.python.org/library/unittest.htmlNote that the order in which the various test cases will be run is  determined by sorting the test function names with respect to the  built-in ordering for stringsEXAMPLE:
http://docs.python.org/library/unittest.htmlNote that the order in which the various test cases will be run is determined by sorting the test function names with respect to the built-in ordering for strings.So just make sure 's name has the smallest string value.Note that you should not rely on this behavior â€” different test functions are supposed to be independent of the order of execution. See ngcohlan's answer above for a solution if you explicitly need an order.
Old question, but another way that I didn't see listed in any related questions: Use a .Another way to accomplish ordering is to add the tests to a . This seems to respect the order in which the tests are added to the suite using . To do this:Create one or more TestCase subclasses, Create a callable test-suite generation added in your desired order, adapted from the docs and this question:Execute the test-suite, e.g.,For context, I had need for this and wasn't satisfied with the other options. I settled on the above way of doing test ordering. I didn't see this TestSuite method listed any of the several "unit-test ordering questions" (e.g., this question and others including execution order, or changing order, or tests order).
I ended up with a simple solution that worked for me:And then
Tests which really depend on each other should be explicitly chained into one test.Tests which require different levels of setup, could also have their corresponding  running enough setup - various ways thinkable.Otherwise  handles the test classes and test methods inside the test classes in alphabetical order by default (even when  is None).  is used internally which sorts by guarantee.The latter behavior can be exploited for practicability - e.g. for having the latest-work-tests run first to speed up the edit-testrun-cycle.But that behavior should not be used to establish real dependencies. Consider that tests can be run individually via command-line options etc.
@ncoghlan's answer was exactly what I was looking for when I came to this thread. I ended up modifying it to allow each step-test to run, even if a previous step had already thrown an error; this helps me (and maybe you!) to discover and plan for the propagation of error in multi-threaded database-centric software.


Answer URL
https://docs.python.org/3/library/unittest.html#distinguishing-test-iterations-using-subtests
