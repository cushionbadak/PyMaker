Natural Text
Suppose I have a class which extends , named foo; However, instead of using integers for each item, I use stringsWhen compiling, the system will throw no errors, and happily treat this class as a normal enum. As per why anyone would want to do this, it's very useful if you want to link each name to a data structure, like a dict. Take this as an example:Well, maze, why not just use a normal class then?Well, its very useful to be able to store this information as an enum, for quick comparison of type. For example,  can be easily checked for type with .Is this a "bad practice"? By that, I mean:Is this an intended use of ?If I took out the  from , would there be any efficiency difference when comparing?Is there a better way to do what I am wanting to do?
Is it a bad practice to use enums with non-integer types in python?No, it is not bad practice.Is this an intended use of EnumYes,  was designed to work with non-integer types.If I took out the (Enum) from class foo (Enum):, would there be any efficiency difference when comparing?The non- version would probably be faster, but that likely doesn't matter.  (Test for bottle-necks before guessing what needs to be optimized.)Is there a better way to do what I am wanting to do?Using mutable types is allowed -- meaning I have taken no steps to prohibit it1 -- but it's generally not a good idea.   members should be constant.  Your example looks like you want to have two extra attributes on each member:  and  -- this is possible on both the stdlib version of , and the  version of :and in use:See this answer for the stdlib way to accomplish this.1 Disclosure:  I am the author of the Python stdlib , the  backport, and the Advanced Enumeration ()  library.


Answer URL
https://docs.python.org/3/library/enum.html
