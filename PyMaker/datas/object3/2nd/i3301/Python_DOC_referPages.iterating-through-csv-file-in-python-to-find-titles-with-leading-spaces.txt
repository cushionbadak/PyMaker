Natural Text
I'm working with a large csv file that contains songs and their ownershp properties. Each song record is written top-down, with associated writer and publisher names below each title. So a given song may comprise of say, 4-6 rows, depending on how many writers/publishers control it (example with header row below):I'm currently trying to loop through the entire file to extract all of the song titles that contain leading spaces (e.g.,'   song title'). Here's the code that I'm currently using:Due to the size of this file csv file that I'm working with (~2GB), it takes quite a bit of time to iterate through and produce a result file. However, based on the results that I've gotten, it appears the song titles with leading spaces are all clustered at the beginning of the file. Once those songs have all been listed, then normal songs w/o leading spaces appear.Is there a way to make this code a bit more efficient, time-wise? I tried using a few s after every for and if statement, but depending on the amount that I used, it either didn't effect the statement at all, or broke too quickly, not capturing any rows.I also tried wrapping it in a function and implementing , however, for some reason the code only seemed to iterate through the first row (not counting the header row, which I would skip).Thanks so much for your time,
 isn't doing you nay favors.   objects are iterators over their contents, but they don't load it all into memory until ti's needed. Just iterate over the  object directly.  For each row, just check .  That checks the first character of the first entry, which is all you need to determine whether something begins with whitespace.You could also play with your output, like saving all the rows you want to keep in a list before writing them at the end.  It sounds like your input might be sorted, if all the leading whitespace names come first.  If that's the case, you can just add  to skip the rest of the file.
You can use a dictionary to find each song and group all of its associated values:
this one worked well for me and seems to be simple enough.
Here are some things you can improve:Use the  object as an iterator directly without creating an intermediate list. This will save you both computation time and memory.Check only the first value in a row (which is a title), not all.Remove an unnecessary  clause.Combining all of this and applying some best practices you can do: It appears the song titles with leading spaces are all clustered at  the beginning of the file.In this case you can use  to only iterate the file as long the titles have leading spaces:


Answer URL
https://docs.python.org/3/library/csv.html#csv.reader
https://docs.python.org/3/library/itertools.html#itertools.takewhile
