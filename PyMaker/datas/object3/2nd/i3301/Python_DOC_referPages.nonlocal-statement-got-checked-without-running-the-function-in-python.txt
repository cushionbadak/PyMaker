Natural Text
This question already has an answer here:When is the existence of nonlocal variables checked?                    2 answers                previously I thought that when we define a function, the function can be wrong, but python will not check it until it got executed:however, when I was learning the  statementIt got checked out even if the function is not executed.Is there anywhere I can find the official explanation for this?Additional for variable bounding situation:it seemed totally fine, if I  some variable that does not exist at all?And it doesn't even bring any error even if I execute this function?this part is moved to a new individual question:Why am I able to global a non-existing varlable in python
The  checks the nearest enclosing scope, excluding globals (that is, module level variables). That is, your  function should declare a  for it to work, as  can't see the global  variable.See https://docs.python.org/3/reference/simple_stmts.html#the-global-statement.As to why the error is raised without running the function, it is because the variable names are bound at compile-time, so it doesn't matter that you don't use this function at all. See https://docs.python.org/3/reference/executionmodel.html#resolution-of-namesHowever,  has different behaviour. Just like  if the  already exists, it is used instead of the local one. However, if it doesn't, it means "if I create a variable named , create it on the global scope, instead of the function scope". So, in your examplea  variable has appeared in the global namespace. It is only a hint to the compiler though, so if you declared  without assigning it, and try to  later, you still get a  for using an undefined variable


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#the-global-statement
https://docs.python.org/3/reference/executionmodel.html#resolution-of-names
