Natural Text
In the question How can I find the number of arguments of a Python function? code is given showing how to using  to get information of a function. However, is there any way to verify whether one of the arguments for the function is ? In Python 3,  automatically removes the  argument for you. Is it possible to accomplish the same thing Python 2, by somehow check if the first argument of a given function is a reference to the method's object?For example, the first argument in the function  is technically  even though someone has decided to be evil and rename  to .However, the first argument in the function  despite someone being evil and naming an argument  is not actually the  using in Python objects. 
If we take a step back from argument inspection and think of this question as a question of determining if a function is a method or not. We can do this with the  function:If the function is a bound method we can safely assume that the first passed argument to this method will be .Note that in Python 2.X, this will return True for unbound methods (e.g. ) whereas in 3.X it will return True only if the method is bound.We can take this one step further by using getmembers and actually determine what the value of  is for this bound method:Which returns the  instance that this  method is bound to. In Python 2.X,  will be  if the instance is unbound, which is how you differentiate between bound and unbound methods.
 is not a special argument. The name  has nothing special at all - It is a normal argument just like the others, the only reason it is named  is convention between the programmers.There is no way you can differentiate a  argument from other arguments, because it is not different at all!What you can do is check if the function is member of a class - then it becomes a method and will get the instance as first parameter automatically - this is done by the metaclass descriptors as you can see here in the documentation.if  returns  then the first parameter passed to the function will be the instance, regardless of the name.


Answer URL
https://docs.python.org/3/howto/descriptor.html
