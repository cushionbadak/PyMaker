Natural Text
Consider the following:NumPy's  and  types are both in Python's numeric abstract base class hierarchy, but it is strange to me that a  object is not an instance of the built-in  class, while a  object is an instance of the built-in  type.Why is this the case?
Python integers can be arbitrary length:  is still , and will print out a one and then a thousand zeros on your screen if you output it.Numpy  (which is what  is on my machine) are integers represented by 8 bytes (64 bits), and anything over that cannot be represented. For example,  will give you a wrong answer - but quickly ;).Thus, they are different kinds of numbers; subclassing one under the other makes as much sense as subclassing  under  would, is what I assume  people thought. It is best to keep them separate, so that no-one is confused about the fact that it would be unwise to confuse them.The split is done because arbitrary-size integers are slow, while  tries to speed up computation by sticking to machine-friendly types.On the other hand, floating point is the standard IEEE floating point, both in Python and in , supported out-of-the-box by our processors.
Because  is actually 64-bit, and  can have an arbitrary size, it uses about 4 extra bytes for every 2^30 worth of bits you put in.  has constant size:


Answer URL
https://docs.python.org/3/library/numbers.html
