Natural Text
I have an old script doing its duty for years now, which suddenly failed, and I don't see how it can even get to the point where it fails, since I thought to have that case eliminated:It should go through a list of files (content of a directory), and if the current file ends with , it should check if there is a file with the same name minus the  ending (like  and ).If both files exist, it should make a checksum of file.txt` and compare it to the content of the checksum file. Only if this check is successful, there will be further operations ending with both files getting deleted from the directory.I thought the check if a file exitsts with the same name as the checksum file except the  ending would be done in a reliable way by the block. But today the script failed while trying to delete both files at the end of the script, because the file without  ending didn't exist. How can this happen? Doesn't  do its job in that context?EDIT:Since it seems there is nothing logically wrong with the code, the error might lay outside (although I don't know how it could). Therefore further informations: The actual source of the files is a directory reached via SFTP (pysftp used). The  is filled by , and all files are downloaded (to ) before the problematic block starts. They should get removed on the SFTP server with  afterwards and this is where the script fails throwing EDIT2: Still can't let this go. I guess if the file got deleted on the server after the script downloaded it, the script would fail like this because of course the file wouldn't be there then anymore. But the script failed every time from then on. Doesn't make sense..EDIT3: Solved in answer. Thank you for your time and patience.
My first approach to search for the bug in the code gave the title to this thread, and it turned out to be wrong. The bug happens when the input directory gets fed with a checksum file, which already has been fed in the past, and back then correctly, ergo with a correspondent data file, but now without that correspondent data file:The (again) downloaded checksum file gets evaluated and the script looks for a correspondent data file, which is still present in the working directory from the past. It runs its operations and finally tries to remove the checksum and the data file from the input directory, which fails for the data file. An unforeseen, unhandled case; out of the initial specifications, but still embarrassing. I learned from this to sort the list of debugging approaches more realistically. 


Answer URL
https://docs.python.org/3/library/os.path.html#os.path.join
