Natural Text
I have a Python program using a RotatingFileHandler for logging.  The logging file handler opens the logfile in exclusive mode (once) and keeps it open until the app closes.  The problem is that I need to allow other processes to read the logfile while the Python program is still running.In past projects using C++, I created a queued logger.  It maintained a queue of log entries.  A secondary worker thread would regularly check the queue and if there were any entries, open the logfile, dump the entries to the file, and immediately close the file until more log entries are queued.  This meant that (in processor time) >99% of the time, the file would be closed and available for other processes to peek into the logfile.(From a bit of digging, I'm under the impression that the Python logging class already handles the queuing of log entries...  That's not the part I'm asking about.)Is there a simple way to accomplish a normally-closed logfilehandler in Python?  (Preferably without having to add a 3rd party library or subsystem.)
As suggested in the comments, I'd go with using  as the single root handler, combined with the  that acts on new records arriving. Other than that, a custom  is necessary that will close the file after the record is persisted and if no records are left in queue.Disclaimer: the code below is untested.I used  so the handler won't immediately open and lock the file on init as opposed to the default behaviour. Also, since the file is closed between records persisting, think about proper error handling in  (file removed / locked by another process / etc).
To me it seems that creating a separate thread managing this specific topic. As you pointed would be the best strategy.The thread could perform read/write for every other programs.You can perfectly design this thread in python using the logging library.Another strategy would be to use a system such as Sentry or Kibana


Answer URL
https://docs.python.org/3/library/logging.handlers.html#logging.handlers.QueueHandler
https://docs.python.org/3/library/logging.handlers.html#logging.handlers.QueueListener
https://docs.python.org/3/library/logging.handlers.html#logging.handlers.QueueListener.dequeue
