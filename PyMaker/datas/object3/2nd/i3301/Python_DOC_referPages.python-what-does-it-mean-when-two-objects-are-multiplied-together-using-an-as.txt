Natural Text
I am a bit of a Python newbie regarding classes. I have seen that some scripts include lines which appear to "multiply" instances of classes together. For example:where X and Y are instances of two different classes. What does the * symbol mean and how is it applied to classes (or instances of classes) in Python?In most cases * pertains to multiplication, but I don't understand what it means to "multiply" classes.Any info is appreciated.
The  operator just means "multiply".But what it means for two objects to be multiplied is up to those objects' types to decide.For all of the builtin and stdlib types, it means multiplication if that makes sense, or it's a  if that doesn't make sense. For example:Since multiplication doesn't make sense for class objects, they're one of the kinds of things where it's a :If you (or a third-party library author) create a new type, you can decide what multiplication means. The way you do this is covered under Emulating numeric types in the documentation, but the short version is that you define a  method:Notice that this makes instances of  multiplicable. It doesn't make  itself multiplicable ( isn't a , it's a ):Of course nothing's stopping you from defining something ridiculous:… except, of course, for the fact that nobody would understand your code. (And that "nobody" includes you, 6 months later trying to debug something you thought you were done with…)As a side note, Python actually has two ways to spell "multiply":  and .The builtin types all ignore , so you'll just get a  if you try to use it. What it's there for is, basically, so NumPy can use  for elementwise multiplication, and  for matrix multiplication. (The  operator's magic method is even called .) But of course other third-party libraries that similarly needed to do two different kinds of multiplication could use  for the second kind.


Answer URL
https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types
https://docs.python.org/3/reference/datamodel.html#object.__mul__
