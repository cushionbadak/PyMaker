Natural Text
Let's say I want to store some information about a conference schedule with a presentation time and a pause time. I can do this in a .However, if I also want to store how much each block would take such that , I can't just add it as an attribute:What is the correct way to do this in Python? If I make an  method and store it as an instance variable there, but it would then be mutable.
In case it would be okay that it's not really stored but calculated dynamically you could use a simple  for it.That has the advantage that you can never (not even accidentally) store a wrong value for it. However at the expense of not actually storing it at all. So in order to appear as if it were stored you'd have to at least override , ,  which is likely too much trouble.For example the  approach given by Patrick Haugh has the downside that it's still possible to create inconsistent s or lose parts of the  convenience:  The fact that you actually have a "computed" field that has to be in sync with other fields already indicates that you probably shouldn't store it at all to avoid inconsistent state.
You can make a  that builds  objectsEDIT:Here's a solution using the new Python 3.7 Frozen es aren't totally immutable but they're pretty close, and this lets you have natural looking instance creation 
Well.. You cant override  or  of a class whose parent is NamedTuple. But you can overide  of a class, inherited from another class whose parent is NamedTuple.So you can do something like this


Answer URL
https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass
https://docs.python.org/3/library/dataclasses.html#frozen-instances
