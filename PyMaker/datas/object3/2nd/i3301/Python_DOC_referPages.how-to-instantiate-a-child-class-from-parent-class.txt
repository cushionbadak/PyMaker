Natural Text
I want to create a child class from a parent class. This is to reduce redundancy in code. For instance,I don't want to pass parameters again and again for all child classes. Is there a way I could make Child1 and Child2 from Parent class?I have 30+ parameters and many child classes. It seems very redundant to write out all parameters. Plus, they all share the same parameters as parents.
What you're looking to do here has nothing to do with instantiation. That word means to create an instance of a class. You can't "instantiate a child class from parent class", because a class object is not (except in very unusual circumstances) an instance of its base class.What you're trying to do is to eliminate some boilerplate.Python is very flexible—instances can define attributes wherever they want, classes can have any signature they want for methods like  and , etc. This is very powerful, but it also means that when you have a very repetitive class hierarchy, you have to repeat yourself a lot. But—because Python is very flexible—you can write tools to generate all that repetitive stuff for you, or you can just use tools that come with the language, like :1That's all it takes to define your classes, including automatically generating  methods that can handle both positional and keyword arguments and forward the right things to base classes, and  methods that display things in some useful way, and static type hints that Mypy can check for you, and so on, without any repetition:If you read the docs, you'll see that there's a lot more flexibility there (and even more in ), but the defaults give you what you want 80% of the time.  was added in Python 3.7. There's a backport for 3.6 that you can install with just , but if you need to work with 3.5 or 2.7, you'll need a third-party library like  instead. Also look at  for very simple cases, which works all the way back to 2.6 and 3.1.
You can pass all parameters to the subclass's  as a list, pass as many as necessary to the superclass, and use the rest in the subclass itself:
It's not clear from your example whether inheritance is appropriate here. Does the child satisfy the is a relationship, i.e., is the child really a subclass of the parent? If it does not then you should consider using composition rather than inheritance.I suggest composition because you mention, in a comment, instantiating the parent class and using that instance in the "child" classes. So you could create an instance of the parent and pass it to  of the "child" classes, thereby using composition.Within the child classes you would access parent attributes via  for example.


Answer URL
https://docs.python.org/3/library/dataclasses.html
https://docs.python.org/3/library/collections.html#collections.namedtuple
