Natural Text
I'm trying to implement a simple actor system in Python to develop some insight regarding concurrent programming.My main concern has been around the generic task of composing futures in Python, using the  module.Let's say I have an event loop running on a separate Thread.In order to avoid synchronous communication, I need to be able to compose the  somehow. As a simple example suppose I wanted to combine the results of two  coroutines.My first (obviously wrong) attempt:I'm not being able to derive a clean solution to deal the following general problem:Ideally, I should combine the futures and perform a single  at the end. Or perhaps I'm thinking about all of this wrongly.
The root problem here is:You're inside an  function, and trying to run another async function in the same event loop in the same thread. You don't need  for that; just  it.What happens if you call  anyway? Then what you get back is a . As explained at the top of the  docs, this is not the same thing as an â€”which is designed to mimic a concurrent future, but under the covers it's a different thing. You can compose two asyncio futures (from the same event loop), you can compose two concurrent futures, but you can't compose a concurrent future with an asyncio future.You can wrap a concurrent future in an async future (directly with , or, more commonly, indirectly through ). But then what you're going to end up with is a concurrent future holding an async future wrapping a concurrent future, which still can't be composed.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.run_coroutine_threadsafe
https://docs.python.org/3/library/asyncio.html
https://docs.python.org/3/library/asyncio-task.html#asyncio.wrap_future
https://docs.python.org/3/library/asyncio-eventloop.html#executor
