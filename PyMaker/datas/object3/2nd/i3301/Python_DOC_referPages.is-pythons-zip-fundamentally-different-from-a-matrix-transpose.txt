Natural Text
As I understand it, pythons zip takes a series of iterables and then returns an iterator to tuples containing one element from each iterator, such that the first tuple would contain the first element from each iterator. For example:Prints out:Transposing A and B separately then joining A and B results in that exact matrix. Is there any cases where the two operations vary in results or are they basically the same thing?Edit:*iterables
In the cases where there is an operation you can describe the operation as a matrix transpose,  (or, in your example, with the rows stored as lists in separate variables rather than in a list of lists, ) is that matrix transpose. (And that's true even if  or  and  are iterators or some kind of virtual or lazy sequenceâ€”it basically transposes them as lazily as possible.)However, it is slightly more general.For example, if you have unequal lists, you can still  them (the  will be truncated to the length of the shortest list), and that isn't really a "matrix transpose" in any meaningful sense. You can even use it with infinite-length iterators:  will give you the same thing as , without you having to write .Also, notice the  chunking idiom in the docs. Trying to think of that in terms of transposing a matrix of iterators is just going to confuse rather than enlighten, unless you already intuitively understand the idiom on its own terms.


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/functions.html#zip
