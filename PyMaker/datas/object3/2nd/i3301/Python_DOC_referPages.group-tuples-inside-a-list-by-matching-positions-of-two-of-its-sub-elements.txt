Natural Text
I have a list of tuples as below. The tuple in itself is a nested tuple with 3 sub-elements (tuples) inside it.I want to group these tuples by matching the positions of two of its elements viz. apple and mango (which is fixed and known beforehand) inside the tuples!Desired output:I tried using Counter and also checked some other examples but couldn't succeed in coming close the desired output. As such, any help or pointers would be really appreciated.
My go-to solution for grouping tasks like this is . I've written a lengthy answer about grouping things, which you can read here. Picking out the relevant snippets from that answer gives us this piece of code:Where all that's left is to find a way to uniquely represent each group with a hashable value (that is, we need to fill in the  line).The easiest solution is probably to extract the  and  values from the nested tuples and replace all other values with :Add that in and we're done:
Another approach is to make a dictionary using the positions for each pair of sub-items as keys.GivenCodeFirst, we build a list of indices to  occurrences of  sub-items in . Finally,  is one way to make a  with custom keys and values.OutputDetailsFor each tuple in ,  is used to yield the indices for items belonging to the set of  items.  These results are sufficient for grouping items together.  However, it is easier to see the actual items returned, so next we build a dictionary with .We iterate a zip of  pairs.  transforms the  as keys.  Likewise,  transforms  as values.  The result is a  with values grouped by sub-positions of  items  and .


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#collections.defaultdict
