Natural Text
I'm seeing a weird discrepancy in behavior between Python 2 and 3.In Python 3 things seem to work fine:But not in Python 2:The results seem to be consistent across minor releases of both Python 2.x and 3.x. Is this a known bug? Is it a bug at all? Is there any logic behind this difference?I am actually more worried about the C API function  properly identifying an object of type  as exposing the sequence protocol, which by looking at the source code it seems like it should, but any insight into this whole thing is very welcome.
Abstract classes from  use  toRegister subclass as a “virtual subclass” of this ABC.In Python 3  returns  because  is explicitly registered as a subclass of  (which is derived from ) and . See the relevant part of Lib/_collections_abc.py:Python 2 doesn't do that (from Lib/_abcoll.py):This behaviour was changed in Python 3.0 (in this commit specifically):Add ABC ByteString which unifies bytes and bytearray (but not memoryview).  There's no ABC for "PEP 3118 style buffer API objects" because there's no  way to recognize these in Python (apart from trying to use memoryview()  on them).And there's more information in PEP 3119:This is a proposal to add Abstract Base Class (ABC) support to Python  3000. It proposes:  [...]   Specific ABCs for containers and iterators, to be added to the     collections module.Much of the thinking that went into the proposal is not about the  specific mechanism of ABCs, as contrasted with Interfaces or Generic  Functions (GFs), but about clarifying philosophical issues like "what  makes a set", "what makes a mapping" and "what makes a sequence".[...] a metaclass for use with ABCs that will allow us to add an ABC as a "virtual base class" (not the same concept as in C++) to any class, including to another ABC. This allows the standard library to define ABCs Sequence and MutableSequence and register these as virtual base classes for built-in types like basestring, tuple and list, so that for example the following conditions are all true: [...] issubclass(bytearray, MutableSequence).Just FYI  was registered as a subclass of  only in Python 3.4: There's no ducktyping for this due to the Sequence/Mapping confusion  so it's a simple missing explicit registration.(see issue18690 for details). from Python C API does not rely on the  module:It checks for non-zero  field (example for ) and if that succeeds, for non-zero  field (which is basically getitem - example for ).
When you look at the source code of  abstract classes you will see that in python3 (file ) subclass of  class , class ,  itself with  while in python2 (file ) there is no  class and  does not  itself with .By  I mean that the abstract class  (or it's subclass ) is calling abc.ABCMeta.register method which as said in description of this method Register subclass as a “virtual subclass” of this ABC.I think that is causing differennt behaviour between py2 and py3 but IMHO it's bug (or better fixed bug in py3).


Answer URL
https://docs.python.org/3/library/abc.html#abc.ABCMeta.register
