Natural Text
I have a module with a dictionary as associative array to implement a kind-of switch statement.How can I mock my_method1 in tests? I've tried the following without success:Any idea?
This piece of patch documentation says the following:patch works by (temporarily) changing the object that a name points to  with another one. There can be many names pointing to any individual  object, so for patching to work you must ensure that you patch the  name used by the system under test.Basically, your dispatcher won't see it, as the mapping is built to reference the original method, before the patch is applied.The simplest thing you can do to make it mockable is to fold the mapping into the  function:This does have the downside that it rebuilds that mapping every time you call it, so it will be slower.Trying to get a bit clever, it seems that Python lets you swap out the actual code of a function, like so:I won't recommend that you do it this way, but maybe you can find a mocking framework that supports something similar.
As you've discovered, patching  does not work.  This is because  was defined when my_module was imported and subsequent changes to  do not update  for your test.  Instead, we need to patch the value in dictionary  for key  directly.  The unittest.mock documentation explains how to patch a dictionary entry.  Below is a working implementation of your test: After changing  to  in your original my_module...Then the command  gives the following output:It worked!


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch.dict
