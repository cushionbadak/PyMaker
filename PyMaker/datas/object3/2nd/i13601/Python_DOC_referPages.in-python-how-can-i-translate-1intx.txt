Natural Text
This question is a follow-up of this one.   In Sun's math library (in C), the expressionis used to retrieve the high word of the floating point number . Here, the OS is assumed 64-bit, with little-endian representation. I am thinking how to translate the C expression above into Python? The difficulty here is how to translate the '&', and '*' in the expression. Btw, maybe Python has some built-in function that retrieves the high word of a floating point number? 
You can do this more easily with :Here,  is a  object (or a  in 2.x) consisting of the four most significant bytes of  in little endian order (using IEEE 64-bit floating point format).  We then unpack it back into a 32-bit integer (which is returned in a singleton tuple, hence the ).This always uses little-endian for everything, regardless of your platform's underlying endianness.  If you need to use native endianness, replace the  with  (and use  or  to force big endian).  It also guarantees 64-bit doubles and 32-bit ints, which C does not.  You can remove that guarantee as well, but there is no good reason to do so since it makes your question nonsensical.While this could be done with pointer arithmetic, it would involve messing around with  and the conversion from Python float to C float would still be relatively expensive.  The  code is much easier to read.


Answer URL
https://docs.python.org/3/library/struct.html
