Natural Text
I have been pulling my hair out trying to get a proxy working. I need to decrypt the packets from a server and client ((this may be out of order..)), then decompress everything but the packet header.The first 2 packets (( and )) are not compressed, and decrypt, destruct, and decompile properly.Alas, but to no avail; FAIL!; Same error while I am attempting to decompress the encrypted version of the packet.When I include the packet header, I get a randomly chosen  error.I have also tried changing  to , as well as a few others, but still get the same error.Here's the code;I realize it's messy, disorganized and very bad, but it all works as intended minus the decompression.Yes, I am sure the packets are  compressed.What is going wrong here and why?Full Traceback:
I ran into the same problem while trying to decompress a file using zlib with Python 2.7. The issue had to do with the size of the stream (or file input) exceeding the size that could be stored in memory. (My PC has 16 GB of memory, so it was not exceeding the physical memory size, but the buffer default size is 16384.)Easiest fix was to change the code from:To:It handles the stream by buffering it and feeding in into the decompressor in manageable chunks.I hope this helps save you time trying to figure out the problem. I had help from my friend Jordan! I was trying all kinds of different window sizes (wbits).
Edit: Even with the below working on partial gz files for some files when I decompressed I got empty byte array and everything I tried would always return  empty though the function was successful. Eventually I resorted to running  process which always works: Note that the above can return a non-zero error code indicating that the input string is incomplete but it still performs the decompression and hence the stderr being swallowed. You may wish to check errors to allow for this case. /editI think the zlib decompression library is throwing an exception because you are not passing in a complete file just a 65536 chunk . If you change from this: toit should work as that way can handle streaming. A the docs say or even if it does fit into memory you might just want to do the beginning of the file 
try this:decopack = zlib.decompressobj().decompress(decpack, zlib.MAX_WBITS)


Answer URL
https://docs.python.org/3/library/zlib.html#zlib.decompressobj
