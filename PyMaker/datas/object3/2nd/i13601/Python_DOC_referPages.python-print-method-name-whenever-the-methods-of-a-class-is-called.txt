Natural Text
I need to perform certain operations everytime the methods of a particular class is called (for example log the method name). How can this be achieved in Python in a generic way?
Decorate callable attributes from within a metaclass:Warning: This code only works for instance methods, methods that were decorated with  or  will not be logged (because  and  objects are not callable - they're just non-data descriptors).The following works for class methods and static methods as well:They have  attributes that we can decorate.Note that you'll need to usein Python 2.
Taken from this answer. You can use the  module to look at the stack for the function name to create a simple logging function. Seems like kind of a hack, but I suppose it answers the question.This will print .
You could implement a decorator:Usage:For example:The use of  makes sure the function keeps its documentation and name, instead of becoming .
Taken from https://stackoverflow.com/a/5103895/5270581:The following method of object class is called on each access to an attribute of an object, including method calls:So I suggest to override it by simply adding a call to a logging function inside.See https://stackoverflow.com/a/5103895/5270581 (go to last answer) for code example.


Answer URL
https://docs.python.org/3/library/functions.html#classmethod
https://docs.python.org/3/library/functions.html#staticmethod
