Natural Text
I am unit testing the following functions:My unit test looks as follows:I cannot match the whole  thing, because the first parameter submitted to it is a guid, and as such it will be different every time I call the function:I want to extract the parameters, and only match the non-volatile ones:I know that I can also mock the thing which returns guids, and provide a fixed list of values in its side_effect. However, I feel quite lazy needing to mock too many things like ,  and such. This is why I am looking for an alternative to mocking each and every volatile function.Is there a more readable alternative to ?
There was a proposal to support this use case somewhere (bugs or mock repo?) but AFAIK it's not implemented yet.For now you have these options in the order of my preference:inspect what you needAlso has the advantage that when tests break you know exactly which of these two broke.mock UUIDMock it with predictable sequence and then you can validate your calls.use mock.ANYUnfortunately only works with the last call.You could decompose your test.assert_any_callHowever you can't validate relative order of Joe and Dan.mock.ANY in roundabout way
The simplest way to do your assert is Where  is an helper imported from  module You can use  options if you are not interested in call order. Moreover if your chain calls is complex you can take a look to Tracking order of calls and less verbose call assertions.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#any
