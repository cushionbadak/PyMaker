Natural Text
I am trying to make a python script that loops through a text file. In the text file I have something similair to this:Now i want it to loop through all of this and find the numbers that are not being used. In this case it would be abc4 and print it. But im stuck. Ive tried searching for the way to approach this but cant seem to frase the question to get a good answer...I hope someone can help me or point me in the right direction!I will add. The text is always abcN (N = a number) the numbers are also in a row. Like in the example
Read the data, discard the text and only keep the numbers. Put the numbers in a  while finding the maximum value. This will assure that you have all numbers in the file, without duplicates, and also the max number to look for.Once you have the numbers in the set, just loop from the zero to the max value, and check if the number is  the set.This might not be the most effective or Pythonic solution, but it's a solution.
If you want to get adventitious with itertools, a pythonic solution using generators would seem ideal. It is worth noting that it handles the edge cases well and is highly scalable.ImplementationOutput (for same input)
try this:
For small files:You could use set instead of list
As suggested, this is an implementation of one possible solution:Hope helped you!
If it is possible to generate all the possible entries without reading the file (eg, if N is limited to a fixed range, say 0-9), you could build all of those into a set, using something like:You can then generate a similar set of the entries that are actually in the file:Then your problem is reduced to "the things in the set  which are not also in ", which sets support directly:If the size of  is large, you may wish to fill it with numbers instead, and parse out the numbers from each entry in the file. If it is bounded only by the largest number actually present in the file, you would need to dynamically generate it from the .If the file is large enough that keeping all the entries and all the possibilities in memory at once is prohibitive, you can take advantage of the order by using nested loops. Create a generator to give you just the numbers:(where  takes  and gives you , as an int). You can then iterate over these lines while keeping a separate counter of where you expect to be up to - whenever it is different to where you are up to, you have a missing value:
Since the OP pointed out that the numbers will be in order, I thought of this solution which will always expect the  for the following line:Note that this will only give one "skipped" output even if there are multiple subsequent numbers missing because it will simply expect the next line to have the current line's number plus one.


Answer URL
https://docs.python.org/3/library/stdtypes.html#set
