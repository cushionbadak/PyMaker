Natural Text
I have line segments of four colors—pink, green, orange, red—as in the figure below.As an example, the first pink segment has start and end position .The coordinates are stored in this dictionary of tuples:What I want to do is to get all the possible intersections' start and end values as shown in this figure:Thus, the desired answer would be:Note that I want to preserve the color indicator for each intersection (e.g., ). How can I achieve this with Python?
I suggest that you proceed as follows.Sort the endpoints, remembering each one's color and whether it's a left (opening) or right (closing) endpoint.Iterate over the endpoints, keeping track of open spans with a hash that maps each color to the number of open spans of that color. Increment when you open a span of a given color, decrement when you close a span. Remove colors when their count reaches zero. For each distinct endpoint, put the colors of all open spans at that point into a set.Iterate over consecutive pairs of distinct endpoints. These form the left and right endpoints of the spans that interest you. For each endpoint, you know the colors that are active at that point. The set of colors that are active during the span is the set intersection of the colors that are active at the left end and the colors that are active at the right end.Note: If the intersection of colors between two endpoints is empty, you've found a gap between spans, so you know that it should be skipped. You might also like to skip spans with only one color. The implementation below does not. You can easily change it to skip single-color spans by modifying this line:so that it reads:If you're interested in seeing the gaps between spans, you can change the threshold to  or remove the condition altogether.Implementation:Result:
Using the brace open/close idea of Michael Laszlo above:


Answer URL
https://docs.python.org/3/library/stdtypes.html#set
