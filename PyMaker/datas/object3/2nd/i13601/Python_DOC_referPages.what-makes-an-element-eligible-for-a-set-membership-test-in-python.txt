Natural Text
This question already has an answer here:How/why does set() in {frozenset()} work?                    2 answers                I would like to understand which items can be tested for  membership in Python. In general, set membership testing works like  membership testing in Python.However, sets are different from lists in that they cannot contain unhashable objects, for example nested sets.List, okay:Set, does not work because unhashable:Now, even if sets cannot be members of other sets, we can use them in membership tests. Such a check does not result in an error.However, if I try to do the same test where the element being tested is a , I get an error which suggests that the element being tested cannot be unhashable.That cannot be the whole story, because a  can be tested for membership in another set even if it is itself unhashable, giving a result rather than an error.So the question is: What makes an element eligible for a set membership test in Python?
You cannot test membership of non-hashable elements in a  . Example -The only non-hashable object that can be used for containment checking is set. As given in the documentation -Note, the elem argument to the __contains__(), remove(), and discard() methods may be a set. To support searching for an equivalent frozenset, the elem set is temporarily mutated during the search and then restored. During the search, the elem set should not be read or mutated since it does not have a meaningful value.To support searching for frozensets with same elements as a set, a set is temporarily mutated to  and compared. Example -
The confusion comes because when you say 'if set in set', I think python is casting the left hand set to a frozenset and then testing that. E.g.However, there is no equivalent to frozenset for a dict, so it cannot convert the dict to an immutable object for the membership test, and thus it fails.I don't know the 'rule' that's followed here - whether there's some general method that can be overrideen to provide the immutable-conversion or if this behaviour is hardcoded to the specific case of set in set.


Answer URL
https://docs.python.org/3/whatsnew/3.2.html#optimizations
