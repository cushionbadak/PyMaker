Natural Text
tl;dr What's a Pythonic (Py 3) way of specifying a large number of defined bit masks and constants? Use an Enum(s) or just have a load of consts as class variables? And the advantages/disadvantages?Background I'm porting C code to Python 3. In the C code there's a large number of defines which are used as bit masks:I thought in Python a Pythonic way of having these would be by using an , I came across  which means I don't have to use  everywhere like I would with a normal :but it's still more verbose than just having  which I could get if I had them all as consts.
It all depends.If the constants are logically integers (you do arithmetic, bitwise logic, etc. with them), they should be regular global variables.  Flag values fall here, as with the various flags for , but if you're just specifying a constant to indicate which operation to perform, an enum is more appropriate (or better yet, multiple driver functions).Enumerated types are normally used when you have a (relatively) small set of values, and those values are mostly only compared to one another (e.g. with  etc.).  In this case, you usually do not need  because you shouldn't be using  very often to begin with.  Indeed,  is mostly a backwards-compatibility hack.
I think using  is more pythonic - there was a whole lot of effort put into creating that module, and not without a reason."Standard" way of things was using constants (like ) but this is ugly, buggy and really hard to mantain. This is why that module was developed.Now that I've stated plain answer, I can also propose that you use both at the same time:I think it's ugly, but you were torn between two options, so I wanted to show you how to make them one.Also worth reading:why use enum at all? - it says "Java", but this is programming in general, not language-depentent issuePEP about that module - you can see how many people thought that through and how thorough they werenot "which is more pythonic" but more "how to do it" - with some arguments for using  modulehow were they thinking? - "they" meaning "developers of that module"
Using an  is definitely the way to go, and you can even have the enum members at the module scope quite easily:so your comparison becomes:About the only time it makes sense to not use  is when you have several names that aren't really duplicates but map to the same value, as the duplicate values will all map to the same name:But if you have distinct names for unique values  is the way to go.
I don't think there is any reason to have them as part of a class. module module


Answer URL
https://docs.python.org/3/library/os.html#os.open
