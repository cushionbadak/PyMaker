Natural Text
I am creating a simple Hangman implementation for a school project and I am currently stuck on the task of making a letter reveal itself in the word when guessed correctly. I already have code that generates blank spaces depending on the number of letters in the word, as well as pretty much every other component of the game I need, but I can't figure out how to replace spaces with correct letters.I'd appreciate it if you kept it simple and explained as I'm still rather new at programming. And if possible, so that I don't have to change up my code too much.Here's my code:
To find where the letter in the string, use word.index(guess).Afterwards replace the letter in in the "blanks" word.To do so save ,And replace '_' in the correct place: After that print the new b_word.
To help you display the guessed letters, you can keep track of them in a list in which letters that haven't been guessed yet are represented by underscores (or blanks or whatever you like).You can initialize such a list as soon as you have decided on the secret :To display the guessed letters, join them with spaces:Subsequently, when the user enters a letter , you can update the correctly guessed letters by enumerating over the word:I have revised your program to incorporate this code:There are other problems with the program that fall outside the scope of this question.
Firstly, we import sys do we could exit if player does not want to play anymorethe whole logic is implemented in make_a_guess method of class Guess.everytime new game will be started, new instance of class Guess will be created. This is a new implementation, because your variant had some really important errors, for instance, you'd better use raw_input() in order to autoconvert input to string. In order to write you progress of guessing, print_mask() in my code is usedin the method you should look for all of the occurencies of already guessed letters and gather them. For example, you guessed M and F and their indexes will be [0,3] if 'FORM' word is a secret word. That is why when you iterate in a loop over the secret word, if you meet that current index you iterate over can also be found in [0,3], -> that is when you add the letter for the corresponding index to some empty list you prepare for later print as a display of current progress. If no current index can be found in [0,3] during the iteration over the secret's word letters- then you add "_" instead of letter that was guessed to you prepared empty list.Then you shrink the list to be as string in order to further print it:" ".join(MASK_TO_PRINT)Logic is like that:secret word is 'cabage'you guessed 'c' before and 'a'so self.GUESSED contains [0,1,3]then you iterate over:
Your instructions to the player are a bit misleading: you tell the player that they can "input any letter from A to Z and the space key", but you don't mention that they can also use the lower case letters from a to z, and that's important because your program distinguishes between upper & lower case letters. Various things could be done to your code to improve it. Eg, you don't need to convert the data returned by  to a string - it's already a string. You could simplify the logic in testing whether a guess is valid: you perform some of your tests twice on the same input data. Also, your replay logic needs a bit of work. And there's no builtin function named  (and you haven't defined one); maybe you meant , but you can probably reorganize your logic so you don't need to use .Anyway, here's a way to implement a Hangman word display function. This function receives the  string and , which could be a string or a list, but it would be more efficient to use a set.output


Answer URL
https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset
