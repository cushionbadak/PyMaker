Natural Text
When trying a selfwritten module, it is likely to end with errors at the first few times.But when fixing these errors, ipython does not seem to notice that.Is there an ipython command to reload the new module? 'clear' does not do the trick. So far, the only thing that works is to 'exit' and start a new session. But this also means redoing everything I have done so far.Or do I need to add something to the module that it kills all its internal variables after it has been run? Example:OK, that's easy. I made a typo in line 198, and wrote  instead of , and thus I get the obvious error of trying to join a dataframe with a string.But after fixing it in the  file, I get the following (shortened) error:Looking at the traceback, ipython is well aware of the changes is made in the source file, it shows that I fixed the typo with the missing , but it still gives an error, that at the first look seems to be impossible. After running  and reimporting everything, it shows the same behaviour.So just to make sure that I did not make a stupid mistake somewhere along the way, I went trough my whole module step by step in ipython. And every variable that leads me to that point behaves as expected. is a dataframe,  is an integer and  is a string.So I exited ipython, restarted it and reimported everything and now it works.But having to exit ipython sucks. Most of the times this means having to reimport dozens of things and doing a few dozen commands, to get to the point where I can actually test what I am currently working on.
This is not just for  , but  in general caches a module when it is first imported into  . So after the first import, whenever you try to import it, you would get the cached module object from  .To make Python reload the module object without having to restart Python, so that changes done to the module are reflected, you should use  built-in function (Python 2.x) or  (Python 3.x).Python 2.x -Example -Python 3.x -Similar to  example above, just use  instead of 
There is an Ipython specific way, you can use set up autoreload:The module was reloaded without reloading it explicitly, and the object imported with from foo import ... was also updated.UsageThe following magic commands are provided:Reload all modules (except those excluded by ) automatically now.Disable automatic reloading.Reload all modules imported with %aimport every time before executing the >Python code typed.Reload all modules (except those excluded by ) every time before executing the Python code typed.List modules which are to be automatically imported or not to be imported.Import module ‘foo’ and mark it to be autoreloaded for Mark module ‘foo’ to not be autoreloaded.There is also dreload which will work for python2 and 3.
When you kill the IPython notebook server and restart it, you will have a new kernel instance which does not persist with your notebook itself.You should start your workflow right after opening your notebook by running all cells. In the top menu, select "Cell->Run all"


Answer URL
https://docs.python.org/3/library/importlib.html#importlib.reload
