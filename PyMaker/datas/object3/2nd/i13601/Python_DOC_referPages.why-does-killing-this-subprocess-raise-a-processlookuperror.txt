Natural Text
I can't understand when I need to kill subprocess.I'm getting error (using Python3):Can anybody explain me when subprocess kill himself and when I need to do it manually ?
In Python,  is a blocking call that waits for the subprocess to terminate. So there is normally no need to kill the subprocess after the call to  returns. See Python docs on Popen.wait(). Now, if you understand how that works, you can see that your code fails because at some point  returns a non-zero value and you then try to kill a process that does not exist any more.This is why a  is raised.Now, as pointed out by another answer here, it is possible the returned value will be , which indicates a possible (perhaps OS-specific) problem with the subprocess and could be checked for. The Python docs merely state that  indicates the process is still running (a negative value is also possible; see the docs for details).Apart from that, if you need to kill a still-running subprocess for some reason, you either have to set and catch a timeout using:... or, alternatively, not use  at all: Instead, let the subprocesses run while you do something else in your code, and then kill them later:What if you want to just check if the process is alive? Unfortunately, Python stdlib does not have a good, convenient way to check if a process is running. But, it can be conveniently done using psutil, a third-party library. With it, checking if a process exists is as easy as:
What you can do is to set a timeout of the process, once the timeout is attained then you can terminate the process by using:you can also use     to check if the process or thread is alive or not and then terminate it if it has already attained the timeout.
You would have to examine the result from wait to determine why it returned. If it returns  the wait returned for other reasons than that the subprocess has terminated. If it returns other than  it would not be appropriate to  the process, but that doesn't mean that it automatically is appropriate to  it if it returned . For example, depending on OS the returning of  may indicate a state change for the process for which you wouldn't want to kill it. But also there may be scenarios where it returns , but is still running an may terminate before you reach the .So if you choose to  the process you should probably enclose it in a --statement in order to handle the scenario where the subprocess has terminated.Also from python3.3 you could add  (eg  argument to wait in order to not wait indefinitely.Your code might then look something like:


Answer URL
https://docs.python.org/3/library/shutil.html
