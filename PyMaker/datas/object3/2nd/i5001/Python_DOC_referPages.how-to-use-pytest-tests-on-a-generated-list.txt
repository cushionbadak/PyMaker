Natural Text
I have code that takes a path as a command line argument, opens a text file at that location and reads it into a variable.How do I get my pytests to look at list_from_file ?for exampleI've tried various fixture stuff without success; I find the pytest documentation unclear and confusing for something that should be straight-forward.  A best practice approach is appreciated.
I find the pytest docs on fixtures pretty clear. Create a fixture for the path, create a fixture for the list, done.
This is a good opportunity to become familiar with the pytest built-in fixture called .Here is an example for your function, where I have two files,  and :andWhen I run  from the directory with the source code, I get:Here is some explanation. First off  is an automatically-provided special fixture of pytest, so you can include it as an argument in the test function as I did, without importing it or otherwise having any definition for it. When pytest executes the test function, it will see that a  argument is named, and it will automatically pass in its own  fixture object.Next,  can be used directly to create a new directory and a new file. In this case, I just put some random names in there for a directory and a file and then write some toy data to it. It doesn't matter too much what these are, as long as we set up the test to look for the proper successfully computed result.Note that I pass the value  into the function . That function will treat it like a file path when running the code from the function , because the  objects are implemented in such a way as to let them be treated like paths.One special behavior I am relying on is noted at the bottom of the documentation for :If a component is an absolute path, all previous components are thrown away and joining continues from the absolute path component.So, even though  tries to perform the operation , when  is coming from , it will be an absolute path, so the first part will be ignored (which is what we would want for a test anyway).(Note, this also suggests your design of  can be improved if you don't hard-code the assumption that  must be prepended to the file name. Instead, just let  work with any path the caller provides, and when you set up paths to call it, then you can be sure to prepend  only when you need to. It's not necessary, but usually a good idea.)When pytest finishes, it knows to automatically destroy the files and directory that were created by , so you don't have to worry about that.


Answer URL
https://docs.python.org/3/library/os.path.html#os.path.join
