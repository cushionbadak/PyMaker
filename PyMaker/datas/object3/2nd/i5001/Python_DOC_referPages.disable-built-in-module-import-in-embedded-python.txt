Natural Text
I'm embedding Python 3.6 in my application, and I want to disable import command in the scripts to prevent users to import any python built-in libraries. I'd like to use only the language itself and my own C++ defined modules.Do you know any way to achieve this?
Python has a long history of being impossible to create a secure sandbox (see How can I sandbox Python in pure Python? as a starting point, then dive into an old python-dev discussion if you feel like it). Here are what I consider to be your best two options.Pre-scan the codeBefore executing anything, scan the code. You could do this in Python with the AST module and then walk the tree, or can likely get far enough with simpler text searches. This likely works in your scenario because you have restricted use cases - it doesn't generalize to truly arbitrary code.What you are looking for in your case will be any  statements (easy), and any top-level variables (e.g., in  you care about  and likely  for a given ) that are not "approved". This will enable you to fail on any code that isn't clean before running it.The challenge here is that even trivally obfuscated code will bypass your checks. For example, here are some ways to import modules given other modules or globals that a basic scan for  won't find. You would likely want to restrict direct access to , , some/most/all names with  and members of certain types. In an AST, these will unavoidably show up as top-level variable reads or attribute accesses.(I hope it goes somewhat without saying, this is an impossible challenge, and why this approach to sandboxing has never fully succeeded. But it may be good enough, depending on your specific threat model.)Runtime auditingIf you are in a position to compile your own Python runtime, you might consider using the (currently draft) PEP 551 hooks. (Disclaimer: I am the author of this PEP.) There are draft implementations against the latest 3.7 and 3.6 releases.In essence, this would let you add hooks for a range of events within Python and determine how to respond. For example, you can listen to all  events and determine whether to allow or fail them at runtime based on exactly which module is being imported, or listen to  events to manage all runtime compilation. You can do this from Python code (with ) or C code (with ).The Programs/spython.c file in the repo is a fairly thorough example of auditing from C, while doing it from Python looks more like this (taken from my talk about this PEP):The downside of this approach is you need to build and distribute your own version of Python, rather than relying on a system install. However, in general this is a good idea if your application is dependent on embedding as it means you won't have to force users into a specific system configuration.


Answer URL
https://docs.python.org/3/library/ast.html
