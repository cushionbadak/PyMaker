Natural Text
I'm looking for a Pythonic way to validate arguments when their validation logically depends on the value(s) parsed from other argument(s).  Here's a simple example:In this case, parsing this command should cause an error:Adding a mutually exclusive group doesn't seem to help here, as the other combos are OK:The validation error should ideally not be tied to  argument nor to  argument, since the interface can not tell you which value needs to change here.  Each value is valid, yet they can't be used in combination.We can do this with post-processing the  namespace, but I'm looking for a solution which would cause the  call to fail, i.e. we actually fail during argument parsing, not afterwards.  
Checking values after parsing is simplest.  You can even use  to produce an error message in the standard  format. handles each argument independently, and tries to do so in a way that doesn't care about the order (except for ).  Each input value is added to the  namespace by the corresponding  object (its  method).  A default  action simply uses ; a  does .Mutually exclusive groups are handled by keeping a  of , and checking that against the group's own list of Actions.  I've explored generalizing the groups to allow for other logical combinations of actions.  As complicated as that has gotten (especially when displaying the ), I didn't envisage testing for values as well as occurrence.It would be possible to write custom  classes, that check for co-occurrence, but that gets more complicated.We could give  an Action class that checks the values of the  attribute, and raises an error if that value is .  But what if the user provides the  option first?  We'd have to give  a custom class that checks the  value, and raise an error if that is , etc.  So  has to know about  and  has to know about .  Testing after parsing allows you to put the logic in one place.One of the big advantages to using a parser like  is it generates the usage, help, and error messages for you.  But validation logic like this is hard to express automatically.  As it is, the usage formatting for the relatively simple mutually-exclusive logic is brittle and easily broken.An earlier attempt at answering this kind  of question:Parameter dependencies in Python - can't make it work


Answer URL
https://docs.python.org/3/library/argparse.html#mutual-exclusion
