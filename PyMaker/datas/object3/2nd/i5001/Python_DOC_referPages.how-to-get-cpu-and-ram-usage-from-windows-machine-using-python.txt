Natural Text
What's your preferred way of getting current system status (current CPU, RAM, free disk space, etc.) in Python? Bonus points for *nix and Windows platforms.There seems to be a few possible ways of extracting that from my search:Using a library such as PSI (that currently seems not actively developed and not supported on multiple platform) or something like pystatgrab (again no activity since 2007 it seems and no support for Windows).Using platform specific code such as using a  or similar for the *nix systems and  in  (see this recipe on ActiveState) for the Windows platform. One could put a Python class together with all those code snippets.It's not that those methods are bad but is there already a well-supported, multi-platform way of doing the same thing?
The psutil library will give you some system information (CPU / Memory usage) on a variety of platforms:psutil is a module providing an interface for retrieving information on running processes and system utilization (CPU, memory) in a portable way by using Python, implementing many functionalities offered by tools like ps, top  and Windows task manager.It currently supports Linux, Windows, OSX, Sun Solaris, FreeBSD, OpenBSD and NetBSD, both 32-bit and 64-bit architectures, with Python versions from 2.6 to 3.5 (users of Python 2.4 and 2.5 may use 2.1.3 version).UPDATE: Here is some example usages of :
Use the psutil library.  On Ubuntu 18.04, pip installed 5.5.0 (latest version) as of 1-30-2019.  Older versions may behave somewhat differently.  You can check your version of psutil by doing this in Python:To get some memory and CPU stats:The  (tuple) will have the percent memory used system-wide.  This seemed to be overestimated by a few percent for me on Ubuntu 18.04.You can also get the memory used by the current Python instance:which gives the current memory use of your Python script.There are some more in-depth examples on the pypi page for psutil.
Below codes, without external libraries worked for me. I tested at Python 2.7.9CPU UsageAnd Ram Usage, Total, Used and Free
One-liner for the RAM usage with only stdlib dependency:
Here's something I put together a while ago, it's windows only but may help you get part of what you need done.Derived from:"for sys available mem"http://msdn2.microsoft.com/en-us/library/aa455130.aspx"individual process information and python script examples"http://www.microsoft.com/technet/scriptcenter/scripts/default.mspx?mfr=trueNOTE: the WMI interface/process is also available for performing similar tasks        I'm not using it here because the current method covers my needs, but if someday it's needed to extend or improve this, then may want to investigate the WMI tools a vailable.WMI for python:http://tgolden.sc.sabren.com/python/wmi.htmlThe code:http://monkut.webfactional.com/blog/archive/2009/1/21/windows-process-memory-logging-python
"... current system status (current CPU, RAM, free disk space, etc.)"  And "*nix and Windows platforms" can be a difficult combination to achieve.The operating systems are fundamentally different in the way they manage these resources.  Indeed, they differ in core concepts like defining what counts as system and what counts as application time."Free disk space"?  What counts as "disk space?"  All partitions of all devices?  What about foreign partitions in a multi-boot environment?I don't think there's a clear enough consensus between Windows and *nix that makes this possible.  Indeed, there may not even be any consensus between the various operating systems called Windows.  Is there a single Windows API that works for both XP and Vista?
I feel like these answers were written for Python 2, and in any case nobody's made mention of the standard  package that's available for Python 3. It provides commands for obtaining the resource limits of a given process (the calling Python process by default). This isn't the same as getting the current usage of resources by the system as a whole, but it could solve some of the same problems like e.g. "I want to make sure I only use X much RAM with this script."
We chose to use usual information source for this because we could find instantaneous fluctuations in free memory and felt querying the meminfo data source was helpful.  This also helped us get a few more related parameters that were pre-parsed.CodeOutput for reference (we stripped all newlines for further analysis)MemTotal: 1014500 kB MemFree: 562680 kB MemAvailable: 646364 kB  Buffers: 15144 kB Cached: 210720 kB SwapCached: 0 kB Active: 261476 kB  Inactive: 128888 kB Active(anon): 167092 kB Inactive(anon): 20888 kB  Active(file): 94384 kB Inactive(file): 108000 kB Unevictable: 3652 kB  Mlocked: 3652 kB SwapTotal: 0 kB SwapFree: 0 kB Dirty: 0 kB Writeback:  0 kB AnonPages: 168160 kB Mapped: 81352 kB Shmem: 21060 kB Slab: 34492  kB SReclaimable: 18044 kB SUnreclaim: 16448 kB KernelStack: 2672 kB  PageTables: 8180 kB NFS_Unstable: 0 kB Bounce: 0 kB WritebackTmp: 0 kB  CommitLimit: 507248 kB Committed_AS: 1038756 kB VmallocTotal:  34359738367 kB VmallocUsed: 0 kB VmallocChunk: 0 kB HardwareCorrupted:  0 kB AnonHugePages: 88064 kB CmaTotal: 0 kB CmaFree: 0 kB  HugePages_Total: 0 HugePages_Free: 0 HugePages_Rsvd: 0 HugePages_Surp:  0 Hugepagesize: 2048 kB DirectMap4k: 43008 kB DirectMap2M: 1005568 kB
This script for CPU usage:
You can use psutil or psmem with subprocessexample code Reference  http://techarena51.com/index.php/how-to-install-python-3-and-flask-on-linux/https://github.com/Leo-g/python-flask-cmd
Based on the cpu usage code by @Hrabal, this is what I use:
I don't believe that there is a well-supported multi-platform library available. Remember that Python itself is written in C so any library is simply going to make a smart decision about which OS-specific code snippet to run, as you suggested above. 


Answer URL
https://docs.python.org/3/library/resource.html
