Natural Text
I am using  to parse date strings which might contain partial information. If some information is not present,  can take a  keyword argument from which it will fill any missing fields. This default defaults to .For a case like , this means it will return the date of the next Thursday. However, I need it to return the date of the last Thursday (including today, if today happens to be a Thursday).So, assuming  (a Tuesday), I would like to get all of these s to be true:Is there an easy way to achieve this? With the current  function only the first and third  would pass.
Here's your modified code (code.py):Notes:I changed the structure of the code "a bit", to parametrize it, so if a change is needed (e.g. a new example to be added) the changes should be minimalInstead of s, I added a function () that prints the results (instead raising  and exiting the program if things don't match)Takes an argument () which is a function that does the parsing (e.g. )Uses some globally declared data () together with the (above) function - is a list of triples, where each triple contains:Text to be convertedExpected  ([Python]: datetime Objects) to be yielded by the conversion argument to be passed to the parsing function () function (an improved version of ):Accepts 2 types of date strings:Weekday nameMonth / Day (unordered)Does the regular parsing, and if the converted object comes after the one passed as the  argument (that is determined by comparing the appropriate attributes of the 2 objects), it subtracts a period (take a look at [Python]: timedelta Objects):"Thursday" comes after "Tuesday", so it subtracts the number of days in a week (7)"December 10" comes after "February 20", so it subtracts the number of days in the year*: I'd better explain it by example:Flattens Converts strings to lowercase (for simplifying comparisons)* - as you probably guessed, returns the number of days in an year (couldn't simply subtract 365 because leap years might mess things up):Output:


Answer URL
https://docs.python.org/3/library/datetime.html#datetime-objects
https://docs.python.org/3/library/datetime.html#timedelta-objects
