Natural Text
Short and simple. I've got a huge list of date-times like this as strings:I'm going to be shoving these back into proper datetime fields in a database so I need to magic them into real datetime objects. Any help (even if it's just a kick in the right direction) would be appreciated.Edit: This is going through Django's ORM so I can't use SQL to do the conversion on insert.
 is the main routine for parsing strings into datetimes. It can handle all sorts of formats, with the format determined by a format string you give it:The resulting  object is timezone-naive.Links:Python documentation for : Python 2, Python 3Python documentation for / format strings: Python 2, Python 3strftime.org is also a really nice reference for strftimeNotes: = "string parse time" = "string format time"Pronounce it out loud today & you won't have to search for it again in 6 months.
Use the third party dateutil library:It can handle most date formats, including the one you need to parse. It's more convenient than strptime as it can guess the correct format most of the time.It very useful for writing tests, where readability is more important than performance.You can install it with:
Check out strptime in the time module.  It is the inverse of strftime.
I have put together a project that can convert some really neat expressions. Check out timestring. Here are some examples below:
Remember this and you didn't need to get confused in datetime conversion again.String to datetime object = datetime object to other formats = is equals to%b    Month as locale’s abbreviated name(Jun)%d    Day of the month as a zero-padded decimal number(1)%Y    Year with century as a decimal number(2015)%I    Hour (12-hour clock) as a zero-padded decimal number(01)%M    Minute as a zero-padded decimal number(33)%p    Locale’s equivalent of either AM or PM(PM)so you need strptime i-e converting  to OutputWhat if you have different format of dates you can use panda or dateutil.parseOutPut
Many timestamps have an implied timezone. To ensure that your code will work in every timezone, you should use UTC internally and attach a timezone each time a foreign object enters the system.Python 3.2+:
Something that isn't mentioned here and is useful: adding a suffix to the day. I decoupled the suffix logic so you can use it for any number you like, not just dates.
Here are two solutions using Pandas to convert dates formatted as strings into datetime.date objects.TimingsAnd here is how to convert the OP's original date-time examples:There are many options for converting from the strings to Pandas Timestamps using , so check the docs if you need anything special.Likewise, Timestamps have many properties and methods that can be accessed in addition to 
I personally like the solution using the  module, which is the second Answer to this question and is beautiful, as you don't have to construct any string literals to get it working. BUT, one downside is that it is 90% slower than the accepted answer with .As long as you are not doing this a million times over and over again, I still  think the  method is more convenient and will handle most of the time formats automatically.
Django Timezone aware datetime object example.This conversion is very important for Django and Python when you have :

for unix / mysql format 2018-10-15 20:59:29
Create a small utility function like:This is versatile enough:If you don't pass any arguments it will return today's date.There's a date format as default that you can override.You can easily modify it to return a datetime.
The datetime Python module is good for getting date time and converting date time formats.Output:
arrow offers many useful functions for dates and times. This bit of code provides an answer to the question and shows that arrow is also capable of formatting dates easily and displaying information for other locales.See http://arrow.readthedocs.io/en/latest/ for more.
In Python >= 3.7.0,to convert YYYY-MM-DD string to datetime object,  could be used.
You can use easy_date to make it easy:
If you want only date format then you can manually convert it by passing your individual fields like:You can pass your split string values to convert it into date type like:You will get the resulting value in date format.
It would do the helpful for converting string to datetime and also with time zone
it shows "Start Date Time" Column and "Last Login Time" both are "object = strings" in data-frameBy using  option in  mention you can convert your string datetime into pandas datetime format.
See my answer.In real-world data this is a real problem: multiple, mismatched, incomplete, inconsistent and multilanguage/region date formats, often mixed freely in one dataset. It's not ok for production code to fail, let alone go exception-happy like a fox.We need to try...catch multiple datetime formats fmt1,fmt2,...,fmtn and suppress/handle the exceptions (from ) for all those that mismatch (and in particular, avoid needing a yukky n-deep indented ladder of try..catch clauses). From my solution


Answer URL
https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime
https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior
