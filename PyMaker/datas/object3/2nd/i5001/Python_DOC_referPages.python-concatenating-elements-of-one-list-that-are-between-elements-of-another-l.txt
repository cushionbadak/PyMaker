Natural Text
I have two lists:  and .  I want to concatenate all of the elements of the  that are between elements of . All of the elements of  are in , but  also has some extra elements that are extraneous. I would like to take the first instance of every element of  in  and concatenate it with the extraneous elements that follow it in  until we find another element of  in . The following example should make it more clear.  What I have thought of is something like this:This however will not catch the last item in the list (which I am not quite sure how to fit into my list comprehension anyways) and it seems quite ugly. My question is, is there a neater way of doing this (perhaps in itertools)?
I think your example wrong_list_fixed is incorrect.Here's a solution that walks the lists. It can be optimized further:Here are the correct lists (modified to be easier to visually parse):
Let's simplify the visual a bit:This will be semantically identical to what you have, but I think it is easier to see without all the extra nested brackets.You could use , if you could only come up with a clever key. Luckily, the mapping of  to  givs you exactly what you want:The key maps elements of  to  using . For missing indices, it just returns the last one successfully found, ensuring that groups are not split until a new index is found. By starting the search from the next available index, you can ensure that duplicate entries in  get handled correctly.[IDEOne Link]
I get slightly different result from yours, but give it a try. If this is not what you want, I will delete my answer.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/tutorial/datastructures.html#more-on-lists
