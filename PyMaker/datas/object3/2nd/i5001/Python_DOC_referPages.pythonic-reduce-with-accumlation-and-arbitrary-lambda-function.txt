Natural Text
What would be the Pythonic way of performing a reduce with accumulation?For example, take 's . Given a list and an arbitrary lambda function it allows for yielding a vector of accumulated results instead of only the final result by setting . An example for this with a simple multiplication as lambda function would be (taken from this answer):It is important that an arbitrary lambda function (like ) can be used, so solutions that allow for e.g. only using a sum, multiplication, or else won't do the trick. I was not able to come up with a Pythonic solution to do this with e.g. Python's  or , but there might be a way. And though there are numerous other questions and answers on reduce and specially accumulation with Python I did not spot a generic answer so far.A non-Pythonic example using a loop for performing a accumulated reduce with an arbitrary lambda function could look like this:So: how would you do a reduce with accumulation and arbitrary lambda function in a Pythonic way?
In Python 3 (introduced in 3.2, ability to pass the function added in 3.3) this is already implemented, in . Just use it like this:If you are using an earlier Python version, or want to implement it yourself, and you really want any arbitrary  (that takes two arguments) to work, then you could use the generator which is given in the documentation of the above:The usage is exactly the same as above.If you are using , then there exists a faster solution, at least for all s. These include basically the same functions that the standard library module  provides, and then some. You can find a complete list here.Every  has the  method, so you can just do:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.accumulate
