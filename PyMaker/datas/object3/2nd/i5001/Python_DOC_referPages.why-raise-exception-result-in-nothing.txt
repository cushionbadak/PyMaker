Natural Text
If I have an expression of , obviously, it gets error:And the second try, replacing  by ...It prints nothing. Isn't an exception came from , same as the a general expression?Also, how to understand this difference more clearly?
All exceptions are a subclass of , therefore all built-in exceptions should have an  attribute. :The tuple of arguments given to the exception constructor. Some  built-in exceptions (like ) expect a certain number of  arguments and assign a special meaning to the elements of this tuple,  while others are usually called only with a single string giving an  error message.The  tuple or string can be provided as the first argument when you raise the exception. The  from  is the Exception instance, when you , you're actually calling the  method of the Exception. Most Exception class's  return's , since it's the default behaviour of BaseException;  will return otherwise if the exception class override BaseException's . When you raised a plain , you provided no , and  does not have a custom  method, therefore it printed  by default, a.k.a .As for your question:Isn't an exception came from , same as the a general expression?Yes. They are the same. This will output the same as .I went ahead and dig through the source code.   (integer division) and  (true division) have a slightly different error message. But basically they are defined as such:Whereas  is the divisor. As you can see,  or any division by zero raises a  with  set as  or  depending how you divide.


Answer URL
https://docs.python.org/3/library/exceptions.html#bltin-exceptions
https://docs.python.org/3/tutorial/errors.html
