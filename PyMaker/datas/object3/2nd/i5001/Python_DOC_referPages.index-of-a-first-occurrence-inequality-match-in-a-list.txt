Natural Text
The answer is 2,But what I need is the first one which is bigger than 4 (the answer will be the same - 2).I can apply a while loop, but is there a more elegant or a builtin way to do it?In my problem the list is sorted in an ascending order (no duplication),and my target is to split it into two lists: lower or equal to 4, and bigger than 4; and given the list is sorted it would be redundant to scan it twice (or even once).
As @DanD.mentioned, you can use the  module for this, in you example you can use This will use a binary search since your data is sorted, which will be faster than a linear search ( instead of ).If you want the index of the first value greater than , then you can switch to 
You're totally correct about efficiency - if you have already sorted list, do not iterate linearly, its waste of timeThere's built-in  module - exactly for binary search in sorted containers.You're probably looking for  function.
Thanks everybody, the answer using your kind help is:
Use  with a default argument:Given the above result, you can then do:
List comprehension can do the trick if you want the first occurrence:And to split:


Answer URL
https://docs.python.org/3/library/bisect.html
https://docs.python.org/3/library/bisect.html#bisect.bisect_left
https://docs.python.org/3/library/bisect.html#bisect.bisect_right
https://docs.python.org/3/library/functions.html#next
