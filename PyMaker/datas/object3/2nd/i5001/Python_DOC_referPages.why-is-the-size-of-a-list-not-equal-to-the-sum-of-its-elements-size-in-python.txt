Natural Text
Problem: In Python program, the size of the list in bytes is less than the size of all its elements. Here is my code to test. I use sys.getsizeof() to get the size of variables as bytes.What is the reason?
As per the documentation for : "Only the memory consumption directly attributed to the object is accounted for, not the memory consumption of objects it refers to."This means that the storage needs for each element will not be part of the number of bytes of the data structure () need. Thus, you will have to add the size of the list and the individual elements to get the total memory needed to store the structure.But the memory will still (normally) increase with an increasing list. This is because the  needs memory to hold the references to the elements. But, due to the underlying implementation, the list may request, or hold on to, more memory than is actually needed to keep its references. This is typically seen when executing a  operation on the list. This typically does not reduce the memory footprint of the  (your mileage may vary):Thus, typically when adding a new element, the  memory footprint will increase, but it will not decrease again once the element is popped. However, once an element is popped, there will be a "spare" position in the list that can be re-used for a new element (reference), which allows the list to increase its length without increasing its memory footprint.


Answer URL
https://docs.python.org/3/library/sys.html#sys.getsizeof
