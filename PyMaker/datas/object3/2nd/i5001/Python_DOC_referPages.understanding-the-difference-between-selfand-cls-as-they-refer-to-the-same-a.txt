Natural Text
I'm trying to understand f their are differencies between  and  but I'm struggle, even if it exists alot of topic about that. For instance:which give me:So whatever I use  or  It aways refer to the same variable. When I add a   in the , the cls.A is just replacedand I get:I don't understand the point having two way to call class member if they are the same? I know this is a common question on this forum but yet I really don't understand why we can use different words to refer to the same thing (we even could use whatever the word instead of  or )updateIn the following case:I get :So in this case, in   or  do not refer to the same variable.
All your methods are instance methods. None of them are class methods.The first argument to a method is named  only by convention. You can name it anything you want, and naming it  instead will not make it a reference to the class. That the first argument is bound to an instance is due to how method lookup works (accessing  produces a bound method object, and calling that object causes  to be passed into the original function ), the names of the parameters play no role.In your methods, you are merely referencing instance attributes. That the  attribute is ultimately only defined on the class doesn't matter, you are still accessing that attribute through  (where  is the instance you created), not . Looking up an attribute on the instance will also find attributes defined on the class if there is no instance attribute shadowing it.To make a method a class method, decorate it with the  decorator:Now  will always be a reference to the class, never to the instance. I need to stress again that it doesn't actually matter to Python what name I picked for that first argument, but  is the convention here as that makes it easier to remind the reader that this method is bound to the class object. Note that if you do this for the  method, then trying to access  in the method will fail because there is no  attribute on the  class object.That's because  wraps the function in a descriptor object that overrides the normal function binding behaviour. It is the descriptor protocol that causes methods to be bound to instances when accessed as attributes on the instance, a  object redirects that binding process.Here is a short demonstration with inline comments, I used the Python convertions for naming classes (using CamelCase), and for instances, attributes, functions and methods (using snake_case):Note that the class method accesses the class attribute even though we set an attribute with the same name on the instance.Next is binding behaviour:The bound methods tell you what they are bound to, calling the method passes in that bound object as the first argument. That object can also be introspected by looking at the  attribute of a bound method:


Answer URL
https://docs.python.org/3/library/functions.html#classmethod
https://docs.python.org/3/howto/descriptor.html
