Natural Text
I am having a hard time understanding the code below.. Especially the last line.Output of the code is . This code write the times of number the substring found in the string given above.Any explanation would be appreciated .
means loop  in range from  upto  (not including) and if a substring of  at index  and with length of  (i.e. upto index ) is equal to  then take  and collect them as list, i.e. the result is  because  is a substring of  two times.See Python List Comprehension for more details.It just sums the list described above,  equals to .
If you view the list of values generated by the for loop you will find it creates the list below:The list contains the substring you are searching for twice which is the result you obtain.
The code loops over the string indices from the start of "string" to the end minus the number of elements in subsring. The [] crates a list and 1 is wrtitten in there if the next 3 elements of the string are the same as sub_string. sum() returns the sum of the list. Since you included a 1 everytime you found sub_string, this counts the number of occurances of sub_string in string
its python so you have to read it backwards, 'if string contains substring, try to find number of substring occurrences.'  I'd write it this way:
It is a so called list comprehension, which has this syntax, that is why it may look like an  without visible outcome placed in a  loop.The steps are not complicated otherwise:we need all 3-character subsequences from the big string, the  part prepares the starting indices for those, 7-3+1=5, so the range will run from 0...4. You can check it in the interactive shell, it will say then the  thing creates a list, you can check that too:  will create but you want to compare things, with the  part. First you could check the substrings, instead of , write the substring thing: , as Karl Graham suggests and resulting in , then you could use the full comparison, , which produces in fact you can  this already,  will output 2, because  is counted as 1 and  as 0. Just here whoever created this code, decided to output actual numbers and used the optional  clause for the list comprehension, creating a list of 1-s, but only for the two matching positions:  displays and  adds those 1-s together, resulting in 2.Summary code for running as Python snippet or in a notebook (like here):


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
