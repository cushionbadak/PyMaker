Natural Text
Here is my code: This gives me the access to the csv file. I tried different method to deal with the download:This will give the the csv file in one string:This print the first row and return error: _csv.Error: new-line character seen in unquoted fieldThis will print a letter in each row and it won't print the whole thing:My question is: what's the most efficient way to read a csv file in this situation. And how to download it.thanks 
This should help:Ouput sample:Related question with answer: https://stackoverflow.com/a/33079644/295246Edit: Other answers are useful if you need to download large files (i.e. ).
To simplify these answers, and increase performance when downloading a large file, the below may work a bit more efficiently. By setting  in the GET request, when we pass   to csv.reader(), we are passing a generator to csv.reader(). By doing so, we enable csv.reader() to lazily iterate over each line in the response with . This avoids loading the entire file into memory before we start processing it, drastically reducing memory overhead for large files.
You can also use the  to iterate dictionaries of 
I like the answers from The Aelfinn and aheld. I can improve them only by shortening a bit more, removing superfluous pieces, using a real data source, making it 2.x & 3.x-compatible, and maintaining the high-level of memory-efficiency seen elsewhere:Too bad 3.x is less flexible CSV-wise because the iterator must emit Unicode strings (while  does ) because the 2.x-only version——is more Pythonic (shorter and easier-to-read). Anyhow, note the 2.x/3.x solution above won't handle the situation described by the OP where a NEWLINE is found unquoted in the data read.For the part of the OP's question regarding downloading (vs. processing) the actual CSV file, here's another script that does that, 2.x & 3.x-compatible, minimal, readable, and memory-efficient:
From a little search, that I understand the file should be opened in universal newline mode, which you cannot directly do with a response content (I guess).To finish the task, you can either save the downloaded content to a temporary file, or process it in memory.Save as file:In memory:(To be updated)
You can update the accepted answer with the iter_lines method of requests if the file is very large
The following approach worked well for me. I also did not need to use  or  functions, which I feel makes the code cleaner. The code is compatible with Python2 and Python 3.Note - six is a package that helps in writing code that is compatible with both Python 2 and Python 3. For additional details regarding six see - What does  do in Python?
I use this code (I use Python 3):


Answer URL
https://docs.python.org/3/library/csv.html#csv.DictReader
