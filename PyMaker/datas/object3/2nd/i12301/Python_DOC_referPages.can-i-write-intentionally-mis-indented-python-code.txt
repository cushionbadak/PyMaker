Natural Text
In free-form languages, sometimes I use indentation to represent some implicit structure in my statements. In the following example, I'm just doing a sequence of  but the indentation indicates that the first and fourth print statements are "bracketing" the two in the middle.Is there a way to do something similar in Python without triggering an ?So far, the best I could think is to use a vacuous  statement to introduce a new indentation level.
I, too, remember sometimes wanting such structure. This is what comes to mind (in C code that allows this mis-indentation):Note that we have a  and an , and from here on I'm going to assume that the same happens in your case: you want to denote the beginning and ending of something. Another situation would be opening and closing a file, or even the example in your question. Python has a specific feature for this: context managers. Python's documentation even has an example with exactly this:(this is not recommended as a real way of generating HTML!):I have to mention that context managers aren't simply a way to restructure your code, they can actually act on exceptions raised from the enclosed code, and execute some code regardless of the exception (e.g. to ensure that a file is closed). With the simple examples using  this does not happen because its default behavior is to simply re-raise the exception so no surprises happen.Other than this, the people you work with will not be happy about the false indentation. If you insist on it, sure,  is an option.
In general, no, indentation is significant in Python.Some alternatives that you can use are comments and line spacing:orYou could also consider breaking your code up into sub-functions, if it makes sense to do so.However, for the specific use-case of generating nested output (like HTML), I'd suggest using a templating library instead; writing raw HTML via string manipulation can lead to both hassle and bugs (especially when things like escaping of values is involved).


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager
