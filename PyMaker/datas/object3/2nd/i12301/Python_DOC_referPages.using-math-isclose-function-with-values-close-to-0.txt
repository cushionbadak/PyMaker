Natural Text
As we know, due to the binary representation of numbers, this expression evaluates to  (at least in Python):In order to be able to check for equality within numerical errors, the module  offers :This last expression yields  as expected.Now why does this following expression is  again?It appears that everything compared to  is 
The answer can be worked out by reading the documentation.Return True if the values a and b are close to each other and False otherwise.Whether or not two values are considered close is determined according to given absolute and relative tolerances.rel_tol is the relative tolerance – it is the maximum allowed difference between a and b, relative to the larger absolute value of a or b. For example, to set a tolerance of 5%, pass rel_tol=0.05. The default tolerance is 1e-09, which assures that the two values are the same within about 9 decimal digits. rel_tol must be greater than zero.abs_tol is the minimum absolute tolerance – useful for comparisons near zero. abs_tol must be at least zero.If no errors occur, the result will be: You use default tolerances which means that a relative tolerance check is used. And the equation above makes it clear why your expressions evaluates false. Consider the final expression in the question:Plug these values into the expression from the documentation and we haveI think it should be obvious that when performing a relative tolerance comparison, using default tolerances, no non-zero value is deemed close to zero. For very small values you should perhaps use an absolute tolerance. Or you should re-write the test to avoid comparing against zero. 


Answer URL
https://docs.python.org/3/library/math.html#math.isclose
