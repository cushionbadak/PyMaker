Natural Text
Ideally, the input is [1,2], and the output is all combinations [[1,1], [2,2], [1,2], [2,1]]. Basically, print all possible combinations with replacement.Returns[]In more human-readable form, the code basically says:And if we assume the recursive case with input , then should produce , and so for the recursive step we would want to insert  in every possible location. (This code might be missing the  case.)The code appears logically correct, but outputs an empty string.Is there something missing or am I approaching the problem incorrectly?EditActually, I realize the code would be slightly more complicated:Although this still strangely returns an empty list. My hunch is that I am missing a base case.EditIt was something to do with my base case. Revised code:But now returns[[3, 2, 1], [2, 1, 3], [3, 2, 2], [2, 2, 3], [3, 2, 3], [2, 3, 3], [3, 3, 1  ], [3, 1, 3], [3, 3, 2], [3, 2, 3], [3, 3, 3], [3, 3, 3]]Better now, although the output is missing sets. Seems like a base case issue again.
Found the answer here Algorithm for recursive function for permutations with replacement in pythonIt appears I was trying to take the recursive case of the list itself, rather than the size of the combinations.I'm wondering whether or not the solution would be do-able by recurring on the list, rather than the size of the combinations.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
