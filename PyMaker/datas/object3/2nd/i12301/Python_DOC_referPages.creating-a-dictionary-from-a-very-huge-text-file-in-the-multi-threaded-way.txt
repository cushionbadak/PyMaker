Natural Text
I have a huge text file for which I want to create a dictionary (Counter).Currently, I am doing it using the following code:but, since the file is huge, it takes a lot of time.So, I am looking for a faster way of doing this.The most straight forward solution that comes into mind is storing a bunch of lines in a list (small batches) and process each batch separately (in parallel with the other batches), and at the end, merging the results.This way, we can save a lot of time and can process the previously seen batches (in parallel) while the main thread is reading next batch of lines from file.something like:Here, the update_dictionary() method reads all the sentences in the given list and updates its local  dictionary. Once it is done, its local dictionary should be merged with the global one.I tried for a couple of hours, but unfortunately since I never implemented a multi-threaded code in Python, I couldn't manage to make it work.Could you please help me to implement this idea?Thank you very much.
The concurrent futures module uses processes instead of threads to get around the GIL issue.  You can submit tasks to a pool to be processed in parallel.  When you submit a task to the threadpool, it returns an object that represents a running task (this is called a future).  You can start multiple tasks this way.  When you are ready to get the result of the task, you can call future.result().  Here is an example that gets the total length of all the strings in a list in parallel:This is a first attempt to help get you started.
This sounds like the canonical Word Count example from all Map-Reduce literature. If this is anything other than a one-off analysis, and your input file really is Huge (as in Big Data), you may consider leveraging Hadoop or Spark.The very first example on the Spark example page has something that you could copy, nearly verbatim:Download Spark and get it working locally, then scale out the problem in EMR (with S3 for your file system), as needed.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor
