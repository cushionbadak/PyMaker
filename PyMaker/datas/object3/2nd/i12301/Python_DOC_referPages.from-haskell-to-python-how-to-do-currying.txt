Natural Text
I recently started coding in Python and I was wondering if it's possible to return a function that specializes another function.For example, in Haskell you can create a function that adds 5 to any given number like this:Is it somehow possible in Python?
I think the other answers are misunderstanding the question. I believe the OP is asking about partial application of a function, in his example the function is .If the goal isn't partial application, the solution is as simple as:For partial application in Python, we can use this function: https://docs.python.org/2/library/functools.html#functools.partialThen, we must turn the  operator into a function (I don't believe there's a lightweight syntax to do so like in Haskell):Finally:Not nearly as nice as in Haskell, but it works:
Python's design does not naturally support the evaluation of a multi-variable function into a sequence of single-variable functions (currying). As other answers point out, the related (but distinct) concept of partial application is more straightforward to do using  from the functools module.However, the PyMonad library supplies you with the tools to make currying possible in Python, providing a "collection of classes for programming with functors, applicative functors and monads."Use the  decorator to decorate a function that accepts any number of arguments:It is then very easy to curry . The syntax is not too dissimilar to Haskell's:Note that here the  and  functions are instances of PyMonad's  monad class, not a normal Python function object:This allows, for example, the possibility of using simpler syntax to  compose functions (easy to do in Haskell, normally much less so in Python).Finally, it's worth noting that the infix operator  is not a Python function:  calls into the left-hand operand's  method, or the right-hand operand's  method and returns the result. You'll need to decorate these class methods for the objects you're working with if you want to curry using  (disclaimer: I've not tried to do this yet).
Yup.  Python supports lambda expressions:
Python functions can return functions, allowing you to create higher-order functions. For example, here is a higher-order function which can specialize a function of two variables:Used like this:But -- there is really no need to reinvent the wheel, the module functools has a number of useful higher-order functions that any Haskell programmer would find useful, including  for partial function application, which is what you are asking about.
As it was pointed out, python does have lambda functions, so the following does solve the problem: I think this is more useful with the fact that python has first class functions (1,2)You can find more on functional programming and python here
For the most generic Haskell style currying, look at  from the  module.


Answer URL
https://docs.python.org/3/library/functools.html#functools.partial
