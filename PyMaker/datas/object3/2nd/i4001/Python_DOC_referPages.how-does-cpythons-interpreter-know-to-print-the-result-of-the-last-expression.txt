Natural Text
I've been digging around the source code to figure-out at which point the result is printed. For example:The above two statements are compiled to:and The first statement doesn't print anything because  is the returned value. The second returns the result of the addition.CPython's interactive loop calls  for each input. This gets the AST and invokes  to compile that AST to byte code and then evaluate the result in the virtual machine. The returned Python object that  gets is simply the top of the VM's stack.So far all of this is what I would expect. But then the returned value seems to be thrown away! When is this printed by the REPL?As an aside, I can see that interactive mode does change the tokenizer; it  with the  prompt ( by default). I checked for a similar change in , but no luck.
You are showing disassemblies of the bytecode as generated by having the code in a function.  That isn't how interactive code is compiled: it uses a special 'single' mode (3rd parameter to , if you were doing the equivalent in Python code).  In this mode, the  opcode that discards the value of each expression gets turned into a  instead.  The reason why  prints nothing is that statements leave nothing on the stack that needs to be popped, so this transformation doesn't apply.
Correct answer from @jasonharper! For posterity, here's a deeper look of what's going on.The above disassembly shows the results of  mode:The opcodes can be viewed with:The two numbers following the opcode represent a 16-bit operand, though only the first byte is what we need here. So this corresponds to:Those operands are indices to the compiled code object's variable names and constant pool, respectively.So far, this is what we have in the question. But in reality, executing Python code results in:I.e., the result is discarded and a  is introduced as the return value.In interactive mode, we have:The result is printed (via ) and a  becomes the actual return value.So the printing is introduced by the code generation phase, not by the VM.


Answer URL
https://docs.python.org/3/library/sys.html#sys.displayhook
