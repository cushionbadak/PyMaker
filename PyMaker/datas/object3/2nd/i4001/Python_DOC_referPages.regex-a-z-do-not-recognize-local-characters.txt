Natural Text
I've checked other problems and I've read their solutions, they do not work. I've tested the regular expression it works on non-locale characters. Code is simply to find any capital letters in a string and doing some procedure on them. Such as  would return  however my code do not recognize  as a letter within . When I try  as some people request I get error  when I use Works for  doesn't work for  and throws error for . The Error I'm getting is  Searching for it yielded some git discussions but nothing useful.
The problem is that  is not in the range . That range is the class of all characters whose codepoints lie U+0040 and U+005A (inclusive). (If you were using bytes-mode, it would be all bytes between 0x40 and 0x5A.) And  is U+0153 (or, e.g., 0xAA in bytes, assuming latin2). Which isn't in that range.And using a locale won't change that. As  explains, all it does is:Make \w, \W, \b, \B and case-insensitive matching dependent on the current locale.Also, you almost never want to use . As the docs say:The use of this flag is discouraged as the locale mechanism is very unreliable, it only handles one “culture” at a time, and it only works with 8-bit locales.If you only care about a single script, you can build a class of the appropriate ranges for that script.If you want to work with all scripts, you need to build a class out of a Unicode character class like  for "all uppercase letters". Unfortunately, Python's  doesn't have a mechanism for doing this directly. You can build a giant class out of the information in , but that's pretty annoying:And then:… or maybe:But the good news is that part of the reason  doesn't have any way to specify Unicode classes is that for a long time, the plan was to replace  with a new module, so many suggested new features for  were rejected. But the good news is that the intended new module is available as a third-party library, . It works just fine, and is a near drop-in replacement for ; it was just improving too quickly to lock it down to the slower Python release schedule. If you install it, then you can write your code this way:The only change I made was to replace  with , and then use  instead of .There are, of course, lots of other regex engines out there, and many of them also support Unicode character classes. Most of those that do follow some variation on the same  syntax. (They all copied it from Perl, but the details differ—e.g., 's idea of Unicode classes comes from the  module, while  and  attempt to be as close to Perl as possible, and so on.)
abarnet's answer is great, but if all you want to do is find upper case characters,  works without the need for an extra module.or perhaps


Answer URL
https://docs.python.org/3/library/re.html#re.LOCALE
