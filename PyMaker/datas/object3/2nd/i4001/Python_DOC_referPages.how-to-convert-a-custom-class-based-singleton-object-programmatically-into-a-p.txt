Natural Text
I would like to convert a singleton-object programmatically into a Python module so that I can use the methods of this singleton-object directly by importing them via the module instead of accessing them as object attributes. By "programmatically" I mean that I do not want to have to copy-paste the class methods explicitly into a module file. I need some sort of a workaround that allows me to import the object methods into to global scope of another module.I would really appreciate if someone could help me on this one.Here is a basic example that should illustrate my problem:mymodule.pymain_as_is.pymain_to_be.py
You can use the same strategy that the standard  module uses. All the functions in that module are actually methods of a "private" instance of the  class. That's convenient for most common uses of the module, although sometimes it's useful to create your own instances of  so that you can have multiple independent random streams.I've adapted your code to illustrate that technique. I named the class and its instance with a single leading underscore, since that's the usual convention in Python to signify a private name, but bear in mind it's simply a convention, Python doesn't do anything to enforce this privacy. mymodule.pymain_to_be.pyoutput BTW, the  syntax is ok if you only import a small number of names, or it's clear from the name which module it's from (like math module functions and constants), and you don't import from many modules. Otherwise it's better to use this sort of syntax That way it's obvious which names are local, and which ones are imported and where they're imported from. Sure, it's a little more typing, but it makes the code a whole lot more readable. And it eliminates the possibility of name collisions.FWIW, here's a way to automate adding all of the  methods without explicitly listing them (but remember "explicit is better than implicit"). At the end of "mymodule.py", in place of , add this: I'm not comfortable with recommending this, since it directly injects items into the  dict. Note that that code will add all class attributes, not just methods.In your question you talk about singleton objects. We don't normally use singletons in Python, and many programmers in various OOP languages consider them to be an anti-pattern. See https://stackoverflow.com/questions/12755539/why-is-singleton-considered-an-anti-pattern for details. For this application there is absolutely no need at all to use a singleton. If you only want a single instance of  then simply don't create another instance of it, just use the instance that  creates for you. But if your boss insists that you must use a singleton, please see the example code here.


Answer URL
https://docs.python.org/3/library/random.html
https://docs.python.org/3/tutorial/classes.html#private-variables
