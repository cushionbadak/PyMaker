Natural Text
I want to list all possible words with n letters where the first letter can be a1 or a2, the second can be b1, b2 or b3, the third can be c1 or c2, ... Here's a simple example input-output for n=2 with each letter having 2 alternatives:input = [["a","b"],["c","d"]]output = ["ac", "ad", "bc", "bd"]I tried doing this recursively by creating all possible words with the first 2 letters first, so something like this:However, this becomes incredibly slow for large n or many alternatives per letter. What would be a more efficient way to solve this?Thanks
I think you just want  here:Or, if you wanted them joined into words:Or, with your example:Of course for very large  or very large sets of letters (size ), this will be slow. If you want to generate an exponentially large set of outputs (), that will take exponential time. But at least it has constant rather than exponential space (it generates one product at a time, instead of a giant list of all of them), and will be faster than what you were on your way to by a decent constant factor, and it's a whole lot simpler and harder to get wrong.
You can use the  from the built-in itertools module to achieve this, like so
Generating all strings of some length with given alphabet :test.py :$ python2 test.pyNext Way :Next Way :Next Way :


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
