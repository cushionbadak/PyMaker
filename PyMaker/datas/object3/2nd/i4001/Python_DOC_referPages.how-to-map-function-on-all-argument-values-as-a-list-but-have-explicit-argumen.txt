Natural Text
I want to define a function using explicit argument names  in the function definition, but I also want to map a function over all arguments to get a list:However, I don't want to explicitly write parameter names inside function as a,b,c. I want to do it like will retrieve the argument values in order and form a list. How to do this? Is there a built-in function like ?
What you're trying to do is impossible without ugly hacks. You either take  and get a sequence of parameter values that you can use as :… or you take three explicit parameters and use them by name:… but it's one or the other, not both.Of course you can put those values in a sequence yourself if you want:… but I'm not sure what that buys you.If you really want to know how to write a  function anyway, I'll explain how to do it. However, if you're looking to make your code more readable, more efficient, more idiomatic, easier to understand, more concise, or almost anything else, it will have the exact opposite effect. The only reason I could imagine doing something like this is if you had to generate functions dynamically or something—and even then, I can't think of a reason you couldn't just use . But, if you insist:If you want to know how it works, most of it's in the  module docs: gets the current frame—the frame of . gets the parent frame—the frame of whoever called . gets the code object compiled from the function body of whoever called . is a list of all local variables in that body, starting with the parameters. is a count of explicit positional-or-keyword parameters. is a dict with a copy of the  environment of the frame.This of course only works for a function that takes no , keyword-only args, or , but you can extend it to work for them as well with a bit of work. (See , , , and  for details.)Also, this only works for CPython, not most other interpreters. and it could break in some future version, because it's pretty blatantly relying on implementation details of the interpreter.
The  construction will give you the arguments as a list:If you are bound with the signature of , you'll have to use the  module: gives you the list of arguments in the correct order. The values are in .


Answer URL
https://docs.python.org/3/library/inspect.html
https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists
