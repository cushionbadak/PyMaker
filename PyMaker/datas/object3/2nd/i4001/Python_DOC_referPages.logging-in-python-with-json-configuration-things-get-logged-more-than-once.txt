Natural Text
I am using Python 3, and I am learning how to use logging. I am looking at the code from https://docs.python.org/3/howto/logging-cookbook.html and https://fangpenlin.com/posts/2012/08/26/good-logging-practice-in-python/. I tried to modify part of the first two code blocks in the first link, the main module and the auxiliary module, to use a JSON file. But when I ran the main file, I get certain log outputs repeated 3 times, but I don't know why, or what to change so that lines aren't repeated but are still outputted to the same .log file..log file:.log file outputMy JSON file:and for the main file:And for the auxiliary_module fileThanks in advance
Short answerThis is because of a special property called . It is a flag that determines whether a logger should pass a log record to its parent logger () or not (). You need either to remove the common configuration from the intermediate loggers, leaving only the unique stuff, or pass  to all the loggers.Long answerloggers hierarchy and log record propagationAll loggers in Python are organized in a hierarchy: there is always a root logger, returned when you call  without a name:All the loggers you create with a name are children of the root logger, sohas  as parent. Now, when you call , the following happens:  willhandle the record itselfcheck whether it has  set to , if yes, then it will pass the record to its parent logger (the root logger in this case), which will also handle the record.This is also visualized in the logging flow diagram, you can check it out if you want.Now, you can probably already guess what happens if I configure both loggers like this:On each incoming log record, the  writes the record to , then passes the record further up to , which also writes the record to . So the record will appear twice in the end.module namespace hierarchyHowever, the question is: why there are three copies of some records in the debug log? The answer is found in Advanced Logging Tutorial:Each [logger] instance has a name, and they are conceptually arranged in a namespace hierarchy using dots (periods) as separators. For example, a logger named  is the parent of loggers ,  and .So now you can evaluate the logger hierarchy in your code:solutionThe propagation of records in the logging hierharchy has the advantage that you don't need to repeat the configuration for each logger. So, when your application should log to , add the  to root logger once and it will already serve all the other loggers, no matter whether you add them to config or not.This way, your initial config can be reduced to:The alternative to that would be passing  to each explicitly configured logger so the messages won't be handled multiple times by the :


Answer URL
https://docs.python.org/3/howto/logging-cookbook.html
https://docs.python.org/3/library/logging.html#logging.Logger.propagate
https://docs.python.org/3/howto/logging.html#logging-flow
https://docs.python.org/3/howto/logging.html#advanced-logging-tutorial
