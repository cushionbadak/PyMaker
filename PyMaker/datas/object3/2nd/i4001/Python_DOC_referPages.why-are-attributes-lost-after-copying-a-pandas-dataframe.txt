Natural Text
Why is it not possible to pass attributes of an instance through a copy? I want to pass the  attribute to another dataframe.Similarly, why does this also not work, when creating a class and inheriting from it?and using the same code:
As noted elsewhere, the  class has a custom  method which does not necessarily copy arbitrary attributes assigned to an instance, as with a normal object.Interestingly, there is an internal  attribute that seems intended to be able to list additional attributes of an  that should be kept when copying/serializing it.  This is discussed some here: https://github.com/pandas-dev/pandas/issues/9317Unfortunately this is still considered an undocumented internal detail, so it probably shouldn't be used.  From looking at the code you can in principle do:and when you copy it it should take the name with it.You could subclass  to make this the default:You could also do this without relying on this internal  attribute if you provide your own wrapper to the existing  method, and possibly also  and .Update: It seems actually use of the  attribute for extending Pandas classes is now documented.  So the above example should more or less work. These docs are more for development of Pandas itself so it might still be a bit volatile. But this is how Pandas itself extends subclasses of .
The  will use a custom  method if it is found in the MRO, which may return whatever it likes (including completely bogus results).  Indeed dataframes implement a  method:It delegates to , where you will find this note in the docstring:And you will find in the v0.13 release notes (merged in PR 4039): now returns a shallow copy (currently: a view) of the data - allowing metadata changes.Related issue: 17406.
Attaching custom metadata to DataFrames seems to be unsupported for pandas. See this answer (possible duplicate?) and this github issue.
This code is worked:so I think that behavior is defined by I found that pandas define the function , but I cannot totally understand the reason.pandas/core/indexes/base.py#L960


Answer URL
https://docs.python.org/3/library/copy.html#copy.deepcopy
