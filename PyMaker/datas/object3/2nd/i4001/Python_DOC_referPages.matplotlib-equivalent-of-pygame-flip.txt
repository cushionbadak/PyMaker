Natural Text
I have a program with rapid animations which works perfectly under pygame, and for technical reasons, I need to do the same using only matplotlib or an other widespread module.The program structure is roughly:I have no low level matplotlib experience, but I think it is possible to do equivalent things with matplotlib. In other words : How to share the bitmap of a figure, modify some pixels and refresh the screen ?Here is a minimal working exemple, which flips 250 frames per second (more than the screen ...) on my computer : EDITWhat I try with indications in answers : But this only provides 20 fps....
It should be noted that the human brain is capable of "seeing" up to a framerate of ~25 fps. Faster updates are not actually resolved. MatplotlibWith matplotlib and its  module the example from the question runs with 84 fps on my computer.PyQtGraphIn pyqtgraph a higher framerate is obtained, it would run with 295 fps on my computer.
If you want to animate a plot, then you can take a look at the animation functionality in matplotlib under . Here's a great tutorial - https://jakevdp.github.io/blog/2012/08/18/matplotlib-animation-tutorial.If you just want to periodically update an adhoc bitmap, I am not sure matplotlib is meant for what you are trying to achieve. From matplotlib docs:Matplotlib is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. If you would like to periodically update an adhoc image on the screen, you may want to look into GUI libraries for python. Here is a short summary of available options - https://docs.python.org/3/faq/gui.html. Tkinter is a pretty standard one and is shipped with python. You can use the  module in  to create/modify images for displaying via Tkinter - http://pillow.readthedocs.io/en/4.2.x/reference/ImageTk.html.
If you just need to animate a  canvas the animation framework is the answer. There's a simple example here that does basically what you ask.If this is going to be part of a more complex application you probably want finer control over a specific backend.Here's a quick attempt using  loosely based on this matplotlib example.It's using a  for the updates, probably there's also some idle callback in  you could attach to.One thing you should be careful with is that  computes the image normalization on the first frame. In the subsequent frames it's calling  so the normalization stays the same. If you want to update it you can call  instead (probably slower). Or you could just fix it manually with  and  in the first  call and provide properly normalized frames.
Given you talked about using widespread modules, here's a proof of concept using . It runs pretty fast here, up to 250-300 generated frames per second. It's nothing too fancy, just to show that maybe if you're not using any plotting feature  shouldn't really be your first choice.


Answer URL
https://docs.python.org/3/faq/gui.html
