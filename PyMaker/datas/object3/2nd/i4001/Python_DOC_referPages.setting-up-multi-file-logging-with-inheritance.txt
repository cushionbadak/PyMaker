Natural Text
I am setting up my first multi-file project using modules (Python 3.6), and I am having some trouble setting up a coherent way to log. I want my whole project to have the same logging level across all modules, and know that child loggers inherit the properties of their parents. So when I have my 2 files set up like this:main.py::I getas expected. But when I substitute the logger names for in both the root and module, () in both cases, I get no output. I am trying to do it this way to avoid having to refactor etc in case something changes down the line. What am I missing? Or is there a better way to set up logging that may be more scalable etc.?Thank you so much for your help!EDIT: I've seen this, which works, but would like to have some more granularity if possible, like having custom names for the loggers etc. Though if not possible I can use it.
The  of the file executed is always . Setting up a loggers by name will thus not have it be the root of the rest of your modules. In your case, you have the following loggers:Furthermore, you probably want to add more packages like  later on - these will form even more hierarchies!So, how to solve this?Configure the root logger in Using the name  or  gives you the root logger for all others. Its settings are inherited by all others. While a library should not configure the root loggers, an application should.This is preferable if your modules are actually a library, and your  is just one executable using it.Fixed name loggersSame as you do now, explicitly setting logger names. This has the added benefit of decoupling your loggers from implementation details.Package based loggersIf you reorganise all your modules into a single package, you can use the  name.Note that  should then be called as .Purpose based loggersUse names appropriate to functionality, not position. Note that you can use the same name/logger multiple times!Note that using a hierarchy of loggers is not about scalability! The most performant approach is using the same logger everywhere.
If all your python module uses the exact same logger I highly recommend to use directly the 'logging.info('blabla')' instead of creating multiple loggers for each python files. That will suit your purpose best.Florent


Answer URL
https://docs.python.org/3/howto/logging.html#logging-from-multiple-modules
