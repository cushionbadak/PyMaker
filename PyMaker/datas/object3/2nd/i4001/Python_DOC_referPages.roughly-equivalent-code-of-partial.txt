Natural Text
In the official docs 10.2. functools about partialRoughly equivalent to:I guess it could be better if refactor it as:or Does my assumption make sense?
Your first version doesn't quite work, because, as the docs explain:If additional keyword arguments are supplied, they extend and override keywords.When you do two keyword splats, as in your version, you don't override duplicated keywords; instead, you get a , as explained in :If the syntax **expression appears in the function call, expression must evaluate to a mapping, the contents of which are treated as additional keyword arguments. If a keyword is already present (as an explicit keyword argument, or from another unpacking), a TypeError exception is raised.Compare:Your second version doesn't work for four reasons: is a tuple, and tuples don't have . Being immutable, there's rarely a reason to copy them.Tuples also don't have , being immutable.Even if they were lists,  would add the new argument list as a single argument to the end, but you want to add them all as separate arguments. That's what  is for.Finally, you used  instead of .You could fix all of that by doing something like this:But a simpler (and more efficient) way to write that would be:And this is in fact pretty close to how  used to be documented before Python allowed multiple splats in a single call in 3.5. In both 3.4 and 2.7:The only difference is they do the  directly in the splat, instead of assigning it to a  variable.


Answer URL
https://docs.python.org/3/library/functools.html#functools.partial
https://docs.python.org/3/reference/expressions.html#calls
