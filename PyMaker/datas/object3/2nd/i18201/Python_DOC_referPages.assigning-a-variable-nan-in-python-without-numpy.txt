Natural Text
Most languages have a NaN constant you can use to assign a variable the value NaN.  Can python do this without using numpy?
Yes -- use . As of Python 3.5, you can also use .The  function is case-insensitive -- doing  or  or similar things will also work.Note that checking to see if two things that are NaN are equal to one another will always return false. This is in part because two things that are "not a number" cannot (strictly speaking) be said to be equal to one another -- see What is the rationale for all comparisons returning false for IEEE754 NaN values? for more details and information. Instead, use  if you need to determine if a value is NaN or not.Furthermore, the exact semantics of the  operation on NaN value may cause subtle issues when trying to store NaN inside container types such as  or  (or when using custom container types). See Checking for NaN presence in a container for more details.You can also construct NaN numbers using Python's decimal module: will also work with Decimal objects.However, you cannot construct NaN numbers in Python's fractions module:Incidentally, you can also do , , or  (3.5+) to assign infinite numbers. (And also see )However doing  or  isn't permitted and will throw an exception, just like NaN.If you want a quick and easy way to check if a number is neither NaN nor infinite, you can use  as of Python 3.2+.If you want to do similar checks with complex numbers, the  module contains a similar set of functions and constants as the  module: (Python 3.2+) (Python 3.6+; equivalent to ) (Python 3.6+; equivalent to ) (Python 3.6+; equivalent to ) (Python 3.6+; equivalent to )
And now you have the constant, .You can similarly create NaN values for decimal.Decimal.:
Use :
You can do  to get NaN.
You can get NaN from "inf - inf", and you can get "inf" from a number greater than 2e308, so, I generally used:
A more consistent (and less opaque) way to generate inf and -inf is to again use float():Note that the size of a float varies depending on the architecture, so it probably best to avoid using magic numbers like 9e999, even if that is likely to work.


Answer URL
https://docs.python.org/3/library/math.html#math.nan
https://docs.python.org/3/library/math.html#math.isnan
https://docs.python.org/3/library/decimal.html
https://docs.python.org/3/library/fractions.html
https://docs.python.org/3/library/math.html#math.inf
https://docs.python.org/3/library/math.html#math.isinf
https://docs.python.org/3/library/math.html#math.isfinite
https://docs.python.org/3/library/cmath.html#cmath.isinf
https://docs.python.org/3/library/cmath.html#cmath.isinf
https://docs.python.org/3/library/cmath.html#cmath.isfinite
https://docs.python.org/3/library/cmath.html#cmath.nan
https://docs.python.org/3/library/cmath.html#cmath.nanj
https://docs.python.org/3/library/cmath.html#cmath.inf
https://docs.python.org/3/library/cmath.html#cmath.infj
