Natural Text
My question is: how to generate a random password with a  length that varies from (8 to 12 characters) each time generated. This is my code: 
 always returns array , so you always get a password of length 4.Instead, determine the size of this particular password using  ahead of time:

 only returns numbers between  (which you've hardcoded to 8) and 12, so your passwords will only be 4 characters long. Make that .
I believe it's only printing 4 characters due to and . This translates to range(8, 12) = 4 characters. You could increase the second number to allocate for a larger range to print random characters for like soAlso be sure to check out python's random documentation here.
A couple of nuances to this question:Some answers employ , but this isn't a good idea since that contains whitespace characters. While they are not strictly illegal for passwords, you cannot easily see them and therefore cannot differentiate, say, a tab from several spaces (and so on). Below I only employ lower & uppercase letters, digits and punctuation characters.Randomly choosing from a set of characters based on element-position isn't random since the cardinality of each included character-class isn't uniformly distributed: 26 Lowercase letters; 26 Uppercase letters; 10 Digits; 32 Punctuation characters. Therefore generated passwords are likely to have more letters than punctuation characters and digits; and more punctuation characters than digits; (and so ono). So if is used (as in other answers), one should also employ it's  and  options, to eliminate aforementioned biases by evening out the distribution.That said, I encourage use of Python's  module rather that its  module for this use case. From their documentation on random:Warning: The pseudo-random generators of this module should not be used  for security purposes. For security or cryptographic uses, see the  secrets module.Here is one functionally-oriented solution using Python-3. It uses  only. It doesn't totally solve the random problem (other nuances remain), but it does improve selection-distribution to reduces bias:DEMO: Generate 10 variable-length password-strings using characters uniformly selected from each of our character classes:Finally, while we used the  module here, something similar could be done using  and . I hope this helps!


Answer URL
https://docs.python.org/3/library/random.html
https://docs.python.org/3/library/secrets.html#module-secrets
