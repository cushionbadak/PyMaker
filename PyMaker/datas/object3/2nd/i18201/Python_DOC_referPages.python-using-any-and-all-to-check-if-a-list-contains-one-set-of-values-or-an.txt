Natural Text
My code is for a Tic Tac Toe game and checking for a draw state but I think this question could be more useful in a general sense.I have a list that represents the board, it looks like this:When a player makes a move the int they moved on is replaced with their marker ('x' or 'o'), I already have checks in place to look for a winning state, what I can't do is check for a draw state, where none of the list values are ints but a winning state has not been set.The code I have so far:The if statement works, the elif does not, I think the problem is my 'or' operator, what I want to check for is: if the every item on the board is either playerOne marker or playerTwo marker, if I where to make the code:I would be checking to see if every place on the board was playerOne or every place on the board is playerTwo, which it won't be.So how do I check if the board is taken up by a combination of playerOne markers and playerTwo markers?
 and  are functions that take an iterable and determine......in the case of : if all the values in that iterable are non-;...in the case of : if any of the values in that iterable is non-.The above definitions make sense also in case of an empty iterable, otherwise one could more naturally say that  sees if all values are true, and  sees if any value is true. So you misunderstood a little bit how these functions work. Hence, the following does something completely not what you thought:...because  would first be evaluated to either  or , and then that boolean value would be compared to , which generally always gives you  (unless  happens to be the same boolean value).Note: the iterable can be a list, but it can also be a generator/generator expression (≈ lazily evaluated/generated list) or any other iterator.What you want instead is:which basically first constructs an iterable that yields a sequence of booleans—for each item in , it compares the item to  and emits the resulting boolean to the resulting sequence:then  walks over all items in  and returns  as soon as it finds the first  item. It's as if you did the following:Note: As DSM pointed out,  is equivalent to  but the latter is more readable, quicker to write and runs faster.Some examples:I would strongly suggest simply playing with  and  with various inputs on the Python shell, or better yet, on the IPython shell to get a feel of how this works before you continue writing actual code.See also: http://docs.python.org/2/library/functions.html#all


Answer URL
