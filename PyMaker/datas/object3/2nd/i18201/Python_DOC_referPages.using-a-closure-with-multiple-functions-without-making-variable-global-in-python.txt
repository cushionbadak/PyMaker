Natural Text
I'm trying to make an example program in Python 2.7 which saves/shares states between two functions.You call a function, next time you call a function, it should remember the previous value. Here is my current code:This code works, BUT the catch is that  must not be considered as a global variable outside the scope of ... (That is the whole point of embedding x within  in the first place). So, would  be global, or is it local to ?
If you need to support python 2.X, @georgek's answer is the best, but a lot of people don't realize that you can add attributes to functions.  A common idiom is to use a list of a single element to hold the variable.This works because you never assign to x itself in the internal scopes, so it doesn't rebind the variable and shadow the closure.
In Python 3.x, you can use  statement:
Easiest and least hacky solution, use a class:Result:You want to prevent people from accessing  from outside the functions at all. The way you do that in Python is by prefixing it with an underscore:This tells other Python programmers that it is internal, and not to access it, except on their own risk. You seem to want to prevent even this, but you can't. You can even access the closure in the Python 3 nonlocal example as well:So you aren't preventing anyone from fiddling with it, you just make the fiddling it obscure and brittle. and more likely to fail. As such you just end up making things more difficult for everyone involved.
You can use a function without global:


Answer URL
