Natural Text
It looks like this or this are somewhat related threads, but still haven't figured things out :)I'm trying to create a subclass of  and provide different initializers so that I can construct objects in different ways.  For example:However, that doesn't work:After some poking around (for example, see this thread) I tried to use constructors instead of initializers:which seemed to construct an object but then I can't read its attributes:Where am I going wrong here?  How can I create a subclass with multiple constructors or initializers?
Named tuples are immutable, so you cannot manipulate them in the  initializer. Your only option is to override the  method:Note that because  is a factory method for new instances, you do need to return the newly created instance. If you do not use  in the  method, the default return value is , which gives you your error.Demo with an object with  and  attributes:Python does not support method overloading; generally you either use optional keyword arguments or extra class methods as factory methods.The  module, for example, has several such factory methods to let you create objects  that do not fit the standard constructor.  creates a  instance from a single numeric value, and so does ; except that they interpret the number in different ways.If you wanted to support variable arguments, do:Here,  is an optional argument, defaulting to  if not supplied by the caller:The alternative, using a class method, would be:Now there are two factory methods; one default and one named:
Two things: one, you're not really getting much out of namedtuple here, as far as i can tell. So maybe you should just switch to a normal class. Also, you can't overload theSecond, other possibilities which might help with your problem:Factory design pattern - instead of putting the different parameters in the constructor, have a class that takes different kinds of parameters and calls the constructor with appropriate arguments, outside the object.recordtype - a mutable namedtuple, that allows defaults but would also let you write your subclass the way you originally wanted.bunch - not exactly a named tuple, but lets you create somewhat arbitrary objects. 
There is a workaround to changing the attribute of a namedtuple.
I suggest you use the the  method


Answer URL
