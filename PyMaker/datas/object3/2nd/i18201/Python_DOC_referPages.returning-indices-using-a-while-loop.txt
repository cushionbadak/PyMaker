Natural Text
I'm trying to take an input of a list of numbers and return the list of indices in the original list that contain negative values.  I also want to use a while loop.  Here is my code so far.How to I stop the loop and how do i get the indices to return?  Right now when I run it, it runs forever (infinite loop)  how do I tell it to stop once it hits the last indices of myList?
When you hit your first non-negative number, the  is never entered again and  never gets incremented again. Put the part where you increment  outside the  block.
Assume, the conditional  is not true. In that case,  won’t be incremented and nothing else happens either. So you will end up in the next iteration, with the same value of  and the same conditional. Forever, in an endless loop.You will want to increment  regardless of whether you matched something or not. So you will have to put the increment outside of the  conditional. Furthermore, you want to increment  after appending the index to the list, so you actually append the index you tested, and not the one afterwards:Also, you would usually use a  loop here. It will automatically take care of giving you all the values of  which you need to index every element in . It works like this: will give you a sequence of values for every number from zero to the length of the list (not including the length itself). So if your list holds  values, you will get the values , ,  and  for . So you won’t need to take care of incrementing it on your own.Another possibility would be  as Foo Bar User mentioned. That function will take a sequence, or list in your case, and will give you both an index and the value at the same time:As you can see, this completely removes the need to even access the list by its index.
OP wants to use a while loop, so this answer is not exactly on point - but I feel I should point out that many pythonistas will expect something like:This is implicit in the other answers, however it might be useful for lurkers and for OP to consider down the road...  While certainly does the job as the other answers show, but its 'free' in a list comprehension; plus, there's no chance of an infinite loop here....


Answer URL
