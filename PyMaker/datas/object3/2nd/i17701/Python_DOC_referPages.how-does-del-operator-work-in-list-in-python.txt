Natural Text
I have read the  for  and how the  operators works, but I need explanation for the following behaviorIn this case,  and  points to the same object(list), so doing changes on one affects the other, but deleting one does not delete the object. So what happens here? Is it just the  to the list object is lost?Deletion by slice operation returns the new list. but  does in-place deletion. So in this case, is not a new list being returned? What exactly is happening here?
 and  are bound to the same object. They both are references to a list, and manipulating that list object is visible through both references.  unbinds ; it removes the reference to the list. removes a specific set of indices from the list, you are now operating on the list object itself. You are not unbinding , you are unbinding indices inside of the list.You can compare this with retrieving and setting values as well.  is different from  and  is different from ; the first of both examples accesses just the list object, or assign a new value to , the latter examples retrieve a slice of values or set new values to the sliced indices.Under the hood,  removes the name  from the dictionary handling all variables ( gives you a reference to this dictionary).  calls the  special method on the list, passing in a  object.


Answer URL
