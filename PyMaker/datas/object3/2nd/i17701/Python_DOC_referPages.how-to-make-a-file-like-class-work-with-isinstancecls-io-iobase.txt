Natural Text
It seems that checking  is the 'correct' way to determine if an object is 'file-like'. However, when defining my own file-like class, it doesn't seem to work:How can I make it work?
Checking  only checks if  is an instance of an  or a class derived from it — so I don't understand where you got the mistaken idea that it's the "correct" way to determine if an object is "file-like".A different way to do it is with an Abstract Base Class. Python has a number of built-in ones, but currently doesn't have one for "file-like" that could used with . However you can define your own by using the  module as outlined in PEP 3119.The Python Module of the Week webiste has a good explanation of using the  module to do things like as this. And this highly rated answer to the question Correct way to detect sequence parameter? shows a similar way of defining your own ABC.To illustrate applying it to your case, you could define an ABC like this with all its methods abstract — thereby forcing derived classes to define all of them in order to be instantiated:You could then derive your own concrete classes from it, making sure to supply implementations of all the abstract methods. (If you don't define them all, then a  will be be raised if any attempts are made to instantiate it.)You can even add existing classes to it by registering them with the new metaclass:
 just iterates up obj's inheritance chain, looking for . Thus , will be false, as your  class doesn't have  in its ancestry.  doesn't designate an explicit parent, hence it implicitly inherits only from . That's the only class - besides  itself - that will test positive for a  instance with .What you are doing in  is defining the methods expected on a file-like object while not inheriting from any particular "file-like" class. This approach is called duck-typing, and it has many merits in dynamic languages, although it's more popular in others (e.g. Ruby) than Python. Still, if whatever you're providing your  instance to follows duck-typing, it should work, provided your  does in fact "quack like a file", i.e. behaves sufficiently like a file to not cause errors upon usage at the receiving end.Of course, if the receiving end is not following duck-typing, for example tries to check types by  as you do here, this approach will fail.Finally, a small stylistic nit: don't put empty parens on a class if it doesn't inherit anything explicitly. They are redundant.


Answer URL
