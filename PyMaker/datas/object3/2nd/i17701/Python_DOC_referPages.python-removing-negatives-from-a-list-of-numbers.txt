Natural Text
The question is to remove negatives from numbers. When  is executed, the result is: . The result is suppose to be . what is happening is that if there are two negative numbers in a row (e.g., ) then the second number will not get removed.     def main():       numbers = input("Enter a list of numbers: ")       remove_negs(numbers)
It's generally a bad idea to remove elements from a list while iterating over it (see the link in my comment for an explanation as to why this is so). A better approach would be to use a list comprehension:Notice that the line above creates a new list and assigns  to that. You can also do an "in-place" assignment of the formwhich does not create a new list in memory, but instead modifies the memory location already being pointed to by . This difference is explained in more detail here.
Much simpler:If you really do want to loop, try this:This does what you want:The key is that the assignment statement  makes a copy of num_list.  In order not to confuse the loop, We then remove items from  rather than from the list we are looping over.More:  Python's treatment of variables is a bit subtle.  Python keeps variable names, like  or  separate from variable data, such as .  The names are merely pointers to the data.  Consider the assignment statement:After this statement is run,  and  both point to the same data.  If you make a change to 's data, you are also making a change to 's data because they both point to the same data.  Now, consider:This statement tells python to modify 's data by taking only certain elements of it.  Because of this, python makes a copy of 's data.  It just so happens that  specifies that we want all of 's data unchanged but that doesn't stop python from making a copy.  The copy is assigned to .  This means that  and  now point to different data.  We can make changes to 's data and it doesn't affect 's data because they have different data.If this is new to you, you might want to look at this tutorial about python's approach to variable names and variable data:  Understanding Python variables and Memory ManagementExamples:Contrast with:
Another solution
From a comment on arshajii's answer:but that's removing the negative numbers. i need the negative signs removed but still keep the number in the list.Removing the negative numbers is exactly what your code is clearly trying to do, and it's also the only way to get the desired result:THe result is suppose to be [1, 2, 3, 6, 3, 1]But if you really want to "remove the negative signs" from the numbers, that's even easier. For example, to remove the negative sign from , you just negate it and get , right? You can do this in-place, as in your existing code:… or in a list comprehension, as in arshajii's:And it's even easier with the  function, which does exactly that—negates negative numbers, leaves positive and zero alone:Either way, of course, this will give you , which is the wrong answer… but if your comment is correct, it's the answer you asked for.
Other the the conventional  Try some yoda conditions too =)
to strip the numbers off their negative signs, this is the easiest thing to dofor example rNegatives([-2,5,11,-1]) prints out [2,5,11,1]
I think an elegant solution can be like this:


Answer URL
