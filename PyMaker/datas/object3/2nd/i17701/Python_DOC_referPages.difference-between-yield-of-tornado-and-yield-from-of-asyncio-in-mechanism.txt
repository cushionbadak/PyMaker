Natural Text
In Tornado, we usually write the following code to call a function asynchronously:But in asyncio (will be shipped with Python 3.4, can be installed from pip for Python 3.3), we use  to achieve the same thing:Seeing from the code, the difference is  and . However the former  returns a  object, the latter returns a  object.My question is, what is the difference between the two things in mechanism? How is the control flow? And who calls the actual  and retrieves its returning value?Append: I have basic knowledge of Python generators and iterators. I wanted to understand what Tornado and asyncio achieved by using these, and what is the difference between those two mechanisms.
There is a huge difference between the two.  takes another generator and continues yielding from that generator instead (delegating responsibility, as it were).  just yields one value.In other words, , in the simplest case, could be replaced by:If you replaced a  line with  you'd return the whole generator to the caller, not the values that generator produces.The  syntax was only introduced in Python 3.3, see PEP 380: Syntax for Delegating to a Subgenerator. Tornado supports Python versions 2.6, 2.7 and 3.2 in addition to Python 3.3, so it cannot rely on the  syntax being available. , on the other hand, being a core Python library added in 3.4, can fully rely on the  generator delegation syntax being available.As a result, Tornado will have to post-process values yielded from a  generator to detect that a  object was yielded; the  code handling can be much simpler. And indeed the Tornado  method does explicit type checks to handle delegated tasks.


Answer URL
