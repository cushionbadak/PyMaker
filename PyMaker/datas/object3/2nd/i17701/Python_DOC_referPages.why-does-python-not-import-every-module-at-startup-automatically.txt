Natural Text
I was having a play around with Python 2.7 and everybody knows that at the start of every program, you always have to import modules. For example: Anyway, I was thinking, why do I have to import all my modules manually? Why doesn't Python just import them all like this. Sure, I can understand why it does not import like this:As some function names may clash. But, if you have to define where the function is at the start, so for example  in . Now modern computers are so powerful, it seems logical to import every module automatically instead of wasting lines of code, and time by having to find which module you need then importing it manually when it can easily be automated.So, why does python not import every module at startup automatically?EDIT 1:(DELETED)EDIT 2:I have made a new version of a little program that imports every module that I can find by running: Here is version 2 of my program. Unfortunately it does not have every module (yet!)This took less than a second, and in task manager, the Python shell is currently using 24.5MB of RAM, in Windows 8.1.Also, I do not have a really powerful computer with an SSD or anything, I have a Dell Laptop thats about 4 years old!
Because you don't need all of it. There is no point in loading every library if you don't need them.EDIT:I copied my libs folder to a test directory and made it into a package by adding an  file to it. In this file I added:I created a test script that contains:When I try to run it in the shell all it does is print 'The Zen of Python' by Tim Peters, opens this webcomic in my browser (2 things I absolutely did not see coming) and throws the following error:It takes a noticable amount of time before it does any of this, about 10-15 seconds
Maybe what you would like is a feature that automatically imports the libraries that are used in your script without needing to specify them at the beginning. I found this on the Internet http://www.connellybarnes.com/code/autoimp/You just need one import at the beginning of your scriptAll other modules are loaded "lazily", i.e. when they are first used.Example in the interactive shell:From the docs:For ultimate laziness, place the command  in your PYTHONSTARTUP file.  Now your interactive session has all modules available by default.
Every module you import takes time to import. Importing every built-in module every time you start Python would kill performance in a lot of important scenarios where new Python interpreters are started frequently.
Python does have a set of modules that are always loaded, its call  :). Python's builtins provide the  statement for you to extend your scope with even more modules! But as other posts have said, deciding your script needs these modules it up to you. -- I have looked into mutating  and I promise you, explicitly importing what you need is the better option.((Big rant about not using  cut from here))Since most of writing python ultimately becomes packaging and installing that writen python somewhere, this is my goto set of resources for getting a handle on python's infamous :Start by sticking to standard tools and libraries (https://packaging.python.org/current/)Reading and understand The Google Python Standards Guide (https://google.github.io/styleguide/pyguide.html), Read the Zen of Python (https://www.python.org/dev/peps/pep-0020/)Be Pythonic (basically adhere to "The Zen of Python"), https://www.youtube.com/watch?v=wf-BqAjZb8MSupplement your problem-space with tips from The Hitchhikers Guid to Python (http://docs.python-guide.org/en/latest/)Be preapred to package your code (https://packaging.python.org/distributing/ (Doc), https://github.com/pypa/sampleproject/ (Example))Being prepared to debug someone else's and, Your own code by getting familiar with tools like: (, ), , ,and 


Answer URL
https://docs.python.org/3/library/functions.html
