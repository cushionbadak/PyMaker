Natural Text
Similar Question: Understanding A Chain of Imports in PythonNB: I'm using Python 3.3I have setup the following two files in the same directory to explain importing to myself, however I still don't get exactly what it's doing. I understand function and class definitions are statements that need to run.untitled.py:stuff.py:This is the output I get from running stuff.py:The print statement in untitled.py is executed despite the import in stuff.py specifying only the testing class. Moreover what is the string module's relation inside stuff.py, as it can be called from within the testing class yet not from the outside.Could somebody please explain this behaviour to me, what exactly does a "from import" statment do (what does it run)?
The  statement isn't any different to  with regard to loading behaviour. Always the top level code is executed, when loading the module.  just controls which parts of the loaded module are being added to the current scope (the first point is most important):The from form uses a slightly more complex process:find the module specified in the from clause loading and initializing it if necessary;for each of the identifiers specified in the import clauses:  check if the imported module has an attribute by that nameif not, attempt to import a submodule with that name and then check the imported module again for that attributeif the attribute is not found, ImportError is raised.otherwise, a reference to that value is bound in the local namespace, using the name in the as clause if it is present, otherwise using the attribute nameThus you can access the contents of a module partially imported with  with this inelegant trick:
You can think of python modules as namespaces. Keep in mind that imports are not includes:modules are only imported oncethe first time, the top level code is executedany imports, variable, function or class declarations affects only the module local namespaceSuppose you have a module called :So when you do a  in another module, you will make  available in the current namespace. The module  will be available under  if you do an . If you do a , then ,  and everything else in the module namespace will be also in the current namespace - but never do that, wildcard imports are frowned upon in Python.If you do a  and then , the top level code at  will be executed once and the module namespace will be stored in the module cache: if another module  imports it the information will be pulled from this cache. If you are going to use it, then import it - no need to worry about multiple imports executing the top level code multiple times.Python programmers are very fond of namespaces; I always try to use  and then  instead of  if possible - it keeps the namespace clean and prevent name clashes.That said, the import mechanism is hackable, you can make python  statement work even with files that are not python.
In your first file (untitled.py), when python compiler parses(since you called it in import) this file It will create 2 class code objects and execute the print statement. Note that it will even print it if you run untitled.py from command line. In your second file(stuff.py), to add to @Paulo comments, you have only imported testing class in your namspace, so only that will be available, from the 2 code objects from untitled.pyHowever if you just say your 3rd "try" statement will work, since it will have untitled in its namespace.Next thing. try importing untitled.testing :)


Answer URL
