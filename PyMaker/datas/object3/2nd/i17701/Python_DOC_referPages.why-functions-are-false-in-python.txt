Natural Text
I can't figure out why:ok. So until now we can imagine that is due to the use of "is" instead of "==". As shown here:Ok. But why then if i do it on the function:I was trying to explain it as due to "is" instead of "==" but examples 19 and 20 crushed my logic. Can someone explain?
 checks for equivelency ...  checks identity ... a function is a non-falsey value however it is not equivelent to True
 tests for object identity. Comparing anything other than  with  is always going to be false.Your next set of tests test if  or ; again, boolean objects only test equal against themselves, so anything other than  will test as false when comparing with .  then is true.You want to use  instead to test if something is true or false:Don't use equality testing to see if something is true or false.Note that only numeric 0, empty containers and strings, and  is considered false  in Python. Everything else, by default, is considered true in a boolean context. Custom types can implement either the  method (when numeric) or the  method (to implement a container) to alter that behaviour. Python 3 replaced  with the  method.Functions do not have a  or  method, so they are always considered true.
If you check the "truthyness" of a function, you will see it is True.You were simply comparing the function itself to  or  Which it would never be, since it is a function.
Your own example shows that  is false so I'm confused by your title.Why would you expect a function to evaluate as equal to either Boolean value? Wouldn't that be kind of weird behaviour?


Answer URL
