Natural Text
When I call  from with in a couroutine , is  scheduled in the same even-loop as  is currently running in? An example:In this example, in which event-loop will  be scheduled? I'm especially interested in the case where  is not the default event-loop.The documentation, under "Things a coroutine can do" says: or  â€“ wait for  another coroutine to produce a result (or raise an exception, which  will be propagated). The  expression must be a call to  another coroutine.It is not clear to me in which loop the coroutine will be scheduled.
Citing docs of  Get the event loop for the current context.Implementation of default loop (Event loop default policy to be precise):The default policy defines context as the current thread, and manages an event loop per thread that interacts with asyncio.An event loop runs in a thread and executes all callbacks and tasks in the same thread (docs),  returns the same loop for the same thread,if you do not explicitly schedule on/interact with different thread's loop, it will use default (*) loopIn your example: returns current thread's event loop, is scheduled on that loop with any further async calls (awaits/yield from) are scheduled on the same loopMore info at Concurrency and multithreading.(*) The event loop you called default is actually a loop of current thread.


Answer URL
https://docs.python.org/3/library/asyncio-task.html
https://docs.python.org/3/library/asyncio-eventloops.html#asyncio.AbstractEventLoopPolicy.get_event_loop
https://docs.python.org/3/library/asyncio-eventloops.html#event-loop-policies-and-the-default-policy
https://docs.python.org/3/library/asyncio-dev.html#concurrency-and-multithreading
https://docs.python.org/3/library/asyncio-dev.html#concurrency-and-multithreading
