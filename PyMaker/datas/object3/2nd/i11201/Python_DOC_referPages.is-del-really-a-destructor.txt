Natural Text
I do things mostly in C++, where the destructor method is really meant for destruction of an acquired resource. Recently I started with python (which is really a fun and fantastic), and I came to learn it has GC like java.Thus, there is no heavy emphasis on object ownership (construction and destruction).As far as I've learned, the   method makes more sense to me in python than it does for ruby too, but the  method, do we really need to implement this built-in function in our class? Will my class lack something if I miss ? The one scenario I could see  useful is, if I want to log something when destroying an object. Is there anything other than this?
In the Python 3 docs the developers have now made clear that destructor is in fact not the appropriate name for the method . Called when the instance is about to be destroyed. This is also called a finalizer or (improperly) a destructor.Note that the OLD Python 3 docs used to suggest that 'destructor' was the proper name:Called when the instance is about to be destroyed. This is also called a destructor. If a base class has a  method, the derived classâ€™s  method, if any, must explicitly call it to ensure proper deletion of the base class part of the instance.From other answers but also from the Wikipedia:In a language with an automatic garbage collection mechanism, it would be difficult to deterministically ensure the invocation of a destructor, and hence these languages are generally considered unsuitable for RAII [Resource Acquisition Is Initialization]So you should almost never be implementing , but it gives you the opportunity to do so in some (rare?) use cases
As the other answers have already pointed out, you probably shouldn't implement  in Python. If you find yourself in the situation thinking you'd really need a destructor (for example if your class wraps a resource that needs to be explicitly closed) then the Pythonic way to go is using context managers.
Is del really a destructor?No,  method is not a destructor, is just a normal method you can call whenever you want to perform any operation, but it is always called before the garbage collector destroys the object.Think of it like a clean or last will method.
So uncommon it is that I have learned about it today (and I'm long ago into python).Memory is deallocated, files closed, ... by the GC. But you could need to perform some task with effects outside of the class.My use case is about implementing some sort of RAII regarding some temporal directories. I'd like it to be removed no matter what.Instead of removing it after the processing (which, after some change, was no longer run) I've moved it to the  method, and it works as expected.This is a very specific case, where we don't really care about when the method is called, as long as it's called before leaving the program. So, use with care.


Answer URL
https://docs.python.org/3/reference/datamodel.html#basic-customization
https://docs.python.org/3/whatsnew/3.4.html#pep-442-safe-object-finalization
https://docs.python.org/3/library/contextlib.html
https://docs.python.org/3/library/tempfile.html
