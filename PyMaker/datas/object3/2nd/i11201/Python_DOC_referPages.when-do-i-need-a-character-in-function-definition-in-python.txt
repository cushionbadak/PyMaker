Natural Text
I have the two functions I defined as below,I experimented a bit by changing the second line to  and I got an error. But why in the 4th line, it's  rather than ? What caused this inconsistency?
To apply the function on each of its arguments, you need the  to unpack the arguments of the function. So  is synomnymous to Have a look at unpacking in action:But with , the signature of the function requires that it take an , therefore  applies  (a summation) directly on the tuple of arguments .
If you look at the documentation  is defined as - which means it is taking an iterable object, which will traverse the arguments itself. So Out - Now as you can see  is a tuple whereas  unwraps the elements... the tuple is what  accepts where as your function is accepting a list which it is unpacking. What you could've done isNow you send the whole tuple to the function  which you can unpack with ..This is also work in the same way but now you can see what was happening..
 in a function signature accepts an arbitrary list of of arguments and makes it available in the function's scope in a variable named for exampleputting a  in front of a list or tuple in a function call unpacks the listso, the first function you defined:accepts a callable as the first positional argumentaccepts an arbitrary list of arguments for the 2nd argument on wardsmake these arguments available in a list named returns the callable with the list  unpackedIn this function the 2nd line cannot be , unless the function passed accepts a list as the first positional parameter, and has no other required parameterthe function  accepts a iterable (list or tuple) of numbers and adds them up.you can call  like this but the  function takes arguments and converts them to a list before passing it to the sum functionso, you can call  and it will return Now,  is further wrapped in , so the function call calls , which in turn calls It is also possible to call the sum function through  like this:The 2nd function  changes the signature of the sum function. This is useful in cases where you'll be calling many different functions dynamically and you want their signatures to be the same. The first function lets you call an arbitrary function with arbitrarily passed parameters.for example, if I defined a mean function like this:Then, mean and sum have dissimilar signatures.At another place in my code I had to call either the mean function or the sum function, I could write it like this:
If your function is expecting individual arguments but you have a sequence (a list, for example), you must specify the character  so that the list gets expanded (unpacked) into the sequence (otherwise it would be treated as one parameter)On the other hand, because the function  (a built-in function python) expects the sequence (only one parameter) you must not expand it before calling it.Imagine your  is:By using , when  is evaluated, it would be .However  would be evaluated as 


Answer URL
https://docs.python.org/3/library/functions.html#sum
