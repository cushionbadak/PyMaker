Natural Text
If we compare the types ,  and  in python versions 2 and 3, we can see that the type  can be used in the very same way.the type  changed its meaning from being an alias for  to an encoded unicode string (replacement for the former  type)the type  is only used in python 2 whereas in python 3 it is removed in favor of a redefined meaning of When writing code that should be compatible with python 2 and python 3 one of the most difficult tasks is to get unicode string handling right, because there is no type which works in both versions. On the other hand, dealing with byte arrays is trivial because there is a  type in both versions.As far as I understand, it would have been very easy to just introduce the type  as an alias for  in python 3. This way, a developer could use an unambiguous type name across both versions. Once there is no longer a need for python 2 compatibility, refactoring  to  would be straightforward.The question here is not the best approach to overcome the problems. What I am looking for is an explanation for why the type  had to disappear.
Ignacio Vazquez-Abrams already gave you the basic answer to the question you stated:Q: "...why the type unicode had to disappear"?A: "Because it never should have existed in the first place. Python 3000 is/was about fixing mistakes."Wayne Werner elaborated:A: "The u prefix is just a noop in Python 3 - which helps people writing 2/3 apps always use unicode. Who objects to that?"Which begs the question "Q: WHY you are you trying to write "code that's "compatible between Python 2 and Python 3"" anyway???  That's NOT a reasonable thing to necessarily want to do. The incompatibilities between Python 2 and Python 3 were NOT arbitrary - they were DELIBERATE.  Especially with regard to "Unicode"!Here is  Guido van Rossum's rationale for completely re-thinking "Unicode" for Python 3:Text Vs. Data Instead Of Unicode Vs. 8-bitAnd here is how you should be treating Unicode - in any new, Python 3.0 only code - going forward:Python 3: Unicode HowtoI hope that helps!


Answer URL
https://docs.python.org/3/howto/unicode.html
https://docs.python.org/3/howto/unicode.html
