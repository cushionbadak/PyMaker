Natural Text
What is the best way to check whether a given object is of a given type? How about checking whether the object inherits from a given type?Let's say I have an object . How do I check whether it's a ?
To check if  is an instance of  or any subclass of , use isinstance (this would be the "canonical" way):To check if the type of  is exactly  (exclude subclasses):The following also works, and can be useful in some cases:See Built-in Functions in the Python Library Reference for relevant information.One more note: in this case, if you're using python 2, you may actually want to use:because this will also catch Unicode strings ( is not a subclass of ; both  and  are subclasses of ). Note that  no longer exists in python 3, where there's a strict separation of strings () and binary data ().Alternatively,  accepts a tuple of classes. This will return True if x is an instance of any subclass of any of (str, unicode):
The most Pythonic way to check the type of an object is... not to check it.Since Python encourages Duck Typing, you should just  to use the object's methods the way you want to use them.  So if your function is looking for a writable file object, don't check that it's a subclass of , just try to use its  method!Of course, sometimes these nice abstractions break down and  is what you need.  But use sparingly.
 will return  if  is an  or is of a type that inherits from . will return  if and only if  is a str. It will return  if  is of a type that inherits from .
After the question was asked and answered, type hints were added to Python. Type hints in Python allow types to be checked but in a very different way from statically typed languages. Type hints in Python associate the expected types of arguments with functions as runtime accessible data associated with functions and this allows for types to be checked. Example of type hint syntax:In this case we want an error to be triggered for  since the annotated type of the argument is . The added type hint does not cause an error to occur when the script is run normally. However, it adds attributes to the function describing the expected types that other programs can query and use to check for type errors.One of these other programs that can be used to find the type error is :(You might need to install  from your package manager. I don't think it comes with CPython but seems to have some level of "officialness".)Type checking this way is different from type checking in statically typed compiled languages. Because types are dynamic in Python, type checking must be done at runtime, which imposes a cost -- even on correct programs -- if we insist that it happen at every chance. Explicit type checks may also be more restrictive than needed and cause unnecessary errors (e.g. does the argument really need to be of exactly  type or is anything iterable sufficient?).The upside of explicit type checking is that it can catch errors earlier and give clearer error messages than duck typing. The exact requirements of a duck type can only be expressed with external documentation (hopefully it's thorough and accurate) and errors from incompatible types can occur far from where they originate.Python's type hints are meant to offer a compromise where types can be specified and checked but there is no additional cost during usual code execution.The  package offers type variables that can be used in type hints to express needed behaviors without requiring particular types. For example, it includes variables such as  and  for hints to specify the need for any type with those behaviors.While type hints are the most Pythonic way to check types, it's often even more Pythonic to not check types at all and rely on duck typing. Type hints are relatively new and the jury is still out on when they're the most Pythonic solution. A relatively uncontroversial but very general comparison: Type hints provide a form of documentation that can be enforced, allow code to generate earlier and easier to understand errors, can catch errors that duck typing can't, and can be checked statically (in an unusual sense but it's still outside of runtime). On the other hand, duck typing has been the Pythonic way for a long time, doesn't impose the cognitive overhead of static typing, is less verbose, and will accept all viable types and then some.
Here is an example why duck typing is evil without knowing when it is dangerous.For instance: Here is the Python code (possibly omitting proper indenting), note that this situation is avoidable by taking care of isinstance and issubclassof functions to make sure that when you really need a duck, you don't get a bomb.
Link to docs
I think the cool thing about using a dynamic language like Python is you really shouldn't have to check something like that.I would just call the required methods on your object and catch an . Later on this will allow you to call your methods with other (seemingly unrelated) objects to accomplish different tasks, such as mocking an object for testing.I've used this a lot when getting data off the web with  which returns a file like object. This can in turn can be passed to almost any method that reads from a file, because it implements the same  method as a real file.But I'm sure there is a time and place for using , otherwise it probably wouldn't be there :)
To Hugo:You probably mean  rather than , but that points to the whole problem with type checking - you don't want to know if the object in question is a list, you want to know if it's some kind of sequence or if it's a single object. So try to use it like a sequence.Say you want to add the object to an existing sequence, or if it's a sequence of objects, add them allOne trick with this is if you are working with strings and/or sequences of strings - that's tricky, as a string is often thought of as a single object, but it's also a sequence of characters. Worse than that, as it's really a sequence of single-length strings.I usually choose to design my API so that it only accepts either a single value or a sequence - it makes things easier. It's not hard to put a  around your single value when you pass it in if need be.(Though this can cause errors with strings, as they do look like (are) sequences.)
For more complex type validations I like typeguard's approach of validating based on python type hint annotations:You can perform very complex validations in very clean and readable fashion.
You can check with the below line to check which character type the given value is:


Answer URL
https://docs.python.org/3/library/functions.html#isinstance
https://docs.python.org/3/library/functions.html#func-str
https://docs.python.org/3/library/functions.html#func-bytes
https://docs.python.org/3/library/ast.html
