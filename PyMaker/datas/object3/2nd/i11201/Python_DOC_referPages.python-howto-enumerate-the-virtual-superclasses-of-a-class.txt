Natural Text
For any class you can tell the (non-virtual) superclasses via the attribute  and the (non-virtual) subclasses by calling .For any ABC you can tell all virtual subclasses via the attribute .Is there a way to tell all virtual superclasses of a class, i.e. all classes for which it is registered as virtual subclass?
For any ABC you can tell all virtual subclasses via the attribute '_abc_registry'.No you can't. You can only find explicitly registered virtual subclasses that way. Anything handled by  won't show up in your check.To do what you're trying to do, you'd have to go through every ABC ever defined in your Python session and call . While this is technically possible in CPython by traversing the type hierarchy with the  method, it's probably a bad idea.
I think you are asking if there is a way to find all classes that would be considered a subclass of a given ABC. Other than iterating through the global and local namespaces and testing them all, the answer is no, there is no way to do this. By their very nature ABCs do not "know" about their child classes (any class could be a subclass of an ABC depending on what is returned by the  method, i.e., if the subclass implements the right interface). If you find yourself wanting to do this, I would consider it to potentially be a symptom of bad design. It might be worth pondering over why it is, exactly, you find yourself wanting to do this. 


Answer URL
https://docs.python.org/3/library/abc.html
