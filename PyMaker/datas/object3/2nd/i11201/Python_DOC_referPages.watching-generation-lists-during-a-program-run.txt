Natural Text
The Story:During Nina Zakharenko's PyCon talk on Memory Management in Python, she explains the way the generational garbage collection works in Python noting that:Python maintains a list of every object created as a program is run. Actually, it makes 3: The question:To gain more understanding in Memory Management in Python and for the purpose of debugging memory leaks, how can I observe/watch what objects are added and removed from all the 3 generation lists during a program run?I've looked through the  module, but have not found a relevant method to get the current generation lists values.
As we discussed in the comments, I don't think there is a way to access the generation lists directly from python, you can set some debug flags, in python2 you can use the following to report objects that can or cannot be collected:In python3, using the following will give you some generation output and info on collectable and uncollectable objects:You get output like:For leaks as per the  when set, all unreachable objects found will be appended to garbage rather than being freed. This can be useful for debugging a leaking program:In python3, you can also append a callback that is run when the gc starts and finishes, a simple example:Combining  with the function will show you any unreachable objects, not much different to setting the  or DEBUG_LEAK but one example of adding a callback. 


Answer URL
https://docs.python.org/3/library/gc.html#gc.DEBUG_SAVEALL
https://docs.python.org/3/library/gc.html#gc.DEBUG_LEAK
https://docs.python.org/3/library/gc.html#gc.callbacks
