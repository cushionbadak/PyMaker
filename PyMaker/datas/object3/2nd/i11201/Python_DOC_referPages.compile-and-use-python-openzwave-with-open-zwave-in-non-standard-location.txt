Natural Text
I manually compiled python-openzwave to work with C++ library.I would like to use it as Kodi addon (OpenELEC running on Pi 3), so can not use standard installation.I've compiled everything, downloaded missing  and  libs, and now try to run . My current dirs structure is the following:But when I run hello_world.py, I get the following error - If I move  and  to root folder, then I get the following error:What is wrong with my setup?
In general the steps required consist of calls to  which handles building the  files for openzwave and downloading all dependencies (including ); and  which runs the ,  (this setup script also creates the  Python extention for openzwave),  and . Since you cannot run  as you specified and are instead using the archive they provide, the only other options for creating the python extention, after building the openzwave library with , is generating the  files for it without installing to standard locations. Building the  for the cython extention in the same folder as the  scripts is done by running:This should create a shared library in  named  (it is different from the  contained in the  directory) which contains all the functionality specified in the extention module. You could try adding that to the  folder.If you pass special compiler flags during  for building the openzwave library you should specify the same ones when executing the  script. This can be done by specifying the  before executing it (as specified here) or else you might have issues like .
Here's the description of the 's build from the question's perspective. Almost all the steps correspond to the root 's targets.Prerequisites. There are several independent targets with little to no organization. Most use Debian-specific commands.Cython is not needed if building from an archive (details below)openzwave C++ library ( target).Build logic: , invoked without parameters (but with inherited environment).Inputs:  subtree (includes  and , statically linked).Outputs: Accepts  as envvar ( by default)The only effect that affects us is:  is assigned to a macro which adds a search location for config files ():  ->  -> .libopenzwave Python C extension module ( target - yes, the stock  cannot just build it; the target doesn't even have the dependency on the library).Build logic: Inputs: , Outputs:  - yes, the same name as 's output, so avoid confusing themBy default,  is linked statically with the module so you don't need to include the former into a deploymentThe module does, however, need the  folder from the library. It is included by the build script when making a package.Contrary to what Jim says, Cython is not needed to build from an archive, the archive already includes the generated .Now, the catch is: the module itself uses  to locate its data. So you cannot just drop the  and  into the currect directory and call it a day. You need to make  succeed. claims to support "normal filesystem packages, .egg files, and unpacked .egg files."In particular, I was able to pull this off: make an  (), unpack it into the current directory and rename  into  (like it is in ). A  is issued if I don't specifically add the 's location into / before importing the module., and  Python packages ()these are pure Python packages. The first one uses the C extension module, others use the first one.Build logic: ,,Input: Output:  (pure Python)They only use  so you're gonna be fine with just the proper files/dirs on  without any 's


Answer URL
https://docs.python.org/3/extending/extending.html#the-module-s-method-table-and-initialization-function
