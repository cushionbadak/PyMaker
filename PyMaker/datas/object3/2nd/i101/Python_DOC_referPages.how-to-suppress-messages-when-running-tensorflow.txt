Natural Text
By debugging information I mean what TensorFlow shows in my terminal about loaded libraries and found devices etc. not Python errors.
You can disable all debugging logs using  :Tested on tf 0.12 and 1.0In details, 
1.0+ Update (5/20/17):In TensorFlow 0.12+, per this issue, you can now control logging via the environmental variable called ; it defaults to 0 (all logs shown), but can be set to 1 to filter out  logs, 2 to additionally filter out  logs, and 3 to additionally filter out  logs. See the following generic OS example using Python:For Prior Versions of TensorFlow or TF-Learn Logging, see the following:View the page below for information on TensorFlow logging; with the new update, you're able to set the logging verbosity to either , , , , or . For example:The page additionally goes over monitors which can be used with TF-Learn models. Here is the page.This doesn't block all logging, though (only TF-Learn). I have two solutions; one is a 'technically correct' solution (Linux) and the other involves rebuilding TensorFlow.For the other, please see this answer which involves modifying source and rebuilding TensorFlow.
I have had this problem as well (on ), but could not fix the excessive nose tests logging problem via the suggested answers.I managed to solve this by probing directly into the tensorflow logger. Not the most correct of fixes, but works great and only pollutes the test files which directly or indirectly import tensorflow:
As  didn't work for me you can try:Worked for me in tensorflow v1.6.0
Usual python3 log manager works for me with tensorflow==1.11.0:
To add some flexibility here, you can achieve more fine-grained control over the level of logging by writing a function that filters out messages however you like:where  accepts a  object as input [ docs] andreturns zero if you want the message thrown out; nonzero otherwise.Here's an example filter that only keeps every nth info message (Python 3 dueto the use of  here):All of the above has assumed that TensorFlow has set up its logging state already. You can ensure this without side effects by calling  before adding a filter.
You might be tempted to use  for compatibility with Tensorflow 2.0but it did not work for me.


Answer URL
https://docs.python.org/3/library/logging.html#logrecord-objects
