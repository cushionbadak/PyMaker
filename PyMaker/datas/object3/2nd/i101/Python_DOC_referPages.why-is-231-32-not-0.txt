Natural Text
My problem is thatdoes not return , but returns  instead. The same is true for(so I believe this is simply how  is implemented).Interestingly, all these alternatives seem to work as expected, returning some kind of :In particular, what is different between Numpy arrays representing  and ?I have seen this issue in JavaScript (Why does << 32 not result in 0 in javascript?) and C++ (Weird behavior of right shift operator (1 >> 32), Why is `int >> 32` not always zero?), but not yet in Python/Numpy. In fact, neither Python nor Numpy docs seem to be documenting this behavior:https://docs.python.org/3/reference/expressions.html#shifting-operationshttps://docs.scipy.org/doc/numpy/reference/generated/numpy.right_shift.html
While not documented, numpy is mostly implemented in C and the shift operator in C (and C++) is not defined for shifts greater than or equal to the number of bits. So the result can be arbitrary.If you look at the types of the examples that work you'll see why they work:<class 'int'> <class 'numpy.int64'> <class 'numpy.int64'> <class 'numpy.int64'> int64 <class 'numpy.int64'> <class 'numpy.int64'>The first uses Python's own  type, while the others are all converted to , where the behavior for a 32-bit shift is correct.This is mostly due to the fact that scalar (zero-dimensional) arrays behave differently. And in the  case that the default integer type for numpy is not .On the other handuint32So you run into the undefined behavior here.


Answer URL
https://docs.python.org/3/reference/expressions.html#shifting-operations
