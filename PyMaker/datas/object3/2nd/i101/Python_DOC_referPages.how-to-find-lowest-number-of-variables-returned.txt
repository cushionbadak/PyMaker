Natural Text
I'm using Python's  and  functions on lists for a minimax algorithm, and I need the index of the value returned by  or . In other words, I need to know which move produced the max (at a first player's turn) or min (second player) value.I need to be able to return the actual index of the min or max value, not just the value.

Say that you have a list , and need the index of the smallest element, i.e.  in this case.Avoid the solution with  presented in the other answers, and use insteadbecause it doesn't require to  nor to use , and it is always faster(benchmark below) than a solution using .If you are dealing with numpy arrays or can afford  as a dependency, consider also usingThis will be faster than the first solution even if you apply it to a pure Python list if:it is larger than a few elements (about 2**4 elements on my machine)you can afford the memory copy from a pure list to a  arrayas this benchmark points out:I have run the benchmark on my machine with python 2.7 for the two solutions above (blue: pure python, first solution) (red, numpy solution) and for the standard solution based on  (black, reference solution).The same benchmark with python 3.5 showed that the methods compare exactly the same of the python 2.7 case presented above
You can find the min/max index and value at the same time if you enumerate the items in the list, but perform min/max on the original values of the list. Like so:This way the list will only be traversed once for min (or max).
If you want to find the index of max within a list of numbers (which seems your case), then I suggest you use numpy:
Possibly a simpler solution would be to turn the array of values into an array of value,index-pairs, and take the max/min of that. This would give the largest/smallest index that has the max/min (i.e. pairs are compared by first comparing the first element, and then comparing the second element if the first ones are the same). Note that it's not necessary to actually create the array, because min/max allow generators as input.
Will give you first index of minimum.
I was also interested in this and compared some of the suggested solutions using perfplot (a pet project of mine).Turns out that numpy's argmin,is the fastest method for large enough lists, even with the implicit conversion from the input  to a .Code for generating the plot:
Use a numpy array and the argmax() function
Use numpy module's function numpy.whereFor index of minimum value:    For index of maximum value:In fact, this function is much more powerful. You can pose all kinds of boolean operationsFor index of value between 3 and 60:
After you get the maximum values, try this:Much simpler than a lot of options.
I think the answer above solves your problem but I thought I'd share a method that gives you the minimum and all the indices the minimum appears in.This passes the list twice but is still quite fast. It is however slightly slower than finding the  index of the first encounter of the minimum. So if you need just one of the minima, use Matt Anderson's solution, if you need them all, use this.
This is simply possible using the built-in  and  function and the optional  argument of the  function and a simple lambda expression:In the docs for  it says that the  argument expects a function like in the  function. Also see the Sorting How To.It works the same for . Btw it returns the first max/min value.
As long as you know how to use lambda and the "key" argument, a simple solution is:
Say you have a list such as:The following two methods are pretty compact ways to get a tuple with the minimum element and its index. Both take a similar time to process. I better like the zip method, but that is my taste.zip methodenumerate method
Why bother to add indices first and then reverse them? Enumerate() function is just a special case of zip() function usage. Let's use it in appropiate way:
Just a minor addition to what has already been said. seems to return the smallest index of min. The following gets the largest index:The last line can be left out if the side effect of reversing in place does not matter.To iterate through all occurrencesFor the sake of brevity. It is probably a better idea to cache  outside the loop.
A simple way for finding the indexes with minimal value in a list if you don't want to import additional modules:Then choose for example the first one:
I think the best thing to do is convert the list to a  and use this function : 
Simple as that :
Dont have high enough rep to comment on existing answer.But for https://stackoverflow.com/a/11825864/3920439 answerThis works for integers, but does not work for array of floats (at least in python 3.6)It will raise 
https://docs.python.org/3/library/functions.html#maxIf multiple items are maximal, the function returns the first one encountered. This is consistent with other sort-stability preserving tools such as To get more than just the first use the sort method.


Answer URL
https://docs.python.org/3/library/functions.html#max
https://docs.python.org/3/library/stdtypes.html#list.sort
https://docs.python.org/3/library/functions.html#max
