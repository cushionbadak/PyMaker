Natural Text
I was wondering if there is a more elegant way of exposing attributes of the wrapped class other than what I have now:EDIT: It seems like I wasn't clear in my intentions. The purpose of the wrapper class is to create the boundary between my code, and a third party library. I simply want to decrease the number of attributes, and methods exposed to my code.
If all you're trying to do with the wrapper class is limit the number of exposed fields, you should take advantage of Python's ability to generate classes dynamically. That is, create a factory that generates new classes with only the exposed fields available on them.Currently, the  lookup is using an array and is (relatively) slower than a direct lookup since it has to iterate the entire array each time  is called, to ensure the attribute is exposed. By generating a class dynamically, your access times will be the same as any other class and it will handle all the  exceptions for you.You can use the  command to create new types (aka: classes). In your case, you could write a simple factory function like this:This would be used like thisIn the code we use a dictionary comprehension to build a dict of attributes. Each attribute points to an attribute on the wrapped class. The new type is returned and you can then create instances of it. Only the exposed fields exist on the new class so trying to access any other attribute throws an  like you'd expect.


Answer URL
https://docs.python.org/3/library/functions.html#type
