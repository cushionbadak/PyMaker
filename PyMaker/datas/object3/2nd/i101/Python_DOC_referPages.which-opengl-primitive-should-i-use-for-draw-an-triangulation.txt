Natural Text
I've the following image : That I was able to triangulate like the following : I did it using the triangle library of python. My triangulation result is stored into a  object which look like that: Now, I want to distord and draw this texture as a mesh using OpenGL. I was wondering which primitive should I use? I think that  is the right solution but it's a complex triangulation and it seems obvious that only one TRIANGLE_STRIP will not be enough.    
You've 2 arrays. The first array contains the 2 dimensional vertex coordinates and the second array contains the indices.You have to use  tor draw the triangle primitives which are contained in the 2nd array. The indices refer to the corresponding vertex coordinates of the 1st array.First you've to create a floating point buffer for the vertex coordinates and an integral buffer for the indices. The easiest way is to use NumPy, to transform nested list or arrays to array buffers.Assuming that you've an array of  in the form [[x0, y0], [x1, y1], [x2, y2],...] and an array of  in the form [[a0, b0, c0], [a1, b1, c1], [a2, b2, c2],...], then the buffers can be created like this:The same can be done by using , instead of NumPy. But then the lists have to be flattened in the form [x0, y0, x1, y1, x2, y2,...] respectively [a0, b0, c0, a1, b1, c1, a2, b2, c2,...]:Create a vertex array object. See Vertex Specification:If you want to draw the triangle primitives  it is sufficient to bind the vertex array object and to call :Regarding to the comment:[...] I already know how to texture a plane by using  then  but didn't figure out how I can do it with a vao.The easiest way is to create a separate array of texture coordinates. Assuming you've the texture coordinates  in the form [[u0, v0], [u1, v1], [u2, v2],...]. Generating the buffer is straight forward:If you have a shader program, then you've to add the texture coordinate attribute:e.g.and to define an array of generic vertex attribute data.If you use  compatibility profile and the fixed function attributes, then you've to specify the  and enable the client state .Note, the client state  and  is mapped to the vertex attribute 0. See What are the Attribute locations for fixed function pipeline in OpenGL 4.0++ core profile?:Note, if you don't use a shader, then 2 dimensional texturing has to be enabled by Regarding to the comment:I d'like to displace vertex one by one [...]A single vertex coordinate can be changed by , where the 2nd parameter is a byte offset to the vertex coordinate. The offset for the coordinate  would be  (4 is the size of float in bytes, and each coordinate consist of 2 components x and y).  


Answer URL
https://docs.python.org/3/library/ctypes.html
