Natural Text
It seems that python's asyncio is an all-or-nothing kind of deal. Specifically it seems to force full call stack to be async-aware.Here is an example:Let's assume that there is an algorithm implemented by function a().That algorithm calls function b().Now let's assume that function b() might be implemented differently in different environments and one might want to call a() inside an async event loop (with loop.call_soon()) with b() calling some asyncio-aware code:Using existing event loop seems to be explicitly prohibited...So, are there methods to implement this functionality without forcing the full stack (a() and b()) to be explicitly defined as async coroutines?
Although taken at face value asyncio is an all-or-nothing deal, there are still two escape hatches that can help when dealing with legacy or heterogenous environment:Within asyncio, you can await  to evaluate sync code in another thread, and suspending the current coroutine until the result is ready.Outside asyncio, you can use  to submit a coroutine to an event loop running in another thread. The function returns a  future which has a blocking  method. (This requires starting an event loop in a separate thread beforehand.)With those two tools at your disposal, it is not that hard to mix asyncio and classic synchronous code.


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#executing-code-in-thread-or-process-pools
https://docs.python.org/3/library/asyncio-task.html#asyncio.run_coroutine_threadsafe
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future
