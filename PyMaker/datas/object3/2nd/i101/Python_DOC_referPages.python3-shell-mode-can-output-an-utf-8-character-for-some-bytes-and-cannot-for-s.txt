Natural Text
what i have already known: gives 'Î¸', because decode() function is designed for doing this job - decoding the bytes.what i want to know is, dose python3 shell mode have some default config to control following behavior (Python3) .it seems like shell mode use ASCII as default encoding rather than utf8.the question is, is this true? if yes, what the path where the config is located in?
Python 3 represents bytes as the equivalent ASCII character if the value of the byte is within the ASCII range, otherwise it displays the escaped hex value.From the docs for the  type:Only ASCII characters are permitted in bytes literals (regardless of the declared source code encoding). Any binary values over 127 must be entered into bytes literals using the appropriate escape sequence.This is a deliberate design decision (from the same doc)to emphasise that while many binary formats include ASCII based elements and can be usefully manipulated with some text-oriented algorithms, this is not generally the case for arbitrary binary dataThe interpreter doesn't display characters for bytes outside the ASCII range because it cannot know whether the bytes are encoded as UTF-8, some other encoding, or even if they represent text data at all.As user Steve points out in their answer, this behaviour is not related to encoding.  It is not configurable; if you want to see the characters corresponding to a UTF-8 encoded bytestring, decode to .
This has nothing to do with the encoding.  Python is just showing you in the shell what the value is that you just gave it, in a more literal sense.  Try this instead:result:So 'a' is indeed encoded as UTF-8, just as you expected.  You're just misinterpreting what Python is echoing back to the console.BTW, you're also I think not doing what you think you are with the 'b' prefix.  It appears you're using Python 2.X.  In that version of Python, the 'b' prefix is ignored.  I know that because it doesn't show up in the echoed result.  See here:Python 2.x:Python 3.XSo in Python 2.X, you'll get the same result with and without the 'b'.  In Python 3.X, you get different behavior either way than what you get in Python 2.X.  I haven't done much with Python 3.X, but I believe that this is because how strings are represented changed in 3.X. PS: If you really just care how Python is echoing strings back to you, I don't know that there's a way to change that.  I wonder, however, why that matters to you.


Answer URL
https://docs.python.org/3/library/stdtypes.html#binary-sequence-types-bytes-bytearray-memoryview
