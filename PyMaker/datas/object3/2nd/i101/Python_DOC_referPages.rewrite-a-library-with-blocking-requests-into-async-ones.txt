Natural Text
There is a library that uses blocking  in its core and I would like to rewrite it into asynchronous version, so could you please advise  what would be the best/easiest strategy to do so. The whole library, after several nested functions, calls one function:Just putting  in front of it wont work since it is deeply nested in blocking functions. And rewriting everything would be a way too much hassle.I had a look into , ,  and kinda got lost, which one is better. I know about  or , but I need async. 
You have several options:Rewrite  to be async (using, for example, aiohttp) and further rewrite all functions that use  to be async either. Yes, it's much work to do, but this is how  fundamentally designed.Wrap only top-level blocking functions (functions with I/O) you need to run asynchronously with run_in_executor as explained here. If you aren't going to make millions of requests you won't see much performance difference with option above since main bottleneck is still I/O. Otherwise threads overhead will be noticeable compared to pure  solution.Try other solution instead of . For example, gevent and its monkey-patching. This approach has own pros and cons.


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor
