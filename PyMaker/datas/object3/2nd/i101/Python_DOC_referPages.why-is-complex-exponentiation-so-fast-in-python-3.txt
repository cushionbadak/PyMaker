Natural Text
There's a fair amount of weirdness that I've observed recently when playing around with timeit and Python's exponents recently.First, knowing that math.sin(1) == (e**1j).imag, I was curious about their relative speeds. Here is what I found:This is bizarre to me. Why is using the number itself and  so much faster than anything else? Why is it faster than sin? I know it's not due to the import; I ruled that out separably. Also consider:So, it is giving the correct answers.I decided to dig a bit deeper, and found that .imag is the real culprit of the slowness of . In fact,It doesn't seem to be anything specific to 1j; I can use 2j or 0.95j and get the same speed. Additionally, it's even as fast as complex and regular multiplication!I am thoroughly confused. How can it be so much faster than sin, when it's doing at least as much work (and also calculating cos)? How can it be as fast as integer multiplication? I suspect part of this is due to noise from the overhead of timeit (there's gotta be a loop somewhere), but even that doesn't explain everything. I would appreciate any help with understanding.
You can explain your observation by looking at the bytecode generated by CPython using the dis module. Lets take a look.As you can see, your last example is so fast because the interpreter is turning the value into a constant when the bytecode is created. You aren't actually doing any work in your last timeit except for the call to .


Answer URL
https://docs.python.org/3/library/dis.html#dis.dis
