Natural Text
I am confused with the behaviour of self when it comes to dealing with static variables in python.From what I understand is that static variables can be accessed by either using  or . However changing the value of that variable differs. I realized that if i change the static variable value by  the instance variable reflects that value however if I change the value of static variable using  the static variable does not change when access like  from what I understand is that when I assign a value like  then an instance variable is created. Can somebody please shed a little light on this behaviour.Example 1:Example 2:
Both classes and instances can have attributes.A class attribute is assigned to a class object. People sometimes call this a "static variable".An instance attribute is assigned to an instance ("instance variable").When an attribute of an object is read, a number of things happen (see Descriptor HowTo Guide), but the short version is:Try to read the attribute from the instanceIf that fails, try to read it from the classWhen it is written, then there is no such mechanism. It is written where it is written ;)See in example:self?BTW, the  argument (in the question) is an instance, just like  is here.
 in python is an ordinary name that binds the reference to the instance calling a class method. It is passed as the first argument to a method and by convention, it is bound to the name 'self'. When  is called, you are setting the value of an instance variable; a variable unique to that particular . For example,  might name my mother's bean, but I named my own bean "George" when I called  from my bean. On the other hand,  names all beans. My mother's bean is now named "Yousef", and so is mine. If my Dad has a bean as well, he'll be surprised to find out that it too, is named "Yousef" when he calls . But he can still use  to give his bean its own (possibly unique) name.Example Code:Python 3.4 Output:


Answer URL
https://docs.python.org/3/howto/descriptor.html
