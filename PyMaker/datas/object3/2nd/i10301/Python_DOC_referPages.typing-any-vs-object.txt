Natural Text
Is there any difference between using  as opposed to  in typing? For example:Compared to:
Yes, there is a difference. Although in Python 3, all objects are instances of , including  itself, only  documents that the return value should be disregarded by the typechecker.The  type docstring states that object is a subclass of  and vice-versa:However, a proper typechecker (one that goes beyond  checks, and which inspects how the object is actually used in the function) can readily object to  where  is always accepted.From the  type documentation:Notice that no typechecking is performed when assigning a value of type  to a more precise type.andContrast the behavior of  with the behavior of . Similar to , every type is a subtype of . However, unlike , the reverse is not true: object is not a subtype of every other type.That means when the type of a value is , a type checker will reject almost all operations on it, and assigning it to a variable (or using it as a return value) of a more specialized type is a type error.and from the mypy documentation section Any vs. object:The type  is another type that can have an instance of arbitrary type as a value. Unlike ,  is an ordinary static type (it is similar to  in Java), and only operations valid for all types are accepted for object values. can be cast to a more specific type, while  really means anything goes and a type checker disengages from any use of the object (even if you later assign such an object to a name that is typechecked).You already painted your function into a an un-typed corner by accepting , which comes down to being the same thing as . The typechecker disengaged there and the return value no longer matters, but since your function accepts a list containing  objects, the proper return value would be  here.To properly participate in type-checked code, you need to mark your input as  (a genericly typed container) for a typechecker to then be able to care about the return value. Which in your case would be  since you are retrieving a value from the list. Create  from a :
 and  are superficially similar, but in fact are entirely opposite in meaning. is the root of Python's metaclass hierarchy. Every single class inherits from . That means that  is in a certain sense the most restrictive type you can give values. If you have a value of type , the only methods you are permitted to call are ones that are a part of every single object. For example:In contrast,  is an escape hatch meant to allow you to mix together dynamic and statically typed code.  is the least restrictive type -- any possible method or operation is permitted on a value of type . For example:You should generally try and use  only for cases where...As a way of mixing together dynamic and statically typed code. For example, if you have many dynamic and complex functions, and don't have time to fully statically type all of them, you could settle for just giving them a return type of Any to nominally bring them into the typechecked work. (Or to put it another way, Any is a useful tool for helping migrate an untypechecked codebase to a typed codebase in stages).As a way of giving a type to an expression that is difficult to type. For example, Python's type annotations currently do not support recursive types, which makes typing things like arbitrary JSON dicts difficult. As a temporary measure, you might want to give your JSON dicts a type of , which is a bit better then nothing.In contrast, use  for cases where you want to indicate in a typesafe way that a value MUST literally work with any possible object in existence.My recommendation is to avoid using  except in cases where there is no alternative.  is a concession -- a mechanism for allowing dynamism where we'd really rather live in a typesafe world.For more information, see:https://docs.python.org/3/library/typing.html#the-any-typehttp://mypy.readthedocs.io/en/latest/kinds_of_types.html#the-any-typeFor your particular example, I would use TypeVars, rather then either object or Any. What you want to do is to indicate that you want to return the type of whatever is contained within the list. If the list will always contain the same type (which is typically the case), you would want to do:This way, your  function will return the most precise type as possible.


Answer URL
https://docs.python.org/3/library/typing.html#the-any-type
https://docs.python.org/3/library/typing.html#the-any-type
