Natural Text
I created the empty abstract class  and inherited the  class from it:I expected the output to behowever, the one I'm getting isThe problem (apparently) goes away if I remove  (so that  becomes an ordinary class) and/or if I set  to some other value. What's going on here?
This isn't really a problem with ABCs, it's a problem with PyMongo.  There is an issue about it here.  It seems that pymongo overrides  to return some sort of database class.  This means that  returns a Database object, which is true in a boolean context.  This cause ABCMeta to believe that  is an abstract method:The workaround described in the issue report is to manually set  on your object.  The last comment on the issue suggests a fix has been put in for pymongo 3.0.
Short Version returns an object that appears to be (is?) an abstract method, which you then assign to the  field in .  This makes  an abstract class, so instantiating it raises a .Note that I don't have , so I can't tell you anything more about  than how it gets treated by .Long VersionThe  method looks inside each field of the new class it's creating.  Any field that itself has a  (or "true-like")   field is considered an abstract method.  If a class has any non-overridden abstract methods, the whole class is considered abstract, so any attempt to instantiate it is an error.From an earlier version of the standard library's :This is not mentioned in the  class docs, but a bit lower, under the  decorator:In order to correctly interoperate with the abstract base class machinery, the descriptor must identify itself as abstract using .  In general, this attribute should be  if any of the methods used to compose the descriptor are abstract.ExampleI created a bogus "abstract-looking" class with an  attribute, and two supposedly-concrete subclasses of .  You'll see that one produces the exact error you're getting:Running this produces:


Answer URL
https://docs.python.org/3/library/abc.html#abc.abstractmethod
