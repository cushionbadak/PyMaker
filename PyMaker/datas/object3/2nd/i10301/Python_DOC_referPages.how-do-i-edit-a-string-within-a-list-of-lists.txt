Natural Text
I have a list of lists each with 11 strings. The last string is an 8-digit code where I need to retain the first three digits but delete the last five.I'm pretty sure this can be done using indexing and slicing. An example using lists with 5 entries instead of 11.Example = Desired_Outcome = 
You can't edit a string; they are immutable.But you can slice off the unwanted parts (which creates a new string) from the last item of each sublist:Some reference:Explain Python's slice notationAren't Python strings immutable?
You can use a nested list comprehension to achieve that The idea here is that you grab only the first 4 characters in the last element. here  first takes the all the elements of the list except the last.  is the last element and  will grab the first 4 characters of the last element. See What does "list comprehension" mean? How does it work and how can I use it? and Explain Python's slice notation for more details about them. 
Use list comprehension.And just to your knowledge, the string is an immutable type. It can not be edited. Every time you do something with it, you are creating a new string.
You can edit it place with a for loop and slicingNote: In your 5 element example, the final element can be indexed as  or  (the last element, counting backwards). Both work.... but its best to be consistent throughout the program.
Alternatively, you may also achieve the same using  as:Above solution will work on Python 2.7. In case you are using Python 3.x, you need to explicitly add a   call to  as:Check Blog on Lambda, filter, reduce and map to know how  functions and  works in Python.
Actually its very simple,(1) Loop through outer array.(2) Get the last element of each sub array.(3) slice it using x[:-5]


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/library/functions.html#map
