Natural Text
This question already has an answer here:Best way to format integer as string with leading zeros? [duplicate]                    11 answers                I've got an algorithm that does this already, but the code is ugly and slow. I assume that there's a built-in or some function in the libs that give faster and more precise results.What I want it where I can give a final number of bits, a string, list or deque (anything that can be cast to a string in the end).The code I've already got is below:By the way, deque is a type of object from collections that allows you to  wherein you can add an item to the beginning of the list without having to shift everything over by one.There are old answers to this but they're all Python 2 and the whole formatting thing has changed significantly. EDIT: I think that this question is not a duplicate of the one linked as I was actually after leading zeroes as @Martijn Pieters has made me aware.EDIT: Ok, it IS a duplicate of that one it seems. Sorry about the dupe.LAST EDIT I SWEAR: I just noticed something. I keep getting values like 000b0110 when trying to make it one-byte long. This is opposed to 00000110 that I wanted. I'm just adding this so that if anyone else in the future looks up this question they'll find the correct thing. So all I've done is ignore the first two character of the string by using:I'm getting this because I'm turning a number INTO a binary number with "bin" which returns a string that has the "0b" (declaring it as binary) at the beginning.
There is a built-in, the  method. It takes the target width and an optional fill character (defaulting to a space). You can use it to pad out a string with  characters:There is also an equivalent  method to add padding on the left.However, if you want leading zeros (as opposed to trailing), I'd use the  method as that takes any  or  prefix into account.
You can use the formatting language but this particular example is probably unnecessary:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.ljust
https://docs.python.org/3/library/stdtypes.html#str.rjust
https://docs.python.org/3/library/stdtypes.html#str.zfill
