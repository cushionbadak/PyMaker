Natural Text
I cannot find the method corresponding to  operator. There is one for  tho. Where is it?https://docs.python.org/3/reference/datamodel.html
There are no hooks for  or  operators, no (as they short-circuit), and there is no  operator in Python. The  and  are for the bitwise  and  operators, respectively. The equivalent bitwise operator for  is  (inversion), which is handled by the  method, while  covers the  bitwise operator. operates on the truth-value of an object. If you have a container, give it a  method, if not give it a  method. Either one is consulted to determine if an object should be considered 'true';  inverts the result of that test.So if  returns  or  returns an integer other than ,  will invert that to , otherwise  produces . Note that you can't make  return anything else but a boolean value!From the documentation for :  Called to implement truth value testing and the built-in operation ; should return  or . When this method is not defined,  is called, if it is defined, and the object is considered true if its result is nonzero. If a class defines neither  nor , all its instances are considered true.>and for the  expression:In the context of Boolean operations, and also when expressions are used by control flow statements, the following values are interpreted as false: , , numeric zero of all types, and empty strings and containers (including strings, tuples, lists, dictionaries, sets and frozensets). All other values are interpreted as true. User-defined objects can customize their truth value by providing a  method.The operator  yields  if its argument is false,  otherwise.bold emphasis mine.
There is one for  thoThe methods you're looking at are for bitwise , , and , not , , or  (which isn't even a Python operator). cannot be overloaded, just like  and  can't be overloaded. Bitwise  can be overloaded, though; that's .If you're in a situation where you wish you could overload , you'll either have to make do with overloading  instead, or you'll have to write your own  function and use that instead of the  operator.


Answer URL
https://docs.python.org/3/reference/datamodel.html
https://docs.python.org/3/reference/expressions.html#unary-arithmetic-and-bitwise-operations
https://docs.python.org/3/reference/datamodel.html#object.__invert__
https://docs.python.org/3/reference/datamodel.html#object.__xor__
https://docs.python.org/3/library/stdtypes.html#truth-value-testing
https://docs.python.org/3/reference/datamodel.html#object.__len__
https://docs.python.org/3/reference/datamodel.html#object.__bool__
https://docs.python.org/3/reference/expressions.html#boolean-operations
