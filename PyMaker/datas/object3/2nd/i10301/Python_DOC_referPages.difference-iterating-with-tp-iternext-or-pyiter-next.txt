Natural Text
If I write a C function that does something with an iterable then I create an Iterator first and then loop over it.This works fine but I've also seen some functions using :the second approach seems faster (I have only one data point: my Windows computer and my msvc compiler).Is it just coincidence that the  approach is faster and is there any significant difference between these two?Links to the python documentation of both:PyIter_Next, tp_iternextI have read them but to me it's not clear when and why one should be preferred.
The source code for  shows that it simply retrieves the  slot and calls it and clears a  exception that may or may not have occurred.If you use  explicitly you have to check for this  when exhausting the iterator.By the way: the documentation of  also says:An optional pointer to a function that returns the next item in an iterator. When the iterator is exhausted, it must return ; a   exception may or may not be set. When another error  occurs, it must return  too. Its presence signals that the  instances of this type are iterators.While there is no such mention in 's documentation.So  is the simple and safe way of iterating over an iterator. You can use  but then you have to be careful to not trigger a  exception at the end.


Answer URL
https://docs.python.org/3/c-api/iter.html#c.PyIter_Next
https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_iternext
