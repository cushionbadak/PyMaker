Natural Text
I'm asking this question because of a discussion on the comment thread of this answer. I'm 90% of the way to getting my head round it. exists in three different forms:What is the difference between the bound method, unbound method and function objects, all of which are described by f1? How does one call these three objects? How can they be transformed into each other? The documentation on this stuff is quite hard to understand.
A function is created by the  statement, or by .  Under Python 2, when a function appears within the body of a  statement (or is passed to a  class construction call), it is transformed into an unbound method.  (Python 3 doesn't have unbound methods; see below.)  When a function is accessed on a class instance, it is transformed into a bound method, that automatically supplies the instance to the method as the first  parameter.Here  is a function.Now  is an unbound method.We can also use the  class constructor:We can convert  to an unbound method manually:Unbound methods are bound by access on a class instance:Access is translated into calling through the descriptor protocol:Combining these:Or directly:The main difference between a function and an unbound method is that the latter knows which class it is bound to; calling or binding an unbound method requires an instance of its class type:Since the difference between a function and an unbound method is pretty minimal, Python 3 gets rid of the distinction; under Python 3 accessing a function on a class instance just gives you the function itself:In both Python 2 and Python 3, then, these three are equivalent:Binding a function to an instance has the effect of fixing its first parameter (conventionally called ) to the instance.  Thus the bound method  is equivalent to either of:
is quite hard to understandWell, it is quite a hard topic, and it has to do with descriptors.Lets start with function.  Everything is clear here - you just call it, all supplied arguments are passed while executing it:Regular  is raised in case of any problem with number of parameters:Now, methods.  Methods are functions with a bit of spices.  Descriptors come in game here.  As described in Data Model,  and  are translated into  and  respectively.  And results of these 's differ from the raw  function.  These objects are wrappers around the original  and contain some additional logic.In case of  this logic includes a check whether first argument is an instance of :If this check succeeds, it executes original  with that instance as first argument:Note, that  attribute is :In case of  this logic immediately supplies original  with an instance of  it was created of (this instance is actually stored in  attribute):So,  mean that underlying function is bound to some instance.  mean that it is still bound, but only to a class.
Function object is a callable object created by a function definition. Both bound and unbound methods are callable objects created by a Descriptor called by the dot binary operator. Bound and unbound method objects have 3 main properties:  is the function object defined in the class,  is the class, and  is the class instance. For unbound methods,  is . When a bound method is called, it calls  with  as the first parameter followed its calling parameters. unbound methods calls the underlying function with just its calling parameters.
One interesting thing I saw today is that, when I assign a function to a class member, it becomes an unbound method. Such as:
Please refer to the Python 2 and Python 3 documentation for more details.My interpretation is the following.Class  snippets:  Python 3:Python 2:  If a function is called without class or instance, it is a plain function.If a function is called from a class or an instance, its  is called to retrieve wrapped function:a.  is same as .In Python 3, this returns plain function.In Python 2, this returns an unbound function.b.  is same as . This will return a bound method in both Python 2 and Python 3, which means  will be implicitly passed as first argument.


Answer URL
https://docs.python.org/3/howto/descriptor.html
