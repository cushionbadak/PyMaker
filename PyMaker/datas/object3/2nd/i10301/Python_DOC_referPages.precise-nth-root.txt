Natural Text
I'm looking for Python Nth root function/algorithm but before you post: NO INTEGER ROOT, HELL!Where could I obtain at least a guide how to program Nth root function that produces precise /?Such function that doesn't return  nor  for  (1st argument is the number, 2nd is the root depth (or something)).EDIT: So, you were giving me this solution:  which I knew when I asked this question, but it just doesn't work for, for example, . You can't express  in terms of rational numbers, so  gives incorrect result . I was asking for some "smart" algorithm, which gives correct result for such nice numbers and at least 4-decimal-points-accurate result for rational . If there isn't such function or algorithm, I will use this ().
I would try the gmpy2 library. uses the MPFR library to perform correctly rounded floating point operations. The default precision is 53 bits but that can be increased.Disclaimer: I maintain .
You can do a binary search on the answer. If you want to find the X that is equal to the kth root of N, you can do a binary search on X testing for each step of the binary search whether X^k equals N +- some small constant to avoid precision issues.Here is the code:For (N,K) = (125,3) it prints 5.0, the correct answer. You can make it more precise by changing the 1e-9 constant, but there is a precision limit related to the float variables precision limit in Python
You mean something like that:Something else that might interest you is bigfloat module (haven't used personally just know it exists :) - actually had problem installing it in the past-maybe an OS X fault)
In Squeak Smalltalk, there is a  message that answers the exact  result if ever the Integer receiver is exact nth power of some whole number. However, if the solution is an algebraic root, then the implementation does not fallback to a naive ; the method rounds to nearest float by appropriate care of residual.Relevant code (MIT license) is reproduced here. The base algorithm is searching for truncated nth root of an Integer with some Newton-Raphson:It's not particularly clever, because convergence can be very slow in case of huge exponent, but well, it works.Then, the same root rounded away from zero:Then exactness is tested in nthRoot:This could be applied to Fraction too, but the nearest float is a bit more complex, and Squeak implementation is currently naive.It works for large integers like: ->  "exact" ->  "inexact"If you don't have such expectations, the initial guess could use inexact naive .The code should be easy to port in Python and leaves a lot of place for optimization.I didn't check what was available in Python, but maybe you'll need correctly rounded LargeInteger -> Float, and Fraction -> Float, like explained here (Smalltalk too, sorry about that, but the language does not really matter).http://smallissimo.blogspot.fr/2011/09/clarifying-and-optimizing.htmlhttp://smallissimo.blogspot.fr/2011/09/reviewing-fraction-asfloat.html
It's the function  of  module.will return the square root of 4, which is .For , what you need to do is


Answer URL
https://docs.python.org/3/library/math.html#math.isclose
