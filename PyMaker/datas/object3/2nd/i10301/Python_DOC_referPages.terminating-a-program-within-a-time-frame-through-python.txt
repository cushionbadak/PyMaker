Natural Text
I'm running a fortran code from a python script which sometimes takes a while to run. Thus I'm limiting the run time with a code taken from this link:I'm basically putting another function (partly below) in to this one (above) to run fortran code as:However I realised that when fortran code takes more than 15 seconds, which is the boundary in timeout function, it leaves in the core and executes other one in the for loop which creates dump in my cores. In order to prevent that, I wanted to use  since it gives me pid to terminate the job in the core, but I need to wait for the process to be executed as well, like  does. Thus I was wondaring if there is a way to combine popen and check_output properties to wait until job is done within 15 seconds and if its not just terminates that.
Not the most sophisticated piece of code in the world but it may be useful.Edit: Problems with kill not appearing to function.Try using  rather than .I believe that  asks the process to close down cleanly, rather than terminate immediately. Not knowing what drives the fortran script, it's difficult to know what the terminate signal does. Perhaps the code is doing something.For example:if I ran a shell script as follows:    and sent it , it would not print "signal" until the sleep had terminated after 30 seconds, whereas if I issued  it would terminate immediately with nothing printed out.   The short answer, is I don't know but I suspect that the answer lies within the script running the fortran code.EDIT:Note: In order to successfully run  or  or ,  option in x needs to be False. Thus one can use But also note that if you want to write the output to a log file by using  it wont work since  is not an valid argument for your script but for your shell environment. Thus one needs to use only arguments that are valid for the script that python runs.
There's a timeout argument on check_output, just set it to 15 seconds.Documentation here https://docs.python.org/3/library/subprocess.html#subprocess.check_outputcheck_output returns the output as well, so if you care about it just store the result.There's also a wait function that's useful for more complicated use cases. Both check_output and wait block until the process finishes, or until the timeout is reached.
Additional answer to the one above, shell has an internal timeout command as well so it can be used as follows;I'm using it in python as follows;Thus one can check if flag is 1 or 0 to understand what happened to the job. Note that  is just written  at the end of the run if its terminated. For more signal options one can check .


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.check_output
