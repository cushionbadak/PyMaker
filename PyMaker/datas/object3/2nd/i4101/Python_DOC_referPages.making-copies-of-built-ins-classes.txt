Natural Text
I'm trying to write function which creates classes from classes without modifying original one.Simple solution (based on this answer)works fine except  itself:Tested on Python 3.2-Python 3.6.(I know that in current version modification of mutable attributes in  object will change original class, but it is not the case)UpdateEven if we remove  parameter from  if there is anyresulting object doesn't behave like original Why?Can someone explain what mechanism in Python internals prevents copying  class (and many other built-in classes).
The problem here is that  has a  in its , which is a property (i.e. a descriptor) rather than a string:And trying to assign a non-string to the  of a class throws an exception:This is why it's necessary to remove the  from the .As for the reason why your  isn't callable: This is because  rejects anything that isn't a subclass of . This is true for both the 3-argument form:As well as the single-argument form, which actually only works with  as its first argument:This isn't easy to circumvent. Fixing the 3-argument form is simple enough: We make the copy an empty subclass of .But the single-argument form of  is much peskier, since it only works if the first argument is . We can implement a custom  method, but that method must be written in the metaclass, which means  will be different from .There are two reasons why  is so difficult to copy:It's implemented in C. You'll run into similar problems if you try to copy other builtin types like  or .The fact that  is an instance of itself:This is something that's usually not possible. It blurs the line between class and instance. It's a chaotic accumulation of instance and class attributes. This is why  is a string when accessed as  but a descriptor when accessed as . As you can see, it's not possible to make a perfect copy of . Each implementation has different tradeoffs.The easy solution is to make a subclass of , which doesn't support the single-argument  call:The elaborate solution is to make a custom metaclass:


Answer URL
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/reference/expressions.html#is
