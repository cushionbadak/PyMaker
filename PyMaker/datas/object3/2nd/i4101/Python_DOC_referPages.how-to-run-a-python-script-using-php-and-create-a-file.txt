Natural Text
I am trying a POC running a python script in a back-end implemented in PHP. The web server is Apache in a Docker container. This is the PHP code:When I execute the python script using the back-end we are getting a permission denied error for creating the file.My python script:This is the error I'm getting:IOError: [Errno 13] Permission denied: 'testfile.txt'For the directory im working with the permissions are as follows,drwxrwsr-x 2 1001 www-data 4096 May  8 05:35 . drwxrwxr-x 3 1001    1001 4096 May  3 08:49 ..Any thoughts on this? How do I overcome this problem?
To start is is incredibly bad practice to have relative paths in any scripting environment. Start by rewriting your code to use a full path such as  and . My guess is your script is attempting to write to a different spot than you think it is.When you know exactly  where the files are being written go to the directory and run  and check the permissions on the directory. You want it to be writeable by the same user or group as the web server runs.Looking at the permissions you have shown you don't have the user able to write to the directory, just everyone and the group. You need to add user write permissions -  will do the job.
I believe the problem is that you are trying to write to an existing file in the  directory. Typically  will have the sticky permission bit set. That means that only the owner of a file has permission to write or delete it. Group write permissions on files do not matter if the sticky bit is set on the parent directory.So if this is the contents of your /tmpWe might assume that users in the group  should be able to write to . But that is not the case, since  (the /tmp/ directory itself) has the sticky bit set (the  in the permissions section indicates this). The reason why the sticky bit is set here is that everyone should be able to write files there, but not have to worry that other users might modify our temporary files.To avoid permission errors, you can use the standard library tempfile module. This code will create a unique filename such as , so it doesn't matter if  already exists.


Answer URL
https://docs.python.org/3/library/tempfile.html#tempfile-examples
