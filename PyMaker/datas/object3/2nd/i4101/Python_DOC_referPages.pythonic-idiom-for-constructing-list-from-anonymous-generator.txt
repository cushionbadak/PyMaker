Natural Text
I find the -based generators very useful for sequence operations that are too complex to use list comprehensions. Suppose I want to construct a list from a specialized generator. I can write it like:A lot of the time, I only need to evaluate this generator once, so it doesn't really need a name. If Python had multi-line labmdas, I could use:but Python doesn't have multi-line lambdas. Is there any other way to get something like this?(note: please do not suggest using list comprehensions; I'm talking about cases where the logic of when to  is more complex.)
If the logic is too complex for a generator expression, you probably shouldn't be using a lambda. That's not the same as saying you can't.Python lambdas can have as many newlines as you want. They just cannot contain statements, only an expression. You can use a  expression (not a  statement--you need the extra parentheses) in a lambda.Not that useful, is it? You can execute a list of yield expressions, using ... a list display expression--. (Python guarantees the elements of displays are evaluated in order.)Tuples work too. Look at that. Multiple "lines" (not statements). Still not that useful. You want to be able to loop. But the  statement is a statement. (Again, why not use a generator expresson? Those are expressions.) In practice, this is not that limiting, since lambdas can call functions which contain statements.That's how to make a for loop an expression without using a comprehension. But we want the loop inside the lambda.Yep,  is also an expression. If you wrap it in parentheses. I think the nicely-indented s are easier to read though. You can give it a short throwaway name, like  or something.The lambda calculus is Turing complete in its own right, capable of computing anything computable.This means we technically don't even need the  function. You can use recursion instead. (Though in Python, you'd eventually get a Stack Overflow.) But how do you recurse on an anonymous function?You use a "decorator" to give it a name.Of course, the "decorator" can be anonymous too.I didn't write it that way in the first place because your eyes would glaze over from seeing too many lambdas. That's why you should use !If you're interested in just how far we can push lambdas like this, check out Drython, which has similar expression substitutions for every Python statement.
Decorators don't have to return a function.In most cases where a rubyist wants a block in Python, it could be accomplished with a decorator like this.


Answer URL
https://docs.python.org/3/reference/expressions.html#list-displays
