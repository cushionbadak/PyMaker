Natural Text
Problem:Write a program that will search a list to find the first odd number. If an odd number is found, then find the first even number following the odd number. Return the distance between the first odd number and the first even number. Return -1 if no odd numbers are found or there are no even numbers following an odd number.My Code:My Output:Desired Output:What am I doing wrong? Is there a better approach to this problem than what I have done?
Your errors are:If you don't find the even or the odd number you take the first element instead of returning -1.to compute the distance, you must not subtract  (just remove this part and the equation is correct)Instead of storing the values and creating a new list, you should store the positions:And here's a more pythonic version: is an exception raised when next reaches the end of the list without any matching value.
You could approach this with an iterator.An iterator is an object that "remembers" its current position in the list. When the iterator is created, it points to the first element in the list. You can then move the iterator forward with the  function.So the idea is this:Create an iteratorMove the iterator forward until you find the first odd numberMove it further forward until you find an even number, counting the stepsIn step 3, the  function is very useful for counting how many elements the iterator has skipped.
Answering what is wrong I think it the use of your 'else ' statements:Why are you assigning a number from the list  if you do not find any even? That is why your distance is = 1Same thing for :You shouldn't assign a number to odd, if you do not find one. 
I would do something like this: The main problem in your code I see is that you default to the first element in the list instead of defaulting to -1 if odd or even isn't found. You never check to see if its not found. I added a boolean in my code that checks if we have found the element yet. The code works without the boolean altogether but I added it to show that we want to be checking to see if we have found the odd and even element yet or not. If we don't find it: we return -1. Otherwise: we return the difference. 
This is similar to what other commenters have suggested by storing the index of the even and odd numbers:Hope this helps!
There are multiple mistakes in your code, that together contribute to the fact that your code will never return -1. It will even throw  in case you pass in an empty list. The first problem is that you assign  in case you don't find an odd number. This is wrong in the case when there is no odd number. Then  will contain everything apart from the first number in . Same goes, for assigning  in case there is no even number after the first odd one.Your function is correct in case there is a pair of numbers you are looking for. Though, your return statement can be simplified to . Also, in python you can loop over a list using  statement. In case you want to have access to the index of the element you are currently looking at use  like this Finally, here is a nicest simple way to solve your problem I can think of that requires only one iteration of the list.


Answer URL
https://docs.python.org/3/library/stdtypes.html#iterator-types
https://docs.python.org/3/library/functions.html#next
https://docs.python.org/3/library/functions.html#enumerate
