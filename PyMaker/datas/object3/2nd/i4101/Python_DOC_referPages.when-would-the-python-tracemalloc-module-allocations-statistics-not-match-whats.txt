Natural Text
I'm trying to track down a memory leak, so I've doneThis shows no major allocations, all memory allocations are pretty small, while I'm seeing 8+ GB memory allocated in  and  (checking before and after running the command, and after running garbage collection). Furthermore,  confirms that  is not seeing many allocations.  also does not see the allocations.Does anyone know when this could be the case? Some modules are using cython, could this cause issues for tracemalloc?In pmap the allocation looks like: 
From the documentation on tracemalloc:In other words, memory not allocated by the python interpreter is not seen by tracemalloc. This would include anything not done by  at the C-API level, including all standard libc  calls by native code used via extensions, or extension code using  directly. Whether that is the case here is impossible to tell for certain without code to reproduce. You can try running the native code part outside of python through, for example, valgrind, to detect memory leaks in the native code.If there is cython code doing , that could be switched to  to have it traced.
An addition to @danny's answer, because it is too long for a comment.As explained in PEP-464,  uses functionality introduced in PEP-445 for tracking of the memory allocations.Normally, one would have to use  instead of  in order to be able to use  for a C-extension. However, since quite some time also using  and  from pymem.h as addition to (instead of replacing it by ).This is for example what is used in numpy, because in order to be able to wrap raw-c-pointers and take over its ownership numpy used  rather than the python-allocator, which is optimized for small objects - not the most crucial scenario for numpy, as can be seen here:So basically, it is a responsibility of the C-extension to report memory allocations to the -module, on the other hand  cannot be really trusted to register all memory allocations.


Answer URL
https://docs.python.org/3/library/tracemalloc.html
