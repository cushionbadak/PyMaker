Natural Text
Considering the fact that set is an unordered data structure, I began to wonder if it is possible to create a truly "random" number with the usage of it (or with the usage of a dictionary).Lets consider such an input number represented as a string:And then we convert the string into a set:After printing the result of this operation multiple times, we have following example outputs:{'9', '3', '4', '6', '0', '7', '1', '8', '5', '2'}{'3', '4', '2', '1', '5', '7', '0', '8', '6', '9'}Now we can convert the elements of the set into a string with the usage of:And the result of this operation for the sets above would be:93460718523421570869Would generation of a random number in a following way be considered a good practice?And most of all, do I understand correctly that it would be a "pseudorandom" number, because we could reproduce the result with the usage of some seed value or key?
No, this is not good practice.The order is determined by the random hash seed, and this seed is fixed for the current Python interpreter. You would not be able to produce more than one 'random' order per interpreter. The hash seed is also a implementation detail, there to prevent a class of denial of service attacks. Different Python implementations (including future releases produced by Python.org) are free to come up with a different implementation of sets that doesn't use a hash seed. See the  switch documentation for more details.The seed is also aimed at producing good hashing performance, not cryptographic security. The ordering of values in a set is also determined by the insertion order of the elements; it is a combination of the hash for each value and any clashes when translating the hash into the (limited) choices of slots available in a hash table that determines the ordering of the elements. If you were to repeat your experiments, you'd almost certainly see a bias towards certain numbers appearing in certain positions.Stick to the  module to produce cryptographically secure random numbers.For non-secure operations, just use the  module; using  on your digits would already give a far better distribution of the numbers, statistically speaking.


Answer URL
https://docs.python.org/3/using/cmdline.html#cmdoption-r
https://docs.python.org/3/library/secrets.html
