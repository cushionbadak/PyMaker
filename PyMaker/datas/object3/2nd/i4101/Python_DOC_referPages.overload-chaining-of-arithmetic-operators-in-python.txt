Natural Text
This question already has an answer here:Using __add__ operator with multiple arguments in Python                    3 answers                In my classes, I often use overloading like in this site to define their behavior when using operators like ,, etc. by overwriting the ,, etc. methods.An example would be this:Is there any way to define the behavior when chaining of such overwritten operators?For example, an addition of three elements  of a complex class could be implemented much more efficiently by taking all three elements into account at once and not just calculating  sequentially.Of cause I can just introduce a classmethod:Then, I can call  instead. But this requires the user to know that there is a method like this and calling it explicitly, instead of just using .
No, there isn't really anything for such hook methods to know that they are part of a larger equation.What you could do is produce an intermediate result object, one that collects the objects and only when you need the outcome do the actual calculation.For example, if your objects are integer-like, and implements the  method to facilitate conversions, an intermediary value could postpone the calculation until then:Demo:
, , etc... are binary operators.So, no, there is no way to override those operators to get what you want.Go with the static method.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__int__
