Natural Text
I am trying to write functions which emulate  and  but, instead of using the  library, performing the calculation using a series expansion.The formulae are from Mathematics SE, How would you calculate the Tangent without a calculator?:sin(x) = x − x^3/3! + x^5/5! −... tan(x) = sin(x) / √(1 − sin(x)^2)This is my attempt, but I could not figure out how to perform the sign flipping  /  /  / ... part of the series expansion for :The result is not correct because I have not applied a  /  switch. I could add an  /  clause but this seems messy. Is  there a better way?Note: This question is an embellished version of a now deleted question that was posted yesterday by @Lana.
You can avoid recalculating x**n and the factorial at each step by calculating the next term of the sum using the previous one:Compared to jpp's version, it's about twice as fast:And it can get a bit faster if we calculate  once and for all:
You are close. Below is one way using  with  for your series expansion. works by taking each value of an iterable and attaching an index, i.e. 0 for the first item, 1 for the second item, etc. Then we only need to test whether the index is even or odd and use a ternary statement.In addition, you can use  instead of listing the odd numbers required in your expansion.You can avoid the need for a ternary statement and  altogether:If you write out the first few terms by hand, the equivalence will become clear.Notes:The sign of the  function is only correct for 1st and 4th quadrants. This is consistent with the formulae you have provided. You can perform a trivial transformation to the input to account for this.You can improve accuracy by increasing parameter .You can also calculate factorial without a library, but I'll leave that as an exercise.


Answer URL
https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator
