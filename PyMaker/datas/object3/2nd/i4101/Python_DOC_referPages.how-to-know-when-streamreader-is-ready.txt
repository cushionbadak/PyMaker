Natural Text
I'm using  to make TCP connections:I need to keep connections alive. For this, I'm storing a pair of  for future communications. However, I don't know when  has data to read. What can I do with it? Is there a way to make a handler, when the reader is ready?
However, I don't know when  has data to read. What can I do with it?The obvious way to know when a reader stream has data to read is to  it:This will either return the data right away, or suspend the current coroutine, allowing other coroutines to make progress, and only resuming this one when the reader has some data to read. Instead of storing the reader/writer for future communication, you can write a coroutine that does the communication, and store the task that drives it:The idea behind the asyncio stream API is to write such sequential-looking code, leaving it to asyncio to handle polling of file descriptors and scheduling of tasks. You can use combinators like  and  to run thousands of such lightweight coroutines in parallel.Is there a way to make a handler, when the reader is ready?If you need a callback-based API, you should probably use the lower-level transports and protocols instead. However, if you are already working with streams, but still occasionally need an ordinary callback, you can get it by obtaining a :Future has the role equivalent to a coroutine handler. Once  would no longer block, the done-callback will be invoked by the event loop with a single argument, the future. The future will have finished, and its  method can be used to retrieve the received data or an exception.(The above applies to any coroutine or future-compatible object in asyncio, not just to  methods.)


Answer URL
https://docs.python.org/3/library/asyncio-task.html#task
https://docs.python.org/3/library/asyncio-stream.html
https://docs.python.org/3/library/asyncio-task.html?highlight=gather#asyncio.gather
https://docs.python.org/3/library/asyncio-task.html?highlight=gather#asyncio.wait
https://docs.python.org/3/library/asyncio-protocol.html
https://docs.python.org/3/library/asyncio-task.html#asyncio.Future
https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader.read
https://docs.python.org/3/library/asyncio-task.html#asyncio.Future.result
https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader
