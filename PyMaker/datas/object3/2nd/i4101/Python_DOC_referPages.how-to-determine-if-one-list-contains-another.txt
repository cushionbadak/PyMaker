Natural Text
This question already has an answer here:How to check if all items in a list are there in another list?                    6 answers                Is there a built-in Pythonic way to determine if one list completely contains the contents of another, including duplicated entries but disregarding the order of items?
If there were no duplicates, or duplicates didn't matter (that is, if your  and  were both supersets of each other), you'd just use sets. But since if you want  to be a proper superset of , you're talking about multisets. Fortunately,  already implements multisets for you:Notice that this  is proper multiset difference between multisets (just as  is proper set difference between s), not an elementwise subtraction across dicts. So if you subtract a super(multi)set, you get an empty multiset (that is, â€”which is, like all empty collections in Python, falsey).So now:Plus:
Here is a solution using Counter
Another solution using Counter and the builtin intersection method:Test:
Here's an inefficient solution that verifies that for each element in the sublist, its occurrence number in the sublist must be lower or equal than its occurrence number in the superlist:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/reference/expressions.html#boolean-operations
https://docs.python.org/3/reference/datamodel.html#object.__bool__
