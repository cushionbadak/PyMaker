Natural Text
I'm a beginner with Python and I would like to know how this look works.How does it create a list?What does  do?
It returns the indices where the letter  matches a character in the  variable. is a for loop over the letters in , because you're using enumerate you also get an index  as well. However adding the if condition on the end means you only return  when the letter  equals the letter So thiswill return this
Would be much easier for you to under stand if it was written like this :
The easy way to understand single-line for loop is using more basic things:For your first question, using square brackets creates a list and it appends the  value to the list by iterating over the list .The  is a built-in function which allows having a counter while looping over an iterable object. Here,  iterates over indexes of the list while  iterates over the elements of the list . Here is another example:Additioanlly, you have a condition at the end:Here, it only takes the elements of the list  with indexes greater than .I hope, this helps understanding the concepts :)
This function is creating a list of the  indexes of an iterable variable , that match the object This function can be written in a simpler way:The enumerate function allows us to loop over something and have an automatic counterHere each 'ltr' in the variable 'string' is assigned a number 'i' (starting from zero)In the original version of the function, the  loop is written as a pythonic list comprehension. This allows us to loop over an iterable and create a list in one line of code (e.g. ). There are many cases where this form of a list is more efficient (see Are list-comprehensions and functional functions faster than "for loops"?)This function will work on letters:returns and also lists of words:returns Note: Although the variables suggest this is applicable to string and words, a more appropriate naming might be ( and ) or ( and ). If a more general case was sought maybe ( and )...


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
