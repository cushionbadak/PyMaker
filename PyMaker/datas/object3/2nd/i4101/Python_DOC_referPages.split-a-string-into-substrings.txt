Natural Text
I would like to split a string out into each of it own strings representing each field : name,city,points,score,cardsi have these strings :Format is :Name can have spaces and '.' in itCity can have spaces in itThere are sometimes double spaces between ex Score and PointsScores,Points, Card can be negative numbersThe rule i would like to implement in Python, is the following :My problem here is that i cant just replace space as seperator as space can be in name and city, and "-" is being used to seperate name and city. I could do this the brute way and do the stepping through character per character but wondering if Python has a smart way of doing this ?My end result wish is to have each line split up into fields, so i could address ex scorerecord.name, scorerecord.city etc.
With  function and specific regex pattern:The output:https://docs.python.org/3/library/re.html#re.match.groupdict
You can use a regular expression. I think this covers your rules:returns You can paste this into https://regex101.com/ for a detailed understanding of how it works
The regular expression  in a very simple way will do the matching you described:
You can split on the first "-" only like this:And you can split the rest on any number of whitespace like this, splitting up to three times only, so whitespace in the city name are preserved:All that remains now is removing excess whitespace from name and city, which you can do with strip(), and put this in some sort of structure:
Just another regex pattern:Leads to output of:Explanation:the text parts  are captured with "One or more anything others then -" with  between them. the second text must be followed : a (optional)  and number(s) via positive lookahead. the numbers then are captured using , again with optional signs. All has to be inside one line , and multiple lines are activated.


Answer URL
https://docs.python.org/3/library/re.html#re.match.groupdict
