Natural Text
I have a list of dicts, where each dict consists of 3 keys: name, url, and location.Only value of 'name' can be the same throughout the dicts, and both 'url' and 'location' are always different value throughout the list.Example:Then I want to make them grouping based on the value in 'name' as follows.Expected:(actual list consists of >2,000 dicts)I'd be very glad to get solved this situation.Any advice / answers will be greatly appreciated.Thanks in advance.
where  is:You can work with the data using a  and unpacking the result into a list comprehension:And  is:
Since your dataset is relatively small then I guess Time complexity is not a big deal here so you could consider following code.
With auxiliary grouping dict (for Python > 3.5):The output:
Using @Yaroslav Surzhikov comment, here is a solution using itertools.groupby
Something like this? Small deviation: I preferred to store urls and locations in a list inside resDict, not in appended str.Outputs (in one line):
Here's a variant (it's hard to even read it, feels like scratching the right side of my head using my left hand, but at this point, I don't know how to make it shorter) that uses:[Python]: itertools - Functions creating iterators for efficient loopingComprehensions ( and )Rationale (from outer to inner):Group the dictionaries in the initial list based on their value corresponding to the name key ()An auxiliary operation for this to work properly is to sort the list on the same value prior to grouping ()For each such group of dictionaries, perform their "sum" () argument "sums" 2 dictionaries, based on the keys:If the key is name, just take the value from the 1st dictionary (it's the same for both dictionaries, anyway)Otherwise just add the 2 values (strings) with a space in betweenConsiderations:The dictionaries have to stay homogeneous (all must have the same structure (keys))Only the name key is hardcoded (but, if you decide to add other keys which are not strings, you'll have to adjust  too)It could be split for readabilityNot sure about the s (performance wise)


Answer URL
https://docs.python.org/3/library/itertools.html#module-itertools
