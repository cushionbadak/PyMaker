Natural Text
This question mostly has to do with me wanting to better understand how python works. So I just made a simple function that is a more dynamic version of the  function, (it allows for multiple splits, one of which is the  so I can better format some CSV information) but I don't know exactly why one aspect of it works. When you iterate through a string, such as , with a for loop, such as - , why would the  variable store  as one string, rather than  and in the next iteration ?Code that I know does this:Just to be clear, I love that it does this, but I just want to know why.Thanks!
Because it is one character. The  generally is an "escape" character in many contexts, meaning that it and the following character(s) are not literally part of the string, but instead are a representation of a character or other structure that doesn't have a written representation or can't easily be rendered faithfully in that context (such as a newline). A literal  in a string would be rendered as , in fact (where the  itself has to be escaped, to indicate that it's a literal ).
Within a string literal (reference page for python 3), escaped characters, i.e. those that are prepended by a backslash "", are replaced and interpreted according to some rules. You can force python to interpret "\" (backslash) as a single character by prefixing the string literal with a letter "" or "".So "" is actually two characters in your source code, but it is interpreted as the ASCII character "LINE FEED" by pythonA note on user inputString passed with Python2's  are treated in the same way as string literals (strings that you define within the code by just writing them between quotation marks). In both cases, "" is interpreted as a single LINE FEED character. On the other hand, Python3's  and Python2's  read raw string, i.e. "" is interpreted as two characters. So if in your example (I'm assuming Python3) you use and give "" as a input, then the for loop would iterate on "" and "" separately.
There is a mismatch between what we see as a "character" and what python sees, we see  and , each with its own meaning. Python reads however  since  means* ignore next character. So python reads  not  and . This  is for python the "End of line", so we should not interprete this as  (, ) but as (enter). *oversimplefied


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
