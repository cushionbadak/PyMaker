Natural Text
I have code that works but I'm wondering if there is a more pythonic way to do this.  I have a dictionary and I want to see if:a key existsthat value isn't None (NULL from SQL in this case)that value isn't simply quote quote (blank?)that value doesn't solely consist of spacesSo in my code the keys of "a", "b", and "c" would succeed, which is correct.What I have above works, but that seems like an awfully long set of conditions.  Maybe this simply is the right solution but I'm wondering if there is a more pythonic "exists and has stuff" or better way to do this?UPDATEThank you all for wonderful answers and thoughtful comments.  With some of the points and tips, I've updated the question a little bit as there some conditions I didn't have which should also succeed.  I have also changed the example to a loop (just easier to test right?).
Try to fetch the value and store it in a variable, then use object "truthyness" to go further on with the valueif  is not in the dict,  returns  and fails the first conditionif  is in the dict but yields  or empty string, test fails, if  yields a blank string,  returns falsy string and it fails too.let's test this:results:if your values can contain ,  or other "falsy" non-strings, you'll have to test for string, in that case replace:byso condition matches if not  and either not a string (everything matches) or if a string, the string isn't blank.
You can use a list comprehension with  to account for whitespace in strings.Using  is natural in Python to cover False-like objects, e.g. , , 0, etc. So note this only works if 0 is not an acceptable value.
The get method for checking if a key exists is more efficient that iterating through the keys. It checks to see if the key exists without iteration using an  complexity as apposed to . My preferred method would look something like this:
Well I have 2 suggestions to offer you, especially if your main issue is the length of the conditions.The first one is for the check if the key is in the dict. You don't need to use  you can just use .The second suggestion to make the condition smaller is to break down into smaller conditions stored as booleans, and check these in your final condition:
it check exactly for  not only 
 is a generator function responsible for generating conditions to apply in a short-circuiting manner using the  function. Given ,  will check if a exists in the dict, and so on until there is no condition to apply, in that case  will evaluate to .


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.get
