Natural Text
Due to specific requirements of my application, I need to have the same timestamp added to a single logging entry but with different formats for each timestamp.  These two timestamps are NOT adjacent to one another, so other log record fields are between them. Since  is passed as a second parameter against  in the , I've yet to figure out how you can provide two different date formats for a single logging entry.The ONLY question I'm asking is if this possible with Python WITHOUT custom formatters or filters.
This is not possible in stdlib , because of the way the source code is written. The formatter class will set an  on each  instance by using a  method.  As you can see in the logging module, code here, the relevant field  is actually a string attribute and not a  instance.   This means it can not accept custom formatting beyond the trivial string operations such as padding and alignment.I would agree with you that this is a shortcoming in stdlib  module, and urge you to consider a more powerful logging framework such as structlog.Other readers of your question might not be so against using a  subclass in stdlib logging. For them, I would suggest defining a formatter which uses a  instance on the  instance, in combination with a braces-style formatter template string. This allows unrestricted use of the  field with multiple strftime formats.The set-up is simpler than using a  or , it's just a one-line override of the  method:Note: if one of the formats you need is just a timestamp (seconds since epoch), then you don't need custom Formatter "gymnastics" at all - you can just use the  field (which accepts float formatting customizations) in combination with  field.
Very basic example with raw timestamp and human-readable date:Output: 


Answer URL
https://docs.python.org/3/howto/logging-cookbook.html#filters-contextual
