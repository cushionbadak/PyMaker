Natural Text
im trying to rewrite every character in a file with rot 13 and im stuck, im not sure how to go through the file and look at every character and not worry about the spaces between paragraphs
If you just want to do this as easily as possible, use the  codec, as described in Joran Beasley's answer.If you want to know how to do it manually, or what was wrong with your existing code, I can explain. You're actually very close.If  is a file,  iterates over the lines of the file, not the characters. If you want to iterate over the characters one by one, either loop around , or read the whole thing into a string with  and then iterate over .If you fix that, your program now works as written. However, it's more complicated than necessary.First,  is unnecessary.  searches the string, substitutes the replacement character for all instances of the search character, and returns the resulting string. But you don't need any of that—you're searching all one character, replacing the one instance of the search character with the resulting character, and returning the resulting character as a one-character string—in other words, the same string you already had. All you want to do here is .Also, you can remove the three separate  and ; all three conditions lead to the same thing.Also, instead of comparing  to ordinal values (which are hard to read, and easy to get wrong), you can just compare  to character values. So:You can simplify your comparisons further by using :(This replaces the  line in the above code, and you do the same thing for the  line.)You can simplify things even further by using the collections in the  class:(This replaces the whole / block.)Or, if you know that the  (mod/remainder) operator does, you can simplify it even further:  is just  (where  is a letter number from  to , which you can get with ). The usual C implementations take advantage of this, and you can write them more clearly with the  function in Python. But I'll leave that as an exercise for the reader.
See the documentation on the  module, or the built-in  in the interactive interpreter, for an explanation of these functions. See the documentation on the Standard Encodings (and following sections), or import the  module and use the built-in , to see a list of encodings you can use with these functions.


Answer URL
