Natural Text
Using Django 1.5.1:If I uncomment the commented lines and call a view which has , the traceback is printed to the console:But if the lines stay commented, no traceback is printed to the console, just:I thought if  logger is not configured, it would propagate to the root logger, which prints everything to console.I didn't find any information that  is special.Why it doesn't work?Here I read:Prior to Django 1.5, the LOGGING setting always overwrote the default Django logging configuration. From Django 1.5 forward, it is possible to get the project’s logging configuration merged with Django’s defaults, hence you can decide if you want to add to, or replace the existing configuration.If the disable_existing_loggers key in the LOGGING dictConfig is set to True (which is the default) the default configuration is completely overridden. Alternatively you can redefine some or all of the loggers by setting disable_existing_loggers to False.In :So by default  has . But In my case I have .
The solution is to prevent Django from configuring logging and handle it ourselves. Fortunately this is easy. In :UPDATE ~March 2015: Django has clarified their documentation:If the disable_existing_loggers key in the LOGGING dictConfig is set  to True then all loggers from the default  configuration will be disabled. Disabled loggers are not the same as  removed; the logger will still exist, but will silently discard  anything logged to it, not even propagating entries to a parent  logger. Thus you should be very careful using  'disable_existing_loggers': True; it’s probably not what you want.  Instead, you can set disable_existing_loggers to False and redefine  some or all of the default loggers; or you can set LOGGING_CONFIG to  None and handle logging config yourself.For posterity and detail: The explanation? Most of the confusion I think comes down to Django's poor explanation of , which says that when True, "the default configuration is completely overridden". In your own answer you discovered that is not correct; what's happening is that the existing loggers, which Django already configures, are disabled not replaced.The Python logging documentation explains it better (emphasis added):disable_existing_loggers – If specified as False, loggers which exist  when this call is made are left alone. The default is True because  this enables old behaviour in a backward-compatible way. This  behaviour is to disable any existing loggers unless they or their  ancestors are explicitly named in the logging configuration.Based on Django docs we think, "override the defaults with my own LOGGING configuration and anything I don't specify will bubble up". I've tripped over this expectation as well. The behavior we expect is along the lines of replace_existing_loggers (which isn't a real thing). Instead the Django loggers are shut up not bubbled up.We need to prevent the setup of these Django loggers in the first place and here the Django docs are more helpful:If you don’t want to configure logging at all (or you want to manually  configure logging using your own approach), you can set LOGGING_CONFIG  to None. This will disable the configuration process.Note: Setting LOGGING_CONFIG to None only means that the configuration  process is disabled, not logging itself. If you disable the  configuration process, Django will still make logging calls, falling  back to whatever default logging behavior is defined.Django will still use its loggers but since they are not handled (and then disabled) by the configuration, those loggers will bubble up as expected. A simple test with the above settings:
Ok, so the behavior is "correct", but not expected. :What is happening is that default logging configuration is applied and  logger is created. Then my custom  configuration is applied with , but Python doesn't delete already existing logger , but only disables it.So I have to manually reconfigure  logger in my configuration. :(
For Django-2.1 I found that the logging configuration is more concise:As quoted in the docs:All loggers except django.server propagate logging to their parents, up to the root django logger. The console and mail_admins handlers are attached to the root logger to provide the behavior described above.This is in accordance with the docs of  which state that: NoteIf you attach a handler to a logger and one or more of its ancestors,  it may emit the same record multiple times. In general, you should not  need to attach a handler to more than one logger - if you just attach  it to the appropriate logger which is highest in the logger hierarchy,  then it will see all events logged by all descendant loggers, provided  that their propagate setting is left set to True. A common scenario is  to attach handlers only to the root logger, and to let propagation  take care of the rest.Therefore I decided not to prevent Django from configuring logging. I wanted to stop sending emails to the admins because I use sentry, and I just configured the root logger to use the  and  handlers, according to the django docs examples:Which results in:Not tested in production yet, but it seems that it will work as expected.


Answer URL
https://docs.python.org/3/library/logging.html#logging.Logger.propagate
