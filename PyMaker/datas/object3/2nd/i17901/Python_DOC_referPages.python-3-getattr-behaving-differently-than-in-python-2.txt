Natural Text
I need to write a class that implements 32-bit unsigned integers the same way they work in C programming language. What I care about most are the binary shifts, but I generally want my class to:Have the same interface  has and works with  properlyAny operation with my  class (int + ,  + int etc) also return U32Be pure-python - I don't want to use NumPy, ctypes, etc.As can be found in this answer, I got a solution that works under Python 2. Recently I tried to run it under Python 3 and noticed that while the following test code works fine under older versions of Python, Python 3 raises an error:And here's the error:It looks like the  trick doesn't get called at all in Python 3. Why is that? How can I get this code working both under Python 2 and 3?
Your Python 2 solution relied on old style class behaviour. Your Python 2 code would fail in the same manner as Python 3 were you to make your class inherit from :This is because special methods are looked up on the type, not the object itself, for new-style classes. This behaviour change fixed several corner cases with the old model.In practice this means that methods like  are looked up directly on  itself, not as attributes on instances of , and the  hook is not consulted.Unfortunately, special method lookups also bypass any  or  hooks. See the documentation on Special Method lookups:In addition to bypassing any instance attributes in the interest of correctness, implicit special method lookup generally also bypasses the  method even of the objectâ€™s metaclass:[...]Bypassing the  machinery in this fashion provides significant scope for speed optimisations within the interpreter, at the cost of some flexibility in the handling of special methods (the special method must be set on the class object itself in order to be consistently invoked by the interpreter).Your only option then, is to set all special methods dynamically on your class. A class decorator would do fine here:I updated the proxy function to handle multiple arguments correctly, and to auto-coerce back to your custom class if  is returned.


Answer URL
