Natural Text
I am aware that there are a lot of almost identical questions, but non seems to really target the general case.So assume I want to open a file, read it in memory, possibly do some operations on the respective bitstring and write the result back to file.The following is what seems straightforward to me, but it results in completely different output. Note that for simplicity I only copy the file here:I looked at ,  and . The transformations make sense as far as I can see.As expected, the output file has exactly the same size in bits as the input file.EDIT: I considered the possibility that the leading '0b' has to be cut. See the following:Maybe the  part should be cut from ?
Note two things:The "0b" at the beginning. This means that your slicing will be off by 2 bits.The lack of padding to 8 bits. This will corrupt your data every time unless it happens to mesh up with point 1.Process the file byte by byte instead of attempting to process it in one big gulp like this. If you find your code too slow then you need to find a faster way of working byte by byte, not switch to an irreparably flawed method such as this one.
You could simply write the data variable back out and you'd have a successful round trip.But it looks like you intend to work on the file as a string of  and  characters. Nothing wrong with that (though it's rarely necessary), but your code takes a very roundabout way of converting the data to that form. Instead of building a monster integer and converting it to a bit string, just do so for one byte at a time: is now a sequence of zeros and ones. (In a single string, same as you have it; but if you'll be making changes, I'd keep the bitstrings in a list). The reverse conversion is also best done byte by byte:This uses the  recipe from the  documentation.
You can use the  module to read and write binary data. (Link to the doc here.)EDITSorry, I was mislead by your title. Iâ€™ve just understand that you write binary data in a text file instead of writing binary data directly.
Ok, thanks to alexis and being aware of Ignacio's warning about the padding, I found a way to do what I wanted to do, that is read data into a binary representation and write a binary representation to file:If I did not do it exactly the way proposed by alexis then that is because it did not work. Of course this is terribly slow but now that I can do the simplest thing, I can optimize it further.


Answer URL
