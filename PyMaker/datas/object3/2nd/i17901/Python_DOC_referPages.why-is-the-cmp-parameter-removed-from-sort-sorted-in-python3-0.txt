Natural Text
from python wiki: I do not understand the reasoning why cmp is removed in py3.0consider this example:and now consider this version (recommended and compatible with 3.0):The latter is very verbose and the same purpose is achieved in the former with just one line. On another note, I am writing my custom class for which I want to write the  method. from my little reading across web, it is recommended to write Again, why this recommendation? can I not just define  making life simpler?
For two objects  and ,  requires that one of , , and  is true.  But that might not be the case: consider sets, where it's very common that none of those are true, e.g.  vs .So  and friends were introduced.  But that left Python with two separate ordering mechanisms, which is kind of ridiculous, so the less flexible one was removed in Python 3.You don't actually have to implement all six comparison methods.  You can use the  decorator and only implement  and .edit: Also note that, in the case of sorting,  functions can be more efficient than : in the example you gave, Python may have to call your Python comparison function O(n²) times.  But a  function only needs to be called O(n) times, and if the return value is then a builtin type (as it very often is), the O(n²) pairwise comparisons go through C.
 was removed because the  attribute to  and  is superior in most cases. It was a hold-over from C more than anything, and was confusing to boot. Having to implement a separate  method next to the rich comparison operators (, , etc.) was befuddling and unhelpful.You can always use  to adapt an existing  function.Your specific example could have been implemented without a  function, of course, as integers are already orderable; just add .For custom classes, use the  decorator to expand a  and one comparison operator method (e.g. , or , etc.) into a full ordering implementation.


Answer URL
