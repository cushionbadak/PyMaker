Natural Text
I am trying to implement in python Donald Knuth's algorithm for codebreaking mastermind in not more than 5 moves. I have checked my code several times, and it seems to follow the algorithm, as its stated here:http://en.wikipedia.org/wiki/Mastermind_(board_game)#Five-guess_algorithmHowever, I get that some of the secrets take 7 or even 8 moves to accomplish. Here is the code:I get:for [5, 3, 3, 4] counter is 7for [5, 4, 4, 5] counter is 8 If someone could help I would appreciate it very much!Thanks,mike
1. What's wrong with your implementationThere are four mistakes.The comment is wrong on this line:This is actually the "max" in the minimax (which should have been clear from the call to ). You are trying to find the guess that minimizes the maximum size of the groups of possible secrets that yield the same evaluation. Here we are finding the maximum size of the groups, so that's the "max".That mistake caused you to make this one:Here you need to take the min, not the max.On the following lines you pick the first item among  that would generate the same evaluation as :But that's not right: the guess we want here is , not some other guess that would generate the same evaluation!Finally, you don't properly handle the case where  has only one remaining item. In this case all possible guesses are equally good at distinguishing among this item, so the minimax procedure doesn't differentiate between the guesses. In this case you should just guess .2. Other comments on your codeThe variable names are poorly chosen. For example, what is ? This is the guess that you are evaluating, so surely it should be called something like ? I suspect that your mistake ยง1.3 above was partly caused by this poor choice of variable name.There's vast amounts of needless copying. All of your  are pointless and can be removed. The variable  is also pointless (why not just assign to ?), as is  (which not just assign to ?)You build  consisting of all possible secrets that would match the last guess, but then you throw away all the entries in  that aren't also in . So why not just loop over  and keep the entries that match? Like this:You build up a table  which counts the number of occurrences of each pattern of bulls and cows. You have noted the fact that there are 14 possible (bull, cow) pairs and so you've written the functions  and  to map back and forth between (bull, cow) pairs and their indices in the list.These functions could have much simpler implementations if you took a data-driven approach and used the built-in  method:But after fixing mistake ยง1.3 above, you don't need  any more. And  could be avoided if you kept the counts in a  instead of a list. So instead of:you could simply write:3. Improved codeEvaluating a guess (your function ) can be reduced to just three lines using the class  from the standard library.I happen to prefer using letters for the codes in Mastermind.  is so much nicer to read and type than . But my  function is flexible as to how you represent the codes and guesses, as long as you represent them as sequences of comparable items, so you can use lists of numbers if you prefer.Notice also that I've written some doctests: these are a quick way to simultaneously provide examples in the documentation and to test the function.The function  provides a convenient way to build the list of codes without having to write four nested loops:Knuth's five-guess algorithm uses the minimax principle. So why not implement it by taking the  of a sequence of calls to ?Here's an example run:


Answer URL
