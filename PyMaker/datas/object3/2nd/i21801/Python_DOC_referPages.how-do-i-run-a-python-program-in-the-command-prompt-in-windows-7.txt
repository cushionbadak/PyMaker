Natural Text
I'm trying to figure out how to run Python programs with the Command Prompt on Windows 7. (I should have figured this out by now...)When I typed "python" into the command prompt, I got the following error:'python' is not recognized as an internal or external command,  operable program or batch file.The first place I found when looking for help was this site: http://docs.python.org/faq/windows.html#how-do-i-run-a-python-program-under-windows.It was somewhat helpful, but the tutorial was written for Windows 2000 and older, so it was minimally helpful for my Windows 7 machine. I attempted the following:For older versions of Windows the easiest way to do this is to edit the C:\AUTOEXEC.BAT >file. You would want to add a line like the following to AUTOEXEC.BAT:This file did not exist on my machine (unless I'm mistaken). Next, I tried this: (here: How do I run a Python program?)Putting Python In Your PathWindowsIn order to run programs, your operating system looks in various places, and tries to match the name of the program / command you typed with some programs along the way.In windows:control panel > system > advanced > |Environmental Variables| > system variables -> Paththis needs to include: C:\Python26; (or equivalent). If you put it at the front, it will be the first place looked. You can also add it at the end, which is possibly saner.Then restart your prompt, and try typing 'python'. If it all worked, you should get a ">>>" prompt.This was relevant enough for Windows 7, and I made my way to the System Variables. I added a variable "python"  with the value "C:\Python27"I continued to get the error, even after restarting my computer.Anyone know how to fix this?
You need to add  to your system PATH variable, not a new variable named "python".Find the system PATH environment variable, and append to it a  (which is the delimiter) and the path to the directory containing python.exe (e.g. ). See below for exact steps.The PATH environment variable lists all the locations that Windows (and ) will check when given the name of a command, e.g. "python" (it also uses the PATHEXT variable for a list of executable file extensions to try). The first executable file it finds on the PATH with that name is the one it starts.Note that after changing this variable, there is no need to restart Windows, but only new instances of  will have the updated PATH. You can type  at the command prompt to see what the current value is.Exact steps for adding Python to the path on Windows 7+:Computer -> System Properties (or Win+Break) -> Advanced System SettingsClick the  button (in the Advanced tab)Edit PATH and append  to the end (substitute your Python version)Click OK. Note that changes to the PATH are only reflected in command prompts opened after the change took place.
Assuming you have Python2.7 installed Goto the Start MenuRight Click "Computer"Select "Properties"A dialog should pop up with a link on the left called "Advanced system settings". Click it.In the System Properties dialog, click the button called "Environment Variables".In the Environment Variables dialog look for "Path" under the System Variables window.Add ";C:\Python27" to the end of it. The semicolon is the path separator on windows.Click Ok and close the dialogs. Now open up a new command prompt and type "python"It should work. 
It has taken me some effort looking for answers here, on the web, and and in the Python documentation, and testing on my own, to finally get my Python scripts working smoothly on my Windows machines (WinXP and Win7). So, I just blogged about it and am pasting that below in case it's useful to others. Sorry it's long, and feel free to improve it; I'm no expert.[UPDATE: Python 3.3 now includes the Python Launcher for Windows, which allows you to type py (rather than python) to invoke the default interpreter, or py -2, py -3, py -2.7, etc. It also supports shebang lines, allowing the script itself to specify. For versions prior to 3.3, the launcher is available as a separate download.http://docs.python.org/3/whatsnew/3.3.html]Running Python scripts conveniently under WindowsMaybe you're creating your own Python scripts, or maybe someone has given you one for doing something with your data files. Say you've acquired a Python script and have saved it to "D:\my scripts\ApplyRE.py". You want to run it conveniently by either double-clicking it or typing it into the command line from any location, with the option of passing parameters to it like this (-o means "overwrite the output file if it already exists"): Say you also have a data file, "C:\some files\some lexicon.txt". The simplest option is to move the file or the script so they're in the same location, but that can get messy, so let's assume that they'll stay separate.Making sure Windows can find the Python interpreterAfter installing Python, verify that typing python into a command prompt works (and then type exit() to get back out of the Python interpreter). If this doesn't work, you'll need to append something like ";C:\Python32" (without quotes) to the PATH environment variable. See PATHEXT below for instructions.Associating Python with .py and .pycVerify that double-clicking on ApplyRE.py runs it. (It should also have a Python logo as its icon and be labeled "Python File", by the way.) If this isn't already done, right-click on a .py file, choose Open With, Choose Program, and check "Always use..." This association improves convenience but isn't strictly necessary--you can specify "python" every time you want to run a script, like this:Here's a very specific variation, which is optional unless you need to specify a different version of the interpreter.But that's a pain. Fortunately, once Python is installed, in the PATH, and associated with .py, then double-clicking a .py file or directly typing it as a command should work fine. Here, we seem to be running the script directly--it's nice and simple to run it on a sample file that's located in the "my scripts" folder along with the script.Omitting the .py extension (editing PATHEXT)To further reduce typing, you can tell Windows that .py (and perhaps .pyc files) are executable. To do this, right-click Computer and choose Properties, Advanced, Environment Variables, System Variables. Append ";.PY;.PYC" (without quotes) to the existing PATHEXT variable, or else create it if you're certan it doesn't exist yet. Close and reopen the command prompt. You should now be able to omit the .py (FYI, doing so would cause ApplyRE.exe or ApplyRE.bat to run instead, if one existed).Adding scripts to the system PATHIf you're going to use your scripts often from the command prompt (it's less important if doing so via using BAT files), then you'll want to add your scripts' folder to the system PATH. (Next to PATHEXT you should see a PATH variable; append ";D:\my scripts" to it, without quotes.) This way you can run a script from some other location against the files in current location, like this:Success! That's pretty much all you need to do to streamline the command-line.Running directly without tweaking the PATHIf you're a fast typist or don't mind creating a batch file for each situation, you can specify full paths (for the script, or for the parameters) instead of tweaking PATH.Creating shortcuts or batch filesIf .py is associated with an installed Python, you can just double-click ApplyRE.py to run it, but the console may appear and disappear too quickly to read its output (or failure!). And to pass parameters, you'd need to first do one of the following.(a) Right-click and create a shortcut. Right-click the shortcut to edit properties and append parameters to Target.(b) Create a batch file--a plain text file with a distinct name such as ApplyRErun.bat. This option is probably better because you can ask it to pause so you can see the output. Here is a sample BAT file's contents, written to be located and run from c:\some files .Advanced: appending to PYTHONPATHThis usually isn't necessary, but one other environment variable that may be relevant is PYTHONPATH. If we were to append d:\my scripts to that variable, then other Python scripts in other locations could make use of those via import statements.
You have to put the python path in the  variable.In the System Variables section, you should have User Variables and System Variables. Search for the  variable and edit its value, adding at the end .The  is to tell the variable to add a new path to this value, and the rest, is just to tell which path that is.On the other hand, you can use  to add the variable you created.
Python comes with a script that takes care of setting up the windows path file for you.After installation, open command promptGo to the directory you installed Python inRun python and the win_add2path.py script in Tools\ScriptsNow you can use  as a command anywhere.
You don't add any variables to the System Variables.  You take the existing 'Path' system variable, and modify it by adding a semi-colon after, then c:\Python27
Go to the Start MenuRight Click "Computer"Select "Properties"A dialog should pop up with a link on the left called "Advanced system settings". Click it.In the System Properties dialog, click the button called "Environment Variables".In the Environment Variables dialog look for "Path" under the System Variables window.Add ";C:\Python27" to the end of it. The semicolon is the path separator on windows.Click Ok and close the dialogs.Now open up a new command prompt and type "python" or if it says error type "py" instead of "python"
first make sure u enter the path environmental variableC:\ path %path%;C:\Python27    press Enter C:\Python27>python file_name   press Enter
So after 30 min of R&D i realized that after setup the PATH at environment variablei.e." C:\Python/27; " just restartnow open cmd :C:> cd Python27C:\ Python27> python.exeUSE python.exe with extensionalternative option is :if the software is installed properly directly run Python program, your command line screen will automatically appear without cmd.Thanks.
Just want to mention, when you do:The PATH variable in "user variables for administrator" is changed.But you can also follow the others' answer to open: System -> advanced system settings -> advanced -> Environment Variables, and modify/add the variable Path in "System Variables", add  at the end of it.
Even after going through many posts, it took several hours to figure out the problem. Here is the detailed approach written in simple language to run python via command line in windows.1. Download executable file from python.orgChoose the latest version and download Windows-executable installer. Execute the downloaded file and let installation complete.2. Ensure the file is downloaded in some administrator folderSearch file location of Python application.Right click on the .exe file and navigate to its properties. Check if it is of the form, "C:\Users....". If NO, you are good to go and jump to step 3. Otherwise, clone the Python37 or whatever version you downloaded to one of these locations, "C:\", "C:\Program Files", "C:\Program Files (x86)".3. Update the system PATH variableThis is the most crucial step and there are two ways to do this:-(Follow the second one preferably)1. MANUALLY     - Search for 'Edit the system Environment Variables' in the search bar.(WINDOWS 10)    - In the System Properties dialog, navigate to "Environment Variables".    - In the Environment Variables dialog look for "Path" under the System Variables window. (# Ensure to click on Path under bottom window named System Variables and not under user variables)   - Edit the Path Variable by adding location of Python37/ PythonXX folder. I added following line:-" ;C:\Program Files (x86)\Python37;C:\Program Files (x86)\Python37\Scripts " - Click Ok and close the dialogs.2. SCRIPTED - Open the command prompt and navigate to Python37/XX folder using cd command.- Write the following statement:-"python.exe Tools\Scripts\win_add2path.py"You can now use python in the command prompt:)1. Using ShellType python in cmd and use it.2. Executing a .py fileType python filename.py to execute it.
in powershell enter the following: close and open the powershell and try again. this should solve your problem. 
You need to edit the environment variable named , and add  to the end of that. The semicolon separates one pathname from another (you will already have several things in your ).Alternately, you can just typeat the command prompt without having to modify any environment variables at all.
On Windows you use  instead of .If you add  to your path, you can shorten it to just , but you do not need to do this.
Modify the  variable too and append  otherwise the executable can not be found.
First install the Python into your windows by using this urland then add path variable as 
Use this PATH in Windows 7:
I also found the same problem even though i've added the path in the environment variable. Finally, I put my "C:\Python27" in the FRONT part of the "PATH" in environment variable and after restarting the cmd, it works!!! I hope this can help.
For Windows 10 & Python 3.5.1 users:While installing Python on Windows 10, please don't forget to check the "Add to cmd prompt" option before hitting the "Install". This would help in easily access python from cmd.If the option was not checked, then please use Set Path in cmd to see if it is available as executables or not. If not, Navigate to Start >> Control Panel >> System and Security >> System >> Advanced System Settings >> Advanced >> Environment Variables.. >> Select PATH from System Variables and Edit it. Then copy "C:\Python35\cmd" in the new line. After this please add .PY to PATHEXT in the same procedure.Also please check if Start >> Control Panel >> System and Security >> System >> Advanced System Settings >> Advanced >> Environment Variables.. >> User variables from Username >> PATH is containing these two lines - "C:\Users\Username\AppData\Local\Programs\Python\Python35-32\Scripts\" & "C:\Users\Username\AppData\Local\Programs\Python\Python35-32\". Else please add them manually.Ref: https://docs.python.org/3/using/windows.html 
Goto the Start MenuRight Click "Computer"Select "Properties"A dialog should pop up with a link on the left called "Advanced system settings". Click it.In the System Properties dialog, click the button called "Environment Variables".In the Environment Variables dialog look for "Path" under the System Variables window.Add ";C:\Python27" to the end of it. The semicolon is the path separator on windows.Click Ok and close the dialogs.Now open up a new command prompt and type "python"If still the problem persists then type "py" instead of "python" in command prompt. might help!!!!
press start button then type . - Note you will need to run the command prompt as 'Adminstrator'.write  then press enter.[here  for giving accessing permission to all users and in  27 is version 2.7] will prevent the original value from destroying. C:\Python27 will be appended to the current  value.that's it,you are done.
For windows 8, just type "py".


Answer URL
https://docs.python.org/3/using/windows.html
