Natural Text
To launch programs from my Python-scripts, I'm using the following method:So when i launch a process like , my program waits until the the process is finished, and only then i get the complete output of my program. This is annoying if i'm running a process that takes a while to finish.Can i let my program write the process output line by line, by polling the process output before it finishes in a loop or something?**[EDIT]Sorry i didn't search very well before posting this question. Threading is actually the key. Found an example here which shows how to do it: **Python Subprocess.Popen from a thread
You can use iter to process lines as soon as the command outputs them: . Here's a full example showing a typical use case (thanks to @jfs for helping out):
Ok i managed to solve it without threads (any suggestions why using threads would be better are appreciated) by using a snippet from this question Intercepting stdout of a subprocess while it is running
To print subprocess' output line-by-line as soon as its stdout buffer is flushed in Python 3:Notice: you do not need  -- the loop ends when eof is reached. And you do not need  -- the read-ahead bug is fixed in Python 3.See also, Python: read streaming input from subprocess.communicate().
@toklandtried your code and corrected it for 3.4 and windowsdir.cmd is a simple dir command, saved as cmd-file
For anyone trying the answers to this question to get the stdout from a Python script note that Python buffers its stdout, and therefore it may take a while to see the stdout.This can be rectified by adding the following after each stdout write in the target script:
In case someone wants to read from both  and  at the same time using threads, this is what I came up with:I just wanted to share this, as I ended up on this question trying to do something similar, but none of the answers solved my problem. Hopefully it helps someone!Note that in my use case, an external process kills the process that we .
In Python >= 3.5 using  works for me:(getting the output during execution also works without )https://docs.python.org/3/library/subprocess.html#subprocess.run
This PoC constantly reads the output from a process and can be accessed when needed. Only the last result is kept, all other output is discarded, hence prevents the PIPE from growing out of memory:print_date.pyoutput: You can clearly see that there is only output from ~2.5s interval nothing in between.
This works at least in Python3.4
To answer the original question, the best way IMO is just redirecting subprocess  directly to your program's  (optionally, the same can be done for , as in example below)


Answer URL
https://docs.python.org/3/library/functions.html#iter
https://docs.python.org/3/library/subprocess.html#subprocess.run
