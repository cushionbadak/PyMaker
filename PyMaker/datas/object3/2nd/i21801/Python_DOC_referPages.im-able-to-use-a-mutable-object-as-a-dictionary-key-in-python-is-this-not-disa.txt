Natural Text
I thought only immutable objects can be dictionary keys, but the object i above is mutable.
Any object with a __hash__ method can be a dictionary key.  For classes you write, this method defaults to returning a value based off id(self), and if equality is not determined by identity for those classes, you may be surprised by using them as keys:Changed in version 2.6: __hash__ may now be set to None to explicitly flag instances of a class as unhashable. [__hash__]
The requirement is that the hash of an object doesn't change over time, and that it keeps comparing equal (==) with its original value. Your class A meets both these requirements, so it makes a valid dictionary key. The x attribute is not considered at all in keying, only the object identity is.
An object kan be a key in a dictionary if it is hashable.Here is the definition of hashable from the documentation:An object is hashable if it has a hash value which never changes during its lifetime (it needs a  method), and can be compared to other objects (it needs an  or method). Hashable objects which compare equal must have the same hash value.Hashability makes an object usable as a dictionary key and a set member, because these data structures use the hash value internally.All of Pythonâ€™s immutable built-in objects are hashable, while no mutable containers (such as lists or dictionaries) are. Objects which are instances of user-defined classes are hashable by default; they all compare unequal, and their hash value is their id().Since  provides a default implementation of ,  and  this means that anything deriving from  is hashable unless it is explicitly defined not to be hashable. It is not disallowed to create a mutable type that is hashable, but it might not behave as you want.
@fred-nurk's example above luckily no longer works in Python 3, because of this change:A class that overrides  and does not define  will have its  implicitly set to . When the  method of a class is , instances of the class will raise an appropriate  when a program attempts to retrieve their hash value...Thank God for that. However, if you explicitly define  for yourself, you can still do evil things:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__hash__
