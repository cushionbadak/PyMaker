Natural Text
I know virtual methods from PHP or Java.How can they be implemented in Python?Or have I to define an empty method in an abstract class and override it?
Sure, and you don't even have to define a method in the base class. In Python methods are better than virtual - they're completely dynamic, as the typing in Python is duck typing. and  in Python don't even have to derive from a common base class to allow this behavior - you gain it for free. That said, some programmers prefer to define their class hierarchies in a more rigid way to document it better and impose some strictness of typing. This is also possible - see for example the  standard module.
Python methods are always virtual.
This is the recommended exception to raise on "pure virtual methods" of "abstract" base classes that don't implement a method.https://docs.python.org/3.5/library/exceptions.html#NotImplementedError says:This exception is derived from . In user defined base classes, abstract methods should raise this exception when they require derived classes to override the method.As others said, this is mostly a documentation convention and is not required, but this way you get a more meaningful exception than a missing attribute error.E.g.:gives:Related: Is it possible to make abstract classes in Python?
Actually, in version 2.6 python provides something called abstract base classes and you can explicitly set virtual methods like this:It works very well, provided the class does not inherit from classes that already use metaclasses.source: http://docs.python.org/2/library/abc.html 
Python methods are always virtuallike Ignacio said yetSomehow class inheritance may be a better approach to implement what you want.Results should be:
Python methods are always virtual....provided they are not private ! Too bad for a C++ guy.
Something like a virtual method in C++ (calling method implementation of a derived class through a reference or pointer to the base class) doesn't make sense in Python, as Python doesn't have typing. (I don't know how virtual methods work in Java and PHP though.)But if by "virtual" you mean calling the bottom-most implementation in the inheritance hierarchy, then that's what you always get in Python, as several answers point out.Well, almost always...As dplamp pointed out, not all methods in Python behave like that. Dunder method don't. And I think that's a not so well known feature.Consider this artificial exampleNowHowever, consider this oneNowThe only thing we've changes was making  a dunder method.A problem with the first behavior can be that you can't change the behavior of  in the derived class without impacting the behavior of . This very nice talk by Raymond Hettinger gives an example for a use case where this is inconvenient.


Answer URL
https://docs.python.org/3/library/abc.html
