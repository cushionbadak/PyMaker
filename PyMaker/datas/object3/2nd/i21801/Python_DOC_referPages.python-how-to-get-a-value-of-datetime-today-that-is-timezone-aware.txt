Natural Text
I am trying to subtract one date value from the value of  to calculate how long ago something was. But it complains:The value  doesn't seem to be "timezone aware", while my other date value is. How do I get a value of  that is timezone aware? Right now it's giving me the time in local time, which happens to be PST, i.e. UTC-8hrs. Worst case, is there a way I can manually enter a timezone value into the  object returned by  and set it to UTC-8? Of course, the ideal solution would be for it to automatically know the timezone.
In the standard library, there is no cross-platform way to create aware timezones without creating your own timezone class.On Windows, there's , but that's part of pywin32. I would rather suggest to use the pytz library, which has a constantly updated database of most timezones.Working with local timezones can be very tricky (see "Further reading" links below), so you may rather want to use UTC throughout your application, especially for arithmetic operations like calculating the difference between two time points.You can get the current date/time like so:Mind that  and  return the local time, not the UTC time, so applying  to them would not be correct.Another nice way to do it is:which is a bit shorter and does the same.Further reading/watching why to prefer UTC in many cases:pytz documentationWhat Every Developer Should Know About Time – development hints for many real-life use casesThe Problem with Time & Timezones - Computerphile – funny, eye-opening explanation about the complexity of working with timezones (video)
Get the current time, in a specific timezone:
In Python 3, the standard library makes it much easier to specify UTC as the timezone:If you want a solution that uses only the standard library and that works in both Python 2 and Python 3, see J. F. Sebastien's answer.
Here's a stdlib solution that works on both Python 2 and 3:where  is an aware datetime instance representing beginning of the day (midnight) in UTC and  is a tzinfo object (example from the docs):Related:  performance comparison of several ways to get midnight (start of a day) for a given UTC time.Note: it is more complex, to get midnight for a time zone with a non-fixed utc offset.
Another method to construct time zone aware datetime object representing current time:
If you are using Django, you can set dates non-tz aware (only utc).Comment the following line in settings.py:
pytz is a Python library that allows accurate and cross platform timezone calculations using Python 2.3 or higher.With the stdlib, this is not possible. See a similar question on SO.
Here is one way to generate it with the stdlib:date will store the local date and the offset from UTC, not the date at UTC timezone, so you can use this solution if you need to identify which timezone the date is generated at. In this example and in my local timezone:The key is adding the  directive to the representation FORMAT, to indicate the UTC offset of the generated time struct. Other representation formats can be consulted in the datetime module docsIf you need the date at the UTC timezone, you can replace time.localtime() with time.gmtime()EditThis works only on python3. The z directive is not available on python 2 _strptime.py code
Why won't use dateutil as described here:http://joelinoff.com/blog/?p=802
You can create a local  using  by parsing the output of a  call that uses the  directive (introduced in Python 3.3), as shown by jcazor. You can use that  to create an aware  instance with a one-liner:
Getting a timezone-aware date in  timezone is enough for date subtraction to work. But if you want a timezone-aware date in your current time zone,  is the way to go:PS  has a similar function (). But inspite of sharing the name it has a completely different code base, which as noted by J.F. Sebastian can give wrong results.
If you get current time and date in python then import date and time,pytz package in python after you will get current date and time like as..
Use timezone as shown below for timezone aware date time, default is UTC:
I'm adding this answer as someone who frequently works with non-UTC timezones.The only timezone that has its own method is , but you can fudge a timezone with any UTC offset if you need to by using  & , and forcing it using .Using  as the time zone is the real silver bullet here, and it has lots of other useful applications.
Another alternative, in my mind a better one, is using  instead of . Consider the following simple code:To install Pendulum and see their documentation, go here. It have tons of options (like simple ISO8601, RFC3339 and many others format support), better performance and tend to yield simpler code.   


Answer URL
https://docs.python.org/3/library/datetime.html#datetime.datetime.today
