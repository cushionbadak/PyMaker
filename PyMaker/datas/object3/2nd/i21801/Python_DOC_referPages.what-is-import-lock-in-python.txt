Natural Text
I am reading "The Little Book of Semaphores", and in it he has some code to make python use similar syntax to what he uses in the book. However, when I try to import his code it gives me the following error.I know it has something to do with the watcher function code because if I comment it out the error goes away, the code there makes it so I can use a KeyboardInterrupt to end the program.Is there any way to fix the error?threading_cleanup.py
On my setup the error only happens in interpreted mode. It seems that the interpreter doesn't like that the module does a fork while it is still importing it. The error goes away if you remove the  call or if you wrap it in an .In general, code executed by a Python module should be only for initialization of globals and singletons.Oh! After the import, you can call  from the interpreter, and it doesn't raise the exception.Eh! I realized I didn't answer the title of your question:The call to  creates a new process of the interpreter; one that will have to import the module to start executing. In interpreted mode, you are making that happen while the module is still being imported, and thus locked. In interpreted mode, the interactive interpreter is the main program. In execution mode, as in , the module is the main program, so it doesn't get imported. Does that make sense?
The title of this question asks what the import lock is.The import lock is the part of Python's  implementation that makes programs fail if you violate these obscure restrictions:https://docs.python.org/2/library/threading.html#importing-in-threaded-codeIn your case, because you call  directly in your module, it can't start threads unless that module happens to be the main module. Here's an example:python2.7 - import silently locks up the threadYour example seems a bit different though, as it involves processes. If I reduce your  to:I still get the same error:So gosh that's not an import lock. Except the error message says it's an import lock, now doesn't it? Sounds like a bug in the error message text.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#the-spawn-and-forkserver-start-methods
