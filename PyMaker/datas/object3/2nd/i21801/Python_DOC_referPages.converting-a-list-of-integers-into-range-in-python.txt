Natural Text
Is there something existing in python that can convert an increasing list of integers into a range listE.g. given the set {0, 1, 2, 3, 4, 7, 8, 9, 11} I want to get { {0,4}, {7,9}, {11,11} }. I can write a program to do this, but want to know if there is an inbuilt function in python
Using  produces a concise but tricky implementation:Output:
You can use a list comprehension with a generator expression and a combination of enumerate() and itertools.groupby():First,  will build tuples from the list items and their respective index:Then  will group those tuples using the difference between their index and their value (which will be equal for consecutive values):From there, we only need to build lists from the values of the first and last tuples of each group (which will be the same if the group only contains one item).You can also use  to build a list of range tuples instead of nested lists, or even  to turn the whole expression into a iterable  that will lazily build the range tuples on the fly.
This is an improvement over the very elegant @juanchopanza answer. This one covers non-unique and non-sorted input and is python3 compatible too:Example:
This generator:Produces these results:Note that runs of repeated numbers get compressed. I don't know if that's what you want. If not, change the  to a .I understand your question. I looked into  and tried to think of a solution that could be done in a couple of lines of Python, which would have qualified as "almost a built in", but I couldn't come up with anything.
Generating range pairs:Example:As a generator:Example:
Nothing built-in, or in any libraries that I know of.  Not very helpful, I know, but I've never come across anything like what you want.Here are some ideas for your program atleast (in C++, but it can give you some other ideas):Converting sets of integers into ranges
In the case there is no such feature in python, here is an implementation
Put it shorter:
I think the other answers are hard to understand, and probably inefficient. Hope this is easier and faster.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
