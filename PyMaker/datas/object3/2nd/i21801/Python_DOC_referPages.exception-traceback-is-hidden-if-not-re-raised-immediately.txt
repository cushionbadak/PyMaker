Natural Text
I've got a piece of code similar to this:When  raises an exception I receive the following traceback:From here I don't see where the exception is coming from. The original traceback is lost.How can I preserve original traceback and re-raise it? I want to see something similar to this:
A blank  raises the last exception.If you use  Python has no way of knowing if  was an exception just caught before, or a new exception with a new stack trace. That's why there is the blank  that preserves the stack trace.Reference here
It is possible to modify and rethrow an exception:If no expressions are present,  re-raises the last exception that  was active in the current scope. If no exception is active in the  current scope, a  exception is raised indicating that this is  an error (if running under IDLE, a  exception is raised  instead).Otherwise,  evaluates the expressions to get three objects, using   as the value of omitted expressions. The first two objects are  used to determine the type and value of the exception.If a third object is present and not , it must be a traceback  object (see section The standard type hierarchy), and it is  substituted instead of the current location as the place where the  exception occurred. If the third object is present and not a traceback  object or , a  exception is raised.The three-expression  form of  is useful to re-raise an exception transparently in an   clause, but  with no expressions should be preferred if  the exception to be re-raised was the most recently active exception  in the current scope.So if you want to modify the exception and rethrow it, you can do this:
You can get a lot of information about the exception via the  along with the traceback moduletry the following extension to your code.This would print, similar to what you wanted.
While @Jochen's answer works well in the simple case, it is not capable of handling more complex cases, where you are not directly catching and rethrowing, but are for some reason given the exception as an object and wish to re-throw in a completely new context (i.e. if you need to handle it in a different process).In this case, I propose the following:get the original exc_info format the original error message, with stack tracethrow a new exception with that full error message (stack trace incl.) embeddedBefore you do this, define a new exception type that you will rethrow later...In the offending code...Rethrow...
Your main function needs to look like this:This is the standard way of handling (and re-raising) errors. Here is a codepad demonstration.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#raise
