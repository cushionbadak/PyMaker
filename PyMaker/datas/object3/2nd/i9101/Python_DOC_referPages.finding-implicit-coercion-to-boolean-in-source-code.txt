Natural Text
How can I find all implicit conversions to boolean in source code? This includes conditional statements like , loops like , operators like , etc.; but not  or , etc. I don't mind using a static analyzer, or IDE, or a regular expression, or a python library designed for this purpose. Of course there will be some false positives, when  is actually boolean; that's fine.Use case: I found bugs caused by coercion to boolean. For example, a variable  was supposed to be an integer or  and was incorrectly tested with  implying . I want to make all boolean conversions explicit (e.g., replacing  with  or , etc.). Of course, it would have to be done manually, but at least identifying the locations where implicit conversion occurs would be helpful.
I'd suggest you take a look at the standard  module. Here is some trivial code:And here is the output:Eli Bendersky has written an article on working with AST's, and he includes some sample code for visiting the nodes of an AST. You would want to do a visit where you looked for particular constructions. In the example above, you'd be looking for (sub)expressions beneath an  node where an operand was either directly treated as a boolean, or treated as the sole operand to a  node.Finding every possible case could be quite complex. But I think you can easily find the "simple" cases (if x, if not x, if x or y) with a page or two of code.EDIT: Here's some code that (I think) does what you want. And here's the output:
My first idea was to decorate the built-in  function, but for some reason, this did not work with Python 3.4.Therefore, I propose a solution, when the full set of the potentially used classes is known: basically decorate the  method of every class.I just assumed that  was an iterable containing the targeted classes. You can probably populate it dynamically.If you execute this code at the startup, every boolean coercion will print .Just a short test:
Actually, there's a typing library that does precisely this. It works for both python 2 and python 3.See mypy, use command .I move the accepted answer to this one, even though @AustinHastings has a very useful answer about how one could do it using , because I want people to be aware of  - it's a great tool (not likely to be abandoned any time soon, with 100+ contributors, including Guido).


Answer URL
https://docs.python.org/3/reference/grammar.html
