Natural Text
I just tried an augmented assignment on a frozenset, and the result surprised me:This isn't supposed to happen, is it?  Aren't frozensets immutable?
Why are you surprised? You knew the term "augmented assignment" so there is no problem finding the "Python Data Model on augmented arithmetic assignments" (emphasis mine):These [] methods should attempt to do the operation in-place (modifying self) and return the result (which could be, but does not have to be, self). If a specific method is not defined, the augmented assignment falls back to the normal methods. For instance, if  is an instance of a class with an  method, x += y is equivalent to  . Otherwise,  and  are considered, [...]So it has no  method so the code you perform is:The  method however is defined by :However you lost your reference to the original : :But that just follows the "Principle of least astonishment". You wanted the  and you made it clear that you didn't want to keep your original  - an in-place operation also would have altered it!So again: Why did that surprise you?
Frozensets are immutable, except your assignment isn't mutating the original frozenset - you are just reassigning the variable  to the result of your binary operator . As noted by user2357112 in the comments,  falls back on  after an  method is not found, leaving you with a non-mutating operation. This behavior can be seen for other augmented operations on immutable types that don't supply , e.g. 


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__iand__
