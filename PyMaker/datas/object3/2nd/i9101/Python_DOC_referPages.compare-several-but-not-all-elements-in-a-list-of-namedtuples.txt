Natural Text
I have a list of namedtuples that can be quite long (for the moment it can reach 10.000 rows but in the future it could be much more). I need to compare several elements of each namedtuple with all other namedtuples from the list. I am looking for an efficient and generic way to do so.For simplicity, I will make an analogy with cakes, that should make understanding the problem easier.Having a list of namedtuples, where each namedtuple is a cake:Both  and  are important. If the cakes have the same ingredients, I want to remove from the list the ones that are not relevant. So any cake (with the same ingredients) that is both equal or more expensive and takes same or longer to bake is not relevant (below there is a detailed example).What would be the best way to do it?ApproachWhat I have done so far is to sort the list of named_tuples by  and :And then creating a new list where I am adding all cakes as long as no cake previously added has the same ingredients, is cheaper and faster to bake.(I know that having a nested loop is far from optimal, but I cannot think of any other way to do it...)Example:HavingwhereThe expected result would be:cake_1 is the cheapest (and the fastest among the same price) --> INcake_2 has the same price as cake1 and takes longer to bake --> OUTcake_3 is a different kind of cake --> INcake_4 is more expensive than cake_1, but faster to bake --> INcake_5 is more expensive than cake_1 and cake_4, but even faster to bake --> IN
The running time of your approach is going to be roughly proportional to ... which could get quite large, if you have a lot of cakes and a lot of them are relevant.We can improve on this by taking advantage of the fact that each cluster of cakes with the same ingredients is likely to be much smaller. First of all, we need a function that checks a new cake against an existing, already optimized cluster with the same ingredients:What this does is check the  cake against each cake  in a copy of , and then:If its baking time and price are both greater than or equal to an existing cake, immediately exit (you could  rather than ing, but I prefer to be explicit about control flow).If its baking time and price are both less than or equal to an existing cake, remove that existing cake from the clusterIf it makes it past all the existing cakes (and so reaches the  statement's  clause), add it to the cluster.Once we have that, we can use it to filter the cakes:Here it is in action:The running time of this solution is roughly proportional toI did a little testing with a list of random cakes, each using a selection from your five different ingredients and random prices and baking times, and This approach consistently produces the same results as yours (albeit unsorted)It runs considerably faster â€“ 0.2 seconds on my machine for 100,000 random cakes, compared to about three seconds for yours.
Untested code, but should help point to a better way:


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops
