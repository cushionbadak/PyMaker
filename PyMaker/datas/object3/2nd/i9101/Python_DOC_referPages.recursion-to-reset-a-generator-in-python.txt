Natural Text
I'm trying to write a function that returns the next element of a generator and  if it is at the end of the generator it resets it and returns the next result. The expected output of the code below would be:However that is not what I get obviously. What am I doing that is incorrect?
Is itertools.cycle(iterable) a possible alternative?
You need to return the result of your recursive call:which still does not make this a working approach.The generator  used in your for-loop is not changed by the rebinding of the local variable  in your function. It will stay exhausted...As has been mentioned in the comments, check out .
the easy way is just use itertools.cycle, otherwise you would need to remember the elements in the iterable if said iterable is an iterator (aka a generator) becase those can't be reset, if its not a iterator, you can reuse it many times.the documentation include a example implementationor for example, to do the reuse thing example usenow about your code, the problem is simple, it don't remember it statein the marked line a new generator is build, but you would need to update your  variable outside this function to get the desire behavior, there are ways to do it, like changing your function to return the element and the generator, there are other ways, but they are not recommended or more complicated like building a class so it remember its state
 is a generator, that returns an iterator, that gives you the values it s via the  method. For that reason, your statement doesn't do anything.What you want to do is this:or shorter, and completely equivalent (as long as  has a  method, which it probably has):Or without recursion (which is a big problem in python, as it is 1. limited in depth and 2. slow):If convert_to_generator is just a call to , it is even shorter:or, with :and  is equivalent to itertools.cycle if  is guaranteed to be an iterator for .Side note: You can exchange  for  (where  is some expression) with Python 3.3 or higher.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.cycle
