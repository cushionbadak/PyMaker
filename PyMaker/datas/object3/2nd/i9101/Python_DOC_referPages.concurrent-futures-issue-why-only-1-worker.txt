Natural Text
I am experimenting the use of  to parallelize a serial task. The serial task involves finding the number of occurrence of a given number from a number range. My code is shown below. During its execution, I noticed from Task Manager / System Monitor / top that only one cpu/thread is constantly in operation despite giving the max_workers of  a value more than 1. Why is this the case? How can I parallelize my code using  My code was executed with python 3.5.
The problem with your code is that it submits only one task which will then be executed by one of the workers while rest of them are doing nothing. You need to submit multiple tasks that can be executed by the workers in parallel.Below example splits the search area to three different tasks of which each is executed by different worker. Futures returned by  are added to a list and once all of them are submitted  is used to wait them all to complete. If you call  immediately after submitting a task it will block until the future is completes.Note that instead of generating a list of numbers the code below just counts the numbers which have digit 5 in them in order to decrease the memory usage:Output:
Running your code shows that all three workers are there but two of them are sleeping. The problem is, that  only tells one worker to execute the function .I don't understand what your code is doing but basically you need to eithersplit up the task in three even parts and send each part to a process using split the task up in smaller chunks (let's say a chunk consisting all of 100 elements) and use  so every  gets only the chunk it is assigned to.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.submit
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.wait
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future.result
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.map
