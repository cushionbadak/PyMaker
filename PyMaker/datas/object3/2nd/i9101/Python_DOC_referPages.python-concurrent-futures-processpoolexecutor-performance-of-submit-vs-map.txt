Natural Text
I am using concurrent.futures.ProcessPoolExecutor to find the occurrence of a number from a number range. The intent is to investigate the amount of speed-up performance gained from concurrency. To benchmark performance, I have a control - a serial code to perform said task (shown below). I have written 2 concurrent codes, one using  and the other using  to perform the same task. They are shown below. Advice on drafting the former and latter can be seen here and here, respectively. The task issued to all three codes was to find the number of occurrences of the number 5 in the number range of 0 to 1E8. Both  and  were assigned 6 workers, and  had a chunksize of 10,000. The manner to discretise the workload were identical in the concurrent codes. However, the function used to find occurrences in both codes were different. This was because the way arguments were passed to a function called by .submit() and .map() were different.  All 3 codes reported the same number of occurrences, i.e. 56,953,279 times. However, the time taken to complete the task were very different.  performed 2 times faster than the control while  took twice as long as the control to complete it's task.Questions:I would like to know if the slow performance of  is an artifact of my coding or it is inherently slow?" If the former, how can I improve it. I am just surprise that it performed slower than the control as there will be no much incentive to use it.I like to know if there is anyway to make  code perform even faster. A condition I have is that the function  must return an iterable with the numbers/occurrences containing the number 5.Benchmark Results concurrent.futures.ProcessPoolExecutor.submit()concurrent.futures.ProcessPoolExecutor.map()Serial Code:Update 13th Feb 2017:In addition to @niemmi answer, I have provide an answer following some personal research to show:how to further speed-up @niemmi's .map() and .submit() solutions, andwhen ProcessPoolExecutor.map() can led to more speedup than ProcessPoolExecutor.submit().
Overview:There are 2 parts to my answer:Part 1 shows how to gain more speed-up from @niemmi's  solution.Part 2 shows when the 's subclasses  and  yield non-equivalent compute times.=======================================================================Part 1: More Speed-up for ProcessPoolExecutor.map()Background:This section builds on @niemmi's  solution, which by itself is excellent. While doing some research on his discretization scheme to better understand how that interact with .map() chunksizes arguement, I found this interesting solution. I regard @niemmi's definition of  to be a definition for chunksize, i.e. a smaller size of actual number range (given task) to be tackled by each worker in the worker pool. Now, this definition is premised on the assumption that if a computer has x number of workers, dividing the task equally among each worker will result in optimum use of each worker and hence the total task will be completed fastest. Therefore, the number of chunks to break up a given task into should always equal the number of pool workers. However, is this assumption correct? Proposition: Here, I propose that the above assumption does not always lead to the fastest compute time when used with . Rather, discretising a task to an amount greater than the number of pool workers can lead to speed-up, i.e. faster completion of a given task.Experiment: I have modified @niemmi's code to allow the number of discretized tasks to exceed the number of pool workers. This code is given below and used to fin the number of times the number 5 appears in the number range of 0 to 1E8. I have executed this code using 1, 2, 4, and 6 pool workers and for various ratio of number of discretized tasks vs the number of pool workers. For each scenario, 3 runs were made and the compute times were tabulated. "Speed-up" is defined here as the average compute time using equal number of chunks and pool workers over the average compute time of when the number of discretized tasks is greater than the number of pool workers.Findings:Figure on left shows the compute time taken by all the scenarios mentioned in the experiment section. It shows that the compute time taken by number of chunks / number of workers = 1  is always greater than the compute time taken by number of chunks > number of workers. That is, the former case is always less efficient than the latter.Figure on right shows that a speed-up of 1.2 times or more was gained when the number of chunks / number of workers reach a threshold value of 14 or more. It is interesting to observe that the speed-up trend also occurred when  was executed with 1 worker. Conclusion: When customizing the number of discrete tasks that ProcessPoolExecutor.map()` should use to solve a given task, it is prudent to ensure that this number is greater than the number pool workers as this practice shortens compute time.concurrent.futures.ProcessPoolExecutor.map() code. (revised parts only)=======================================================================Part 2: Total compute time from using ProcessPoolExecutor subclasses .submit() and .map() can be dissimilar when returning a sorted/ordered result list.Background: I have amended both the  and  codes to allow an "apple-to-apple" comparison of their compute time and the ability to visualize the compute time of the main code, the compute time of the _concurrent method called by the main code to performs the concurrent operations, and the compute time for each discretized task/worker called by the _concurrent method. Furthermore, the concurrent method in these codes was structured to return an unordered and ordered list of the result directly from the future object of   and the iterator of . Source code is provided below (Hope it helps you.).Experiments These two newly improved codes were used to perform the same experiment described in Part 1, save that only 6 pool workers were considered and the python built-in  and  methods were used to return an unordered and ordered list of the results to the main section of the code, respectively.  Findings:From the _concurrent method's result, we can see the compute times of the _concurrent method used to create all the Future objects of , and to create the iterator of , as a function of the number of discretized task over the number of pool workers, are equivalent. This result simply means that the  sub-classes  and  are equally efficient/fast.Comparing the compute times from main and it's _concurrent method, we can see that main ran longer than it's _concurrent method. This is to be expected as their time difference reflects the amount of compute times of  the  and  methods (and that of the other methods encased within these methods). Clearly seen, the  method took less compute time to return a result list than the  method. The average compute times of the  method for both the .submit() and .map() codes were similar, at ~0.47sec. The average compute time of the sorted method for the .submit() and .map() codes was 1.23sec and 1.01sec, respectively. In other words, the  method performed 2.62 times and 2.15 times faster than  method for the .submit() and .map() codes, respectively.    It is not clear why the  method generated an ordered list from faster than from , as the number of discretizedtasks increased more than the number of pool workers, save when thenumber of discretized tasks equaled the number of pool workers.That said, these findings shows that the decision to use the equally fast  or  sub-classes can be encumbered by the sorted method. For example, if the intent is to generate an ordered list in the shortest time possible, the use of ProcessPoolExecutor.map() should be preferred over  as  can allow the shortest total compute time.  The discretization scheme mentioned in Part 1 of my answer is shown here to speed-up the performance of both the  and  sub-classes. The amount of speed-up can be as much as 20% over the case when the number of discretized tasks equaled the number of pool workers.Improved .map() codeImproved .submit() code.  This code is same as .map code except you replace the _concurrent method with the following: =======================================================================
You're comparing apples to oranges here. When using  you produce all the  numbers and transfer them to worker processes. This takes a lot of time compared to actual execution. When using  you just create 6 sets of parameters that get transferred. If you change  to operate with the same principle you'll get numbers that are close to each other:You could improve the performance of submit by using  correctly. For given iterable of futures it will return an iterator that will  futures in the order they complete. You could also skip the copying of the data to another array and use  to combine the results from futures to single iterable:


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.as_completed
https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
