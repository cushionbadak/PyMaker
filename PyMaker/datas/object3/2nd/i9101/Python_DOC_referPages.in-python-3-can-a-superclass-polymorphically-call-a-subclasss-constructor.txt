Natural Text
I want to create method (say ) in a class () that will return an object of either the class or the subclass that invokes it. I want . None of the approaches I tried were satisfactory. Using the superclass constructor returns the superclass (make senses but I figured it was worth a try). Creating a function  in each subclass that the super class uses but that defeats the purpose of inheritance. I started to explore  and , but quickly decided Python must have a better way.Sample code
If I understand correctly, you're trying to write a  method in your base class that will still work when called on an instance of a derived class. This can be made to work, but it's only easy if your child classes only expect the same set of arguments as the base class. If their  method expects different arguments you'll need separate  methods for each derived class.Here's a quick example of how it can work. The trick is to call  to get the right class, and then call the class with appropriate constructor arguments to get the new instance:In practice this tends not to work as well, since the  class will usually want to take an extra argument to set up its extra attribute. An option that might work in that situation is to use the  module rather than writing your own  method. The function  will be able to copy many Python instances without any special support.
You are overcomplicating things a lot. Minimal example with a simple constructor implemented on the child class:You don't even need a constructor in Python if you don't need. Or you can have one on the superclass and nothing on the child.Some usage:


Answer URL
https://docs.python.org/3/library/copy.html
