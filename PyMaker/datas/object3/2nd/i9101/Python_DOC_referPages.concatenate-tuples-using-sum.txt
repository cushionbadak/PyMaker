Natural Text
From this post I learned that you can concatenate tuples with:Which looks pretty nice.  But why does this work?  And, is this optimum, or is there something from  that would be preferable to this construct?
the addition operator concatenates tuples in python:From the docstring of :Return the sum of a 'start' value (default: 0) plus an iterable of  numbersIt means  doesn't start with the first element of your iterable, but rather with an initial value that is passed through  argument.By default  is used with numeric thus the default start value is . So summing an iterable of tuples requires to start with an empty tuple.  is an empty tuple:Therefore the working concatenation.As per performance, here is a comparison:Now with t2 of a size 10000:So if your list of tuples is small, you don't bother. If it's medium size or larger, you should use .
That's clever and I had to laugh because help expressly forbids strings, but it worksYou can add tuples to get a new, bigger tuple. And since you gave a tuple as a start value, the addition works.
Just to complement the accepted answer with some more benchmarks:EDIT: the code is updated to actually use tuples. And, as per comments, the last two options are now inside a  constructors, and all the times have been updated (for consistency). The  options are still the fastest but now the margin is reduced.
It works because addition is overloaded (on tuples) to return the concatenated tuple:That's basically what  is doing, you give an initial value of an empty tuple and then add the tuples to that.However this is generally a bad idea because addition of tuples creates a new tuple, so you create several intermediate tuples just to copy them into the concatenated tuple:That's an implementation that has quadratic runtime behavior. That quadratic runtime behavior can be avoided by avoiding the intermediate tuples.Using nested generator expressions:Or using a generator function:Or using :And if you're interested how these perform (using my  package):(Python 3.7.2 64bit, Windows 10 64bit)So while the  approach is very fast if you concatenate only a few tuples it will be really slow if you try to concatenate lots of tuples. The fastest of the tested approaches for many tuples is 


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.chain
