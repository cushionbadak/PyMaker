Natural Text
I was experimenting with setting the dictionary  while working on an answer to another question and came across something interesting. The linked question deals with removing all the effects of importing a module. Based on another post, I came up with the idea of deleting all new modules from  after an import. My initial implementation was to do the following (testing with  as the module to load and unload):The printouts show that numpy was imported successfully and that the shallow copy does not contain it, as expected.Now my idea was to unload the module by swapping  back into , then delete the local reference to the module. That should in theory remove all references to it (and possibly it does):This should be enough to be able to re-import the module, but when I doIt appears that the numpy module is not reloaded since it has the same  as before. It does not show up in , despite the fact that the  statement raises no errors and appears to complete successfully (i.e., a  module exists in the local namespace).On the other hand, the implementation that I made in my answer to the linked question does appear to work fine. It modifies the dictionary directly instead of swapping it out:I am using Python 3.5.2 on an Anaconda install. I am most interested in explanations focusing on Python 3, but I am curious about Python 2.7+ as well.The only thing I can think of that is happening here is that  maintains another reference to  and uses that internal reference regardless of what I do to the public one. I am not sure that this covers everything though, so I would like to know what is really going on.
Even in Python 3.5, part of the import implementation is still written in C, and that part uses  to retrieve the module cache, rather than going through the  attribute. Your import is finding  in the old  through one of those code paths. isn't designed to be replaced. The docs mention that replacing it may behave unexpectedly:This can be manipulated to force reloading of modules and other tricks. However, replacing the dictionary will not necessarily work as expected and deleting essential items from the dictionary may cause Python to fail.


Answer URL
https://docs.python.org/3/library/sys.html#sys.modules
https://docs.python.org/3/library/sys.html#sys.modules
