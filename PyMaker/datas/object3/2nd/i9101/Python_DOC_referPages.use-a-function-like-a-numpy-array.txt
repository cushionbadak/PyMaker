Natural Text
I'm dealing with a big array  with which I'm running into memory problems. However, the entries of that big array are in fact just copies of elements of a much smaller array . Now my idea would be to use something like a "dynamic view" into  instead of constructing the full . For example, is it possible to use a function  like an array which the reads the correct element of ? I.e. something likeAnd then I could use  to do some matrix and vector multiplications.Of course, anything else that would keep me form copying the elements of  repeatedly into a huge matrix would be appreciated.Edit: I realized that if I invest some time in my other code I can get the matrix  to be a block matrix with the s on the diagonal and zeros otherwise.
This is usually done by subclassing numpy.ndarray and overloading   (array-like access via ) to remap the indices like  does. Still, I am not sure if this will work in combination with the numpy parts implemented in C. Some concerns:When you're doing calculations on your big matrix  via the small matrix , numpy might create a copy of D with its real dimensions, thus using more space than wanted.If several  are mapped to the same ,  will also set  to .
 uses compiled libraries to perform fast matrix products.  That constrains the data type (integer, floats), and requires that the data be contiguous.  I'd suggest studying this recent question about large dot products, numpy: efficient, large dot productsDefining a class with a custom  is a way of accessing a object with indexing syntax.  Look in  for some interesting examples of this, ,,  etc.  But this is largely a syntax enhancement.  It doesn't avoid the issues of defining a robust and efficient mapping between your  and .And before trying to do much with subclassing  take a look at the implementation for  or .   also creates classes that behave like  in many ways, but does not subclass .In your  are  and  scalars?  If so this conversion would be horribly in efficient.  It would be better if they could be arrays, lists or slices (anything that  implements), but that can be a lot of work.What is the mapping from  to  like?  The simplest, and most efficient mapping would be that  is just a higher dimensional collection of , i.e.Slightly more complicated is the case where , a sliceBut if the  values are scattered around  you chances of efficient, reliable mapping a very small.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getitem__
