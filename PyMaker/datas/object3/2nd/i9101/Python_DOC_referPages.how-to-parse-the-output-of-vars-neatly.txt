Natural Text
Is there a way in which to see the attributes of a Python object via , but with the output formatting being clean, and it not showing all the values of each attribute? (For example, a large array taking up all the screen). I basically just want a nice clean list of its attributes. 
If you want a list of the keys of the object's , that'd beor you could go through the keys and print them on their own lines:or you could pretty-print the dict with  (though it might not be any prettier than IPython's default pretty-printing):or you could just code up whatever you think would be a readable way to view the information  gives you. You're always free to write your own code.There's also , which aims to provide a list of the object's attributes useful for interactive inspection.  will usually be different from ; for example, it'll include methods.
Do you want a list of the attribute names, the  ? Or the full dictionary,  and ? Depending on the object class  could be empty, just a few scalars and strings, or a large and complex set of lists, arrays, etc. Without a general purpose 'pretty-printer' you can not generate a clear display for all classes. It's the purpose of the  and  methods to produce a useful display of the objects attributes.In my current  sessionThe variables are:One is user defined function with an empty vars    One is sparse matrix, with a modest number of attributes.  This example has only 5 nonzero values, so the arrays are quite small.  Yes, numpy arrays can be very large.  Their display is controlled by  code. is an imported module, with many vars.  One, the  takes up nearly a page. is an array, and doesn't have a , and  gives an error.This is the  display for this display.  arrays are displayed in a condensed form that is unique to .You could write a pretty printer.  Here's a start:For the sparse matrixBut for   object, it is clearly inadequate:The object has many attributes; some have long class names.  Some are dictionaries with a few keys, but long values.  I'd have to do some sort of recursion to compress those.  So it's possible to write a compact displayer, but it will be a lot of work.


Answer URL
https://docs.python.org/3/library/pprint.html
