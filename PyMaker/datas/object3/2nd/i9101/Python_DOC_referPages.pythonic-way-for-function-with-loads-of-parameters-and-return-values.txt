Natural Text
I'm trying to run a simulation in Python. For this to work I need to define a number of parameters and derive some others from these. Using these I then call several functions that act on these parameters and return a certain result. Currently my code looks something like thiswhere I abbreviated the parameter list etc with the  and calculations are performed in the  sections. I would prefer to call the functions using  and have the default value for all the others. This would however mean using named arguments, in which case I have to specify the default values twice (in  and in ). I do not think  would work here since that would require passing in the default values explicitly. I have been toying with the compromise of passing a dictionary to the functions and setting the non-standard argument before passing it on. This makes the function call much harder to understand however, so I felt that there should be an easier way to do this.Since the functions only consist of relatively long equations, I do not want to add characters to the variable names as would be required when storing them in a dictionary and just calling them from there. This makes reading the equations much more difficult.My question is whether there is a pythonic way to solve this issue.
You have two methods with the same type of arguments and return value, the only difference is process inside the functions, namely, they share the same interfaces and functionality.You want an easy way to define the functions, without having to write default arguments or passing in dictionary many times.It would be nice to use decorator or class inheritance.Decorator enables you to define a factory method that returns functions like  or . The interface is only defined once using default arguments in decorator, returned functions differ in the process methods or core methods.Class inheritance works similarly, but through method inheritance, it's more flexible and general.
You can make a class to hold the vars in its properties:
The function parameters in programming do not have to be used exactly as in mathematics. You may have an equation:,which is easy to read only if the variables have short names. It is understandable you want to keep that. But programming languages may not work that way, they use their own syntax and tools.One of the important principles of refactoring in programming is to reduce the number of passed parameters in functions. The easiest way is to encapsulate all passed parameters in one object, and pass only that object between functions:Of course, you have to use the object name, and the original equation becomes less readable. And a Python code doesn't have to look exactly as the mathematical formula. But instead, you can now re-use the new class  in other parts of the code.If the function is complex enough to see what it does, it can be further refactored:This function may moved inside the  class:... and even refactoring further:The new class  can be re-used in other places.Thus, it is possible to keep the code clean, simple, and re-usable. The re-usability becomes very important as the script grows on.


Answer URL
https://docs.python.org/3/tutorial/classes.html
