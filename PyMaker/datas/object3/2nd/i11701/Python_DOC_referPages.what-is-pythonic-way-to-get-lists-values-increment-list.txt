Natural Text
I want to sum up the numbers like  in order to get the list .I tried the following:
If you're doing much numerical work with arrays like this, I'd suggest , which comes with a cumulative sum function :Numpy is often faster than pure python for this kind of thing, see in comparison to @Ashwini's :But of course if it's the only place you'll use numpy, it might not be worth having a dependence on it.
In Python 2 you can define your own generator function like this:And in Python 3.2+ you can use :
Behold:Will output (as expected):
I did a bench-mark of the top two answers with Python 3.4 and I found  is faster than  under many circumstances, often much faster. However, as you can see from the comments, this may not always be the case, and it's difficult to exhaustively explore all options. (Feel free to add a comment or edit this post if you have further benchmark results of interest.)Some timings...For short lists  is about 4 times faster:For longer lists  is about 3 times faster:If the   is not cast to ,  is still about 2 times faster:If you put the imports outside of the two functions and still return a  ,  is still nearly 2 times faster:
First, you want a running list of subsequences:Then you just call  on each subsequence:(This isn't the most efficient way to do it, because you're adding all of the prefixes repeatedly. But that probably won't matter for most use cases, and it's easier to understand if you don't have to think of the running totals.)If you're using Python 3.2 or newer, you can use  to do it for you:And if you're using 3.1 or earlier, you can just copy the "equivalent to" source straight out of the docs (except for changing  to  for 2.5 and earlier).
Running this code gives
If You want a pythonic way without numpy working in 2.7 this would be my way of doing itnow let's try it and test it against all other implementations
Try this:
Assignment expressions from PEP 572 (expected for Python 3.8) offer yet another way to solve this:
Somewhat hacky, but seems to work:I did think that the inner function would be able to modify the  declared in the outer lexical scope, but that didn't work, so we play some nasty hacks with structure modification instead. It is probably more elegant to use a generator.
Without having to use Numpy, you can loop directly over the array and accumulate the sum along the way. For example:Results in: 

A pure python oneliner for cumulative sum: This is a recursive version inspired by recursive cumulative sums. Some explanations:The first term  is a list containing the previous element and is almost the same as  (which would complain for empty lists).The recursive  call in the second term processes the current element  and remaining list whose length will be reduced by one. is shorter for .Test:And simular for cumulative product:Test:
Try this: accumulate function, along with operator add performs the running addition.
You can calculate the cumulative sum list in linear time with a simple  loop:The standard library's  may be a faster alternative (since it's implemented in C):
If you are looking for a more efficient solution (bigger lists?) a generator could be a good call (or just use  if you really care about perf).
This is slighlty faster than the generator method above by @Ashwini for small listsFor larger lists, the generator is the way to go for sure. . . 
This would be Haskell-style:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.accumulate
