Natural Text
My problem could be summarised by the following example:I get a type error, because enums are not JSON serializable.I primarily though of implementing a  and adding it to the  call but I cannot change the line where  call is made.So, my question is : Is it possible to dump an enum in json without passing an encoder to , but instead, by adding class method(s) in  enum ?I expect to extract the following json:or
I don't think there is a great way for this and you will loose features of the Enum.Simplest option: Don't subclass Enum:What you could also do:This will actually give you And therefore not really be valid json, but you can play around with it to fit your needs!
Try:Result:
Sadly, there is no direct support for  in JSON.The closest automatic support is to use  (which  also supports), and then  will treat your s as s; of course, decoding them will give you an  back, but that is as good it gets without specifying your encoder/decoder.
Just adding method(s) to the  enum won't do what you want.As I mentioned in my comment, you can however use part of my answer to the question Making object JSON serializable with regular encoder to monkey-patch the  module so it will return the name (or value) of  members. I'm assuming you're using the  module by Ethan Furman et al, which was backported to Python 2.7 since that version doesn't come with it built-in — it became part of the standard library in Python 3.4.Note this will work even though you can't change the line where the  call occurs as long as that happens after the patch is applied. This is because Python normally caches ed modules in , i.e. they aren't reloaded everytime they are used in separate scripts — so any changes made this to them are "sticky" and remain in effect.So for what you want to do, first create your own module to make the patch. For example: .Then, in your own script, all you need to do is essentially add one line:Output:


Answer URL
https://docs.python.org/3/library/enum.html#enum.IntEnum
https://docs.python.org/3/library/enum.html#module-enum
