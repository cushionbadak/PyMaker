Natural Text
This is something weird I noticed.Any particular reason why -5**2 gives -25 and math.pow(-5,2) gives 25? The answer should be 25. So what is the reason for the -25 answer?
The documentation for  specifies that it raises  to the power of . So,  calculates . whereas just writing  is equivalent to , since by operator precedence in Python the unary operator  has less precedence than the power operator . 
In Python the  operator has higher precedence than the  operator, so in your expression  is evaluated first, then negated.  You can apply negation first by using brackets:
This is all explained in the documentation The power operator binds more tightly than unary operators on its left; it binds less tightly than unary operators on its right. Thus, in an unparenthesized sequence of power and unary operators, the operators are evaluated from right to left (this does not constrain the evaluation order for the operands): -1**2 results in -1.
This is because of the operator precedence in python.If we look at the operator precedence, we see that the unary operator  has lower precedence than the power operator , so that the expression  means to first apply the square to the 5 and then apply the negative sign to the result.  This first operation gives 25, which then gives -25.The expression  means to square the -5.  This is equivalent to .
It's because of that the precedence of  operator is lower than power operator . In fact your expression will be calculated as following:Try the following to get the correct result:For more information you can read the python Operator precedence:The following table summarizes the operator precedence in Python, from lowest precedence (least binding) to highest precedence (most binding). 


Answer URL
https://docs.python.org/3/reference/expressions.html
https://docs.python.org/3/reference/expressions.html#operator-precedence
