Natural Text
I have a python  that contains a collection of non-hashable python objects with uniform type which I want to process.To improve efficiency of my algorithms, I would like to interface using ctypes with an external index implementation that accepts only  as data values.I was hoping that I could to pass pointer references to the python object into this external library as ?I tried  but am getting .Also, what about the reverse, getting a reference to a python object as  and turning it into a "real" python object?
Why wouldn't you simply use the  function in CPython?The CPython documentation of  says that Return the “identity” of an object. This is an integer which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same  value.CPython implementation detail: This is the address of the object in memory.You also need to mess with the reference counts and such, if you're to "convert" this  of yours back to a Python object. As far as I know,  do not easily let one to increase/decrease the reference counts of Python


Answer URL
https://docs.python.org/3/library/functions.html#id
