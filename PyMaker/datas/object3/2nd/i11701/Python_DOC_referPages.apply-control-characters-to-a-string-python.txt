Natural Text
I'm trying to apply control characters, such as '\x08 \x08' that should remove the precedent char, to a string (move backwards, write space, move backwards)For example when I type into python console :I get in my terminal :I'm looking for a function, let's says "function", that will 'apply' control characters to my string :so I get a "clean", control-characters-free string:I understand that in a terminal, this part is handled by the client so maybe there is a way to get the displayed string, using core unix functions
Actually, the answer was a bit more complicated than a simple formatting.Every character sent by the process to the terminal can be seen as a transition in a Finite State Machine (FSM). This FSM's state roughly corresponds to the sentence displayed and the cursor position, but there are many other variables such as the dimensions of the terminal, the current control sequence being inputted*, the terminal mode (ex: VI mode / classic BASH console), etc.An good implementation of this FSM can be seen in the pexpect source code.To answer my question, there is no core unix "function" that can format the string to what is displayed in the terminal, since such a function is specific to the terminal that renders process' output and you would have to rewrite a full terminal to handle every possible character and control sequence.However we can implement a simple one ourselves. We need to define a FSM with an initial state :displayed string: "" (empty string)position of the cursor: 0and transitions (input characters):any alphanumeric/space character: replaces the character at the cursor position by itself (or adds if there is none) and increments the cursor position hex code: decrements the cursor positionand feed it the string.Python solutionAnd an exampleNote about control sequencesAn ANSI control sequence is a set of characters that act as a transition on the (display/cursor/terminal mode/...) state of the terminal. It can be seen as a refinement of our FSM state and transitions with more sub-states and sub-transitions.For example: when you press the UP key in a classic Unix terminal (such as the VT100), you actually enter the control sequence:  where  is hex code .  transitions to ESCAPE mode, and it returns to normal mode after A.Some processes interpret this sequence as a move of the vertical cursor position (VI), others as a move backward in the history (BASH) : it depends fully on the program that handles the input.However, the same sequence can be used the output process but it will most likely move the cursor up in the screen : it depends on the terminal implementation.A good list of ANSI control sequences is available here.


Answer URL
https://docs.python.org/3/library/termios.html#module-termios
