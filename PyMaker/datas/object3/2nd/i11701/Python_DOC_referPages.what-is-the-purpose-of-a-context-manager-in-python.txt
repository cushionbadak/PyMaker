Natural Text
This question already has an answer here:Trying to understand python with statement and context managers                    5 answers                I'm reading http://eigenhombre.com/2013/04/20/introduction-to-context-managers/ . In it:Context managers are a way of allocating and releasing some sort of resource exactly where you need it. The simplest example is file access:This is essentially equivalent to:The article goes on to more explanation , but I'm still not sure I understand in simple terms their purpose. Can someone clarify. Also what is the "context"?I have looked at Trying to understand python with statement and context managers ,  but again I'm not sure what the purpose of a context manager is? Is it just an alternative syntax for "try.. finally.." or is their some other purpose
What are context managers?Context managers are there to aid with resources (although may be used for much more). The context is basically the resource. Let's say you opened a file for writing:You now have an open file handle. During the handling of your file, no other program can write to it. In order to let other programs write to it, you must close the file handle:But, before closing your file an error occured:What will happen now is that the function or entire program will exit, while leaving your file with an open handle. (CPython cleans handles on termination and handles are freed together with a program but you shouldn't count on that)A with statement ensures that as soon as you leave it's indentation, it will close the file handle: statements may be used for many more things. For example: Almost everything done with a context manager can be done with  but context managers are nicer to use, more comfortable, more readable and by implementing  and  provide an easy to use interface.How are context managers implemented?or What are  and ?Creating context managers is done by implementing  and  in a normal class. tells what to do when a context manager starts and  when a context manager exists (giving the exception to the  method if an exception occurred)A shortcut for creating context managers can be found in contextlib. It  wraps a generator as a context manager like so:Example taken from the Python docs.


Answer URL
https://docs.python.org/3/library/threading.html#threading.Lock
https://docs.python.org/3/reference/datamodel.html#object.__enter__
https://docs.python.org/3/reference/datamodel.html#object.__exit__
https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager
