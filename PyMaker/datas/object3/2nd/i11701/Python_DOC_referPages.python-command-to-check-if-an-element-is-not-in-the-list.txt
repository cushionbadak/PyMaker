Natural Text
I have a list of tuples in Python, and I have a conditional where I want to take the branch ONLY if the tuple is not in the list (if it is in the list, then I don't want to take the if branch)This is not really working for me though. What have I done wrong?
The bug is probably somewhere else in your code, because it should work fine:Or with tuples:
How do I check if something is (not) in a list in Python?The cheapest and most readable solution is using the  operator (or in your specific case, ). As mentioned in the documentation,The operators  and  test for membership.  evaluates to   if  is a member of , and  otherwise.  returns  the negation of .Additionally,The operator  is defined to have the inverse true value of . is logically the same as .Here are a few examples:This also works with tuples, since tuples are hashable (as a consequence of the fact that they are also immutable):If the object on the RHS defines a  method,  will internally call it, as noted in the last paragraph of the Comparisons section of the docs....  and ,  are supported by types that are iterable or implement the   method. For example, you could (but shouldn't) do this: short-circuits, so if your element is at the start of the list,  evaluates faster:If you want to do more than just check whether an item is in a list, there are options: can be used to retrieve the index of an item. If that element does not exist, a  is raised. can be used if you want to count the occurrences.The XY Problem: Have you considered s?Ask yourself these questions:do you need to check whether an item is in a list more than once?Is this check done inside a loop, or a function called repeatedly?Are the items you're storing on your list hashable? IOW, can you call  on them?If you answered "yes" to these questions, you should be using a  instead. An  membership test on s is O(n) time complexity. This means that python has to do a linear scan of your list, visiting each element and comparing it against the search item. If you're doing this repeatedly, or if the lists are large, this operation will incur an overhead.  objects, on the other hand, hash their values for constant time membership check. The check is also done using :If you're unfortunate enough that the element you're searching/not searching for is at the end of your list, python will have scanned the list upto the end. This is evident from the timings below:As a reminder, this is a suitable option as long as the elements you're storing and looking up are hashable. IOW, they would either have to be immutable types, or objects that implement .


Answer URL
https://docs.python.org/3/reference/expressions.html#membership-test-operations
https://docs.python.org/3/reference/datamodel.html#object.__contains__
https://docs.python.org/3/library/stdtypes.html?highlight=__contains__#comparisons
