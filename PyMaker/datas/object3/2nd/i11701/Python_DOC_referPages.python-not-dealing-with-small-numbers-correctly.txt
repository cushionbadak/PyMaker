Natural Text
This question already has an answer here:Is floating point math broken?                    28 answers                I am trying to make a python script but cant get it to work right. I am dealing with very small numbers and python doesn't seem to like it. Here is my script:When I run it in PyCharm I get this output (I've shortened it so you don't have to scroll through a bunch of numbers.)Pycharm is acting as if my "if" statement doesn't exist. It skips right over the number 2.5 without runningI figured it's something to do with the way my computer is running those numbers and the 2.5 i'm seeing is really 2.5000001 or something but I don't know. I've tried putting the numbers into scientific notation hoping it would help but instead I get the error "Too much output to process"I'm fairly new to python and am starting to get annoyed by this. Any and all help it appreciated. Thanks.
When dealing with floating point mathematics it is often best to have some epsilon value to compare the data to for a threshold-ed comparison. For example
The culprit is floating point math.Floating Point Math:Your language isn't broken, it's doing floating point math. Computers can only natively store integers, so they need some way of representing decimal numbers. This representation comes with some degree of inaccuracy. That's why, more often than not, .1 + .2 != .3.  Why does this happen?It's actually pretty simple. When you have a base 10 system (like ours), it can only express fractions that use a prime factor of the base. The prime factors of 10 are 2 and 5. So 1/2, 1/4, 1/5, 1/8, and 1/10 can all be expressed cleanly because the denominators all use prime factors of 10. In contrast, 1/3, 1/6, and 1/7 are all repeating decimals because their denominators use a prime factor of 3 or 7. In binary (or base 2), the only prime factor is 2. So you can only express fractions cleanly which only contain 2 as a prime factor. In binary, 1/2, 1/4, 1/8 would all be expressed cleanly as decimals. While, 1/5 or 1/10 would be repeating decimals. So 0.1 and 0.2 (1/10 and 1/5) while clean decimals in a base 10 system, are repeating decimals in the base 2 system the computer is operating in. When you do math on these repeating decimals, you end up with leftovers which carry over when you convert the computer's base 2 (binary) number into a more human readable base 10 number.Source: http://0.30000000000000004.com/
As others have noted, the problem is the floating point math. For exact representation of small numbers, you might want to take a look at python's decimal module.


Answer URL
https://docs.python.org/3/library/decimal.html
