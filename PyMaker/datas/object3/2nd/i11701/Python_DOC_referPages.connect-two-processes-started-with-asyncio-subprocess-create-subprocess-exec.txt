Natural Text
When starting two processes with the old school  API, I can easily connect standard out of one process to standard in of another process, creating a pipeline in the same way as a UNIX shell will do when connecting commands with :How can I accomplish the same when using the asynchronous API from  (or similar)? This is what I tried:But the second call to  complains that the argument passed to  has no  (which is true):How can I get the same result as in the synchronous example above?
In asyncio, process.stdout is actually a StreamReader, not a file object. The file object can be accessed through . Unfortunately, you won't be able to use it since it has already been registered in the event loop in order to provide the stream interface .One way to deal with the issue is to create your own pipe and pass the file descriptors to the subprocess: Note that the  file descriptor should be explicitly closed once the first subprocess is started (it is not automatically closed unless you use ). The  file descriptor also needs to be closed, as explained here.


Answer URL
https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.asyncio.subprocess.Process.stdout
https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader
https://docs.python.org/3/library/subprocess.html#replacing-shell-pipeline
https://docs.python.org/3/library/subprocess.html#replacing-shell-pipeline
