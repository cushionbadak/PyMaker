Natural Text
Given a listhow can I getThat is, produce a new list in which each successive element is alternately taken from the two sides of the original list?
Explanation:This code picks numbers from the beginning () and from the end () of , alternatingly (). A total of  numbers are picked, so this produces no ill effects even if  is odd. yields , yields ,and  alternates between  and ,so the indices we extract from  are: .My assessment of pythonicness:The nice thing about this one-liner is that it's short and shows symmetry ( and ).The bad thing, though, is that this symmetry is deceptive:One might think that  were the same as  with the sign flipped. But in Python, integer division returns the floor of the result instead of truncating towards zero. So .Also, I find accessing list elements by index less pythonic than iteration.
 between getting items from the forward  and the  one. Just make sure you stop at  with .This can easily be put into a single line but then it becomes much more difficult to read:Putting it in one line would also prevent you from using the other half of the iterators if you wanted to:
A very nice one-liner in Python 2.7:First you zip the list with its reverse, take half that list, sum the tuples to form one tuple, and then convert to list. In Python 3,  returns a generator, so you have have to use  from :Edit: It appears this only works perfectly for even-list lengths - odd-list lengths will omit the middle element :( A small correction for  to  will give you a duplicate middle value, so be warned. 
You can just  back and forth:Note: This destroys the original list, .
Use the right toolz.First, I tried something similar to Raymond Hettinger's solution with itertools (Python 3).
Not terribly different from some of the other answers, but it avoids a conditional expression for determining the sign of the index. alternates between 0 and 1. This causes the exponent to alternate between 1 and -1. This causes the index divisor to alternate between 2 and -2, which causes the index to alternate from end to end as  increases. The sequence is , , , , , , etc.(I iterate  over  since in this case each value of  is equal to its index. In general, iterate over .)
The basic principle behind your question is a so-called roundrobin algorithm. The -documentation-page contains a possible implementation of it:so all you have to do is split your list into two sublists one starting from the left end and one from the right end:alternatively you could create a longer list (containing alternating items from sequence going from left to right and the items of the complete sequence going right to left) and only take the relevant elements:or using it as explicit generator with :or the speedy variant suggested by @Tadhg McDonald-Jensen (thank you!):
Note:Beware: Just like @Tadhg McDonald-Jensen has said (see the comment below)  it'll destroy half of original list object.
Not sure, whether this can be written more compactly, but it is efficient as it only uses iterators / generators
For fun, here is an itertools variant:This works where  is even.  It would need a special code for odd-lengthened input.Enjoy!
Not at all elegant, but it is a clumsy one-liner:Note that it assumes you are doing this for a list of even length. If that breaks, then this breaks (it drops the middle term). Note that I got some of the idea from here.
Two versions not seen yet:and
One way to do this for even-sized lists (inspired by this post):
I would do something like this
You can partition the list into two parts about the middle, reverse the second half and zip the two partitions, like so:Output:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
