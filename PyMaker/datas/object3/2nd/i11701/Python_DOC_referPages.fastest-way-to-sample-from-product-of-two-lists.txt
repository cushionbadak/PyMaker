Natural Text
I'd like to get n samples (without replacement) from the product of two lists. As shown below, I'm currently computing the entire product and then sampling from it, but this gets computationally unwieldy for long lists. Is there a way to optimize this process? That is, not having to compute the entire product but sampling more effectively?Current naive approach (erroneously sampling with replacement, as noted below):
You should be fine if you just don't actually use  if you don't want a ; a non-random sample can be found bynow, if you just want random samples from some combinations of  and , an iterator is clearly not the right approach, and hence,  aren't, either. Assuming  and  are fast on random access (e.g. s, s):getting  unique samples is more complicated, though:
If you want a sample with replacement, the way your code currently does it, you can take random elements of  with :If you want a sample without replacement, make a sample of random pairs of indices:
Unfortunately you cannot take a random sample from an iterator. An iterator (like ) means you know only 1 value at a time and you must know more than 1 value in order to provide randomness.The naive approach can be more efficient though with  like so:


Answer URL
https://docs.python.org/3/library/random.html#random.sample
