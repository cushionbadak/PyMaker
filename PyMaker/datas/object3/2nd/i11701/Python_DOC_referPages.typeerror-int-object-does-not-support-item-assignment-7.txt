Natural Text
This is Python 3 code I wrote to return all the values in a list that occur 'occurrences' times, and display a chosen error message if none were found. However, this is what I'm getting:I can somewhat tell what the error is, but I'm not sure. What I'm trying to do is to have a separate number of occurrences for each different value in the list. For example, if I had a list [2,2,5,7,7,7,7,8,8,8] I would want occurrencesFound[2] to end up as 2, occurrencesFound[5] to end up as 1, occurrencesFound[7] to end up as 4, and so on. With that, the code would then check if any numbers occurred at least the number of times the user asked for, and then return all the numbers that did. The method I used didn't work great, though...What I would like to know is why this is an error and how I might be able to fix it. I tried doing occurrencesFound(curr) instead, and that worked no better. That was answered in "TypeError: 'function' object does not support item assignment" however. Any ideas?
You have occurancesFound set to an integer data type at this line:You cannot assign an item to it because it is an integer.If you want to assign items to it, make it a dict:
You're setting  to an int () and then trying to use it as a list (). That is the problem. If you want to store occurences of different entities in , use it as follows:This will create a dictionary of count (int) variables, where  is the key.
As others have mentioned there's a serious inconsistency in your code: you are trying to use  both as an integer and a list.The simple way to find groups of duplicate items in a list is to use the standard module function . Your  takes an  arg, but I advise that it's cleaner to do the error handling in the calling code rather than in the function that finds the groups.My  collects the groups in a , which is more flexible that using a , since it can be used for various types of elements, not just integers. And even if you're just collecting groups of integers, a  is still better than a , unless those integers are guaranteed to be roughly contiguous, with the lowest integer near zero (and non-negative).output


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
