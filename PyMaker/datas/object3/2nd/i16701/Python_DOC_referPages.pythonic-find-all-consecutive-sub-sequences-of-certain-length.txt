Natural Text
I have a list of integers and I want to find all consecutive sub-sequences of length n in this list. For example:The best I could come up with is:This isn't overly readable. Is there any readable pythonic way of doing this?
Here's a more general solution that works for arbitrary input iterables (not just sequences):  finds consecutive substrings such as  in the input. It is based on the example from the docs that shows how to find runs of consecutive numbers: The key to the solution is differencing with a range generated by  enumerate() so that consecutive integers all appear in same group  (run). +  allow to iterate over the substring k-wise -- a generalization of  recipe from the  docs.  is from the  recipe there.Example:The code uses Python 3 syntax that could be adapted for Python 2 if needed.See also, What is the most pythonic way to sort dates sequences?
One solution could be as follows:Basically, first, I get consecutive sub-lists of given length from the list, and then check if the sum of the differences of their elements is equal to . Please not that if elements are consecutive, their difference will add up to , e.g. for sub-list  the difference of its elements is  and sum of it is .But to be honest not sure if this solution is clearer or more pythonic than yours. Just in case you don't have , the  function can be easly defined as follows:
Using operator.itemgetter  and itertools.groupby Without imports.Which can be turned into list comprehension:



Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/library/itertools.html#itertools.tee
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/itertools.html#itertools-recipes
