Natural Text
I am not a programming genius, but just in the beginning of this year, when being taught propositional logic my teacher told me (and it was quite obvious) that if P is True, not(P) or ~P was False, and the opposite if P was False.Reading the Python docs about creating custom objects, I found that they claim that  being  does not imply that  is . This confused my mind as I thought that  was the negation of  and therefore, whenever evaluating with  returned a boolean result, the expression  would always evaluate to the opposite... And as far as I know,  evaluates to  and  evaluates to . Can someone please help me understand how this happens? Perhaps with an example?I read about this right herequoting:The truth of x==y does not imply that x!=y is false.
It's because they are operators which can be custom implemented separately, and the operators themselves (at a high level) don't dictate that if  is true then  is false (one could implement them such that that relationship does not follow).The key is the statement in the doc that follows that:Accordingly, when defining , one should also define   so that the operators will behave as expectedWhen both are implemented, then there is an explicit relationship between the operators.
Largely this is just because we can do silly stuff:If you're wondering what this if for, I'd imagine it's largely for symmetry (and thus a pretty implementation). Consider that  and  are not inverses:so we need both  and  separately defined.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__ge__
