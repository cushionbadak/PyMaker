Natural Text
I recently discovered some interesting behavior that left me wondering about how an object knows about which global variables exist. For example, suppose I have a file "test.py":Then in an interactive shell I do this:Nothing surprising. Then I change the first few lines of "test.py" to this:Now back to the interactive shell:So  now knows about , which showed up after  itself was created. It still knows about  because reloading a module apparently doesn't affect a global variable that was deleted. Here comes a twist:Deleting the module from  and then reimporting the module results in all the global variables becoming .Also of interest is that if I delete  and , it still knows about the values of the variables for a while. After a little while (which I assume is how long it takes for the module to be garbage collected) the values become . Reimporting the module causes the garbage collection (or whatever is going on) to happen immediately.So how does  find out about a new global variable being created, and then once the module is gone why does it still know which variables existed even though it no longer knows what values they held?
Any name that is not a local (has not been assigned to in the current scope) is instead assumed to be a global. The name is looked up every time the code runs.So at runtime the name is looked up in the global namespace, which is just a dictionary. If the name doesn't exist at that time, a  exception is raised.You can see this when you disassemble a function; bytecode is shown when using the  module: is a local (it was assigned to in the block), while  is a global. The local is referenced by , while the global is referenced by .To do this, function objects have a  reference linking it to the module globals mapping; see the User-defined functions section in the datamodel documentation:Python also cleans up globals when deleting modules; to prevent circular references holding up finalisation globals are rebound to  at that time (although this behaviour changed in Python 3.4). If you however maintain a reference to , your code will find those  values.Your  instance, still referencing the original class and it's methods, are still referencing their module through their  references. So, although you deleted the  reference to the module, triggering the module cleanup, the globals dictionary is still referenced by the class methods. This globals dictionary now holds  values for each global.


Answer URL
https://docs.python.org/3/whatsnew/3.4.html#whatsnew-pep-442
