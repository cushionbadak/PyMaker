Natural Text
It is possible for a generator to manage a resource, e.g. by 'ing from inside a context manager.The resource is freed as soon as the  method of the generator is called (or an exception is raised).As it's easy to forget to call  in the end, I think it's obvious to use a context manager also for that (and also to handle potential exceptions).I know that I can use  for that, but wouldn't it be much nicer to directly use the generator in the  statement?Is there a reason why a generator should not be a context manager?
In general, the reason you don't see more generators as context managers and visa versa is that they're aimed at solving different problems. Context managers came about because it provided a clean and concise way of scoping executable code to a resource. There is one very good reason you might want to separate a class that implements  from also being a context manager, the Single Responsibility Principle. Single Responsibility boils down to the conceptMake a class do one thing and do it wellLists are iterable but that's because they're a collection. They manage no state other than what they hold and iteration is just another way of accessing that state. Unless you need iteration as a means of accessing the state of a contained object then I can't see a reason to mix and match the two together. Even then, I would go to great lengths to separate it out in true OO style.
Like Wheaties said, you want to have classes do only "one thing and do it well". In particular with context managers, they are managing a context. So ask yourself, what is the context here? Most of the time, it will be having a resource open. A while ago I asked about using a queue with a context manager, and the response was basically that a queue did not make sense as a context. However, "in a task" was the real context that I was in and it made sense to make a context manager for that.Additionally, there is no iterated  statement. For example, I cannot open a file and iterate through it in one statement like this:It has to be done in two lines:This is good because the context being managed is not "we are iterating through the file", it is "we have a file open". So again, what is the context? What are you really doing? Most likely, your managed context is not actually the iteration through the resource. However, if you look at your specific problem you might discover that you do indeed have a situation in which the generator is managing a context. Hopefully understanding what the context really is should give you some ideas on how to appropriately manage it.


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.closing
