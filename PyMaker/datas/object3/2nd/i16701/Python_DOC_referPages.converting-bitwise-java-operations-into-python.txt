Natural Text
My problem is pretty straight forward. I have a client program written in Java which has a method that generates an ID. I'm writing Python scripts to parse and correct the output of this client program. The method in the client that creates the ID's uses bitwise operations to create the ID. Unfortunately, the ID generator is unique though it says it's UUID, it's not.The code I'm trying to convert is open source and in the EMF EcoreUtil.java file1. If you have the time or looking for a fun coding, you're welcome to translate this code. But I'd like to know how to do bitwise operations like this in python like I would in C/C++ and Java.
The bitwise operations in python are the same as they are in C/Java (though python lacks the  operation of Java as it is not needed; sign extension is always done, but even 0xFFFF_FFFF_FFFF_FFFF can be represented as a positive integer).As an added bonus, Python integers can be used positive for whatever size, unlike in Java, where there are signedness issues with bit-twiddling.Looking at the linked file, it seems that the value indeed should be an UUID, only that it is base64-encoded:Generates a universally unique identifier, i.e., a UUID. It encodes  the 128 bit UUID in base 64, but rather than padding the encoding with  two "=" characters, it prefixes the encoding with a single "_"  character, to ensure that the result is a valid ID, i.e., an NCNameIn Python there is UUID class, and base64 encoding module; thus the whole identifier handling could be written in Python as
The Python wiki has a good page on this.  I don't know Java that well, but at first look I think many of the operators are the same: In addition, you may want to look at the uuid module.The Operators:


Answer URL
https://docs.python.org/3/library/uuid.html
https://docs.python.org/3/library/base64.html
