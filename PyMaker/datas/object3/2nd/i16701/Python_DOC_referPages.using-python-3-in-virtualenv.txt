Natural Text
Using virtualenv, I run my projects with the default version of Python (2.7). On one project, I need to use Python 3.4. I used  to install it on my Mac. Now, how do I create a virtualenv that uses the new version?e.g. sudo virtualenv envPython3If I try:I get:
simply runUpdate after OP's edit:There was a bug in the OP's version of virtualenv, as described here. The problem was fixed by running:
Python 3 has a built-in support for virtual environments - venv. It might be better to use that instead. Referring to the docs:Creation of virtual environments is done by executing the pyvenv  script:Update for Python 3.6 and newer:As pawciobiel correctly comments,  is deprecated as of Python 3.6 and the new way is:
Install prerequisites.Create a Python3 based virtual environment. Optionally enable  flag.Set into the virtual environment.Install other requirements using  package manager.When working on multiple python projects simultaneously it is usually recommended to install common packages like  globally and then reuse them in virtualenvs.Using this technique saves a lot of time spent on fetching packages and installing them, apart from consuming minimal disk space and network bandwidth.Django specific instructionsIf there are a lot of system wide python packages then it is recommended to not use  flag especially during development since I have noticed that it slows down Django startup a lot. I presume Django environment initialisation is manually scanning and appending all site packages from the system path which might be the reason. Even  becomes very slow.Having said that experiment which option works better. Might be safe to just skip  flag for Django projects.
I'v tried pyenv and it's very handy for switching python versions (global, local in folder or in the virtualenv):then install Python version you want:and simply create virtualenv with path to needed interpreter version:That's it, check the version:There are also plugin for pyenv pyenv-virtualenv but it didn't work for me somehow.
worked for me.
You can specify specific Version of Python while creating environment.It's mentioned in virtualenv.py In some cases this has to be the full path to the executable:How  works
I had the same  message. tbrisker's solution did not work in my case. Instead this solved the issue:
In addition to the other answers, I recommend checking what instance of virtualenv you are executing:If this turns up something in /usr/local/bin, then it is possible - even likely - that you installed virtualenv (possibly using an instance of easy_tools or pip) without using your system's package manager (brew in OP's case).  This was my problem.Years ago - when I was even more ignorant - I had installed virtualenv and it was masking my system's package-provided virtualenv.  After removing this old, broken virtualenv, my problems went away.
Python now comes with its own implementation of virtual environment, by the name of "venv". I would suggest using that, instead of virtualenv.Quoting from venv - docs, Deprecated since version 3.6: pyvenv was the recommended tool for  creating virtual environments for Python 3.3 and 3.4, and is  deprecated in Python 3.6.Changed in version 3.5: The use of venv is now recommended for  creating virtual environments.For windows, to initiate venv on some project, open cmd:(Would suggest using double quote around directory path if it contains any spaces. Ex: "C:/My Dox/Spaced Directory/Something")Once venv is set up, you will see some new folders inside your project directory. One of them would be "Scripts".To activate or invoke venv you need:You can deactivate a virtual environment by typing “deactivate” in your shell. With this, you are now ready to install your project specific libraries, which will reside under the folder "Lib".================================ Edit 1 ==================================== The scenario which will be discussed below is not what originally asked, just adding this in case someone use vscode with  python extensionIn case, you use vs code with its python extension, you might face an issue with its pylint which points to the global installation. In this case, pylint won't be able to see the modules that are installed in your virtual environment and hence will show errors while importing.Here is a simple method to get past this.We are basically activating the environment first and then invoking vs-code so that pylint starts within the environment and can see all local packages.
In python3.6 I tried , as per the documentation, but it was taking so long. So the very simple and quick command is It worked for me on python3.6.
On Mac I had to do the following to get it to work.
If you install python3 () along with virtualenv burrito, you can then do  Of course, I know virtualenv burrito is just a wrapper, but it has served me well over the years, reducing some learning curves.
this will add python3 path for your virtual enviroment. 
This is all you need to run a virtual environment in python / python3First make sure you have virtualenv and nowRun:Sometime the above cmd fails, simply use this:Now activate the virtual env:Or:Run (to exit):
It worked for me
For those having troubles while working with Anaconda3 (Python 3).You could use To activate the environment ( Linux, MacOS)For Windows
I tried all the above stuff, it still didn't work. So as a brute force, I just re-installed the anaconda, re-installed the virtualenv... and it worked.
I wanted to keep python 2.7.5 as default version on Centos 7 but have python 3.6.1 in a virtual environment running alongside other virtual environments in python 2.xI found the below link the best solution for the newest python version ( python 3.6.1)https://www.digitalocean.com/community/tutorial_series/how-to-install-and-set-up-a-local-programming-environment-for-python-3.It shows the steps for different platforms but the basic steps areInstall python3.x (if not present) for your platformInstall python3.x-devel for your platformCreate virtual environment in python 3.x (for example $ python3.6 -m venv virenv_test_p3/ )Activate the testenvironment for python 3.x (for example source virenv_test_p3/bin/activate)Install the packages which you want to use in your new python 3 virtual environment and which are supported ( for example pip install Django==1.11.2)
For those of you who are using pipenv and want to install specific version:
I got the same error due to it being a conflict with miniconda3 install so when you type "which virtualenv" and if you've installed miniconda and it's pointing to that install you can either remove it (if your like me and haven't moved to it yet) or change your environment variable to point to the install you want.
On Windows command line, the following worked for me. First find out where your python executables are located: This will output the paths to the different python.exe on your system. Here were mine:So for Python3, this was located in the first path for me, so I cd to the root folder of the application where I want to create a virtual environment folder. Then I run the following which includes the path to my Python3 executable, naming my virtual environment 'venv':Next, activate the virtual environment:Finally, install the dependencies for this virtual environment:This requirements.txt could be populated manually if you know the libraries/modules needed for your application in the virtual environment. If you had the application running in another environment, then you can automatically produce the dependencies by running the following (cd to the application folder in the environment where it is working):Then once you have the requirements.txt that you have 'frozen', then you can install the requirements on another machine or clean environment with the following (after cd to the application folder):To see your python version in the virtual environment, run:Then voila...you have your Python3 running in your virtual environment. Output for me:


Answer URL
https://docs.python.org/3/library/venv.html#module-venv
https://docs.python.org/3/library/venv.html
