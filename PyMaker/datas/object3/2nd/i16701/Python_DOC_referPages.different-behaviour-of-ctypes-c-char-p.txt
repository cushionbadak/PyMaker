Natural Text
I am confused with this behaviour of different versions of python and dont understand why ? One works while the other gives me an error. Which one is correct ? If both of them are correct, how can i achieve the same behaviour as 2.7 in 3.3.5 ? I want to pass the char pointer to C from python.
 is a subclass of , with . The  method calls the type's , which for simple type  is .In Python 2, the  function (2.7.7) is written to handle both  and  strings. Prior to Python 3,  is an 8-bit string. CPython 2.x  internally uses a C null-terminated string (i.e. an array of bytes terminated by ), for which  can call  (i.e. get a pointer to the internal buffer of the  object). A  string needs to first be encoded to a byte string.  handles this encoding automatically and keeps a reference to the encoded string in the   attribute. On Windows, the default ctypes string encoding is , with error handling set to . On all other platforms the default encoding is , with  error handling. To modify the default, call . For example, . In Python 3, the  function (3.4.1) does not automatically convert  (now Unicode) to . The paradigm shifted in Python 3 to strictly divide character strings from binary data. The ctypes default conversions were removed, as was the function . You have to pass  a  object (e.g.  or ). In CPython 3.x,  calls the C-API function  to get a pointer to the internal buffer of the  object. Note that if the C function modifies the string, then you need to instead use  to create a  array. Look for a parameter to be typed as  to know that it's safe to use .


Answer URL
https://docs.python.org/3/c-api/bytes.html#c.PyBytes_AsString
https://docs.python.org/3/library/ctypes.html#ctypes.create_string_buffer
