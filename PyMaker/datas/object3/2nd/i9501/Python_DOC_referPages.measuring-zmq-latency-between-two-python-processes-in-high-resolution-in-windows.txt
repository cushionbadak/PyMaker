Natural Text
I want to measure the latency of zeromq between two python processes in high resolution(in a us/ns unit)(windows 10).Here's my code.sub.pypub.pyHowever, since  function's resolution in windows 10 is only 15.6ms(windows default timer period), I was unable to measure the latency below 15.6ms with code.So I thought about using  function, which have microsecond resolution, but it was also useless in measuring time difference of two process since  function's reference point is undefined according to doc.Is there any other way to measure the time difference between two python processes in high resolution(microsecond or nanosecond unit)?
Yes, there is: ZeroMQ has a built-in tool for doing this, platform independent and indeed lovely to use. method returns a long number (  ), representing a duration with a [us] resolution.Hints: avoid any printing and memory-allocation operations when going down into testing performance details ( always pre-allocate, always rather assign a function's returning value, than to get interpreter's result-value repr/printing overheads included into the measurement-embedded section-of-code == avoid  overheads by assignment to  ( special symbol ( variable ) without any allocation overhead ) ).Still, there are points to solve ( or to be aware of ):- on distributed hosts, ( non-local process-starts/ends ) you need to find and synchronise a common reference-clock to compute meaningful differences, or one has to re-arrange the test to form a loop in message/signal delivery there-and-back to measure on the same refClk-side. For additional aspects of high-res clocks ( having sub- resolutions ), monotonicity ( immune to NTP-adjustments ), kindly check ,  and one may use more complex scenarios to measure differentially, as one message triggers beginning of test-measurement and the second arrival triggers end of the test-measurement, carrying the initiator-side inter-message duration ( processing, intended delay et al ) overhead ( in  ) as a payload ( to substitute from the result on the receiver side ). Anyway, be careful on below mentioned systematic uncertainties when dealing sub--events.- expect O/S interventions on various ZeroMQ transport-classes. The  transport-class, for instance, is a subject of Windows buffering and there have been published heavily unpredictable deferred wireline transmits on Windows TCP/IP-stack ( google 'em, countermeasures exist, google 'em too ).- expect O/S scheduler influences on how  is being executed amongst all other system + user processing and prioritised resources handling.


Answer URL
https://docs.python.org/3/library/time.html#time.perf_counter
