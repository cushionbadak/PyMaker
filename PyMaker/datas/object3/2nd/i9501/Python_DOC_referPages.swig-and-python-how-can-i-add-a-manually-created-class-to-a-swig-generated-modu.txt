Natural Text
My project uses SWIG to automatically create wrappers for a set of C++ functions and types, in a single module called . I want to define a new type using the Python C API directly, and add it to that module. (In particular, I want to define a new type that implements the Python buffer protocol, so that I can expose a native buffer as a .)I can define the requisite structs for my new type by inlining it in a  file:After doing this, I want to add the type object to the SWIG-generated module, by calling , presumably in the module initialization block (). However, I do not know what name to give for the value returned from  (or  in Python 3.x) in the generated code that creates the  module. I have been able to create a second module in the  block, but I'd prefer to add it to the auto-generated module if possible.An answer to either of these questions would solve my problem:Is there a SWIG macro for accessing the generated module object in the initialization block (e.g. by expanding to the variable name for the corresponding )? This object seems to be stored in a local variable called  in my generated code, but I don't know if that is guaranteed to be the same in all distributions.Or is there a more idiomatic way to do what I am trying to achieve using SWIG? The buffer protocol typemaps seem from their documentation seemed to be designed for writing functions that accept buffers as arguments, whereas I want my wrapper type to implement the buffer protocol.
If you are writing you own class or structure, swig will build a python type for it, and all you have to do is add slots. Try %feature(python:slot). This feature can let you add arbitrary function/structures to generated python type slot. Also build your .i file using '-builtin' option, emit the unnecessary proxy python file.
Just to make Jacky's answer more explicit - you probably want to do something like:This is sort of untested, I'm analogizing from some work I'm doing with iterators. And it certainly requires the -builtin option.


Answer URL
https://docs.python.org/3/c-api/module.html#c.PyModule_Create
