Natural Text
I want to use a data structure that allows me to store up to X objects with thier rankings and managing that structure in the best run-time.Lets call it . Lets define  and the following should happen.So we can see it keeps the rank in check (0.75 is in the first place, and 0.5 is in the 2nd)After adding another object that is ranked higher then obj1, obj1 is cast out of the list ( so only up to 2 object may be stored in the list)Is there a data structure like that that already exists in python?If not which way should I implement it to get the best run-time results
From the comments I understand you are looking to extract the top K elements from a sequence. In that case you don't need to keep your list sorted at all. You can use a heap queue.A heapq is a binary tree where any parent has a value either smaller than any of its children (or larger, if you flip the values). This means you can always find the top K elements, in order, in O(K) time, but keeping the heap in order on inserting only takes O(logN) time. In total, for N items going in and K top items to come out (in order), this gives you a very efficient O(KlogN) algorithm.The Python standard library includes the  module to do this for you.You can either keep a heap yourself or use the  function to build a heap from an iterable for you and then directly return the top K items.To keep the K largest items in a manually kept heap, build a list of K elements first (as  tuples), use  once it reaches that size, and from there on out use  to push your next element onto the list and remove the smallest. That way you always keep a fixed-size heap of K largest items. In the end, use  to give you those largest items in reverse sorted order (largest to smallest).


Answer URL
https://docs.python.org/3/library/heapq.html
https://docs.python.org/3/library/heapq.html#heapq.nlargest
