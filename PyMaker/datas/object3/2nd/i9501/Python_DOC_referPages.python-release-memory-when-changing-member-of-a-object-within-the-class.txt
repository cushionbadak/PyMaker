Natural Text
I have been playing around with Python objects in IDLE and observed that if a member variable of an object is changed, the memory isn't released! Here is an example:The output of this code, I would expect to be: It turns out that the ref, however, is still a valid reference and the output is:I would like to see that memory being released. I would like to understand how.
You've misunderstood something crucial, unfortunately. When you call the  object returned from  you get back the original object. Try printing  and see how  is returned. See the docs on :The original object can be retrieved by calling the reference object if the referent is still alive; if the referent is no longer alive, calling the reference object will cause  to be returned.(Emphasis mine)You called the reference object and got your class  back; a reference to it therefore still exists in  not allowing it to get garbage-collected. If you don't call it, on the other hand, you'll notice how the line  indicates that the reference is dead:i.e as the sole reference to your object and due to the fact it is weak, it got collected. As an aside, if you want to be portable between Python 2 and 3 you'll want your classes to subclass from  and not use empty parentheses . If you don't care about portability, the parentheses can be dropped without change in semantics. :-)


Answer URL
https://docs.python.org/3/library/weakref.html#weakref.ref
