Natural Text
While playing with new f-strings in the recent Python 3.6 release, I've noticed the following:We create a  variable with value :Then, we declare a new variable, which is our f-string, and it should take  to be formatted:Ok, all going fine and then we call  to check its value:Let's try to change the value of  and call  again:Shouldn't it be dynamic? Why does this happen? I thought the f-string would update if the value of  changed, but this didn't happened. I don't understand how this works.
The  has already been evaluated when you executed:Specifically, it looked up the value for the name  and replaced it with , the value that was found for it.  then contains the string after it has been formatted. s aren't constant; meaning, they don't have a replacement field inside them waiting for evaluation after being evaluated. They evaluate when you execute them, after that, the assigned value is just a normal string:For reference, see the section on Formatted String Literals:[..] While other string literals always have a constant value, formatted strings are really expressions evaluated at run time. [..]After the expression (the look-up for the replacement field and its consequent formatting) is performed, there's nothing special about them, the expression has been evaluated to a string and assigned to . 
Strings are immutable and once a string is created, it can no longer be changed. and more importantly  are both strings. That means when you create them they go into memory and can no longer be changed.Once you assigned  you created this object and assigned it to a specific location in memory. Same thing was done with . Even though  was as a Format string literal does not mean that it is no longer immutable since:By doing so,  was created as an object and assigned to your memory as , thus its relation to  is purely during instantiation. During which  seeks the object  and concatenate it where appropriate.Once you created  you destroyed the original assignment of  and create a new one in memory.


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals
