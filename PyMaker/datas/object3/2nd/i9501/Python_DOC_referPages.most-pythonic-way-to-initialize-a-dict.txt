Natural Text
Suppose I have a dict like thisIt can be constructed byI used this line  to check existence of the key/value pair in the dict and initiate the pair. Is there a more pythonic way to achieve this?
This is probably best handled with a , which will automatically create any key-value mapping that is accessed if it doesn't already exist. You pass a callable to the  constructor that will be used to initialize the value. For example:
Using a comprehension:Using :Using :
out:When each key is encountered for the first time, it is not already in  the mapping; so an entry is automatically created using the  default_factory function which returns an empty list. The  list.append() operation then attaches the value to the new list. When  keys are encountered again, the look-up proceeds normally (returning  the list for that key) and the list.append() operation adds another  value to the list. This technique is simpler and faster than an  equivalent technique using dict.setdefault():
You can use list slices [start:stop:step] nominclature
Given that you haven't given any input nor variable parts you might just initialize it with the literal you already have:If you have variable input you may use  with  as factory. Given that this operation is very common several external libraries have functions for this:For example:or:


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
