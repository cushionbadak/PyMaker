Natural Text
I'm trying to rewrite this Python2.7 code to the new async world order: blocks until all results have been computed, so I'm trying to rewrite this as an async implementation that will yield results as soon as they are ready. Like , return values must be returned in the same order as . I tried this (I need  because of legacy auth requirements):but with Python 3.6 I'm getting:How can I accomplish this?
Regarding your older (2.7) code - multiprocessing is considered a powerful drop-in replacement for the much simpler threading module for concurrently processing CPU intensive tasks, where threading does not work so well.  Your code is probably not CPU bound - since it just needs to make HTTP requests - and threading might have been enough for solving your problem. However, instead of using  directly, Python 3+ has a nice module called concurrent.futures that with a cleaner API via cool  classes.  This module is available also for python 2.7 as an external package.  The following code works on python 2 and python 3:This code uses , based on threading.  A lot of the magic is in  used here.Your python 3.6 code above, uses  which creates a , and does not really use asynchronous IO!!If you really want to go forward with asyncio, you will need to use an HTTP client that supports asyncio, such as aiohttp.  Here is an example code:As you can see,  also has an , now using real asynchronous IO, utilizing only one thread on one process.
You put your event loop in another co-routine. Don't do that. The event loop is the outermost 'driver' of async code, and should be run synchronous.If you need to process the fetched results, write more coroutines that do so. They could take the data from a queue, or could be driving the fetching directly.You could have a main function that fetches and processes results, for example:I'd make the  function properly async too using an async library like  so you don't have to use the executor at all.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
https://docs.python.org/3/library/asyncio-eventloop.html#executor
