Natural Text
Aside from 's capability to define the keyword arguments when creating a class. Are there any major differences between the two approaches?
I realise this is late, and hence you've already likely answered this yourself.Firstly, it seems that you misunderstand the  argument of ; it is the class keyword arguments, e.gis analogous to (without the print)These meta-arguments are useful when configuring meta-classes.I am not really sure as to why  was designed to accept a callable vs a dict directly, but I suspect it was to avoid implicit shared state between "new" classes that did not inherit from one another. 
Are there any major differences between the two approaches?Yes. The answer involves a concept called "metaclasses". [Metaclasses] are deeper magic than 99% of users should  ever worry about.  If you wonder whether you need them, you don't (the  people who actually need them know with certainty that they need them, and  don't need an explanation about why). â¸º Tim Peters, author of Zen of Python (source)If you think you're in that 99%, then read no further, feel free to just use . It's just as good as  except for in the rare situation that you're using metaclasses.If you want to know more about metaclasses, I suggest you take a look at some of the high quality answers posted to "What are metaclasses in Python?". (I recommend this one.)Once you understand what a metaclass is, the answer is fairly self-evident. Since  is a specific metaclass, it will only work if you want to create classes that use it as their metaclass.However, if you want to use a non-default metaclassand a static class won't dothen you can use (As a brief aside, the reason that it requires a callable (e.g. ) instead of a dictionary is because metaclasses are allowed to care about the order in which the attributes are defined. )


Answer URL
https://docs.python.org/3/library/functions.html?highlight=type%20built#type
https://docs.python.org/3/library/types.html#types.new_class
