Natural Text
I'm writing my own container, which needs to give access to a dictionary inside by attribute calls. The typical use of the container would be like this:I know that it might be stupid to write something like this, but that's the functionality I need to provide. I was thinking about implementing this in a following way:I'm not sure whether nested try/except blocks are a good practice so another way would be to use  and :Or to use one of them and one try catch block like this:Which option is most pythonic and elegant?
Your first example is perfectly fine. Even the official Python docs recommend this style known as EAFP.Personally, I prefer to avoid nesting when it's not necessary:PS.  has been deprecated for a long time in Python 2. Use  instead.
While in Java its indeed a bad practice to use Exceptions for flow control (mainly because exceptions force the jvm to gather resources (more here)), in Python you have 2 important principles: Duck Typing and EAFP. This basically means that you are encouraged to try using an object the way you think it would work, and handle when things are not like that.In summary the only problem would be your code getting too much indented. If you feel like it, try to simplify some of the nestings like lqc suggested
For your specific example, you don't actually need to nest them.  If the expression in the  block succeeds, the function will return, so any code after the whole try/except block will only be run if the first attempt fails.  So you can just do:Nesting them isn't bad, but I feel like leaving it flat makes the structure more clear: you're sequentially trying a series of things and returning the first one that works.Incidentally, you might want to think about whether you really want to use  instead of  here.  Using  will simplify things because you'll know that the normal attribute lookup process has already failed.
In my opinion this would be the most Pythonic way to handle it, although and because it makes your question moot. Note that this definesinstead of because doing so means it only has to deal with the "special" attributes being keep in the internal dictionary.
In Python it is easier to ask for forgiveness than permission. Don't sweat the nested exception handling.(Besides,  almost always uses exceptions under the cover anyways.)
Just be careful - in this case first  is touched BUT skipped too.
According to the documentation, it is better to handle multiple exceptions through tuples or like this:
One thing I like to avoid is raising a new exception while handling an old one.  It makes the error messages confusing to read.For example, in my code, I originally wrote And I got this message.What I wanted was this:It doesn't affect how exceptions are handled.  In either block of code, a KeyError would have been caught.  This is merely an issue of getting style points.
I don't think it's a matter of being pythonic or elegant.It's a matter of preventing exceptions as much as you can.Exceptions are meant to handle errors that might occur in code or events you have no control over.In this case you have full control when checking if an item is an attribute or in a dictionary, so avoid nested exceptions and stick with your second attempt.
If try-except-finally is nested inside finally block, the result from "child" finally is preserved. I have not found official expaination yet, but the following code snippet shows this behavior in Python 3.6. 


Answer URL
