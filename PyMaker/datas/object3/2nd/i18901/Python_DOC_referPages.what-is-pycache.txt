Natural Text
From what I understand, a cache is an encrypted file of similar files.What do we do with the  folder? Is it what we give to people instead of our source code? Is it just my input data? This folder keeps getting created, what it is for? 
When you run a program in python, the interpreter compiles it to bytecode first (this is an oversimplification) and stores it in the  folder. If you look in there you will find a bunch of files sharing the names of the .py files in your project's folder, only their extensions will be either .pyc or .pyo. These are bytecode-compiled and optimized bytecode-compiled versions of your program's files, respectively.As a programmer, you can largely just ignore it... All it does is make your program start a little faster. When your scripts change, they will be recompiled, and if you delete the files or the whole folder and run your program again, they will reappear (unless you specifically suppress that behavior)If you are using cpython (which is the most common, as it's the reference implementation) and you don't want that folder, then you can suppress it by starting the interpreter with the -B flag, for example Another option, as noted by tcaswell, is to set the environment variable  to any value (according to python's man page, any "non-empty string").
 is a folder containing Python 3 bytecode compiled and ready to be executed.Don't bother deleting these files nor suppress creation as it will hurt performance. Just have a recursive command ready (see below) to clean up when needed as bytecode can become stale in edge cases (see comments).Python programmers usually ignore bytecode. Indeed  and  are common lines to see in  files. Bytecode is not meant for distribution and can be disassembled using  module. If you are using OS X you can easily hide all of these folders in your project by running following command from the root folder of your project.Replace  with  for Python 2.This sets a flag on all those directories (.pyc files) telling  Finder/Textmate 2 to exclude them from listings. Importantly the bytecode is there, it's just hidden.Rerun the command if you create new modules and wish to hide new bytecode or if you delete the hidden bytecode files.On Windows the equivalent command might be (not tested, batch script welcome):Which is same as going through the project hiding folders using right-click > hide...Running unit tests is one scenario (more in comments) where deleting the  files and  folders is indeed useful. I use the following lines in my  and just run  to clean up when needed. 
A __pycache__folder is created when you use the line or try to get information from another file you have created. This makes it a little faster when running the program your second time to open the other file.
 is a directory that contains bytecode cache files that are automatically generated by python, namely compiled python, or , files. You might be wondering why Python, an "interpreted" language, has any compiled files at all. This SO question addresses that (and it's definitely worth reading this answer).The python docs go into more depth about exactly how it works and why it exists:It was added in python 3.2 because the existing system of maintaining  files in the same directory caused various problems, such as when a program was run with Python interpreters of different versions. For the full feature spec, see PEP 3174.
The python interpreter compiles the *.py script file and saves the results of the compilation to the  directory.When the project is executed again, if the interpreter identifies that the *.py script has not been modified, it skips the compile step and runs the previously generated *.pyc file stored in the  folder.When the project is complex, you can make the preparation time before the project is run shorter. If the program is too small, you can ignore that by using  with the  option.
from the official python tutorial ModulesTo speed up loading modules, Python caches the compiled version of each module in the  directory under the name , where the version encodes the format of the compiled file; it generally contains the Python version number. For example, in CPython release 3.6 the compiled version of spam.py would be cached as .from Python doc Programming FAQsWhen a module is imported for the first time (or when the source file has changed since the current compiled file was created) a .pyc file containing the compiled code should be created in a  subdirectory of the directory containing the  file. The  file will have a filename that starts with the same name as the  file, and ends with , with a middle component that depends on the particular python binary that created it. 
In 3.2 and later, Python saves .pyc compiled byte code files in a sub-directory named  located in the directory where your source files reside with filenames that identify the Python version that created them (e.g. script.cpython-33.pyc)
pycache =  Byte code compiled files of python
python interpreter compiles your code into those cached files and saves them to those folders, any time you will use it will appear  


Answer URL
https://docs.python.org/3/whatsnew/3.2.html?highlight=__pycache__#pep-3147-pyc-repository-directories
https://docs.python.org/3/tutorial/modules.html#compiled-python-files
https://docs.python.org/3/faq/programming.html?highlight=__pycache__#how-do-i-create-a-pyc-file
