Natural Text
Difference between create instance of an objects by () and without parentheses?Assume this is my simple class:And making the instances to this two variables:When print the two instancesI can successfully access their attributesAnd it shows error in list2 using a method appendWhat is the difference not only in this simple example?
 creates an object of the class.  makes a reference to the class itself. Classes are first-class objects in Python, which means they can be assigned just like any other object.Because the attributes are part of the class, they're also part of the objects that are created with that class.
You aren't creating an instance of an object in your second example. You're just assigning the class  to a variable named , which is why  prints out its class name.
When you are not calling the class (omitting the ), you are not making instances. You are creating another reference to the class.  calls a class to produce an instance.Your  variable is merely a reference to your  class object. That class object has both  and  attributes, so you can reference those. But only  is an actual instance, produced by calling the class.When looking up attributes on an instance, the class is consulted as well. So  does not have the  and  attributes, but its class does.You may want to consult the Python tutorial on classes again to see what the difference is between classes and instances.
To explain the actual error message: The same method is called in the second example, but methods should receive  as their first argument. If you are calling using an instance, it will be passed as the first argument; but here you are using the class, so it should be passed explicitly. You are passing  as the first argument, but that's a string, not an .
(almost) Everything is an object in python, so  is an object of type  and  and  are objects of type  


Answer URL
