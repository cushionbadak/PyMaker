Natural Text
Rubyist writing Python here.  I've got some code that looks kinda like this: is mocked out, and I want to test that the ID gets injected in correctly without hardcoding the entire SQL statement into my test.  In Ruby/RR, I would have done this:But I can't see a way to set up a 'selective mock' like that in unittest.mock, at least without some hairy  logic.  So I tried using the regexp in the assertion instead:But that doesn't work either.  This approach does work, but it's ugly:Better ideas?
EDIT: preemptively requires a matching string
You can just use  :)As described here - https://docs.python.org/3/library/unittest.mock.html#any
I always write my unit tests so they reflect the 'real world'. I don't really know what you want to test except for .I don't know what the  is supposed to do, but I guess it's supposed to create a query object you can call or pass to a connection later?The best way you can test this to take a real world example. Doing something simple like checking if the id occurs in the query is too error prone. I often see people wanting to do magic stuff in their unit tests, this always leads to problems. Keep your unit tests simple and static. In your case you could do:If  directly executes a query in the database, you might want to consider using something like  or  instead. The capital in the  implies you create an object if it's all lowercase it implies you call a function. It's more a naming convention and my opinion, but I'm just throwing it out there. ;-)If the  directly queries you can best patch the method it is calling. For example, if it looks like this:You can use  to prevent the unit test from going to the database:As an extra tip, try to use the  method. The  formatting may go away in the future. See this question for more info.I also cannot help but feel testing string formatting is redundant. If  doesn't work it would mean something is wrong with Python. It would only make sense if you wanted to test custom query building. e.g. inserting strings should be quoted, numbers shouldn't, escape special characters, etc.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#any
