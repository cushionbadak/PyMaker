Natural Text
I am creating a GUI using Jython. I want to program my logic in C. How could I can call a C Function from my Python Code. Sorry if this a newbie question, but I have never worked with linking files except Sparc Assembly from C.
Jython cannot use , or C extension modules (whether built manually, or with Cython, or otherwise).The way to do this is the same way as in Java: Through a JNI bridge.First, you write a C++ wrapper that talks to the so, and uses functions from  to implement functions like this:Next, in Java, you define a  class full of Java wrappers around those C++ wrappers, like this:Finally, in Jython, you can just import the class (which acts like a Python module) from its Java module and use it like any other module:Most of this is standard JNI, but you also have to know things like how to create Jython objects. Ideally, you'll use wrappers for that, so you can just write  or  instead of doing all the , , etc. stuff manually.I don't have any tutorials to recommend. But see jnios for a nice-sized example. The O'Reilly book's Chapter 25. Extending and Embedding Jython seems like it might be a decent primer (although I haven't read it). You'll probably want to read a tutorial on using JNI for Java before trying to tackle Jython.
A different way to solve this problem is to break your single program into two pieces.The GUI program runs in Jython. When it needs to call the C code, it does that by running a worker program.The worker program runs in CPython or PyPy, so it can use any of the usual techniques for talking to C libraries: , , a custom C extension module (maybe using Cython, Boost.Python, SWIG, SIP, â€¦), Weave, etc.For a simple case, where you just need to call one function, pass it a few strings, and get back a string, it's as trivial as this:(Note that there are a few bugs with  in older versions of Jython, especially on OS X and Windows. If you run into a problem, 2.5.4 and 2.7.0, which are currently in RC and beta stages, respectively, have probably fixed it.)If you need to make lots of calls one at a time throughout the life of your program, you'll probably want to keep the worker script running in the background, and use some form of RPC to talk to it. This blog post shows how to do it using the  library.


Answer URL
