Natural Text
I seem to remember that the Python gzip module previously allowed you to read non-gzipped files transparently. This was really useful, as it allowed to read an input file whether or not it was gzipped. You simply didn't have to worry about it.Now,I get an IOError exception (in Python 2.7.5):If anyone has a neat trick, I'd like to hear about it. Yes, I know how to catch the exception, but I find it rather clunky to first read a line, then close the file and open it again.
The best solution for this would be to use something like https://github.com/ahupp/python-magic with libmagic. You simply cannot avoid at least reading a header to identify a file (unless you implicitly trust file extensions)If you're feeling spartan the magic number for identifying gzip(1) files is the first two bytes being 0x1f 0x8b.gzip.open is just a wrapper around GzipFile, you could have a function like this that just returns the correct type of object depending on what the source is without having to open the file twice:
Maybe you're thinking of zless or zgrep, which will open compressed or uncompressed files without complaining.Can you trust that the file name ends in .gz?
Read the first four bytes.  If the first three are 0x1f, 0x8b, 0x08, and if the high three bits of the fourth byte are zeros, then fire up the gzip compression starting with those four bytes.  Otherwise write out the four bytes and continue to read transparently.You should still have the clunky solution to back that up, so that if the gzip read fails nevertheless, then back up and read transparently.  But it should be quite unlikely to have the first four bytes mimic a gzip file so well, but not be a gzip file.
You can iterate over files transparently using fileinput(files, openhook=fileinput.hook_compressed)


Answer URL
https://docs.python.org/3/library/fileinput.html#fileinput.input
