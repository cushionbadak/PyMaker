Natural Text
I'm writing a class in python and I have an attribute that will take a relatively long time to compute, so I only want to do it once.  Also, it will not be needed by every instance of the class, so I don't want to do it by default in .  I'm new to Python, but not to programming.  I can come up with a way to do this pretty easily, but I've found over and over again that the 'Pythonic' way of doing something is often much simpler than what I come up with using my experience in other languages.Is there a 'right' way to do this in Python?
The usual way would be to make the attribute a property and store the value the first time it is calculated
I used to do this how gnibbler suggested, but I eventually got tired of the little housekeeping steps.So I built my own descriptor:Here's how you'd use it:
Python â‰¥ 3.2You should use both  and  decorators:This answer has more detailed examples and also mentions a backport for previous Python versions.Python < 3.2The Python wiki has a cached property decorator (MIT licensed) that can be used like this:Or any implementation mentioned in the others answers that fits your needs.Or the above mentioned backport.

You could try looking into memoization. The way it works is that if you pass in a function the same arguments, it will return the cached result. You can find more information on implementing it in python here.Also, depending on how your code is set up (you say that it is not needed by all instances) you could try to use some sort of flyweight pattern, or lazy-loading.
Here's what I do. This is about as efficient as you can get:Explanation: Basically, I'm just overloading a property method with the computed value. So after the first time you access the property (for that instance),  ceases to be a property and becomes an instance attribute. The advantage of this approach is that a cache hit is as cheap as possible because  is being used as the cache, and there is no instance overhead if the property is not used.
The most simple way of doing this would probably be to just write a method (instead of using an attribute) that wraps around the attribute (getter method). On the first call, this methods calculates, saves and returns the value; later it just returns the saved value.


Answer URL
https://docs.python.org/3/library/functions.html#property
https://docs.python.org/3/library/functools.html#functools.lru_cache
