Natural Text
I am using python unittest module to do a number of tests; however,  it is very repetitive.I have a lot of data that I want to run through the same test over and over, checking if correct. However, I have to define a test for every one.For instance I want to do something similar to this. I know I could do it using a generator (found it in a previous thread here). But are there alternatives, maybe even using a different testing module?Any suggestions would be great.
Sample code for solution suggested by Bill Gribble could look like this:
You may want to consider using the unittest.TestSuite class, which will allow you to dynamically construct a set of unittest.TestCase instances which will get run separately.  Your unittest.TestCase subclass should define just one test method, with the class accepting a construction parameter passing in the value to test against for that particular instance. 
The  library was built to solve exactly what you are asking for [*].For example:And when you run it, you get 4 TestCases instead of just one:Notice that ddt tries to come up with names for the generated TCs.Install it with pip:[*] The same solution for the pythonic  framework () is integrated into the core tool, and is worth switching to  just for this feature alone.
The problem with running assertions in a loop is that, if one of the assertions fails, you don't know which value caused it (in your example, it would fail on , but you don't know that until you debug). On the other hand, repeating  is an even worse idea, because it introduces code duplication.What I do in my test is to create a simple, shortly-named internal function inside the test and call it with different arguments. So your function would look like this:This way, when the assertion fails for , you immediately see it on the stack trace printed by the  module.
In another post I stumbled accrossNose TestsIt is more suited to data driven testing.The above code does the exact same thing as my first post. No imports are needed, just write a python class.You execute the tests by typing: 
Spin-off of this answer, which didn't quite work for me. Where I'm not dealing with large amounts of data, I did need to run same tests with different inputs. The following tests are using  and  methods which I want to customize. The requirement is to run both tests with the same customization.Instantiating  and  myself, bypassing the test loader, resulted in an error because it expected a single method, called .The result was this:
As of Python 3.4 you can use  context manager (documentation). This will allow you to achieve what you want by adding just one statement.Here is you example modified to use 


Answer URL
https://docs.python.org/3/library/unittest.html#unittest.TestCase.subTest
