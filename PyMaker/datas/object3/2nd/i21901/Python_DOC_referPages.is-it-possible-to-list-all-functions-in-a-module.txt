Natural Text
This question already has an answer here:How to list all functions in a Python module?                    15 answers                I defined a .py file in this format:foo.pyI import it from another file:main.pyIs it possible list all functions name, e.g. ?Thanks for your help, I made a class for what I want, pls comment if you have suggestion
The cleanest way to do these things is to use the inspect module. It has a  function that takes a predicate as the second argument. You can use  as the predicate.Now,  will be a list of tuples where the first element is the name of the function and the second element is the function itself.
you can use dir to explore a namespace.Example: loading your foo in shellYou can use getattr to get the associated attribute in foo and find out if it callable.Check the documentation : http://docs.python.org/tutorial/modules.html#the-dir-functionand if you do - "from foo import *" then the names are included in the namespace where you call this. The following brief on introspection in python might help you :http://www.ibm.com/developerworks/library/l-pyint.html
Try using inspect module like below for exmaple if module --> temp.py
Like aaronasterling said, you can use the getmembers functions from the  module to do this.However, this will include functions that have been defined elsewhere, but imported into that module's namespace.If you want to get only the functions that have been defined in that module, use this snippet:
For a wild importyou can use  without a parameter to show objects in the current module's namespace. This will most probably include more than just the content of .In case of an absolute import (which you should prefer by the way) you can pass the module to :Also check the documentation of . As you only wanted functions, you might want to think about using . Hope you don't use that list for non-debugging purposes.
if wanting to list functions of the current module (i.e., not an imported one), you could also do something like this:


Answer URL
