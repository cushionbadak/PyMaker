Natural Text
When implementing a class with multiple properties (like in the toy example below), what is the best way to handle hashing?I guess that the  and  should be consistent, but how to implement a proper hash function that is capable of handling all the properties?I read on this question that tuples are hashable, so I was wondering if something like the example above was sensible. Is it?
 should return the same value for objects that are equal. It also shouldn't change over the lifetime of the object; generally you only implement it for immutable objects.A trivial implementation would be to just . This is always correct, but performs badly.Your solution, returning the hash of a tuple of properties, is good. But note that you don't need to list all properties that you compare in  in the tuple. If some property usually has the same value for inequal objects, just leave it out. Don't make the hash computation any more expensive than it needs to be.Edit: I would recommend against using xor to mix hashes in general. When two different properties have the same value, they will have the same hash, and with xor these will cancel eachother out. Tuples use a more complex calculation to mix hashes, see  in .
It's dangerous to writebecause if your rhs (i.e., ) object evaluates to boolean False, it will never compare as equal to anything!In addition, you might want to double check if  belongs to the class or subclass of . If it doesn't, you'll either get exception  or a false positive (if the other class happens to have the same-named attributes with matching values). So I would recommend to rewrite  as:If by any chance you want an unusually flexible comparison, which compares across unrelated classes as long as attributes match by name, you'd still want to at least avoid  and check that  doesn't have any additional attributes. How you do it depends on the situation (since there's no standard way to find all attributes of an object).
Documentation for The only required property is that objects which compare equal have the same hash value; it is advised to somehow mix together (e.g. using exclusive or) the hash values for the components of the object that also play a part in comparison of objects.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__hash__
