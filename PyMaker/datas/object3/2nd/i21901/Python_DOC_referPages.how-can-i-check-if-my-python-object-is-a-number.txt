Natural Text
This question already has an answer here:What is the most pythonic way to check if an object is a number?                    12 answers                In Java the numeric types all descend from Number so I would useWhat is the python equivalent?
In more recent Python versions (2.6+; in older versions you're pretty much limited to checking for a few hardcoded types), the correct way is to test if your variable is an instance of :This uses ABCs and will work for all build-in number-like classes, and also for all third-party classes if they are worth their salt (registered as subclasses of the  ABC). However, in many cases you shouldn't worry about checking typed manually - Python is duck-typed and mixing somewhat compatible types usually works, yet it will barf an error message when some operation doesn't make sense (), so manually checking this is rarely really needed. It's just bonus, you can add it when finishing this module to avoid pestering others with implementation details.
I think this would work:
Use  from the  module to test  (available since 2.6).Here it is in action with various kinds of numbers and one non-number:This is, of course, contrary to duck typing. If you are more concerned about how an object acts rather than what it is, perform your operations as if you have a number and use exceptions to tell you otherwise.
Sure you can use , but be aware that this is not how Python works. Python is a duck typed language. You should not explicitly check your types. A  will be raised if the incorrect type was passed. So just assume it is an . Don't bother checking.
That's not really how python works. Just use it like you would a number, and if someone passes you something that's not a number, fail. It's the programmer's responsibility to pass in the correct types.
it seems to work


Answer URL
https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex
