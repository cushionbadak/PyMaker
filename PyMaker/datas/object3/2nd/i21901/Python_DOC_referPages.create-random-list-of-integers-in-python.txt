Natural Text
I'd like to create a random list of integers for testing purposes. The distribution of the numbers is not important. The only thing that is counting is time. I know generating random numbers is a time-consuming task, but there must be a better way.Here's my current solution:v2 is faster than v1, but it is not working on such a large scale. It gives the following error:ValueError: sample larger than populationIs there a fast, efficient solution that works at that scale?Some results from the answerAndrew's: 0.000290962934494gnibbler's: 0.0058455221653KennyTM's: 0.00219276118279NumPy came, saw, and conquered.
It is not entirely clear what you want, but I would use numpy.random.randint:which gives on my machine:Note that randint is very different from random.sample (in order for it to work in your case I had to change the 1,000 to 10,000 as one of the commentators pointed out -- if you really want them from 0 to 1,000 you could divide by 10).And if you really don't care what distribution you are getting then it is possible that you either don't understand your problem very well, or random numbers -- with apologies if that sounds rude...
All the random methods end up calling  so the best way is to call it directly:For example, calls . has a bunch of overhead to check the range before returning .NumPy is much faster still of course.
Your question about performance is mootâ€”both functions are very fast. The speed of your code will be determined by what you do with the random numbers.However it's important you understand the difference in behaviour of those two functions. One does random sampling with replacement, the other does random sampling without replacement.
Firstly, you should use  or , not . The upper limit of  is inclusive.For efficiently,  is simply a wrapper of  which calls , so you should just use . Also, use  as the argument to , not .You could useto generate 10,000 numbers in the range using  10 times.(Of course this won't beat NumPy.)But since you don't care about the distribution of numbers, why not just use:?


Answer URL
https://docs.python.org/3/library/random.html
