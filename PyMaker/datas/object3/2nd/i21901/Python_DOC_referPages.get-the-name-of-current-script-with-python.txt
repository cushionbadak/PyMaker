Natural Text
I'm trying to get the name of the Python script that is currently running.For example, I have a script called  and I would like to do something like this inside it:and get: .
Use .  If you want to omit the directory part (which might be present), you can use .
This will print  for ,  for , etc. It's the first argument to . (Note that after py2exe it would be .)
Note that  will give the file where this code resides, which can be imported and different from the main file being interpreted. To get the main file, the special __main__ module can be used:Note that  works in Python 2.7 but not in 3.2, so use the import-as syntax as above to make it portable.
For completeness' sake, I thought it would be worthwhile summarizing the various possible outcomes and supplying references for the exact behaviour of each: is the currently executing file, as detailed in the official documentation: is the pathname of the file from which the module was loaded, if it was loaded from a file. The  attribute may be missing for certain types of modules, such as C modules that are statically linked into the interpreter; for extension modules loaded dynamically from a shared library, it is the pathname of the shared library file.From Python3.4 onwards, per issue 18416,  is always an absolute path, unless the currently executing file is a script that has been executed directly (not via the interpreter with the  command line option) using a relative path. (requires importing ) simply accesses the aforementioned  attribute of the main module, e.g. of the script that was invoked from the command line. (requires importing ) is the script name that was invoked from the command line, and might be an absolute path, as detailed in the official documentation: is the script name (it is operating system dependent whether this is a full pathname or not). If the command was executed using the  command line option to the interpreter,  is set to the string . If no script name was passed to the Python interpreter,  is the empty string.As mentioned in another answer to this question, Python scripts that were converted into stand-alone executable programs via tools such as py2exe or PyInstaller might not display the desired result when using this approach (i.e.  would hold the name of the executable rather than the name of the main Python file within that executable). may be invoked on any of the above in order to extract the actual file name.
The Above answers are good . But I found this method more efficient using above results.This results in actual script file name not a path.
Try this:
The first argument in sys will be the current file name so this will work
Assuming that the filename is , the below snippetorwill output 
For modern Python versions,  should be more idiomatic. Also,  gives you the script name without the  extension.
If you're doing an unusual import (e.g., it's an options file), try:Note that this will return the absolute path to the file.
My fast dirty solution:
 will give you an absolute path ( available as well). will give you a relative path.


Answer URL
https://docs.python.org/3/reference/datamodel.html#index-43
https://docs.python.org/3/whatsnew/3.4.html#other-language-changes
https://docs.python.org/3/library/__main__.html#module-__main__
https://docs.python.org/3/library/sys.html#sys.argv
https://docs.python.org/3/library/os.path.html
https://docs.python.org/3/library/sys.html
