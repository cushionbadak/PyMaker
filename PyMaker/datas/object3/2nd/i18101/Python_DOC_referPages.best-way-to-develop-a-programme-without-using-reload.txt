Natural Text
I see from other discussions that reload is considered an unnecessary operation and a bad way to develop programmes.  People say to use doctest and unittest.  I must be missing something.  To develop a programme I write it in a module, load the module into an eclipse console, experiment in the console by running little samples of code, then I spot an error in the module or decide to change something.  Surely the quickest thing to do is save the module, reload it and carry on working in the console.Is there a better way?      
Here's a contrived example of how you could use doctest and test driven development in comparision with testing by entering code at the console, with a recursive factorial function being used as an example:Console:First attempt:Console:Second attempt:Console:Third attempt:Console:Fourth attempt:Console:In the end, we get the right answer, but at each stage we have to go back to the console and write the same thing. This is alright for a short program like this, but for a program with many functions, and more complex interactions and possibilities to be tested it would take a very long time. Programming is about automating repetitive tasks, and testing is a repetitive task, so it makes sense to automate it. And in Python, tools to do just this are provided for you.Behold - the doctest module: (example taken from the docs)First attempt:First test (just run the program):Then when we finish the program (and at all stages between) we just press one button and that does all our testing for us. If you were working with a team on a bigger project, you could, for instance, write the test data to file and use the failures to see where you need to focus on.And (provided you added all the test cases to the docstring) now you can ship or integrate or whatever the program and it much fewer bugs than it would've if you just tested for the things you thought mattered each time you changed something, rather than the things you thought could possibly ever matter at the start of the development process.Not to mention you now have the basis for your documentation! Running the program in the console, and then entering  will now give you this:You can then use a number of tools (pydoc is one in the standard library) to turn the docstrings into formatted HTML helpfiles.Of course, this is only one of many testing tools you can use with Python. Others include the more powerful unittest module, and the less powerful technique of adding  statements into your code.
Basically instead of trying things out in the console, try things out by writing tests. It's almost the same amount of typing, but repeatable (you can check if things still work after you make changes) and it works as a rudimentary form of documentation.


Answer URL
