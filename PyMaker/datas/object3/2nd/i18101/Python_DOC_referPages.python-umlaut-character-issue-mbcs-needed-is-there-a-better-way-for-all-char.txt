Natural Text
I was having trouble with Python script opening a file which contained an umlaut character. Naturally I thought I could correct this with a unicode  utf8  fix, but not so...I ended up using the mbcs      ( default is  cp1252) Then I wrote this statement of which I wish to write MUCH cleaner,  
You're almost certainly going about this all wrong, as explained in the comments… but if you really do need to do something like this, here's how to simplify it:The general solution to avoid repeating yourself is to use a loop. You've got the same code three times, with the only difference being the , so loop over three encodings instead. (In your case, the third loop didn't pass an  at all, so you do have to know the default value of the parameter, but the docs or  will tell you that.) The only wrinkle is that you apparently don't want to handle exceptions in the third case; the easiest way to do that is to reraise the last exception if they all fail.While we're at it: There's no need to "declare"  up-front the way you do; the  loop is just going to start at 0 and erase whatever you put there. That also means the  at the end is wrong. But there's an easier way to get the length of an iterable in the first place: just feed it into something that consumes generator expressions. A custom  function written in C would be ideal, but people have tested various different Python implementations, and  is almost as fast as the perfect solution, and dead simple, so it's the most common idiom. If this isn't obvious you to, factor it out as a function and call it , and give it a nice docstring and/or comment. Or just  and then you can just call .Anyway, putting it all together:
It’s not entirely clear to me what you want: if you just want to count the lines, ignore the errors! – This is pretty safe, as practically all encodings use the same ASCII compatible line endings (except UTF-16...).And you never get an exception. Done.


Answer URL
