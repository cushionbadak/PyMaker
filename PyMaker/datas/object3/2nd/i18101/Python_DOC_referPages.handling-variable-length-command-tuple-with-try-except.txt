Natural Text
I'm writing a Python 3 script that does tabulation for forestry timber counts.The workers will radio the species, diameter, and height in logs of each tree they mark to the computer operator. The computer operator will then enter a command such as this:which signifies that the program should increment the count of Oak trees of fourteen inches in diameter and two logs in height.However, the workers also sometimes call in more than one of the same type of tree at a time. So the program must also be able to handle this command:which would signify that we're increasing the count by two.The way I have the parser set up is thus:If the program is commanded to store a tree it hasn't stored before, a KeyError will go off, and the handler will set the dict entry instead of increasing it. If the third parameter is omitted, an IndexError will be raised, and the handler will treat it as if the third parameter was 1.Issues occur, however, if we're in both situations at once; the program hasn't heard of Oak trees yet, and the operator hasn't specified a count. KeyError goes off, but then generates an IndexError of its own, and Python doesn't like it when exceptions happen in exception handlers.I suppose the easiest way would be to simply remove one or the other except and have its functionality be done in another way. I'd like to know if there's a more elegant, Pythonic way to do it, though. Is there?
I would do something like this:yieldingSome notes:no error handling here, you should handle the case when a value supposed to be a number isn't or the input is wrong in any other wayinstead of strings, I use tuples as a dictionary index
You could use , which returns 0 rather than a  if the key isn't in the dictionary.Counter Documentation: objects have a dictionary interface except that they return a zero count for missing items instead of raising a Something like this:Same notes apply as in uselpa's answer. Another nice thing with  is that if you want to, e.g., look at weekly counts, you just do something like . works even better if you're starting from a list of commands:From there you can use the  function above to add new trees, or you can start collecting the commands in another text file and then generate a second  object for the next day, the next week, etc.
In the end, the best way was to simply remove the IndexError handler, change cmdtup to a list, and insert the following:


Answer URL
