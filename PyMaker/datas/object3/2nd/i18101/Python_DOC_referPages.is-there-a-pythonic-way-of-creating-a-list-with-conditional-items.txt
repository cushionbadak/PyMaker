Natural Text
I've got this block of code in a real Django function. If certain conditions are met, items are added to the .It's very functional. You know what it does, and that's great...But I've learned to appreciate the beauty of  and  comprehensions.Is there a more Pythonic way of phrasing this construct, perhaps that initialises and populates the array in one blow?
Create a mapping dictionary:Related: Most efficient way of making an if-elif-elif-else statement when the else is done the most?
Not a big improvement, but I'll mention it:Can we do better? I'm skeptical. Clearly there's a need of using another syntax than a list literal, because we no longer have the "1 expression = 1 element in result" invariant.Edit:There's a pattern to our data, and it's a list of (condition, value) pairs. We might try to exploit it using:but this still is a restriction for how you describe your logic, still has the nasty side effect of evaluating all values no matter the condition (unless you throw in a ton of lambdas), and I can't really see it as an improvement over what we've started with.
For this very specific example, I could do:But again, this only  works where the item and method it calls to check have the same name, ie for my exact code. It could be adapted but it's a bit crusty. I'm very open to other solutions!
I don't know why we are appending strings that match the function names, but if this is a general pattern, we can use that.  Functions have a  attribute and I think it always contains what you want in the list.So how about:If I understand the problem correctly, this works just as well for non-member functions as for member functions.EDIT:Okay, let's add a mapping dictionary.  And split out the function names into a tuple or list.You could also just use @hcwhsa's mapping dictionary answer.  The main difference here is I'm suggesting just mapping the exceptions.
In another instance (where a value will be defined but might be None - a Django model's fields in my case), I've found that just adding them and filtering works:If either of those is , They'll be removed from the list. It's a little more intensive than just checking but still fairly easy way of cleaning the output without writing a book.
One option is to have a "sentinel"-style object to take the place of list entries that fail the corresponding condition.  Then a function can be defined to filter out the missing items:With this simple machinery, we come reasonably close to list-comprehension style syntax:


Answer URL
https://docs.python.org/3/library/functions.html#filter
