Natural Text
This question already has an answer here:Why does += behave unexpectedly on lists?                    7 answers                I have this python codeSo, this is because  is  and if I change , I change But when I do:and I wonder what's the difference. I thought  is shorthand for  but obviously there must be a difference.I was even more confused, when I tried the above to strings:So I think the effect of  depends on the object on the left, if it is mutable or not?
The object "on the left" handles the operator (usually, see the r-operator forms); in this case it is an Inplace Operator.10.3.2. Inplace OperatorsMany operations have an “in-place” version. Listed below are functions providing a more primitive access to in-place operators than the usual syntax does; for example, the statement  is equivalent to  ..The actual result is determined by the "x" object and if it handles  (eg. mutated as with lists) or just  (eg. a new result object, as with strings) - the selection of which protocol to use, and what value to return for the assignment, is determined by  itself1.So the shorthand of  is only true for some objects - notably those that are immutable and [only] implement .See How are Python in-place operator functions different than the standard operator functions?1 Semantically the operator.iadd function works about like:
like @BrenBarn said, if the left hand side object is mutable it will preform an in-place operation. Otherwise a new copy will be returned, and because it was copied their id won't match anymore. In the background it goes something analogous to this:EDIT 1:


Answer URL
https://docs.python.org/3/library/operator.html#inplace-operators
https://docs.python.org/3/library/operator.html#inplace-operators
