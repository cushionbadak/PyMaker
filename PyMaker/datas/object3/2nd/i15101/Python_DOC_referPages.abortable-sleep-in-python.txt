Natural Text
I need a  method which can be aborted (as described here or here). My approach is to let a  timeout at the specified duration:After calling  I can now (from another thread) call  to let  terminate before the 10 seconds.Example:Output:    This code is working as expected but I still have some questions:isn't there an easier way to have s.th. likea  which can be aborted?can this be done more elegant? E.g. this way I have to be careful with the  instance which is not bound to an instance of do I have to expect performance issues with high frequency loops like ? How is the wait()-timeout implemented?
I have a wrapper class which basically slaps some sleep semantics on top of an . The nice thing is that you only have to pass around a  object, which you can call  on several times if you like ( is not thread safe though) and that you can  from another thread.Usage example:The above might output something like this:Exactly what you did, but encapsulated in a class.
I'd wrap the sleep/abort function up in a new class:I'd then also supply a  subclass to manage the sharing of the wakeup routine on a per-thread basis:Any other thread with access to this thread can call  to abort the current  (if one is in progress).Using ThreadWithWakeupYou can create threads using the  class, and use it like this:The output of which looks like:Using AbortableSleep on its ownYou can also use the  class on its own, which is handy if you can't use the  class for some reason (maybe you're in the main thread, maybe something else creates the threads for you, etc.):
Due to race conditions, your solution is not always perfectly correct.  You should use a  instead.  Call  immediately after creating it.  When you want to sleep, call  with a timeout, then call  if the  returned true.  To abort the sleep early, call  from a different thread; this will raise  if there is no sleep in progress.Using an event instead is problematic if the other thread calls  at the wrong time (i.e. at any time other than when you are actually waiting on the event).


Answer URL
https://docs.python.org/3/library/threading.html#threading.Semaphore
