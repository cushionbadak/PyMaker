Natural Text
I can't understand difference. Help me to watch this difference. And what about ProcessPoolExecutor, is his behavior the same?
From the docs:If wait is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed. If wait is False then this method will return immediately and the resources associated with the executor will be freed when all pending futures are done executing. Regardless of the value of wait, the entire Python program will not exit until all pending futures are done executing.This covers the first two examples.For the third one, since  adheres to the "context manager" protocol you can use it along the  statement in order to have the  method automatically called for as soon as execution exits the  block.The default is  if you omit the parameter - or if you use it as a context manager, so using it inside the  block is useless no matter the value of .[edit]i edited code. See pls, there are my final questionsYou only call the  method if you want to explicitly release all resources and ensure no new calls to  or  will succeed. If you don't call shutdown (or use  as a context manager), resources may be released only when the entire Python program exits (and it will not exit until all pending futures are done).Calling  with  or using  as a context manager will block until all pending futures are done executing.The only use case I can think of for calling  explicitly is:To give some context, this is the code snippet from the first version of this question:Note that  is redundant - you can use just  as well.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.shutdown
