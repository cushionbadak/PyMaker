Natural Text
I have two, separate RabbitMQ instances.  I'm trying to find the best way to listen to events from both.For example, I can consume events on one with the following:I have a second host, "host2", that I'd like to listen to as well.  I thought about creating two separate threads to do this, but from what I've read, pika isn't thread safe.  Is there a better way?  Or would creating two separate threads, each listening to a different Rabbit instance (host1, and host2) be sufficient?
The answer to "what is the best way" depends heavily on your usage pattern of queues and what you mean by "best". Since I can't comment on questions yet, I'll just try to suggest some possible solutions.In each example I'm going to assume exchange is already declared.ThreadsYou can consume messages from two queues on separate hosts in single process using .You are right - as its own FAQ states,  is not thread safe, but it can be used in multi-threaded manner by creating connections to RabbitMQ hosts per thread. Making this example run in threads using  module looks as follows:I've declared  as a method purely to use  while printing message body. It might as well be a function outside the  class.ProcessesAlternatively, you can always just run one process with consumer code per queue you want to consume events. and then run by:If the work you're doing on messages from queues is CPU-heavy and as long as number of cores in your CPU >= number of consumers, it is generally better to use this approach - unless your queues are empty most of the time and consumers won't utilize this CPU time*.AsyncAnother alternative is to involve some asynchronous framework (for example ) and running whole thing in single thread.You can no longer use  in asynchronous code; fortunately,  has adapter for :This approach would be even better, the more queues you would consume from and the less CPU-bound the work performing by consumers is*.Python 3Since you've mentioned , I've restricted myself to Python 2.x-based solutions, because  is not yet ported.But in case you would want to move to >=3.3, one possible option is to use  with one of AMQP protocol (the protocol you speak in with RabbitMQ) , e.g.  or .* - please note that these are very shallow tips - in most cases choice is not that obvious; what will be the best for you depends on queues "saturation" (messages/time), what work do you do upon receiving these messages, what environment you run your consumers in etc.; there's no way to be sure other than to benchmark all implementations
Below is an example of how I use one rabbitmq instance to listen to 2 queues at the same time:


Answer URL
https://docs.python.org/3/library/asyncio.html
