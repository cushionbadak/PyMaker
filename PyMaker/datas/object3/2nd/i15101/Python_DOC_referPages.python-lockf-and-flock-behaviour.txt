Natural Text
I have read enough posts on stackoverflow regarding the difference b/w  but I am unable to answer the below observation:Why is the behaviour different in the two cases? I know the obvious answer that these are two different locking mechanisms. I am looking for:What actually lockf() or flock() does to file (inode/fd)?As per the demo, are we allowed taking the same lock recursively?I understand the basics of  and stuff so I would prefer to have a technical answer with more insights to operating system level details.OSX 10.9.3, Python: 2.7.5
A nice article about this: On the Brokenness of File LockingIn short:POSIX locks:lockf() most of the time implemented as just an interface of fcntl()fcntl() locks are bound to processes, not file descriptors. If a process has multiple open file descriptors for a particular file, any one of these file descriptors used for acquiring locking will RESET the lock. BSD lock:flock() locks are bound to file descriptors, not processes. FurthermoreA good analysis with tests:Advisory File Locking â€“ My take on POSIX and BSD locksExcerpt of Summary:fcntl and flock style locks are completely orthogonal to each other. Any system providing both(Linux does) will be treating locks obtained through each one of them independently.Both POSIX and BSD locks are automatically released when the process exits or is aborted. Both POSIX and BSD locks are preserved across execve calls except when the process has set FD_CLOEXEC flag forcing the file descriptor to be closed, and not inherited by the new process.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#synchronization-between-processes
