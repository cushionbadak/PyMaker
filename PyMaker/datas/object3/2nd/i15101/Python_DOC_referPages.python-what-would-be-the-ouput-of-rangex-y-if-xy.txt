Natural Text
Let x and y be two integers :  How  such  would be considered in Python ?I tried following code in both python 2.7 and python 3.3:  I thought range(10,3) should be considered as  the list [0,3,6,9], but this portion of code isn't rendering anything.
You have two options:rearrange the input values,write a wrapper function which rearranges them for you:Edit: after thinking about it a bit more, I see; you were trying to do something likebut if you only give two values there is no way to tell the difference between that andTo resolve this ambiguity, Python syntax demands that default-value parameters can only appear after all positional parameters - that is, the second example is valid Python, the first isn't.
The 's signature is range(start, stop[, step]) sets start and stop to 10 and 3, respectively, therefore if you will to provide the step argument, you'll need to provide the start argument:The step's default value is 1 and (quoting the documentation page I linked before)For a positive step, the contents of a range r are determined by the formula r[i] = start + step*i where i >= 0 and r[i] < stop. is empty because r[i] < stop is false from the very beginning (r[0] is 10 + 1*0 = 10 and 10 is greater than 3).
 with just two arguments interprets those arguments as  and . From the  function documentation:Note that  is optional in the second form. By supplying a  that is smaller or equal to  while leaving  at the default , you created an empty range. The documentation includes this case explicitly as one of the examples given:The Python 3 version of the documentation is a little more explicit still:A range object will be empty if  does not meet the value constraint.If you wanted to supply a  value, you have to specify the start:Python refuses to guess here; there are legitimate uses for using variables for both the  and  arguments, where given certain runs of an algorithm the stop value ends up equal or lower than the start; such code expects the  to be empty in such cases.


Answer URL
https://docs.python.org/3/library/stdtypes.html#range
https://docs.python.org/3/library/stdtypes.html#range
