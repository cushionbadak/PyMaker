Natural Text
Would like to define something I'd best call 'function extension' / 'function interface' or 'class of functions' in Python. Haven't seen similar constructs in other languages, but I'm no expert in functional languages like LISP. Considering to change to other language later if this is easier to do, say in Julia.'Function extension' would be a formal way to express that binding few arguments of a function, we end up with a function belonging to a specific 'class of functions'. In my examples below the specific 'class of functions' is a data transformation function (as ), which has a sole argument: .  extends  as binding the  argument we end up with a function which belongs to the the 'class of functions' .A 'class of functions' defines part of the signature like:Then would define functions extending the 'class of functions':So that when binding the additional parameter(s) we end up with a signature matching that of the extended 'class of functions':I'll use these for example, in order to specify types of functions as inputs and outputs of other functions:Find it odd that while in the case of general objects it is relatively easy to define classes/types, in case of functions there is no such obvious construct. Currently I use  comments to specify function types/classes - an idea borrowed from  - ideally would use something more formal.Any suggestions welcome, would be great if I could just call the resulting construct through . Have thought of a class like:But don't like the ununtiutive exec() call. Have also thought of:but I get  when calling . Signaling 'function extension' through class inheritence would be a great way though. My most elaborate plan was to do:So that  and  are natural and valid calls. While the latter actually worked its a bit complicated, and couldn't parallelize calculations as I got errors from  (an smarter alternative to ) saying that .Any suggestions welcome, really. I'm also interested in theoretical considerations and how this is done in other languages.
It's a little hard to see what you're trying to accomplish. Specifically, for these two function definitions:How does  extend ? They don't have the same signature: the "interface" takes a single argument, while the function implementing the interface takes two. That doesn't match what most people would say is an interface.If what you're trying to do is enforce that a given function has the same  arguments and return value as another function, you can accomplish this by inspecting the function's arguments.the inspect module in the stdlib can tell you what arguments a function takes, specifically, Signatures give a nice API for thisfunction annotations allow you to mark up the parameters and return values of a function, this could replace what you're trying to do with the  commentalso see the new proposal on using function annotations for optional typing and mypya decorator is the perfect place to add this kind of checking, as it wraps the function before it executes, lots of people have made type checking decorators (examples: 1, 2, 3)For your  function, see Composing functions in python. You can modify one of those to also do the kind of checking I mentioned above.As far as how other more functional languages do this kind of thing, I'm not sure. I see type classes mentioned in that interface article I linked to above, looks like there's some good info there.If you have more specifics or background on what you're trying to do please update your post!


Answer URL
https://docs.python.org/3/library/inspect.html
https://docs.python.org/3/library/inspect.html#introspecting-callables-with-the-signature-object
https://docs.python.org/3/tutorial/controlflow.html#function-annotations
