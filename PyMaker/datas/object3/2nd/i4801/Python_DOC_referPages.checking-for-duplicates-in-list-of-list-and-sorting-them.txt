Natural Text
I have a table containing:and the first values represented in each list, (5,4,3,2,1) can be said to be an ID of a person. the second values represented (7,3,3,3,3) would be a score. What I'm trying to do is to detect duplicates values in the second column which is in this case is the 3s in the list. Because the 4 lists has 3 as the second value, i now want to sort them based on the first value.In the table, notice that [1,3] has one as the first value hence, it should replace [4,3] position in the table. [2,3] should replace [3,3] in return.I attempted:The code doesn't fulfil the output i wanted and i would appreciate some help on this matter.
You can use  with a key.
You should sort the entire list by the second column, using the first to break ties. This has the advantage of correctly grouping the threes even when the seven is interpersed among them, e.g. something likeIn Python, you can do it with a one-liner:If you want an in-place sort, doAnother neat thing you can do in this situation is to rely on the stability of Python's sorting algorithm. The docs actually suggest doing multiple sorts in complex cases like this, in the reverse order of the keys. Using the functions from  supposedly speeds up the code as well:The first sort will arrange the IDs in the correct order. The second will sort by score, in descending order, leaving the IDs undisturbed for identical scores since the sort is stable.
If you want to leave the list items with non-duplicate second elements untouched, and the ability to deal with the cases where multiple second items can be duplicate, I think you'll need more than the built-in .What my function achieves:Say your list is: It will not touch the items  and , but will sort the remaining items by swapping them based on their second elements. The result will be:Here is the code:TestLet's test on a little bit more complicated :Items that should stay in their places:  and .Items that should be swapped:  and . and Drumroll...


Answer URL
https://docs.python.org/3/howto/sorting.html#sort-stability-and-complex-sorts
https://docs.python.org/3/library/operator.html#operator.itemgetter
