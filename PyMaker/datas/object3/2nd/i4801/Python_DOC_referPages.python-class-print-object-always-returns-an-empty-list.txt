Natural Text
I have the following code:Intuitively, this code should print [1,2,3] or maybe [3]? but definitely not []. I am wondering why is this happening? Although when I use m.lst instead of just m, then it prints [1,2,3]. 
As  inherits from , it already contains internal storage for items that  (and ) would normally add to. When you  it is this internal storage that is shown.In your case you have then overridden  to redirect items to be added to a separate attribute (), meaning that internal storage remains empty.Note that you have not overridden .  Thus:
 doesn't in any way utilize the fact that it's subclassing . Your code would work if  actually had a  attribute that itself was a list, but this is not the case. You need to use the exposed interface of the  object that you inherited from if you want your overridden methods to do things that are picked up by the underlying  object:
If you just want to use a list, you don't need to inherit from , and shouldn't:This works. Of course printing out  will just get you something like , because you haven't told it how you want to be printed. You need to add another method like this:And now you'll print out .If you want to look like a , you still don't inherit from  for that. In most cases, in Python, "looking like a list" is just a matter of duck-typing: you implement all the right methods, and everything just works.However, you might want to consider inheriting from . Then, you just implement about 7 or 8 methods, and you get the whole rest of the 's behavior for free. And you're also providing a way that code that, for whatever reason, needs to explicitly check whether you "act like a list" can do so.So, when should you inherit from ? When you want to use the 's internal storage and implementation as your own.Here's a silly example. To the extent that it has any reason to exist at all, it's reasonable that it should be a  subclass:


Answer URL
https://docs.python.org/3/library/collections.abc.html
