Natural Text
Note: This is not an issue with Visual Studio, but rather with incompatible dll versions. The steps below replicate the problem since running in Visual Studio in debug mode breaks on exceptions being thrown. If you just run, the thrown exception is handled elsewhere and the program works fine. But since I spend a lot of time in debug mode, I would prefer to fix this problem.When debugging, I want to be able to step into modules I have added to my Virtual Environment in Visual Studio. I get a 'library not found' error that I am not able to fix. Here are the steps:In Visual Studio create a new Python Application.Create a virtual environment for that application (Python 3.6 64bit). into your virtual environment. You get the    following output....Add the following line to the top of your .py file:In Visual Studio go to tools > options > python > debugging. Makesure 'Enable debugging of Python standard library' is checkedRun the application. You get the following error:ModuleNotFoundError: No module named 'OpenSSL' You get the following output:...Run the application. You get the following error:The error is thrown in the file named  in . The code line where this is thrown is:Update: I was asked to provide the full backtrace. I modified the code in this way to print it:As before the import line throws the exception but the exception is not caught and the lines in 'except' clause are never executedfrom twilio.rest import Clientupdate 2: I somehow had gotten this to work following @Prateek and @user8212173. But now it is not working again. As both suggested, the problem is that crypto.dll is not there. So I went thru the steps below to add it with no success:I installed Win64 OpenSSL v1.1.0j from https://slproweb.com/products/Win32OpenSSL.html  (pointed to from https://wiki.openssl.org/index.php/Binaries). It does not contain crypto.dll. I then installed crypto.dll from  http://www.dlldownloader.com/crypto-dll/ (as @user8212173 suggested) (there is only a 32 bit version) and followed the instructions. I then got a new error message "ImportError: DLL load failed: %1 is not a valid Win32 application" which means that the crypto.dll I installed has a version conflict (I am running 64bit python on a 64bit computer). I remember installing it from Unofficial Windows Binaries for Python Extension Packages I can't find it there. So where do I get a working 64bit version of crypto.dll?
I searched a lot and could find that you are missing  file. Your code is looking for this dll file and it is unable to find it. Please note this wont be installed by  as this is python library and the code is looking for a dll file. searches for dll file from windows environment path variable.Reference : find_library() in ctypesTo verify I checked.Furthermore you should install  with  module from here OpenSSLOpenSSL installation instructionsThe master sources are maintained in our git repository, which is  accessible over the network and cloned on GitHub, at  https://github.com/openssl/openssl. Bugs and pull patches (issues and  pull requests) should be file on the GitHub repo. Please familiarize  yourself with the license.libcrypto with respect to OpenSSLreference : GitHublibcrypto (with platform specific naming):       Provides general cryptographic and X.509 support needed by SSL/TLS but       not logically part of it.Once you install binaries and check  is available in one of the path strings in your environment variables this issue should be resolved. If not add it into path variable and check.Update:Update since the question has been updated and the issue has recurred.There are architectural changes with OpenSSL 1.1.0 as compared to 1.0.2September 13, 2018 - OpenSSL 1.1.0 and later are quite different from previous releases. Users should install BOTH the 1.0.2 series (LTS) and the 1.1.1 (LTS) series for maximum application compatibility. Developers need to recompile their software to support 1.1.1. See the official OpenSSL release strategy document for more details. â€“ Prateek yesterdayIf you open 1.0.2 from Github you can see  file , the same file is missing in latest version. Also  there is change in  names , they renamed  to You need to post code which makes use of  library in the post. There is no code that explicitly uses asn1crypto in your post. So, not able to reproduce your issue using . Make sure you are using updated libraries too.I would not recommend downloading DLL source from unreliable source like DLLdownloaderIf you are having issues with latest version of  and  its better to downgrade  to  ,I think that would work considering it ships with  file.Good luck!
I tried to reproduce the error on my computer and was successful when I ran the "error-producing" file . Although, I do not have Visual Studio, the error stems from the missing  file. We will deduce this step-by-step. Let's first examine the error causing code snippet in the file :I ran the file:and had a  for the library import:So, I changed the import path forto:On the second run, the missing libcrypto library error appeared: The exception is raised when the dll library named crypto could not be found at C:\Windows\System32 and/or SYSWOW64(for 64-bit)The purpose of  is to find a specified library and return a pathname. The behavior of this method varies with OS as described in the docs. If this method cannot find any packages, it returns .In our case, the search is for  and I couldn't find this file on my computer. So, I downloaded and installed it exactly according to the instructions here. When I checked again:Now I ran  again and got a different :A further investigation into the above error revealed that if I'm using a 32bit DLL with 64bit Python, or vice-versa, then I may get such errors as explained here. So, I installed Python 3.6 32-bit and tried again with . I also installed all the required packages, but this error persisted.Could it be possible that we may require 32-bit binaries for the  package? This answer and this give more information. I realized that Pycryptodome is a regularly maintained package and is preferred over the old  package but can still be installed under . Another point to notice is that one of the requirements for this package is MS Visual Studio 2015 (Community Edition) and the C/C++ compilers and the redistributable only. It could be possible that some C++ compiler files or MS Visual Studio files are missing at present and causing these issues to happen.If you install all the above prerequisites, the  file and the package, I believe this error will be Resolved. You have already installed other required packages  & . Unfortunately, I am restricted to install MS Visual Studio on my computer and so I couldn't test this further.I also ran the  code and it ran successfully for me:


Answer URL
https://docs.python.org/3/library/ctypes.html
