Natural Text
I want to add multiple values in overlapped(same one, i mean) key by using .get()I already searched google with these kewords but they were kinda different problems. So, I'm just looking for new method to solve this. '''dictionary = {}dictionary[key] = dictionary.get(key, {}) + {value}'''but apparently this code is impossible and there's TypeError  +: 'set' and 'set'so I tried to make two dictionary and put default is [] and + [value]but it wasn't work, too...'''for example,key = exercise, study, music, etc...values = exercise : basketball, football , study : science, history, math , muscic : classic etcResult that i want is...{'excercise': {'basketball', 'football'}, 'study': {'science', 'history', 'math'}, 'muscic': {'classic'} ..}'''What should I do?
You're close, but this isn't quite right:Unfortunately,  is not the way you write an empty  (because it already means an empty , and it would be ambiguous); you need  instead.Your  is already, correctly, a .But to union two sets together (that is, to add all the values from one to the other), you need to use , not .So:You can actually make this easier:The  does the  and assigning all in one step. And then we mutate the looked-up-or-created set by calling its  method. Which means we don't need to create a one-element set  just to union with the old one, we can just pass  directly.Alternatively, you can make your dictionary a , and it will automatically (in effect) turn every  into a . Whether this is better or worse depends on whether you have some later code that should look up values and actually fail rather than create empty sets.
First things first, what does the error mean? Basically,  isn't defined for sets. Instead, you want : Switching to  would solve your problem (aside, from as noted by the other answers that  is a dictionary), but you may be interested in . Something like:
 doesn't add the value when it's missing.  does. Also,  is the empty , not the empty  (). So you could just do:but that's actually rather inefficient, because it needs to construct empty s whether or not the key already exists. So the best solution is to use  to handle lazily constructing the new  as needed and only as needed (when the  doesn't exist):


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.setdefault
https://docs.python.org/3/library/collections.html#collections.defaultdict
