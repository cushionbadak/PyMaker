Natural Text
From here:https://docs.python.org/3/library/itertools.html#itertools-recipesI understand the  call. But I don't get: If you are gonna be passing an iterable into  later, why bother wrapping the iterable into an  again? Can't I just do:But it seems that without , it just repeats the same iterator n times. But how does putting this in  change its behavior? 
This grouping takes advantage of the single-pass nature of an iterator (as opposed to a mere iterable, which can be iterated multiple time potentially, and using  on an non-iterator iterable  should return a new, independent iterator. In contrast, calling  on an iterator returns the iterator itself. So here is a simplistic implementation of a zip function that takes only two arguments:This is pretty much how the built-in  works. Now, what if we do the above with a list as the iterable?However, if  is an iterator:Finally, note that repition on a sequence never copies the elements of a sequence, so doing  returns a list with n references to the same iterator, so:Note, they are the same  objects...


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
