Natural Text
CPython automatically compiles and caches all  files into  files in the same directory or a  directory, depending on the version.  How much speed improvement does using these cached files provide?I an not asking about the execution speed of the python code - that question has been answered many times: "there is no difference in execution speed, the  files are only to improve the startup speed." I am asking how much that improvement in startup speed is.
It depends on how complex the modules in question are, how many you're importing, etc.In local tests, I copied  to my local directory, then tested with:to try to nail down the rough end-to-end cost of the  module alone without cached bytecode, then the same without  (so it would create and use bytecode caches). The difference was around 5 ms (36 ms with , then 31 ms without  on second and subsequent runs).For more fine-grained testing, explicitly compiling without invoking any other import machinery using   magic got:That's omitting some of the other  machinery work, just recompiling over and over, and it runs ~3 ms, which seems reasonable. If you're importing a hundred source modules (not entirely unreasonable, counting all the cascading imports the handful of explicit imports trigger), saving 1-5 ms each can make a meaningful difference for short program runs.


Answer URL
https://docs.python.org/3/library/py_compile.html
