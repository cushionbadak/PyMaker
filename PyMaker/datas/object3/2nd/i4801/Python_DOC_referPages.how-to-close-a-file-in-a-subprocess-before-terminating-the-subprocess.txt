Natural Text
I want to make a subprocess(writer.py) that keeps adding "test" to a file('20180309.txt') every second and maintain the subprocess with another python process(starter.py). It works fine, but one thing that bothers me is that  is not closed before terminating the subprocess. I'd like to know if there's a way to close the file object when the subprocess recieves terminate() signal, or if there are other ways to handle this problem.
First, any modern OS will close any (non-shared) files that a process has open when it goes away. You do not have to worry about this.In a more complex application, you might want to worry about partial writes (or parts of any other "transactions" that can't be done atomically), but for simple cases, there's nothing to worry about at all.Meanwhile, the  method in  is not meant for polite shutdown requests. If you want to shut down the child, there are better ways to send it a message. In fact, since the child and parent are both Python, you may be happier using  instead of  in the first place.That being said, on *nix,  happens to send , and  is designed for polite shutdown. If you really want to handle this—and don't care about Windows—read the  library for how to write a signal handler for . From the signal handler, you can set a global "quit next time through the loop" variable. or call  (which I think will raise an exception into the top-level code, but don't quote me on that), or whatever else you want.


Answer URL
https://docs.python.org/3/library/signal.html
