Natural Text
my linter constantly bugs me with unused variable warning, for the following class that I have created:in code, I get the warning everytime I use thisI know that c++ compilers optimize unused variables out, I was wondering if python ever does the same? Therefore remove the lock on data.
The linter should bug you about this.  Because the correct way to manage context is with a context manager.  Put the implementation details of how to acquire and release a lock into  and  respectively.  You should not rely on  and  for this, because  is not reliable.I know that C++ compilers optimize unused variables out, I was wondering if Python ever does the same? Therefore remove the lock on data.Python will not do the same.  There are some peephole optimizations, but nothing so drastic as removing an object from scope entirely.  Once the reference count of an instance falls to zero (i.e. once  name goes out of scope), it should be deleted, but there is no guarantee in the implementation about when this happens and there is not even a guarantee that a custom  will be called at all.  
You are misusing the  method.See the huge warning block in the documentation for :Warning: Due to the precarious circumstances under which  methods are invoked, [...]. In particular: can be invoked when arbitrary code is being executed, including from any arbitrary thread. If  needs to take a lock or invoke any other blocking resource, it may deadlock as the resource may already be taken by the code that gets interrupted to execute . (emphasis mine) can be executed during interpreter shutdown. [...]The correct solution is to implement a context manager and use the  statement to enter and exit it.
for this simple functionthe answer is no: no optimization; disassembling withgives:so  is assigned (...and then not used in any way). you can check that for your code; i'm pretty sure it will be the same.on how to fix your code: i agree with this answer.


Answer URL
https://docs.python.org/3/library/contextlib.html
https://docs.python.org/3/reference/datamodel.html#object.__del__
https://docs.python.org/3/library/stdtypes.html#typecontextmanager
