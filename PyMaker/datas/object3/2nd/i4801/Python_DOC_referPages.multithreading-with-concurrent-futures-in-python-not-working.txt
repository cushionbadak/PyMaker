Natural Text
I'm trying to get multithreading to work in my program. But it never executes my worker function .   is always returning  and the text "function entered" is never printed.  
Concurrency is hard. Luckily, Python's  module manages to nicely decouple the workers (result producers) from the main program (result consumers) via concept of futures. Also, executors (thread pool or process pool) will handle for you all the dirty details of thread/process spawning, synchronizing and joining.After you submit a job to your executor, the future you receive will hold a handle to the result. Non-blocking checking of status is done with  and blocking obtaining of the result with .The exact order in which futures are resolved and results made available is not deterministic (unless you're running some real-time OS), and depends on operating system's thread/process scheduler. Also, since you check for  immediately after you submit a job, it is possible the job will not actually finish by that time. And if your worker function is more complex than in the example, it's highly likely it won't. When I run your example, it finished in ~50% of the time (got  printed couple of times).However, to wait for and iterate over results, in order they become available (not necessarily in order they were submitted), you can use .For example:This outputs:The alternative is to submit all tasks, and then iterate over all futures, doing a blocking result fetch on all, in order they were submitted:but this somewhat defeats the purpose of asynchronous futures. Not entirely, assuming that by the time you enqueue all your 8000 tasks, the first ones are going to finish. But that's a lot of unnecessary assumptions. Use .


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#module-concurrent.futures
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future.done
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future.result
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.as_completed
