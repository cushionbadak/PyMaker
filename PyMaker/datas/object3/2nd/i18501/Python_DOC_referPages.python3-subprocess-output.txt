Natural Text
I'm wanting to run the Linux word count utility wc to determine the number of lines currently in the /var/log/syslog, so I can detect that it's growing.  I've tried various test, and while I get the results back from wc, it includes both the line count as well as the command (e.g., var/log/syslog). So it's returning:   1338 /var/log/syslogBut I only want the line count, so I want to strip off the /var/log/syslog portion, and just keep 1338.I have tried converting it to string from bytestring, and then stripping the result, but no joy.  Same story for converting to string and stripping, decoding, etc - all fail to produce the output I'm looking for.These are some examples of what I get, with 1338 lines in syslog: b'1338 /var/log/syslog\n'1338 /var/log/syslogHere's some test code I've written to try and crack this nut, but no solution:The output from this is:2A stdoutdata: b'1338 /var/log/syslog\n'2B stdoutdata: 1338 /var/log/syslog2C stdoutdata: 1338 /var/log/syslog2D stdoutdata: 1338 /var/log/syslog
I suggest that you use  as it does exactly what you wantâ€”run a command in a shell and get its string output (as opposed to byte string output). Then you can split on whitespace and grab the first element from the returned list of strings.Try this:
To avoid invoking a shell and decoding filenames that might be an arbitrary byte sequence (except ) on *nix, you could pass the file as stdin:Or you could ignore any decoding errors:
Since Python 3.6 you can make  return a  instead of  by giving it an encoding parameter:
Equivalent to Curt J. Sampson's answer is also this one (it's returning a string):from docs:If encoding or errors are specified, or text is true, file objects for  stdin, stdout and stderr are opened in text mode using the specified  encoding and errors or the io.TextIOWrapper default. The  universal_newlines argument is equivalent to text and is provided for  backwards compatibility. By default, file objects are opened in binary  mode.Something similar, but a bit more complex using subprocess.run():as subprocess.check_output() could be equivalent to subprocess.run().


Answer URL
https://docs.python.org/3/library/subprocess.html
