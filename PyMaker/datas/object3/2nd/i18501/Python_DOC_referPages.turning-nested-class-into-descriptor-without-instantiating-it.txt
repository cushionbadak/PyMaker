Natural Text
Note: Python version is 2.7ProblemI want to have {hierarchy of descriptor classes} integrated within {hierarchy of widget classes}, and overriding descriptor behaviour must be as easy as defining nested derived class. Example:Here is my custom descriptor class:Problem is that Python don't want to use  and , while they are attributes of class. It may be seen from this test:So, my  works only when instantiated.What I have tried alreadyDecorating  and  with either  or . No changes in silent section. Good section fails: methods aren't callable. Wat.Adding  and  to class  from outside, as methods bound to . Nothing changed.Code:Using instantiated descriptors. This approach requires 2 symbols: one for descriptor (sub)class and one for descriptor. It also requires instantiating descriptor after subclassing it.Code:More background.I have growing hierarchy of widgets, where some propertries must be tracked for changes, and response to change may be extended in subclassses. So I am trying to create automated approach, with modular machinery. Because keeping relevant variables and methods per each propertry inside actual widgets is just horrible annoying mess.QuestionAre there workarounds to achieve my needs? Or may be I am doing something wrong?
Descriptors require instances, so you cannot achieve exactly what you want. In particular you want  to be, at the same time, both a class and an instance of that class, which is impossible. You must have a way to access the class and the instance separately.It's pretty simple to automatically create the instances with a known naming scheme. For example using a class decorator:Used as:output:An other way to achieve this without explicit decorators is to create a metaclass and have a  base class for all widgets.
As mata says, descriptors needs to be instances. One possible solution would be to use a class decorator or a custom metaclass (in your case more probably a custom metaclass) that would lookup the class namespace for  subclasses and instanciate them. The whole thing smells a bit like overengineering to me but sometimes well you just need that level of complexity. 


Answer URL
