Natural Text
Sorry for such a basic question, I couldn't really find an answer through google that I could understand.What exactly is a python library in laymans terms?  It seems like its something that you download or import and move into a certain folder to add a specific functionality in python?If I download a library for python, does it go in /usr/lib ?Any help would be appreciated I'm really lost on this!
In Python, the term "library" is most commonly used when referring to the Standard Library.  The Standard Library comes with Python and is installed along with it, making its modules reliably available to any Python code.  "Libraries" of code in the more general sense have more specific names in Python.Modular components of code that can be ed into your Python code are referred to as modules.  The Python Standard Library is itself an extensive curated collection of well-documented modules.  Modules consist of Python (and sometimes compiled binary) code; they are packaged into  archives known as packages, along with metadata, installation parameters, test code, etc.Packages are the files which are downloaded and installed by installers.   and, better, , are the two most common package installers.  These are user-friendly command-line utilities.  To install a package, for example , you would doDepending on your operating system, you may want to prefix that command with ; otherwise, I believe you will end up just installing the module for your own use rather than in a system-wide capacity.See the INSTALLATION section below for info on how to get  running.Packages serve to provide a vehicle for installation, testing, usage, and maintenance of the source code which modules consist of.  A complex package may include multiple modules.  Some packages will install command-line utility scripts in e.g.  that use the module code.Packages are usually (if they are mature enough for widespread use) distributed through the Python Package Index.  This is where  goes to find and download the package.If you are looking for a piece of code to do some particular thing, try searching for it on PyPI.  You can also use .  It will search the PyPI database for you and display the results.INSTALLATIONAs mentioned above, there are two different command-line utilities which provide convenient ways to download and install Python packages.   is the better of the two, and requires that you have the  package installed.  , the other utility, is installed as part of .Installing the  packageInstructions on installing  are provided as part of the package documentation on PyPI.  Basically you download the file  and run it:Installation of  is similarly straightforward, once you've got setuptools installed:
In a general sense, a library is a piece of reusable code. Most useful libraries concentrate around a single topic e.g. FTP, crypto, wrappers for APIs, climate models, database access, anything, really.Python ships with a rich standard library, with a set of core task. And there are thousands of libraries for more special purposes, that you can use, which are not included in the standard distribution.(Note that Python terminology distinguishes between module and package.)Once the code has been written, it needs to be packaged and that involves a couple of rules. In fact, python packaging is a quite broad topic, as the breadth of this packaging guide shows.Once the pieces of code are in a somewhat standard form and directory layout, one can call it a package. Some people publish their packages on the python package index:https://pypi.python.org/pypiThe Python Package Index is a repository of software for the Python programming language. There are currently 34150 packages here. From there anybody can install a package with just a single:Now where the code exactly goes is dependent on you system setup. It might go under  or somewhere completely different, if you use some common tools, like virtualenv and virtualenvwrapper.If everything goes well, you will have in a couple of minutes the work of many person-months at your fingertips, as you - once you installed a package - can use the library in you code:
Python libraries are called "modules". These modules provide commonly used functionality in the form of different objects or functions. For example, there is a module that has functions you can use in your code to test if files exist on your hard drive; there are modules that have functions for implementing web-server, or web-browser functionality; there are modules to work with images; there are modules to create charts and graphs; there are modules to parse XML or HTML files; etc.The idea is that there are things lots of people might want to do with python - e.g. read HTML files. Everyone could write python code to do that themselves, but that's time consuming. So smart people write a module that does this in a well-defined - and well-documented - way. Everyone else just has to import that module and use it. Then the low-level work (e.g. reading an HTML file) is done, and you just get to use the HTML file to do whatever clever work you want to do.
I am assuming you are talking about modules, which are a mean of collecting sets of features and/or custom data types. They exist to enrich the Python standard library, which already contains over 200 packages and modules (they can be listed by entering  in a Python interpreter. Modules are meant to be imported and used by your programs. As an FYI, modules that provide related functionality can be grouped together in a package.Pypi, the Python Index Package, is a repository of such third-party modules. Chances are you will find an existing module for whatever task you want to accomplish, just search Pypi for for interests you. You have two options to install them:Download and install them manually (here assuming the module is foo-1.0):Install them with  in a virtualenv environmentThe typical installation path on Unix/Linux is , where prefix is by default . On windows, it the install path is , where prefix is .


Answer URL
