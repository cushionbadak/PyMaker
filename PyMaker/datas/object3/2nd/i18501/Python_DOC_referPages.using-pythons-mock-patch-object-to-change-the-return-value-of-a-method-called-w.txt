Natural Text
Is it possible to mock a return value of a function called within another function I am trying to test? I would like the mocked method (which will be called in many methods I'm testing) to returned my specified variables each time it is called. For example: In the unit test, I would like to use mock to change the return value of  so that any time it is called in , it will return what I defined in 
There are two ways you can do this; with patch and with patch.objectPatch assumes that you are not directly importing the object but that it is being used by the object you are testing as in the followingIf you are directly importing the module to be tested, you can use patch.object as follows:In both cases some_fn will be 'un-mocked' after the test function is complete.Edit:In order to mock multiple functions, just add more decorators to the function and add arguments to take in the extra parametersNote that the closer the decorator is to the function definition, the earlier it is in the parameter list.
This can be done with something like this:Here's a source that you can read: Patching in the wrong place
Let me clarify what you're talking about: you want to test  in a testcase, which calls external method . Instead of calling the actual method, you want to mock the return value.Okay, suppose the above code is in ,  is defined in module . Here is the unittest:If you want to change the return value every time you passed in different arguements,  provides  .


Answer URL
https://docs.python.org/3/library/unittest.mock.html#quick-guide
