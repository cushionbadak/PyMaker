Natural Text
Python bit me today. I'm trying to access an object's attribute inside its  implementation - I can't figure out how. This is what I've tried so far:Testing: with  from  to Output:Any suggestions?
OP, you haven't told us the whole story. You did not just run code like this:You ran code like this:There's a big difference. Why, you ask? Well, your output seems on first glance to indicate that  works, and several comments and answers assumed that it did. Why does it appear to work? Reading the code, there's no way it should work. A closer inspection of the source code reveals that if it had worked, it should have printed , not .I put a breakpoint at the  line in  to examine the exception:For some reason  does not print  like you'd expect, but just , which was why  appeared to work.So we've cleared that up. In the future, please do not leave out code like this because it might be important.All the other answers correctly point out that you have not set the attribute you're attempting to print, and that this is your problem. The answer you had accepted previously, before you accepted this answer istead, prescribed the following solution:While this solution does indeed work, it is not good design. This is because you might want to change the base class at some point, and that base class might might have important side effects when setting and/or getting attributes, or it might not store the attributes in  at all! It is better design to avoid messing around with .The correct solution is to invoke the parent  method, and this was suggested by at least one other answer, though with the wrong syntax for python 2.x. Here's how I'd do it:As you see I'm using  instead of  to look up attributes dynamically. Unlike using  directly, this will call  or , as appropriate.
Because inside the  it is trying to set  which calls ; and it does not set anything but tries to access (and print) , finds nothing and raises the error. Check this:
 works on the class, so when you're over-riding - you need to make it actually set the attribute... otherwise, it'll never exist... eg:So, in your , when you do  that's in effect a no-op.
You never actually set the attribute in your  so of course the object doesn't have it.Of course doing this alone is good for nothing, you usually want to add some functionality oround this like some condition, debug printing, caching or whatever you need.
Prints out  which is correct. You have to set the new value first, because python won't do that for you, like that:Then  should print out Edit:As suggested by @Lauritz you can also use Which invokes the parent function, so if you superclass has already a  function it won't get overridden.


Answer URL
