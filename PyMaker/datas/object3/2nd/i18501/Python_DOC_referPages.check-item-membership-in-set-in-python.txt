Natural Text
Hello I've been coding for a couple of months now and know the basics, but I'm having a set membership problem for which I can't find a solution. I have a list of lists of pairs of integers, and I want to remove the list that have the "a" integer in them. I thought using sets was the easiest way. Bellow is the code:I had also tried using  until I realized that this tested if every element in  in . Thank you!
You want to test if there is no intersection:oror, inversely, that the sets are disjoint:The method forms take any iterable, you don't even have to turn  into a set for that. The following one-liner would work too:Demo:If all you are testing for is one element, then it could be that creating sets is going to cost more in performance than what you gain in testing for membership, and just doing:where  is a short list.You can use the  module to compare pieces of Python code to see what works best for your specific typical list sizes.
Maybe you could use List Comprehension:Edit based on a comment:Well to those curious, what I want to do is; I have a list like the  following: [ [error, [ [group_item_1, group_item_2], [...], [...],  [...] ] ], [more like this previous], [...] ], and I want to get the  item with least error and that doesn't have "a" in group_item_1 or  group_item_2. The lists are already sorted by error. I sorta almost go  it :DThis should do the trick:
Rather than making a = set([3]), why not do the following?
You don't need to use sets here, you can test for membership of elements in lists. You also seem to have , where I think you should have .This code is similar to yours, and should work:However, a shorter, more Pythonic way uses list comprehensions:If you are testing a whether an item is in a much longer list, you should use sets instead for performance.


Answer URL
