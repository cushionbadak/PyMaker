Natural Text
I'm writing a code to categorize the datas, and get the average and standard deviation. Here are the example of my data. As you can see, there are 6 columns. I'm thinking of 3 step calculation here. Categorize these numbers based on 6th column. 6th column is consist of float numbers from 0 ~ n. I hope to generate n sections (or sub matrices, or whatever), like 0~1, 1~2, 2~3 .... n-1 ~ n. The last number should be round up number of last data, because I hope to make sections. For example, if the last number is the 121.2513, the last section should be 120~121 to contain that data. Reallocate the all other numbers of column 1~5, to the their corresponding subsections based on 6th column. If there are no number in specific sections, just print it as 0. There will be n number of subsections. The number of elements in each subsections will be random.Get the average and standard deviation of 3th, 4th, and 5th column for each sub sections, and write to the output file with 'number of elements in subsection, beginning number of subsection, and avg and standard deviation of 3th, 4th, and 5th column' I was trying this with multiple for loops, but it became too complex, and makes error. Is there any other easy way to categorize the data, play with each of the sub section, and print them out in Python? Also, my for loops are not working at all. Any simple example suggestion using this data? 
This task lends itself to the pandas library. (http://pandas.pydata.org/)  From what I understood from your post, you wanted to compute the columnwise means and standard deviations. To compute the rowwise statistics, add the parameter,  to the mean and std functions.In the code below, the example has been saved to "tmp.txt'. The first step loads it; then it is simple to calculate statistics over the dataframe.For more information about pandas, take a look at the quick introduction: http://pandas.pydata.org/pandas-docs/stable/10min.html
I'll assume you have your matrix in a list of lists, and show you how to get started. (However, as I mentioned in a comment, if you had your matrix in a numpy  or , it would all be a lot easier—and faster, too.)If you just have that value as a big multi-line string, you can convert it into a list of list of floats like this:Now, by "categorize these numbers based on 6th column", it sounds you what you want is to group them by the integer value of that column.Python comes with a  function that does most of what you want here, but you have to sort the data first. In Python, sorting and grouping and related functions always let you pass a key function. You don't have to sort and group the 6th column, you can sort and group the whole row, using the 6th column as the key.But actually, you don't want to use the value of the 6th column as a key, you want to use the integer value of the 6th column. For the former, you'd use the  function that comes in the stdlib, but to do something more complicated, you're better off writing a function for it:(If you're doing this repeatedly, you probably want to write a wrapper function that sorts then groups with the same key, so you don't have to repeat yourself, and get it wrong.)What this gives you is an iterator with iterators inside, which is a little hard to print out:… but what you get is:So, each  is the integer the category is grouped on, and each  is all of the rows in that category (in sorted order).(Note that, because  is an iterator, if you  this,  will now be empty.)And that takes care of your first problem, and I think most of your second (I'm not sure exactly what you wanted there).For the third, first you need to iterate over the groups:If you're going to loop over the group multiple times, you want to make a list of it immediately, then loop over that list.For each group, you want to do some statistical stuff to multiple columns. The simplest way to do that is by using a module that takes care of all the math for you. The  module on PyPI is a good bet, especially now that (with slight changes) it's probably going to end up in the standard library for an upcoming Python version.But I'll just show the mean, because that's trivial.So:There's probably a lot that this code doesn't do that you need, but hopefully it's enough to get you started, and to ask more specific questions when you get stuck.
As others have said you might want to look into numpy or pandas, especially if your dataset is huge. But the task is easy to achieve in pure python as well with the right data structures. In this case I'd simply use a defaultdict for the sections, with the key being the 6th column rounded down, mapping to a tuple of lists (or a more sophisticated data structure) in which you can then collect the column values:Now  contains the data in an easily usable format; simply iterate over it and compute the average and standard deviation of the rows you're interested in:Extending this to multiple/different columns and functions should be trivial.


Answer URL
