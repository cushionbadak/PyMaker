Natural Text
Suppose I want to make an empty 3x4 2d array like such.However, using the above code, Meaning,To bypass creating this list with 4 identical references to the same list, I've been doing things like:WhereAnother approach would be to use list comprehensionbut, this still seems a little ugly.Is there a way to make the array 'y' or 'z' where all the references are unique in an elegant format such as in 'x' using multiply on a list?
This is in the official Python Programming FAQ, as How do I create a multidimensional list?.The FAQ suggests three possibilities:Create a list of the desired length, then replace each element in a loop.Use a list comprehension.Use something like a numpy.array instead of a multidimensional list in the first place.I think most Python developers would suggest these in the exact opposite order as they're listed in the FAQ… but nobody would complain about any of them. So:If you find yourself doing this a lot (and not using numpy), you can always wrap it in a function. In fact, this is generally the best way to deal with anything that looks ugly even when you're doing it as pythonically as possible. So:And then it's about as clear as can be: has a function called , which is equivalent to the iterator version of . The docs show some equivalent pure Python code, so it's pretty easy to adapt it to (shallow or deep) copy the object for each rep:I don't think this is more readable—especially if you want to use it at multiple levels:… even if you wrap that in a function that listifies for you:… and if you wrap it in a function that handles multiple dimensions, you've just re-created .
List comprehensions are the usual answer. Not as clean as sequence multiplication, but the best that's available:Note that for a lot of applications where you want a grid of values, you're doing something that numpy ndarrays could do faster and cleaner.


Answer URL
