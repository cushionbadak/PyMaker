Natural Text
Do threads in python self terminate if they are not looping? My google-foo is garbage today apparently. But basically: I have a little thermal printer running on a pi, which is also hosting a webhook for an alexa service. the printer needs to run at the same time the alexa is speaking. Each time the launch function is called it fires off the thread and does its thing. i don't want to block the main program, but is this going to spawn a bunch of forever threads? Or do they just finish their task and then stop? Also this is super brute force. 
From the documentation:  Once the thread’s activity is started, the thread is considered  ‘alive’. It stops being alive when its run() method [or target method]  terminates – either normally, or by raising an unhandled exception.See:  https://docs.python.org/3.7/library/threading.html#threading.Thread.runIn the context of your example, each thread you create will terminate when the  method for that thread completes (or throws an exception). 
From the official documentation on Threading:Once the thread’s activity is started, the thread is considered ‘alive’. It stops being alive when its run() method terminates – either normally, or by raising an unhandled exception. The is_alive() method tests whether the thread is alive.So to answer your question, your Thread objects will terminate when their corresponding  methods terminate. You can use  to determine if the thread's  method has completed. The documentation goes on to discuss the differences between normal threads and Daemon threads (which do have a difference in termination strategies) but that doesn't seem applicable with the example you posted.


Answer URL
https://docs.python.org/3/library/threading.html#thread-objects
