Natural Text
The library I'm writing makes heavy use of metaclasses. As an example, here is a basic singleton implementation:This works perfectly fine, but problems arise when multiple inheritance is used and the other class also has a metaclass. Metaclasses are fairly common in the standard library; the most notable is . A naive attempt to make an abstract singleton fails:The workaround is easy enough - create a new metaclass that inherits from  and  - but it's really annoying for anyone who wants to use my library.What's the best way to deal with this problem?Some of my ideas:Since abstract classes are fairly common, I could make  a subclass of .I could implement  in my library for the user's convenience.Since any callable can be used as a metaclass, I could implement a function that automatically merges the metaclasses of all parent classes. (The usage would be like )In the spirit of "explicit is better than implicit", I could do nothing and let the user sort out the metaclass conflicts.
Since all the information about the needed metaclasses and what needs to be combined is already present in the base classes, and those are passed to the metaclass call, it is possible to have a callable that will inspect all the bases and their used metaclasses, and dynamically create a combining metaclass. The  module have some callables that otherwise make it easy to pick the correct metaclass for a set of base classes. So, the function bellow should suffice to your needs, if all your used metaclasses are combinable in an arbitrary order:I've tested this with this sequence in the interactive interpreter, and it worked that far:


Answer URL
https://docs.python.org/3/library/abc.html#abc.ABCMeta
