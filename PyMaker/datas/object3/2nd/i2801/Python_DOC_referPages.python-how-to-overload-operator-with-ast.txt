Natural Text
My problem is to redefine -operator evaluating expression with ast.I have a list of expressions and it simple to resolve with eval():But I like to redefine the -operator (addition) for list and dict like this:regular result with eval is [1, 2, 3, 4, 5, 6]but I'd like to have[5, 7, 9] like it is in R-language.The same should work also for dictionaries like this:I'd like to have{'a': 4, 'b': 6}In short words, I think to replace ordinary add function, that when operands are list or dict correct actions.I tried to use  and  but without success. Someone can help me?
You cannot overload the  methods of builtin classes (like  and ), even with the  module. You can, however, rewrite all additions like  to a function call like .This is, in essence, a 3-step process:Parse the input expression with .Use a  to rewrite all additions to function calls.Parse the source code of your custom addition function and add it to the abstract syntax tree obtained in step 1.CodeCaveatsThe addition function will be added to the global scope with the name  - it is accessible like any other global function and can possibly be overwritten, shadowed, deleted, or otherwise tampered with.
Make your own list class and define the addition operator on it:Then you can do this:
starting from suggestion of Aran-Fey and reading something from this link I wrote a more readable code to resolve the problemThanks to all people helped me


Answer URL
https://docs.python.org/3/library/ast.html#ast.parse
https://docs.python.org/3/library/ast.html#ast.NodeTransformer
