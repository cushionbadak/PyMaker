Natural Text
Output is: 1. I want to know how to use (syntax) all these methods/attributes/functions for my given q1. (I don't know what is attribute/function/method? I just typed them for keyword match)Here I observe two categories of methods: one with double underscore at both ends and other with none. Example,  and . What is the basic different between these two subcategories? I just want to know is there a general terminology that how to use these methods? For instance, do I have to use  for which methods? and how to use them? Please, give some examples. For example,  is equal function. I want to check if  q1 is equal to 5. My code is:Output is: Looks like I didn't use it properly. Your answer going to help me to know how to use methods/attributes/functions defined under any given class.  
I'll give a high level answer to your questions but I recommend to take a look at the Python documentation to get a more in-depth answer.1) There are essentially two types of attributes an object can have. Objects can have  that are assigned on a per object basis and  that all instances of that object have access to.In this example, every Employee instance created has instance attributes  and  which are specific to that instance, but notice how every Employee instance has access to the class attribute  which is set to  for all Employees.A  is some code that can be called by it's name, whereas a  is some code that can be called by it's name that is associated with an object. There is also an  which accepts the  argument as it's first parameterNotice how the function  is just some code that we could call by name. Also, notice how the method  is bound to our class object and the instance method  is bound to an instance of our object.  is the same as 2) Running  on an object returns a list of all of the object's attributes. Some attributes are considered special attributes that are surrounded by double underscores. Some attributes are callable which we can determine by passing the attribute to the built-in function  which will return  if the attribute is callable,  otherwise.Attributes without the surrounding double underscores are also attributes and methods can be attributes too.  gets called when you run the  built-in function which returns the absolute value of the object passed-in.  is a method that returns the number of bits which represent the passed-in object. And yes, you access these attributes with the . (dot) syntax.3) Lastly, we can define an object that implements some special methods that get used by Python when we run specific actions such as membership testing and getting the length of a collection. I'll show some basic examples:Give it a try:I hope this helped!


Answer URL
https://docs.python.org/3/
https://docs.python.org/3/reference/datamodel.html
