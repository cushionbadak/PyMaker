Natural Text
I use Python 2.7 and I know that I can write this:I want to provide a convenience helper which does both. The usage of this helper should  look like this:Now AB() should do both: Create context A() and create context B().I have no clue how to write this convenience helper
Don't re-invent the wheel; this is not as simple as it looks.Context managers are treated as a stack, and should be exited in reverse order in which they are entered, for example. If an exception occurred, this order matters, as any context manager could suppress the exception, at which point the remaining managers will not even get notified of this. The  method is also permitted to raise a different exception, and other context managers then should be able to handle that new exception. Next, successfully creating  means it should be notified if  failed with an exception.Now, if all you want to do is create a fixed number of context managers you know up front, just use the  decorator on a generator function:then use that as:If you need to handle a variable number of context managers, then don't build your own implementation; use the standard library  implementation instead:The  then takes care of correct nesting of the context managers, handling exiting correctly, in order, and with the correct passing of exceptions (including not passing the exception on when suppressed, and passing on new-ly raised exceptions).If you feel the two lines (, and separate calls to ) are too tedious, you can use a separate -decorated generator function:then use  like this:For Python 2, install the  package, and use the following imports:This lets you avoid reinventing this wheel on Python 2 too.Whatever you do, do not use ; this was removed from the library in Python 3 for very good reasons; it too did not implement handling entering and exiting of nested contexts correctly.


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack
https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager
