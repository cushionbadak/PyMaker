Natural Text
I have the following point class:I want to make 'points' iterable so that the following is possible:If you see my commented code, that is what I attempted but it says TypeError: iter() returned non-iterator of type 'Point'. Any ideas on how to correctly do this?
tl;dr:To make something iterable, you need your  method to return an iterator.You can't just , unless  is already an iterator (which means it has a  method). But you don't want  to be an iterator, you want it to be iterable over and over.You can't  then , for two reasons. First, after you , your function is done; any code that happens after that never gets run. Second, you can't call  on an . (Also, there's no reason to call  on an .)You could fix that last set of problems by creating an iterable out of each , like a single-element list, iterating that iterable, and then delegating to it with  instead of . Using  or  in a function makes it a generator function, and the generators created by generated functions are iterators:â€¦ but this is kind of silly. Once we know we want a generator, we can just  the values we want to be iterated. Hence the code at the top.Alternatively, you could explicitly create a single-element iterables for both elements and chain them together and return that:But that's also silly. Chaining two iterators over single-element lists is the same as just iterating a two-element list:Finally, rather than relying on a generator, list iterator, , or other iterator type that comes with Python, you can always write one explicitly:
You can use :Output:
You should implement a special  method, which should return an iterator. Add something like
Your  method should yield x and y valuesWith this, you get the following output


Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
