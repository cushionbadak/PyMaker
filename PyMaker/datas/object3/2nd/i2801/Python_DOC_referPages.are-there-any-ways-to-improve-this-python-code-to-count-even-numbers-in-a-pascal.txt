Natural Text
This is a piece of code I wrote to count how many even numbers there are in the first 1023 rows of the pascal triangle. However, I feel like it may need to be improved, especially the function next_row.
For starter you should avoid both a  loop and an iteration over indices while reading the content of an array. Watch the loop like a native talk to get more insight. In your case, since you are interested in interating over consecutive values at once, you may have a look into the  recipe.Second, instead of patching your row after the computation of all central elements, you can provide a bigger row to start your computation from by adding 0 to both sides. And to avoid resizing lists in doing so, you can use  for that.Lastly, to get the 1023 first rows, you may want to provide a generator that gives an endless stream of rows from the pascal triangle and cut that generator short after 1023 rows using .Revised code:
IMHO your code is OK, I would propose just usinginstead of PSIf you instead use You'll see that the results do not change, as suggested by @John Coleman, it works. But the Pascal triangle degenerates into a collection of 0s and 1s, if you print it out.In this case, you can simplify count_even:
Just making your code (first two functions) slightly less verbose using list comprehensions. By doing so, you avoid the need of initializing  and an empty list  and the  loop to keep track of the . In your  function, you can also use the following  provided  is an array (In your code it's a list).Rest I kept the same.
To make the code more readable and also more compact, I suggest you the following solution with comments, f-strings and comprehensions (instead of classic for loops). The main idea is to store the content of each line, the total count of element in each line and the count of even elements in each line inside 3 lists. This way you keep all values of the Pascal triangle in a list, if needed later:  


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/itertools.html#itertools.chain
https://docs.python.org/3/library/itertools.html#itertools.islice
