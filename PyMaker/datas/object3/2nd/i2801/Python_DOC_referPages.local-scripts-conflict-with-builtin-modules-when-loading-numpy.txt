Natural Text
There are many posts about relative/absolute imports issues, and most of them are about Python 2 and/or importing submodules. This is not my case: I am using Python 3, so absolute import is the default;(I have also reproduced this issue with Python 2);I am not trying to import a submodule from within another submodule, or any other complicated situation. I am just trying to  in a script.My problem is simple:where  just contains , and  contains  (intentionally invalid).In that case, running  causes an error, due to NumPy seemingly not being able to import the standard  module:I am relatively inexperienced with Python, but this looks like a bug to me. I thought statements like  in Python 3 behaved as absolute imports; how can a local file conflict with a standard module? Am I doing something wrong?To clarify, what I find surprising is that NumPy is unable to load the standard math module with , because I have a file in my local folder named . Note that I never try to import that module myself.EDITThis seems to be an issue specific to  (reproduced with both Anaconda and Miniconda). I am using Anaconda 5.2.0 (on OSX 10.13.6), and people in comments have been able to reproduce with different versions of python/anaconda, and different systems.I was able to reproduce this issue with:Anaconda3 v5.2.0, using python 3.4, 3.5, 3.6 and 3.7, within a  environment, or simply using the default binaries (ie ).Miniconda2, and Miniconda3 (manual install of  required), again either within or outside a  environment.A clean Homebrew install .In all cases, it looks like the builtin-modules might be incomplete:REPRODUCE THIS ISSUEMake sure you have a version of Python that can import numpy. Open a terminal and type:
"Absolute import" does not mean "standard library import". It means that  always tries to import the  module, rather than the old behavior of trying  first if the import occurs inside a package. It does not mean that Python will skip non-stdlib entries on  when figuring out where the  module is. In your situation, by the rules of the Python import system, your  is the  module.The tutorial link you found with the lineWhen a module named spam is imported, the interpreter first searches for a built-in module with that name.is referring to modules that are directly compiled into the Python executable, like . Such modules say  in their :You can see the names of all such modules in . For me, those names are isn't built-in in that sense.


Answer URL
https://docs.python.org/3/library/sys.html#sys.builtin_module_names
https://docs.python.org/3/tutorial/modules.html#the-module-search-path
