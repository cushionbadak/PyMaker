Natural Text
What I mean by "deterministic time"?  For example AWS offer a service "AWS Lambda". The process started as lambda function  has time limit, after that lambda function will stop execution and will assume that task was finished with error. And example task - send data to http endpoint. Depending of a network connection to http endpoint, or other factors, process of sending data can take a long time. If I need to send the same data to the many endpoints, then full process time will take  times . Which increase a chance that lambda function will be stopped before all data will be send to all endpoints.To solve this I need to send data to different endpoints in parallel mode using threads.The problem with threads - started thread can't be stopped. If http request will take more time than it dedicated by lambda function time limit, lambda function will be aborted and return error. So I need to use timeout with http request, to abort it, if it take more time than expected.If http request will be canceled by timeout or endpoint will return error, I need to save not processed data somewhere to not lost the data. The time needed to save unprocessed data can be predicted, because I control the storage where data will be saved.And the last part that consume time - procedure or loop where threads are scheduled . If there is only one endpoint or small number of them then the consumed time will be small. And there is no necessary to control this. But if I have deal with many endpoints, I have to take this into account.So basically full time will consists of:scheduling threadshttp request executionsaving unprocessed dataThere is example of how I can manage time using threadsI was thinking of how I can use  library instead of threads, to do the same thing. Function  the same as in previous code snipped.Because request library is not async code I use  to create future object. The main problems I have is that  is not executed when the thread that started but executor done it's job. But only when the futures will be "processed" by  expression. Basically I seeking the way to start execute asyncio future, like  start execute threads, and not wait for  expression to call . If you have other ideas how to write python code that will work with threads or coroutines and will complete in deterministic time. Please share it, I will be glad to read them.And other question. If thread or future done its job, it can return result, that I can use in , for example to remove message from queue by id returned in result. But if thread or future was canceled, I don't have result. And I have to use  pass in done_callback additional data, that can help me to understand for what data this callback was called. If passed data are small this is not a problem. If data will be big, I need to put data in array/list/dictionary and pass in callback only index of array or put "full data: in callback.Can I somehow get access to variable that was passed to future/thread, from , that was triggered on canceled future/thread?
You can use  to wait for a future (or multiple futures, when combined with ) and cancel them in case of a timeout. Unlike threads, asyncio supports cancellation, so you can cancel a task whenever you feel like it, and it will be cancelled at the first blocking call it makes (typically a network call).Note that for this to work, you should be using asyncio-native libraries such as  for HTTP. Trying to combine  with asyncio using  will appear to work for simple tasks, but it will not bring you the benefits of using asyncio, such as being able to spawn a massive number of tasks without encumbering the OS, or the possibility of cancellation.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.wait_for
