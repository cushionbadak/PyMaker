Natural Text
I'm new to python so I am building a simple program to parse YAML to JSON and JSON to YAML. The  converts YAML to JSON on a single line, but a JSON validator says it is correct.This is my code so far:An example of the original YAML vs. the new YAMLOriginal:New:It doesn't look like its decoding all of the JSON so I'm not sure where I should go next...
Your file is losing its formatting because the original  routineby default writes all leaf nodes in YAML flow-style, whereas your input is block styleall the way.You are also losing the order of the keys, which is first because the JSON parseruses dict, and second because  sorts the output. If you look at your intermediate JSON you already see that the key order isgone at that point. To preserve that, use the new API to load your YAMLand have a special JSON encoder as a replacement for dump that canhandle the subclasses of  in which the YAML is loaded similar tothis example from the standard Python doc.Assuming your YAML is stored in :which gives:You see that your JSON has the appropriate key order, which we alsoneed to preserve on loading. You can do that without subclassinganything, by specifying the loading of JSON objects into the subclass of, that the YAML parser is using internally, by providing.Which outputs:And I hope that that is similar enough to your original input to be acceptable.Notes:When using the new API I tend to use  as the name of theinstance of , instead of . That however masks the use of  because theerror class is not an attribute of If you are developing this kind of stuff, I can recommend removingat least the user input from the actual functionality. It should betrivial to write your  and  to call  resp..Any comments in your original YAML file will be lost, althoughruamel.yaml can load them. JSON originally did allow comments, but it isnot in the specification and no  parsers that I know can output comments.Since your real file has literal block scalars you have to use some magic to get those back.Include the following functions that walk a tree, recursing into dict values and list elements and converting any line with an embedded newline to a type that gets output to YAML as a literal blocks style scalar in place (hence no return value):And then doafter you load the data from JSON. With all of the above you should have only one line that differs in your  file.


Answer URL
https://docs.python.org/3/library/json.html#json.JSONEncoder.default
