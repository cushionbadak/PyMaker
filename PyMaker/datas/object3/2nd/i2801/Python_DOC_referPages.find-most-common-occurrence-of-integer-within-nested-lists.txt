Natural Text
I want to find the integer that occurs most commonly within a nested list, and return the integer along with its number of occurrences (and multiple integers and their occurrences where multiple integers occur the same number of times). The data is currently in the following form:Therefore, the desired output would be , number 3 occurred 3 times in the fifth nested list, and number 2 occurred 3 times in the sixth nested list.Neither the list nor the lists within the list are of fixed length. Therefore a program that solves this for variable lengths would be greatly appreciated!I couldn't find a similar question directly on point.Thanks!
You can use  to count the occurrence of elements in each list and then, sort the resulting list based on occurrence in reverse order, then group the results (using ) to get all results with same maximum value
I used a slightly more complicated list for testing: some values repeated twice, some 3 times, appearing in the same and in different sublists.We use a Counter in each sublist, and keep a dictionary of the highest count we see for each value. At the end, we build the output list, keeping only the values that were repeated the highest number of times in each line.I like , so I was curious to compare @Sunitha's solution with this one.This solution:@Sunitha's solution with more use of itertools:which is just a little bit slower.
If you're interested in doing it using pure Python, then there is the following way:Output:Another suggestion would be the following:Output:
You can use , split into 3 steps:Convert your lists into  objects via .Calculate the count of the most common value(s) via .Use a list comprehension to filter  objects derived from your sublists.Here's a demo.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
