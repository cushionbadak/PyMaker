Natural Text
What must I do to use my objects of a custom type as keys in a Python dictionary (where I don't want the "object id" to act as the key) , e.g. I'd want to use MyThing's as keys that are considered the same if name and location are the same.From C#/Java I'm used to having to override and provide an equals and hashcode method, and promise not to mutate anything the hashcode depends on.What must I do in Python to accomplish this ? Should I even ? (In a simple case, like here, perhaps it'd be better to just place a (name,location) tuple as key - but consider I'd want the key to be an object)
You need to add 2 methods, note  and  :The Python dict documentation defines these requirements on key objects, i.e. they must be hashable.
An alternative in Python 2.6 or above is to use  -- it saves you writing any special methods:
You override  if you want special hash-semantics, and  or  in order to make your class usable as a key. Objects who compare equal need to have the same hash value.Python expects  to return an integer, returning  is not recommended :) User defined classes have  by default that calls , as you noted.There is some extra tips from the documentation.:Classes which inherit a   method from a parent class but change  the meaning of  or   such that the hash value returned is  no longer appropriate (e.g. by  switching to a value-based concept of  equality instead of the default  identity based equality) can  explicitly flag themselves as being  unhashable by setting   in the class definition. Doing so  means that not only will instances of  the class raise an appropriate  TypeError when a program attempts to  retrieve their hash value, but they  will also be correctly identified as  unhashable when checking    (unlike classes which define their own   to explicitly raise TypeError).


Answer URL
https://docs.python.org/3/glossary.html#term-hashable
https://docs.python.org/3/library/stdtypes.html#mapping-types-dict
https://docs.python.org/3/glossary.html#term-hashable
