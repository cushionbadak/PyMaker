Natural Text
If I define an abstract class with an abstract method:I can't instantiate it (as expected):But I can call its abstract method with no errors.Is this behavior documented somewhere ?Tested on Python 3.6 and 3.7.
Nothing is explicit about that.Simply the documentation of a the  decorator says:A class that has a metaclass derived from ABCMeta cannot be instantiated unless all of its abstract methods and properties are overridden.And PEP 3119 says:A class containing at least one method declared with this decorator that hasn't been overridden yet cannot be instantiated.and laterImplementation: The  decorator sets the function attribute  to the value True. The  method computes the type attribute  as the set of all method names that have an  attribute whose value is true. It does this by combining the  attributes of the base classes, adding the names of all methods in the new class dict that have a true  attribute, and removing the names of all methods in the new class dict that don't have a true  attribute. If the resulting  set is non-empty, the class is considered abstract, and attempts to instantiate it will raise .My interpretation of the implementation part is that  never prevents the method to be called but only say that that class cannot be instantiated and that a subclass will still be abstract unless it overrides all of its abstract methods.So I would not say that it is by design, but it is at least an assumed side effect.
 is a  and by property a class method can be called directly by the class itself.By doing   you are not instantiating the class , rather you are just calling the function  on class .
Subclassing  indicates that class  cannot be instantiated directly.The  decorator forces a check on any subclass of  during type/name resolution. If  does not implement the decorated method, then an exception is raised.Once type/name resolution is passed, the abstractmethod decorator does not prevent you from calling the method. After all, you aren't able to call the method without an instance, unless it is a class method.By decorating  with both  and  you, the developer, specify that  is safe to call without instantiating the class, but that anyone who subclasses  must implement an overriding method to preserve that behaviour.


Answer URL
https://docs.python.org/3/library/functions.html#classmethod
