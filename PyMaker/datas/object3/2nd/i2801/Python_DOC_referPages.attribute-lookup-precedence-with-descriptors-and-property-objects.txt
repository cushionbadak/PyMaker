Natural Text
I was taking a look into descriptors and how they are the mechanism used behind properties and functions. I'm a bit confused on how attributes are looked up when we're implementing a descriptor vs using properties.The output is:This makes sense because attribute lookup order is:data descriptorsinstance attributes in non-data descriptorsSince properties really just implement descriptors, I'm wondering why this order of attribute lookup doesn't seem to be respected. See the following:The output is:I was expecting since the property object, , is really just a non data descriptor, that the instance attribute , would take precedence.Also, functions are implemented as non-data descriptors as well, and this order of attribute lookup is respected:The output is:Can anyone explain why it's different with property objects?
The trick lies in the descriptor protocol here:If an instance’s dictionary has an entry with the same name as a data descriptor, the data descriptor takes precedence.If an instance’s dictionary has an entry with the same name as a non-data descriptor, the dictionary entry takes precedence.This is a data descriptor, because the  object returned by the decorator always defines , even if you don't define the setter (then  will raise an , see code here).Thus, the data descriptor takes precedence.Since the other examples already behave like you expect, this should be enough to complete your understanding.
@spectras already answered your question. I just want to give additional method to check on descriptor:So, @property always is data descriptor even you don't define . In that case, attribute assignment will raise 


Answer URL
https://docs.python.org/3/howto/descriptor.html#descriptor-protocol
