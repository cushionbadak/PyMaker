Natural Text
I just started programming in Python, and there's something OOP-related that I'm not quite clear on. So in Python, you can create and assign value to a new variable without needing to first declare it. So with that, is there any difference between creating and assigning a new variable for self (eg. ) inside a function (eg. ) vs. creating and assigning a new private member variable? It seems to me like there is no difference at all.
There is in fact a difference between those two variables:Since  is defined in  instead of an individual member-function like , you can change it for all instances at once like this:This will not work for  since you define it individually per instance.Note though, that changing  on an instance will not change it for everyone else, it will instead put a local override into the object itself:
It seems to me like there is no difference at all.That is correct.But remember that Python does not have 'private' members. That is only a convention.
The difference between  and  is a matter of convention. And class or member variable prefixed by one  indicates to a developer "don't use this unless you know what you're doing." Private is a SLIGHTLY different case, however: they require two  and they cannot be suffixed by more than one . Here are the docs:“Private” instance variables that cannot be accessed except from inside an object don’t exist in Python. However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g. _spam) should be treated as a non-public part of the API (whether it is a function, a method or a data member). It should be considered an implementation detail and subject to change without notice.Name mangling is an important part of Python inheritence. It allows classes to protect API calls from accidental manipulation of descendants (see above docs). However, if necessary you can still access them via . Eg:
There is no difference if the variable is declared under  of within the .  Both methods accomplish the same thing.  However, this is slight a twist if the variable (e.g. ) is declared from a method other than .  Usingcreates a variable within the object that is not part of the default class.  You can do this, but it is not good programming practice for python.  
There is a difference. Consider following example:This will return:But, following code:will returnThis leads to conclusion that  will be accessible even if  is not instantiated, while  will not be.


Answer URL
https://docs.python.org/3/tutorial/classes.html#private-variables
https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables
