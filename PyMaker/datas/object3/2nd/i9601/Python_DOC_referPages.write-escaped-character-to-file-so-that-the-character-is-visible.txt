Natural Text
I want to write "\t" to a file. Not a "tab character", but literally "\t".How do I do this? It has been driving me crazy for more than an hour; everything I try produces an actual "tab character" (empty space).Why would I want this? Because I'm generating a config file with a ConfigParser() which also includes some delimiters, and I want that file to be human-readable. I do not consider empty space readable.EDIT: sorry, the problem was not clear: I want to do this for variables that contain strings. So writing "\\t" is not an option. I must write the value of a variable containing an escaped character to a file in a manner ideologically equivalent to:without changing the definition of  (though operations on  are OK)It seems impossible to change  into "\\t" after it has been defined as "\t".
You need to escape the backslash so it won't be interpreted as a special character:EDIT: It looks like your best option will be to use python's excellent  function:Note:  will be unchanged, since strings are immutable in pythonEDIT 2:Looks like converting to a raw string will take care of escapeing all escaped characters for you:
Escape it.Instead of writing  write 
Lets assume v is 'foo'.You need the escape your single backslash.returns:
https://docs.python.org/3/library/functions.html#repr
I've found a decoder workaround!using the encoder one can introduce the extra "\" to make a tuple . Then deconstruct the byte-like string in the tuple using another decoder that does not remove the "\", like .


Answer URL
https://docs.python.org/3/library/functions.html#repr
