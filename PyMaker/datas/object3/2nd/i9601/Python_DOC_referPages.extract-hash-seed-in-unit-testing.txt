Natural Text
I need to get the random hash seed used by python to replicate failing unittests.If PYTHONHASHSEED is set to a non-zero integer,  provides it reliably:However, if hashing is randomised, it only states that a seed is used, not which:The information in  never includes data depending on the seed. With the hash function since python3.4, it seems also unfeasible to try and reconstruct the seed from given hashes.Context: When fine tuning an algorithm, we've seen heisenbugs that depend on set/dict iteration order. Replicating them requires testing seeds, at worst all 4294967295, but even our average of ~100 tests is quite lengthy.We have considered always externally setting PYTHONHASHSEED to random but known values, but would like to avoid this extra layer.
No, the random value is assigned to the  field of the  union, but this is never exposed to Python code. That's because the number of possible values is far greater than what setting  can produce.When you don't set  or set it to , Python generates a random 24-byte value to use as the seed.  If you set  to an integer then that number is passed through a linear congruential generator to produce the actual seed (see the  function). The problem is that  is limited to 4 bytes only. There are 256 ** 20 times more possible seed values than you could set via  alone. You can access the internal hash value in the  struct using :However, you can't actually do anything with this information.  You can't set  in a new Python process as doing so would break most dictionary keys set before you could do so from Python code (Python internals rely heavily on dictionaries), and your chances of the hash being equal to one of the 256**4 possible LCG values is vanishingly small. Your idea to set  to a known value everywhere is a far more feasible approach. 


Answer URL
https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED
https://docs.python.org/3/library/sys.html#sys.flags
https://docs.python.org/3/library/sys.html#sys.hash_info
