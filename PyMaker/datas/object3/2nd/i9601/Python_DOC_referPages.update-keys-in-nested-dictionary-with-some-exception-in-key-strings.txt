Natural Text
So I've a list of students which looks something like this :So the above list is of size 2. Assume that the size is pretty big, lets say 50 or 60 or more.I want to return a list students_output & for each student I want to return a dictionary which contains the following values for each student which are fetched from the above list but have slightly modified 'keys'. The end output should be something like this :I am not able to understand how I can create an effective loop so that the keys in my resultant data structure are maintained as provided in the output and i can fetch the data from the first list.for example, in students_output, I know But can anyone help me do it iteratively ?
In order to achieve this, you have to concatenate  at the start of each key with some exception as  key. You may do it via combination of list comprehension and dict comprehension expression as:Value hold by  will be:
Here's a quick-and-dirty function that will do what you need:And really, this doesn't have to be recursive, you could substitute the recursive call with a dictionary comprehension:
You can use the following function inside a list comprehension like this:The above function takes a dict as argument, for each  in the passed , if value is of type dict then the same function is called on value, and the result is added to  dict, else the same value is added.Now, with a , we can do:Output:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
