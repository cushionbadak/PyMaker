Natural Text
If I define a class with its own  function, is  equivalent to , where  is an instance of my class?I checked the python doc, it doesn't say explicitly that this is the case.
Short answer: Yes!According to the Python docs (I highlighted the relevant part):Called by str(object) and the built-in functions format() and print() to compute the “informal” or nicely printable string representation of an object. The return value must be a string object.This method differs from  in that there is no expectation that  return a valid Python expression: a more convenient or concise representation can be used.The default implementation defined by the built-in type object calls .So  is generally called when you do .Longer answer: With "Special Methods" (the methods with two leading underscores and two trailing underscores) there is an exception because these are looked up on the class, not the instance. So  is actually  and not . But in most cases these are the same, because one rarely overrides methods of the class on the instance. Especially not special methods.See also the relevant documentation on "Special method lookup":For custom classes, implicit invocations of special methods are only guaranteed to work correctly if defined on an object’s type, not in the object’s instance dictionary.So like @zzh1996 pointed out in the comments the following code will use the method defined on the class even though the instance has a custom callable  attribute:
Yes, it does. Take a look at the following example:And, from  documentation, we have:Called by  and the built-in functions   and  to compute the “informal” or nicely printable  string representation of an object. The return value must be a string  object.
Yes, but also on print. See docshttps://docs.python.org/2/reference/datamodel.html#object.str


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-lookup
https://docs.python.org/3/reference/datamodel.html#object.__str__
https://docs.python.org/3/library/stdtypes.html#str
