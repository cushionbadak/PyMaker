Natural Text
This question already has an answer here:Python floating point arbitrary precision available?                    5 answers                Why does Python return 0 for simple division calculation?                    4 answers                I know this question has been asked before but the solutions does not seem to be working for me. I have two very large numbers in python (2.7) like the followings:and I need the result ofAs you can see the there is a very tiny difference between the two so I assume the result of this division is not 0 or 1. I have tried // as suggested in other posts but that still does not return what I am looking for. Is there a solution to this or is it something impossible to do in python or with large numbers in general? UPDATE: Btw, sorry but I forgot to mention that even by importing division from future I still do not get what I want.Thanks
simple floats are not precise enough, try with the Decimal module
Since you're in Python 2 land (and not Python 3) you're experiencing integer division. Try 
I believe that it is impossible to achieve what You want. Precision with this big number can't be accomplished, so result would be presented as  in this particular case. We can see exact value stored in float using  (according to docs):
Cast them into float first then do the division, otherwise u will get zero when the first integer is smaller than the second


Answer URL
https://docs.python.org/3/library/decimal.html
