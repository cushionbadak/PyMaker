Natural Text
I can't understand how this condition behind the % worksthis part  is what I cant understand. As far as I understand it does the same as a but how does the  work especially with the %d % i formatting?
Read it as  using the python  or It gives  unless  returns true, then it gives :This sort of boolean (ab)use is common in shell scripts:Evaluating the boolean goes as follows:If  is , then we must test what is on the other side of the .  is also , so we exit early (as the  is already known to be , returning the last value . If  is , we skip the other side of the  and evaluate the other side of the , which is .  is , so we return .
What you have is an example of short-circuiting with  and .We can add some parens to see how the expression is evaluated:    : only evaluates the second argument if the first one is  : only evaluates the second argument if the first one is Which makes 2 the result of the evaluation when  is 1 (since 2 is truthy and the second operand of the  will not be evaluated), and 4 otherwise (since a  in the first operand of the  means the second operand of the  will be returned).
About conditional statement:In Python, some values can be evaluated kinda like  and  even if they are not boolean values:For instance:(More info about how some data types are evaluated in a boolean expression here: http://getpython3.com/diveintopython3/native-datatypes.html#booleans)Now, back to the following statement:Here we have a boolean expression as well. Dissecting the expression, we have the following:Since 2 and 4 are not 0, they will always evaluate to TrueNow, understanding the output: The output will be always 4 if  is different than 1.The reason for this is because if  the returned value is 2. The value 2 is returned because it is not necessary to evaluate the whole expression  since the first part is evaluated to True.On the other hand, if i is not 1, the value 4 has to be evaluated. Because 4 is not zero, it is evaluated to True.This is why the output is always 4 if i is different than 1About the "ternary" operator:Python does not have a ternary operator like in Java/C/C++ (?:) but you have a similar effect using if-else:Therefore, if you wanted to print values from the range function, you should use the following:Or maybe, printing A for even numbers and B for odd numbers:
I might be wrong, but I know in javaScript when you say i == 1 and 2 or 4 it evaluates from left to right. Thus the computer will determine if i == 2, and if it does, it will have a temp val of bits set to 1, and take that flag and bitwise AND it with 2, resulting in the value 2. Since the next expression is an OR, it will not compute that since the condition is true regardless, and the "and" operator short circuits. Thus 2 will print.However if i != 2, then the first part will evaluate to false, and have a temp val of all 0 bits. Then, the or with 4 will change the value to 4 (a bitwise 0 with 4 returns 4), and so 4 will print.I hope this makes sense! Let me know if you have any other questions. 


Answer URL
https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not
https://docs.python.org/3/reference/expressions.html#operator-precedence
