Natural Text
Consider the following code:How does this ordering of the function  parameters like  come to be?and not like so: , since  and  were partially bound first? Is it ok for the return of  (and not ) to be called by an object ()?If I replace it with   why does this error come up?
Both first arguments are the same object.  is bound to the  instance (as it was looked up on ), and then you tell the partial to pass in  again. So really, the signature is just a double confusion, and you can leave off the second argument and simply not pass in a second, explicit .Note that you are never passing in  anywhere.The order is simply set by:The bound method, passing in the bound  instance.Whatever positional arguments you passed into the  call, so . That's the  instance again, and the bound  method.any additional arguments you pass in when calling the  object.You have to use a  object here, not a , because you are setting attributes on an instance. A  is intended to be used as a descriptor object, e.g. an attribute on the class.This is why you get your  too; the  was never bound. If it was bound (it's  method was called, passing in the instance to bind to), then a proper callable object would have been returned.See the Python Descriptor Howto on how descriptors work (bound methods are created via that protocol, and  objects, as well as ,  and  objects, all build on the same principles).So you could simplify your code with:If you must have access to the original  instance, use the  attribute on the  variable.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__get__
https://docs.python.org/3/howto/descriptor.html
