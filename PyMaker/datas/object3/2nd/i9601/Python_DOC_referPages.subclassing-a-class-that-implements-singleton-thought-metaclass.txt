Natural Text
I have this code:I'm new to Python 3 so I decided to do some little experiment and playing around Python's metaclasses. Here, I attempted to make a metaclass that will strict a class to a single instance when set.I'm not sure yet if this works but whenever I try to do:the output will be:which means that  wasn't set but when I try to do:the output will be:Can someone help me traceback? I'm somehow confused but here are my initial questions/thoughts:Does 's  property the same as 's ? because I get different results through  depending on which one I defined first. It's different if it's  first but it's the same if it's  first.How come  is still  if I will run  ?
I'll give this a shot.  I think the symptom is due to the assignment,  in .When the class objects are first created  points to .  They both have the same , which is the same as .If you make an instance of  first, the instance is assigned to  (it no longer points to ) but  still points to  - they are still the same thing so that when  is called, the else clause of the conditional is executed.When you make an instance of  first, that instance is assigned to , it no longer points to .   still points to .Now when you make an instance of  the if condition is True and the instance is assigned to I often find myself re-reading Binding of Names and Resolution of Names - also A Word About Names and Objects and Python Scopes and NamespacesI feel that I haven't actually explained the mechanism - I don't really understand how the child class attribute points to the base class attribute - it is something different than .Maybe:Initially the child class doesn't actually have the attribute, the points to mechanism is how inheritance is implemented, since  it doesn't have the attribute, the attribute is searched for in its parent(s).Even though the parent class attribute changes with instantiation, the child class still doesn't have the attribute and has to search for it and it finds the new thing.If the child class is instantiated first the assignment in the metaclass gives the attribute to the child class - now it has it and it doesn't have to search for it.Re-reading the Custom Classes section of the Standard Type Hierarchy in the docs triggered that brain dump.I feel like I've been here before, maybe even in SO.  Hope I remember it this time and don't have to figure it out again.If you want to fix your Singleton there are numerous options if you search for them.  Using a metaclass it seems the instance is held in the metaclass, not the the class itself. Creating a singleton in Python, SO Q&A, is a good start.


Answer URL
https://docs.python.org/3/reference/executionmodel.html#binding-of-names
https://docs.python.org/3/reference/executionmodel.html#resolution-of-names
https://docs.python.org/3/tutorial/classes.html#a-word-about-names-and-objects
https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces
https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy
