Natural Text
I currently have a CSV file with over 200 entries, where each line needs to be made into its own class file. These classes will be inheriting from a base class with some field variables that it will inherit and set values to based on the CSV file. Additionally, the name of the python module will need to be based off an entry of the CSV file. I really don't want to manually make over 200 individual python class files, and was wondering if there was a way to do this easily. Thanks! edit* I'm definitely more of a java/C# coder so I'm not too familiar with python. Some more details: I'm trying to create an AI for an already existing web game, which I can extract live data from via a live stream text box.There are over 200 moves that a player can use each turn, and each move is vastly different. I could possibly create new instances of a move class as it's being used, but then I would have to loop through a database of all the moves and its effects each time the move is used, which seems very inefficient. Hence, I was thinking of creating classes of every move with the same name as it would appear in the text box so that I could create new instances of that specific move more quickly. 
As others have stated, you usually want to be doing runtime class generation for this kind of thing, rather than creating individual files.But I thought: what if you had some good reason to do this, like just making class templates for a bunch of files, so that you could go in and expand them later? Say I plan on writing a lot of code, so I'd like to automate the boilerplate code parts, that way I'm not stuck doing tedious work.Turns out writing a simple templating engine for Python classes isn't that hard. Here's my go at it, which is able to do templating from a csv file.The above takes a csvfile formatted like this as its first argument (here, saved as ):Where the first field is the class name, followed by the attribute name and its default value. The second argument is the path to the output folder.If I make a folder called  and create a  in it with a basic class structure:And then run the code like this:I get the files  with the following contents:And :You can actually load them and use them, too!The above generates Python 3 code, which is what I'm used to, so you will need to make some small changes for it to work in Python 2.
First of all, you don't have to seperate python classes by files - it is more common to group them by functionality to modules and packages (ref to What's the difference between a Python module and a Python package?). Furthermore, 200 similar classes sound like a quite unusual design - are they really needed or could you e.g. use a dict to store some properties?And of course you can just write a small python script, read in the csv, and generate one ore more   files containing the classes (lines of text written to the file). Should be just a few lines of code depending on the level of customization.If this list changes, you even don't have to write the classes to a file: You can just generate them on the fly.If you tell us how far you got or more details about the problem, we could help in completing the code...
Instead of generating  files, read in the csv and do dynamic type creation.  This way, if the csv changes, you can be sure that your types are dynamically regenerated.


Answer URL
https://docs.python.org/3/library/types.html
https://docs.python.org/3/library/types.html
