Natural Text
I'm learning Python, and I can't figure out how imports in  work.I understand from the Python tutorial that the  file initializes a package, and that I can import subpackages here.I'm doing something wrong, though. Could you explain for me (and for future Python-learners) what I'm doing wrong?Here's a simplified example of what I'm trying to do.This is my file structure:The contents of : is empty. contains:And finally,  contains:This is how I attempt to run hello_world.py using OSX terminal and Python 3:Python then throws the following error:
You probably already understand that when you import a module, the interpreter creates a new namespace and executes the code of that module with the new namespace as both the local and global namespace. When the code completes execution, the module name (or the name given in any  clause) is bound to the module object just created within the importing namespace and recorded against its  in .When a qualified name such as  is imported the first name () is imported into the local namespace, then  is imported into 's namespace and finally  is imported into 's namespace. Imports using  perform the same sequence of operations, but the imported objects are bound directly to names in the importing module's namespace. The fact that the package name isn't bound in your local namespace does not mean it hasn't been imported (as inspection of  will show).The  in a package serves much the same function as a module's  file. A package, having structure, is written as a directory which can also contain modules (regular  files) and subdirectories (also containing an  file) for any sub_packages. When the package is imported a new namespace is created and the package's  is executed with that namespace as the local and global namespaces. So to answer your problem we can strip your filestore down by omitting the top-level package, which will never be considered by the interpreter when  is run as a program. It would then look like this:Now,  is no longer a sub-package, as we have removed the containing package as irrelevant. Focusing on why the  name is undefined might help.  does not contain any import, and so it's unclear how you are expecting  to acquire meaning. You could make it work by  using an empty  and then  could readAlternatively you could us a  that readswhich establishes the  function inside the  namespace when the package is imported. Then use a  that imports the function from the package, like this:A final alternative with the same  is to use a  that simply imports the (sub)package and then use relative naming to access the required function:to gain access to it in your local namespaceWith the empty  this could also be achieved with a  readingor evenUltimately the best tool to keep you straight is a clear understanding of how import works and what effect its various forms have on the importing namespace.
First, you have to understand how  alone work:Would try to load  from  itself loaded from .You want to load something from , so start with that:Fine,  is loaded.Now, you want the  function which is in the file (a "module") . Easy:And you are done! Just read this line loud, it does exactly what it says: import  from the module  which is in the  package.Try that in It should work just fine.Now, the second issue: won't be called in  since you don't use  as a package.  will be used if you do an import of  or anything in it, for eg:Otherwise, it won't be loaded at all.However, if you want to load  on the import of subpackage, put  in , and then, in you , do a .
It's an absolute hard-and-fast rule in Python that a name must always be defined or imported within the module where you're using it. Here you never import anything inside test.py - so as the error says,  is not defined.Even if your  file was executed (which, as others have pointed out, it isn't), your code still wouldn't work as it is, because the import of  has to be done inside test.py if you want to reference it in that file.


Answer URL
https://docs.python.org/3/tutorial/modules.html
