Natural Text
I want to apply a function in parallel using multiprocessing.Pool.The problem is that if one function call triggers a segmentation fault the Pool hangs forever.Has anybody an idea how I can make a Pool that detects when something like this happens and raises an error?The following example shows how to reproduce it (requires scikit-learn > 0.14)
This is a known bug, issue #22393, in Python. There is no meaningful workaround as long as you're using  until it's fixed. A patch is available at that link, but it has not been integrated into the main release as yet, so no stable release of Python fixes the problem.
Instead of using  maybe you would rather manually create child processes yourself with . I bet the object returned would allow you to get liveness status of any child. You will know if they hang up.
As described in the comments, this just works in Python 3 if you use  instead of .If you're stuck on Python 2, the best option I've found is to use the  argument on the result objects returned by  and . For example:This works as long as you have an upper bound for how long a child process should take to complete a task.
I haven't run your example to see if it can handle the error, but try concurrent futures. Simply replace my_function(i) with your fit_one(i). Keep the  structure. concurrent futures seems to need this. The code below is tested on my machine so will hopefully work straight up on yours.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor
