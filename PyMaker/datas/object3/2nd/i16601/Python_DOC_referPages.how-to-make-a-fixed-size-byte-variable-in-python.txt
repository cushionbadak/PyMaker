Natural Text
Let's say, I have a string (unicode if it matters) variable which is less than 100 bytes. I want to create another variable with exactly 100 byte in size which includes this string and is padded with zero or whatever. How would I do it in Python 3?
For assembling packets to go over the network, or for assembling byte-perfect binary files, I suggest using the  module.struct â€” Interpret bytes as packed binary dataJust for the string, you might not need , but as soon as you start also packing binary values,  will make your life much easier.Depending on your needs, you might be better off with an off-the-shelf network serialization library, such as Protocol Buffers; or you might even just use JSON for the wire format.Protocol Buffer Basics: PythonPyMOTW - JavaScript Object Notation Serializer
Something like this should work:Obligatory addendum since your original post seems to conflate strings with the length of their encoded byte representation: Python unicode explanation
You could use the  method to add the required number of zeroes:
To pad with null bytes you can do it the way they do it in the stdlib base64 module.
Here's a roundabout way of doing it:So following this, an ASCII string of 100 bytes will need to be 79 characters longThis approach above is a fairly simple way of "calibrating" strings to figure out their lengths.  You could automate a script to pad a string out to the appropriate memory size to account for other encodings.  


Answer URL
https://docs.python.org/3/library/stdtypes.html#bytes.zfill
https://docs.python.org/3/library/stdtypes.html#str.zfill
https://docs.python.org/3/library/string.html#deprecated-string-functions
