Natural Text
I'm writing a Python application that takes as a command as an argument, for example:I want the application to be extensible, that is, to be able to add new modules that implement new commands without having to change the main application source. The tree looks something like:So I want the application to find the available command modules at runtime and execute the appropriate one.Python defines an __import__ function, which takes a string for a module name:__import__(name, globals=None, locals=None, fromlist=(), level=0)The function imports the module name, potentially using the given globals and locals to determine how to interpret the name in a package context. The fromlist gives the names of objects or submodules that should be imported from the module given by name. Source: https://docs.python.org/3/library/functions.html#importSo currently I have something like:This works just fine, I'm just wondering if there is possibly a more idiomatic way to accomplish what we are doing with this code.Note that I specifically don't want to get in to using eggs or extension points. This is not an open-source project and I don't expect there to be "plugins". The point is to simplify the main application code and remove the need to modify it each time a new command module is added.
With Python older than 2.7/3.1, that's pretty much how you do it. For newer versions, see  for Python 2 and and Python 3.You can use  if you want to as well.Or using  you can import a list of modules by doing this:Ripped straight from Dive Into Python.
The recommended way for Python 2.7 and 3.1 and later is to use  module:importlib.import_module(name, package=None)Import a module. The name argument specifies what module to import in absolute or relative terms (e.g. either pkg.mod or ..mod). If the name is specified in relative terms, then the package argument must be set to the name of the package which is to act as the anchor for resolving the package name (e.g. import_module('..mod', 'pkg.subpkg') will import pkg.mod).e.g.
Note: imp is deprecated since Python 3.4 in favor of importlibAs mentioned the imp module provides you loading functions:I've used these before to perform something similar.  In my case I defined a specific class with defined methods that were required.Once I loaded the module I would check if the class was in the module, and then create an instance of that class, something like this:
Use the imp module, or the more direct  function.
If you want it in your locals:same would work with 
You can use :
Similar as @monkut 's solution but reusable and error tolerant described here http://stamat.wordpress.com/dynamic-module-import-in-python/:
Nowadays you should use importlib. Import a source fileThe docs actually provide a recipe for that, and it goes like:Import a packageImporting a package (e.g., ) under your current dir is actually straightforward:
It sounds like what you really want is a plugin architecture.  You should have a look at the  entry points functionality provided by the setuptools package.  It offers a great way to discover plugins that are loaded for your application.
for ex: my module names are like jan_module/ feb_module/ mar_modulemonth='feb'  exec 'from %s_module import *'%(month)
The below piece worked for me:if you want to import in shell-script:
The following worked for me:It loads modules from the folder 'modus'. The modules have a single class with the same name as the module name. E.g. the file modus/modu1.py contains:The result is a list of dynamically loaded classes "adapters".


Answer URL
https://docs.python.org/3/library/functions.html#__import__
https://docs.python.org/3/library/importlib.html#importlib.import_module
https://docs.python.org/3/library/importlib.html
https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly
