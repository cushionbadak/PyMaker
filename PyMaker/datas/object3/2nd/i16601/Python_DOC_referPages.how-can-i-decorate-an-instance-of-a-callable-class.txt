Natural Text
With this code we have two instances of callable class, one is decorated and one is plain:I wonder if it is somehow supported to use the  syntax on a callable for just one instance - as opposed to decorating the class / method, which would apply to every instance.  According to this popular answer, the @syntax is just sugar for:But is it an over-simplification?  With all my half-baked attempts it seems only to work when the syntax occurs before , , whitespace or .That's a . Also . Works, but is ugly and kinda cheating.  
You question states:According to this popular answer, the @syntax is just sugar for:However, it's more accurate to say thatIs syntactic sugar for:Decorators are designed to decorate function, method or class definitions, specifically. The PEP that introduced class decorators describes the grammar:As you can see, a decorator must come immediately before a  or , so there is no way to use it directly on an instance of a callable class.
Yes, it's an oversimplification.  If we look at the grammar,  only appears in the rule , which only appears as part of a  or :What the language reference says (and I think this is what's being repeated in the linked answer) is thatis equivalent toand similarly for class definitions.  But that doesn't mean that the  syntax can be applied just anywhere; it's only valid immediately before a function or class definition.As an aside, even the official docs aren't strictly correct; at the time the decorator is called the function (or class) isn't bound into the enclosing namespace or scope, so the given syntaxes are not entirely equivalent.There's something interesting about the  and  statements, which I think is part of the reason that they're the only statements supported by  syntax: they're the only way in Python to bind a name to an object that knows what that name is.Finally, here's another way to invoke a decorator that you might like:


Answer URL
https://docs.python.org/3/reference/grammar.html
https://docs.python.org/3/reference/compound_stmts.html#function-definitions
