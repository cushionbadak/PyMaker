Natural Text
I have an OrderedDict whose values I would like to be functions, but have encountered unexpected behaviour. Initializing:Functions call_func_A, call_func_B and call_func_C turn out to be executed when options_dict is declared, rather than in the subsequent for loop over options.I'd like the function calls to wait until the for loop.What's going on?
The functions are called before the dictionary is created. You made the call.However, you can defer the function calls by nesting it within another function to be called later:The same effect can be achieved with , with an extra  statement to execute.On another note, since your function arguments are presumably invariant, I don't think when the calls are made is important here. You might as well keep your initial approach of having the functions called at the dict creation time.
First of all, you are declaring the OrderedDict incorrectly. The constructor expects a list of tuples. Instead, you are giving it multiple lists. Do it like so:Second, when you declare , you don't pass the functions as the values of the dict, but rather their results:You are calling them by doing . One relatively simple way of avoiding that is by omitting the args:You can store the args in a second OrderedDict:And then to call them:


Answer URL
https://docs.python.org/3/library/functools.html#functools.partial
