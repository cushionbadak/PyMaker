Natural Text
Here is a sample of code where a function is run repeatedly with new information for most of the input variables except one, good_ens.  The input variable good_ens that should never be changed, gets changed.  What is going on here?  This defies my understanding of scope.Output for the first two iterations of the for loop is below.  Note good_ens gets changed from [0, -1] to the value of goodens that is inside the function.  Why?  Never mind the difference in variable names, they don't even share the same scope.There is a similar question here:Python issue value of property changes when falling out of loop scopeHowever I do not want to embed the variable good_ens down in a for loop.  I want its value to be set by the user once at the head of a script, then used in the for loop.  
When you call  try this instead:I think of it this way: A list is a thing which points to the value of each element within the list. When you pass a list into a function, the thing that does the pointing gets copied, but the values of the things pointed to do not get copied.doing  actually makes copies in memory of the elements of the list, and will keep the original values from getting changed. See below:EDIT: The reasoning for this is that, as the other answers have indicated, list is a mutable data type in python. Mutable data types can be changed, whereas immutable data types cannot be changed but rather return new objects when attempting to update.
In python, lists are mutable.If you want them to be immutable consider using a tuple.
The other answers cover the idea that lists are mutable. Below is a possible refactoring that gets around this issue in what I think is a sensible way.This way, you can still call the function as you have been, your variables within the function are named more aptly, and you never mutate the provided list object.


Answer URL
https://docs.python.org/3/library/stdtypes.html#lists
