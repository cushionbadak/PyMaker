Natural Text
My code looks like this, where  is a :The problem is it does not work when popping the only item. According to python wiki, popping last element is O(1). (I also want to remove the last element)So far what I've come up with:which is a lot longeror thiswhich should be slower. Is there a more pythonic way to do this? Internally python maybe does not even resize the array.UPDATE:I need O(1) access to elements at given indeces (so it cannot be a linked list).
It sounds like you're implementing a heap, and this line is part of the implementation of the heap-pop operation. In context, it would look something likeIn that case, if the list has only one element, you shouldn't be moving the last element to the front at all. You should just remove and return the only element:As for the cost of the , this cost is trivial and not at all something you should be worrying about.For moving the last element of a list to the front without replacing the old front element, this is not possible in O(1) time. You'd have to use a different data structure, like a , or implement your own resizeable ring buffer. That's not relevant for a heap use case, though.For moving the last element of a list to the front, stomping over the old first element if there were multiple elements and leaving the list unchanged if there was only one, an  check would probably be clearest, but again, the "leave the list unchanged if there was only one element" behavior isn't actually useful for implementing a heap-pop.
An approach that works (without exceptions, so long as the  is non-empty) is to assign to a slice of the :That pops the final element and creates a length 1 , which is then assigned to the  such that it replaces the first element if it exists, or becomes the contents of the  if it's empty (as a result of the ). It should remain  because it's always replacing a single element with a single element; the higher indices are untouched.
 supports removing from and appending to both the front and the back in O(1).See https://wiki.python.org/moin/TimeComplexity.
You can check if the list is empty before attempting pop.By default, pop returns the last element from the list so you do not have to explicitly pass -1. And since it raises an error if the list is empty, we can check its length before attempting to pop.But insert operation on list is O(n). For O(1) you will need to use dequeue. 


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
https://docs.python.org/3/library/heapq.html
