Natural Text
Specific example:in , I create a file  with following content:I know there is a builtin module named Then I run  from ,So I import the builtin module  instead of .It seems that Python searches for a builtin module before searching for a nonbuiltin module. This is contrary to Python modules with identical names (i.e., reusing standard module names in packages). Why?General rules: From Python in a NutshellWhen a module is loaded,   first checks whether the  module is built-in. The  tuple     names   all  built-in  modules,  but  rebinding that tuple does not affect  module loading.  The search for built-in modules also looks for modules in  platform-specific loca‐ tions, such as the Registry in Windows.If module  M  is not built-in,   looks for  M ’s code as a file on the filesystem.    looks at the strings, which are the items of list   , in order. From Learning PythonIn many cases, you can rely on the automatic nature of the module  import search path and won’t need to configure this path at all. If  you want to be able to import user- defined files across directory  boundaries, though, you will need to know how the search path works in  order to customize it. Roughly, Python’s module search path is  composed of the concatenation of these major components, some of which  are preset for you and some of which you can tailor to tell Python  where to look:The home directory of the programPYTHONPATH directories (if set)Standard library directoriesThe contents of any .pth files (if present)The site-packages home of third-party extensionsAre the five places in Learning Python stored in ? Are the five places in Learning Python  searched only after failing to find a builtin module in ?Is "3. Standard library directories" not including the builtin modules? Where are the builtin modules stored? What are the relations between "3. Standard library directories" and the builtin modules?Thanks.
This is only a partial answer but it may help clear up some concepts.Builtin modules are typically implemented in C (at least for CPython) and compiled. These are listed in . Examples of such modules are ,  and  (note the leading underscore).Then there are the standard library modules. These are normal Python files and on Windows located in a folder  inside your Python installation. For example  (without underscore) or ...Then there are installed extension modules. These can be compiled modules, normal Python files, etc. On Windows these are found in the  folder inside the  folder.If I look at my :It seems like 1, 3 and 5 are included in my  so maybe 2 and 4 (if set) would be included in there as well. But that could also be something Windows specific.As for your title question:Does Python search for a builtin module before searching for a nonbuiltin module?Yes! The builtins are searched first, before it progresses to look for a module in the current directory or the standard library (or in the installed modules).For example if you have a  a  file in your current working directory and you try:If you're really interested in the specifics it would probably be a good idea to consult the  documentation and the referred PEPs. Personally, I wouldn't go down that path just out of curiosity.


Answer URL
https://docs.python.org/3/library/index.html
https://docs.python.org/3/library/importlib.html
