Natural Text
Suppose I have a class that will spawn a thread and implements  and  so I can use it as such: might perform certain actions for clean-up purposes (ie. removing temp files, etc.)That works all fine until I have a list of s that I would like to start all at once.How should I use  on the list? I'm hoping for something like this:
I think  is exactly what you're looking for. It's a way of combining an indeterminate number of context managers into a single one safely (so that an exception while entering one context manager won't cause it to skip exiting the ones it's already entered successfully).The example from the docs is pretty instructive:This can adapted to your "hoped for" code pretty easily:
Note: Somehow I missed the fact that your  subclass was also a context manager itself—so the code below doesn't make that assumption. Nevertheless, it might be helpful when using more "generic" kinds of threads (where using something like  wouldn't be an option).Your question is a little light on details—so I made some up—however this might be close to what you want. It defines a  class that has the necessary  and  methods required to support the context manager protocol (and associated  statements).Output:
@martineau answer should work. Here's a more generic method that should work for other cases. Note that exceptions are not handled in . If one  function fails, the rest won't be called. A generic solution would probably throw an aggregate exception and allow you to handle it. Another corner case is when you your second manager's  method throws an exception. The first manager's  will not be called in that case.It can then be used like in your question:


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack
https://docs.python.org/3/library/multiprocessing.html
