Natural Text
A module holds a dictionary to keep track of itscontext, such as the names defined at some point of the execution. This dictionary can be accessed through  (or ) if  was imported, or by a call to the  built-in function in the module itself:Update and return a dictionary representing the current local symbol table.But I found myself a bit confused, when I tried accessing the locals dictionary from a function. The output of a script containing only the following is an empty dictionary:But on the other hand, if a script contains exclusively the following, the output is the expected dictionary, containing ,  and the other module-level variables:So, when is the content of the locals dictionary set?In addition, what does "update" mean in the definition of the  function?
The namespace of a module is the global namespace, accessed through . There is no separate locals namespace, so , outside of functions, just returns the global namespace.Only functions have a local namespace. Note that  is a one-way reflection of that namespace; the CPython implementation for functions is highly optimised and you can't add or alter local variables through the  dictionary. The dictionary returned by  is updated whenever the namespace has changed between calls to that function.Note also that things like list / dict / set comprehensions, generator expressions and class bodies are in reality executed as functions too, albeit with different namespace rules. In such contexts  will also return the separate function local namespace.
If you call  more than once during the same function call, it will return the same dictionary."Update" in this case means that the contents of this dictionary are updated to reflect the current scope of local variables that exist, but if you kept a reference to this dictionary then that dictionary will still be used.Notice also that the locals dictionary doesn't contain a key for , even though you could have accessed it during the course of the function. In case it's not obvious, that's a global, not a local.


Answer URL
https://docs.python.org/3/library/functions.html#vars
https://docs.python.org/3/library/functions.html#locals
https://docs.python.org/3/library/functions.html#globals
