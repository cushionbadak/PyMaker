Natural Text
I have one base class with abstractmethod and subclass which implements this method. How to determine in runtime if in object (without checking type of object or calling method) that method is abstract or not?
Python prevents the creation of instances for classes with abstract methods. So just the fact that you have an instance means you have no abstract methods.You do, however, have to use the  metaclass to properly trigger this behaviour:You can also inherit from  to get the same metaclass via a base class.If you wanted to see what abstract methods a class might have listed, use the  attribute; it is a set of all names that are still abstract:All that the  decorator does is set a  attribute on the function object; it is the metaclass that then uses those attributes.So if you are dig in too deep or are using a third-party library that has forgotten to use the  metaclass, you can test for those attributes:If you need to 'repair' such broken abstract base classes, you'd need subclass and mix in , and add a  frozenset to the class you are inheriting from:Now  is a proper ABC-derived class where any abstract methods are properly tracked and acted on.
You're not using  correctly here (well not as it's intended to be used at least). Your  class should use  as metaclass, which would prevent instanciation of child classes not implementing abstractmethods. Else just using the  decorator is mostly useless.Python 2.7:Python 3.x


Answer URL
https://docs.python.org/3/library/abc.html#abc.ABCMeta
https://docs.python.org/3/library/abc.html#abc.ABC
