Natural Text
I've been trying to get some dynamically created types (i.e. ones created by calling 3-arg ) to pickle and unpickle nicely. I've been using this module switching trick to hide the details from users of the module and give clean semantics.I've learned several things already:The type must be findable with  on the module itselfThe type must be consistent with what  finds, that is to say if we call  then it must be true that Where I'm stuck though is that there still seems to be something odd going on - it seems to be calling  on something unexpected. Here's the simplest setup I've got that reproduces the issue, testing with Python 3.5, but I'd like to target back to 3.3 if possible:And then a quick way to exercise that:Which then gives:I wasn't expecting to see anything looking up  on , but even if we force that lookup to fail by adding:into our  it still fails with:What gives? Am I missing something with ? The docs for  pretty much just stress setting it appropriately, but don't seem to actually explain much.More importantly the bigger question is how am I supposed to go about making types I programatically generated via a pseudo module's  implementation pickle properly?(And obviously once I've managed to get  to produce something I expect  to call  with the same thing)
To pickle ,  needs to pickle 's class, .The docs don't claim support for pickling arbitrary classes. They claim the following:The following types can be pickled:...classes that are defined at the top level of a module isn't defined at the top level of a module, even a pretend module like . In this not-officially-supported case, the pickle logic ends up trying to pickle , either here:or here can't be pickled for multiple reasons. It returns a non-callable  instance for all unsupported method lookups, like , which is where your first error comes from. The module-switching thing prevents finding the  class to pickle it, which is where your second error comes from. There are probably more incompatibilities.
As it seems, and is already proven that making the class  is just a drifting out another wrong direction, thankfully to this hack, I could find a getaround to make the class reiterable by its TYPE. following the context of the error  the pickler doesn't iterate through the same call that renders a different type from the other one, this is a major common problem with pickling self instanciating classes, for this instance, an object by its class, there for the solution is patching the class with its type  this is a short answer for a something.Main.pyMagic classEven assuming this is not more of striking the ball by the edge of the bat, I could see the content dumped into my console.


Answer URL
https://docs.python.org/3/reference/import.html#__spec__
https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled
