Natural Text
I found that:Does an iterator always have the  method?According to https://stackoverflow.com/a/9884259 an iterator also an iterable. If it is true that an iterator always has  method?
An iterable needs to implement an  method or a  method:An object can be iterated over with  if it implements  or .An iterator needs a  method (that returns ) and a  method (I'm not 100% sure about the ).it is true that an iterator always has  method?Yes!This is also documented in the Data model:This method is called when an iterator is required for a container. This method should return a new iterator object that can iterate over all the objects in the container. For mappings, it should iterate over the keys of the container.Iterator objects also need to implement this method; they are required to return themselves. For more information on iterator objects, see Iterator Types.(Emphasis mine)As to your second question:Is an iterator also an iterable?Yes, because it has a  method.Additional notesBesides the formal implementation it's easy to check if something is iterable by just checking if  can be called on it:Likewise it's possible to check if something is an iterator by checking if  called on something returns itself:But don't use them in development code, these are just for "visualization". Mostly you just iterator over something using  or if you need an iterator you use  and then process the iterator by calling  until it throws a .
An iterator is iterable. And yes, an iterator always has an  method.Calling  on an iterator, which summons the  hook, returns the same iterator:A classical example of method chaining.As you must have also noticed, most implementations of the iterator protocol for custom classes always follows:That is if the iteration is not delegated to another iterator, via say .It would be quite counter-intuitive for an iterator to not implement the iterator protocol don't you think? The  implementation of the protocol is described below:Return the iterator object itself. This is required to allow both  containers and iterators to be used with the  and  statements.[Emphasis mine]This behaviour is expectedly consistent with iterator objects returned by builtins:P.S: I apologise for calling dunders repeatedly; makes it look like it's the right thing to do. But it's not!
An iterator is iterable.That's documented and explained here:Iterators are required to have an  method that returns the iterator object itself so every iterator is also iterableAn iterable is not necessarily an iteratorIterators must have a  method, by definition.  To give a simple counterexample:A string object is an iterable, but is not an iterator.   


Answer URL
https://docs.python.org/3/library/functions.html#iter
https://docs.python.org/3/library/stdtypes.html#iterator.__iter__
https://docs.python.org/3/glossary.html
