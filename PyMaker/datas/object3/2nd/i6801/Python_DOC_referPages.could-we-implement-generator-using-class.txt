Natural Text
This question already has an answer here:How to write a generator class?                    4 answers                when we look at the Python documentation we could see that generators are always defined using yield statement, but in the Internet we could see that some people are trying to implement generators using classes (eg. here How to write a generator class?). Here is example generator implementation using classes:When we execute it in repl we can see it is not the generator, but ordinary object. It only tries to behave like generator.When we look at PEP 342:Add a close() method for generator-iterators, which raises GeneratorExit at the point where the generator was paused.I think it is not possible to meet that condition using own implementation with classes.Am I wrong? Is it really possible to implement real generator using classes?
Generators are simply a type of iterator. From the datamodel documentation:Generator functions  A function or method which uses the  statement [...] is called a generator function. Such a function, when called, always returns an iterator object which can be used to execute the body of the function: calling the iteratorâ€™s  method will cause the function to execute until it provides a value using the  statement. When the function executes a return statement or falls off the end, a  exception is raised and the iterator will have reached the end of the set of values to be returned.You can't tell by the  output if something is a generator. Python looks for the iterator methods, and you can implement your own  and  methods on top of those, as you have done.As such, your implementation works as designed, it is valid iterator:Without the  base, you can also implement your own  method (this has to return ), and a  method that produces the next value when called or raises  when done.The base  implementation defines the  method for you and supplies an  method that simply calls .


Answer URL
https://docs.python.org/3/reference/datamodel.html
https://docs.python.org/3/library/stdtypes.html#iterator-types
https://docs.python.org/3/library/stdtypes.html#iterator.__iter__
https://docs.python.org/3/library/stdtypes.html#iterator.__next__
