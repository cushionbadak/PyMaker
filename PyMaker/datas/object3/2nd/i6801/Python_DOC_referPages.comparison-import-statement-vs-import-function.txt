Natural Text
As a followup to the question Using builtin  in normal cases, I lead a few tests, and came across surprising results.I am here comparing the execution time of a classical  statement, and a call to the  built-in function.For this purpose, I use the following script in interactive mode:As in the linked question, here is the comparison when importing , along with some other standard modules:So far so good,  is faster than .This makes sense to me, because as I wrote in the linked post, I find it logical that the  instruction is optimized in comparison with , when the latter results in a call to .But when it comes to less standard modules, the results reverse:What is the reason behind this difference in the execution times?What is the actual reason why the  statement is faster on standard modules?On the other hand, why is the  function faster with other modules?Tests lead with Python 3.6
 measures the total execution time, but the first import of a module, whether through  or , is slower than subsequent ones - because it's the only one that actually performs module initialization. It has to search the filesystem for the module's file(s), load the module's source code (slowest) or previously created bytecode (slow but a bit faster than parsing the  files) or shared library (for C extensions), execute the initialization code, and store the module object in . Subsequent imports get to skip all that and retrieve the module object from .If you reverse the order the results will be different:The best way to get non-biased results is to import it once and then do the timings:So, yes,  is always faster than .
Remember that all modules get cached into  after the first import, so the time...Anyway, my results look like this::  0.481:  0.586:  0.163:  0.247:  0.157:  0.273:  0.162:  0.265
What is the reason behind this difference in the execution times?The import statement has a pretty straighforward path to go through. It leads to  which calls  and imports the given module (if no overriding of the name  has been made):, on the other hand, goes through the generic function call steps that all functions do via :Sure, it's builtin and so faster than normal py functions but it is still slower than the  statement with . This is why, the difference in time between them is constant. Using @MSeifert snippet (that corrected the unjust timings :-) and adding another print, you can see this:On my machine, there's a constant diff of around 0.17 between them (with slight variance that's generally expected)*It is worth noting that these aren't exactly equivalent.  doesn't do any name binding as the bytecode attests.


Answer URL
https://docs.python.org/3/library/functions.html#__import__
