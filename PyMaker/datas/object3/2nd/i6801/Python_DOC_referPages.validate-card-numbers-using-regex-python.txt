Natural Text
I have some credit card numbers with me and want to validate them over the below rules.► It must only consist of digits (0-9)► It may have digits in groups of 4, separated by one hyphen "-"► It must NOT have 4 or more consecutive repeated digits► It may contain exactly digits without any spacesInput:5123-4567-8912-345661234-567-8912-345641233567891234565133-3367-8912-3456Output:ValidInvalid  (because the card number is not divided into equal groups of 4)ValidInvalid (consecutive 33 33digits is repeating  4 times)I have tried here and it works only if i include hyphen at the end. Can somebody give me a correct reg ex for it.Edit:Regex Code: Input to be matched It doesn't match until I put hyphen at the end.Edit
Your regex is almost correct. It asks for four dash terminated groups of numbers. What you want is three dash-terminated groups, followed by a non-dash-terminated group, or a single blob with no dashes:[Link]I made the group non-capturing since you don't need to capture the contents. You can also use  instead of :[Link]The validation of consecutive numbers is probably easier to do in a separate step. Once the regex match passes, remove all the dashes:Now check for repeated digits using itertools.groupby, something like in this question/answer:Full Code
My solution has a 2-step logic. The reason you can not do this in one go, has to do with the limitations of python's re. We'll save that for later. If you're interested, look at Addendum 1.2 steps: the first step will check if the '-' are in the right place, while the second one will check if there are not 4 consecutive equal numbers.I will start with the 2nd step, the most memory-consuming one: a regex that checks if there are no consecutive 4 numbers. The following regex will do:Explanation:look at example 1The first step would be matching groups of 4 digits, eventually separated by '-' (look at example 2) The problem to solve here, is to make sure that if first and second group digits is separated by a '-', then all groups need to be separated by a '-'. We manage to do that by using a backreference to group 2 in the next regex.Explanation:Example program:Addendum:Now for desert. I've put a regex together to do this in one go. Let's think about what is needed for every digit depending on its position in a group:1st digit: followed by 3 digits2nd digit: followed by 3 digits OR digit, digit, dash, digit3rd digit: followed by 3 digits OR digit, dash, digit, digit4th digit: followed by 3 digits OR dash, digit, digit, digitSo, for the lookahead we used in example 1, we need to present for each digit all possibilities of follow-ups. Let's have a look at a pattern for a group of 4 digits:We would like to expand that to 16 digits of course. We need to define if it's possible to add '-' before the digit. A simple  won't do, because a creditcard doesn't start with a dash. Let's use alternation:Combined, this brings us to:Look at example 3. We need the \b on both sides because we want to make sure that, whenever the match succeeds, it matches the  string.Let's be fair: one has its doubts if this is the way to go. On the upside, we have a valid reason for doing it in 2 steps now: python's standard re doesn't support conditionals and what not. You can workaround this, by using a replacement. Or switch programming language. ;-)Addendum 2: People asked me where the  comes from in example 3. Isn't it true that the complete string can be 19 characters long? The reason is whenever the inner regex (group 1) matches once, it matches with either  or . That match has to succeed exactly 16 times.
Unless you really want/need to use regex, this task can be solved by simple python code like this:


Answer URL
https://docs.python.org/3/howto/regex.html#non-capturing-and-named-groups
https://docs.python.org/3/library/itertools.html#itertools.groupby
