Natural Text
I'm working on a large code and I find myself in the need to speed up a specific bit of it. I've created a  shown below:The weird format of  and  is because that's how this block of code receives them.The obvious part where most of the time is spent is in the recursive calculation of the  and  terms.Is there any way I could speed up this block of code without having to parallelize it (I've tried it before and it gave me a lot of troubles)? I'm open to use any package, , , etc..AddThis is the result of applying abarnert's optimizations and also Jaime's advise to make only one exponentiation. The optimized function is on average ~60x faster on my system.
You want to gradually convert this over from using lists and loops to using arrays and broadcasting, grabbing the easiest and/or most time-critical parts first until it's fast enough.The first step is to not do that  over and over (especially if this is Python 2.x). While we're at it, we might as well store it in an array, and do the same with —you can still iterate over them for now. So:This won't speed things up much—on my machine, it takes us from 14.1 seconds to 12.9—but it gives us somewhere to start working.You should also remove the double calculation of :Meanwhile, it's a bit odd that you want  to go to , but  to be left alone. Is that really intentional? If not, you can fix that, and simplify the code at the same time, by just doing this:Now, let's broadcast the  and  calculations:And this gets us down from 12.9 seconds to 0.12. You could go a step further by also broadcasting over , and replacing  with a pre-allocated array, and so forth, but this is probably already fast enough.


Answer URL
