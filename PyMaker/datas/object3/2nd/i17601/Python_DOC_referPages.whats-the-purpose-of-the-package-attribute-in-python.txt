Natural Text
All I want to know is what exactly does  mean? Didn't find any explanation in the official doc, even on SO.If you could provide some examples I would be very happy.
See the PEP 366 and import system reference documentation:The major proposed change is the introduction of a new module level attribute, . When it is present, relative imports will be based on this attribute rather than the module  attribute.andThe module’s  attribute should be set. Its value must be a string, but it can be the same value as its . If the attribute is set to  or is missing, the import system will fill it in with a more appropriate value. When the module is a package, its  value should be set to its . When the module is not a package,  should be set to the empty string for top-level modules, or for submodules, to the parent package’s name. See PEP 366 for further details.So, for a module located in ,  is set to , and  is set to , while  will have  for both the  and  attributes.
All I want to know is what exactly does  meanIt is the mechanism that enables explicit relative imports.There are three possible categories of values for A package name (a string)An empty stringNonePackage NameThat is, if a module is in a package,  is set to the package name to enable explicit relative imports. Specifically:When the module is a package, its  value should be set to its . When the module is not a package,  should be set [...] for submodules, to the parent package’s name.Empty StringIf a module is at root, or top-level, that is, the current module is imported withor when a top-level module is run as the entry point as with:then  is an empty string. Or as the documentation says:When the module is not a package,  should be set to the empty string for top-level modules...NoneIf a module/script is run by filename,  is None:When the main module is specified by its filename, then the  attribute will be set to None.EvidenceFirst, let's create a file structure with noisy debugging - using Python 3.6:Now we see that foo.py executed as a module has an empty string for , while the script executed by file name as the entry point has :When we execute a package as a module for the entry point, its  module runs, then its  runs:Similarly, when we execute a submodule as a module for the entry point, the  module runs, then it runs:Finally, we see that the explicit relative import, the entire reason for having , (which happens last here) is enabled:Note, in the output, I have substituted  for the parent directories.


Answer URL
https://docs.python.org/3/reference/import.html#__package__
https://docs.python.org/3/reference/import.html#__package__
