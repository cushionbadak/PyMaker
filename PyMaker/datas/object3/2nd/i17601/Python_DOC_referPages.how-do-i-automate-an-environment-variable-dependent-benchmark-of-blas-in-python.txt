Natural Text
I need some help in figuring out how to automate a benchmark effort in python.  I'm testing the effects of threading on a BLAS library calls through numpy in python.  In a linux environment, threading in OpenBLAS is controlled through the environment variable .  I want to do a test where I increment  from 1 to a max value, time a routine at each thread count, and then finally manipulate the aggregate timing for all thread counts. The issue is the following.  Environment variables can be set in python, but they only affect subprocesses or subshells.  So I can correctly run my benchmark with the following driver code:and numpy_test script:but analyzing this is a very manual process.  In particular, I can't return the value  from  up to my outer wrapper routine, so I can't analyze the results of my test in any automated fashion.  As an example, I'd like to plot  vs number of threads, or evaluate whether /number of threads is constant.  If I try to do a similar test entirely within a python instance by defining a python test function (avoiding the  approach above), and then running the test function within the  loop, then all instances of the test function inherit the same value for  (that of the parent python shell).  So this test fails:This fails in that every instance of  takes the same time, as  always inherits the value of  in the parent environment rather than the value set through .  If something like this worked however, it would be trivial to do the analysis I need to do.In the real test, I'll be running over a few 1000 permutations, so automation is key.  Given that, I'd appreciate an answer to any of these questions:How would you return a value () from a subprocess like this?  Is there a more elegant solution than reading/writing a file?Is there a better way to structure this sort of (environment variable dependent) test?Thank you in advance.
You can do something like this:Then you'll have the output of the the  script in stdout. In general I believe  and  are prefered over .
If you want to get the output from the subprocess, use subprocess.check_output, e.g. replace with


Answer URL
