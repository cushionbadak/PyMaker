Natural Text
These days I am learning Python's Exception handling features deeply. I encountered . While reading about this from official Python Docs I got question in mind that what exactly would have happen when I terminate Python script by pressing Ctrl+c?lets take this sample code:In this sample code I am catching  so I can stop my script by pressing Ctrl+c. Should I catch  too to make this code more mature? if yes then why? actually this question is source of my main question which appear on title. so don't consider that I am asking two different question in one post.  
You usually not need to catch  as it is what makes  and  functions work:sys.exit([arg])Exit from Python. This is implemented by raising the  exception, so cleanup actions specified by  clauses of  statements are honored, and it is possible to intercept the exit attempt at an outer level.Example:Therefore, you usually don't want to catch all exceptions in the first place (by using an empty  clause). The best approach is generally to make your exception handlers as specific as possible. It otherwise makes debugging your application exceptionally hard, as it either hides errors entirely or at least makes it hard to diagnose the details.
The only exception your functions can raise is a , so you should only catch that one:
Your title says something different than the body of your question.To the title:What happens internally is that python captures the  and raises a  exception from it.To the text:You don't want to do .Instead, you wantMost "normal" exception which should normally be handled derive from . Those which have an internal meaning and should normally not be caught (except on global level) don't derive from .These are ,  and .
If you're uncertain what exceptions the code you're calling throws to indicate errors then you should (in order of preference):Find out what it is documented to throw and only catch thatcatch , not everything.Neither  nor  is a subclass of , but all of the standard Python exceptions used to indicate errors are.


Answer URL
