Natural Text
I have a simple Python (3.3) application in which the processing time between iterations gets longer over each iteration. I believe I've isolated the problem to the  function, as you will see below. The code looks like it would be constant, n-time complexity. However, when run it actually shoots up to about n^2-time. I am providing two blocks of code. The first block is the offending block, which feels something like n^2-time complexity. The second block is a small refactor that removes  from handling the input. Here's the first block:(Linux  utility output for this block): real 0m12.742s - user 0m12.188s - sys 0m0.536sAnd here's the second block, refactored to exclude the use of  and which has a constant processing time between iterations (n-time complexity, as seems correct):(Linux  utility output for this block): real 0m0.305s - user 0m0.296s - sys 0m0.008sI am using Linux Mint 16 (kernel 3.11.0-12-generic on x86_64) with Python 3.3.2. I have simplified this code greatly to be more expressive of the central issue. I primarily use Python 3 and can write somewhat non-trivial applications in Python, but I cannot claim to have a Pythonic mindset. Being mindful of this, I've tried to run both of these code blocks in Python 2.7.5, and they both iterate "normally" for a constant amount of time (n-time complexity). I don't know enough about that version and its functions to know if this is meaningful. Thanks!
 creates an -length  object full of zeros. See the  documentation; constructor arguments for  are interpreted the same way.To fix this, encode a string:I've picked UTF-8 because you did, but the proper encoding may depend on the context you want to use it in.


Answer URL
