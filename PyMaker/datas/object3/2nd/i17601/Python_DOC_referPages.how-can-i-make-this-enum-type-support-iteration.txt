Natural Text
After this answer by Alec Thomas, I am using the following to create enumerations:I would like to be able to obtain the length of one of these enums. For example, I can writebut there’s no way to list all of the enumeration values at runtime. I’d like to be able to do something likeI’ve tried assigning  within the  function, but I don’t know what kind of object I need to assign:givesHow can I give an  the ability to list its members? (Even just the ability for the enum to report its length would suffice, since then the members are simply the elements of .)
The problem is that  returns a type, i.e. something that’s actually used to create objects. Now of course you could argue if that’s a problem or not—and it’s likely not due to how Python’s typing system works (everything is an object, types are just objects of  objects etc.).The effect however is that you can’t add special methods, like  which would be needed in this case. Special methods are however looked up on the type of the object, so in this case on  (which is the base type of the type you’re creating). And —as you would expect—is not iterable.So if you want to have something iterable, you will need to create something that is not a type. You could probably come up with some fancy meta class here, but the easiest thing you can do, which also keeps your code at the same length, is really a named tuple. This is btw. also what the semantics in the Python 3.4  type is inspired by.
I would suggest you to use a different implementation of your  by using collections.namedtupleImplementationUsage
This seems to meet your requirements:
Your variant works! with added  after  to create class instance and modified :


Answer URL
