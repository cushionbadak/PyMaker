Natural Text
In my thoughts,  would be equivalent to  cus it is in-place Concatenating two lists - difference between '+=' and extend()However, use  triggers an error, but  works fine.Am I wrong?UpdateI believe I found the reason. works fine.So I believe internally  is interpreted as , and here comes the assignment.
The presence of an assignment to  (such as ) in  causes Python to create an  variable local to , which is never initialized. In Python 3, you would be able to declare  in  to get around this. In Python 2, you have to use  or workarounds where you put  in a 1-element list and use
According to Why am I getting an UnboundLocalError when the variable has a value?:This is because when you make an assignment to a variable in a scope,  that variable becomes local to that scope and shadows any similarly  named variable in the outer scope. Since the last statement in foo  assigns a new value to x, the compiler recognizes it as a local  variable.And according to Augmented assignment statements:An augmented assignment evaluates the target (which, unlike normal  assignment statements, cannot be an unpacking) and the expression  list, performs the binary operation specific to the type of assignment  on the two operands, and assigns the result to the original target.


Answer URL
