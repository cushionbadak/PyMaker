Natural Text
I need to accomplish the following task:from:(add one element to each row) to:I have tried doing stuff like a[n] = array([1,3,4,x])but numpy complained of shape mismatch. I tried iterating through  and appending element x to each item, but the changes are not reflected.Any ideas on how I can accomplish this?
Appending data to an existing array is a natural thing to want to do for anyone with python experience.  However, if you find yourself regularly appending to large arrays, you'll quickly discover that NumPy doesn't easily or efficiently do this the way a python  will.  You'll find that every "append" action requires re-allocation of the array memory and short-term doubling of memory requirements.  So, the more general solution to the problem is to try to allocate arrays to be as large as the final output of your algorithm.  Then perform all your operations on sub-sets (slices) of that array.  Array creation and destruction should ideally be minimized.That said, It's often unavoidable and the functions that do this are:for 2-D arrays:np.hstack np.vstacknp.column_stacknp.row_stackfor 3-D arrays (the above plus):np.dstackfor N-D arrays:np.concatenate
returns :
One way to do it (may not be the best) is to create another array with the new elements and do column_stack. i.e.
Appending a single scalar could be done a bit easier as already shown (and also without converting to float) by expanding the scalar to a python-list-type:  returns  as:Appending a row could be done by:returns  as:
If  is just a single scalar value, you could try something like this to ensure the correct shape of the array that is being appended/concatenated to the rightmost column of :returns  as:
np.insert can also be used for the purpose can also be a /or a 



Answer URL
https://docs.python.org/3/library/functions.html#slice
