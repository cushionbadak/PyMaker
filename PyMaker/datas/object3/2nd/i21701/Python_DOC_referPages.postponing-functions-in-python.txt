Natural Text
In JavaScript I am used to being able to call functions to be executed at a later time, like thisThis does not block the execution of other code.I do not know how to achieve something similar in Python. I can use sleepbut this will block the execution of other code. (Actually in my case blocking Python would not be a problem in itself, but I would not be able to unit test the method.)I know threads are designed for out-of-sync execution, but I was wondering whether something easier, similar to  or  exists.
You want a  object from the  module.If you want to repeat, here's a simple solution: instead of using , just use  but pass it a function that works somewhat like this:This won't do infinite loops because that could result in a thread that won't die and other unpleasant behavior if not done right. A more sophisticated approach might use an -based approach, like this one. 
To execute a function after a delay or to repeat a function in given number of seconds using an event-loop (no threads), you could:TkinterOutputGtkOutputTwistedOutputAsyncioPython 3.4 introduces new provisional API for asynchronous IO --  module: OutputNote: there is a slight difference in the interface and behavior between these approaches.
Asynchronous callbacks like Javascript's  require an event-driven architecture.Asynchronous frameworks for Python like the popular twisted have  which does what you want, but it means adopting the event-driven architecture in your application.Another alternative is to use threads and to sleep in a thread.  Python providers a timer to make the waiting part easy. However, when your thread awakes and your function executes, it is in a separate thread and must do whatever it does in a thread-safe manner.
Sorry, I can't post more than 2 links, so for more information please check PEP 380 and most importantly the documentation of asyncio
JavaScript can do this because it runs things in an event loop. This can be done in Python through use of an event loop such as Twisted, or via a toolkit such as GLib or Qt.
The problem is that your normal python script doesn't run in a framework. The script gets called and is in control of the main loop. With JavaScript, all the scripts that runs on your page runs in a framework and it is the framework that invokes your method when the timeout elapses.I haven't used pyQt myself (only C++ Qt), but you can set a timer on any QObject using startTimer(). When the timer elapse, a callback on your method is invoked. You can also use QTimer and connect the timeout signal to an arbitrary slot. This is possible because Qt runs an event loop that can call your method at a later stage.


Answer URL
https://docs.python.org/3/library/asyncio.html
