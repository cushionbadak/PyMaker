Natural Text
If you follow the simple  ->  ->  process for compiling python from source code, you end up with a very large install that includes a whole lot of files that are not necessary for a functional python environment.  eg: All  files are left in the installation (not just the  or  files), all the unit tests are carried over for each library in the lib folders, man pages are included, etc.Is there a canned way (make option?) to ignore or strip out the 'unnecessary' files during the install process so you are left with a minimalist, but fully functional, python distribution?If no pre-made procedure, what files can be stripped out, while being certain that the installation will still work on the machine it was installed?
It may be instructive to look at Debian's  package ().  When in doubt, always look to see what others, especially the experts, are doing...From  there:The  variables are parsed out from , which of course doubles as the package  but also thus becomes the authority on which modules to include.Interesting stuff, I'd never looked at this before now.  As for your question, the answer does seem that no, there isn't really a minimal target included in Python, but perhaps you could take the same approach Debian does to achieve your aims.
There is no such option - and it is a good thing keeping the installation as it is (perhaps you can chop of the test files manually). The .py files are handy for debugging. Apart from that: you really want to keep the full installation as it is. Dealing with stripped down Python installations as we see it on various Linux distributions is often a pain in the *.
Such options (if they exist in the software itself) are usually found in the  script. Check .Alternatively, you could try removing  files if an identically named  file exists. You can also remove the  files. Removing  and  files would save 72396 kB under  (that's around 47%) on my Python 2.7.3 installation.
Note Python has built‑in modules, the Python executable, standalone, will work fine. You may remove any unneeded modules, it's just up to you (or someone else) to determine which ones won't be required. Be aware of each module dependencies though.Some modules are built‑in and so always there. To get the list of built‑in modules, dump the content of sys.builtin_module_names.Ex, with a standalone Python 3.4.1 executable, compiled on an Ubuntu platform:This tells:There are private modules, while still 13 public modules. All is built in the Python executable, standalone.As already mentioned, you can remove any  and  files, as for a module to work, all is required, is the  files.


Answer URL
https://docs.python.org/3/library/sys.html#sys.builtin_module_names
