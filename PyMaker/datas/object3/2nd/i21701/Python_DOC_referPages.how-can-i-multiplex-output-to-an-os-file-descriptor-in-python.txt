Natural Text
The  mechanism uses an underlying file descriptor, instead of a file-like object, to write its . I need to capture both the  and  while still displaying them to the console.How can I create a file descriptor that Popen can use that will allow me to do this?
Just a bit of context:  uses the raw file descriptors of the stdin, stdout, stderr objects you specify, because it passes them down to POSIX. If you use , then it will create a new pipe with . Also,  reads until the end of the stream, which may not be desirable if you want to pipe the data somewhere else.Since you want to print the output to stdout, I assume it's text output. You will need to use ,  or  in  for  to treat the file as text (see docs).The same technique can be used for manipulating stderr, for example, by passing  to . Note that you can also pipe from your own stdin just by passing it directly:After all, the standard streams just wrap file descriptors. If reading until the end of the line is unsuitable for the type of output you are expecting, you can just  a very short buffer.Working simultaneously with stderr and stdoutIf you need both stdout and stderr, you come to the problem that you can only read from one at a time.One possibility would be to use  to make the pipes non-blocking, so that any  method returns immediately if there is no data. This allows you to alternate between the streams.Another possibility, is to have two separate threads process stdout and stderr; but there is a simpler way to achieve this by means of the  module:This is much less CPU consuming than constantly looping in the host process to pipe data to other streams, as  is called only when needed.


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.Popen.stdout
https://docs.python.org/3/library/asyncio-subprocess.html#subprocess-using-transport-and-protocol
