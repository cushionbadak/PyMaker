Natural Text
I want to mock out methods on any instance of some class in the production code in order to facilitate testing. Is there any library in Python which could facilitate this?Basically, I want to do the following, but in Python (the following code is Ruby, using the Mocha library):The important thing to note from above is that I need to mock it out on the class level, since I'm actually need to mock out methods on an instance created by the thing I'm testing.Use Case:I have a class  which calls a method on an instance of . I want to mock out the  method to return some constant. How do I do this inside a test without having to put a special case within the  code to check for what environment it's running in.Example of what I wanted in action:
Easiest way is probably to use a class method. You really should use an instance method, but it's a pain to create those, whereas there's a built-in function that creates a class method. With a class method, your stub will get a reference to the class (rather than the instance) as the first argument, but since it's a stub this probably doesn't matter. So:Note that the signature of the lambda must match the signature of the method you're replacing. Also, of course, since Python (like Ruby) is a dynamic language, there is no guarantee that someone won't switch out your stubbed method for something else before you get your hands on the instance, though I expect you will know pretty quickly if that happens.Edit: On further investigation, you can leave out the :I was trying to preserve the original method's behavior as closely as possible, but it looks like it's not actually necessary (and doesn't preserve the behavior as I'd hoped, anyhow).
Needing to mock out methods when testing is very common and there are lots of tools to help you with it in Python. The danger with "monkey patching" classes like this is that if you don't undo it afterwards then the class has been modified for all other uses throughout your tests.My library mock, which is one of the most popular Python mocking libraries, includes a helper called "patch" that helps you to safely patch methods or attributes on objects and classes during your tests.The mock module is available from:http://pypi.python.org/pypi/mockThe patch decorator can be used as a context manager or as a test decorator. You can either use it to patch out with functions yourself, or use it to automatically patch with Mock objects that are very configurable.This handles the unpatching for you automatically. You could get away without defining the mock function yourself:
I don't know Ruby quite well enough to tell exactly what you're trying to do, but check out the  method. If you define it in your class, Python will call it when code tries to access any attribute of your class that isn't otherwise defined. Since you want it to be a method, it will need to create a method on the fly that it returns.Also note that  needs to not use any other undefined attributes of your class, or else it will be infinitely recursive, calling  for the attribute that doesn't exist.If this is something you only want to do from your test code, not the production code, then put your normal class definition in the production code file, then in the test code define the  method (unbound), and then bind it to the class you want:I'm not sure how this would react with a class that was already using  (as opposed to ,  is called for all attributes whether or not they exist).If you only want to do this for specific methods that already exist, then you could do something like:Or if you really wanted to be elegant, you could create a wrapper function to make doing multiple methods easy:
Mock is the way to do it, alright.It can be a bit tricky to make sure you're patching the instance method on any instances created from the class.Referenced in the docs, at the para starting "To configure return values on methods of instances on the patched class..."


Answer URL
https://docs.python.org/3/library/unittest.mock.html#patch
