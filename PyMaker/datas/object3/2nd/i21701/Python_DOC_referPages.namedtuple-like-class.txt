Natural Text
I find myself writing this class often in my python code when I need a quick single use class.The basic idea is so I can do quick things like this:Of course this doesn't scale well and adding methods is just insane, but even so I have enough data-only throw-away classes that I keep using it.This is what I thought namedtuple was going to be.  But the namedtuple's syntax is large and unwieldy.Is there something in the standard library I haven't found yet that does this as well or better?Is this bad bad style? or does it have some hidden flaw?updateTwo concrete example to show why I don't just use a dict.  Both of these examples could be done with a dict but it obviously non-idiomatic.
There is a python recipe for this (It just updates the instance's dict instead of calling setattr)Recipe 52308
From Python 3.3 and afterwards, you can use types.SimpleNamespace:The builtin type is roughly equivalent to the following code:updateStarting with Python 3.7, you can use the dataclass module:You can use this as follows:By default, it incorporates equality testing and a nice looking repr:
This is my solution to this problem. Beautiful syntax, immutable (at least without resorting to some nasty object.setattr() gymnastics), lightweight and pretty-printable. Although there is nothing you can do with this that you cannot do with a dict, has a really nice symmetry withand overall is just so much cleaner than
What you have is a perfectly reasonable prototype, but you're right that it doesn't scale.If you like using them, but want to have a path to better code later, here's what I'd suggest:every time you do that, subclass Structure:later, when you want a "real" class, replace the superclass with something like strongbox.Strongbox (example usage) that provides that same constructor and attribute interface, but constrains which slots you can fill in.A discipline like this only costs you one extra line up front, and won't break your code if you want more power later.
You may want to look at Records by George Sakkis.  It has worked well for me as a "mutable named tuple."


Answer URL
https://docs.python.org/3/library/types.html#types.SimpleNamespace
