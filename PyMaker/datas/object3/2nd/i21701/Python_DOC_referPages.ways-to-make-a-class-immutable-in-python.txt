Natural Text
I'm doing some distributed computing in which several machines communicate under the assumption that they all have identical versions of various classes. Thus, it seems to be good design to make these classes immutable; not in the sense that it must thwart a user with bad intentions, just immutable enough that it is never modified by accident.How would I go about this? For example, how would I implement a metaclass that makes the class using it immutable after it's definition?Alternate methods is also fine, such as a decorator/function that takes a class and returns an immutable class.
If the old trick of using  does not fit you, this, or some variant of thereof can do: simply write the  method of your metaclass to be your guard. In this example, I prevent new attributes of being assigned, but allow modification of existing ones:
Don't waste time on immutable classes.There are things you can do that are far, far simpler than messing around with trying to create an immutable object.Here  are five separate techniques.  You can pick and choose from among them.  Any one will work.  Some combinations will work, also.Documentation.  Actually, they won't forget this.  Give them credit.Unit test.  Mock your application objects with a simple mock that handles  as an exception.  Any change to the state of the object is a fail in the unit test.  It's easy and doesn't require any elaborate programming.Override  to raise an exception on every attempted write..  They're immutable out of the box. .  It's immutable, but you do need to implement a few methods to make it work.
If you don't mind reusing someone else's work:http://packages.python.org/pysistence/Immutable persistent (in the functional, not write to desk sense) data structures.Even if you don't use them as is, the source code should provide some inspiration. Their expando class, for example, takes an object in it's constructor and returns an immutable version of it.


Answer URL
https://docs.python.org/3/reference/datamodel.html#slots
https://docs.python.org/3/reference/datamodel.html#object.__setattr__
