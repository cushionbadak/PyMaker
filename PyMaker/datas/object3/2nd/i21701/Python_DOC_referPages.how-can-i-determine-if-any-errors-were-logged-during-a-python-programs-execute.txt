Natural Text
I have a python script which calls log.error() and log.exception() in several places.  These exceptions are caught so that the script can continue to run, however, I would like to be able to determine if log.error() and/or log.exception() were ever called so I can exit the script with an error code by calling sys.exit(1).  A naive implementation using an "error" variable is included below.  It seems to me there must be a better way. 
I think that your solution is not the best option. Logging is one aspect of your script, returning an error code depending on the control flow is another. Perhaps using exceptions would be a better option.But if you want to track the calls to log, you can wrap it within a decorator. A simple example of a decorator follows (without inheritance or dynamic attribute access):
I had the same issue as the original poster: I wanted to exit my Python script with an error code if any messages of error or greater severity were logged. For my application, it's desirable for execution to continue as long as no unhandled exceptions are raised. However, continuous integrations builds should fail if any errors are logged.I found the  python package, which does just what we need. See the GitHub, PyPI page, and docs.Below is the code I used:
You can employ a counter.  If you want to track individual exceptions, create a dictionary with the exception as the key and the integer counter as the value.
You can check logger._cache. It returns a dictionary with keys corresponding to the numeric value of the error level logged. So for checking if an error was logged you could do:


Answer URL
https://docs.python.org/3/library/logging.html
