Natural Text
How can I write a / block that catches all exceptions?
You can but you probably shouldn't:However, this will also catch exceptions like  and you usually don't want that, do you? Unless you re-raise the exception right away - see the following example from the docs:
Apart from a bare  clause (which as others have said you shouldn't use), you can simply catch :You would normally only ever consider doing this at the outermost level of your code if for example you wanted to handle any otherwise uncaught exceptions before terminating.The advantage of  over the bare  is that there are a few exceptions that it wont catch, most obviously  and : if you caught and swallowed those then you could make it hard for anyone to exit your script.
You can do this to handle general exceptions
Very simple example, similar to the one found here:http://docs.python.org/tutorial/errors.html#defining-clean-up-actionsIf you're attempting to catch ALL exceptions, then put all your code within the "try:" statement, in place of 'print "Performing an action which may throw an exception."'.In the above example, you'd see output in this order:1) Performing an action which may throw an exception.2) Finally is called directly after executing the try statement whether an exception is thrown or not.3) "An exception was thrown!" or "Everything looks great!" depending on whether an exception was thrown.Hope this helps!
To catch all possible exceptions, catch . It's on top of the Exception hierarchy:Python 3:https://docs.python.org/3.5/library/exceptions.html#exception-hierarchyPython 2.7:https://docs.python.org/2.7/library/exceptions.html#exception-hierarchyBut as other people mentioned, you should usually not do this, unless you have a very good reason.
I've just found out this little trick for testing if exception names in Python 2.7 . Sometimes i have handled specific exceptions in the code, so i needed a test to see if that name is within a list of handled exceptions.
There are multiple ways to do this in particular with Python 3.0 and aboveApproach 1 This is simple approach but not recommended because you would not know exactly which line of code is actually throwing the exception:Approach 2This approach is recommended because it provides more detail about each exception. It includes:Line number for your codeFile nameThe actual error in more verbose wayThe only drawback is tracback needs to be imported.
It is worth mentioning this is not proper Python coding. This will catch also many errors you might not want to catch.


Answer URL
https://docs.python.org/3/library/exceptions.html?highlight=BaseException
