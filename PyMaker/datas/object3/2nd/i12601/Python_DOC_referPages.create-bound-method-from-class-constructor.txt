Natural Text
I have a dictionary like class with methods that return views of its keys, values and items. The methods for doing this are about as simple as you can get:However, this seems pointless to create a method for something so simple; all I am doing is passing  onto yet another callable. I would prefer to simply treat the class constructor for  as a bound method. Doing the following creates a nested class (which is good because sometimes that is exactly what you want), but it looks closer to what I would want to do:Is there anything builtin to Python or its standard library to do this? Maybe something like this:I feel like there should be something in  that would do the job, but there isn't anything that pops out as the right answer at first look. Maybe , but the name isn't very descriptive of what I'm trying to do.Will I just need to hand roll a custom descriptor class to make something like this work?NOTE:For work I often need to use Python 2.7, so although Python 3.x answers are still appreciated (and useful), they probably won't totally mitigate the issue for me personally. However, they may help someone else with this question, so please still include them!
 is what you are looking for. This creates a method where  is the first argument.You can also specify other arguments, like if you wanted to pass  to , you would do .But do note this is only available in Python 3.4 and above.
After some thought (and some help from this SO post here), I have come up with another solution that works across Python versions 2 and 3, although it is less idiomatic. It definitely isn't very clear what is happening like it is when using  as @Artyer suggests. Really, this is what Python is doing under the hood whenever a new instance is created, but made more explicit; you're seeing how the sausage is made. :/Better yet, we can do it in  to be more certain that inherited classes get it:If you don't like the relatively undocumented nature of , you can use  instead:NOTE: For Python 2/3 compatibility, you should not use the third optional  argument for ; it is exists in Python 2, but is removed in Python 3 apparently.


Answer URL
https://docs.python.org/3/library/functools.html#functools.partialmethod
