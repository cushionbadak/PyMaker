Natural Text
The goal: e.g. given finite iterator  turn into  — iterator through pairs of consecutive items with special last item. function exists in the documentation as example of  usage:But  I want additionally add yet another item to the end of iterator (if it is finite) with some default value for the second element of pair (e.g., ).How to efficiently implement this additional functionality?
Using :When one of the input iterators runs out,  pads it with a filler value, which defaults to .
As for adding  at the end, as user2357112 already answered, you can just use  so one already exhausted iterator is not stopping the whole sequence (so the  iterator can still yield the last element).For all other situations, e.g. if you want to add further elements at the end, you can just make a generator function itself. All the  function are already lazy generators, only producing new results when you request the next element in the result, and you can easily consume those from within a generator.Let’s say, you need  to yield a sentinel value  at the end, then you could simply yield the results from  and then yield another item:The  syntax actually came with Python 3.3. For earlier versions, especially Python 2, you would need to do that manually by looping over the items and yielding them again:
You can create a generator:Results:For an infinite iterable:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
