Natural Text
The following Python 3 code loops through a list of strings and uses a regex to replace some text in each string.The strings here are straightforward but they are likely to be more complex and far more numerous in a real-world situation, hence my decision to use  rather than .This seems to work as expected:In real life there will be a large number of strings, which would make for a messy block of code. I thought there might be a neater, more Pythonic way to do this by defining the regex pairs in a  and using a list comprehension. So I tried this:This doesn't work, in that it doesn't return a list of strings with substituted text, but I don't understand why it doesn't work.My question/s are:What am I doing wrong in the above example?Is there a better way to approach the problem of doing a large number of substitutions involving long-ish strings?(NB I may have missed the obvious here as I've only been looking at Python for a couple of days; my background is in R and Perl.) 
List comprehensions with two lists are nasty. They're error-prone and hard to read. Why not simply use two loops?:['this line has no hits', 'a letter to jerry from peter', 'today clyde went to school', 'sally made some cake']
You need to use another functional programming concept, reduce. You want to apply each key-value in mydict, one after the other, to the same string, resulting in one, final string. When this is the case (using a multi-valued dict/list/set to obtain a single answer), you use reduce. Like so:And in list comprehension form:There's some good basic stuff on functional programming constructs (reduce, list comprehension, filter): https://docs.python.org/2/tutorial/datastructures.html#functional-programming-tools


Answer URL
https://docs.python.org/3/library/functions.html?highlight=all#all
