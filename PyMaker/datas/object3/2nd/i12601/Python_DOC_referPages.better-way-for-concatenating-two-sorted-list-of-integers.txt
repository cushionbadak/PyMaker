Natural Text
Lets assume I have one list and another tuple both of them are already sorted:What I would need is to add all the elements from B into A in such a way that A remains sorted.Solution I could come with was:assuming A of size m, and B of size n; this solution would take O(mn) in worst case, how can I make it perform better ?
A simple way would be heapq.merge:Output:Some timings using the other  solution:If you wanted to roll your own this is a bit faster than merge:Some timings:
 module "provides support for maintaining a list in sorted order without having to sort the list after each insertion":This solution does not create a new list.Please note that  is equivalent to Even though the search is fast (O(log n)), the insertion is slow (O(n)).
Lots of good discussion in this post! Arguing about timing is hard, so I wrote some timing script. It's quite rudimentary but I think it will do for now. I've attached the results too.This is the result:It's clear that modifying the list is the major bottleneck, so creating a new list is the way to go.
Here is a solution in :
You need to perform a merge. But the "traditional" merge generates a new list; so you need some modifications in order to expand one list.
edited


Answer URL
https://docs.python.org/3/library/bisect.html
