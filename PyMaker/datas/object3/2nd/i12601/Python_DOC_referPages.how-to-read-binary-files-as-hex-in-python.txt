Natural Text
I want to read a file with data, coded in hex format:the files contains >100.000 such bytes, some more than 1.000.000 (they comes form DNA sequencing)I tried the following code (and other similar):This gives each byte separate "aa" "01" "f1" etc, that is perfect for me!This works fine up to (in this case) byte no 905 that happen to be "1a". I also tried the ord() function that also stopped at the same byte.There might be a simple solution?
Simple solution is :This just gets you a  of the hex values, but it does it much faster than what you're trying to do. If you really want a bunch of length 2 strings of the hex for each byte, you can convert the result easily:which will produce the list of len 2 s corresponding to the hex encoding of each byte. To avoid temporary copies of , you can use a similar but slightly less intuitive approach that avoids slicing by using the same iterator twice with :Update:For people on Python 3.5 and higher,  objects spawned a  method, so no module is required to convert from raw binary data to ASCII hex. The block of code at the top can be simplified to just:
If the file is encoded in hex format, shouldn't each byte be represented by 2 characters?  So 
Just an additional note to these, make sure to add a break into your .read of the file or it will just keep going.
Thanks for all interesting answers!The simple solution that worked immediately, was to change "r" to "rb",so:The code in this case is actually only two binary bites, so one byte contains four data, binary; 00, 01, 10, 11.Yours!


Answer URL
https://docs.python.org/3/library/stdtypes.html#bytes.hex
