Natural Text
I'm trying to create a circle class using the magic methods  and , and I seem to have my  working, but when I implement  (which should only allow the values for  and  to be set if the value is an int, and raise an  when the user tries to set the attributes , , and  to ), my  throws the maximum recursion error. When I comment it out, the  then works just fine. With  commented out, the testing code:prints out:
Improved solutionBased on the discussion here, this is a shorter and improved version. Achieves the same as the original solution:SolutionAvoiding  all together and using a flag  to signal if the  was already run would work:The output looks good:VariationThis would allow setting an attribute with any other name:But it would not be there:This implementation of  would avoid this:When to use ?When you access an attribute that does not exist, Python raises an :Python calls   only if an attribute does not exist.One use case is a wrapper around another object instead of using inheritance.For example, we can define a  that uses an list but allows only white-listed attributes:We can use it just like list:Append elements:But we cannot use any other attribute except the ones defined in :What the docs says:Called when an attribute lookup has not found the attribute in the usual places (i.e. it is not an instance attribute nor is it found in the class tree for self). name is the attribute name. This method should return the (computed) attribute value or raise an  exception.Note that if the attribute is found through the normal mechanism,  is not called. (This is an intentional asymmetry between  and .) This is done both for efficiency reasons and because otherwise  would have no way to access other attributes of the instance. Note that at least for instance variables, you can fake total control by not inserting any values in the instance attribute dictionary (but instead inserting them in another object). See the  method below for a way to actually get total control over attribute access.
You may be interested in the couple of problems you had in your code that were causing the problem.You cannot set the following directly in  because the assignments trigger a call to , which sets only  and . Because of this, these attributes were never set.You are not checking for  in . This caused  to be ignored silently, and then when  was accessed to set  in ,  called  called  called  and so on (because  was not set), which caused the recursion.Here is fixed code. Changes have been marked below with  in comments.


Answer URL
https://docs.python.org/3/reference/datamodel.html?highlight=__getattr__#object.__getattr__
