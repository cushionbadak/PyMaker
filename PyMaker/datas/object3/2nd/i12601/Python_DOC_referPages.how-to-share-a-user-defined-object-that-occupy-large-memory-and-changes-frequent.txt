Natural Text
I've tried module multiprocessing Manager and Array , but it can't meet my needsIs there a method just like shared memory in linux C?
Not as such.Sharing memory like this in the general case is very tricky.  The CPython interpreter does not relocate objects, so they would have to be created in situ within the shared memory region.  That means shared memory allocation, which is considerably more complex than just calling .  In increasing order of difficulty, you would need cross-process locking, a per-process reference count, and some kind of inter-process cyclic garbage collection.  That last one is really hard to do efficiently and safely.  It's also necessary to ensure that shared objects only reference other shared objects, which is very difficult to do if you're not willing to relocate objects into the shared region.  So Python doesn't provide a general purpose means of stuffing arbitrary full-blown Python objects into shared memory.But you can share  objects between processes, and  supports the buffer protocol, so you can wrap it up in something higher-level like / or anything else with buffer protocol support.  Depending on your precise modality, you might have to write a small amount of C or Cython glue code to rapidly move data between the mmap and the array.  This should not be necessary if you are working with NumPy.  Note that high-level objects may require locking which mmap does not provide.


Answer URL
https://docs.python.org/3/c-api/memory.html#memory-interface
https://docs.python.org/3/library/mmap.html
https://docs.python.org/3/c-api/buffer.html#bufferobjects
https://docs.python.org/3/library/mmap.html
