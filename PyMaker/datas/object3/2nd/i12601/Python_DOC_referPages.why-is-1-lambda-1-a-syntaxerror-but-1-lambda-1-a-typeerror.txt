Natural Text
In the interactive interpeter the following two expressions raise different errors depending on the addition of parenthesis: results in a   results in a I understand the differences  and , that is, what they essentially mean, but I don't really understand why exactly this happens. I have tried reading the Grammar, but it really is all Greek to me. The  (which I would of though denotes expressions) is defined as:While lambdas:These did not help much. The same applies for Python 2.x and for 3.x. So, why do parenthesis do that alters the exception result in this context?
Why does  raise a  ?The syntax error is raised because the grammar doesn't support it. From the Full Grammar Specification we can see that the  rule, which is the basic expression element and not the ill-named , has the form of:where the vertical bar  is used to seperate alternative substitutions for this rule. As a result, each expression must either begin with an  or a . If a  is not found in the beginning of an expression a  is appropriately raised during parsing:[Note: From the  member of  we can generate practically every other expression in Python by substitutions]Why does  raise a  ?Because parenthesis are used as :where  is:The parenthesis here will isolate the  from the rest of the expression and confine it in an expression () of its own. Since the new expression is  it is syntactically valid (since  is an element at the beginning of the expression). As such, there is no rule which can trigger a . (if you did  the same  is triggered).Additionally, we can actually verify the fact that  is a new  rule by looking at (the relevant section) of the list-based parse tree and cross-referencing it with the numbers contained in . We can generate the parse tree from:and by viewing the definition for  we can see that  defines a new .As a result, the expression will be parsed and consequently compiled with no issues:It is during execution were the evaluation will happen and Python will discover that addition is unsupported for the objects of  and . When it discovers it, a  is raised: 


Answer URL
https://docs.python.org/3/reference/expressions.html
https://docs.python.org/3/reference/grammar.html
https://docs.python.org/3/reference/introduction.html#notation
https://docs.python.org/3/reference/expressions.html#boolean-operations
https://docs.python.org/3/reference/expressions.html#lambda
https://docs.python.org/3/reference/expressions.html#atoms
https://docs.python.org/3/reference/expressions.html#grammar-token-parenth_form
