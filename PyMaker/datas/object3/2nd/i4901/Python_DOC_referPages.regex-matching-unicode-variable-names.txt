Natural Text
In Python 2, a Python variable name contains only ASCII letters, numbers and underscores, and it must not start with a number. Thus,will find a matching Python name in the  .In Python 3, the letters are no longer restricted to ASCII. I am in search for a new regex which will match any and all legal Python 3 variable names.According to the docs,  in a regex will match any Unicode word literal, including numbers and the underscore. I am however unsure whether this character set contains exactly those characters which might be used in variable names.Even if the character set  contains exactly the characters from which Python 3 variable names may legally be constructed, how do I use it to create my regex? Using just  will also match "words" which start with a number, which is no good. I have the following solution in mind,where  is the "and" operator (just like  is the "or" operator). The parentheses will thus match any word literal which at the same time is not a number. The problem with this is that the  operator does not exist, and so I'm stuck with no solution.EditThough the "double negative" trick (as explained in the answer by Patrick Artner below) can also be found in this question, note that this only partly answers my question. Using  only works if I am guaranteed that  exactly matches the legal Unicode characters, plus the numbers 0-9. I would like a source of this knowledge, or some other regex which gets the job done.
You can use a double negative -  is anything that  is not - just disallow it to allow any :essentially using any not - non-wordcharacter except 0-9 followed by any word character any number of times.Doku: regular-expression-syntax
You could try using Which will not partial match invalid variable names Alternatively, if you don't need to use regex.  will probably do what you want.


Answer URL
https://docs.python.org/3/library/re.html
https://docs.python.org/3/library/re.html#regular-expression-syntax
