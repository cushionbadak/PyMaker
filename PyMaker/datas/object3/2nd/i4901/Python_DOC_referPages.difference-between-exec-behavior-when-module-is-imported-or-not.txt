Natural Text
I am running to of the following programs. Importantly, imagine that there is  file in the directory where both these programs are located.The first:The second:The first snippet raises  as expected (after all, the directory where mymodule is located is not in path). The second snippet, however, does not, even though mymodule is also not in its path and the environment I am giving it is empty.My question is why
According to The import system - The module cache,The first place checked during import search is . This  mapping serves as a cache of all modules that have been previously  imported, including the intermediate paths. So if foo.bar.baz was  previously imported, sys.modules will contain entries for foo,  foo.bar, and foo.bar.baz. Each key will have as its value the  corresponding module object.During import, the module name is looked up in  and if  present, the associated value is the module satisfying the import, and  the process completes. However, if the value is None, then a  ModuleNotFoundError is raised. If the module name is missing, Python  will continue searching for the module.The second snippets successfully imports ; it's cached in , so no search in other places occurs.
This has nothing to do with , and is a simple misunderstanding about what is available on your  when running a script, and when Python looks for files to load.You state:I am running to of the following programs. Importantly, imagine that there is  file in the directory where both these programs are located.[...]The second snippet, however, does not, even though mymodule is also not in its pathThe module is on its path. The directory your script is located in, is added at the start of the module search path. See Command line:Execute the Python code contained in script, which must be a filesystem path (absolute or relative) referring to either a Python file, a directory containing a  file, or a zipfile containing a  file.[...]If the script name refers directly to a Python file, the directory containing that file is added to the start of , and the file is executed as the  module.Bold emphasis mine.So, , which you state is located in the same directory as the scripts you are running, is on the path.Once loaded, modules stay loaded.  will only look at the module search path if there is not already a module in  by that name. It doesn't matter if you use  or not to do the import.From the  statement documentation:The basic  statement (no from clause) is executed in two steps:find a module, loading and initializing it if necessarydefine a name or names in the local namespace for the scope where the  statement occurs.The if necessary part is the important bit.Further, from The import system:The  statement combines two operations; it searches for the named module, then it binds the results of that search to a name in the local scope.[...]When a module is first imported, Python searches for the module and if found, it creates a module object, initializing it.and from The module cache:The first place checked during import search is . This mapping serves as a cache of all modules that have been previously imported, including the intermediate paths. So if  was previously imported,  will contain entries for , , and . Each key will have as its value the corresponding module object.During import, the module name is looked up in  and if present, the associated value is the module satisfying the import, and the process completes.So by the time your  code runs, the first  had already succeeded and mymoduleimport mymodule` finds that object, and the search ends.


Answer URL
https://docs.python.org/3/reference/import.html#the-module-cache
https://docs.python.org/3/library/sys.html#sys.modules
https://docs.python.org/3/library/sys.html#sys.modules
https://docs.python.org/3/using/cmdline.html#command-line
https://docs.python.org/3/reference/simple_stmts.html#import
https://docs.python.org/3/reference/import.html#importsystem
https://docs.python.org/3/reference/import.html#the-module-cache
