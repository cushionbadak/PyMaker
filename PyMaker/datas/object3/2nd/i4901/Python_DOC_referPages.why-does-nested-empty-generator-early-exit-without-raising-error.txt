Natural Text
I am facing a strange behavior with nested generators.I would expect the  function to raises an error, as I am calling  around an empty generator. But this is not the case, the functions is leaving from nowhere, without raising or printing anything.That seems to violate the principle of least astonishment, isn't it?
Technically, you don't have an error; you have an uncaught  exception, which is used for flow control. The call to , which takes an arbitrary iterable as its argument, catches the exception raised by  for you. loops work similarly; every iterator raises  at the end, but the  loop catches it and ends in response.Put another way, the consumer of an iterable is responsible for catching . When  calls , it lets the exception bubble up. The call to  catches it, but you don't when you call  explicitly.Note that PEP-479 changes this behavior. Python 3.5 provides the new semantics via , Python 3.6 makes provides a deprecation warning, and Python 3.7 (due out Summer 2018) completes the transition. I refer the reader to the PEP itself for further details.
Once an iterator reaches its end, it raises  which... stops the iteration, so  constructs an empty list.


Answer URL
https://docs.python.org/3/glossary.html#term-generator
https://docs.python.org/3/library/functions.html#next
