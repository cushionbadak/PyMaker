Natural Text
I was trying to sort few values in list using Python's Counter from collection module. But it gives weird result when Output is strange, as it seems to have shuffle 'aa' to the first place, then 'a' and 'aaa' at last. Ideally, it should have been 'a' then 'aa' then 'aaa'What is the reason behind this and how would you rectify the sameEdit:Most people understand the question incorrectly, Hence I am pushing some clarifications. The goal is to sort the number of words in list based on it's occurances. Let's say list . The final output by my above code would be  then  then  then  which is correct.but problem is when you supply same characters with same occurences, python misbehaves. As the Input is  , I expected output to be  then  then  . But python algorithm would never know as every word occurred single time.But if that is the case, then why did python didn't printed  then  then  (i.e in same order it was inputted) giving benefit of doubt. Python sort did actually swapped . WHY?
 is a subclass of . It is an unordered collection.The get the sorting order you want, you can update your code like -This gives -
 does a stable sort. That means for ties, the order of items will be the same as the order they appear in the original input. Since your  is unordered, the input to  is in some undefined order. If you want you can sort by the key, and then the value:Or (probably better) have your sort function return a tuple as the sort key:An (even better!) version utilizing :
Here's one way you can ensure your ordering remains unchanged.As previously mentioned dictionaries are not deemed to be ordered. The result will be a sorted list of tuples.


Answer URL
https://docs.python.org/3/howto/sorting.html#sort-stability-and-complex-sorts
https://docs.python.org/3/library/operator.html#operator.itemgetter
