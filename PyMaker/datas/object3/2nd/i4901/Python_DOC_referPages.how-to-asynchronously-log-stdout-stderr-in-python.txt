Natural Text
I have a function (which I cannot change) and it prints data to stdout/stderr. I need to log the output of this function. My first idea was to replace  with a buffer in the form of  and then process its contents. That worked well, but the problem is, when the function fails, it prints the error message and exits the current process. In that case, contents of the buffer are lost, because my code after function call is never executed.So my idea was to somehow watch the buffer asynchronously and process its contents immediatelly when there are data to be read. I tried a solution with  and its add_reader method, but that seems to not support  and not even a regular file.This is my first try to just asynchronously print the stdout:That fails withIs there any solution to this problem? At least I need to clarify if my approach makes sense.UPDATE:I have discovered standard module , which can call a function upon interpreter exit. This is another way to solve my problem.
You can create a custom subclass of  and replace  with an instance of your custom class.  The  method of your class will be called whenever output is sent to .  Optionally you can forward all output to the original stdout:This aproach wil be completely synchronous â€“ no threads or asynchronous I/O needed.


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.add_reader
