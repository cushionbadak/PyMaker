Natural Text
It seems that I am still missing some basics of python. I was trying to understand submodules importing, which I feel I have not understood yet. But I have also stumbled upon something new.I am having following two packages in two different PyDev projects:In , I can do . But in  and , I cannot do  (Eclipse says "unresolved imports"). In , I can do  or . In , I cannot do . (In fact I never saw use of  in  statement as prefix to the module. Earlier I only came across  and , but never saw  and .) Why this might be happening? I must be unaware some context which is causing this behaviour. But then I dont know what is it?PS: I am using Python 3.4
There is a subtle different between how Python is treating both of those packages. is treated as a namespace package in that it does not contain an  file. is treated as a regular package in that it does contain an  file.So I'll give a quick breakdown of why each step is happening:In mod1, I can do import mod2.This is happening due to how namespace packages are handled using absolute imports. You're most likely executing  from the directory in which the file is stored, right (in my attempt to re-create your folder structure and test it myself locally, I did the same)? So  becomes your current working directory with your  file being at the root of that directory.With namespace packages, Python will default look to  in an attempt to find the imports you have requested. Since your current working directory is automatically added to and included in , Python can successfully find your  request without any difficulty.Thanks to ShadowRanger for correcting my initial response to this where I had misunderstood exactly how Python is including the current working directory in its search.In init, I can do import .mody or from .mody import vary.This is because Python is treating this as a regular package. The name of your regular package in this case is . When you use the  notation, you are asking Python to start searching for the import from the current package (which in this case is your parent ). So you have to use  to find the  package within the current package.If you used  then it would import from the parent of the current package and so on.The dot notation is useful as you are explicitly declaring that you wish to search from the current package only - so if there was another  package on your , Python would know which one to choose.But in init and modx, I cannot do import mody (Eclipse says "unresolved imports").With  this is because you have not used the dot notation and have not told Python that you wish to search for these modules in the current package. So it's looking to the Python standard library and to your  for these packages and not finding them (hence your error in Eclipse). By using the dot notation, you are stating that you wish to include the current package in the search and, thus, Python will then be able to locate those files.Using the dot notation like this, to import via , is to use a relative import.With  you also have to use a relative import (see next section).In modx, I cannot do import .mody. Why this might be happening?This is because you're not using a relative / absolute import. You'll be using a relative import in this case. A relative import is the  syntax you've seen already. Using a relative or absolute import behaviour is default in Python.It is now the default behaviour as, with the old Python  behaviour, suppose Python's own standard library had a package called . When you'd use  it would previously have imported  from your package and not the standard library. This wasn't always desirable. What if you specifically wanted the standard library version?So now your imports must be made using  or  syntax so as the import is very clear. If you use  and not the  syntax, Python will assume it's a standard library or  import.By the way, sources for a lot of the above information came from the following sites:https://docs.python.org/3/reference/import.htmlhttps://docs.python.org/2.5/whatsnew/pep-328.html
Python modules are optional "additions" to Python that can be imported using the  command like so:To import individual parts of the package, use  like so:If you want to import every part of a module and use it without , use:from package1 i


Answer URL
https://docs.python.org/3/reference/import.html#submodules
https://docs.python.org/3/reference/import.html
