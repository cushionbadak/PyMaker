Natural Text
I want to iterate through a list of key value pairs as efficiently as possible. The aim is to iterate through the data set to find the key value pair containing the key corresponding to the code I'm trying to find, this is nested in another for loop which is iterating through a set of codes.my logos object looks something like:where the keys correspond to codes and the value is the data I want to extractMy method at the moment works fine and reasonably fast but I can't help but wonder if there isn't a cleaner/faster way of doing it
If you had one dict with all your keys this would be trivial and could be done with dict.pop(key[,default]). Having disjunct keys in several 1-key dicts in a list is a very bad choice of data structure - you should solidyfy them into one big dictionary to enable O(1) acces to the keys instead of manipulating your list into shape afterwards.Solution for a dict with multiple keys that will be vanquished from it if they are in your code-list: Output:When getting the data from your 3rd party:Output:
This should speed things up a bit should be the list of values you're looking for. It's definitely faster than your version, since it uses O(1) set lookup
This solution uses a list comprehension for an overall  solution:Output:


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.pop
