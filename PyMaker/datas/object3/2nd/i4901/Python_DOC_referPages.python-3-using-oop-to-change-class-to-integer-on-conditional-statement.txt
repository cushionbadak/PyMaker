Natural Text
Apologies for incorrect lingo, I am still new to this. I want to make a class initialiser that, using a conditional, will decide whether or not the instance of said class will collapse into a simple integer.Simplified Unworking Example:Any help would be very much appreciated!
 is the method used to control the creation of new objects (hence the name).  Here we check if  is zero in  and return an instance of the appropriate type.  In action:
You should use the magic method  for this.  is used as a factory where you can decide which class should be instantiated.
You don't.The behavior you desire is completely unexpected and somewhat bizarre. Calling  is expected to return an instance of . Doing anything else is confusing and unintuitive, which makes it difficult to read and understand any code invoking it.AlternativeIf you really need this behavior, create a factory method:Obviously, you need a better name than , but without any context, I can't give you any suggestions.Avoid the problem if possibleSince  is not a number and is generally not compatible with , it is also somewhat strange to store both  and  in the same variable.If all you're doing is converting to a string, then you don't need a class at all. A simple method outside of a class is the better alternative:If you're doing more than that, your calling code will probably end up looking something like this:This is somewhat silly: you write a method to choose the data type and then have to write specialized code for each possible result. You're not getting any benefits from having a function that returns the separate types here. I can think of two simpler alternatives:Just move the check to the calling code:If you go this route, you should also modify  to throw a  if , since that would be an invalid state for an  to be in.Modify  so that it works properly regardless of whether  is :ThenBut again, it's hard to provide recommendations without knowing how you're actually using it.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__new__
