Natural Text
This question already has an answer here:String with 'f' prefix in python-3.6                    5 answers                While writing , i used  prefix many times (). However, I have seen   () for the first time and I am not sure what is it doing. The output does not make any sense to me either. Can someone please explain what this  is doing here? 
A formatted string literal or f-string is a string literal that is prefixed with 'f' or 'F'.These strings may contain replacement fields, which are expressions delimited by curly braces {}.While other string literals always have a constant value, formatted strings are really expressions evaluated at run time.IN THIS CASE:The curly brackets around the string.punctuationC` locale'. To find out more, check out these Python docs and  references :-)
As per the python documentation:2.4.3. Formatted string literalsNew in version 3.6.A formatted string literal or f-string is a string literal that is  prefixed with  or . These strings may contain replacement  fields, which are expressions delimited by curly braces . While  other string literals always have a constant value, formatted strings  are really expressions evaluated at run time.There are multiple examples in the documentation, so I'll post a few of them and explain:Here the  introduces a conversion field.  calls The result is then formatted using the  protocol. The format specifier is passed to the  method of the expression or conversion result. An empty string is passed when the format specifier is omitted. The formatted result is then included in the final value of the whole string.Since it's formatted using the  protocol, the following are other use-cases:Even datetime objects:Taking the information above, let's apply it to your code:The line above is inserting  into the string at that location. According to the docs,  is:String of ASCII characters which are considered punctuation characters in the  locale.If you really want to dig deeper into this: What's the  locale?The C standard defines the locale as a program-wide property that may be relatively expensive to change. On top of that, some implementation are broken in such a way that frequent locale changes may cause core dumps. This makes the locale somewhat painful to use correctly.Initially, when a program is started, the locale is the  locale, no matter what the user’s preferred locale is. 
Those are various flags that modify string literal behaviour means raw string and  is for string interpolation See explanation from PEP:F-strings provide a way to embed expressions inside string literals, using a minimal syntax. It should be noted that an f-string is really an expression evaluated at run time, not a constant value. In Python source code, an f-string is a literal string, prefixed with 'f', which contains expressions inside braces. The expressions are replaced with their values. Some examples are:https://www.python.org/dev/peps/pep-0498/And the python docs:Regarding Both string and bytes literals may optionally be prefixed with a letter 'r' or 'R'; such strings are called raw strings and treat backslashes as literal characters. As a result, in string literals, '\U' and '\u' escapes in raw strings are not treated specially. Given that Python 2.x’s raw unicode literals behave differently than Python 3.x’s the 'ur' syntax is not supported.https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literalsRegarding A formatted string literal or f-string is a string literal that is prefixed with 'f' or 'F'. These strings may contain replacement fields, which are expressions delimited by curly braces {}. While other string literals always have a constant value, formatted strings are really expressions evaluated at run time.https://docs.python.org/3/reference/lexical_analysis.html#f-strings
This is just Python's new literal string interpolation (f-strings), available as of Python 3.6


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#f-strings
https://docs.python.org/3/library/string.html#string.punctuation
https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
https://docs.python.org/3/reference/lexical_analysis.html#f-strings
https://docs.python.org/3/reference/lexical_analysis.html#f-strings
