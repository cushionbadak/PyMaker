Natural Text
I'm working on the following code:Basically, I'm taking 3 items in  at a time, the code is bigger than that, but I'm doing a lot of things with them returning a value from it, then it takes the next 3 items from  and keep doing it till the end of this list.But now I have a problem, I need to identify each iteration, but they follow a rule:The first loop are from A, the second are from B and the third are from C.When it reaches the third, it starts over with A, so what I'm trying to do is something like this: are from A are from B are from Care from A are from B......The initial idea was to implement a identifier the goes from A to C, and each iteration it jumps to the next identifier, but when it reaches C, it backs to A.So the output seems like this:My bad solution:Create  multiply it by the len of  -> So the amount of A's, B's and C's are the same of  numbers that it needs to identify. Then inside my for loop I add a counter that adds +1 to itself and access the index of my list.But its too ugly and not fast at all. Does anyone know a faster way to do it?
Cycle, zip, and unpack:Output:
You can always use a generator to iterate over your identifiers:Initialise the identifiers:Then in your loop:
Based on Ignacio's answer fitted for your problem.You can first reshape your  into a  containing 3 elements:Note that it works since your list contains multiple of 3 elements (so you need to drop the last elements in order to respect this condition, ) - Understanding slice notationSee UPDATE section for a reshape that fits to your question.Then apply Ignacio's solution on the reshaped listUPDATEYou can use @NedBatchelder's chunk generator to reshape you array as expected:Then:Performances Your solution : 1.32 ms ± 94.3 µs per loopWith a reshaped list : 1.32 ms ± 84.6 µs per loopYou notice that there is no sensitive difference in terms of performances for an equivalent result.
You could create a Generator for the slices:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.cycle
