Natural Text
Right now, to integrate a function  with SymPy I would do the following:But this requires me to know beforehand what symbols I might need for a given function. But what if I plugged in a different function, with parameters, say, A, B, Y, Z, Q, W?Instead of manually assigning symbols in SymPy, is there a way to generically assign symbols - basically, my , based on the input function?Ideally
The problem is a bit ill-defined because, after all, you need to know something about the arguments of , right? For example,  should have at least one argument for the ; is it always the first argument, or the argument called , which may or may not be the first? Should the rest of arguments be given a specific sequence of names, such as , , etc. or instead use symbols with the name of the argument? What if the arguments have default values?I'll give one possible approach for a simple example, then you can choose how to implement it exactly for your case. Let's have this function:In order to extract information about the function arguments, you can use the  returns a  with information about the function arguments, you can check the docs to see if you need something else (e.g. to ignore parameters with default values). Now you can convert those to SymPy symbols:Here you could use a different strategy. For example, if you wanted to have the first argument be always  and the rest of arguments be always Greek letters (as long as you don't have too many arguments) you could do:You can manipulate  however you want to suit your needs. When you get get it right, you can call  as usual:Note that if you didn't make sure that  was in  you may get an error, but that is easy to check for example with:
You can use and then use  to replace  with your function. You will need to curry  so that it accepts one parameter to match . As far as  is concerned, it only needs to know that  depends on . The rest of the (constant) variables can be "in" . For instance, if your expression is , you can use .


Answer URL
https://docs.python.org/3/library/inspect.html
https://docs.python.org/3/library/inspect.html#inspect.getfullargspec
https://docs.python.org/3/library/collections.html#collections.namedtuple
https://docs.python.org/3/library/inspect.html#inspect.getfullargspec
