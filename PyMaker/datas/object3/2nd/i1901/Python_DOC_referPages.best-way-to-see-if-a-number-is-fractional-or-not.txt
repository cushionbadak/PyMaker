Natural Text
I'm looking to differentiate between a number like or  and an actual fractional number such as . What would be the best way to do this? Currently I'm doing:
That operation is built-in:Documentation is here.ADDENDUMThe initial solution only works for . Here's a more complete answer, with tests:
If some of your numbers are s, they might have range issues where conversion to float fails, or drops the fractional part that actually exists, depending on their precision:The  method will generally work (modulo problem cases like the one illustrated above), so you could stick with that, but it might be better to attempt to use  and use a fallback if that fails:(as others note, you'll need to check for  and  here as well, if those are allowed types, since they are integers by definition but lack an  attribute).At this point, it's worth considering all of the other answers, but here's a specific decimal.Decimal handler:
Why do not check if the difference between the truncation to integer and the exact value is not zero?
If you are dealing with  module or with a  object, you can do this easily:
Here is one way to do it (assuming e.g. 2/2 is not "fractional" in the sense you have in mind):This will only work if  is an  or a  or . But you could extend it to handle other numeric types such as  or  by just including them in .


Answer URL
https://docs.python.org/3/library/stdtypes.html#additional-methods-on-float
