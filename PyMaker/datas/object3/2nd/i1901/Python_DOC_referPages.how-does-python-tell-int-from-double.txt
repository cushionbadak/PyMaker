Natural Text
So in our lecture slide on assembly we had:High-level language data types of C, A, and B determine the correct  circuit from among several choices (integer, floating point) to use to  perform “+” operationNow in languages like Python, I do not specify the type of the variable. I was wondering how does the language compiles (interprets, I think is what it does) down into assembly and chooses the right circuit?Thank you
At the interpreter level it's fairly easy to tell the difference between an integer (34), a floating point number (34.24), and a string ("Thirty-Four").  The full list of types can be seen at https://docs.python.org/3/library/stdtypes.html .Once the type is known, it's easy to tell what operation is needed.  A separate function () is defined for each class, and the interpreter (written in C for standard Python) will do the arithmetic.  C is typed and it's (comparatively) easy for the compiler to be translated to machine code.
Every Python variable is a reference to an object.  That object includes the type information of the variable.  For instance, just walk through a few of the possibilities as we repeatedly reassign the value and type of  "on the fly":Output:If you're wondering how Python can tell that  is an int and  is a float, that's obvious from the input string.  A language processor typically contains a tokenizer that can discriminate language tokens, and another module that interprets those tokens within the language syntax.  int and float objects have different token formats ... as do strings, punctuation, identifiers, and any other language elements.If you want to learn more about that level of detail, research how to parse a computer language: most of the techniques are applicable to most languages.
As n.m. commented below your post, variables do not have a type in Python. Values do.As far as how integer vs float is determined when you type the following:This is determined during the parsing stage. Compiled and interpreted languages actually start off in the same manner.The general flow when code is sent to an interpreter/compiler is as follows:The parser step examines tokens like 'x' '=' '1.5' and looks for patterns which indicate different types of literals like ints, floats, and strings. By the time the actual interpreter/compiler gets the abstract syntax tree (tree representation of your program), it already knows that the value stored in x (1.5) is a float.So just to be clear, this part of the process is conceptually the same for intepreters and compilers.


Answer URL
https://docs.python.org/3/library/stdtypes.html
