Natural Text
If I do the following:I get:Apparently a cStringIO.StringIO object doesn't quack close enough to a file duck to suit subprocess.Popen.  How do I work around this?
 documentation:Note that if you want to send data to  the processâ€™s stdin, you need to  create the Popen object with  stdin=PIPE. Similarly, to get anything  other than None in the result tuple,  you need to give stdout=PIPE and/or  stderr=PIPE too.Replacing os.popen*Warning Use communicate() rather than  stdin.write(), stdout.read() or  stderr.read() to avoid deadlocks due  to any of the other OS pipe buffers  filling up and blocking the child  process.So your example could be written as follows:On the current Python 3 version, you could use , to pass input as a string to an external command and get its exit status, and its output as a string back in one call:
I figured out this workaround:Is there a better one?
I'm a bit surprised nobody suggested creating a pipe, which is in my opinion the far simplest way to pass a string to stdin of a subprocess:
There's a beatiful solution if you're using Python 3.4 or better. Use the  argument instead of the  argument, which accepts a bytes argument:
I am using python3 and found out that you need to encode your string before you can pass it into stdin:
"Apparently a cStringIO.StringIO object doesn't quack close enough to a file duck to suit subprocess.Popen":-)I'm afraid not.  The pipe is a low-level OS concept, so it absolutely requires a file object that is represented by an OS-level file descriptor.  Your workaround is the right one.


Beware that may give you trouble ifis too big, because apparently the parent process will buffer it before forking the child subprocess, meaning it needs "twice as much" used memory at that point (at least according to the "under the hood" explanation and linked documentation found here). In my particular case,was a generator that was first fully expanded and only then written to so the parent process was huge right before the child was spawned, and no memory was left to fork it:



Answer URL
https://docs.python.org/3/library/subprocess.html?highlight=subprocess#subprocess.Popen.communicate
https://docs.python.org/3/library/subprocess.html#subprocess.run
