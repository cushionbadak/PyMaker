Natural Text
Python 3 has introduced generator-like objects to be returned upon calling  and . The object returned acts like a generator and can be iterated through once but doesn't 'print' well, much like the  return argument. I was perplexed to see, however, that they are distinct object types and do not belong to , or at least this is what the  module shows. A function that would run e.g. expecting a generator would not detect them. What is their inheritance? Do they belong to a main "generator" structure, so that they e.g. could be identified along with other generators?
Per the  docs:types.GeneratorTypeThe type of generator-iterator objects, created by generator functions.Generator functions are a specific thing in the language; it means functions that use  or  (or generator expressions, which are just a shorthand for inline generator functions). It's a subset of the set of iterators (all things that you can call  on to get a new value), which is in turn a subset of iterables (all things that you can call  on to get an iterator; iterators themselves are iterables, where  behaves as the identity function).Basically, if you're testing for "can I loop over this?", test . If you're checking "is this an exhaustible iterator?" (that is, will I exhaust it by looping over it?), test either  or for the duck-typing based approach, test  (the invariants on iterators require that  yield the original iterator object unchanged).Note that  is not a generator or iterator. Per the docs:Rather than being a function, range is actually an immutable sequence type, as documented in Ranges and Sequence Types â€” list, tuple, range.Being an immutable sequence type means it is an iterable, but that's it. The fact that it is usually used as if it were an iterator is irrelevant; if it were an iterator, the second loop here would never execute:but it works just fine, because each (implicit) call to  returns a new iterator based on the same underlying iterable.
The documentation says that enumerate is functionally equivalent to a generator. Actually it is implemented in C and returns an iterator, not a generator as described in Does enumerate() produce a generator object. Generators and iterables are almost the same. This is explained in detail in Difference between Python's Generators and Iterators.I'm assuming you're trying to solve a real problem, like finding out if you can iterate over something. To solve that you can test if something is  an instance of .
not meant to be a full answer (ShadowRanger answer already explains everything) but just to state that  is really a very limited type as shown in  source:it only scopes the type of generator functions. Other "generator-like" objects don't use  so they're not a match.


Answer URL
https://docs.python.org/3/library/types.html#types.GeneratorType
https://docs.python.org/3/library/functions.html#func-range
https://docs.python.org/3/library/stdtypes.html#typesseq-range
https://docs.python.org/3/library/stdtypes.html#typesseq
