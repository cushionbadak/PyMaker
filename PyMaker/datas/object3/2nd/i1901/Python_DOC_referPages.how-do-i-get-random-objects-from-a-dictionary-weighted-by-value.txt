Natural Text
This question already has an answer here:A weighted version of random.choice                    20 answers                Weighted choice short and simple [duplicate]                    7 answers                I have a large dictionary. The keys are objects and the values are how often the given object appears in my data.I would like to randomly choose an object from the dictionary but have the choice be weighted towards objects with higher corresponding values.So far, I have been able to achieve this by adding x number of objects to a list where x is the corresponding value in the dictionary. Then I call  on this list. Like so:To make sure that this is working I've run  on the list 10000 times and saved the results. Here are 4 of the results I've gotten.As you can see, the distribution fits the frequency described in the dictionary.My problem is that in my production code I have thousands of dictionaries each containing thousands of objects. The dictionaries are of variable length. My current method is very inefficient and slow. Is there a better way? I don't mind using a different structure to store the data as it comes in.
 provides an optional probability parameter that should work for your problem:


Answer URL
https://docs.python.org/3/library/random.html#random.choices
