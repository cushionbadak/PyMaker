Natural Text
I was trying to understand how to create a Singleton class in Python. Below is how i attemptedIdeally  calls  with the object instance, but in the above case when I am trying to create second object ,  won't be called because an instance of  already exits then why does the print statement printing  print ?
 is called for every  call. If it didn't get called, it would not be able to return the singleton instance.And when the  method returns an object and that object is an instance of the  argument passed to  (or a subclass), then the  method is also called.So, for each  call,  is called. The  method always returns an instance of the current class, so  is called, every time. It doesn't matter here that it is the same instance each time.From the  method documentation:If  returns an instance of , then the new instanceâ€™s  method will be invoked like , where  is the new instance and the remaining arguments are the same as were passed to .You can see this happen if you add some  calls in the methods:You can't prevent the automatic  call, at least not without overriding something else. If you want to avoid  being called each time, you have some options:You don't have to use an  method on the subclass. You could invent your own mechanism,  could look for a  method and call that:or your  method could check if there are already attributes set in  (or ) and just not set attributes again:The  and  logic is implemented in ; you could create a metaclass that overrides that logic. While you could simply call  only (and leave everything as is), it makes sense to make the metaclass responsible for handling the Singleton pattern:then use this not as a base class but with . You can create an empty base class if that's easier:The above will call  on the class, optionally followed by  on the resulting instance, just once. The  implementation then, forever after, returns the singleton instance without further calls:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__new__
https://docs.python.org/3/reference/datamodel.html#metaclasses
