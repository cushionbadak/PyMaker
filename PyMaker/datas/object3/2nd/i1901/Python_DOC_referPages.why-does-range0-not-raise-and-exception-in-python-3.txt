Natural Text
In python 3.4, I am typingand it works fine, no Exception is raised. Though of course  is not equal to  afterwards.also works fine. raises an exception as expected though, raises an exception as expected though. So, what's going on? 
You are not comparing for equality. You are assigning.Python allows you to assign to multiple targets:assigns the two values to  and , respectively. All you need is a sequence or iterable on the right-hand side, and a list or tuple of names on the left.When you do:you assigned an empty sequence (empty strings are sequences still) to an empty list of names.It is essentially the same thing as doing:where you end up with ,  and , but with fewer characters.You cannot, however, assign to a string, so  on the left-hand side of an assignment never works and is always a syntax error.See the Assignment statements documentation:An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right.andAssignment of an object to a target list, optionally enclosed in parentheses or square brackets, is recursively defined as follows.Emphasis mine.That Python doesn't throw a syntax error for the empty list is actually a bit of a bug! The officially documented grammar doesn't allow for an empty target list, and for the empty  you do get an error.  See bug 23275; it is considered a harmless bug:The starting point is recognizing that this has been around for very long time and is harmless.Also see Why is it valid to assign to an empty list but not to an empty tuple?
It follows the Assignment statements section rules from the documentation,If the  is a comma-separated list of targets: The object must be an iterable with the same number of items as there are targets in the target list, and the items are assigned, from left to right, to the corresponding targets.The object must be a sequence with the same number of items as there are targets in the target list, and the items are assigned, from left to right, to the corresponding targets.So, when you say is an iterable (any valid python string is an iterable) and it is being unpacked over the elements of the list.For example,Since you have an empty string, and an empty list, there is nothing to unpack. So, no error.But, try thisIn the  case, you are trying to unpack the string  over an empty list of variables. So it complains with "too many values to unpack (expected 0)".Same way, in  case, you have an empty string, so nothing to unpack really, but you are unpacking it over one variable, which is, again, not possible. That is why it complains "need more than 0 values to unpack".Apart from that, as you noticed,also throws no error, because  is an empty tuple.and when it is unpacked over an empty list, there is nothing to unpack. So no error.But, when you doas the error message says, you are trying to assign to a string literal. Which is not possible. That is why you are getting the errors. It is like sayingInternalsInternally, this assignment operation will be translated to  op code,Here, since the string is empty,  unpacks  times. But when you have something like thisthe sequence  is unpacked in to the stack, from right to left. So, the top of the stack would be  and the next would be  and the last would be . Then it assigns from the top of the stack to the variables from the left hand side expression one by one.BTW, in Python, this is how you can do multiple assignments in the same expression. For example,this works because, the right hand values are used to construct a tuple and then it will be unpacked over the left hand side values.but the classic swapping technique  uses rotation of elements in the top of the stack. If you have only two or three elements then they are treated with special  and  instructions instead of constructing the tuple and unpacking.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#assignment-statements
https://docs.python.org/3/reference/simple_stmts.html#assignment-statements
https://docs.python.org/3/library/dis.html#opcode-UNPACK_SEQUENCE
https://docs.python.org/3/library/dis.html#opcode-ROT_TWO
https://docs.python.org/3/library/dis.html#opcode-ROT_THREE
