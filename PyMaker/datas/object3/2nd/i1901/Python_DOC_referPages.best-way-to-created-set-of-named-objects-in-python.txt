Natural Text
I find myself frequently creating sets of named objects where each object has a unique name.  I implement these as s whose keys are derived from .  But this feels a bit clunky to keep the name in two places.My typical approach looks like this:I know I could create a generalized class to handle this, but is there a more naturally Pythonic way to do this?
There is no more generalised support in the standard library, no, nor is there any more 'Pythonic' way to achieve this than using a dictionary.What you are doing is providing an lookup table index, and indices generally require some duplication of data. You are trading memory for access speed. But indices are use-case specific and either trivially implemented with a mapping, or too specific to the application to be generalisable to the level that adding that to the language library makes sense.At least in Python, the string value for the name is not actually duplicated; you just add more references to it; once from the instance and another time from the  dictionary.


Answer URL
https://docs.python.org/3/glossary.html#term-hashable
