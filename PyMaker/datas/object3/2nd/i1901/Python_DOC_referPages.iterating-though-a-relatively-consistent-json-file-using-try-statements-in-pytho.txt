Natural Text
I have a best practice question relating to iterating over a JSON file in Python using try/except statements. I have a JSON file that looks like this (vastly simplified for the question):As I stated, this is super simplified, (in my actual problem there are about 30 key value pairs I am interested in, and thousands of records) The challenge is, that even though the keys are pretty consistent (it's always around the same 30), occasionally there will be a missing key/value pair. If one or two or 10 are missing, I will want the rest of the record to be written out, so my approach at the moment is using a try/catch statement for each key value pair, which seems to strike me as a very inefficient way of checking this, and I am sure there is a better way.My code looks (kind of) like this (which i am sure is not the best way to do this):Any advice appreciated!
You can use the  method to avoid having to catch an exception:which returns  or a different default, passed in as the second argument. You can also check if the key is present first:Next, you want to not use  here. You would be much better off looping directly over the  list, so you can directly refer to the dictionary without the whole  prefix each time:Next, rather than hard-code all the keys you check, use a loop over a list of keys:If you don't need to print that a key is missing, then you could also make use of dictionary views, which act as sets. Sets support intersection operations, so you could ask for the intersection between your expected keys and the available keys:This  loop only ever deals with keys both in  and in , nothing more.
You could loop through the key names too - meaning you only have 1 try/except. Since it’s in a loop, it repeats the same code for each key, changing the key name each cycle.If I’m not mistaken, you could also make your code cleaner by iterating over the results directly:And where you write , change it to simply . Note: you mentioned your actual data is much more complex than this. It may make sense to either store the key names externally (or at least somewhere else) if there are many of them. You could create a file of key names and create a list of the names by doing...
Here is the method I would use for iterating over a json object and listing out the values I want. Also please ensure that you're json objects are properly formatted before posting here.Output:t


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.get
https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
