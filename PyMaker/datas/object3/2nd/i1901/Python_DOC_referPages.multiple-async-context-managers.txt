Natural Text
Is it possible to combine async context managers in python? Something similar to , but able to be used with context managers. Something like this:Is this currently possible?
Something close to  can be achieved with , introduced in Python 3.7:Unfortunately, s will still be run sequentially. This is because  simulates nested context managers, which have a well-defined order and cannot overlap. The outer context manager's  is given information on whether the inner one raised an exception. (A database handle's  might use this to roll back the transaction in case of exception and commit it otherwise.) Running s in parallel would make the context managers overlap and the exception information unavailable or unreliable. So although  runs s in parallel,  records which one came first and runs the s in reverse order.With async context managers an alternative like  would make perfect sense. One could drop the nesting semantics and provide an aggregate context manager that worked like an "exit pool" rather than a stack. The exit pool takes a number of context manager that are independent of each other, which allows their  and  methods to be run in parallel.The tricky part is handling exceptions correctly: If any  raises, the exception must be propagated to prevent the  block from being run. To ensure correctness, the pool must guarantee that  will be invoked on all the context managers whose  has completed.Here is an example implementation:This test program shows how it works:


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.AsyncExitStack
