Natural Text
I'm trying to implement the apriori algorithm. In one of the final steps I have two arrays of tuples generated from a list of products.The think is that I need to check which of  are subtuples of , i.e.  is a subtuple of .I tried and I get . I also tried using  but I get .I would like to know how can I do this without going the hardcore way, I'm using a Jupyter notebook with Python 2. Only using numpy, pandas and itertools. The desired output should be of the form; if I have products  but I only consider the tuples  and  then I need  but not  from all the 2-combinations of products.
If you are implementing the Apriori algorithm, you want to uses actual sets instead of tuples. Python has two set types,  and , where the latter is immutable and thus can be stored in dictionaries or other sets. You probably want to use the latter so you can associate such sets with support scores.That's certainly the approach that the  project implementation uses;  is a pure-Python library of the Apriori algorithm. You can do subset tests with tuples, but this is a slow O(NM) operation for tuples of sizes N and M:That's a full loop over N items in , and each  test takes M =  steps. You can convert the tuples to sets but that too takes O(N) + O(M) time, after which the subset test takes O(N) time. That makes the whole take linear time, but for small tuples, I suspect that the constant costs of creating new objects will outweigh the theoretical more costly O(NM)  test above.To use sets, you can use:where  accepts any non-set iterable, the code creates a temporary set object for the test.
Welcome 2pac,InitilizationSo if you try to ask  is it a subset of will return  only if  contain a tuple of size 1 and contain the value  . As it is not your expected behaviour you have to iterate over each  items of  and check if all   items are part of Quick overviewThis could give this functionBut I will advice to use set if you build your collection step by step of frozenset if it is an immutable collection (i.e set and frozenset)Edit:Martijn Pieters answer go in the same way


Answer URL
https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset
https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset
