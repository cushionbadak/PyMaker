Natural Text
I'm trying to make a staticmethod, object-creation factory method for a bunch of classes via meta programming. Here's what I've tried so far:but when I run it I get: How do you do this? I have messages with a lot of fields and I want this to be a class that will create and generate different of these messages. This question is about the factory / creation part. I'm using Python 3.5. Thanks!edit: 2nd, working version:Successfully prints:How does Python distinguish an instance method from a class / static method, when they're defined and attached the same way? The presence of the word 'self'? Because that would be convenient, but a bit hokey. edit2: Ah, it's probably just in how it's called - call it with an instance, and all is well with an instance-expecting method. But you could call either method, with or without an instance, and they would behave correctly or not, accordingly. edit3, final form :) :I don't know what (at)staticmethod adds -- version 2, above, worked -- but this is more self-documenting at least. 
Not sure I entirely understand your plan. But assuming that  is not supposed to be a metaclass itself but rather a regular class, you need to construct it like:As for the difference between static and instance methods, all regular functions behave like instance methods and if called on the instance will get it as the first positional argument (regardless of how it is named). You can try in your 2nd example to call  or , they behave identically. To find out more have a look at descriptors.The  decorator converts the regular function to a proper static method that will work the same way even when called on the instance (i.e. it won't get the instance as the first argument). But note that when applied the resulting object doesn't have the  attribute which you will need if you will generate these methods programmatically.Also, the  argument to  is the set of names and values that will be used to set the attributes of the new class, so it might be a good place to put the methods you create in your metaclass. This will also enable you to decide whether you want the  class to be able to override the attributes from the metaclass or vice versa.Example (with metaclass overriding the methods if they happen to be also defined on the class):...


Answer URL
https://docs.python.org/3/howto/descriptor.html
