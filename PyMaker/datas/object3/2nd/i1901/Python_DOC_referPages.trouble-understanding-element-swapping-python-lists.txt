Natural Text
In Python, I've seen two variable values swapped using this syntax:Is this considered the standard way to swap two variable values or is there some other means by which two variables are by convention most usually swapped?
Python evaluates expressions from left to right. Notice that while  evaluating an assignment, the right-hand side is evaluated before the  left-hand side.http://docs.python.org/3/reference/expressions.html#evaluation-orderThat means the following for the expression  :   the right-hand side  is evaluated, that is to say a tuple of two elements is created in the memory. The two element are the objects designated by the identifiers  and , that were existing before the instruction is encoutered during an execution of programjust after the creation of this tuple, no assignement of this tuple object have still been made, but it doesn't matter, Python internally knows where it is then, the left-hand side is evaluated, that is to say the tuple is assigned to the left-hand sideas the left-hand side is composed of two identifiers, the tuple is unpacked in order that the first identifier  be assigned to the first element of the tuple (which is the object that was formely b before the swap because it had name )and the second identifier  is assigned to the second element of the tuple (which is the object that was formerly a before the swap because its identifiers was )This mechanism has effectively swapped the objects assigned to the identifiers  and So, to answer your question: YES, it's the standard way to swap two identifiers on two objects.By the way, the objects are not variables, they are objects.
That is the standard way to swap two variables, yes.
I know three ways to swap variables, but  is the simplest. There isXOR (for integers)Or concisely, Temporary variableTuple swap
I would not say it is a standard way to swap because it will cause some unexpected errors. will be modified first and then affect the second variable .
Does not work for multidimensional arrays, because references are used here.See also Swap slices of Numpy arrays


Answer URL
