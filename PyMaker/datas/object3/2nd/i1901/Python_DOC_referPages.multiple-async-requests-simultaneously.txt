Natural Text
I'm trying to call ~ 300 API calls at the same time, so that I would get the results in a couple of seconds max.My pseudo-code looks like this:Doing this I get  printed out every second or so and the code takes forever, so I'm pretty sure they don't run simultaneously. What am I doing wrong?
 with Native Coroutines (/)Here is a typical pattern that accomplishes what you're trying to do.  (Python 3.7+.)One major change is that you will need to move from , which is built for synchronous IO, to a package such as  that is built specifically to work with / (native coroutines):There are two distinct elements to this, one being the asynchronous aspect of the coroutines and one being the concurrency introduced on top of that when you specify a container of tasks (futures):You create one coroutine  that uses  with two awaitables: the first being  and the second being .  This is the async aspect.  The purpose of ing these IO-bound responses is to tell the event loop that other  calls can take turns running through that same routine.The concurrent aspect is encapsulated in .  This maps the awaitable  call to each of your .  The result is an aggregate list of returned values.  Note that this wrapper will wait until all of your responses come in and call .  If, alternatively, you want to process them greedily as they are ready, you can loop over : each Future object returned represents the earliest result from the set of the remaining awaitables.Lastly, take note that  is a high-level "porcelain" function introduced in Python 3.7.  In earlier versions, you can mimic it (roughly) like:Limiting RequestsThere are a number of ways to limit the rate of concurrency.  For instance, see  in async-await function or large numbers of tasks with limited concurrency.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.as_completed
