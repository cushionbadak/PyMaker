Natural Text
This question already has an answer here:Overriding Enum __call__ method                    1 answer                My end goal really is to create a helper method in my Enum class that always returns an Enum member and never raises an exception, given whatever possible value, e.g.In case the value is not part of the enum, the helper method will return a default one, say .Based on this answer from another related question, I can do checks on the values by listing them through some built-in members. However, what I want to do next is to keep track of all the values in an internal member so that I don't have to always iterate through the values every time the helper method is called. I tried doing something similar to the following:and as expected, it doesn't work. Is this perhaps something that's already built-in in Python Enums?
You can create the method and check for the values in the class:Results:Here you have a live exampleIn case you dont want to reiterate, you can always have an outside cache of the values:
I have since accepted Netwave's answer but I'm adding this as a bit of variation from the original. I wanted to preserve the answer as is for reference.Notice that in this approach, I have changed  to  as I have no more need for the  argument. In addition, I'm handling  here instead of  because that's what the  raises in case the value couldn't be found. This also works for multi-valued/tuple valued enums.As for the second approach:Here, I switched from dict to list to keep track of values. Instead of handling , I just simply checked if the value is in the list. I could have used a set but since it's an enum, values are guaranteed to be unique (if I understand correctly).
[excerpt from my answer here]With Python 3.6 (and 1) you can specify a  method that will be called to give your class one last chance before raising .  So now you can do:N.B.: only enum members or  should be returned by  -- later Python versions will raise  if anything else is returned by .1 Disclosure:  I am the author of the Python stdlib , the  backport, and the Advanced Enumeration ()  library.


Answer URL
https://docs.python.org/3/library/enum.html
