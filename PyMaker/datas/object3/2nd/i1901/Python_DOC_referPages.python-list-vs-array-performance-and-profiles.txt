Natural Text
This question, It's more for a discussion about the  vs  in python, and If It's worth the while changing a code base from 's fo numbers to 's.   This is using python standard modules not .I was looking at the  module, from the python standard library, and It caught my attention, that I could very well do some "simple" numerical analysis and number crunching replacing my lists of numbers with arrays of doubles or floats, (depending on the case).Does anyone that have experience with python's  object could share a comparison or why they choose to use them? I'm still having trouble with this decision. My concern here, is If I can use in some way arrays of arrays, or list of arrays, and if that would boost my performance, right now I have lists of lists of numbers, and I'm trying to use python with no dependencies so no numpy. If I'm correct the python  object internally It's a dynamic array, I'm not sure about that. I ran this test using  and , I know that this may not be great comparison, but still It raises some questions. 
Since your main concern is performance and you are dealing with numbers then Python's array module will be your answer. From the official Python 3 docs:This module defines an object type which can compactly represent an array of basic values: characters, integers, floating point numbers. Arrays are sequence types and behave very much like lists, except that the type of objects stored in them is constrained. The type is specified at object creation time by using a type code, which is a single character. The following type codes are defined: Type Code Table.This type constraint is done to allow an efficient array implementation on the interpreter side, CPython for example. The type codes are a bridge between being dynamically typed (Python) and statically typed (C in case of CPython).Otherwise using a list, you will usually take some performance loss since a list can handle all types. I should caveat that the performance loss is negligible for smaller data-sets/operation rates.
Since your main concern is performance and you are dealing with numbers then Python's array module will be your answer. From the official Python 3 docs:This module defines an object type which can compactly represent an array of basic values: characters, integers, floating point numbers. Arrays are sequence types and behave very much like lists, except that the type of objects stored in them is constrained. The type is specified at object creation time by using a type code, which is a single character. The following type codes are defined: Type Code Table.This type constraint is done to allow an efficient array implementation on the interpreter side, CPython for example. The type codes are a bridge between Python being dynamically typed and C being statically typed (in case of CPython).Otherwise using a list, you will usually take some performance loss since a list can handle all types. I should caveat that the performance loss is negligible for smaller data-sets/operation rates.


Answer URL
https://docs.python.org/3/library/array.html
https://docs.python.org/3/library/array.html
https://docs.python.org/3/library/stdtypes.html#list
https://docs.python.org/3/library/array.html
https://docs.python.org/3/library/array.html
https://docs.python.org/3/library/stdtypes.html#list
