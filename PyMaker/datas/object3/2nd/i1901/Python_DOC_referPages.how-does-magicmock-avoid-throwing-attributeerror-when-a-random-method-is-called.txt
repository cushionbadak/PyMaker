Natural Text
In Python, if you call a method that doesn't exist it throws an AttributeError. Ex In the below code, MagicMock class doesn't have a function named hello or no patch was created for a method hello. Still below code doesn't throw an AttributeErrorHow is MagicMock able to do this? How can I create a class that can perform an action when any method (which might not be defined) is called on it?
The Python datamodel documents a hook, , which shall be called when attribute access fails to resolve in the usual ways. Mocks use it to return a new mock instance - i.e. mocks define unknown attributes as factories.Reproducing mock's implementation in a simpler way, you would just turn  and  into factory functions:Example usage:How is MagicMock able to do this? This part is not specific to , an ordinary  will do the same (the "magic" in the name is just referring to additional features allowing better mocking of magic methods).   inherits such behavior from one of the base classes:How can I create a class that can perform an action when any method (which might not be defined) is called on it?It depends if you want to be in front of, or behind, a normal attribute access.  If you want to get in front, you should define , it's called unconditionally to implement attribute accesses before searching the class/instance namespaces. However, if you want to take a lower precedence to normal attributes (i.e. those living in the object ) and to descriptors, then you should define  as previously discussed.
I don't actually know how specifically  works (I've never used it, but I've Heard Good Things), but this part of the behaviour can be replicated (along with probably multiple other possible solutions) by hijacking  in a way that it returns a callable that creates a new mock instance when called:When executed, we see the following:I didn't go overboard with defining an  and whatnot, but the basic trick can be seen on the above stripped-down example.The way the above works is that accessing  or any other attribute goes through our custom  which gives us a chance to generate a fake (mocked) method on the fly, with whatever properties we want to. As I understand one of the many benefits of  is exactly that we don't have to worry about s being thrown by default, it just works.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getattr__
https://docs.python.org/3/reference/datamodel.html#special-lookup
https://docs.python.org/3/reference/datamodel.html#object.__getattribute__
https://docs.python.org/3/howto/descriptor.html#descriptor-protocol
