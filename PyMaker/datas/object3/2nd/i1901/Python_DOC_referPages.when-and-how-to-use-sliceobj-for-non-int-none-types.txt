Natural Text
In Python 3, the following code does not produce an error:while the following does:If I try to use the  object, it will also fail:with the following error:indicating that  could be used with some other object implementing the  method.When / how to use  for non-/ types?Why are  numbers allowed to be used when instantiating the  object?Could I rely on  (and  and ) never complaining upon instantiation in Python 3?EDIT:This seems to be related to PEP357https://docs.python.org/2.5/whatsnew/pep-357.htmlHowever, it is unclear to me if this has other uses beyond the implementation of the advanced indexing in .EDIT3: EDIT2 basically contained the second part of the accepted answer with some syntax error, so it was removed
Yes, you may pass objects of any type to . The documentation makes no mention about restrictions for the type of slice's arguments, and the source code for slice's constructor only says that "start, stop, and step are python objects". rejects a slice object that has float arguments, but this seems to be specific to the list type. The data model itself does not do implicit type checking before calling . You could write your own custom class that accepts more unconventional slices. Example:As for whether there's a practical reason to allow non-integer slices, none come to mind... But the Python community has a cultural norm of "we're all adults here". Which is to say, something should not be forbidden just because there's no obvious practical application for it. If someone wants to do something that seems silly, then all other things being equal, we should let them.We've established that user-defined types can accept whatever kinds of slices they want. But what if you want to be able to slice built-in types with unusual slices? You can't change the list type's implementation in order to remove the type checking it does.  comes in handy as a way to define new types that can be used to slice lists. For example,


Answer URL
https://docs.python.org/3/library/functions.html#slice
