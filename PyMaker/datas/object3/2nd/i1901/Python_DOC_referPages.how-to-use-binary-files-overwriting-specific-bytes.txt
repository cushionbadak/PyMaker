Natural Text
I'm writing a program in python, and would like to be able to write to specific bytes in a binary file. I tried to do this in the shell with a small binary file containing the numbers 0 through 15, but I can't figure out how to do so. Below is the code I just entered into the shell with comments to demonstrate what I am trying to do:My desired output is as shown, but  seems to erase all the data in the file, while  can't seek backwards.How would I achieve my desired output without rewriting the whole file?
When you open a file for writing with , the file is truncated, all contents removed. You need to open the file for reading and writing with  instead. From the  function documentation:     open for writing, truncating the file firstandFor binary read-write access, the mode 'w+b' opens and truncates the file to 0 bytes. 'r+b' opens the file without truncation.Because the file was truncated first, seeking to position 3 then writing  has the first few bytes filled in with  for you.Opening a file in append mode usually restricts access to the new portion of the file only, so anything past the first 16 bytes. Again, from the documentation:Other common values are [...] and  for appending (which on some Unix systems, means that all writes append to the end of the file regardless of the current seek position).(bold emphasis in quoted sections mine). This is why your  byte ends up right at the end in spite of the  call. does not truncate a file and gives you full range of the contents with ;  adds write access to that mode. Demo with :
The solution is another mode: . (as shown by other answers.)Here is the solution in the shell from where the file left off:
If I remember properly, you have to open the file in "Append mode" or it will simply erase everything and start from scratch, and then when you use  you just create those 3 0's and then you write the 1. I'll investigate further on how to write directly to a position but you may have to read the whole file, modify, write the whole file again.You can actually read about this behaviour in the documentation: 'w' for only writing (an existing file with the same name will be erased)


Answer URL
https://docs.python.org/3/tutorial/inputoutput.html
