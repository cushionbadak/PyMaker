Natural Text
I'm trying to check for a palindrome with Python. The code I have is very -loop intensive.And it seems to me the biggest mistake people do when going from C to Python is trying to implement C logic using Python, which makes things run slowly, and it's just not making the most of the language.I see on this website. Search for "C-style for", that Python doesn't have C-style for loops. Might be outdated, but I interpret it to mean Python has its own methods for this.I've tried looking around, I can't find much up to date (Python 3) advice for this. How can I solve a palindrome challenge in Python, without using the for loop?I've done this in C in class, but I want to do it in Python, on a personal basis. The problem is from the Euler Project, great site By the way,.I'm missing a lot of code here. The five hashes are just reminders for myself.Concrete questions:In C, I would make a for loop comparing index 0 to index max, and then index 0+1 with max-1, until something something. How to best do this in Python?My for loop (in in range (999, 100, -1), is this a bad way to do it in Python?Does anybody have any good advice, or good websites, or resources for people in my position? I'm not a programmer, I don't aspire to be one, I just want to learn enough so that when I write my bachelor's degree thesis (electrical engineering), I don't have to simultaneously LEARN an applicable programming language while trying to obtain good results in the project. "How to go from basic C to great application of Python", that sort of thing.Any specific bits of code to make a great solution to this problem would also be appreciated, I need to learn good algorithms.. I am envisioning 3 situations. If the value is zero or single digit, if it is of odd length, and if it is of even length. I was planning to write for loops...PS: The problem is: Find the highest value product of two 3 digit integers that is also a palindrome.
A pythonic way to determine if a given value is a palindrome:Explanation:We're checking if the string representation of  equals the inverted string representation of The  slice takes care of inverting the stringAfter that, we compare for equality using 
An alternative to the rather unintuitive  syntax is this:The  function returns a reversed sequence of the characters in . joins those characters together again with nothing in between.
Just for the record, and for the ones looking for a more algorithmic way to validate if a given string is palindrome, two ways to achieve the same (using  and  loops):And....the second one:
The awesome part of python is the things you can do with it.  You don't have to use indexes for strings.  The following will work (using slices)What it does is simply reverses n, and checks if they are equal.   reverses n (the -1 means to decrement)"2) My for loop (in in range (999, 100, -1), is this a bad way to do it in Python?"Regarding the above, you want to use  instead of range (because range will create an actual list, while xrange is a fast generator)My opinions on question 3I learned C before Python, and I just read the docs, and played around with it using the console. (and by doing Project Euler problems as well :)
Below the code will print 0 if it is Palindrome else it will print -1Optimized CodeOutput:0Output:-1Explaination:when searching the string the value that is returned is the value of the location that the string starts at.So when you do  it finds  at location  and  reverses  and it still is  at location  so  is returned. Now when we search for  and then reverse  to  it renders a  statement  was reversed to  causing the search to fail to find  resulting in a value of  which indicates string not found.Another method print true if palindrome else print falseoutput:TRUE     
There is also a functional way:
I know that this question was answered a while ago and i appologize for the intrusion. However,I was working on a way of doing this in python as well and i just thought that i would share the way that i did it in is as follows, 
There is much easier way I just found. It's only 1 line.
Here a case insensitive function since all those solutions above are case sensitive. This function will return a boolean value.
doing the Watterloo course for python, the same questions is raised as a "Lesseon" find the info here:http://cscircles.cemc.uwaterloo.ca/13-lists/being a novice i solved the problem the following way:The function is called isPalindrome(S) and requires a string "S".The return value is by default TRUE, to have the initial check on the first if statement.After that, the for loop runs half the string length to check if the character from string "S" at the position "i" is the same at from the front and from the back.If once this is not the case, the function stops, prints out FALSE and returns false.Cheers.kg
If the string has an uppercase or non-alphabetic character then the function converts all characters to lowercase and removes all non-alphabetic characters using regex finally it applies palindrome check recursively:the output is  for the input above.
maybe you can try this one:    
You are asking palindrome in python. palindrome can be performed on strings, numbers and lists. However, I just posted a simple code to check palindrome of a string.
The real easy way to do that it is And if/else here just for fancy looks. The question about palindrome was on Amazon's interview for QA
Assuming a string 's'
This was a question in Udacity comp 101, chapter 1. Gives a 0 for palindrome gives a -1 for not. Its simple, and does not use loops.
I wrote this code:and it works.it gets the word, then removes the spaces and turns it into a listthen it tests if the first letter is equal to the last and if the 2nd is equal to 2nd last and so on.then the 'if x+1 == len(word)' means that since x starts at 0 it becomes 1 and then for every next .. blah blah blah it works so it works.

You can use Deques in python to check palindrome

the "algorithmic" way:
There is another way by using functions, if you don't want to use reverse
It looks prettier with recursion!

This is the typical way of writing single line code

I tried using this:and it worked for a number but I don't know if a string
Output 
Here is an example that takes a user's input and checks if the input is a palindrome:However, there is no need to even set up the / statement. You can directly print the result of the logical comparison, as shown here:



Answer URL
https://docs.python.org/3/library/stdtypes.html#str.casefold
