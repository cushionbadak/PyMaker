Natural Text
I would like to create a class that inherites from .Tried this:but that gives me:What would be the correct solution that gives me a type that behaves exactly like  but which I can type test?[EDIT]I want to do this because I am creating a selection scheme on Python datastructures:And I want to be able to determine whether I get a None because the selected value is None or because the key was not found.HOWEVER it must return a (ducktyped) None that behaves exactly like a None. No exceptions or custom type returning here.[EDIT]Ok, so the consensus is: can't be done. Which although unsatisfactory is a valid answer. Since I really want the default behavior to have it return a None when the key is not present I think I will have the select eat a param to switch to exception throwing when appropriate. Thanks.
 is a constant, the sole value of  (for v2.7, for v3.x)Anyway, when you try to inherit from you'll get this errorPython 2TypeError: Error when calling the metaclass bases      type 'NoneType' is not an acceptable base typePython 3ImportError: cannot import name 'NoneType'in short, you cannot inherit from Anyway, why would want a class to inherit ?
Subclassing None does not make sense, since it is a singleton and There Can Be Only One.  You say you want a class with the same behaviour, but None does not have any behaviour!If what you really want is a unique placeholder that you can return from a function to indicate a special case then simplest way to do this is to create a unique instance of object:
There's no way to do it, at least definitely not until you do some unreadable black magic.  You should probably use exceptions.


Answer URL
https://docs.python.org/3/library/constants.html?highlight=nonetype#None
