Natural Text
I'm trying to get authenticated by an API I'm attempting to access. I'm using urllib.parse.urlencode to encode the parameters which go in my URL. I'm using urllib.request.urlopen to fetch the content.This should return 3 values from the server, such as:The problem is it only returns the first value, and the trailing new line character.And then msg printsI know that's some seriously ugly code, I'm about a week old in Python. Any help would be greatly appreciated.
The problem is that you're only calling  once, so it only reads one line. If you want to read the lines one by one, you have to keep calling  in a loop until done:However, there's really no good reason to call  here, because any file-like object (including a  object) is already an iterable full of lines, so you can just do this:Meanwhile, your original code has a  without an  or a , which will just raise a . Presumably you wanted something like this:While we're at it, we can simplify your code a bit.If you look at the examples:Here is an example session that uses the  method to retrieve a URL containing parameters:That's exactly what you want to do here (except for the last line). All the extra stuff you're doing with encoding the strings is not only unnecessary, but incorrect. UTF-8 is the wrong encoding is the wrong encoding to use for URLs (you get away with it because all of your strings are pure ASCII);  requires a string rather than an encoded byte string (although, at least in CPython 3.0-3.3, it happens to work if you give it byte strings that happen to be encoded properly);  can take byte strings but may not do the right thing (you want to give it the original Unicode so it can quote things properly); etc.Also, you probably want to decode the result (which is sent as ASCIIâ€”for more complicated examples, you'll have to either parse the , or read the documentation for the API), and strip the newlines.You also may want to build a structure you can use in your code instead of just printing it out. For example, if you store the results in , and you need the  in a later request, it's just .So, let's wrap things up in a function, then call that function:


Answer URL
