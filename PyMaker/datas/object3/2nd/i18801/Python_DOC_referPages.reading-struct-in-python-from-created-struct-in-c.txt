Natural Text
I am very new at using Python and very rusty with C, so I apologize in advance for how dumb and/or lost I sound.I have function in C that creates a .dat file containing data. I am opening the file using Python to read the file. One of the things I need to read are a struct that was created in the C function and printed in binary. In my Python code I am at the appropriate line of the file to read in the struct. I have tried both unpacking the stuct item by item and as a whole without success. Most of the items in the struct were declared 'real' in the C code. I am working on this code with someone else and the main source code is his and has declared the variables as 'real'. I need to put this in a loop because I want to read all of the files in the directory that end in '.dat'. To start the loop I have:Which then I read all of the lines previous to the one containing the struct. Then I get to that line and have:I'm trying to just read the first thing stored in the struct. I saw an example of this somewhere on here. And when I try this I'm getting an error that reads:I will take any and all tips someone can give me. I have been stuck on this for a few days and have tried many different things. To be honest, I think I don't understand the struct module but I've read as much as I could on it.Thanks!
You could use  or  to specify format of the file. To read structures from the file produced by C code in @perreal's answer:See . It is supported in Python 3 but it is undocumented in Python 2.7 for a default file object. requires to specify padding bytes () explicitly:It produces the same output.To avoid unnecessary copying  could be used to get an array of structs from a file:
Some C code:Some Python code:Output:but there is also the padding issue. The padded size of  is 16, so we read 3 more characters and ignore them.
A number in the format specifier means a repeat count, but it has to go before the letter, like . However you said you just want to read one element of the struct. I guess you just want . I guess you are trying to specify the number of bytes to read as 8, but you don't need to do that.  assumes that.I also noticed you are using . That seems wrong for reading binary data. It will read until the next carriage return / line feed, which will occur randomly in binary data. What you want to do is use , like this:Actually, you should be careful, as  can return less data than you request. You need to repeat it if it does.
I had same problem recently, so I had made module for the task, stored here: http://pastebin.com/XJyZMyHXexample code:The result should be:


Answer URL
https://docs.python.org/3/library/io.html#io.BufferedIOBase.readinto
