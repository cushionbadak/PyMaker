Natural Text
I need to sum the elements of a list, containing all zeros or ones, so that the result is 1 if there is a 1 in the list, but 0 otherwise. The code I'm using to test works fine in the interpreter, but gives me the error TypeError: int() argument must be a string or a number, not 'list'I've just started to use python, and can't figure out what's going wrong (the version I've written in c++ doesn't work either).Does anyone have any pointers? Also, how would I do the sum so that it is a binary xor, not simply decimal addition?
I need to sum the elements of a list, containing all zeros or ones, so that the result is 1 if there is a 1 in the list, but 0 otherwise. No need to sum the whole list; you can stop at the first 1.  Simply use . It will return  if there is at least one truthy value in the container and  otherwise, and it short-circuits (i.e. if a truthy value is found early in the list, it doesn't scan the rest). Conveniently, 1 is truthy and 0 is not. and  work as 1 and 0 in an arithmetic context (Booleans are a subclass of integers), but if you want specifically 1 and 0, just wrap  in .
You don't actually want a sum; you want to know whether  or  contains a  value. Just take advantage of Python's basic container-type syntax:The reason you're getting the error, by the way, is because you're wrapping  and  with an extra nested list when you're trying to split  (rename this variable, by the way!!). You just want to split it like this:Finally, it's worth noting that your logic is pretty weird. This is not a binary search in the classic sense of the term. It looks like you're implementing "find the index of the first occurrence of  in this list". Even ignoring the fact that there's a built-in function to do this already, you would be much better served by just iterating through the whole list until you find a . Right now, you've got  time complexity (plus a bunch of extra one-off loops), which is pretty silly considering the output can be replicated in  time by:Or of course even more simply by using the built-in function :
I need to sum the elements of a list, containing all zeros or ones, so that the result is 1 if there is a 1 in the list, but 0 otherwise. What's wrong with
Stop making nested lists.


Answer URL
