Natural Text
If I create a class in Python and I give it a class attribute (this is taken directly from the docs, here), as I see that, as the docs suggest, when doing I get that the trick is added to d2 as well:This is because  is a class attribute rather than an instance attribute so gets shared across all instances (correct me if this is not orthodox!).Now, suppose I do this insteadand I run this gives me 2 and 1 respectively, namely the count for the second instance has not changed. Why is this, why the behaviour difference?
The  class does not define the += operator ( method). That wouldn't make sense because it is immutable.That's why  defaults to  and then . reference becomes Now the first time you call  the following happens:read class attribute  and put it on the stackadd  to the item on the stackcreate a new instance attribute  and assign it the value on the stackThat means the class attribute is not changed at all and you add a new instance attribute.On every subsequent call of  on the same object the instance attribute is incremented, because attribute lookup starts on the instance dict and will only go to the class dict if that attribute does not exist.If you do the same with a mutable class which overloads the  method you can get different behaviour:You will see that all instances and the class itself still hold the same list. The print shows the same list  each time. You can also check that all three lists are identical: .That is because  just calls  and returns itself inside the method (at least if it was written in python).


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__iadd__
