Natural Text
I, a beginner, am working on a simple card-based GUI. written in Python. There is a base class that, among other things, consists a vocabulary of all the cards, like . The cards on the GUI are referenced by their unique IDs. As I plan to make the code avabile for other beginners, I want to explicitly inform them if they gave a card ID that does not exists (instead of throwing a KeyError). Now I have a ton of repetitive try-expect clause that makes me suspicious:Part of the code, one-line methods without try-catching:Is this an accepted practice? Are there any better way to catch this KeyError in every method of the class?
Extract the actual getting of the card from the id into a separate method, with a try/except there, and call that method from everywhere else.
You could use a decorator to remove some of that repetitive boiler plate.Then you would use it like this:
You can always use a decorator function to get what you want. This link is an excellent tutorial to learn what decorators are and how to use them. I'll give an example solution using decorators in your case. Basically, you just create a function that takes a function as a parameter and returns the wrapper that does something special with it. One that might fit your solution would look like this:...then you can decorate your functions/methods like this:...which is really just syntactic sugar for this:
You may consider making your cards collection into your own type of collection that can provide the customized exceptions you require. If you are using a  for your cards collection, you might make your own  with custom behavior like this: Now you can just do your various methods like this:...just make sure to use your class for your  attribute. OR: The nice thing about this is that your UI class is not committed to some kind of customized or unusual interface (i.e., ) for the object holding the data. The interface here is consistent with the Python data model. Therefore, if for some reason you decide that you would like to use the same UI for another object class, you have used a tried-and-true API that will translate across just about anything that has been written in a way consistent with the Python data model. 


Answer URL
https://docs.python.org/3/reference/datamodel.html
