Natural Text
This question already has an answer here:Is floating point math broken?                    28 answers                Basically I thought I created a loop to just increase .1 every iteration.  What I have got is these numbers below like 0.30000000000000004,0.7999999999999999, 3.0000000000000013.  Here is my code and the results.  Why is it not .1, .2. .3, etc. and/or why is it 0.30000000000000004, 0.4, 0.5, 0.6, 0.7, 0.7999999999999999, etc.  Basically why are their unexpected, for me, decimals.Bonus Question: Is there a better way to create a list of numbers increasing by .1?
This is a floating point precision limitation. Please refer to:https://docs.python.org/2/tutorial/floatingpoint.html0.1 is actually stored as the binary fraction:0.00011001100110011001100110011001100110011001100110011010As you can see, that can lead to binary rounding errors as numbers are added.Try using Decimal as an alternative if all you care is 1 decimal place precision:
Answer to Bonus Question: Is there a better way to create a list of numbers increasing by .1?with numpy
Its basically the disadvantages of using float numbers. The number 0.2 plus 0.1 just got overflowed and the result wont fit inside a memory block reserved to float types so it cuts of the part overflowed and rounds it around that value. If you want to work with numbers that way, you should operate with integers and then divide the result by 10 or just round up the values, but never try to compare floats by value because the outcome could be surprising.


Answer URL
https://docs.python.org/3/library/decimal.html
