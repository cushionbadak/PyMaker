Natural Text
If we need to read/write some data from/to a large file each time before/after  processing, which of the following way (with some demonstration Python codes) is better?Open the file each time when we need to read/writing and close immediately after reading/writing. This way seems to be safer? but slower since we need to open and close a lot of times? This looks awkward but it seems matlab takes this way in its  file IO functions  and . We call  and  directly without explicit  nor .Open the file and close until we finish all the work, faster but at the risk of file remaining open if the program raises errors, or the file being corrupted if the program is terminated unexpectedly.In fact, I had several  files corrupted in this way when the program was killed.Seems guys prefer the second with wrapping the loop in .or in an exception catch block.I knew these two things and I did used them. But my  files were still corrupted when the program was killed.Once I was trying to write a huge array into a hdf5 file and the program was stucked for a long time so I killed it, then the file was corrupted.For many times, the program is ternimated because the server is suddenly down or the running time exceeds the wall time.I didn't pay attention to if the corruption occurs only when the program is terminated while writing data to file. If so, it means the file structure is corrupted because it's incomplete. So I wander if it would be helpful to flush the data every time, which increase the IO loads but could decrease the chance of writing data to file when terminated.I tried the first way, accessing the file only when reading/writing data is necessary. But obviously the speed was slow down. What happens in background when we open/close a file handle? Not just make/destroy a pointer? Why  operations cost so much?
If you are concerned about using multiple files within the "with" statement, you can open more than one file with a compound statement, or nest the "with" blocks. This is detailed in the answer here:How to open a file using the open with statementAs for what happens when the program raises errors, that's what try/except blocks are for. If you know what errors are expected, you can easily surround your process_data() calls. Again, one except block can catch multiple exceptions.https://docs.python.org/3/tutorial/errors.html#handling-exceptions
You should wrap your code in solution 2 in a  and always close the file in finally. This way even if there will be errors, your file will close itself.EDIT: as someone else pointed out you can use  to handle that for you.


Answer URL
https://docs.python.org/3/tutorial/errors.html#handling-exceptions
