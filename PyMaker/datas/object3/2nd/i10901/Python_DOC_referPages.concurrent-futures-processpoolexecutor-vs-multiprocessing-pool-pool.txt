Natural Text
This question already has an answer here:Concurrent.futures vs Multiprocessing in Python 3                    2 answers                Please explain to me what is the difference between these two classes?concurrent.futures.ProcessPoolExecutormultiprocessing.pool.PoolI noticed  module existed in Python 2. But functionally?
As stated in the documentation,  is a wrapper around a .  As such, the same limitations of  apply (e.g. objects need to be pickleable).However,  aims to provide an abstract interface that can be used to manage different types of asynchronous tasks in a convenient way.  e.g. changing your async strategy from using process pools to using threads is frequently as simple as changing one or two lines of code (rather than needing to code it all up yourself).  Another (related) benefit in the abstraction is that  provides a single API to remember -- And you can pick the Executor that is most suited for the task.  Is using your process IO bound?  Awesome, use a .  Are you going to have trouble speeding things up because of the Global Interpreter Lock (GIL)?  No problem, use a .


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#module-concurrent.futures
https://docs.python.org/3/library/multiprocessing.html
https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor
