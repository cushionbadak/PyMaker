Natural Text
If I have a list of objects as such in Python:And I append the last two objects to the end of the list again:Do duplicates in  now have the same or different addresses? If I make changes to one of the elements of the array that has been appended to the end of the list , will the duplicate at the end also change? Is there a better way to preform this copy if so?
The same addresses - you can check this with . If the elements of the list are mutable, then modifying one will modify the other. If the elements of the list are immutable, then you cannot modify them.To add deep copies, you can use the copy module.Note that for immutable objects,  does not make a copy of the object unless that object has references to other mutable objects. So in the last list .
Yes, python will reference the same object in memory if you use the  method in this way, if this is your desired outcome, then simply execute:Example:Now we check out our list :Running your operation on , notice the memory address':You'll notice that the last two elements that were appended are indeed the same objects in memory as what the variables  and  are assigned to. This means that making changes to the last two objects in the list will also change the objects at index 2 and 3.Now if you wanted to add copy's of the last two elements, you could do the following:Please refer to Python's copy module doc for copy operations.


Answer URL
https://docs.python.org/3/library/functions.html#id
