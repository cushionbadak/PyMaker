Natural Text
Why does example 3 below, which uses , produce the correct result, while example 4 is incorrect - i.e. it produces no result, just like example 1.And why does example 2 still produce a result (even though it not the desired result), despite the fact that it does NOT use ?Case with no match among the adjectives: Result None as expectedCase with a match to 1st available in adjectives but actually 2nd in the text:Case with a match to 1st available in the text, which is what is wantedCase where  is omitted. NOTE: This does not work. This example arose from answers to my question Python: Expanding the scope of the iterator variable in the any() function
Iterating on a string () will iterate on its characters, hence 4th loop could be rewritten more explicitly:
A string is a container, so  will still work on it.  However, it does not naturally separate into words, it iterates over characters.  In Example 4,  will take the value of each character in succession.  Giving it the variable name  doesn't make it a word.In Example 2, you are iterating over the list  rather than the string, so you get the "expected" behavior of  taking the value of a word.  Then the  operator checks whether  is a substring of  without having to use .  Note that  is not split into words.   will return .


Answer URL
https://docs.python.org/3/library/collections.abc.html#collections.abc.Container
