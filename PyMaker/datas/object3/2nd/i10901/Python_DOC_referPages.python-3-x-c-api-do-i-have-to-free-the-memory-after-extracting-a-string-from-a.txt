Natural Text
I extract strings from a  pointer using:I'm wondering whether I have to free the memory after doing this. The manual doesn't seem to provide any information about this for these functions, but other functions do provide information to free memory using .More details After all  is a pointer to something reserved. I would've thought that this is like , where the return is a  to something inside the object, but Python strings can have any kind of encoding, which is in general not ASCII. Meaning that if we convert formatting, we need to reserve some new space.Free or not? If not, how does Python do this?
If you look at the documentation for , you will seeReturn value: New reference.  Encode a Unicode object using ASCII and return the result as Python bytes object. Error handling is “strict”. Return NULL if an exception was raised by the codec.The returned object is a regular Python bytes object, subject to regular Python reference handling. The reference you receive is a new reference, so you own that reference, and you are responsible for ing it when you're done with it. Since you do not do this, your code leaks this object.You also need to handle the null return case. Since you do not, your code currently invokes undefined behavior if the codec raises an exception.If you look at the documentation for , you will seeReturn a pointer to the contents of o. The pointer refers to the internal buffer of o, which consists of  bytes. The last byte in the buffer is always null, regardless of whether there are any other null bytes. The data must not be modified in any way, unless the object was just created using . It must not be deallocated. If o is not a bytes object at all, PyBytes_AsString() returns NULL and raises TypeError.This function returns a pointer to the internals of a bytes object. You should not free the pointer, and you should not modify the data it points to. You should also wait until you're done with this pointer before ing the bytes object whose internals you're looking at.


Answer URL
https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_AsASCIIString
https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_AsASCIIString
https://docs.python.org/3/c-api/bytes.html#c.PyBytes_AsString
