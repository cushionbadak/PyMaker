Natural Text
This question already has an answer here:add object into python's set collection and determine by object's attribute                    1 answer                I'm using  and  method of  class to prevent adding same hash object in set. According to python data-model document,  consider same hash object as same object and just add them once. But it behaves different as below:  While in case of string value, it works correctly.My question is: why the same hash objects are not same in set?
Your reading is incorrect. The  method is used for equality checks. The documents just state that the  value must also be the same for 2 objects  and  for which  (i.e.  ) is true.This is a common logic mistake:  being true implies that  is also true. However, an implication does not necessarily mean equivalence, that in addition to the prior,  would mean that .To make all instances of  compare equal to each other, you need to provide an  method for them; otherwise Python will compare their identities instead. This might do:Now:In reality you'd base the  on those properties of your object that are used for  comparison, for example:
Sets need two methods to make an object hashable:  and . Two instances must return the same hash value when they are considered equal. An instance is considered already present in a set if both the hash is present in the set and the instance is considered equal to one of the instances with that same hash in the set.Your class doesn't implement , so the default  is used instead, which only returns true if  is also true. In other words, two instances are only considered equal if they are the exact same instance. Just because their hashes match, doesn't make them unique as far as a set is concerned; even objects with different hashes can end up in the same hash table slot, as the modulus of the hash against the table size is used.Add your a custom  method that returns  when two instances are supposed to be equal:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__hash__
