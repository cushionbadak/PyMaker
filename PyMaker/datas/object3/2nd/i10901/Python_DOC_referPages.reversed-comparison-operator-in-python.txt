Natural Text
In the example I have inner and outer class. I have no control over what Inner implements just wanted to simulate the situation. I have only control over Outer's behavior. I want Outer instances to be able to compare to Inner instances (not just equality). With the given implementation only the first comparison works because that is calling Outer's  method allowed to be compared to Outer and Inner instances but the second one is calling Inner's  which will not allow the comparison to Outer - heck it doesn't know Outer exists why should it bother to implement it.Is there a way to get the second type of comparison to work, with something similar like the  and such functions.I know for instance in C++ you resolve this with inline operator definitions, but we don't have such in Python.
Not to put too fine a point on it:  is broken. At the very least, rather than throwing an error it should , which would allow Python to try the reverse comparison:When  is returned, the interpreter will then try the  reflected operation on the other type, or some other fallback,  depending on the operator. If all attempted operations return  , the interpreter will raise an appropriate exception.Better yet it would use "duck typing", rather than insisting on a specific class (unless the class, rather than its interface, is an explicitly important part of the comparison):However, as you say you cannot control this, you will have to manually implement similar functionality, for example:as there is no such thing as  in Python's data model.


Answer URL
https://docs.python.org/3/library/constants.html#NotImplemented
https://docs.python.org/3/glossary.html#term-duck-typing
https://docs.python.org/3/reference/datamodel.html
