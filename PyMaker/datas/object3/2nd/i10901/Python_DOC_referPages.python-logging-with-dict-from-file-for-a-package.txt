Natural Text
I have a configuration file which I recover like this:It works but my concern is about packaging the project. What is the best practice to adopt? Is it correct to use a relative path like this or should I create a module and import it instead of loading a  file?Thanks for your help!
Depending of the kind of application you have, you can have several configurations levels.The common one is two levelsÂ :Application-wide configuration located:near your application's installation folder (mostly for Windows applications),in a specific folder (in  for Posix applications).User-wide configuration, located is the user HOME directory.For a description of directory structure, see this article on Wikipedia: Filesystem Hierarchy Structure.Common application folder and configuration filesMac OS X:   (app folder),   (lib folder),   (config file).Mac OS X (POSIX):   or  (app folder),   or  (lib folder),   or  (config folder).Unix:   or  (app folder),   or  (lib folder),   or  (config folder).Win XP:  Win 7 (32 bits app):  Win 7 (64 bits app):  Common user configuration foldersMac OS X:  Mac OS X (POSIX):  Unix:  Unix (POSIX):  Win XP (roaming):  Win XP (not roaming):  Win 7 (roaming):  Win 7 (not roaming):  Common application folder and configuration filesThere is a plethora list of configuration formats, but the most common are:Mac OS X: format, see: Generate and parse Mac OS X .plist filesUnix: format is similar to  format, format, format, see: JSON encoder and decoder,Win: format format, see: Configuration file parserTake a look at File Formats.For the  format, I recommend the excellent work of Armin Ronacher, see the python-inifile library.You can also use a Python file as a configuration format.
My App - Two-level configuration exampleExample of project with two levels of configuration files:LEVEL 1: read the configuration from the sources/application's folder (virtualenv)LEVEL 2: read the configuration from the user HOMEPython project structureAccording to the reference Packaging and Distributing Projectsa (modern) Python project should have the following structure.In the package directory, I add a  for the main entry pointand a  for configuration.Here is the structure::Project's configurationYou must add a  entry in you  to include "my_app.ini" in your Source Distribution.For exemple, here is a small ::For backward compatibility with Python 2.6, you also need a  file.For instance, we can include all  files::To check your configuration, run the following command::Default configuration for loggingThe  store the default configuration for logging.It has only one logger (the root logger), with default handlers and formatters.Main applicationThe  is the entry point of the application.Here is the source code of ::You can add this entry point in your , like this::To test the entry point, you can install it with ::Then you can test your application::Note: the  was launched in a Mac OSX.Her it is.EDIT: Project on GitHubSee Ini Cfg Demo


Answer URL
https://docs.python.org/3/distutils/setupscript.html#installing-additional-files
