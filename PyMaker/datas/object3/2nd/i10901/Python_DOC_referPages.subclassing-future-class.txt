Natural Text
I would like to subclass the Future class of the  Python module.The docs:The Future class encapsulates the asynchronous execution of a callable. Future instances are created by Executor.submit().The docs of  don't explain where it takes the  class from.... How can make Executor.submit() force to take my custom Future class?Why do I need it?I like OOP since it creates readable code. I would like the result to look like this:
Looking at the code, ProcessPoolExecutor.submit() and ThreadPollExecutor.submit(),  returns an instance of Future, which is defined in .So, here comes the trick. You can subclass and replace the original Future, and then add custom methods in the subclass.It's doable, but not recommended. It's better to use composition rather than inheritance for this purpose. There is a good chapter on inheritance and composition in Learn Python the Hard WayBack to the the question, here is a composition example:And then you can subclass  and implement different done method.
The use of the  concrete class is hard-wired into  (whether for processes or threads).  Therefore, I do not think it is possible to do exactly what you are asking.  However, you can return any result from the callable passed to .  Therefore, put your custom methods in a custom return class:Edit Or, if you really want your inner loop to be clean, change the last two lines to:The generator expression  takes the iterator of futures from  and gives you an iterator of the results of those futures.  You can then loop through those results.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#future-objects
