Natural Text
I need to call a multi-parameter function many times while all but one parameter is fixed. I was thinking of using decorators:But this seems confusing since it appears to be calling a 2-parameter function,  with only one argument.Another approach is to use a nested function definition that uses local variables from the parent function:But I hesitate to use this approach since in my actual implementation the wrapped function is very complex. My instinct is that it should have a stand-alone definition.Forgive me if this ventures into the realm of opinion, but is either approach considered better design and/or more Pythonic? Is there some other approach I should consider?
 should work nicely in this case:Its' docstring:partial(func, *args, **keywords) - new function with partial application    of the given arguments and keywords.-- so, you can set keyword arguments as well.PSSadly, the built-in  does not suit this case: it sums over an iterable (in fact, ), so  does not work.
Another possible solution - you can use functools and parametrized decorator:


Answer URL
https://docs.python.org/3/library/functools.html#functools.partial
