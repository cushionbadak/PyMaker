Natural Text
I understand that  is a static method and  can be called from it create a new object, like so:Why doesn't the  call work with other static methods? Why does the following fail?
 with no arguments in Python 3 is basically a hack over its argument based version.When  gets no arguments it fetches the first argument i.e the class using a special cell variable named  and for second argument it will get the first local variable from the stack(which is going to be function's first argument).In case of  it can get both( and ) and works fine.But in this case for example there's no second variable available apart from  hence it fails.Now if we change it to accept an argument then things change:Hence the only solution is to make the things explicit with  in your case:In general I am not sure why the implementation in case of staticmethod can't make an exception and use  for both the arguments to make it work.Related CPython code:
You are right, but  is a static method (special-cased so you need not declare it as such) that takes the class of which an instance was requested as its first argument. Its ideal behavior is somewhat like a classmethod.But when you call a staticmethod method, the method does not receive anything, an has no way to know from what object or class it was called. That's the reason why you cannot access super in a staticmethod.Therefore, new by definition has a class argument in it and can use super along with it.For your logic you should make a call to instatiate your object and call the function that you want to call from there.
 is treated as a special-case by the python interpreter (pretty much all the "dunder" methods are). One aspect of this special case handling is to make  have access to the underlying class object when normally a  does not.  You can search for  in the source code for the  object to take a peek at what is going on under the hood.To solve what you were trying to do with inheritance, you probably want a .


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__new__
