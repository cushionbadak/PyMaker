Natural Text
I'm curious about the  annotation in Python 3.I know I can manipulate state between calls to a property like this ...... which prints:However, is it possible keep this mechanism after it has been passed to a function?Take the following function:Say we cannot change it, meaning we can't simply pass the object to the function and use the properties directly. Is it possible to pass it only the property, or something to that effect, such that each time  is "used" in the function  increments? Is there maybe a way to do this by manipulating and passing the class or object itself? Something similar to , or adding  to the class itself or the  of the class?I've tried the following naive approaches ...... and ...Both print ...... which makes sense seeing as it is evaluated before it is passed to . I also tried to extend :... and then go ...... but it produces ...This also makes sense seeing as we're simply getting the method itself and passing it to the  function.Just a note: This isn't a real world problem/example. I'm simply trying to understand the principles and limits of python itself.
The property() wrapper is a descriptor, meaning that it is only invoked by dotted access, like , and not by plain variable access.To trigger a method invocation or function call with just a variable reference, I think it would be necessary to exec() code in a custom locals namespace:In the above example, just a reference to the variable x is enough to trigger a call to add_ten().This is likely more trouble than its worth, but as you say, you just wanted to see what is possible :-)


Answer URL
https://docs.python.org/3/glossary.html#term-descriptor
https://docs.python.org/3/library/functions.html#exec
https://docs.python.org/3/howto/descriptor.html
