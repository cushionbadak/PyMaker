Natural Text
I am trying to work on a problem and part of the solution is to find the sum of finbonacci numbers that is less than an input number. Now the upper limit of the input number is 10**9. I have reduced the problem to the following O(n) solution, I was wondering if there is a more efficient solution. As you can see I am comparing the values of the list b with the given input and returning the elements that are less than the given number.b is the list of sum of fibonaccis numbers upto that index, so the 1st number is 1, the sum is 1, the 2nd is 1 the sum is 2, the 3rd 2 the sum 4...
You can simply use binary search (for instance using the  function) for that:Or if you want the sum that is less than the input number, you can use:This works since the list is pre-calculated and is strictly incrementing. So that means that it is an ordered list. Binary search works in O(log n) so searching is done efficiently. Furthermore I would add  to the list (at the first position), such that queries with  as input are resolved as well:
This can be done in O(logn)*O(logn) using matrix exponentiation please refer to the link below https://math.stackexchange.com/questions/1102452/modulus-of-sum-of-sequence-of-fibonacci-numbers incase you don't have enough memory to store all 10^9 sums you can use this O(logn) to calculate the i'th sum, if you want the sum less than equal to the given input you can just binary search for i


Answer URL
https://docs.python.org/3/library/bisect.html#bisect.bisect_right
