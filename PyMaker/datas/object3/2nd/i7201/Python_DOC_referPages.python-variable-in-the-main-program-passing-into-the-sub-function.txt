Natural Text
This question already has an answer here:Short description of the scoping rules?                    7 answers                Python rookie question, in the following code,how does batch_size passing into sub function eval_on_data ? Is it global variable? 
Variables that are only referenced inside a function are implicitly  global. If a variable is assigned a value anywhere within the  function’s body, it’s assumed to be a local unless explicitly declared  as global.From: https://docs.python.org/3/faq/programming.html
Look at the following code snippet as an explanation:When you define a function, it 'inherits' variables from the calling scope.Obviously, once you redefine that variable locally within a function, then the local definition applies for the remainder1 of the function.This is why  inherits  and , defined at "top level" (i.e. 's enclosing scope), which it then passes on further to the 'nested' function . (whose enclosing scope is ) then inherits  as defined within , as well as  and , since this was inherited by .Specifically, note that  inside  is , not the global  (as another answer here seemed to suggest).When you only have one function defined at top level, you could conceptually perceive that as being 'nested' at the top level, and therefore inherits the variables defined at top level (i.e. effectively global scope, even if not explicitly defined as such via the global keyword).Have a look at  for more details1.To be clear, I don't mean that you can use the inherited value for a while and suddenly define a local version half-way through; if you do this python will complain that you tried to "use a local variable before assignment". I just mean that you either use the inherited version, or explicitly redefine it, which effectively makes it a local variable of the same name for use in that function.
Edit: Pythons global variable access is not as strictly enforced as in other languages. See this Answer. Similarly, python's encapsulation is unlike other languages, too. See this or this Answer 


Answer URL
https://docs.python.org/3/faq/programming.html
