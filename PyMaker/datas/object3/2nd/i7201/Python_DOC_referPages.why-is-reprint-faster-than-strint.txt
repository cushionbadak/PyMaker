Natural Text
I am wondering why  is faster than . With the following code snippet:I get these timings (python 3.5.2, but very similar results with 2.7.12):If I'm on the right path, the same function  is getting called below the hood.Did I get something wrong or what else is going on that I am missing?update:This probably has nothing to with 's  or  methods but with the differences between  and , as  and  are in fact comparably fast:results in:
Because using  must first go through  then  (create a new string) then  (make a string out of the object) which invokes  and, finally, uses the function you linked., which corresponds to , directly calls  (get the object repr) which then calls  which uses the same function as .Additionally, the path they take through  (the function that handles the  opcode that's generated for calls) is slightly different. From the master branch on GitHub (CPython 3.7):  goes through  (which is the one that calls ). Apart from performing more checks, this also needs to create a tuple to hold the positional arguments (see ).  goes through  which calls .  is also lucky because, since it only accepts a single argument (the switch leads it to the  case in ) there's no need to create a tuple, just indexing of the args. As your update states, this isn't about  vs ,  they are the same function after all; it's all about how  and  reach them.  just needs to work a bit harder. 
I just compared the  and  implementations in the 3.5 branch.See here.There seems to be more checks in :  
There are several possibilities because the CPython functions that are responsible for the  and  return are slightly different.But I guess the primary reason is that  is a  (a class) and the  method has to call  while  can directly go to .


Answer URL
https://docs.python.org/3/library/dis.html#opcode-CALL_FUNCTION
