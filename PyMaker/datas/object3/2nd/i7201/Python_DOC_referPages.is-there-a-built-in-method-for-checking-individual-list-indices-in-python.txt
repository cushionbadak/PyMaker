Natural Text
Python has a built in functionality for checking the validity of entire slices: . Is there something similar that is built-in for individual indices?Specifically, I have an index, say  that I wish to normalize with respect to a 4-element list. Is there a method that is equivalent to the following already built in?My end result is to be able to construct a tuple with a single non- element. I am currently using  to do the check for me, but it seems a little awkward/overkill:I would like to be able to doEverything in this example is pretty negotiable. The only things that are fixed is that I am getting  in a way that can have all of the problems that an arbitrary index can have and that the final result has to be a .I would be more than happy if the solution used numpy and only really applied to numpy arrays instead of Python sequences. Either one would be perfect for the application I have in mind.
If I understand correctly, you can use , in your example . This properly handles negative and out-of-bounds indices. At least in recent versions of Python,  doesn't literally create a full list so this will have decent performance even for large arguments.If you have a large number of indices to do this with in parallel, you might get better performance doing the calculation with Numpy vectorized arithmetic, but I don't think the technique with  will work in that case. You'd have to manually do the calculation using the implementation in your question.
There is a function called  which does exactly what I need. It is particularly useful to be because the implementation I had in mind was for  array indexing:The function was added in version 1.13.0. The source for this function is available here, and the documentation source is here.


Answer URL
https://docs.python.org/3/reference/datamodel.html?highlight=slice.indices#slice.indices
