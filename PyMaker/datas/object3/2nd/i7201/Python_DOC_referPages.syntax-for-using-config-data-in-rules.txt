Natural Text
Is there someplace that fully describes use of config data in snakemake rules?There is an example in the user guide of this in a yaml file:Then, it is used in a rule like this:It seems like the above would replace {sample} to "data/samples/A.fastq" rather than by "A" (and "B" etc.) as it apparently does.  What is the right way to make use of config data in output rules, e.g. to help form the output filename?  This form doesn't work:I'm looking for syntax guidance if I define complex structured data in the yaml file - how do I make use of it in the snake rules?  When do I use Python syntax and when do I use SnakeMake syntax?The yaml and JSON config files are severely limited in that they cannot use values defined earlier in the file to define new values, right?  And that's something that would often be done when setting configuration parameters.What is the advantage of using a configfile?  Why not instead just use include: an include a python file to define parameters?A useful thing would be a reference manual that describes the details of SnakeMake thoroughly.  The current website is kind of scattered, takes a while to find things that you remember seeing previously somewhere in it.
How should config data be used in "output" rules?  I found that the output string cannot contain {config.} values.  However, they can be included using Python code, as follows:But, this method does NOT work (in either output: or input:):However, it DOES work in "shell:":Notice that there are no quotes around OutputDir inside the [] in the shell cmd.  The {} method of expanding values in a string does not use quotes around the keys.Can config data be defined snakefile-wise OR python-wise?  YES! Parameters can be defined in a .yaml file included using 'configfile', or via a regular Python file included using 'include'.  The latter is IMHO superior, since .yaml files don't allow definitions to reference previous ones, something that would be common in all but the simplest configuration files.To define the "OutputDir" parameter above using yaml:xxx.yaml:snakefile:To define it using Python to be exactly compatible with above:xxx.py:snakefile:Or, to define a simple variable 'OutputDir' in a Python included configuration file and then use it in a rule:xxx.py:snakefile:Multi-nested dictionaries and lists can be easily defined and accessed, both via .yaml files and python files.  Example:
YAML ConfigurationThis has to do with the nesting of YAML files, see an example here.The config["samples"] request will return both 'A' and 'B'. I'm my head I think of it returning a list, but I am not positive on the variable type.By using the configfile as listed here:https://snakemake.readthedocs.io/en/latest/tutorial/advanced.htmlYou can link in the following YAML configuration files, in YAML format.settings/config.yaml:ORsettings/config.yaml:Resulting call with YAML config accessSnakefile:Dummy examples, just trying to exemplify the use of different strings and config variables. I use wildcards in the fastq2bam rule. Typically I only use config variables to set things in my rule 'all', when possible this is best practice. I cannot say if the shell call actually works for bwa mem, but I think you get the idea of what I'm implying.A larger version of a Snakefile can be seen hereOnce the configfile is setup, to reference anything in it, use 'config'. It can be used to access deep into a YAML as needed. Here I'll go down 3 hypothetical levels, like so:Equates to (I'm not POSITIVE about the typing, I think it converts to strings)If the YAML is:Code OrganizationPython and Snakemake code, for the most part can be interleaved in certian places. I would advise against this as it will make the code difficult to maintain. It's up to the user to decide how to implement this. E.g, using the run or the shell directive changes how to access the variables. YAML and JSON files are preferred configuration variable files as I believe the provide some support for editting and Command-Line Interface over-ridding of variables. This would not be as clean if it was implemented using externally imported python variables. Also it helps my brain, knowing python files do things, and YAML files store things.YAML is always an external file, but...If you are using a single Snakefile, put the supporting python at the top?If you are using a multi-file system, consider having the supporting python scripts externalized. TutorialsI think a perfect vignette is difficult to design. I'm trying to teach my group about Snakemake, and I have over 40 pages of personally written documentation, I've provided three 1hr+ presentations with PowerPoint slideshows, I've read nearly the entire ReadTheDocs.io manual for Snakemake, and I just recently finished going through the list of additional resources, yet, I'm still learning too! Side note, I found this tutorial  to be very nice as well.Does that provide enough context?
Is there someplace that fully describes use of config data in snakemake rules?There is no limit to what you can put in the config file, provided it can be parsed into python objects. Basically, "your imagination is the limit".What is the right way to make use of config data in output rules, e.g. to help form the output filename?I extract things from the config outside the rules, in plain python.Instead of , I would do:I guess that with what you tried, snakemake has problems formatting the string when there is a mix of things coming from the wildcards, and others. But maybe the following works in python 3.6, using formatted string litterals: . I haven't checked.I'm looking for syntax guidance if I define complex structured data in the yaml file - how do I make use of it in the snake rules? When do I use Python syntax and when do I use SnakeMake syntax?In the snakefile, I typically read the config file to extract configuration information before the rules. This is essentially pure python except that a  object is directly made available by Snakemake for convenience. You could probably just use plain standard python using  or .In the snakefile, outside the rules, you can do whatever computations you want in python. This can be before reading the config as well as after. You can define functions that can be used in rules (for instance to generate rule's inputs), compute lists of things that will be used as wildcards. I think the only thing is that an object needs to be defined before the rules that use it.Snakemake syntax seems mainly a means of describing the rules. Within the  part of a rule, you can use whatever python you want, knowing that you have access to a  object to help you. Input and output of rules are lists of file paths, and you can use python in order to build them.


Answer URL
https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498
