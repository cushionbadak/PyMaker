Natural Text
In thread, I have a loop that reads input from the user console.  The main thread is busy with a Tkinter mainloop().  How do I terminate this program?The main thead calls startGUI() which contains a tk.mainloop() call.  When I press the X close button on the window (this is Linux), Tkinter closes the window and mainloop() returns.  I then try to close stdin hoping that sys.stdin will close and cause sys.stdin.readline() will terminate with a nice EOF allowing my stdinLoop thread terminate.The sys.stdin.realine() never returns after the sys.stdin.close().  (The stdinTh.join() was there to synchronize the closing.)I think Python readline() is doing something clever (in something called NetCommand) that doesn't return cleanly when stdin is closed.Does Python think it is evil to have both a Tkinter GUI and use stdin interactively?  I tried using sys.stdin.read(1), but is seems buffer up a line and returns the whole line -- rather than reading one byte/char as I thought a read(1) would.
Make the thread a daemon thread that will be terminated automaticallyStart the stdin-reading thread with . It will then automatically terminate when the main thread terminates. You don’t need to do anything with stdin explicitly. (You also don’t get a chance to clean up in the stdin-reading thread.)  For example:If you can’t or don’t want to use a daemon thread eventually boils down to a blocking  system call. on  does not return when  is closed. I’m not sure why you expect it to. This is not Python-specific behavior. At least on my Linux/glibc system, the same happens in C.You can break out of a blocking  by sending a signal (such as ) to the blocked thread. In C, you could use  for that. Python does not provide an easy way to do this, and for good reason; but if you insist, you can do it with .But a cleaner/safer approach is to use  to read from either stdin or an inter-thread communication pipe, whichever is available first:This is not portable to Windows, where you can’t  on .


Answer URL
https://docs.python.org/3/library/threading.html#threading.Thread.daemon
https://docs.python.org/3/library/select.html#select.select
