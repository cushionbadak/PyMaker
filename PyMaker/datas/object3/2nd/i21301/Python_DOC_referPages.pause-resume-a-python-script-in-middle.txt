Natural Text
Can I have a running python script(under Windows)being paused in the middle by user , and resume again when user decides ? There is a main manager program which generates,loads and runs other python scripts (by calling python script.py from console).I don't have GUI and user can interact via console.I want my main program be able to respond to user pause/resume command for the running script.Should I define a thread? Whats the approach ?Edit/Update :Let's say I have a small python application with frontend which has various functions. I have a RUN command which runs python scripts in background .I want to implement a PAUSE feature which would pause the running python script . When the user commands RUN again then the python script should resumerunning .using raw_input() or print() forces user to issue command.But in this case, we don't know when user want to interrupt/pause/issue a command.So usual input/print is not usable.
Ok, from what I've seen in my searches on this, even with threading,  is going to work against you, no matter how you get to it (, or even , ., etc.), because they block.Instead, write your manager program as a socket server or something similar.Write the scripts as generators, which are designed to pause execution (every time it hits a ), and just call  on each one in turn, repeatedly. You'll get a  exception when a script completes.For handling the commands, write a second script that connects to the manager program's socket and sends it messages, this will be the console interface the user interacts with (later, you could even upgrade it to a GUI without altering much elsewhere).The server picks these commands up before running the next iteration on the scripts, and if a script is paused by the user, the manager program simply doesn't call  on that script until the user tells it to run again.I haven't tested this, but I think it'll work better than making threads or subprocesses for the external scripts, and then trying to pause (and later kill) them.This is really out of my depth, but perhaps running the scripts in the background and using  and  to pause and continue will work (assuming Linux)?
If it were unix I'd recommend signal, but here is a crude version that does what you ask.Use Ctrl+C to pause, and ENTER to resume.  Ctrl+Break can probably be used as a harsh kill, but I don't have the key on this keyboard.  A more robust version could use select on a pipe/socket, or even threads.
You can make a simple workaround by creating a . Your to-be-paused script may periodically check for existence (or content) of such file.User's  command can create (or fill with proper content) such file.I have used this approach in a similar situation, where I wanted to be able to pause my Python scripts and resume them later. They contain something likein their main loops.It is nasty and could be broken if the code really depended on it, but for the use cases, where the pause is done by users at random, I guess it will not matter.The  command is simply .
I don't understand very well your approach but every time a user needs to press a enter to continue the script you should use:without assigning the receiving answer to a variable.
Have you tried the obvious and print a prompt then read a line from stdin? That will pause your whole script.What you asked in your original question isn't very clear, so if this doesn't do what you want, can you explain why?
If you're launching your python script from the windows command window, you can use msvcrt.kbhit() as a non-blocking key press check as implemented here:http://code.activestate.com/recipes/197140-key-press-detection-for-windows-text-only-console-/
I found so hacky those responses, while being interesting too.The best approach is the https://stackoverflow.com/a/7184165/2480481 doing it using  exception.As i noticed nobody mention "using a debugger", i'll do it.Install pdb, Python debugger with .Follow that to make your script pausable https://stackoverflow.com/a/39478157/2480481 by Ctrl+c instead of exit it.The main benefit of using a debugger (pdb) is that you can inspect the variables, values, etc. This is far way more powerfull than just pause/continue it.Also, you can add Ipython interface with pdb attached to debug your app when crashes. Look at: https://stackoverflow.com/a/14881323/2480481
In Windows, you can suspend/resume running Python scripts .  Type resmon on CMD or via Run command (Windows+R). Locate your Python script process and right-click>Suspend Process. This will unlock CPU usage but not RAM. ;)
You can use  module in python.Eventhough it's a debugger, in your case it helps you pass and continue wherever you have a breakpoint in the code. Also when you resume you can get a glimpse of where it is paused and what are the values of the variables etc. Which will be very helpful.python debugger - pdb


Answer URL
https://docs.python.org/3/library/pdb.html
