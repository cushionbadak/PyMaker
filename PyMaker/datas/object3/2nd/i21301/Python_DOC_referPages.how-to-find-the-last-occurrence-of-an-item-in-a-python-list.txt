Natural Text
Say I have this list:As far as help showed me, there is not a builtin function that returns the last occurrence of a string (like the reverse of ). So basically, how can I find the last occurrence of  in the given list?
If you are actually using just single letters like shown in your example, then  would work handily.  This raises a  if there is no such item, the same error class as  would raise. Demo:For the more general case you could use  on the reversed list: The slicing here creates a copy of the entire list. That's fine for short lists, but for the case where  is very large, efficiency can be better with a lazy approach:One-liner version:
A one-liner that's like Ignacio's except a little simpler/clearer would beIt seems very clear and Pythonic to me: you're looking for the highest index that contains a matching value. No nexts, lambdas, reverseds or itertools required. 
Many of the other solutions require iterating over the entire list.  This does not.Edit: In hindsight this seems like unnecessary wizardry.  I'd do something like this instead:
I like both wim's and Ignacio's answers. However, I think  provides a slightly more readable alternative, lambda notwithstanding. (For Python 3; for Python 2, use  instead of ).This will raise a  exception if the item isn't found; you could catch that and raise a  instead, to make this behave just like .Defined as a function, avoiding the  shortcut:It works for non-chars too. Tested:

You can use the fact that dictionary keys are unique and when building one with tuples only the last assignment of a value for a particular key will be used.  As stated in other answers, this is fine for small lists but it creates a dictionary for all unique values and might not be efficient for large lists.
I came here hoping to find someone had already done the work of writing the most efficient version of , which provided the full interface of  (including optional  and  parameters). I didn't find  that in the answers to this question, or here, or here, or here. So I put this together myself... making use of suggestions from other answers to this and the other questions.The technique using , suggested in several other answers, can be more space-efficient: it needn't create a reversed copy of the full list. But in my (offhand, casual) testing, it's about 50% slower.
Use a simple loop:
just easy as that.no need to import or create a function.

val = [1,2,2,2,2,2,4,5].If you need to find last occurence of 2
Here's a little one-liner for obtaining the last index, using  and a list comprehension:



Answer URL
https://docs.python.org/3/library/stdtypes.html#str.rindex
https://docs.python.org/3/tutorial/datastructures.html#more-on-lists
https://docs.python.org/3/library/functions.html#enumerate
