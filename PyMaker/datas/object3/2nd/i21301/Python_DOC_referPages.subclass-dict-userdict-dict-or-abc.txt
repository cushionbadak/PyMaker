Natural Text
What's the difference between ,  and  and which one is recommended? The docs seem to deprecate ?Also it seems UserDict's  would use my  method whereas  doesn't? Which methods are really essential to override given I want custom  and  function?With s I'd have to implement absolutely all methods since it provides no default implementation?I want to make a  that does two things: all keys and valuesstore some of the values in an SQLite databaseSo which of ,  and  would best allow me to do this?
If you want a custom collection that actually holds the data, subclass dict.  This is especially useful if you want to extend the interface (e.g., add methods).None of the built-in methods will call your custom  / , though.  If you need total control over these, create a custom class that implements the  abstract base class instead.The ABC does not provide a means to store the actual data, only an interface with default implementations for some methods.  These default implementations will, however, call your custom  and .  You will have to use an internal  to hold the data, and implement all abstract methods: , , , , and .The class  from the  module (in Python 2, the module is called  as well) is a wrapper around an internal , implementing the  ABC.  If you want to customize the behavior of a , this implementation could be a starting point.In summary:MutableMapping defines the interface.  Subclass this to create something that acts like a .  It's totally up to you if and how you store the data.UserDict is an implementation of  using an internal "real"  as storage.  If you want a dict-like storage collection but override some methods exposed by , this might be a good starting point for you.  But make sure to read the code to know how the basic methods are implemented, so that you are consistent when overriding a method.dict is "the real thing". Subclass this if you want to extend the interface.  Overriding methods to do custom things might be dangerous, as there are usually multiple ways of accessing the data, and you could end up with an inconsistent API.
Don't use the  class -- you don't need it. As the docs say, you can just subclass  directly.However, you still want the  module, for :Note: , while not officially deprecated, has been removed in Python 3, and it's recommended in the docs that you use . This, however, has a drawback -- you need to implement more of the dictionary interface - , , , , and . With , you can just implement the ones you want to change, and the rest use a default implementation.It will automatically make  use your  as you want.
Based on Secrets Recipes of the Python Ninja bookThe only special thing the UserDict has beyond the normal dictionary operations is a single attribute:data: A real dictionary to hold the contents of the UserDict classTo get to the items in the dictionary, you have to either iterate over them or call items(). While the UserDict instance supports the same methods, the view returned by items() is noticeably different:Notice that the dictionary object returns a tuple of key/values. The UserDict returns an actual dictionary object. Depending on what you are doing, this difference can be important, as is the ability to use the data attribute to access the dictionary.


Answer URL
https://docs.python.org/3/library/collections.html#collections.UserDict
