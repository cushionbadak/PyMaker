Natural Text
What is a clean and elegant way to do interprocess communication between two different python processes?  I currently use named pipes in the OS, but it feels a bit hacky.  I rewrote my stuff with  services, which worked, but it seems when running the code remotely through an SSH session it now tries to initialise X11 which seems completely unnecessary for the things I want to do (they aren't GUI related).  So maybe  is a bit too heavyweight.  I was about to redesign again using sockets, but it seems quite low-level so I thought there might be a higher level module I could import and use which I simply don't know the name of, and I thought I should ask on SO first..My requirement is to be able to run  and have that process just doing it's thing there, like a daemon, and be able to send messages to it with .  The latter call should just sends a message to the existing process and terminates, possibly with a return code  for success or other for failure (so some two-way communication will be required).  
The  library provides listeners and clients that wrap sockets and allow you to pass arbitrary python objects.Your server could listen to receive python objects:Your client could send commands as objects:
Nah, zeromq is the way to go. Delicious, isn't it?
From my experience,  is by far the simplest and most elegant way to go about it.(I know this is an old question, but I've just stumbled upon it..)
I would use sockets; local communication was strongly optimized, so you shouldn't have performance problems and it gives you the ability to distribute your application to different physical nodes if the needs should arise.With regard to the "low-level" approach, you're right. But you can always use an higher-level wrapper depending on your needs. XMLRPC could be a good candidate, but it is maybe overkill for the task you're trying to perform.Twisted offers some good protocol simple implementations, such as LineReceiver (for simple line based messages) or the more elegant AMP (which was, by the way, standardized and implemented in different languages).
I would use sockets, but use Twisted to give you some abstraction, and to make things easy. Their Simple Echo Client / Server example is a good place to start.You would just have to combine the files and instantiate and run either the client or server depending on the passed argument(s).
Check out a cross-platform library/server called RabbitMQ. Might be too heavy for two-process communication, but if you need multi-process or multi-codebase communication (with various different means, e.g. one-to-many, queues, etc), it is a good option.Requirements:Publisher (sends data):Subscriber (receives data, can be multiple):Examples based on https://www.rabbitmq.com/tutorials/tutorial-two-python.html


Answer URL
https://docs.python.org/3/library/multiprocessing.html#authentication-keys
