Natural Text
I am trying to figure out a type mismatch while adding a string to another string in a concatenate operation.Basically the error returned is a  (cannot concatenate string and tuple); so I would like to figure out where I assigned a value as tuple instead of string.All the values that I assign are strings, so I gotta figure out where the tuple is coming from, so I was hoping that there is a way in Python to find out what is contained inside a variable and what type is it.So far using pdb I was able to check the content of the variables, and I get correctly the values that I would expect; but I would like to know also the type of the variable (by logic, if the compiler is able to raise a type error, it means that it knows what is inside a variable and if it is compatible with the operation to perform; so there must be a way to get that value/flag out).Is there any way to print out the type of a variable in python?BTW, I tried to change all my variables to be explicitly strings, but is not feasible to force , so I cannot just cast as string type everywhere I use strings.
You just use:which will output int, str, float, etc...

make use of isinstance ?
You probably want to test (assuming Python 2.x) using . You have the options of using , , and calling the attribute , but  is likely to be the one you want here. Take a look at this article for a more thorough treatment of the differences between the three options.
Please note, should you wanted to check your var type in if statement, the construct won't work. But these will:
repr(object) will give a textual description of object, which should show type and value. Your can print or view this in the debugger.For simple values repr usually returns the same string as you would write the value literally in code. For custom classes it gives the class name and object id, or something else if the class'esis overridden.


Answer URL
https://docs.python.org/3/library/exceptions.html#TypeError
https://docs.python.org/3/library/pdb.html
