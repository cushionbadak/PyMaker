Natural Text
This question already has an answer here:'too many values to unpack', iterating over a dict. key=>string, value=>list                    8 answers                I am getting that exception from this code:The  line is the one throwing the exception. The s are  objects. Anybody have any ideas why?
 is a  and by default you are iterating over just the keys (which are strings).Since  has more than two keys*, they can't be unpacked into the  "", hence the  exception is raised.In Python 2.x, to iterate over the keys and the values (the  ""), we use .However, since you're throwing the key away anyway, you may as well simply iterate over the dictionary's values:In Python 3.x, prefer  (which returns a dictionary view object):
example:
Iterating over a dictionary object itself actually gives you an iterator over its keys. Python is trying to unpack keys, which you get from  into .My crystal ball says  and  are both strings, so your keys are also strings. Strings are iterable, so they can be unpacked; but iterating over the string gives you an iterator over its characters. So whenever  is more than two characters long, you have too many values to unpack. (And whenever it's shorter, you have too few values to unpack.)To fix this, you can iterate explicitly over the  of the dict, which are the (key, value) pairs that you seem to be expecting. But if you only want the values, then just use the values.(In 2.x, , , and  are typically a better idea; the non- versions create a new list object containing the values/keys/items. For large dictionaries and trivial tasks within the iteration, this can be a lot slower than the  versions which just set up an iterator.)


Answer URL
