Natural Text
I want to redirect the print to a .txt file using python. I have a 'for' loop, which will 'print' the output for each of my .bam file while I want to redirect ALL these output to one file. So I tried to putat the beginning of my script. However I get nothing in the .txt file.My script is:So what's the problem? Any other way besides this sys.stdout?I need my result look like:
The most obvious way to do this would be to print to a file object:However, redirecting stdout also works for me.  It is probably fine for a one-off script such as this:Redirecting externally from the shell itself is another good option:Other questions:What is the first filename in your script?  I don't see it initialized.My first guess is that glob doesn't find any bamfiles, and therefore the for loop doesn't run.  Check that the folder exists, and print out bamfiles in your script.Also, use os.path.join and os.path.basename to manipulate paths and filenames.
You can redirect print with the  operator.In most cases, you're better off just writing to the file normally.or, if you have several items you want to write with spaces between, like :
Python 2 or Python 3 API reference: The file argument must be an object with a  method; if it is not present or ,  will be used. Since printed arguments are converted to text strings,  cannot be used with binary mode file objects. For these, use  instead.Since file object normally contains  method, all you need to do is to pass a file object into its argument.Write/Overwrite to FileWrite/Append to File
This works perfectly:Now the hello will be written to the test.txt file. Make sure to close the  with a , without it the content will not be save in the file
The easiest solution isn't through python; its through the shell.  From the first line of your file () I'm guessing you're on a UNIX system.  Just use  statements like you normally would, and don't open the file at all in your script.  When you go to run the file, instead ofto run the file, usewhere you replace  with the name of the file you want the output to go in to.  The  token tells (most) shells to set stdout to the file described by the following token.One important thing that needs to be mentioned here is that "script.py" needs to be made executable for  to run.So before running ,execute this command(make the script executable for all users)
Don't use , use You can change  to point to a file, but this is a pretty clunky and inflexible way to handle this problem.  Instead of using , use the  module.With , you can print just like you would to , or you can also write the output to a file.  You can even use the different message levels (, , , , ) to, for example, only print major issues to the console, but still log minor code actions to a file.A simple exampleImport , get the , and set the processing level:If you want to print to stdout:If you want to also write to a file (if you only want to write to a file skip the last section):Then, wherever you would use  use one of the  methods:To learn more about using more advanced  features, read the excellent  tutorial in the Python docs.
You may not like this answer, but I think it's the RIGHT one. Don't change your stdout destination unless it's absolutely necessary (maybe you're using a library that only outputs to stdout??? clearly not the case here).I think as a good habit you should prepare your data ahead of time as a string, then open your file and write the whole thing at once. This is because input/output operations are the longer you have a file handle open, the more likely an error is to occur with this file (file lock error, i/o error, etc). Just doing it all in one operation leaves no question for when it might have gone wrong.Here's an example:And then when you're all done collecting your "data lines" one line per list item, you can join them with some  characters to make the whole thing outputtable; maybe even wrap your output statement in a  block, for additional safety (will automatically close your output handle even if something goes wrong):However if you have lots of data to write, you could write it one piece at a time. I don't think it's relevant to your application but here's the alternative:
if ur using linux i suggest u to use  command the implementation goes like this python if u dont want to change anything in the code ,i think this might be the best possible solution ,u can also implement logger but u need do some changes in the code.
Changing the value of sys.stdout does change the destination of all calls to print. If you use an alternative way to change the destination of print, you will get the same result.Your bug is somewhere else:it could be in the code you removed for your question (where does filename come from for the call to open?)it could also be that you are not waiting for data to be flushed: if you print on a terminal, data is flushed after every new line, but if you print to a file, it's only flushed when the stdout buffer is full (4096 bytes on most systems).
If redirecting  works for your problem, Gringo Suave's answer is a good demonstration for how to do it.To make it even easier, I made a version utilizing contextmanagers for a succinct generalized calling syntax using the  statement:To use it, you just do the following (derived from Suave's example):It's useful for selectively redirecting  when a module uses it in a way you don't like. The only disadvantage (and this is the dealbreaker for many situations) is that it doesn't work if one wants multiple threads with different values of , but that requires a better, more generalized method: indirect module access. You can see implementations of that in other answers to this question.
Something to extend print function for loops


Answer URL
https://docs.python.org/3/library/functions.html#print
https://docs.python.org/3/library/sys.html#sys.stdout
https://docs.python.org/3/glossary.html#term-file-object
https://docs.python.org/3/glossary.html#term-file-object
