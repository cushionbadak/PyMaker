Natural Text
I am doing several process togethere. Each of the proccess returns some results. How would I collect those results from those process.  returns some results. I would like to collect those results and save them in some variable.  
So right now I would suggest you should use the python  module's Pool as it handles quite  a bit for you. Could you elaborate what you're doing and why you want to use what I assume to be  directly?If you still want to use  directly you should use a Queue to get the return values.example given in the docs:""-Multiprocessing DocsSo processes are things that usually run in the background to do something in general, if you do multiprocessing with them you need to 'throw around' the data since processes don't have shared memory like threads - so that's why you use the Queue - it does it for you. Another thing you can do is pipes, and conveniently they give an example for that as well :).""-Multiprocessing Docswhat this does is manually use pipes to throw around the finished results to the 'parent process' in this case.Also sometimes I find cases which  cannot pickle well so I use this great answer (or my modified specialized variants of) by  that he posts here: ""you should be warned however that this takes over control manually of the processes so certain things can leave 'dead' processes lying around  - which is not a good thing, an example being unexpected signals - this is an example of using pipes for multi-processing though :).If those commands are not in python, e.g. you want to run  then you might be better served by using , as  isn't a good thing to use anymore necessarily as it is now considered that  is an easier-to-use and more flexible tool, a small discussion is presented here. 
You can do something like this with multiprocessingor if you would like to try multithreading with concurrent.futures then take a look at this answer.
If the processes are external scripts then try using the subprocess module. However, your code suggests you want to run functions in parallel. For this, try the multiprocessing module. Some code from this answer for specific details of using multiprocessing:


Answer URL
https://docs.python.org/3/library/multiprocessing.html
https://docs.python.org/3/library/concurrent.futures.html
