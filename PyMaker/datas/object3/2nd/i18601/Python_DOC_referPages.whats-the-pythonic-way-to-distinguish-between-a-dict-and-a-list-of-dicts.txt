Natural Text
So, I'm trying to be a good Python programmer and duck-type wherever I can, but I've got a bit of a problem where my input is either a  or a  of s.I can't distinguish between them being iterable, because they both are.My next thought was simply to call  and hope that returned my list intact and gave me my dict as the only item in a list; alas, it just gives me the list of the dict's keys.I'm now officially out of ideas (short of calling  which is, as we all know, not very pythonic). I just want to end up with a list of dicts, even if my input is a single solitary dict.
Really, there is no obvious pythonic way to do this, because it's an unreasonable input format, and the obvious pythonic way to do it is to fix the inputâ€¦But if you can't do that, then yes, you need to write an adapter (as close to the input edge as possible). The best way to do that depends on the actual data. If it really is either a dict, or a list of dicts, and nothing else is possible (e.g., you're calling  on the results from some badly-written service that returns an object or an array of objects), then there's nothing wrong with .If you want to make it a bit more general, you can use the appropriate ABCs. For example:But unless you have some good reason to need this generality, you're just hiding the hacky workaround, when you're better off keeping it as visible as possible. If it's, e.g., coming out of  from some remote server, handling a  that isn't a  is not useful, right?(If you're using some third-party client library that just returns you "something dict-like" or "something list-like containing dict-like things", then yes, use ABCs. Or, if that library doesn't even support the proper ABCs, you can write code that tries a specific method like . But if that's an issue, you'll know the specific details you're working around, and can code and document appropriately.)
Accessing a  using a non- key will get you either an item, or a . It will get you a  with a . So you can use exception handling:This function will give you a  of  regardless of whether it got a  or a . (If it got a , it makes a list of one item out of it.) This should be fairly safe type-wise, too; other -like or -like objects would probably be considered broken if they didn't have similar behavior.
Maybe I'm being naive, but how about something likeCan you just go ahead and do whatever you were going to do anyways with the data, and decide whether it's a dict or list when something goes awry?
You could check for the presence of an  attribute. has it and  does not.Here's a complete list of the differences in attribute names between  and  (in Python 3.3.2).Attributes on  but not :Attributes on  but not :
Don't use the types module:


Answer URL
