Natural Text
Well I did try to read about Lambda functions but did not get across any link which explains few questions about its flow and the way it is handled by python interpretor or may be I could not understand it properly.I have few question, please can somebody clarify them for me.Here is the code :The output being :My question is :For  and  why  statement was not called and whenwe called  why lambda statement was not compiled.What is the relation between  and  in function .I thought  will 15 ( 10 + 5)Please explain Also, please let me know what is  means here, is that x name of this block? please explain.Thanks all.
First you should understand that everything in Python is an object. And functions do come in everything.From your function , you are actually returning a reference to a  function. Which you can assign in any variable.For e.g.:Now, let's move ahead with your example. Your first statement is inside  is:This assignment is equivalent to:So, the next two call is pretty straighforward:So, now you get the relation between  and . 'x' is replaced by the argument to  and 'n' is replaced by argument to .Please explain print f1(10) returns a reference to a lambda function. And that is what it will print. The output is similar to the one which you get in the below snippet:Except that  is replaced with , since f1 returns a lambda function only.I thought f(5) will 15 ( 10 + 5)You would have got that output, had you re-assigned the return value of  to  in the previous statement. But, since you have just printed the value of ,  is still binded to - . So you get .And then you print the type of , which is a function only:
A  is pretty much another function. To use it, you have to call it too.You return the actual lambda to , not the whole function . Along with this, the lambda isn't called when you return it. That is why when you call  and , it doesn't actually run , but only the lambda.Remember how I said lambdas are like functions? Well  is an argument, while  is the local variable  that you defined in . because you did not actually use  anywhere. You only printed it. if you did , then it would be . prints the lambda function (because that is what is being returned). It doesn't call it, just prints it.
A lambda is just a way of writing a function on one line.Initially you may not see the point in them, but they can be useful for generating lots of slightly different functions, or for specifying functions you may only use once, or all other various instances.To try and understand a little better, imagine the following code - slightly different from your own:This does very much what your own code does, but by defining a function within the first function and then returning it. This essentially does the same thing as your code.


Answer URL
https://docs.python.org/3/reference/expressions.html#lambda
