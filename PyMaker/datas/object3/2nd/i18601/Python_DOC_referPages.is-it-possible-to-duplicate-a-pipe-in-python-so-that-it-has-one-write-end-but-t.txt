Natural Text
Suppose I have a process that generates some data, and this data is consumed by two different processes which are independent of one another. One way to solve this problem would be to have the generated data written to a file, and then have the other two processes read from the file. This will work fine if the size of the file is not big, but IO becomes expensive if there is a lot of data.If I had only one process consuming the data, I can just connect the two processes using  and funnel data from the output of one into the input of the other.However, since I have two consumer processes, I'm not sure if there's a way I can duplicate the read side of the pipe so that both consumers can read from it.
Data from a pipe can only be read once.  You can, however, use an intermediate process that simply copies the data and writes it to two different file descriptors.  On Unix systems, this is done by the standard tool .  An example in POSIX shell:This will write the output of  to both files,  and .You can do the same thing in Python, using a combination od one call to  and a call to  for the  process, and one call to  for each of the processes you want to connect.
So since it's a file descriptor that's returned by a Pipe I regret to say you can't go back; An idea though would be to have either reader process add the data to a  where both can read out of and later drop the data. You can always have a pipe from the writer process to each of the readers as well. also there are other things such as  or  that you could use to ferry around data.Could you describe your problem more in depth?Depending on the platform you can also just have the process use multiple streams - e.g. stdout and a 4th one - but this isn't portable between OS's.


Answer URL
https://docs.python.org/3/library/os.html
