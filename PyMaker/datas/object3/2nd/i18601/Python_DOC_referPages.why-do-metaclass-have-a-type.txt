Natural Text
I've little bit test to fully understand metaclass in python.All of result is same . but each of their address is not sameI can't really understand why metaclass has a metaclass recursively.Explain me please?
Actually, addresses are the same:Everything is an object in Python, and each object must have a class (it should belong to some type).  You can access that class/type reference by  attribute, e.g.:Everything includes classes itself, which are of class/type called :In the same time  is also an object and should reference to some class/type.  But since this is kind of special object, its  attribute refers to itself:
When you do , you get back the type of , which is  (because  is a class identifier). itself is again a class identifier, so you can call  (which is inherited from ) on it and you get back that its type is, again,  because it is a class identifier.Because you will always get back  which is a class itself, you can do this infinitely many times and will always get back that the current object's type is .
All classes are classes which means they are derived from a class called class...
All the python's class object is build by the built-in function type(). You could also try this.The T.class is equal to the build-in function type which is also an object implemented the call function. It's a attribute will be interpret as class(T). As your T class have no base class so type() is used which will return the type object.You could check the python doc about customizing class creation to get detail about class creation. To determining the appropriate metaclassif no bases and no explicit metaclass are given, then type() is usedif an explicit metaclass is given and it is not an instance of type(), then it is used directly as the metaclassif an instance of type() is given as the explicit metaclass, or bases are defined, then the most derived metaclass is used


Answer URL
