Natural Text
I have been trying to return a variable in a function in a variable and use it outside of it:But when I run it, the result is 0. How could I fix this problem?
You are messing up a bit the scopes and/or assignment. Try this:Explanation: The  inside  is different to the  inside the module. You have to assign it on module-level to get the expected result.
Because you declare  in the function, it is not a global variable, thus, you can not access the variable  you created in the function outside of it as they are different scopesIf you want to  to a variable, you have to doOr, you can also add a  statement:By the way, when doing a conditional statement, you don't need the brackets around the  :).
Inside the function , you're creating a new variable , not referring to the one that already exists. If you want to do that, you should use a  statement in the top, as in:
Your  variable inside the function does not have a global scope. So, if you want to store the return value in a variable and output it after that, you can do something like this:
TLDR: A  value must be assigned to something at the call site.Functions in Python have their own scope. It is created on entering (calling) the function, and destroyed when leaving it. Assignment to a name inside a scope makes that name local to this scope - causing it to be destroyed along with the scope.Notably, names in an inner scope may "shadow" names from an outer scope. While the name  exists in both  and the outer scope, it does not refer to the same thing. This has two important implications:The assignment to the inner  does not affect the outer .At the end of , the inner  is destroyed and only the outer  remains.This is why calling  does not have the desired effect: it never modifies the outer  passed to .The  statement defines the value returned by calling a function. It does not return the name, only the value pointed to.The value returned by a function is like any other value - be it from a literal, lookup, or other. Most importantly, the value does not persist unless you assign it to a name or use it directly.So in order to return something from a function for later use, you must store the result to a name. You can then use that name in a later statement. A minimal example for your case looks like this:Addendum: It is possible for a function to modify its containing scope. However, names must then be explicitly declared as being from a foreign scope.The  and  keywords allow to modify names from outer scopes. A  is the name in the closest matching function scope. A  is the name at the module scope, regardless of any functions in-between.Note that modifying outer names is often the sign of an anti-pattern, moreso for s than s. Beyond small scripts, it gets difficult to trace what is accessing and modifying s. Often, it is more appropriate to use classes or generators to hold state.A function can always read names from its containing scope, provided it never writes to the same name. Such closures are very easy to create, and the lack of modification makes them easier to trace. Note that modifying a name anywhere in a function makes it local, unless declared  or :


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#return
https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement
https://docs.python.org/3/reference/simple_stmts.html#the-global-statement
