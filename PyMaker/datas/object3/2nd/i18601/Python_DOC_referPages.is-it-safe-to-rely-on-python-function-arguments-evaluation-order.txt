Natural Text
This question already has an answer here:Is Python's order of evaluation of function arguments and operands deterministic (+ where is it documented)?                    2 answers                Is it safe to assume that function arguments are evaluated from left to right in Python?Reference states that it happens that way but perhaps there is some way to change this order which may break my code.What I want to do is to add time stamp for function call:I understand that I can evaluate the arguments sequentially:But it looks less elegant so I'd prefer the first way if I can rely on it.
Yes, Python always evaluates function arguments from left to right.This goes for any comma seperated list as far as I know:
Quoting from the reference documentation:Python evaluates expressions from left to right.So yes, you can count on that (with one exception, see below).A call (the  part after a primary, such as a function name) is just another expression primary, and the arguments for the call are just more expressions.Note: There is one exception to this rule. When using  in a call (to expand an iterable to form additional positional arguments), then this expression is evaluated before any keyword argument expressions:The linked documentation states:A consequence of this is that although the  syntax may appear after explicit keyword arguments, it is processed before the keyword arguments[.]


Answer URL
https://docs.python.org/3/reference/expressions.html#calls
