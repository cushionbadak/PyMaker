Natural Text
I have a Python module that uses the argparse library. How do I write tests for that section of the code base?
You should refactor your code and move the parsing to a function:Then in your  function you should just call it with:(where the first element of  that represents the script name is removed to not send it as an additional switch during CLI operation.)In your tests, you can then call the parser function with whatever list of arguments you want to test it with:This way you'll never have to execute the code of your application just to test the parser.If you need to change and/or add options to your parser later in your application, then create a factory method:You can later manipulate it if you want, and a test could look like:
"argparse portion" is a bit vague so this answer focuses on one part: the  method. This is the method that interacts with your command line and gets all the passed values. Basically, you can mock what  returns so that it doesn't need to actually get values from the command line. The  package can be installed via pip for python versions 2.6-3.2. It's part of the standard library as  from version 3.3 onwards.You have to include all your command method's args in   even if they're not passed. Give those args a value of . (see the docs) This style is useful for quickly doing testing for cases where different values are passed for each method argument. If you opt to mock  itself for total argparse non-reliance in your tests, make sure it behaves similarly to the actual  class.Below is an example using the first snippet from the argparse library.
Make your  function take  as an argument rather than letting it read from  as it will by default:Then you can test normally.
Populate your arg list by using  and then call, check the results and repeat.Call from a batch/bash file with your flags and a dump args flag.Put all your argument parsing in a separate file and in the  call parse and dump/evaluate the results then test this from a batch/bash file.
A simple way of testing a parser is:Another way is to modify , and call There are lots of examples of testing  in 
I did not want to modify the original serving script so I just mocked out the  part in argparse.This breaks if argparse implementation changes but enough for a quick test script. Sensibility is much more important than specificity in test scripts anyways.
When passing results from  to a function, I sometimes use a  to mock arguments for testing.
 throws a  and prints to stderr, you can catch both of these:You inspect stderr (using  but generally that granularity isn't required.Now you can use  or whichever testing you like:Alternatively you might like to catch and rethrow a different error (instead of ):
I found that the easiest way, for me at least, was just to check sys.argv[0] so see if python was ran as  and not parse anything if that was the case.


Answer URL
https://docs.python.org/3/library/argparse.html#parsing-arguments
https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTrue
https://docs.python.org/3/library/unittest.mock.html
