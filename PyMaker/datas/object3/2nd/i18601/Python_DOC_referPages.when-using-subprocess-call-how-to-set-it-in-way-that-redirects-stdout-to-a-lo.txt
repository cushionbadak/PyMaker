Natural Text
I am trying to rewrite this batch line in Python:When using subprocess.call(), how to set it in way that redirects stdout to a log file if you are using the dictionary configuration for logging?My Python code looks like this so far (this is just part of it):I can not test my program for quite a while until I have some other modules ready. But is my attempt at redirection correct? Is this going to be able to log the output of the  into my logdetails file logger?Is it necessary for me to do  first like I did before sending stdout to logdetails file logger?Also, does anyone know what the 41 means? I do not know what to do with it.PS: I've looked at this already, but I still don't get it since they are not using dictionary configuration for logging.UPDATE: PS: I've also looked at this information to understand the batch line of code.UPDATE2: Sorry, I gave you the wrong line of code at the beginning. The batch file I was supposed to give paste here is:not this one:  Thanks.
Your question is a bit confused.First, there's the  bit. It doesn't matter which mechanism you use for configuring logging; in the end, you still end up with a  object with the same methods. What you're doing seems reasonable, although it is a bit weird to use  as a name for a logger.Next, there's this:Is it necessary for me to do stderr = STDOUT first like I did before sending stdout to logdetails file logger?Setting  means, as the docs explain:… that the stderr data from the child process should be captured into the same file handle as for stdout.In other words, if you want to log stdout and stderr together, then yes, you do need to do this; if you want to log just stdout, or just stderr, or to log them each separately, then no, you should not do this.From your batch line, it sounds like you do want to mix stdout and stderr together, in which case you're doing the right thing.Finally, there's what you pass for stdout. From the same documentation:Valid values are PIPE, DEVNULL, an existing file descriptor (a positive integer), an existing file object, and None.In particular, you cannot give it a  object; you have to give it a file object or .If you just want it to append stdout and stderr to the same file the logger is using, you can get the logger's file object and pass that. However, a much simpler way to do it would be to not use  in the first place—just  a file,  the header to that, and pass it as the  parameter. For example:But, given that you're using  in the first place, it sounds like what you really want is something like this: read each line of stderr, and log it as a separate log message. If so, you need to use a . If you need to stream it continuously to the log (e.g., it's going to take a long time, send a lot of data, possibly fail in the middle…), you'll need to explicitly  from the  and then log what you get. But if not, you can just use , or even . For example:
Its easy to redirect output to a file, harder to do it through the logging module. Assuming that all you really want is the python equivalent of piping stdout and stderr to a file, you can do:You can use a with clause if you worry about the file closing:If you want to log stdout as info and stderr as warn, you can use threads:


Answer URL
