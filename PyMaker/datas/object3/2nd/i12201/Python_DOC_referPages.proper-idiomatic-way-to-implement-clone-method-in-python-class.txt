Natural Text
How to idiomatically correct implement  method in Python? See:Reason for  - to construct identical class instance from usage point of view so internal state of copy may be changed without effecting original object.To be concrete: constructor may initialize private fields which are primitive types or complex types:With primitive types - nothing hard. What to do with complex types?If complex type is build-in like , ,  - there is  /  package but I am unsure how usual it usage.For complex types that foreign classes I don't know what to do.(1) Are any helpers to make copy easy? Or conventions so I can relay on them?When I copy object I see no reason to use provided constructors, because I already have known all internal contracts and able to manipulate of internal state privately?(2) How I can instantiate object of same type without using constructor?UPDATE I am taking Principles of Computing Coursera class and implement class that hidden by teaching stuff (for scoring reason).They use  in provided "interface". I am not experienced in Python classes so ask to proper way to deal in situation.
Either implement  (and/or ) to provide direct support to the  module APIs, or register a -ing function with ;  will use  registered method to implement deepcopying if no  is defined.Note that many Python types (e.g. , , etc.) also provide a method named  that performs a shallow copy; it's easy to support both idioms by assigning one name to the other, e.g.:


Answer URL
https://docs.python.org/3/library/copy.html
https://docs.python.org/3/library/copyreg.html#module-copyreg
