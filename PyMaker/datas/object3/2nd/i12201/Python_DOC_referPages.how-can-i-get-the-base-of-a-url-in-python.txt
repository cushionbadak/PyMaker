Natural Text
I'm trying to determine the base of a URL, or everything besides the page and parameters. I tried using split, but is there a better way than splitting it up into pieces? Is there a way I can remove everything from the last '/'?Given this:http://127.0.0.1/asdf/login.phpI would like:http://127.0.0.1/asdf/
Well, for one, you could just use :It's not explicitly for URLs, but it happens to work on them (even on Windows), it just doesn't leave the trailing slash (you can just add it back yourself).You may also want to look at  for more fine-grained parsing; if the URL has a query string or hash involved, you'd want to parse it into pieces, trim the  component returned by parsing, then recombine, so the path is trimmed without losing query and hash info.Lastly, if you want to just split off the component after the last slash, you can do an  with a  of , and keep the first component:
The best way to do this is use .From the docs:The module has been designed to match the Internet RFC on Relative  Uniform Resource Locators. It supports the following URL schemes:  , , , , , , , , , , ,  , , , , , , , , , ,  , , , , .You'd want to do something like this using urlsplit and urlunsplit:
Get the right-most occurence of slash; use the string slice through that position in the original string.  The +1 gets you that final slash at the end.
No need to use a regex, you can just use :
If you use python3, you can use urlparse and urlunparse.


Answer URL
https://docs.python.org/3/library/os.path.html#os.path.dirname
https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlparse
https://docs.python.org/3/library/stdtypes.html#str.rsplit
https://docs.python.org/3/library/urllib.parse.html
https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlsplit
https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlunsplit
