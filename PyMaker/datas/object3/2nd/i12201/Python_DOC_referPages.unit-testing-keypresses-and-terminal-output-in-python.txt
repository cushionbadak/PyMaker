Natural Text
If you search Google or SO for 'unit test stdin stdout python' you will find very many questions, each and every one of which is answered in one way or another withDo you really need to unit test Python's builtin  /  methods?My answer is yes, I emphatically do, because I'm essentially implementing my own  + poor-man's  / , and I need to test using stdin and the contents of the terminal.I happen to use a Unix-derived OS so I have pipes  and shell redirection , so I could write a little shell script to do this alongside some Python helper code, and to test the terminal's actions (ANSI escape sequences, cursor movement, exactly what gets printed, etc) I could read from a known , but there are two main reasons I don't want to do this:Testing code should be as cross-platform as the code it's testing (and not so fragile!)I quite like , thank you, and I don't want to resort to shell scripting and unix hackery (as much as I like unix hackery) just to test my module.There must be a better way to test things like , not when you're using  but when you're developing a .Since it was requested, here's some examples of what I'm looking to test: (full code on github)
Late to the party here, but: I'm in exactly this situation, wanting to test the actual user-facing portions of the CLI, to be able to (i) ensure consistent behavior resulting from a given set of user keypresses, and (ii) inspect the actual content printed to console.I put together a couple of classes that achieve this in (what seems to me) a pretty nice way, originally implemented here and, as of this writing, now published in v1.0 pre-release on PyPI as stdio-mgr.  Most of it isn't especially novel, just a context manager to mock // over to temporary streams, as already described in answers like this one, this one and this one.The big difference from anything I've seen elsewhere is that  is mocked to a custom  subclass which (a) automatically tees everything read from the stream over to the mocked , and thus echoes the "typed input" to the "console"; and (b) implements an  helper method to allow addition of more content to the end of mock- without changing the seek position.Example usage:Note that even though the string appended to  was newline-terminated (otherwise execution would hang), per the standard behavior  stripped that trailing  before the string was stored in . As can be seen, the question mark used as the prompt for  is also stored in .However, since  tees the content read from "" before it's passed to ,  received , not . While this newline handling has the potential to get somewhat confounded, I'm pretty sure there's not much to be done about itâ€”any twiddles would probably break the transparency of the mock from the perspective of the wrapped code.
You can use the  module to call your script from within python. You can then send test input via  and  can then be tested for correct values


Answer URL
https://docs.python.org/3/library/functions.html#input
