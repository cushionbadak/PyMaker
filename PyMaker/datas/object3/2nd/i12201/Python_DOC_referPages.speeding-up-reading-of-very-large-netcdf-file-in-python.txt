Natural Text
I have a very large netCDF file that I am reading using netCDF4 in pythonI cannot read this file all at once since its dimensions (1200 x 720 x 1440) are too big for the entire file to be in memory at once. The 1st dimension represents time, and the next 2 represent latitude and longitude respectively.However, reading one year at a time is excruciatingly slow. How do I speed this up for the use cases below?--EDITThe chunksize is 1I can read a range of years: nc_file.variables[variable_name][0:100, :, :]There are several use-cases:for yr in years:
I highly recommend that you take a look at the  and  projects.   Using these powerful tools will allow you to easily split up the computation in chunks.  This brings up two advantages: you can compute on data which does not fit in memory, and you can use all of the cores in your machine for better performance.  You can optimize the performance by appropriately choosing the chunk size (see documentation).You can load your data from netCDF by doing something as simple as If you want to chunk your data in years along the time dimension, then you specify the  parameter (assuming that the year coordinate is named 'year'):Since the other coordinates do not appear in the  dict,  then a single chunk will be used for them.  (See more details in the documentation here.).  This will be useful for your first requirement, where you want to multiply each year by a 2D array.  You would simply do: Now,  and  are computing your result lazily.  In order to trigger the actual computation, you can simply ask  to save your result back to netCDF:The computation gets triggered through , which takes care of splitting the processing out in chunks and thus enables working with data that does not fit in memory.  In addition,  will take care of using all your processor cores for computing chunks.  The  and  projects still don't handle nicely situations where chunks do not "align" well for parallel computation.  Since in this case we chunked only in the 'year' dimension, we expect to have no issues. If you want to add two different netCDF files together, it is as simple as:I have provided a fully working example using a dataset available online. 
Check chunking of file.  will give the answer. If chunk size in time dimension is larger than one, You should read the same amount of years at once, otherwise You are reading several years at once from disk and using only one at a time.How slow is slow? Max few seconds per timestep sounds reasonable for an array of this size.Giving more info on what You do with the data later may give us more guidance on where the problem may be.
This is Kinda Hacky, but may be the simplest solution:Read subsets of the file into memory, then cPickle (https://docs.python.org/3/library/pickle.html) the file back to disk for future use. Loading your data from a pickled data structure is likely to be faster than parsing netCDF every time.


Answer URL
https://docs.python.org/3/library/pickle.html
