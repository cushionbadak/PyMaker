Natural Text
I'm trying to migrate a project to Python 3.4 and I'm having trouble understanding and implementing the Python3 rich comparison feature. The project implements a Python extension of a C library I'm new to Python and it’s been about 15 years since I’ve done any CI didn't write the original project and it is abandoned. It only had one commit in 2012 and it's based on another Author's work from 2006. However, the project does exactly what I want so I'm keen to revive and update it.I've been able update the code to build without errors to Python 2.7 and get it running and passing the tests. I've also created a Python 3.4 branch that will now build without errors. This was done by basically looking up each error and warning thrown by the compiler and implementing the recommended fix. However, when I import the library with Python 3.4 after compiling it like:I get the following error:Looking at the extension there is indeed no tp_richcompare implemenation so I've tried to add it.I've tried implementing several solutions I've found online but none have worked and I don't know enough about the problem to fix it without help. I've tried implementing the required rich comparison functionality without an success. An example of an attempt I've tried is:However I get errors like:Now I'm guessing based on the error and some searching that I'm messing up an assignment of a value VS an address, but I'm not sure  if this is correct or how to go about fixing it.Can anyone help me implement the required rich comparison method? I've tried resources like: http://py3c.readthedocs.org/ but I'm just not getting it.The full code for the project can be found here: https://github.com/mattporritt/suffix-tree-unicode on the python_34 branch
You can't just copy the previous implementation of .  has a considerably different contract. It (usually) returns  or  rather than ,  or  and its return value should depend on the comparison that was requested ().
In the end I went with ctypes for my solution: https://docs.python.org/3.4/library/ctypes.htmlI compiled the library as a shared object (.so) and was able to get a basic Python interface up in about 15 mins. All I needed was as an API interface to the c library, so ctypes was exactly what I needed and was easier than CFFI or the original method I was using.


Answer URL
https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_richcompare
