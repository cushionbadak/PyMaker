Natural Text
I'm having trouble with the TYPES involved with this piece of code I wrote.  Ideally I wouldn't pay any mind to encoding types, but sometimes you're forced.So this is all centered around a directory walk of an NTFS FS on Windows.  Certain characters in file names (unicode, it seems) couldn't be written out to files or printed to the standard windows terminal (yes, I tried "chcp 65001" to print, which didn't work, but I need to write to a standard plain text file anyway)So I do the following.  As I understand it Python3 (I'm using 3.2.2) is unicode, so str() objects (and all supporting libs) are unicode, so I did this:thinking utf-8 string would be returned and all is good with the world, but then I was getting errors about implicit type conversions to  when I went to file write or stdout.  So I did the following:(the hashmap is dumped later).thinking now it's in a native unicode Python3 string...but when I dump it into a file, using this:I still get this in the file:which is indicative as a byte array.So what am I doing wrong here?  I'm sorry 'non-traditional' characters are in this directory tree, I'd rather them not be there, but they're there.  How do I store them (convert them?) into a manner that can be printed/written in normal plain text (ASCII?) and why is a byte array being returned from my hashmap where I'm clearly storing a standard string?  Dealing with unicode has been a pretty horrific experience for me.
 returns a string,  converts the string to a bytes object, so  contains a bytes object.When you call  on a bytes object, the bytes object is not decoded but instead a string representation is created:So your dictionary now contains lots of  strings.The “fix” is simple: Just don’t encode the strings you get from .If you get errors while writing the strings out to the file, then consider specifying an explicit encoding when opening the file in text mode:Then Python will automatically write strings correctly.Alternatively, to be completely safe, you can also open the file in binary mode and write the encoded strings instead:But as long as you are within Python, you don’t need to worry about special characters inside the string objects. Python can handle them; it’s just the output devices that typically fail (e.g. printing to the console).
You encoded your unicode string:This produces a bytestring. Either don't encode, or when storing the paths in your  decode again:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.encode
