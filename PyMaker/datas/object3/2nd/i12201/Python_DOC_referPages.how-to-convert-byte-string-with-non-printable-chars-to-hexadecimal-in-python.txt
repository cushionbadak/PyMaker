Natural Text
This question already has an answer here:What's the correct way to convert bytes to a hex string in Python 3?                    8 answers                I have an ANSI string  and I need to convert it to hexadecimal like this:  (converted with XVI32).The problem is that Python cannot encode all characters correctly (some of them are incorrectly displayed even here, on Stack Overflow) so I have to deal with them with a byte string.So the above string is in bytes this: And that's what I need to convert to hexadecimal.So far I tried binascii with no success, I've tried this:It prints: Okay. It looks like I'm getting somewhere... but what's up with the  thing?When I remove 0x from the string like this:I get  which looks like it's correct. But sometimes the byte string has a  next to a  and it gets removed from the string resulting in a incorrect hexadecimal string. (the string above is missing the 0 at the beginning).Any ideas?
If you're running python 3.5+,  type has an new  method that returns string representation.Otherwise you can use  to do the same thing
As per the documentation,  converts “an integer number to a lowercase hexadecimal string prefixed with ‘0x’.” So when using  you always get a  prefix. You will always have to remove that if you want to concatenate multiple hex representations.But sometimes the byte string has a  next to a  and it gets removed from the string resulting in a incorrect hexadecimal string. (the string above is missing the  at the beginning).That does not make any sense.  is not a valid hexadecimal character, so in your solution it can only be generated by the  call. And that, as said above, will always create a . So the sequence  can never appear in a different way in your resulting string, so replacing  by nothing should work just fine.The actual problem in your solution is that  does not enforce a two-digit result, as simply shown by this example:So in your case, since the string starts with  which represents the number ,  only returns , so you only get a single digit here which is the real cause of your problem.What you can do is use format strings to perform the conversion to hexadecimal. That way you can both leave out the prefix and enforce a length of two digits. You can then use  to combine it all into a single hexadecimal string:This solution does not only work with a bytes string but with really anything that can be formatted as a hexadecimal string (e.g. an integer list):


Answer URL
https://docs.python.org/3/library/stdtypes.html#bytes.hex
https://docs.python.org/3/library/binascii.html#binascii.hexlify
https://docs.python.org/3/library/functions.html#hex
