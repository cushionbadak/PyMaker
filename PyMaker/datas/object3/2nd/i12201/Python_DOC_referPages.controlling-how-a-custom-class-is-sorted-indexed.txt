Natural Text
I am attempting to represent a calendar in a Class-based format.Currently, the data is represented in an OrderedDict of the following form:I would ideally like to instantiate some sort of  class which represents the data in the dictionary, with a corresponding  class that holds a sorted container (list, OrderedDict?) of s. Features I'm looking at:a number of  objects to be stored, sorted, as ability to retrieve / work with s by date (i.e. I would like to use the date as a sort of 'key' so I could retrieve an  through something similar to a way to append/modify attributes of  instances which are stored as part of a  instance so that if I were to attempt to add an  to  where there already was an  object in  representing that date, the  object would instead be merged "automatically."I think for #1, I basically understand the answer:I would use the  decorator (https://docs.python.org/2/library/functools.html#functools.total_ordering), specify an  and other comparison operator to use the 's  attr, and be good-to-go.No idea. There are a few posts on SO on this topic, but I haven't found any that meet my needs.The best way I know would be to write a custom merging function (something akin to a custom_append).  and have a merge occur OR if  doesn't exist, create  Again, not sure of the best/smoothest way to do this. I'd love to use .Also: what would be the best datatype to store the  instances in, in the  instance?Alternatively, given what I'm trying to accomplish, some of my thinking might just be... off. Any help on that front would be appreciated.Alternatively, this all may be way more trouble than it's worth, in which case I'm still interested in how you would theoretically accomplish these things using classes.
For #2 There are a few ways to do this. One way might be to convert the date to some sort of canonical format, then use that as a string index into a dictionary. For #3 take a look at https://docs.python.org/3/library/collections.abc.html#collections.abc.SequenceIt makes sure you implement the functions required for indexing and  operators to work the way you want. Specifically for  to work you need to override the  function. For  to do what you want you'll need to override the  and  functions -- however collections.DefaultDict nearly does what you want there so I might be tempted to base EnhancedCalendar off of that. I think I would use a list datatype to store the days inside the calendar, then you would index by day-1. 


Answer URL
https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
