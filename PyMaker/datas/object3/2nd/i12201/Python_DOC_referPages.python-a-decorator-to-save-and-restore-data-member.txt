Natural Text
I'm looking for a python decorator to implement a 'save & restore' feature. What I want is a decorator which save some data members of an object instance, execute a method which could change these data members, and restore the old state of the instance. Here is a minimal example:The output of this code is But what I want with the decorator  isI feel like I'm lost with variable scope but I don't know where to look for such feature. Any idea would help, thanks! (one more information: I'm using Python 2.7)
Your decorator would work for a member that would be changed by overwriting. However, the member in question is a list and it is saved and restored by reference. This means that as the job mutates the list, it mutates the saved value as well because it's the very same (identical) list instance.What you'd need to do if you're sure that the member is always a list is save and restore the old object but put a copy in its place for the job to mutate:Update: In the general case, the  module can be used to create a "deep copy" of the member:If custom objects are involved, they can implement how to  their instances. See the documentation of the  module.


Answer URL
https://docs.python.org/3/library/contextlib.html
