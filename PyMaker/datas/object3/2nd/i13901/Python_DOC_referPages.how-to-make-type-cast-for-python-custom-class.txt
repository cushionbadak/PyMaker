Natural Text
Consider a class;I make an object of it;Convert it to string;Now, how can i convert strObj to an object of temp class??
As noted by Anand in comments, what you're looking for is object serialization and deserialization. One way to achieve this is through the pickle (or cPickle) module:Note, however, that one gotcha in using the pickle module is dealing with implementation versions. As suggested in the Python docs, if you want an unpickled instance to automatically handle implementation versioning, you may want to add a version instance attribute and add a custom __setstate__ implementation: https://docs.python.org/2/library/pickle.html#object.setstate. Otherwise, the version of the object at serialization time will be exactly what you get at deserialization time, regardless of code changes made to the object itself.
To answer the question, one way of doing this is by "abusing"  in combination with . Let's first have a look at the  docs (emphasis: mine):Called by the repr() built-in function to compute the “official”  string representation of an object. If at all possible, this should  look like a valid Python expression that could be used to recreate an  object with the same value (given an appropriate environment). If this  is not possible, a string of the form <...some useful description...>  should be returned. The return value must be a string object. If a  class defines  but not , then  is also  used when an “informal” string representation of instances of that  class is required.This is typically used for debugging, so it is important that the  representation is information-rich and unambiguous.With this in mind, we know that it is recommended to return a string from  which can be used with . This is implied by the statement that the value "should look like a valid Python expression".ExampleHere is an example which uses this. The example also overrides , but only for convenience for the print-outs. And for completeness we also add a value to the instance.The example creates a new instance. Then the value is converted to a string using  (by using the  function. Next that string value is passed to  which will evaluate the string and return the result. The result will be a new instance of the same class and is stored in . We also print out the  to visualise that we have indeed two different instances. Finally we show that  is indeed :When is it OK to do this?This is 100% acceptable if absolutely everything going into  is under your control! This means:The scope in which  is called is under your controlNo place in the evaluated string should contain data coming from outside sources. Outside sources include:Database valuesUser-InputData read from disk... basically any I/OKeeping all this in mind and guaranteeing that at no point in the future of the project I/O will end up in an  call is almost impossible. As such I strongly recommend avoiding this in important production code as it opens up nasty security holes.For code not running in production, this is absolutely acceptable. For example unit-tests, personal utility scripts, e.t.c. But the risk should always be taken into consideration.Why is this Dangerous?The code passed into  is executed inside the Python process calling it, with the same privileges. Example: You read a value from a DB where multiple users have access and you  it. In that case, another user may inject code via the database and that code will run as your user!Using  when the values come from outside sources opens up the possibility of code-injections.It is not guaranteed that  will return a valid Python expression. This is only a recommendation by the docs. Hence the call to  with  is prone to run-time errors.In the example above, the scope calling  needs to "know" about the class  (it must be imported). It only looks for the name. So if by pure chance that same name exists in the scope, but pointing to another object, you will call something else unintentionally and may run into weird bugs. Granted, this is an edge-case.Safer AlternativeUse one of the many available serialisation options. The most popular, and simplest one to use is to convert the object to/from JSON strings. The above example could be made safe like this:This is only marginally more difficult but much safer.The same approach can be used with other serialisation methods. Popular formats are:XMLYAMLini/cfg filespickle (note that this uses bytes instead of text as serialisation medium).MessagePack (note that this uses bytes instead of text as serialisation medium).Custom Implementation...
For those who are looking for overriding conversion builtins such as , , and , see Overload int() in Python. You need to implement , , or  on the object.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__repr__
https://docs.python.org/3/library/functions.html#eval
https://docs.python.org/3/library/functions.html#repr
https://docs.python.org/3/library/functions.html#eval
https://docs.python.org/3/library/functions.html#id
https://docs.python.org/3/library/xml.dom.minidom.html
https://docs.python.org/3/library/configparser.html
https://docs.python.org/3/library/pickle.html
