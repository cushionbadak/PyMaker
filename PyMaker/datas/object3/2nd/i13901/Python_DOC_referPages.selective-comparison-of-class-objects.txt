Natural Text
I need to make multiple comparisons of class objects. However, only values of selected fields are subject to comparison, i.e.:Currently I do it this way:As my actual number of relevant fields is greater than 10, this approach leads to quite bulky code. That's why I tried something like this:The code is compact; however, the performance suffers significantly:Is there a way to implement selective object comparison more efficiently?EDIT: In fact I need several such functions (which compare objects by different, sometimes overlapping, sets of fields). That's why I do not want to overwrite built-in class methods.
If the fields exist for all instances in one particular comparison set, try saving the list to compare to the class.or pre-compute outside, betteroutput:re. overriding eq, I am pretty sure you could have something like.
 not only includes instance attributes, but it'll traverse the class hierarchy as well. As such it does much more work than is needed here;  is really only suitable for debugging tasks.Stick to using  instead, perhaps combined with : returns a dictionary containing the attributes of the instance only; in the above generator expression I access both the attribute name and its value in one step by using the  method.I replaced the  method call for  to use the same dictionary approach, this saves a framestack push and pop each time as the key lookup can be handled in bytecode (C code) entirely. Note that this does assume you are not using properties; only actual instance attributes are going to be listed.This method still has to do more work than hardcoding the  branches, but it is at least not performing all that bad:


Answer URL
https://docs.python.org/3/library/functions.html#vars
https://docs.python.org/3/library/functions.html#all
