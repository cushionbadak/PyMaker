Natural Text
This question already has an answer here:Use of “global” keyword in Python                    10 answers                I thought global variables inside a Python function had to be declared global. So why does the following compile and run without error? I'd appreciate a citation to the Python3 manual if possible.
You asked for a reference to the Python 3 manual. I've bolded the section that says you don't need to use the  keyword to reference free variables.https://docs.python.org/3/reference/simple_stmts.html?highlight=global#grammar-token-global_stmt7.12. The global statement global_stmt ::=  "global" identifier ("," identifier)*The global statement is a declaration which holds for the  entire current code block. It means that the listed identifiers are to  be interpreted as globals. It would be impossible to assign to a  global variable without global, although free variables may refer to  globals without being declared global.Note that in most code all of the classes and functions that you reference are globals (or builtins) but you didn't think twice about not needing  before calling it.
Its all about scope, since  is declared outside, free from any class or function, it can be reached from anywhere. To get a better idea, consider these two examples:In the above example, we overwrite the  variable locally, in the , class, but the global instance of text is the same. But in this instance:We declare that we want the  version of text and then we can modify it.BUT:  variables are frowned upon, consider using input arguments to functions and returning new values instead of having variable globally accessible everywhereThe right way to do it:Have  encapsulated in the class!
You don't need to specify a variable using  if you just need to access it. You can do that without a . Here, Python will look in the class  scope first for the  variable. Since, it does not find the variable  in the  class so it will look into outer scope. Now, it finds the variable , so it uses that value to print the output.According to Python docs,  at any time during execution, there are at least three nested scopes whose namespaces are directly accessible: the innermost scope, which is searched first, contains the local namesthe scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contains non-local, but also  non-global namesthe next-to-last scope contains the current module’s global namesthe outermost scope (searched last) is the namespace containing built-in names


Answer URL
https://docs.python.org/3/reference/simple_stmts.html?highlight=global#grammar-token-global_stmt
