Natural Text
I have a complex permutation problem that I'm finding really hard to code.Bear with me, this might look a little ugly.I have something of this form:I want to output all "permutations" like this:Intuitively, I need all orderings of the tuples contained in the lists (with no repetition). However, tuples within the same list cannot be together. E.g. For [[(1, 2)], [(1, 2),(1, 3)]], (1,2) and (1,2),(1,3) are in the same list. So an element in the output cannot be (1,2)(1,3)(1,2).I have some messy code written that does the job, but will require cleanup of the output:This would be sufficient, but I also need to be able to do it for inputs like this:Thus, elements like this would be incuded in the output:Anybody have any idea how I should approach this? Or any tips?
I might be wrong, but from what I understand, you want to do the cartesian product of several ensembles (whose element are themselves ensembles) :[[(1, 2)], [(1, 2),(1, 3)]] X [[(2, 3)]]Then for each element of this cartesian product, make all the permutations of the elements it contains, in this example, the elements of the cartesian product are :([(1, 2)],[(2, 3)])([(1, 2),(1, 3)], [(2, 3)])And finally take all the permutations of each elements :permutations of first element : ([(1, 2)],[(2, 3)]), ([(2, 3)],[(1, 2)])permutations of second element : ([(1, 2),(1, 3)], [(2, 3)]), ([(2, 3)],[(1, 2),(1, 3)])If this is what you want, then you can do it with  and  from the  module (you also need  to properly turn each permutation in a list of tuples and get the exact output you want) :You can directly get the list of 'permutations' with list comprehensions :


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.permutations
