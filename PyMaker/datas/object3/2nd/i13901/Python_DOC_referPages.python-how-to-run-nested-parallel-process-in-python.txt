Natural Text
I have a dataset  of trader transactions.I have 2 levels of for loops as follows:I would like to parallelise the calculations for each asset in , and I also want to parallelise the calculations for each trader for every asset. After ALL these calculations are done, I want to do additional analysis based on the list of .This is my first attempt at parallel processing, so please be patient with me, and I appreciate your help.
If you use , which provides a fork of , you can easily nest parallel maps.  is built for easily testing combinations of nested parallel maps -- which are direct translations of nested for loops.It provides a selection of maps that are blocking, non-blocking, iterative, asynchronous, serial, parallel, and distributed.Here this example uses a processing pool and a thread pool, where the thread map call is blocking, while the processing map call is asynchronous (note the  at the end of the last line).Get  here: https://github.com/uqfoundationor with:
Nested parallelism can be done elegantly with Ray, a system that allows you to easily parallelize and distribute your Python code.Assume you want to parallelize the following nested programBellow is the Ray code parallelizing the above code:Use the  for each function that we want to execute concurrently in its own process. A remote function returns a future (i.e., an identifier to the result) rather than the result itself. When invoking a remote function  the  modifier, i.e.,  Use the  helper function to convert a nested list of ids to values. Note the program structure is identical. You only need to add  and then convert the futures (ids) returned by the remote functions to values using the  helper function.There are a number of advantages of using Ray over the multiprocessing module. In particular, the same code will run on a single machine as well as on a cluster of machines. For more advantages of Ray see this related post.
Instead of using , use :From then on, you can try different parallel  implementations s.a. 's, or '
Probably threading, from standard python library, is most convenient approach:


Answer URL
https://docs.python.org/3/library/multiprocessing.html#introduction
