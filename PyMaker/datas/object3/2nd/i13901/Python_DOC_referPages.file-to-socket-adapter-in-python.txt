Natural Text
I want to use the asyncio library on Windows to read file-like objects (such as  and serial ports).However,  on Windows expects readable objects to be sockets.Is it possible to write an adapter class to wrap a file-like object with the API of a socket so that I could use  and serial ports with ?If so, please could you give an example because I've never used sockets before?
Short answerNo and maybe yes.Long answerYou can't just wrap a file-like object as a socket, or vice-versa, and expect it to work.  is using system calls under the hood to do its async magic and  is  from the system's point of view no mater how much you wrap it. When using the default  it uses one of the select-like system calls. On Windows it uses the  system call, which does not support anything but sockets.So,  sucks on windows. Is there another option? Yes. On Windows, and only Windows, there is another API for doing async operations called . It's a  type multiplexer as opposed to the  based  type multiplexers. The API is much more complicated than doing a simple  call on a file, but fortunately  has some support for it already. The  uses IOCP on Windows and it should theoretically supports reading from . I don't have access to a Windows machine so I can't test this, but give this a go:And run the equivalent of this on Windows:If this works, then at least you can do async  on Windows. And then you could try something similar for  or perhaps even serial ports.If all else fails, you could always simulate async behaviour by wrapping blocking calls in threads using the  coroutine:


Answer URL
https://docs.python.org/3/library/asyncio.html
https://docs.python.org/3/library/select.html
https://docs.python.org/3/library/select.html#select.select
