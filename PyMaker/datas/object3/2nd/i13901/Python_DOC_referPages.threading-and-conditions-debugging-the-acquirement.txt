Natural Text
I have a weird issue in one of my program, where a thread acquire a condition and an other thread tell that the condition is not acquired.I made some debug informations in order to know if the thread has acquired the condition, and it looks like yes, he did. But the other thread tell me that the condition is not acquired.Here is a summary (not really short, sorry about that) about how I did that, and the output I have :And here is the output :The question is why do I have RuntimeError on that, even if I have acquired the condition ?
I'm no thread expert, but the documentation has this to say:wait(timeout=None)Wait until notified or until a timeout occurs. If  the calling thread has not acquired the lock when this method is  called, a RuntimeError is raised.This method releases the underlying lock, and then blocks until it is  awakened by a notify() or notify_all() call for the same condition  variable in another thread, or until the optional timeout occurs. Once  awakened or timed out, it re-acquires the lock and returns.(emphasis mine).So, it appears calling wait() releases the lock acquired by the  thread. Possibly, that lock then needs somehow to be acquired by the other thread (possibly in a loop checking whether the lock is available); then, that other thread can  the other, first, thread to continue (and re-acquire the lock, as per the last words above).
The correct code after the answer :Output :


Answer URL
https://docs.python.org/3/library/threading.html#threading.Condition.wait
