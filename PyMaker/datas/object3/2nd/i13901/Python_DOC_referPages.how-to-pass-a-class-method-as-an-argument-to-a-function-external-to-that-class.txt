Natural Text
This is how it works for me:This appears to work correctly. Is this the right way to do this?
Your code is "technically correct" (it does what you ask for) but - at least in your example - pretty useless: is the same as:which FWIW is the same as:but I assume you understood this already .Now you probably have a reason to try to pass both the method AND instance to , or there might be a better way to solve your real problem... 
Depending on what you're doing. Because functions are also objects in Python it is possible to do so.But is it a good solution? It seems though that you're trying to handle a problem which maybe could be better solved with more of an object oriented approach:Output: In my view this would be a better approach (if this is possible/reasonable in your case): You just call  on your class, maybe without even knowing what exact type of object you're dealing with (regarding inheritance). The class itself knows what to do and reacts accordingly when its method has been called.This of course doesn't work when you work with external libraries which you have no influence on.
I of course don't know what you're doing exactly, but it sounds to me like you're trying to do too much inside of one function. Your problem might be better solved by simply splitting up the contents of .The goals here, as I understand them, are you don't know ahead of time what the object/method pair will be, and want to reduce code repetition.  Perhaps something like this would be better: I understand this is more code, but I think in the end it's a lot clearer what is happening, and also might force you to think through your problem a bit more (and potentially come up with an even better solution). 
You could pass  or make   or  if there is no instance data used in your method.Check documentation to know more about  and :https://docs.python.org/3/library/functions.html#staticmethodhttps://docs.python.org/3/library/functions.html#classmethod


Answer URL
https://docs.python.org/3/library/functions.html#staticmethod
https://docs.python.org/3/library/functions.html#classmethod
