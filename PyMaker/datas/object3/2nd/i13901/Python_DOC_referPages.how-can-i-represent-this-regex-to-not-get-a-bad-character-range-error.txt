Natural Text
Is there a better way to do this?
Python narrow and wide build (Python versions below 3.3)The error suggests that you are using "narrow" (UCS-2) build, which only supports Unicode code points up to 65535 as one "Unicode character"1. Characters whose code points are above 65536 are represented as surrogate pairs, which means that the Unicode string  consists of two "Unicode character" in narrow build.In "wide" (UCS-4) build, all 1114111 code points are recognized as Unicode character, so the Unicode string  consists of exactly one "Unicode character"/Unicode code point.1 I use "Unicode character" (in quotes) to refer to one character in Python Unicode string, not one Unicode code point. The number of "Unicode characters" in a string is the  of the string. In "narrow" build, one "Unicode character" is a 16-bit code unit of UTF-16, so one astral character will appear as two "Unicode character". In "wide" build, one "Unicode character" always corresponds to one Unicode code point.Matching astral plane characters with regexWide buildThe regex in the question compiles correctly in "wide" build:Narrow buildHowever, the same regex won't work in "narrow" build, since the engine does not recognize surrogate pairs. It just treats  as one character, then tries to create a character range from  to  and fails.The workaround is to use the same method as done in ECMAScript, where we will construct the regex to match the surrogates representing the code point.Using regexpu to derive astral plane regex for Python narrow buildSince the construction to match astral plane characters in Python narrow build is the same as ES5, you can use regexpu, a tool to convert RegExp literal in ES6 to ES5, to do the conversion for you.Just paste the equivalent regex in ES6 (note the  flag and  syntax):and you get back the regex which can be used in both Python narrow build and ES5Do take note to remove the delimiter  in JavaScript RegExp literal when you want to use the regex in Python.The tool is extremely useful when the range spread across multiple high surrogates (U+D800 to U+DBFF). For example, if we have to match the character rangeThe equivalent regex in Python narrow build and ES5 iswhich is rather complex and error-prone to derive.Python version 3.3 and abovePython 3.3 implements PEP 393, which eliminates the distinction between narrow build and wide build, and Python from now behaves like a wide build. This eliminates the problem in the question altogether.Compatibility issuesWhile it's possible to workaround and match astral plane characters in Python narrow builds, going forward, it's best to change the execution environment by using Python wide builds, or port the code to use with Python 3.3 and above.The regex code for narrow build is hard to read and maintain for average programmers, and it has to be completely rewritten when porting to Python 3.ReferenceHow to find out if Python is compiled with UCS-2 or UCS-4?


Answer URL
https://docs.python.org/3/whatsnew/3.3.html#functionality
