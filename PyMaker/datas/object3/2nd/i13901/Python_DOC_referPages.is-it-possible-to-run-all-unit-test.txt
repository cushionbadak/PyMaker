Natural Text
I have two module with two different classes and their corresponding test classes.In any, test and source module, file, I erased the  because of increasing coherency and obeying object-oriented ideology.Like in Java unit test, I'm looking for creating a module to run all unittest. For example,I looked for search engine but didn't find any tutorial or example. Is it possible to do so? Why? or How? Note: I'm using eclipse and pydev distribution on windows machine.
You could create a  and run all your tests in it's  block:If you do not want to create the test cases manually look at this quesiton/answer, which basically creates the test cases dynamically, or use some of the features of the  module like test discovery feature and command line options ..
When running unit tests based on the built-in python unittest module, at the root level of your project runFor the specific example above, it suffices to runhttps://docs.python.org/2/library/unittest.html
I think what you are looking for is the TestLoader. With this you can load specific tests or modules or load everything under a given directory. Also, this post has some useful examples using a  instance.EDIT: The code I usually have in my test.py:Does two things:If -t flag (tests) is not present, find and load all tests in directoryElse, load the requested tests one-by-one
With PyDev right click on a folder in Eclipse and choose "Run as-> Python unit-test". This will run all tests in that folder (the names of the test files and methods have to start with "test_".)
I think you could just run the following command under the folder where your tests files are located:as mentioned here in the doc that "when executed without arguments Test Discovery is started"
You are looking for nosetests.You might need to rename your files; I'm not sure about the pattern nose uses to find the test files but, personally, I use . It is possible to specify a custom pattern which your project uses for test filenames but I remember being unable to make it work so I ended up renaming my tests instead.You also need to follow PEP 328 conventions to work with nose. I don't use IDEs with Python but your IDE may already follow it---just read the PEP and check.With a PEP 328 directory/package structure, you can run individual tests asNote that instead of the usual directory separators ( or ), I used dots.To run all tests, simply invoke  at the root of your project.


Answer URL
https://docs.python.org/3/library/unittest.html#command-line-interface
