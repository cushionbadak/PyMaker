Natural Text
I have a pandas dataframe with multiple columns. My goal is to apply a complicated function to 3 columns and get a new column of values. Yet I will want to apply the same function to different triplets of columns. Would there be a possibility to use smart string formatting so I don't have to hardcode different names of columns 5 (or more) times?Rough sketch:Columns('A1','A2','A3','B1','B2','B3',...)do same for B1,2,3; C1,2,3 etc.Thank you!
If I understand your question correctly, you want to name your columns according to a specific scheme like "Anumber" and then apply the same operation to them.One way you can do that is to filter for the naming scheme of the columns you want to address by using regular expressions and then use the apply method to apply your function.Let's look at an example. I will first construct a DataFrame like so:Then use the  method in combination with regular expressions. I will exemplarily square every value by using a lambda. But you can use whatever function/operation you like:Edit (2017-07-10)Taking the above examples you could proceed with what you ultimately want to calculate. For example we can calculate the euclidean distance across all -columns as follows:Which results in:So what we essentially computed is sqrt(A1^2 + A2^2 + A3^2 + ... + An^2) for every row.But since you want to apply separate transformations to separate column naming schemes you would have to hardcode the above method concatenation.A much more elegant solution to this would be using pipelines. Pipelines basically allow you to define operations on your DataFrame and then combine them the way you need. Again using the example of computing the Euclidean Distance, we could construct a pipeline as follows:For every column naming scheme you can then define the transformations to apply and the order in which they have to be applied. This can for example be done by creating a dictionary that holds the column naming schemes as keys and the arguments for the pipes as values:Getting the same result as above.Now, this is just an example use and neither very elegant, nor computationally very efficient. It is just to demonstrate the concept of DataFrame pipelines. Taking these concepts, you can go really fancy with this - for example defining pipelines of pipelines etc.However, taking this example you can achieve your goal of defining an arbitrary order of functions to be executed on your columns. You can now go one step further and apply one function at a time to specific columns, instead of applying functions across all columns.For example, you can take my  function and modify it so that it achieves what you outlined with ,  and then use  to implement what you sketched withThis shouldn't be too difficult, so I will leave the details of this implementation to you.Edit (2017-07-11)Here is another piece of code that uses functools.partial in order to create 'function prototypes' of a power function. These can be used to variably set an exponent for the power according to the number in the column names of the DataFrame.This way we can use the numbers in ,  etc. to calculate ,  for each value in the corresponding column. Finally, we can sum them in order to get what you sketched withYou can find an excellent explanation of what functools.partial does on PyDanny's Blog. Let's look at the code:Output:You can replace the  functions in the  with your own functions, for example one that sums the values with another value or performs some sort of fancy statistical calculations with them.Using this in combination with the pipeline approach from my earlier edit should give you the tools to get the results that you need.
Using @Milo's setup dataframe Then use  with columns or .  We use the first letter in the column header as the grouping key.â€‹


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions
