Natural Text
In Python, every integer seems to have a 10-digit id which starts from 438. I was trying to find a number that is the same as it’s id. I wrote a simple code to find the number:When I ran this for the first time I got no such number. Then I ran it for the second time and still I got no number. When I ran it for the third time, I got a number: 4384404848 Then I checked if  and I got .Why did Python return a number that is not equal to it’s id? Or did the same number had different id’s when the program was running and when it had stopped?(EDIT: The assumption “ every integer seems to have a 10-digit id which starts from 438” is wrong.)
https://docs.python.org/2/library/functions.html#idis guaranteed to be unique and constant for this object during its lifetime. Consider id to be a unique identifier or "hash" calculated for this object. It may (and most likely will) be different each time you run your program.Edit: Just to add, if you're using the CPython implementation (which is the most popular), then it is the address of the object in memory. That should clarify why it was not the same in different runs of the same program.As a separate note, you should never rely on the value of the id() on any object other than its uniqueness for that given run. every integer seems to have a 10-digit id which starts from 438is an incorrect assumption. On my machine:
NOIt doesn't always start with You should think of it like a Unique Register number number for a college student or employee id number (but for Python objects)Look at what the docs sayid(object)Return the “identity” of an object. This is an integer which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same id() value.CPython implementation detail: This is the address of the object in memory.To make things clear. I assume you know that no matter how many variables you create if they hold the same value then in Python they are all the same. (Aliases)Look at the interpreter.Unique right. Now look,Also look,So every value (objects) are assigned a unique value. And that value is nothing but your id(). Since OP asked!Implementations of Python.Meaning:An "implementation" of Python should be taken to mean a program or environment which provides support for the execution of programs written in the Python language, as represented by the CPython reference implementation. So what that means is Cpython is tha language engine which runs Python code (the language). Why it is named Cpython? To differentiate Python (the language) from Cpython (the implementation).So basically Cpython is the one which the most common Python implementation (CPython: written in C, often referred to as simply ‘Python’) The one you download from python.org is this oneYou need to distinguish between a language and an implementation. Python is a language.According to Wikipedia, "A programming language is a notation for writing programs, which are specifications of a computation or algorithm". This means that it's simply the rules and syntax for writing code. Separately we have a programming language implementation   which in most cases, is the actual interpreter or compiler.So CPython - Implementation in CThere's Jython - Implementation in JavaIronPython - Implementation in C#And some more. Take a look at them here Implementations. Download and mess with them to know more.
According to the official doc : Return the “identity” of an object. This is an integer (or long integer) which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same id() value.So, in essence, the id of any object in Python is a hash value which is unique for it's lifetime. Why did Python return a number that is not equal to it’s id? Or did the same number had different id’s when the program was running and when it had stopped?You found the hash value of 'i' to be 4384404848, but are comparing it to the hash value of the literal '4384404848'. They have to be different by definition. 


Answer URL
https://docs.python.org/3/c-api/long.html#c.PyLong_FromLong
