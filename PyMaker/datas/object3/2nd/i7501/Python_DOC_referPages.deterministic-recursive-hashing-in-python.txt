Natural Text
Python 3's default hashing function(s) isn't deterministic (hash(None) varies from run to run), and doesn't even make a best effort to generate unique id's with high probability (hash(-1)==hash(-2) is True).Is there some other hash function that works well as a checksum (i.e. negligible probability of two data structures hashing to the same value, and returns the same result each run of python), and supports all of python's built-in datatypes, including None?Ideally it would be in the standard library. I can pickle the object or get a string representation, but that seems unnecessarily hacky, and string representations of floats are probably very bad checksums.I found the cryptographic hashes (md5,sha256) in the standard library, but they only operate on bytestrings. Haskell seems to get this ~almost right in their standard library... but "Nothing::Maybe Int" and 0 both hash to 0, so it's not perfect there either.
You can use any hash from hashlib on a pickled object.pickle.dumps not suitable for hashing.You can use sorted-keys  with .Taken from: https://stackoverflow.com/a/10288255/3858507, according to AndrewWagner's comment.By the way and only for reference as this causes security vulnerabitilies, the PYTHONHASHSEED environment variable can be used to disable randomization of hashes throughout your application.


Answer URL
https://docs.python.org/3/library/hashlib.html
https://docs.python.org/3/library/pickle.html
https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED
