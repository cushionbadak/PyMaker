Natural Text
I'm trying to interface with a program (GoGui - https://sourceforge.net/projects/gogui/) using the Go Text Protocol (GTP - http://www.lysator.liu.se/~gunnar/gtp/) which has its documentation here. (Link can also be found on the previous website.)So I've written a bit of code to at least get GoGui to acknowledge the existence of my program:Now this doesn't seem unreasonable per se, but results in GoGui giving me the following error:Which is of course a problem. So I figured that I made a mistake somewhere in my programming, but when I simply run the program through visual studio, everything works as expected:This makes me think that the problem lies in interfacing the two applications, and maybe I should be looking at other functions than stdin and stdout. Does anyone know what may be going wrong here?EDIT FOR COMMENTS: The code I'm currently working on for command parsing (in its entirety) looks like this: For pre processing:
You're not flushing your response so nothing gets sent back to the caller (as the command is not big enough to trigger auto buffer flush). Also, strolling through the protocol document it clearly says that your response should be in the form of  so even if you were flushing it probably still wouldn't work.Try with something like:You might want to create a simple function for parsing commands / responding back instead of repeating the code, tho. Also, this probably won't (fully) work either as the protocol document states that you need to implement quite a number of commands () but it should get you started.UPDATE - Here's one way to make it more manageable and in line with the specs - you can create a function for each command so you can easily add/remove them as you please, for example:Here all the command functions are prefixed with "cmd_" (and  and  use that fact to check for the command functions in the global namespace) but you can also move them to a different module and then 'scan' the module instead. With such structure it's very easy to add a new command, for example to add the required  command all you need is to define it:Also, we'll deal bellow with the situation when a command needs to return an error - all you need to do from your functions is to  and it will be sent back as an error.Once you have your set of commands added as functions all you need is to parse the input command, call the right function with the right arguments and print back the response:Finally, all you need is to listen to your STDIN and forward the command lines to this function to do the heavy lifting. In that regard, I'd actually explicitly read line-by-line from your STDIN rather than trying to iterate over it as it's a safer approach so:Of course, as I mentioned earlier, it might be a better idea to pack your commands in a separate module, but this should at least give you an idea how to do 'separation of concerns' so you worry about responding to your commands rather than on how they get called and how they respond back to the caller.


Answer URL
https://docs.python.org/3/library/ipc.html#interprocess-communication-and-networking
