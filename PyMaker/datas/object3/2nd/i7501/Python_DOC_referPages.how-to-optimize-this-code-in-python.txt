Natural Text
I need to optimize this code, that basically checks if every character of string  is contained in , taking in consideration doubles.I did some research on , iterators and generators, and I'm sure in one or more of these there is a solution, but right now I'm pretty confused and frustrated (I'm very new to python, just a couple weeks), so maybe you can help me understand what's the best strategy in this case. Thanks!
A solution using  that will handle duplicated characters correctly:
You can count the number of occurrences of each character in both strings. You also don't need to make either string a list: strings are their own iterators.First, create a  as sets have an average lookup of .Then, iterate through the set and get the counts of each character. If any counts aren't equal, . It also scales much better as the size of the string grows, than your current solution:
Hmm... you could keep  and  as strings and then use the  function: removes only the first occurrence of that character.
A slight adjustment on Adrien's great answer which is (maybe?) more efficient:result:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#collections.Counter
