Natural Text
Can anyone explain why g and h are not equivalent to f? I think they should be equivalent because x in g and h should bind to the x in the environment that they are defined in (see this question on closures)
Here  and  return function object, but  waits an function which returns a boolean or object wich will convert as boolean . With  it is correct for your expected output, but for  and , the condition is always  because  is always  see here, a python function is a callable object.Take:I advise to do:Output:To call  to do:Do:Output:To call  to do:or Do:Output:See documentation to use filter:Construct a list from those elements of iterable for which function returns true. iterable may be either a sequence, a container which supports iteration, or an iterator. If iterable is a string or a tuple, the result also has that type; otherwise it is always a list. If function is None, the identity function is assumed, that is, all elements of iterable that are false are removed.Note that  is equivalent to  if function is not  and  if function is .See documentation to use lambda expression: with :
 and  are returning the  function itself (), but not executing it.Try for example:  that will return the desired value.Therefore running  or  will work:While running only  or  will return the  function itself per each value, which is equivalent to  statement in  function, and therefore no value is filtered.and of course, in this case you can just run:or even a better list comprehension approach:


Answer URL
https://docs.python.org/3/library/functions.html#filter
https://docs.python.org/3/reference/expressions.html#lambda
