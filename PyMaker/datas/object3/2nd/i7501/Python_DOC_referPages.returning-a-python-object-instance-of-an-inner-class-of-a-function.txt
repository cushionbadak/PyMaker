Natural Text
I wrote a function in Python that is supposed to work similar to a factory in Java, as it instances the correct class for the given parameters and returns this instance. A minimal example with only one class inside the function would be this:I can flawlessly use this object when I call this function from outside. Coming from a Java background, I assume this has something to do with the dynamic typing in Python but I'm still not sure why this actually works. Isn't the scope where that class is known just within the function itself? 
To answer your question, you have returned an object and Python will let you use it regardless of where the original class was defined. There are no private classes in Python and functions themselves are objects, so basically when you return the object, everything outside of that function sees the object as an instance of .In practice though factories are not something that you make in Python. You should be using a class method that will simply return an instance of the class. You can read more about it here: https://docs.python.org/3/library/functions.html#classmethodIf you're confused just google  and there are some good Stackoverflow explanations of how to use them.
Excuse my terrible Java, but I can't see how your Python code is any different from this:Here in the main class I reference the object of class InnerClass without that class ever being in scope, and I can successfully call its  method.


Answer URL
https://docs.python.org/3/library/functions.html#classmethod
