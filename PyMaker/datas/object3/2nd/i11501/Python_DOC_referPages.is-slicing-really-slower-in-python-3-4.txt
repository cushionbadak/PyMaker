Natural Text
This question and my answer got me thinking about this peculiar difference between Python 2.7 and Python 3.4. Take the simple example code:In Python 2.7, I consistently get  and for Python 3.4 I consistently get . The only significant difference between the disassemblies is that Python 2.7 emits the  byte code while Python 3.4 emits  followed by . Note that I've eliminated the candidates for potential slowdown from the other question, namely strings and the fact that  doesn't exist in Python 3.4 (which is supposed to be similar to the latter's  class anyways).Using   yields nearly identical timings between the two, so I highly suspect that it's the slicing that's the cause of the difference here.Why is this happening and is there a link to an authoritative source documenting change in behavior?EDIT: In response to the answer, I have wrapped the  objects in , which did give a noticeable speedup. However as I increased the number of iterations in  I noticed that the timing differences became larger and larger. As a sanity check, I replaced the slicing with  to see what would happen.500 iterations in .yields  and  respectively. Replacing the for loop with  yields  and  respectively. Replacing  with  yielded  and  respectively.  yields  and  respectively.As you can see, the timing differences are huge. Again, I'm still convinced the issue is not directly related to .
On Python 2.7, you're iterating over a list and slicing a list. On Python 3.4, you're iterating over a  and slicing a .When I run a test with a list on both Python versions:I get 0.243554830551 seconds on Python 2.7 and 0.29082867689430714 seconds on Python 3.4, a much smaller difference.The performance difference you see after eliminating the  object is much smaller. It comes primarily from two factors: addition is a bit slower on Python 3, and Python 3 needs to go through  with a slice object for slicing, while Python 2 has .I wasn't able to replicate the timing difference you saw with ; you may have had some confounding factor in that test.


Answer URL
https://docs.python.org/3/library/dis.html#opcode-BUILD_SLICE
https://docs.python.org/3/library/dis.html#opcode-BUILD_SLICE
