Natural Text
Problem Statement: ROT13 is a simple letter substitution cipher that replaces a letter with the letter 13 letters after it in the alphabet. ROT13 is an example of the Caesar cipher.Create a function that takes a string and returns the string ciphered with Rot13. If there are numbers or special characters included in the string, they should be returned as they are. Only letters from the latin/english alphabet should be shifted, like in the original Rot13 "implementation".Please note that using "encode" in Python is considered cheating.My code: This thing works fine for converting a string except for the last letterfor example if you do:The last character 't' is unchanged although it should, I don't know where I did it wrong. Some help will be greatly appreciated.  
The problem here is not the last letter. This part of the code will always find the first occurence of a letter in your string:So instead of giving the index of the last  in , you get the first index, even if you give  as input - all the last  will stay untouched.You have to do some changes in your algorithm...
Here is a very simple version of rot13 that uses the translate function. Output isabj vf gur gvzr SBE NYY TBBQ
The problem is not with the last letter, the problem is with duplicate letters:The cause is the  function:  It returns the position of the first occurrence of  in . A solution would be to use the optional  argument for , to specify that search should begin at the specified position:
Your problem comes from the use of 'index' method !In your example the second 't' is processed but the result will go in the same place as the first 't' in your list.I reckon there's no use for index here, you can simply start with an empty, and append each letter to the end of your list, likewise :


Answer URL
https://docs.python.org/3/library/string.html
