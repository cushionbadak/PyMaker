Natural Text
Python allows expressions like , which, according to the docs, is equivalent to  except  is only evaluated once. (https://docs.python.org/3/reference/expressions.html)However, this seems to break if I customize comparison functions. E.g. suppose I have the following class: (Apologies for the large block, but once you read the  method, the rest is trivial.)Now I can do fun stuff like  and it will correctly return However, chaining these operations doesn't work nicely:Why not? What happens under the hood here? I know it isn't equivalent to  =  (because that would return False). It could be  but that wouldn't make sense in terms of operator precedence (normally left-to-right).
Python allows expressions like , which, according to the docs, is equivalent to  except  is only evaluated once.According to this,  will be equivalent to .More from the documentation on x and y::    if  is false, then , else In the above case:so when you do  it returns the  which is .
The other answers are right, but I wanted to address the actual lack of implementation for this problem, because, as I believe, what the OP would like to get as a result from  is a .Indeed, the  evaluates to  and since  evaluates to  (which means that it is ), then the second operand of  operator gets evaluated and returned (as it also evaluates to ).The key to implementing the chained comparison is to override the  boolean operator along  and . Unfortunately, there is no way to do this, and probably won't be. The  proposal was rejected by Guido, but he might consider making chained comparisons like a < b < c overloadable [1].Unless that moment, there is no way to get your example to work as expected when using chained comparisons.The only way to achieve the correct result is by overriding the  method and writing your comparisons like this:Then, by writing in the form below, you'll get the correct answer:
You should return a boolean value from your comparison methods.To cite the documentation for "rich comparison" methods:By convention, False and True are returned for a successful  comparison. However, these methods can return any value, so if the  comparison operator is used in a Boolean context (e.g., in the  condition of an if statement), Python will call bool() on the value to  determine if the result is true or false.To break it down for this case:Will give you Now we do the last operation and print out the resultBecause both values evaluate to  you'll get


Answer URL
https://docs.python.org/3/reference/expressions.html
https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not
https://docs.python.org/3/reference/datamodel.html#object.__eq__
https://docs.python.org/3/library/stdtypes.html#truth-value-testing
https://docs.python.org/3/reference/datamodel.html#object.__bool__
