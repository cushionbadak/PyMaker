Natural Text
I was wondering if some kind soul could explain why I have to convert a list that is already of type list before calling enumerate on it.If I enumerate over this list without explicitly declaring it as such, this is the output: When explicitly declaring this list as a list, the output is as expected:If someone could help explain why this is the case, it'd be greatly appreciated.
You have two different objects here.  Let's say you define a function:If you did , of course it wouldn't return a list.  Well,  is the same way.  It returns an  object, not a list.  That object is iterable, however, so it can be converted to a list.  For example:That is pretty much how  works.  Our function is a generator function and returns a generator object.  Since generators are iterable, you can convert it to a list:
The Python docs tend to be pretty careful about saying what a function returns, and the docs for  say that it returns an enumerate object, not a list. (Note that this was already the case in Python 2.)While it may seem like kind of a pain to have to create a fully-formed list explicitly, likethe advantage of not returning a list is that it can be quicker and use less memory. It is expected that in real-world use, you will generally not need the whole list at once, and will instead be looping over the elements one at a time, such asYou might even not use all of the elements:So  gives you the efficiency of generating items only as needed instead of all at once. (Imagine if you were working with a list of every NBA player in history, not just the three in your example.) And on the rare occasions that you really do need all the items at once, it is not that annoying to have to type .


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
https://docs.python.org/3/library/functions.html#enumerate
https://docs.python.org/3/glossary.html#term-iterator
