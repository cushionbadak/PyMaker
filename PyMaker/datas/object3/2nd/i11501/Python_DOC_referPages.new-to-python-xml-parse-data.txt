Natural Text
I have many rows in a database that contains xml and I'm trying to write a Python script that will go through those rows and count how many instances of a particular node attribute show up. For instance, my tree looks like:How can I access the attributes 1 and 2 in the XML using Python?
I suggest .  There are other compatible implementations of the same API, such as , and  in the Python standard library itself; but, in this context, what they chiefly add is even more speed -- the ease of programming part depends on the API, which  defines.First build an Element instance  from the XML, e.g. with the XML function, or by parsing a file with something like:Or any of the many other ways shown at . Then do something like:And similar, usually pretty simple, code patterns.
 is the quickest and pretty straight forward:XML:PYTHON:OUTPUT
You can use BeautifulSoup
There are many options out there. cElementTree looks excellent if speed and memory usage are an issue. It has very little overhead compared to simply reading in the file using .The relevant metrics can be found in the table below, copied from the cElementTree website:As pointed out by @jfs,  comes bundled with Python:Python 2: .Python 3:  (the accelerated C version is used automatically).
I suggest xmltodict for simplicity.It parses your xml to an OrderedDict;
lxml.objectify is really simple.Taking your sample text:Output:
Python has an interface to the expat xml parser.It's a non-validating parser, so bad xml will not be caught. But if you know your file is correct, then this is pretty good, and you'll probably get the exact info you want and you can discard the rest on the fly.
Here a very simple but effective code using . Source:http://www.snip2code.com/Snippet/991/python-xml-parse?fromPage=1
Just to add another possibility, you can use untangle, as it is a simple xml-to-python-object library. Here you have an example:InstallationUsageYour xml file (a little bit changed):accessing the attributes with untangle:the output will be:More information about untangle can be found here.Also (if you are curious), you can find a list of tools for working with XML and Python here (you will also see that the most common ones were mentioned by previous answers).
I might suggest declxml.Full disclosure: I wrote this library because I was looking for a way to convert between XML and Python data structures without needing to write dozens of lines of imperative parsing/serialization code with ElementTree.With declxml, you use processors to declaratively define the structure of your XML document and how to map between XML and Python data structures. Processors are used to for both serialization and parsing as well as for a basic level of validation.Parsing into Python data structures is straightforward:Which produces the output:You can also use the same processor to serialize data to XMLWhich produces the following outputIf you want to work with objects instead of dictionaries, you can define processors to transform data to and from objects as well.Which produces the following output
I find the Python xml.dom and xml.dom.minidom quite easy. Keep in mind that DOM isn't good for large amounts of XML, but if your input is fairly small then this will work fine.
This will print the value of foobar attribute.
XMLPYTHON_CODEOUTPUT:
xml.etree.ElementTree vs. lxmlThese are some pros of the two most used libraries I would have benefit to know before choosing between them.xml.etree.ElementTree:From the standard library: no needs of installing any modulelxmlEasily write XML declaration:  do you need to add e.g. standalone="no"? Pretty printing: you can have a nice indented XML without extra code. Objectify functionality: It allows you to use XML as if you were dealing with a normal Python object hierarchy.a 


Answer URL
https://docs.python.org/3/library/xml.dom.minidom.html
