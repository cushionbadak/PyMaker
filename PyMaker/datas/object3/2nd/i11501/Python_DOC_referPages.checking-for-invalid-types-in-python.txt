Natural Text
I need some advise on how best (and to what extent) implement explicitly checking for invalid input in python. Coming from a C++ background with strong type setting, this always has been confusing for me.So, for discussion let us assume that we have the following method signature:Now start should be greater than or equal to 0 while the other two should be greater than 0. I could do something like:I am guessing this will be fine as long as the input type is float or some numeric type which is comparable to float. But in python there is nothing stopping a user from calling the function as:In which case all these comparisons will be meaningless. What is the pythonic way to deal with this situation?
You can check that the arguments are floats with .For example Or you can use  function like that:
There are several ways, the most common is probably:  (easier to ask forgivness than permission):this will silently fail for python 2 but in python 3 it will raise a TypeError when comparing a not-number to a number. In that sense it will make him aware that he has done something wrong.The other option is type-checks and the concept of  (look before you leap) also known as defensive programming:Most people (including myself) think EAFP with  is more pythonic but if you feel more comfortable with -checks then these provide an alternative.
In answer to your question:  will crash your program (raise exceptions) as soon as it tries . The situation might be more problematic if you have  because those strings will convert to float. If you want to be defensive in a situation where anything arriving which is not a float or not numeric indicates a logic error in the calling code, then you can test at runtime.  statements raise an AssertionError which is unlikely to be inappropriately caught. So:These also have the advantage that they are very easy to comment out at a later date, and read (commented or not) somewhat like declarations in other languages if they immediately follow the  statement.You can also check the values with assert:or maybe it's better to raise  because these are value errors:The main difference is that raising  is intended to signal something which might sensibly be caught by the caller, whereas  is intended to indicate that a logic error has been detected and that immediate program termination is probably best. (Or, propagation to a catch-all handler at the very top of, say, an interactive command parser. There is no hard dividing line.)


Answer URL
https://docs.python.org/3/glossary.html#term-eafp
https://docs.python.org/3/glossary.html#term-lbyl
https://docs.python.org/3/library/typing.html
