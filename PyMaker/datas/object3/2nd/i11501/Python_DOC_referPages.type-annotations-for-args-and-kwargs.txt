Natural Text
I'm trying out Python's type annotations with abstract base classes to write some interfaces. Is there a way to annotate the possible types of  and ?For example, how would one express that the sensible arguments to a function are either an  or two s?  gives  so my guess was to annotate the type as , but this doesn't work.Error messages from mypy:It makes sense that mypy doesn't like this for the function call because it expects there to be a  in the call itself. The addition after unpacking also gives a typing error that I don't understand.How does one annotate the sensible types for  and ?
For variable positional arguments () and variable keyword arguments () you only need to specify the expected value for one such argument.From the Arbitrary argument lists and default argument values section of the Type Hints PEP:Arbitrary argument lists can as well be type annotated, so that the definition:is acceptable and it means that, e.g., all of the following represent function calls with valid types of arguments:So you'd want to specify your method like this:However, if your function can only accept either one or two integer values, you should not use  at all, use one explicit positional argument and a second keyword argument:Now your function is actually limited to one or two arguments, and both must be integers if specified.  always means 0 or more, and can't be limited by type hints to a more specific range.
As a short addition to the previous answer, if you're trying to use mypy on Python 2 files and need to use comments to add types instead of annotations, you need to prefix the types for  and  with  and  respectively:This is treated by mypy as being the same as the below, Python 3.5 version of :
The proper way to do this is using Note that you do not add  or type annotations to the actual implementation, which must come last.You'll need a newish version of both  and mypy to get support for @overload outside of stub files.You can also use this to vary the returned result in a way that makes explicit which argument types correspond with which return type. e.g.:


Answer URL
https://docs.python.org/3/library/typing.html#typing.overload
