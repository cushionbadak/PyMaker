Natural Text
I was really confused by sys.exit() in python.In python documentation, it says "Exit from Python"; does that mean when  is called in a python program, the process will exit? If so, the code below shows a different result:Launching this program in linux, result was not the expected one as python documentation says but still run in the system, so what does  really do?
As per the documentation  raises :Exit the interpreter by raising SystemExit(status).If  reaches the default exception handler,it calls , which more or less pushes through to , which in turn calls  in Python 2, so  is the same as the normal falling off the bottom of the main module in waiting for all non-daemon threads to terminate.
(Paraphrasing what's in the Python 2 documentation for Thread Objects)Normally a Python program exits only when there's nothing but daemon✶ threads (ignoring itself) left running. The “main thread” object which corresponds to the initial thread of control in the program isn't a daemon thread. Threads created using  inherit their daemonic status from the creating thread, so if that's the main thread, they will also be non-daemonic.This means that by default any threads created and started by your main program will prevent it from exiting if they are still running when the main thread is terminated (by  or simply by just hitting the end of its code). In other words, the program exits only when no alive non-daemon threads (in other words, only daemon ones) are left.You can override this default behavior by explicitly setting✶✶ the propertyof anycreated thread objects to  before starting it.Which will allow the program to actually end when  is called (although calling it explicitly like that isn't necessary since it's at the end of the script anyway).✶ A daemon thread is a low priority thread that runs in background and does not prevent the interpreter from exiting. See Daemon Threads Explanation.✶✶ In Python 3.3, a  keyword argument was addedto the class constructor,which means that, starting from that version onwards, you can simply use:However, doing it separately via an explicit attribute assignment statementstill works, and would therefore be the more version-portable way ofdoing it.
It is easy. In your case, the end of the program is when the last thread will be terminated. Maybe kind of join() method(as in Java) in python will wait for other threads. you can change  to have finite method in sense of time.and watch another behave your program. in advance sorry for my english(: and please, read this article(: there is a good explanation how to play with threads in your caseUse of threading.Thread.join()and documentationhttps://docs.python.org/2/library/threading.html (but relax, it is only for additional knowledge.and read this article about daemon property(if you do not want to wait for others threads become terminatedPython thread daemon property


Answer URL
https://docs.python.org/3/library/threading.html#threading.Thread
