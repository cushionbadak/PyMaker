Natural Text
I have a Python function (implemented in C++) that reads from a file descriptor (wrapped in  on the C++ side) and I need to feed the function from an . Specifically, the reader is the content of a HTTP response: aiohttp.ClientResponse.content.I thought I might open a pipe, pass the read-end to the C++ function and connect the write-end to 's event loop. However, how can I move the data from the stream reader to the pipe, with proper flow control and as little copying as possible?The skeleton of the code with the missing parts is as following:
From the subprocess_attach_write_pipe asyncio example:EDIT - For write flow control, see the following methods:WriteTransport.set_write_buffer_limitsBaseProtocol.pause_writingBaseProtocol.resume_writingHere's a possible  implementation, inspired by StreamWriter.drain:Usage:
I got around this issue by using a  and blocking calls to :It is crucial that two different executors are used for blocking reads and writes to avoid deadlocks.


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.connect_write_pipe
https://docs.python.org/3/library/asyncio-protocol.html?highlight=sendto#asyncio.WriteTransport.set_write_buffer_limits
https://docs.python.org/3/library/asyncio-protocol.html?highlight=sendto#asyncio.BaseProtocol.pause_writing
https://docs.python.org/3/library/asyncio-protocol.html?highlight=sendto#asyncio.BaseProtocol.resume_writing
https://docs.python.org/3/library/asyncio-stream.html?highlight=stream#asyncio.StreamWriter.drain
