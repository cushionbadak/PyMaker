Natural Text
I fully get the general principle of not catching all exception, as explained in this question, for instance (Why is "except: pass" a bad programming practice?). Yet I have found myself writing this sequence to get the source of a file like object:Clearly with some spelunking I could figure out which specific errors to catch with a reasonable degree of confidence. But at is explained in this question (Python: How can I know which exceptions might be thrown from a method call) you can't ever be quite certain.So is there a better way to do what I am doing here, which is essentially to say: try this and if it doesn't work try this and if that doesn't work do this. Since this is all about setting a single variable, and there is a fallback of setting it to None, it is not obvious to me wherein the peril lies in this construct. 
Maybe it'd be better to put it into a dedicated function ?Notes on swallowing exceptionsIgnoring any kind of exception is not the best pattern : it'd be better to know what call can raise what kind of exception.Even if  is bad, that's already what you were doing in your example, and here it's clear that we try another way if it fails.The bad programming practice is basing the error handling on the ability to catch any kind of error. In itself,  is better than . However, the first answer in the post you referred to says something very sensible :  semantically indicates that you won't do ANYTHING with the exception, and as you do not store in a variable, it also shows that you'll never be able to access it again (well you could, but still..). As /u/Aprillion/, you'll want to at least log these errors, because otherwise, you may be swallowing very useful debugging information, which could make your life (or others) much more difficult at some point.For example, what happens if there's a bug hidden in , that makes it raises exception in normal cases ? It may stay hidden for long, because this exception will be swallowed and never shown anywhere. Good luck to the debugger to find it !Ways to improve thisreplace  with the exceptions that could be raisedcheck before an attempt if it is going to fail, so that you don't have to catch an exceptionAdditionally, you probably want to use a logger to save/show these exceptions somewhere, at least in DEBUG mode.Clearly with some spelunking I could figure out which specific errors to catch with a reasonable degree of confidence. But at is explained in this question (Python: How can I know which exceptions might be thrown from a method call) you can't ever be quite certain.Why would that change anything ? If  returns specific exception types, you'd only catch these, and you'd want other unexpected errors to bubble up to the interpreter.The big problem with the givn approach is that if  is undefined, or not callable, or take more arguments, this error would not make the interpreter crash, even though it is a clear programming error. That's because  or  will catch a lof of Python errors, should it be , ,  or even .To conclude, I really think you'd prefer to replace  with the list of exceptions you can catch (and at least send the exceptions to a logger). Note that you can write it as such :


Answer URL
https://docs.python.org/3/library/logging.html#logging.exception
