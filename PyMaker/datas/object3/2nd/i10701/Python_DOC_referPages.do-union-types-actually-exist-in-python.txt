Natural Text
Since python is dynamically typed, of course we can do something like this:But is the way python was actually intended to be used? or in other words, do union types exist in the sense they do in racket for example? Or do we only use them like this:where the only "union" we need is with None?
Union typing is only needed when you have a statically typed language, as you need to declare that an object can return one of multiple types (in your case an  or , or in the other example  or ).Python deals in objects only, so there is never a need to even consider 'union types'. Python functions return what they return, if the programmer wants to return different types for different results then that's their choice. The choice is then an architecture choice, and makes no difference to the Python interpreter (so there is nothing to 'benchmark' here).Python 3.5 does introduce a standard for creating optional type hints, and that standard includes  and  annotations.
the type itself does not exist because Python is just a dynamically typed language, however, in newer Python versions, Union Type is an option for Type Hinting, you can use that to annotate your code, thus enabling IDE/Editor level syntax checking.
Here are a couple of options to deal with use-cases where you need a tagged union/sum type in Python:Enum + Tuplessumtypes moduleThese approaches all have their various drawbacks, of course.
Adding to @MartijnPieters answer:But is the way python was actually intended to be used?Returning different type depending on the param is never a good practice in any language. This makes testing, maintaining and extending the code really difficult and IMHO is an anti-pattern (but of course sometimes necessary evil). The results should at least be related via having common interface.The only reason  was introduced to C was due to performance gain. But in Python you don't have this performance gain due to dynamic nature of the language (as Martijn noticed). Actually introducing  would lower performance since the size of  is always the size of the biggest member. Thus Python will never have C-like .


Answer URL
https://docs.python.org/3/library/typing.html#typing.Union
https://docs.python.org/3/library/typing.html#typing.Optional
https://docs.python.org/3/library/typing.html#typing.Union
