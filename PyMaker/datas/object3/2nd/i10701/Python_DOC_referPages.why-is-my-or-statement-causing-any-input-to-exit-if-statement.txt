Natural Text
I'm trying to make a function that will compare multiple variables to an integer and output a string of three letters. I was wondering if there was a way to translate this into Python. So say:which would return a list of Is something like this possible?
You misunderstand how boolean expressions work; they don't work like an English sentence and guess that you are talking about the same comparison for all names here. You are looking for: and  are otherwise evaluated on their own ( if ,  otherwise).You can shorten that using a containment test against a tuple:or better still:using a  to take advantage of the constant-cost membership test ( takes a fixed amount of time whatever the left-hand operand is).When you use , python sees each side of the operator as separate expressions. The expression  is treated as first a boolean test for , then if that is False, the expression  is tested.This is due to operator precedence. The  operator has a lower precedence than the  test, so the latter is evaluated first.However, even if this were not the case, and the expression  was actually interpreted as  instead, this would still not do what you expect it to do.  would evaluate to the first argument that is 'truthy', e.g. not , numeric 0 or empty (see boolean expressions for details on what Python considers false in a boolean context).So for the values ,  would resolve to , because that is the first true-like value in the arguments. Then  would be , even though  would be .The same would apply to the inverse; testing multiple values against a single variable;  would fail for the same reasons. Use  or .
Your problem is more easily addressed with a dictionary structure like:
Previous Solution: As stated by Martijn Pieters, the correct, and fastest, format is:The one major issue that does not seem to be addressed is that you want your output list to include each letter after a true if statement. Using only Martijn Pieters' advice you would now have:Problem: The first if statement would return true, and you would never get to the following elif statement. So your list would simply return:What you want is to have separate if statements so that python will read each statement whether the former were true or false. Such as:This will work, but 'if' you are comfortable using dictionaries (see what I did there), you can clean this up by making an initial dictionary mapping the numbers to the letters you want, then just using a 'for' loop:
The direct way to write  isBut I dont think, you like it. :)And this way is ugly.The other way (a better) is:BTW lots of s could be written as something like this
If you ARE very very lazy, you can put the values inside an array. Such asYou can also put the numbers and letters in a dictionary and do it, but this is probably a LOT more complicated than simply if statements. That's what you get for trying to be extra lazy :)One more thing, your will compile, but not in the way you want it to. When you simply put a variable in an if statement (example)the program will check if the variable is not null. Another way to write the above statement (which makes more sense) is Bool is an inbuilt function in python which basically does the command of verifying a boolean statement (If you don't know what that is, it is what you are trying to make in your if statement right now :))Another lazy way I found is :
To check if a value is contained within a set of variables you can use the inbuilt modules            and .For example:Imports:Declare variables:Create mapping of values (in the order you want to check):Use  to allow repetition of the variables:Finally, use the  function to create an iterator:Then, when checking for the values (in the original order), use :etc...This has an advantage over the  because  is an inbuilt module and is faster and more efficient than using  which has to create a custom in-place function.Another option for checking if there is a non-zero (or False) value in a list:Equivalent:
I think this will handle it better:Output:
Set is the good approach here, because it orders the variables, what seems to be your goal here.  is  whatever the order of the parameters.This way, the whole solution is O(n).
If you want to use if, else statements following is another solution:
All of the excellent answers provided here concentrate on the specific requirement of the original poster and concentrate on the  solution put forward by Martijn Pieters.What they ignore is the broader implication of the question:How do I test one variable against multiple values?The solution provided will not work for partial hits if using strings for example:Test if the string "Wild" is in multiple valuesorfor this scenario it's easiest to convert to a stringIt should be noted however, as mentioned by , that word boundries are lost with this method, as in:    the 3 letters  do exist in combination in the list but not as an individual word. Testing for " rot " would fail but if one of the list items were "rot in hell", that would fail as well.The upshot being, be careful with your search criteria if using this method and be aware that it does have this limitation.

This code may be helpful
One line solution:Or:
You can try the method shown below. In this method, you will have the freedom to specify/input the number of variables that you wish to enter.
It can be done easily as 
Looks like you're building some kind of Caesar cipher.A much more generalized approach is this:outputsNot sure if it's a desired side effect of your code, but the order of your output will always be sorted.If this is what you want, the final line can be changed to:
To test multiple variables with one single value: To test multiple values with one variable: 
Maybe you need direct formula for output bits set.x=0 or y=0 or z=0   is equivalent to xyz = 0x=1 or y=1 or z=1   is equivalent to (x-1)(y-1)(z-1)=0x=2 or y=2 or z=2   is equivalent to (x-2)(y-2)(z-2)=0lets map to bits: 'c':1 'd':0xb10 'e':0xb100 'f':0xb1000relation of isc:if xyz=0 then isc=1 else isc=0use math if formula https://youtu.be/KAdKCgBGK0k?list=PLnI9xbPdZUAmUL8htSl6vToPQRRN3hhFp&t=315[c]: (xyz=0 and isc=1) or (((xyz=0 and isc=1) or (isc=0)) and (isc=0))[d]: ((x-1)(y-1)(z-1)=0 and isc=2) or (((xyz=0 and isd=2) or (isc=0)) and (isc=0))...connect these formulas by following logic:logic and is sum of squares of equationslogic or is product of equationsand you'll have total equationexpress sum and you have total formula of sumthen sum&1 is c, sum&2 is d, sum&4 is e, sum&5 is fafter this you may form predefined array where index of string element would correspond to ready string.array[sum] gives you the string.
The most mnemonic way of representing your pseudo-code in Python would be:
You can use dictionary :
This will going to help you


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences
https://docs.python.org/3/tutorial/datastructures.html#sets
