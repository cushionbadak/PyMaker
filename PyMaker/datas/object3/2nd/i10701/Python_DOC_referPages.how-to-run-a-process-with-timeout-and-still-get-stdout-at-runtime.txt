Natural Text
The need:Timeout after X seconds, and kill the process (and all the processes it opened) if timeout reached before the process ends gracefully.Read ongoing output at runtime.Work with processes that produce output, ones that don't, and ones that produce output, and then stop producing it (e.g. getstuck).Run on Windows.Run on Python 3.5.2.Python 3 subprocess module has timeout built in, and I've also tried and implemented timeout myself using timer and using threads, but it doesn't work with the output.  is blocking or not?  is definitely waiting for the process to end before spitting out all the output, which is not what I need (I need ongoing).I am close to switching to node.js :-(
I would use asyncio for this kind of task.Read IO from the process like in this accepted anwser:How to stream stdout/stderr from a child process using asyncio, and obtain its exit code after?(I don't want to fully copy it here)Wrap it in a timeout:Have fun ...
Use the 2 python script below.The Master.py will use  to start a new process and will start a watcher thread that will kill the process after  seconds.The slave must call the flush method if no newline in the data written to the , (on windows the  also cause a flush).Be careful the  module is not a high precision timer.The load time of the process can be longer than 3.0 seconds in extreme cases (reading an executable from a flash drive having USB 1.0)Master.pySlave.py


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.TimeoutExpired.timeout
