Natural Text
I have a Python 3.5 script that I would like to invoke as a pre-build step in my Code Composer build. To be clear, it should be run as one of the entries in (my project) > Properties > CCS Build > Steps > Pre-build steps.The script currently begins with the hashbang , but I can change this.On Linux, I can invoke the script as . This fails on Windows 10 with:The path separator does not affect this at all.I also tried . This does not work on Windows 10 because there is no  executable. Python 3 is installed as . Using  fails on Linux because of course Python 3 is installed as , and  refers to Python 2.I also tried . This fails on Linux because there is no  executable.Is there a cross-platform way to invoke a Python 3 script that can be used for an Eclipse pre-build step? I would like to avoid requiring that developers modify their distribution/Python installation.I am using Code Composer Studio 6, which is based on Eclipse. I expect any answer to this would apply to either.ContextOne of the things I am trying to achieve is to insert the SHA1 of the current Git commit into a file. The accepted answer for doing this is to generate the file as part of the build process by parsing Git output. I have a Python script that can do this on both Windows and Linux, so I need a way to invoke it as part of Eclipse's build process.
Have a wrapper script that works under both Python 2 and 3 to detect and run the script with the correct Python version. The Eclipse/CCS pre build step can then be  (possibly with extra arguments like ).You could just check if it is running on Windows or Linux and what version of Python it is running. If it is running on Linux and running the wrong Python version, run . To check the Python version and OS use:A more generic script might check if the interpreter is already the right one and try to pass through arguments if it is:Otherwise the wrapper could iterate over a list of possible interpreters until it succeeds, like:
Somewhere between CCStudio 6.1.2 and 6.2.0 they switched from GNU make 3.81 to 4.1. It seems that this introduced a feature that attempts to interpret the shebang rather than just passing the file on to Windows to handle via the -> assocation.I didn't want to update various projects and branches just because GNU make was being naughty so I decided to solve this in a little different direction by creating  for Windows.  Well, a minimal version of it that works for my present need ().  Since GNU make doesn't bother to us the  variable when searching for matches I couldn't use  and beyond that it doesn't even seem to successfully search it's own specified list for anything other than .  So, C++ it is.  If I need to do much more I will likely make  just call  and do the rest in Python.Here's a copy of my simple first pass from my gist.


Answer URL
https://docs.python.org/3/using/windows.html#python-launcher-for-windows
