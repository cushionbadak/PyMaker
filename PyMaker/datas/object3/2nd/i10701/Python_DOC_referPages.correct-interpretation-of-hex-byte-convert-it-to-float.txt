Natural Text
I am currently trying to connect to an electric meter via RS485.It works quite well so far, except that I have problems reading what the meter is writing back on the RS485 line.I know that the data from the electric meter is correct since I can read it with Docklight and the internal programm of the manufacturer.So my only problem is the conversion of hex bytes that I am getting back.I am receivingThis should be 8 or 9 hex bytes.I expect to receive something likeThe problem seems to be that python interprets it in "ASCII" whereever it can and I cannot convert it furthermore because of the non-hexadecimal digits.And the error I get is  The equivalent when I look at it from the other side.I am sendingwhich is displayed as when I print itSo how can I tell python-3 that I want to see the 8 hex bytes and not some interpretation that he automatically makes? I believe I am missing on something that is really easy once you know where to look for.I want to convert bytes 4,5,6,7 into float. But since it is showing me non-hexadecimal digits I cannot do that.
You can use  to get the numbers from the data. Here is the way:
,  and  are bytes too; they are ASCII characters so don't need to be displayed with  hex escapes.You don't need to decode the  hex escapes either, they are just how Python gives you the debugging representation of a  object; each byte is either displayed as an escape sequence or a printable ASCII letter.The same happens to your something like this example:That's the exact same value, but  is the ASCII letter , etc.The output is the default  output for  objects. It can't be changed. You'll have to write your own code if you need different output.You could display all bytes as hex with the  function, for example:Now you have a  string with hex characters. Or you could use a  function with each individual byte converted to hex with a  literal text prefixed:'\x01\x03\x04\x43\x67\x81\xec\x43\x68'That's a  object with ,  and hex digits as characters.Note that this is all just displaying the value. The value didn't change; the bytes are all there however you display them. If you need to convert 4 bytes to a float, then just convert those 4 bytes:This uses the  module to use the bytes directly. No hexadecimal representation needed:


Answer URL
https://docs.python.org/3/library/struct.html
