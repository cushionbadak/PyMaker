Natural Text
Let's say that there's a "master" array of times with these values:I want to find the most "compatible" array among several candidates:In this case I consider the first candidate most compatible because after adding  to each value, 4 of the values are very close to values that exist in  (the 2nd candidate only has 3 values that match `master'), and order matters (though we can say the arrays are already sorted with no duplicate values, since they represent times).A physical example could be that  is an array of beat onsets for a clean recording of an audio track, while the candidates are arrays of beat onsets for various audio recordings that may or may not be of the same audio track. I'd like to find the candidate that is most likely to be a recording of (at least a portion of) the same audio track.I'm not sure of an algorithm to choose among these candidates. I've done some searching that led me to topics like cross-correlation, string distance, and fuzzy matching, but I'd like to know if I'm missing the forest for the trees here. I'm most familiar with data analysis in NumPy and Pandas, so I will tag the question as such.
One way would be to create those sliding 1D arrays as a stacked 2D array with  and then get the distances against the  array with . Finally, we get the minimum distance along each row and choose the row with minimum of such distances. Thus, we would have an implementation like so -Sample run -Note: To me it looked like using the default option of , which is the euclidean distance made sense for such a problem. There are numerous other options as listed in the docs that are based on differentiation between inputs and as such could replace the default one.


Answer URL
https://docs.python.org/3/library/difflib.html
