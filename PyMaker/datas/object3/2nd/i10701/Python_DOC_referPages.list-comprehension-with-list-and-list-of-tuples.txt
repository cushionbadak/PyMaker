Natural Text
In my Python 2.7.5 code I have the following data structures:A simple list......and a list of tuples...When entering the code where these structures exist I will always know what is in ; , at best, will contain "matching" tuples with what is in  - worst case  can be empty.  What I need is to know is the parts that are missing from glue.  So with the example data above, I need to know that 'www' is missing, meaning it is not in any of the tuples that may exist in .I first tried to produce a list of the missing pieces by way of various for loops coupled with if statements but it was very messy at best.  I have tried list comprehensions and failed.  Maybe list comprehension is not the way to handle this either.Your help is much appreciated, thanks.
You can use set difference operations.or with simply using list comprehensions:The set operation wins in the speed department, running the operation 10,000,000 times, we can see that the list comprehension takes over 16s longer:
You can use list comprehensions here. Maybe the simplest thing would be to create a set of all indices, then return the missing indices. Note this answer will give you all the missing components, even if there are duplicates in the parts array (for example, if "www" appeared twice in parts). This would not be the case with set comprehension.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
