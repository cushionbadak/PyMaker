Natural Text
Python 2 will implicitly convert  to  in some circumstances. This conversion will sometimes throw a  depending on what you try to do with the resulting value. I don't know the exact semantics, but it's something I'd like to avoid.Is it possible to use another type besides  or a command-line argument similar to  (http://mypy-lang.blogspot.co.uk/2016/07/mypy-043-released.html) to cause programs using this implicit conversion to fail to type check?In this example, only the function  fails to type check.I would like both of them to fail to typecheck.EDIT: seems to be treated the same way as 
This is, unfortunately, an ongoing and currently unresolved issue -- see https://github.com/python/mypy/issues/1141 and https://github.com/python/typing/issues/208.A partial fix is to use  which is (unfortunately) currently undocumented (I'll work on fixing that though). It's aliased to  in Python 3 and to  in Python 2. It won't resolve your actual issue or cause the second function to fail to typecheck, but it does make it a bit easier to write types compatible with both Python 2 and Python 3.In the meantime, you can hack together a partial workaround by using the recently-implemented  feature -- it lets you define a psuedo-subclass with minimal runtime cost, which you can use to approximate the functionality you're looking for:It's not perfect, but if you're principled about when you elevate a string into being treated as being of your custom  type, you can get something approximating the type safety you're looking for with minimal runtime cost until the bytes/str/unicode issue is settled.Note that you'll need to install mypy from the master branch on Github to use .Note that NewType was added as of mypy version 0.4.4.


Answer URL
https://docs.python.org/3/library/typing.html#newtype
