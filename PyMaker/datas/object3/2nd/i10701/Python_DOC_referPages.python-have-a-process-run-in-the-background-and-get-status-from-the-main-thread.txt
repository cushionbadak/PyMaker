Natural Text
this is a noob question, I have never done much in Python. I need to have a main process run and do stuff, while a background process does other calculations and saves the result to a variable. When the main thread wants, it should be able to read the last value stored in the variable: every value stored before is forgotten. Say that the background process is counting: I want to know what number it is at at this very moment. Here's a dummy code:So the main thread prints the variable of the background thread every second, which is updated 10 times a second. I have tried with Pipe and Queue, but I do not get the last stored variable. This output is 1,2,3,4,... while I want to get 10,20,30,... (or similar, depending on timing). The problem here is that it, as the name suggests, works as a queue.What I would do in java is create something like an asynctask and have it update a public variable, but my understanding is that multi processes cannot share variables.What's the proper way of doing this with Python? 
Use multiprocessing.Value, which is implemented with shared memory between the processes:Output:


Answer URL
https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes
