Natural Text
For example, if I try to do:... where a_string is type 'str' and an_int is type 'int', or:There would be a  because there is no implicit conversion of the types. I understand that if I were using my own subclasses of int and string, I would be able to overload the  method in my classes to achieve this. However, out of curiosity, I would like to know: would it be possible to overload the + operator in the class definitions of  and , so that  and  automatically concatenate them as strings? If not, what are the reasons why a programmer should not overload the operators for a native datatype? 
In general, without reverting to the C-level API, you cannot modify attributes of builtin types (see here). You can, however, subclass builtin types and do what you want on the new types. For the question you specifically asked (making the addition string based), you'd modify  and :
As pointed out above, you can't (unless you are up to building your own Python implementation). That is, you cannot change the way  is handled if encountered in code. But you can mess with builtin functions however you please:It's little more than an enlightening example of first-class functions' awesomeness, thoug. Any changes you make stay in a namespace you are making them in. Consider this:You are using whatever you put in , in this case . But  knows better and falls back to the builtins. There may be some weird trick with closures that'll make it refer to your implementation, but I can't find it. By the way, original  is in , should you need it back.Pulling the same trick on builtin's methods doesn't work:


Answer URL
https://docs.python.org/3/reference/datamodel.html
