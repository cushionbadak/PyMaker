Natural Text
Trying to understand hexadecimal  notation in regards to memory locations and sizes in MiB (mebibytes) and KiB (kibibytes). Specifically, in a partition layout table I can see the following columns:But I find it hard to translate/extract the logic to calculate and do the conversions for myself (for example convert from 24 MiB, 125 KiB, 16 MiB, to '0x' hex notation etc.). Hence, I thought of writing a  script (as you do) to do the conversions from MiB/KiB to 'Ox' and additions of '0x'. I found this [https://stackoverflow.com/a/8186974/6167676] but I failed to do anything meaningful from it.To my surprise I could not find something online to help me do the conversions from MiB/KiB to the hex '0x' notation. In  I found the  function in an attempt to do basic additions between hex values in the hex '0x' notation:How can use  (built-in or not functions) to automatically calculate the conversion from MiB to the hex '0x' notation? Also, is the  adequate to perform additions on '0x' notation? Some code examples to demonstrate the conversion and addition in  would be very useful.
First, let's create some constants for KiB, MiB, GiB, etc. Don't worry about hex here, we just want the numbers in whatever form makes most sense to you—whether that's  or  or  doesn't matter, since those are all the same number. So:Now, how much is 12MiB? Easy:Now, how much is 12MiB in hex?This gives you . As far as "adding in hex", that's not a thing you should do. Just add the numbers as numbers, then format the result in hex. For example, if you want to add 32KiB + 16KiB + 1MiB:You wanted a bit more control over the output. If that's important, you'll need to use format strings (whether via the  function, the  method, or f-string literals) instead of .You can specify a width to pad to, and a fill character to pad with. And you can use  to add the  automatically (in which case we have to pad to 8+2=10 characters instead of 8), or add the  manually (in which case we only have to pad to 8 characters, which makes a bit more sense):You also wanted to separate the digits into blocks of 4. We can use a grouping character to get pretty close, but then we have to add an extra 1 to the width:… at which point we might as well use  again:Now you've got . If you really need spaces between groups instead of underscores, then you'll need to get a bit ugly:(I believe there was a proposal to allow arbitrary grouping characters, but it was rejected, so the only options are , , or  for "do whatever my locale says".)So, if you want to print out your table:Or you can write a function. While we're at it, let's use an  instead of a bunch of separate constants:This is obviously a lot more extensible, if you want to add more rows to the table.


Answer URL
https://docs.python.org/3/library/string.html#format-specification-mini-language
