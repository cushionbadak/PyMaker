Natural Text
I have a query running in SQL, which is returning the results in to a variable via a loop then punting that in to an HTML file. When I test this by printing to the console in Jupyter Notebook it prints as expected, the next 30 days of the calendar in order of date.However, when I tell it to join the data usingit seems to not only reorder the dates so that the 13th of August sits oddly before the 13th of July, but it repeats the date div's 4 times in the page. See below for full code;
 does not alter the order in any way. If you get a different order then the database query produced rows in a different order.I don't think you are telling the database to order your results by date. You order by , and the database is free to order values with the same  column value in any order it pleases. If  doesn't include date information (as a year, month, day sequence of fixed length) and date order is important, tell the database to use a correct order! Here that'd include  at the very least.I'd also refactor the code to avoid quadratic performance behaviour; the  expression has to create a new list object each time, copying across all elements from  and the new list into that. When adding N elements to a list this way, Python has to execute N * N steps. For 1000 elements, that's 1 million steps to execute! Use  to add single elements, which will reduce the workload to roughly N steps.You can loop directly over a cursor; this is more efficient as it can buffer rows, here's  can't assume you'll fetch more data. A  loop is also more readable.You can also use string formatting rather than string concatenation, it'll help avoid all those  calls and redundancy, as well as further reduce performance issues; all those string concatenations also create and recreate a lot of intermediate string objects that you don't need to create at all.So use this:Note: if any of your database data was entered by your users, you must ensure that the data is properly escaped for inclusion in HTML first, or you'll leave yourself open to XSS cross-site scripting attacks. Personally, I'd use a HTML templating engine with default escaping support, such as Jinja.


Answer URL
https://docs.python.org/3/library/string.html#formatstrings
