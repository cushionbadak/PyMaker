Natural Text
If I have a python list say : . Is this list stored in 2x8 bytes (for 64-bit addressing) - that is we have only pointers to strings in the list or is it stored in  - that is we have a contiguous storage of characters of each string in the list.
Under the hood in CPython, everything is a pointer to . The subtype  has a pointer to an array of pointers to  among it's structure fields.Strings are also a subtype of , generally implemented in . Similarly to a list, a string contains a pointer to the buffer containing it's elements.So the sequence of pointers actually looks like this:Pointer to list objectPointer to list bufferPointer to string objectPointer to string dataYou can deduce the fact that your list buffer can't have  elements from a number of reasons.Everything in Python is an object, so at the very least you need to have space for the additional metadata.Lists can hold any kind of object, not just fixed length strings. How do you index into a list where elements have different sizes?Characters can have different sizes in Unicode. The number of bytes in a string and the number of characters are not directly related. This brings us back to both #1 and #2.In general, if you are curious about the internal workings of CPython, look into the API docs, and the source code.
A way to access python address is to use id(). Further reading is here [understanding-python-variables and memory management].


Answer URL
https://docs.python.org/3/c-api/structures.html#c.PyObject
https://docs.python.org/3/c-api/list.html#c.PyListObject
https://docs.python.org/3/c-api/unicode.html#c.PyUnicodeObject
https://docs.python.org/3/c-api/index.html
