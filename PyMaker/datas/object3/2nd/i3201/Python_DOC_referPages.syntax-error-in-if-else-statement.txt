Natural Text
we can use if-else like this: ,but there are some problems here I can't understand why?if i run (count is defined already), then raise a error:Can not it be assigned value after else?when run (note: count = 0, l = []), there is a error will be raise:and the result of l is .As same condition, if I use if-else blockï¼Œthere are no error. Can you explain it the difference.
The "conditional expression"  is not a one-line version of the if/else statement , but something entirely different. The first will evaluate the expressions  or  and then return the result, whereas the latter will just execute either of the statements  or .More clearly,  is not , but , but  is not an expression, hence the syntax error.Likewise,  is not  but . Syntactically, this is okay, but  returns , which can not be added to , hence the TypeError.
For your first error, you are trying to misuse a ternary expression. In Python, ternary expressions cannot contain statements they contain expressions. As can be seen in Python's official grammar, an assignment is a statement, and a method call is an expression.In your samples,  is considered a statement, whereas  is an expression.For your second error,  returns , not the list. Therefore, you are essentially trying to add  to either an integer, which is not permitted, hence the .Lastly, please don't use the lowercase L's () or uppercase o's () as variable names. As stated in PEP 8, these can be extremely confusing variable names due to their similarity to 1's and 0's.
The one-line  statement in python is more like the ternary operator in other languages. It is not just a more compact version of an  block. The one-line  evaluates to a value, while the  block specifies conditions under which different actions should be taken. The single-line  statement is like a function that returns one value under some condition and another value if the condition is .So in your example, when you write , what i think you mean is: But what this line is really doing is something like:Hence the syntax error.


Answer URL
https://docs.python.org/3/reference/expressions.html#conditional-expressions
https://docs.python.org/3/reference/compound_stmts.html#the-if-statement
