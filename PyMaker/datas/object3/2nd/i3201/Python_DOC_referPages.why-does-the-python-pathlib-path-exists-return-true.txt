Natural Text
I was expecting  to be a path that does not exist because it does not correspond to a file or directory name. Why is this considered to exist?I assume there is an advantage gained by defining the  to be the same as . In what case is there an advantage?
As other said, it resolves to the current path and therefore exists, but here's why,pathlib.Path is acutally a subclass of pathlib.PurePath which assumes the current directory when the  (argument) is empty (equivalent to ).You can prove that empirically like this,I assume there is an advantage gained by defining the Path('') to be the same as Path('.').Correct. Even though I'm not the creator of that lib, I assume this is for syntax and logical reasons. Indeed, people often want to refer to the current directory to compute something dynamically. Therefore, for the same reason  points to the current directory, the lib creator probably wanted to let you write something like this,that would list sub directories.Basically, see this as a default. It was logic that the default path returned by  was the current directory. Thus, logically, an empty string value should have the same behavior.


Answer URL
https://docs.python.org/3/library/pathlib.html#pathlib.Path
https://docs.python.org/3/library/pathlib.html#pathlib.PurePath
