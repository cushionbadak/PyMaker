Natural Text
I asked this because it is possible in R. Note that both 1.5 and 1 are in numeric type (double-precision), and only 1L is an integer. When coercing a string into numeric type, it doesn't show a decimal point if there's not one in the string.Am I allowed to have similar operations in Python? Let's say I have a function called :Now if one keys in "40", it will return 40.0, but 40.0 and 40 are different in certain digits. Thus, 40 should be returned if "40" is keyed in, while 40.0 should be returned only when "40.0" is keyed in.My work around is:However, in this way, I cannot be sure that the results are always in the same type, which could be problematic in following data storage or processing. Is there any way to have a number in float type without a decimal point?
I think your core problem here is that you're misunderstanding what  is.A  represents a C double, which almost always means an IEEE 754-1985  (or an IEEE 754-2008 , which is basically the same thing but slightly better defined). It always has 53 binary digits of precision. It doesn't matter whether you specify it as , , , , or ; those are all identical in every way.So, the main problem you're asking about doesn't make any sense:Now if one keys in "40", it will return 40.0, but 40.0 and 40 are different in certain digits.No, they aren't.  and  are both the exact same value, with no differences in any digits, and no difference in their precision, or anything else.There's a different type in Python, in the  library, that represents an IEEE  754-2008 arbitrary-sized . It has as many decimal digits of precision as you tell it to have. So,  and  have two digits;  has five digitsâ€”they may be equal, but they're not identical, because the last one is more precise., on the other hand, prints out however many digits of precision it actually has:While we're at it, if you do want  and  values, here's how to translate each line of R into Python:Notice that, just like  gives you a  rather than an , float("3")floatint`. I'm not sure why that Python behavior puzzles you given that it's identical to the equivalent R behavior.
Yes, would be an integer in Python, whereas  which represents the same number would be a float.


Answer URL
https://docs.python.org/3/library/decimal.html
