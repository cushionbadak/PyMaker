Natural Text
In the example problem below, the main program creates a list of random strings of length .  Without multi-processing the data is sent directly to  where the class merely adds the string  to the beginning of each random string.  When run without multiprocessing the code works very well with small values of  and large values of .I decided to add a multiprocessing ability to this test problem and broke down the core components of multiprocessing into a class title .  The member function  manages all functions in the class.  The function assumes that the input list will be divided into x smaller lists depending on how many processes the user wishes to utilize.  As a result, the function starts by determining the upper and lower indices for each sub-list relative to the initial list so the code knows which portions to iterate over for each thread.  The function then initiates the processes, starts the process, joins the process, extracts the data from , then it re-orders the returned data based on a counter that is passed to the primary function.  The MultiProc class works fairly well at small values of , but above a value of ~500, the code never terminates, although I suspect the value will vary from computer to computer depending on memory.  However, at some point the multiprocess function stops working and I suspect it has something to do with the way data is returned from multiprocess.  Does anyone know what might be causing this problem and how to fix it?
Your main problem is this:You start your workers that try to put something in a queue, then join the workers and only after that you start retreiving data from the queue. The workers however can only exit after all data has been flushed to the underlying pipe, and will block on exit otherwise. Joining processes blocked like this before starting to retrieve elements from the pipe can result in a deadlock.Maybe you should look into , as what you're trying to implement is some kind of a  operation. Your example could rewritten more elegantly something like this:


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.map
