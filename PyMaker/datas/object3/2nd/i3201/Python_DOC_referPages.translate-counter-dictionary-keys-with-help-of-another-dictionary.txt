Natural Text
I'm new to Python and haven't been able to find the answer to it on the web.Problem: I have a supposedly simple problem translating keys in one dictionary with help of another dictionary. This is what I try to doI have a counter dictionary called "cnt_domains" that includes a number of entries who look like this:Then I have a another dictionary containing the clear text values for keys in the dictionary above called "DictionaryReplaceValues" who looks like this:What I try to do is to replace the keys in the counter dictionary with the value for the corresbonding key in the cleartext dictionary. For example replacing 'p_1002095' with 'Stockholmskarta_hybrid_intern' as a key leaving the value count intact. So the result should look like this:Please note that there is a number of keys ( for example "TTTBT") that is just in my counter dictionary "cnt_domains" but not in my "DictionaryReplaceValues" dictionary. I would like to include them in my new translated list "cnt_domains_newname" but they should of course not be translated into something else.       Here is my code for it:But when I run it, it creates an KeyError: 'TTTBT' when I reach a key in my cnt_domains dictionary (like 'TTTBT') that doesn't exist in the DictionaryReplaceValues dictionary 
You can use the  method. It gives you the possibility to define a default value in case the key is not present in the dictionary. Therefore your code should look like:
if  is actually a dictionary you could use a dictionary comprehension and use the  method of dictionaries to "safely" try get the replacement value:Let us know if you want your result to actually be a dictionary or a list of tuples.
It looks like you want to loop over every tuple in cnt_domains (which is a list, not a dictionary as you said) and create a new dictionary with the right name and corresponding value. The error that you're getting about TTTBT not being found is because you have to "safely" try to get the values from DictionaryReplaceValues. If a key is not found, you want to handle the case by not doing anything. By default if you try to index a dict with a key it doesn't have, an error will be thrown. The  method solves this by assigning a value ( by default) to be returned instead of an error if whatever you are trying to find is not in the dictionary. 


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict
