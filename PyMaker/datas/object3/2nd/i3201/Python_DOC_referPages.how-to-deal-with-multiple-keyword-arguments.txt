Natural Text
I've got some trouble dealing with defining a user friendly function interface when passing two keyworded arguments with the same key. QuestionWhat is the best way to make it possible to call a function where two keyworded arguments have the same key and the second keyworded argument has precedence?If this problem occurs, the first keyworded argument always stems from an unzipped database in a , while the second keyworded argument is always passed by giving it "directly" as a keyworded argument.The database dictionary values must not be overwritten in the outer scopy of the functions, since they may be used multiple times.edit: To keep up the usability of the function for the user, a backend-implementation is preferred. This means that the user can simply pass arguments to the function without the use of additional modules, while the function itself does all the magic.ProblemI've got a function, called  here, which receives a multitude of arguments defined directly by the user of my program. This may be  and  of a heat exchanger for example. To ease the use of the function and make the calling code as short as possible, the use of databases is encouraged. These databases contain the data in a  (or in a pandas Series), in this case called .To pass the database-  to the function, it is unzipped with  and thus passed as keyworded arguments.Now if the user wants to overwrite a specific argument of the database, my understanding of a user-friendly approach would be to just let him pass the preceded argument again, for example with , and internally overwrite the argument from the database. But of course (see example code) this raises the error before I can even enter the function where I could :TypeError: fun_one() got multiple values for keyword argument 'length'Code example reproducing the errorMy current solutionMy current solution  involves not unzipping the database and passing it to . It checks  for s and sets values which are not yet in  to , as shown in the code example below.  But this approach is imho quite obscure for the user and requires looping and checking at the beginning of quite alot functions, since this will apply to numerous functions. (I'll outsource it to a module, so it is one line per function. But it still deviates from my understanding of an easy and clear function definition).Is there any better (more Pythonic) way to do this? Did I oversee some way to do it in the process of calling the function? Performance does not matter.Thanks in advance!
Easiest solution is using  from  (manual pages). That way you can chose which arguments have precedence. Example:Outputs:If we call fun_one just with inputs:Output will be:From manual:A ChainMap groups multiple dicts or other mappings together to create  a single, updateable view. If no maps are specified, a single empty  dictionary is provided so that a new chain always has at least one  mapping.You can wrap this ChainMap in decorator, one change is that don't call  with , only :Prints:
As extension to Andrej Kesely's answer (thanks again!), I added a loop of s to enable the use of multiple databases in the same function and to be able to use all kinds of positional arguments. The precedence of the multiple databases is first-come-first-served, but this is ok in this case. This is the decorator:And here is my extended example function with some code to test it. I just added all kind of random arguments, not considering any Pythonic way to do it... ;)


Answer URL
https://docs.python.org/3/library/collections.html#collections.ChainMap
