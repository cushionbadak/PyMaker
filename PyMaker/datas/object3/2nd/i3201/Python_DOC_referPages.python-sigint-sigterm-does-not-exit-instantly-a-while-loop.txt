Natural Text
I use Python in a Docker ContainerWhen i do ctrl+c via terminal tty or stop the image python does stop and do it not always successfully "do_stuff_before_python_terminates()". The reason is that when python is randomly in a while loop then i don't have luck it does not exit it stays in the while loop and do still other stuffs and do not terminate successfully. Docker only waits 10 seconds before it kills the container and than voila it does not "do_stuff_before_python_terminates()" what am i doing here wrong, how to solve the problem that even when its in a while loop it instantly exits and "do_stuff_before_python_terminates()"Updated Explanation:if python threws an errorit does successfully jump to if i stop the container or use ctrl+c and python is NOT in a while loopit does successfully jump toif i stop the container or use ctrl+c and python is IN an Loopwhat i need is, that it does instantly jumps out the while loop whenever i stop the container or do ctrl+c  (sigterm + sigint)Docker does kill the container after 10seconds so, python only has 10 seconds to exit, the effect is that it does never do_stuff_before_python_terminates() when python is in a loop
Your  is not called properly (from my experience with signals and python at least).Make the call to  in your  and/or  function.Make sure to put the  function above the sigterm & sigint functions.
Register the signal in main(). For example: Signals won't fire until low-level C code finishes; from the documentation: "A long-running calculation implemented purely in C (such as regular expression matching on a large body of text) may run uninterrupted for an arbitrary amount of time, regardless of any signals received. The Python signal handlers will be called when the calculation finishes."
From Execution of Python signal handlers:A long-running calculation implemented purely in C (such as regular expression matching on a large body of text) may run uninterrupted for an arbitrary amount of time, regardless of any signals received. The Python signal handlers will be called when the calculation finishes.This may be the cause of your problem. Because of this limitation (and others), signal handlers written in Python rarely behave as expected except in the simplest programs.If you really need to catch the signal immediately, you may need to write a wrapper for your program in a low level language (e.g. C) that calls your Python code.


Answer URL
https://docs.python.org/3/library/signal.html#execution-of-python-signal-handlers
https://docs.python.org/3/library/signal.html#signals-and-threads
