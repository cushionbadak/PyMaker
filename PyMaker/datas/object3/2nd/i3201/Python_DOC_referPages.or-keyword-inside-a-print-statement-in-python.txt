Natural Text
How does Python decide the output of this ?I mean why will always print([2] or ["az"]) output [2] and not ["az"] ? 
Since those lists contain elements, they will evaluate to  so Python prints whichever  literal comes first.
There are two things you have to understand here. First:If  is truthy, it has the value of  (without even evaluating , so  doesn't launch the nukes).Otherwise, it has the value of .Or, as the docs put it:The expression  first evaluates x; if x is true, its value is returned; otherwise, y is evaluated and the resulting value is returned.Notice that it uses the word "true" here, not the value . This is a bit confusing (even more so if you're talking out loud, or typing in ASCII without formatting…), which is why everyone says "truthy".So, what do "truthy" and "falsey" mean?1"x is truthy" does not mean , it means ."x is falsey" does not mean , it means .For all builtin and stdlib types: is falsey. is falsey.Numeric zero values are falsey.Empty containers are falsey.Everything else is truthy.Notice that  and empty containers are falsey, but they're not equal to .By convention, third-party types (including types that you define2) should follow the same rules. But sometimes there are good reasons not to. (For example, a NumPy array is neither truthy nor falsey.3)This is covered loosely in the same docs section:In the context of Boolean operations, and also when expressions are used by control flow statements, the following values are interpreted as false: False, None, numeric zero of all types, and empty strings and containers (including strings, tuples, lists, dictionaries, sets and frozensets). All other values are interpreted as true. User-defined objects can customize their truth value by providing a  method.The exact details for all builtin types are buried in the standard type hierarchy, which is where you learn things like whether  is covered by "strings and containers" (yes) or whether there's anything special about  (nope, it's truthy).So, let's go through your examples:Since  is a non-empty container, it's truthy. So this equals .Since  is an empty container, it's falsey. So this equals . may be falsey, but it's not , or even equal to . Only numbers equal other numbers, and  is the number 0 in the numeric type ,4 but  is not a number. So this is .Just be glad you didn't ask about . :)1. Technically, these terms aren't defined, even though everyone, even the core devs, uses them all the time. The official reference defines things in terms of evaluating to true or false as a boolean, and then explains what that means elsewhere.2. You can control whether your types' values are truthy by defining a  method—or by defining . The only things you're allowed to do are return , return , or raise an exception; if you try to return anything different, it raises a . So, everything is either truthy, or falsey, or untestable.3. If you try to check its truthiness, it will raise an exception. That's because NumPy uses boolean arrays widely—e.g.,  is , and you don't want people writing , since whatever they're expecting it to do probably doesn't make sense.4. Yes,  is a numeric type—in fact, a subclass of . This is a little weird when you're first learning, but it turns out to be useful more often than it's dangerous, so it's not just preserved for historic reasons.
 returns the first Truthy element in sequence, or the last Falsey element if all are Falsey. returns the first Falsey element in sequence, or the last Truthy element if all are Truthy.Python has a notion of Truthiness and Falsiness that is separate from  and . An empty list is not , but it is Falsey.  and .Most things are Truthy, so it's easier to list the Falsey things: (note that  is Truthy)Empty collections (, , , , and etc. Note that non-empty collections containing entirely Falsey elements are still truthy e.g. )Everything else is Truthy.In your example:  because the first element,  is Truthy (the fact that  is also Truthy is irrelevant in this case). Note that .


Answer URL
https://docs.python.org/3/reference/expressions.html#boolean-operations
https://docs.python.org/3/reference/expressions.html#boolean-operations
https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy
https://docs.python.org/3/reference/datamodel.html#object.__bool__
https://docs.python.org/3/reference/datamodel.html#object.__len__
