Natural Text
I have a script, where I have to define several classes:And so on...Later I change in some classes the values. For example: min_class will be 10 in the classes 2,5 and 6. Or the members list will contain different members in every different track.But sometimes I have to define four classes, sometimes 16.So my question is: Is there a way, to define classes in Python in a loop?
Use the  function to dynamically create classes.
Yes - this can be done. The only strange part is to force the classes created dynamically to actually have a name in the module - although it can be done by writting to the  dictionary.Anyway, what creates a class dynamically in Python is a call to : the class of which classes are instances.So, a simple way there, if the classes have all the same body, is to create a Base class for all of then, and then you could do at module level:Depending on what how you intend your code to be read, if the name is the only issue, you could just write a for loop, and declare the class inside it as well, just taking care of the name - creating a class with a  kewyord block and using  are equivalent (but for static analysis tools, like autocompleters used by IDEs - this stuff will get lost eitherway)However, as I stated in the very beggining, it is not usual to dynamically create variables in Python code - and by variables here, I mean anything with a static name , including functions and classes - if you are typing the hardcoded name of such a class in another ".py"  file, it should be typed hardcoded here. So, if your classes are to be used dymically, let's say some other code have to select an specific class of these based on some other data, it is not conveninent they are bound to the module as "class1, class2", etc... rather, they should be part of another data structures, such as a list or dictionary  - let's suppose you want one such class depending on a "product category" some other part of the code would have - You could just as well create a dicionary whose keys are product categories, and the values the classes. Or, to keep things simple, let's just do a list:(The form with the class body is valid as well, the only difference is that you don't assign your generated classes to the dict in  , and rather, to another data structure.
Your class definitions are identical.Why not have one class definition:and then create as many instances as you need?Now, you possibly want the class members to be instance members, so need to use  appropriately.
You've created your class  multiple times, however you need to create instances of one class:Then in your loop you want to create instances of your class:If you want a list of tracks just append this track to your list of tracks:
A large part of design and programming is avoiding or removing duplication.This is what you are trying to do, so that's a good start.However, the only thing that varies is the name of the class, which seems a strange thing to need.When you instantiate the classes there will essentially be no other difference between the object types.In design you want to encapsulate what stays the same (a class or algorithm for example), and parameterize it with what varies (data).I'd advise you to parameterize the object constructor with the track name:


Answer URL
https://docs.python.org/3/library/functions.html#type
