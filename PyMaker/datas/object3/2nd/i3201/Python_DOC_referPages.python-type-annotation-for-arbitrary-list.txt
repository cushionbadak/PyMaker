Natural Text
I would like to annotate an argument of a function to indicate that a list is expected as argument. However I would like to keep the base type of the list unspecified. Is there a way to do this? Ie use a placeholder like below?edit is it possible to use a template:Ie something like:
However I would like to keep the base type of the list unspecified. Is there a way to do this? Ie use a placeholder like below?Yes. But you want :Special type indicating an unconstrained type.Every type is compatible with . is compatible with every type.is it possible to use a template:Ie something like:Yes. Although these are called generics, not templates (because they're not actually something like C++ templates that provide a Turing-complete compile-time language, they're just simple generic types.The only problem is that generic types require type variables, and there's no builtin type variable named . But it's easy enough to create one, as shown in the docs, and of course  is the conventional "first generic parameter" typevar:â€¦ and then you can use it:If you already know C++ templates or Haskell parameterized types or Java generics or whatever, it's tempting to just jump in and start writing Python type annotations assuming you can guess what they mean. But really, you need to read at least the first few sections of the docs, or PEP 483 and the various other linked PEPs. Otherwise, you're going to guess all kinds of things wrong (not just what  is called and how to declare s, but also probably what the parameters of  are, how covariance works, which generic types are structurally checked vs. nominally, etc..While we're at it, unless you really need the input to be a , you probably want  or  or similar.You can find all the details in Classes, functions, and decorators, but in general, anything from  that seems like it ought to have a generic counterpart in  does.


Answer URL
https://docs.python.org/3/library/typing.html#typing.Any
https://docs.python.org/3/library/typing.html#generics
https://docs.python.org/3/library/typing.html
https://docs.python.org/3/library/typing.html#classes-functions-and-decorators
https://docs.python.org/3/library/collections.abc.html
https://docs.python.org/3/library/typing.html#typing.Any
https://docs.python.org/3/library/typing.html#generics
