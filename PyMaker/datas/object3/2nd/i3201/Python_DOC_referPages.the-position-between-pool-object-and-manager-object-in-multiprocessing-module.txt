Natural Text
The output of the code above is 30. However, if line 8 is exchanged with line 9 (see the code below), the output will be 0. So is there anybody who knows why? Thank you!The output is 1, which means the child process put the number into the queue created by the parent. Is that correct?
I assume you are using a Unix based operating system as on NT ones your logic would most likely break.To understand what happens we need to dig into the  internals. On Unix, when creating a new process, the  primitive is used. When a process forks, the parent continues its execution and the child starts as an exact copy of the parent.Python tends to hide a lot of things in the  module (I particularly dislike that) and leads to lots of misunderstandings. In your logic, the  happens when you create the  (line 9 in the first example, 8 in the second). In the first example, the children inherits the same  object the parent created. Therefore, they successfully manage to communicate as they share the same channel. In the second one instead, parent and children create their own separated  objects which are totally independent. When a child puts an element in the  it puts it in its own one which is not shared by anybody.   In the third and last example you create a  object, then a  and then you call  on the process. Guess when the  happens? When you call  and not when you create the  object. That's why the  is successfully shared. This is what I mean when I say that  APIs are a bit misleading.


Answer URL
https://docs.python.org/3/library/multiprocessing.html?highlight=process#contexts-and-start-methods
