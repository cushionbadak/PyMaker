Natural Text
Now that PEP 572 has been accepted, Python 3.8 is destined to have assignment expressions, so we can use an assignment expression in , i.e.instead of and it would work as before. What use does the  keyword have with the  statement in Python 3.8? Isn't this against the Zen of Python: "There should be one -- and preferably only one -- obvious way to do it."?When the feature was originally proposed, it wasn't clearly specified whether the assignment expression should be parenthesized in  and that could work. However, in Python 3.8a0, will causebut the parenthesized expression works.
TL;DR: The behaviour is not the same for both constructs, even though there wouldn't be discernible differences between the 2 examples.You should almost never need  in a  statement, and sometimes it is very wrong. When in doubt, always use  when you need the managed object within the  block.In ,  is bound to the return value of , whereas in ,  is bound to the  itself and the return value of the  method call is discarded. The behaviour is almost identical for open files, because their  method returns .The first excerpt is roughly analogous towhereas the  form would bei.e.  would set  to the return value of , whereas  binds  to the return value of the implicit  method call.Now, in case of files and streams,  will return  if it succeeds, so the behaviour for these two approaches is almost the same - the only difference is in the event that  throws an exception.The fact that assignment expressions will often work instead of  is deceptive, because there are many classes where  returns an object that is distinct from . In that case an assignment expression works differently: the context manager is assigned, instead of the managed object. For example  is a context manager that will return the mock object. The documentation for it has the following example:Now, if it were to be written to use an assignment expression, the behaviour would be different: is now bound to the context manager instead of the new mock object.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#patch
