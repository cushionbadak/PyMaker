Natural Text
I'm looking for a fastest way ( is not acceptable) to apply an  operator over more than 2 numbers in . There are two scenarios:a) on input we have numbers in a range between M and Nb) there can be a set of any natural numbersCurrently my code uses an  in a loop, which always compute a result bit (despite the fact that we know, that if we have , than the next and all next result bits will always be ). One of my ideas is to compute bits per columns, and for a given column, stop computing when there is , because the result bit will be .Example (included in test code below)Existing (iterative), rather slow () code:It would be good if this solution was expandable to for example XOR operator.I'm asking for some ideas on how to start implementing this in the Python language and maximize performance.Thanks!
I would let Python worry about the optimization, this could be written trivially for a sequence using  and Wrapping this in a functionUsing , to do this 1000000 times took 0.758 seconds in the following environment:  Python IDLE 3.4.1 (v3.4.1:c0e311e010fc, May 18 2014, 10:38:22) [MSC v.1600 32 bit (Intel)] on win32Processor Intel Core i7-3740QM CPU @ 2.70 GHzMemory 16.0 GBOS 64-bit Windows 7


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
https://docs.python.org/3/library/operator.html#mapping-operators-to-functions
https://docs.python.org/3/library/timeit.html
