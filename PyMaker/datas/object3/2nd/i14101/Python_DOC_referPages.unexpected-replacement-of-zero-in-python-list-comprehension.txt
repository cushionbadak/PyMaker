Natural Text
I was looking at a stackoverflow question (if else in a list comprehension) and decided to try the following line,and got the following list as an output. I had expected the output to be because zero is itself, just as the other numbers  were evaluated. Thinking to test whether the behavior was affecting only the first index, I triedwhich outputedand was what I would have not expected if the behavior was specific to the first index. Given the results so far, I tried the following thinking there was something particular about  being in the iterable.andwhich resulted in the following for both casesIf someone could explain this behavior to me, I would appreciate it. It appears that  being in the iterable could be triggering the unexpected behavior, but I am not confident on that conclusion.
Python treats 0 as false and any other number as true.Try it for yourself:The output you get is:What your list compression is saying is:"For each number from 0 to 9, if a is true, add a to the list, if a is false, add "Exception" to the list"Because 0 is treated as False you get "Exception" for 0, then 1 2 3... etc for all the other numbers.
 is among the numeric type treated as , same as  and many others, so in your expression in list compression, the  is a  condition leading to the result of  stringYou can check it with IDLE:
It is because  evaluates to  in python. All the other numbers would evaluate to  and thus be placed in the list.Lets take a look at this. evaluates to 0,1,2,3,4,5,6,7,8,90 -> All other numbers -> 


Answer URL
https://docs.python.org/3/library/stdtypes.html#truth-value-testing
