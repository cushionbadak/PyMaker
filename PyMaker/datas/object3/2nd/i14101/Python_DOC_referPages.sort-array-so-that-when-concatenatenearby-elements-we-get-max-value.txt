Natural Text
I am trying to write a function that given a list of non negative integers, arranges them such that they form the largest possible number. For example, given , the largest formed number is . Here is the code that I have tried to solve the problem:However, I get  , as  is largest, but it should show  first.
In Python 2 you can do this with an appropriate comparison function passed to .outputIn Python 3,  no longer takes a custom comparison function. scpio's answer shows how to use  to convert a comparison function into a key function, but it's not that hard to do "by hand".outputThe previous Python 3 compatible version I posted doesn't actually work on Python 3 :oops:! That's because the  method is no longer supported in Python 3. So I've changed my old  method to  and used it to implement all 6 of the rich comparison methods.Important noteI have to mention that this comparison function is a bit weird: it's non-transitive, in other words, a>b and b>c doesn't necessarily imply a>c. And that means that the results of using it in  are unpredictable. It does appear to do the right thing for the data I've tested it with, eg, it returns the correct result for all permutations of , but I guess it really shouldn't be trusted to do so for all input.An alternative strategy that's guaranteed to work is brute force: generate all permutations of the input list & find the permutation that yields the maximum result. But hopefully there's a more efficient algorithm, since generating all permutations of a large list is rather slow.As Antti Haapala points out in the comments, my old comparison functions were unstable when comparing different numbers that consist of the same sequences of repeating digits, eg 123123 and 123123123. Such sequences should compare equal, my old functions didn't do that. The latest modification addresses that problem.UpdateIt turns out that  actually is transitive. It's also stable, now that it handles the  case properly, so it's safe to use with TimSort (or any other sorting algorithm). And it can be shown that it gives the same result as Antti Haapala's  key function.In what follows I'll use uppercase letters to represent integers in the list and I'll use the lowercase version of a letter to represent the number of digits in that integer. Eg,  is the number of digits in . I'll use  as an infix operator to represent digit concatenation. Eg,  is ; note that  has  digits. Arithmetically,.For the sake of brevity, I'll use  to represent Antti Haapala's  key function. Note that .Now for some algebra. I'll put it in a code block to keep the formatting simple.A mathematical induction-style argument shows that sorting a list of anyfinite length using pairwise comparisons with  /  as thecomparison function or with  as the key function sufficesto find the permutation that yields the largest possible integerproduced by digit concatenation. The details of this argument will beleft as an exercise for the reader. :)
One-liner using insights from Antti Haapala, PM 2Ring and Stefan Pochmann:Given :
Here is an ugly solution that does work without passing a  comparison  function to the . Basically, the key function takes each number and calculates a rational number that has that number as the repeating decimals; that isThe 0 is sorted the smallest with sort key 0, and 1 followed by most zeroes would have key closest to , and thus sorted second smallest. Numbers that consist of digit 9 all have sort key equal to ; it does not really matter if you sort  before or after .Sorting using these values as the key will necessarily give the correct output, unless you use numbers that are too big for float precision. (probably much sooner than )Thus we get the following program:Which producesAs we're essentially calculating  here, one can also write the following oneliner:The  part guards for division by zero error, in case  is among the numbers.
I hope I'm not varying too much on this.  My input is cast as a list of strings.  I generate the list of permutations, creating a list of lists, and then sort the sublists from least to greatest.  Finally, I take the last element of the sorted list.If you'd rather have the number itself rather than the list of elements...That second one actually also serves to show the the first is properly sorting on lists.I'm pretty new with Python and would appreciate comments/improvements.

The most straight-forward way is to use itertools.permutations() to model how you would solve this by hand:
I would love to understand from all the python experts here what is wrong with my one-liner solution. Leet code website keeps rejecting with failed tcs which works just fine on my local env.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__lt__
https://docs.python.org/3/library/stdtypes.html#int.bit_length
https://docs.python.org/3/library/functions.html#map
