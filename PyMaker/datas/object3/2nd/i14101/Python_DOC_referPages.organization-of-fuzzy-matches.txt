Natural Text
I've gone through and fuzzy matched each element in a list of 20,000+ movie titles with each other element, which returns a value for each pair: How can I organize this data efficiently? More specifically- how can I get matches to group together based on their match value? Capturing the return values from the nested loops and then packaging them with x and y into tuples or lists is obviously redundant and messy. I attempted an implementation using classes but I'm missing something.
Using list comprehensions and :Nice and lazy solution using 
You only need to iterate over  of the titles since the ratio doesn't depend on the order. This is significantly faster than iterating over a  of it.For your list of 20,000 titles, you would iterate over 400 000 000 pairs if you used . With , you are only iterating over 199 990 000.Then you can store the ratios in a dictionary where you can look up a ratio to get a  of pairs with that ratio.Or in a dictionary where you can look up a  of pairs and get their ratio.-Then you can retrieve the data later:Keep in mind that you will need tons of memory for this storage. You can halve it by using only one of the two methods above, depending on your needs / convenience.
Maybe you can store the  ratio in a dictionary with the  tuple as the key, would make it easier to search the  for each pair later on. For that you can create an empty dictionary outside the for loop , and then in for loop assign the  to the key  for that dictionary.Example code -Later when you want to retrieve the ratio, you can simple call  to get it.You can also use dictionary comprehension for that in Python 2.7+ -


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
https://docs.python.org/3/library/itertools.html#itertools.product
