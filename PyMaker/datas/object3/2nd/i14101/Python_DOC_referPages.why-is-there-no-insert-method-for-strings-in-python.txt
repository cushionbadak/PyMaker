Natural Text
Lists already have an insert() method that works with indexes:If strings also have indexes, why not an insert() method for them too? Example below:
Short answer: Because strings are immutable.Every type in Python is either mutable (like a list, a dictionary, or a normal object) , or immutable (like tuples, strings, ints, ...).That's why you can append, pop, and insert in and from lists, but not tuples.When you do something like this: seems to have "changed" to , but actually, the name  just points to a new string. You can observe that effect if you hand something to a function and try to modify it in the function: Mutable types will also change outside (although you should usually avoid these side-effects), while immutables won't:If you need to mutate strings, you might want to look into StringIO for Python 2, or io.StringIO for Python 3, respectively:
Because strings are immutable.  You can't change the contents of a string.  You'd have to make a new string.
Because strings are decidedly immutable. As are tuples.
Traditional strings are immutable. You can actually use the deprecated  to do this:
Hence List are a mutable we can make changes in a list. But Strings ar ean immutable one, we can append charaters in a string. But we cannot change the index position values in a string.


Answer URL
https://docs.python.org/3/library/io.html
