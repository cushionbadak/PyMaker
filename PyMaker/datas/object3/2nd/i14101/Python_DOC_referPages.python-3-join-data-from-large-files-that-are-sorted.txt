Natural Text
I have multiple large files (> 5M rows of data) that are sorted on a unique timestamp. All the files contain virtually all the same timestamps except for a handful of randomly missing rows (< 1000). I'd like to efficiently join the data from all the files into a single dataset with one row per timestamp, preferably using a generator. Except for the missing rows, I could just use zip:However, since there are some missing rows, I need to join the data on timestamp instead of simply zipping. I can simply ignore any rows that don't have matching timestamps in every file. Is there a pythonic way to implement this functionality in a few lines? My approach would be to advance each iterable in turn until it's timestamp is no longer less than the maximum timestamp for the group of iterables. Whenever all the timestamps match, yield a row and advance all the iterables. But, the logic seems messy when I try to implement this approach.Edit: Performance.The implementation needs to start returning rows without reading all the data into memory first. It takes a while to read all the data and many times only the first handful of rows needs to be examined. 
I ended up writing the following code to solve my problem, which turned out to be lighter than I expected:
If each iterable in  is sorted by  then you could use  to merge them taking into account possible gaps in the data and  to group records with the same timestamp:The implementation yields groups without reading all the data into memory first.
My first guess would be to use a dictionary with timestamps as keys and the rest of the data in the rows as values, then for each row in each file, add it to the dictionary only if an item with the same timestamp (key) isn't already present.However, if you truly are dealing with giant data sets (which it seems like you are in this case), then the approach you mention in your original question would be your best option.
ok, i got interested in the problem (had a similar problem recently) and worked a bit on it. you could try something like this:this is for 2 files only.


Answer URL
https://docs.python.org/3/library/heapq.html#heapq.merge
https://docs.python.org/3/library/itertools.html#itertools.groupby
