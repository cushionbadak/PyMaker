Natural Text
I have a dict like thisI want to iterate over the dict and fetch key and value from list of values for each item, something like thisI have implemented the logic for this and it works fine, but when i see the  created in process, i see lots of intermediate unnecessary looping. The end result works just fine but i think it can be improved a lot.How to do it more efficiently?
Try something like this -When passing a list using * as a parameter to a function, it will break the list into individual elements and pass it onto the function. Example - if we pass  it would be passed as two different arguments -  and  - checkt this here (Section - * in Function calls)Example to explain this -zip - This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.A bit more scale-able model -
A fun way to do it with a list comprehension.Or a more traditional (less fun) wayAnd per comments, here is a way to do it without relying on 'non-guaranteed' behavior like the same ordering of data.keys() and data.values().List ComprehensionAnd traditional for-loop
If the number and actual literals used as keys are not known at coding time, here's an idea: you can yield a series of dict-like objects. Each instance would expose the the i-th value from the value list. You can read about emulating python container types.
Something similar to this (but replace the print with a yield):The  in the second for-loop more or less transposes the list of lists in . Slightly more compact way of writing the same:In both cases, the result is:
This is one way to do it:Output:


Answer URL
https://docs.python.org/3/reference/datamodel.html?emulating-container-types#emulating-container-types
