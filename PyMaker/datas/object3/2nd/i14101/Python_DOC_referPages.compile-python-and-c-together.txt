Natural Text
I am basically looking to see if it's possible to compile Python code into a C++ program such that a single binary is produced, then call the (compiled) python code as/with a function from within the C++ code.Background: I have a C++ code that does some work and produces data that I want to plot. I then wrote a seperate Python script using SciPy that reads in the output data, processes it, and plots it to files. This all works as it is.Basically, I am picturing:I don't need to pass anything between the python code and the C++ code other than being sure it's executed in the same directory. It may make things easier if I can pass string arguments, but again - not essential.Can this be accomplished? Or is it generally a bad idea and I should just stick to having my C++ and python separate?
Yes: this is called embedding. The best place to start is the official Python documentation on the topic. There's some sample code that shows how to call a Python function from C code.Here's an extremely basic example, also from the Python docs:
Make a native extension (Python 2 or Python 3) out of your C++ code, and have your Python program  it. Then use  or your favorite platform's counterpart to turn the Python program and your native extension into an executable.


Answer URL
https://docs.python.org/3/extending/
