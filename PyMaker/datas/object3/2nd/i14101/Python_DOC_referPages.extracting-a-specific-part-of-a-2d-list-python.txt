Natural Text
Let's say I have two lists,  and .  I want to perform , which returns all elements of  not in .I can think of a naive loop approach to doing this, but that is going to be really inefficient.  What is a pythonic and efficient way of doing this?As an example, if I have ,  should return 
Python has a language feature called List Comprehensions that is perfectly suited to making this sort of thing extremely easy. The following statement does exactly what you want and stores the result in : will contain .Hope this helps!
One way is to use sets:
Expanding on Donut's answer and the other answers here, you can get even better results by using a generator comprehension instead of a list comprehension, and by using a  data structure (since the  operator is O(n) on a list but O(1) on a set).So here's a function that would work for you:The result will be an iterable that will lazily fetch the filtered list.  If you need a real list object (e.g. if you need to do a  on the result), then you can easily build a list like so:
Use the Python set type.   That would be the most Pythonic.  :)Also, since it's native, it should be the most optimized method too.See:http://docs.python.org/library/stdtypes.html#sethttp://docs.python.org/library/sets.htm (for older python)
As an alternative, you may also use  with the lambda expression to get the desired result. For example:Performance ComparisonHere I am comparing the performance of all the answers mentioned here. As expected, Arkku's  based operation is fastest.Arkku's Set Difference - First (0.124 usec per loop)Daniel Pryden's List Comprehension with  lookup - Second (0.302 usec per loop)Donut's List Comprehension on plain list - Third (0.552 usec per loop)Moinuddin Quadri's using  - Fourth (0.972 usec per loop)Akshay Hazari's using combination of  +  - Fifth (3.97 usec per loop)PS:  does not maintain the order and removes the duplicate elements from the list. Hence, do not use set difference if you need any of these.
Alternate Solution  :


Answer URL
https://docs.python.org/3/library/functions.html#filter
https://docs.python.org/3/library/functions.html#func-set
