Natural Text
I have a Python module that performs some logging during some of the methods it contains:module.pyIn this implementation the log file will be opened and closed every time the  method is called.I'm considering refactoring it so the file is opened once when the module is loaded, but I'm not sure how to ensure it is closed when a script importing the module ends. Is there a clean way to do this?Edit: I'm not asking about closing the file when an exception is encountered, but when the script that imports my module exits.
OS takes care of open file descriptors then a process dies. It may lead to a data loss if file buffers inside the application are not flushed. You could add  in the  function after each write (note: it does not guarantee that the data is physically written to disk and therefore it is still may be lost on a power failure, see Threadsafe and fault-tolerant file writes).Python may also close (and flush) the file on exit during a garbage collection. But you shouldn't rely on it. works only during a normal exit (and exit on some signals). It won't help if the script is killed abruptly.As @Ren√© Fleschenberg suggested, use  module that calls  and perhaps registers  handlers for you.
Python is usually pretty good at cleaning up after itself.  If you must do something when the script ends, you need to look at the  module - but even then, it offers no guarantees.You may also want to consider logging to either  or , depending on purpose, which avoids keeping a file around all together:
Python will automatically close the opened files for you when the script that has imported your module exits.But really, just use Python's logging module.


Answer URL
https://docs.python.org/3/library/atexit.html
