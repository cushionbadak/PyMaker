Natural Text
What is the difference between  and ?
 “[reads] and [returns] a list of lines from the stream.” So what you get back is a list of every line. As such, the whole file is read into the memory and then split into lines.The documentation already says this:Note that it’s already possible to iterate on file objects using  without calling .So unless you have an actual need to get all lines as a list, don’t use . Instead iterate over the file directly, because IOBase, which is the base type for all file handlers, implements the iterator protocol: (and its subclasses) supports the iterator protocol, meaning that an  object can be iterated over yielding the lines in a stream. Lines are defined slightly differently depending on whether the stream is a binary stream (yielding bytes), or a text stream (yielding character strings). See  below.Using the iterator protocol has the benefit that the file will not be read completely into the memory. Instead, the file stream will be consumed iteratively and give you one line after another without having all the other contents of the file in the memory. So this works very well even for very large files.
 - is the file object itself , you can iterate over them to get the lines in the file.Example -You can only iterate over them , you cannot access a certain line in the file directly without using  or such function. - this returns the list of all lines in the file, when you iterate over this , you are iterating over the list of lines.Example -Here , you can get the 2nd line in the file using  , etc.Usually if the requirement is to just iterate over the lines in the file, its better to use the  directly, since creating a list of lines and then iterating over them would cause unnecessary overhead. 


Answer URL
https://docs.python.org/3/library/io.html#io.IOBase.readlines
https://docs.python.org/3/library/io.html#io.IOBase
https://docs.python.org/3/library/io.html#io.IOBase.readline
