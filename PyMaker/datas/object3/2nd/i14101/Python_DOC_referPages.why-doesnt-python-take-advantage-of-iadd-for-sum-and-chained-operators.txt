Natural Text
I just conducted an interesting test:Obviously, the  method is more efficient than the  method, not requiring the allocation of a new class.  If my objects being added were sufficiently complicated, this would create unnecessary new objects, potentially creating huge bottlenecks in my code.  I would expect that, in an , the first operation would call , and the second operation would call  on the newly created object.Why doesn't python optimize this?
The  method is free to return a different type of object, while  should, if using in-place semantics, return . They are not required to return the same type of object here, so  should not rely on the special semantics of .You can use the  function to implement your desired functionality yourself:Demo:
Martjin's answer provides an excellent workaround, but I feel the need to summarize the bits and pieces of answers scattered throughout the comments:The  function is primarily used for immutable types.  Performing all additions except the first in-place would create a performance improvement on objects that had an  method, but checking for the  method would cause a performance loss in the more typical case. Special cases aren't special enough to break the rules.I also stated that  should probably only be called once in , where  creates a temporary variable, and then calls  before returning it.  However, this would violate the principle of least surprise.
Since you are writting your class anyway, you know it's  can return the same object as well, don't you? And therefore you can do your currying optimized code to run with both the  operator and the built-in :(Just beware of passing your code to third party functions that expect "+" to be a new object)


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
