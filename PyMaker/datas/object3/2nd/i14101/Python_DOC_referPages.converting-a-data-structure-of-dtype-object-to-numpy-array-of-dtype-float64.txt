Natural Text
I am trying to convert  array from the following data structure into a numpy array so I can input it to sklearn. However, I am running in circles as it always tells me that  is unsuitable, and I am not able to convert it to the desired  format. I want to extract all the  as a list of numpy arrays of , instead of  from the following structure. is an object returned from an earlier computation.I tried the following:Also,  as suggested by another user, gives a similar output:I know I can access the contents of  using , but what I want is to convert the  to , and made into a list/dict in which each row will have the of the corresponding entry from .I also tried using a pandas dataframe, but to no avail.Again,  is returned. My guess would be to loop over each row and print a list out. But I am unable to do that. Maybe it is a newbie question. What am I doing wrong?Thanks.
This:Or you need to be more clear in your example...
Lets take as the starting point a list of lists or equivalently an object array of lists:If the sublists were all the same length,  would give you a 2d array, one row for each sublist, and columns matching their common length.  But since they are unequal in length, it can only make it a 1d array, where each element is a pointer to one of these sublists - i.e. dtype=object.I can imagine 2 ways of constructing a 2d array:pad each sublist to a common lengthinsert each sublist into an empty array of the appropriate size.Basically it requires common Python iteration;  it's not a common enough task to have a wiz-bang numpy function.For example:To get a sparse matrix:Nothing magical, just straight forward sparse matrix construction.  I suppose you could bypass the dense matrixThere is a list-of-lists sparse format that looks a bit like your data.Conceivably you could construct an empty  matrix, and set it's  attribute directly.  But you'd also have to calculate the  attribute.You could also look at the , .  attributes of the  format matrix, and decide it would be easy to construct the equivalent from your  list of lists.One way or other you have to decide how the non-zero rows get padded to the full length.
You can access the value of a dictionary item by using its key:To access items in a list, you can iterate over it or use its index conveniently applies a function to all the items of an iterable and returns a list of the results.   returns a function that will retrieve an item from an object. 


Answer URL
https://docs.python.org/3/tutorial/index.html
