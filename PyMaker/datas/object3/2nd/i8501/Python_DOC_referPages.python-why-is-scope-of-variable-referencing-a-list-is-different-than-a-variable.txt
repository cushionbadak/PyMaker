Natural Text
I have found that the scope of a variable referencing a List is different than the variable referencing a Tuple or Integer or String. Why does it happen ?1) When I am using an Integer, String or Tuple:- 2) When i am using an List:- In the first case changes in the values of anInt, aStr, aTup is limited to the scope of function while in case of a List scope changes.'
It is not a question of scope. The scope does not differ between types. It can not differ, in fact: a variable is just a named reference to a value, completely type-agnostic.But some types in Python are mutable (once created, a value can be changed), and  is one of them. Some are immutable, and changing a value of these types requires creating a new object.  works in two different ways for mutable and immutable types. For immutable types  is equivalent to . A new object is created and the  variable now refers to it. But the objects of mutable types are modified "in place", quite as your list. You may want to read this.Now let's have a look at scopes. Here you have global objects that are passed to a function. The function uses them as its parameters, not as global objects (yes,  inside the function is not the same variable as  outside it, here is more information on scopes). It uses other references to the same objects, and it can not modify the variables, it can just modify objects the variables refer to. But only the mutable objects.You may be surprised if you compare the results of two following code samples.What is the difference? The only difference is that  is an immutable type, and the  is a mutable one. After assigning  to  they always refer a single object. But the  operator creates a new object in case of .
The difference is that the immutable types int, string and tuple are passed by value. When the function updates the value, it is updating a local copy. The list is passed by reference. When you use append, it is updating the original list.


Answer URL
https://docs.python.org/3/reference/datamodel.html
https://docs.python.org/3/reference/executionmodel.html#resolution-of-names
