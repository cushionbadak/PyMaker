Natural Text
First of all, sorry if the title isn't very explicit, it's hard for me to formulate it properly. That's also why I haven't found if the question has already been asked, if it has.So, I have a list of string, and I want to perform a "procedural" search replacing every  in my target-substring by any possible substring.Here is an example:In this case where there is just one  I just split each string with  and use  and/or , so that's ok.But I don't know how to do the same thing if there are multiple  in the search string.So my question is, how do I search for any number of unknown substrings in place of  in a list of string?For example:Hope everything is clear enough. Thanks.
I would use the regular expression package for this if I were you. You'll have to learn a little bit of regex to make correct search queries, but it's not too bad. '.+' is pretty similar to '*' in this case.This should return ['obj_1_mesh', 'mesh_1_TMP']. I tried to replicate the '*_1_*' case. For 'mesh_*' you could make the search_query 'mesh_.+'. Here is the link to the python regex api: https://docs.python.org/2/library/re.html
Consider using 'fnmatch' which provides Unix-like file pattern matching. More info here http://docs.python.org/2/library/fnmatch.htmlThis should do the trick
The simplest way to do this is to use , as shown in ma3oun's answer. But here's a way to do it using Regular Expressions, aka regex.First we transform your  pattern so it uses  as the "wildcard" instead of . Then we compile the result into a regex pattern object so we can efficiently use it multiple tests.For an explanation of regex syntax, please see the docs. But briefly, the dot means any character (on this line), the  means look for one or more of them, and the  means do non-greedy matching, i.e., match the smallest string that conforms to the pattern rather than the longest, (which is what greedy matching does). outputIf we use  the result isPlease note that this solution is not robust. If  contains other characters that have special meaning in a regex they need to be escaped. Actually, rather than doing that  transformation, it would be cleaner to just write the pattern using regex syntax in the first place.
If the string you are looking for looks always like string you can just use the find function, you'll get something like:If you have more than one string to look for (like abc*123*test) you gonna need to look for the each string, find the second one in the same string starting at the index you found the first + it's len and so on.


Answer URL
https://docs.python.org/3/library/re.html
https://docs.python.org/3/library/re.html#re.escape
