Natural Text
I have an external class that is already wrapped (I mean, it is directly accessible by python with no further effort), and now I want it to be part of a larger cython module (in other words, embed it). I could have explicitly python-import it. But the things is that the external class is already used in an  function in the cython module (so that the class is eventually d in source). Python import require the module to be compiled, then the two module may have two different copy of the same class...How should I then use an external already wrapped class in cython?(Possibly oversimplified) example:Foo.cpp:Spam.pyx:And I want to use the foo class in .
This should be fine (almost) as it is. This  line isn't quite right:Note the change to  - this tells Cython that the function returns a Python object. The C/C++ declaration would look like:Either will work.The reason that the Cython code will be fine with it is that the  includes a pointer  that points to the . This is set up when the object is created. The  contains all the details the Python interpreter needs to use the returned object and so everything should work fine.The whole thing is basically the equivalent of the Python code:The Python interpreter can use the returned value, despite the  not being known in the "global" namespace.The one thing to be careful of is that you should ensure that the  module initialization function has been called at least once before creating a . The reason being is that this function usually does some things like calling  needed to make sure that  is properly set up. An easy way to do this would be to add the following lines to :There are other ways of doing the same thing though.


Answer URL
https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_init
