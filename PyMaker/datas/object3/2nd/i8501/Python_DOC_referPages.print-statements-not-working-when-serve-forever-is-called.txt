Natural Text
I have the following small python script to run a local server for testing some html:When I run this in the terminal, it blocks the  statements: nothing is printed. But the server works and I can go to  in the browser and access my html files. If, however, I comment out the last line, the call to , it works, printing both 'opened' and 'Listening at https:127.0.0.1:8000/ . . .'. Except of course it doesn't actually work, since now the server isn't being run.I find this very confusing. The previous lines are executed before the last line. Why would the last line cause the previous lines to not work?Python3 on Windows7 if anyone was going to ask, but I doubt that's relevant.
That maybe related with the "infamous" need to flush in order for your prints to work!Related reading material:Theoretical knowledge on the subject How to flush output of Python print?,python `print` does not work in loop, as suggested by @Kerorin:Because you are using Python 3 and since version 3.3 you don't have to follow the solutions given in the above great answers. The print build-in type has an option  which by default is . Do: PS: This is a confirmed solution on a similar issue
There several solutions for this phenomena:Disable output bufferingReopen stdout file descriptor with write mode, and 0 as the buffer size (unbuffered). I suggest to write this line as the first line in your code, and this way, all your code will remain the same except the  buffer:Run python with unbuffered binary stdout and stderrForce the binary layer of the stdout and stderr streams (which is available as their buffer attribute) to be unbuffered. The text I/O layer will still be line-buffered if writing to the console, or block-buffered if redirected to a non-interactive file.So just run your script like this:Or by setting the environment variable  Set  keyword argument to trueSince Python 3.3, you can force the normal  function to flush without the need to use  just set the "flush" keyword argument to true:Changing the default in one module to You can change the default for the print function by using  on the global scope of a module:We can see it works just as expected:
Hi, please, consider using logging instead of printing, you do not want bother with all the shortcomings of the print statement. Print is for beginners, may be for interactive mode, all the server coders rely on logging.Check In python, why use logging instead of print? for the full list of logging goodness.


Answer URL
https://docs.python.org/3/library/functions.html#print
