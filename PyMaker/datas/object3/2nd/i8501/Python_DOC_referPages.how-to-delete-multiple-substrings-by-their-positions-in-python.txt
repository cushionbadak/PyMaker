Natural Text
I have a string, and I have a list of positions of the substrings that I need to delete:Every element of the list contains start and end position of substring. End position is exclusive, and start position is inclusive. So the string should be transformed to:Length of the list with positions is unknown, so the soultion can't be just hardcoded.Is there any effective way to delete multiple substrings by their positions? Positions can't overlap.
Strings are immutable, so in-place deletion is a no-go. And successive concatenation is suboptimal.You can convert the string to list so it can be mutated and simply wipe off the desired positions by deleting each unwanted slice. Use  to recreate your string:Note that conversion to list for the mutation of immutable types is also suggested by the docs as best practice:Concatenating immutable sequences always results in a new object. This  means that building up a sequence by repeated concatenation will have  a quadratic runtime cost in the total sequence length. To get a linear runtime cost, you must switch to one of the alternatives below:if concatenating  objects, you can build a list and use   at the end or else write to an  instance and  retrieve its value when complete
You have to offset for future indexes. So we first get the rest of the string (excluding the two indexes) via  and then we also need to offset it too, because we are removing items from the string.  So, we'll add our offset to each position item.
This should work easily.The slicing will help here to skip some parts, it works as 


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.join
