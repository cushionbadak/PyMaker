Natural Text
From what I've read,  should match the start of a string, and  the end. However, with , it looks like the behavior of  continues to work fine, while  'breaks'. Example:This seems correct to me --  is not at the start of the string, even if it is at the start of the search.This seems wrong to me, or inconsistent at least.The documentation on the  module explicitly mentions that the behavior of  does not change due to start/end arguments to , but no change in behavior is mentioned for  (that I've seen).Can anyone explain why things were designed this way, and/or suggest a convenient workaround?By workaround, I would like to compose a regex which always matches the end of the string, even when someone uses the end argument to .And why was  designed such that:is the same aswhenis explicitly and intentionally not the same asIt seems to be less an issue of inconsistency between  and , and more of an inconsistency within the  function.
Short AnswerUse  to and  to match the literal beginning or end of a string.The relevant lines from the  module's docs:6.2.1. Regular Expression Syntax  Matches only at the start of the string.  Matches only at the end of the string.Caveat about This won't work "even when someone uses the end argument to ".Unlike the "start" parameter , which just marks a starting point, the  parameter means the search (or match) will be conducted on only a portion of the string (emphasis added):6.2.3. Regular Expression Objects)The optional parameter  limits how far the string will be searched;  it will be as if the string is  characters long,  [...]   is equivalent to .The  matches the end of the string being searched, which is exactly what  changes.BackgroundThe more-familiar  and  don't do what you think they do:  (Caret.) Matches the start of the string, and in  mode also matches immediately after each newline.  Matches the end of the string or just before the newline at the end of the string, and in  mode also matches before a newline.   matches both 'foo' and 'foobar', while the regular expression  matches only 'foo'.  More interestingly, searching for  in  matches 'foo2' normally, but 'foo1' in  mode;  searching for a single  in  will find two (empty) matches:  one just before the newline, and one at the end of the string.Python's regular expressions are heavily influenced by Perl's, which extended the old  abilities with a host of its own.That included multi-line matching, which raised a question about metacharacters like :Was it matching the beginning of the string, or the beginning of the line?When  was only matching one line at a time, those were equivalent concepts.As you can see,  and  ended up trying to match everything "start-like" and "end-ish".Perl introduced the new escape sequences  and  (lower-case) to match only the start-of-string and end-of-string.Those escape sequences were adopted by Python, but with one difference:Python did not adopt Perl's  (upper-case), which matched both end-of-string and the special case newline-before-end-of-string...making it not quite the partner to  that one would expect.(I assume Python upper-cased Perl's  for consistency, avoiding the lopsided  regexes that were recommended in books like Perl Best Practices.)History of  and It appears that the strange "not actually the start-start position" meaning of  is as old as the parameter itself:The Python 1.4  function docs (25 Oct 1996 --- probably pre-dating the regex object) don't show the  or  parameters at all.The Python 1.5  method docs (17 Feb 1998) introduce both the regular expression object and the  and  parameters.It states that a  will match at , although later revisions suggest this was a typo.(Speaking of typos:The  character itself is missing.It came and went, until finally reappearing for good(?) in Python 2.1.)The Python 1.5.1  method docs (14 Apr 1998) insert the missing "not", reversing the previous docs.The Python 1.5.1p1  method docs (06 Aug 1998) clarify the unexpected effects of .They match Python 3.6.1's description of  word-for-word...give or take that pesky  typo.I suspect the numerous changes to the docs over a couple months of bug-fix releases reflect the docs catching up with reality --- not changes to the design of (although I don't have Python 1 lying around to verify that).The  mailing list archives only go back to 1999, so unless the earlier messages were saved somewhere else, I think answering the "why" question would require guessing who wrote that code, and asking them.
According to the  documentation here:The optional parameter endpos limits how far the string will be searched; it will be as if the string is endpos characters long, so only the characters from pos to endpos - 1 will be searched for a match.So your syntax,  is equivalent to , which does match the pattern .
This seems wrong to me, or inconsistent at least.No, the  interpretation is consistent with the rest of Python, it's the starting  position that's inconsistent as the documentation explains:parameter pos gives an index in the string where the search is to  start; it defaults to 0. This is not completely equivalent to slicing  the string; the '^' pattern character matches at the real beginning of  the string


Answer URL
https://docs.python.org/3/library/re.html#regular-expression-syntax
https://docs.python.org/3/library/re.html#regular-expression-objects
https://docs.python.org/3/library/re.html#re.regex.search
https://docs.python.org/3/library/re.html#re.MULTILINE
https://docs.python.org/3/library/re.html#re.MULTILINE
https://docs.python.org/3/library/re.html#re.MULTILINE
https://docs.python.org/3/library/re.html#re.regex.search
https://docs.python.org/3/library/re.html
