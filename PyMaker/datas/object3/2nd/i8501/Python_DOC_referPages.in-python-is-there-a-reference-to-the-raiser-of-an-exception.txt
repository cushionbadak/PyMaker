Natural Text
I'm writing a method  of a class called  which can throw a  exception of which the error message includes a string representation of the  which raised it. Here is how it is implemented now:The  argument is always the same, however, and I'm looking for a way to make the code more succinct by using, in the Exception, something like "" (in pseudo-code). Is there any way to achieve this?
There is no easier method of getting to the instance that raised the exception.Raised exceptions include a traceback, the stack of calls that lead to the exception site. You could extract  from that stack (the locals and globals of the stack are preserved), but that is not nearly as readable and easy and clear as just passing in . See the  module overview of internal objects to see what  and  objects support.If you want to access the caller when constructing the exception (so before raising the exception), you'd have to inspect the current call stack and extract  from the caller. Again, this is not intuitive or readable, and depends on implementation details of the Python interpreter. Passing in the rule explicitly is much clearer and more readable. If you do want to go this route, see the  method and the  module support for stack inspection.In other words, from the Zen of Python: Explicit is better than implicit.


Answer URL
https://docs.python.org/3/library/inspect.html#types-and-members
https://docs.python.org/3/library/sys.html#sys._getframe
https://docs.python.org/3/library/inspect.html#the-interpreter-stack
