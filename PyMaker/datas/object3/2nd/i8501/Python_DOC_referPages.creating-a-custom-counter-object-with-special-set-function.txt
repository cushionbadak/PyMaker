Natural Text
From Adding a single character to add keys in Counter , @AshwiniChaudhary gave an excellent answer to create a new  object with a different set() function: To allow user-defined char/str to append to the key, I've tried:But it's returning an empty Counter:That's because I'm missing the iter in the :[out]:But the value for  is wrong, it should be 2 instead of 1. Is using  to the  the right way to initialize the ?
As pointed out inFelix's comment,does not document how its  method adds keys or sets values, only that it does.Since it is not explicitly designed for subclassing, the wisest thing to do is not subclass it.Themodule exists to provide easily-subclassed abstract classes of Python's builtin types, including (, in ABC terms).So, if all you need is "a -like class"(as opposed to "a subclass of  that will satisfy builtins like  and ),you can create your own  that has-a , and then "middleman" the initializer and the three methods that  adds to the typical :Output (line-wrapped, for ease of reading):I added a keyword-only argument to the initializer, , to store the function that converts real-world whatevers to the "mutant" counted versions.Note that this likely means that  no longer stores "hashable objects", but "hashable objects that don't make the mutator barf".Also, if the standard library's  ever gets new methods, you'll have to update  to "override" them.(You could maybe work around that by usingto pass any unknown attributes to , but any keys in the arguments will be handed to the  in their raw, "un-mutated" form.Finally, as I noted before, it's not actually a subclass of , if other code is specifically looking for one.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.abc.html
https://docs.python.org/3/reference/datamodel.html#object.__getattr__
