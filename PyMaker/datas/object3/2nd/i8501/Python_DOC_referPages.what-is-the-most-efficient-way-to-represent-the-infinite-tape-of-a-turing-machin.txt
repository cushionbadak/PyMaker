Natural Text
A Turing machine manipulates symbols on an infinite strip of tape according to a table of rules. In my case entries on the tape can be either 0's and 1's (binary).  The tape starts off 'empty' with an infinity of 0's in both positive and negative directions. This tape gets written on based on the rules that the machine follows, potentially adding 0's or 1's to the unwritten edges.Since the tape values are binary is there a most efficient way to represent them in memory as the machine writes to the tape, adding new values to the left or right?  Obviously I don't need to represent the infinite zeros (unwritten tape), but I do need to expand the data structure as new values are added to the ends of the tape.A python list could do the trick, shown here inserting a 1 on the left:this outputs:Using list.insert does make it 23x faster:giving:Is there a more efficient way to represent the binary tape than using a  object?
Given that the tape is infinite at both ends, you will have to consider the  range of indices too. The best representation, IMO, would be a pair of lists - one for the non-negative range and the other for the negative range (with indexing reversed). As you move beyond the allocated range of the tape, you will simply have to append to the respective list (which, unlike prepending to a list, is a fast operation).A draft implementation (using an enhanced version of  from this answer):Output:


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
