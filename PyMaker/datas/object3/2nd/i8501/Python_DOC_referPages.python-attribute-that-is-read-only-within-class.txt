Natural Text
I have a class:I'will write some strategies which will inherit from . I'd like their methods to be able to read the attribute portfolio but not to modify it, nor its attributes.I read something about the  decorator, but it only works if I don't want the attribute (and its attributes) to be accessible from the outside, i can still modify the attribute (and its attributes) from methods 'inside' the object.Is there a way to make the attribute (and its attributes) 'read-only' except for the  method? Is my design wrong and should start over? I know it is up to the user not to modify "protected" attributes, but I would like to make it bullet proof. Any idea is well accepted, even if it requires a substantial change in the class design.Thanks
As opposed to other (commonly used) programming languages Python comes with a new approach regarding accessing class/instance members. For example, nothing is really private, the fields/methods that:start with an , are regular fieldsstart with  (and end with at most one ), are just name mangled, but they still can be accessed (even modified/deleted) from outside the classSo, at the end it's a matter of convention, and it relies that it will be followed by those who write code. Bottom line is there's nothing that would prevent an user gaining access to a class/instance's internals.Note: In other language it's possible too to access private members: there are methods officially supported (like Reflection ([Oracle]: Trail: The Reflection API) for Java), or not so officially supported (which require some "tricks" - e.g.: ing a  to a  with the same structure for C++). Nowadays, more and more languages tend to offer a way to alter an instance structure.Anyway, there is the so called Descriptor Protocol ([Python]: Descriptor HowTo Guide) which is one of the Python's most powerful (and also most misunderstood) features.Using descriptors (as a side comment, properties rely on them), I wrote a piece of code that achieves (on some degree) what you're asking for:Notes:I removed  from the private attribute's name () to avoid using the mangling that I was talking about, in my code (would make it more difficult to read)For Py27 compatibility, the classes inherit . If the compatibility isn't mandatory, the inheritance relation can be deleted (in Py3x it is by default)I added the  blocks to illustrate the behavior, in production they should be deletedAs I stated above, if anyone wants to alter this behavior, can


Answer URL
https://docs.python.org/3/howto/descriptor.html
