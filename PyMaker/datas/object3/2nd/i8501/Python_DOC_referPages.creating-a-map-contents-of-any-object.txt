Natural Text
In Python 3.6. What I'm trying to do is create a function that can accept any object and then generate a tree like contents. Similar to a book:My purpose is to use the numbers as a key for a technical readout, the number could also stand in for a more understandable ID number than id() generates. Because the objects I want to deal with are all types, I'd like the function to be recursive. Here is what I have so far: a is the object, n is the current number of recursion, lim is the recursion limit, prefix has to do with the object ID displayed.Here's the testing objectThe problem I'm running into has to do with strange revursive behavior with lists, I already made an exception for strings, because the string would register as an iterable made up of iterables, which would recurse indefinitely if I hadn't put in a limit. Now simple lists of numbers like [1, 2, 3, 4] will often list the number twice as if it breaks down into a one item list [1] and then reports on the number inside: 1.
You should have a look at the  module, which is part of the standard distribution. It solves this problem already, and so might serve as a basis for your code. (I can easily see, for instance, adding numbers by subclassing the  class.)This code:Produces this output:


Answer URL
https://docs.python.org/3/library/pprint.html?highlight=pprint#module-pprint
https://docs.python.org/3/library/reprlib.html
https://docs.python.org/3/library/reprlib.html#reprlib.recursive_repr
