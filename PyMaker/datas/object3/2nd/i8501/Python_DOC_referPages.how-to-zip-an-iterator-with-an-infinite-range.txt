Natural Text
This question already has an answer here:Python equivalent of Haskell's [1..] (to index a list)                    4 answers                I want to keep track of index as I iterate through an iterator. In Haskell, I could just zip the iterator with an infinite list of integers, . However, I'm not aware of functionality like this in Python. What's the easiest way to construct an iterator that works as below?(I know I could just make a variable  and manually increment it, that's not the point -- I want to know if it's possible to do this with iterators)
 was already given, and that's what most people would use.  But if you really want to start at 1, and get the integer second,  generates a lazy infinite sequence of integers:
You should use . Note that here  is 0-based:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.count
