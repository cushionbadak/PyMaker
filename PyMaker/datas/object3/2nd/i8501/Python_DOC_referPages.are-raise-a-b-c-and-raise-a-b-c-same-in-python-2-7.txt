Natural Text
Can somebody please explain if why or why not 'raise a,b,c,' and 'raise (a,b,c)' are same in Python 2.7. I tried to find information on how Tuples are treated from here and here but I couldn't establish if I could use the above expressions in place of one another. Here is some background.I have a Python 2 code which is having a lot of following statements Python 3 gives error on this syntax. Converting it to following gets away the Python 3 compiler error but I wanted to verify if intent remains same in both Python 2 as well as Python 3. 
Never pass a tuple to . It won't do what you expect.On both Python 2 and Python 3,  is documented to not accept a tuple. However, Python 2 has a weird code path in the  implementation where if the first (or only) argument to  is a tuple, it will be repeatedly replaced with its first element until Python reaches something that isn't a tuple. I have no idea why this is a thing, but it means that something likegets treated likeHere's a demo. Python 3 behaves more sensibly, erroring out because a tuple isn't an exception.The syntax for raising exceptions changed on Python 3. The Python 2 statementis nowor, if  is an instance of ,Unfortunately, these syntaxes are incompatible to the degree that you can't even write both and pick which one to run based on your Python version. You'll get a syntax error before your code even runs.The easiest way to fix this is with a compatibility library. For example, with :
 has never taken a tuple as a parameter. In Python 2, the syntax was such that it looked like a tuple, which is where your confusion is coming from. There was a drastic syntax change for Python 3, where the redundant exception class type was removed and the keyword  is used in place of a comma.In Python 2:Becomes in Python 3:


Answer URL
https://docs.python.org/3/library/exceptions.html#BaseException.with_traceback
https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement
