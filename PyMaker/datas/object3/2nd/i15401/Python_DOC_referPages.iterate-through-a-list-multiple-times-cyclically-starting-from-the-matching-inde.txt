Natural Text
I need to do the following in python.  I have a list of strings, , a string to search for, , and variable containing the number of elements to print, .  I want to iterate through  no. of consecutive elements of the , wrapping around to the front of  if necessary.  First I need to find the first element in  that has  as a substring.  I will then start with the first element of  after that matched element, and continue to iterate through a total of  consecutive elements of the , wrapping around if necessary.How would I do this?In this example I want to end up looking at the following 11 elements:
For our problem data:Algorithm 1: (Cycle & Slice)Most pythonic way is using the functions,  and  from the  module offcourse:Cycle through / Repeat the list infinitely ( function)Slice out / Pick the desired elements using start/stop indices from the repeated list ( function)Code:Algorithm 2: (Loop & Modulo Indexing)A more traditional way would be:Loop through the list  no. of times starting after the matched index, Cycle through the list elements using  indexing  Code:Algorithm 3 - Bad Implementations: (Rotate & Repeat)Many poor/ slow implementations are also possible e.g. using  functions, like , :Roll/ Rotate the  array so as to start it with the element at the matching index, Tile / Repeat the array so as to increase its length more than the desired  no. of elementsPick  no. of elementsCode: Output:Timing:iPython line magic function  shows that  is not surprisingly  than 2 and 3 respectively:Conclusion:Using  is the Fastest and Slickest way to go whenever you can use , , , , etc!
You can use  from , maybe in combination with  and .Output:
Hope this will help
Was annoid not getting it, so here is a beautiful solution.. :PIt assumes that each string in the list is unique, else you can just set the offset.
use a while-loop?


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
