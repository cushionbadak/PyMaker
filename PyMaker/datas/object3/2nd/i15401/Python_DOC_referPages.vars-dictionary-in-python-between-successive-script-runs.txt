Natural Text
I am trying to develop a simpler protocol for documenting the namespace of my work environment, before, during and after a script is run.  Apparently, the only things I have available in Python, is to access the vars(), locals() or globals() dictionaries before I run a script, then immediately after.  This is moderately successful, in the sense that I can capture the namespace additions (via their keys) but I have no way of knowing the order in which the various entities are added to the dictionary.  Short of manually sorting the list to produce a time sequential list, is there anything I have overlooked in trying to determine the order that the namespace is created.  Below is the results of a before and after snapshot of the vars() dictionary:Differences between steps are easy to collect via sets:The dictionaries are unordered as expected, but surely I am missing something that would enable one to gather namespace additions in sequential order.EDIT:With the additional suggestion from below, I tried this simple script to testThe results unfortunately are more confusing:('Zipped lists {}', '[(0, 1), (0, 3), (2, 3), (2, 1), (0, 1)]')['trace_names', '_seen', 'Xs', 'Ys', 'CmdTarget', 'Object', 'win32ui', 'default_scintilla_encoding', 'app', 'Queue', 'thread_test', 'WindowOutputDocument', 'WindowOutputDocumentParent', 're', 'window', 'WindowOutputViewScintilla', 'test', 'string', 'WindowOutput', 'scintillacon', 'docview', 'WindowOutputView', 'RTFWindowOutput', 'WindowOutputFrame',.......'ScintillaControlInterface', 'EM_GETSELTEXT', 'EM_EXSETSEL', 'dllid', 'EM_EXLINEFROMCHAR', 'EM_FINDTEXTEX', 'ScintillaNotification', 'os']If the def placement is in error, please advise.
The only way to track order is to use full-on tracing. You could do that with the  hook, but you'll have to move everything into a  function as you cannot attach a tracer to the current frame, only new frames:This traces the order of locals added in the next scope only; if any functions modify globals you could not determine their exact order other than in whole groups, by inspecting  from the tracer.


Answer URL
https://docs.python.org/3/library/sys.html#sys.settrace
