Natural Text
Doc's are lacking an example...How do you use  based on a key?Trying to insert based on key.puts insert at .From docs...a, x, lo=0, hi=len(a)       Insert x in a in sorted order. This is equivalent to  assuming that a is already sorted. Keep in mind that the O(log n) search is dominated by the slow O(n) insertion step.Sample usage:I want to put  after  on sorted list in  using . Right now  puts  at ...because I am not using the keys to do insert...docs don't show to do inserts using the keys.
This does essentially the same thing the  does that the  documentation mentions in the See also: section at the end which supports a key-function.What's being done is a separate sorted  list is maintained in parallel with the sorted  list to improve performance (it's faster than creating the keys list before each insertion, but keeping it around and updating it isn't strictly required). The ActiveState recipe encapsulated this for you within a class, but in the code below they're just two separate independent lists being passed around (so it'd be easier for them to get out of sync than it would be if they were both held in an instance of the recipe's class).Follow-on question:        Can  be used?No, you can't simply use the  function to do this because it wasn't written in a way that supports a key-function—instead it just compares the whole item passed to it to insert, , with one of the whole items in the array in its  statement. You can see what I mean by looking at the source for the  module in .Here's the relevant excerpt:You could modify the above to accept an optional key-function argument and use it:...and call it like this:Actually, if you're going to write a custom function, for the sake of more efficiency at the expense of unneeded generality, you could dispense with the adding of a generic key function argument and just hardcode everything to operate the way needed with the data format you have. This will avoid the overhead of multiple calls to a key-function when doing the insertions....called this way without passing keyfunc:
If your goal is to mantain a list sorted by key, performing usual operations like bisect insert, delete and update, I think sortedcontainers should suit your needs as well, and you'll avoid O(n) inserts.
You could wrap your iterable in a class that implements  and . This allows you the opportunity to use a key with . If you set up your class to take the iterable and a key function as arguments.To extend this to be usable with  it's required to implement the  method. The problem here is that if you do that is that  will try to insert your key argument into the list containing the objects of which the the key is a member. An example is clearerSee how in my  method I had to make it specific to the timetable dictionary otherwise  would try insert  where it should insert ?Ways round this could be to construct a dummy object for the comparison, inherit from  and override  or pass some sort of factory function to create the object. None of these ways are particularly desirable from an idiomatic python point of view.So the easiest way is to just use the  with , which returns you the insert index and then do the insert yourself. You could easily wrap this in a dedicated function.e.g.In this case ensure you don't implement , so you will be immediately aware if you accidentally pass a  to a mutating function like  which probably wouldn't do the right thing.To use your example data
Add comparison methods to your classSometimes this is the least painful way, especially if you already have a class and just want to sort by a key from it:Output:See also: "Enabling" comparison for classesTested in Python 3.5.2.


Answer URL
https://docs.python.org/3/library/bisect.html#module-bisect
