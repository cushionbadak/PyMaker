Natural Text
I am now starting exploring Python, and was testing how arguments can be passed to a script with "argparse".The way I wrote a sample script was as following, where arguments passed through flags -i and -o are compulsory and flag -u is optional:Running this script:prints:I understand the printing statement in the if conditional (5 is higher than 2), however, after reading the argparse documentation (https://docs.python.org/3/library/argparse.html) I still don't quite understand why -i and -o flags are counted as arguments. This behaviour seems to be quite different from e.g. perl Getopt::Std, which I'm more used to.So, the question is what is the best way of parsing arguments in Python and to evaluate the presence of mandatory arguments (without using required=True)
It gives you 5 because  contains the raw input passed to python as arguments (the script name and 4 arguments). You can see  as an abstraction for this, so once you use it, you can forget about . In most cases it is better not to mix these two methods.  its a nice way to handle arguments, I don't quite get why you don't want to use the   option when that's exactly the way to go. Another alternative is to parse the  yourself (regex maybe?) and drop  altogether.
There's a Python  which probably is similar to the Perl one (assuming both are modelled after the C/Unix version).https://docs.python.org/2/library/getopt.htmlIn your code,  is a list of strings from the command line (as interpreted by the shell and interpreter).  It is the raw input for any of the parsers ('getopt', 'optparse', 'argparse').  And it is available for your parsing as well.  When learning it is a good idea to include a line.   uses this list.   is used as  attribute (in the default usage), while  (the rest) is parsed according to the rules you define with .   For testing I often like to use  with a custom list of strings, e.g.With your definition I'd expect to see something like:The parser returns an object (type ), which has attributes defined by your arguments.  Values are usually accessed with expressions like , .  The docs also show how you easily express this as a dictionary.By long standing UNIX conventions, arguments flagged by strings like '-i' are options, that is they are optional.   generalizes this concept by letting you specify a  parameter.Other arguments are positionals.  They are interpreted according to their order.  And as such they are normally required.  What  adds is the ability to define those positionals, such as type, nargs, etc.  With  they are optional.  Many of the  values are similar to regular expression characters (e.g. +?*).  In fact  uses a form a regular expression parsing to allocate strings among arguments.  I'd refine your arguments thus (taking advantage of various defaults)If  and  were required, I could change them to:Now  and  are positional arguments, as in By using  I can look at the object produced by this statement.producesThis tells me that  is a  object (a subclass of ).  It also displays a number (not all) of its attributes, ones that define its action.  A positional, on the other hand, has values like these:It may also be instructive to look at  and , which are respectively False and True.   is an  attribute that is not routinely displayed, but is, never the less accessible.I've pulled all these test values from a parser defined in an interactive shell ().  It's a great way to explore Python and modules like .
After reading other related posts it seems that the best way to do this is as was suggested by @Rufflewind and inspect the args itself:


Answer URL
https://docs.python.org/3/library/argparse.html
