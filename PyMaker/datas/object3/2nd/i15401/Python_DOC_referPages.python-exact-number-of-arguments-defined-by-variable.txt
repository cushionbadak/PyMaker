Natural Text
I am creating a method that constructs an anonymous method to return a function of multiple variables e.g. f(x, y, z) = b. I want the user to be able to pass a list of variables:I then want the returned anonymous function to take exactly  arguments (either positional based on their list index or keyword based on the string in the list). I know I can use  and check the length, but this seems inelegant. Is this possible? How might I do this?Here is an example of how I did it for one variable (where  is a from module ):And here's how I did it by just checking the length of the  passed:EDIT: I am taking expression and variables from user input, so a safe way to do this would be best. 
If you can use Python 3 then the newly introduced(Python 3.3+)  and  can make your code very clean(PEP 362 - Function Signature Object). These come very handy in decorators as well:Demo:Will produce useful error messages for user as well:Function signature for introspection purpose:
Something like this is definitely possible. I've written a solution using . It's a bit more verbose than the other solutions, but the returned object is a function that works without any intermediary compilation steps such as with the  solutions.You could choose to exclude the second names check if you can trust the source of these multi-lambda expressions, or you can add exceptions for certain names you think are fine. eg. , , , etc...
I don't think you can do exactly what you want to (generally define functions with specific numbers of arguments).But simpleeval has variable replacement built in: https://pypi.python.org/pypi/simpleeval#namesSo the lessons to be learned:Look for other ways to get what you want.There isn't too much of a difference between raising an exception when calling a function (due to the interpreter finding the wrong number of arguments) and raising an exception inside.
I find using a class object instead of standard function should be better.
You could parse the expression into AST. You can then walk through the AST to evaluate the expression. This can be safe, provided you explicitly list those node types which you wish to handle.For example, using J.F. Sebastian's AST evaluator, you could do something likeWhich can be used like this:


Answer URL
https://docs.python.org/3/library/inspect.html#inspect.Signature
https://docs.python.org/3/library/inspect.html#inspect.Parameter
https://docs.python.org/3/library/stdtypes.html#str.translate
