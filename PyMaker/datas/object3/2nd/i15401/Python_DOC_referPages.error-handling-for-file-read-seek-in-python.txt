Natural Text
I'm parsing a binary file format and I want a better way to check for the end of a file while performing a read or seek. Basically, when I f.read(8) on a file f, I want to know if less than 8 bytes are returned without having to check the length of the returned value. Similarly, if I call f.seek(8, 1), I want to know if I didn't actually seek 8 bytes. Is my best bet to create wrappers for these functions?
Checking the length of the string returned by  is simple, clean, and efficient. All of Python's collection objects (strings, lists, tuples, dicts, sets, etc) store their length as an attribute, so fetching the length is a very cheap and fast operation.However, testing that data is correct before you operate on it can be tedious and cumbersome. And if the data is almost always correct such testing is inefficient. This coding style is called Look Before You Leap or LBYL. In contrast, a popular coding style in Python is It is Easier to Ask for Forgiveness than Permission or EAFP. In other words, rather than testing the data and then deciding how to proceed, simply assume that the data is correct, and raise an exception if problems arise.EAFP code is generally easier to implement, read and maintain than LBYL code. And in Python  is very efficient, and often faster than equivalent  code, so use of exceptions is encouraged. See the Wikipedia article on Python syntax and semantics.  So rather than testing that the data is the correct length before attempting to unpack it you can just put all your  calls into a  block and bail out if the exception is raised. This approach means you don't need to worry about whether each of your  or  calls take you past the end of the file.If you do want to stick with the LBYL approach you could write a wrapper for  but it won't be very efficient, since there's no simple way to tell if you seek past the end of the file. So such a wrapper would add extra overhead to every  call, which wastes CPU time if most of those calls don't take you past the end of the file. 
Try this:8 can be replaced with a variable. I don't see why you wouldn't compare lengths.EDIT: Here's the entire thing.


Answer URL
https://docs.python.org/3/glossary.html#term-lbyl
https://docs.python.org/3/glossary.html#term-eafp
