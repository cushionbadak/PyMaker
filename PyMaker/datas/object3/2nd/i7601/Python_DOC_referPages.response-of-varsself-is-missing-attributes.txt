Natural Text
I have defined a class and need most of its attributes handed over to a function for processing. So I thought instead of creating a huge mess and naming them all I'd do  and hand over a nice dictionary with all attributes and values. But I found that almost all of the attributes are missing.I have halted the code in the debugger and ran a few tests:These are 5. While I am expecting about 20 attributes, as per  definition of my class here:I can see the attributes in the debugger window and can access them directly. I have read the manual of vars() and could not find any switches. Interestingly,  shows all attribute-names, but no values. So I cannot use that. But I thought vars and dir should show the same?I guess I'll build a workaround, but I really want to understand what is happening here. Can you please help?
 returns you the  namespace of an instance. But  attributes are not stored in the  namespace. That's their whole point.Instead, Python creates dedicated pointer slots in the instance memory structure for each value, and uses descriptors on the class object to retrieve those values. So  is translated to  to return that value.From the  documentation:The  declaration takes a sequence of instance variables and reserves just enough space in each instance to hold a value for each variable. Space is saved because  is not created for each instance.[...] are implemented at the class level by creating descriptors (Implementing Descriptors) for each variable name. Note that having a  anyway is usually a sign you forgot to make a subclass use  for their attributes, or you inherited from a base Python class that didn't use  itself. Proper use of  should result in instances with no  namespace; their goal is to reduce memory by avoiding the sparse hash table required for a dict (which can waste space).From the documentation again:When inheriting from a class without , the  attribute of that class will always be accessible, so a  definition in the subclass is meaningless.[...]The action of a  declaration is limited to the class where it is defined. As a result, subclasses will have a  unless they also define  (which must only contain names of any additional slots).If you wanted to list all available instance fields, you'd have to include the  enumeration from the class, and not just look at :


Answer URL
https://docs.python.org/3/library/functions.html#vars
https://docs.python.org/3/reference/datamodel.html#slots
https://docs.python.org/3/reference/datamodel.html#descriptors
