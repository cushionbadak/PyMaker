Natural Text
I have run this list copying experiment and found one of the times to be much quicker than the others, as far as I can tell it does copy the list, unless someone can explain otherwise?results:To prove  on left is copying?prints:Can anyone explain what's going on here?
By using  in an assignment you have expanded the left-hand side list to have the same number of elements as the right-hand list. The rest of your tests then re-use those extra elements;  is no longer empty!In other words, for everything but the first iteration, that copy operation doesn't have to allocate more indices for the list. That makes it faster.You need to test with an empty list on the left-hand side each time. Use the  module to run proper time trials. Use suitably large inputs:Allocating more space doesn't actually take all that much time; you only see the effect for small lists:(note, the iterations have been increased from 1 million to 10 million here).For large lists, the difference is mostly moot:In this specific test run starting with an empty list was actually slightly faster; the difference is mostly noise however, re-running these two tests have the timings trade places regularly.
 does not need to allocate memory for the list , since it has already been allocated by the previous operation and the existing list object is being reused. The others create a new list.


Answer URL
https://docs.python.org/3/library/timeit.html
