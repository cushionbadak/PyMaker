Natural Text
What exactly happens, when yield and return are used in the same function in Python, like this?Is it still a generator?
Yes, it' still a generator. The  is (almost) equivalent to raising .PEP 255 spells it out:Specification: ReturnA generator function can also contain return statements of the form:Note that an expression_list is not allowed on return statements in  the body of a generator (although, of course, they may appear in the  bodies of non-generator functions nested within the generator).When a return statement is encountered, control proceeds as in any  function return, executing the appropriate finally clauses (if any  exist).  Then a StopIteration exception is raised, signalling that the  iterator is exhausted.   A StopIteration exception is also raised if  control flows off the end of the generator without an explict return.Note that return means "I'm done, and have nothing interesting to  return", for both generator functions and non-generator functions.Note that return isn't always equivalent to raising StopIteration:   the difference lies in how enclosing try/except constructs are  treated. For example,because, as in any function, return simply exits, butbecause StopIteration is captured by a bare "except", as is any  exception.
Yes, it is still a generator. An empty  or  can be used to end a generator function. It is equivalent to raising a (see @NPE's answer for details).Note that a return with non-None arguments is a  in Python versions prior to 3.3. As pointed out by @BrenBarn in comments starting from Python 3.3 the return value is now passed to From PEP 380:In a generator, the statementis semantically equivalent to
There is a way to accomplish having a yield and return method in a function that allows you to return a value or generator.It probably is not as clean as you would want but it does do what you expect.Here's an example:


Answer URL
https://docs.python.org/3/library/asyncio-task.html
