Natural Text
I am learning from Jacob Perkins's book.I do not understand this exampleNow we haveWhat does this list comprehension serve for?What does repl stands for?
 stands for . It is just a variable name;  has no special meaning.The (incomplete) code you have provided is presumably going to make a bunch of replacements on a given string. It will replace  with ;  with ;  with ; etc.The more complex replacements, such as  are using back-references to capture part of the matched pattern, for use in the replacement.The code:  is using  to compile the regular expressions.
repl is just a variable referring to the 2nd part of the  so lets say you have a list with  and you want to create a  to make a new  by adding  to the 2nd number in each tuple, you would do something like: 
I qoute:Python supports a concept called "list comprehensions". It can be used to construct lists in a very natural, easy way, like a mathematician is used to do. A list comprehension can be with a condition. List comprehensions can have multiple conditions.The general format for a list comprehension with a if condition is this,You can also have an if..else in the comprehensionNOTE: Your iterable can be list,tuple,set,string,...etcTo make things clear consider this simple example,v and x are two lists.Now suddenly you decide I want a list  which has items from v but not in x. Hmmm... How to do that? Take a look below.Notice how I've used . I just created that inside the list comprehension. Similarly  just a variable name. Meaning Why I told all that? You'll get that in a moment.And now we come to  But You see here we compile the  and then find a match. In the former we are just giving it as a parameter to .Note:replacement_patterns --> patterns(Now  and  both are aliases to your )Both does the same however the, So coming to your confusion,This list comprehension gets all tuples from your list of tuples known as ? Initially:and so on  for every tuple items. And  this is converted to:So basically your list comprehension converts the 
Reference:https://www.python.org/dev/peps/pep-0202/https://docs.python.org/2/tutorial/datastructures.html#list-comprehensionsTo help understand:


Answer URL
https://docs.python.org/3/library/re.html#match-objects
https://docs.python.org/3/library/re.html#re-objects
