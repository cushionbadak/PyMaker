Natural Text
Cython allows to use C and C++ libraries by wrapping their functions and classes. Two of the libraries I would like to use are SFML and Box2D. They define separate Vector2 classes. Would it be possible to write one Vector2 Python wrapper for both of these libraries (and potentially more)? My goal is to have single Python type of Vector2 when interacting with different libraries.Do someone already did something similar? This would simplify things and unify my Python API. I've already wrapped parts of SFML but other than that I'm new to Cython.For the reference SFML's Vector2 looks like this:And Box2D vector:
OverviewThe general idea is three steps:Write declarations for your typesWrap each class individually with an identical interfaceWrite a generalized vector wrapperDeclarationsFirst you need a Cython declaration for the wrapped types. An example (very minimal) is as follows.InterfaceNext, you need to wrap these into Python wrappers. You need to make sure they have identical interfaces, so one can be used like another. The Python data model is your friend. A very simple example is:Generalized VectorFinally, you need a simple wrapper class, which binds one of the many vector types and performs the right operation on the class. Since Python is not statically typed, and since the interfaces for each vector you wrapped are identical, this is easy: just initial the correct vector in .ThoughtsThis is a pretty bad example, since typically you implement  (multiplication) in terms of  (in-place multiplication), but it gets the general idea across. There are likely typos in this code, I don't have access to a machine to compile it right now.


Answer URL
https://docs.python.org/3/reference/datamodel.html
