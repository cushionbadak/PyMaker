Natural Text
In Python operator overloading is achieved by defining special method in the class. For example, to use  operator, define  method. There are many other special methods for different operators. In addition to that, all these special operators comes from  class which is the base class for every other class. That means every class inherits special method like , ,  and so on.Now Consider the following code.Output:But when I try to access  using  object, it gives me following error:Why is that ? Does that mean  method doesn't inherit from the  class ? What's exactly going on ?
The  function is not an attribute of . It is a function found in the operator module. You can provide your own implementation of this by implementing your own version of these methods in your class. This is also explained in the documentation here. Observe:Furthermore, even if you look at what is provided to you from , you will see: There is no implementation of the  you are looking to override. These operators are overridable by declaring them yourself in your class.To provide some context around why operators like  (and other comparison operators) operator might be implemented as part of object and not  as an example, is because, per the documentation as well (here), these equality operators are rich-comparison methods and they provide their own implementation in the base object. If you take a look at the implementation of the  class, you will see a docstring mention of what will be returned when you actually use these operators with instance objects:As an example, you can see it mentions that when you try to perform a ">" with instances that inherit from object, they will use that implementation.  


Answer URL
https://docs.python.org/3/library/operator.html#operator.add
https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types
https://docs.python.org/3/reference/datamodel.html#object.__ne__
https://docs.python.org/3/reference/datamodel.html
https://docs.python.org/3/library/functions.html#dir
