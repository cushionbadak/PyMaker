Natural Text
if there is a directory .and I know that it is a Python package.so, how can i import this module by just knowing its path.means that, i hope that code is worked:the only way i knew is that, adding  to but it maybe incur some problem:if i add  to and if there a dir  in path .then the official pytest package would not work.i try  yet.but it seems that  can just import a file as a module, not a path.so, i try it:orboth of them are not work.so, is there any other way to do what i want?oh, i am using Python3.6UPDATED AT 20170628(NOTICE: there is a  in folder )all solutions i known is that import module from a single file.if there is  file in folder then, add  to   or  (whatever) is worked, but not the what i wanna ask is how to import folder (or directory) as a module.for my example, folder  is consided as a module. i wanna use  not 
Here are five different ways of how to accomplish that task.For the following considerations I refer to Python 3.5+.Register a custom Python uses finders for when importing modules. If a finder knows how to deal with a particular requested module then it returns a corresponding module spec and otherwise . Python has three different finders already registered which can be found in :The first one handles built-in modules, the second one frozen modules (some kind of "self-contained" Python scripts, see the wiki) and the last one handles everything which can be found on . So if we modified  by appending  then it would be this finder which provides the corresponding spec.Instead of modifying  we can register our own finder which uses the functionality of :Here we explicitly tell the  to look into the  when importing modules.We can register the finder as follows:Then we can import the package  which will be found by the :For more information see PEP-302.Extend We can modify  in order to put the required package on the path:Appending this directory to the path won't block "existing" (e.g. built-in packages) with the same name due to the order of searching that is performed during an import.Add a local module containing a You can add a local module  (in fact you can add it to any location which is on the Python path) which contains the following code:Then you can perform  statements which will refer to the package that you referred to with the  variable:If you want to  you can mimic this by applying the same method one level up in the directory hierarchy. Add a local module  (for example) with the following code:Then you can dowhich is very much similar  if  was on the path (provided that no other module named  has precedence on the path).Create a symlink pointing to the packageYou can create a symlink that points to the package's directory. For example on Unix:Then you can import the package via , given you're executing this in the directory where you placed the symlink.The symlink can also be created within your program viaInstall the package via You can add a  script which contains (for example) the following code:Then you can install the package via  and you can readily import it in your other Python files:By using  you can keep your installed packages in a clean state.


Answer URL
https://docs.python.org/3/library/importlib.html#importlib.abc.MetaPathFinder
https://docs.python.org/3/glossary.html#term-finder
https://docs.python.org/3/glossary.html#term-module-spec
https://docs.python.org/3/library/importlib.html#importlib.machinery.PathFinder
https://docs.python.org/3/reference/import.html#searching
https://docs.python.org/3/library/venv.html
https://docs.python.org/3/reference/import.html#searching
