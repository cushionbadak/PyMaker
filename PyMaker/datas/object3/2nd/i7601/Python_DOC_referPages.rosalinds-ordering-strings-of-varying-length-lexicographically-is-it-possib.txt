Natural Text
I tried to solve another of Rosalind(http://rosalind.info/problems/lexv/) problems by myself, however unfortunately I have to ask you for help.Here is my approach:First of all; function which creates all possible substrings of input string with length of n:Then main function which creates all combinations of current string with varying length:The result of my code for data from Rosalind's 'Sample input' is:My questions:a) Is it possible to order my result as it should be (Rosalind's result)?b) Is my approach correct? If not, could you give me some clue (but not the solution for this problem - I'd like to beat it by myself).Very thanks!
Generating possible substringsFor the generation of possible substrings, I would look deeper into the  module. With  and  you can easily make a one-lines that returns all combinationsSortingfor the sorting, I would replace the letters themselves with s, keeping this translation table in a .  and  are your friends here.Now you have a list of tuples of ints, which you can sort. From what I can tell, the standard sorting order of tuples is useful.When you have a sorted list of tuples, you will just need to do the backwards translation to stringssorted(key=)Another option is to use standard string sorting, and as  argument to , passing a function (or lambda) which replaces each letter in the string to it's place in the alphabet (the )This can be done with ,  and a  comprehension


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.translate
