Natural Text
I would like to know how to format this case in a Pythonic way with f-strings:The problem is that  cannot be used inside an f-string.Expected output:
You can't. Backslashes cannot appear inside the curly braces ; doing so results in a : This is specified in the PEP for f-strings:Backslashes may not appear inside the expression portions of f-strings, [...]One option is assinging  to a name and then  on that inside the -string; that is, without using a literal:Results in:Another option, as specified by @wim, is to use  to get  returned and then join there. Yet another, of course, is to  beforehand and then add the name accordingly:which results in the same output.Note:This is one of the small differences between -strings and . In the latter, you can always use punctuation granted that a corresponding wacky dict is unpacked that contains those keys:(Please don't do this.)In the former, punctuation isn't allowed because you can't have identifiers that use them.Aside: I would definitely opt for  or , as the other answers suggest as an alternative. The options I've given only apply if you must for some reason use f-strings. Just because something is new, doesn't mean you should try and do everything with it ;-)
You don't need f-strings or other formatters to print a list of strings with a separator. Just pass the  keyword argument to :Output:That said, using  here would be arguably simpler and more readable than any f-string workaround:
The other answers give ideas for how to put the newline character into a f-string field. However, I would argue that for the example the OP gave (which may or may not be indicative of OP's actual use case), none of these ideas should actually be used. The entire point of using f-strings is increasing code readability. There is nothing you can do with f-strings that you cannot do with . Consider carefully whether there is anything more readable about this (if you could do it): ...or this:...or this:vs. this: The last way is at least as readable, if not more so. In short: don't use a hammer when you need a screwdriver just because you have a shiny new one. Code is read much more often than it is written. For other use cases, yes, it's possible the  idea or  idea may be appropriate. But not for the one given. 
You can't use backslashes in f-strings as others have said, but you could step around this using  (although note this won't be  on all platforms, and is not recommended unless reading/writing binary files; see Rick's comments):Or perhaps in a less readable way, but guaranteed to be , with :


Answer URL
https://docs.python.org/3/library/os.html#os.linesep
https://docs.python.org/3/library/functions.html#chr
https://docs.python.org/3/library/os.html?highlight=linesep#os.linesep
