Natural Text
I'm just trying to get a very basic websocket connection over internet. The code seems fine - because it works when connecting to localhost - but for some reason fails when I try to use it over the internet. I'm using the websockets library, and my server looks like this:and the client looks like this:So the issue is that the client above works fine, until I run the server on my Ubuntu machine (and I've made sure to forward port 6969 to that machine) and try to connect over the internet. Hostname resolution is working fine, because I can  in to start the server, but trying to connect to the websocket always shows me the error message:or similiar for other browsers. Also, in case anyone was wondering, the logger isn't outputting anything useful (since the connection is failing the server isn't doing anything).
Your line:provides a specific address on which the websockets server listens. Your server will only listen on that address; any requests to any other address will never be seen.From https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.create_server :The  parameter can be a string, in that case the TCP server is bound to  and . The host parameter can also be a sequence of strings and in that case the TCP server is bound to all hosts of the sequence. If  is an empty string or , all interfaces are assumed and a list of multiple sockets will be returned (most likely one for IPv4 and another one for IPv6).You have bound your webserver to , which is a special address that only ever refers to the local machine. This address is also known as . No other machine can ever connect to your .The solution is to provide an empty string or  (the default value). In this case, your web server will listen for requests sent to any address.
WS server that sends messages at random intervalsimport asyncioimport datetimeimport randomimport websocketsasync def time(websocket, path):    while True:        now = datetime.datetime.utcnow().isoformat() + 'Z'        await websocket.send(now)        await asyncio.sleep(random.random() * 3)start_server = websockets.serve(time, '127.0.0.1', 6969)asyncio.get_event_loop().run_until_complete(start_server)asyncio.get_event_loop().run_forever()try this this will defnetly work


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.create_server
