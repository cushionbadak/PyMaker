Natural Text
I'm trying to get maximal value from a list object that contains nonetype using the following code:But I received this error messageClearly  doesn't work with . What's the alternative way to get max value from list objects that contain  values?
First, convert to a numpy array. Specify , and all those s will be casted to  type.Now, call :To return the max as an integer, you can use :This approach works as of .
One approach could be -Sample runs -Based on , it seems we could have an input list of all s and for that special case, it output should be . For the otherwise case, the output would be the scalar  value. So, to solve for such a scenario, we could do -
You can use a simple list-comprehension to first filter out Nones:
If you want to be more specific to take the  of numbers only you can use  and the numbers abstract base class:Or, a generator version of this:Since this is Python 3, your error is the stricter comparison rules under Python 3:Where Python 2 does allow unlike object comparisons:So when you create a numpy array you are getting an array of Python objects:So numpy is using the underlying Python 3 comparison rules to compare an array of Python objects which is your error:So you either need to filter out the  when you create the numpy array:Or convert it to a numpy type that supports  (and  does not have ):But in this case,  is the max value:So use :
In python 2Simple in python 3 onwardsHowever above code also filters out 0 if it's there in list. So working code will be as below
use filter to get rid of all the  of the We are taking advantage of the fact that, filter method takes two parameters. The first one is a function and the second one is an Iterable.This function must return an element of the Iterable(provided as the second argument) which gets removed from the Iterable. We are passing None as the first argument thus all of the objects that are false (in this case ) of the Iterable () gets filtered out.Edit:  This won't remove 0 from the LIST
Here is what I would do:It is superficially similar to the other answers, but is subtly different in that it uses a generator expression rather than a list comprehension. The difference is that it doesn't create an intermediate list to store the result of the filtering.
Pandas DataFrame have their own function, return the index of max value by ignoring NaN value.Look this URl for more info.


Answer URL
https://docs.python.org/3/library/functions.html#filter
