Natural Text
I have a small program to track monthly balances.  This worked fine as is, and then I added in the section to write to a .txt file at the bottom.  I did some searching but can't figure out a way to make it work.  Basically I want to keep appending to this test.txt file.  Every time I enter a new month/account/balance I want that appended to the file.The alternative is to append to the test.txt file after 'exit', so it doesn't do it every loop.  Not sure which way is more efficient***EDIT****This updated code now creates test.txt file but the file is blank after each loopSecondary question - I have heard this would be better off using a Class for this, but I haven't any idea how that would look.  If someone wants to demonstrate that would be awesome.  This isn't homework, this is strictly learning on my own time.Any ideas?  Thanks
Try this code (use -1 to exit):
The problem with your original code is that  doesn't return anything, yet you attempt to perform operations on its (nonexistent) return value.Here is a version of your program made using classes, and with a few corrections:Some explanation regarding the class: The  class has 3 fields: , , and . These fields are defined in the constructor (). The class also has a method, , which I use to get the string representation of each instance.Over all, the following changes have been made:Create an Account class, which serves as the template for the object which holds the data of each account.Use a loop to print accounts and write them to the file.Turn  into lowercase before checking to see if it is equal to "exit". This is a minor change but a good habit to have.Removed , as it is unnecessary when using a  statement.Created a custom string representation of each instance of , consistent with what you would otherwise get.That last one is achieved via defining the  method in the account class. There is nothing special about it, it is merely what we use to get the string representation. A better but quite more advanced way to achieve that is by overriding the  and  methods of the base object. These are essentially hidden functions that every class has, but which python defines for us. The purpose of these two specific ones is to give string representations of objects. The default code for them doesn't produce anything meaningful:However, by overriding them, we can use  on instances of , and we will get a string representation in the exact format we want. The modified class will look like so:This also eliminates the need to loop through  when writing to the file:Turns into:This wouldn't have worked before, as  would have given us the gibberish data you saw earlier. However, now that we have overridden the methods, it works just fine.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__init__
https://docs.python.org/3/reference/datamodel.html#object.__str__
https://docs.python.org/3/reference/datamodel.html#object.__repr__
