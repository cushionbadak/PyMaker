Natural Text
Suppose I have two (or more) functions. One is higher level, processing stuff by calling different other functions. If one of these functions fails (e.g. Math error), I want to "abort" not only that function, but also the ones that called it. In my case I need this to escape an error and avoid having the rest of all calculations done, without quitting the whole process (which would also terminate my GUI). Instead, I want the script to continue running, but back on the upmost level. This is an abstraction of my original problem:Initializing  with the value 0 would cause a crash in  when 10 is divided by . So I first make sure that  is different from 0. If it's not, the function is aborted by calling return. Now  wants to continue with the doubling of the result of  which, in the case , is "None" and there we go with another crash.Of course, what I can do is inserting the linebefore doing . But in my real case, there is not just one extra level, but 2 or even 3 and there are many different functions that are called. I want to avoid checking each and every output of the function for errors.So my question is: Can I somehow go all the way back to the first function call and skip the ones that were in between? Something like a "deep return"?
Exceptions were invented to handle the situation you describe. So, for example:
how about try/catch?
Initializing x with the value 0 would cause a crash in levelB when 10 is divided by x. So I first make sure that x is different from 0. If it's not, the function is aborted by calling return. That's a good summary but you reached the wrong conclusion. You shouldn't , you should raise an . Then you can use a ,  clause wherever you want to handle that:Even better would be to just do the division and catch the Exception raised there:


Answer URL
https://docs.python.org/3/glossary.html#term-eafp
