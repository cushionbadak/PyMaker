Natural Text
I have the following project structureI would like to import data with the  file from an external source. I use the  file to specify the absolute paths of the data with:The respective paths should be available for all tools in the  package (i.e.  and ). Furthermore, the program should identify the os and choose the path structure accordingly.I know how to set the paths with the yaml file usingand I know how to discriminate between the os withbut I don't know where to place these code snippets. I don't think that it is appropriate to use it in the  file. On the other hand I consider it inappropriate to specify a new .py file. What is a good design structure for this problem? Where should a specify absolute file paths? Is my ansatz a step in the right direction?Thank you in advance.
In this case, you can make it relative to the home directory, so you can have  and  (Which should be equivalent on both platforms). You can expand this with In any case, having two different setup things might be overly confusing, and you should expand  and  and  anyways to make setting it up easier and run as expected.Your other alternatives include:Reading from environment variablesWriting it in  (You should probably allow some way to change where the config file is as  might put it in a write-protected location)You could also not have a default at all, and when not given either make a default based on  or raise an error message telling the user to set it.
Let's identify two different type of files/data.Files/data written by the user or for the user during installation/deployFiles/data written by the coderIt can be okay to have absolute paths in files/data defined by the user or generated by the program executing on the user machine.Absolute paths are intrinsically more fragile than relative paths, but it's not that bad in the first case.In the second case you should never use absolute paths. I see that you are even using two different paths for windows and linux. You don't have to do that and you shouldn't.In Python you have things such as  to find the user path, or packages like appdirs. You want to be cross-platform as much as possible, and with Python is almost always possible.


Answer URL
https://docs.python.org/3/library/os.path.html#os.path.expandhome
