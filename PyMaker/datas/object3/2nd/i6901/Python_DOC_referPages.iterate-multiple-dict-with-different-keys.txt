Natural Text
The goalI am trying to iterate two s at the same time knowing that they have some keys in common (for sure), but some of them are not (possibly). What is more the same keys could (rarely, but still) be ordered differently. Another issue is that s can have different lenght. In my case the keys are all numerical.Atempted solutionsExample s:After reading some answers to iterating multiple s I tried ing the two s:but this 'cuts' the longer , also this iterates over keys of each  seperately instead of keeping them consistent (always , even if  would return )Given that in my case all keys are numerical I tried the following:which works (I can pass  as  key), but:Doesn't iterate s per se, just generates numbers to try to match to given s.Iterates over values even if they are non existent keys in both s ( is ).This works only if keys are numerical.Doesn't seem very pythonic.The quesstionHow do I iterate two (or more) s (keys) given that it is enough for the key to exist in at least one of them?ConditionsSolutions using standard libraries are preferable.You can assume  keys are numerical but a more general solution is preferable.Iteration order is of no importance but additional information on the matter is a bonus.I'm iterating two s.Both s should remain unaltered.I'm using python 3.6.1
You can iterate over common keys:Or union of keys:You choose. Use  in Python 2.
I would extract keys from both dicts (), join the lists of the keys, remove duplicates (make it ), then iterate over the dicts using this new set of keys.
You can use , to iterate till the longer collection, where  iterates till the smaller collection. The thing to look at here is the use of ,  because using  will cause KeyError for unique keys. You can however, add an optional default value as second parameter inside .Hope this helps.
Assuming that the values are consistent between the various dictionaries you can use  to iterate over multiple dictionaries:Output:Or more simply:As mentioned above, this is fine if the values for duplicated keys are the same. Where there is variation the value from the first chained dictionary will be returned.


Answer URL
https://docs.python.org/3/library/collections.html#collections.ChainMap
