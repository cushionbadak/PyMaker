Natural Text
With the file super5.py:we can do the following:To me, this doesn't make sense, because when I execute , I expect the following to happen:The first line of  of  is executed and thus  is output.The second line,  is executed, which first takes us to  of .In  of ,  is first output, and then,  of  is executed due to the  call in  of , and  is output. of  is executed in a fashion analogous to 3.As you can see, what I expect to see is:Why am I wrong? Is python somehow keeping track of the number of  calls to a particular superclass and limiting the execution to 1?
No, Python keep a track of all super classes in a special  attribute (Method Resolution Order in new-style classes):You get:So, when you call , it follow this list in order.See this question: What does mro() do?.Everything is explained in the official document in the chapter "Multiple Inheritance".For most purposes, in the simplest cases, you can think of the search for attributes inherited from a parent class as depth-first, left-to-right, not searching twice in the same class where there is an overlap in the hierarchy. Thus, if an attribute is not found in DerivedClassName, it is searched for in Base1, then (recursively) in the base classes of Base1, and if it was not found there, it was searched for in Base2, and so on.In fact, it is slightly more complex than that; the method resolution order changes dynamically to support cooperative calls to super(). This approach is known in some other multiple-inheritance languages as call-next-method and is more powerful than the super call found in single-inheritance languages.Dynamic ordering is necessary because all cases of multiple inheritance exhibit one or more diamond relationships (where at least one of the parent classes can be accessed through multiple paths from the bottommost class). For example, all classes inherit from object, so any case of multiple inheritance provides more than one path to reach object. To keep the base classes from being accessed more than once, the dynamic algorithm linearizes the search order in a way that preserves the left-to-right ordering specified in each class, that calls each parent only once, and that is monotonic (meaning that a class can be subclassed without affecting the precedence order of its parents). Taken together, these properties make it possible to design reliable and extensible classes with multiple inheritance.


Answer URL
https://docs.python.org/3/tutorial/classes.html#multiple-inheritance
