Natural Text
I would like to raise an exception in a function, and then check somewhere else (in the Django view and my unit tests) if it was raised. The following code uses status codes, and it works. But I can't figure out how to do the same thing with exceptions - which, everyone seems to agree, are the right way to do this kind of thing.It is important to me to use custom error messages. Not to print them, but to detect and use them in the code (mainly to forward them to the end user with Django messages).I have no idea how I would check in  if an exception was raised in .In the unit test I have tried things like , but that did not bother to check if the message is actually the same.views.py:utils.py:tests.py:I use Python 3.5.2 and Django 1.11.4.Edit: I am not actually sure if exceptions would be the correct choice here. I often read, that exceptions are only for things that are unexpected. But the cases I am catching here are wrong inputs by the user, which are very much expected. So my question is not really how to make this with exceptions, but how to make this the right and pythonic way. In any case I want the validation to happen in the separate  place (plain Python, no Django), and not in the view.
You can use the 'raise' statement to raise an exception, like:You can also create custom exceptions by inheriting from the Exception in-built class, like:then you can do:And you can catch the raised exceptions using a try-except block:So in your views.py you can do:
An explicit success message returned by  may seem clearer, but is probably not a good idea. The function does not need to return anything. If no exception is raised, it can be assumed that it was successful.I can create a custom exception and add the  property in the . This way it can be accessed as , which in my case will be relayed to the index page in .utils.pyviews.py


Answer URL
