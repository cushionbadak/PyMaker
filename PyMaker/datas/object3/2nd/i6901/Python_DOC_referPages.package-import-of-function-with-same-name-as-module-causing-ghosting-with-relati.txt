Natural Text
I have a package  organized like this:The module  defines one 'public' function also named , and both the module and the function benefit hugely from being named exactly .  also defines some 'private' helper functions.Inside of  I make a top-level import of  so that  will be the API of the overall package.But now I am getting bitten by relative imports.First, if I am debugging or working in an interactive prompt like IPython,  naively pasting  doesn't work. I can get around this by launching IPython inside  and using  instead.But then how can I import the  module and not the exported  function? E.g. variants of etc., all import the function , meanwhile any time that  also contains a relative import to another module, such as then the plainwon't work either.The package-level 'ghosting' of  the module with  the function is the correct behavior. How can I maintain this while also being able to import  the module in local development (especially in an interactive environment like IPython)?
If you really do have a compelling reason to keep the shadowing, you can access the module object through :There's also :


Answer URL
https://docs.python.org/3/library/sys.html#sys.modules
https://docs.python.org/3/library/importlib.html#importlib.import_module
