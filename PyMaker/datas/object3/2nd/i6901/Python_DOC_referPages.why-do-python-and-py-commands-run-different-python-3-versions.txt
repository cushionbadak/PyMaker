Natural Text
This question already has an answer here:Dealing with multiple Python versions and PIP?                    18 answers                I've installed  using the  command (), but i can't run it using the  command, as it can't find the module. I can only make it works using 'python' command.Here is a summary of the screenshot I have atttachedIt also looks like django works only with 3.6.1. Is there any way to set both commands to run newest version of python?Screenshot:
On windows, py is an executable stored in the C:\Windows folder. I honestly don't know what it contains, as I am used to where it is a symbolic link on linux, and my windows install shows the normal python executable as being a fraction of the size of py, despite my being quite sure that they point to the same installation. Regardless, you can fix your problem by deleting or renaming (python.bak, etc) the executable you don't want to keep using from the Windows folder, then copying the one you want in place and renaming it to the same name that you previously deleted or renamed. I can't imagine this is the official way to fix this problem, but this will work. Also, in the future, feel free to specify the version you are installing to with pip explicitly if you want to be sure of which installation you are using instead of just running whatever points to pip:Running into problems with multiple python versions on the same system is quite common with Windows, so setting up a virtual environment may be beneficial. This is explained in the Django Windows install how-to.
You're using Python launcher for Windows when you execute. You could be specific about which Python interpreter version that you want  to execute with this command:See this section from PEP 397: Python Version QualifiersIf no version qualifiers are found in a command, the environment  variable  can be set to specify the default version qualifier   the default value is "2". Note this value could specify just a major version (e.g. "2") or a  qualifier (e.g. "2.6"), or even  .If no minor version qualifiers are found, the environment variable   (where  is the current major version qualifier  as determined above) can be set to specify the full version. If no  such option is found, the launcher will enumerate the installed Python  versions and use the latest minor release found for the major version,  which is likely, although not guaranteed, to be the most recently  installed version in that family.In addition to environment variables, the same settings can be  configured in the .INI file used by the launcher. The section in the  INI file is called [defaults] and the key name will be the same as the  environment variables without the leading  (and note that  the key names in the INI file are case insensitive.) The contents of  an environment variable will override things specified in the INI  file.Plus Python launcher isn't just limited to launching different Python versions, it also parses shebang  in source code files, providing a functionality similar to that in *nix operating systems in Windows. *Refer to Python Launcher for Windows documentation. 


Answer URL
https://docs.python.org/3/using/windows.html#python-launcher-for-windows
