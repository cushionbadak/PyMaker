Natural Text
I am looking to:Make a custom timer wrapper, for logging/other timing purposesInclude preemptive exiting if the wrapped operation(s) exceed a predefined length of timeThis is what I have so far:The problem I have here is that because I am not yielding the  future, in the stack I see:The tornado timeout is not being "bubbled" (for lack of better word).I would like to have the  capture the exception, so that I can handle it in and log appropriately, while re-raising as a different exception type.I am not sure if I need to:Not use a ContextDecorator at allDo something different with how/where I have the tornado call???? I know that in this example, I can wrap all the calling code into a coroutine and add a timeout to the  function around the timing logger wrap, like this:But I am looking to include the above into my ContextDecorator because having to copy that around everything I want to use  with becomes tedious as well as error prone.How can I achieve desired functionality to allow my ContextDecorator to include timeouts as part of how it functions?Using Python 3.6.1 and the latest Tornado (4.5.1).
Rather than using a tornado timeout, you can use a signal to interrupt and trigger this exception (though alarm only allows integer, second inputs):This will raise the exception appropriately, resulting in a full ContextDecorator that looks like:Note that you need to reset the alarm in the  or it will fire later in your code.


Answer URL
https://docs.python.org/3/library/signal.html
https://docs.python.org/3/library/signal.html#signal.alarm
