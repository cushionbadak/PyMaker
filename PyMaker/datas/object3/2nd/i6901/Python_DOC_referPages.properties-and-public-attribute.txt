Natural Text
I'm following a tutorial on python 3 and there is a simple example I'm struggling with.Why is the attribute x in  defined as public but is accessed like a private attribute with  in the functions decorated with  and ?
This isn't that straightforward because it heavily relies on Pythons descriptor protocol see also Descriptor HOW-TO which refers to  as well. But I will try to explain it in easy terms.You have a class that has (besides what is inherited by the implicit superclass  and some automatically included stuff) 2 attributes:I removed the automatically added attributes for the sake of this discussion. You can always add or replace attributes as much as you want:But when you create an instance the instance will have only one attribute  (the  is inserted because variables starting with  and not ending in  are name-mangled):You can also add almost (only almost because the descriptor protocol intercepts certain operations - see below) any attribute for the instance:That's where the descriptor protocol comes into play. If you access an attribute on the instance, it starts by looking if the instance has that attribute. If the instance doesn't have that attribute it will look at the class - but through the descriptor protocol! So when you access  this is roughly equivalent to: :Likewise setting the attribute with  will call :The  will intercept though the descriptor protocol any access to  on . So you can't use the name  to store the actual value on the instance because it would always go into the  and  (and also  but you haven't implemented that one) functions of the class. So you have to use another name to store the variable.It's typically stored with the same name but one leading underscore (also eases maintainability). It's actually not good practice to use two leading underscores because that makes it hard to subclass your class and modify the  property - without name-mangling the variable name yourself.


Answer URL
https://docs.python.org/3/reference/datamodel.html#implementing-descriptors
