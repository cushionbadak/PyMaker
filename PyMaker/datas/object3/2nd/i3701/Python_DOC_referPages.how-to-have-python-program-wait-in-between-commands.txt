Natural Text
I'm using python 3 on Komodo, and I want for there to be a time delay between the execution of commands. However, using the code below, all of the print commands are launched at the same time, but it does show that the time after all the commands are executed is two seconds greater than the time before the commands are executed. Is there a way for the first line to be printed, wait a second, second line be printed, wait a second, and have third and fourth lines be print? 
By default,  prints to , which is line-buffered when writing to an interactive terminal,1 but block-buffered when writing to a file.So, when you run your code with  from your Terminal or Command Prompt, you will see each line appear as it's printed, as desired. But if you run it with, say, , nothing will get written until the buffer fills up (or until the script exits, if that never happens). Normally, that's fine. But apparently, however you're running your script in Komodo, it looks like a regular file, not an interactive terminal, to Python.It's possible that you can fix that just by using or configuring Komodo differently.I don't know much about Komodo, but I do see that there's an addon for embedding a terminal; maybe if you use that instead of sending output to the builtin JavaScript (?) console, things will work better, but I really have no idea.Alternatively, you can make sure that the output buffer is flushed after each line by doing it manually, e.g., by passing the  argument to :If you really want to, you can even replace  in your module with a function that always does this:â€¦ but you probably don't want to do that.Alternatively, you can replace  with a line-buffered file object over the raw stdout, just by calling  on its underlying raw file or file descriptor:If you search around Stack Overflow or the web, you'll find a lot of suggestions to disable buffering. And you can force Python to use unbuffered output with the  flag or the  environment variable. But that may not do any good in Python 3.21. As  explains, it's just a regular text file, like those returned by . As explained in , this distinction is made by calling .2. Python 2's  is just a thin wrapper around the C stdio object, so if you open it unbuffered, there's no buffering. Python 3's  is a hefty wrapper around the raw file descriptor that does its own buffering and decoding (see the  docs for details), so  will make  unbuffered, but  itself will still be buffered, as explained in the  docs.


Answer URL
https://docs.python.org/3/library/functions.html#print
https://docs.python.org/3/library/sys.html#sys.stdout
https://docs.python.org/3/library/functions.html#print
https://docs.python.org/3/library/functions.html#open
https://docs.python.org/3/using/cmdline.html#cmdoption-u
https://docs.python.org/3/using/cmdline.html#envvar-PYTHONUNBUFFERED
https://docs.python.org/3/library/sys.html#sys.stdout
https://docs.python.org/3/library/functions.html#open
https://docs.python.org/3/library/os.html#os.isatty
https://docs.python.org/3/library/io.html
