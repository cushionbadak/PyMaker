Natural Text
Say you want to optimize a (byte) string compare intensive algorithm implemented in Python. Since a central code path contains this sequence of statementsit would be great to optimize it to something likewhere (the hypothetical)  ideally would just call the three-way comparison C function  which is usually quite well optimized. This would reduce the number of string comparisons by half. A very feasible optimization unless the strings are ultra short.But how to get there with Python 3?PS:Python 3 has removed the three way comparison global function  and the magic method . And even with Python 2, the  class doesn't had a   member.With the  package it's straight forward to call  but the foreign function call overhead with  is prohibitively high.
Python 3 (including 3.6) simply doesn't include any three-way comparison support for strings. Although the internal implementation of the rich comparison operator ,  etc. do call  (in the C implementation of  - cf. ) there is no internal three-way comparison function that could be leveraged.Thus, writing a C extension that provides a three-way comparison function by calling  is the next best thing:Compile with:Test:In contrast to calling  via the  package, this foreign call has the same overhead as the builtin bytes comparison operators (as they also are implemented as C extension with the standard Python version).


Answer URL
https://docs.python.org/3/c-api/buffer.html#c.PyObject_GetBuffer
