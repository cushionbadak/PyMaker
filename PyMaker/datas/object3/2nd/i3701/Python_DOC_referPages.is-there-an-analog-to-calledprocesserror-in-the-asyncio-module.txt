Natural Text
Is there an analog, in the  module, to the  exception from the  module?I would have expected there to be an analog, because the  module creates the  exception to replace the  exception from the  module. But there does not seem to be one.As a sub-question: Does the  exception only work with instances of the  class? Or does it also work with other classes (e.g.  from  or  from ) which implement (child) process functionality?It seems to be the case that the  exception might work with instances of classes similar, but distinct to . For example, one can find on GitHub examples of people calling  with an instance of the  class from .Note that in the above example, while it is true that  does have an alias for , based on the  statements at the top of the file that is not the exception being called; it is really  being called.If  also works with instances of the  class from , then why doesn't  also work with instances of the  class from ? In other words, in  why was it necessary to create a new version () of the  exception, but not necessary to create a new version of the  exception?At the end of the day the source code for  isn't that complicated, so if I wanted to create a duplicate version for instances of the  class from , I suppose I probably could, but it would seem desirable to first try avoid such code duplication.Note: My current working mental model is that the " module aims to do everything that the  module does but asynchronously". To the extent that this mental model is incorrect, this question will likely contain inherent preconceptions/misconceptions.
 does not contain any equivalent for , because it does not contain any equivalent for the things that raise . There is no equivalent for , , , or the  argument to .
There is no such exception, no. The  implementation should be seen as the equivalent of . From  documentation:The API of the  class was designed to be close to the API of the  class[.]The  exception is only thrown by the higher-level functions in the same module (such as ), each of which drives  under the hood.Just raise your own exception when the  value is non-zero. You can re-use  for this if you want to, all it is is a container for the command run, return code, and the  and  strings. These are all built-in Python types, nothing  specific.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#timeouterror
https://docs.python.org/3/library/subprocess.html#subprocess.Popen
https://docs.python.org/3/library/asyncio-subprocess.html#process
https://docs.python.org/3/library/asyncio-subprocess.html
https://docs.python.org/3/library/subprocess.html#subprocess.Popen
https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.asyncio.subprocess.Process
https://docs.python.org/3/library/subprocess.html#subprocess.run
https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.asyncio.subprocess.Process.returncode
https://docs.python.org/3/library/asyncio-subprocess.html
