Natural Text
Hi and thanks for checking, I am programming in Python and have a simple question to which I did not find an answer so far.I have a function output, which I need to use multiple times in an if-else statement.Here an example code:Is there an elegant way to use such a function output multiple times without calling the function multiple times (computationally expensive) or having to temporarily save the output in a previous line?
As of yet, what you want is not possible because the python ternary operator only allows expressions and not statements. If you are curious about the difference I would recommend reading this amazing answer on the topic. But the important part for this question is that what you are asking for is an assignment (i.e. something like , as you correctly noted yourself), which is a statement.Luckily, other people like you (and me) would appreciate the option to share temporary results within a single block, expression, or statement, which is the goal of PEP 572, due for python3.8 in late 2019. Given the PEP gets accepted.You can try it already by compiling the POC from source. This is what it would look like:Which is imo prettier and more straight forward than what you currently have to do with temporary variables:
I'd just assign the value to a variable on a previous line, if it would be the same from all three calls.As Hearner already wrote in the comments, your example is slightly confusing since you're not assigning the value of the ternary to anything, implying that  is some function with side effects that you want to call, but not assign to a variable. In that case using the ternary operator isn't very pretty, I think.In the case that  returns some value you want to assign if the comparison is true, or else assign , then is surely the way to go and not particularly inelegant.In the case that  is some function with side effects which you only want to call if the comparison is true, you could write e.g.but not everyone likes that idiom somight be preferrableâ€¦
If  depends only on it's arguments, you could use memoization, but you'll still have the overhead of calling the function thrice (and the overhead of looking up the memo cache of course), so the answer is no, the only sensible solution here is definitly to store the result of the first call in an intermediate variable.


Answer URL
https://docs.python.org/3/reference/expressions.html#conditional-expressions
