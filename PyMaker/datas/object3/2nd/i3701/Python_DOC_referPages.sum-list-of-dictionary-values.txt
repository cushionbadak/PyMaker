Natural Text
I have a list of dictionary in this form : and I want to sum the values in this by key for each element in the list like that : what I have tried is the following : but it still doesn't work.
What you want is the  collection type. The Python docs on collections describe it best, but essentially a  is a special kind of dictionary where all the values are integers. You can pass any key, including nonexistent ones, and add to them. For example:Edit: @timgeb provides a variation on this answer which makes native use of the  method on  objects. I would recommend that as the best answer here
Similar to daveruinseverything's answer, I'd solve this with a , but make use of its  method.Let  be your list of dicts.For Op's sake, can you briefly describe what's happening here?A  works similar to a , but its  method adds values to the values of pre-existing keys instead of overriding them.
The problem with your code is that you are summing  and  no matter the key. Below you can find a reformatted version of your code that works. It simply adds the values from each element from the list to the result object:Or, with a one liner you can have:
With , you could do something likeIf you can assume that each dictionary contains the exact same keys, the above can be simplified toNote also that the data analysis library pandas makes operations such as these trivial:
Can you try below code OutputNote :- As we are sure that all keys in all dictionaries are same this solution works well. If you have a dictionary with non matching elements then it would result in  . So be aware of that limitation
Your current code uses one accumulating sum for all the signals, when instead you need a seperate the sum for each signal. If you want your original code to work, you need to first check if the key exists in , and initialise it 0 beforehand if it isn't. Then accumulate the sum for the respective key. Code:Output:Note: As others have shown, to avoid initialising yourself, you can use  or  instead. 
Try this:Output:Note that if there are missing signals, it will just consider it as zero


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/itertools.html#itertools.groupby
