Natural Text
Here I have a listI need to print the top 3 in this list like,It is easy to sort and take top values and loop over the same copied list to find the top values in the given orderBut I shouldn't use new list for this task.Is that possible?
First value wins in case of tie. If you wanted last value wins instead, simply change the  into .This is a good approach for large data and small selects, i.e. where n >> k with n being the length of input and k being the number selected.  In this case, the k term is insignificant so the approach is O(n) time-complexity, favorable to O(n log n) of sorting-based approaches. If k is large, this will no longer be a good solution. You should look at maintaining a sorted result set, bisecting it for insertions, and perhaps using quickselect to find the maxima.Another option which has simpler code is available using Python stdlib's , though it may generally be slower in practice:I think this is O(n log(k)), although admittedly I'm reaching the edges of my knowledge here.Some timings with a list of 10,000 integers:Note:  implementation is the solution from user Delirious Lettuce here.
I would modify a select-sort to capture (n) as MAX instead of just one. and instead of running n2, just go thru the list once.so [9,1,2,11,8]you'd initialize with a MAX list [0,0,0]then loop thru your list plucking things that are bigger than MAX[9,0,0] [9,1,0] [9,1,2] [9,11,2] [9,11,8]the trickiest part is step 4 where you need to decide to keep 9, and 2 and replace 1 with 11.
You could also implement a wrapper class for your list. Have private data members (In your case 3) for the largest values in the list. Update these variables upon performing insertion and deletion.
I tried to create a sample program based on the input and the output you have asked for. I thought of giving a try. Please feel free to optimize or provide feedback. I tried to explain steps in the code itself. Thank you.The output after execution of the program is: 
EDIT:I'm curious as to why I'm being downvoted. The solution by  willingly ignores the restriction in the original question about "without making a new list". The only response was to temporarily change it to a deque in an odd attempt to get around that restriction. Currently, this is the only answer which adheres to all of OPs requirements (listed below as two separate comments).Print largest values of a list in the same order without making a new listI need to print the top 3 in this list likeThis answer assumes that the number is always three for how many of the top numbers you need to extract, in their original order. If that is the case, this answer seems to be  time and  space.Tests:


Answer URL
https://docs.python.org/3/library/heapq.html#heapq.nlargest
