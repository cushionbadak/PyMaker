Natural Text
why this question ?I was trying to answer this question: Check if All Values Exist as Keys in Dictionary with something better than a generator comprehension fed to  (python loops, even in comprehensions, slow down execution compared to implicit loops that some functions perform):where  is a dictionary and  is a list by using  (with a conversion to  of  to be able to use ), and didn't succeed to beat the times of the  solution (unless both containers are converted to s).my question:From the documentation of :Note, the non-operator versions of union(), intersection(), difference(), and symmetric_difference(), issubset(), and issuperset() methods will accept any iterable as an argument. In contrast, their operator based counterparts require their arguments to be sets. This precludes error-prone constructions like set('abc') & 'cbs' in favor of the more readable set('abc').intersection('cbs').Okay but the performance really depends on the type of argument, even if the complexity does not (The complextiy of Python issubset()):my results (Python 3.4):So if a  is passed as the argument, the result is very fast.Using a  is much slower. I figured out that it was because of the hash that must be done on the strings is costly. So I changed my test inputs with integers like this:and the results were globally faster but still a huge time difference:I also tried to change  by  as in python 3 the keys is said to be (https://www.python.org/dev/peps/pep-3106/) "a set-like or unordered container object".But in that case, the result is even worse than with  or .So why does passing a  beats passing a  or a  or a  object? I don't see anything mentionned in the documentation about this.
The  algorithm requires a set to work with (frozensets and subclasses count); if you pass it something else, it will make a set. It's basically , and it needs to know that  is efficient and means what it means for sets. The only way it knows how to guarantee that is to ensure  is a set. Making a set is expensive.(I've glossed over some details. If you want to know exactly what's going on, particularly if you have a weird set subclass, read the source code in the link.)


Answer URL
https://docs.python.org/3/library/stdtypes.html#set
