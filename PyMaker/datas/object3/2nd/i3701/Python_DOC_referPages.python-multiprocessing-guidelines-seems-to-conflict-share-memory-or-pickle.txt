Natural Text
I'm playing with Python  module to have a (read-only) array shared among multiple processes. My goal is to use  to allocate the data and then have my code forked () so that each worker can read straight from the array to do their job.While reading the Programming guidelines I got a bit confused.It is first said:Avoid shared stateAs far as possible one should try to avoid shifting large amounts of     data between processes.It is probably best to stick to using queues or pipes for     communication between processes rather than using the lower level     synchronization primitives.And then, a couple of lines below:Better to inherit than pickle/unpickleWhen using the spawn or forkserver start methods many types from     multiprocessing need to be picklable so that child processes can use     them. However, one should generally avoid sending shared objects to     other processes using pipes or queues. Instead you should arrange the     program so that a process which needs access to a shared resource     created elsewhere can inherit it from an ancestor process.As far as I understand, queues and pipes pickle objects. If so, aren't those two guidelines conflicting?Thanks.
The second guideline is the one relevant to your use case.The first is reminding you that this isn't threading where you manipulate shared data structures with locks (or atomic operations).  If you use  (which is actually ) for everything, every read and write has to access the manager's process, and you also need the synchronization typical of threaded programs (which itself may come at a higher cost from being cross-process).The second guideline suggests inheriting shared, read-only objects via ; in the forkserver case, this means you have to create such objects before the call to , since all workers are children of a process created at that time.The reports on the usability of such sharing are mixed at best, but if you can use a small number of any of the C-like array types (like  or the standard  module), you should see good performance (because the majority of pages will never be written to deal with reference counts).  Note that you do not need  here (though it may work fine), since you do not need writes in one concurrent process to be visible in another.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing-programming
