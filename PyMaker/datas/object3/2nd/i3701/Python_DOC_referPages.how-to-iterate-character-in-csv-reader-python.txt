Natural Text
I have a number of text files (.txt), the first one is named 1_1_A_A and the last one is named 10_10_B_C. The first element in the names goes from 1 to 10, the second also goes from 1 to 10, the third can be A or B and the fourth can be A, B or C. It makes a total of 600 instances. I want python to read them with CSV reader. For the first two elements, I use  in two loops and it works properly. But what should I do to iterate the characters in third and fourth place?The code is something like this, iterating the firs two elements:
You can iterate over any iterable the same way. It doesn't have to be a ;  does the same thing as . And the values don't have to be ints—you can do . Or, even more simply, a string is itself an iterable of characters, so .And, while we're at it, this means you can iterate over the lists  and  directly. Instead of using  and then , just do  and use  directly.So:However, four levels of nesting is pretty ugly, and pushes your code off the right edge of the screen. You'll probably find this nicer with :Roughly equivalent to nested for-loops… The nested loops cycle like an odometer with the rightmost element advancing on every iteration.In other words, this does exactly the same thing as the above:Or, even more simply: instead of using tuple unpacking to get separate  variables, just keep it as a single  and pass it to :If the elements of  and  aren't strings, that last version won't work—but if you  them all to strings, it works just as well as :Of course you probably want to come up with a better name than . Maybe ?
You can iterate over any iterable, including strings like:Code:Results:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
https://docs.python.org/3/library/stdtypes.html#str.join
https://docs.python.org/3/library/functions.html#map
