Natural Text
I'm looking to generate the cartesian product of a relatively large number of arrays to span a high-dimensional grid. Because of the high dimensionality, it won't be possible to store the result of the cartesian product computation in memory; rather it will be written to hard disk.  Because of this constraint, I need access to the intermediate results as they are generated. What I've been doing so far is this:which, apart from being very nasty, is not scalable (i.e. it would require me writing as many loops as dimensions). I have tried to use the solution proposed here, but that is a recursive solution, which therefore makes it quite hard to obtain the results on the fly as they are being generated. Is there any 'neat' way to do this other than having a hardcoded loop per dimension?
In plain Python, you can generate the Cartesian product of a collection of iterables using .In Numpy, you can combine  (passing  to avoid expanding the product in memory) with :
I think I figured out a nice way using a memory mapped file:But I wonder if you really need to store the whole Carthesian product (there's a lot of data duplication). Is it not an option to generate the rows in the product at the moment they're needed?
It seems you just want to loop over an arbitrary number of dimensions. My generic solution for this is using an index field and increment indices plus handling overflows.Example:Gives:Numpy has something similar inbuilt: ndenumerate.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
