Natural Text
I've written a python chess game that I'd like to make playable by two people on two different computers. Without using external libraries, my first thought was to try to adapt code for a simple chat server/client to allow the game to communicate moves to both users. From my research, it seems the following code is pretty standard:My thinking is that one player (the host who invites the other player to the game), initiates the game and the server. The client then moves, sends the move to the server, and the change is reflected on the UI. However, the infinite loops above that listen for messages/responses are giving me trouble: clearly, no other code can execute. I'd rather have the connection between client and server be in the background, or even better make use of the infinite loop already used by the UI to listen to events.My question: is it possible to use Tkinter's  to act as an infinite loop to listen for incoming data and replies? Or, would it be better to run the server and the client as subprocesses. I guess what I'd really like is to treat the listening/receiving for moves as events: when a move is made, a message is sent, and it is "handled" by the client. Note: this is the first time I've ever used the socket library -- it would be great if any answers could respect my relative naivet√© with the topic.Edit: I think what I might need is asynchat, but I would very much appreciate understanding how this code might be adapted. Final remarks: gordosac's answer provided some great ideas to search. I ended up finding exactly what I need here
Take a look at this question on SO:How to use threading in Python?You would do something like this for the client:Then on the server side do the equivalent but with the while loop from the server code


Answer URL
https://docs.python.org/3/library/ctypes.html
