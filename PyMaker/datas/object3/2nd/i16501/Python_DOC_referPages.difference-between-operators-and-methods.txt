Natural Text
Is there any substantial difference between operators and methods? The only difference I see is the way the are called, do they have other differences?For example in Python concatenation, slicing, indexing are defined as operators, while (referring to strings) , ,  and so on are methods.
If I understand question currectly...In nutshell, everything is a method of object. You can find "expression operators" methods in python magic class methods, in the operators.So, why python has "sexy" things like , , , ? Because it is common things to most developers, even to unfamiliar with development people, so math functions like ,  will catch human eye and he will know what happens. Similar with indexing - it is common syntax in many languages.But there is no special ways to express , ,  methods, so there is no "expression operators" for it.So, what is different between "expression operators" and methods, I'd say just the way it looks.
Your question is rather broad.  For your examples, concatenation, slicing, and indexing are defined on strings and lists using special syntax (e.g., ).  But other types may do things differently.In fact, the behavior of most (I think all) of the operators is constrolled by magic methods, so really when you write something like  a method is called under the hood.From a practical perspective, one of the main differences is that the set of available syntactic operators is fixed and new ones cannot be added by your Python code.  You can't write your own code to define a new operator called  and then have  work.  On the other hand, you can define as many methods as you want.  This means that you should choose carefully what behavior (if any) you assign to operators; since there are only a limited number of operators, you want to be sure that you don't "waste" them on uncommon operations.
Is there any substantial difference between operators and  methods?Practically speaking, there is no difference because each operator is mapped to a specific Python special method.  Moreover, whenever Python encounters the use of an operator, it calls its associated special method implicitly. For example:implicitly calls , which makes the above expression equivalent1 to:Below is a demonstration:Of course, actually using  in place of  would be inefficient (and ugly!) because it involves an unnecessary name lookup with the  operator.That said, I do not see a problem with generally regarding the operator symbols (, , , etc.) as simply shorthands for their associated method names (, , , etc.).  After all, they each end up doing the same thing by calling the same method.1Well, roughly equivalent.  As documented here, there is a set of special methods prefixed with the letter  that handle reflected operands.  For example, the following expression:may actually be equivalent to:if  does not implement  but  implements .


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-names
https://docs.python.org/3/reference/datamodel.html#object.__add__
https://docs.python.org/3/reference/datamodel.html#object.__radd__
