Natural Text
How do I serialise a Python  member to JSON, so that I can deserialise the resulting JSON back into a Python object?  For example, this code:results in the error:How can I avoid that?
If you want to encode an arbitrary  member to JSON and then decodeit as the same enum member (rather than simply the enum member's  attribute), you can do so by writing a custom  class, and a decoding function to pass as the  argument to  or :The  function relies on the JSON having been encoded using , or something which behaves identically to it.The restriction to members of  is necessary to avoid a maliciously crafted text being used to, for example, trick calling code into saving private information (e.g. a secret key used by the application) to an unrelated database field, from where it could then be exposed (see http://chat.stackoverflow.com/transcript/message/35999686#35999686).Example usage:
The correct answer depends on what you intend to do with the serialized version.If you are going to unserialize back into Python, see Zero's answer.If your serialized version is going to another language then you probably want to use an  instead, which is automatically serialized as the corresponding integer:and this returns:
I know this is old but I feel this will help people. I just went through this exact problem and discovered if you're using string enums, declaring your enums as a subclass of  works well for almost all situations:Will output:As you can see, loading the JSON outputs the string  but it is easily castable back into a LogLevel object. A good option if you don't want to create a custom JSONEncoder.
This was buried in the comments for another answer, but it was exactly what is needed to just serialize a string enum's value:returns:Warning: you lose the ability iterate over the enum if you do this.
I liked Zero Piraeus' answer, but modified it slightly for working with the API for Amazon Web Services (AWS) known as Boto.I then added this method to my data model:I hope this helps someone.
If you are using  the easiest way should look as below.After Json serialization you will have as expected  instead of 


Answer URL
https://docs.python.org/3/library/json.html#json.JSONEncoder
https://docs.python.org/3/library/json.html#json.load
https://docs.python.org/3/library/json.html#json.loads
