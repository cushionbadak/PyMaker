Natural Text
It is a simple program for counting the number of element in a list where the element is bigger or equal to x and smaller of equal to y.How can I rewrite this method to be recursive? I know that I may need to add one more parameter in this method but I have no idea how to do.
This is a great candidate for recursion, in Python 2 you can do it like thisThis is tail recursive as well.
A possible solution:
You can do it like this:Here, the increment () is set to  or  based on the result of the condition. You can use  to convert the boolean result to  or . (Technically, since  and  are  and  in Python you don't necessarily need this. However, in Python 2  and  can be reassigned so using  puts you on the safe side.)
You should consider optimizing for a tail call by using an accumulator. Down below you can see variation of @Keiwan's answer using some nice features like destructuring assigment.

As mentioned above, since slicing a list creates a new copy. All of the above methods are memory hungry.Here is a memory efficient and concise solution that uses an index argument without slicing the list
Here is another variant, in a single line. It relies on python's conditional evaluation order
First you need to define an edge condition: return 0 if the list is empty. If the condition isn't satisfied, you continue testing other candidates by calling the function recursively. So you return something other than zero if it is satisfied. You pass the 'tail' of the list (the list without its first element) with . 


Answer URL
https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not
