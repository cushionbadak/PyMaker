Natural Text
I am trying to print individual letters, it works fine with english and chinese pinyin but when trying to work with other than those I get unicode chars (Diacritic) as wellConsider this word when I try to separate it with key board arrow keys & space this is the result for महाभूकम्पले  just like it would happen with an English word 'EXAMPLE'Now when I try to run a python scrip to automate this with this codemy result is this: (It has separated all Diacritic as well)What I require is to have an out put as this
A quick solution (hopefully) without digging into the codepoint semantics (otherwise better see Martin's answer). Basing on output of:Which is:We can join codepoints in these categories (Mc, Mn) with preceding codepoint:The output corresponds to number of combined character I have in :  
Your data does actually contain 11 characters:That's because there are several diacritical characters in there, which, when printed, combine with the preceding character. You'd have to detect these and print them together.This is easier said than done.The Unicode database has various ways of spelling characters that can be combined. In Western alphabets, you have diacritics like the cedille (the curl on the ) or accents or tremas ( or ), which in Unicode can be expressed as both 1 and two characters, where these forms are called the canonical composed normal form and canonical decomposed normal form, and you can use the  function to convert between the two forms.But for the Devanagari script, there is no composed form; diacritics are always specified separately. Instead, for these characters the line break behaviour is recorded in the  table; how these should be handled when a line break needs to be inserted. For Devanagari diacritics, the behaviour is set to , or Combining Mark. The exact meaning is described in the Unicode Line Breaking Algorithm.  is described as:Class: CM  Descriptive Name: Combining Mark  Examples: Combining marks, control codes  Behaviour: Prohibit a line break between the character and the preceding characterThe problem is that the  data table is not available from the  module.You'd have to build your own table, using the  table as a source, then test if the next character is in that table as  and print it on the same line.To just extract the  codepoints:and then use this to detect if a next character is to be printed on the same line:This only covered CM characters, however. You probably also want to cover  (Glue) characters, which attach to both the preceding and the next character in a sequence. For a more complete solution, you'd need to build a  function that took the whole  table in to account to determine if a linebreak can exist between two characters.


Answer URL
https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize
