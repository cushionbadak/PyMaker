Natural Text
I would like to make bool binary operations using the magic methods for these operators. For example, I can get  as  or  as . Can I get  and  in such a way? 
 is  and  does not have a dunder method. I strongly suggest you use the functions in the  module:
For , the correct dunder method is .There is no method for , because this is equivalent to . It compares the actual object ID used under the hood by Python, so is used to compare object identity, not object contents.  Overwriting it within a class would break Python's object model, so it is not allowed.
 is correct for , with fall-back options if  isn't defined being  and . I am not really sure why you'd need to use  for  though;  is "defined" for every object in Python. There's no need to go through  or (trying and failing) through . See the documentation on built-in types:The behavior of the  and  operators cannot be customized; also they can be applied to any two objects and never raise an exception.(Emphasis mine)According to the snippets you provided, which just grab a function and call it using , you already have the names of the objects you need to evaluate, just use  immediately; it is always available. 


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__contains__
