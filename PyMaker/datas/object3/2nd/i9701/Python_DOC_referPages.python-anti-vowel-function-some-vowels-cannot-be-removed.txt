Natural Text
This question already has an answer here:How to remove items from a list while iterating?                    23 answers                Correct code to remove the vowels from a string in Python                    13 answers                I just started to learn Python in codacademy. I was trying to do anti-vowel function, but found the following problem with 'u'.It printedInstead ofSomehow, some vowels was not removed es expected.I found many alternatives for the function. However, please help me identify the mistake of the current code.
There's no need to use remove, and there's no need to iterate twice. Rather, as you iterate, check whether the item is a vowel and only append if it is not.
When you look very closely at the remaining vowels, you can see that all those vowels remain that immediately follow one another. In your last example, a (removed) e (stays) i (removed) o (stays) and so on.This is because you are iterating over a list and at the same time you are modifying it.To solve the problem, you should make a copy of the list. Then you can iterate over the original one while modifying the copy.
Removing items while iterating is not a good idea.Do it in one line with a generator comprehension passed to or maybe more performant using a  for faster letter lookup (not sure converting to lowercase would speed this up since it creates a new string for that)
Like others have already stated, you are modifying your list while iterating through it. I did want to suggest a python built-in option for this task, though for 3.x > Python > 2.6:In Python 3.x you'll need to take account for the standard Unicode string and translate it first:

Why not try recursively like this? Output:
you are removing item from list while traversing so thats creating a problem.Moreover there is no need to traverse the so many times.you could use:or I would say instead of using list use string like this : Edited: using  is faster than using string cancatenation as pointed out by @jean in the comment section.
You could also join the result of a list comprehension, like:Be sure to let your functions return their results if you want the function to do more than just printing to the terminal (for example if you want to use the returned value somehow). There's no need to print the results of a function that prints its result and returns  (which is the case if there are no  statements inside).The  part of the list comprehension is simply a for loop over the characters in the string named . The  excludes the characters who are present in the  string. Finally,  merges the non-excluded characters together to form a string which by the  statement is returned.


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.translate
