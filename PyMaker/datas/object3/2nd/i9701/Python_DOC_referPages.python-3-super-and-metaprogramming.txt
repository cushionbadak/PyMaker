Natural Text
I'm trying to duplicate and then modify a class programmatically but I'm running into problems with python 3's magic super for example the following raises TypeError: super(type, obj): obj must be an instance or subtype of typeSo I'm wondering, is there someway I can help super() find the right __class__ cell in a class created through type()? 
Note: I corrected the spelling of  in this answerIt appears that the problem is that when your  object is being instantiated and  is called, its being called like:   since those are the default arguments for .  Since  is not a superclass of  (check ), python is not allowing you to call  in that way.The following code does something similar to yours but better illustrates the problem.Adding  to the  of  will make it work:Edit:Per the comments, the above suggestion can be simplified since all the methods contained within  will be included in  without needing to pass the  in the  call:and going one step further, if you don't want  to be a subclass of , you could simply make  a copy of  and then add attributes the same as you do in your example:
According to the documentation,Also note that, aside from the zero argument form, super() is not limited to use inside methods. The two argument form specifies the arguments exactly and makes the appropriate references. The zero argument form only works inside a class definition, as the compiler fills in the necessary details to correctly retrieve the class being defined, as well as accessing the current instance for ordinary methods.So, the  in the code is equivalent to , and it's determined in compile time.


Answer URL
https://docs.python.org/3/library/functions.html#super
