Natural Text
I'm having trouble with a printing information that is input from a yaml file using PyYAML. I'm trying to reduce line-count, without affecting functionality. In some runs the output has to be appended to a file, in others to stdout.At first I used this multiple times in my function processData:That worked, but has the disadvantages of not using the with statement when something goes wrong.The actual problem is not the complex print statements, but that I 1) don't want to duplicate code when printing to file or to sys.stdout2) want to use the with statement so that files get closed if there are print errors3) there are several such blocks, I don't want to call a different function for each of them, and so preventing code duplicationThen what I tried is:If there is not a logName, this errors to "ValueError: I/O operation on closed file". Any suggestions on how to get this to work without the original duplication? Can I reopen sys.stdout?
You can "wrap"  in a class to prevent it from being closed in the first place.   The  statement calls  and  on instances of that class at the beginning and end resp., so just make sure the  doesn't do anything:and then use  instead of 
Literal question - reopening stdoutAt the lowest C level, stdout is a well-known file descriptor (an integer pointing to an entry in the runtime- or system-managed descriptor table), initialized in a process upon its creation. It cannot be reopened (with standard C means) once it's closed and must be duplicated beforehand if you still need it.A disposable copy of  can be created like this:(In Python 3,  has been merged into  and is an alias to it.)You may need to use  instead if  has been replaced.The other question - wrapping functionality into  logicFirst of all, consider the standard way to log - namely, the  module - to avoid reinventing the square wheel. Opening and closing the file on demand can very well be implemented with its machinery, and it's not even needed in the vast majority of cases.Now, the only way to cut on the repetitive parts of the code is to wrap the repeating part into a subroutine (or a code block that processes a list with elements describing what it should do each iteration, but it can only be used once). There are three conceptual parts here, regardless of syntax (it can be / just as well as ):the wrapping constructincl. exception handlingthe opening+closing codethe wrapped codeWrapping just "the opening+closing code" is the easiest, the other answer is one possible way, but it leaves the repeating  and  parts.Wrapping the entire construct is harder since you'll have to pass a code chunk to your would-be subroutine, and Python intentionally omits anonymous code blocks - you'd have to  and then immediately use it which is rather awkward.a decorator or passing your code as a callback are two possibilities.If your code can be reduced to a pattern (like a set of messages), you can pass just that pattern instead and have the subroutine process it.


Answer URL
https://docs.python.org/3/library/os.html?highlight=fdopen#os.fdopen
https://docs.python.org/3/library/logging.html?highlight=logging#module-logging
