Natural Text
I am trying to unittest parsing functions which take a filepath and return some of the file contents. I would like to be able to pass these functions strings of data for testing purposes.I understand that I can pas csv.reader() either StringIO or a file_handle (e.g. csv.reader(StringIO("my,data") or csv.reader(open(file))), but I can't see a way that I can pass a StringIO object in place of a filepath since open(StringIO("my, data")) fails. Equally I want to have the file open/close logic in these parsing methods rather than in the main bulk of my code as that would clutter my main code and also mean I have to re-write all the file IO interfaces!It seems my choices are:Rewrite all the existing code so that it passes file handles to the parsing functions - this is a real pain!Use mock.patch() to replace the open() method - this should work, but seems more complex than this task should require!Do something which I haven't yet thought of, but am convinced must exist!
You can use temporary files. If you really prefer not to use the hard disk, you can use StringIO to replace your files, and redefine the builtin  function, like so:This outputs:
If you don't want to change the interface to accept open file objects like , look at the testfixtures module. I have used it to manage files and directories for unit tests, although I usually prefer to pass in  objects.If you don't like that, then patching  sounds like a reasonable strategy. I haven't tried it, myself.
For others looking for this in future I was able to use Mock to do this quite effectively.


Answer URL
