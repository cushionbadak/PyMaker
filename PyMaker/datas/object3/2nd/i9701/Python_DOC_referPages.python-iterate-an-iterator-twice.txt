Natural Text
Edit: There is a similar question here that deals with iterator resetting. The accepted answer below however addresses the actual issue of nested iterators, and handles an easy to miss issue, whereby the nested iterator doesn't reset.Is there any way to iterate over an iterator twice in python?In the example code below I can see that the second iteration is operating on the same object as the first, and thus yields a weird result. Contrast this with the C# below that yields the result I'm after.Is there any way to do what I want. I was wondering if I could make a copy of the iterator or "retrieve" the function it came from, but maybe there's a simpler way. (I know I could just call  twice in the toy example below, but that's useless if I don't know where the iterator came from and isn't what I'm after!).givesContrast with:Which gives:
You could use  to create multiple copies of the generator
itertools.tee creates independent iterators from a single iterable. However, once new iterables are creates, the original iterable should not be used anymore.
I find using list comprehension for this type of problem is most effective at getting your desired result. output:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.tee
https://docs.python.org/3/library/itertools.html#itertools.tee
