Natural Text
I have a class that is implemented in cython containing c-pointers which I'm trying to use together with python's multiprocessing module. The class takes a DLL-file to return an instance of the class.The problem I have is that while the instances preserve their data type, they seem to be empty, i.e. I can access all their class functions but they've lost all their instance values I set before they entered. The code containing special_class is very big so I'm not able to include it.Above script gives me the outputThe correct output should be in the style ofIf I create the instances inside the function run_task it will work fine, but I'm looking for a way to make it work by creating the instances in the main process. Is this possible?
The multiprocessing library works by pickling objects and then piping the data to other spawned processes. The issue is that your  is unpicklable.If I create the instances inside the function run_task it will work fineThis works because then the object does not need to be pickled, which works around the issue.You need to make your  picklable. This can be done in various ways. They are all documented here: https://docs.python.org/3/library/pickle.html#pickle-instBasically, there are 3 mechanisms:Use a custom picklerImplement a  method on Implement  and  methods on  (if your class instances have states)I have a feeling that you have a reference to an external object in your . In that case, refer to: https://docs.python.org/3/library/pickle.html#persistence-of-external-objects
I believe multiprocessing.Process pickles all its arguments. So you need to tell Python how to pickle special_class. You just need to implement method special_class.__reduce__ so that the data can be pickled properly.
It seems as if you are making  and  both the full  module. If you are trying to make them a certain class, either do:(which I recommend) or The  is probably appearing because the methods you input  and  into also accept the module, for some reason. I would suggest trying  and work it out.


Answer URL
https://docs.python.org/3/library/pickle.html#pickle-inst
https://docs.python.org/3/library/pickle.html#persistence-of-external-objects
https://docs.python.org/3/library/copyreg.html
