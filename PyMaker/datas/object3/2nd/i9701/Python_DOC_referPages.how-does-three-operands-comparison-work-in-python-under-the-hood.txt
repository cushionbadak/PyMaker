Natural Text
Can you please explain what does the syntactic parse tree look like for a chained comparison?As far as I understand in most of languages it constructs nodes based on operator associativity so in  there will be a boolean value either as a left- or right-hand operand.But in Python such expression is almost equivalent to  (with  only evaluated once). What is a generative grammar rule for such a transformation? Basically, what does a Python interpreter do to construct a parse tree in such case?
The comparison grammar is not that interesting here, it simply lets you append multiple comparators to an operator:So lets ask the Python parser directly, by using the  module (which simply asks the Python compiler itself to only return the Abstract Syntax Tree):So there is just a single  node, with multiple operators and comparators:(I omitted the  and  parts).This lets the interpreter evaluate comparators as needed (e.g. if  is false, the remaining comparators don't have to be considered).The resulting bytecode uses conditional jumps to skip remaining comparisons:


Answer URL
https://docs.python.org/3/reference/expressions.html#comparisons
https://docs.python.org/3/library/ast.html
