Natural Text
I'm writing a python(2.7) script that writes a file and has to run on linux, windows and maybe osx.Unfortunately for compatibility problems I have to use carriage return and line feed in windows style.Is that ok if I assume:Do I have to considerate an else?os.name has other alternatives ('posix', 'nt', 'os2', 'ce', 'java', 'riscos'). Should I use platform module instead?Update 1:1. The goal is to use '\r\n' in any OS.2. I'm receiving the str fromI'm not reading a file.3. My fault, I should probably check the os.linesep instead?  Solution recap: thanks to @Martijn Pieters
Python file objects can handle this for you. By default, writing to a text-mode file translates  line endings to the platform-local, but you can override this behaviour.See the  option in the  function documentation:newline controls how universal newlines mode works (it only applies to text mode). It can be , , , , and . It works as follows:When reading input from the stream, if newline is , universal newlines mode is enabled. Lines in the input can end in , , or , and these are translated into  before being returned to the caller. If it is , universal newlines mode is enabled, but line endings are returned to the caller untranslated. If it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated.When writing output to the stream, if newline is , any  characters written are translated to the system default line separator, . If newline is  or , no translation takes place. If newline is any of the other legal values, any  characters written are translated to the given string.(the above applies to Python 3, Python 2 has similar behaviour, with  giving you the Python 3 I/O options if needed).Set the  option if you need to force what line-endings are written:In Python 2, you'd have to open the file in binary mode:or use  and write Unicode text:(but pick appropriate encodings; it is always a good idea to explicitly specify the codec even in Python 3).You can always use the  constant if your program needs to know the appropriate line separator for the current platform.


Answer URL
https://docs.python.org/3/library/functions.html#open
https://docs.python.org/3/library/os.html#os.linesep
