Natural Text
During a test phase, I would like to modify a part of my source code. For instance, I don't need to plot, so the code responsible for plotting can be commented. Is there a proper tool in unittest module to do so? Another question is regarding the decorator @patch. Is there a way I can put them into source code in runtime during testing?
As Ohad the Lad already said, mocks are at your help.There are several ways how to mock a function, but in general, you will decorate your test-functions - not the function to mock!In your case the code could look as follows:This will replace all calls to the  with MagicMocks and hinder the draw-execution. If all of your test-methods need to mock the draw-call, the mock decorator could also be applied to the class instead. You only have to make sure then, that all your test-methods accept the mock as second argument (as the  does). Further you could mock any return values the draw() function may have by setting  in the test-method. Attention: This has to happen prior to the call of the function which calls the mock, otherwise the return-values will not be applied.For more information on mocking refer to the docs python-docs. They are quite comprehensive.One last thing; As Jonathon Reinhart already mentioned, if you feel it difficult to write your tests it may be good to refactor your code before. This will not only make it more testable, but more readable as well! 
Try working with mock,As it sounds it mocks your code and can be manipulated thru the test.You may mock an method returned val or an object instance etc etc.https://www.toptal.com/python/an-introduction-to-mocking-in-python


Answer URL
https://docs.python.org/3/library/unittest.mock.html
