Natural Text
Can somebody explain the following?Why is the id the same, but the lists are different?Is there difference in list creation?Why is this happening? I get two different lists. Why not only one, or three or more?
You used  wrong.  takes the memory id of an object that is discarded immediately. After all, nothing is referencing it anymore once  is done with it. So the next time you use  Python sees an opportunity to re-use the memory and lo and behold, those addresses are indeed the same. However, this is an implementation detail, one you can't rely on, and it won't always be able to reuse the memory address.Note that  values are only unique for the lifetime of the object, see the documentation:This is an integer which is guaranteed to be unique and constant for this object during its lifetime. Two objects with non-overlapping lifetimes may have the same  value.(Bold emphasis mine).That  can't re-use the memory location is probably due to the extra heap mutations caused by pushing the current frame on the stack to call a function, then popping it again when the  call returns.Both  and  produce a new empty list object; but you need to first create references to those separate lists (here  and ):The same happens when you used . The Python interactive interpreter has a special global name, , that you can use to reference the last result produced:That creates an extra reference, so the  method, and by extension, the empty list you created for it, are still considered active. The memory location is not freed and not available for the next list you create.But executing  again, Python now binds  to that new method object. Suddenly the previous  method is no longer referenced by anything and can be freed, and so is the list object. The third time you execute  the first memory location is available again for reuse, so Python does just that:You never create more than two lists; the previous one (still referenced by ) and the current one. If you wanted to see more memory locations, use variables to add another reference.


Answer URL
https://docs.python.org/3/library/functions.html#id
