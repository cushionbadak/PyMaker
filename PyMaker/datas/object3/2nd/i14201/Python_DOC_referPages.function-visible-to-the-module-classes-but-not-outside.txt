Natural Text
According to http://www.faqs.org/docs/diveintopython/fileinfo_private.html:Like most languages, Python has the  concept of private elements: Private  functions, which can't be called from  outside their moduleHowever, if I define two files:and:when i run  it prints out  without giving any exception. Is diveintopython wrong, or did I misunderstand something? And is there some way to do define a module's function as private?
In Python, "privacy" depends on "consenting adults'" levels of agreement - you can't force it (any more than you can in real life;-).  A single leading underscore means you're not supposed to access it "from the outside" -- two leading underscores (w/o trailing underscores) carry the message even more forcefully... but, in the end, it still depends on social convention and consensus: Python's introspection is forceful enough that you can't handcuff every other programmer in the world to respect your wishes.((Btw, though it's a closely held secret, much the same holds for C++: with most compilers, a simple  line before ing your  file is all it takes for wily coders to make hash of your "privacy"...!-))
There may be confusion between class privates and module privates.A module private starts with one underscoreSuch a element is not copied along when using the  form of the import command;  it is however imported if using the  syntax  (see Ben Wilhelm's answer)Simply remove one underscore from the a.__num of the question's example and it won't show in modules that import a.py using the  syntax.A class private starts with two underscores  (aka dunder i.e. d-ouble under-score) Such a variable has its name "mangled" to include the classname etc.It can still be accessed outside of the class logic, through the mangled name.Although the name mangling can serve as a mild prevention device against unauthorized access, its main purpose is to prevent possible name collisions with class members of the ancestor classes. See Alex Martelli's funny but accurate reference to consenting adults as he describes the convention used in regards to these variables.
This question was not fully answered, since module privacy is not purely conventional, and since using import may or may not recognize module privacy, depending on how it is used.If you define private names in a module, those names will be imported into any script that uses the syntax, 'import module_name'. Thus, assuming you had correctly defined in your example the module private, _num, in a.py, like so....you would be able to access it in b.py with the module name symbol:To import only non-privates from a.py, you must use the from syntax:For the sake of clarity, however, it is better to be explicit when importing names from modules, rather than importing them all with a '*':
Python allows for private class members with the double underscore prefix.  This technique doesn't work at a module level so I am thinking this is a mistake in Dive Into Python.Here is an example of private class functions:
You can add an inner function:Something like that if you really need that level of privacy.
This is an ancient question, but both module private (one underscore) and class-private (two underscores) mangled variables are now covered in the standard documentation:The Python Tutorial » Classes » Private Variables
embedded with closures or functions is one way.  This is common in JS although not required for non-browser platforms or browser workers.In Python it seems a bit strange, but if something really needs to be hidden than that might be the way.  More to the point using the python API and keeping things that require to be hidden in the C (or other language) is probably the best way.  Failing that I would go for putting the code inside a function, calling that and having it return the items you want to export.
Python has three modes via., private, public and protected .While importing a module only public mode is accessible .So private and protected modules cannot be called from outside of the module i.e., when it is imported .


Answer URL
https://docs.python.org/3/tutorial/
https://docs.python.org/3/tutorial/classes.html
https://docs.python.org/3/tutorial/classes.html#tut-private
