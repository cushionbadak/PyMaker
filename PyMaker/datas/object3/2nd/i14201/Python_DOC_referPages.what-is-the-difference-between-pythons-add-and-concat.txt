Natural Text
The list of Python's standard operators includes both  and . Both of them are usually invoked by . My question is, what is the difference between them? Is there a scenario where one would be used rather than the other? Is there any reason you would define both on a single object?Here's the documentation I found the methods mentioned in.Edit: Adding to the weirdness is this documentation:Finally, sequence types should implement addition (meaning concatenation) and multiplication (meaning repetition) by defining the methods , , , ,  and  described below; they should not define  or other numerical operators.
If you check the source for the  module (add, concat), you will find these definitions for those functions:So there is actually no difference except that  actually requires a sequence type. Both functions use the  operator which effect depends on the types you add.In general, using the  module is not that useful most of the time. The module is mostly used when you need to pass a function that performs an operation, for example to functional functions like , , or . But usually, you can just use the  operator directly.As for the underscore functions ( and ), these are just aliases:But those are of course not related to the special methods used to overload operators for custom types. They are functions that match the same name as those special methods, probably to make them appear similar. Note that there is no special  method on objects though.Implementing  on a custom type will however affect how the operator module functions work, for example:As you can see,  will use the implementation of the special method ; but the reason for that is that the implementation of  just uses the  operator (which behavior is explicitely defined by the special  method).
: Return , for  and  numbers *.: Return  for  and  sequences.What's the difference?For example, you can't concatenate integers:actually  just does , hence it works on sequences too.
As per docs,  Return a + b, for a and b numbers. Return a + b for a and b sequences.operator.__add__(a, b):It will just try to perform  and give the result.Eg. operator.__concat__(a, b):Here, it will check if  has attribute . If it does not have  attribute it raises an exception otherwise then try to perform .Eg.On performing this operations on numbers, it will raise an exception.When performed on two strings, it perform string concatenation.


Answer URL
https://docs.python.org/3/library/operator.html
https://docs.python.org/3/library/functions.html#map
https://docs.python.org/3/library/functions.html#filter
https://docs.python.org/3/library/functools.html#functools.reduce
https://docs.python.org/3/reference/datamodel.html#object.__add__
