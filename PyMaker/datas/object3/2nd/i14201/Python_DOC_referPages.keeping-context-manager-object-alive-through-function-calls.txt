Natural Text
I am running into a bit of an issue with keeping a context manager open through function calls. Here is what I mean:There is a context-manager defined in a module which I use to open SSH connections to network devices. The "setup" code handles opening the SSH sessions and handling any issues, and the teardown code deals with gracefully closing the SSH session. I normally use it as follows:In order to keep the SSH session open and not have to re-establish it across function calls, I would like to do add an argument to "do_stuff" which can optionally return the SSH session along with the data returned from the SSH session, as follows:I would like to be able to call this function "do_stuff" from another function, as follows, such that it signals to "do_stuff" that the SSH handle should be returned along with the output.However the issue that I am running into is that the SSH session is closed, due to the do_stuff function "returning" and triggering the teardown code in the context-manager (which gracefully closes the SSH session).I have tried converting "do_stuff" into a generator, such that its state is suspended and perhaps causing the context-manager to stay open:And calling it as such:However this approach does not seem to be working in my case, as the context-manager gets closed, and I get back a closed socket.Is there a better way to approach this problem? Maybe my generator needs some more work...I think using a generator to hold state is the most "obvious" way that comes to mind, but overall should I be looking into another way of keeping the session open across function calls?Thanks
I found this question because I was looking for a solution to an analogous problem where the object I wanted to keep alive was a pyvirtualdisplay.display.Display instance with selenium.webdriver.Firefox instances in it.I also wanted any opened resources to die if an exception were raised during the display/browser instance creations.I imagine the same could be applied to your database connection.I recognize this probably only a partial solution and contains less-than-best practices. Help is appreciated.This answer is the result of an ad lib spike using the following resources to patch together my solution:https://docs.python.org/3/library/contextlib.html#contextlib.ContextDecoratorhttp://www.wefearchange.org/2013/05/resource-management-in-python-33-or.html(I do not yet fully grok what is described here though I appreciate the potential. The second link above eventually proved to be the most helpful by providing analogous situations.)I had a semi-expected result with the following:


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.ContextDecorator
