Natural Text
I have a set of strings, e.g.I simply want to find the longest common portion of these strings, here the prefix. In the above the result should beThe stringsshould result in the prefixIs there a relatively painless way in Python to determine the prefix (without having to iterate over each character manually)?PS: I'm using Python 2.6.3.
Never rewrite what is provided to you:  does exactly this:Return the longest path prefix (taken  character-by-character) that is a prefix of all paths in list. If list  is empty, return the empty string (). Note that this may return  invalid paths because it works a character at a time.For comparison to the other answers, here's the code:
Ned Batchelder is probably right. But for the fun of it, here's a more efficient version of phimuemue's answer using . As an affront to readability, here's a one-line version :)
Here's my solution:
The following is an working, but probably quite inefficient solution.For small sets of strings, the above is no problem at all. But for larger sets, I personally would code another, manual solution that checks each character one after another and stops when there are differences. Algorithmically, this yields the same procedure, however, one might be able to avoid constructing the list .
Just out of curiosity I figured out yet another way to do this:As Ned pointed out it's probably better to use , which is a pretty elegant function.
The second line of this employs the reduce function on each character in the input strings.  It returns a list of N+1 elements where N is length of the shortest input string.Each element in lot is either (a) the input character, if all input strings match at that position, or (b) None.  lot.index(None) is the position of the first None in lot: the length of the common prefix.  out is that common prefix.
Here is another way of doing this using OrderedDict with minimal code.
Here's a simple clean solution. The idea is to use zip() function to line up all the characters by putting them in a list of 1st characters, list of 2nd characters,...list of nth characters. Then iterate each list to check if they contain only 1 value.output: my_prefix_


Answer URL
https://docs.python.org/3/library/os.path.html#os.path.commonprefix
