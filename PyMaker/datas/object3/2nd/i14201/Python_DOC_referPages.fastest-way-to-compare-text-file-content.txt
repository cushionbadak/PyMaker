Natural Text
I have a question to help streamline my programming. So I have this file  and in it I want to look through it and compare it with a list of words  and each time the word is found it adds  to an integer. I was just wondering if there was a faster way to do this? The text files could be rather larger and the list of words will be much larger. 
You can convert the  to a , so that the lookups will be faster. This should give a good performance boost to your program, because looking up a value in a list has to traverse the list one element at a time (O(n) runtime complexity), but when you convert the list to a set, the runtime complexity will reduce to O(1) (constant time). Because sets use hashes to find the elements.And then whenever there is a match, you can use  function to count it like thisBoolean values and their integer equivalentsIn Python, the result of boolean expressions will be equal to either  or  for  and  respectively.So whenever you check if , the result will be either  or  and we  all those values.The above seen code is functionally equivalent toNote: In case you really wanted to get 's in a list whenever there is a match, then you can simply convert the generator expression to  to a list comprehension, like thisFrequency of wordsIf you actually wanted to find the frequency of individual words in the , then you can use  like thisThis will internally count the number of times each of the words in  occur in the file.As per the comment, you can have a dictionary where you can store positive words with positive score, and negative words with negative score and count them like thisHere, we use  dictionary to get the value stored against the word and if the word is not found in the dictionary (neither a good word nor a bad word) then return the default value .
You can use  to find the intersection between a set and list so as a more efficient way put your words within a  and do :Note that the preceding solution is based on your code that you added 1 to a list. of you want to find the final count you can use a generator expression within  :


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
