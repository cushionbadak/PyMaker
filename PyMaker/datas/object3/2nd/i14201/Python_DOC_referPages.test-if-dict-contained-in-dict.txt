Natural Text
Testing for equality works fine like this for python dicts:But now my second dict contains some additional keys I want to ignore:Is there a simple way to test if the first dict is part of the second dict, with all its keys and values?EDIT 1:This question is suspected to be a duplicate of How to test if a dictionary contains certain keys, but I'm interested in testing keys and their values. Just containing the same keys does not make two dicts equal.EDIT 2:OK, I got some answers now using four different methods, and proved all of them working. As I need a fast process, I tested each for execution time. I created three identical dicts with 1000 items, keys and values were random strings of length 10. The  and  got some extra key-value pairs, and the last non-extra key of the  got a new value. So,  is a subset of , but not of . Using module  with 10000 repetitions, I got:I guessed the last method is the slowest, but it's on place 2. But method 1 beats them all.Thanks for your answers!
You can use a dictionary view:Dictionary views are the standard in Python 3, in Python 2 you need to prefix the standard methods with . They act like sets, and  tests if one of those is a subset of (or is equal to) another.Demo in Python 3:This works for non-hashable values too, as the keys make the key-value pairs unique already. The documentation is a little confusing on this point, but even with mutable values (say, lists) this works:You could also use the  function with a generator expression; use  as a sentinel to detect missing values concisely:but this isn't as readable and expressive as using dictionary views.
if you know that none of the values can be , it will simplify to:
So, you basically want to check if one dictionary is a subset of another.Prints: In case you want to abstract out the subset/superset part:Note: this will fail to work, if any value is a mutable object. Hence you can add an additional step (convert mutable object to immutable analog) in the function to overcome this limitation.
# Updated Ans:METHOD-1: Using Dictionary Views:As Martijn suggested, We can use dictionary views to check this.  acts as a set. We can perform various set operations on this like intersection, union etc. (Check this link.)We check if  is less than equal to . This evaluating to True means  is a subset of METHOD-2 Using issubset() operation of sets:(DISCLAIMER: This method has some redundancy and requires all values to be hashable. Method-1 is suggested to be followed to handle all cases. Thanks Martijn for the suggestions.)Use  attribute of a dictionary to get a list of (key,value) tuples and then use issubset() operation of sets. This will check for both the keys and the equality..


Answer URL
https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
