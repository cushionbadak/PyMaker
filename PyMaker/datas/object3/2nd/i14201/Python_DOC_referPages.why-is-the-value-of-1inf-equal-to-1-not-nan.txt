Natural Text
Why is  ?I believe it should be , just like  or .How is exponentiation implemented on floats in python?  would get correct result :/
You are right, mathematically, the value of 1∞ is indeterminate.However, Python doesn't follow the maths exactly in this case. The document of  says:Return  raised to the power . Exceptional cases follow Annex ‘F’ of the C99 standard as far as possible. In particular,  and  always return , even when  is a zero or a NaN.
Floating-point arithmetic is not real-number arithmetic.  Notions of "correct" informed by real analysis do not necessarily apply to floating-point.In this case, however, the trouble is just that  fundamentally represents two similar but distinct functions:Exponentiation with an integer power, which is naturally a function RxZ --> R (or RxN --> R).The two-variable complex function given by  restricted to the real line.These functions agree for normal values, but differ in their edge cases at zero, infinity, and along the negative real axis (which is traditionally the branch cut for the second function).These two functions are sometimes divided up to make the edge cases more reasonable; when that's done the first function is called  and the second is called ; as you have noticed  is a conflation of the two functions, and uses the edge cases for these values that come from .
Technically 1^inf is defined as limit(1^x, x->inf). 1^x = 1 for any x >1, so it should be limit(1,x->inf) = 1, not NaN


Answer URL
https://docs.python.org/3/library/math.html#power-and-logarithmic-functions
