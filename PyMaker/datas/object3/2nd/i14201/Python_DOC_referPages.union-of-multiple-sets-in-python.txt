Natural Text
I have a list of lists. My aim is to check whether any one sublist has anything in common with other sublists(excluding the first index object to compare). If it has anything in common then unify those sublists. For example, for this example my final answer should be something like:I can understand that I should convert the sublists to sets and then use union() and intersection() operation. But what I am stuck with is to how to compare each set/sublist. I can't run a loop over the list and compare each sublist one by one as the contents of the list would be modified and this would lead to error.What I want to know is there any efficient method to compare all the sublists(converted to sets) and get union of them?
The itertools module makes short work of this problem:Another way to do it is to unpack the list into separate arguments for union():The latter way eliminates all duplicates and doesn't require that the inputs first be converted to sets.  Also, it doesn't require an import.
Using the unpacking operator :(Thanks Raymond Hettinger for the comment!)(Note that will unpack to )
I personally like the readability of , paired with a simple conditional function, something likeOf course you can cast this result to a 2d list if you desire  I will note that this is something like 3x slower than the  answer.
You can use itertools to perform this action. Let us assume that your list has a variable name A
Update:Thanks for the comments
And if you really want a list of a list as a final result And if you don't like recoding a lambda function for the list addition :EDIT : after your recommendation about using itertools.chain instead of list.__add__ I ran a timeit for both with the original variable used by the original poster.It seems that timeit times list.__add__ around 2.8s and itertools.chain around 3.5 seconds.I checked on this page and yes, you were right with the itertools.chain contains a from_iterable method that grants a huge performance boost. see below with list.__add__, itertools.chain and itertools.chain.from_iterable.Thank you very much for your advises :)


Answer URL
https://docs.python.org/3/library/itertools.html#module-itertools
