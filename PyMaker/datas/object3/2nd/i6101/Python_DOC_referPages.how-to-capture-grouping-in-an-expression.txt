Natural Text
I'm trying to record grouping in expressions, like:These are expressions a user can write to configure a SQL query, so the above would ultimately be expressed as .I tried this:I would expect this code :to print the  but it does not. I just see :It seems I am not using a call, so something like , so  is not called.Is there a way to achieve what I want? You can check the expected which is what I want to have (and and or works, it's just I don't have the parenthesis around part of the expression). 
No, the  parentheses in your expression are not a call expression. They are just there to group your expressions. Python does not preserve grouping parentheses. They only are used by the parser to build an abstract syntax tree, and grouping influences in what order expressions are executed.The expressionis parsed into a tree of  objects, like this: binds more tightly here, so  is executed before the  operator is executed. That's because the  operator has a lower precedence than .Parentheses tell the parser to build separate trees for everything between  before putting that into the tree, so the expressionbecomesThe parentheses are gone, all that is left is the tree of expressions, and Python knows know in what order you need to execute those expressions; the  is executed first, on  and , and the result of this expression is then used in the  operator.You can look at those AST objects with the  module:(I unwrapped the outer  and  objects to focus on the  trees, and manually indented the nested objects).and you can see the order of operations change when you look at the resulting bytecode with the  module:( puts a value on the stack, and  and  take the top 2 values from the stack and push back the result).All this means that parentheses cannot be retrieved this way. They are gone, they were only there to inform the order of operations.What you need to do then, is maintain the syntax tree; you can still reconstruct that from the execution. You could just always include parentheses when you then output your result:When printing a  object, you'll always get parentheses:This is fine, because the SQL parser treats parentheses the same way; just to group expressions.The next step is to add precedence information to your binary operators. You can then decide if you have to have parentheses around a sub-expression or not; only when the left sub-expression has a lower precedence, or the right has a lower or equal precedence, would you need them:Now parentheses only show up when the expression requires them:If you are going to extend this system (adding in more operator types), you'll have to expand on the concept of precedence there; the above example only has  and  for the binary operators, but you'll have to naturally expand on these values if you have more.I'd also strongly urge you to look at SQLAlchemy, which already implements all this, and much more.


Answer URL
https://docs.python.org/3/reference/expressions.html#operator-precedence
https://docs.python.org/3/library/ast.html
https://docs.python.org/3/library/dis.html
