Natural Text
I'm working on a dataset from a MOOC.  I have a lot of python3 code snippets that I need to run and get the results from.  To do this I've written a python script that loops over each snippet.  For each snippet I:Create new StringIO objectsSet  and  to my stringIO buffersExecute the code snippet in a  objectJoin the threadLog the results in the stringIO buffersRestore stdout and stderr This works fine for "correct" code, but this has issues in other cases:When the code has an infinite loop, thread.join doesn't kill the thread.  The thread is a daemon thread, so it runs quietly in the background until my loop finishes.When the code has an infinite loop with a , the thread starts overwriting my actual stdout when I set it back to the default (away from the StringIO buffer).  This pollutes my reporting.Here is my current code:To handle this case, I've been trying to use  and/or  to run the code in a process (then I can call ), but I'm not having any success capturing stdout/stderr.So my question is:  How can I redirect or capture stdout/stderr from a process?  Alternatively, is there some other way I could go about trying to run and capture the output of arbitrary code?(And yes, I know this is a bad idea in general; I'm running it in a virtual machine just in case there is malicious code in there somewhere)Python version is 3.5.3UpdateIt occurs to me that there is a little more flexibility in this situation.  I have a function,  that accepts a the code submission as a string and alters it.  Mostly I've been using it to swap out the value of some variables using regular expressions.Here is an example implementation:I could use the preprocess function to help redirect STDOUT
Communicating with running process is not straightforward in Python. For some reason you can only do it once in subprocess life cycle. From my experience, it is best to run a thread that starts a process and after timeout gets its output and terminates the subprocess.Something like:So, run a threaded executioner that calls for . It should handle the inputs and save the results.Another idea is using a webserver to do the IPC. See this link 
What about ? You could call  with it, or if it is longer, just write the snippet to a temporary  file.  (and indeed, all the other functions in ) has a  parameter.The general idea is then:Example runs in IPython:Note that  returns a  sequence, so you will have to convert it into . Or you can use the  parameter of .


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.check_output
https://docs.python.org/3/library/subprocess.html#subprocess.check_output
