Natural Text
I should note that we are only allowed to use built in python string functions and loop functions.A = 'bet[bge]geee[tb]bb'B = 'betggeeetbb'The square brackets mean any single one of the characters inside the bracket can be used so you could havebetgeeebbbetgeeebbbetgeeebbbetgeeebbbetgeeebbbetgeeebbHow do I check A will have a combination that can be found within B.A can have any number of brackets, with a minimum of 2 characters and a maximum of 4 characters in each square bracketThank you
Read up on the regular expressions library. The solution is literally the  function, whose documentation includes the following bit: Used to indicate a set of characters. In a set:Characters can be listed individually, e.g. [amk] will match 'a', 'm', or 'k'.Since regular expressions use backslashes for their own purpose (beyond Python's normal escapes, e.g.  to represent a newline), raw strings are idiomatic in the matching string.You can also verify that it doesn't match if (say) the second bracket is not matched:Before you go about adding this liberally to an existing project, make sure you understand:What is the difference between re.search and re.match?What is the cost of creating a regular expression? How can you avoid this cost if the regular expression is used repeatedly?How can you extract parts of a matching expression (e.g. the character matched by  in your example)?How can you perform matches on strings that contain newlines?Finally, when learning regular expressions (similarly to learning class inheritance), it's tempting to use them everywhere. Meditate on this koan from Jamie Zawinski:Some people, when confronted with a problem, think “I know, I'll use regular expressions.” Now they have two problems.
It's easiest to break your problem up into simpler tasks. There are many ways to convert your pattern from just a plain string into something with more structure, but here's something that uses only plain string operations to get you started:


Answer URL
https://docs.python.org/3/library/re.html
https://docs.python.org/3/tutorial/introduction.html#strings
https://docs.python.org/3/library/re.html#re.search
https://docs.python.org/3/library/re.html#re.match
https://docs.python.org/3/library/re.html#re.compile
https://docs.python.org/3/library/re.html#re.match.group
https://docs.python.org/3/library/re.html#re.M
