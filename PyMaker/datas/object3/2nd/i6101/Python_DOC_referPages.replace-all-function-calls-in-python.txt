Natural Text
I am working with a piece of code that looks like this:My code:As you can see, the  function is imported at the top of the code. The class  makes a call to a  function. It does so, in several places and not only in .I want the class to use my custom distance function. However, the class does not let me pass it in the constructor and I cannot modify the code of . How would I do this? Is this possible via subclassing? I tryed the following, which did not work:
You can use the  function as follows:distance.py:mydistance.py:a.py:main.py:Output is:Depending on your use case, you might want to put the  statement somewhere else (such as in the call site). For example:Patching causes some overhead. Another solution (basically the same as oetoni suggests) is to reassign the attribute (remember to ):
you can do this immediately from you code without adding new imports or using mock.patch or any third class B. Immediately from yourcode where you are referencing ANow you just need to do a small change on you code, don't just do  but import directly  that way we control all the variables in it also the imports ;) and as such we can. Then we can use it's local variable name in order to catch it and change it in runtime :D as such:Supposed distance() function in import of Adistance.pythen I assume the name baseA for the file that contains the class AbaseA.pyfinally youcode file that contains you running code and the place from where we want to modify the dist() that it is imported in baseAyourcode.pyI successfully managed to change the behavior of dist in baseA as such :) remember not to put parenthesis because we are passing the function as an object in order to assign its behavior to the baseA.dist that is imported from distance.py file testing the solution
You can do this using the  decorator in unittest.mock.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch
https://docs.python.org/3/library/unittest.mock.html
