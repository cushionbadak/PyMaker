Natural Text
I have a dataframe which looks something like :The objective is to get the 3 highest s's from each row and if there is a match then select the maximum index. For example, for the first row, there is a match between s2, s41 and s47 so s47 will be selected along with s41. So the selection from row 1 would be s14, s47 and s41. There are more than 2 million records and more than 250 s's and hence I need an efficient way of doing this. I have tried with iterrows and then sorting each row but it is slow and takes more than an hour for all the data.The end objective would be to search for the s's ( s14, s47 , s41) in a dictionary where these values are the keys and getting the appropriate values from there.Can someone please help me in doing this efficiently.Thanks 
I would use heapq's :Note: If device_id is the index it's a little easier:
I don't know pandas, but I understand it is numpy-based, so here is a numpy solution. It uses argpartition to efficiently get the indices of the largest 4 in each row. Unfortunately, the algorithm used by numpy is not stable, so if the smallest two of those four are equal we must do a full sort, sort giving us the option of choosing a stable algorithm.Code (Couldn't check with 2m rows b/c memory on my rig, but 0.5m takes 2 sec or so):Prints


Answer URL
https://docs.python.org/3/library/heapq.html#heapq.nlargest
