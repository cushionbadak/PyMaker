Natural Text
Obviously, lists themselves are not thread safe. However, some operations on them are atomic meaning that no thread can force itself into the execution of that instruction.Assuming that L is a list: I know that Now assuming that I have a list of list; Further, assume the entire list structure is fixed but the individual values are not i.e. there will always be 2 lists of 3 items.I know that  is atomic meaning  will at some point change to exactly  however there is no guarantee when or for how long.Is  atomic?  is still atomic right?Do the answers to 1. and 2. hold irrespective of what the list items are i.e. list of objects?I think all the answers are yes, but don't know.
No. Generally no.We know that a single bytecode instruction is atomic in CPython, but a = does not have to result in a single bytecode instruction:This = op is interpreted into 3 bytecode instructions (from index 3 to 7),  that means one thread could give up GIL and let other thread in which makes modifications then return GIL to the first thread. This is where surprises happen.So whenever you need thread safety, use a lock.


Answer URL
https://docs.python.org/3/faq/library.html#what-kinds-of-global-value-mutation-are-thread-safe
