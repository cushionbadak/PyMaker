Natural Text
Let's say I have a list like this: . I need to get a random combination from this list eg . However I need all combinations to have equal probability so the chances of getting  should be the exact same as the chances of getting . My real list is 22 elements long so enumerating every single combination is impossible. My first thought was to use random.sample however that requires you to specify the number of elements, which would have to be randomly chosen but the probability would have to be (number of elements in this combination)/(number of elements in all combinations) which are gigantic numbers. Is there any better way? This will be run thousands of times so efficient solutions are appreciated.
There's a very efficient way to do this. The set of all combinations of a given set is known as the power set, the set of all subsets of the given set. If the set S contains m items, then there are  possible combinations in total, including the empty set and S itself.So to randomly select a combination from the power set of S we just need to choose a random number n from  as an index into the power set and then generate the combination corresponding to n. We can convert the index number n into a combination by looking at the binary expansion of n. There are m bits in n. We pair up those bits with the items in S. If a given bit is 1 then that item is selected for our combination, if it's a 0, we reject that item.Here's a short demo.outputI call the random  function at the start of the script with a fixed seed number. I find it's convenient to do that when developing code that uses pseudorandom numbers because it makes it easier to test and debug the code when the random numbers are reproducible. In a real application you should seed the radomizer with a system entropy source. You can easily do that by eliminating the  call, or by doing . If you want more randomness than what the standard Mersenee Twister generator offers, you can hook into the system's random source via the  class.
I'll use  to create an iterable for n choose i, then use  to combine all such combinations for i equals 1 to n.  The total number of combinations will be  so I'll pick a random integer from 0 to 2 ** n - 2.  Finally, use  to pluck that one from the iterable.Let's test itI suspect that over large numbers, we should see a fairly uniform distribution.  I'll use .  You can see that we have the correct number of observation types and of fairly uniform distribution.


Answer URL
https://docs.python.org/3/library/random.html#random.SystemRandom
