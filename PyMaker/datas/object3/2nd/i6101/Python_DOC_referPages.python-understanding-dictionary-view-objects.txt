Natural Text
I've been trying to understand built-in view objects return by , ,  in Python 3 or similarly by , , . There are other threads on that subject but none (even the doc) seems to described how they work internally. The main gain here seems to be efficienty compared to the copy of type  returned in Python 2. There are often compared to a window to the dictionnary items (like in this thread).But what is that window and why is it more efficient ?The only thing I can see is that the view objects seems to be  set-like objects, which are generally faster for membership testing. But is this the only factor ?Code sampleSo, my question is regarding this  class. How does that work internally?
Dict views store a reference to their parent dict, and they translate operations on the view to corresponding operations on the dict.Iteration over a dict view is more efficient than building a list and iterating over that, because building a list takes time and memory that you don't have to spend with the view. The old way, Python would iterate over the dict's underlying storage to build a new list, and then you would iterate over the list. A dict view gives you an iterator that walks through the dict's underlying storage directly, skipping the unnecessary list step.Dict views also support efficient containment tests and setlike intersection/difference/etc. operations, because they get to perform direct hash lookups on the underlying dict instead of iterating through a list and checking equality element by element.If you want to see the concrete implementation used by CPython, you can take a look in the official repository, but this implementation is subject to change. It has changed, repeatedly.
One of the main advantages is that views are dynamic:Therefore you do not need to regenerate the item, key or value list (as you would with ) if the dictionary changes. Think of the Python 2  as a type of copy of the dict -- the way it was when the copy was made. Think of Python 3  or the Python 2 equivalent of  as an up-to-date copy of the way the dict is now. (Same with .viewkeys(), .viewvalues() obviously.) The Python 3.6 documents have good examples of why and when you would use one. Value views are not set-like, since dicts can have duplicate values. Key views are set-like, and items views are set-like for dicts with hashable values.Note: With Python 3, the view replaces what Python 2 had with   or  Some may relying on  or  being a static representation of a dict's previous state may have a surprise. 


Answer URL
https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
https://docs.python.org/3/library/stdtypes.html?highlight=dict#dictionary-view-objects
https://docs.python.org/3/library/stdtypes.html?highlight=dict#dictionary-view-objects
