Natural Text
Suppose I have a list . If I want to combine all the adjacent  together to get , then what is the most efficient and elegant way of doing it? 
Use , something to the effect of:
Try this solution which is based on using regular expressions (regex) in python:Explanation:1) First we "import re" to use regex in python2) We then define the list3) We then convert the list to string4) We then use "sub(pattern, repl, string)" function from "re" module which looks for a pattern in a string and replaces it with "repl"5) Here the pattern is r'(b)\1+' (which means we are looking for groups of "b" letters which are adjacent)6) and we replace each group with just one "b"7) the output of "re.sub()" is a string (so in the last line we convert the output string back to list)Pythonic way ( Compact Mode ):NOTE: I also timed my code and compared it with the code suggested by @juanpa.arrivillaga. For one million iterations my code takes about 1.73 seconds on my machine to run. However, the code suggested by @juanpa.arrivillaga takes about 2.45 seconds.Good Luck ...
The most efficient way would be a single pass over the list test (although passing several times would be asymptotically the same) as for the most elegant, well it depends, in this case simple is better I guess:


Answer URL
https://docs.python.org/3/library/re.html
