Natural Text
Basically, I realize that I am writing the same test case () for a similar URL for multiple modelsI need to do this for more than 10 times. Which I have already done so.the only difference each time, is the following phrases "some_model", "some-model", and "some_field"I was wondering if there's a faster way to do this.I can think abstractly two ways:create a template in a text editor that somehow can generate the final test case which I then copy and paste. I am using sublime text 3 though I am okay to switch to another text editorThere's a way I can write slightly more code in the form of converting this test case into a behavior class that the individual test class can call. aka composition.Which one makes more sense or there's a different way to do this?Please note that BaseApi class is also inherited by other test class that do NOT have that repetitive test case method.
I guess what you want is "parameterized tests", standard  could do this with parameterized package:will yields: testing framework has better support builtin on parameterized tests, worth looking at.
You could create a list / dict of "some_model" to test, and use  (https://docs.python.org/3/library/unittest.html#distinguishing-test-iterations-using-subtests) for each of your "some_model" items.If you want a different  for each of your model, I think the multiple inheritance is the way to go:
Projects I work on we sometimes use mixin + "customization hooks" when a test needs to repeated. (and endpoints like the "shape-list-create" is subject to change/refactored)Example for question:How to split the customization hooks and what to put in mixin etc is based on the situation. In my opinion the goal is to have the actual test case easy to follow. (Maybe move the "post shape-list-create" into a separate function as it might not really be relevant for that test case)Another example, going a bit overboard with customizations but just to give an idea.
You can use pytest package for unit testing.It is very simple and easy to use. decorator can be used to achieve that functionality.An example for parametrized test cases is as follows:You can read more about this decorator in the docs'You can also use the  decorator to setup the test function.


Answer URL
https://docs.python.org/3/library/unittest.html#distinguishing-test-iterations-using-subtests
