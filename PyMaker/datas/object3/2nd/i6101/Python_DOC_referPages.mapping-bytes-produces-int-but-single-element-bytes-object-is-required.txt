Natural Text
Mapping a bytes type with the following lambdagives the errorThe documentation saysSince bytes objects are sequences of integers (akin to a tuple), for a bytes object b, b[0] will be an integer, while b[0:1] will be a bytes object of length 1. (This contrasts with text strings, where both indexing and slicing will produce a string of length 1)which explains why an int is passed. So if i would manually loop over the bytes object, i could access the elements with  instead of with .My question now would be if there is a way to make map produce bytes object of length 1, so that the unpack function gets what it expects.I found that this worksbut it seems like an ugly workaround to me. Is there a better, more concise way of doing this?
A more concise way doesn't exist yet from what I'm aware. A proposition has been made but it's still a draft.You still have some other options in order to make it appear more friendly, though. For example, a little generator that produces bytes:or, similarly but probably slower:Then wrap the bytes object in this  generator:Since you wrap  in , i.e you're after a list, I'd probably go with a comprehension instead of a :


Answer URL
https://docs.python.org/3/library/stdtypes.html#binary-sequence-types-bytes-bytearray-memoryview
