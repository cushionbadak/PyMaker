Natural Text
UPDATE:  How to access values in a nested dictionary, where one need two keys, the first to find the inner dict, the second to find the value at that key2.How does python access values from a nested dictionary, with two keys?  Or must I restructure the dictionary / create separate dictionaries?For example, I want to accessvalues for values for   for all "fist keys" such as List itemIn respect of structuring nested dictionaries, this would be the complexity per one (1) camera. There are 10 camera types in total and the goal is to rename, sort, extract info, etc. from mediafiles from these cameras in one bulk swipe:
You have nested dictionaries. Your outer dictionary keys all refer to another dictionary, which then has keys too. Python lets you chain the expressions there.So to access a specific inner value, you first access the outer dictionary:This produces another dictionary object, and you just apply another  key access expression to that result:If you need to access the same key on all nested dictionaries, you need to loop:Here  is a reference to each of the nested dictionaries in the  dictionary.A more complex example could be printing out all outer keys for which a condition on the values in the inner dictionary holds true. Like printing all keys for which  is : lets you iterate over all (key, nested dictionary) pairs, then simply treat that nested value as another dictionary object again to test the values.If all you are trying to do is track information on a homogenous set of properties (all the same values for multiple entries), consider using a custom class (where you can add methods) or a  generated class to track those fields:
You access the values the same way you assigned them:To access the values residing inside a nested dictionary, you need two keys: the first  to find the inner dict, and the second to find the value at .To access the values for the key  for all "fist keys" such as , , , you must iterate over , which gets you , and read the values at the desired location:Edit:(thanks to Suggestions from @MartijnPieters in the comments)if all you are going to do is look at the values, it is preferable to loop over dict.values() instead and save the repeated config[key1]:


Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
