Natural Text
I get the following error:For the code:The variable is not written until it is assigned. And the code seems to work.Is the syntax message a false alarm, or should a global be declared before being read? (instead of only declaring before being written)The code:Gets rid of the . But it seems wrong to make the global deceleration for a value that is only being read and not written.Should I ignore the syntax alarm?
No, you can't ignore it and, as of Python  this will cease to be a  and instead be updated to an error (). So you better fix it now or face it the prospect of it not executing in future versions () . See the docs on the  statement:Names listed in a  statement must not be used in the same code block textually preceding that global statement.As you noticed, this isn't a warning that is generated at run-time, it is generated when Python compiles your function object and notices a  statement containing a name () that has already been found as local.You should add the  statement before referencing  here and also do the same for  which falls victim to the same issue. For , though, you can be sneaky and take advantage of the fact that  must be parsed first. In short, switch the condition over so Python parses the  statement for it before the assignment statement:Since  is a directive for the parser, this yields the same behavior w/o the warning.Of course, using  is not a good practice. I can't see any reason why you'd require using them to be honest, you're always better off (and from a conceptual point of view and execution speed wise) to drop the usage of  and instead communicate with your function using arguments and return values.


Answer URL
https://docs.python.org/3/whatsnew/3.6.html#other-language-changes
https://docs.python.org/3/reference/simple_stmts.html#the-global-statement
