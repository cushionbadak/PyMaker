Natural Text
I'm using Python 3.5 and this is the code I'm dealing with at the moment:I think that type  is best when dealing with a single Collatz sequence. That's why  returns a list. However, I find it interesting to observe how this particular sequence develops when dealing with multiple parameters  in a row. That's why I created .I do not like  for a very simple reason: it only works properly if its parameter  is of type . In my opinion it's not the responsibility of  to make sure that a proper actual parameter is provided, in this case a  comprised of natural numbers. In my opinion the caller to  has to make sure that it's provided a correct parameter.I want  to work with single and multiple sequences.  returns a  and  returns a . Therefore my question: what's the elegant way to make sure that  always gets the correct data type for its parameter ? What can I do for  to properly work without  caring about the data type of its parameter ? My first idea was to change  to have it return a  instead of a  and changing  in order to process a . However, I don't like this approach because I don't want a  when dealing with a single sequence.Do you have any solutions to that? Thank you very much in advance.
the only way to do polymorphism for functions in python is to check the type of the argument given:if you want a function to behave differently depending on the type of the input this is the way to go.
If I understand it correctly, you want  to work with both a dict of collatz sequences or an individual collatz sequence. In the case of a dictionary, you want the function to return a dictionary of the sums of individual collatz sequences.You can use  to check whether the input  is a dictionary or a list and run different code for each case. The following code would work.However, if you what you want is sum of all sequences of the dict, you could use the following instead,
Python 3.4+ - functools.singledispatch lets you overload a function definition based on the argument's type.Calling  with something other than list or dict will raise a .


Answer URL
https://docs.python.org/3/library/functools.html#functools.singledispatch
https://docs.python.org/3/library/functools.html#functools.singledispatch
