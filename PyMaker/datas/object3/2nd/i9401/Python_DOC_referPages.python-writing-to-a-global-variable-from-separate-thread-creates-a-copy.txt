Natural Text
I am trying to create a global state variable, which is written in a callback method (event handler).However, the callback creates a copy (deep) on another memory location, which is not being seen (of course) by the other methods.Here is the situationThe output is then:Can anyone suggest me a way how to avoid this?In c++ its clear how to access pointer and mutex. Here however, I did not manage to find any ways to do a secure write on the variable...Thanks a lot in advance!
Since you're using multithreading, and not multiprocessing in your tags, I'll still go ahead and post this answer.. Might be helpful for some.Some objects are immutable, copied as you said. Other variables, such as dictionaries tend not to be and can be manipulated from functions or threats (not sure if threads only apply to certain cases).If you pass a  as a parameter to a thread for instance, that variable can be manipulated and that affects the original version of your variable.However, doing this is risky. There might be update collisions, access violations and in general just hard to keep track of where things happen.But here's an example of how to pass a  into a thread and present the change. It's crude, but gives you a working example.
The problem was actually somewhere else. :( The reason was, that Flask (the Webserver) was started in a separate thread and there some instances are copied for some reason. I did not dig any further, Just avoided to use Flask and switched to cherrypy and started it in a non-blocking mode.Thinkgs started to work there as expected.@torxed, thank you very much for your help. It indeed pointed me into the right direction!


Answer URL
https://docs.python.org/3/reference/datamodel.html
https://docs.python.org/3/tutorial/datastructures.html#dictionaries
