Natural Text
Here is the question:I have a file with these words:And it is asked to find the number of words, lines and characters.Below is my program, but the number of counts for the characters without space is not correct.The number of words is correct and the number of line is correct.What is the mistake in the same loop?The output is:I've looked on the site with multiple answers and I am confused because I didn't learn some other functions in Python. How do I correct the code as simple and basic as it is in the loop I've done?Whereas the number of characters without space is 35 and with space is 45.If possible, I want to find the number of characters without space. Even if someone know the loop for the number of characters with space that's fine.
Sum up the length of all words in a line:The whole program:Output:This:is a generator expression. It is essentially a loop in one line that produces the length of each word. We feed these lengths directly to :Improved versionThis version takes advantage of , so you save two lines of code, while keeping the readability:This line:opens the file with the promise to close it as soon as you leave indentation.It is always good practice to close file after your are done using it.
Remember that each line (except for the last) has a line separator.I.e. "\r\n" for Windows or "\n" for Linux and Mac.Thus, exactly two characters are added in this case, as 47 and not 45.A nice way to overcome this could be to use:
To count the characters, you should count each individual word. So you could have another loop that counts characters:That ought to do it. The wordslist should probably take away newline characters on the right, something like  perhaps.
This is too long for a comment.Python 2 or 3? Because it really matters. Try out the following in your REPL for both:Huh? The answer lies in unicode. That  is an 'n' with a combining diacritical. Meaning its 1 character, but not 1 byte. So unless you're working with plain ASCII text, you'd better specify which version of python your character counting function is for.
How's this? It uses a regular expression to match all non-whitespace characters and returns the number of matches within a string.OutputThe image below shows this tested on RegExr:
I found this solution very simply and readable:
It is probably counting new line characters. Subtract characters with (lines+1)
Here is the code:Check the output. I just tested it.
A more Pythonic solution than the others:The other answers here are manually doing what  does. There's no reason to reinvent the wheel.
You do have the correct answer - and your code is completely correct. The thing that I think it is doing is that there is an end of line character being passed through, which includes your character count by two (there isn't one on the last line, as there is no new line to go to). If you want to remove this, the simple fudge would be to do as Loaf suggested See csl's answer for the second part...
Simply skip unwanted characters while calling ,  or  the count,  or build a  from the  and take ,  or  the characters in the . I think this is the fastest.  
You have two problems. One is the line endings and the other is the spaces in between.Now there are many people who posted pretty good answers, but I find this method easier to understand:line.strip() removes the trailing and leading spaces. Then I'm subtracting the number of spaces from the total length.
It's very simple:
Here i got smallest program with less memory usage for your problemlines will be list of lines,so length of lines is nothing but number of lines.Next step data contains a string of your file contents(each word separated by a whitespace), so if we split data gives list of words in your file. thus, length of that list gives number of words. again if we join the words list you will get all characters as a single string. thus length of that gives number of characters.



Answer URL
https://docs.python.org/3/reference/expressions.html#generator-expressions
https://docs.python.org/3/library/functions.html?highlight=enumerate#enumerate
