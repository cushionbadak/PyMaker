Natural Text
Suppose I have two classes...Each class has its own keyword arguments, and one has positional arguments.Now suppose there is a function which creates an instance of each of these classes, using its own arguments to do so:Here I manually allocate the keyword arguments that the function received to the correct class. This is a bit tedious though - I have to duplicate the keywords in the function definition, and changing the classes will mean changing the function's arguments.Ideally, I would do something like this:Where each class would take all the keyword arguments and extract only those which are relevant to it. That's not what the above code would actually do of course, it will throw an Exception because  is not expecting an argument called .Is there anyway to do this? Some way of making the function take  as an argument and determine which arguments can go to which class?
To avoid all the repetitious typing you could create a utility function which uses the  module to examine the calling sequence of the functions / methods involved.Here's a runnable example of applying it to your code. The utility function is the one named :Output:
If you add  and  in  method of your classes you can achieve the behavior you are expecting. Like in the exaple below:But the caveat here is that if you print  and  it will return  and  as passed in the  parameters. 
Use inpect.signature to get the call signatures then filter  before creating the objects.The checks to see if the Parameter is a keyword parameter may be overkill.


Answer URL
https://docs.python.org/3/library/inspect.html#module-inspect
https://docs.python.org/3/library/inspect.html#introspecting-callables-with-the-signature-object
