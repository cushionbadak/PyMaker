Natural Text
This may have been asked in a similar context but I was unable to find an answer after about 20 minutes of searching, so I will ask.I have written a Python script (lets say: scriptA.py) and a script (lets say scriptB.py)In scriptB I want to call scriptA multiple times with different arguments, each time takes about an hour to run, (its a huge script, does lots of stuff.. don't worry about it) and I want to be able to run the scriptA with all the different arguments simultaneously, but I need to wait till ALL of them are done before continuing; my code:I want to do run all the  at the same time, and then wait till they are all done, how should I do this? I tried to use threading like the example here:But I do not think this is right. How do I know they have all finished running before going to my ?
You need to use join method of  object in the end of the script.Thus the main thread will wait till ,  and  finish execution.
Put the threads in a list and then use the Join method
I prefer using list comprehension based on an input list:
In Python3, since Python 3.2 there is a new approach to reach the same result, that I personally prefer to the traditional thread creation/start/join, package : https://docs.python.org/3/library/concurrent.futures.htmlUsing a  the code would be:The output of the previous code is something like:One of the advantages is that you can control the throughput setting the max concurrent workers. 
You can have class something like below from which you can add 'n' number of functions or console_scripts you want to execute in parallel passion and start the execution and wait for all jobs to complete..    
Maybe, something like
I just came across the same problem where I needed to wait for all the threads which were created using the for loop.I just tried out the following piece of code.It may not be the perfect solution but I thought it would be a simple solution to test:
From the  module documentationThere is a “main thread” object; this corresponds to the initial  thread of control in the Python program. It is not a daemon thread.There is the possibility that “dummy thread objects” are created.  These are thread objects corresponding to “alien threads”, which are  threads of control started outside the threading module, such as  directly from C code. Dummy thread objects have limited functionality;  they are always considered alive and daemonic, and cannot be ed.  They are never deleted, since it is impossible to detect the  termination of alien threads.So, to catch those two cases when you are not interested in keeping a list of the threads you create:Whereupon:


Answer URL
https://docs.python.org/3/library/threading.html#threading.Thread.join
https://docs.python.org/3/library/concurrent.futures.html
https://docs.python.org/3/library/threading.html#thread-objects
