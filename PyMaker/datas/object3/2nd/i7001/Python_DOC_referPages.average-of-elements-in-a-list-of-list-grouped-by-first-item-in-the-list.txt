Natural Text
My list looks like I want to find the averages of the other two columns in each of the inner lists grouped by the first column in each of the inner list. comes from I don't mind if I end up getting a dictionary or something, but I would prefer it remain a list.I've tried the following: SPLITTING THE ORIGINAL LIST SO the first column becomes KEY, and the second and third columns becomes VALUE, and converting it to a dictionary will give you the aggregate but the problem is I WANT TO TO PRESERVE THE DECIMAL PLACES, IT ROUNDS UP AND GIVES ME WHOLE NUMBERS INSTEAD OF FLOAT VALUESwhen what I would ideally want is,   (Don't mind if its a dictionary)Converted the second and third columns to float maybe using a for loop thinking, then it will give me a float when I convert it to a dictionary.. But no difference, IT ROUNDS UP and gives a A WHOLE NUMBER.The reason I need to preserve the decimal places is because the second and third columns refer to x and y coordinates..So all in all the objective is to find the averages of the other two columns in each of the inner lists grouped by the first column in each of the inner list with as many decimal places as possible
Assuming you meant to use the following list:The simply use a  to group by the first element, then find the :Note, if you are on Python 2, no need to call  after . Also, you should use  instead of .Also, you will have to do something like:Instead of the cleaner version on Python 3.Finally, there is no  module in Python 2. So just do:and use that  instead of 
Similarly using 


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
