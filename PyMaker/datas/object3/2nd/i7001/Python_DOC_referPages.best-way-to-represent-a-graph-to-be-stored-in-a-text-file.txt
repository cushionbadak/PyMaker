Natural Text
My problem involves creating a directed graph, checking if it unique by comparing to a text file containing graphs and if it is unique, appending it to the file. What would be the best representation of graph to be used in that case?I'm using Python and I'll be using brute-force to check if graphs are isomorphic, since the graphs are small and have some restrictions. 
There is a standard text based format called DOT which allows you to work with directed and undirected graphs, and would give you the benefit of using a variety of different libraries to work with your graphs. Notably graphviz which allows you to read and write DOT files, as well as plot them graphically using matplotlib.
Assuming that this is a simple case of how the graphs are represented you might be ok with a simple CSV format where a line is a single edge and ther's some separator between graphs, eg:etc.You could then make use of https://docs.python.org/3/library/csv.html
I guess it depends on how you are going to represent your graph as a data structure.The two most known graph representations as data structures are:Adjacency matricesAdjacency listsAdjacency matricesFor a graph with  vertices, an adjacency matrix is a  matrix of 0s and 1s, where the entry in row i and column j is 1 if and only if the edge (i,j) is in the graph. If you want to indicate an edge weight, put it in the row i column j entry, and reserve a special value (perhaps null) to indicate an absent edge.With an adjacency matrix, we can find out whether an edge is present in constant time, by just looking up the corresponding entry in the matrix. For example, if the adjacency matrix is named graph, then we can query whether edge (i,j) is in the graph by looking at .For an undirected graph, the adjacency matrix is symmetric: the row i, column j entry is 1 if and only if the row j, column i entry is 1. For a directed graph, the adjacency matrix need not be symmetric.Adjacency listsRepresenting a graph with adjacency lists combines adjacency matrices with edge lists. For each vertex i, store an array of the vertices adjacent to it. We typically have an array of |V| adjacency lists, one adjacency list per vertex. Vertex numbers in an adjacency list are not required to appear in any particular order, though it is often convenient to list them in increasing order.We can get to each vertex's adjacency list in constant time, because we just have to index into an array. To find out whether an edge (i,j) is present in the graph, we go to i's adjacency list in constant time and then look for j in i's adjacency list.In an undirected graph, vertex j is in vertex i's adjacency list if and only if i is in j's adjacency list. If the graph is weighted, then each item in each adjacency list is either a two-item array or an object, giving the vertex number and the edge weight.Export to fileHow to export the data structure to a text file? Well, that's up to you based on how you would read the text file and import it into the data structure you decided to work with.If I were to do it, I'd probably try to dump it in the most simple way for later to know how to read and parse it back to the data structure.
Adjacency liststore graphs in this format:First line contains two integers:  (number of nodes) and  (number of edges).Then lines follow each containing two integers  and . each line represents an edge (edge goring from  to )This is how a cycle graph of four nodes would look like:To represent graphs in python you can use a list of lists.


Answer URL
https://docs.python.org/3/library/csv.html
