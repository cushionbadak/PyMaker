Natural Text
Could someone explain the role of the following functions:In the context of this line of code please:Finally, should it be:rather than:Thank you!
 takes a line of keyboard input from the user and returns a list of words (separated by spaces).  For example if the user typed , it would return . takes a function and a sequence of values, calls the function on each value in the sequence, and returns a sequence of all the results.  For example  would return .Finally,  takes a sequence of values and returns it as a list.So overall, your example line of code accepts a string of input from the user, splits it into a list of words, calls  on each word, and assembles a final list of the returned values.To answer your question about , yes, in this case that is the correct way to call it.   takes a function object; you're not actually calling  yourself.
All of these functions are members of the standard library and are as such covered by the official documentation.That being said, I'll summarise them briefly. turns an iterable into a list. In this case, the iterable is a  object. takes a function  (or any callable, really), and an iterable  and produces another iterable where the callable is applied to each element in .In your case, the callable is , which tries to convert its argument to an integer.  is a common term for applying a function to a collection of elements, but the 'Pythonic' way is to use a list comprehension: is a method on ing objects, which divides the given string at every occurrence of the given separator, returning a list. If the separator argument is omitted, it defaults to a space.Putting it all together, you're reading input from stdin, splitting the resulting string into multiple strings, mapping  to each item (turning them into integers, or causing an exception on input like ) and converting the mapping to a list.You're then shadowing a built in by assigning the result to , which is generally speaking a bad idea (imagine the confusion when  causes an error).To answer your second question: no, since  takes two separate arguments.I'd rewrite it slightly, if I were using it in a production environment:The argument to  is a prompt to the user (it's optional, of course).
Lets break it down calls the  functions which returns an int for every object returned from Now  returns a list object in Python 2.7 and a map object in Python 3. If you're running 2.7 then the  is useless. In 3 it is required.Regarding your second question,  takes two arguments, so it needs to be  because  is considered a single arg.


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.split
https://docs.python.org/3/library/functions.html#map
https://docs.python.org/3/library/functions.html#func-list
