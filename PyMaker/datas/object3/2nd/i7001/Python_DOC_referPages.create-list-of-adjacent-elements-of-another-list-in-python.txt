Natural Text
I am looking to take as input a list and then create another list which contains tuples (or sub-lists) of adjacent elements from the original list, wrapping around for the beginning and ending elements. The input/output would look like this:My question is closely related to another titled getting successive adjacent elements of a list, but this other question does not take into account wrapping around for the end elements and only handles pairs of elements rather than triplets.I have a somewhat longer approach to do this involving rotating deques and zipping them together:However, I feel like there is probably a more elegant (and/or efficient) way to do this using other built-in Python functionality. If, for instance, the  function of  returned the rotated list instead of modifying it in place, this could be a one- or two-liner (though this approach of zipping together rotated lists is perhaps not the most efficient). How can I accomplish this more elegantly and/or efficiently?
This can be done with slices:Well, or such a perversion:You can specify the number of iterations.
One approach may be to use  combined with :Here we generated an infinite cycle of sliding windows and sliced the desired subset.FWIW, here is an abstraction of the latter code for a general, flexible solution given any iterable input e.g. , , , etc.:Note:  is a separate library, easily installed via:
Well I figured out a better solution as I was writing the question, but I already went through the work of writing it, so here goes. This solution is at least much more concise:See this post for different answers on how to rotate lists in Python.The one-line solution above should be at least as efficient as the solution in the question (based on my understanding) since the slicing should not be more expensive than the rotating and copying of the deques (see https://wiki.python.org/moin/TimeComplexity).Other answers with more efficient (or elegant) solutions are still welcome though.
as you found there is a list rotation slicing based idiom using it inside a comprehension taking a variable  for the number of adjacent elements wanted is more general so everything can be parameterized, the number of adjacent elements  in the cyclic rotation and the 'phase' , the starting point if not the 'natural' 0 base index, although the default  is set to -1 to fit the apparant desired outputshowing the shortend code as per the comment


Answer URL
https://docs.python.org/3/library/itertools.html
