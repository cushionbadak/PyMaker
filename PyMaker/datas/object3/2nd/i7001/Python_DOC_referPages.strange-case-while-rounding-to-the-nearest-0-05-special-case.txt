Natural Text
This question already has an answer here:Is floating point math broken?                    28 answers                For rounding to the nearest 0.05, I am just dividing it by 0.05 and then multiply by 0.05. As described in other similar questions.Till here its doing as expected.However for this special case:I would have expected 127.65 here.Tried rounding off before dividing, but again.. strange.Not only i am getting unexpected result(expecting 127.65), but also it is giving results that is beyond 2 decimal places, which will result into failure in my further processing functions.If i execute just the inner round,  o/p is 127.65... But on adding the divide and multiply logic.. the result becomes unexpected.Should there be any datatype issue? or internal precision limitations of python?how do i overcome it in an elegant way?PS: 1) I am using python 2.72) I am eventually using it in a function. Which is giving unexpected results for this special case. I cannot control the input data quality and its data precision, as it is coming from reading a csv file to dataframe.
Finally the scaling up logic mentioned in is-floating-point-math-broken worked for me.or :UPDATE:For my intended purpose, (rounding to the nearest 0.05 to get the price quote), so far below is the most closest solution that i can find after so many days of search and checking results on multiple values and iterations.Why it works? The below explanation follows:Multiply by 20.0 followed by round() or int(), changes the domain from floating point to integers.And so, eliminates the precision problem, that led to the unexpected results.Note: That in the last step (divide by 20.0), we again move from integer to floating point, but with the correct expected value(no surprises so far after running in production from past one week). And you know it for sure that it has only 2 decimal places theoretically (an integer divide by 20), so if need be, you can handle it in the rest of your program by chopping off the rest, while printing.


Answer URL
https://docs.python.org/3/library/decimal.html
