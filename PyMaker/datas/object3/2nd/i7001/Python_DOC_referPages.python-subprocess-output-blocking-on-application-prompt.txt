Natural Text
I am running jirashell in a python script using the subprocess library. I am currently having issues having the outputs print in real time. When I run jirashell it outputs information than prompts the user (y/n). The subprocess won't print out information prior to the prompt until I enter 'y' or 'n'.The code I am using isThe output is like so:Does anyone know how I can have it print the output prior to the prompt than wait for an input of y/n? Note I also need to be able to store the output produced by the command so "os.system()" won't work...EDIT:It looks like inside jirashell there is a part of the code that is waiting for an input and this is causing the block. Until something is passed into this input nothing is outputted... Still looking into how I can get around this. I'm in the process of trying to move the portion of code I need into my application. This solution doesn't seem elegant but I can't see any other way right now.
Method which prints and caches the standard output:You can use a thread which reads the standard output of your subprocess, while the main thread is blocked until the subprocess is done. The following example will run the program , which looks likeExample:The class  reads every byte from the subprocess and writes it to the standard output. (I have to admit, this is not the most efficient approach, but a larger buffer size blocks, the  until the buffer is full, even though the subprocess is awaiting the answer to a prompt.) Since the bytes are written to sys.stdout.buffer, there shouldn't be a problem with multi-byte utf-8 characters.The  class also stores the complete output of the subprocess in the variable  for later use.As this answer summarizes, it is save to start a thread after forking with subprocess.Original answer which has problems, when the prompt line doesn't end a line: The output is delayed because  blocks the execution of your script until the sub-process is done (https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate). You can read and print the standard output of the subprocess, while it is executed using . There are some issues about buffering, which require this rather complicated  construct. The following example uses  because this command starts an interactive tool.Alternative answer which uses  and does not cache the output:As Sam pointed out, there is a problem with the above solution, when the prompt line does not end the line (which prompts they usually don't). An alternative solution is to use the  argument to interact with the sub-process.


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate
