Natural Text
I want to use Python to:Read a line from  file.Iterate through  lines.If a line match is found, copy that whole line from  to .Repeat steps 1-3 until  is exhausted.The contents of  are plain text. Sample:The  file is also a plain text with keywords, one per line, as in the following example:After spending some time in Stackoverflow, I have the current code --which is unusable at the moment:it returns nothing.I try to figure it out what's wrong and so far I can't find it.I did a step back and tried to search with string and it worked!The result is:Could anyone point me out what's wrong in my top code?Thank you very much.
I interpreted your question as that you want to output each line of a file  that contains a certain substring, and these substrings are in another file . If that is correct, the following code should work for you:where  isand  is this will correctly outputwhich is each line that contains either '' or ''.This works by first building up a list of all the  first, and then for each line in , checking if any target is a substring of the line. You have to build up the list of targets as when you iterate over a file in Python each line is 'consumed' so you can't go back to the start again in another for loop.The way the line  works is broadly like this:First, it uses the generator expression . This returns the value of  (which checks if  is a substring of ) for each  in  - it could also effectively be written asNow, the  function takes an iterable (something like a list) and returns  if any of the values are  (or equivalent to ). It also has the property of short-circuiting - it actuallly stops as soon as it does meet , if it does. This means the code could be rewritten pretty accuately as(This has to do with the fact that there is a generator expression, which does not evaluate the whole thing at once, but lazily gives one value at a time, meaning no more work will be done than needed.)By the way,  is a list comprehension. This returns a list of  for each line in . This could be rewritten asHopefully that's helped. Here is some useful documentation on how list comprehensions work. I find it can often be useful to start with the simpler examples like . Let me know if you'd like any more clarification.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
