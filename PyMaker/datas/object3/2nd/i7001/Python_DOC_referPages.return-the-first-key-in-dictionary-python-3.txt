Natural Text
I'm trying to print the key and value using the below code : I get the error What is wrong with the mentioned code?Accepted Output :
It does rather depend on what you mean by first. In Python 3.6, entries in a dictionary are ordered by the key, but probably not quite in the way you expect.To take your example:Now add the key :So the zero comes at the end. But if you construct the dict from scratch, like this:you get this result insteadThis illustrates the principle that you should not depend on the ordering, which is defined only by the dict implementation, which, in CPython 3.6 and later, is order of entry. To illustrate that point in a different way:Guido has this to say on the subject:I'd like to handwave on the ordering of ... dicts. Yes, in  CPython 3.6 and in PyPy they are all ordered, but it's an  implementation detail. I don't want to force all other  implementations to follow suit. I also don't want too many people  start depending on this, since their code will break in 3.5. (Code  that needs to depend on the ordering of keyword args or class  attributes should be relatively uncommon; but people will start to  depend on the ordering of all dicts all too easily. I want to remind  them that they are taking a risk, and their code won't be backwards  compatible.) The full post is here.
in python3  returns a  object, so, in general, apply list on it to be able to index/slice it: For your specific case, you need to convert the dictionary to an ordered one to conserve the order and get the first element as follows: Edit:Based on comments from @Mseifert (thanks), preserving the order after conversion from the unordered dictionary to the ordered one is only an implementation detail that works in python3.6 and we cannot rely on, here's the discussion Mseifert shared: Dictionaries are ordered in Python 3.6+ So the correct way to do what you want is to explicitly define the order 
Dictionaries are unordered and in the newer Python versions the hashes of strings are randomized (per session). So you have to accept that what you get as "n"-th key (or value) of a dictionary isn't predictable (at least when the keys are strings).But if you just want the element that happens to be "first" (or "second") just use  to convert the  to an sequence that can be indexed:However, my suggestion would be to use an  instead of a normal dict to make the result deterministic:
In Python, s are unordered data structures. Therefore there is no first key. If you want to have a -like data structure with internal ordering of keys, have a look at .
Dicts represent an unordered datatype, therefore there is no indexing. There is an option in collections. Try OrderedDict.
Shortest:For both the key and value:


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
