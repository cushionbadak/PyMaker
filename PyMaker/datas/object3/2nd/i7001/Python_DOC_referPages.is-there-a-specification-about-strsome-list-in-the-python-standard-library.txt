Natural Text
This question already has an answer here:Difference between __str__ and __repr__?                    21 answers                I wondered why  stringifies each element by  in follow case:First, I tried running above code in other python interpreter and get same result.Then I googled whether this behavior has been defined in the spec or not, however I couldn't find any document about 's procedure. I found this document, but it's not enough. It doesn't defined any procedure.Do any specifications for  exist or not?
This might not be explicitly specified, but there is certainly logic to it. You're looking at the per type methods for repr and str in the list type. If you read the documentation for , it shows that the default implementation is to fall back on . The core difference between the two is that  is not expected to produce a valid Python expression, while  is. Lists, being a Python standard type, are naturally expected to show as valid expressions, thus should have repr, and repr will rely on calling repr for the contained items as well, or the expression might break. We end up with one question: How should lists be shown differently for str than for repr? This is where for instance a type for a deck of cards might produce  instead of . There's no obvious choice for a list, so it just has no . We can even verify that this is the case:The  is inherited from , and not specialized for . 
In the absence of  any container will default to  if passed to . As it happens the containers in CPython (, etc.) generally don't have a  method and thus they will delegate to . For the  it makes sense to call the  of the elements.So it's no formal specification. It's just because these containers have no  method.
I think that this behavior can be considered as specified. https://docs.python.org/3/library/stdtypes.html#list states that lists implement all of the common and mutable sequence operations (none of them include  or ) plus . So, according to the specification, there's no  or  (despite that in CPython you can see them). Therefore  is resolved as  (since  is a subclass of ). And according to https://docs.python.org/3/reference/datamodel.html#object.repr,  returns "the “official” string representation of an object". It's obvious from the docs that the official string representation for lists looks like  (where each element is -ed), that's what you observed.


Answer URL
https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range
https://docs.python.org/3/reference/datamodel.html#object.__repr__
https://docs.python.org/3/reference/datamodel.html#object.__str__
https://docs.python.org/3/library/stdtypes.html#list
https://docs.python.org/3/library/stdtypes.html#list
https://docs.python.org/3/reference/datamodel.html#object.__repr__
https://docs.python.org/3/reference/expressions.html#list-displays
https://docs.python.org/3/reference/datamodel.html#object.__repr__
