Natural Text
Here's the scenario. I have a Python script that will launch another program (let's call it ) before running its main code. Multiple Python scripts can be ran at the same time, however if the program  has already been started, it should not be started again:In C I can probably create a shared memory by ing a file and putting a semaphore in it to track that. Once the semaphore reaches 0 I can also terminate the program . But I have no idea how to do that in Python and on Windows.How should I approach this problem, i.e. is there an already established method of solving this?
I've created an example of how you can achieve this behavior on Windows using sockets rather than a shared memory semaphore. This achieves the same thing; the c++ program will keep running so long as at least one of the Python scripts is running. Once all the scripts have finished, the c++ program will finish so long as no more Python scripts are started within a certain timeout period.Most of the code here goes into the c++ program, which runs a thread that monitors TCP connections from the Python script(s).The Python script just checks/starts the Windows program, then opens a socket which is left open until the script ends.The Windows program detects the socket connections and disconnections, thus keeping track of when the Python scripts are running.In these examples, the Windows program happens to be called "ConsoleApplication11.exe". I've used port 1234 and a timeout of 15 seconds, you can change these in lines 19-21 of the c++ program. Also, if you want to make the termination of the c++ program more immediate, call exit() instead of return at the end of client_monitor_thread().Hope this may be useful.Python script:C++ program:


Answer URL
https://docs.python.org/3/library/mmap.html
