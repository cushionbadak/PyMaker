Natural Text
Both my professor and this guy claim that  creates a list of values. "Note: The range function simply returns a list containing the numbers  from x to y-1. For example, range(5, 10) returns the list [5, 6, 7, 8,  9]."I believe this is to be inaccurate because:Furthermore, the only apparent way to access the integers created by  is to iterate through them, which leads me to believe that labeling  as a lists is incorrect.
In Python 2.x,  returns a list, but in Python 3.x  returns an immutable sequence, of type .Python 2.x:Python 3.x:In Python 2.x, if you want to get an iterable object, like in Python 3.x, you can use  function, which returns an immutable sequence of type .Advantage of  over  in Python 2.x:The advantage of  over  is minimal (since  still has to create the values when asked for them) except when a very large range is used on a memory-starved machine or when all of the rangeâ€™s elements are never used (such as when the loop is usually terminated with break). Note:Furthermore, the only apparent way to access the integers created by  is to iterate through them, Nope. Since  objects in Python 3 are immutable sequences, they support indexing as well. Quoting from the  function documentation,Ranges implement all of the common sequence operations except concatenation and repetition...Range objects implement the  ABC, and provide features such as containment tests, element index lookup, slicing and support for negative indices.For example,All these are possible with that immutable  sequence.Recently, I faced a problem and I think it would be appropriate to include here. Consider this Python 3.x codeOne would expect this code to print every ten numbers as a list, till 99. But, it would run infinitely. Can you reason why?Solution Because the  returns an immutable sequence, not an iterator object. So, whenever  is done on a  object, it always starts from the beginning. Think of it as a drop-in replacement for an immutable list. Now the question comes, how will you fix it? Its simple, you just have to get an iterator out of it. Simply change to Now,  is an iterator object and it remembers how long it has been iterated before. So, when the  iterates it, it just starts from the place where it previously ended.
It depends.In python-2.x,  actually creates a list (which is also a sequence) whereas  creates an  object that can be used to iterate through the values.On the other hand, in python-3.x,  creates an iterable (or more specifically, a sequence)
range creates a list if the python version used is 2.x .In this scenario range is to be used only if its referenced more than once otherwise use xrange which creates a generator there by redusing the memory usage  and sometimes time as it has lazy approach. xrange is not there in python 3.x rather range stands for what xrange is for python 2.xrefer to question What is the difference between range and xrange functions in Python 2.X?


Answer URL
https://docs.python.org/3/library/functions.html#func-range
https://docs.python.org/3/library/stdtypes.html#range
https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
https://docs.python.org/3/glossary.html#term-iterator
https://docs.python.org/3/glossary.html#term-iterable
https://docs.python.org/3/glossary.html#term-sequence
