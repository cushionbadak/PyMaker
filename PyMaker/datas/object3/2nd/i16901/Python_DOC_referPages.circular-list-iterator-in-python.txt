Natural Text
I need to iterate over a circular list, possibly many times, each time starting with the last visited item.The use case is a connection pool. A client asks for connection, an iterator checks if pointed-to connection is available and returns it, otherwise loops until it finds one that is available.Is there a neat way to do it in Python?
Use , that's its exact purpose:Output:(Loops forever, obviously)In order to manually advance the iterator and pull values from it one by one, simply call :
The correct answer is to use itertools.cycle. But, let's assume that library function doesn't exist. How would you implement it?Use a generator:Then, you can either use a  statement to iterate infinitely, or you can call  to get the single next value from the generator iterator:
Or you can do like this:prints a b c d e f a b c... forever
you can accomplish this with  loop:or  loop:or simply:all of which print:of the three I'd be prone to the append(pop()) approach as a function
You need a custom iterator -- I'll adapt the iterator from this answer.
If you wish to cycle  times, implement the  itertools recipe:
Here's another alternative, maybe not so pythonic.One can control range argument to cyclic iterate 5 times, for example:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/itertools.html#itertools.cycle
