Natural Text
Today, I saw one statement which didn't throw an exception. Can anyone explain the theory behind it?
In Python, every iterable can be unpacked1:Moreover, because iterating over a dictionary returns only its keys:unpacking a dictionary (which iterates over it) likewise unpacks only its keys.1Actually, I should say that every iterable can be unpacked as long as the names to unpack into equals the length of the iterable:But this is only the case for Python 2.x.  In Python 3.x, you have extended iterable unpacking, which allows you to unpack an iterable of any (finite) size into just the names you need:
Iterating a  iterates over the keys. Since your dict literal has exactly two keys, you can unpack it into a 2-tuple.This is probably not a good practice in general, since (before python 3.7, or possibly earlier in some other implementations) dicts are unordered and  and  would be a perfectly legal outcome of that code.
when you iterate over a dictionary, you get its keysUnpacking is nothing else than iterating over the object and put the elements in the given variables:
No rocket science behind it.  is an iterable, which return the keys in each iteration.  can receive any iterable as argument (as long as they are finite), so:Seeing this, is easy to infer that unpacking will work as shown. Moreover, any finite iterable can be unpacked:
When in iterable context, dicts are treated as an (unordered) collection of keys, which is what you get when you do , which is the same as calling  on the dict:However, you can also do more.You can unpack both a 's both keys and values if you turn it into a list of pairs first:or if you just want the pairsor, say, just the keys:etc.But of course since dictionaries — and I mean in general, not only in Python — contain their items in an un-ordered manner,  (in Python) will also return them in a seemingly arbitrary order, and thus there is no way to know which key will be stored in which variable:As you see, the order of the pairs returned by  was reversed in comparison to their definition order.


Answer URL
https://docs.python.org/3/whatsnew/3.0.html#new-syntax
