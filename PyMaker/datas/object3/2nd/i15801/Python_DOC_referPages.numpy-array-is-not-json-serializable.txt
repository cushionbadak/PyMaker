Natural Text
After creating a NumPy array, and saving it as a Django context variable, I receive the following error when loading the webpage:What does this mean?
I regularly "jsonify" np.arrays. Try using the ".tolist()" method on the arrays first, like this: In order to "unjsonify" the array use: 
Store as JSON a numpy.ndarray or any nested-list composition.Will output:To restore from JSON:Will output:
You can use Pandas:
I found the best solution if you have nested numpy arrays in a dictionary:Thanks to this guy.
This is not supported by default, but you can make it work quite easily! There are several things you'll want to encode if you want the exact same data back:The data itself, which you can get with  as @travelingbones mentioned. Sometimes this may be good enough.The data type. I feel this is important in quite some cases.The dimension (not necessarily 2D), which could be derived from the above if you assume the input is indeed always a 'rectangular' grid.The memory order (row- or column-major). This doesn't often matter, but sometimes it does (e.g. performance), so why not save everything?Furthermore, your numpy array could part of your data structure, e.g. you have a list with some matrices inside. For that you could use a custom encoder which basically does the above.This should be enough to implement a solution. Or you could use json-tricks which does just this (and supports various other types) (disclaimer: I made it).Then
A Lot of the other numpy encoders seem a bit overly complicated.check if the object if from the module numpy, if so either use  for a  or use  for any other numpy specific type.Use the   kwarg:default should be a function that gets called for objects that canâ€™t otherwise be serialized.
I had a similar problem with a nested dictionary with some numpy.ndarrays in it. 
You could also use  argument for example:
Also, some very interesting information further on lists vs. arrays in Python ~> Python List vs. Array - when to use?It could be noted that once I convert my arrays into a list before saving it in a JSON file, in my deployment right now anyways, once I read that JSON file for use later, I can continue to use it in a list form (as opposed to converting it back to an array). AND actually looks nicer (in my opinion) on the screen as a list (comma seperated) vs. an array (not-comma seperated) this way. Using @travelingbones's .tolist() method above, I've been using as such (catching a few errors I've found too):SAVE DICTIONARYREAD DICTIONARYHope this helps!
Here is an implementation that work for me and removed all nans (assuming these are simple object (list or dict)):
This is a different answer, but this might help to help people who are trying to save data and then read it again.There is hickle which is faster than pickle and easier.I tried to save and read it in pickle dump but while reading there were lot of problems and wasted an hour and still didn't find solution though I was working on my own data to create a chat bot.  and  are numpy arrays:Then you just read it and perform the operations:
May do simple for loop with checking types:
TypeError: array([[0.46872085, 0.67374235, 1.0218339 , 0.13210179, 0.5440686 , 0.9140083 , 0.58720225, 0.2199381 ]], dtype=float32) is not JSON serializableThe above-mentioned  error was thrown when i tried to pass of list of data to model.predict() when i  was expecting the response in json format.But luckily found the hint to resolve the error that was throwing   The serializing of the objects is applicable only for the following conversion  Mapping should be in following way  object - dict  array - list  string - string  integer - integerIf you scroll up to see the line number 10   prediction = loaded_model.predict(d)  where this line of code was generating the output   of type array datatype , when you try to convert array to json format its not possibleFinally i found the solution just by converting obtained output to the type list by   following lines of codeprediction = loaded_model.predict(d)  listtype = prediction.tolist()  return jsonify(listtype)Bhoom! finally got the expected output,   


Answer URL
https://docs.python.org/3/library/json.html#basic-usage
