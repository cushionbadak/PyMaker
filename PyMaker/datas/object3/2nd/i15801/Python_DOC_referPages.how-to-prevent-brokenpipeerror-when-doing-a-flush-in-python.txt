Natural Text
Question: Is there a way to use  for the  function without getting the ?I have a script :I call it like this from a Unix command line:And it returns:So does this script:However, when I run this script and pipe it to :Then I get this error:I have also tried the solution below, but I still get the :
The  is normal as said phantom because the reading process (head) terminates and closes its end of the pipe while the writing process (python) still tries to write.Is is an abnormal condition, and the python scripts receives a  - more exactly, the Python interpreter receives a system SIGPIPE signal that it catches and raises the  to allow the script to process the error.And you effectively can process the error, because in your last example, you only see a message saying that the exception was ignored - ok it is not true, but seems related to this open issue in Python : Python developpers think important to warn user of the abnormal condition.What really happens is that AFAIK the python interpreter always signals this on stderr, even if you catch the exception. But you just have to close stderr before exiting to get rid of the message.I slightly changed your script to :catch the error as you did in your last examplecatch either IOError (that I get in Python34 on Windows64) or BrokenPipeError (in Python 33 on FreeBSD 9.0) - and display a message for thatdisplay a custom Done message on stderr (stdout is closed due to the broken pipe)close stderr before exiting to get rid of the messageHere is the script I used : and here the result of  :If you do not want the extraneous messages just use :
According to the Python documentation, this is thrown when:trying to write on a pipe while the other end has been closedThis is due to the fact that the head utility reads from , then promptly closes it.As you can see, it can be worked around by merely adding a  after every .  Note that this sometimes does not work in Python 3.You can alternatively pipe it to  like this to get the same result as :Hope this helped, good luck!
As you can see in the output that you had posted the last exception is raised in the destructor phase : that is why you have  at the end A simple example to understand what's up in that context is the follow:Every exception that is triggered while the object is destroyed will cause a standard error output that explain the exception occurred and ignored (that is because python will inform you that something could not be correctly handle in destroy phase). Anyway, that kind of exceptions cannot be cached and so you can just remove the calls that can generate it or close .Come back to the question. That exception is not a real problem (as say it is ignored) but if you don't want print it you must override the the function that can be called when the object will be destroyed or close  as @SergeBallesta correctly suggested : in you case you can shutdown  and  function and no exception will be triggered in destroy contextThat is an example of how you can do it:
Ignore SIGPPIE temporarilyI'm not sure how bad an idea this is, but it works:


Answer URL
https://docs.python.org/3/library/exceptions.html#BrokenPipeError
https://docs.python.org/3/library/exceptions.html#exception-hierarchy">the
