Natural Text
I wrote a custom python module. It consists of several functions divided thematically between 3 .py files, which are all in the same directory called  in my home directory. So the whole path to my custom module directory is:I'm working on OsX Mavericks. I want to import this module in python scripts which I run from a different directory. I tried adding the  directory to the path by editing :Then in  I write:I also tried editing  as follows:It seems that the 'microbiome' directory is added to the path successfully, since  shows the directory is in there:However, when I try to import the microbiome module in python, it insists that such a module doesn't exist. I have Python 3.4.1 |Anaconda 2.0.1 The 'microbiome' directory contains an empty  file.What am I doing wrong?
The right way to do this, as explained in the Python Packaging User Guide, is to create a -based project.Then, you can just install your code for any particular Python installation (or virtual environment) by using, e.g.,  from the root directory of the project. That makes sure everything gets copied, with the proper layout, into some appropriate site-packages directory, where it will be available for that Python installation to import.Trying to do what the standard tools do yourself is just making things harder on yourself.That being said, if you really, really want to, the key is that you need to get your new directory into the  for the Python installation you want. Modifying  or  won't do that. Modifying  will, but it will affect every installation. The way to do this is to add a  file and/or a  file, as described in the docs for the  module.I don't know where your Anaconda site-packages is (you can find out by  from within Python), but let's say it's . So, you can create a  file in that directory, with the absolute path to your  directory. Then, every time you start Python, that directory will be added to , and your import will work.It's also worth noting that if you just want to reuse a directory as if it were part of a handful of different projects, and you don't want to even think about "installation" or anything like that, there are even simpler ways to do it: Symlink the directory into your different projects. Or, if you're using version control, create a git submodule. Or various other similar equivalents. Then, it looks like each project just includes  as part of that project, and you don't have to worry about paths or anything else.
As you've discovered,  affects . But  does not affect where Python looks for modules. Try  instead. See  for details.


Answer URL
https://docs.python.org/3/library/site.html
