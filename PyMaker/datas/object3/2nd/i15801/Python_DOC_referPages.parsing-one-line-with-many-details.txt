Natural Text
I have a file that has a lot of lines that look like the below:I want to parse this file, line by line, to count the number of occurrences of an item. This line I showed above has many details I want to parse/count/recognize:If the line has Gigabit increase counter by 1, it it is a TenGig, increase another counterIf the line has a dot(.) then also increase counter number 2.If the line has a a dot(.) and a  in the end, then also increase counter number 3.If the line has a dot(.) and no  in the end, then increase counter number 4.What would be a good way to do the above without using CPU expensive Regex?
Just use the  operator to test for membership:something like the following:The checks for  , and  are independent of each other so we need all , the line will either end in  or not so an  will work, we also cover the check for  in both cases so we don't need an if or elif  for that.
Marpa::R2, a Perl interface to Marpa, a general BNF parser, can be useful for such things.This script outputsNote how general BNF parsing allows both (1) making sure that input conforms to the spec (otherwise it won't parse) and (2) getting just the results directly relevant to the problem (the counting code is just a couple of 's, just like with string search functions above.


Answer URL
https://docs.python.org/3/reference/expressions.html#membership-test-details
