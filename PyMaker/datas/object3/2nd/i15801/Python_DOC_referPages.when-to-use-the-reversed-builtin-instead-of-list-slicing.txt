Natural Text
In python, there are a number of ways to reverse a sequence:Although there is a builtin specifically for reversing a sequence, it is more concise to use list slicing. Additionally, list slicing returns a full , which supports  and , while  is only an iterator. Finally,  requires a , which means that list slicing will almost always work. What are the advantages of using the  builtin over list slicing?
 returns a new reversed copy of the list. It will consume more memory according to the size of the list: sizeof the list object + sizeof(pointer) * len(list)If you don't need the whole list items at once, using  is more preferable in terms of memory. (For example, iterating the list reversed order, processing items one by one does not require all items at once.)
It isn't quite correct to say " requires a sequence". in Python 2.6+  works on any object that defines a  method. Thus it can work on objects that do not support integer indexing, while slicing can't. So, use slicing when reversing only a segment of a sequence, need more than one element at a time, or perhaps need to control the step size. Use  if you only need to iterate through every element (as per the memory considerations of @falsetru's answer), or if you have an object with custom-defined reversing behavior. 
Oh darn, a commenter pointed out that rev_func wasn't returning a list, it was returning the list iterator.  oopsWhen I corrected it, the results are essentially the same.Using [::-1]: 1.6161760782445813   Using reversed(): 1.7324838771408098


Answer URL
https://docs.python.org/3/library/functions.html#reversed
