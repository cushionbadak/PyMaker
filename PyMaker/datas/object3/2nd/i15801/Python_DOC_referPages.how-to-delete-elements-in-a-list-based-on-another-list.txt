Natural Text
Suppose I have a list called icecream_flavours, and two lists called new_flavours and unavailable. I want to remove the elements in flavours that appear in 'unavailable', and add those in new_flavours to the original one. I wrote the following program: the append one is fine, but it keeps showing 'ValueError: list.remove(x): x not in list' for the first part of the program. What's the problem? thanks
There are two possibilities here.First, maybe there should never be anything in  that wasn't in , but, because of some bug elsewhere in your program, that isn't true. In that case, you're going to need to debug where things first go wrong, whether by running under the debugger or by adding  calls all over the code. At any rate, since the problem is most likely in code that you haven't shown us here, we can't help if that's the problem.Alternatively, maybe it's completely reasonable for something to appear in  even though it's not in , and in that case you just want to ignore it.That's easy to do, you just need to write the code that does it. As the docs for  explain, it:raises  when  is not found in .So, if you want to ignore cases when  is not found in , just use a /:That being said, there are better ways to organize your code.First, using the right data structure always makes things easier. Assuming you don't want duplicate flavors, and the order of flavors doesn't matter, what you really want here is sets, not lists. And if you had sets, this would be trivial:Even if you can't do that, it's usually simpler to create a new list than to mutate one in-place:(Notice that I converted  to a set, so we don't have to brute-force search for each flavor in a list.)Either one of these changes makes the code shorter, and makes it more efficient. But, more importantly, they both make the code easier to reason about, and eliminate the possibility of bugs like the one you're trying to fix.
To add all the  that are not , you can use a list comprehension, then use the  operator to add it to the existing flavors.If there are already flavors in the original list you want to remove, you can remove them in the same way
If you first want to remove all the unavailable flavours from  and then add the new flavours, you can use this list comprehension:
Your error is caused because  contains flavours that are not in .Unless order is important, you could use  instead of  as they have operations for differences and unions and you don't need to worry about duplicatesIf you must use lists, a list comprehension is a better way to filter the listYou can extend the list of flavours like thisassuming there are no duplicates.


Answer URL
https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types
https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types
