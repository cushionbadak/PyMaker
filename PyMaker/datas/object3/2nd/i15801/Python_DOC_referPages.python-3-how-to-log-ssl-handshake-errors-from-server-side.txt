Natural Text
I'm using HTTPServer for a basic HTTP server using SSL. I would like to log any time a client initiates an SSL Handshake (or perhaps any time a socket is accepted?) along with any associated errors. I imagine that I'd need to extend some class or override some method, but I'm not sure which or how to properly go about implementing it. I'd greatly appreciate any help. Thanks in advance!Trimmed down sample code:
From looking at the  module, most of the relevant magic happens in the  class. is just a tiny convenience function  that basically serves as a factory for an  with some reasonable defaults, and wraps an existing socket.Unfortunately,  does not seem to do any logging of its own, so there's no easy way to turn up a logging level, set a  flag or register any handlers.So what you can do instead is to subclass , override the methods you're interested in with your own that do some logging, and create and use your own  helper function. Subclassing First, copy over  from your Python's  into your code. (Make sure that any code you copy and modify actually comes from the Python installation you're using - the code may have changed between different Python versions).Now adapt your copy of  tocreate an instance of a  (which we'll implement below) instead of and use constants from the  module where necessary ( and  in this example)Now change your linetoin order to use your own .Now for subclassing . Create a class  that subclasses  by adding the following to your code:Here we override the  and  methods of  - everything else stays the same, since the class inherits from .Generic approach to overriding methodsI used a particular pattern for overriding these methods in order to make it easier to apply to pretty much any method you'll ever override: makes sure our method accepts any number of positional and keyword arguments, if any.  doesn't actually take any of those, but it still works because of Python's packing / unpacking of argument lists.Here you get the opportunity to do your own thing before calling the superclass' method.This is the actual call to the superclass' method. See the docs on  for details on how this works, but it basically calls  on 's superclass (). Because we pass  to the method, we just pass on any positional and keyword arguments our method got - we don't even need to know what they are, the method signatures will always match.Because some methods (like ) will return a result, we store that  and return it at the end of our method, just before doing our post-call work:Logging more detailsIf you want to include more information in your logging statements, you'll likely have to completely overwrite the respective methods. So copy them over and modify them as required, and make sure you satisfy any missing imports.Here's an example for  that includes the IP address and local port of the client that's trying to connect:(Make sure to include  in your imports at the top of your code - refer to the  module's imports to determine where you need to import missing names from if you get a . An good text editor with  configured is very helpful in pointing those missing imports out to you).This method will result in logging output like this:Because it involves quite a few changes scattered all over the place, here's a gist containing all the changes to your example code.


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists
https://docs.python.org/3/library/functions.html#super
