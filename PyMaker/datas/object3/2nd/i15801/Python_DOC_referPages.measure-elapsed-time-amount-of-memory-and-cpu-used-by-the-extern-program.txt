Natural Text
I'm executing an external program through Python. I want to know what is the best choice for calling the outside program, with  or with . Also, I need to measure elapsed time, the amount of memory and CPU used by the external program. I've heard of , but I don't really know which to choose.
also I need to measure elapsed time, amount of memory and cpu used by the extern program(I'm going to assume you only need the information available in your platform's . And, since Windows has no such thing at all, I'm also going to assume you don't care about Windows. If you need additional information that's only available in some platform-specific way (reading out of Linux's  filesystem, or calling AIX's monitor APIs, or whatever), you pretty much can't do this with the stdlib, and the  answer is the only one.)The  library wraps up calling , then an -family function in the child and a -family function in the parent. (You can see this by starting with the source to  and tracing down into the other calls from there.)Unfortunately, the easy way to get resource usage from a child is to call  or , not  or . So  gets you maddeningly close to what you want, but not quite there.But you've got a few options:If you only have one child process,  is all you need.You can launch the process, then use  (or platform-specific code) to get resource information from  before reaping the child.You can use  to do everything, leaving  behind.You can subclass  to override its  method.The last one is a lot simpler than it sounds. If you look at the source, there are only 3 places where  is actually called, and only one of them will be the one that affects your code; I think it's the one in . So (untested):And now:Compare that to using a hybrid with  (which won't even work when used this way on many platforms…):Of course the latter isn't more complex for not good reason, it's more complex because it's a whole lot more powerful and flexible; you can also get all kinds of data that  doesn't include, and you can get information every second while the process is running instead of waiting until it's done, and you can use it on Windows, and so on…


Answer URL
https://docs.python.org/3/library/os.html#os.fork
https://docs.python.org/3/library/os.html#os.execv
https://docs.python.org/3/library/os.html#os.waitpid
https://docs.python.org/3/library/os.html#os.wait4
https://docs.python.org/3/library/resource.html#resource.getrusage
