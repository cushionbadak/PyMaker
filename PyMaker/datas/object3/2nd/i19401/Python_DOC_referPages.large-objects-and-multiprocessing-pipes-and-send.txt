Natural Text
I've recently found out that, if we create a pair of parent-child connection objects by using , and if an object  we're trying to send through the pipe is too large, my program hangs without throwing exception or doing anything at all. See code below. (The code below uses the  package to produce a large array of floats.)The output is the following.And it hangs here indefinitely. However, if instead of 1200, we try to send an array with 1000 floats, then the program executes successfully, with the following output as expected.This looks like a bug to me. The documentation says the following.send(obj)  Send an object to the other end of the connection which should be read using recv().The object must be picklable. Very large pickles (approximately 32 MB+, though it depends on the OS) may raise a ValueError exception.But with my run, not even a  exception was thrown, the program just hangs there. Moreover, the 1200-long  array is 9600 bytes big, certainly not more than 32MB! This looks like a bug. Does anyone know how to solve this problem?By the way, I'm using Windows 7, 64-bit.
Try to move  below :But I don't really understand why your example works even for small sizes. I was thinking that writing to pipe and then making the process to join without first reading the data from pipe will block the join. You should first receive from pipe, then join. But apparently it does not block for small sizes...?Edit: from the docs (http://docs.python.org/3/library/multiprocessing.html#multiprocessing-programming):"An example which will deadlock is the following:"


Answer URL
