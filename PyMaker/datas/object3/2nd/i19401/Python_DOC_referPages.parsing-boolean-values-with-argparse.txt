Natural Text
I would like to use argparse to parse boolean command-line arguments written as "--foo True" or "--foo False". For example:However, the following test code does not do what I would like:Sadly,  evaluates to . This is the case even when I change  to be , which is surprising, since  evalutates to .How can I get argparse to parse , , and their lower-case variants to be ?
Yet another solution using the previous suggestions, but with the "correct" parse error from :This is very useful to make switches with default values; for instanceallows me to use:and still use a default value (specific to the user settings). One (indirectly related) downside with that approach is that the 'nargs' might catch a positional argument -- see this related question and this argparse bug report.
I think a more canonical way to do this is via:and supports this version nicely:Of course, if you really want the  version, you could pass  as the "type", or a user defined function ...
I recommend mgilson's answer but  with a mutually exclusive groupso that you cannot use  and  at the same time.andbut notScript:You can then use this helper if you are going to set many of them:
There seems to be some confusion as to what  and  might mean.  Should one (or both) mean 'run the function , or 'return a boolean'?  As it stands  means nothing.   gives a  error, same as if you used , or .But  does have registry that lets you define keywords like this.  It is mostly used for , e.g. `action='store_true'.  You can see the registered keywords with:which displays a dictionaryThere are lots of actions defined, but only one type, the default one, .This code defines a 'bool' keyword: is not documented, but also not hidden.  For the most part the programmer does not need to know about it because  and  take function and class values.  There are lots of stackoverflow examples of defining custom values for both.In case it isn't obvious from the previous discussion,  does not mean 'parse a string'.  From the Python documentation: bool(x): Convert a value to a Boolean, using the standard truth testing procedure. Contrast this with int(x): Convert a number or string x to an integer.  
oneliner:
Here is another variation without extra row/s to set default values. The bool always have a value assigned so that it can be used in logical statements without pre-checks.
I was looking for the same issue, and imho the pretty solution is :and using that to parse the string to boolean as suggested above.
In addition to what @mgilson said, it should be noted that there's also a  method that would make it trivial to enforce that  and  aren't used at the same time.
This works for everything I expect it to:The code:
A simpler way would be to use as below.
A quite similar way is to use:and if you set the argument --feature in your command the argument will be True, if you do not set type --feature the arguments default is always False! 

I think the most canonical way will be:


Answer URL
https://docs.python.org/3/library/argparse.html#nargs
