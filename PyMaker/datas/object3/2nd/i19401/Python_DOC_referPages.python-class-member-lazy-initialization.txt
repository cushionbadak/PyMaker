Natural Text
I would like to know what is the python way of initializing a class member but only when accessing it, if accessed.I tried the code below and it is working but is there something simpler than that?
You could use a  on the metaclass instead:This makes  an attribute on the class, so the expensive database call is postponed until you try to access . The result of the database call is cached by storing it in , the call is only made once for the class.For Python 2, use  and add a  attribute in the class definition body to attach the metaclass.Demo:This works because a data descriptor like  is looked up on the parent type of an object; for classes that's , and  can be extended by using metaclasses.
Another approach to make the code cleaner is to write a wrapper function that does the desired logic:You can use it as follows:Which outputs:Now your classmethod would look as follows, for example:Output:Note that this will cache just one value for any set of arguments to the function, so if you want to compute different values depending on input values, you'll have to make  a bit more complicated.
This answer is for a typical instance attribute/method only, not for a class attribute/, or .How about using both  and  decorators? The latter memoizes.Note that this requires Python â‰¥3.2.Credit: answer by Maxime R.
Consider the pip-installable  package which is available for Python 3.5+. It has a  package which provides the relevant  and  decorators, the usage of which is shown in the example below. It seems to work as expected.
 gives -like interface but including any kind of descriptor supports: https://ring-cache.readthedocs.io/en/latest/quickstart.html#method-classmethod-staticmethodSee the link for more details. Note that the example is not LRU.


Answer URL
https://docs.python.org/3/library/functions.html#property
