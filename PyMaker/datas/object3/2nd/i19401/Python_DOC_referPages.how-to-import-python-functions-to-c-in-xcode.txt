Natural Text
I'm trying to combine C and Python for research reasons but I'm getting problems in my code. I used the code from a tutorial but it seems that the code for getting the python file is not working. Here's the code:helloClass.py main.c
There's not enough information here to give you the complete answer, but the basic problem is almost certainly that  does not end up anywhere on the module search path, so  can't find it.For example, maybe you're building your  executable into a location like , but not copying  there. Or, maybe you are copying it there, but the equivalent of  isn't on your module path. Or… well, there are a million possibilities, but the answer is the same in every case:Figure out where the executable and the Python file are getting installed to.Build an appropriate (probably relative) path out of that knowledge.Make sure that path gets added to the module path.The exact details on how Python searches for modules is different between different versions, but the basic idea is explained in The statement (or the 3.3 version, which defers to The import system), and often, it's just a matter of adding something to .(Note that if you're building .app bundles instead of just Unix command-line executables, there is a standard answer to this—you stick the .py files in a standard place, use Cocoa or CoreFoundation APIs to get the path, and then use that. But that doesn't seem to be relevant here.)Looking at the project you uploaded at https://github.com/Eduardof0nt/help.git:You're not copying  anywhere. You have to decide where you want to copy it, and that depends entirely on how you want to deploy things. But for debugging purposes, just to get something testable, you can just put it alongside the  executable (in  or ). To do that:Select the project in the Project Navigator.Select the target in the left sidebar of the project view that appears.Select the Build Phases tab.Click the Add Build Phase button.Add a Copy Files phase.Set its Destination to Products Directory.Drag  from the Project Navigator into the build phase.Now, when you build, if you look at the output (turn on "All" and "All Messages"), you'll see "Copy build/Debug/helloClass.py" right after the "Link build/Debug/Hello Python!". And, if you look inside that directory, you'll see the two files side by side.But that doesn't solve your whole problem. Because  is not going to be on the  that Python uses. The quickest way around this is to call  right before the , and  right after. That may well not be the right thing to do for your use case, but you're going to have the read the documentation and understand what all of this does, because I can't possibly explain all the details of embedding Python in an SO answer.While you're trying to learn this stuff, you probably want to do some debugging. For example, you can  to see what the  equivalent is, and  to see what's in , and so on. But really, you're going to want to use the Xcode debugger—add a breakpoint and try doing this stuff at runtime.Much of this is explained in Extending and Emnbedding the Python Interpreter, and you really do need to read that; there's no substitute. (You don't need to read the whole Python/C API Reference Manual, but you will end up reading a lot of it, and getting good at searching it, before you're done.) However, because embedding Python is much less common than extending it, the docs really don't include everything you need, so… if whatever tutorial you're using doesn't cover things like  and , you may need to find a better tutorial first.


Answer URL
