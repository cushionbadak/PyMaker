Natural Text
Is there a pythonic way to throw an exception to other developers to warn them about using a piece of code with bugs in it?For example:I understand that I can raise a generic exception with a message, or even derive my own exception classes, but i just want to know if there is a built-in, pythonic way to do something like this.And also, I understand that why the actual  function doesn't work. That was just an example function.This is not something to validate input parameters, or even returned values.This is simply to mark a function as potentially unreliable. The code must be used in some areas under very specific circumstances, but when devs are writing code and run across this function should be warned of the limitations. 
Your example is pretty flawed for any use case in which alerting the developers would be needed. This would need to alert the user not to input a negative number.Although, I think if your example more accurately described an actual error needing developer attention then you should just fix that and not put it into production knowing there is an error in it.sentry.io on the other hand can help find errors and help developers fix errors while in production. You may want to look into that if  isn't for you. From their README.me:Sentry fundamentally is a service that helps you monitor and fix  crashes in realtime. The server is in Python, but it contains a full  API for sending events from any language, in any application.
Builtin Exception 'ValueError' is the one that should be used.
This seems like an XY problem. The original problem is that you have some code which is incomplete or otherwise known to not work. If it is something you are currently working on, then the correct tool to use here is your version control. With Git, you would create a new branch which only be merged into  and prepared for release to production after you have completed the work. You shouldn't release a partial implementation.
Do you want to stop execution when the function is called? If so, then some sort of exception, like the  in your example is a good way of doing this.But if you want to warn the caller, and then continue on anyway, then you want a  instead of an exception. You can still create your own:When you , execution will not be halted by default, but a warning will be printed to stderr. The warnings filter controls whether warnings are ignored, displayed, or turned into errors (raising an exception).https://docs.python.org/3.7/library/warnings.html#the-warnings-filter


Answer URL
https://docs.python.org/3/library/warnings.html
