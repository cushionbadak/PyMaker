Natural Text
I have the following folder structure.and I want to import some functions from file.py in another Python file which resides inI've triedand some other various attempts but so far I couldn't manage to import properly. How can I do this?
By default, you can't. When importing a file, Python only searches the current directory, the directory that the entry-point script is running from, and  which includes locations such as the package installation directory (it's actually a little more complex than this, but this covers most cases).However, you can add to the Python path at runtime:
Nothing wrong with:Just make sure  also contains an , this allows it to be included as a package. Not sure why the other answers talk about .
When modules are in parallel locations, as in the question:This shorthand makes one module visible to the other:
I think an ad-hoc way would be to use the environment variable  as described in the documentation: Python2, Python3
The answers here are lacking in clarity, this is tested on Python 3.6With this folder structure:Where  has the content:The import statement in  is:and this will print hello.
Your problem is that Python is looking in the Python directory for this file and not finding it. You must specify that you are talking about the directory that you are in and not the Python one.To do this you change this:to this:By adding the dot you are saying look in this folder for the application folder instead of looking in the Python directory.
From what I know,  add an  file directly in the folder of the functions you want  to  import  will do  the job.
First import sysSecond append the folder path Third Make a blank file called __ init __.py in your subdirectory (this tells Python it is a module)name-file.pyname-folder__ init __.pyname-module.pyFourth import the module inside the folder
Considering  as the root directory for your python project, create an empty  file in ,  and  folders. Then in your  make changes as follows to get the definition of func_name:
Worked for me in python3 on linux
This works for me on windows 
Try Python's relative imports:Every leading dot is another higher level in the hierarchy beginning with the current directory.Problems? If this isn't working for you then you probably are getting bit by the many gotcha's relative imports has.Read answers and comments for more details: How to fix "Attempted relative import in non-package" even with __init__.pyHint: have  at every directory level. You might need  (leaving off .py) which you run from the top level directory or have that top level directory in your PYTHONPATH. Phew!
Using sys.path.append with an absolute path is not ideal when moving the application to other environments. Using a relative path won't always work because the current working directory depends on how the script was invoked.Since the application folder structure is fixed, we can use os.path to get the full path of the module we wish to import. For example, if this is the structure:And let's say that you want to import the "mango" module. You could do the following in vanilla.py:Of course, you don't need the mango_dir variable.To understand how this works look at this interactive session example:And check the os.path documentation.
I was faced with the same challenge, especially when importing multiple files, this is how I managed to overcome it.
I'm quite special : I use Python with Windows !I just complete information : for both Windows and Linux, both relative and absolute path work into  (I need relative paths because I use my scripts on the several PCs and under different main directories).  And when using Windows both  and  can be used as separator for file names and of course you must double  into Python strings,some valid examples :(note : I think that  is more convenient than , event if it is less 'Windows-native' because it is Linux-compatible and simpler to write and copy to Windows explorer)
If the purpose of loading a module from a specific path is to assist you during the development of a custom module, you can create a symbolic link in the same folder of the test script that points to the root of the custom module. This module reference will take precedence over any other modules installed of the same name for any script run in that folder.I tested this on Linux but it should work in any modern OS that supports symbolic links.One advantage to this approach is that you can you can point to a module that's sitting in your own local SVC branch working copy which can greatly simplify the development cycle time and reduce failure modes of managing different versions of the module.
In Python 3.4 and later, you can import from a source file directly (link to documentation).Here is an example. First, the file to be imported, named :The code that imports the file above, inspired heavily by the example in the documentation:The output:Note that the variable name, the module name, and the filename need not match. This code still works:The output:Programmatically importing modules was introduced in Python 3.1 and gives you more control over how modules are imported. Refer to the documentation for more information.
You can refresh the Python shell by pressing f5, or go to Run-> Run Module. This way you don't have to change the directory to read something from the file. Python will automatically change the directory. But if you want to work with different files from different directory in the Python Shell, then you can change the directory in sys, as Cameron said earlier. 
In my case I had a class to import.  My file looked like this:In my main file I included the code via:
So I had just right clicked on my IDE, and added a new  and was wondering why I wasn't able to import from it. Later I realized I have to right click and create a Python Package, and not a classic file system folder. Or a post-mortem method being adding an  (which makes python treat the file system folder as a package) as mentioned in other answers. Adding this answer here just in case someone went this route.



Answer URL
https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH
https://docs.python.org/3/tutorial/modules.html#the-module-search-path
https://docs.python.org/3/library/os.path.html
https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly
