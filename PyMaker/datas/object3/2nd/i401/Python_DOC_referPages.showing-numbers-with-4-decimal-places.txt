Natural Text
How do I get 1324343032.324?As you can see below, the following do not work:
Use an additional  around it if you want to preserve it as a float.
You can use the following function to truncate a number to a set number of decimals:Usage:
I've found another solution (it must be more efficient than "string witchcraft" workarounds):About decimals moduleAbout rounding settings
How about this:Possible duplicate of round() in Python doesn't seem to be rounding properly[EDIT] Given the additional comments I believe you'll want to do:The floating point accuracy isn't going to be what you want:(all examples are with Python 2.6.5)
Use the decimal module. But if you must use floats and still somehow coerce them into a given number of decimal points converting to string an back provides a (rather clumsy, I'm afraid) method of doing it.So:
'%.3f'%(1324343032.324325235)It's OK just in this particular case.Simply change the number a little bit:1324343032.324725235And then:gives you 1324343032.325Try this instead:Another option for trun_n_d:Yet another option ( a oneliner one) for trun_n_d [this, assumes 'n' is a str and 'd' is an int]:trun_n_d gives you the desired output in both, Python 2.7 and Python 3.6trun_n_d(1324343032.324325235,3) returns 1324343032.324Likewise, trun_n_d(1324343032.324725235,3) returns 1324343032.324Note 1 In Python 3.6 (and, probably, in Python 3.x) something like this, works just fine:But, this way, the rounding ghost is always lurking around.Note 2 In situations like this, due to python's number internals, like rounding and lack of precision, working with n as a str is way much better than using its int counterpart; you can always cast your number to a float at the end.
Almo's link explains why this happens. To solve the problem, use the decimal library. 
I believe using the  function is a bad idea. Please see the below. It rounds the value. I use Python 3.6.Use a regular expression instead:
After looking for a way to solve this problem, without loading any Python 3 module or extra mathematical operations, I solved the problem using only str.format() e .float(). I think this way is faster than using other mathematical operations, like in the most commom solution. I needed a fast solution because I work with a very very large dataset and so for its working very well here. It returns the following output: 
You can also use:In Python 3.6 it would work.
Maybe this way:



Answer URL
https://docs.python.org/3/library/decimal.html
https://docs.python.org/3/library/decimal.html#decimal.ROUND_DOWN
