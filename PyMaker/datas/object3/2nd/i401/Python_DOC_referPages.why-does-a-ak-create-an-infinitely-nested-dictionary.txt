Natural Text
Here is my Python code that creates an infinitely nested dictionary:Here is the output:The output shows that  refers to  itself which makes it infinitely nested.I am guessing that the statement:is behaving like:which would indeed create an infinitely nested dictionary.I looked at Section 7.2: Assignment statements of The Python Language Reference but I couldn't find anything that implies that  should first set  to the new dictionary and then insert a key/value pair in that dictionary. Here are some excerpts from the reference that I found relevant but did not answer my question:If the target list is a single target with no trailing comma, optionally in parentheses, the object is assigned to that target.If the target is a subscription: The primary expression in the reference is evaluated. It should yield either a mutable sequence object (such as a list) or a mapping object (such as a dictionary). Next, the subscript expression is evaluated.If the primary is a mapping object (such as a dictionary), the subscript must have a type compatible with the mappingâ€™s key type, and the mapping is then asked to create a key/datum pair which maps the subscript to the assigned object. This can either replace an existing key/value pair with the same key value, or insert a new key/value pair (if no key with the same value existed).Each of these excerpts define the behaviour of an assignment with a single target such as  and  but they don't seem to talk about what should happen in case of . Where is the order of evaluation for such a statement documented?
Assignments in an assignment statement are resolved from left to right, as per the section 7.2 you quoted (emphasis mine):An assignment statement evaluates the expression list (remember that  this can be a single expression or a comma-separated list, the latter  yielding a tuple) and assigns the single resulting object to each of  the target lists, from left to right.That means that yes, indeed your statement is equivalent to:As a quick counter-proof, swapping the order of the assignments results in error:raises


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#assignment-statements
