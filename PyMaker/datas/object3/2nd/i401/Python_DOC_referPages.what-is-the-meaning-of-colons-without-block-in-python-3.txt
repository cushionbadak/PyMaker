Natural Text
Python 3.6 is about to be released. PEP 494 -- Python 3.6 Release Schedule mentions the end of December, so I went through What's New in Python 3.6 to see they mention the variable annotations:PEP 484 introduced standard for type annotations of function parameters, a.k.a. type hints. This PEP adds syntax to Python for annotating the types of variables including class variables and instance variables:Just as for function annotations, the Python interpreter does not attach any particular meaning to variable annotations and only stores them in a special attribute  of a class or module. In contrast to variable declarations in statically typed languages, the goal of annotation syntax is to provide an easy way to specify structured type metadata for third party tools and libraries via the abstract syntax tree and the  attribute.So from what I read they are part of the type hints coming from Python 3.5, described in What are Type hints in Python 3.5.I follow the  and  example, but not sure about the last one: How does  explain? Is it defining an empty list that will just allow integers?
Everything between  and the  is a type hint, so  is indeed defined as , and initially set to an empty list (and  is an empty dictionary initially, defined as ). and  are not part of the next syntax however, these were already defined in the Python 3.5 typing hints PEP. The 3.6 PEP 526 – Syntax for Variable Annotations proposal only defines the syntax to attach the same hints to variables; before you could only attach type hints to variables with comments (e.g. ).Both  and  are Generic types, indicating that you have a list or dictionary mapping with specific (concrete) contents. For , there is only one 'argument' (the elements in the  syntax), the type of every element in the list. For , the first argument is the key type, and the second the value type. So all values in the  list are integers, and all key-value pairs in the  dictionary are  pairs, mapping strings to integers.See the  and  definitions, the section on Generics, as well as PEP 483 – The Theory of Type Hints.Like type hints on functions, their use is optional and are also considered annotations (provided there is an object to attach these to, so globals in modules and attributes on classes, but not locals in functions) which you could introspect via the  attribute. You can attach arbitrary info to these annotations, you are not strictly limited to type hint information.You may want to read the full proposal; it contains some additional functionality above and beyond the new syntax; it specifies when such annotations are evaluated, how to introspect them and how to declare something as a class attribute vs. instance attribute, for example.
What are variable annotations?Variable annotations are just the next step from  comments, as they were defined in ; the rationale behind this change is highlighted in the respective section of PEP 526. So, instead of hinting the type with:New syntax was introduced to allow for directly annotating the type with an assignment of the form:which, as @Martijn pointed out, denotes a list of integers by using types available in  and initializing it to an empty list.What changes does it bring?The first change introduced was new syntax that allows you to annotate a name with a type, either standalone after the  character or optionally annotate while also assigning a value to it:So the example in question:Additional changes were also introduced along with the new syntax; modules and classes now have an  attribute (as functions have had since PEP 3107 -- Function Annotations) in which the type metadata is attached:Now  holds the declared types: won't currently show up through  because  only returns types that can also be accessed on a module; i.e., it needs a value first: Using  will show  but you really shouldn't be accessing  directly.Similarly, for classes:Where a  is used to grab the annotations for a given class (located in the first mapping) and all annotations defined in the base classes found in its  (consequent mappings,  for object).Along with the new syntax, a new  type has been added to denote class variables. Yup,  in your example is actually an instance variable, not a .Will I be forced to use it?As with type hints from , these are completely optional and are of main use for type checking tools (and whatever else you can build based on this information). It is to be provisional when the stable version of Python 3.6 is released so small tweaks might be added in the future.


Answer URL
https://docs.python.org/3/library/typing.html#typing.List
https://docs.python.org/3/library/typing.html#typing.Dict
https://docs.python.org/3/library/typing.html#generics
https://docs.python.org/3/library/typing.html
