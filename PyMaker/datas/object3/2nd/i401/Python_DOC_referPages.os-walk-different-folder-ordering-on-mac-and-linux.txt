Natural Text
Given the following file structure,I'm wondering if it's possible that python's  function returns the folders in different orders on Mac and Linux?  Both are using python 3.5.Mac:On Linux:In the case of Mac, looks as though the folder  is encountered first, while on Linux it's .  Any insight as to why this might be the case?
See the documentation on , relevant part:Changed in version 3.5: This function now calls  instead  of , making it faster by reducing the number of calls to  .And then in :Return an iterator of  objects corresponding to the entries  in the directory given by path. The entries are yielded in arbitrary  order, and the special entries  and  are not included.Regardless of  or , both are returned in arbitrary order anyhow.In short - order is not to be expected.Having said that, you should be able to manipulate the  in the loop based on this part:When topdown is , the caller can modify the dirnames list in-place  (perhaps using  or  assignment), and  will only recurse  into the subdirectories whose names remain in dirnames; this can be  used to prune the search, impose a specific order of visiting, or even  to inform  about directories the caller creates or renames  before it resumes  again. Modifying dirnames when topdown is   has no effect on the behavior of the walk, because in bottom-up  mode the directories in dirnames are generated before dirpath itself  is generated.So if you  it should work based on your  order.  I just tried it and it works.  I've also bolded the key part in-place - the  must be sorted in place for  to take the order:


Answer URL
https://docs.python.org/3/library/os.html#os.walk
https://docs.python.org/3/library/os.html#os.scandir
