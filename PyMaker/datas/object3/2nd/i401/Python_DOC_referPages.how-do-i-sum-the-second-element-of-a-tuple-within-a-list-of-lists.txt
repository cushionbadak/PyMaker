Natural Text
I have a list of lists named  which contains several lists which represent different bins, inside those bins are varying numbers of tuples with the format (iD, volume).  I need to iterate through to sum the volumes of the items in each of the bins by summing the second element of the tuples.  I've tried many things: gives me a 'list index out of range' error presumably because some bins have more than one tuple?I need a line of code that, depending on which bin I choose to sum, gives me the following integers:1st bin:  2nd bin: 3rd bin: 
The problem you have is you want to only sum one bin, but you're trying to sum across all bins. This means when you access the first bin, with the value  and ask for element with index 1, there is only an element with index 0 and you get the out of bounds error. You want something like this:as a "one liner", assuming you have a variable capturing the bin you wantThis is called a generator comprehension, and while it's similar to a list comprehension, there are subtle differences.
You can use a list-comprehension:Treating your actual requirement: "I need some sort of loop or comprehension that, depending on which bin I choose to sum":You can specify  and the above finds sum for that particular bin.
You were close :-)  Just put the summing fragment you gave inside a list comprehension so that it runs one summation per bin.FWIW, you can also use operator.itemgetter() for a beautiful, functional approach:Read this as, "make a list of sums for every bin in all bins" where the sums are "sum of item one in each tuple in a bin".
Once iterating over the main list, you can use  to add up the integers.Doc: sum built-in

You can use the following function:


Answer URL
https://docs.python.org/3/glossary.html#term-list-comprehension
https://docs.python.org/3/library/operator.html#operator.itemgetter
https://docs.python.org/3/library/functions.html#sum
