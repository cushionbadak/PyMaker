Natural Text
I would like to get a list of Python modules, which are in my Python installation (UNIX server).How can you get a list of Python modules installed in your computer?
SolutionMy 50 cents for getting a -like list from a Python script:As a (too long) one liner:Giving:ScopeThis solution applies to the system scope or to a virtual environment scope, and covers packages installed by ,  and (god forbid) .My use caseI added the result of this call to my flask server, so when I call it with  I get the list of packages installed on the server's virtualenv. It makes debugging a whole lot easier.CaveatsI have noticed a strange behaviour of this technique - when the Python interpreter is invoked in the same directory as a  file, it does not list the package installed by .Steps to reproduce:Create a virtual environmentClone a git repo with We have behave's  in :Install the python package from the git repoIf we run the aforementioned solution from If we run the aforementioned solution from  is missing from the second example, because the working directory contains 's  file.I could not find any reference to this issue in the documentation. Perhaps I shall open a bug for it.
in a Python shell/prompt.
Now, these methods I tried myself, and I got exactly what was advertised:  All the modules.Alas, really you don't care much about the stdlib, you know what you get with a python install.  Really, I want the stuff that I installed. What actually, surprisingly, worked just fine was:Which returned:I say "surprisingly" because the package install tool is the exact place one would expect to find this functionality, although not under the name 'freeze' but python packaging is so weird, that I am flabbergasted that this tool makes sense.  Pip 0.8.2, Python 2.7.  
In  you can type "Tab".In the standard Python interpreter, you can type "".At the command-line, you can use  .In a script, call .
Since pip version 1.3, you've got access to:Which seems to be syntactic sugar for "pip freeze".  It will list all of the modules particular to your installation or virtualenv, along with their version numbers.  Unfortunately it does not display the current version number of any module, nor does it wash your dishes or shine your shoes.
In normal shell just use
I just use this to see currently used modules:which shows all modules running on your python.For all built-in modules use:Which is a dict containing all modules and import objects.
As of pip 10, the accepted answer will no longer work.  The development team has removed access to the  routine.  There is an alternate function in the  for doing the same thing.  Here is an alternate version that works with pip 10:Please let me know if it will or won't work in previous versions of pip, too.
If we need to list the installed packages in the Python shell, we can use the  command as follows
I normally use  to get a list of packages (with version).This works in a virtual environment too, of course.
Very simple searching using pkgutil.iter_modules
I ran into a custom installed python 2.7 on OS X. It required X11 to list modules installed (both using help and pydoc).To be able to list all modules without installing X11 I ran pydoc as http-server, i.e.:Then it's possible to direct Safari to  to see all modules.
on windows, Enter this in cmd
Aside from using  I have been installing yolk in my virtual environments.
to get all available modules, run to get all installed modules (read: installed by ), you may look at For the second purpose, example code:
This solution is primary based on modules  and  and work with CPython 3.4 and CPython 3.5, but has no support for the CPython 2.Explanation - names all built-in modules (look my answer here) - returns an information about all available modules - returns an information about importing module, if exists - an importer for built-in modules (docs) - an importer for a standard Python module (by default has extension *.py) (docs) - an importer for modules as shared library (written on the C or C++)Full codeUsageFor the CPython3.5 (truncated)For the CPython3.4 (truncated)
pip freeze does it all finding packages however one can simply write the following command to list all paths where python packages are.
In case you have an anaconda python distribution installed, you could also usein addition to solutions described above.
This was inspired by Adam Matan's answer (the accepted one):which then prints out a table in the form ofwhich lets you then easily discern which packages you installed with and without .A note aside: I've noticed that when I install a packet once via  and once without, one takes precedence so that the other one isn't being listed (only one location is shown). I believe that only the one in the local directory is then listed. This could be improved.
There are many ideas, initially I am pondering on these two:pipcons: not always installedhelp('modules')cons: output to console; with broken modules (see ubuntu...) can segfaultI need an easy approach, using basic libraries and compatible with old python 2.xAnd I see the light: listmodules.pyHidden in the documentation source directory in 2.5 is a small script that lists all available modules for a Python installation.Pros:uses only imp, sys, os, re, timedesigned to run on Python 1.5.2 and newerthe source code is really compact, so you can easy tinkering with it, for example to pass an exception list of buggy modules (don't try to import them)
There are many way to skin a cat.The most simple way is to use the  function directly from the shell with:But for more information use the tool called pip-date that also tell you the installation dates.
I needed to find the specific version of packages available by default in AWS Lambda. I did so with a mashup of ideas from this page. I'm sharing it for posterity.What I discovered is that the provided boto3 library was way out of date and it wasn't my fault that my code was failing. I just needed to add boto3 and botocore to my project. But without this I would have been banging my head thinking my code was bad.What I discovered was also different from what they officially publish. At the time of writing this:Operating system – Amazon LinuxAMI – amzn-ami-hvm-2017.03.1.20170812-x86_64-gp2Linux kernel – 4.14.77-70.59.amzn1.x86_64AWS SDK for JavaScript – 2.290.0\SDK for Python (Boto 3) – 3-1.7.74 botocore-1.10.74
From the shellIf that's not helpful, you can do this.And see what that produces.


Answer URL
https://docs.python.org/3/library/importlib.html#importlib.machinery.BuiltinImporter
https://docs.python.org/3/library/importlib.html#importlib.machinery.SourceFileLoader
