Natural Text
Possible Duplicate:Dynamic module import in Python I intend to make a suite of files at some point soon, and the best way to organize it is to have a list, that list will be at the very top of a file, and after it will come a ridiculous amount of code to handle what that list controls and how it operates. I'm looking to write said list only once, and said list is a list of folder and file names in this format:As you can see,  are the same (sort of). File name is folder name with  on the end, but doing import XXX you don't need to do import XXX.py, so I don't see this causing an issue.The problem I'm facing is importing using this method...So for each test I have, print the name, assemble a string which contains the path (), for this example, print the test path, then add the path to the list (), then print to confirm it happened, then assemble a string which will be executed by  for the tests main module and eventually eval it.As you can see, I'm currently having to have a list of imports at the top. I can't simply do import  (the contents of  are the name of the module I wish to import), as it will try to find a module called , not a module called the contents of .I've seen a few examples of where this has been done, but can't find any which work in my circumstances. If someone could literally throw a chunk of code which does it that would be wonderful.I'd also request that I'm not hung, drawn, nor quartered for use of eval, it is used in a very controlled environment (the list through which it cycles is within the .py file, so no "end user" should mess with it).
Not sure if I understood everything correctly, but you can import a module dynamically using :Edit: I wasn't aware that the use of  was discouraged by the python docs for user code: __import__ documentation (as noted by Bakuriu)This should also work and would be considered better style:
Never, ever, ever mess with  directly if you don't know exactly what you are doing.There are a lot of ways to do what you want:The build-in  functionUsing Using I'd avoid using  directly, and go for (which is also suggested at the end of the documentation of ).
Add the path where module resides to sys.path. Import the module using __import__ function which accepts a string variable as module name.


Answer URL
https://docs.python.org/3/library/importlib.html
