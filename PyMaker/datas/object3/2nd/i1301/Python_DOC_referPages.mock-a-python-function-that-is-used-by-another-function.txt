Natural Text
I feel bad for asking such a simple question but I'm really confused as to why this example does not work as expected. I expect that the following assert would fail with a value of 70 but the test passes with a value of 30.The following is in a pip package called calc:
The answer of @JulienChein is pretty good, and I will just add some example based on you snippet.I create a similar environment to your.calculator.py__init__.pytest/test_calc.pyThe point is that  uses methods from calc.calculator.py, that's why you need to mock the method from this file.
Make sure you are patching the correct target. Specifically, follow the 'Where to Patch' section here: https://docs.python.org/3/library/unittest.mock.html#id5From your posted files, it seems possible that some names are mixed up ('calc' or 'calculator', for example). Make sure to read through the docs, especially:target should be a string in the form 'package.module.ClassName'. The target is imported and the specified object replaced with the new object, so the target must be importable from the environment you are calling patch() from. Patching, if you are just starting to do it, can be pretty confusing / maddening. Maybe add an  (debugger) in the test. This would pause the test at this statement. You can then check what  gives you. If it's of type  or some such, then the patch succeeded. If it's not, then you failed to patch the correct thing and should change the target path. Hope this helps!Also: are you sure  would work? I would try  then add  inside the test function. I haven't seen your way before and a brief digging of the source code didn't show me it would work (didn't show me it wouldn't work either!) - worth trying.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#id5
https://docs.python.org/3/library/unittest.mock.html#patch
https://docs.python.org/3/library/unittest.mock.html#patch
