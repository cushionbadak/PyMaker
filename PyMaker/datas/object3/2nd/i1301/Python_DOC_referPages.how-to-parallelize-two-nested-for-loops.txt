Natural Text
I want to parallelize two nested for loops in Python 2.7 but had no success on my own. I don't know how to approach the definition of what to parallelize.Anyway, here is single processor code:I want to have parallelization for the first array. How to perform it since this array is needed also in the second loop?Simple explanation and code example would be of great help. 
A couple of thoughts:I hope that your real calculation is more complex than the one you posted. If it's not, just compute the sum of  once and then multiply each element of  by that sum to get your result vector.(Assuming that the real use case is more complex.) Python isn't fast for CPU-Bound computations. When crunching a lot of numbers, you should use libraries like  instead. Numpy's operations are implemented in C and therefore A LOT faster than regular python implementations.(Assuming that numpy isn't an option.) In Python, there's a Global Interpreter Lock (GIL), that ensures that (except from IO tasks) only one thread is active at a time. This means that for computations, using multiple threads won't improve the computation time. The only way to achieve true parallelization is by using multiple processes (, but then copying computation results between processes can become a bottleneck.In summary, try to optimize the single-core execution first. Using numpy can already solve 80% of use cases. Parallelize only if these optimizations aren't enough, and don't expect the improvements from it to be substantial.Does this help?
The first step with calculations on large arrays of values in Python should be to implement it in numpy. This way you can take advantage of the vectorization of numpy. With the script below, I managed to run the same calculation in ~15 microseconds instead of 9 seconds in your version (almost 1000000x faster).This is probably not your real calculation though, so you should think about how to do this in your use case.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing
