Natural Text
I'm trying to run this simple code with asyncio queues, but catch exceptions, and even nested exceptions. I would like to get some help with making queues in asyncio work correctly:Output:This is the basic flow, what I would like to do later is run more requests on more workers where each worker will move the number from  to  and then the saver will print the numbers from .
Your queues must be created inside the loop. You created them outside the loop created for , so they use .  creates a new loop, and futures created for the queue in one loop can't then be used in the other.Create your queues in your top-level  coroutine, and either pass them to the coroutines that need them, or use  objects if you must use globals.You also need to clean up how you handle task cancelling inside your tasks. A task is cancelled by raising a  exception in the task. You can ignore it, but if you catch it to do clean-up work, you must re-raise it.Your task code catches all exceptions without re-raising, including , so you block proper cancellations.Instead, what does happen during cancellation is that you call ; don't do that, at least not when your task is being cancelled. You should only call  when you actually are handling a queue task, but your code calls  when an exception occurs while waiting for a queue task to appear.If you need to use , put this around the block of code that handles an item received from the queue, and keep the  outside of that  block. You don't want to mark tasks done you didn't actually receive.Finally, when you print exceptions, you want to print their ; for historical reasons, the  conversion of exceptions produces their  value, which is not very helpful for  exceptions, which have an empty . Use  in formatted strings, so you can see what exception you are catching:So, corrected code, with the  task enabled, the queues created inside of , and task exception handling cleaned up, would be:This printsIf you want to use globals, to share queue objects, then use  objects. You still create the queues in , but if you were to start multiple loops then the  module integration will take care of keeping the queues separate:


Answer URL
https://docs.python.org/3/library/contextvars.html#module-contextvars
https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.CancelledError
https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue.task_done
