Natural Text
I have a Base class with a public  in it. I want to make all classes in the hierarchy system callable, and their   actually translate their work to , the semantic is similar to . The following codes show how i currently implement.i know there is a kind of design that only define a  in the Base class, and in 's function body, to translate its work to , each Derived class implement its own . The semantic is like "inherit a public interface and implement from Base, and in this public interface, each Derived class define its own version of implementation".However, some of the  have different parameter list, not always the same as the Base one, like the case that i show above. The above code can work, but i guess there must be better solutions, without the repeat definition in all classes of the hierarchy system.So is there anyway to specific the  only one time in the Base class, but make it available for all Derived class?
If you're using a Python version >= 3.6, you could write an  method of the  class that assigns the  attribute of the child class to be equal to its  attribute:If you're using an older version of Python, you can accomplish a similar effect with a metaclass.
In the example you provided there is no need to use . There is already a perfectly good mechanism, since python will call the class constructor. So simply  and have that code call  as appropriate.You mention different parameter lists, without describing how to distinguish them. If it is a simple criterion, like , then what you have suffices. If it is more complex, you might want to put  in the signature, and have each method pick out just the keyword arguments that it recognizes.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__init_subclass__
