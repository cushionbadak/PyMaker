Natural Text
I've read all morning about subclassing and still have a few questions. Suppose we have the class Car below:The class is instantiated with default values for doors and color. We also check that the value of gas is not negative using decorators. This all makes sense to me. However, suppose we create a subclass ElectricCar:This does not work. A few questions:If we use , do we inherit all attributes from the parent class?In this case, the ElectricCar does not need a value for gas; do we need to inherit this attribute from Car?When we use  do we need to reference all of attributes of the parent class constructor? In the case of ElectricCar, do we need to write:   ?
To answer your questions:By subclassing  with , you create a new class called "ElectricCar" that contains all the attributes, properties and functions of the Car class in addition to whatever you add onto . An ElectricCar is a Car and something more. By calling  you are calling the constructor (the  function) on the class's parent class,  in this case. You get an error because this function expects two arguments:  and , but you only provide one. When calling any method, you must provide all required arguments for that method.In your case, your  doesn't need  because it represents an electric car. However, you have no option in Python to say, "I want to inherit this from  but not that". Therefore, you have an issue with your architecture because you assume that the base case for a car is a gasoline car. Therefore, you should remove the  attribute from  and create a  class that encapsulates that information. 
Let's come up with a really simple example:Any instance of  will inherit from  all attributes other than those specifically added or overwritten. To demonstrate, you can use the inspect module to show the attributes of each instance. (I am filtering out the internal methods and attributes to only focus on user attributes):You can see the class and instance variables in an instance of  here.Now look at an instance of :If you remove  from the  in  then the  in  never gets called. The result is visible and implicit code related to  in  (like the assignment of instance values) is not done:The difference is that the instance attributes in  will not be added as attributes to an instance of  (as well as any other specific additions that are made to an instance of ):


Answer URL
https://docs.python.org/3/library/inspect.html
