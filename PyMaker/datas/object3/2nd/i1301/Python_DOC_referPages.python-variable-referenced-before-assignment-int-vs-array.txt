Natural Text
When I compile this snippet with func1 I get an error about referencing output before assignment, which seems reasonable to me:But when I compile this snippet with func2 I don't get an error, which seems unreasonable to me.Thoughts? Thanks in advance and sorry if this is a duplicate. I didn't didn't see this particular question addressed in similarly titled posts when researching.
The problem here is in how Python binds names to variables.Any time you write an assignment in a function (something like  or ), Python will bind that name locally for the entire function scope.  This means that any variables with that name declared outside the function are ignored.For example:This will produce an  at the print statement because Python sees that  is assigned to later in the function, and binds it locally, ignoring the variable you defined outside the function.  Since  is only defined after the print statement, you get an error.This can be very confusing because removing the  line will cause the print statement to work as expected!The solution is to explicitly tell Python not to bind the name locally.  This can be done with the  and  keywords, e.g.: tells Python to bind the name in the module's global scope, while  (introduced in Python 3) tells Python to bind to the enclosing scope (for example, if you define a function inside a function).There's a nice explanation of this (with examples) in the documentation :-)Once we understand these rules, we can see that your first example fails because you're trying to increment a variable that doesn't yet exist.   is equivalent to , which triggers local name binding.On the other hand, your second example doesn't trigger the error because you're not assigning to  (you're mutating it instead), so it will bind to the global variable that you defined.
In Python, global variables when called in functions don't work all the same. The data types (on a high level) in Python can be categorised into "mutable" and "immutable".If you have have mutable datatypes like  then they can be both : accessed and modified in the function without referring them with a  keyword.Eg:But if you have immutable types like  or  then they can be accessed but not modified.Eg: But to modify a global variable of immutable types like  you have to include it first with the  keyword then you're free to use it like any local variable. Eg:Thanks to Mark Tolonen for this valuable point.  At the end, you cannot reassign a global variable without the global keyword, irrespective of whether the variable is mutable or immutable. Eg:To make the above work, include them in the function via  keyword and use them as required.


Answer URL
https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces
