Natural Text
Python does not restrict the names of parameters, however some parameter names are strongly governed by convention, such as , , , and . The names  and  always represent the same concept, so in those cases it's hard for me to see a compelling reason for someone to veer from convention. With  and , however, I find this naming convention stifling.Say I have a class that has various properties that can be set via passing kwargs to its constructor:In this case, the kwargs are only intended to be settable properties of an instance of that class, so to me it would make sense to write the definition as follows:That way, one only need look at the method's signature to get an idea of what the kwargs are for.Generally, I believe convention is a good thing. However, it seems to me that always using  and  is a missed opportunity to convey useful information to the user of an API about the nature of a function/method's args and kwargs. After all, the fact that they are unnamed or named arguments is already made clear by the presence of the single or double asterisk.Does anyone have examples of alternate names for args and kwargs being used in real-world, multi-developer code or is it just too against the grain to use other variable names for these constructs?If it really is just a horrible, horrible idea to not use these conventional names, what is the reason for that?
I don't see any reason against using context specific names, such as ..., , etc.The  docs say .The  docs say . uses  in the docs and in the docstring. uses  in the docs and in .Feel free to hunt for more examples.


Answer URL
https://docs.python.org/3/library/functions.html#print
https://docs.python.org/3/library/functions.html#zip
