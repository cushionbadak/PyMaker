Natural Text
How do I access the index itself for a list like the following?When I loop through it using a  loop, how do I access the loop index, from 1 to 5 in this case?
Using an additional state variable, such as an index variable (which you would normally use in languages such as C or PHP), is considered non-pythonic.The better option is to use the built-in function , available in both Python 2 and 3:Check out PEP 279 for more.
Using a for loop, how do I access the loop index, from 1 to 5 in this case?Use  to get the index with the element as you iterate:And note that Python's indexes start at zero, so you would get 0 to 4 with the above. If you want the count, 1 to 5, do this:Unidiomatic control flowWhat you are asking for is the Pythonic equivalent of the following, which is the algorithm most programmers of lower-level languages would use:Or in languages that do not have a for-each loop:or sometimes more commonly (but unidiomatically) found in Python:Use the Enumerate FunctionPython's  function reduces the visual clutter by hiding the accounting for the indexes, and encapsulating the iterable into another iterable (an  object) that yields a two-item tuple of the index and the item that the original iterable would provide. That looks like this:This code sample is fairly well the canonical example of the difference between code that is idiomatic of Python and code that is not. Idiomatic code is sophisticated (but not complicated) Python, written in the way that it was intended to be used. Idiomatic code is expected by the designers of the language, which means that usually this code is not just more readable, but also more efficient.Getting a countEven if you don't need indexes as you go, but you need a count of the iterations (sometimes desirable) you can start with  and the final number will be your count.The count seems to be more what you intend to ask for (as opposed to index) when you said you wanted from 1 to 5.Breaking it down - a step by step explanationTo break these examples down, say we have a list of items that we want to iterate over with an index:Now we pass this iterable to enumerate, creating an enumerate object:We can pull the first item out of this iterable that we would get in a loop with the  function:And we see we get a tuple of , the first index, and , the first item:we can use what is referred to as "sequence unpacking" to extract the elements from this two-tuple:and when we inspect , we find it refers to the first index, 0, and  refers to the first item, .ConclusionPython indexes start at zeroTo get these indexes from an iterable as you iterate over it, use the enumerate functionUsing enumerate in the idiomatic way (along with tuple unpacking) creates code that is more readable and maintainable:So do this:
It's pretty simple to start it from  other than :NoteImportant hint, though a little misleading since  will be a   here.Good to go.

As is the norm in Python there are several ways to do this. In all examples assume: 1. Using enumerate (considered most idiomatic)This is also the safest option in my opinion because the chance of going into infinite recursion has been eliminated. Both the item and its index are held in variables and there is no need to write any further codeto access the item.2. Creating a variable to hold the index (using )3. Creating a variable to hold the index (using )4. There is always another wayAs explained before, there are other ways to do this that have not been explained here and they may even apply more in other situations. e.g using  with for. It handles nested loops better than the other examples.
Old fashioned way:List comprehension:
The fastest way to access indexes of list within loop in Python 2.7 is to use the range method for small lists and enumerate method for medium and huge size lists.Please see different approaches which can be used to iterate over list and access index value and their performance metrics (which I suppose would be useful for you) in code samples below:See performance metrics for each method below:As the result, using  method is the fastest one up to list with 1000 items. For list with size > 10 000 items  is the winner.Adding some useful links below:What is the difference between range and xrange functions in Python 2.X?What is faster for loop using enumerate or for loop using xrange in Python?range(len(list)) or enumerate(list)?
I don't know if the following is pythonic or not, but it uses the Python function  and prints the index and the value.Output:
This way you can extend a list. Extend means you can add multiple values at a time.To append this list you have to write the code given below:This way you can add a single value at a time. If you write  so this will create a sub list for this element.
First of all, the indexes will be from 0 to 4. Programming languages start counting from 0; don't forget that or you will come across an index out of bounds exception. All you need in the for loop is a variable counting from 0 to 4 like so:Keep in mind that I wrote 0 to 5 because the loop stops one number before the max. :)To get the value of an index use
According to this discussion: http://bytes.com/topic/python/answers/464012-objects-list-indexLoop counter iterationThe current idiom for looping over the indices makes use of the built-in 'range' function:Looping over both elements and indices can be achieved either by the old idiom or by using the new 'zip' built-in function[2]:orvia http://www.python.org/dev/peps/pep-0212/
You can do it with this code:Use this code if you need to reset the index value at the end of the loop:
Best solution for this problem is use enumerate in-build python function. enumerate return tuple first value is index second value is element of array at that index
If there is no duplicate value in the list:Otherwise use . OR use below:
Here's what you get when you're accessing index in  loops:Hope this helps.
You can also try this:The output is 
In you question, you write "how do I access the loop index, from 1 to 5 in this case?"However, the index for a list, runs from zero.  So, then we need to known if what you actually want is the index and item for each item in a list, or whether you really want numbers starting from 1.  Fortunately, in python it is easy to do either or both.First, to clarify, the enumerate function, iteratively returns the index and corresponding item for each item in a list.The output for the above is then,Notice that the index runs from 0.  This kind of indexing is common among modern programming languages including python and c.If you want your loop to span a part of the list, you can use the standard python syntax for a part of the list. For example, to loop from the second item in a list up to but not including the last item, you could useNote that once again, the output index runs from 0,That brings us to the start=n switch for enumerate().  This simply offsets the index, you can equivalently simply add a number to the index inside the loop.for which the output is
If I were to iterate nums = [1,2,3,4,5]I would doOr get the length as l = len(nums)
You can use the  methodEDITHighlighted in the comment that this method doesnâ€™t work if there are duplicates in , the method below should work for any values in :Or alternativelyif you want to get both the index and the value in  as a list of tuples.It uses the method of  in the selected answer to this question, but with list comprehension, making it faster with less code.
To print tuple of (index, value) in list comprehension using a  loop:Output:
It can also be done by using the  method Here the indexing starts from 0. But in case you need to start it from 1 just add 1 to the  method as follows
You've received a number of answers explaining , but if you only need the index for accessing matching entries in two lists, there's another way that's cleaner and simpler in Python 3: .For example, if you're using the index to pull out corresponding names for the numbers in your list, you could do it like this:That would produce
This serves the purpose well enough:


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
