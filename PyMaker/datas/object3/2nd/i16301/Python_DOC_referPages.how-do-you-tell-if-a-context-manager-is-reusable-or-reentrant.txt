Natural Text
The Python  docs note that context managers can be single-use, reusable, or reentrant. Reentrant ones can be used in more than one  statement including nested ones; reusable but not reentrant ones can be used in more than one  statement but not nested. A couple of examples are mentioned.https://docs.python.org/3/library/contextlib.html#reentrant-context-managersThe docs for other context managers don't always mention what they are, though. For example, the docs for the  context manager in  don't mention this at all.In general, what would you look at in the source to determine if a context manager is single use, reusable or reentrant?
One good way is to look at the object being returned/modifed or context being set up by the  call, and then see what happens to that object/context in the  call. Usually understanding how the state is actually being changed in each of those will make it obvious what will happen if you nest or re-use that object.For example, when you  you're getting a file handle back. In the , you're closing that file handle. Of course, it doesn't make sense to re-open a file handle object once its closed, nor does it make sense to open an already open file handle. And of course, closing the inner file handle will also close the outer file handle, which will be problematic. This is why no one ever does this:There's no point in using  after it's closed, so we always use: and  objects can be used as context managers, too. Doing this makes sense:This does not, because  will deadlock if you try to take it recursivelyBut that will work fine with , which can be acquired recursively.Another example from the stdlib:  can be be used as a context manager in Python 3.3+. Here's what the docs say:Pool objects now support the context manager protocol.  returns the pool object, and  calls . says it does this:Stops the worker processes immediately without completing outstanding work. When the pool object is garbage collected  terminate() will be called immediately.Clearly, that's a one-time use.The  context manager is temporarily patching some object, and then undoing the patch when it's done. Nesting definitely doesn't make sense there - why would you want to re-patch something that's already patched? However, patching, unpatching, and then patching again does make sense logically, so it should be reusable (which testing shows is the case).I don't think there is really any well-defined set of things that you can say "look for this and you'll know a context manager is reusable/re-entrant/one-time" because a context manager can literally do anything. The best you can do is understand what context is being established when in , how it's being broken down , and then logically determine what the implications of reusing/re-entering that context is.


Answer URL
https://docs.python.org/3/library/contextlib.html#reentrant-context-managers
