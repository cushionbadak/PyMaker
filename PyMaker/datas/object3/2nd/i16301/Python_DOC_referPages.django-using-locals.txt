Natural Text
This question already has an answer here:Django template and the locals trick                    8 answers                I am beginner in web development with Django. I have noticed that the  function is used instead of the context dictionary that I am used to see.From what I see on the internet  is pretty useful, so are there any special cases where this is not true and its better to use the ?
Using  in that tutorial is just for convenience, since all the data he needs to pass to the template is stored in local variables.  returns a dictionary holding the local variables names (as keys) and the current values (as values).  You need to use an explicit context_dictionary, instead of passing , if you must build your data and you don't have such data in separate variables.both  and context_dictionary are dictionaries, and that's the only requirement: a dictionary-like object (i.e. an object supporting  and  methods). How you get the dictionary, is up to you. There's no practice about that, but alternatives are:Return a , which is a dict-like object, if you use .Return  if you have the data in your local variables.Return a hand-made dictionary with your data otherwise.EDIT - Examples:Example on building the dictionary on your own:Example on building the dictionary from :Assume hello.html is - in either case:You'll get the expected result.
if your view looks something like this:and in your template you want to do:then in the view you could:This is because  returns a dict of all the locally defined variables in the current scope. So it's kind of a sneaky shortcut.Be careful though, since you are likely to expose more values than you intend to... generally we'd prefer the "Explicit is better than implicit" approach from the Zen of Python i.e. define a dict containing only what you want to pass through to the template.
What you mean by context dictionary is the named arguments? If yes, they're different, locals shows you all the locals variables, kwargs dictionary instead shows only the named arguments.The first print shows: {'a': 10, 'b': 20} while the second one shows: {'c': 'abc', 'kwargs': {'a': 10, 'b': 20}}
 is a Python built-in function that according to the official Python documentation:Updates and returns a dictionary representing the current local symbol table. Free variables are returned by  when it is called in function blocks, but not in class blocks.Example:I think  might be useful to avoid repetition when you are going to create a dictionary with the variables you have defined in the view (probably most or all variables you have created are going to be included in the context dictionary). However, using  is not beneficial for refactoring. The local variables of a view can freely be changed when performing a refactoring. Then, you cannot safely rename a variable because they don't have a visible effect. Another problem you could also experience is performance because you will probably include variables that you don't really need in the context, and in case your view is declaring lots of temporal variables, the context will be overloaded.Therefore, it might be a good idea to avoid .


Answer URL
https://docs.python.org/3/library/functions.html#locals
