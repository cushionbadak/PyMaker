Natural Text
I learned multithreading from here, and I use the last example as my template for all multithreading applications. Here's the code:As you can see, this example uses t.join() on all of the threads to wait for them to complete. My actual version of this is super long and a large project, but that's not the point. I'm just wondering if there are any special cases when  doesn't need to be used?
I'm just wondering if there are any special cases when join() doesn't need to be used?The obvious case is when some other thread (which you're joining) is joining the thread, so you don't have to, but presumably you didn't need to be told about that one. :)First,  threads do not need to be joined (and usually shouldn't be). You can just abandon them, and they'll be terminated abruptly at some point while your main thread is exiting. (Make sure not to do anything dangerous, like overwriting a file, in a daemon thread, of course.)Second, if you don't  your (normal, non-daemon) threads, it's not actually documented exactly what will happen. Your main thread may wait for all of them in some arbitrary order, or it may exit and return to the shell while the threads keep working in the background, or it may kill them. But if you for some reason don't care at all which one of those happens, then don't .Third, on many platforms, it is well defined what will happen (and usually, it's "they all get ed in some arbitrary order"). If, say, you're writing a program that only has to run on CPython under Red Hat Linux, and you're sure of what happens in CPython under Red Hat Linux, and your program structure makes it hard to keep track of your threads, then it's reasonable to just not  them (maybe with a comment) rather than rearchitecting your whole program.Finally, dummy threads shouldn't be joined. But if you have dummy threads and didn't know you had dummy threads, you have bigger problems than .


Answer URL
https://docs.python.org/3/library/threading.html#thread-objects
