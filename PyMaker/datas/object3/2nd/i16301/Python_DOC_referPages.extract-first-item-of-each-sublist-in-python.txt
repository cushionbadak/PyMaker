Natural Text
I am wondering what is the best way to extract the first item of each sublist in a list of lists and append it to a new list. So if I have:and I want to pull out ,  and  and create a separate list from those.I tried:
Using list comprehension:
You could use zip:Or, Python 3 where  does not produce a list:Or, Or, (my favorite) use numpy:
Python includes a function called itemgetter to return the item at a specific index in a list:Pass the itemgetter() function the index of the item you want to retrieve.  To retrieve the first item, you would use itemgetter(0).  The important thing to understand is that itemgetter(0) itself returns a function.  If you pass a list to that function, you get the specific item:This is useful when you combine it with map(), which takes a function as its first argument, and a list (or any other iterable) as the second argument.  It returns the result of calling the function on each object in the iterable:Note that map() returns a generator, so the result is passed to list() to get an actual list.  In summary, your task could be done like this:This is an alternative method to using a list comprehension, and which method to choose highly depends on context, readability, and preference.More info:https://docs.python.org/3/library/operator.html#operator.itemgetter
Had the same issue and got curious about the performance of each solution.Here's is the :The first numpy-way, transforming the array:Fully native using list comprehension (as explained by @alecxe):Another native way using  (as explained by @dawg):Second numpy-way. Also explained by @dawg:Surprisingly (well, at least for me) the native way using list comprehension is the fastest and about 10x faster than the numpy-way. Running the two numpy-ways without the final  saves about one Âµs which is still in the 10x difference.Note that, when I surrounded each code snippet with a call to , to ensure that Generators run till the end, the timing stayed the same. 
Your code is almost correct. The only issue is the usage of list comprehension.If you use like: (x[0] for x in lst), it returns a generator object.If you use like: [x[0] for x in lst], it return a list.When you append the list comprehension output to a list, the output of list comprehension is the single element of the list.lst2    = [['a', 1, 'x']]lst2[0] = ['a', 1, 'x']Please let me know if I am incorrect.
Output:  
You said that you have an existing list. So I'll go with that.Right now you are appending the generator object to your second list.But you probably want it to be a list of first itemsNow we appended the list of first items to the existing list. If you'd like to add the items themeselves, not a list of them, to the existing ones, you'd use list.extend. In that case we don't have to worry about adding a generator, because extend will use that generator to add each item it gets from there, to extend the current list.orhttps://docs.python.org/3.4/tutorial/datastructures.html#more-on-listshttps://docs.python.org/3.4/tutorial/datastructures.html#list-comprehensions


Answer URL
https://docs.python.org/3/library/operator.html#operator.itemgetter
