Natural Text
I have been trying to implement tabular method for simplification of boolean expressions in python. For that I need to check whether two given strings differ at only one indexfor example, the function should return the following for the following examples: and  - true as the two differ only at position 1 and  - true as differ at only 2 and  - false as differ at 2,3right now I am using the following function:I want to implement it in a very fast manner (low complexity). Is there a way to do so in python?
This is a more well-performing solution, coded in Python 3:I do not checked for length difference because you said the two strings are equal, but for a more general approach I would add it.If you need the position of the different character:These are benchmarks performed with timeit, tested with match("0-001", "0-101"). I translated all solutions to py3 and removed length test.your solution: 5.12Martijn Pieters' solution: 4.92enrico.bacis' and lakesh's solution: 5.51my solution: 2.42Tests with a longer string:Martijn Pieters' solution:result: 32.82My solution:Result: 20.21
I used the Levenshtein distance to match strings that are different by one character added or removed only (and not simply replaced). So:John's dogJohns dogare considered as a match.The Levenshtein distance is the number of edits it would take to replace one string by another. The Levenshtein distance of the two above strings is 1, because the only thing to do is to remove one character.To use it, you can simply install the according Levenshtein python module:and then use it:

In Python 2, use  (Python 2 and 3 compatible -as-iterator) (in Python 3 the built-in will do fine) to combine the two strings character by character, then use  and  to loop over the resulting iterator:This works because  is an iterator; it yields pairs of characters one by one on demand, and  and  only take as many pairs as needed to determine their outcome.  stops iterating as soon as it finds two characters that are not equal.  will only return True if all the remaining characters are equal.Together the two conditions then are only True if there is exactly one pair that differs.Because an iterator approach is used, the above does the absolute minimum amount of work to determine if your strings are a match; the moment a second pair is found that doesn't match iteration stops; there is no point in looking at the rest of the character combinations.Demo (Python 2, so  is imported):
Same LengthsIf the two string have the same length:You can also create a generator of matchers like this:Example:Different LengthsIf they have different length we can assume that the exceeding characters are different, so:


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/functions.html#any
https://docs.python.org/3/library/functions.html#all
