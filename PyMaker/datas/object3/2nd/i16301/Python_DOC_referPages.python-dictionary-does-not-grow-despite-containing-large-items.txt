Natural Text
I was trying to to divide dictionaries into dictionaries below a fixed size, but when I call  it tells me the size of the dictionary is 136 regardless of what's inside it, even if an individual value is larger than this. Why is this, do  dictionaries only stores references? Is there a way around this that would allow me to evaluate a python dictionaries size in memory at runtime?
The documentation for  specifically explains this:Only the memory consumption directly attributed to the object is accounted for, not the memory consumption of objects it refers to.And it even tells you how to solve your problem:See recursive sizeof recipe for an example of using  recursively to find the size of containers and all their contents.So, what does "directly attributed to the object" mean?As you surmise, dictionaries only hold references to objects. In fact, that's true of almost everything in Pythonâ€”variables, attributes of objects, lists, etc. (There are a few exceptions, like , that hold actual (unboxed) values instead, but they're the exception, not the rule.)So, the space used by a  is the space for its header, and for a hash table of (effectively)  buckets.The hash table starts off with a small number of buckets, and expands whenever the table gets too full. So, you won't see the memory usage go up with each insert, but every so often. (Depending on your Python implementation, exactly how often may be gameable by picking non-equal values with the same hash, but if you're not doing anything weird it'll be roughly consistent.)


Answer URL
https://docs.python.org/3/library/sys.html#sys.getsizeof
https://docs.python.org/3/library/array.html
