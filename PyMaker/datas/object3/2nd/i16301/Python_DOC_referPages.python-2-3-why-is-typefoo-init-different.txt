Natural Text
Consider the class:Executing  on Python 2:Executing  on Python 3:Why is the return of  different on Python 2 and 3?
If you're asking what changed, the short version is in What's New in 3.0:The concept of “unbound methods” has been removed from the language. When referencing a method as a class attribute, you now get a plain function object.In more detail:A function object is a descriptor whose  returns a method. In Python 2.x, it looks like this (in pure Python pseudocode, and slightly simplified):So, when you write , you get back the unbound method .In 3.x, it instead looks like this:For the full details, see The standard hierarchy in the reference docs for 3.x vs. 2.x, under "Callable Types".If you're asking why it was changed… well, as far as I remember, there wasn't much discussion on this—no PEP, no long discussion on python-dev or -ideas, etc.—and it was only given that one line in the docs.But the reasoning seems pretty obvious. Unbound methods aren't particularly useful; they're just extra scaffolding that provides the exact same behavior as the function they're wrapping.* They were only there in 2.2-2.7 to better model the behavior of classic classes** and/or because it seemed easier to implement that way and/or because early in the design it wasn't clear that you could implement things like  without it, and by the time Guido got far enough to realize that there was no problem there, it was easier to leave the design as he'd originally written it.* The CPython implementation of bound methods adds an  check to verify that the first argument is a , but that isn't clearly documented, nobody's written code that relies on it, and it isn't as helpful for debugging as you'd expect.** If you want to know why classic classes worked the way they did, you have to dig through Guido's Python History blog—all of which is worth a read if you've got the time.


Answer URL
https://docs.python.org/3/whatsnew/3.0.html#operators-and-special-methods
https://docs.python.org/3/reference/datamodel.html
https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy
