Natural Text
I'm testing with the asyncio module, however I need a hint / suggesstion how to fetch large emails in an async way. I have a list with usernames and passwords for the mail accounts.I thought about:However, the long part is to download the email attachments. Email: How could I process all (downloading attachments) mails in an async way?
If you don't have an asynchronous I/O-based imap library, you can just use a  to do the I/O in threads. Python will release the GIL during the I/O, so you'll get true concurrency:This isn't quite as nice as a truly asynchronous I/O-based solution, because you've still got the overhead of creating the threads, which limits scalability and adds extra memory overhead. You also do get some GIL slowdown because of all the code wrapping the actual I/O calls. Still, if you're dealing with less than thousands of mails, it should still perform ok.We use  to use the  as part of the asyncio event loop,  to wrap the coroutine object returned in a , and  to iterate through the futures in the order they complete.Edit:It seems  is not thread-safe. I've edited my answer to use thread-local storage via , which allows us to create one connection object per-thread, which can be re-used for the entire life of the thread (meaning you create  connection objects only, rather than a new connection for every ).
I had the same needs : fetching emails with python 3 fully async. If others here are interested I pushed an asyncio IMAP lib here : https://github.com/bamthomas/aioimaplibYou can use it like this :Large emails with attachments are also downloaded with asyncio.


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.run_in_executor
https://docs.python.org/3/library/asyncio-task.html#asyncio.async
https://docs.python.org/3/library/asyncio-task.html#asyncio.as_completed
