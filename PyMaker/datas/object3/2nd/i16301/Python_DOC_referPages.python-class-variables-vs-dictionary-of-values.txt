Natural Text
Lets say I've got a class which represents an object that has many properties (simple data types like strings and integers). Should they be represented as instance variables or would the better "pythonic" be to put them into a dictionary?For example: 
My general philosophy is to use attributes if the set of items is more or less fixed, and use a dictionary if the set may change on an ad-hoc basis.  If your FruitBasket is specifically made to contain apples, oranges, bananas and pears, then use attributes.  If it may contain any random assortment of other things (e.g., you might sometimes throw in a pineapple or a raspberry), use a dictionary.One reason can be sort of seem even in your example code.  If you use attributes, you have to specify each one literally in the code (e.g., ).  Moreover, you often wind up doing what you did here, where you explicitly pass each item as an argument to .  This obviously won't work if you later decide to add new fruits.  You could keep adding more arguments to , but that quickly becomes unwieldy.In addition, if you have a fixed set of items, you'll probably be accessing them individually.  That is, if you know you only have apples, oranges, bananas, and pears, you can directly access them by name as you did here (, , etc.).  If you don't know ahead of time what fruits may be in the basket, you can't know what names to use a prior, so you'll typically process them by iterating over them.  It is very easy to iterate over the items of a dictionary.  By contrast, iterating over the attributes of an object is fraught with peril, since you can't easily distinguish the attributes that contain data that the object is "about" (e.g., ) from those that pertain to the structure of the object itself (e.g., , , , etc.).In short, if you don't know ahead of time what will be in the basket, you'll want to iterate over its contents, and if you want to iterate over something's contents, it's best to use a type designed for containment (like a list or dict), because these types cleanly separate the container from its contents.
It depends what are you going to do with it. A dictionary is more flexible, as it easier to expand with new fruits, as you can iterate to get them all. Representing the fruits as members saves you from some typing, but you have to hard-code all the accesses to them.A middle ground exists, and it is to use the pattern to syncronize both. Here there is some discussion about how to implement it.And, before you write another class, remember: Stop writing classes.
You probably want to use a dictionary or you can use the new python 3.4 enum! If it should be an enum. https://docs.python.org/3/library/enum.html
This and very similiar questions have been asked many times before, and there are various  implementations out there.However, you should ask yourself if you have any reason at all not to use a dict. If you don't, then the pythonic thing to do is to use a dict, obviously. A class with no methods should probably not be a class at all. You should also consider the fact that not all valid dict keys are valid attribute names.


Answer URL
https://docs.python.org/3/library/enum.html
