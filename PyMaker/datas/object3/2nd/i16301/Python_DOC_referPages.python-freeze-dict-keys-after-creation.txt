Natural Text
This question already has an answer here:Define a python dictionary with immutable keys but mutable values                    3 answers                Is it possible to "freeze" a python dict after creation so that it's impossible to add new keys to it? It would only be possible to change existing key values.If not, how do you know when you are changing an existing keyvalue pair, and when you are adding a new one?
Maybe something like this:Note that you might want to overwrite other methods too, including , , , , and , as they can all modify the dictionary.If you are interested in locking the dictionary completely, you could use  which provides a read-only view onto your dictionary. Once you have created your normal dictionary, you can then just create a mapping proxy of it which simply does not have any of the assignment/update functionality. You can also then get rid of any reference to the original dictionary (the mapping will keep one), to prevent it from being used to update it any further:Or just in a single line, without ever having a reference to the original dictionary:
This isn't possible with a "vanilla" dict.  You'll probably want to subclass  . . . Untested code follows


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__delitem__
https://docs.python.org/3/library/stdtypes.html#dict.update
https://docs.python.org/3/library/stdtypes.html#dict.setdefault
https://docs.python.org/3/library/stdtypes.html#dict.pop
https://docs.python.org/3/library/stdtypes.html#dict.popitem
https://docs.python.org/3/library/types.html#types.MappingProxyType
