Natural Text
I am reading through 'Programming Python' and one of the examples in the book where a class is created is the following:My question is why pay is set equal to 0 and job is set at None unlike name and age which are not set to anything. Is this because it enforces variable type? Or is it just in case only name and age are passed to the class? Or something else for that matter.
What I think this example try to show is that you are defining an abstract logic behind the class when you initializes it: In this case, the logic is that any person have a name and an age but not necessarily a job and pay. So, every new class member will require to have a name and age (since there are no initial values), but will not require a pay and a job. This function do not enforce variable types! - you can basically put any type into these variables, and indeed - in a real life scenario you may want to do some type checking before using these types, within the function. 
I think they just wanted to give an example which shows both the possibilities:Having a required positional argumentHaving an optional keyword argument, with a default valueIt does not have anything to do with enforcing variable type.
the values name and age are mandatory when you are creating an object using that class. But  pay and job are not mandatory, if you dont specify them at creation time they will get the values 0 and None by default.I hope this helpsAlvaro
As well as probably presenting a learning opportunity about optional keyword arguments (which can be passed by saying (name = value), or simply by using them positionally like other arguments), the concept, in particular, is used for parameters which may not be initially important to a default use of the method.Take, for instance, the  method from Python 3+. Often you will see it only in the form . But it can actually be used to print to something else; this is namely used in debugging, where it prints to , which, unlike the standard output, should generally not be overridden. In this case, it would be used as: . Normally, it sets itself to the default standard output file (which would be a hassle for the programmer to specify every time they wanted to print), but can be specified. What you're seeing here is a constructor that must be called, at least, as  for example, but may also be called as . Now,  is  and  is .Read more: Python 3 Official Tutorial on Default Arguments(Or the Python 2 version)


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#default-argument-values
