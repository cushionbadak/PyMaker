Natural Text
So, I have the most trivial in the world example. This is my class to be tested:And this is the tester itself:And this is what I see in the console, when I'm running my test.py:It is reaaly iteresting, because it is controversial. On the one hand the test says that "Exception not raised by doit", but one line below it clearly prints out a message from the Exception block. So, what I'm doing wrong here??? Thanks!
To directly answer your question, the reason why you are getting that message is because with this assertion: You are testing to make sure an exception was raised. But your try/except suppresses this. If you actually remove your try/except your test will in fact pass, because now your method will raise. Since you do not want to do this, what you should be doing instead is testing the behaviour of your method when an exception is raised. Ultimately, you want to make sure that your  method is called in your except. I have put together an example below to help understand this. Keeping in mind what @user2357112 mentioned, which is very important to keep in mind when unittesting, here is an example to help expand on that to provide a practical use for what you are trying to do: Let us just put together some method:We will now put this in to your staticmethod you defined as such:So now, when it comes to your unittesting, you want to test the behaviour of your method . With that in mind, what you will do in this case, is test that  will raise an exception and you will validate how your  method behaves to that exception being raised. At this point, I suggest taking a look at the documentation behind unittest and mock to get more familiar with what you can do with your testing, but here is an example using mock patching to test the behaviour of your code if an exception is being raised: When you put it all together, the following is functional code that I ran on my end that you can play around with to understand what is happening: 
 is an assertion about the function's visible behavior, not its internals. It asserts that the stated exception passes out of the function. Any exceptions that are handled inside the function are not 's concern.
 failed since there was actually no exception raised. Well, it was raised but handled with  inside the  method. The problem is here:You are raising an exception and then catching it without re-raising. From a caller ( is the caller in your case) perspective, no errors were thrown during the function call.  Re-raising an exception allows a caller to handle an exception as well.  Put a  after the print:Also see Handling Exceptions.


Answer URL
https://docs.python.org/3/library/unittest.html
https://docs.python.org/3/library/unittest.mock.html
