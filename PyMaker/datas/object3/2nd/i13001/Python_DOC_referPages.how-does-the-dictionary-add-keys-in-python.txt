Natural Text
When I run the code and change my range to 1, I get what I expect when I set the range to 2 I still get the first 2 sets I the right order once I tell it to adda third set they are no longer in order (the newest item added is not put at the end). Why is this/what is the rule for determining where the newest item will be placed in a dictionary?
In python  is really a  with a hash function to generate indices.The hash function is exposed by python:Note that the hash function was changed in python 3:Python2.7.10Python3.5.0When you typeWhat really happens is that python will allocate an empty list with size 8. When you now start adding items to the  python will calculate the hash values of the items and consider the 3 least significant bits thereof to calculate its index in the list:So a dict with these keys will have a different order than you expect:They're the order of the last three digits of the hash in the dict.As the dict gets fuller, python will reallocate it and use a different hash, for small dictionaries ( up to 128k) it will quadruple its size, for larger dicts it will *double its size**. This reallocation happens when the dict gets 2/3 full.This means that the order in a  will change while you're putting in more items, sometimes radically.Note that a dict will only ever increase its size, never shrink as you  items from it.To know more about  and how it handles hash collisions I recommend Brandon Rhodes' excellent Pycon2010 talk on the inner workings of : The mighty dictionaryBottom line is that in a  you should never rely on its order.Raymond Hettinger implemented an  class in the  module.It inherits from  but wraps around some code to remember the order in which the keys were added. You can rely on the ordering of .
In Python, dictionaries are unordered. The items are not stored in the order in which they are entered. You can use  if you wish to conserve the order. 
Here you can use OrderDictAccording to Link :Ordered dictionaries are just like regular dictionaries but they remember the order that items were inserted. When iterating over an ordered dictionary, the items are returned in the order their keys were first added.class collections.OrderedDict([items])Return an instance of a dict subclass, supporting the usual dict methods. An OrderedDict is a dict that remembers the order that keys were first inserted. If a new entry overwrites an existing entry, the original insertion position is left unchanged. Deleting an entry and reinserting it will move it to the end.


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
