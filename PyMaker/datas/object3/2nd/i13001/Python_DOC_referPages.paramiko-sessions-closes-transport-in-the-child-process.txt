Natural Text
We are using paramiko to make a connection library which heavily uses its  or  features. Our library uses these channels for interacting with the target device.But whenever we use  library, we are not able to use paramiko connection handles in the child process. The  gets closed in the child process.This is the sample program for reproducing the problemand this is the errorFew important things to noteIf I try to access the  in the child process. First of all it does't work at all.Secondly, the handle in the main process also dies out surprisingly. I don't how this child-to-parent communication is facilitated and why.And the biggest problem is program hangs in the end, exception is fine but hangs are least expected.If I don't use the  in the child process, and do some work other work then the  in the parent process is not impacted and works as usual.NOTE: There is something called  inside the transport.py which claims to control this behaviour. But surprisingly even commenting the code in that method has no impact. Also there are no references to  in the entire codebase of paramiko.PS: I am using latest paramiko and this program was run on Mac
It is just a fundamental problem when sockets are involved with . Both processes share the same socket but only one can use it. Just imagine that two different processes are managing one socket. They both are in different states e.g. one might send and receive data to the remote side while the other one is in a totally different crypto state. Just think about nonces/initialization vectors, they'll just be invalid after forking when both processes diverge.The solution to your problem is obviously to switch from  to . This way you only have one ssh connection that is shared across all threads. If you really want to use fork you'll have to fork with creating one new connection per fork.see transport.pyIn paramiko log you'll see that your parent process receivs a SSH_DISCONNECT_MSG from the remote side with the error: . Most likely due to the parent being in a different crypto state and sending a packet that the server could not understand.Here's a basic MultiThreading example using concurrent.futures:Also note that in most cases you do not even need to introduce extra threading. Paramiko  alread spawns a new thread and will not block until you try to read from any pseudofile ,. That means, you could as well just execute a few commands and read from stdout lateron. But keep in mind that paramiko might stall due to buffers running full.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
