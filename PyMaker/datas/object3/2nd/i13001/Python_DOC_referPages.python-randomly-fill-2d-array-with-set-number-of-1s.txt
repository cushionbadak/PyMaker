Natural Text
Suppose I have a 2D array (8x8) of 0's. I would like to fill this array with a predetermined number of 1's, but in a random manner. For example, suppose I want to place exactly 16 1's in the grid at random, resulting in something like this:The resulting placement of the 1's does not matter in the slightest, as long as it is random (or as random as Python will allow).My code technically works, but I imagine it's horrendously inefficient. All I'm doing is setting the probability of each number becoming a 1 to , where  is the number of desired 1's and  is the size of the grid (i.e. number of elements), and then I check to see if the correct number of 1's was added. Here's the code (Python 2.7):While this works, it seems like a roundabout method. Is there a better (i.e. more efficient) way of doing this? I foresee running this code many times (hundreds of thousands if not millions), so speed is a concern.
Either shuffle a list of 16 1s and 48 0s:or fill the board with 0s and pick a random sample of 16 positions to put 1s in:
I made the ones, made the zeros, concatenated them, shuffle them, and reshaped.Edit.For what it's worth, user2357112's approach with  is fast...


Answer URL
https://docs.python.org/3/library/random.html#random.sample
