Natural Text
Let's have a.py be:At a console, if I simply , things make sense to me:However, if I do the less popular thing and...I've read opinions about why people don't like " " from a namespace perspective, but I can't find anything on this behavior, and frankly I figured out that this was the issue I was having by accident.
When you ask for  there happens a namespace search in the module  and  is found. But when you ask for just : is created in the namespace a (you cannot access it with such import though), but not in the current module. And it seems like nobody promised us to add newly added globals of  to all the namespaces module  has been imported into via . That will require storing import links inside the interpreter and probably will degrade performance if one heavily imported module does such tricks all the time.And imagine you have defined  in your main module prior to calling . That would be downright name collision.Just as illustration, you can do  to get fresh updates for the module :
Let's go thorough it step by step:At the point of importing,  only has the symbol  which refers to a function.Only if the function is executed,  gets the additional symbol .In the first case, you do  and get a "handle" to the module, which allows you to monitor whatever happens later. If you'd do  before calling , you'd get an error.In the second case,  gives you whatever currently is in the module - and that's just . After calling that, you could do  to get  as well.
I generally agree with Vovanrock2002.As was recently explained to me, the '.' is a scope resolution operator.  and  give you different syntaxes.  imports each global variable from  separately, and binds them as variables in the local scope. A more practical example might be the difference between  and . With the former, I have to create a date object using , with the latter I get to just use .You can read more on the import statementI would have to differ with you, however, in that I don't believe that spam is the meaning of life, the universe, and everything.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#the-import-statement
https://docs.python.org/3/tutorial/modules.html#more-on-modules
