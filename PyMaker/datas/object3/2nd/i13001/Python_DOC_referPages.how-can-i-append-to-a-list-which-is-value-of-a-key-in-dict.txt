Natural Text
I have a situation, in which I'm parsing a file and collecting stats. I want to store those stats in nested dict which has a final value as a list. And as I process the file I want to expand the list.for instance my dict structure is something like this Now as I parse the file I want to append the value to the last listfor instance, in first occurrence of data my dict should look like this.and in second something like this Also I'm not initializing dict keys to anything and creating keys at the first occurrence of the match. Can anyone suggest how do I achieve this?Note I'm using autovivification for initializing my data_dict, which at first doesn't contain anything.This is sample data I'm trying to parseso my dict has first key as Tag column, second key as one of the %column and then the value of this key is all the instances of that value in complete file.This is my processing code, which is not working.
First off:  has been deprecated for ages (gone in Py3); you can use direct  checks. Secondly, what you were trying to do with  is nonsensical  is not legal syntax without something to index (without indexing/looking up something, it looks like two back to back single element  literals, which isn't legal syntax). The fix for the test is to test for each component individually (after which you can append, since you know the value exists):Side-note: You almost never want ; that's a symptom of coming from a C-style  loop background. You're not actually using the index for anything besides getting the value, so replace:with:Runs faster, more idiomatically, etc. If you need the index too for some reason, that's what  is for:UPDATE: You updated the question with more info, so it looks like you need to iterate  in parallel. In that case, do:


Answer URL
