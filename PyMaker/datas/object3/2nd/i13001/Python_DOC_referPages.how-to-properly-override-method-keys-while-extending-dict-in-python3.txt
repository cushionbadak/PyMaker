Natural Text
EDIT: I added the class and some info, see the new post.I have created a class that extends  and  (more exactly, I extended  and ). Now I want to properly override the method . This class represents a set of other objects, called :The problem is the default method  returns a "list" of  objects. This is not what I want. The keys should be the property  of the  objects.For now I'm returning a simple , but I would return a  or a  object. Unluckily,  is not a global name. Where is ?Is this the correct/pythonic way to do it?
This is already handled for you!  includes a reasonable default implementation of  that provides the same interface as .Simply delete your  method, and you'll be using the inherited implementation.
I haven't been able to find any way to cast something to the  type, but after reading the PEP that introduced the new way to access keys and values (PEP 3106), it looks like  was introduced to return a set-like or unordered container object whose contents are derived from the underlying dictionary rather than a list which is a copy of the keys, etc.Taking this into account, it looks like you could get away with returning a generator object with your  method instead of a list. Here is the pseudo-code from the PEP:
The Python3 documentation says that  return value type (i.e. a view) is "set-like", so your return value should be "set-like" as well.The objects returned by dict.keys(), dict.values() and dict.items()  are view objects. They provide a dynamic view on the dictionaryâ€™s  entries, which means that when the dictionary changes, the view  reflects these changes.Dictionary views can be iterated over to yield their  respective data, and support membership tests:....Keys views are set-like since their entries are unique and hashable.  If all values are hashable, so that (key, value) pairs are unique and  hashable, then the items view is also set-like. (Values views are not  treated as set-like since the entries are generally not unique.) For  set-like views, all of the operations defined for the abstract base  class collections.abc.Set are available (for example, ==, <, or ^).Full text here:https://docs.python.org/3/library/stdtypes.html#dict-views


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict-views
