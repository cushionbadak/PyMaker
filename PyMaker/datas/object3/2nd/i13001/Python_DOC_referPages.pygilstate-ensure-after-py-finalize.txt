Natural Text
I am seeing crash at python shutdown from a complex c++-based extension module (https://github.com/woodem/woo). There are some held shared_ptr objects which are being destroyed without GIL being taken by the deleter automatically (which is a known bug in boost::python). I added PyGILState_Ensure / Release (using the GilLock RAII wrapper) around those calls, so that these object are destroyed properly. However, I am seeing this now: and I wonder if the reason could be that I am trying to get the GIL at the point after Py_Finalize will have been called already.Is there a way to test whether Py_Finalize was in effect? COuld not find anything in the API.EDIT: for completeness, this is the backtrace without holding GIL first (see https://github.com/boostorg/python/pull/11 for details):
API for interpreter initialization/finalization includes Py_IsInitialized; returns non-zero between  and , and zero before  and after .You'd have to test whether race conditions could mess you up here; it's wholly possible you could attempt to acquire the GIL, another thread calls , and  blows away the lock from under you. There are some notes about  APIs not handling the existence of multiple interpreters properly that may or may not apply to your scenario (or hint at a similar issue that might lead to the speculative race I mentioned).


Answer URL
https://docs.python.org/3/c-api/init.html#c.Py_IsInitialized
https://docs.python.org/3/c-api/init.html#non-python-created-threads
