Natural Text
So I have a file with data in this (standardized) format:Probably tought up by someone who has done too much cobol.Each field has a fixed lenght and I can read it by slicing the line.My problem is how can I structure my code in a way that makes it more flexible and does not make me use hard-coded offsets for the slices ?Should I use a class of constants of something like that ?EDIT: Also the first number (0->9 always present) determines the structure of the line which is of fixed length.Also the file is provided by a 3rd party who ensures the validity so I don't need to check the format only read it.There are around 11 different line structures.
Create a list of widths and a routine that accepts this and an indexed column number as parameters. The routine can calculate the start offset for your slice by adding all previous column widths, and add the width of the indexed column for the end offset.
My suggestion is to use a dictionary keyed on the 5 digit line type code. Each value in the dictionary can be a list of field offsets (or of (offset, width) tuples), indexed by field position. If your fields have names it may be convenient to use a class instead of a list to store field offset data. However,  may be better here, since then you can access your field offset data either via its name or by its field position, so you get the best of both worlds. s are actually implemented as classes, but defining a new  type is much more compact that creating an explicit class definition, and  use the  protocol, so they take up less RAM than a normal class that uses  for storing its attributes. Here's one way to use  to store field offset data. I'm not claiming that the following code is the best way to do this, but it should give you some ideas.output
You can have a list of widths of the columns describing the format and unfold it like this:Edit: Updated the code to better match what maazza asked in the edited question. This assumes the format character is an integer, but it can easily be generalized to other format designators.


Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
https://docs.python.org/3/reference/datamodel.html#slots
