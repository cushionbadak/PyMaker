Natural Text
Let's say I have the following two classesand I want  to be callable from instances of , but not of , and  to be callable from everywhere. I can think of several solutions, all unsatisfactory:Check some field and manually raise :But this is modifying the method's runtime behaviour, which I don't want to doUse a mixin:This is nice as long as  doesn't use much from , or else we'll have to inherit  and this defies the whole pointmake method private in  and redefine it in a metaclass:This works, but obviously looks dirty, just like writing  in  itself.What would be the right "pythonic" way of achieving this behaviour?UPD: putting the method directly in  would work, of course, but I expect that  will have many descendants that will use this method and do not want to define it in every subclass.
What is so bad about making  inherit from ? It's basically an abstract base class that adds additional functionality that isn't meant to be available in . If you really don't want  to ever be instantiated then the pythonic answer is not to worry about it, and just document that the user isn't meant to do that. Though if you're really insistent you can define  to throw an error if the user tries to instantiate . Another alternative might be to make  an Abstract Base Class. For this to work you will need to define at least one method as being abstract --  could do if there are no other methods you want to say are abstract.Very finally, what's so bad about having the descendant method available on , but just not using it. You are writing the code for , so just don't use the method... You could even document the method that it isn't meant to be used directly by , but is rather meant to be available to child classes. That way future developers will know your intentions.
As far as I can tell, this may be the most Pythonic way of accomplishing what you want:Another option could be the following:They're both Pythonic because it's explicit, readable, clear and concise.It's explicit because it's not doing any unnecessary magic.It's readable becauseone can tell precisely what your doing, and what your intention wasat first glance.It's clear because the leading single underscore isa widely used convention in the Python community for private(non-magic) methodsâ€”any developer that uses it should know to treadwith caution.Choosing between one of these approaches will depend on how you intend on your use case. A more concrete example in your question would be helpful.
Try to check the class name using  .


Answer URL
https://docs.python.org/3/library/abc.html
