Natural Text
I was trying to create a list comprehension from a function that I had and I came across an unexpected behavior. Just for a better understanding, my function gets an integer and checks which of its digits divides the integer exactly:The problem is that, if I give a  as an input, the full function returns , which is the expected result. The list comprehension returns a  instead. I understand that it is because of this condition:In the full function, the multiple condition is handled from the left to the right, so it is fine. In the list comprehension, I do not really know, but I was guessing that it was not handled in the same way.Until I tried with a simpler function:Both of them worked. So I am thinking that maybe it has something to do with the ? This is just curiosity on how this really works? Any ideas?
The list comprehension is different, because you compare  without converting  to . In Py2, mismatched types will compare in an arbitrary and stupid but consistent way, which in this case sees all s (the type of ) as greater than all  (the type of ) meaning that the  test is always  and the second test always executes (see Footnote below for details of this nonsense). Change the list comprehension to:and it will work.Note that you could simplify a bit further (and limit redundant work and memory consumption) by importing a Py3 version of  at the top of your code (), and using a generator expression with , instead of a list comprehension with :That only calls  once per digit, and constructs no intermediate .Footnote:  is a numeric type, and all numeric types are "smaller" than everything except , so a  is always greater than . In non-numeric cases, it would be comparing the string type names, so  <  <  <  <  < , except oops,  and  compare "naturally" to each other, so you can have non-transitive relationships;  is true,  is true, but  is false, because the type specific comparator gets invoked in the final version. Like I said, arbitrary and confusing; it was removed from Python 3 for a reason.
You should say int(x) > 0 in the list comprehension


Answer URL
https://docs.python.org/3/whatsnew/3.0.html#ordering-comparisons
