Natural Text
Well, it seems situation with environment variables is not consistent in python.It's not a secret that reading environment variables using  or  returns the state of env at the moment  module was imported. It's still possible to update environment using assignment to  keys.But once I used  or run any ctypes code that has modified the environment I get inconsistency between actual process environment and . Nuff said, this actual environment will be preserved for subprocess, no matter created with  or  library. In my case it's desired behavior.Now I want to review and change the environment passed to subprocesses. Usually it's suggested to get copy of , modify it and pass as a parameter to  call. But in this case updates made to environment made by ctypes code will be lost.Is there any way to overcome this issue? Strictly speaking is there a way to reload os.environ or get a copy with actual environment using other facilities?
 does not update  as its docs say explicitly. C  (in a CPython extension module) does not update  too (as documented: changes in the environment after  import are not reflected in ). is just . There is related Python issue as @ShadowRanger has mentioned.If you need it; you could access C environ from Python using  e.g. (tested on Ubuntu, it might work on OS X (you might need to call  there), it is unlikely to work on Windows (use  there)): is a pointer to an array of C (NUL-terminated) strings () where the last item is . To enumerate values in Python 2:OutputTo get it as a dictionary that you could modify and pass to a child process:To synchronize with :Here're several convenience functions:It works on CPython 2, CPython 3, pypy. It doesn't work on Jython.
This is a known issue with Python, as yet unfixed.  reads from , and setting an item on  implicitly does an , deleting implicitly calls , etc.But even though  reads from ,  doesn't write to it (and this behavior is documented). And there doesn't appear to be a way to make it reread the . Basically, if you want a consistent environment, you have to update  only, not use ; if  calls are updating the C level  directly, you're going to need another  call to read the C level  and update  to match.


Answer URL
https://docs.python.org/3/library/os.html#os.environ
https://docs.python.org/3/library/os.html#os.putenv
