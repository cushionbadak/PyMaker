Natural Text
I am new to Python and I'm trying to remove comments and commented lines from a file of URLs (one URL per line).  I am using a custom ArgumentParser (argparse) and overriding convert_arg_line_to_args in order to :-Strip trailing comments at end of lines e.g. 'http://example.com  #comment' Strip lines which are empty or whole line coments e.g. '#    This file contains URLs, one per line'I am able to successfully remove trailing comments (1) but can't seem to remove empty lines or comments lines (2).  The whole line comments and empty lines remain in my list of files.Is there a way to remove the empty and comments lines?Example input file is:Original code gives args returns from  as:Changing to yield an empty list gives:I would like args to look like:Perhaps it's not possible to remove lines from the input file in this way.
Note that statement  will yield a  value instead of not yielding anything, so empty lines are returning a list of arguments like .If you want the parser to skip a line you should return an empty list instead. You should re-write your function to return  for lines to skip, and  (where  is a cleaned-up line) if you want to retain that argument.BTW... Your second regex is not matching empty lines. It should read  to match ZERO or more spaces.
Your implementation actually uses a generator instead of a function: when using the  keyword, each  statement executed provides a value. Even a bare  does produce the value . Instead of providing either nothing or , you are returning an iterable providing either  or  (an empty string).For starters, you do not need a generator here: instead of , use . Note that  requires an iterable of values - an efficient iterable of no values is for example an empty list .This is the minimal modification to get your code working.Now, while regex works for this use case, it is usually overkill. Python's  class has efficient manipulation and inspection methods builtin: you can strip away the comment, cleanup whitespace and see if there is something left.If you want to explore generators versus functions, a generator is actually slightly more elegant here. We added those  lists everywhere because  needs an iterable - but a generator already is an iterable.What does that mean in practical terms? If there is an argument, just  it - it will be "contained" in the generator itself. If there is no argument, never  - the generator will stop without having provided anything.


Answer URL
https://docs.python.org/3/glossary.html#term-generator
