Natural Text
This question already has an answer here:Visibility of global variables in imported modules                    7 answers                It appears that a class defined in a script has a different scope to one that is imported into the script. For example:In a file foo.py:In my main file:The list of globals returned from foo and bar are different - why is this? It is making life difficult as any class that needs to access the main globals() has to reside in the main file. How do I ensure that the imported class has the same global scope? Some things that I have tried after reading other posts here and here include:andAny help appreciated![EDIT] ---So per the link above, this is answered in a duplicate article. It turns out that scope is not shared across modules. It mentions several ways around this, but in my case I need to actually create / read / write global variables. So I created a routine in the main script and pass it as an object when foo and bar are initialized. For example:(Not my choice of how all this should work, its a hack until I get some time with the application devs :-)
Here's what the Python 3 FAQ has to say:In Python, variables that are only referenced inside a function are implicitly global. If a variable is assigned a value anywhere within the function’s body, it’s assumed to be a local unless explicitly declared as global.Though a bit surprising at first, a moment’s consideration explains this. On one hand, requiring global for assigned variables provides a bar against unintended side-effects. On the other hand, if global was required for all global references, you’d be using global all the time. You’d have to declare as global every reference to a built-in function or to a component of an imported module. This clutter would defeat the usefulness of the global declaration for identifying side-effects.To see globals in various scopes, try doing a print(globals()) at various points during your execution. For example: at the top-level module before any code is run, then in  if you have any code in there (because you import foo), at foo's module level, within each function, and before/after you modify any variables passed to the function.This answer further explains:I think the key thing you're missing here is that each module has its own "global" namespace. This can be a bit confusing at first, because in languages like C, there's a single global namespace shared by all external variables and functions. But once you get past that assumption, the Python way makes perfect sense.Note however that all names assigned in a package  file are available in the package namespace when you import the package or a module in the package.


Answer URL
https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python
