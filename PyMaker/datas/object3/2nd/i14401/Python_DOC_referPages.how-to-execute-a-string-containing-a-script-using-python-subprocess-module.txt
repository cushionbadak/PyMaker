Natural Text
I receive a script in a string and trying to find a way to execute it using the subprocess module of python. e.g.This throws an OSError: saying there is no such file or directory, which is fair enough as I think its trying to look for command name.I then tried  which works only for shell commands and totally ignores the #! at the top of the script. Is there any way to make suprocess run my script stored in string like its an executable file ?
This solution is based on  (compile) Python interpreter cmdline argument. It ignores using shell properties entirely.Popen may be created in similar way.  was used to show that script is in fact executed, and python interpreter return code is changed by code executed.Additional improvement would be to skip 'python' hardcoded string and use .A string giving the absolute path of the executable binary for the Python interpreter, on systems where this makes sense. If Python is  unable to retrieve the real path to its executable, sys.executable  will be an empty string or None.
As you can read in the Popen Python Documentation the parameter to  is an executable to launch, not the contents of some script to perform. You cannot use  in this manner.If you really want to you could write the script to a file and then pass that filename to Popen, but that doesn't seem to be an elegant solution to whatever your problem is.Seeing as all you want is simply to execute some Python code from a string, you'll want to use the exec builtin function
You can run scripts by pumping them into a child python's . This may be a preferred solution to larger scripts:I use this trick across  connections to control remote servers.
To execute a string as a Python script using  module:Though as @wich suggested you could use Python builtin function  -- it is a statement on Python 2:If you want to run Python code in a different process, you could use  or  modules:


Answer URL
https://docs.python.org/3/library/subprocess.html#popen-constructor
https://docs.python.org/3/library/functions.html#exec
https://docs.python.org/3/library/functions.html#exec
https://docs.python.org/3/library/multiprocessing.html
https://docs.python.org/3/library/concurrent.futures.html
