Natural Text
I'm fairly new to Python (and programming in general) and I was wondering if there's a way to run 2 or more while loops at the same time so that after each round of one loop it switches to the other, without necessarily starting over at round zero.  Here's what I have so far:Now when I do this all it does is run loop1() infinitely and never gets to loop2(), but I'd like to know a way to get the output to say:Anyone know how I can do this? also please note that I am beginner and am not really caught up on all the programming terminology, so please use small word :) Thanks in advance.(also I'm using Python 3 (though I think you can probably already tell?))
Yo can try this, I don't know if it's what you are looking for but it will have your output.
Why not combine them to one loop?
It looks to me like you don't really want to run 2 loops, you want to do 2 things inside a single loop. Something like:
Ignoring the reason you have two separate functions (if you have one, you should put it in your question), you can do this using a single loop and the  module.
What you're describing can be boiled down to a state machine. The machine has one variable, which we could call 'letter', so the machine has two states depending on whether this variable is 'A' or 'B' (you could also just make this a True/False boolean variable).  It also has two output variables, the uppercase letter followed by the lowercase one. After printing the current state, we alter the state and print again.
I don't know Python, but it would seem to be a good idea to define each loop instead as a function and call them sequentially in a single loop.
You have a infinite loop without a break or return statement. The best thing to do is to replace the while with a for rounds in range(3).Replacing the rounds = 0 with a return statment will also work.
I would do it like this:By using , you maintain the original structure of your program. Every iteration of your loop corresponds to a round number and a letter, which you are distributing through tuple unpacking.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.cycle
