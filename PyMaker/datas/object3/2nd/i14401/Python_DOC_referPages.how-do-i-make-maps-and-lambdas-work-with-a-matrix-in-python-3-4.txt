Natural Text
I often avoid me to write posts like this but I'm new in python 3.4 and I need a help with this code.Suppose we have the following list:It results a list of lists: [ ['a', '1'], ['a','2'], ... ]Now I'd want to join those string. I've tried the following:It didn't work.The error:I've tried to look up in the documentation But I coudn't solve my problem though.Does someone have some idea?
You can do:This executes the function  for each element in . An element in  is a list with one string and one integer as values. This means , as received by the  function, is a list with those two values.We then need to ensure all values in that list are strings before passing them to . This means we'll call  to turn all values in the sublist  into strings ( becomes ). We can then join them by passing the result of that to  ( becomes ). This is done for each list in  so this gives us the desired result.The result of  is a so-called  in Python 3.x so we wrapped everything in a  call to end up with a list.Also, a list comprehension is arguably more readable here:
 isn't legal Python 3. Iterable unpacking of arguments was removed. If you actually ran the code you showed on the version you mentioned, you would have gotten a syntax error, not the error you showed.If you did indeed have a list as you describe, not the one you actually made, you would need to give  one iterable argument, not 2 arguments, so  (which is similar to the code you showed but not legal Python 3) or, more simply, That won't work for you, though, because  takes an iterable of strings, and the resulting list of lists in your case is  , not . You can't join a string and a number this way. (Which is fine, since  isn't even the right tool for the job.)Using + is always silly. Just use a generator expression in all situations you might use +See the following examples (I used list comprehensions instead of generator expressions so we'd get useful reprs):
If you just have a set amount of elements to join you can use str.format:You can also do it for any amount of elements using : unpacks the sequence,  creates a  for each element in each sublist. Or unpack in a list comp:
I agree with Mike that  is silly. In this case,  pretty much does the job your lambda is supposed to do, so you can use that instead:That uses . If you want to use , you can do it like this:But really I'd just doEdit: A comparison of map+lambda vs generator expression, showing that the latter is shorter, clearer, more flexible (unpacking), and faster:
You could use another list comprehension:If you don't need , you can do in the first list comprehension:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.starmap
