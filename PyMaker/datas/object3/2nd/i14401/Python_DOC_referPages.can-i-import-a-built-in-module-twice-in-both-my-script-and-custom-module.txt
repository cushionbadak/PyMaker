Natural Text
Is there a downside to importing the same built-in module in both my script and custom module?I have a script that: imports my custom module and imports the built-in csv module to open a csv file and append any necessary content to a list.I then have a method in my custom module in which i pass a path, filename and list and writes a csv, but I have to import the csv module again (in my module).I do not understand what happens when I import the csv module twice so I wanted to know if there is a more uniformed way of doing what I'm doing or if this is ok.
The short answer is no, there is no downside.That being said, it may be helpful to understand what imports mean, particularly for anyone new to programming or coming from a different language background.I imagine your code looks something like this:andAs a high-level overview, when you do an import in this manner, Python determines whether the module has already been imported. If not, then it searches the Python path to determine where the imported module lives on the file system, then it loads the imported module's code into memory and executes it. The interpreter takes all objects that are created during the execution of the imported module and makes them attributes on a new module object that the interpreter creates. Then the interpreter stores this module object into a dictionary-like structure that maps the module name to the module object. Finally, the interpreter brings the imported module's name into the importing module's scope.This has some interesting consequences. For example, it means that you could simply use  to access the csv module within my_script.py. It also means that importing csv in both is trivial and is probably the clearest thing you can do.One very interesting consequence is that if any statements that get executed during import have any side effects, those side effects will only happen when the module is first loaded by the interpreter. For example, suppose you had two modules a.py and b.py with the following code:If you run  followed by  then you will seeHowever, if you import in the opposite order, you get this:Anyway, I think I've rambled enough and I hope I've adequately answered the question while giving some background. If this is at all interesting, I'd recommend Allison Kaptur's PyCon 2014 talk about import.
No, there is no downside. Importing a module does two things:If not yet in memory, load the module, storing the resulting object in .Bind names to either the module object () or to attributes of the module object ().Additional imports only execute step 2, as the module is already loaded.See The import system in the Python reference documentation for the nitty gritty details:The  statement combines two operations; it searches for the named module, then it binds the results of that search to a name in the local scope.
You can import the same module in separate files (custom modules) as far as I know. Python keeps track of already imported modules and knows how to resolve a second import.


Answer URL
https://docs.python.org/3/library/sys.html#sys.modules
https://docs.python.org/3/reference/import.html
