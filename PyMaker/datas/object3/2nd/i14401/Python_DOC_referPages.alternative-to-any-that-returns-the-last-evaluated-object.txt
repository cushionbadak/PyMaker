Natural Text
I just wrote a bit of code where I wanted to do:where  would return the first  where  is zero or less. The alternative, I suppose, would bebut that feels very hacky.I ended up writing it out, but I don't like how deeply nested it got.To clarify:  in this case is likely no more than 6 objects (and often 2 objects), though a general case is more useful. I'm also trying to optimize for ease of reading, not for performance.Is there some better construct than this?
The docs for  explain that it's equivalent to:So, I don't think your code is too deeply nested if it has exactly the same structure as code that's used to illustrate the functionality of  itself.Still, I would probably wrap this up in a function:So now you can do this:Or, alternatively, just use a generator expression, and pass it to the two-argument , as you're already doing:That has the same "depth", it's just all horizontal instead of vertical.Or, maybe, pull out the genexpr and name it:How would you choose between them? I think if the predicate is too complicated to read as a  but not complicated enough to be worth abstracting out into an out-of-line function, I'd go with the genexpr. Otherwise, the wrapper function. But it's really a matter of taste.
 should do it, and here's a funny way to test :Ha, even tricker:Or, as abarnert pointed out:
Just for fun, to extend Stefan Pochmann's answer to handle , still without needing a lambda:If you don't have the  module (which you probably don't, because the version on PyPI hasn't worked since Python 2.4 or so…) and don't want to search for a modern replacement, you can write  yourself (and slightly better):About once/year, there's a proposal to add  to the stdlib, and maybe even give it an infix operator. With  being added for matrix multiplication, you can guess the latest proposal.* So, if that happens (which it probably won't), you can do this:Now the only thing we need is Haskell-style operator sectioning so we can get rid of the bound method, the  hack, and the need for an  function (assuming you consider dot-attribution an operator, which it really isn't, but let's pretend…). Then:* In fact, it was proposed, twice, during the initial PEP 465 discussion, which is why the PEP mentions, "During discussions of this PEP, a similar suggestion was made to define  as a general purpose function composition operator, and this suffers from the same problem;  isn't even useful enough to exist."


Answer URL
https://docs.python.org/3/library/functions.html#any
https://docs.python.org/3/library/functions.html#next
https://docs.python.org/3/library/functions.html#any
