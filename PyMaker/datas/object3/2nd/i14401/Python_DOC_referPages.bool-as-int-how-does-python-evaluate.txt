Natural Text
This question already has an answer here:Python Bool and int comparison and indexing on list with boolean values                    3 answers                What I understood is  evaluates to  or .So if it is True then that is equivalent to  1 and using list indices it's going to print .I've read this and came to know  is an instance of . So when used as in index  evaluates to it's equivalent number i.e  or .My question Based on intuition we can know whether it's going to be an  or  But how does Python know? Does it have any criteria when to use as  and when to use as ? Anything from Python3 documentation would be appreiated.
In Python 2.x this is not guaranteed as it is possible for  and  to be reassigned. However, even if this happens, boolean  and boolean  are still properly returned for comparisons.In Python 3.x True and False are keywords and will always be equal to  and .Under normal circumstances in Python 2, and always in Python 3: object is of type  which is a subclass of :It is the only reason why in your example,  does work. It would not work with an object which is not a subclass of integer, because list indexing only works with integers, or objects that define the  method (thanks mark-dickinson).Edit:It is true of the current Python version, and of that of Python 3. The docs for Python 2.6 and the docs for Python 3 both say:There are two types of integers: [...] Integers (int) [...] Booleans (bool)  and in the boolean subsection:Booleans: These represent the truth values False and True [...] Boolean values behave like the values 0 and 1, respectively, in almost all contexts, the exception being that when converted to a string, the strings "False" or "True" are returned, respectively.So booleans are explicitly considered as integers in Python 2.6 and 3.
The  instances,  and , are separate from the  instances,  and . The thing is that the bools behave like integers in many contexts. Such as  which is 2. However if we check if they are the same object we see it is not: . On the other hand it is true that . Here's an example which behaves like integers but are printed as True and False and compares differently with .https://docs.python.org/3/library/stdtypes.html#bltin-boolean-values


Answer URL
https://docs.python.org/3/library/stdtypes.html#bltin-boolean-values
