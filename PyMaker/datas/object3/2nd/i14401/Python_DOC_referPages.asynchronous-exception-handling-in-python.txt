Natural Text
I've the following code using  and  to make asynchronous HTTP requests.For some reason, exceptions raised inside the  function are not caught:So, what is correct way to handle exceptions raised by couroutines?
 doesn't actually consume the  passed to it, it just waits for them to complete, and then returns the  objects:coroutine Wait for the Futures and coroutine objects  given by the sequence futures to complete. Coroutines will be wrapped  in Tasks. Returns two sets of : (done, pending).Until you actually  the items in the  list, they'll remain unconsumed. Since your program exits without consuming the futures, you see the "exception was never retrieved" messages.For your use-case, it probably makes more sense to use , which will actually consume each , and then return a single  that aggregates all their results (or raises the first  thrown by a future in the input list).Output:Note that  actually lets you customize its behavior when one of the futures raises an exception; the default behavior is to raise the first exception it hits, but it can also just return each exception object in the output list:Return a future aggregating results from the given coroutine objects  or futures.All futures must share the same event loop. If all the tasks are done  successfully, the returned futureâ€™s result is the list of results (in  the order of the original sequence, not necessarily the order of  results arrival). If  is , exceptions in the  tasks are treated the same as successful results, and gathered in the  result list; otherwise, the first raised exception will be immediately  propagated to the returned future.
To debug or "handle" exceptions in callback:Coroutine which return some result or raise exceptions:And callback:
asyncio provides an API for customized error handling, please refer to the document https://docs.python.org/3/library/asyncio-eventloop.html#error-handling-api 


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.gather
https://docs.python.org/3/library/asyncio-eventloop.html#error-handling-api
