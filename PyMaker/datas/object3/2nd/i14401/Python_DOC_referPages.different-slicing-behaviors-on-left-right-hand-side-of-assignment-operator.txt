Natural Text
As a Python newbie coming from the C++ background, the slicing operator in Python (3.4.x) looks ridiculous to me. I just don't get the design philosophy behind the "special rule". Let me explain why I say it's "special".On the one hand, according to the Stack Overflow answer here, the slicing operator creates a (deep) copy of a list or part of the list, i.e. a new list. The link may be old (earlier than python 3.4.x), but I just confirmed the behavior with the following simple experiment with python 3.4.2:On the other hand, according to the official documentation here:Clearly, the slicing operator  does not do a deep copy here.From the observation it seems to suggest that the slicing operator produces different behavior when it's on left/right side with respect to the assignment operator. I do not know any language in which an operator could produce similar behavior. After all, an operator is a function, just a syntactically special function, and a function's behavior should be self-contained, purely determined by all of its inputs.So what can justify this "special rule" in Python design philosophy?P.S. If my conclusion is not correct, there are really only two possibilities:1, Python's slicing 'operator' is actually not an operator, so my assumption does not hold --- then what is it (the 'slicing operator' )?2, The difference in behavior is caused by some latent factor not observed. The slicing operator's location (left/right hand side) with respect to the assignment operator accidentally co-exists with the observation of different behavior. They do not have causality relationship --- then what is the latent factor that causes the difference in behavior?
Python operators are best considered as syntactic sugar for "magic" methods; for example,  is evaluated as . In the same way that: becomes ; whereas  becomes ; the Python "slicing operator" *  is evaluated as either:; or ; depending on which side of the assignment it's on; the two aren't quite the same (see also How assignment works with python list slice). Written out in "longhand", therefore:The data model documentation explains these methods in more detail (e.g. ), and you can read the docs on , too.Note that the slice is a shallow copy, not a deep one, as the following demonstrates:* Well, not strictly an operator.


Answer URL
https://docs.python.org/3/reference/datamodel.html
https://docs.python.org/3/reference/datamodel.html#object.__getitem__
https://docs.python.org/3/library/functions.html#slice
https://docs.python.org/3/reference/lexical_analysis.html#operators
