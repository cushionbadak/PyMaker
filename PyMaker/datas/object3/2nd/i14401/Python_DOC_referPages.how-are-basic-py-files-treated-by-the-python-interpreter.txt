Natural Text
Recently I have been trying to dig deeper into the core of python. Currently I am look into pythons module system and how "global", "local", and "nonlocal" variables are stored. More specifically, my question is how does the interpreter treat the file being run? Is it treated as its own module in the modules (or something similar)?
The top-level script is treated as a module, but with a few differences.Instead of its name being the script name minus a  extension, its name is .The top-level script does not get looked up in the  cache, nor compiled and cached there.Other than that, it's mostly the same: the interpreter compiles your script as a module, builds a  out of it, stores it in , etc.Also look at , which explains how both  and  work. (As of, I think, 3.4,  should do exactly the same thing as running a script, not just something very similar.) And notice that the docs link to the source, so if you need to look up any specifics of the internals, you can.The first difference is why you often see this idiom:That allows the same file  to be used as a module (in which case its  will be ) or as a script (in which case its  will be ), with code that you only want to be run in the script case.If you're curious whether standard input to the interactive interpreter is treated the same way as a script, there are a lot more differences there. Most importantly, each statement is compiled and run as a statement with , rather than the whole script/module being compiled and run as a module.
Yes, that's essentially what happens. It's the  module. You can see this by running something like the following:Either run as a script file, or on the interpreter, this will print:


Answer URL
https://docs.python.org/3/library/__main__.html
https://docs.python.org/3/library/runpy.html
https://docs.python.org/3/library/__main__.html
