Natural Text
Say I have a thread pool executor with max. 10 threads, and I submit a task to it which itself creates another task and in turn waits for it to complete, recursively until I reach a depth of 11.Example code in Python:The above code outputs:and deadlocks.Is there any way to solve this problem without creating additional threads and executors?In other words, a way for the worker threads to work on other tasks while waiting?
Using coroutines your code could be rewritten as:However, I'm struggling to see why you need all this extra code. In your example code you always wait directly for the result of the task, thus your code would run no different without the executor. For example, the following would produce the same resultI think this example from the documentation better shows how async coroutines are able to parallelise tasks. This example creates 3 tasks, each of which computes a different factorial. Notice how when each task yields to another coroutine (in this case ), another task is allowed to continue its execution.Output:
No, if you want to avoid a deadlock you can't wait on a future from the same executor in a task.The only thing you could do in this example is to return the future and then recursively process the results:However it would be best to avoid such a recursive execution in the first place.
What you're experiencing here, is what you already rightly called a deadlock. The first thread which starts the next thread and waits for it is holding a  which all subsequent tasks will deadlock on while waiting for the same  to be released (which is never in your case). I'd suggest that you start your own threads in the tasks instead of using the pool, something like:


Answer URL
https://docs.python.org/3/library/asyncio-task.html
