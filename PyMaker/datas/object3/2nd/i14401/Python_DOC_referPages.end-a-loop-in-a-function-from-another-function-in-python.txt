Natural Text
Is is possible in python to end a loop in a function from another function? This does not seem to workHere is my code:
The problem here is that your  loop just keeps running, meaning none of the rest of your code ever gets to run. That includes the Tkinter GUI, which means that your program doesn't respond to any user events, including the button click, so  never gets called.More generally, you really can't have a function that just runs forever, or even for more than a fraction of a second, inside a GUI program. A single-threaded program can only do one thing at a time; if what it's doing is looping forever, then it's not doing anything else.So, what can you do?There are two basic options:Put the loop on a background thread. This means that any shared data now has to be explicitly synchronized, and it means the loop can't touch any of the GUI widgetsâ€”but in your case, that turns out to be pretty simple.Break up the loop. Have it just do one iteration (or, say, 100 iterations, if they're really quick), and then use  or  to ask Tkinter to call a function that does another one iteration (or 100 iterations) and s again, and so on, until they're all done.I'll show you how to do the first one here.For the case where the only shared data is a "stop" flag, a  or  is often better than a . The  docs explain the differences between the different kinds of sync objects, but not really at an introductory level. The Wikipedia article on monitors might be a better starting point to learn, but if you can find a good tutorial on multithreading (not necessarily Python-specific; Python has basically the same sync objects as the C pthreads library, the C++ Boost library, the Java stdlib, etc.), that would probably be better.For a much more detailed discussion, see Why your GUI app freezes.
Supposing your loop() function is doing some work in the background it would be a good idea to put that in a separate thread.Using threading Events you can interact with the thread.This code is not tested but it should give you an idea how I have solved such stuff in some cases:You can then initialize the thread, it will call the run() method as soon as it is started and will wait in the first line for the run_event to be set.So assuming you have a global variable that references your worker thread your loop() method triggered from the button would look like this:By setting the run_event the self.run_event.wait() gets passed and the work loop is entered. This while loop runs as long as the threading event is set.And your endloop() may look something like this:As soon as you clear the run_event in your thread, the while condition is no longer fulfilled and the loop quits.Just a note:This code is not complete nor tested but may give you an idea how it could be done. Don't forget toas well.Hope this helps a little bit.Greetz


Answer URL
https://docs.python.org/3/library/threading.html
