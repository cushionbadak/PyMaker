Natural Text
I have a dictionary that contains lists; the keys are based on the first item in each list. Using a fun random data set, the dictionary was constructed as follows:I want to write the lists held in each key into separate .csv files, one for each key. The closest solution I have found was detailed here, but I can't get it to work. The format I am after:NOTE: letter{}.csv is the unique file for each key; each list (within each key) is on a separate line, and each item within a list is separated by a tab.The code I have is this:It keeps throwing up the error: "TypeError: writelines() takes no keyword arguments". I've done some reading and I know writelines() takes a sequence of strings, so not quite sure what is missing.Based on what I have read elsewhere, the code open("letter{}.csv".format(key), "w") should create a unique file for each key, and the subsequent line should direct the lists to be written to the appropriate file.
The normal  takes no keywords args, you are probably getting confused with and should should use the csv module which does take the  argument, iterating over , passing the  key to  and the list of lists to .LetterA.csv:LetterB.csv:
Read the error that you're receiving: . Do you see keyword arguments in your call to ?You need to join your strings together with  before passing them to .
io.IOBase.writelines:Write a list of lines to the stream. Line separators are not added, so it is usual for each of the lines provided to have a line separator at the end.
Try:As the error message you are getting indicates,  does not take keyword arguments (such as ). Since you are not writing a list to the file, but instead a string created from a list joined by a tab character, you don't even need .
The error message is telling you that it doesn't accept keyword arguments, so if you jump to your  call, the first issue is that you're passing it a keyword param when it can't accept it. Specfically: delimiter='\t') will accept a list of strings to be written to the file but you'll need to deal with all the formatting yourself if you go this route. If you wanted that I suspect you want: Since you have a list of lists, the inner list comprehension just glues things within each list by tabs, and then the outer loop glues all of those together with end of line characters.However just judging from the pattern and the question tags - have you considered using the CSV module, and it's associated writer method? (https://docs.python.org/2/library/csv.html)


Answer URL
https://docs.python.org/3/library/io.html#io.IOBase.writelines
