Natural Text
I have been trying to learn more about decorators using a tweaked version as below from: hereWith results with run of:Notice the filled dictionaryI like to keep my code contained, so was trying to move the  function into the  class like so:But I end up getting an empty  dictionary resulting in this error:Notice the blank dictionary at the beginning. It fails atbefore that return function is invoked with the second  which is a function of the dictionary being blank tripping the exception but there is no  key to the function value to return.On the first set of code above, running this in a console gives:But on the second set of code above, running Despite the fact that  is being run as tests on that showed. There is some untoward side effect from invoking it within a class. What is the side effect?How can I move the  function into the  class and use it as a method successfully to decorate the functions in class ?
First, if you're trying to call , there has to be a  parameter to the  method. It doesn't matter whether you're using  as a decorator or a normal function; it's still called the same way.But more importantly, at the time you're defining the  class, there is no . If you think about it, there's no way there could be one, because  refers to each instance of , and there aren't any instances yet—there isn't even a class yet. Looked at from another angle, the only way you ever get a  is by taking one as a parameter; there's no  in scope at the point where you're defining . (Many people new to Python think there's a whole lot of magic to , but there isn't anything beyond the fact that  is looked up in  and then called as .)If you just want to move a function into a class for encapsulation purposes, but not make it an instance method, the way to do that is with :It's actually not that common that you want ; usually you want , because you want access to the  object (so you can call other s, access class attributes, and/or create instances of the ). But in this case, you don't even have a  class yet, and you wouldn't have anything useful to do with it even if you did, so  is exactly what you want. (PS, it's a good thing you don't want access to  here, because otherwise, you'd need to learn about metaclasses… and I'd wait until you get the hang of decorators first.)Finally, while we're tossing decorators into your decorator definition (which is a very common thing to do), you almost always want to use  in any decorator:Anyway, with all that out of the way, how do you call  if you don't have a ? Well, a staticmethod can be called on the class it's in, any subclass, or any instance of either, but normally it's called on the class:
I found the answer the the problem. It has to do with the renaming of attributes in class-private variables. This can be seen for python 3 here under Private Variables  and for python 2 here section 9.6 Private Variables and Class-local References.In the code with the function as a method (the second listing above), the  was renamed to . If every instance of  is replaced with  except for the  function, the code works as it should. I'm not 100% sure why Python is designed this way, but I'm guessing it has something to do with preserving namespace, but I'm not sure why it is necessary as  has its own namespace.Below is the corrected code:


Answer URL
