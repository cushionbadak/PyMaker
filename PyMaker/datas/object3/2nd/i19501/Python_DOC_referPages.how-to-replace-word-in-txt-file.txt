Natural Text
Ok, so basically I'm making a simple game which involves a highscore.I would like the highscore to be saved if bigger than the previous highscore.This is my code. I have a few different errors, some involving the fact that I'm switching between strings and integers and other errors because my code is plain wrong. I gave it quite a shot to try and understand the problem but new errors seem to keep coming. This was my last attempt at this. It could be 100% wrong, i made my best effort.What I need is so that whenever I run the game it shows my high score. If my score is larger than my highscore, the highscore in the text file is changed. It s then reloaded into the game to act again in this code. 
The problem with your code is that you're trying to call  when  is an .I'm not sure why you're trying to use  in the first place. That's useful to replace part of a string with a different string. If you want to replace the whole thing, just assign a new value: .However, you have a second problem: You're writing an  out to a file, when what you want (I think) is the string representation of that  as exactly 3 characters. So, replace that last line with this:Meanwhile, opening a file in  mode may not do what you think it does. In Python 3, the "read pointer" and "write pointer" are always in the same place for an "r+" file. So, if you read 3 characters, and then write 3 characters, you end up overwriting characters 3-6, or adding 3 new characters to the end, instead of overwriting characters 0-3 as you want. You could deal with this by calling  after the .Finally, you never  the file, which means whatever you wrote might never get savedâ€”it could sit around in a buffer in memory, and never get flushed to the actual disk file. And it's probably simpler here to just open for read, then close, then open for write, then close, so you don't need to worry about all that  nonsense. The easiest way to close files is to use a  statement.So, putting it all together:But this relies on the fact that Hscore.txt is guaranteed to exist (in the current working directory), and to have a number in it. If some bug causes you to stick an "x" in there, or empty the file out entirely, you'll get an exception every time you run, and never be able to recover. So, you may want something like this:That way, it'll print out a warning that will hopefully help you figure out what's wrong, and also try to recover (by assuming that a missing or corrupted file means the highscore is 0).The  documentation and the  module Overview explains most of this, but it's not exactly beginner-friendly. Reading and Writing Files in the tutorial may be more helpful.


Answer URL
