Natural Text
I want to generate an ordered list of the least common words within a large body of text, with the least common word appearing first along with a value indicating how many times it appears in the text.I scraped the text from some online journal articles, then simply assigned and split;Seems like a regex would be appropriate for the next steps, but being new to programming I'm not well versed-If the best answer includes a regex, could someone point me to a good regex tutorial other than pydoc? 
ready made answer from the mothership.Obviously adapt to suite :D
How about a shorter/simpler version with a defaultdict, Counter is nice but needs Python 2.7, this works from 2.5 and up :)
Finding least common elements in a list. According to Counter class in Collections moduleSo Code for least common element in list isTwo least common elements is python-3.x
This uses a slightly different approach but it appears to suit your needs. Uses code from this answer.Outputs:Works in Python >= 2.4, and Python 3+ if you parenthesize the  statement at the bottom and change  to .
If you need a fixed number of least-common words, e.g., the 10 least common, you probably want a solution using a counter  and a , as suggested by sotapme's answer (with WoLpH's suggestion) or WoLpH's answer:However, if you need an unbounded number of them, e.g., all words with fewer than 5 appearances, which could be 6 in one run and 69105 in the next, you might be better of just sorting the list:Sorting takes longer than heapifying, but extracting the first M elements is a lot faster with a  than a . Algorithmically, the difference is just some  factors, so the constants are going to be important here. So the best thing to do is test.Taking my code at pastebin, and a file made by just doing  on the Reuters-21578 corpus (without processing it to extract the text, so this is obviously not very good for serious work, but should be fine for benchmarking, because none of the SGML tags are going to be in the least common…):I tried various ways to speed up each of them (including:  around a genexp instead of a loop around  in the heap version, popping optimistic batches with  and throwing away any excess, making a  and sorting in place, decorate-sort-undecorate instead of a key,  instead of , etc.), but none of them made more than 5% improvement (and some made things significantly slower).At any rate, these are closer than I expected, so I'd probably go with whichever one is simpler and more readable. But I think sort beats heap there, as well, so…Once again: If you just need the N least common, for reasonable N, I'm willing to bet without even testing that the heap implementation will win.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
