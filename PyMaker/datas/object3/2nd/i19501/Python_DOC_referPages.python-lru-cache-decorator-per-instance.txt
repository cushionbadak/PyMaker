Natural Text
Using the LRU Cache decorator found here:http://code.activestate.com/recipes/578078-py26-and-py30-backport-of-python-33s-lru-cache/I can create a decorated class method with this but it ends up creating a global cache that applies to all instances of class Test. However, my intent was to create a per instance cache. So if I were to instantiate 3 Tests, I would have 3 LRU caches rather than 1 LRU cache that for all 3 instances.The only indication I have that this is happening is when calling the cache_info() on the different class instances decorated methods, they all return the same cache statistics (which is extremely unlikely to occur given they are being interacted with very different arguments):Is there a decorator or trick that would allow me to easily cause this decorator to create a cache for each class instance?
Assuming you don't want to modify the code (e.g., because you want to be able to just port to 3.3 and use the stdlib , or use  out of PyPI instead of copying and pasting a recipe into your code), there's one obvious solution: Create a new decorated instance method with each instance.
How about this: a function decorator that wraps the method with  the first time it's called on each instance?Use it like this:Here's a gist on GitHub with some inline documentation.


Answer URL
