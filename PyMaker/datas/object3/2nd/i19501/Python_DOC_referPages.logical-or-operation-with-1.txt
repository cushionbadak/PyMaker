Natural Text
Why is the output different for the following logical operations that I tried in python?First returns  and second returns 
 and  are both lazy; they evaluate operands until they can decide the result ( stops at the first  operand;  stops at the first  operand). They return the last operand evaluated, as noted in the documentation:Note that neither  nor  restrict the value and type they return to  and , but rather return the last evaluated argument. This is sometimes useful, e.g., if  is a string that should be replaced by a default value if it is empty, the expression  yields the desired value.
Read the documentation:The expression  first evaluates ; if  is true, its value is returned; otherwise,  is evaluated and the resulting value is returned.
Both first parts  and  are evaluated  and therefore returned. The second part is ignored.
The  operator short-circuits. It returns the first value that is  in a boolean context, or the last evaluated expression otherwise.  and  are both  in a boolean context, so you get the first number.,  and all empty containers evaluate to .For example:
In  condition if first condition is true, second is not evaluated,
I think the OP expects the return value of 'or' to be either True or False (as would be the case for boolean operators in some other languages.) Python, like Perl, simply returns the first "true" value (where "true" means nonzero for numbers, non-empty for strings, not None, etc.)Similarly, 'and' returns the last value if and only if both are "true".He would probably be even more surprised by the result of something like Perl programmers often use this construct idiomatically (as in ; I don't know if that's as common in Python.(see man)


Answer URL
