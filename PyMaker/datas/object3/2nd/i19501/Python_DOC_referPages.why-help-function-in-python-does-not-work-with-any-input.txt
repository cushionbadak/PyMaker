Natural Text
If you for example write , you will get help about the list object. If you write , you will get Why is this?
 is an ordinary function, so it takes arguments like any other function.  is valid syntax: it passes the  type to .However,  is illegal syntax (+ is an operator, not an expression by itself). In this case, you can use  instead to get help on the  operator.
This is because  is just a function - its argument must be a syntactically valid expression which evaluates to a value.
In some languages, you can actually just pass an operator around as a value, either directly (e.g.,  is a normal function in Lisp) or with special syntax (e.g.,  is the  operator as a normal function in Haskell). But that's not true in Python. The  operator can of course be part of an expression by giving it two operands () or one (), but there's no way to access the value of the  operator itself. (Partly this is because  is actually three different operators—unary add, binary add, and binary concat, so there isn't even such a thing as "the value of the  operator" without context. But the same is true even for operators that aren't ambiguous.)This is different from types and functions, as you can see:So, you can pass  or  as an argument to a function—including —but you can't do that with .That's why Python has the  module, to give you "operators as functions" that you can pass around:But that's not particularly useful in this case:Thanks…Fortunately, the  function has special code for dealing with strings. See nneonneo's answer for what you actually want here.
That's because + is an operator, it espects two operands,you could do this:since 1+1 returns an int, help would give you some informations aboutthe int datatype


Answer URL
