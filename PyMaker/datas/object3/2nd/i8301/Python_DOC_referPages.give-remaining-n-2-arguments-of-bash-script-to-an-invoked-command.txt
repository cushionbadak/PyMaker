Natural Text
Give remaining  arguments of Bash script to an invoked commandI have a Bash script that takes arguments , where the user can supply an arbitrary amount of numbers.Now, how do I invoke a python script supplying the numbers, e.g, ?I know of the variable , which represents all arguments, but in this case I don't want to supply .Is there some Python-like syntax that lets me do something like this: , or how would I approach this problem?
You were close...This would supply the first argument, then arguments 3 and following.While  is not an array name and rather denotes the list of positional parameters in the current context, array syntax often works.  Element extraction is one example of that.  Of course, one big difference is that expanding the list of all positional parameters is done with , not with  as would be the case with an array.The number of arguments is available as .  If you want to know how many arguments there are beyond the second, you could use .  If there are less than 3 arguments, this number will be zero or negative, so make sure to test for this if it can impact your script.
You just need to make sure that your Python script is ready to handle an arbitrary number of arguments to your script. The very simple way to do this is to make use of sys.argv. Observe the following example. test.pyfrom your shell
From a bash script one could use the shift command twice, at that point $@ would contain the values you seek.


Answer URL
https://docs.python.org/3/library/sys.html#sys.argv
