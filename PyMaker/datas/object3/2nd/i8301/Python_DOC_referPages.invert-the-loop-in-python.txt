Natural Text
I'm not sure if my title is exactly what I'm trying to do but in essence I'm getting the average of a list of lists and I want it to add not within the lists but across them:instead of adding 1, 2, 3, and getting the average 6/3=2, I want it to add 1, 1, 0 (first value in each list) and get 2/2=1 (if 0, don't count it)How do I get the loop to do that instead?
You can convert the list first, using zipHere's one way to do it:
You could use NumPy.Or better yet to avoid the loop altogether.
Lets reform your code to be a bit more Python like. In Python we can iterate (go through the list) and get the objects back directly, we don't really need to play with the index.This code is the exact same as yours without the indexing,  is the actual sub items (the numbers) that we are getting. To do what you want, Python has a handy  function which transposes sub lists. For example if we have the following lists  when we  these lists, we get We can use this to do what you want by unpacking the list using the  symbol before the list of lists, and  supports this. Going back to our previous example we can make a list of list  and pass x in with the  into zip to get what we want.  we will get . Combining these together with what you have will give you your desired results.We can improve this even more by using some more built in from such as  which will sum up all the items in the list if possible, and you already know  which can be used with  to filter out the . From the docs:(item for item in iterable if item) if function is None. So we are checking if the list contains item's that are of value, and  is fails when  We can go one step further and compression the function, by using one of the neatest thing Python has to offer, :Note some of these answers may not be as optimal as others, but my answer is focused on different ways you can do it with only built-ins. 
This will work for you:Edit:   another way just using list comprehension and zip:
Another possibility (Python 3 only):Alternative numpy implementation (works for Python 2 as well):


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/functions.html#sum
