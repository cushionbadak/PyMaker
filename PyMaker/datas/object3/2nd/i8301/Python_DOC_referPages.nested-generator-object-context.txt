Natural Text
today I've played around with nested generator functions and found an interesting property / behavior which I can't explain to myself. Maybe this is associated with a lack of understanding of what  does…. However, now to the problem:So the output I excepted would be .However, after the first successfull call to , I get:    Traceback (most recent call last):      File "", line 1, in     StopIterationSo my question is: Why has the generator already reached its end?
The  object is a global; you never create a new one. Once iterated over or closed, it is exhausted.It is closed because you used  in a function. When the  generator function ends, the  exception is propagated to the underlying generator (so the  instance), and it is closed too.  ends, because there are no references to the object and it is cleaned up.From the Yield expressions section:When is used, it treats the supplied expression as a subiterator. All values produced by that subiterator are passed directly to the caller of the current generator’s methods. Any values passed in with  and any exceptions passed in with  are passed to the underlying iterator if it has the appropriate methods.and from PEP-380 *Syntax for Delegating to a Subgenerator:If a  exception is thrown into the delegating generator, or the  method of the delegating generator is called, then the  method of the iterator is called if it has one.In detail, what happens, is this: creates a new generator object. creates another. There are no references to this object however, other than the stack. takes the  generator from the stack and forwards it one step. returns, and there are no references left to the  generator, so it is deleted.Deleting a generator object calls the  method, raising  in the generator, via . propagates that exception to the  generator object by closing that too.


Answer URL
https://docs.python.org/3/reference/expressions.html#yield-expressions
https://docs.python.org/3/reference/expressions.html#generator.close
https://docs.python.org/3/reference/expressions.html#generator.throw
