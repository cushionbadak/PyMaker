Natural Text
I have the following function as part of a script inspired by this:Is there a nice way to write all those chained if statements with a nice pythonic expression. Bonus answer if generalized for n variables.Note: Perhaps related to this question, but I still cant figure it out.
Your function is basically doing this:Let's start our rewrite by first taking a list of all non-'All' parameters:Roadblock #1: We've now lost track of which value goes with which parameter.  Why do we need to know that?  So that we can compare the parameters against the correct elements of .  We can fix this by storing not just the parameters' values but also their names in :Writing out the name of each parameter twice is ugly, but it's either this or resorting to naughtiness with  and/or .With that taken care of, the comparisons against the elements of  is easy:Now, how do we AND them all together?  We could use  and , but (unless you've overloaded  to return a non-boolean, which I hope you didn't do), the elements of  are all booleans, which means that combining them with bitwise AND is the same as combining them with logical AND, and Python already has a function for that: .Putting it all together:or, even more compact:Now, about that naughtiness mentioned earlier: If all of the parameters are in a , then  can just contain the keys, which will allow us to look up both the parameter values and  values without repeating ourselves (too much).  How do we get all the parameters in a ?  With :(Note the use of  to give the parameters their default values.)  But what should  be?  It can't be , as that will only contain the parameters that the user passed in, which may not be all of them (and may even include keys we weren't expecting!).  Option 1 is to write out a list of the parameter names somewhere and use that:Alternatively, if the keys of  happen to be the same as the desired names of the function's parameters, we can just use :or, slightly shorter:After this, we just need to update how the elements of  are used, changing this:to this:(Note that we still need to keep using  to set the default values.)Putting it all back together again:or, if the parameter names are the same as the keys of :EDIT: Based on the comments below, apparently the values of  are something that overrides  so that it doesn't return a boolean.  Fortunately, as alluded to above, this just requires changing this:to this:
This should do the trick:The only problem is that there's no simple way I'm aware of to know the name of the variable you're currently using. This is why I used . This is relatively easy to fix by making each variable carry its name with it, for example. So, basically, each variable'll be a tuple . 


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
https://docs.python.org/3/library/operator.html#operator.and_
https://docs.python.org/3/library/functions.html#all
