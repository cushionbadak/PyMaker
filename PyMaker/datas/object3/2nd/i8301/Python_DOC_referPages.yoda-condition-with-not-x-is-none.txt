Natural Text
The previous dev has left a really strange  yoda condition in the code:After some testing, I seem the same output as .Is  always equivalent to ? To break down the condition, is it  or ? Or will the former always be equivalent to the latter?
Since  has higher precendence than , then the expressions are equivalent:In case : evaluates to , and  evaluates to In case : evaluates to , and  evaluates to In case : evaluates to In case : evaluates to .Therefore, even though the actions are not syntactically equivalent, the results are equivalent.This is the AST of :This is the AST of :As can be seen in the second diagram, the inner node is the compare node, and therefore  is evaluated before the .Regarding actual evaluation of the expression, it seems that python creates the same bytecode for both. It can be seen in this example:As both generate:
 is (I believe, the only) two-keyword operator in Python, and  is entirely equivalent to . The same result will also be returned by . The canonical spelling for best reader comprehension would be .


Answer URL
https://docs.python.org/3/reference/expressions.html#operator-precedence
