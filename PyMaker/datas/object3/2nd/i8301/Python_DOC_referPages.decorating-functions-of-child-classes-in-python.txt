Natural Text
I've got what I believe is a pretty straightforward issue, but haven't been able to find a satisfying answer. The short is that I want to enforce contracts on child classes of a parent without adding logic to each child class. Code example below:So the question is how do I auto-decorate the  function implemented by classes inheriting from ? Assume that there is an  class as well with a slightly different check.My initial investigation implies that metaclasses are the approach to take, but having trouble finding great explanations of how they work. Ideally looking for something that functions in python 2.x, but if there's only 3.x solutions I'm happy to change my codebase.
First of all: you are using the  module incorrectly (see the docs). Your class  should have  as meta class. So if you are already using a meta class you can extend it to your advantage.A meta class that inherits from  to make  work and decorates :Now your abstract base class with a default check decorator that does nothing:Note that  must be a class method in this case.For meta classes that work in  and  see six.Your Checker class that implements a specific checker only but is still abstract:Note that the line you wrote  would result in a recursion error.And your concrete class with a sample implementation of :You can verify that  succeeds and  failsThe disadvantage with this approach is that you can't make the  abstract.So this was already a lot of text, but if you don't want to use any meta classes at all there is a much simpler way:Write a class that performs the check in the  method by using two "abstract" methods:Note that  and  are not really abstract and that you can still instanciate objects of type . If you need them to be abstract use a standard  meta class here.Now create a checker class that implements This becomes much simpler because we don't need a decorator here.And finally the concrete class which implements Note that  now must implement  but when you use the class you have to call .The disadvantage here is that you could still override  thus breaking the checking.


Answer URL
https://docs.python.org/3/library/abc.html#abc.abstractmethod
