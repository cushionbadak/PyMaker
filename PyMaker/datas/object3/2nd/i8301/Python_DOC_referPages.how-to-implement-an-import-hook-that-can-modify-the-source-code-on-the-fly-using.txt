Natural Text
Using the deprecated module , I can write a custom import hook that modifies the source code of a module on the fly, prior to importation/execution by Python. Given the source code as a string named  below, the essential code needed to create a module is the following:Since  is deprecated, I would like to do something similar with . [EDIT: there are other  methods that need to be replaced to build a custom import hook - so the answer I am looking for is not simply to replace the above code.] However, I have not been able to figure out how to do this. The importlib documentation has a function to create modules from "specs" which, as far as I can tell, are objects that include their own loaders with no obvious way to redefine them so as to be able to create a module from a string. I have created a minimal example to demonstrates this; see the readme file for details.
 and  are both deprecated. You'll need to switch to  and ( and ) module respectively. See the  documentation for details.You will also need to examine if you want to use a  or a  as the system to invoke them is different. That is, the meta path finder goes first and can override builtin modules, whereas the path entry finder works specifically for modules found on .The following is a very basic importer that attempts to replace the entire import machinery for. It shows how to use the functions (, , and ).Next is a slightly more delicate version that attempts to reuse more of the import machinery. As such, you only need to define how to get the source of the module.


Answer URL
https://docs.python.org/3/library/importlib.html
https://docs.python.org/3/library/importlib.html#importlib.util.module_from_spec
https://docs.python.org/3/library/importlib.html
