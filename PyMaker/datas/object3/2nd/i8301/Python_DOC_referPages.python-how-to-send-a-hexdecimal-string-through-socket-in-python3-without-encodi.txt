Natural Text
I performed socket communication in python2, it worked well and I have to make it works in python3 again. I have tired str.encode() stuff with many formats, but the other side of the network can't recognize what I send. The only thing I know is that the python3 str type is encoded as Unicode uft-8 in default, and I'm pretty sure the critical question in here is that what is the format of python2 str type. I have to send exactly the same thing as what was stored in python2 str. But the tricky thing is the socket of python3 only sends the encoded unicode bytes or other buffer interface, rather than the str type with the raw data in Python2. The example is as follow:In python2:In python3, seems it can only sends the encoded bytes using "senddata.encode()", but it is not the format I want. You can try:to see the difference of two senddatas, and an interesting thing is that it is faulty encoded when using utf-8.The data stored in Python3 str type is the thing I need, but my question is how to send the data of that string without encoding it? Or how to perform the same str type of Python2 in Python3?Can anyone help me with this?
I performed socket communication in python2, it worked well and I have to make it works in python3 again. I have tired str.encode() stuff with many formats, but the other side of the network can't recognize what I send.You have to make sure that whatever you send is decodable by the other side. The first step you need to take is to know what sort of encoding that network/file/socket is using. If you use UTF-8 for instance to send your encoded data and the client has ASCII encoding, this will work. But, say cp500 is the encoding scheme of your client and you send the encoded string as UTF-8, this won't work. It's better to pass the name of your desired encoding explicitly to functions, because sometimes the default encoding of your platform may not necessarily be UTF-8. You can always check the default encoding by this call .The only thing I know is that the python3 str type is encoded as Unicode uft-8 in default, and I'm pretty sure the critical question in here is that what is the format of python2 str type. I have to send exactly the same thing as what was stored in python2 str. But the tricky thing is the socket of python3 only sends the encoded unicode bytes or other buffer interface, rather than the str type with the raw data in Python2Yes, Python 3.X uses UTF-8 as the default encoding, but this is not guaranteed in some cases the default encoding could be changed, it's better to pass the name of the desired encoding explicitly to avoid such cases. Notice though,  in Python 3.X is the equivalent of  +  in 2.X, but  in 2.X supports only 8-bit (1-byte) (0-255) characters. On one hand, your problem seems with 3.X and its type distinction between  and  strings. For APIs that expect  won't accept  in 3.X as of today. This is unlike 2.X, where you can mix  and  freely. This distinction in 3.X makes sense, given  represents decoded strings and used for textual data. Whereas,  represents encoded strings as raw bytes with absolute byte values.On the other hand, you have problem with choosing the right encoding for your text in 3.X that you need to pass to client. First check what sort of encoding does your client use. Second, pass the encoded string with the the proper encoding scheme of your client so your client can decode it properly: .Because you pass your data as  in 2.X and it works, I suspect and it's most likely your client  uses 8-bit encoding for characters, something like Latin-1 might be the encoding used by your client. 
You can convert the whole string to an integer, then use the integer method  to convert it into a  object:The first parameter of  is the number of bytes, the second (required) is the byteorder.See int.to_bytes in the official documentation for reference.
There are various ways to do this. Here's one that works in both Python 2 and Python 3.Python 2 outputPython 3 output
The following is Python 2/3 compatible. The  function converts hexadecimal notation to bytes.  Use a byte string and you don't have to deal with Unicode strings.  Python 2 is byte strings by default, but recognizes the  syntax that Python 3 requires to use a byte string. Python 2 output:Python 3 output:


Answer URL
https://docs.python.org/3/library/stdtypes.html#int.to_bytes
