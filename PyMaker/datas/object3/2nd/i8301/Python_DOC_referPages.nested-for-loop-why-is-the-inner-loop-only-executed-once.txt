Natural Text
I'm confused about the use of a double for loop in python, this is my code:The output is this:It only executes the inner loop for the first value of the outer loop, why is this happening? How can I get it to loop over all combinations of the first and second variable?
 produces an iterator; once you reach the end of an iterator, you can't re-use it:Create a new iterator for the nested loop:The  documentation links to the iterator glossary entry:When no more data are available a  exception is raised instead. At this point, the iterator object is exhausted and any further calls to its  method just raise  again. Bold emphasis mine.
In every implementation that respects pythons data model the result of  can only be exhausted once (because it should return an iterator that is exhausted after the first traversal). After that iterator is exhausted it won't  any items anymore. But you can simply reverse your array using slicing:Basic slicing for s is very performant, it doesn't even need to copy the original.Given that you use s you should be aware that iterating over them is a very slow operation because every value needs to be unboxed during the iteration. If you really need to iterate over one-dimensional s (hint: you generally don't) you should convert them to s:Because  is more efficient at the unboxing compared to the (implicit) unboxing in a -loop.
 returns a iterator. An iterator can only be consumed once.You consume that iterator during the first iteration.To use an iterator several times, you can store it in a :One of the benefit of iterators is that the whole list is never computed. You can iterate over 1 million elements without creating the whole  list, which is even better if your algorithm expects to break out of the loop when a condition is fulfilled.In a simple case like in the OP, the list is short and you know you will be iterating over all the elements, so using a list is simple and efficient enough.


Answer URL
https://docs.python.org/3/library/functions.html#reversed
https://docs.python.org/3/glossary.html#term-iterator
https://docs.python.org/3/reference/datamodel.html#object.__reversed__
https://docs.python.org/3/library/stdtypes.html#ranges
