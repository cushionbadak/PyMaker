Natural Text
I've got a big problem with  and  working with my . I want to identify the week number of a date but I found some inconstitencies. Here the case:gives meAs you can see, the date   for a  is in the first week of the year (a monday) 2019 but is still in 2018. Furthermore, for a  the first day of the first week of 2019 is the .How can we deal with this ? The goal of this is to group by week
Pandas s and Python s are both reporting ISO 8601 week numbers:yields is equivalent to ,but using the  accessor is faster (in terms of both writing and performance) than calling the lambda function on each item in  which is what  does.Given a Python  (or ), the easiest way to obtain theISO week number is to call its  method:Notice that  is in ISO year 2019. To make  return the first day of the ISO week, you must pass the ISO year, , not the actual year, .
In light of how the  property is set for those weeks which straddle two different calendar years, we'll need a grouping function that is a little more agnostic to the new year. The simplest solution is to assume there are no skips in your data (you have a row for every day) and partition it into chunks of 7.But that feels really brittle. Instead, here's an implementation that asks, "what was the Monday of this week?" and groups on that.This works because the exact  value of a given week's Monday will be unique from week to week. Here's a demo.This of course assumes that you want December 31, 2018 to be in the same week as January 1, 2019 (which, arguably, it is since it falls in the same Monday to Sunday slice, but as Idlehands pointed out, that's a matter of semantics that's up to you to decide).
Use  which returns a  of :To calculate the start of week, subtract the :Final results:


Answer URL
https://docs.python.org/3/library/datetime.html#datetime.date.isocalendar
