Natural Text
Is there a way to get the line number of the statement returned by a Python function programmatically? Let's consider the following example:If 1 or 3 is entered, the function will return . However I won't know which  is actually executed unless I can step through the code.My application allows users to enter business rules in Python from the GUI and let them test the rules themselves. As my application is not able to step through code (it delegates the task of execution to a stand-alone python engine and expects a string or an exception.) I want to find a way to get the returned line number so that I can highlight the corresponding line on the GUI editor.A dirty way of doing it would be to have the function returning a tuple of line number and string, but ideally I would like to spare the users from the pain of doing so.
The  module lets you inspect each frame right before it returns, so you should be able to retrieve the  of foo's final return at that point. Example:Result:
You can ask Python to inform you of any returns by using ; this is a hook function that Python will call when certain events occur, and is how typical debuggers and profilers hook into Python.The function that you register with  will be called for call events only, whenever Python enters a new local scope (for function calls, class bodies, and comprehensions and generator expressions). You can then return  (don't trace this local scope), or a trace function that'll be used for line, exception or return events within that scope. In Python 3.7, you can set options on the frame object to further control at what level of detail your per-scope trace function is called; you can disable per-line events or even enable per-opcode events.You can use it to record return events like so; I use one trace method for both call and return events:Put that into a separate module and use the object like a context manager:The context manager gives you access to the list object it adds returns to (as  tuples), so you could access the return information as you execute code inside the context manager:For the interactive interpreter, the filename is .The  module, underpinning Kevin’s answer, builds on top of but doesn’t disable line tracing on Python 3.7+. And as a generic debugger framework, it adds a higher overhead per trace event. This translates to slower execution of the code you are instrumenting. 


Answer URL
https://docs.python.org/3/library/bdb.html
https://docs.python.org/3/library/sys.html#sys.settrace
