Natural Text
I am attempting to implement a method as both an abstract method and as a class method but it doesn't feel like any of the benefits of an abstract class are gained when doing so.For example:This doesn't raise any exception and does not error out. I'd expect for it to say something along the lines of:  and . Not sure what the intended behavior is or if I'm just doing something wrong. I'd like for  to raise an exception if it isn't properly implemented as a class method. 
Your code doesn't try to create an instance of the  class. All it does is access the implementation of a  that is marked as abstract. Python's ABC abstract classes are not intended to prevent that kind of access.The  module is intended to help you define a protocol or interface, a base class that sets expectations as to what attributes must be present on concrete objects that should be considered the same.To that end, all that you can do with an  subclass is prevent instances to be created of any class in the class hierarchy that has at least one  or  attribute. From the  documentation:A class that has a metaclass derived from  cannot be instantiated unless all of its abstract methods and properties are overridden.Any -decorated method can still be called; there is no mechanism to prevent this and it is actually a specific goal of the module that concrete implementations can use  to access the implementation of an  object. From the same source:The abstract methods can be called using any of the normal ‘super’ call mechanismsandNote: Unlike Java abstract methods, these abstract methods may have an implementation. This implementation can be called via the  mechanism from the class that overrides it. This could be useful as an end-point for a super-call in a framework that uses cooperative multiple-inheritance.Any other attributes of the class can be used just the same as on other classes, including  objects.Under the covers, each  metaclass gives each class you create with it a  attribute, which is a  object with the names of any attribute on the class that has the  attribute set to , subclasses only have to use the same name as a parent abstract method object, setting it to an attribute that doesn't have  set to true to remove that name from the set for that class. Python will then raise an exception when you try to create an instance of a class whose  is not empty.If you need to lock down your class definitions further, then you'll have to come up with our own metaclass or other mechanism to implement those rules. For example, you could wrap  attributes in your own descriptor object that prevents calling a classmethod bound to a class with a non-empty  attribute.


Answer URL
https://docs.python.org/3/library/abc.html
https://docs.python.org/3/howto/descriptor.html
