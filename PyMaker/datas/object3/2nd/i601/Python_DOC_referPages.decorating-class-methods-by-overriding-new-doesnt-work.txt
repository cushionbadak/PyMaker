Natural Text
I want to decorate all the methods of my class. I have written a sample small decorator for illustration purpose here.Decorator:Now I want to decorate all the methods of my class. One simple way is to use @debugmethods annotation on top of my class but I am trying to understand two other different approaches for doing so.a) Overriding b) Writing metaclassI am not sure Why " a) overriding  " doesn't work ?Why signature of method  is different in metaclass? Can someone help me understand what am I missing here.  
You appear to be confused between  and metaclasses.  is called to create a new object (an instance from a class, a class from a metaclass), it is not a 'class created' hook.The normal pattern is: is translated to , see special method lookups for why that is. The  of a class is it's metaclass.The standard  implementation used when  is a custom Python class will call  to create a new instance, then call the  method on that instance if the result is indeed an instance of the  class:So  is not called when the  class itself is created, only when instances of  are created.You don't usually need to use  in classes, because  suffices to initialise the attributes of instances. But for immutable types, like  or , you can only use  to prepare the new instance state, as you can't alter the attributes of an immutable object once it is created.  is also helpful when you want change what kinds of instances  produce (such as creating singletons or producing specialised subclasses instead).The same  ->  and maybe  process applies to metaclasses. A  statement is implemented by calling the metaclass to create a class object, passing in 3 arguments: the class name, the class bases, and the class body, as a dictionary usually. With , that means  is called, which means  is called.Your first attempt a, setting  doesn't work, because you are not creating a class object there. Instead,  creates an empty  instance with no attributes, so  returns an empty dictionary and  ends up doing nothing.If you want to hook into class creation, then you want a metaclass.


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-lookup
