Natural Text
I wrote a class that can handle integers with arbitrary precision (just for learning purposes). The class takes a string representation of an integer and converts it into an instance of  for further calculations.Often times you need the numbers Zero and One, so I thought it would be helpfull if the class could return these. I tried the following:This doesn't work. Error: "name 'BigInt' is not defined"Then I tried the following:This actually works very well. What I don't like is that  is a method (and thus has to be called with ) which is counterintuitive since it should just refer to a fixed value.So I tried changing  to become a property, but then writing  returns an instance of the class  instead of  because of the decorator used. That instance cannot be used for calculations because of the wrong type.Is there a way around this issue?
A static property...? We call a static property an "attribute". This is not Java, Python is a dynamically typed language and such a construct would be really overcomplicating matters.Just do this, setting a class attribute:If you want it to be entirely encapsulated in the class block, do it using a class decorator (but be aware that's just a more fancy way of writing the same thing).
The question is contradictory:  and  don't go together in this way.  Static attributes in Python are simply ones that are only assigned once, and the language itself includes a very large number of these.  (Most strings are interred, all integers < a certain value are pre-constructed, etc.  E.g. the  module.). Easiest approach is to statically assign the attributes after construction as wim illustrates:Or, as he further suggested, using a class decorator to perform the assignments, which is functionally the same as the above.  A decorator is, effectively, a function that is given the "decorated" function as an argument, and must return a function to effectively replace the original one.  This may be the original function, say, modified with some annotations, or may be an entirely different function.  The original (decorated) function may or may not be called as appropriate for the decorator.This can then be used dynamically:If the purpose is to save some time on common integer values, a  mapping integers to constructed s could be useful as a form of caching and streamlined construction / singleton storage.  (E.g. )However, the problem of utilizing  at the class level intrigued me, so I did some digging.  It is entirely possible to make use of "descriptor protocol objects" (which the  decorator returns) at the class level if you punt the attribute up the object model hierarchy, to the metaclass.Notably, this attribute is not accessible from instances:Hope this helps!


Answer URL
https://docs.python.org/3/library/string.html
https://docs.python.org/3/howto/descriptor.html
