Natural Text
I am quite a newbie understanding of how to catch exceptions in python. I have a question regarding those two types of ways of catching exceptions. I only found useful information about ValidationError regarding here But I did not quite understand if it can be used besides django or what are the error messages that I can expect about it. I saw this code sample regarding the validation of types. So for  and  for me, it is clear:exception ValueErrorRaised when an operation or function receives an argument that has the right type but an inappropriate value, and the situation is not described by a more precise exception such as IndexError.exception TypeErrorRaised when an operation or function is applied to an object of inappropriate type. The associated value is a string giving details about the type mismatch.In conclusion,I am trying to understanding what would be the advantage of the second code with , but it could be tricky as I did not find good documentation about. If someone could share knowledge about ValidationError, I would highly appreciate,I am raising this question because I am going to use related library and I have not seen the exceptions being treated like this.https://pypi.org/project/related/Thank you community!
Python exceptions can be caught in this way:OR LIKE THISYou are simply handling multiple exceptions together.    You can  always split them.    They are not 2 different ways.  In your case the as is for logging it .Here are a few examples:  In the last case it catches exception of any type since no type is specified.In python programs can raise any exception for anything.In fact exception is just a special class ,even you can create one for your library. So the best way to find about the exception is to read the docs of the library  not the exception class.If your program catches the exception and wants more detail about it for creating a log file the code can be written like this. In this case you are catching the exception and converting its detail to a string.This is from the django docs about the error you are talking about.Form validation happens when the data is cleaned. If you want to  customize this process, there are various places to make changes, each  one serving a different purpose. Three types of cleaning methods are  run during form processing. These are normally executed when you call  the is_valid() method on a form. There are other things that can also  trigger cleaning and validation (accessing the errors attribute or  calling full_clean() directly), but normally they wonâ€™t be needed.In general, any cleaning method can raise ValidationError if there is  a problem with the data it is processing, passing the relevant  information to the ValidationError constructor. See below for the best  practice in raising ValidationError. If no ValidationError is raised,  the method should return the cleaned (normalized) data as a Python  object.Hopefully this should helpThe link to docsThis link has info about other common builtin exception classes.If this answer solves your question you can click the tick.
They are different blocks of code for handling different exceptions. However in this example, both cases have the same logic for how they handle each exception.It might make more sense if we split up the cases into 3 different blocks of code: will be thrown when an incorrect type is used will be thrown when an incorrect value is used will be thrown when the validation failsThe program will handle each exception differently


Answer URL
https://docs.python.org/3/library/exceptions.html
