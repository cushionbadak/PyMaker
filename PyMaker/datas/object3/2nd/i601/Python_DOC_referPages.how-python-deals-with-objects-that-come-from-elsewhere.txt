Natural Text
This may be a stupid question, but I don't get in Python how we can use object that we did not some define or imported.Consider the following example, using Python's datetime module:Then  is of  class, even though we haven't imported this.(I could probably also cook up other examples, where we obtain objects, even though we haven't defined them.)How can this be?      Should I think about these new objects that pop up simply as pieces in memory that are being returned by other functions, that, even though we haven't defined them, contain "in themselves" enough information so that the Python interpreter can meaningfully apply the  and other functions to them?
You are incorrectly assuming that  limits what is loaded into memory.  limits what names are bound in your module globals. The whole module is still loaded, as are dependencies of that module. Just because your namespace doesn't bind a reference to the  object doesn't mean it is not available to the  module.See the  statement documentation:The  form uses a slightly more complex process:find the module specified in the  clause, loading and initializing it if necessary;for each of the identifiers specified in the  clauses:    check if the imported module has an attribute by that nameif not, attempt to import a submodule with that name and then check the imported module again for that attributeif the attribute is not found,  is raised.otherwise, a reference to that value is stored in the local namespace, using the name in the as clause if it is present, otherwise using the attribute nameSo loading and initialising of modules is a separate step, executed once per module. The second step binds names in your namespace.  makes sure the  module is loaded, then finds  and adds  to your namespace.If you want to see what modules are loaded, check out the  mapping. That's the location that the  statement machinery checks to see if a given module has been loaded yet.
Date is importing timedelta somewhere, as it might be a dependency, even if you don't see it.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#import
https://docs.python.org/3/library/sys.html#sys.modules
https://docs.python.org/3/reference/import.html#the-module-cache
