Natural Text
I am running my AWS EC2 instance and when I try to run my web app, MyCoolApp.py I get the following error:This is after I try to start my application which I do, and used to do before I made this latest change with the following command:As you can guess I am trying to import Boto3 for use and I do that in the my python application with the following code at the top of my program:Lastly, because I know you are going to ask this, YES I already installed Boto3 and when I run pip freeze I can see it. This is the output below:Now because I suspect that someone will be suggesting this I am just going to head this off now. I have these packages all installed globally to my --user. I am NOT using a virtual environment, yes I know I should be but I didn't think that I was going to need one because everything runs on the one server. Yes I acknowledge that this might be a mistake and I use them everywhere else but thats not the point here if I could get some help with this error that would be great. It starts on my local machine and works just fine it is just when I try to run it on my server it fails.Lastly, if this is due to a conflict with packages on my server it would be great if someone could help me figure out how to remove them, instructions would be appreciated as I am on AWS AMI Linux. 
So with the details as provide in the question, we have the scenario where a Python script and the environment it will be executed at has:Dependency on some packages;No virtualenv is used, but the Python user install directory (as the  user) is used instead for simplicity for the installation of the script's dependencies;The script however requires root privileges to run (due to the usage of low ports, with the elevated permission achieved via  (as the  user).Naturally, running a script as  while the dependencies were installed local to a user other than  will mean that none of the dependencies will actually be accessible by that script.  As the dependencies are installed under the  for the , in order for the script to be able to import its dependency while being executed under the  user, the location may be defined using the   environment variable.To achieve that while using , try:If that works, great, we can move onto a more cleaner approach if desired, as this approach can potentially result in situations where the  user cannot remove files from their  directory, as files like  files will be written into there as the root.A number of approaches can be done:Laziest manner: , install packages globally; comes with all the problems of having globally available python packages.Use  instead - only local to the root user.A number of approaches at the OS level that is available on Linux may be attemptedUse virtualenv, and start the Python script (with  as ) using the  created by virtualenv.  Example (uses  as the base for demonstration):Finally, it may be beneficial to drop root privileges back to the original user (or another limited user) after the port has been opened, to improve the security situation of the runtime environment.


Answer URL
https://docs.python.org/3/library/site.html#site.USER_BASE
https://docs.python.org/3/using/cmdline.html#envvar-PYTHONUSERBASE
