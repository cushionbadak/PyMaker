Natural Text
I'm currently still learning Python, and more specifically OOP, and my teacher has tasked my class with creating a console rendition of patience (or solitaire). I'm fairly confident with objects and methods etc. however there is one specific point I am having trouble with.To display each tableau in the game, I am trying to use a loop which will spit out each card in individual rows:Where tableaus is a list of 7 sublists that can contain separate card objects, depending on the movement of the cards by the player. I have already attempted to catch any exceptions using the try/except clauses shown, however I have realised that no matter how many exceptions I attempt to catch, there are simply too many possibilities in the variety of cards in each tableau. Therefore, as the first tableau always starts with a single card, the first line is displayed asbut as soon as the for loop tries to iterate through the next cards it catches an IndexError:Does anyone have any alternative suggestion on how I could implement this code to either ignore or replace unindexed values with whitespace, or an alternative approach altogether?Thanks a lot for even reading this far!EDIT - Minimal example:
You can catch specific errors with  and . But when you can catch those errors, you want something that is almost certainly not going to end up with another error, the way you have written your code thus far, the code in your except statement could very easily produce the same error you originally were trying to avoid. I would write it a:Running the above, will not give any , and will give you:
I'll use strings as a substitute for cards because they have convenient methods -  will be a substitute for your s'  method.zip can transpose a list of lists. Since the sublists have varying lengths use itertools.zip_longest. Then for each line, iterate over items and and construct a string to print, use a dummy value if the item was missing from the tableau.Conditional expressions


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
https://docs.python.org/3/reference/expressions.html#conditional-expressions
