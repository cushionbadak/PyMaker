Natural Text
I find I am accessing Python dicts using static strings very frequently and in nested loops. I'm guessing that Python needs to hash the strings for every access, which could be impacting performance.For example:Does Cython hash these static string keys to hash values (only once) and reuse these hashes? If so, might this significantly improve performance of such loops?
Cython will not perform any magic here: it will just delegate the calls to  - basically the same thing the Python interpreter will do (but probably slightly faster).However, an unicode-object (I assume we are speaking about Python3-strings) caches its  hash-value (in -member field), so this needs to be calculated only once - which makes sense because an unicode-object is immutable, that means the hash cannot change.Here is the CPython code responsible for the hash calculation/caching:So as you can see, there is no need for Cython to avoid the hash-recalculation - this optimization is already done by CPython. By using Cython here, one could win up to 10-30% because it would eliminate the interpreter for this part of the code  (see for example this SO-post) - not really much, but better than nothing.


Answer URL
https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItemWithError
