Natural Text
Working on replacing my implementation of a server query tool that uses  with all asynchronous calls using  and . Most of the transition is straight forward since network calls are non-blocking IO, it's the saving of the responses that has me in a conundrum.All the examples I am using, even the docs for both libraries, use  which collects all the awaitable results. In my case, these results can be files in the many GB range, and I don't want to store them in memory. Whats an appropriate way to solve this? Is it to use  and then:Doesn't this introduce a thread (assuming I use a  by default) thus making this an asynchronous, multi-threaded program vice an asynchronous, single-threaded program?Futher, does this ensure only 1  is being written to file at any time? I dont want the call to  to be running, then another result comes in and I try to run to the same file; I could limit with a semaphor I suppose.
In my case, these results can be files in the many GB range, and I don't want to store them in memory. If I'm correct and in your code single  means a downloading of a single file, you may face a following problem: while  allows to swap data from RAM to HDD asap, all your  running parallely storing each their data (buffer with partly downloaded file) in RAM simultaneously.To avoid this you'll need to use semaphore to ensure not to much files are downloading parallely in the first place thus to prevent RAM overuse.Here's example of using semaphore.Doesn't this introduce a thread (assuming I use a ThreadPoolExecutor  by default) thus making this an asynchronous, multi-threaded program  vice an asynchronous, single-threaded program?I'm not sure, I understand your question, but yes, your code will use threads, but only  will be executed inside those threads. All other code still runs in single main thread. Nothing bad here.Futher, does this ensure only 1 earliest_result is being written to  file at any time?Yes, it is[*]. To be precisely keyword  at last line of your snippet will ensure it:You can read it as: "Start executing  asynchronously and suspend execution flow at this line until  is done and returned result".[*] Yes, if you don't run multiple for  loops parallely in the first place.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor
https://docs.python.org/3/library/asyncio-task.html#asyncio.as_completed
