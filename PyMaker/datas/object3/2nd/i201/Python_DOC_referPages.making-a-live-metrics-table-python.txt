Natural Text
I want to fill out a string with spaces. I know that the following works for zero's:But what should I do when I want this?:of course I can measure string length and do , but I'd like the shortest way.
You can do this with :Return the string left justified in a string of length width. Padding is done using the specified fillchar (default is a space). The original string is returned if width is less than .
Unless you need to support Python 2.5, you can (and probably should) use the string-formatting mini-language, like so:
The new(ish) string format method lets you do some fun stuff with nested keyword arguments. The simplest case:If you want to pass in  as a variable:If you want to pass in variables for the whole kit and kaboodle:Which results in (you guessed it):
You can try this:
Use :You should also consider ,  and  for string formatting. These can be chained and have the 'fill' character specified, thus:These string formatting operations have the advantage of working in Python v2 and v3.Take a look at  sometime: there's a wealth of good stuff in there.
Correct way of doing this would be to use Python's format syntax as described in the official documentationFor this case it would simply be:which outputs:Explanation:  Pretty much all you need to know is there ^.Update: as of python 3.6 it's even more convenient with literal string interpolation!
As of Python 3.6 you can just dowith literal string interpolation.Or, if your padding size is in a variable, like this (thanks @Matt M.!):
you can also center your string:
Use Python 2.7's mini formatting for strings:This left aligns, and pads to 8 characters with the ' ' character.
Just remove the 0 and it will add space instead:
Wouldn't it be more pythonic to use slicing?For example, to pad a string with spaces on the right until it's 10 characters long:To pad it with spaces on the left until it's 15 characters long:It requires knowing how long you want to pad to, of course, but it doesn't require measuring the length of the string you're starting with.
You could do it using list comprehension, this'd give you an idea about the number of spaces too and would be a one liner.
A nice trick to use in place of the various print formats:(1) Pad with spaces to the right:(2) Pad with leading zeros on the left:
+= can be used to append to string


Answer URL
https://docs.python.org/3/library/string.html#format-specification-mini-language
