Natural Text
I want to achieve a pseudo-db-like transaction using context manager.Take for example:If something goes wrong such as an exception, discard  (rollback). If  it makes it to the end of the context, execute each instruction in order of insertion and pass in the appropriate arguments.How can to trap the method call for later execution?And one extra caveat:If  is not called, I want to execute the instructions immediately.
It's not pretty, but to follow the structure you're looking for you'd have to build a temporary transaction class that holds your function queues and execute it after the context manager exits.  You'll need to use , but there are some restrictions though:All the queued up calls must be methods based on your "session" instance.  Anything else gets executed right away.  I don't know how you want to handle non-callable session attributes, so for now I assume it'll just retrieve the value.Having said that, here's my take on it:Now onto the context manager (it will be outside your class, you can place it in as a class method if you wish):Usage:This solution was a bit contrived because of the way you wanted it structured, but if you didn't need a context manager and doesn't need the session to look like a direct function call, it's trivial to just use :


Answer URL
https://docs.python.org/3/library/functools.html#functools.partial
