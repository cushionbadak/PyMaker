Natural Text
In cpython  the two id commands will return the same memory adddress, where the integer 5 is stored, but where in memory is  the                                                                                                               information           that                              y is equal to   5               stored? why      is it important to be able to know where 5 is stored in memory, but not      important to       know                      where    in   memory                         y is              equal to  5    is stored?Also, is it possible to store the number 5 in more than one place in memory when using python?  why or why not?                                                                                                                                                    
 and  say where the  in question is stored, not where  itself (the name) is stored.The location of  itself (the name holding the pointer to the object representing ) is an implementation detail; in CPython, function local names are stored in an array created when the function is called and cleaned when the function finishes, while global names are stored in a per-module  (visible as ). The  attribute of functions contains information about the locals, but doesn't provide direct access to the array (because that would allow Python code to break interpreter invariants, or take dependencies on implementation details that could change even between micro releases).Knowing where  is isn't really important. The  function isn't intended to provide actual locations, that's just a convenient way to assign unique IDs that CPython uses. In non-CPython interpreters like PyPy, it doesn't actually have to describe a memory address at all (they assign unique IDs in other ways, because garbage collection means memory addresses aren't stable over the lifetime of an object). The point of the  is about identity; are these two things the same object (also testable with the  operator), not just equal in value.As to your question "is it possible to store the number 5 in more than one place in memory when using python?", the answer for CPython is "No", but the language spec makes no such guarantee.  and  are the same only because of an implementation detail, the small  cache. On CPython, s from  to  (inclusive) are singletons; no matter how you get them (math, parsing strings, literals, etc.) there is only one of each. But for s outside that range, they're created on demand, so the s won't overlap in most cases:


Answer URL
https://docs.python.org/3/reference/datamodel.html
