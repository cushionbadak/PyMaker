Natural Text
I'm looking for the most efficient way of comparing the contents of two class instances. I have a list containing these class instances, and before appending to the list I want to determine if their property values are the same. This may seem trivial to most, but after perusing these forums I wasn't able specific to what I'm trying to do. Also note that I don't have an programming background.This is what I have so far:Before adding to my list, I'd do something like:However I'm unclear whether this is the most efficient or python-ic way of comparing the contents of instances of the same class.
Implement a  special method instead:Now you can just use:and Python will automatically use the  special method to test for equality.In my version I retained the ability to pass in a limited set of attributes:but using  to make sure we only test as much as is needed.Note that we return , a special singleton object to signal that the comparison is not supported; Python will ask the other object if it perhaps supports equality testing instead for that case.
You can implement the comparison magic method  for your class, then simply doAs you apparently don't know what attributes your instance will have, you could do:
Your method has one major flaw: if you have reference cycles with classes that both derive from , your comparison will never finish and die with a stack overflow.In addition, two objects of different classes but with the same attribute values compare as equal. Trivial example: any instance of  with no attributes will compare as equal to any instance of a  subclass with no attributes (because if  and  is an instance of , then  returns ).Finally, rather than writing a custom  method, just call it  and reap all the benefits of now being able to use the  operator (including contain testing in lists, container comparisons, etc.).As a matter of personal preference, though, I'd stay away from that sort-of automatically-generated comparison, and explicitly compare explicit attributes.


Answer URL
