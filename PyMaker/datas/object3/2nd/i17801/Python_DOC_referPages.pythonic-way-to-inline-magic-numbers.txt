Natural Text
My code has several magic numbers like specific error codes from "outside" that I need only once. So I could codeor The second one is of course better readable as it encodes the meaning of 161 into "magic_code". Thus the code becomes more readable. However it puts the semantical link outside of the statement. Would there be an easy to type way to put this inline? Ideally something in the direction ofwhich of course does not work.Of course I could collect the constants into some specific enumeration. However the constants are "only good for one call".Some answers suggest to collect the magic constants into an enumeration. I do not want to do that. The issue is that do_something calls some external system and I collect the constants through reverse engineering. Once I have all the calls in place I might decide to do so. But at this time it is more convenient to NOT YET do so. So I am asking for a way to speed up my typing while still maintaining some readability.The closest thing that I found so far isIt puts the semantics close to the number but it looks awkward to me.I do not want to set a module level constant. I only want an one time named constant. The closest thing I have found so far is
The probably least ugly option would be something like this:For python3 (where  returns a view which you cannot index directly):
In python, you can't1 do an assignment in an expression ... and honestly, I don't really see why you would want to2.  Ultimately, wherever the  function is defined, there should also be the constants that it accepts as magical:Now, you can call it like:Or, if it's imported from a module:if you're outside the function looking in, you don't care what value  has, only that it means something special to the function.Note that python3.4(?) has made this even a little more formalized with enumerated types.1can't is too strong of a word here.   is technically an expression which has the effect of an assignment in the global namespace and still returns  ... But that's just dirty...2I'm sure a ruby programmer could let me know why I would want to do that, but I've never felt the need ... ;-)
So, Ideally you'd like to call:In order to do that, in the function definition, do this:Demo:


Answer URL
