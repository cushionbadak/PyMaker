Natural Text
I just tried to run this script with Python 3.3.Unfortunately it's about twice as slow than with Python 2.7.Here are the results:Profiling shows that the additional time is spend in print:How can I avoid this overhead? Has it something to do with UTF-8?
Python 3 decodes data read from  and encodes again to ; it is not so much the  function that is slower here as the unicode-to-bytes conversion and vice-versa.In your case you probably want to bypass this and deal with bytes only; you can access the underlying  implementation through the  attribute:You'll now have to use  as  insists on writing to the   implementation.Note that the  now uses a bytes literal  and we write a bytes-literal  as well (which normally would be taken care of by ).The above is compatible with Python 2.6 and up. Python 2.5 doesn't support the  prefix.


Answer URL
