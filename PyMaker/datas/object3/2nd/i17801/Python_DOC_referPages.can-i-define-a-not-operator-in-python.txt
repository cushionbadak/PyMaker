Natural Text
I am trying to interface a C++ library that implements logical operators &&, ||, ! (unary operator not) to operate on custom selection classes. I'm a bit stuck because I can't find an unary 'not' operator in Python. Is it possible to override the built in 'not' operator which works on boolean in Python ? Is there another suitable operator, or do I need to define a function 'Not()' to implement this behavior?
You cannot override the boolean operators (, , and ) with special method hooks, because  and  operate lazily and a special method would require that you evaluate operands early instead.You can only influence how the object is evaluated to a boolean (using the  or  methods, depending on whether you are implementing a numeric or container type; Python 3 renamed  to ).You can hook into bitwise operators (,  and ), with the , , and  methods, however. This is probably what you are looking for instead. For  and  there are also inverse and in-place hooks available (, ,  and ).The result of the boolean hooks (, etc.) are cast to a boolean ( or ), but the bitwise operator hooks can return anything you like.  will evaluate to whatever  returns;  will return the result of , unless that method doesn't exist or returns , in which case  is called instead.
 just acts on boolean values in python. If that is sufficient in your use case you can override the  method. Otherwise your stuck to implement your own  method.
Just have to use the matching Python operator.


Answer URL
