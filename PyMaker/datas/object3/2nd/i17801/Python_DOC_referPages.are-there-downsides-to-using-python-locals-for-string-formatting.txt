Natural Text
This question already has an answer here:Python: is using “..%(var)s..” % locals() a good practice?                    7 answers                This is not a duplicate, as this regards using the newer , the above linked question is also of lower quality, and I think this question is sufficiently different to justify its canonicity.The question:One might expect an error here, but we can provide the  method with unused keyword arguments.This enables code like:Is this a good practice to do inside a closure like a function?What would be the possible downsides? Extra variables loaded using extra cycles? Is this a matter of convenience? I don't recall seeing this used much, would it be considered idiomatic of Python?Update I have found a canonical suggested usage using the old style string interpolation: https://wiki.python.org/moin/PythonSpeed/PerformanceTipsNevertheless, it does seem a rather old document."Even better, for readability (this has nothing to do with efficiency other than yours as a programmer), use dictionary substitution:"
From PEP 20 - The Zen of Python:Explicit is better than implicit.Here, that could (and to me, does) mean that it's better to spell out what you want to do. Suppose you eventually want to replace that with a method call and go fromtoVoila - done. But more practically, PyLint and friends can give you valuable information about the explicit version. Suppose you have:Great. That works. But what if you forgot to assign to ? Your code will blow up and you won't know why. Compare with:where PyLint will give you an "Undefined name: 'foo'" error. Yay! Bug found before you've even started to look for it.In general, be explicit. It's Pythonic, but it's also really good practice.
What would be the possible downsides? Extra variables loaded using extra cycles? Is this a matter of convenience? I don't recall seeing this used much, would it be considered idiomatic of Python?You just hit on the biggest downside: It's not idiomatic.And the reason it's not idiomatic is, as the Zen says, "Explicit is better than implicit."Obviously many people would not write  (especially if you get too far beyond 2 variables), because that violates DRY pretty horribly… but there's a way to do this that's just as concise as your code, and at least as explicit, and doesn't require sort-of-advanced-level knowledge like :This doesn't work when the format string is dynamic, but that's a good thing, because dynamic format strings are usually a red flag.(Some people have also argued the "static-checking" benefit here—if you embed the names in the format string, you get a much less decipherable error than the simple  from using a variable that doesn't exist in the arguments to . I put this in parentheses near the bottom because I personally don't think this argument is very good, even if I have seen it multiple times…)However, as with any style/idiom question, there is no universal agreement on this one, and it gets debated regularly on python-list (and python-ideas, when someone suggests a way to make  a default for  or the like) until everyone stops paying attention.


Answer URL
https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498
