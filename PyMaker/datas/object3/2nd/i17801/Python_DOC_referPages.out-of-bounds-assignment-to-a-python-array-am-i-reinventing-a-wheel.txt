Natural Text
I need to build up an array, but I receive my data out-of-order (and I don't know what the highest index of the array will be) so I need a way of doing  when the index is frequently out of bounds.I quickly threw together this function that does what I want, but I feel there might be an easier way.So, for example:Edit: While my end goal is a bit too much to ask in a stackoverflow question, the operations I need to do (relatively quickly) on the resulting data are:iterate over values in index order (non-default-only is fine)look up values by indexThe data-set is small enough (~1000 elements) that the memory usage of an array are not an issue.Edit: Thanks for all of the great answers! I <3 Stackoverflow :)
Can you store both the  in a list via ? Then you can sort the list by index value:For example:
Here's a self-extending list for you:When assigning to an index beyond the end of the list, it extends the list to be long enough to hold it.Since it subclasses , there's no sorting required for display (but repeatedly extending the list a little at a time might be expensive).
If you want to keep this sparse (that is, if you set index 50 when the previous highest index was 25, you only want to create 1 new element instead of 25), the obvious answer here is a dict, plus a "largest index seen" int.There is a tradeoff here. Obviously a real  will be faster for some operations, and use less storage when the list is actually dense rather than sparse, and will help us more with implementing things like complex slices, and so on.But if you were thinking of using a , this is the direction you're looking. A  does a lot of the extra stuff you need, but it won't let you iterate over the values, or give the right , and it will create and store new values whiner you ask for them instead of leaving them sparse. You could add those things… but really, if you can't use  directly, it's not helping much; we already know where we want to defaultify and where we don't, and it's already inside a wrapper, so…To build a custom -like object, you can just define a handful of methods and let  define the rest for you.Note that this doesn't do slicing. You can handle that manually, but it gets more complicated than I'd want to put into an answer. If you want to take this further, I've got a  class I can upload somewhere that shows how to solve the same problems you'd need to solve.


Answer URL
