Natural Text
This question already has an answer here:How to run multiple Python versions on Windows                    13 answers                How can I configure windows command dialog to run different python versions in it? For example when I type  it runs python 2.7 and when I type  it runs python 3.3? I know how to configure environment variables for one version but two? I mean something like Linux terminal.
Python 3.3 introduces Python Launcher for Windows that is installed into  as  and  by the installer. The installer also creates associations with  and . Then add  or  as the first lline. No need to add anything to the  environment variable.Update: Just install Python 3.3 from the official python.org/download. It will add also the launcher. Then add the first line to your script that has the  extension. Then you can launch the script by simply typing the  on the cmd line, od more explicitly by , and also by double clicking on the scipt icon.The  looks for  where  is related to the installed versions of Python at the computer. Say, you have Python 2.7.6 installed into , and Python 3.3.3 installed into . The first line in the script will be used by the Python launcher to choose one of the installed versions. The default (i.e. without telling the version explicitly) is to use the highest version of Python 2 that is available on the computer.
I also met the case to use both python2 and python3 on my Windows machine. Here's how i resolved it: download python2x and python3x, installed them. add  to environment variable .Go to  to rename  to , also to , rename  to .restart your command window. type , or  in command line to switch the version you like.
I would suggest using the Python Launcher for Windows utility that was introduced into Python 3.3. You can manually download and install it directly from the author's website for use with earlier versions of Python 2 and 3. Regardless of how you obtain it, after installation it will have associated itself with all the standard Python file extensions (i.e.  , , and  files). You'll not only be able to explicitly control which version is used at the command-prompt, but also on a script-by-script basis by adding Linux/Unix-y shebang  comments at the beginning of your Python scripts.


Answer URL
