Natural Text
I am using  to create an Async/IO webserver. However, to my understanding, Async/IO means the server can only run on one processing core. Regular, synchronous servers like , on the other hand, can fully utilize the computer's computing resources with truly parallel threads and processes. Why, then, is Async/IO new and trendy if it less parallel than multiprocessing? Can async servers like  be multi-processed?
Why, then, is Async/IO new and trendy if it less parallel than multiprocessing?The two solve different problems. Asyncio allows writing asynchronous code sans the "callback hell".  allows the use of constructs like loops, ifs, try/except, and so on, with automatic suspension and task switching. This enables servicing a large number of connections without needing to spawn a thread per connection, but with maintainable code that looks as if it were written for blocking connections. Thus asyncio only helps with the code whose only bottleneck is waiting for external events, such as network IO and timeouts.Multiprocessing, on the other hand, is about parallelizing execution of CPU-bound code, such as scientific calculations. Since OS threads do not help due to the GIL, multiprocessing spawns separate OS processes and distributes the work among them. This comes at the cost of the processes not being able to easily share data - all communication is done either by serialization through pipes, or with dedicated proxies.A multi-threaded asyncio-style framework is possible in theory - for example, Rust's tokio is like that - but wouldn't work in Python due to the GIL preventing the use of multiple cores. Combining asyncio and multiprocessing is unlikely to work out either, because both the asyncio implementation and code using asyncio heavily depend on shared state.
Gunicorn can help you:


Answer URL
https://docs.python.org/3/library/multiprocessing.html#proxy-objects
