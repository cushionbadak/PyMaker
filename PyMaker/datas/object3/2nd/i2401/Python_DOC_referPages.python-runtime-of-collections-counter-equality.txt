Natural Text
I am wondering what the big-O runtime complexity is for comparing two  objects. Here is some code to demonstrate what I mean:Is the runtime of the equality comparison in the final statement O(1)? Or is it O(num_of_unique_keys_in_largest_counter)? Or is it something else?For reference, here is the source code for  https://github.com/python/cpython/blob/0250de48199552cdaed5a4fe44b3f9cdb5325363/Lib/collections/init.py#L497I do not see the class implementing an  method.Bonus points: If the answer to this question changes between python2 and python3, I would love to hear the difference?
Counter is a subclass of , therefore the big O analysis is the one of dict, with the caveat that  objects are specialized to only hold  values (i/e they can not hold collections of values as dicts can); this simplifies the analysis.Looking at the c code implementation of the equality comparison:There is an early exit if the number of keys is different. (this does not influence big-O).  Then a loop that iterates over all the keys that exits early if the key is not found, or if the corresponding value is different. (again, this has no bearing on big-O).  if all keys are found, and the corresponding values are all equal, then the dictionaries are declared equal. The lookup and comparisons of each key-value pair is ; this operation is repeated at most  times ( being the number of keys)In all, the time complexity is , with  the number of keys.This applies to both python 2 and 3.from dictobject.c
Internally,  stores the count as a dictionary (that's why it subclasses ) so the same rules apply as with comparing dictionaries - namely, it compares each key with each value from both dictionaries to ensure equality. For CPython, that is implemented in , other implementations may vary but, logically, you have to do the each-with-each comparison to ensure equality.This also means that the complexity is  at its worst (loops through one of the dictionaries, looks if the value is the same in the other). There are no significant changes between Python 2.x and Python 3.x in this regard.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/tutorial/datastructures.html#dictionaries
