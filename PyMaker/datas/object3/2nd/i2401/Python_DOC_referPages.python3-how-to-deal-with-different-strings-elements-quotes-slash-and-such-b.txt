Natural Text
I am passing as parameter a string; to a Python3 function.This string is composed by different variables; and in few cases, I need to have the quotes in the string, so I did concatenate various strings to make it work. This is the string I use in my code, to call an application called , which use a file called  to perform various operations. The whole code logic is not relevant for the purpose of this question; since the root cause of the errors is the fact that path strings and quoted strings behave differently between OS (like Windows and Unix-like systems for example)This works without problems on OSX and Linux; but when I run this on Windows machines, I get an errorAfter digging a bit in the differences between OS, it is clear to see that my path for the  file is pointing at  which is a pure unix construct for the file system; so that has been replaced when I run the code on Windows.Although, there is still the problem with , which on windows is ; the location is the same, so I did fix that too.Last but not least, 2 issues tied to the OS itself: the  is  in Windows, so that has to change; and same goes for quotes and double quotes.Does Python have any construct that help programmers to handle cases like mine, where you build a string of parameters to pass to a function, and have in it single and double quotes, paths and such?To expand on the original point: how do you handle this between OS? Beside a simple RE to replace a character with another; is there any construct used in Python that allow code to operate independently from the OS used, when dealing with paths, quoted strings and multiple nested quoted strings?
I think the problem may well be that the string is being passed directly to the command interpreter. In UNIX this will work the way you expect because it treats quotes as special characters, but on Windows, depending on the shell, it probably will behave in very different ways. One possible solution is to break the command you want to run into separate argument strings:And then use one of the many functions in  to execute the command directly instead of using the shell (i.e. , which is the default for most of them).


Answer URL
https://docs.python.org/3/library/subprocess.html?highlight=subprocess
