Natural Text
I took a look at this question but it doesn't exactly answer my question.As an example, I've taken a simple method to print my name.Later on, I realized that optionally, I would also like to be able to print the middle name and last name. I made the following changes to accommodate that using **kwargs fearing that in the future, I might be made to add more fields for the name itself (such as a 3rd, 4th, 5th name etc.)I decided to use **kwargsMy only concern here is that as I continue to implement support for more names, I end up writing one line of code for every single keyword argument that may or may not come my way. I'd like to find a solution that is as pythonic as possible. Is there a better way to achieve this ? EDIT 1I want to use keyword arguments since this is just an example program. The actual use case is to parse through a file. The keyword arguments as of now would support parsing a file from 1) A particular byte in the file.2) A particular line number in the file. Only one of these two conditions can be set at any given point in time (since it's not possible to read from a particular byte offset in the file and from a line number at the same time.) but there could be more such conditions in the future such as parse a file from the first occurrence of a character etc. There could be 10-20 different such conditions my method should support BUT only one of those conditions would ever be set at any time by the caller. I don't want to have 20-30 different IF conditions unless there's no other option.
You have two separate questions with two separate pythonic ways of answering those questions.1- Your first concern was that you don't want to keep adding new lines the more arguments you start supporting when formatting a string. The way to work around that is using a  so you're able to return an empty string when you don't provide a specific keyword argument and  that accepts a dict as a way to input keyword arguments to format. This way, you only have to update your string and what keyword arguments you want to print:2- If, on the other hand and answering your second question, you want to provide different behavior depending on the keyword arguments, like changing the way a string looks or providing different file lookup functionalities, without using if statements, you have to add different functions/methods and call them from this common function/method. Here are two ways of doing that:OOP:Module:
Seem to me your better off not using kwargs and not even a function, you can simply do something like this:Or if you do want a function:
If your function care so specifically about keyword arguments, this is probably not the right tool. In this case, you can get the same effect with default arguments:It's better for when you want a sort of "grab-bag" of options. E.g.etc.
You can simplify it by:
I will post it as a answer then : You can instantly unpack the kwargs values to the format function like this :But as a User @PM 2Ring mentioned You must be aware that doesn't guarantee that the names will be in the correct order. 
I think that your call_me_by_name is no good example for **kwargs. But if you want to avoid omitting some exotic, unconsidered name fields, call_me_by_name could look like:Test:


Answer URL
https://docs.python.org/3/library/enum.html
