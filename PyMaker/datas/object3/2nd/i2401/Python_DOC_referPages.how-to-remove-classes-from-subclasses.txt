Natural Text
When inheriting from a class, the child class is accessible on the parent via the  method.However, deleting the child class doesn't seem to remove it from the parent.Where does  get its information from? And can I manipulate it?OrIs there a proper way to remove a class and have its parent lose reference to it (e.g. ?
The subclass contains references to itself internally, so it continues to exist until it is garbage collected. If you force a garbage collection cycle it will disappear from the :and then it has gone.However make sure you have deleted all other references to the class before you force the garbage collection. For example, if you do it interactively and the last output was the subclass list there will still be a reference to the class in .Output with python 3.7 is:I should probably also add that while garbage collection works for this simple case you probably shouldn't depend on it in real life: it would be far too easy to accidentally keep a reference to the subclass somewhere in your code and then wonder why the class never goes away.What you are trying to do here is keep a registry of subclasses so that the factory can return an object of the appropriate class. If you want to be able to add and remove classes from the registry then I think you have to be explicit. You could still use  to find candidate classes, but keep a flag on each class to show whether it is enabled. Then instead of just deleting the subclass set the flag to show the class is no longer in use and then (if you want) delete it.
Where does  get its information from?For the CPython implementation of Python, the type object keeps a list of weak references under . This is marked as "Not inherited. Internal use only" in the docs, so can be treated as an implementation detail of CPython. See also: How is  method implemented in CPython?.And can I manipulate it?Any class has a  descriptor which, if changed, updates the references in . can only be manipulated when the class doesn't directly inherit from . So while:and should be equivalent *. You will get an error. See: https://bugs.python.org/issue672115You also can't use this to change a class to inherit from object.You can, however, change the bases of a class to be another class.This all updates the parent class:


Answer URL
https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_subclasses
