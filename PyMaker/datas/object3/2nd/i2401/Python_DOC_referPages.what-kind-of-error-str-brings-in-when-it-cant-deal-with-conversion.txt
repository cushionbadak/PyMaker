Natural Text
I am writing a kind of 'universal' json decoder that would convert everything it can using a default json encoder plus sets, and everything else it will convert using  - which is a bit stupid, but it will allow to just work silently and let users know what kind of data there was initially. So with the small amendment the following code is taken from here:Then if I try to convert a function using this encoder it will return something like:Which is, again a bit stupid but totally fine for my purposes. The question is: what if  fails to convert anything provided as an input argument? What kind of error will be triggered? I looked through  source and didn't get when exactly (if at all?) it captures the possible conversion errors. Or it is assumed to convert any kind of input provided?
You can check out the documentation of :If neither encoding nor errors is given,  returns , which is the “informal” or nicely printable string representation of object. For string objects, this is the string itself. If object does not have a  method, then  falls back to returning .That said. Besides situations like not being able allocate any more memory () which would not be  conversion specific, the only way I can see this failing is if someone overloaded  (or  if there is no ) and made it to, for instance:Which would result in:That said though: There isn't really a generic answer to your question, because it could raise anything anyone programmed it to do.EDIT: All of above pertains to simple  calls with just an object passed as seen in your example. If you attempt decoding the incoming object by specifying  and/or . You could run into  for anything other then bytes-like input or see decoding related failures: . This behavior of  is described in the following paragraph of its docs:If at least one of encoding or errors is given, object should be a bytes-like object (e.g.  or ). In this case, if object is a  (or ) object, then  is equivalent to . Otherwise, the bytes object underlying the buffer object is obtained before calling .


Answer URL
https://docs.python.org/3/library/stdtypes.html#str
https://docs.python.org/3/glossary.html#term-bytes-like-object
https://docs.python.org/3/library/stdtypes.html#str
