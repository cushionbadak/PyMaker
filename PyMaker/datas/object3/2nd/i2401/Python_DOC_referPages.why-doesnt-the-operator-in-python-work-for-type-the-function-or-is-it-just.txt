Natural Text
I want to provide my code before asking the question for some context.My code:This outputs (given that I input values):Insert the value for a: 8Insert the value for b: 3 Insert the value for c: 2 You didn't insert a number! Try again! This is your last chance or I will stop running!8.0 You didn't insert a number! Try again! This is your last chance or I will stop running!3.0 You didn't insert a number! Try again! This is your last chance or I will stop running!2.0The problem is I specified that if it isn't a float or an integer, it should deliver the message. But I did insert an integer, but it still printed out the string. What's the problem? Can you assign variables to types of numbers?
You called the  and  constructors, which, with no arguments, return the zero value.So:translates to:which then (thanks to boolean evaluation rules) becomes:which is clearly wrong.If you want to test for precise types, check with  on a  of the types, e.g.:Normally you want to accept subclasses though, so the Pythonic approach would be:Of course, none of this will actually solve your problem of checking. You explicitly created  by converting a  to a . It's always going to be a , or it's going to raise a  if the string isn't a legal  value. The type checking will never help.So what you really want is to perform the conversion in a  block and catch the exception if it fails:If you want to loop until they give you a valid number, we have several questions to choose from (there are dozens more, I just can't be bothered to link them all).
You want to do:Because need  operator for this, and no calling Better:Or inefficient way:You can also do:
 works fine; the problem is that  does not mean :  does not distribute over . It has nothing to do with types.
Its printing exactly what you are asking it to printOnly one of the  statements needs to evaluate to  for the  statement to execute, and since  it becomes  and runs  as you asked it to do


Answer URL
https://docs.python.org/3/glossary.html#term-eafp
https://docs.python.org/3/glossary.html#term-lbyl
