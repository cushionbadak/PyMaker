Natural Text
I know that the following string definitions represent (python internal) the same (basic knowledge):Therefore if you make it e.g. interactive in PythonWin:Clear for me (understand)But what me confuse is that at the python built in function open all this (partly crazy) path-codings work (interactive tested in PythonWin):My questions:Where is this behaviour documented?Have anybody background-informations?Tests was made at Windows 7 OS and with PythonWin 2.7.13
For details, check section 2.4.1 in the docsLet's take a look at the different strings and why they are working:The  is the escape character in a string, which is used for special characters like a newline (). In this case you are lucky that none of the combinations    indicate a special character like that, hence it works, as opposed to Save method, the  constructs escapes the , hence you would also be able to do Also save, since the prefix indicates a raw string, the  are taken literally and not as escape sequencesHere you have a raw string (preceeded with ) but still use double , hence you have  in the path. This works because windows understand paths with double  which you can also confirm in the 
This string behaviour is documented under (Python v3.7 docs)  and the behaviour of  is documented under .Specifically, for the file/path in  is as clarified under , in the entry . Admittedly this is a lot of reading to really understand this parameter.In summation: a r"string" is a raw string. You don't need to escape slashes like  to result in a single slash  when using raw slashes.In the second block, just to be clear, you were looking at the variables themselves and looking at them via their string representation (when using print) (which I think you mention you understand fine, but I just wanted to repeat it back to you to be sure).Going forward, python versions will all be using a PathLike object when handling files and folders. I'm guessing you're still on Python 2.x as you didn't get an error when running  - should be  in Python 3.x. I recommend moving to Python 3 soon, it really is much better.I hope that answers your questions successfully?


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html
