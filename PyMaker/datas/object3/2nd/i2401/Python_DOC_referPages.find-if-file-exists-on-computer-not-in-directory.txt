Natural Text
I have a file that may be in a different place on each user's machine. Is there a way to implement a search for the file? A way that I can pass the file's name and the directory tree to search in?
os.walk is the answer, this will find the first match:And this will find all matches:And this will match a pattern:
I used a version of  and on a larger directory got times around 3.5 sec. I tried two random solutions with no great improvement, then just did:While it's POSIX-only, I got 0.25 sec.From this, I believe it's entirely possible to optimise whole searching a lot in a platform-independent way, but this is where I stopped the research.
If you are working with Python 2 you have a problem with infinite recursion on windows caused by self-referring symlinks.This script will avoid following those. Note that this is windows-specific!It returns a list with all paths that point to files in the filenames list.Usage:
If you are using Python on Ubuntu and you only want it to work on Ubuntu a substantially faster way is the use the terminal's  program like this. is a  of the absolute file paths. This is 10,000's of times faster than the methods above and for one search I've done it was ~72,000 times faster.
For fast, OS-independent search, use https://github.com/benhoyt/scandir/#readmeRead http://bugs.python.org/issue11406 for details why.
In Python 3.4 or newer you can use pathlib to do recursive globbing:Reference: https://docs.python.org/3/library/pathlib.html#pathlib.Path.globIn Python 3.5 or newer you can also do recursive globbing like this:Reference: https://docs.python.org/3/library/glob.html#glob.glob
Below we use a boolean "first" argument to switch between first match and all matches (a default which is equivalent to "find . -name file"):
See the os module for os.walk or os.listdirSee also this question os.walk without digging into directories below for sample code


Answer URL
https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob
https://docs.python.org/3/library/glob.html#glob.glob
