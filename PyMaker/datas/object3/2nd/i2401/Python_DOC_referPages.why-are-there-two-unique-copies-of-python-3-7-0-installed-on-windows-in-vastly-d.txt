Natural Text
I have Python 3.7.0 installed on Windows. I only followed the Installer one time, but I have two different executables of python installed in two different locations.with a white icon, 887 KB (908,952 bytes); andwith a black icon, 97.6 KB (99,992 bytes)The Python Installer specifies the second path, as shown in the Installation guide, but Git Bash, Cygwin, and MSYS+MingW all report the first one as valid and not the second one:And PowerShell shows that both of them are Python 3.7.0, despite their different file sizes:The first path does not have a "Scripts" sub-folder, but the second one does, however the System Environment variables point to a "Scripts" folder at the path that has no "Scripts" folder:PATH variable:PYTHON_HOME variable:So where does the "py.exe" store libraries? Why do both of them correctly run python scripts and have the same outputs? And why is there an install at  anyway? I had to physically add the second one to the PATH variable to be able to use  from a terminal without typing , and I do not want to type the long version.
 is the special Python launcher for Windows. It's not directly associated with any specific version of Python, it just installs with any version of Python 3.3 or later, and provides three major benefits:Being installed in the  directory ensures it's always installed in your  (so no need to modify your  for each Python install directory)It allows you to select different Python versions easily;  runs it with the latest Python 2 on your system,  with the latest Python 3 version, or  could be used to launch with Python 3.5 even if a later release were available. As of 3.6's launcher, with no arguments it runs the latest version of Python you have installed; for 3.3-3.5's launcher, it defaulted to running the latest version of Python 2 installed, with the  switch necessary to make it use the latest Python 3.By associating the launcher with the  extension, you can use UNIX-style shebang lines in your scripts. For example, if the first line of your script is  (pretty standard), and  is installed and associated with  files, then on running , it's equivalent to having run You can read more details on the PEP.Point is,  doesn't actually store any libraries of its own. All it does is provide the common interface to find other existing installations of Python on Windows (while it only ships with 3.3 and higher, it manages older installations as well, including Python 2 installs). It's unfortunate that  has to be run in an ugly way, but that's mostly unavoidable if you want to allow multiple versions of Python to exist on a system without stomping on each other. If you had installed both 2.7 and 3.7, only one of them could be first in your , so you'd only have one  and one  to run; by using the  launcher with  or , you can be precise without the two installations stepping on each other's toes.
Could you run both version of Python with these commands in both instances:The results are default libraries path for that respective Python copy.Anaconda does not use . Python standard documentation suggests not to configure this environment variable as different versions of Python may have its compatible libraries. So, I would guess not to do anything unless you have run out of disk space. One of Python must be installed by cygwin and the other was by a standard Python installer.


Answer URL
https://docs.python.org/3/_images/win_installer.png
https://docs.python.org/3/using/windows.html#python-launcher-for-windows
https://docs.python.org/3/using/windows.html
