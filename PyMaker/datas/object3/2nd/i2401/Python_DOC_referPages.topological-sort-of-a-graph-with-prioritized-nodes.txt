Natural Text
here is my problem, I have this very simple graphOr as I'm writing  my script in python, here it is as a dict (child as key and parent as value):Now, I know that with the wonderful toposort module I can unroll this graph into a list so that visiting each node in the list starting from the first will respect the graph relationship between parents and children. It works great and in this case I would get:Now the problem is that in my case each node has also a priority which tells me what node I should visit BEFORE provided that all its parents have already been visited. Here is an example dict for priorities (key is node, value is priority for which the greater is the most important):So I would like to have an algorithm which spits out something like this: Or any other equivalent solution (well, I'm guessing solutions will not be unique, but I may be wrong). In other words, I need something that take the relationship between nodes as first thing to be considered to define the chain and then the priority.Is there anything out here I can use? Or how can I leverage the toposort module in python to achieve this?Thanks in advance!
You could implement a topological sort using a heap to handle the priorities. Python provides the heapq module for handling heaps. An implementation inspired by Kahn's algorithm can be the following:Notes:As specified in the documentation the algorithm receives a graph where the keys are the node labels and the values are a list of node labels so you need to reverse your graph, secondly the heap is a minimum heap so you also need to invert your priorities (multiply by -1). The final code looks likes this:OutputNote that the call  is to the function  defined above.


Answer URL
https://docs.python.org/3/library/heapq.html
