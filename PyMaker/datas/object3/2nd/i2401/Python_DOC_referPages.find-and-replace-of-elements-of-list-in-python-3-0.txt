Natural Text
I am having 3 big lists ,  and  with 106756, 106588 and 100 words respectively. and  consisting the data tokenize into token of words, and  consisting of the words that are common to both  and  lists.Suppose that,As you can see in L1 list there is  like , . What I need is that, for every  word in , like (say , ), I need to replace it with its  like appending a  either at the  or   of that discovered word. Further, for all instances of the discovered word (in ), should be replaced with the modified version of the same word in . For Example,Suppose, the word  occurred 100 times in  list (say) and newness is a word also present in . Similarly, there are also 100 words in  and that are also present in , with multiple frequencies. Then, after transformation the list should look somewhat like this:...How to achieve this in a list? Help please. I am also a new-bie to python. I am just curious to know whether there exist some command in python for achieving this? I don't know where to start?
To count things in list, python provides a dict-like Counter() class in its collections module: Doku which counts occurences in O(n) and provides them as dictionary.Output:It provides a convenience method to get the result sorted as list of tuples  named most_common() - if you use the first one, you get the most used word which you can use together with a list comprehension to modify your source list: Output:The order of items in  relates to the order in the original list, you got multiple items wiht a count of 2 in  -  is the first of them, hence it is also the first when using  Edit 4 comment:Output:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#collections.Counter.most_common
