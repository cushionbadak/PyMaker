Natural Text
I'm trying to test a publicly available web page that takes a GET request and returns a different JSON file depending on the GET argument.The API looks likeI made a program to check the results of all possible 4-letter strings on this API. My code looks something like this (with the actual URL replaced):This code is completely functional and works as expected. However, there is a problem. Because the program can't progress until it receives a responses, this method is very slow. If this ping time is 100ms for the API, then it will take 100ms for each check. When I modified this code so that it could test half of the results in one instance, and half in another, I noticed that the speed doubled.Because of this, I'm led to believe that the ping time of the site is the limiting factor in this script. What I want to do is be able to is basically check each code, and then immediately check the next one without waiting for a response.That would be the equivalent of opening up the page a few thousand times in my browser. It could load many tabs at the same time, since each page is less than a kilobyte.I looked into using threading to do this, but I'm not sure if its relevant or helpful.
User a worker pool, like described here: https://docs.python.org/3.7/library/multiprocessing.htmlJust be aware that the website might be rate-limiting the amount of requests you are making.To be more specific with your example, I would split it up into two phases: (1) generate test codes (2) test url, given one test code. Once you have the list of codes generated, you can apply the above strategy of applying the verifier to each generated code, using a worker pool.To generate the test codes, you can use itertools:You have a better understanding of how to test a URL given one test code , so I assume you can write a function  that will make the appropriate URL request and verify the result as necessary. Then you can call:On top of this, I would suggest two things: make sure  is not enormous at first (for example by taking a sublist of these generated codes) to make sure your code is working correctly and (2) that you can play with the size of the worker pool to not overwhelm your machine or the API.Alternatively you can use asyncio (https://docs.python.org/3/library/asyncio.html) to keep everything in a single process.


Answer URL
https://docs.python.org/3/library/asyncio.html
