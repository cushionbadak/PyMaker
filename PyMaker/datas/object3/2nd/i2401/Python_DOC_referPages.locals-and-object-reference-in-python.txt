Natural Text
I found something curious about how python tracks objects in .Considering the following script:Running with both  calls commented (as above) gives me no messages, indicated that the  object created was garbage collected.When I run it with the first  command (removing the first comment), it seems to create a dictionary that contains a reference to my  object. This dictionary is not associated to any names, so I wouldn't expect this dict to live as without being garbage collected.The problem is that, running the code, I get . Even if I delete  from the function namespace, the object is not garbage collected as the dict returned by  is still referring to it.Funny enough, if I call  again (removing the second comment in the code above), then somehow the dictionary gets updated, it does not contain  in it and the object is garbage collected successfully (and I don't get an  message).I find this behaviour a bit weird.Questions are:Is it normal that the dictionary returned by  is longlived, even without associating it with any names?Is it normal or is there any reason that this dictionary does not get updated automatically when deleting names from the current scope?Edit: I am using cpython 3.6Thanks!
 is weird. Inside a function, every  call copies the current local variable values into a dict associated with the stack frame and returns the dict. The dict is not used for actual local variable lookup, but it is attached to the frame object, and it is not a new dict every time; all  calls in the same stack frame reuse the same dict.When you call , the locals dict now has a reference to all objects currently referred to by local variables. This will keep those objects alive until either the stack frame dies, or a new  call is made inside that stack frame with different local variable values. A few other things will also update the locals dict, such as retrieving the  attribute of the stack frame object, but local variable assignment does not update the locals dict by itself.


Answer URL
https://docs.python.org/3/library/functions.html#locals
