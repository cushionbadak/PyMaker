Natural Text
Typically a subclass  will just pass to  all the params that it needs, then also do something else. Is there a neat way to do this, without copying  the parameters in my code? In the example below,  appears three times. I'd like some "magic" to handle this. Something with  and ?.
This is most easily achieved with the dataclasses module new to python 3.7. It will only really help for relatively simple classes. As are pointed out in the comments dataclasses are not without their limitations. If you're just after a simple record-style class then it's a good way to reduce boilerplate code. For anything more complex, explicit is better than implicit. That is, writing out your own  and doing what you need. For instance, altering arguments before passing them on to super, or adding new arguments that do not have defaults (when the super class does have default arguments).
Yes, you can use kwargs. You can use **kwargs to let your functions take an arbitrary number of keyword arguments ("kwargs" means "keyword arguments"). This is used here:When creating an instance of class, we need to unpack the kwargs, hence **kwargs. The full code, based on your example is:In class B, you only have to assign its own instance variables as B inherits from A. Hence, B has all A's instance variables as its default values. However, you might want to reconsider your design decisions if you have to write ugly code like this. Having too many instance variables can be confusing in the future. From the Zen of Python:Beautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Readability counts.Hope this helps!
Here is a solution. It requires modifying the baseclass slightly to give flexibility to the subclasses.It also gives a subclass with an "ugly" interface (args  are required but not in the signature). But subclasses are generally more internal than baseclasses, so that ugliness could be OK.


Answer URL
https://docs.python.org/3/library/dataclasses.html
