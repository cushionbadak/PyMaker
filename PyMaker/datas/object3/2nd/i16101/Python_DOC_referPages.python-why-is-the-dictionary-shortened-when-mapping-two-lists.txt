Natural Text
I have two large lists, equal lengths 0f 2574 items a piece. I want to map the items into a dictionary, because when mapped, I want to know which values are different from their keys. One value per key. When I map them however, I get a much shorter dictionary with length 76. Here's a test:So why does using dict(zip()) remove the 1's that would map to one another and the 8's that would map to one another but keeps everything else? Basically, the two lists I ahve are equal length, and for each index I need to know if the item is different. Positions in each list for comparisons must match. So list1[0] to list2[0], and nowhere else. when I got the dictionary I figured something like this would work:but they're not matching up...
As other answers clarify, s require the keys to be unique.It sounds like you would prefer a list of tuples and not a dictionary.  So instead of , try this: 
Dictionary keys must be unique. Only the last  key survived, as did the last  key.When you specify a key more than once, only one (the 'last one' processed) wins:If you wanted to find out what values differ from their key, don't use a dictionary, just collect the pairs that differ:You can add indices to this with :Demo:
A dict maps each key to exactly one value. If you set the same key multiple times to different values (or, of course, to the same values), each one overrides the previous one. So, for example:If you want to store multiple values per key, what you want is a "multidict", not a dict. Python doesn't have such a thing built in, but it's pretty easy to simulate with :So, if you want a function that creates a multidict from an iterable of pairs, you can write it pretty easily:
In order to preserve both the item in  and its position, use .Each key in  is a tuple consisting of an index from  and the item at that position.
In order to preserve the length and order of elements as in the lists, use 


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
