Natural Text
I read about  extended syntax, so that if I have:I can factor it:but I have noticed that if I do, after I have coded the second generator:I get the following error:So, how is that? How can I send a value to my  generator object?
 is not a generator, it doesn't have a  method.This is clearly documented in the  expression documentation:When  is used, it treats the supplied expression as a subiterator. All values produced by that subiterator are passed directly to the caller of the current generatorâ€™s methods. Any values passed in with  and any exceptions passed in with  are passed to the underlying iterator if it has the appropriate methods. If this is not the case, then  will raise  or , while  will just raise the passed in exception immediately.Emphasis mine.You are trying to send a value to the  iterator, but it has no  method. is just a sequence, not a generator object; you can create multiple iterators for it, you can test if a number is a member of the sequence, ask it for its length, etc.Note that your 'refactoring' is not the same thing at all; in your original  is assigned anything you send in through ; in your second version  returns the  attribute of the  exception raised when the sub-iterator ends. If the sub-iterator is a generator itself, you can set that value either by manually raising  or by using a  statement.  cannot return the value sent in with  because such values would be passed on to the sub-generator instead.Again, from the documentation:When the underlying iterator is complete, the value attribute of the raised  instance becomes the value of the yield expression. It can be either set explicitly when raising , or automatically when the sub-iterator is a generator (by returning a value from the sub-generator).So your first version is set up to receive  messages, yielding both the   target and any sent value is true-thy, while the other passes on any sent messages to a degelated-to generator, then would yield just the  value if it is true-thy once, after the delegated-to iterator is done.


Answer URL
https://docs.python.org/3/reference/expressions.html#generator.send
https://docs.python.org/3/reference/expressions.html#yield-expressions
