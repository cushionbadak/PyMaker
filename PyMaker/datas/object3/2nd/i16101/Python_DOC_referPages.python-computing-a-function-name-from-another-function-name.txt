Natural Text
In python 3.4, I want to be able to do a very simple dispatch table for testing purposes.  The idea is to have a dictionary with the key being a string of the name of the function to be tested and the data item being the name of the test function.  For example:The idea is that I have a list of function names someplace.  In this example, I manually create a dictionary that maps those names to the names of test functions.  The test function names are a simple extension of the function name.  I'd like to compute the entire dictionary from the list of function names (here it is "myTestList").Alternately, if I can do the same thing without the dictionary, that'd be fine too.  I tried just building a new string from the entries in myTestList and then using local() to set up the call, but didn't have any luck.  The dictionary idea came from docs.python.org/3/
There are two parts to the problem.The easy part is just prefixing  onto each string:The harder part is actually looking up the functions by name. That kind of thing is usually a bad idea, but you've hit on one of the cases (generating tests) where it often makes sense. You can do this by looking them up in your module's global dictionary, like this:There are variations on the same idea if the tests live somewhere other than the module's global scope. For example, it might be a good idea to make them all methods of a class, in which case you'd do:(Although more likely that code would be inside , so it would be using  rather than .)If you don't actually need the dict, of course, you can change the comprehension to an explicit  statement:One more thing: Before reinventing the wheel, have you looked at the testing frameworks built into the stdlib, or available on PyPI?
Abarnert's answer seems to be useful but to answer your original question of how to call all test functions for a list of function names:


Answer URL
https://docs.python.org/3/library/functions.html#globals
https://docs.python.org/3/library/development.html
