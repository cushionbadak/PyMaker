Natural Text
I have done as much research as possible but I haven't found the best way to make certain cmdline arguments necessary only under certain conditions, in this case only if other arguments have been given. Here's what I want to do at a very basic level:From what I have seen, other people seem to just add their own check at the end:Is there a way to do this natively within the argparse package?
I've been searching for a simple answer to this kind of question for some time. All you need to do is check if  is in , so basically for your code sample you could just do:This way  receives either  or  depending on whether the user as used . Already tested it, seems to work and guarantees that  and  have an independent behavior between each other.
You can implement a check by providing a custom action for , which will take an additional keyword argument to specify which other action(s) should become required if  is used.The exact definition of  will depend on what, exactly,  should do. But, for example, if  is a regular, take-one-argument-and-save-it type of action, then just inheriting from  should be sufficient.In the example parser, we save a reference to the  option inside the  option, and when  is seen on the command line, it sets the  flag on  to . Once all the options are processed,  verifies that any option marked as required has been set.
Your post parsing test is fine, especially if testing for defaults with  suits your needs.http://bugs.python.org/issue11588  looks into implementing tests like this using the  mechanism (a generalization of mutuall_exclusive_groups).I've written a set of  that implement tests like  (mutually exclusive), , , and .  I thought those where comprehensive, but I haven't been able to express your case in terms of those operations. (looks like I need  - not and, see below)This script uses a custom  class, that essentially implements your post-parsing test.   is a list of Actions that the parse has seen.Sample output is: and error messages still need work.  And it doesn't do anything that post-parsing test can't.Your test raises an error if .  Conversely, what is allowed is .  By adding a  test to my  classes, I can implement your case as:The usage is (using  to mark a 'nand' test):I think this is the shortest and clearest way of expressing this problem using general purpose usage groups.In my tests, inputs that parse successfully are:Ones that are supposed to raise errors are:
Until http://bugs.python.org/issue11588 is solved, I'd just use :This way, if anybody supplies , it will have 2 values.Maybe its CLI result is less readable, but code is much smaller. You can fix that with good docs/help.
For arguments I've come up with a quick-n-dirty solution like this. Assumptions:  (1) '--help' should display help and not complain about required argument and (2) we're parsing This can easily be modified to match a specific setting.For required positionals (which will become unrequired if e.g. '--help' is given on the command line) I've come up with the following: [positionals do not allow for a  keyword arg!]basically this turns the number of required occurrences of 'pattern' on the command line from one-or-more into zero-or-more in case '--help' is specified.


Answer URL
https://docs.python.org/3/library/argparse.html?highlight=argumentparser#nargs
