Natural Text
So I'm working with an an API that returns a JSON after I send a query to it. I wrote a wrapper class around that JSON response so I could handle any change in the JSON in one place. It also helps that I can access the values easily now.Here is the wrapper I wrote:An example of a very frequent key that can be found in the JSON is the  key (as it can be seen above). Since it doesn't always exist calling the  method will raise an exception. I'm looking for a solution to handle fields like that that'll be as elegant as possible. At the moment I've just wrapped the the return statement in the  method with a try,except block and returns  if an exception is raised (the JSON didn't have a  key). I've also considered using a decorator that adds the try,except block however it didn't seem to work when I added the decorator above the @property decorator: Are there more elegant solutions? If not, can the decorator one work (and how do I fix it if it does)?
Add your decorator below the  decorator:Now your decorator is applied first, before turning the return value of your decorator into the property getter.You want to avoid using a except handler however; try to only catch a relevant exception, such as  and .You can make the exceptions configurable in the decorator:then use as:for example.


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.suppress
