Natural Text
I'm getting really, really confused about the precision of the results of the functions above.To me the documentation isn't clear at all, for example here are two sentences:from  module documentationThe precision of the various real-time functions may be less than suggested by the units in which their value or argument is expressed. E.g. on most Unix systems, the clock “ticks” only 50 or 100 times a second.from  module documentationDefine a default timer, in a platform-specific manner. On Windows, time.clock() has microsecond granularity, but time.time()‘s granularity is 1/60th of a second. On Unix, time.clock() has 1/100th of a second granularity, and time.time() is much more precise. On either platform, default_timer() measures wall clock time, not the CPU time. This means that other processes running on the same computer may interfere with the timing.Now because real-time, in Unix, it is returned by  and it has a resolution far better than 1/100 how can it just "ticks" 50 or 100 times a second?Always about resolution, I can't understand what the exact resolution I get calling each function, so I tried the followings and I put my guesses in the comments:P.S. This was tried on Python3.4.0, in Python2 for  and  I always get 6 numbers after the dot, so 1us precision?
Precision relates to how often the value changes.If you could call any of these functions infinitely fast, each of these functions would return a new value at different rates.Because each returns a floating point value, which doesn't have absolute precision, you cannot tell anything from their return values as to what precision they have. You'll need to measure how the values change over time to see what their precision is.To show the differences, run:On my Mac this prints:So  has the greatest precision on my architecture, because it changes more often per second, making the delta between values smaller.You can use the  function to query what precision each method offers:


Answer URL
https://docs.python.org/3/library/time.html#time.get_clock_info
