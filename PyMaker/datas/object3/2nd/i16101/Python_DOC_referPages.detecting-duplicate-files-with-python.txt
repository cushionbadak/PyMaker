Natural Text
I'm trying to write a script in Python for sorting through files (photos, videos), checking metadata of each, finding and moving all duplicates to a separate directory. Got stuck with the metadata checking part. Tried os.stat - doesn't return True for duplicate files. Ideally, I should be able to do something like :  Pointers anyone?
There's a few things you can do. You can compare the contents or hash of each file or you can check a few select properties from the os.stat result, ex
A basic loop using a  to keep track of already encountered files:Please note as with any hash function there is a slight chance of collision. That is two different files having the same digest. Depending your needs, this is acceptable of not.According to Thomas Pornin in an other answer : "For instance, with SHA-256 (n=256) and one billion messages (p=109) then the probability [of collision] is about 4.3*10-60."Given your need, if you have to check for additional properties in order to identify "true" duplicates, change the line to whatever suits you. For example, if you need to check for "same content" and "same owner" (as returned by ), write:
If two files have the same  they are exact duplicates. In your example you're using  file in that case you want to call the method  with its second argument equals to . For that see the documentation for open
os.stat offers information about some file's metadata and features, including the creation time. That is not a good approach in order to find out if two files are the same. For instance: Two files can be the same and have different time creation. Hence, comparing stats will fail here. Sylvain Leroux approach is the best one when combining performance and accuracy, since it is very rare two different files has the same hash.So, unless you have an incredibly large amount of data and a repeated file will  cause a system fatality, this is the way to go.If that your case (it not seems to be), well ...  the only way you can be 100% sure two file are the same is iterating and perform a comparison byte per byte.


Answer URL
https://docs.python.org/3/library/hashlib.html
