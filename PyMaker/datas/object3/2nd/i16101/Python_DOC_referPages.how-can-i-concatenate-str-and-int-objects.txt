Natural Text
If I try to do the following:I get the following error in Python 3.x:... and a similar error in Python 2.x:How can I get around this problem?
The problem here is that the  operator has (at least) two different meanings in Python: for numeric types, it means "add the numbers together":... and for sequence types, it means "concatenate the sequences":As a rule, Python doesn't implicitly convert objects from one type to another1 in order to make operations "make sense", because that would be confusing: for instance, you might think that  should mean , but someone else might think it should mean  or even .Similarly, Python won't let you concatenate two different types of sequence:Because of this, you need to do the conversion explicitly, whether what you want is concatenation or addition:However, there is a better way. Depending on which version of Python you use, there are three different kinds of string formatting available2, which not only allow you to avoid multiple  operations:... but also allow you to control how values are displayed:Whether you use % interpolation, , or f-strings is up to you: % interpolation has been around the longest (and is familiar to people with a background in C),  is often more powerful, and f-strings are more powerful still (but available only in Python 3.6 and later).Another alternative is to use the fact that if you give  multiple positional arguments, it will join their string representations together using the  keyword argument (which defaults to ):... but that's usually not as flexible as using Python's built-in string formatting abilities.1 Although it makes an exception for numeric types, where most people would agree on the 'right' thing to do:2 Actually four ... but template strings are rarely used and somewhat awkward.
TL;DReither:  (the oldschool way)or:  (the new pythonicand recommended way)A bit more verbal explanation:Although there is anything not covered from the excellent @Zero Piraeus answer above, I will try to "minify" it a bit: You cannot concatenate a string and a number (of any kind) in python because those objects have different definitions of the plus(+) operator which are not compatible with each other (In the str case + is used for concatenation, in the number case it is used to add two numbers together).So in order to solve this "misunderstanding" between objects:The old school way is to cast the number to string with the method and then concatenate the result with anotherstring.The more pythonic and recommended way is to use the format method which is very versatile (you don't have to take my word on it, read the documentation and this article)Have fun and do read the @Zero Piraeus answer it surely worth your time!
Python 2.x [1] [2]Python 3.6+ [1] [2] [3]Referenceprintf-style String FormattingBuilt-in types -> str.formatFormatted string literals


Answer URL
https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting
https://docs.python.org/3/library/stdtypes.html#str.format
https://docs.python.org/3/reference/lexical_analysis.html#f-strings
https://docs.python.org/3/library/string.html#template-strings
https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting
https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting
https://docs.python.org/3/reference/lexical_analysis.html#f-strings
https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting
https://docs.python.org/3/reference/lexical_analysis.html#f-strings
