Natural Text
Let If I then execute , it will give me . But if I execute :Then execute , it returns . What's happening here? I didn't assign anything to x.  Did I?   I am really confused.**EDIT:**Sorry if I didn't say this before:  is not defined before.AnswerThank you everyone. I understand it now. the elements of  is assigned to  as  is iterated over. And  equals  in the last line of code because the last element has been assigned to .
Seems like you stumbled about  being somewhat overloaded in Python.with , you are asking "Is  in ?"with , you tell Python "For each element in , call it  and do ..."The latter will assign each of the values in  to , one after the other, and execute the body of the loop with that value, so in the first iteration  is assigned , in the second , and in the last . Also,  keeps this value after the loop!Thus, before the loop, assuming that the variable  is defined but has some other value,  will return , and after the loop, it returns , because  is still assigned the last value from .
 inherently assigns values to , because  is the loop variable in a  loop.Each iteration of the loop assigns a value into ; Python doesn't create a new variable scope for loops.is the equivalent of...
The syntax is similar, but they mean two different things. is a conditional expression; it searches to see if the valueof  appears in the list . If it's there, the expressionevaluates to , otherwise, . You can also use . introduces a loop where  iterates over the elements of. The loop body will be called once for each element, and withinthe body,  will be set to each element successively.
That's how looping works in Python. '' will assign to  as you iterate through the sequence.If you were to simply print  for example:You would see the following:Perhaps what you were looking for was just the index of the value? If so, there are a couple of things you could do.To iterate explicitly with the index, use  as such:Where the first value ( in this case) will always be the index of the current iteration.You can also iterate over the length of the object using  which is sometimes useful if you're potentially modifying the list as you iterate. Here you're actually creating a separate list using , with length equal to the  of the list. This will not assign from the list you're targeting -- rather it will assign from the list created by  -- so you'd have to access it using your  as the index of the list.As for your second line and point of confusion - 'x in exp' - you will indeed see that  remains assigned after the fact, and so using  will return  because the last assigned value to  is, in fact, in .
When you run your first loop, a variable  is assigned to each value of the list as you iterate over it.Let's say you start with . is not in , therefore .However, when you run the loop, you now have a new . When the loop is complete,  is initialized to the final element in the list, meaning . is in , therefore . 


Answer URL
https://docs.python.org/3/reference/expressions.html#not-in
https://docs.python.org/3/reference/compound_stmts.html#the-for-statement
https://docs.python.org/3/reference/expressions.html#conditional-expressions
