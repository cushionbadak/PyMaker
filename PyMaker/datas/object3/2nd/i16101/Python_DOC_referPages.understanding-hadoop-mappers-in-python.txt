Natural Text
What is the use of the  keyword in Python? What does it do?For example, I'm trying to understand this code1:And this is the caller:What happens when the method  is called?Is a list returned? A single element? Is it called again? When will subsequent calls stop?1. The code comes from Jochen Schulz (jrschulz), who made a great Python library for metric spaces. This is the link to the complete source: Module mspace.
To understand what  does, you must understand what generators are. And before generators come iterables.IterablesWhen you create a list, you can read its items one by one. Reading its items one by one is called iteration: is an iterable. When you use a list comprehension, you create a list, and so an iterable:Everything you can use "" on is an iterable; , , files...These iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values.GeneratorsGenerators are iterators, a kind of iterable you can only iterate over once. Generators do not store all the values in memory, they generate the values on the fly:It is just the same except you used  instead of . BUT, you cannot perform  a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one.Yield is a keyword that is used like , except the function will return a generator.Here it's a useless example, but it's handy when you know your function will return a huge set of values that you will only need to read once.To master , you must understand that when you call the function, the code you have written in the function body does not run. The function only returns the generator object, this is a bit tricky :-)Then, your code will continue from where it left off each time  uses the generator.Now the hard part:The first time the  calls the generator object created from your function, it will run the code in your function from the beginning until it hits , then it'll return the first value of the loop. Then, each other call will run the loop you have written in the function one more time, and return the next value, until there is no value to return.The generator is considered empty once the function runs, but does not hit  anymore. It can be because the loop had come to an end, or because you do not satisfy an  anymore.Your code explainedGenerator:Caller:This code contains several smart parts:The loop iterates on a list, but the list expands while the loop is being iterated :-) It's a concise way to go through all these nested data even if it's a bit dangerous since you can end up with an infinite loop. In this case,  exhausts all the values of the generator, but  keeps creating new generator objects which will produce different values from the previous ones since it's not applied on the same node.The  method is a list object method that expects an iterable and adds its values to the list.Usually we pass a list to it:But in your code it gets a generator, which is good because:You don't need to read the values twice.You may have a lot of children and you don't want them all stored in memory.And it works because Python does not care if the argument of a method is a list or not. Python expects iterables so it will work with strings, lists, tuples and generators! This is called duck typing and is one of the reason why Python is so cool. But this is another story, for another question...You can stop here, or read a little bit to see an advanced use of a generator:Controlling a generator exhaustionNote: For Python 3, use or It can be useful for various things like controlling access to a resource.Itertools, your best friendThe itertools module contains special functions to manipulate iterables. Ever wish to duplicate a generator?Chain two generators? Group values in a nested list with a one-liner?  without creating another list?Then just .An example? Let's see the possible orders of arrival for a four-horse race:Understanding the inner mechanisms of iterationIteration is a process implying iterables (implementing the  method) and iterators (implementing the  method).Iterables are any objects you can get an iterator from. Iterators are objects that let you iterate on iterables.There is more about it in this article about how  loops work.
Shortcut to Grokking When you see a function with  statements, apply this easy trick to understand what will happen:Insert a line  at the start of the function.Replace each  with .Insert a line  at the bottom of the function.Yay - no more  statements! Read and figure out code.Compare function to original definition.This trick may give you an idea of the logic behind the function, but what actually happens with  is significantly different that what happens in the list based approach. In many cases the yield approach will be a lot more memory efficient and faster too. In other cases this trick will get you stuck in an infinite loop, even though the original function works just fine. Read on to learn more...Don't confuse your Iterables, Iterators and GeneratorsFirst, the iterator protocol - when you writePython performs the following two steps:Gets an iterator for :Call  -> this returns an object with a  method (or  in Python 3).[This is the step most people forget to tell you about]Uses the iterator to loop over items:Keep calling the  method on the iterator returned from step 1. The return value from  is assigned to  and the loop body is executed. If an exception  is raised from within , it means there are no more values in the iterator and the loop is exited.The truth is Python performs the above two steps anytime it wants to loop over the contents of an object - so it could be a for loop, but it could also be code like  (where  is a Python list).Here  is an iterable because it implements the iterator protocol. In a user defined class, you can implement the  method to make instances of your class iterable. This method should return an iterator. An iterator is an object with a  method. It is possible to implement both  and  on the same class, and have  return . This will work for simple cases, but not when you want two iterators looping over the same object at the same time.So that's the iterator protocol, many objects implement this protocol:Built-in lists, dictionaries, tuples, sets, files.User defined classes that implement .Generators.Note that a  loop doesn't know what kind of object it's dealing with - it just follows the iterator protocol, and is happy to get item after item as it calls . Built-in lists return their items one by one, dictionaries return the keys one by one, files return the lines one by one, etc. And generators return... well that's where  comes in:Instead of  statements, if you had three  statements in  only the first would get executed, and the function would exit. But  is no ordinary function. When  is called, it does not return any of the values in the yield statements! It returns a generator object. Also, the function does not really exit - it goes into a suspended state. When the  loop tries to loop over the generator object, the function resumes from its suspended state at the very next line after the  it previously returned from, executes the next line of code, in this case a  statement, and returns that as the next item. This happens until the function exits, at which point the generator raises , and the loop exits. So the generator object is sort of like an adapter - at one end it exhibits the iterator protocol, by exposing  and  methods to keep the  loop happy. At the other end however, it runs the function just enough to get the next value out of it, and puts it back in suspended mode.Why Use Generators?Usually you can write code that doesn't use generators but implements the same logic. One option is to use the temporary list 'trick' I mentioned before. That will not work in all cases, for e.g. if you have infinite loops, or it may make inefficient use of memory when you have a really long list. The other approach is to implement a new iterable class  that keeps state in instance members and performs the next logical step in it's  (or  in Python 3) method. Depending on the logic, the code inside the  method may end up looking very complex and be prone to bugs. Here generators provide a clean and easy solution.
Think of it this way:An iterator is just a fancy sounding term for an object that has a next() method.  So a yield-ed function ends up being something like this:Original version:This is basically what the Python interpreter does with the above code:For more insight as to what's happening behind the scenes, the  loop can be rewritten to this:Does that make more sense or just confuse you more?  :)I should note that this is an oversimplification for illustrative purposes. :)
The  keyword is reduced to two simple facts:If the compiler detects the  keyword anywhere inside a function, that function no longer returns via the  statement. Instead, it immediately returns a lazy "pending list" object called a generatorA generator is iterable. What is an iterable? It's anything like a  or  or  or dict-view, with a built-in protocol for visiting each element in a certain order.In a nutshell: a generator is a lazy, incrementally-pending list, and  statements allow you to use function notation to program the list values the generator should incrementally spit out.ExampleLet's define a function  that's just like Python's . Calling  RETURNS A GENERATOR:To force the generator to immediately return its pending values, you can pass it into  (just like you could any iterable):Comparing example to "just returning a list"The above example can be thought of as merely creating a list which you append to and return:There is one major difference, though; see the last section.How you might use generatorsAn iterable is the last part of a list comprehension, and all generators are iterable, so they're often used like so:To get a better feel for generators, you can play around with the  module (be sure to use  rather than  when warranted). For example, you might even use generators to implement infinitely-long lazy lists like . You could implement your own , or alternatively do so with the  keyword in a while-loop.Please note: generators can actually be used for many more things, such as implementing coroutines or non-deterministic programming or other elegant things. However, the "lazy lists" viewpoint I present here is the most common use you will find.Behind the scenesThis is how the "Python iteration protocol" works. That is, what is going on when you do . This is what I describe earlier as a "lazy, incremental list".The built-in function  just calls the objects  function, which is a part of the "iteration protocol" and is found on all iterators. You can manually use the  function (and other parts of the iteration protocol) to implement fancy things, usually at the expense of readability, so try to avoid doing that...MinutiaeNormally, most people would not care about the following distinctions and probably want to stop reading here.In Python-speak, an iterable is any object which "understands the concept of a for-loop" like a list , and an iterator is a specific instance of the requested for-loop like . A generator is exactly the same as any iterator, except for the way it was written (with function syntax).When you request an iterator from a list, it creates a new iterator. However, when you request an iterator from an iterator (which you would rarely do), it just gives you a copy of itself.Thus, in the unlikely event that you are failing to do something like this...... then remember that a generator is an iterator; that is, it is one-time-use. If you want to reuse it, you should call  again. If you need to use the result twice, convert the result to a list and store it in a variable . Those who absolutely need to clone a generator (for example, who are doing terrifyingly hackish metaprogramming) can use  if absolutely necessary, since the copyable iterator Python PEP standards proposal has been deferred.
What does the  keyword do in Python?Answer Outline/SummaryA function with , when called, returns a Generator.Generators are iterators because they implement the iterator protocol, so you can iterate over them.A generator can also be sent information, making it conceptually a coroutine.In Python 3, you can delegate from one generator to another in both directions with .(Appendix critiques a couple of answers, including the top one, and discusses the use of  in a generator.)Generators: is only legal inside of a function definition, and the inclusion of  in a function definition makes it return a generator.The idea for generators comes from other languages (see footnote 1) with varying implementations. In Python's Generators, the execution of the code is frozen at the point of the yield. When the generator is called (methods are discussed below) execution resumes and then freezes at the next yield. provides an easy way of implementing the iterator protocol, defined by the following two methods:  and  (Python 2) or  (Python 3).  Both of those methodsmake an object an iterator that you could type-check with the  Abstract Base Class from the  module.The generator type is a sub-type of iterator:And if necessary, we can type-check like this:A feature of an  is that once exhausted, you can't reuse or reset it:You'll have to make another if you want to use its functionality again (see footnote 2):One can yield data programmatically, for example:The above simple generator is also equivalent to the below - as of Python 3.3 (and not available in Python 2), you can use :However,  also allows for delegation to subgenerators, which will be explained in the following section on cooperative delegation with sub-coroutines.Coroutines: forms an expression that allows data to be sent into the generator (see footnote 3)Here is an example, take note of the  variable, which will point to the data that is sent to the generator:First, we must queue up the generator with the builtin function, . It will call the appropriate  or  method, depending on the version ofPython you are using:And now we can send data into the generator. (Sending  is the same as calling .) :Cooperative Delegation to Sub-Coroutine with Now, recall that  is available in Python 3. This allows us to delegatecoroutines to a subcoroutine:And now we can delegate functionality to a sub-generator and it can be usedby a generator just as above:You can read more about the precise semantics of  in PEP 380.Other Methods: close and throwThe  method raises  at the point the function execution was frozen. This will also be called by  so you can put any cleanup code where you handle the :You can also throw an exception which can be handled in the generatoror propagated back to the user:ConclusionI believe I have covered all aspects of the following question:What does the  keyword do in Python?It turns out that  does a lot. I'm sure I could add even more thorough examples to this. If you want more or have some constructive criticism, let me know by commentingbelow.Appendix:Critique of the Top/Accepted Answer**It is confused on what makes an iterable, just using a list as an example. See my references above, but in summary: an iterable has an  method returning an iterator. An iterator provides a  (Python 2 or  (Python 3) method, which is implicitly called by  loops until it raises , and once it does, it will continue to do so.It then uses a generator expression to describe what a generator is. Since a generator is simply a convenient way to create an iterator, it only confuses the matter, and we still have not yet gotten to the  part.In Controlling a generator exhaustion he calls the  method, when instead he should use the builtin function, . It would be an appropriate layer of indirection, because his code does not work in Python 3.Itertools? This was not relevant to what  does at all.No discussion of the methods that  provides along with the new functionality  in Python 3. The top/accepted answer is a very incomplete answer.Critique of answer suggesting  in a generator expression or comprehension.The grammar currently allows any expression in a list comprehension. Since yield is an expression, it has been touted by some as interesting to use it in comprehensions or generator expression - in spite of citing no particularly good use-case.The CPython core developers are discussing deprecating its allowance.Here's a relevant post from the mailing list:On 30 January 2017 at 19:05, Brett Cannon  wrote:On Sun, 29 Jan 2017 at 16:39 Craig Rodrigues  wrote:I'm OK with either approach.  Leaving things the way they are in Python 3      is no good, IMHO.My vote is it be a SyntaxError since you're not getting what you expect from    the syntax.I'd agree that's a sensible place for us to end up, as any code  relying on the current behaviour is really too clever to be  maintainable.In terms of getting there, we'll likely want:SyntaxWarning or DeprecationWarning in 3.7Py3k warning in 2.7.xSyntaxError in 3.8Cheers, Nick.--  Nick Coghlan   |   ncoghlan at gmail.com   |   Brisbane, AustraliaFurther, there is an outstanding issue (10544) which seems to be pointing in the direction of this never being a good idea (PyPy, a Python implementation written in Python, is already raising syntax warnings.)Bottom line, until the developers of CPython tell us otherwise: Don't put  in a generator expression or comprehension.The  statement in a generatorIn Python 2:In a generator function, the  statement is not allowed to include an . In that context, a bare  indicates that the generator is done and will cause  to be raised.An  is basically any number of expressions separated by commas - essentially, in Python 2, you can stop the generator with , but you can't return a value.In Python 3: In a generator function, the  statement indicates that the generator is done and will cause  to be raised. The returned value (if any) is used as an argument to construct  and becomes the  attribute.FootnotesThe languages CLU, Sather, and Icon were referenced in the proposalto introduce the concept of generators to Python. The general idea isthat a function can maintain internal state and yield intermediate data points on demand by the user. This promised to be superior in performance to other approaches, including Python threading, which isn't even available on some systems. This means, for example, that  objects ( in Python 3) aren't s, even though they are iterable, because they can be reused. Like lists, their  methods return iterator objects. was originally introduced as a statement, meaning that it could only appear at the beginning of a line in a code block. Now  creates a yield expression. https://docs.python.org/2/reference/simple_stmts.html#grammar-token-yield_stmt This change was proposed to allow a user to send data into the generator just asone might receive it. To send data, one must be able to assign it to something, andfor that, a statement just won't work.
 is just like  - it returns whatever you tell it to (as a generator). The difference is that the next time you call the generator, execution starts from the last call to the  statement. Unlike return, the stack frame is not cleaned up when a yield occurs, however control is transferred back to the caller, so its state will resume the next time the function is called.In the case of your code, the function  is acting like an iterator so that when you extend your list, it adds one element at a time to the new list. calls an iterator until it's exhausted. In the case of the code sample you posted, it would be much clearer to just return a tuple and append that to the list.
There's one extra thing to mention: a function that yields doesn't actually have to terminate. I've written code like this:Then I can use it in other code like this:It really helps simplify some problems, and makes some things easier to work with. 
For those who prefer a minimal working example, meditate on this interactive Python session:
TL;DRInstead of this:do this:Whenever you find yourself building a list from scratch,  each piece instead. This was my first "aha" moment with yield. is a sugary way to say build a series of stuffSame behavior:Different behavior:Yield is single-pass: you can only iterate through once. When a function has a yield in it we call it a generator function. And an iterator is what it returns. Those terms are revealing. We lose the convenience of a container, but gain the power of a series that's computed as needed, and arbitrarily long.Yield is lazy, it puts off computation. A function with a yield in it doesn't actually execute at all when you call it. It returns an iterator object that remembers where it left off. Each time you call  on the iterator (this happens in a for-loop) execution inches forward to the next yield.  raises StopIteration and ends the series (this is the natural end of a for-loop).Yield is versatile. Data doesn't have to be stored all together, it can be made available one at a time. It can be infinite.If you need multiple passes and the series isn't too long, just call  on it:Brilliant choice of the word  because both meanings apply:yield — produce or provide (as in agriculture)...provide the next data in the series.yield — give way or relinquish (as in political power)...relinquish CPU execution until the iterator advances.
Yield gives you a generator. As you can see, in the first case  holds the entire list in memory at once. It's not a big deal for a list with 5 elements, but what if you want a list of 5 million? Not only is this a huge memory eater, it also costs a lot of time to build at the time that the function is called.In the second case,  just gives you a generator. A generator is an iterable--which means you can use it in a  loop, etc, but each value can only be accessed once. All the values are also not stored in memory at the same time; the generator object "remembers" where it was in the looping the last time you called it--this way, if you're using an iterable to (say) count to 50 billion, you don't have to count to 50 billion all at once and store the 50 billion numbers to count through.Again, this is a pretty contrived example, you probably would use itertools if you really wanted to count to 50 billion. :)This is the most simple use case of generators. As you said, it can be used to write efficient permutations, using yield to push things up through the call stack instead of using some sort of stack variable. Generators can also be used for specialized tree traversal, and all manner of other things.
It's returning a generator. I'm not particularly familiar with Python, but I believe it's the same kind of thing as C#'s iterator blocks if you're familiar with those.The key idea is that the compiler/interpreter/whatever does some trickery so that as far as the caller is concerned, they can keep calling next() and it will keep returning values - as if the generator method was paused. Now obviously you can't really "pause" a method, so the compiler builds a state machine for you to remember where you currently are and what the local variables etc look like. This is much easier than writing an iterator yourself.
There is one type of answer that I don't feel has been given yet, among the many great answers that describe how to use generators. Here is the programming language theory answer:The  statement in Python returns a generator. A generator in Python is a function that returns continuations (and specifically a type of coroutine, but continuations represent the more general mechanism to understand what is going on).Continuations in programming languages theory are a much more fundamental kind of computation, but they are not often used, because they are extremely hard to reason about and also very difficult to implement. But the idea of what a continuation is, is straightforward: it is the state of a computation that has not yet finished. In this state, the current values of variables, the operations that have yet to be performed, and so on, are saved. Then at some point later in the program the continuation can be invoked, such that the program's variables are reset to that state and the operations that were saved are carried out.Continuations, in this more general form, can be implemented in two ways. In the  way, the program's stack is literally saved and then when the continuation is invoked, the stack is restored.In continuation passing style (CPS), continuations are just normal functions (only in languages where functions are first class) which the programmer explicitly manages and passes around to subroutines. In this style, program state is represented by closures (and the variables that happen to be encoded in them) rather than variables that reside somewhere on the stack. Functions that manage control flow accept continuation as arguments (in some variations of CPS, functions may accept multiple continuations) and manipulate control flow by invoking them by simply calling them and returning afterwards. A very simple example of continuation passing style is as follows:In this (very simplistic) example, the programmer saves the operation of actually writing the file into a continuation (which can potentially be a very complex operation with many details to write out), and then passes that continuation (i.e, as a first-class closure) to another operator which does some more processing, and then calls it if necessary. (I use this design pattern a lot in actual GUI programming, either because it saves me lines of code or, more importantly, to manage control flow after GUI events trigger.)The rest of this post will, without loss of generality, conceptualize continuations as CPS, because it is a hell of a lot easier to understand and read.Now let's talk about generators in Python. Generators are a specific subtype of continuation. Whereas continuations are able in general to save the state of a computation (i.e., the program's call stack), generators are only able to save the state of iteration over an iterator. Although, this definition is slightly misleading for certain use cases of generators. For instance:This is clearly a reasonable iterable whose behavior is well defined -- each time the generator iterates over it, it returns 4 (and does so forever). But it isn't probably the prototypical type of iterable that comes to mind when thinking of iterators (i.e., ). This example illustrates the power of generators: if anything is an iterator, a generator can save the state of its iteration.To reiterate: Continuations can save the state of a program's stack and generators can save the state of iteration. This means that continuations are more a lot powerful than generators, but also that generators are a lot, lot easier. They are easier for the language designer to implement, and they are easier for the programmer to use (if you have some time to burn, try to read and understand this page about continuations and call/cc).But you could easily implement (and conceptualize) generators as a simple, specific case of continuation passing style:Whenever  is called, it tells the function to return a continuation.  When the function is called again, it starts from wherever it left off. So, in pseudo-pseudocode (i.e., not pseudocode, but not code) the generator's  method is basically as follows:where the  keyword is actually syntactic sugar for the real generator function, basically something like:Remember that this is just pseudocode and the actual implementation of generators in Python is more complex. But as an exercise to understand what is going on, try to use continuation passing style to implement generator objects without use of the  keyword.
Here is an example in plain language. I will provide a correspondence between high-level human concepts to low-level Python concepts.I want to operate on a sequence of numbers, but I don't want to bother my self with the creation of that sequence, I want only to focus on the operation I want to do. So, I do the following:I call you and tell you that I want a sequence of numbers which is produced in a specific way, and I let you know what the algorithm is. This step corresponds to ining the generator function, i.e. the function containing a .Sometime later, I tell you, "OK, get ready to tell me the sequence of numbers". This step corresponds to calling the generator function which returns a generator object. Note that you don't tell me any numbers yet; you just grab your paper and pencil.I ask you, "tell me the next number", and you tell me the first number; after that, you wait for me to ask you for the next number. It's your job to remember where you were, what numbers you have already said, and what is the next number. I don't care about the details. This step corresponds to calling  on the generator object.… repeat previous step, until…eventually, you might come to an end. You don't tell me a number; you just shout, "hold your horses! I'm done! No more numbers!" This step corresponds to the generator object ending its job, and raising a  exception The generator function does not need to raise the exception. It's raised automatically when the function ends or issues a .This is what a generator does (a function that contains a ); it starts executing, pauses whenever it does a , and when asked for a  value it continues from the point it was last. It fits perfectly by design with the iterator protocol of Python, which describes how to sequentially request values.The most famous user of the iterator protocol is the  command in Python. So, whenever you do a:it doesn't matter if  is a list, a string, a dictionary or a generator object like described above; the result is the same: you read items off a sequence one by one.Note that ining a function which contains a  keyword is not the only way to create a generator; it's just the easiest way to create one.For more accurate information, read about iterator types, the yield statement and generators in the Python documentation.
While a lot of answers show why you'd use a  to create a generator, there are more uses for .  It's quite easy to make a coroutine, which enables the passing of information between two blocks of code.  I won't repeat any of the fine examples that have already been given about using  to create a generator.To help understand what a  does in the following code, you can use your finger to trace the cycle through any code that has a .  Every time your finger hits the , you have to wait for a  or a  to be entered.  When a  is called, you trace through the code until you hit the … the code on the right of the  is evaluated and returned to the caller… then you wait.  When  is called again, you perform another loop through the code.  However, you'll note that in a coroutine,  can also be used with a … which will send a value from the caller into the yielding function. If a  is given, then  receives the value sent, and spits it out the left hand side… then the trace through the code progresses until you hit the  again (returning the value at the end, as if  was called).For example:
There is another  use and meaning (since Python 3.3):From PEP 380 -- Syntax for Delegating to a Subgenerator:A syntax is proposed for a generator to delegate part of its operations to another generator. This allows a section of code containing 'yield' to be factored out and placed in another generator. Additionally, the subgenerator is allowed to return with a value, and the value is made available to the delegating generator.The new syntax also opens up some opportunities for optimisation when one generator re-yields values produced by another.Moreover this will introduce (since Python 3.5):to avoid coroutines being confused with a regular generator (today  is used in both).
All great answers, however a bit difficult for newbies.I assume you have learned the  statement.As an analogy,  and  are twins.  means 'return and stop' whereas 'yield` means 'return, but continue'Try to get a num_list with .Run it:See, you get only a single number rather than a list of them.  never allows you prevail happily, just implements once and quit.There comes Replace  with :Now, you win to get all the numbers.Comparing to  which runs once and stops,  runs times you planed.You can interpret  as , and  as . This is called .One more step we can rewrite  statement with It's the core about .The difference between a list  outputs and the object  output is:You will always get [0, 1, 2] from a list object but only could retrieve them from 'the object  output' once. So, it has a new name  object as displayed in .In conclusion, as a metaphor to grok it: and  are twins and  are twins
Here are some Python examples of how to actually implement generators as if Python did not provide syntactic sugar for them:As a Python generator:Using lexical closures instead of generatorsUsing object closures instead of generators (because ClosuresAndObjectsAreEquivalent)
I was going to post "read page 19 of Beazley's 'Python: Essential Reference' for a quick description of generators", but so many others have posted good descriptions already.Also, note that  can be used in coroutines as the dual of their use in generator functions.  Although it isn't the same use as your code snippet,  can be used as an expression in a function.  When a caller sends a value to the method using the  method, then the coroutine will execute until the next  statement is encountered.Generators and coroutines are a cool way to set up data-flow type applications.  I thought it would be worthwhile knowing about the other use of the  statement in functions.
From a programming viewpoint, the iterators are implemented as thunks.To implement iterators, generators, and thread pools for concurrent execution, etc. as thunks (also called anonymous functions), one uses messages sent to a closure object, which has a dispatcher, and the dispatcher answers to "messages".http://en.wikipedia.org/wiki/Message_passing"next" is a message sent to a closure, created by the "iter" call.There are lots of ways to implement this computation. I used mutation, but it is easy to do it without mutation, by returning the current value and the next yielder.Here is a demonstration which uses the structure of R6RS, but the semantics is absolutely identical to Python's. It's the same model of computation, and only a change in syntax is required to rewrite it in Python.
Here is a simple example:Output:I am not a Python developer, but it looks to me  holds the position of program flow and the next loop start from "yield" position. It seems like it is waiting at that position, and just before that, returning a value outside, and next time continues to work.It seems to be an interesting and nice ability :D
Here is a mental image of what  does.I like to think of a thread as having a stack (even when it's not implemented that way).When a normal function is called, it puts its local variables on the stack, does some computation, then clears the stack and returns. The values of its local variables are never seen again.With a  function, when its code begins to run (i.e. after the function is called, returning a generator object, whose  method is then invoked), it similarly puts its local variables onto the stack and computes for a while. But then, when it hits the  statement, before clearing its part of the stack and returning, it takes a snapshot of its local variables and stores them in the generator object. It also writes down the place where it's currently up to in its code (i.e. the particular  statement).So it's a kind of a frozen function that the generator is hanging onto.When  is called subsequently, it retrieves the function's belongings onto the stack and re-animates it. The function continues to compute from where it left off, oblivious to the fact that it had just spent an eternity in cold storage.Compare the following examples:When we call the second function, it behaves very differently to the first. The  statement might be unreachable, but if it's present anywhere, it changes the nature of what we're dealing with.Calling  doesn't run its code, but makes a generator out of the code. (Maybe it's a good idea to name such things with the  prefix for readability.)The  and  fields are where the frozen state is stored. Exploring them with , we can confirm that our mental model above is credible.
Like every answer suggests,  is used for creating a sequence generator. It's used for generating some sequence dynamically. For example, while reading a file line by line on a network, you can use the  function as follows:You can use it in your code as follows:Execution Control Transfer gotchaThe execution control will be transferred from getNextLines() to the  loop when yield is executed. Thus, every time getNextLines() is invoked, execution begins from the point where it was paused last time.Thus in short, a function with the following codewill print
Yield is an objectA  in a function will return a single value.If you want a function to return a huge set of values, use .More importantly,  is a barrier.like barrier in the CUDA language, it will not transfer control until it gets  completed.That is, it will run the code in your function from the beginning until it hits . Then, it’ll return the first value of the loop.Then, every other call will run the loop you have written in the function one more time, returning the next value until there isn't any value to return.
(My below answer only speaks from the perspective of using Python generator, not the underlying implementation of generator mechanism, which involves some tricks of stack and heap manipulation.)When  is used instead of a  in a python function, that function is turned into something special called . That function will return an object of  type. The  keyword is a flag to notify the python compiler to treat such function specially. Normal functions will terminate once some value is returned from it. But with the help of the compiler, the generator function can be thought of as resumable. That is, the execution context will be restored and the execution will continue from last run. Until you explicitly call return, which will raise a  exception (which is also part of the iterator protocol), or reach the end of the function. I found a lot of references about  but this one from the  is the most digestable.(Now I want to talk about the rationale behind , and the  based on my own understanding. I hope this can help you grasp the essential motivation of iterator and generator. Such concept shows up in other languages as well such as C#.)As I understand, when we want to process a bunch of data, we usually first store the data somewhere and then process it one by one. But this naive approach is problematic. If the data volume is huge, it's expensive to store them as a whole beforehand. So instead of storing the  itself directly, why not store some kind of  indirectly, i.e. . There are 2 approaches to wrap such metadata.The OO approach, we wrap the metadata . This is the so-called  who implements the iterator protocol (i.e. the , and  methods). This is also the commonly seen iterator design pattern.The functional approach, we wrap the metadata . This isthe so-called . But under the hood, the returned  still  iterator because it also implements the iterator protocol.Either way, an iterator is created, i.e. some object that can give you the data you want. The OO approach may be a bit complex. Anyway, which one to use is up to you.
In summary, the  statement transforms your function into a factory that produces a special object called a  which wraps around the body of your original function. When the  is iterated, it executes your function  until it reaches the next  then suspends execution and evaluates to the value passed to . It repeats this process on each iteration until the path of execution exits the function. For instance,simply outputsThe power comes from using the generator with a loop that calculates a sequence, the generator executes the loop stopping each time to 'yield' the next result of the calculation, in this way it calculates a list on the fly, the benefit being the memory saved for especially large calculationsSay you wanted to create a your own  function that produces an iterable range of numbers, you could do it like so,and use it like this;But this is inefficient becauseYou create an array that you only use once (this wastes memory)This code actually loops over that array twice! :(Luckily Guido and his team were generous enough to develop generators so we could just do this;Now upon each iteration a function on the generator called  executes the function until it either reaches a 'yield' statement in which it stops and  'yields' the value or reaches the end of the function. In this case on the first call,  executes up to the yield statement and yield 'n', on the next call it will execute the  increment statement, jump back to the 'while', evaluate it, and if true, it will stop and yield 'n' again, it will continue that way until the while condition returns false and the generator jumps to the end of the function.
Many people use  rather than , but in some cases  can be more efficient and easier to work with.Here is an example which  is definitely best for:return (in function)yield (in function)Calling functionsBoth functions do the same thing, but  uses three lines instead of five and has one less variable to worry about.This is the result from the code:As you can see both functions do the same thing. The only difference is  gives a list and  gives a generator.A real life example would be something like reading a file line by line or if you just want to make a generator.
 is like a return element for a function. The difference is, that the  element turns a function into a generator. A generator behaves just like a function until something is 'yielded'. The generator stops until it is next called, and continues from exactly the same point as it started. You can get a sequence of all the 'yielded' values in one, by calling .
The  keyword simply collects returning results. Think of  like 
Here's a simple  based approach, to compute the fibonacci series, explained:When you enter this into your REPL and then try and call it, you'll get a mystifying result:This is because the presence of  signaled to Python that you want to create a generator, that is, an object that generates values on demand.So, how do you generate these values? This can either be done directly by using the built-in function , or, indirectly by feeding it to a construct that consumes values. Using the built-in  function, you directly invoke /, forcing the generator to produce a value:Indirectly, if you provide  to a  loop, a  initializer, a  initializer, or anything else that expects an object that generates/produces values, you'll "consume" the generator until no more values can be produced by it (and it returns):Similarly, with a  initializer: A generator differs from a function in the sense that it is lazy. It accomplishes this by maintaining it's local state and allowing you to resume whenever you need to. When you first invoke  by calling it:Python compiles the function, encounters the  keyword and simply returns a generator object back at you. Not very helpful it seems. When you then request it generates the first value, directly or indirectly, it executes all statements that it finds, until it encounters a , it then yields back the value you supplied to  and pauses. For an example that better demonstrates this, let's use some  calls (replace with  if on Python 2):Now, enter in the REPL:you have a generator object now waiting for a command for it to generate a value. Use  and see what get's printed:The unquoted results are what's printed. The quoted result is what is returned from . Call  again now:The generator remembers it was paused at  and resumes from there. The next message is printed and the search for the  statement to pause at it performed again (due to the  loop).
A simple example of what it's easily explained: The output is: 


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#the-return-statement
https://docs.python.org/3/reference/expressions.html#yieldexpr
