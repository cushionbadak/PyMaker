Natural Text
First of all, I ask this question by pure curiosity to see some great one-liners skills. The  function remains the best function to sum objects in a list.But as said, I ask by pure curiosity: Is there a way to sum objects from a  (obviously, without using ) in one line? Let's say the list would be I have absolutely no idea how this could be achieved, but as Python is really great and flexible, so I have no doubt it is possible.
Just for fun, here's a solution that needs no no built-in functions at all. It's basically a reimplentation of , using a bit of lambda magic.
You can take a functional approach, using  and an addition function (e.g. a  expression or ):(Note that in 3.x you need to  first.)Per the documentation,  willApply  of two arguments cumulatively to the items of , from left to right, so as to reduce the  to a single value.
Python may not be the best language for recursive approaches because (1) it doesn't support tail-recursion (2) function calls are really expensive (3) the recursion limit prevents deep recursions and (4) slicing sequences scales with  (where  is the number of elements in the slice).However you can use them for one-liners! One approach would be just to successivly pop and add the first element until the sequence is exhausted:The first part is triggered as long as  (that is to say  is not empty). This approach shows all the shortcomings of using recusion in Python: It hits the recursion limit for sequences of length ~300, it scales with  and it's really slow compared to the built-in  and  approach.One can mitigate one of the disadvantages by using a divide-and-conquer recursion approach:This time it recurses on both halfs of the list, thereby reducing the recusion depth from  to , so it can handle even longer sequences. However it's not faster than the one above.And of course there's always the cheat option:In case you really want it really fast :-)


Answer URL
https://docs.python.org/3/whatsnew/3.0.html#builtins
