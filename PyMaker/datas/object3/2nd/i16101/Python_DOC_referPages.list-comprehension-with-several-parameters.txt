Natural Text
I have some  loop, like here:I want use here the list comprehension, how I can put the second statement in the expression? I trybut got the error message . Probably  is unknown....Also important  is not just a list, is a column of DF pandas, consequently Sequency... Followly I get Error message, when I use . But ok, I probably will find some solution specific for DF according to zip (very nice idea). Thanks everybody.
Use :NOTE You should use  if  is not a list object.Alternatively you can use .
Are you looking for this?
You can't put a statement in an expression. Ever. That means you can't use a list comprehension if you can't think of a way to write the loop without assignments or other statements.Which is fineâ€”not everything should be a comprehension. There is nothing wrong with  statements.But often, there's a way to rethink the problem so that it doesn't do any assignments, or any mutations at all, and often that design is better than the one you started with.To make this work, you need some way to access both the current value and the previous value each time through the loop.If you've got a , and you can afford to waste enough memory for an extra lists of the same size, this is easy: as falsetru's answer shows, just zip the list with the same list offset by one, and you'll get each value paired with its predecessor. But if your list is too big, or if it may not be a list at all, just some kind of iterable (possibly even an iterator), you need an iterator that remembers the previous value for you. The easiest way to do that is with :And you could wrap that up in a function to make it reusable. In fact, you'll find a very similar function in the recipes section of the  docs (the difference being that it yields pairs in  order instead of , and that it starts with  rather than ).
How about this for example


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/itertools.html#itertools.chain
https://docs.python.org/3/library/itertools.html#itertools.tee
https://docs.python.org/3/library/itertools.html#itertools-recipes
