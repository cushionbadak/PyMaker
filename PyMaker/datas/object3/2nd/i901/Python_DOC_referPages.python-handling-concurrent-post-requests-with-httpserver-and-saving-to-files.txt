Natural Text
I have the code below that I would like to use to receive POST requests with data that I will then use to print labels on a label printer. In order to print the labels I will need to write a file with print commands and then do a  command via the command line to copy the file to the label printer.The problem I have is that multiple people could be printing labels at the same time. So my question is do I have to change the code below to use  in order to handle concurrent POST requests or can I leave the code as is and there will only be a slight delay for secondary request in a concurrent scenario (that is any further requests will be queued and not lost)?If I have to go the threaded way how does that impact the writing of the file and subsequent command line call to  if there are now multiple threads trying to write to the same file?Note that there are multiple label printers that are being accessed through print queues (CUPS).
Why not trying to use unique file name?In this way you are sure that there will be no names clash.Have a look on https://docs.python.org/2/library/tempfile.html , consider NamedTemporaryFile function. You should use delete=False, otherway the file is deleted imediatelly after close() .
according to your question what I understand is that you have only one label printer and you have multiple producers who try to print labels on it. So even if you switch to a multithreading option you will have to synchronize threads in order to avoid deadlocks and infinite waiting,So my best take is to go with a builtin python data structure called queueaccording to the docThe queue module implements multi-producer, multi-consumer queues. It is especially useful in threaded programming when information must be exchanged safely between multiple threads. The Queue class in this module implements all the required locking semantics. It depends on the availability of thread support in Python,Even though its a multi-consumer, multi-producer queue I suppose it will still work for you like a charm.So here is what you need to doYour server receives a request to print the label, do the necessary processing/cleanup and put it in the queueA worker thread pops the items from the queue and executes the taskor if you would expect the system to be big enough, here are some links, but steps would be same as aboveRabbitMq - A scalable message broker (simply put a queue)Celery - A python package for popping items from a message broker such as rabbitmq and executes it


Answer URL
https://docs.python.org/3/library/queue.html
https://docs.python.org/3/library/queue.html
