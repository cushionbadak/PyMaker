Natural Text
I have a large English corpus named SubIMDB and I want to make a list of all the words with their frequency. Meaning that how much they have appeared in the whole corpus. This frequency list should have some characteristics:The words like boy and boys or other grammatical features such as get and getting, the same word or lemma and if there are 3 boy and 2 boys it should list them as Boy 5. However, not for the cases like Go and Went which have irregular forms(or foot and feet)I want to use this frequency list as a kind of dictionary so whenever I see a word in another part of the program I want to check its frequency in this list. So, better if it is searchable without looking up all the of it.My questions are:For the first problem, what should I do? Lemmatize? or Stemming? or how can I get that?For second, what kind of variable type I should set it to? like dictionary or lists or what?Is is the best to save it in csv?Is there any prepared toolkit for python doing this all?Thank you so much.
As pointed above, question(s) is a opinion based and vague, but here's some directions:Both will work for your case. Stemming usually is simpler and faster. I suggest starting with nltk's . If you need sophisticated lemmatization, take a look at , IMO that's industry standard.You need dictionary, which gives you amortized O(1) lookup once you have your stem/lemma. Also  may become useful.Depends on your usecase. CSV is more "portable",  may be easier to use.There's a lot of "building blocks" in nltk and spaCy, building your pipeline/models is up to you


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/pickle.html
