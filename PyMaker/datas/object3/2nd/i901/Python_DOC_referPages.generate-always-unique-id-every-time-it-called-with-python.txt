Natural Text
What is the best way to create a python script which by calling which, it will ALWAYS generate a new UNIQUE ID (Autoincremental) You run the script and it will tell you 1, then close script and open again and will tell you 2. Purpose of it is to create a script which will be used across and this ID will be used to track the latest changes and so on.P.S. I'm not talking to make a function which will do it. 
Since you didnt provide any code, I will also not provide any code.Solution 1: Unique ID1) TIME: create function to give you timestamp2) ID: create function that generate long string with random numbers and lettersThis is of course 'risky' because there is a chance you will generate already existing ID, but from statistical point of view, it is so called 'impossible even if it is possible'save in file or somewhereSolution 2: offset - incremental1) have file with a 0 in it.2) open a file, read line, convert to integer, increment to +1, write in a file.Note:Your title is wrong. One moment you talk about UNIQUE ID, Next moment you are talking about offset. Unique ID and counting running python script are quite contradicting ideas
I assume you have a script, it will generate some result every time it is executed. Then you need need a value that (1) distinguish one result from another and (2) shows which result came last. Is that right? If so, we have many options here. In the simplest case (a script always running in the same machine) I would suggest two optionsSave a count to a fileIn this case, you would have a file and would read the number from it:After doing whatever your script does, you would write to the file the value you've read, but incremented:Save the timestampA simpler option, however, is not to increment a value but get a timestamp. You could use , that returns the number of seconds since Unix epoch:You will always know which result came later than the others. Personally, however, I would rather format the current time, it is easier to read and reason about:Those are basic ideas, you may need to pay attention to corner cases and possible failures (especially with the file-based solution). That said, I guess those are quite viable first steps.A technical noteWhat you want here is to a program to remember a piece of information between two or more executions, and we have a technical term for that: the information should be persistent. Since you asked for an autoincrementing feature, you wanted a persistent count. I suspect, however, you do not need that if you use the timestamp option. It is up to you to decide what to do here.
If there is any chance of the file being accessed concurrently, it is best to lock the file. Keep trying if the file is locked.http://tilde.town/~cristo/file-locking-in-python.htmlOld answer:You could store it as an environment variable on the system. If not set, initialise to 1. Else increment it by 1.


Answer URL
https://docs.python.org/3/library/time.html#time.time
https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior
https://docs.python.org/3/library/uuid.html
