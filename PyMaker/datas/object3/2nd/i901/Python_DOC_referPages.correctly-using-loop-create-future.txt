Natural Text
I was reading the Python documentation and PyMotW book trying to learn Async/Await, Futures, and Tasks. Coroutines and Tasks documentation:Normally there is no need to create Future objects at the application  level code.From the future documentation it states the following: loop.create_future()Create an asyncio.Future object attached to the event loop.This is the preferred way to create Futures in asyncio. This lets third-party event loops provide alternative implementations of the  Future object (with better performance or instrumentation).However, in PyMotW chapter on Future, the author creates a  object like this:I assume because the book is slightly behind the current version of Python. To correct this, I did the following:So the authors full code becomes:Question:Is  in the sample above, the correct way to create a  object according to the documentation?
Is  in the sample above, the correct way to create a future object according to the documentation?Yes, in the code as shown, that is exactly the way to do it.One thing to watch out for is that a future is tied to an event loop, so creating a future at top-level creates a future tied to the loop that  returns initially. Once you switch to , you will get an error because each invocation of  creates a new event loop.To avoid that issue, a top-level future can start off as  and be created inside a coroutine, using  as appropriate. And since you're passing the future explicitly (which is a good practice to follow), you don't need a global variable at all:Note that when using , you never need to explicitly close the loop, that is done automatically. If you are using Python 3.6 or earlier, you can replace  with .


Answer URL
https://docs.python.org/3/library/asyncio-task.html#coroutines
https://docs.python.org/3/library/asyncio-eventloop.html#creating-futures-and-tasks
https://docs.python.org/3/library/asyncio-task.html#asyncio.run
