Natural Text
I'm migrating from  to , and I can't find the  equivalent of 's . (A  takes two arguments: the function to run and the number of milliseconds between calls.)Is there such an equivalent in ?If not, what would be the cleanest way to implement this without running the risk of getting a  after a while?
For Python versions below 3.5:For Python 3.5 and above:
When you feel that something should happen "in background" of your asyncio program,  might be good way to do it. You can read this post to see how to work with tasks.Here's possible implementation of class that executes some function periodically:Let's test it:Output:As you see on  we just start task that calls some functions and sleeps some time in endless loop. On  we just cancel that task. Note, that task should be stopped at the moment program finished. One more important thing that your callback shouldn't take much time to be executed (or it'll freeze your event loop). If you're planning to call some long-running , you possibly would need to run it in executor.
There is no built-in support for periodic calls, no.Just create your own scheduler loop that sleeps and executes any tasks scheduled:The  iterator should produce tasks that are ready to be run at the given time. Note that producing the schedule and kicking off all the tasks could in theory take longer than 1 second; the idea here is that the scheduler yields all tasks that should have started since the last check.
Based on @A. Jesse Jiryu Davis response (with @Torkel Bj√∏rnson-Langen and @ReWrite comments) this is an improvement which avoids drift.
Alternative version with decorator for python 3.7
A variant that may be helpful: if you want your recurring call to happen every n seconds instead of n seconds between the end of the last execution and the beginning of the next, and you don't want calls to overlap in time, the following is simpler:And an example of using it to run a couple tasks in the background:


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.Task
