Natural Text
The python package that I am developing has a dependency (pyfluidsynth) that breaks on my system by throwing an AttributeError on import. Pyfluidsynth is a wrapper around the C library "fluidsynth", and it the reason that it breaks is that it is trying to wrap a couple C functions that don't exist in the library, at least for the version of fluidsynth on my system. These are the offending lines of code:... and the error I get is:AttributeError: /lib64/libfluidsynth.so.1: undefined symbol: fluid_synth_set_reverb_fullIt's easy enough to fix: I don't use that functionality, so I can just surround the two statements with a try/except in my copy of the fluidsynth library. But in distributing my own package, I can't rely on the version of pyfluidsynth in pypi, since it will break on at least some people's machines.This issue has been filed, but the developer of pyfluidsynth hasn't fixed it yet. In the meantime, is there a way that I can import pyfluidsynth such that it catches the exceptions, ignores them, and proceeds to import the rest of the module?
You can fork pyfluidsynth and depend on that instead until it gets fixed. This is probably a better option than monkeypatching. Pip can install packages hosted on GitHub if you don't want to put it up on PyPI. Use a  URL to the repository (and branch, if necessary) instead of just the package name.That said, you can probably use unittest.mock.patch to replace  with a version that returns a wrapped function prototype that checks for  or  and returns a dummy value in those cases, but otherwise delegates to the real prototype.Maybe something likeHave not tested this.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch
