Natural Text
I am building web-sockets API on python using python WebSockets. According to the services that I am using in my API I need to wrap them by threads. So I have to make my asyncio web-sockets await while thread produces data for the response. I found that there are a lot of ways to realize such service. I can use threads + native python socket module or multiplexing(python selector module) + python socket module or multithreading + python socket module or threads + async python web-sockets.  I want to have a web-socket python service working the next way. My client sends data to the server. The server starts thread_1 which somehow modifies given data then pass modified data to the thread_2 which modify them one more time and then return twice modified data as the response to the client. As I expect client will not wait for the response on the server to send next pack of data but if the server returns some result the client will handle it. In other words, client and server should work in async order. Although, it will be great if you will suggest some materials which help me to achieve the goal in that question.
One of the way to realize such architecture is to combine multithreading with asyncio web-sockets. That goal is achieved by using asyncio executors. 


Answer URL
https://docs.python.org/3/library/selectors.html
