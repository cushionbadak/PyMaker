Natural Text
I have this nested list:Now, what I want to do is convert each element in a list to float. My solution is this:But can this be done using nested list comprehension, right?what I've done is:But then the result is bunch of 100's with the sum of 2400.any solution, an explanation would be much appreciated. Thanks!
Here is how you would do this with a nested list comprehension:This would give you a list of lists, similar to what you started with except with floats instead of strings.  If you want one flat list then you would use .
Here is how to convert nested for loop to nested list comprehension:Here is how nested list comprehension works:

Not sure what your desired output is, but if you're using list comprehension, the order follows the order of nested loops, which you have backwards. So I got the what I think you want with:The principle is: use the same order you'd use in writing it out as nested for loops.
Since i am little late here but i wanted to share how actually list comprehension works especially nested list comprehension :is actually same as :And now nested list comprehension :is same as ;output:
If you don't like nested list comprehensions, you can make use of the map function as well, 
I had a similar problem to solve so I came across this question. I did a performance comparison of Andrew Clark's and narayan's answer which I would like to share. The primary difference between two answers is how they iterate over inner lists. One of them uses builtin map, while other is using list comprehension. Map function has slight performance advantage to its equivalent list comprehension if it doesn't require the use lambdas. So in context of this question  should perform slightly better than list comprehension. Lets do a performance benchmark to see if it is actually true. I used python version 3.5.0 to perform all these tests. In first set of tests I would like to keep elements per list to be 10 and vary number of lists from 10-100,000In the next set of tests I would like to raise number of elements per lists to 100.Lets take a brave step and modify the number of elements in lists to be 1000From these test we can conclude that  has a performance benefit over list comprehension in this case. This is also applicable if you are trying to cast to either  or .  For small number of lists with less elements per list, the difference is negligible. For larger lists with more elements per list one might like to use  instead of list comprehension, but it totally depends on application needs.However I personally find list comprehension to be more readable and idiomatic than . It is a de-facto standard in python. Usually people are more proficient and comfortable(specially beginner) in using list comprehension than .
Yes, you can do it with such a code:
This Problem can be solved without using for loop.Single line code will be sufficient for this. Using Nested Map with lambda function will also works here.And Output List would be as follows:
The best way to do this in my opinion is to use python's  package.
Yes you can do the following.
This can be achieved using list comprehension:


Answer URL
https://docs.python.org/3/library/functions.html#map
