Natural Text
I want to execute tasks asynchronously and concurrently. If  is running when  arrives,  is started right away, without waiting for  to complete. Also, I would like to avoid callbacks with the help of coroutines.Here's a concurrent solution with callbacks:Its output:And here's my effort to get rid of callbacks:Output:In this case initial thread won't be able to go further than  and hence won't be able to accept new tasks. So, here's my question: is there a way to simultaneously:execute tasks concurrently;be able to accept new tasks and schedule them for execution right away (along with already running taks);use coroutines and code without callbacks.
The second bullet from your question can be met by running asyncio in a dedicated thread and using  to schedule coroutines. For example:
 will indeed run forever, even if there are no tasks inside. Good news is that you don't need this function. In order to wait for your computations to complete, use :Please note how the loop is handled here - I changed a few things. If you start using asyncio, I'd actually recommend to have one loop for all the things instead of creating loops for more granular task. With this approach, you get all asyncio bells and whistles for handling and synchronizing tasks.Also, it is not possible to parallelize pure Python non-IO code in  due to GIL. Keep that in mind and prefer a process pool executor in such cases.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.run_coroutine_threadsafe
https://docs.python.org/3/library/asyncio-task.html
