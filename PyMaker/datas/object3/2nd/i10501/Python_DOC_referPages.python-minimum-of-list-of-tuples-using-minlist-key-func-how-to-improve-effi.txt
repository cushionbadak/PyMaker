Natural Text
Given a list  of tuples  where  is some function that returns a signature for each region, I need to find the region with the minimal score (the actual score doesn't matter).The score of a region is given by , a function that calculates the distance between two harmonic signatures given some radius (query_harmonics and radius are computed beforehand). My current solution is:A team member suggested that I use the following instead:Note: Both  and  are very slow and heavy functions. Also,  can be replace by .He claims that his suggestion might result in a better runtime (although it would not be significant since the harmonics functions are the major operations). If  creates a list of the keys, then our versions are equivalent (and mine's shorter), but if it computes the key every time he thinks mine will be slower.Which way is faster? I think there must be a better (runtime-wise) way to do this (perhaps using numpy?) and would like to hear some suggestions.
 calls  once on each item of  (and that also applies to the key function of ,  and ). So if  contains duplicated items then the key function does unnecessary work, unless you use a memoizing key function.To illustrate, here are a couple of key functions that print their arg when called.  is a normal key function,  uses a default mutable dictionary to do memoizing.output
When in doubt, do not guess, profile it.Putting all of your code behind, we may refer to cPython implementation. We can see, that  function uses  helper. In this helper we can locate where key function is computed.Minimal excerpt would be:Source code states clearly that key function is computed once for each element in sorted iterable. On the other hand, key function result is thrown away after sorting is complete. So case comes down to if you are planning on reusing key function values later.


Answer URL
https://docs.python.org/3/library/profile.html
