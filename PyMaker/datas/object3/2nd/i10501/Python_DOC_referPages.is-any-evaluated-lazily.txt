Natural Text
I am writing a script in which i have to test numbers against a number of conditions. If any of the conditions are met i want to return  and i want to do that the fastest way possible.My first idea was to use  instead of nested  statements or multiple  linking my conditions. Since i would be satisfied if any of the conditions were  i could really benefit from  being lazy and returning True as soon as it could.Based on the fact that the following print happens instantly and not after 10 (= 0 + 1 + 2 + 3 + 4) seconds i assume it is. Is that the case or am i somehow mistaken?
Yes,  and  short-circuit, aborting as soon as the outcome is clear: See the docs:all(iterable)Return True if all elements of the iterable are true (or if the  iterable is empty). Equivalent to:any(iterable)Return True if any element of the iterable is true. If the iterable is  empty, return False. Equivalent to:
While the  and  functions short-circuit on the first "true" element of an iterable, the iterable itself may be constructed in a non-lazy way. Consider this example:This will take several seconds to execute in Python 2 as  constructs a list of 10**8 elements. The same expression runs instantly in Python 3, where  is lazy.
As Tim correctly mentioned,  and  do short-circuit, but in your code, what makes it lazy is the use of generators. For example, the following code would not be lazy:The list would be fully constructed and calculated, and only then passed as an argument to .Generators, on the other hand, are iterables that calculate each item on demand. They can be expressions, functions, or sometimes manually implemented as lazy iterators.
Yes, it's lazy as demonstrated by the following:In the first run  halted after testing the first item, i.e. it short circuited the evaluation.In the second run  continued testing until the sequence was exhausted.
Yes, and here is an experiment that shows it even more definitively than your timing experiment:typical run:


Answer URL
https://docs.python.org/3/library/functions.html#all
https://docs.python.org/3/tutorial/classes.html#iterators
