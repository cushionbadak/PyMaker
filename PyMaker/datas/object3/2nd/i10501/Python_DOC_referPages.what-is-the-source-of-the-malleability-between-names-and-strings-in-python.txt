Natural Text
This question already has an answer here:Normal arguments vs. keyword arguments                    9 answers                I'm used to a firm distinction between identifiers (variable names) and strings in programming languages.Yet Python has some malleability between the two. For example in the codewe use  as an identifier on line 3 and then as the string  when we retrieve the attribute on line 5.I'd like to better understand what is happening. What is the feature in a programming language generally and in Python specifically that makes this malleability possible?(Please note that NetworkX is incidental to the question, which is why I'm not listing it in the keywords.)Clarification why this question is not asking for an explanation ofâ€”and is all but superficially related to keyword arguments:Sometimes what is happening is perfectly clear. For example if we write the code(using keyword arguments in whichever order we like), the Python interpreter would have seen the names (not the strings)  and  and is henceforth expecting names (not strings)  and , in any order.But in other contexts this malleability is truly puzzling. For example in the following code explaining keyword argumentswe introduce keyword arguments in the function call, only, lo and behold, to find that they have become strings.From an answer to the present questionit becomes clear that in Python there is zero distinction between  and  whether we write:orWhat happens with  makes perfect sense. The type of  is a string.But, again,  is obscure. Although we end up with exactly the same outcome, the language has somehow molded the identifier/name that we used () into a string.What is the feature of programming languages generally and Python specifically that permits a language to mold a name into a string? Now that a pattern is emerging, might it be the case that Python uses some mechanism for switching names into strings, but there are no instances of switching strings to identifiers?
A simpler example of this behaviour is a dictionary:Those keyword arguments are just a syntactic sugar that allows passing arbitrary arguments, so that they can be accessed by name in the called function, like:


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments
