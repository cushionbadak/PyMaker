Natural Text
I have a module R that handles gets and sets to a redis cluster. It is imported all over a flask api's endpoints. My first thought was to use a Singleton class in R so that we maintain one single connection to the redis cluster, but I'm not entirely I should putting a singleton class pattern into a code base that is only looked at once a year by different developers, I really don't want someone trying to instantiate it multiple times at a later stage. So, instead, in my module init.py I set up the connection to the cluster, and import this connection to my redis cluster module, then whereever I use R, the connection is always the same connection without having to use a singleton. e.g.:_init _.py:R.py:some_endpoint.pysome_other_endpoint.pyI think this is safe because 'Since Python modules are first-class runtime objects, they effectively become singletons, initialized at the time of first import.'. However, is there anything that I am missing, anything dangerous?
It is safe but there are two things I don't think are good practices.Initializations or class definitions etc should not be there ininit.py Init file is use to hide internal structure of the package.A simple init.py is a good init.py Creating objects in global space is not good. Disadvantage of is that mere importing your package will consume memory since it initializes an object. You should make actual connection inside a class or a function. Whenever you need a connection call this class or function to create a singleton connection.


Answer URL
https://docs.python.org/3/tutorial/modules.html
