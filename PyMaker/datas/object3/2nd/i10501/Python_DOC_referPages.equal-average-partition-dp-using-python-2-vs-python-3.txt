Natural Text
I was using memorization to try to solve the Equal Average Partition Problem, somehow the solution that I came up with take a long time to solve the problem in Python 2.x but relatively fast in Python 3.x I'm wondering whether anyone encounter something similar, and what are the reasons behind? Thanks 
There is only one difference between python 2 and 3 that you are using. In linemethod  in python2 returns list of dict keys and in python3 returns iterator through keys (it was iterkeys() method in python2.) Note that method  is not needed since operator  will return result you want. So code works with same speed in 2 and 3.It seems that operator  is optimized in python3, if it is possible to evaluate it faster than to iterate through elements, like in  or .
 will be O(n) in Python 2 (membership in list) and O(1) in in Python 3 (membership in set). This accounts for observed difference in performance.On dictionary view objects:Keys views are set-like since their entries are unique and hashable.  If all values are hashable, so that (key, value) pairs are unique and  hashable, then the items view is also set-like. (Values views are not  treated as set-like since the entries are generally not unique.) For  set-like views, all of the operations defined for the abstract base  class collections.abc.Set are available (for example, ==, <, or ^).Consider using , which is O(1) in both Python 2.x and 3.x and is basically equivalent (unless you modify dict on the fly and want to freeze state of dict keys before modifying it)


Answer URL
https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
