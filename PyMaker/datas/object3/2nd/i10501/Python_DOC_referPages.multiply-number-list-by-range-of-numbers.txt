Natural Text
I'm trying to write code for a modulus 11 but I'm failing to make it more python-like.As of now I'm using a weight and increasing it, checking when it reaches a number and then set it to it's original value.Let's say I have a list of numbers and I'd like to multiply them by  so that each index would be multiplied by an increasing number.1x2, 2x3, 3x4, 4x5, 5x6, 6x7, 7x8, 8x9, 9x2, 10x3, etc..Is there an elegant way to do this?Unelegant way:
You can use the current index to determine the multiplier:Or, you can "cycle" the sequence of multipliers and zip with the input sequence:
Ok, I am not quite sure if I understand your question correctly, since you talk about modulus 11, but also seem to use numbers from 2 up to and including 9.But let's first start with writing the 1..20 as a list, that would be possible as follows:Next, to turn some integer into a number between 2 and 9 you could do the following:Combining these two, you could make a list comprehension:(the -1 is added to start the first number from 2 instead of from 3)
A lot of good answers here already, and in case you would like to use  (usually good for this sort of thing), here's an alternative:
You don't have to worry about resetting the multiplier if you use :so you can simplify your function like below:
You can use starmap and cycle from itertools.First create a list of tuples to multiply together:Then use  and  (from operator) to multiply:If you wanted a straight comprehension, you can do:
maybe oneliner : basically map is core function used to make same operation on every element of table. first parameter is function which will be applied to every element. And If You want to remember generate another values used to multiplication maybe try some generator


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.cycle
