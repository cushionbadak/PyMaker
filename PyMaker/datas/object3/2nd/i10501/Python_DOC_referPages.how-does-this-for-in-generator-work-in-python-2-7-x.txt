Natural Text
I'm aware of the  loop in Python, but I stumbled on a type of generator whose documentation I couldn't find. I found out that the example below only works if the lists inside the list  are of length 2, or it gives an unpacking error, so I suspect some kind of 2-tuple or dict-related unpacker may be at play. Can somebody explain to me how this generator syntax works?I ran into it in a project that used this generator in a call to . Originally I thought it was multiple args being passed in, but the syntax made no sense, and testing it individually revealed a generator.https://github.com/bigbighd604/Python/blob/master/graph/Ford-Fulkerson.py#L59
Don't be fooled by the comma in . In Python, commas -- not parentheses -- are what defines a tuple. Your code is equivalent to , which iterates through the elements of , assigning  to the first element of each two-element list in  and  to the second, and then assigning  to . If  had an element that was not a two-element iterable, you would get a .
Starting from the inside, we are creating a generator expression from list a:So, Let us look at that one alone:So, if you look back at list , we have a list of lists, where each sub-list is just two items. So, what is happening here with your generator expression, is that  are representing each of the unpacked values in your sub-list as a tuple. However, if you look at the expression, we are only taking , which is why the result will end up being: Then moving outward, we are then just creating a list-comprehension from that generator expression:Ending in a list:Actually, if you are looking to get a list out of that expression, you can just do:


Answer URL
https://docs.python.org/3/tutorial/classes.html#generator-expressions
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries
