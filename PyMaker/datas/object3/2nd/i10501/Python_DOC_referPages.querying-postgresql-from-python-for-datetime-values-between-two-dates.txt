Natural Text
I have the following dateTime text type variable in Postgres tableI have to write a Python function to extract the data for a few variables between two datesI need to create dStart and dEnd variables and use them as function parameters as belowI tried using to_char("dateTime", 'YYYY-MM-DD') Postgres function but didn't work out. Please let me know how to solve this
When working with sql, you should always use your sql library to substitute parameters into the query, instead of using Python's string operators. This avoids the risk of malformed queries or sql injection attacks. See e.g., this page. Right now your code won't run because it directly inserts  and  without any quoting, so they are interpreted as mathematical expressions (2016 - 5 - 12 = 1999).There's also a secondary problem that your query will exclude  values on the end date, because  will be treated as having a time value of 00:00:00 when it is compared toÂ . And if you use  or some other function to extract just the date from the  column to do the comparison, it will prevent your query from using indexes, making it very inefficient. Here is some revised code that may work for you:This code relies on a few assumptions (welcome to the wonderful world of datetime querying!): you will pass  and  to , instead of just a single , the  column is type  (not ), the timezones in the  column are correct, andthe dates given by  and  are in the server's timezone or you have used  with your  object to select the right time zone to use for this session.NotesDifferent database engines use different placeholders for the parameters, so you will need to check your database driver's documentation to decide what placeholders to use. The code above should work fine for postgresql.With the code above,  and  will be inserted into the query as strings, and postgresql automatically convert them into timestamps when it runs the query. This should work fine for the example dates you gave, but if you need more direct control, you have two options:call  with Python  or  values for  and , and the code above will insert them into the query as postgresql dates or timestamps; or explicitly convert the  and  strings into postgresql dates by replacing  and  with something like this: .
I'm not familiar with postgresql, but you can convert the strings to the  class which is part of the built in  package in Python and simply make comparisons between them.The  routine uses a format specifiers to specify which parts of the string correspond to different time components.  


Answer URL
https://docs.python.org/3/library/time.html
