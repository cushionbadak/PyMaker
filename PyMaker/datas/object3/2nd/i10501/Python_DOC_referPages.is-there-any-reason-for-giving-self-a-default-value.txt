Natural Text
I was browsing through some code, and I noticed a line that caught my attention. The code is similar to the example belowThis looks like any other class that I have seen, however a  is being passed in as default value for . If I print out , it behaves as normalThis has been bugging me and I cannot figure out why this would be used. Is there any reason to why a  instance would be passed in as a default value for 
Not really, it's just an odd way of making it not raise an error when called via the class:works fine since, even though nothing is implicitly passed as with instances, the default value for that argument is provided. If no default was provided, when called, this would of course raise the  for args we all love. As to why he chose an empty string as the value, only he knows.Bottom line, this is more confusing than it is practical. If you need to do something similar I'd advice a simple  with a default argument to achieve a similar effect. That way you don't stump anyone reading your code (like the developer who wrote this did with you ;-):If instead you need access to class attributes you could always opt for the  decorator. Both these ( and  decorators) also serve a secondary purpose of making your intent crystal clear to others reading your code.
The short answer is yes. That way, you can call the function as: without instantiating , that will print an empty string.To give a longer answer, we need to look at what is going on behind the scenes.When you create an instance of the class,  and  are called to create it, that is:is roughly equivalent to:Whenever you use some method on a created instance :It is "replaced" with .So, having a default parameter for  allows you to call this function not only as a method of an instance, in which case  is an instance itself, but also as a static class method.That way, instead of , just  is called. Because the argument list is empty, the default argument is assigned to  and the desired result (empty string) is printed.


Answer URL
https://docs.python.org/3/library/functions.html#staticmethod
https://docs.python.org/3/library/functions.html#classmethod
