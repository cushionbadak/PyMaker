Natural Text
This question already has an answer here:What are the differences between lazy, greedy and possessive quantifiers?                    1 answer                I'm trying to parse the output that looks like below.I have regular expression that works, which is as follows.This regex works:This will  capture each line properly.My question is what does the bold ? do that is in front of (?=^\s*\d+\s+) i.e.  Changing the regular expression to as follows.This regex does not work. The only difference is the ? mark removed.I have tried this and it does not work. It will not parse each line separately. Could anyone help me interpret this regular expression?
According to the re docs:, , The , , and  qualifiers are all greedy; they match as much text as possible. Sometimes this behaviour isnâ€™t desired; if the RE  is matched against , it will match the entire string, and not just . Adding  after the qualifier makes it perform the match in non-greedy or minimal fashion; as few characters as possible will be matched. Using the RE  will match only .So in your case,  will match a space or non-space character minimally, whereas  would greedily match as many characters as it can.
That question mark has no meaning by itself - the specific sequence  starts a "positive lookahead assertion", which basically requires that the contents of the regexp up to the next close paren has to be present in the string being searched, but doesn't count as part of the regexp match.There are several advanced regexp features that start with  - see the documentation for the re module for full details.  That particular sequence is used for such extensions, because it is otherwise meaningless in a regexp - an open paren has to be followed by something, and a question mark has to be preceded by something.


Answer URL
https://docs.python.org/3/library/re.html
