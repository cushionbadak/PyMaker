Natural Text
I have a very large number, both before and after the decimal, but for this I'll just call it 4.58.I want to know the number, Y, that will yield me an integer if multiplied by X and not any sort of float number.Here is my code:However, this method is incredibly slow and inefficient. I was wondering how could I implement continued fractions or some other method to make it predict the value of Y?EditThe decimal module stores float numbers more accurately (As strings), so 0.5 won't become 0.499999999.Edit 2I've got X (4.58).I want to know what number will multiply by X to make an integer; as efficiently as possible.Edit 3Okay, maybe not my best question yet.Here's my dilemma.I've got a number spat out from a trivial programme I made. That number is a decimal number, 1.5.All I want to do is find what integer will multiply by my decimal to yield another integer.For 1.5, the best answer will be 2. (1.5*2=3) (float*int=int)My while-loop above will do that, eventually, but I just wanted to know whether there was a better way to do this, such as continued fractions; and if there was, how could I implement it.Edit 4Here's my code thanks to user6794072. It's lengthy but functional.
If I understand your question correctly, you want to find the smallest integer (i) that can be multiplied to a non-integer number (n) so that:i*n is an integerI would do this by finding the factors of the numerator and denominator for n.  In your example, if n = 4.58, then you can extract 458 for the numerator and 100 for the denominator.The multiples of 458 are 2 and 229The multiples of 100 are 2, 2, 5, 5You can cross off one instance of 2 for the numerator and denominator.  Then your solution is just multiplying the remaining factors in the denominator: in this case, 2*5*5 or 50. 
Well think of what if you wanted to reach  and then use the fact that  to scale the answer. For any float ,  will yield , so for arbitrary integer , just use .
I'm not a Python programmer, but what about round function?


Answer URL
https://docs.python.org/3/library/functions.html#round
