Natural Text
I was reading a presentation on Pythons' Object model when, in one slide (number ), the author asserts that Pythons' functions are descriptors. The example he presents to illustrate is similar to this one I wrote:Now, I understand that the point is made, since the function defines a  it is a descriptor as I described in the description section of the Python documentation. What I don't understand is how exactly the call results in the output provided.
That's Python doing what it does in order to support dynamically adding functions to classes. When  is invoked on a function object (usually done via dot access  on an instance of a class) Python will transform the function to a method and implicitly pass the instance (usually recognized as ) as the first argument. In your case, you explicitly call  and explicitly pass the 'instance'  which is bound as the first argument of the function , here  is considered the "instance" :This results in a method bound on the instance 2, with one expected argument that yields the multiplication: calling it returns  (the bound argument assigned to ) multiplied with anything else you supply as the argument .Normally,  invokes it's  with the appropriate arguments provided:As a plus, a Python implementation of  for functions is provided in the Descriptor HOWTO document of the Python Docs.Here you can see the transformation, with the usage of , that takes place when  is invoked :And the source code for the intrigued visitor is located in .As you can see if this descriptor did not exist you'd have to automatically wrap functions in  any time you'd want to dynamically add a function to class which is an unnecessary hassle.


Answer URL
https://docs.python.org/3/howto/descriptor.html#functions-and-methods
https://docs.python.org/3/library/types.html#types.MethodType
