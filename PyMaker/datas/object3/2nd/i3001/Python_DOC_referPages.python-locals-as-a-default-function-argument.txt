Natural Text
Suppose I have a module  that has a function . I want  to print all of the local variables associated with the namespace that called it.For example:The two last lines would give the same output. So far I've tried defining  as such:But neither works. The first ends up being what's local to 's namespace (which I guess is because that's when it's evaluated), and the second is as if I passed in  (which I assume is because it's evaluated during ).Is there a way I can have the default value of argument  of  be all variables in the namespace which called ?EDIT 2018-07-29:As has been pointed out, what was given was an XY Problem; as such, I'll give the specifics.The module I'm putting together will allow the user to create various objects that represent different aspects of a numerical problem (e.x. various topology definitions, boundary conditions, constitutive models, ect.) and define how any given object interacts with any other object(s). The idea is for the user to import the module, define the various model entities that they need, and then call a function which will take all objects passed to it, make needed adjustments to ensure capability between them, and then write out a file that represents the entire numerical problem as a text file.The module has a function  that accepts each of the various types of aspects of the numerical problem. The default value for all arguments is an empty list. If a non-empty list is passed, then  will use those instances for generating the completed numerical problem. If an argument is an empty list, then I'd like it to take in all instances in the namespace that called  (which I will then parse out the appropriate instances for the argument).EDIT 2018-07-29:Sorry for any lack of understanding on my part (I'm not that strong of a programmer), but I think I might understand what you're saying with respect to an instance being declared or registered.From my limited understanding, could this be done by creating some sort of registry dataset (like a  or ) in the module that will be created when the module is imported, and that all module classes take this registry object in by default.  During class initialization  can be appended to said dataset, and then the  function will take the registry as a default value for one of the arguments?
There's no way you can do what you want directly. just returns the local variables in whatever namespace it's called in. As you've seen, you have access to the namespace the function is defined in at the time of definition, and you have access to the namespace of the function itself from within the function, but you don't have access to any other namespaces.You can do what you want indirectly… but it's almost certainly a bad idea. At least this smells like an XY problem, and whatever it is you're actually trying to do, there's probably a better way to do it.But occasionally it is necessary, so in case you have one of those cases:The main good reason to want to know the locals of your caller is for some kind of debugging or other introspection function. And the way to do introspection is almost always through the  library.In this case, what you want to inspect is the interpreter call stack. The calling function will be the first frame on the call stack behind your function's own frame.You can get the raw stack frame:… or you can get a  representing it:As explained at the top of the  docs, a frame object's local namespace is available as:Note that this has all the same caveats that apply to getting your own locals with : what you get isn't the live namespace, but a mapping that, even if it is mutable, can't be used to modify the namespace (or, worse in 2.x, one that may or may not modify the namespace, unpredictably), and that has all cell and free variables flattened into their values rather than their cell references.Also, see the big warning in the docs about not keeping frame objects alive unnecessarily (or calling their  method if you need to keep a snapshot but not all of the references, but I think that only exists in 3.x).


Answer URL
https://docs.python.org/3/reference/datamodel.html#frame.clear
https://docs.python.org/3/library/inspect.html#inspect.stack
