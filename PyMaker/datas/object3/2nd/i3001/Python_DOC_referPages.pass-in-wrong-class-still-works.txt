Natural Text
Usually super works like the following in Python:But recently I found something like the following also works? No crash, behaviors as expected:How come? What does the second case mean?
 Will call grandparent class  (If it has one)
Actually, the behaviour it's not the same.From the documentation of  (docs here):Return a proxy object that delegates method calls to a parent or  sibling class of type.So if you have:The call:has no effect, because  has no parents but .If you call:It will print:Because  has one parent, .
The documentation for  says (in part):Return a proxy object that delegates method calls to a parent or  sibling class of . This is useful for accessing inherited methods  that have been overridden in a class. The search order is same as that  used by  except that the type itself is skipped. So  resolves to a proxy object that will pass method calls through to the parents and siblings of .  It shouldn't be surprising that this works.  If your parent class is Then when you make a  object, the  in the   call is a  instance.


Answer URL
https://docs.python.org/3/library/functions.html#super
https://docs.python.org/3/library/functions.html#super
