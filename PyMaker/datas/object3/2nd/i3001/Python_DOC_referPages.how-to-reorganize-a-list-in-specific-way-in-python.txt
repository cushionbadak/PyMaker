Natural Text
So, what I am trying to do is if you have the following list:I want it to be reorganised as this:Notice how QQQQQs are being used as placeholders. So, basically I want everything between the QQQQQs to be one list element. How do I do that?I have seen other posts about the  join() function, but the problem I have is putting a space in between, if there is more than 1 word.
Using a simple iteration.Ex:Output:
Try  together with  to get rid of white spacesOutput
You can use :Or even with  comparison, as suggested by @tobias_k in the comments:
Simple solution: Do a join with space and then just add the spaces to placeholder in a split function.Example:Result:or more generalized:edit after comment by tobias_kcomment was: "Of course, this only works if the placeholder actually is a string, and if that stirng does not appear in any of the other words. I.e. it would not work if the placeholder was, e.g., None, 'Q', or '' – tobias_k"Which is true, so I made an even more generalised solution so it should work for each placeholder.To be honest you might be better off using any of the other solutions if you have an inconvenient place holder such as mentioned by tobias_k.Decided to time it:used: I used a longer list so that the creation of the random-string isn't a significant time consuming part, and timing is silly when you aren't using big lists anyway.This solution:11.6 ms ± 153 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)Rakesh' loop solution:25.8 ms ± 819 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)RoadRunner's groupby:34.4 ms ± 1.21 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/reference/datamodel.html#object.__eq__
