Natural Text
I've read many examples of memoization online but have still been unable to successfully apply it to what I'm doing. I tried my best to write the memoization portion of this code using my own logic, but based on my tests as I run it each time, it is not working. Below is an example of a simple version of my code, which I wrote just to test the memoization concept since my actual code takes a while to run.The last two  statements are both outputting  after I've already run the script once, but I want the information to be stored in the cache after I just run it once so that I don't have to actually execute what the function is doing each time. I think it might have something to do with the fact that it's redefining  and  as empty dictionaries each time I run it, perhaps effectively undoing the memoization. But I saw this technique in examples, and I'm not sure how I would structure it otherwise. Please let me know if you have any tips!
When a program starts, it starts with a clean slate. That's fundamental to the way both Unix and Windows work.1 If you want anything to persist from one run to a future run, you need to store it somewhere, and load it back.This is covered in the official Python tutorial in the files section.The basic idea is simple:Right after your program starts, open a file and read your memo cache (and if the file doesn't exist, just start with ).Right before your program finishes, open the same file in write mode and write your memo cache.As for how to read it and write it: I suspect your memo cache is JSON-compatible, based on the names ( sounds like it would be mapping strings to string…). If so, store it as JSON, as shown in the tutorial. If not, see the  module, which has the same API but can handle things JSON can't.21. Imagine if that weren't true. Any time you crash a program, when you restart it, it'll come up in exactly the same state as when it crashed, so it's almost certain to immediately crash again… The only way to recover would be to uninstall and reinstall.2. This flexibility can be a security risk for code you're going to distribute or deploy, but for code you just run yourself with data that only comes from your own computer, it's fine.


Answer URL
https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files
https://docs.python.org/3/tutorial/inputoutput.html#saving-structured-data-with-json
https://docs.python.org/3/library/pickle.html
