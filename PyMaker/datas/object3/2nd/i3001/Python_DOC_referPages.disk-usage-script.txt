Natural Text
Somewhere things stopped working.  The intent was to show current disk usage if no argument given, show the directory's usage if provided as an argument, and show all subdirectories' disk usage if an argument called --all was given.  Here is what I got so far. For some reason it fails now when supplying the  for directory.
I see a couple of problems with your usage of . One (which sounds like you've figured-out for yourself) is that you're giving the wrong thing to  by passing it  which assign  to a  of all the command arguments after the first.The second issue is you're not defining the second and third arguments passed to  properly. Quoting from the PyMOTW3:The second argument is the option definition string for single character options. If one of the options requires an argument, its letter is followed by a colon. (emphasis mine)This means that in order to accept a value along with the  option, you'd need to use  instead of the  you've got. Similarly, for the  option in the list of long-style options:The third argument, if used, should be a sequence of the long-style option names. Long style options can be more than a single character, such as --noarg or --witharg. The option names in the sequence should not include the “--” prefix. If any long option requires an argument, its name should have a suffix of “=”.To support it there too requires you to pass .Unfortunately  doesn't support having an optional option argument. The reason is likely because it makes parsing ambiguous: For example, if  takes an optional argument and  is another option entirely, it unclear how interpret .If you can live with that limitation, the following incorporates changes to address the above issues:
I think I got it now.  Line 42 included sys.argv[1:] which returned a list.  It should actually be sys.argv[2] to reference the directory after supplying the -d option.
There are two problems here.The first problem is that you're using  wrong:This returns a list of options , and a list of  with the options filtered out. But you're continuing to use  instead of :In an invocation like ,  is going to be . But you don't want the . That's the whole reason you called  in the first place. So, use  here, not .The second problem is that you're taking a slice, , but treating it as if it were a single value, rather than a list of values.If you want to allow multiple directories to be passed with  and to work on all of them, you need a  loop over the slice.If you want just a single directory, then you need to just index the list, like , not . Although, if you want that, you probably don't want  to be a boolean flag and the directory to be an arg; you want  to be a flag with the directory as its value.More generally, you probably shouldn't be using  here in the first place. As the docs say:Note The  module is a parser for command line options whose API is designed to be familiar to users of the C  function. Users who are unfamiliar with the C  function or who would like to write less code and get better help and error messages should consider using the  module instead.If you're a  wizard, then sure, use  for simple projects instead of learning something new, even if it's better. But for anyone else, there is really no good reason to learn  in the first place, much less to learn how to debug all the funky corners of it.  is just plain better in every way. And if you don't like , there are half a dozen alternatives on PyPI.


Answer URL
https://docs.python.org/3/library/getopt.html
https://docs.python.org/3/library/argparse.html#module-argparse
