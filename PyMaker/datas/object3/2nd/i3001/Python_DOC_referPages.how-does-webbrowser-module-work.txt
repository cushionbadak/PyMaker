Natural Text
Here is the code:Sublime plugin:File 1: open_in_default_program.py:File 2: Context.sublime-menu:AutoHotkey test file:Test.ahk:My question:It works for HTML and Markdown files. It also works for AutoHotkey files - but how? From what I see, it uses browser. AutoHotkey files can't be opened in browser - but actually they are perfectly could be launched with this plugin. Why it works?Here is another plugin for opening files in default application, but it's much more complex: https://github.com/SublimeText/OpenDefaultApplication/blob/master/OpenDefault.py
This is mentioned in the documentation for :Note that on some platforms, trying to open a filename using this function, may work and start the operating systemâ€™s associated program. However, this is neither supported nor portable.The reason for this is that some browsers, when given a file they don't know how to handle, will automatically open it in the default program for that file. For example, on Windows, Internet Explorer is basically the same program as Windows Explorer,1 so asking Internet Explorer to open a file it doesn't know how to handle has basically the same effect as double-clicking that file in Windows Explorer.Of course other browsers might do nothing, or copy the file to your Downloads directory, or pop up a dialog asking you what you want to do with this file. That's why the docs say "this is neither supported nor portable".It's also worth noting that, like many of the stdlib modules, the docs for  have a link to the source code at the top, and the source code is pretty straightforward, simple Python code. You can see that ultimately, it's just using the  module to call something like (depending on your detected browser, and possibly with some browser-specific options to tell it "don't start a whole new browser, tell the existing browser window to open a new tab"):You can easily work out exactly what command it's running and experiment running the same command in your shell/command prompt.The more complex plugin shows the way to do this as portably as possible:On Windows, you can call .On other platforms, you run a command-line tool. (The plugin seems to work out the right tool at install time, store it in a settings file, and look it up in that file.)On macOS, it's .On FreeDesktop systems, including most modern Linux distros, it's .Those three options are usually enough to cover 99% of your users, and almost all of the remaining users will be people who know what they're doing and can figure out what to put in your settings file. (Unless, of course, you're developing for mobile, in which case you'll want to write special handlers for iOS and Android.)1. This isn't really true anymore in modern Windows, but it's close enough to illustrate the point.


Answer URL
https://docs.python.org/3/library/webbrowser.html#webbrowser.open
https://docs.python.org/3/library/os.html#os.startfile
https://docs.python.org/3/library/stdtypes.html#str.endswith
