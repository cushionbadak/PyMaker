Natural Text
The  code below executes in about . An equivalent code in  executes in .Some explanations: I have serial data of 2  channels (, , , , ...).If  I must add  to the sum, else I must add . These values are multiplied by different coefficients ( and ).What is fastest way to do this with built-in functions or ?
Firstly you need to fix your average calc (operator precedence):You can do this in , e.g.:
There are many ways to speed it up. Here is a solution using  (maybe that can also be done using just ).In this code,  is your original function and  is using .This code shows that  is faster, using about  (less than 10% of the time of ).Obs: I assume that the difference of  and  between the two functions originates in how the float precision is handled, but I don't know for sure.How many decimal places do you need to consider for your use case? Does this small difference matter?


Answer URL
https://docs.python.org/3/library/time.html#time.clock
https://docs.python.org/3/library/time.html#time.perf_counter
https://docs.python.org/3/library/timeit.html
