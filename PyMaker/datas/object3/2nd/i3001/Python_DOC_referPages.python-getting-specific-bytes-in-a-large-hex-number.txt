Natural Text
Suppose I have a large hex number, 0x1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEF1234567890ABCDEFand I wanted to get bytes 10-20, from this hex number easily, how would I accomplish that? I know I can cut the data from bit shifting right by 10*8 times but I still have the significant bytes in my left over hex number.
The easiest way is to use string slices. Since the lowest byte is on the far right and the highest is on the left, we can utilise negative indexes. is here for better start=0 handlingLet's try with your valueIf a requested slice is empty or out of range I return 0x0 here, but you may raise  if you like.UPDATEIn Python 3.2+ there are  and  defined on  that are more efficient and more handy for this caseAnd after some performance testing on a number  which has 288998 bytes, I found  to be faster than the direct approach by Karl.  is apparently slower.
Instead of messing with strings and substrings I feel like the bit mask approach is a more direct approach to getting the bits you need. In your comment you mentioned the bit mask would be very big and that is true, but that is not an issue for a program.I have an example function which can make a mask for you depending on how many bytes you want to get from the data. Then you simply  that mask with the right shifted value to get the value you want.Say you want to get 4 bytes of data starting from byte index 2:The result ends up being  in the resulting decimal integer which translates to  in hex.


Answer URL
https://docs.python.org/3/library/stdtypes.html#int.to_bytes
https://docs.python.org/3/library/stdtypes.html#int.from_bytes
