Natural Text
What I want to do:have an asyncio event loop that gets spun upthat loop is passed to various classes in my system for scheduling coroutines onthat loop is also used for handling the responses to events (ie, I have a Queue, some event handling code will place an item on that queue, and separate co-routines that await a get() on that queue to handle those values)there is a main thread which "owns" the loop and is responsible for creating the loop, and at time of system shutdown will cancel any running tasks on the loop and close & stop the loop (cleanly shutdown)My understanding is because of #3, something needs to call  on the loop to ensure that tasks get scheduled on the loop.  But if I call  then my main thread blocks, never to terminate.What I've tried:Spawn a thread, passing in the loop, and then call  in the thread.  This means though that my unit tests never finish.  The gist:
There are two possible approaches: you can run the event loop in the main thread or in a background thread. If you run it in the main thread, you need to  (or  or equivalent) as the very last step of the program initialization. In that case the main thread will "block", but that's ok because its event loop will be live and respond to outside events, allowing the program to function. A single "blocking" call to the event loop that dispatches coroutines and callbacks is how asyncio is designed to be run.In cases where this is impractical, such as programs that contain a large body of synchronous code, or those that already communicate between several threads, it is often a better idea to create a dedicated thread and run the event loop in it. In that case you must be very careful not to communicate with the event loop other than with calls to  and . For example,  must be invoked using  because it interacts with the tasks and the event loop. This applies to all interactions with the event loop - for example, calling  from another thread is not allowed, it must be spelled as . Of course, calling loop functions from asyncio callbacks and coroutines is fine because those will always be run in the same thread the event loop runs in.


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.call_soon_threadsafe
https://docs.python.org/3/library/asyncio-task.html?highlight=run_coroutine_threadsafe#asyncio.run_coroutine_threadsafe
