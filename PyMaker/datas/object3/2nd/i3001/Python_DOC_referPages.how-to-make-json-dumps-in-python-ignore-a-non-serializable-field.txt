Natural Text
I am trying to serialize the output of parsing some binary data with the Construct2.9 library. I want to serialize the result to JSON. is an instance of a Construct class .Apparently it contains a hidden  of type  - see output of  below:Now, calling  obviously leads to a TypeError:However what I am confused about, is that running  results in the exact same error, while I would expect it to skip the  field. What is the problem here? Why is  not allowing me to skip the  field?I got the code to work by overriding  and returning  for fields of  type, but that means my serialized string contains loads of  elements, which I would prefer not to have at all...
Keys with a leading  underscore are not really 'hidden', they are just more strings to JSON. The Construct  class is just a dictionary with ordering, the  key is not anything special to that class.You have two options:implement a  hook that just returns a replacement value.Filter out the key-value pairs that you know can't work before serialising.and perhaps a third, but a casual scan of the Construct project pages doesn't tell me if it is available: have Construct output JSON or at least a JSON-compatible dictionary, perhaps by using adapters.The default hook can't prevent the  key from being added to the output, but would let you at least avoid the error:Filtering can be done recursively; the  decorator can help keep such code clean:I have the above implementation an additional  argument too, to explicitly skip keys that have a  character at the start. This would help skip all additional 'hidden' attributes the Construct library is using.Since  is a  subclass, the above code will automatically handle instances such as .
 doesn't do what you might think it does - it instructs the  to skip keys that are not of a basic type, not the values of the keys - i.e. if your had a   it would skip the  key, whereas without  set to  it would raise a .You can overload  (and its underbelly) and perform look-ahead filtering there, but you'll end up pretty much rewriting the  module, slowing it down in the process as you won't be able to benefit from the compiled parts. What I'd suggest you is to pre-process your data via iterative filtering and skip keys/types you don't want in your final JSON. Then the  module should be able to process it without any additional instructions. Something like:Then create your filter:In this case skipping just by type should suffice, but in case the  key holds some other undesirable data this guarantees it won't be in the final result. Anyway, you can then just filter the data prior to passing it to the :Of course, if your structure contains some other exotic data or data that is represented in JSON differently based on its type, this approach might mess it up as it turns all mappings into  and all sequences into . However, for general usage this should be more than enough.


Answer URL
https://docs.python.org/3/library/functools.html#functools.singledispatch
https://docs.python.org/3/library/json.html#json.dump
https://docs.python.org/3/library/json.html#json.JSONEncoder
https://docs.python.org/3/library/json.html#json.JSONEncoder.iterencode
