Natural Text
I'm writing a module manager for a program that I am writing now, and I wanted to store the module names in a dictionary then reference them and call them from .I would then expect that I can callWhich would call  and close the script, instead I get the resulting error:Traceback (most recent call last): File "a2.py", line 103, in  start() File "a2.py", line 44, in start menu() File "a2.py", line 36, in menu call_module(choice) File "a2.py", line 50, in call_module globals()converter[int(module_number)]KeyError: 'exit'
 isn't in  because it isn't a global, it's a builtin.In Python, the "global" namespace is per-module, not system-wide. There's a special "builtins" module that holds the things that are truly system-wide, like the normal builtin functions and a few special things like .You can access this module with .The way the interpreter accesses this module is a little funky. Global lookup works roughly like this:There's special code in places like , and the internal code for building function objects, that makes sure that if you override the normal  dictionary,  gets copied over (unless you explicitly tell it not to). When the import system builds a module object out of your module source (or compiled ), it calls , so every module's globals ends up with the right .Most things in the  module are there because they're compiled into it (as you'd expect from the name); for CPython, you can see the source in .But notice that  isn't there. In fact, it's injected into the  module by the  module, which is imported (unless you disable it) as part of the normal startup sequence. You can see the code that does this in  and . And the  constant says it's injected this way.So, when you type  in your code, or at the interactive prompt, it's found in  or .But if you want to access it manually, you're better off doing an  and accessed it as .Although really, you rarely want to access  anyway; if you want to exit programmatically, call , which is a normal function.  is a special  object that's made specifically for interactive use. (It has a  that gives a helpful message if you forget the parentheses, and some extra code to make it play nice with IDLE.)In fact, the docs on the  constant explicitly say that it's:â€¦ useful for the interactive interpreter shell and should not be used in programs.


Answer URL
https://docs.python.org/3/library/functions.html
https://docs.python.org/3/library/builtins.html
https://docs.python.org/3/library/functions.html#exec
https://docs.python.org/3/library/site.html
https://docs.python.org/3/library/constants.html#exit
https://docs.python.org/3/library/sys.html#sys.exit
https://docs.python.org/3/library/constants.html#exit
