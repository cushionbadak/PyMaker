Natural Text
There is a formatting question, that I would like some additional insight/understanding on. I have the following code:My main question is regarding the []s around the x in the second line. So I have never used []s before when describing the 'x' variable of a loop. Since my output is 99 and not [99], it looks like the []s are going to ask the loop to extract the number from its additional set of brackets. Question Updated Based on Responses:If I change the code to remove the brackets:I get [99] instead of 99. However, if I do the following:This example above doesn't require an additional set of []s around x,y and produces a bracket-less answer in the output, unlike the previous two examples, which requires a [] to produce a bracket-less answer.I realize this is an odd and fairly silly question since I would never construct a single element list like this. I simply saw this being casually used in an answer elsewhere online (with no explanation on it unfortunately). Being a newcomer, I'm just curious to broaden my understanding of the language.Thanks in advance.
When you do this:Python interprets that as "print each element in this iterable".When you do this:Python still interprets that as "print each element in this iterable" so that you get this:But, if you do this:Python will "unpack" the values for you from each element in the iterable and assign them to  and .  If you want to do that above for only the case of , Python requires the  syntax so that it unpacks the single value from the list.The ability to "unpack" an iterable is very powerful in Python.  You can assign variables on the fly by unpacking an iterable.  In your case, you can imagine having to assign   as variables maybe or something else.  You can also unpack values into the args of a function.In Python 3 you can also do something like this:
For the second example, with lists of length 2, to unpack both values you can do 
As per Python documentation, the square brackets are essentially ignored in assignments and loop constructs.So as a complement to user2774697's answer,  is equivalent to  which is equivalent to  and is also equivalent to .The thing that the square brackets do different than a bare round parenthesis is that it enforces an unpacking behavior, it requires the elements in L to be iterable.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#assignment-statements
