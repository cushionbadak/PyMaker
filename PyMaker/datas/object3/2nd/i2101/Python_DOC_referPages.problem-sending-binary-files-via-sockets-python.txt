Natural Text
I'm trying to write a program that transfers binary files from the client to the server. Here's the code:Client (send file)Server (recv file)This way I can transfer txt files, but when I have to transfer jpeg or any other type of file, it freezes in the loop.Can someone please explain me why? I'm new to py and i'm trying to learn
It shouldn't freeze if both sides have the same locale encoding, but it could easily die with an exception.You're reading and sending as binary (good), but inexplicably -ing to , then ing back to  (bad). Problem is, arbitrary binary data isn't guaranteed to be decodable in any given locale; if your locale encoding is UTF-8, odds are it's not legal. If it's  it's legal, but pointless.Worse, if your client and server have different locale encodings, the result of decoding might be different on each side (and therefore the lengths won't match).Use  consistently, don't convert to and from strings, and locale settings won't matter. Your code will also run faster. You also need to actually send the file length ahead of time; your loop is hoping  will return a short length only when the file is done, but if:The file is an exact multiple of the buffer size, orThe socket happens to send data in chunks that don't match the buffer sizeyou can each get short  results, by coincidence in case #2, and deterministically in case #1.A safer approach is to actually prefix your transmission with the file length, rather than hoping the chunking works as expected:
As an addendum to ShadowRanger's post, If you do want to maintain the file chunking without using  you can utilize a few tricks to clean up your code and reduce memory footprint. The sending process is fairly simple as we copied the process of sending the file size from ShadowRanger, and added a very simple loop to send chunks of data until the chunk comes up empty (end of the file).Receiving a file is also very straightforward with the same process to read the expected file size at the beginning, then a loop to read data into that file until we reach our expected size. We then use  as we receive data as an easy way to tell if the whole file has been sent yet.


Answer URL
https://docs.python.org/3/library/socket.html#socket.socket.sendfile
