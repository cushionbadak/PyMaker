Natural Text
This question already has an answer here:How to test multiple variables against a value?                    21 answers                This is my first every question here on this website. For a bit of background I am very interested in applying machine learning in preventative medicine as I believe this is what the future of medicine has in store. For this reason I have been teaching myself python via Rosalind.info. One question had us creating a function that can calculate the GC content of a sequence. One issue that I had was that when I used the first code, it evaluated to one. However, when I used the second code, it evaluated to the correct answer. If anyone can explain why this is the case that'd be much appreciated! First try: Second Try:I know it has something to do with the 'or' statement but I thought that both statements are essentially equivalent regardless of whether the '==' was there once or twice. 
The reason you get different outputs resides in:which differs from:In the first case, you are evaluating the truth value of the expression  which is a variable of type . Python documentation says that:By default, an object is considered true unless its class defines  either a bool() method that returns False or a len() method  that returns zero, when called with the object.Therefore,  evaluates always to true.Funny story:Even though  evaluates as , the following expression evaluates as:
It's not equivalent.  The first code is basically:or in other words,  is true, or  is true.  Clearly  makes no sense.  In general, 0 = false, and non-zero = true, so  will likely always be true.  Therefore, you're saying  and that will always be true, so the first if clause always wins.  Anything  is ...even  ;)
In python any non-empty string is interpreted as True (affirmative)thus  which is same as  is always interpreted as True, regardless of what is value of .While Python is often intuitive and elegant it follow some strict set of rules rather than common sense in interpreting code. The tradition of interpreting non-null/non-empty values as True value stems from C with which standard Python interpreter tightly inter-operates. It is not very strict or intuitive but often allows for simpler and elegant code.


Answer URL
https://docs.python.org/3/library/stdtypes.html#truth
