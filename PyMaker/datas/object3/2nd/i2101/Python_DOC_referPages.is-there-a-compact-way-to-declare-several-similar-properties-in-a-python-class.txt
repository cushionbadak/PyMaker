Natural Text
I am working within a larger python module where "projects" containing assemblies of dict-like class instances can be saved, but in order to save a class's attributes, they must be stored in a specific dictionary in the class. I can have my attributes accessible as simple attributes ( instead of ) by writing them as properties. But I'm up to 9 of these things, and giving each of them a getter, setter, and deleter seems like such a waste of space, especially since they're all so trivial. Is there a better way?Too long:How can I loop over property declarations so this will be shorter? BONUS: If I do a loop, is there a way to include minor customizations to some of the variables, should the need arise (maybe declare the things to list as keys in a dictionary, where values are instructions for minor customizations)?Testing / usage of above example:
Yes, you can create property objects dynamically, and add them to a class:However, it is probably much cleaner to use the attribute access customisation hooks and proxy the attribute names to the  dictionary there:
The best I could do was to loop over an  call to assign the results of a property-generating function. It's shorter than the thing in the question statement, but I feel like there must be a better way:This passes the test:


Answer URL
https://docs.python.org/3/reference/datamodel.html#customizing-attribute-access
