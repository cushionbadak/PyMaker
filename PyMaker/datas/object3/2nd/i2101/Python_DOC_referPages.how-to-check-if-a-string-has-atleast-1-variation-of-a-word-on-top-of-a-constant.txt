Natural Text
So my script pulls the label of products listed on a website and I'm constantly scraping to find a product that I know has this one specific keyword and another keyword that varies in spelling every now and then. The keyword constant is 'blazer' and the other variable keyword is '10' or 'ten'. Will this be the proper way to find a title that has the word 'blazer' in it and either '10' or 'ten'?So I want the function to run if the string variable compareName has both 'blazer' and 'ten' or 'blazer' and '10'
the  part is not going to give you the results you want. It'll return 'ten' every time! instead, you need to check whether 'ten' is in compareName, and also check whether '10' is in compare name, and put the or between the two, like so:
I'm sure there is a better way of doing this but to simply maintain your syntax and give the proper answer your  statement should be
You seem to have a fundamental misunderstanding of how programming works. I would highly suggest you do some reading up on Comparisons before moving on.  This statement here:Is essentially evaluating as:Assuming  is 'blazerten', it will evaluate to:Looks good? Nope! If  is 'blazer', it will evaluate the same thing.  Because the second condition  will always evaluate to  since it's not an empty string, so once you satisfy the first condition, the second and third condition is moot.The proper way is as the other answers mentioned, you'll need to do a separate comparison each:Note: brackets are not required if you respect the operation precedence.If you're feeling a bit adventurous and don't like to repeat yourself too much, you can try expressing this in a list comprehension:The second condition is now taken care of by the  function.  The caveat is of course, you forsake a little bit of readability.  The advantage though is if you need to compare more than just  and  in the OR clause, you can simply add to the list of the second condition.


Answer URL
https://docs.python.org/3/reference/expressions.html#comparisons
https://docs.python.org/3/reference/expressions.html#operator-precedence
https://docs.python.org/3/library/functions.html?highlight=any#any
