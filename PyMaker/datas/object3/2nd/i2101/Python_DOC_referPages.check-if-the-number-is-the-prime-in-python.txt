Natural Text
I am learning programming from scratch first time in my life. I am learning the Python language. My first difficult task is to write algorythm which checks if the number is the prime number. The script should work in very simple way. You enter:is_prime(29)and you should get output like this:The number 29 is the prime number.orThe number 29 is NOT the prime number.I did not check any solution on the internet. I did it by myself. My assumptions was as follows:from the school I remember that the prime number is divided only by 1 and by itself'0' and '1' are not the prime numberSo I wrote the code which checks if the given number is divided by all numbers from 2 to (number-1). For example if the given value is '6', the script checks first if the 6 is divided by 2. If this is true that means the number is NOT a prime number. If 6 would be not divided by 2, the script checks if 6 is divided by 3. If so, that means the number is NOT a prime number. In case of '7'number the script checks 7/2, then 7/3, then 7/4 then 7/5, then 7/6.The code is like this:But then, I actually realized three things:If the number is divided by 2, definitely it is not the prime numberIf the number is not divided by 2, it can be divided by 3 or by 5.If the number is not divided by 2, is not divided by 3 and is not divided by 5 that means that this number is the prime number. The only exceptions from this rules are these three numbers 2,3 and 5.And that's it. So I wrote the code as followsI think that both solutions are ok. Please correct me if I am wrongBut I would like to ask you which solution is better from the programming point of view?
Even though your first is correct and the second is not, you would gain speed in the algorithm by:Don't try to test for divisibility if the number you are tryingto divide with is already a factor of the previous numbers, e.g.when you have tried to divide with 2, you only need to try oddnumbers. If a number is not divisible by 2, it is clearly notdivisible by 4.You only need to test up to the square root ofthe number. At least one of the factors needs to be less than orequal to the square root.
Your original code looks correct. The second one doesn't rule out numbers like .
One more thing about my first solution which you confirmed is correct.The range to check inside the 'for' loop is: But correct me if I am wrong, I think that it is enough to have range = (2, number/2)For example let us consider the number 541 which is the prime number. My code will check modulo as follows:541/2541/3541/4...541/538541/539541/540But it is completely useless to check dividors greater than value 270 (which is almost the half of 541). If the 541 is not divided by 270 , it is obvious that it can not be divided by 271, 272, 273, 274, 275 and so on.So I think it is enough to have:I had to add + 1 because otherwise I get error when I run the function for the number 3.What do you think? Am I right that it is enough to have range for check (2, number/2) instead of (2, number) ?



Answer URL
https://docs.python.org/3/tutorial/controlflow.html
