Natural Text
Here is the standard algorithm to merge 2 sorted lists into 1. However, how can we merge multiple sorted lists into 1? 
You can use your own  with :This has running time O(kn). You could merge (unique) pairs until you have 1 final list left, which would improve it to O(n log k) (as the number of lists to merge reduces by half every time).
You can just sort it using :Gives result:
You could implement direct k-way merge using a heap and queues:OutputIf you have  lists and  elements this approach is 
Flatten with list comprehension and then sort   
Using a Priority Queue optimizes the comparison processTime Complexity: O(n log(k)) where k is the number of linked lists:The comparison cost will be reduced to O(log k) for every pop and insertion to priority queue. But finding the node with the smallest value just costs O(1) time.Space Complexity:O(n) Creating a new linked list costs O(n) spaceO(k) The code above present applies in-place method which cost O(1) space.And the priority queue(often implemented with heaps) costs O(k) space (it's far less than N in most situations)


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
https://docs.python.org/3/library/heapq.html
https://docs.python.org/3/library/collections.html#collections.deque
