Natural Text
I am trying to understand pythons asynico module and came across the following piece of code at https://docs.python.org/3/library/asyncio-task.html#asyncio.create_taskIt turns out that  , (or , but not both) can simply be removed and the code appears to be doing exactly the same. I find this very counterintuitive, what is happening here?Thank you for your time.
 does not start the coroutines in the tasks, it simply tells the coroutine  to wait for those two coros. The event loop is implicitly started with  which in turn means it will wait for the coro passed to it () to complete. It is up to that coro to extend its own lifetime (by ing) long enough to ensure that the tasks created from inside it can complete.As you see, all three coros are running without ing anything. It's just that the two  coros will take longer than the  that implicitly controls how long the event loop runs.If you made  wait for work done in the loop long enough, both tasks would complete:So, which task, if any, completes when you test commenting out the ing of  and/or  above is basically just a matter of timing, mainly influenced by HW, OS and possibly runtime (i.e. IDE vs. shell).P.S. Tasks only have three states: ,  and . Every task is in state  right after its creation and remains in that state until the coroutine wrapped in it either terminates (in any way) or until it gets cancelled by the event loop controlling it.
There are three different scenarios you've posed:No  statements (comment-out both)Use only  (comment-out the second)Use only  (commment-out the first)Here's your script; extend the sleep time on  a bit just for illustration's sake.1. No  statementsHere's the meat of :Importantly, the loop only cares that  is complete, and then cancels all other tasks that are associated with the running event loop.  (Each task is tied to an event loop when it is specified.)If you define  without any  statements,  schedules the tasks to be executed, but  does not wait for either one of them to complete.2. Setup:Output:Both tasks move from pending to running, but only  completes, because  only awaited on a task that takes ~1 second, not long enough for  to run.*  (Notice that  takes only 1 second.)3. Setup:Output:Both tasks move from pending to running, and now both  and  complete, because  awaited on a task that takes ~3 seconds, long enough for both tasks to run to completion.*This applies at least to my setup (Mac OSX, ...) but as mentioned in the other answer here, the timing may play out differently on another setup and, if the task run-times are similar, both may get to run in places like case # 2.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task
https://docs.python.org/3/library/asyncio-task.html#running-an-asyncio-program
https://docs.python.org/3/library/asyncio-task.html#creating-tasks
