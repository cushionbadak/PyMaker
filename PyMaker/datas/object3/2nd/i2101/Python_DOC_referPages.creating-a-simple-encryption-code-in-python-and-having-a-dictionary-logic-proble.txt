Natural Text
I'm a python student (by myself), and as an exercise I decided to try making a script to 'encrypt/decrypt' a message.The 'encryption algo' that I'm using is very simple, I learned during military service and it was used for troops in the field to encrypt radio messages only.I assume it's not a secure way to encrypt stuff. (If someone can comment on that, I would love to know more)Anyway, I'm doing it as an exercise for programming logic, but I've been stuck for a while now.Here it's how it works:You get a keyword/phrase (More often used with 2 words (vertical and horizontal) but for now I'm coding the 1 keyword only).Let's use 'PASSWORD' as key and the message: 'This is a sample message'. I would make a table with PASSWORD as colum index, and fill the table with the message:[Since the message didn't complete all the columns we completed it with letters that won't cause issues]Then, we determine the order for the scramble, deriving it alphabetically  from the key:So line by line, letter by letter, we would take the letters from the message according to the key-order, and form the encrypted message:'hsstaisi' for the first line, 'msmaeple' and 'axyszgex' for the second and third line.So the message would be 'hsstaisimsmaepleaxyszgex' [Usually transmitted as "hssta isims maepl eaxys zgex" to make it easier for the radio operator]Now the code:I manage to make it work (kind of...), here is how:I get the message and key, remove spaces, make both them into lists. I create a dictionary where every letter from the key(list) becomes a key in the dict, and the value is a number (from 0 to lenght of the key), like an iterator. { 'p':0, a':1, 's':2,... } #[Here is my problem]After that we sort the key(list) alphabetically and use it as iterator to call for the key(dict) that will call for a number that will be a index from the message list. (My explanation is confusing, may be easier to understand by checking the code bellow).Letter by letter the message is scrambled and appended in a new list, and then presented as 'encrypted'. It works! Except if the keyphrase has repeated letters (like ours 'password'). In that situation the corresponding value of a repeated dictionary key gets overwritten, because dict keys are unique. I've written several different versions for the same code, but I always get stuck in the dict problem, at some point or the other.Here is the piece of code:Can someone help me find a solution to this, or point me at the right direction? Considering that I'm still learning to code, any constructive criticism for the code in general is welcomed. 
Your error lies in how you assign column numbers to each of the key characters, using a dictionary:For repeated letters, only the last index remains;  from  maps first to 2, then to 3, so  ends up being :Don't use a dictionary; generate a list of paired index and character values, sort this by letter, then extract just the indices:I used the  function to generate the indices; it's achieves the same thing as your  loop in a more compact form.Because  produces  pairs and we want to sort on the values (the characters), the above code uses a sort key extracting the values ().Note that you don't need your key to be a list even, the above would work directly on a string too; strings are sequences just like lists are.Here's how this works:Now you can use these indices to remap chunks of the plaintext input to encrypted output.What you have is a called a columnar transposition cipher. For modern computers such a cipher is rather trivial to break. See https://crypto.stackexchange.com/questions/40119/how-to-solve-columnar-transposition-cipher-without-a-key for a discussion on how to approach cracking such a ciphertext.


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
