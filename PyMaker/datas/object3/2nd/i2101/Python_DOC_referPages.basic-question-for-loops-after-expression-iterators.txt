Natural Text
This question already has an answer here:Single Line Nested For Loops                    3 answers                I'm struggling to get an understanding of how Python treats for loops that come after variables.  I think it might have something to do with iterables/iterators in Python, but I'm not sure I really understand the usage.  Basically in the following code I understand the math of why it works to produces the combinations of the variables, but I don't get how this is a valid way to create a list.  In my experience with other languages, for loops always cone before the expressions and are properly nested when there is more than one.Can anyone explain what's going on here?
The inline  loops end up nested within each other. If you were to write it out, you'd do it like this:Basically, if you have multiple inline for loops, they get nested such that the first one you declare is the outer loop and the last one you declare is the inner loop. See this Stackoverflow question for a more detailed explanation.Python allows these "list comprehensions" as a shorthand, because it's easier and more "pythonic" (for a definition of what this means, open a python console and type ; the relevant platitude here is "Flat is better than nested"). You see how you can create the entire list in one line, in a very simple-to-understand manner, rather than having to write out four lines and build up the array slowly step-by-step like you'd have to in most other languages.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
