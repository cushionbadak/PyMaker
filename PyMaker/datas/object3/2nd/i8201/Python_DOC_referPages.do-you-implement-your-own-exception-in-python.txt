Natural Text
Do you implement your own exception class in python ?For now, I haven't encountered the situation I get in troublewithout original ones. I mean, built-in Exception is enough.What would be the main benefit of self-implemented Exception ?
Generally, the only times you should be defining your own exceptions are when you have a specific case where raising a custom exception would be more appropriate than raising a existing Python exception.For example, say I was implementing a command line argument parsing API, and I needed to account for the case where a user enters an invalid command line argument, whatever it may be. Now I could simply raise a Python exception like  or a , but that would be a bad design decision.I want to be able to convey to the user why an exception is being raised, not just that an exception is being raised. A better option would be to subclass the general exception class , and create a specific, custom  exception. Perhaps .Now instead of having to use a general Python exception, I can use my custom exception which helps to clearly and concisely inform the user of their error.This can also be useful if you want to be informed when a certain action fails in your code. For instance, if you create a function to download a certian file from the internet, it can raise a  exception to inform you when the is internet connection is down. This allows you to take a certain action based upon that exception being raised.Now you may wondering why in the second case you couldn't simply use a conditional statement to test if there was an internet connection before trying to use it. The reason you'd choose the later versus the former is because of the motto in Python that "asking for forgiveness is easier than asking for permission." This basically means that it's easier to ask Python to catch an exception if one is thrown, than to try to tiptoe around all possible errors using conditional statements.In the end, its not about "Do you implement your own Exceptions in Python?", but "When do you implement your own Exceptions in Python?"
Customs exceptions are best used when you want to convey information back to someone else who calls your code so they can figure out what to do.For example:Let's say I wrote a module  which provided a  function and you called it.When I write the function, there might be certain ways that this could fail:Now, when you  and , I might throw a ... because I don't know what you want to do in that case.Some people might want to try another breed, which wouldn't make sense if only a Chihuahua will satisfy you. Nor would that make sense if I threw an . If I say you're house is too dirty for a dog, asking for a different breed won't change my answer. But it's enough information you could take action.Which is the proper way of things: let whoever is calling you figure out what to do if an Exception occursMaybe you want to:RetryTry a different queryDisplay a message to your userSpin up a new serverLaunch a missileRelease the houndsThe point is: I don't know what the right thing to do is in your program. And the right thing for you could be different from others. So instead, I'll say "This is what went wrong, do what you want to do with that info."Some programs may fail entirely without internet access (Diablo III) while others can handle being offline (Starcraft). These programs will react differently to a .
It's useful if you want to catch a specific kind of exception that you make. You never want to catch just "Exception," because you might be catching some other exception that you don't know about. 
Custom exceptions can allow for clearly distinguishing between different kinds of errors. ComparewithWith custom exceptions, you embed information about the error in the type of the exception itself, which makes it easier to catch only the specific error you want without having to remember to re-raise any errors you caught accidentally.


Answer URL
https://docs.python.org/3/library/exceptions.html
