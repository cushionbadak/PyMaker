Natural Text
I am catching two exceptions in Python in such way:if ex1 raises an exception then I want to skip ex2.if ex1 does not raise an exception the I want to try ex2.What is the most elegant way to code it?My current approach is to wrap it in a function block as below and use return in right place:and then I just call the function in right place myExceptions(someArgs)
EDIT: This will work as you described:When an exception occurs, it skips the rest of the try block and continues at the exception... it doesn't go back.You are doing something like this:A better way is, as Christian suggested:Both of which output:Note this will skip the second set of lines automatically if the first set fails, and lets you do different things based upon which exception occurred.I think you're confused. After a  above, execution continues after the  blocks. The rest of the  is skipped, which is what you seem to want:That's why I can do:Only one of those prints will happen.
Python allows you to use multiple exception clause in your  statements. Add all of your code from the two try blocks into one, and simply use two except clause to catch both potentially errors:
How about this? However, in you should usually be more specific with exceptions, see here: https://docs.python.org/3/tutorial/errors.htmlfor example, use "except ValueError" to only except that one type of error.


Answer URL
https://docs.python.org/3/tutorial/errors.html#
https://docs.python.org/3/tutorial/errors.html
https://docs.python.org/3/tutorial/errors.html
