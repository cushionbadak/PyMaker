Natural Text
I have a specific problem.Main content of program starts with creating Process with dbus loop, where I listen for signals.Content of signals I store in queues. In next part of main I have a threadpool.When some thread takes item from queue, it use specific function(detection) to handle request - based on content of item from queue. (There is operation on database, from where I take data and make some operations depends on request)Every thread in thread pool starts one more thread, which should handle signals (current status and interrupt).For example: I receive signal, which means I have to handle something on numbers. Any thread from threadpool takes this item from queue and starts function which handle something on numbers - it can take long time. So after any time, I receive signal for current status and I need to send current status of detection - that's why I use threads (for shared memory).  Also I can receive interrupt signal from D-Bus ("it takes too long time, so stop this detection and be free for another request"). And the interrupt is the main problem...So my main questions are:Is there any way, I can raise exception on interrupt signal and stop function (detection)? (I just found solution, but only for catch in main... but I need to catch it in thread which is in threadpool and raise in thread which is in thread in threadpool)Second question is about GIL... does my thread with signal receiving receive all signals? I think it doesn't... (Yes, I use )program:and I hoped, something like this will work... (but it doesn't)
Read about 18.8.1.2. Signals and threads  Python signal handlers are always executed in the main Python thread,  even if the signal was received in another thread.  This means that signals canâ€™t be used as a means of inter-thread communication.  You can use the synchronization primitives from the threading module instead.  Besides, only the main thread is allowed to set a new signal handler.Read about 17.1.7. Event Objects  This is one of the simplest mechanisms for communication between threads: one thread signals an event and other threads wait for itIsn't clear why you have to use .Why could your  not handle detection?  For instance, the following should be do it:  


Answer URL
https://docs.python.org/3/library/signal.html#signals-and-threads
https://docs.python.org/3/library/threading.html#event-objects
