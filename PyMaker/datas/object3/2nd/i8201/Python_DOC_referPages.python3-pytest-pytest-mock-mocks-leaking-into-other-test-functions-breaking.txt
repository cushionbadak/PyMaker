Natural Text
NOTE: All Details about my setup (python version, modules etc) listed at bottom of question. Apologies in advance if this issue is blatant, but i've been wrestling with it for several days now. Hopefully someone can shed some new light.I'm in the process of converting unit tests for my personal project from  -> . Previously I was using the built-in  module, but now i'm trying to use the  plugin instead. I have a sneaking feeling that my tests are leaking mock objects into one another.Here's why:High-level details:When I run my tests using the following command:Everything is fine till we get to . At which point I get the following error:BUT! If I filter out all of the other tests except for the problematic one then I get: via I also tried manually commenting out the following 2 tests and they allowed me to successfully run all the tests again:Can anyone see anything blatently wrong with my setup? I've read several blog posts on "where to mock", and looked at the docs themselves several times, not sure what i'm missing. https://docs.python.org/3/library/unittest.mock.htmlMy Setup DetailsHere is everything that might be required to solve this. Let me know if I need to provide any more information! Also ... please excuse how messy my code looks and all of the comment blocks. I'm a big note taker when i'm learning something new ... I'll make everything more pythonic and cleaner in the near future :)My code:My Test:My folder structure( Note I removed a couple things since it was overly verbose ):Other details( Extended pip freeze just in case of incompatibilities ):Edit: ( One more detail, why didn't I just us the patch context manager or decorators ? ) has a pretty good section on their design choice, and why they decided to move away from nested  statements and decorators piled on top of each other. Link is here, but let me mention a couple here just in case:So, if it is possible to make my code a bit cleaner using this plugin, I would like to make that happen. If that isn't possible, then maybe I need to reconsider things.
Why not run your mocks with function decorators or context managers to make sure they get closed out? For example, in ,  instead of doing all of this to mock :Why not instead just use a context manager and do:It'll be much terser, and will make sure your mock doesn't leak. Even better, if your mocks apply to the whole function (I think some of them do), you can use a decorator at the top of the function:
The error you get is that code under test hit  instead of .The detail is that some object was assumed to have a  member, and it didn't.I suspect once you solve that riddle, the rest will be just fine.I see someone opened https://github.com/pytest-dev/pytest-mock/issues/84 (you?), let's wait for pytest devs to analyse it in case there's an incompatibility between 2 plugins.


Answer URL
https://docs.python.org/3/library/unittest.mock.html
https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack
