Natural Text
Suppose that I create a parser with a default value for an argument, and then give it a subparser with a further default value for an argument.This is all fine. But suppose that I have a function which creates and returns the parent parser  from above, but with no direct access to the subparser.How can I still print out defaults for the subparser arguments? Or get a handle to each subparser separately?There doesn't appear to be any more attributes or methods from  or from  that could display defaults.The overall problem is: how to programmatically access subparser defaults when you only have a handle to the parent parser?
You got it right.  But maybe I can explain a few details. creates an  object (or actually a subclass depending on the  parameter).  You can save a pointer to that object in your own environment.  But that Action is also collected in the  list.  That's how the  keeps tracks of its arguments.  Reading  should always be safe.  Modifying it risks breaking breaking the parser.   have access to the list.is a specialized version of , creating and returning a  object.   is that object.  And as noted from the earlier answer, you can find it in the  list by searching for the correct subclass.  (To the main parser,  is just another positional argument.) maintains its own specialized dictionary of , accessible as its  attribute.  The main parser does not have any record of those sub parsers.creates a parser, puts it in that  map, and returns a reference for your own use (with  etc).  Each sub parser has its own  list. (and its own ).Look at the code for the  method:It uses the  attribute. And looks at the  attribute of the Action.  is the dictionary updated by the  method.  That method also copies its parameters to the relevant Action objects.   checks that in case the  is one of those defaults that isn't tied to a particular Action.  https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.set_defaultsI haven't used the  attribute much.  Looking at the  method I see it is actually an .  Argument_groups are primarily a  tool, used to group help lines.  The relationship between a parser object and its argument_groups is a little tricky, and probably not something you want to use.Here's an example, with more (too much) detail:The  of  is actually the same dictionary as  is also identical to .  But the group does maintain its own list actions (used in the help display).So you could use  to find the  action object instead of searching the  list.On second thought,  might not be so useful.  If you don't give it a special title, then it is identical to , the argument group of all positional arguments.  So you'd still need to verify the  class.
Based on this answer it looks like it can be done as follows:thenprints  as expected.


Answer URL
https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.set_defaults
