Natural Text
I am attempting to pass a shared secret to child processes. In a Linux environment this works. In a Windows environment the child does not receive the shared secret. The three files below are a simple example of what I'm trying to do:main.pymodule1.pymodule2.pyIn an Ubuntu 14.04 environment, on Python 3.5, I receive the following output:In a CentOS 7 environment, I receiving the following output:Using the Windows Subsystem for Linux on Windows 10 (both before and after the Creator Update, so Ubuntu 14.04 and 16.04) I get the following output:However, in both Windows 7 and Windows 10 environments, using either 3.5 or 3.6, I am getting an  instead of the above output:I am using a shared ctype. This value should be inherited by the child process. Why do I receive this  in a Windows environment, but not a Linux environment? 
As mentioned in one of the posts automatically linked on the sidebar, windows does not have the  systemcall present on *NIX systems.This implies that instead of sharing global state (like NIX Processes can do), a Windows child process is basically completely separate. This includes modules.What I suspect is happening is that the module gets loaded anew and the  you access inside  isn't quite the module you expected.The multiprocessing guidelines explicitly mention that module-level constants are exempt from the rule: "variables may not contain what you expect". Well in either case, the solution is to explicitly pass the module you want to the child process like so:module 2main.py


Answer URL
https://docs.python.org/3/library/multiprocessing.html#shared-ctypes-objects
