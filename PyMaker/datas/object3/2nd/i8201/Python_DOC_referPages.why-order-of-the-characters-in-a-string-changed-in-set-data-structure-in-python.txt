Natural Text
This question already has an answer here:Why is the order in dictionaries and sets arbitrary?                    6 answers                When I send a string as a argument in set data structure in python, surprisingly the order has been changed for some characters. Suppose, If i write Then I should expect the set c to be shown as {'a', 'b', 'c', 'd'} but it shows output like that:-And more importantly, as far i know set in python only accept an object that is iterable.So, it is obvious that set would iterate through the string and should maintain the correct order of the string. I have tested it several times. And every times the order has been changed surprisingly....I know in python there is nothing called character. A single character is also defined as string. But, since iteration occurs through the string this should be ordered. So, could someone explain me the reason of the scenario? Is there any insightin the iteration process or python VM issues ? * I intended to know the iteration methodology of strings in set, not dict*
If you want unique characters while still preserving the order of first seen letters, you could use an :Sets have one very important job: to tell if an element is included in the set, and to tell it as fast as possible. Keeping the insertion order isn't on the set todo-list.
Sets, like dicts, are not ordered. Any iterable, added to a set, will not preserve order.
Refers to the set python docs here https://docs.python.org/3/tutorial/datastructures.html#sets you can see also a brief demo code.
Python store set elements in optimized way so that it can apply operations with lesser runtime complexity i.e. less number of iterations will required in Union/Intersection by Python internally.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#sets
