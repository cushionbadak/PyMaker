Natural Text
Using a for loop, I'm iterating over the lines in a file. Given this line: I need to reformat index [6] from '"TRUE"' to the boolean True. Full expected output: d={'Tornadus, (Incarnate Form)': (641, 'Flying', None, 5, True}I used:But I get this error:Traceback (most recent call last):  File "tester5p.py", line 305, in test_read_info_file_05  self.assertEqual(read_info_file(DATAFILE),info_db5())File "/Users/kgreenwo/Desktop/student.py", line 52, in read_info_file      line[5] = FalseTypeError: 'str' object does not support item assignmentHow can I assign it WITHIN the for loop? To see my full code:Reproducible example:  input: (don't forget to skip first line!)Output:          d={'Bulbasaur':(1,'Grass','Poison',1,False)}
It is quite unclear from your example, but my thoughts go to:Now you can mess with indexes and see whether you have more errors.And if you use:It will work.
Your input file looks like a comma-separated values file. If it is, what you want is pretty easy.Let's suppose your input file is literally this:Input_file-43644346.txtYou could do something like that:Here are some key points of this solution:This example is in Python 3's syntaxUsing  makes sure that the input file is closed timelySince a file object is also an iterator, you can skip the first line by using .  will give you a tuple containing the information from a row. It will process quoted string like you would expect.The expression  will yield a boolean expression. You don't need to use an  statement.An empty string is equivalent to False. Any other string is True.Conditional expressions can be used to change an empty string to  like you wanted. is useful if you already have a dictionary or a list of tuples you want to use its values to update an dictionary but you are better off using But my guess is that your file is more like that:Input_file-43644346b.txtYou can then use  to read your data:That enables you to use "column" names to identify different parts of each rowYou can simplify even more your code by using a dictionary comprehension:
Instead of reassigning it, I just did this and it worked:


Answer URL
https://docs.python.org/3/library/functions.html#next
https://docs.python.org/3/library/csv.html#csv.reader
https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator
https://docs.python.org/3/library/stdtypes.html#dict.update
https://docs.python.org/3/library/csv.html#csv.DictReader
https://docs.python.org/3/tutorial/datastructures.html#dictionaries
