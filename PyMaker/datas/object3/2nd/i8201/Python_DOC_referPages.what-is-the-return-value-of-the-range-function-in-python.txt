Natural Text
I thought that the range() function returns a list with the arguments that you have put inside the parentheses. But when I type  in IDLE, I get  as output. Similarly, when I type , I also get  as output. I am currently using python 3.5.I am currently studying python with the following eBook: "How To Think Like a Computer Scientist" and in that eBook, they provide active code blocks where you can run python code. And when I run  in there, I do get the list that I expected, i.e. .Can someone explain this to me? Thanks in advance!
The book you are reading probably uses Python 2, where  returns a list.In Python 3,  returns an immutable sequence type instead.
Your book was probably written using Python 2.x. In Python 2.x the range function actually returned a list that the for loop would iterate through. In Python 3.x, the range function is it's own type, and is actually a generator function so the numbers are produced on the fly as the for loop is executing.You can still create a list from a range function if you pass it into a list like so.Which would output a list with the following contents.
 return an instance of class . You can check it by .And what you expect can be got by .
according to this:So in Python 3.x, the range() function got its own type. In basic terms, if you want to use range() in a for loop, then you're good to go. However you can't use it purely as a list object. For example you cannot slice a range type.however if you call  on it, the  function will try to create a string representation of the range-object, and this string-representation is equivalent to the string representation of a list.If you want the list you can do 
print(range(10)) returns range(0, 10) as outputIn many ways the object returned by range() behaves as if it is a list, but in fact it isn’t. It is an object which returns the successive items of the desired sequence when you iterate over it, but it doesn’t really make the list, thus saving space.We say such an object is iterable, that is, suitable as a target for functions and constructs that expect something from which they can obtain successive items until the supply is exhausted. We have seen that the for statement is such an iterator. The function list() is another; it creates lists from iterables:list(range(5)) returns [0, 1, 2, 3, 4] as output


Answer URL
https://docs.python.org/3/library/functions.html#func-range
https://docs.python.org/3/library/stdtypes.html#range
