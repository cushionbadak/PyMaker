Natural Text
After going through this question give the dictionary view of the global namespace( module).Any new symbol(name), say  added to this namespace, will become a member of that global name space.where  is a new  type key, value is the  type object.further on using  module(say ), in current namespace,It says,  module is not a dictionary because there is no attribute by name .But, all the code from my application(in runtime), will be part of the dictionary shown by  function.Question:Ignoring coding standards, In JavaScript, I can use dictionary notation to write my complete code, for example,In python, Why global namespace members(keys) are only viewed as dictionary members but not their values(like  object)? Despite all the subsequent code of your program, is part of that dictionary.
In Python, there is a difference between attribute references, the syntax where you use dots to access attributes of objects, and subscriptions, where you use square brackets to access items of an object.You can use this difference in your custom types by using the special methods  (and the related methods for setting etc.) and  (and related methods). So you can implement your types to support both syntaxes to achieve the same; or you can use it to assign difference semantics to each syntax as it is the case for standard Python types.As for why this distinction is made, this is simply a language design decision that was made, which ultimately makes the language more powerful. For example, this allows a dictionary to have a key , when there is also an attribute—a method in this case—called .Also, not depending on the equivalence of  and  avoids limiting subscription keys to strings, like it is the case with JavaScript. Instead, we can use any hashable object as a key. This makes the  type similar to JavaScripts newer  type which also supports a wide range of key types. Note that because of JavaScript’s inferior syntax choices, there are explit methods  and  to access the map items.
1.JS doesn't have dictionaries. They are emulated by using objects.What you are doing when defining a dictionary or associative array, or however you want to call it in javascript is assigning values to attributes of a new object.2.Python has actual data type dictionary i.e. dict() which IS AN OBJECT (everything in Python is) specialized to store pairs key: value and optimized for fast access.This is actually a container that holds Python scopes. I.e. when you callYou do not get a view of global variables. You do get a pointer to the real global scope.So, if you say:you will be able tobecause you directly inserted the variable abcdefgh into interpreters global namespace holder.This happens when you use = assignment operator automatically.So, globals() dictionary contains real values, which are objects, but not necessarily dictionaries.In JS what you describe works, because what you are actually doing is in Python this:And if you want to see them as dict, then you have to get to the somevar instance's namespace dictionary:Otherwise it is:And if you want the obj() instance to act as a dict() then you have to implement the dictionary's interface for it.In JS it is always just another object, so syntax continues to work regardless on how it was defined in the first place.


Answer URL
https://docs.python.org/3/reference/expressions.html#attribute-references
https://docs.python.org/3/reference/expressions.html#subscriptions
https://docs.python.org/3/reference/datamodel.html#object.__getitem__
https://docs.python.org/3/reference/datamodel.html#object.__getattr__
https://docs.python.org/3/library/stdtypes.html#dict.update
