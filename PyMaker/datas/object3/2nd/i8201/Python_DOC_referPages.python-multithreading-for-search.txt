Natural Text
I have a class that I have written that will open a text document and search it line by line for the keywords that are input from a GUI that I have created in a different file. It works great, the only problem is the text document that I am searching is long (over 60,000 entries). I was looking at ways to make the search faster and have been playing around with multithreading but have not had any success yet. Basically, the main program calls the  function which takes the line and breaks it into individual words. Then over a loop checks each of the words against the keywords from the user. If the keyword is  that word then it says its true and adds a 1 to a list. At the end, if there is the same number of keywords as true statements then it adds that line to a  that is returned at the end of main.What I would like to do is incorporate multithreading into this so that it will run much faster but at the end of the main function will still . Any advice or direction with being able to accomplish this will be very helpful. I have tried to read a bunch of examples and watched a bunch of youtube videos but it didn't seem to transfer over when I tried. Thank you for your help and your time.   
While threading and/or multiprocessing can be beneficial and speed up execution, I would want to direct your attention to looking into the possibility to optimize your current algorithm, running in a single thread, before doing that.Looking at your implementation I believe a lot of work is done several times for no reason. To the best of my understanding the following function will perform the same operation as your  but with less overhead:Try this function, as is, or slightly modified for your needs and see if that gives you a sufficient speed-up. First when that is not enough, you should look into more complex solutions, as it invariably will increase the complexity of your program to introduce more threads/processes.
You can split the file into several parts and create a new thread that reads and processes a specific part. You can keep a data structure  global to all threads and add lines that match the search query from all the threads to it. This structure should either be thread-safe or you need to use some kind of synchronization (like a lock) to work with it. Note: CPython interpreter has a global interpreter lock (GIL), so if you're using it and your application is CPU-heavy (which seems to the case here), you might not get any benefits from multithreading whatsoever.You can use the multiprocessing module instead. It comes with means of interprocess communitation. A  looks like the right structure for your problem (each process could add matching lines to the queue). After that, you just need to get all lines from the queue and do what you did with the  in your code. 


Answer URL
https://docs.python.org/3/library/multiprocessing.html
