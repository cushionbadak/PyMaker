Natural Text
I am following this tutorial: GitHub LinkIf you scroll down (Ctrl+F: Exercise: Select the most-reviewd beers ) to the section that says :The dataframe is multindexed:To select the most-reviewed beers:My question is the way of how the IndexSlice is used, how come you can skip the colon after top_beers and the code still run?There are three indexes, ,  and . Why does  work (without specify what to do with the time column)?
To complement the previous answer, let me explain how  works and why it is useful.Well, there is not much to say about its implementation. As you read in the source, it just does the following: From this we see that  only forwards the arguments that  has received. Looks pretty stupid, doesn't it? However, it actually does something. As you certainly know already,  is called if you access an object  through its bracket operator . For sequence-type objects,  can be either an integer or a slice object. We rarely construct slices ourselves. Rather, we'd use the slice operator  (aka ellipsis) for this purpose, e.g. .And here comes the point. The python interpretor converts these slice operators  into slice objects before calling the object's  method. Therefore, the return value of   will actually be a slice, an integer (if no  was used), or a tuple of these (if multiple arguments are passed). In summary, the only purpose of  is that we don't have to construct the slices on our own. This behavior is particularly useful for .Let's first have a look at the following examples:So all colons  are converted into a corresponding slice object. If multiple arguments are passed to the index operator, the arguments are returned as an n-tuple. To demonstrate how this could be useful for a pandas data-frame  with a multi-level index, let's have a look at the following.So in summary,  helps to improve readability when specifying slices for rows and column indices.What pandas then does with these slice specifications is a different story. It essentially selects rows/columns, starting from the topmost index-level and reduces the selection when going further down the levels, depending on how many levels have been specified.  is an object with its own  function that does all this.As you pointed out already in one of your comments, pandas seemingly behaves weird in some special cases. The two examples you mentioned will actually evaluate to the same result. However, they are treated differently by pandas internally.Admittedly, the difference is subtle. 
Pandas only requires you to specify enough levels of the MultiIndex to remove an ambiguity. Since you're slicing on the 2nd level, you need the first  to say I'm not filtering on this level.Any additional levels not specified are returned in their entirety, so equivalent to a  on each of those levels.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getitem__
https://docs.python.org/3/library/functions.html#slice
