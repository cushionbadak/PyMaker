Natural Text
Suppose I have an iteratorand I want to count consecutive mean values and store them in iterable with elementsthis could be done by converting iterable to / and counting its slices like(more info about  function at docs)So my question is more general: is there any way to get consecutive slices of iterable using standard library without wrapping with /?We can write utility function likeand thenbut it also looks awfulP. S.: I know that it will be better to count consecutive mean values likebut it is not what I am talking about.
it seems like there is no standard way of getting consecutive slices of iterable (iterator///etc)so better way i've found out is to use a bit modified utility function from original questionModifications:added copying of  (btw there are many ways of doing that), because previous version in case of wrapping in will give us  with  repititions of  with all numbers in them ( equals to 100 in example):Functional approachAfter writing a bit more I realized that this can also be done using  module likehere we are prepending empty  using  as initial slice, which can be ignored in result using  likebut it seems legit to leave it as one slices since empty slice is also a slice afterall.In comparison with previous solution this is still 4-lines-of-code function that does nearly the same thing, but less "spaghetti" IMO.
You could have an generator that directly s the means, with local variables containing the running total and count. (Actually you could get the count for free by iterating over  and adding  to the index. Is that enough of a hint?
Take a look at LinkIf you don't know the length, here you have a reduce version, highly ineficcient in memory:So, in the end we are doing almost the same as your code, so you should go with it or use a list instead of a generator ande then use slices of the list ().EDIT:I've been thinking about this, it was easily solved with  , so I generilezed the concept and get a very good result:


Answer URL
https://docs.python.org/3/glossary.html#term-iterable
https://docs.python.org/3/glossary.html#term-slice
https://docs.python.org/3/library/statistics.html#statistics.mean
https://docs.python.org/3/glossary.html#term-iterable
https://docs.python.org/3/glossary.html#term-iterator
https://docs.python.org/3/library/stdtypes.html#list
https://docs.python.org/3/library/stdtypes.html#tuple
https://docs.python.org/3/library/itertools.html#itertools.chain
