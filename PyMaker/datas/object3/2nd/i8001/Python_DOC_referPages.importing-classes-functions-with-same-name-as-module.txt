Natural Text
Say I use a python package with the following structure: contains the class  and  contains the function .When I want to import the function/class do I have to writeor can I writeMore generally asked:Can I always omit the class/function name, when I import a module with the same name as the class/function?
No, you can't omit the module or object name. There is no mechanism that'll implicitly do such imports.From the Zen of Python:Explicit is better than implicit.Note that importing the module itself should always be a valid option too. If  imported the  object instead, then you'd have to go out of your way to get access to  module itself.Moreover, such implicit behaviour (auto-importing the object contained in a module rather than the module itself) leads to confusing inconsistencies. What does  add to your namespace? Would referencing  be the module or the contained object? What should happen to code importing such a name, when you rename the contained object? Does  then give you the module instead? Some operations will still succeed, leading to weird, hard to debug errors, instead of a clear  exception.Generally speaking, Python modules rarely contain just one thing. Python is not Java, modules consist of closely related groups of objects, not just one class or function.Now, there is an inherent namespace collision in packages;  can refer both to names set on the  module, or to a nested module name. Python will first look at the  namespace in that case.This means you can make an explicit decision to provide the  and  objects at the package level, in :Now  and  will give you those objects, masking the nested modules.The general mechanism of importing objects from submodules into the package namespace is a common method of composing your public API whilst still using internal modules to group your code logically. For example, the  exception in the Python standard library is defined in the  module, then imported into . I generally would discourage masking submodules however; but  and  into a module with a different name.


Answer URL
https://docs.python.org/3/library/json.html#exceptions
