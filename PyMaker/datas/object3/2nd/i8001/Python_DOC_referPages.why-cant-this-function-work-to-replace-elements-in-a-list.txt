Natural Text
Trying to change all 5's into 100's. I know you should use list comprehension but why doesn't this work? Someone can explain theoretically? Thank you.
The Python assignment operator binds a value to a name. Your loop  binds a value from  to the local name  on every iteration.  then binds the value  to . This does not affect the original sequence, and the binding will be changed again in the next iteration of the loop.You can use  to list the indices along with the values of  and perform the binding that way:Even simpler may be to just iterate over the indices:The options shown above will modify the sequence in-place. You do not need to return it except for convenience. There are also options for creating a new sequence based on the old one. You can then rebind the variable  to point to the new sequence and drop the old one.The easiest and probably most Pythonic method would be using a list comprehension:You can also use :The output of  is a generator, so I have wrapped it in  to retain the same output type. This would not be necessary in Python 2, where  already returns a list.
This line: Gives the local variable , which was originally assigned that value in ,  the value .To change the value in the sequence, you could do:Enumerate returns two objects each time it is  called on a sequence, the index as a number, and the object itself.See the docs on lists and (Python 2) enumerate.You could have also written:Which you may prefer, but is sometimes considered less clean.
Take the following example:You could instead loop through the indices and set the value at that index in the list:
You should update the element at the list, like that: is a new variable created inside the loop, therefore it's not the same reference as the element inside the list.NOTE: Note that list is a mutable object, therefore changing seq inside the function will affect the list even outside the function.You can read more about mutable and immutable in here


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
https://docs.python.org/3/library/functions.html#map
