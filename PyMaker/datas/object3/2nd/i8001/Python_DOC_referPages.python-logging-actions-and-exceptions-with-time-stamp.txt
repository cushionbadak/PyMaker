Natural Text
I am writing a script that connects to N hosts via SSH ... queries the 3rd party system and extracts data and then displays all the collected data in a certain format.I want to log all the actions the script is executing as well as any exceptions encountered on to the console and to a log file, so that the user can see what is happening while the script is running (If someone used Ansible - then just like the output we get on the console and logs when running the playbooks)Expected output[timestamp]: connecting machine 1 [timestamp]: connection established[timestamp]: querying database xyz[timestamp]: ERR: invalid credentials[timestamp]: aborting data extraction[timestamp]: connection closed[timestamp]: ---------------------------[timestamp]: connecting machine 2      [timestamp]: connection established[timestamp]: querying database xyz[timestamp]: extraction complete[timestamp]: closing the connectionI hope I am able to explain it correctly - Logging actions and exceptions with timestamp for the whole script and all the data iterations.Please advice and if possible with an example script that uses the technique. Thanks
You can have a look here for some more detailed guidance. Here's how I usually set up logging on my stuff:This will produce output like this, for any event from  upwards:The above is produced by a line in the  function of my app, that reads:Another line in my  function:And another two lines in  again:Then it's a matter of how much information and context you need on each log entry. Have a look here at formatting the entries, and here at formatters. I'll have these sent to me via email, anytime the app runs triggered by , by adding  to the top of my  file, and making sure my system email is properly set.If you want to set it to go to the console and a file, you'll just need to set two different handlers. This answer provides a good example, where you'd set a  to log to the console, and a  to log to a file. So instead of setting it up as I mentioned above I usually do, you could try:
Check out the logging module here, there's a nice example section with both basic and advanced applications.  Doing stuff in the format you've described appears to be included in the tutorial.


Answer URL
https://docs.python.org/3/howto/logging.html#logging-basic-tutorial
