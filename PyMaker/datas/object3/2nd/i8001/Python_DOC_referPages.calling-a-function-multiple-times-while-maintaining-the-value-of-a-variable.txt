Natural Text
The goal of my code is to try and get my function to only run on the first call, and after to just return the answer of the first call. However it appears "answer" is not staying as the appended version for the second call. How should I fix this? Here's an example of what I would be running:For example, I would want to call multOnce(1,2) and then multOnce(3,4), but for both calls I want to return 2.
The thing that you want to do is called "memoization". First of all, in your code the function never actually gets called, you are just storing the function object itself. In order to fix that you need to create a wrapper function inside  and return it:(here I am not considering the keyword arguments to  for simplicity)Then we have the next problem: the answer gets stored in the same place for any arguments of ! So if you call  with different arguments the second time, it will return the same value. This can be fixed by keeping a dictionary with keys being the argument tuples:And the last thing is that keeping the answer database outside makes it global for all functions wrapped in . It is much more convenient to keep it in a closure, so that it is unique for every application of :Of course, this is a very common pattern, so Python already has an implementation of it: :
I think, class attribute will be more reliable in your case as you need to maintain same list over all calls down the line.Since  is defined at class level, every call will use the same reference of the list  as below.OUTPUT:Is this answer your concerns?
You pass method as parameter into your method , you didn't provide any value for method , your  is the method mult , you can provide 2 parameters for it, for instance:Alternatively, keep  unmodified, and when you invoke mult with 2 numerical values as:
Why don't you use a closure to do this rather than a class?


Answer URL
https://docs.python.org/3/library/functools.html#functools.lru_cache
