Natural Text
I'm trying to understand how Python's type annotations work (e.g.  and  - not  or ). Specifically I'm interested in how  works, so that I can create my own custom annotations.I see that  is defined as:I'm familiar with  but I can't find any documentation on this . Is this a keyword or just an argument, and if so, where does it come from and does it do what I'm after? Is it even relevant for ?
The  and  have hooks in  and  that the  generics also use.If you want to provide your own generics, you really want to study the  module source code, specifically how  and  are used to define the other Generic types like ; mostly such checks are delegated to . You can define your own ABC with such a hook, then define a Generic that subclasses it. It is the  metaclass here that also gives the  keyword argument meaning. Such internals are still sparsely documented because the  implementation is still in flux, the module is still provisional. The  argument is stored as  and is used in a custom  implementation; for  it simply comes down to translating  to .Note that support for run-time checks is deliberately limited; static type checkers will not actually run those hooks. See the structural subtyping discussion in the mypy tracker for further discussion on how the developers are thinking about how to provide better support for complex custom classes that may or may not implement enough methods to be deemed a mapping or a sequence or similar.


Answer URL
https://docs.python.org/3/reference/datamodel.html#class.__instancecheck__
https://docs.python.org/3/reference/datamodel.html#class.__subclasscheck__
https://docs.python.org/3/library/abc.html#abc.ABCMeta.__subclasshook__
https://docs.python.org/3/glossary.html#term-provisional-api
