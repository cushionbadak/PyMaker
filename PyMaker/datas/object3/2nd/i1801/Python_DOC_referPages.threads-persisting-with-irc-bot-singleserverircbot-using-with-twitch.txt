Natural Text
What is the correct way to send a disconnect signal to a thread containing a ?I am instantiating bots that connect to twitch with When the stream no longer exists, no matter what I've tried, I haven't been able to get the thread to successfully end. How should I go about sending a signal to the thread that tells it to exit the channel kill the bot and then itself?The code for the  method can be found here https://github.com/jaraco/irc/blob/master/irc/bot.py#L331My first thought is to override that method with a while loop that has an exit condition. I haven't had any luck with that so far though.Furthermore, there is a  method here https://github.com/jaraco/irc/blob/master/irc/bot.py#L269 but how can I call that method when the thread is executing an infinite loop?Trying to kill the threads directly ends up with them persisting, and eventually throwing errors about the total number of threads that my process is running.Edit for the bounty: I would also accept an answer that describes a better way to handle multiple IRC bots at once.
I don't think you could (or should) kill a thread directly, but you could stop the task running on that thread. Then the thread would be inactive and you could remove it from the threads list, if you like. I'm not familiar with , but I'll use the class below as an example.  In Python3, threads have a  attribute, from which we can access the target function/method. We could use this attribute to access the target's object and call the  method (eg: ). However I think it would be best to subclass  and store the the target object in a variable, as  is a private attribute, and also for compatibility reasons.Using this class we would pass a  object as a target, and the  method would be called from . Now we can use  to stop the task running on this thread.  Note that I'm waiting 1.1 sec to test if the thread is alive. That's because the target () will take up to one second to stop. This method doesn't kill the thread, but calls  and waits for the task to finish. If you want to end the task immediately (and loose any resources used by the task) you could use a  and end it with . You should also choose multiprocessing over multithreading if your task is performing more CPU operations than IO operations, because processes are not limited by the GIL.  Afrer stydying the source code, I noticed that  calls , so we can't use it to terminate the task because it would stop the program. It seems the reason for this is that  calls the parent object's , which then calls the  method of a  object. This method starts running  in an infinite loop with no break condition.   A possible solution is to subclass  and use a boolean variabe to break the loop. This class should override  and , in order to stop the bot running on a thread. The  method would set the flag to false, and  would call  in a loop.Now we can stop the bot either by calling  on the thread running the bot, or by calling the  method of the bot directly.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.terminate
