Natural Text
I have a project I am working on but I have brought out the problem into a small sample code below. I first create a socket and then spawn a thread to accept connections (so I can have multiple clients connect). When I receive a connection, I then spawn another thread that will listen on that connection. I am also in a loop that gives me a prompt where I can enter anything, and it will print it back out to me.The issue lies when I recieve something through the socket. It will print to the screen. But when I try to type anything in the console, the text that is on my console that came from the socket gets removed. I want to keep everything from the socket to remain on the screen.Pictures can be found here of what it is doing: https://imgur.com/a/hCWznfE
The answer to your question in the subject line (about buffering for , to which  writes by default) is essentially no: each thread talks to the same  object, which just has one buffer in general, though of course you can alter  if you like, and you can supply  arguments to .This specific part, however, is explainable:But when I try to type anything in the console, the text that is on my console that came from the socket gets removed. I want to keep everything from the socket to remain on the screen.Python's input reader goes through a  library by default.  There are multiple different readline libraries with varying behavior, but most of them provide input history, line editing, and other fancy features.  They tend to implement these fancy features by moving the cursor around in your terminal window—assuming you're using some kind of terminal window in the first place—and using "clear to end of line" operations at times.  These operations will often interfere with, and overwrite or erase, other output that occurs before, during, and/or after these fancy tricks.The precise details vary, quite a lot, based on your OS, terminal emulator, and which readline library your Python is using.


Answer URL
https://docs.python.org/3/library/readline.html
