Natural Text
What is the difference between the following two commands?
 accepts an iterable of strings and writes them to  one string at a time. Since it does not append newline characters, elements of the iterable will appear to be concatenated if they don't already contain newlines. The return value is . accepts a single string, and writes it to . It returns the number of characters written.The first example () works because a string is an iterable of strings. Each character in the input is written separately. Notice that there is no  because the return value is , but the characters are all printed. They are written individually, but you can't tell because they don't have newlines between them.The second example () prints the whole string all at once. Since  doesn't append newline characters either, the return value () is printed immediately after.  is printed because there is a non- return value in this case.In general,  was meant to mimic/invert , so normally you could see the difference much better. You would normally call  with a list or similar iterable, but  only accepts a single string (and returns a value):Barring the return value, for a single string, the result of  and  are indistinguishable.  is much less efficient though, since it effectively applies  to each character individually.


Answer URL
https://docs.python.org/3/library/io.html#io.IOBase.writelines
https://docs.python.org/3/library/io.html#io.TextIOBase.write
https://docs.python.org/3/library/io.html#io.IOBase.readlines
https://docs.python.org/3/library/io.html?highlight=stdout%20writelines
