Natural Text
I am currently going through 6.00.1x with MITx and recursion of string, but the following code really confuses me. This is supposed to tell whether a string is a palindrome (one which reads the same backward as forward), with  as a test string I use:The line  really confuses me: I ran it on Python Tutor and it seems that upon running this line the first time, it goes recursively first, ie cutting out  and , then as  would be the base case, it returns true and likewise for .2 things I am confused:Why does it go recursively the first time when it runs this line of code?  should return a Boolean value T/F, but this seems to have been ignored till it reaches the base case?So the recursion runs till it reaches the base case - that I get, but then the s[0] == s[-1] doesn't start running only till it reaches here...why? And how did the syntax of the code instruct the computer to evaluate s[0] == s[-1] on bcb?
Well you have to think through this step by step:You pass  to  calls  returns  so this is passed to  is called with the argument .Check: is ? No,  is .So to : is ? Yes. If it wasn't, this function would stop right here and return . But now to the next step.Since  is  we need to evaluate . Keep in mind, that  is now . So run . is  so go to . is . Evaluate  where  now is . is , therefore:  returned  so  is . Return . returned  so  is . returns : You have a palindrome!Hope this makes it clearer for you.EDIT Step 6 does always come before Step 7 because Python explicitly goes from left to right in logical expressions, see here. If this does not happen, your interpreter is broken.


Answer URL
https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not
