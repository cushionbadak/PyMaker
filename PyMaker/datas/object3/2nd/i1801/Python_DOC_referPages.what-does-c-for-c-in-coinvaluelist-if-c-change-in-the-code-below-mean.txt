Natural Text
I have the following code:When I run it in the Python Shell, it returns:I've searched and it seems this is called a list comprehension, but how does it work? 
From the documentation:List comprehensions provide a concise way to create lists. Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition.About your question, the list comprehension does the same thing as the following "plain" Python code:How do you write it in one line? Hmm...we can...probably...use  with :But isn't it clearer and simpler to just use a list comprehension?Basically, we can do anything with . Not only . For example, run a method of :Or use  as another function's argument:We can also, for example, use  as the key of a  object. Let's see:How about a combination?  And so on.You can also use  or  in a list comprehension. For example, you only want odd numbers in . You can do:Ah that's too complex. What about the following version?To use an  ternary expression, you need put the  after , not after :Have you heard about nested list comprehension? You can put two or more s in one list comprehension. For example:Let's talk about the first part,  which gives  and . Then,  gives , ,  and , , . Warning: You always need put  before :We also have set comprehensions, dict comprehensions, and generator expressions.set comprehensions and list comprehensions are basically the same, but the former returns a set instead of a list:It's the same as:A dict comprehension looks like a set comprehension, but it uses  or  instead of  .For example:And it equals:Does  give a tuple? No!, it's a generator expression. Which returns a generator:It's the same as:And you can use it as a generator:Note: If you use a list comprehension inside a function, you don't need the  if that function could loop over a generator. For example, :Related (about generators): Understanding Generators in Python.
There are list, dictionary, and set comprehensions, but no tuple comprehensions (though do explore "generator expressions").They address the problem that traditional loops in Python are statements (don't return anything) not expressions which return a value.They are not the solution to every problem and can be rewritten as traditional loops. They become awkward when state needs to be maintained & updated between iterations.They typically consist of:but can be twisted in lots of interesting and bizarre ways.They can be analogous to the traditional  and  operations which still exist in Python and continue to be used.When done well, they have a high satisfaction quotient.
If you prefer a more visual way of figuring out what's going on then maybe this will help:...produces the output 
I've seen a lot of confusion lately (on other SO questions and from coworkers) about how list comprehensions work. A wee bit of math education can help with why the syntax is like this, and what list comprehensions really mean.The syntaxIt's best to think of list comprehensions as predicates over a set/collection, like we would in mathematics by using set builder notation. The notation actually feels pretty natural to me, because I hold an undergrad degree in Mathematics. But forget about me, Guido van Rossum (inventor of Python) holds a masters in Mathematics and has a math background.Set builder notation crash courseHere's the (very basics) of how set builder notation works:So, this set builder notation represents the set of numbers that are strictly positive (i.e. ).Points of confusion1) The predicate filter in set builder notation only specifies which items we want to keep, and list comprehension predicates do the same thing. You don't have to include special logic for omitting items, they are omitted unless included by the predicate. The empty predicate (i.e. no conditional at the end) includes all items in the given collection.2) The predicate filter in set builder notation goes at the end, and similarly in list comprehensions. (some) Beginners think something like  will give them the list , when in fact it outputs . We get the output  because we asked Python to evaluate  for all items in . No predicate implies that we get everything from the set (just like in set builder notation).If you keep set builder notation in the back of your mind while using list comprehensions, they're a bit easier to swallow.HTH!


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/library/functions.html#map
https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions
https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions
https://docs.python.org/3/library/functions.html#sum
