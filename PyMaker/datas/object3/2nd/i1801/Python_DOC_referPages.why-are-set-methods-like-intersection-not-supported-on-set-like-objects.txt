Natural Text
In Python 3.7, I'd like to calculate the intersection of two dictionaries' keys. To do this, I'd like to call the  method on their , however it does not work..keys() produces a set-like object, however most set methods don't work on it. What works however is the extremely unknown bitwise operator overloads for set-like objects, like . I find that the  overload on a set-like object is extremely rarely used and is not known by most programmers. Method names like  or  is self-documenting and definitely more Pythonic by this definition.Why isn't it supported then? Even the documentation lists the  and  methods like aliases, not mentioning that only  is supported on set-like objects.note: For some reason, in IPython the autocomplete lists  as a method which is available on . Out of the 17 set methods, 1 is present.
 views only guarantee the API of , not to be equivalent to  itself:For set-like views, all of the operations defined for the abstract base class  are available (for example, , , or ).So they're not claiming to match , or even , just   doesn't require any of the named methods aside from  (which has no operator equivalent).As for why  doesn't require the named methods, it may be because they are somewhat more complex (most take varargs, and the varargs can be any iterable, not just other set-like things, so you can, for example,  with many iterables at once), and they may have wanted to limit the complexity required to implement new subclasses (especially virtual subclasses, that wouldn't inherit any of the methods  might choose to provide).All that said, I generally agree with your point that it seems needlessly inconsistent to omit the method forms. I'd recommend you open a bug on the Python bug tracker requesting the change; just because it only guarantees  compatibility doesn't mean it can't do more.
The format should bewhere other is any iterable.m.keys() is dict_keys not a set so that won't work.will work :)


Answer URL
https://docs.python.org/3/library/stdtypes.html?highlight=set#frozenset.intersection
https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes
