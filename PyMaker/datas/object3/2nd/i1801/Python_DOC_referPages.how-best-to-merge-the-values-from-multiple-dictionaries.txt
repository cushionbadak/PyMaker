Natural Text
I created a function that accepts multiple arguments of dictionaries, and returns a concatenated dictionary. I researched online for a while about concatenating a merging dictionaries and tested the interesting ones. They all resulted in updating the values (or overwriting them).  My use case is passing in dictionaries where each key has a single value, and want a dictionary with the same or different keys, with a list of values for each key. That is my definition of what a so-called "concatenation" of dictionaries would look like. Here are two very basic dictionaries:Here is the function:The output is:I could do the same for tuples, or arrays, Numpy arrays, etc. Note this function is very simple and doesn't sanitize input or validate the data structure further than it being a  instance.But, I would like to know if there is a more efficient or "pythonic" way of doing this. Please feel free to add your input. Consider adding these dictionaries with different keys:The output is:I will work on nested data structures soon.Because of your answers, here is what I did:This prints the following:Thank you!
Something like this would work for any number of input dictionaries:The trick is using the  structure to automatically make new entries when they don't exist.  In this case, accessing a key that doesn't yet exist creates it as an empty list.Note that the above returns a  object.  If this isn't desirable, you can cast it back to dict or use this function instead:
How about something like this?Output:


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
