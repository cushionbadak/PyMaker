Natural Text
A friend yesterday showed me the technique below for giving instance variables a default value in Python.The class  has its own  property, which is retrieved by default when looking up an attribute on an instance that does not exist. For instance, the following code snippet prints ✱.Initially, I was surprised that this worked. I thought the machinery for "falling back to a definition on the class" that converts/evaluates/defines  to a bound method on class  and makes  meaningful was specific to functions and would fail in some way for a non-function.That is not the case. The above code  for as if  had been set via  in the  method.Is this construction idiomatic? The only arguments I can think of against it are that it breaks structural equality, potentially hides attributes of an objects that are "logically there" when debugging, and could mutate global state unintentionally if the default value is stateful. ✱ The getter and setter are only being used to demonstrate that   is really intended to be a default value for  and should not be interpreted as supporting the use of getters and setters in idiomatic Python.
We can let python do the hard work for us:


Answer URL
https://docs.python.org/3/howto/descriptor.html
