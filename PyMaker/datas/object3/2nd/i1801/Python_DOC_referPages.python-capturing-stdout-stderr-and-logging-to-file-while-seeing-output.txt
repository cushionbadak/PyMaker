Natural Text
So I have a python script that's trying to automate an entire build procedure. As such, it is calling not only python files, but shell scripts, maven, etc. So what I want is a method/procedure/library to capture the outputs to stdout and stderr to a logfile while still printing it to the console even if the thing printing to the console is not a python script. We're working on a linux machine so when doing this manually, we'd do a , then all the commands, then an . But when trying to wrap this in a python script, it seems that script takes command of the shell and doesn't allow me to run the rest of my commands until I  first.For proof of concept, here's a bash script that prints a number every half second up to 10.And here is what I've kind of want to do.I've also looked into the logging module, but it seems that only easily captures python prints to a log. I may be mistaken, and if there's an inutuitive way I'd definitely be willing to change methodologies. But essentially, I want to be able, in python, to effectively say from here I want to log the console output, and here I want to end the logging it programmatically.You can imagine that a build command and initial testing can take a long amount of time like 15 - 20 minutes, which is a long time to have a console waiting without any output if you just did a .
Easiest way for me was the answer from jww. Use  in the python script in conjunction with  and  if you need to append the output of another script to the same logfile.


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.Popen.stdout
