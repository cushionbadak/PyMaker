Natural Text
Both of them are python from documents :the first one says:If an object defines both  and , it is considered a data descriptor.   Descriptors that only define are called non-data descriptors      (they are typically used for methods but other uses are possible).the second one says:If the descriptor defines  and/or , it is a data descriptor; if it defines neither, it is a non-data descriptor.      Normally, data descriptors define both  and , while non-data descriptors have just the  method. The question is : is it enough to only define  to make a data descriptor ?And we I refer to the python source code, I found this :Seems we can only define  without .And then I turn to write some examples to prove what I got :The output makes me confusing again:According to the python attribute lookup orders : the priority of data descriptor is higher than .My example shows : Only the descriptor defines both  and  makes it a data descriptor !Which one is the right answer ? --- > data descriptoror  and  ---> data descriptor ?
The second quote is correct. The second quote comes from the Python language reference (though you've provided the wrong link), and the language reference is considered more authoritative than how-to guides. Also, it matches the actual behavior; the  macro you found is the actual routine used in  to determine what counts as a data descriptor, and either  or  will cause  to be non-null.The language reference also explains why  doesn't override the instance dict for :If it does not define , then accessing the attribute will return the descriptor object itself unless there is a value in the objectâ€™s instance dictionary. [...] Data descriptors with  and  defined always override a redefinition in an instance dictionary.Defining either  or  will set a type's  slot and make instances of the type data descriptors. A data descriptor will always be invoked for attempts to set or delete the attribute it manages, even if there is an entry in the instance's dict with the same name, and even if it only has  and you're trying to delete the attribute or vice versa. (If it doesn't have the needed method, it will raise an exception.) If a data descriptor also has , it will also intercept attempts to get the attribute; otherwise, Python will fall back on the normal attribute lookup behavior, as if it wasn't a descriptor at all.


Answer URL
https://docs.python.org/3/reference/datamodel.html#invoking-descriptors
https://docs.python.org/3/c-api/descriptor.html#c.PyDescr_IsData
