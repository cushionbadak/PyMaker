Natural Text
How to avoid multiple nested for-loops when one nested for-loop has range up to the current iteration of the outer for-loop? For example, consider the following code:This program returns a triplet from a list arr such that  and .Are there any other alternatives to using multiple nested loops?
You can replace the three loops with:You can replace all the code with:
You can use the combinations function from itertools. Your code would then become:Which gives the same printout as your code (after you remove the extraneous right parenthesis on your last line):Note that I changed the meanings of your variables , ,  to be the array values rather than their indices. Working with values and avoiding indices is more pythonic and easier to understand.You could also just do it in a list comprehension, for a slightly different look, avoiding the temporary list, and probable speed increase.
While previous answers are pythonic,if you care about the implementation of the search algorithm, you can reduce the complexity of your algorithm from  to  by implementing a binary search algorithm to find  in the space between  and the length of  which satisfies .
Found a better way I guess! avoiding the nested loops.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
