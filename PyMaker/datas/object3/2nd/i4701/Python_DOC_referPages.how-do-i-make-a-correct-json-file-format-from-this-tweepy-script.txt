Natural Text
I'm trying to get a JSON format of a search query using Tweepy but there's a problem: my final JSON file is in a unreadable format for any program, after checking the file, it seems like the script writes all the data without any correct spacing (for a JSON format)So, I've been trying to look for the problem but I really can't find any with the script. Does anyone have an idea of what could be wrong with the writing part?This is the script:....Here's a image the JSON file that I can't open.
A JSON text is a single JSON value.Your code is opening a file and calling  multiple times, concatenating a bunch of separate JSON texts, with newlines in between them. The result is not a JSON text. As the documentation for the  module says:Note Unlike  and , JSON is not a framed protocol, so trying to serialize multiple objects with repeated calls to  using the same fp will result in an invalid JSON file.Normally, what you want is either:Put all those separate things in a list and write that list with a single . The resulting file will look pretty similar to what you're writing, except for brackets around the whole thing and commas between the values, but it will be a legal JSON text.Put each thing in a different file. Each one will be a legal JSON text.Now, there are some programs, APIs, etc. that use "stream of JSON texts"* as a format, but there's no real standard for that, and everyone who does it has different rules for how to combine them—require escaping line terminators and use  to separate texts; require escaping only  and use  to separate texts; assume the texts are self-delimiting (framed); etc. To work with one of these formats, you have to know exactly what it is; it's not just "JSON"—in fact, it's not JSON at all.* Or, more commonly, "stream of JSON documents". The old standards defined "document" to be an object or array. The new standards define "text" to be any JSON type. That means documents are self-delimiting, but texts are not. (Consider  followed by .)


Answer URL
https://docs.python.org/3/library/json.html#json.dumps
