Natural Text
This is more of a curiositySay I have the following codeThis is expected, because unlike C, Python does not modify the underlying int, but rather creates a new one (observed in the code below)If I want to modify the underlying integer in the tuple, I can hackly do something likeMy question is: is there a nicer way of doing it (ideally performant and ideally already in the standard library)? Some wrapper class around int maybe?Edit:I did not have a specific software that had to adhere to this. It was more of a thought exercise of why are things like this. I think the three questions I had were:Why are s immutable? (still not sure)Is there a way to force them to be mutable? (wim's answer)Is there a nice way to force them to be mutable (like  vs  in Java) - I think the answer is NO?Thanks a lot for the discussion!
Use a list rather than a tuple: is immutable - you can't modify them. is immutable - you can't modify them.The closest you can get is using ctypes to monkeypatch the value.  But this is not "nice" by any stretch of the imagination and you will probably segfault your Python runtime if anything else happens to be using that integer.
Here's what it looks like with your small integers:Note that there is only one, single  object.  However, let's take a look with not-small integers:The Python run-time system still creates a new integer object for the first element.   exists in two places.  This is from caching small integers, not from any property of the implementation of im/mutable objects.


Answer URL
https://docs.python.org/3/library/ctypes.html
