Natural Text
The  and  functions evaluate the  argument exactly once per element, which I infer from the documentation of  that they refer to (as well as an educated guess about their implementation):The key corresponding to each item in the list is calculated once and then used for the entire sorting process.This means that it should be safe to use a key function that does not always return the same output for a given input. But is it possible to retrieve the key of the max or min elegantly without a custom function or calling the key function again?For a non-deterministic key, the following would not work:The same problem occurs withA custom function could be written like this:The  is necessary to make this work on arbitrary iterables, where the elements of the  have to work on the same element of the iterable without interfering with each other. The  ensures that the  does not have to store more than one element at a time, for maximum laziness in evaluation. Enumeration ensures that for cases where the keys are the same but the values are different, the stability of the comparison is preserved in a manner consistent with the original functions:If multiple items are maximal [minimal], the function returns the first one encountered.Note the minus sign in the expression being maximized.All in all, this function seems like massive overkill to retrieve something that is being computed already. Is there a better solution for this?If there is no other way, at least this function has the same algorithmic complexity and general contract as .Tangent/bonus question: what is the adjective meaning "not returning the same result for the same inputs every time"? Non-deterministic is only a small subset of possibilities, and non-reentrant means something subtly different to my understanding.
For this you'll need to precompute the keys. It probably makes most sense to put the key/values in a tuple. However, you'll want to take care that // only performs comparison on the key and not the value (otherwise if the value isn't comparable this will fail if there are duplicate keys):
What about using tuples lexicographical orderings:If the values are not comparable, suggestion from comments:If the result of the keyfunc is hashable:
I believe this should also work:


Answer URL
https://docs.python.org/3/library/functions.html#max
https://docs.python.org/3/library/functions.html#min
https://docs.python.org/3/library/stdtypes.html#list.sort
https://docs.python.org/3/library/itertools.html#itertools.tee
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/functions.html#enumerate
