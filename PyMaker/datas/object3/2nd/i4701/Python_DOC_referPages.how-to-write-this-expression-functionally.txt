Natural Text
I want to rewrite the following python code functionally:This is my attempt, but is incorrect:The error I get is .Using list comprehension, the solution is:
I do prefer the list comprehension in your own answer, but if I were to do it with more of a functional touch, I think I would use a  function and a :Note that  is a lazy iterator in Python 3. If you want an evaluated  you have to enclose the line in an explicit  constructor:
The list comprehension method is probably better, but if you're looking for functional how about this:By using  as the iterable for , we get both the index and the value. In this case, we yield 0 if  is in . Otherwise we keep the value .If you're using python3, you have to wrap the call to  with . However, that approach is not recommended as it wastefully creates a list.
Another way you can do this is with generic function  can be used in interesting waysPython's lambda syntax is really rigid its awkward ternary syntax make functional expressions painful to write. In the example below, we pre-define a function  using some imperative syntaxes to help readability, then we pass it to  - this program also shows that  can be a complex valueOf course all of this pain exists for a reason - it's a signal indicating that we're doing something wrong. A seasoned python programmer would never write , , or  like we did above. So it's not pythonic (as they say), but it's functional, and hopefully that answers your question.Below, we dramatically simplify  - instead of passing  and  helpers to the user lambda, we ask the user to return a tuple that encodes their choice:  says  is the last value in the sequence,  will produce the next value and continue with the next state.The trade-off here is the  is a little less complicated, but it requires the user to know the special tuple signalling to write their program. Before,  and  kept this worry out of the user's mind. Either way is fine, I share this just to give another alternative


Answer URL
https://docs.python.org/3/whatsnew/3.0.html#views-and-iterators-instead-of-lists
