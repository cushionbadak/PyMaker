Natural Text
This is a pretty readable chunk of code I think,But it's not syntactically correct. We can do other nice things in Python like,Or maybe,Why can't we do a  statement?
The flow:Would be equivalent to:Or, more generically, to:Python language designers have a history of voting against changes to the grammar which are only offering slightly different ways of doing the same thing ("There should be one obvious way to do it").  The type of one-liner construct which you've mentionedwas an exception made, here.  It was added to the language to offer a less error-prone way of achieving what many users were already attempting to achieve with  and  short-circuiting hacks (source: Guido).  Code in the wild was using:Which is not logically equivalent, yet it's an easy mistake to make for users who were already familiar with the ternary  syntax from C.  A correct equivalent is:But, that's ugly.  So, the rationale for the addition of an expression  was stronger than a mere convenience.
Because  is actually an expression. Expressions are statements which evaluate to a value, in this case, either  or .  is not a value, so there's that. Also, is really not much harder or more "error prone" than , whereas  is probably better thanThere's also the fact that if we allowed , we add a new way to use this  pattern, i.e. we allow it without an .For more info:https://docs.python.org/2.5/whatsnew/pep-308.html
Python does have such a thing, the syntax is just a bit different. Instead of the "if and "continue" being combined as one statement, they are separated into a conditional statement (if, while etc), and a control flow (continue, pass, break etc) if it evaluates to true. In your first code example, the syntax would be:This will move on to the next iteration of the outer loop.There are also other helpful iteration tools like this, called "Control Flow Tools." I'll include a link to the Python docs that explain this. There's a ton of useful stuff there, so please do have a look. Others here have also suggested a single-line syntax, which works too. It is, however, good to understand both approaches; this way you can keep your code as simple as possible, but you'll also have the ability to nest loops and conditions if your algorithm  will benefit from it. Happy coding!https://docs.python.org/3/tutorial/controlflow.html


Answer URL
https://docs.python.org/3/tutorial/controlflow.html
