Natural Text
My application uses a third party API that throws an exception belonging to another api-handling module. The code looks something like this:The main module behaves the same way no matter if  or  occurs, but I would still like to log which exception class actually caused the exception.Is there a way I could avoid having  and  classes in my main script and still propagate the exceptions up just using  to tell which exception class actually caused the exception in the API Module?
Make sure that your module's exception is not the exact same type as the API's. It can be a base type, as  seems to be in your case. Your raising code is fine in this regard.Add multiple  blocks to catch the different types of exception:You can  have as many  blocks as you like, and each one can catch as many types of exceptions as you like.It is very important to put the  catch after the one for the API exceptions if they inherit from . The blocks are evaluated in order, using , so if the  block came first, all the exceptions would trigger it, and you would never see the API-specific messages.If you need to know arbitrarily specific information about the exception, use the exception objects available through the  syntax shown above. The function  will also help you get information like the calling sequence that led to the error. You can  use the  module to get even more details.UPDATEBased on your latest comment you want to get the exception information without additional imports. Disclaimer: This is technically possible, and I will explain a way of doing it below, but I highly recommend against this approach.The trick is to catch the base class of all the possible exceptions that you will be getting, as you attempted to do with . The problem is that , despite being one of the most widely-used exception types, is not the base of all your exceptions,  is. You could go overboard and catch , but then things like pressing Ctrl+C would stop working, so don't do it (just mentioning it for completeness).You can get the type (and therefore the name of the type) using the same notation I showed you above. Tracebacks will work as usual as well, to show you calling sequences and where the exception occurred:As per @abarnert's comment, there are a few common ways of getting basic exception info before you delve into  and .  will get you the class of the thrown error.  returns just the message of the error in 99% of sane exception classes.  will generally return the standard  string you see at the end of a printout.As a disclaimer to my disclaimer, I have to add that while techniques like this are not recommended, they can be used quite effectively if you know what you are doing. So read the docs I linked carefully and make sure you understand your code thoroughly. This is much more important than heeding any sort of generic unqualified warnings.
not sure i understand correctly. but this would be the standard way to differentiate exceptions:


Answer URL
https://docs.python.org/3/library/sys.html#sys.exc_info
https://docs.python.org/3/library/traceback.html
https://docs.python.org/3/library/exceptions.html#ValueError
https://docs.python.org/3/library/exceptions.html#Exception
https://docs.python.org/3/library/exceptions.html#BaseException
https://docs.python.org/3/library/exceptions.html#exception-hierarchy
