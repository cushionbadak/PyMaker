Natural Text
I'm writing a Python program that returns out of how many combinations in a list you can create a triangle.Example:I only managed to write a function that checks if you can create a triangle out of 3 given edges:
This is quite easy with the function to check if any three sides can make a triangle, , given by you in the comments:This uses the fact that  gives all possible combinations, here of length  of the input, and the fact that bools are integers with  and , so we can just sum them to get the number of  elements.Your  function could also be more explicit:
Firstly, your check function is incorrect. From this post, we see that the conditions required are that the sum of each pair of sides is greater than the other side. As @david explained:Let's say that a, b, c is the sides of the triangle. Therefore, it  must be satisfy this criteria:a + b > ca + c > bb + c > aYou are only checking to see if the sum of the two smaller sides is greater than the largest. Furthermore, your function would fail for cases where the largest side is duplicated. For example, the values  form a valid triangle but your function  returns .That being said, there is very little you can do to avoid checking all combinations of 3 values. You could make a marginal speed improvement by sorting the list. This helps because the code can short-circuit because the first condition will fail (and you don't have to check the other two).For example, these are the sorted combinations of 3 sides from your example list:In the third example, , , and . The first condition  will fail and you won't have to check the other two. I've included some timing results to show that sorting is slightly faster.Update If you wanted to avoid duplicates, you can use a set comprehension:Timing Results


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
https://docs.python.org/3/library/itertools.html#itertools.combinations
