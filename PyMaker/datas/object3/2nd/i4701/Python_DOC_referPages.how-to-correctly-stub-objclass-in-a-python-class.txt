Natural Text
I have Python class looking somewhat like this:Sometimes, I am working with  (an interactive Python shell) for debugging.  inspects instances of the class and tries to access the  attribute, which does not exist. In , I could simply check  before working with , but I'd like to know whether there is a better way by either correctly implementing or somehow stubbing . The Python documentation does not say very much about it, or at least I do not understand what I have to do: The attribute  is interpreted by the  module as specifying the class where this object was defined (setting this appropriately can assist in runtime introspection of dynamic class attributes). For callables, it may indicate that an instance of the given type (or a subclass) is expected or required as the first positional argument (for example, CPython sets this attribute for unbound methods that are implemented in C).
You want to avoid interfering with this attribute. There is no reason to do any kind of stubbing manually - you want to get out of the way and let it do what it usually does. If it behaves like attributes usually do, everything will work correctly.The correct implementation is therefore to special-case the  attribute in your  function and throw an .This way it will behave the same way as it would in a class that has no : The attribute is considered non-existant by default, until it's assigned to. The  method won't be called if the attribute already exists, so it can be used without any issues:


Answer URL
https://docs.python.org/3/reference/datamodel.html
