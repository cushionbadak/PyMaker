Natural Text
I have a Python class (it's not actually mine, it's from a package, so I don't want to edit this one). Minimal example (unrealistic):Now I want to create a subclass of this superclass, whose initialization always comes from a file -- that is, I want to do something likeThis doesn't work (I didn't expect it to): I don't get an exception but the subclass is not initialized correctly. For instance, if the  has some instance value , which is always set, doingwill give an .How can I initialize using the  function from the parent class?
Python's  method is in reality not a constructor, it's just an initializer. That's why you cannot implement this behavior in the  method - once  is called, you already have a superfluous object instance floating around.The method responsible for actually creating a new instance of the class is , so we can achieve our goal by overriding that. The basic idea is to write something like this:The empty  is necessary because python will automatically call it on the object that's returned from . If we omit the empty  method, python will end up calling  on the object instead, and that will reset all of its attributes. There is, however, a problem: Since we've rewritten the  method so that it requires a  argument, the  method probably no longer works. You haven't shown its code, but it probably does something along these lines:The problem here is that the call to  will fail: This calls our  method, which expects a  argument, without any arguments. We end up with an exception like . To work around this, we can make the  parameter optional:Now we can call  as desired. However, it's also possible to call  without any arguments (like ), which will return a completely unitialized object instance (remember, our  is empty, so the object will have no attributes whatsoever). There is, unfortunately, nothing we can do about this.Generally speaking, it's probably a bad idea to do this. As I'm sure you can tell by now, there are numerous pitfalls one has to watch out for when trying to change an existing class's interface like this. It's very possible that it's not worth the trouble and you should just stick to creating your instances with .


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__new__
