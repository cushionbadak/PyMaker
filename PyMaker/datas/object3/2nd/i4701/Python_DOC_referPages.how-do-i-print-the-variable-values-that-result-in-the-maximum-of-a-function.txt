Natural Text
I want to compute the maximum value of a function in python, then print the maximum value, as well as values of the variables at that maximum.I think I have gotten pretty far.  In my example below, the function is just the values from  multiplied by the values from  multiplied by the values from  (in theory this function could be anything). The maximum of which would be .  My problem is: if these lists are hundreds of numbers long, I don't really want to print the entire list of inputs, which could be a massive list hundreds of thousands of entries long.  I am only interested in the final set of values (so  here), but I just can't seem to work out how to print only this set.Any help would be greatly appreciated.Thanks!Result:
The easiest way to do it would be to keep track of the values in the same way that you keep track of the current maximum:You can make your code more robust by using a technique different than setting  in the beginning. For example, what if your list only has negative numbers? The result will be wrong. You can use what is called a sentinel value, like , to indicate the first iteration. A sentinel is a marker that indicates that an "invalid" value. That will ensure that the correct maximum is always found:You can improve the design of your code by returning the numbers you are interested in, instead of just printing them. That will allow you to manipulate them in any way you want, including printing them, afterwards. Python allows multiple return values using tuples, so you can do something like this:An optimization you may want to consider is not evaluating your "function" more than once. This is especially important for more complex cases and functions that don't return the same value twice. You can replace the beginning of the  block with something likeIf you are really interested in making this work on arbitrary functions, you can use Python to do that. Functions are objects, and can be passed around just like lists, numbers and strings:If you are interested in further generalizations, you can take a look at , which has the function  for running a "flattened" version of your nested  loop. This will allow you to accept any number of input iterables, not just three. Python allows an arbitrary number of positional arguments using a  in the argument list. The argument with the  in its name will be a tuple of all the remaining positional arguments. It can be used in a lambda as well:You could consider adding a comparator to do something other than computing the maximum. However, that would actually be overkill, since you can convert any other operation to a maximum computation using a properly implemented . That is the same logic to implementing Pythons sort functions in terms of a key instead of a comparator. In the example above, you could find the minimum value by flipping the sign of the key: . You could find the combination whose product is closest to it's sum with something like . The possibilities are vast.Here is a link to an IDEOne example demonstrating the last version shown above: https://ideone.com/QNj55T. IDEOne is a handy tool for showing off or testing small snippets. I have no affiliation with it but I use it quite often.
Turns out writing your question out is a good way of solving it. Thanks anyway!
Here is a solution that is a bit more streamlined and  since you are wanting this to be a learning example.  I also commented heavily so you can follow-along:UpdateIncase you don't know how many lists of integers are going to be passed into the function (perhaps more than 3) you could iterate over the entire argument handler and make that your list instead of coding , like so:


Answer URL
https://docs.python.org/3/library/itertools.html
https://docs.python.org/3/library/itertools.html#itertools.product
