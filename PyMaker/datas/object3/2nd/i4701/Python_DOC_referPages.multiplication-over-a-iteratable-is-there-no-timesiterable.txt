Natural Text
Python's  function returns the sum of numbers in an iterable.I'm looking for the function that returns the product instead.I'm pretty sure such a function exists, but I can't find it.
Actually, Guido vetoed the idea: http://bugs.python.org/issue1093But, as noted in that issue, you can make one pretty easily:
There isn't one built in, but it's simple to roll your own, as demonstrated here:See answers to this question:  Which Python module is suitable for data manipulation in a list?
There's a  in numpy that does what you're asking for.
Update:In Python 3.8, the prod function was added to the math module.  See: math.prod().Older info: Python 3.7 and priorThe function you're looking for would be called prod() or product() but Python doesn't have that function.  So, you need to write your own (which is easy).Pronouncement on prod()Yes, that's right.  Guido rejected the idea for a built-in prod() function because he thought it was rarely needed.Alternative with reduce()As you suggested, it is not hard to make your own using reduce() and operator.mul():In Python 3, the reduce() function was moved to the functools module, so you would need to add:Specific case: FactorialsAs a side note, the primary motivating use case for prod() is to compute factorials.  We already have support for that in the math module:Alternative with logarithmsIf your data consists of floats, you can compute a product using sum() with exponents and logarithms:Note, the use of log() requires that all the inputs are positive.
( or )
Use thisSince there's no built-in  function.
I prefer the answers a and b above using functools.reduce() and the answer using numpy.prod(), but here is yet another solution using itertools.accumulate():
Perhaps not a "builtin", but I consider it builtin. anyways just use numpy


Answer URL
https://docs.python.org/3/library/operator.html#operator.mul
https://docs.python.org/3/library/functools.html#functools.reduce
https://docs.python.org/3/library/functools.html
https://docs.python.org/3/library/functools.html#functools.reduce
https://docs.python.org/3/library/itertools.html#itertools.accumulate
