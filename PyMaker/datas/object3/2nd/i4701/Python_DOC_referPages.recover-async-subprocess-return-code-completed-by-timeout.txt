Natural Text
I would like to know if there is a way to recover the return code when the asynchronous process has been completed by a timeout. The constraints are that I want to recover this code in another class that is in another python file. In addition, I do not want to block my GUI ...In my MainView.py, my code this :And my Hashcat.py file look like this :
Calling  just sends the signal to kill the process; you may still have to  on it before you can get the ; otherwise, it will still be .However, the  is unlikely to be all that meaningful. You just killed the process with a , so the  is going to be .If the problem is just that  takes too long, or isn't deterministic—well,  is meant to be something the child process can use for clean shutdown, which can take time—and can even fail to do anything, if the child has a serious bug. If you really want it to go away immediately, you need to send a  instead. (This is the difference between  and  from the terminal.) The way to do that from  is to call the  method instead of .The ideal solution is usually to have a double-timeout—e.g.,  after X seconds, then  if another Y seconds have passed without termination. This gives the process a chance to do graceful shutdown whenever possible, but still guarantees deterministic killing after X+Y seconds. But it depends—for some uses of some programs, giving the child an extra Y seconds to hopefully finish is more important than giving it Y seconds to clean up. Or it doesn't make much difference either way, and the single-step  is just simpler to code.(This is all a different if you're on Windows, but since you're on OS X, that's irrelevant.)


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.Popen.terminate
https://docs.python.org/3/library/subprocess.html#subprocess.Popen.wait
https://docs.python.org/3/library/subprocess.html#subprocess.Popen.returncode
https://docs.python.org/3/library/subprocess.html#subprocess.Popen.kill
