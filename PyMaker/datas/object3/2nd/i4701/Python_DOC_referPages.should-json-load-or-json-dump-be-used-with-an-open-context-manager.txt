Natural Text
As an example, let's say we are checking a  file with the contents ofThen we read/modify/write the preferences back using the Python json module.  The following two examples both function the same except one uses the  context manager and one doesn't.For normal file reading/writing I always use a context manager and handle all logic inside the context manager.  But in this example the file is being used just long enough to either populate a dict or write a dict to a file.  So the example not using a context manager seems much cleaner to me.  I worry that since the files are being opened "anonymously" there is nothing to call  on and I don't know if the json module handles that with a context manager internally or if I would just be leaking file descriptors.  I'm sure using a context manager just in case is the safe way to go, but at the same time I would like to know how the json module handles file descriptors (or is it file objects?)I went looking for the source for the json module but after finding it and searching for "dump" and "load" and finding nothing I'm not sure what to check next.  I'm not nearly proficient enough with C to understand what's going on in there.
Either of these are safe, but the version with the context manager is better practice.Keep in mind that when your program exits, all writes are flushed regardless. That said, the context manager causes a close and flush to happen immediately, not on garbage collection, and not on exit. As such, it's that much more explicit, and will make sure things take effect immediately even if there's more (potentially long-running) code added to the end of your program.That said, consider trying to make your writes truly atomic.There's still a window here where the file has been opened for output but hasn't had new content flushed into it; if power was yanked, or you had a SIGKILL, or a reader just tried to pull in the contents of the file inside that window, you'd lose your data. See atomic writing to file with Python; personally, I favor the advice by @vog to use a purpose-built library that's aware of various platforms' idioms and best practices.


Answer URL
https://docs.python.org/3/library/json.html#module-json
https://docs.python.org/3/glossary.html#term-file-object
