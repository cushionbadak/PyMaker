Natural Text
I have a class called Divider1 which divides a numerator by a denominator, set at initialisation:The class is easily abused by initialising incorrectly, but it is not immediately clear until dividing actually occurs:It seems that raising an exception earlier would be beneficial for debugging and maintenance, so here is my next logical step:Now we have some safety:It's very clear to me, immediately what is wrong on initialisation, but it can still be abused by changing the attribute after initialisation:I'm trying to figure out the Pythonic way of dealing with these issues. I could possibly just name the numerator and denominator _numerator and _denominator, to indicate that they should be treated as private.Or alternatively, I could use properties:So now:It is clearly much safer, and I know the cause of the error immediately, no matter how the class was used - it's impossible for the Divider to reach an impossible state. But I had to write many more lines of code to achieve this, especially compared to Divider1. But I still think that this sort of safety should always be reached, though I haven't seen people do this all the time when they write Python code. Am I using Python in a way that was unintended? Is it Pythonic to always write such cumbersome properties to ensure safety? Are there times when it should or shouldn't be done?
A lot of the ugliness comes from the .  You can use the abstract base class  to check if your input is a number.The type hierarchy for numbers was defined in PEP 3141


Answer URL
https://docs.python.org/3/library/numbers.html#numbers.Number
