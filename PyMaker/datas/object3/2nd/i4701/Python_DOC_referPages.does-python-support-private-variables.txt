Natural Text
This question already has an answer here:What is the meaning of a single and a double underscore before an object name?                    14 answers                I have heard that "“Private” instance variables that cannot be accessed except from inside an object don’t exist in Python : as seen hereHowever, we can create private variables using getter and setter methods in python as seen belowWhen I try to access c.x, I am getting the error seen below:Does the fact that c.x is not accessible mean that  x behaves like a private variable? How does this fact relate to what is said in the link above?
There is a lot of literature on this topic, but in short:Python is different to programming languages that have actually "private" attributes in that no attribute can be truly inaccessible by other functions. Yes, we can simulate the behaviour of languages like Java using , as you've shown, but that is kind of fudging "true" private attributes. What  actually is is a higher-order function (well, technically, it's a decorator), so when you call , although it acts as a property, you're really referring to a function that controls whether you can use the getters and setters defined in it. But just because  doesn't allow direct read access, doesn't mean that you can't call  (as @avigil pointed out). So  isn't really private - it's just as easily accessible as any other attribute belonging to the  class. The fact that its name starts with an underscore is just a convention - a signal to fellow programmers: "Please don't handle this variable directly, and use the getters/setters instead" (if available).
Yes, Python do support private variables.You can declare a private variable within a class as follows:Double underscore(__) followed by a variable and some assigned value.Below Example will help you to get the accessibility nature of private variable: 


Answer URL
https://docs.python.org/3/tutorial/classes.html#private-variables
