Natural Text
I have two iterables in Python, and I want to go over them in pairs:It should result in:One way to do it is to iterate over the indices:But that seems somewhat unpythonic to me. Is there a better way to do it?
 stops when the shorter of  or  stops.In Python 2, returns a list of tuples. This is fine when  and  are not massive. Ifthey are both massive then forming  is an unnecessarily massivetemporary variable, and should be replaced by  or, which returns an iterator instead of a list. stops when either  or  is exhausted. stops when both  and  are exhausted.When the shorter iterator(s) are exhausted,  yields a tuple with  in the position corresponding to that iterator. You can also set a different  besides  if you wish. See here for the full story.In Python 3, returns an iterator of tuples, like  in Python2.  To get a listof tuples, use . And to zip until both iterators areexhausted, you would useitertools.zip_longest.Note also that  and its -like brethen can accept an arbitrary number of iterables as arguments. For example,prints
You want the  function.
The builtin  does exactly what you want. If you want the same over iterables instead of lists you could look at itertools.izip which does the same thing but gives results one at a time.
What you're looking for is called .
You should use 'zip' function. Here is an example how your own zip function can look like
zip function solves the issueDocs: ZIP Library functionAIM: To put the output side by sideProblem:Output:     review1     review2     review3     date1     date2     date3Solution:Output:review1:date1review2:date2review3:date3
you can use 3 type in one dictionary :



Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/functions.html#zip
