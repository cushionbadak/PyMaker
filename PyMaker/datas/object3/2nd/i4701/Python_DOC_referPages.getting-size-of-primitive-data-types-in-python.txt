Natural Text
I am having a lot of confusion using the  function in python. All I want to find out is that for say a floating point value, is the system using 4 or 8 bytes (i.e. single or double precision in C terms).I do the following:How can I simply find out the how many bytes are actually used for the floating point representation. I know it should be 8 bytes but how can I verify this (something like the  operator in C++)
Runningdoes not return the size of any individual float, it returns the size of the  class. That class contains a lot more data than just any single float, so the returned size will also be much bigger.If you just want to know the size of a single float, the easiest way is to simply instantiate some arbitrary float. For example:Note thatsimply returns , so this is actually equivalent to:This returns  bytes in your case (and probably for most other people as well). In the case of CPython (the most common Python implementation), every  object will contain a reference counter and a pointer to the type (a pointer to the  class), which will each be 8 bytes for 64bit CPython or 4 bytes each for 32bit CPython. The remaining bytes ( in your case which is very likely to be 64bit CPython) will be the bytes used for the actual float value itself. This is not guaranteed to work out the same way for other Python implementations though. The language reference says:These represent machine-level double precision floating point numbers. You are at the mercy of the underlying machine architecture (and C or Java implementation) for the accepted range and handling of overflow. Python does not support single-precision floating point numbers; the savings in processor and memory usage that are usually the reason for using these are dwarfed by the overhead of using objects in Python, so there is no reason to complicate the language with two kinds of floating point numbers.and I'm not aware of any runtime methods to accurately tell you the number of bytes used. However, note that the quote above from the language reference does say that Python only supports double precision floats, so in most cases (depending on how critical it is for you to always be 100% right) it should be comparable to double precision in C.
From the docs:getsizeof() calls the objectâ€™s sizeof method and adds an additional garbage collector overhead if the object is managed by the garbage collector. is not about the byte size as in C.For  there is .



Answer URL
https://docs.python.org/3/reference/datamodel.html#objects-values-and-types
https://docs.python.org/3/library/sys.html#sys.getsizeof
https://docs.python.org/3/library/stdtypes.html#int.bit_length
