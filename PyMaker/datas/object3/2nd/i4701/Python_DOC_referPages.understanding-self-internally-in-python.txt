Natural Text
I fully understand what is being passed to  in this example.  I'm very confused on how it is being passed to  internally.  Could someone help me understand?
There are many steps that beginner tutorials do not cover, so I will attempt to be brief but thorough. I will try to be precise in my terminology, so you can look up all the sections you are unclear about.In general, methods in Python are functions in the class object. All functions are descriptors. Part of what being a descriptor means is that when you access a method through the instance of a class, it creates a closure that automatically passes the instance you created it on as the  parameter. For example, if  had a method  in addition to , then  would be a "bound method", which is a closure that passes  as  to . Notice that I did not put parentheses after . Putting parentheses would actually invoke the bound method.Second piece of information: if a class defines a  special method, its instances are said to be callable. This means that you can invoke an instance as if it were a function using the  operator. You can see a case of this when you do . Here  is a class object, but you are calling it as if it were a function. We are now getting close to where  actually gets passed in to .Thirdly, pretty much everything in Python is an object and obeys the general rules you know for objects, like being created from a class, etc. This includes functions and classes. A class object is created from another class, which is appropriately named a metaclass. Normally metaclasses are a can of worms you don't want to open, so we will scratch just enough of the surface here and no more. The most common metaclass is : 99%1 of all class objects you will encounter as a beginner as instances of .  defines a  method, which is what you are invoking when you do , since  is an instance of . does a couple of things. First it calls . This returns the new instance that you will later end up assigning to  or  or whatever. Then, if the thing that  returned is an instance of , it will call , where  is that new instance it just created.And that's how  gets passed to . Keep in mind that all the steps can be customized or overridden, so this is really just a basic overview of the simplest case.The links in this text should get you started in more specific research. All the links are completely distinct, even when they are for the same term. All the links are to Stack Exchange sites (SO with one exception), or the official Python 3 documentation, with one exception.1 I made up that statistic, but it's probably right anyway.


Answer URL
https://docs.python.org/3/tutorial/classes.html#class-objects
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/tutorial/classes.html#instance-objects
https://docs.python.org/3/tutorial/classes.html#method-objects
https://docs.python.org/3/reference/datamodel.html#object.__call__
https://docs.python.org/3/reference/datamodel.html#special-method-names
https://docs.python.org/3/reference/datamodel.html#object.__init__
https://docs.python.org/3/reference/datamodel.html#objects-values-and-types
https://docs.python.org/3/reference/datamodel.html#metaclasses
https://docs.python.org/3/library/functions.html#type
https://docs.python.org/3/reference/datamodel.html#object.__new__
https://docs.python.org/3/reference/datamodel.html#metaclass-example
