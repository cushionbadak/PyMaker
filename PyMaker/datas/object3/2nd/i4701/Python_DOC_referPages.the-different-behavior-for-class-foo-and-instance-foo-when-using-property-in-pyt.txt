Natural Text
My question is:When I use 'property' to control the access of one variable,  will correctly return the real value,while  will return the property object itself (e.g. )But when I use equivalent methods (e.g. descriptor) and override  and  methods, both  and  can return the real value instead of the object itself.So why they behave so differently? I guess it is because some of default functions implemented in the my descriptor make the magic, so what are they?The reason for the above question is that  function implemented in the  will determine if it is called by instance or Class, and when it is called by Class, it will return the object itself (i.e. self).But as  function does not have  or  parameter, and based on my test,  cannot be caught by  function.Therefore, I wonder what hooks we can use to customize the class variable level assignment ?
When you do , there's (obviously) no instance to be passed to the descriptor, so it is invoked with :In most cases (and specially with the generic  descriptor) the goal is to compute the return value based on instance attributes so there's not much you can return without the instance. In this case, most authors choose to return the descriptor instance itself so it can be correctly identified for what it is when inspecting the class. If you want this behaviour (which makes sense for most descriptors), you just have to test  against  and return :And that's all the "magic" involved .Now if you wonder why this is not the default: there are use cases for returning something else for a descriptor looked up on a class - methods for example (yes, Python functions are descriptors -  their  method returns a  object, which is actually a callable wrapper around the instance (if any), class and function):


Answer URL
https://docs.python.org/3/reference/datamodel.html
