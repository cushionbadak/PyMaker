Natural Text
Note: although my particular use is Flask related, I think the question is more general. I am building a Flask web application meant to be customized by the user. For example, the user is expected to provide a concrete subclass of a DatabaseInterface and may add to the list of certain ModelObjects that the application knows how to handle. What is the best way to expose the various hooks to users, and indicate required and optional status?  'Best' here primarily means most 'pythonic', or "easiest for python users to grasp", but other criteria like not causing headaches down the road are certainly worth mentioning. Some approaches I've considered:Rely solely on documentationCreate a template file with documented overrides, much like default config files for many servers. E.g. Create a UserOverrides class with an attr/method for each of the hooks; possibly split into RequiredOverrides and OptionalOverrides Create an empty class with unimplemented methods that the user must subclass into a concrete instance
One method is by using abstract base classes (abc module). For example, you can define an ABC with abstract methods that must be overridden by child classes like this:You would then implement a child class like:You can specify what everything needs to do in the overridden methods with documentation. There are also decorators for abstract properties, class methods, and static methods. Attempting to instantiate an ABC that does not have all of its abstract methods/properties overridden will result in an error.
Inheritance. Is. Bad.This is especially true in Python, which gives you a nice precedent to avoid the issue. Consider the following code:Which is cool and all for the built-in data structures, but what if you want to make your own data structure and have it work with Python's ? Simple:A  is a two-element (only) data structure (calling it with more or fewer arguments raises) and now works with :Which is exactly how you should do this:Any class that wants to work with your  function just implements the  magic method, which is how  works under the hood.


Answer URL
https://docs.python.org/3/library/abc.html
