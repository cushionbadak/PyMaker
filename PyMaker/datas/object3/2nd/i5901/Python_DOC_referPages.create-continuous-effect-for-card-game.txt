Natural Text
I was trying to figure out the code of some cards of the popular game Hearthstone and reproducing it with Python. I said Hearthstone, but this can apply basically to every card game, like Magic the Gathering etc...Lets say I have a creature on the field:Now, this creature has a continuous effect like "Spells in your hand cost 1 less". That means that WHILE the card is on the field my spells will cost 1 less, and they will return to their original cost as soon the card leaves the field.Then I wrote:At first I expected to end up with all my spells having  equal to .Instead nothing happened.Typing I get , which are the exact same s I set for the spells in the beginning. How can I do?EDITED POST ANSWERSIn the end here is my code fixed (i had to post it here and not in answers cause i didn't have enough characters in the reply slot.Thanks a lot for your help guys =)
Python does look deceivingly similar to English/pseudocode, but in this case, the meanings differ. As you tagged the question, the construct  is a loop, which means that when the program reaches this point, it will keep running the wrapped code as long as the condition is true.In this case, your code would have been an infinite loop if not for a problem with operator precedence. What you wrote was interpreted as:which will never run, instead ofor equivalentlywhich are both infinite loops that will keep running forever.What you want is instead a function that calculates the current mana cost, based on the original mana cost and current modifiers, like Atto suggested.One way to do it would be as a new method in the  class, like this:Try it online!
You don't want a while loop, this will constantly lower all of the mana costs to 0. You probably want a completely different variable holding the buffs/debuffs.For example:Hope this helps!
Expressions that evaluate to a boolean do not need to compared to True, or False. is being evaluated before . Reference 6.16 Operator Precedence.Change:to


Answer URL
https://docs.python.org/3/reference/expressions.html#operator-precedence
https://docs.python.org/3/reference/expressions.html#operator-precedence
