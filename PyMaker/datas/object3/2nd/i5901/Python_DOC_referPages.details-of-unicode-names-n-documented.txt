Natural Text
It appears, based on a urwid example that  will create a unicode character that is a hyphen intended for a bullet. The names for unicode characters seem to be defined at fileformat.info and some element of using Unicode in Python appears in the howto documentation. Though there is no mention of the  syntax.If you pull all these docs together you get the idea that the constant  creates a ⁃However, this is all a theory based on pulling all this data together. I can find no documentation for  in the Python docs. My question is whether my theory of operation is correct and whether it is documented anywhere?
You are correct that  produces a valid unicode character in Python.It is not documented much in the Python docs, but after some searching I found a reference to it on effbot.orghttp://effbot.org/librarybook/ucnhash.htmThe ucnhash module(Implementation, 2.0 only) This module is an implementation module,  which provides a name to character code mapping for Unicode string  literals. If this module is present, you can use \N{} escapes to map  Unicode character names to codes.In Python 2.1, the functionality of this module was moved to the  unicodedata module.Checking the documentation for  shows that the module is using the data from the Unicode Character Database.unicodedata — Unicode DatabaseThis module provides access to the Unicode Character Database (UCD)  which defines character properties for all Unicode characters. The  data contained in this database is compiled from the UCD version  9.0.0.The full data can be found at: https://www.unicode.org/Public/9.0.0/ucd/UnicodeData.txtThe data has the structure:  so you could use this data to look up characters.For example:
Not every gory detail can be found in a how-to. The table of escape sequences in the reference manual includes:Escape Sequence: Meaning: Character named  in the Unicode database (Unicode only)
The  syntax is documented in the Unicode HOWTO, at least.The names are documented in the Unicode standard, such as:The  module can look up a name for a character:


Answer URL
https://docs.python.org/3/library/unicodedata.html
https://docs.python.org/3/howto/unicode.html?highlight=unicode%20howto#the-string-type
