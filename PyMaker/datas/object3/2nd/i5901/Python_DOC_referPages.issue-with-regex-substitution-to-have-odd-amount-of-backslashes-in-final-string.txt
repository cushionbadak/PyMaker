Natural Text
I've asked this question in the past here: "Replacing part of string keeps adding extra backslash" but the issue is still proving troublesome to resolve.ISSUE: Using  I am unable to insert an odd amount of backslashes into part of my string. Assuming I have the following string:I want my output string to be the following:Here is just a small sample of everything that I have tried:As you can see, I've treated the replacement string as both a regular string where backslash is used as an escape character, and as a raw string where the backslash is not treated as an escape. Strangely, both methods of approach insert 6 backslashes into  rather than 5.Also, here are some outputs below of when I tried to insert a different number of backslashes into :If I could get some help as to why I can't substitute in 5 or 3 backslashes correctly, but I can substitute in 4 or 6 backslashes correctly, I would GREATLY appreciate it!!
That is strange. I am guessing it has to do with Python choosing whether to display escape characters. For instance, if I do:é voilà, five back-slashes. I think if you just display the string, Python displays it with escaped back-slashes. If you print it, Python processes the back-slash escapes.Interestingly, Python seems to assume that you mean to specify escaped back-slashes in your replacement string. Example:So on the match side, characters like  still need to be escaped. Makes sense; these are special characters to regex, so if we want to match the actual dollar-sign character we have to escape it. But on the replacement string side, these characters no longer have syntactic meaning, and so need not be escaped. Thus any extra escape sequences themselves get escaped! Thus the second example that looks like it shouldn't do anything in fact adds a back slash in front of the dollar-sign, which Python will escape if you display the string directly, making it look like two are added. If you want what's actually in the string, it looks like you have to print it.The last two paragraphs of the string literals docs seem to support this (thanks @glibdud for pointing this out). Some select quotes:Unlike Standard C, all unrecognized escape sequences are left in the string unchanged, i.e., the backslash is left in the result. [...]Even in a raw literal, quotes can be escaped with a backslash, but the backslash remains in the result; for example,  is a valid string literal consisting of two characters: a backslash and a double quote[...]


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
