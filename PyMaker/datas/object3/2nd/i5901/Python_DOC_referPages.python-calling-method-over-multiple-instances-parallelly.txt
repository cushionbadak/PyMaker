Natural Text
This question already has an answer here:How do I parallelize a simple Python loop?                    11 answers                I am trying to parallel calling the same method over multiple instances, where instances are referring to the same object.Sorry for this confusion statements. Specifically, I want to change the following for-loop to parallel execution: Is it possible?Note for future readers:The above code is not the way to iterate over a collection of instances in Python. This is how to iterate in a sequential (ie non-parallel) way:
Ok, let's do it. First the code(multiprocessing docs):This is an example of how a function can be called in parallel. From  you can see the output gets jumbled because program p1 is running in parallel while we run program p2.When running the program in a Python script you want to make sure script only ends when all the programs have executed successfully. You can do this byPython doesn't have C++ or Java like multithreading support because of GIL. Read about it here. Though if your program is such that it does more I/O operations then CPU intensive tasks then you can use multithreading. For performing CPU intensive tasks multiprocessing is recommended.In comment @ytutow asked what is difference between pool of workers and process. From Pymotw:The Pool class can be used to manage a fixed number of workers for  simple cases where the work to be done can be broken up and  distributed between workers independently.The return values from the jobs are collected and returned as a list.The pool arguments include the number of processes and a function to  run when starting the task process (invoked once per child).You can use Pool as:About the correct number of workers, it's gereral recommendation to have 2*cpu_cores number of workers.
This code seems to show the difference between a  loop and , calling a method on different instances:Note the use of This separates each process out.Output:


Answer URL
https://docs.python.org/3/library/multiprocessing.html
https://docs.python.org/3/library/multiprocessing.html
