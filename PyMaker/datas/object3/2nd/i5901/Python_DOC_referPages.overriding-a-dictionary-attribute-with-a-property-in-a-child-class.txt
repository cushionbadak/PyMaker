Natural Text
There's a class in a library I'm using that I want to override. It looks like this, and I can't change it:In my child class, I want  to behave differently based on rules that apply at runtime:Unfortunately, this doesn't work, for at least two reasons:1)  doesn't seem to actually work for accessing the version of  that's defined on .2)  crashes on the  line, because it can't assign to the version of  that  defines.3) Theoretically, even if I could get this to work, the loop in  would also not work, because it's getting  in order to assign key/value pairs inside it. But doing that get will result in the  being accessed, and returning a different object than , meaning that  won't be altered.I can't edit , and I need the  to have the same name as the original dict attribute, because various other code in the library accesses , and that code also can't be changed.I also can't really override  to make it not mess with , because I need  to run.Is there any viable way to do what I'm trying to do, here?
Property objects are data descriptor objects that live on the class, while your base class uses  as an instance attribute. By making it a property in the subclass, any and all access to  will now address the property, even in methods defined on the base class. And as  addresses attributes (including descriptors) only on the specific parent class,  will fail; there is no such class attribute on the base class.That means that the linewill trigger your  property setter, which tries to address a class attribute on a parent class that doesn't exist. Note that even if it did exist, you cant assign to a -bound object;  only supports the  method on descriptors, it does not support the  or  hooks required mutating attributes; so  fails doubly here.Every read access will trigger the getter, sowill call the getter each time, returning the result, then assigning to a key in the resulting dictionary. Because your getter creates a new dictionary each time, that assignment is lost entirely; the result of the dict comprehension is not referenced anywhere else, so after the key-value pair is assigned, the dictionary is garbage collected, changes and all.You'll need to redirect storage of that dictionary to a new instance attribute, and mutate the dictionary in-place (so that a reference is retained at all times):So now the property uses an instance attribute . Assignment to  will trigger the setter, which redirects the new dictionary produced from the value to  instead. The getter removes unwanted keys, keeping the same dictionary object so that any other references to it are still valid, and assignments of new values to keys will end up in the right place.The filtering uses a set intersection with the dictionary view on the keys; this produces a new set so the loop only iterates on keys actually present in both.


Answer URL
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
