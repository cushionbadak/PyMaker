Natural Text
I have  a text file which has many lines written ,there is a word called "@Testrun" in text file  many times , considering "@Testrun" as staring point  and endpoint also as a "@Testrun" considering the lines between these two "@Testrun" as one part there can be more that 3-4 parts o these text  . My question is how do I extract those lines in parts and find duplicate lines in those parts :My text file looks like this:I tried out the following code but this is not working:I get output but it is totally incorrect.  I get only one line as an output which is not expected.How do i solve this
Using the  third-party library, we can split the text before the desired target.  UPDATE: we can drop lines before the first target using .Output (abbreviated)
A simple approach would be to remember the lines you have already seen. You can collect them into a list, but it will be more efficient to use a dictionary or a set.Read a line at a time. If this line (is not a new TestRun header and) it has already been seen before, don't print it. If it is a TestRun header, forget what you have seen. Print everything which gets this far in the loop. Start over with the next line.Programmatically, it makes sense to check "if it is @TestRun, else if already seen, else add to seen" in this order so you don't have to check if it's a @TestRun twice.  I wanted to keep the more-natural order in the exposition above to make it simpler.
You tackle 2 problems: splitting it into the correkt partsremoving duplicatesSplitting: 1st OptionParse the file line by line:   2nd OptionDo not split the text by lines, read in in as a complete text and use list comprehension to split it:You split first on  and get a list of big text-chunks, then split each down by lines. Result is about the same: [ [all lines between 2 @TestRun's] ]Removing duplicates (while keeping the order)was answered here: how-do-you-remove-duplicates-from-a-list-in-whilst-preserving-order - it is a SO link so not going to regurgitate it here again :)HelpersText() is a replace for your file open, TestTT() is the whole chunk of text:See comments for explanation - you can use f.e. itertools.chain to recombine inner lines if needed


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.dropwhile
