Natural Text
Is it possible just to wrap some function with  library to have all usefull mock functionality (like func.call_count etc) and without patching the function execution?
Use the  parameter. Unless you've explicitly set the  attribute for your mock, the mock will return whatever the wrapped thing returns. If you use an attribute on your mock, access will pass through to the wrapped object, and the returned value will also be wrapped in a mock object.You can also use the  parameter. If it's a function, the mock will call the given function with the same arguments as the mock function, and the mock function will return whatever the given function returns. (There's more to it than that; see documentation for details.)


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect
