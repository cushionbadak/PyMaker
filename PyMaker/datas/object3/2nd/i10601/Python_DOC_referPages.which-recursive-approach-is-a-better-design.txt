Natural Text
Suppose I have a multi-line string which may contain lines consisting of a single file name. I want to print each line in the string, unless the line is a file name (defined here as ending in '.txt'), in which case I want to print each line in that file, unless the line in that file is a file name etc.My initial approach is to use a helper function as follows:But having to pass  to the helper function only to pass it back again seems inelegant. So I tried an approach that uses only one function:This has an implicit required argument (either  or  but not both), but since the user of the function will only use one form () it may not be too kludgey. It also seems a little odd from a user's perspective that  is the first argument.Which approach is a better design? Is there another approach I should consider?
Your question should not be related to Pythonic way to achieve this. It is related to the design, independent of language. If you ask me among the two approaches, I'll go with . But the better way to achieve is via class having your functions within it. In Python you may do it like:
To avoid passing the  parameter, you can define the helper function inside the recursive function:
Your requirements may not allow for this, but using str.splitlines would make things a little less complicated.  In the same vain, is there a reason why the original file is not opened as part of the recursion (i.e., rather than passing a string into , you could pass in a file_path)?  If those two constraints can be lifted, you could do something like the following:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.splitlines
