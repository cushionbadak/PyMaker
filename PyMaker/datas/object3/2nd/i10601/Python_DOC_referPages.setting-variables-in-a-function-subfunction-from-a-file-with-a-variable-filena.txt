Natural Text
I have a function that has a subfunction and I would like to initialize variables inside of the subfunction. Simply,Output: However, I have quite a large number of variables in multiple different files and I would like to simply import them into the subfunction when the subfunction is called. Assume I have a file  with the following contents:Then I change my code to be This is going to result in an error because Python 2.7 doesn't like it when you use  within a subfunction. So, instead, we can use the  function directly:The import method here works, but the variables don't ever actually make it to the subfunction's variable list, resulting in an error when I go to print them out. Now, I know that I can change the code toand it will work peachy. That is not the solution I am looking for, though. I want to be able to import those functions without changing the rest of my code to accommodate. Are there any better solutions to this problem?
From a maintainability perspective, importing the module and then referencing the variables of the module is the best option. It's easy to see where the variables have come from.  is frowned upon because it makes it hard to trace where variables have come from, especially if multiple modules contain variables with the same name.  is impossible within a function because of how local variables work in Python. Local variables are stored on the stack,  and if Python doesn't know how many variables there will be then it can't allocate space on the stack properly.However, that said, you can do what you're asking. But you shouldn't. The idea behind this is to leave the variables referenced as globals, and update your globals accordingly when the function starts. eg.This is a terrible idea as each inner function will share the same set of globals and may possible overwrite variables with the same name. This is will cause problems if  functions are run concurrently, or if they overwrite variables needed by the module that defined . It is possible to overcome this by modifying each  function to use its own unique set of globals, but this is a horrible hack, and mainly included to show how this is possible.


Answer URL
https://docs.python.org/3/library/configparser.html
