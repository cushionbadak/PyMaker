Natural Text
From something like this:I would like to get something like this:Can the code read itself in this way?All I want is the output from the more nested parts of the code to be more nested. In the same way that this makes code easier to read, it would make the output easier to read. Of course I could implement this manually, using e.g. , but what I had in mind was a custom print function which would  where  is the indentation level. This would be a quick way to make readable output on my terminal. Is there a better way to do this which avoids painstaking manual formatting?
If you want indentation in terms of nesting level rather than spaces and tabs, things get tricky. For example, in the following code:the call to  is actually nested one level deep, despite the fact that there is no leading whitespace on the line of the  call. Meanwhile, in the following code:the call to  is nested zero levels deep, despite the presence of leading whitespace on its line.In the following code:the two calls to  are at different nesting levels, despite the fact that the leading whitespace is identical.In the following code:is that nested zero levels, or one? In terms of  and  tokens in the formal grammar, it's zero levels deep, but you might not feel the same way.If you want to do this, you're going to have to tokenize the whole file up to the point of the call and count  and  tokens. The  module would be very useful for such a function:
Yeah, that's definitely possible, here's a working example:
You can use  in order to get the line number. Then in order to find the number of indentation level you need to find the previous line with zero indentation then be subtracting the current line number from that line's number you'll get the number of indentation:Demo:If you want the number of the indentation level based on the previouse lines with  you can just do it with a little change:Demo:And as an alternative answer here is a function for getting the number of indentation (whitespace):

To solve the ”real” problem that lead to your question you could implement a contextmanager which keeps track of the indention level and make the  block structure in the code correspond to the indentation levels of the output. This way the code indentation still reflects the output indentation without coupling both too much. It is still possible to refactor the code into different functions and have other indentations based on code structure not messing with the output indentation.Output:


Answer URL
https://docs.python.org/3/library/inspect.html
