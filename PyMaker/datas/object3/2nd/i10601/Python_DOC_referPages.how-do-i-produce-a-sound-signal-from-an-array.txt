Natural Text
I'm working on a project which requires some sound processing. I know how to record the sound and convert the signal into a float in order to process it. The problem is, that I don't know how to convert those numbers back to bytes in order to play the final processed sound.Imagine an array like this one:And I need to convert it to something similar to this, in order to play the sound:If I convert each number to bytes using  and play, it I just get noise. When I convert it back to a float in order to see what's happening, it has a different value than the original float.
First, you'll need to know the maximum range of your values. Given your values, that might be from  to , but I have no idea, so my guess is most likely wrong. Typically, the numbers in a floating point audio signal range from  to . Obviously, you have much larger values. If you have a reason for that, it's OK, but if not, you should probably scale your signals to the range from  to . Many applications and libraries use this convention.Then, you'll need to know the proper target format. There is no way to know that from your question. For example, your target format might be signed 16-bit integers in "little endian" byte order.To convert the values, you'll first have to divide all input values by the maximum possible (absolute) value. If your data ranges from  to , this is a no-op. Then, multiply those values with the maximum number of your target format. If your target format is 16-bit integers, that's , or . Actually, the largest signed 16-bit integer is one less (because  needs to be stored, too), namely , so you should probably use this value to avoid overflow. The resulting values are already correct, but they are still floating point values. So you should convert them to . Finally, you can convert those integer values to , e.g. using the  module. There you'll have to make sure to specify the correct format string, e.g.  for little-endian signed 16-bit numbers.Having said all that, it's probably much easier to use a sound I/O library that does the necessary conversions for you, e.g. the sounddevice module. You'll still need to scale your floating point values to the range from  to , but the rest can be done automatically. If you are using NumPy arrays it's even simpler, but it also works with plain Python buffers.


Answer URL
https://docs.python.org/3/library/struct.html#format-strings
