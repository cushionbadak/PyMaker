Natural Text
According to the official documentation, "data attributes override method attributes with the same name". However, I found that to be incorrect.The print statement in the code above shows c.x being a method, not the data attribute assigned to 111. Thus, this code indicates that data attributes do not necessarily override method attributes with the same name and the documentation is wrong. Can anyone confirm my finding?P.S. I tried the code in both Python 3.5 and Python 2.7 and obtained the same result. 
I guess the tutorial is unfortunately (because ambiguously) phrased and by[d]ata attributes override method attributes with the same nameit actually means "Data attributes override previously assigned/defined method attributes of the same name and vice versa: method attributes override previously assigned/defined data attributes of the same name.""Duh", you might think "data attributes also override previously assigned data attributes of the same name, so what's the big deal? Why is this even mentioned?" Assigning and re-assigning (called "overriding" in the cited tutorial) to variables (whether called "attributes" of something or not) is after all one of the prototypical features of an imperative programming language.Well, let me introduce you toNamespacesPython classes are namespaces. So what the tutorial might try to tell us here is that data attributes and method attributes within a class share a namespace.This isn't the case for attributes of different classes, though. If a class inherits from another class, it has access to its parent's names. If a name is reused for method definition or data assignment within the inheriting class, the parent class keeps the original values. In the child class they are merely temporarily shadowed. If you remove the name from the child class, it, too, will again provide access to the parent's attribute of the same name:Contrast this with re-definition a.k.a. re-assignment (or "overriding" as the tutorial calls it):Method  didn't temporarily shadow data attribute . It replaced it, so when we delete the method,  is missing completely within , rather than the data attribute re-appearing under that name.More NamespacesInstantiation adds another namespace and thus another chance for shadowing:In fact, all (nested) namespaces in Python work that way: packages, modules, classes, functions and methods, instance objects, inner classes, nested functions ...When reading a variable, the namespace hierarchy is walked bottom-up until the name is found. (Reading here means finding the value (object, function/method or built-in) to which the variable's name is bound. If the value is mutable, this can also be used to change the value.)On the other hand, when setting (defining or redefining) a variable, a name of the current namespace is used: Rebound to the new value if the name already exists in that very namespace (rather than only being included there from another namespace) or a newly created name if it didn't exist before.
Attributes override methods and vise-versa. A rule of thumb is, the latter overrides the former. So if you doYou will get 
Maybe this would be easier to understand:Data attributes shadow method attributes with the same name;
You were missing the second definition of x, that is why it seemed like the official documentation was wrong.


Answer URL
https://docs.python.org/3/tutorial/classes.html#random-remarks
