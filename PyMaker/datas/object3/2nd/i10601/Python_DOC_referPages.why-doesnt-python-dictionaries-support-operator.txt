Natural Text
I've been musing as to why the Python language's standard dict class doesn't support addition/subtraction operators such as '+' or '+=', e.g.My wishful thinking would be for the following result instead:Equally why doesn't  result in the same as ?Does anyone know the historic reasons for the default behaviour? (I concede that it could be ambiguous which value should be used in scenarios where  and  have the same key but different key values)
Does anyone know the historic reasons for the default behaviour?Guido van Rossum commented that he liked update() better and thinks a  operator wouldn't read clearly in code.FWIW, he did approve PEP 448 which gives your another way to do it using star-unpacking generalizations:There are several reasons why  might not be a good idea.  Usually, we expect addition to be commutative, but dict addition would fail whenever there were overlapping keys with distinct values.   The "normal" use case is to update only dict in-place, but the usual semantics of  would copy the contents of both inputs to create a new dict (which is somewhat wasteful).In addition, Python has collections.ChainMap which replaces the expense of copying with a new expense of potentially having multiple lookups.


Answer URL
https://docs.python.org/3/library/collections.html#collections.ChainMap
