Natural Text
From an array , I'd like to derive an array  as follows:The resulting array  is . My gut feeling is that it should be possible to make this code more succinct using  or another built-in function, but I don't yet see how. Any ideas?
You can simulate the behavior of  (see @soon's answer) in Python 2 with . You have to manage the list by yourself. 
You could use  with a custom accumulation function (Python 3 only, if you want to use Python 2 you could install  library (or similar) or backport the function using the implementation provided in the docs) :And then just fix the first and the last elements:
 give you just the final result of the reducing process, so if you want all the intermediate values you can use list comprehension as followed:but that isn't efficient since it reducing again and again for each sublist.
As my comment and other answers mention, this is easy in Python 3, using  . However, from your previous questions it appears that you're using Python 2.In Python, it's almost always better to iterate directly over a list rather than using indices. Your code could be rewritten like this. (I've changed your list name to  to comply with the PEP 8 style guide).outputNote that this code does an extra multiplication at the end, the result of which doesn't get appended to . Here's an alternative that's a little more compact. Instead of using the  variable it looks up the last element in , which is slightly less efficient, and while it doesn't do that extra multiplication it does need to create a new list when it slices .


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.accumulate
https://docs.python.org/3/library/itertools.html#itertools.accumulate
https://docs.python.org/3/library/itertools.html#itertools.accumulate
