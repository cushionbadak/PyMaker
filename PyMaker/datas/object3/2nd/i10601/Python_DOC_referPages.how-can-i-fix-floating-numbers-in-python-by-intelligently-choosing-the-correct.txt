Natural Text
I've seen many discussions here about rounding floating values in python or similar topics, but I have a related problem that I want a good solution for.Context:I use the netCDF4 python library to extract data from NetCDF files. My organization keeps a precision attribute on variables within these files.Example: I collect these precision attributes using the library like this:When I retrieve these precision values from a dataset, in python they end up showing up like:But, what I really want is:Essentially I need a way in python to intelligently round these values to their most appropriate decimal place. I am sure I can come up with a really ugly method to do this, but I want to know if there is already a 'nice' solution to this problem.For my use case, I suppose I can take advantage of the fact that since these values are all 'data_precision' values, I can just count the zero's from the decimal place, and then round to the last 0. (I'm making the assumption that ). With these assumptions, this would be my solution:.Does this seem appropriate? It seems to work under the constraints, but I'm curious to see alternatives.
Thanks to Benjamin for linking another post in the comments above to the solution I was looking for. A better way to word my question is that I want to operate on float values such that only 1 significant digit is retained.Simple examples:This solution was perfect for my needs:It handles inputs within my specific context () just fine so thank you so much for the help guys!
For rounding the values to  with 2 decimal precision, you may use below code:OR, you may use  as:In case you do not want to use these pythonic approach, and interested to implement it via mathematical logic, you may do:


Answer URL
https://docs.python.org/3/library/decimal.html
