Natural Text
I need to convert a list of ints to a string containing all the ranges in the list.So for example, the output should be as follows:So the input is not sorted and there can be duplicate values. The lists range in size from one element to 4k elements. The minimum and maximum values are 1 and 4094.This is part of a performance critical piece of code. I have been trying to optimize this, but I can't find a way to get this faster. This is my current code:Any idea on how to get this faster?
This could be a task for the  module.This will give you .To understand what's going on you might want to check the content of .This will give you the following output.The basic idea is to have a counter running parallel to the numbers.  will create individual groups for numbers with the same numerical distance to the current value of the counter.I don't know whether this is faster on your version of Python. You'll have to check this yourself. In my setting it's slower with this data set, but faster with a bigger number of elements.
The fastest one I could come up, which tests about 10% faster than your solution on my machine (according to timeit):The above code assumes that the values in the list are unique. If they aren't, it's easy to fix but there's a subtle hack which will no longer work and the end result will be slightly slower.I actually timed  because of the sort; u is 600 randomly selected integers from range(1000) comprising 235 subsequences; 83 are singletons and 152 contain at least two numbers. If the list is sorted, quite a lot of time is saved.
Unless you don't care at all about the data, then u can just append str(start) + '-' + str(stop) in _to_range function so later there will be no need to type extra '-'.join method.
I'll concentrate on the performance that is your main issue. I'll give 2 solutions:1) If the boundaries of the integers stored is between A and B, and you can create an array of booleans(even you can choose an array of bits for expanding the range you can storage) with (B - A + 2) elements, e.g. A = 0 and B = 1 000 000, we can do this (i'll write it in C#, sorry XD). This run in O(A - B) and is a good solution if A - B is less than the number of numbers:2) O(N * log N)


Answer URL
https://docs.python.org/3/library/itertools.html
