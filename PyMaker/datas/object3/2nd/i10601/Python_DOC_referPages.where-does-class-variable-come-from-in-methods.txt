Natural Text
There's a surprise here:It seems like the mere mention of  is explicitly checked by the parser? Otherwise we should get something likeIndeed, if you modify to only check the key instead, i.e. check for , then we only have  in scope as expected.  How does it happen that this variable gets magically injected into scope?  My guess is this is something to do with  - but I didn't use , so why does the compiler create an implicit closure reference here if it isn't needed?
This is a weird interaction in Python 3's implementation of no-argument . An access to  in a method triggers the addition of a hidden  closure variable referring to the class that defines the method. The parser special-cases a load of the name  in a method by also adding  to the method's symbol table, and then the rest of the relevant code all looks for  instead of . However, if you try to access  yourself, all the code looking for  sees it and thinks it should do the  handling!Here's where it adds the name  to the symbol table if it sees :Here's , which sets :The compiler section that checks  and creates the implicit cell:There's more relevant code, but it's too much to include all of it.  and  are where to look if you want to see more.You can get some weird bugs if you try to use a variable named :Output:The assignment to  means  is a local variable instead of a closure variable, so the closure cell  needs isn't there.Output:Even though there's an actual  variable in the enclosing scope, the special-casing of  means you get the class instead of the enclosing scope's variable value.
https://docs.python.org/3/reference/datamodel.html#creating-the-class-object is an implicit closure reference created by the compiler if any methods in a class body refer to either  or super. This allows the zero argument form of  to correctly identify the class being defined based on lexical scoping, while the class or instance that was used to make the current call is identified based on the first argument passed to the method.


Answer URL
https://docs.python.org/3/reference/datamodel.html#creating-the-class-object
