Natural Text
The ProblemImagine I am stood in an airport. Given a geographic coordinate pair, how can one efficiently determine which airport I am stood in?InputsA coordinate pair  representing the location I am stood at.A set of coordinate pairs  where each coordinate pair represents one airport.Desired OutputA coordinate pair  from the set of airport coordinate pairs representing the closest airport to the point .Inefficient SolutionHere is my inefficient attempt at solving this problem. It is clearly linear in the length of the set of airports.The QuestionHow can this solution be improved? This might involve some way of pre-filtering the list of airports based on the coordinates of the location we are currently stood at, or sorting them in a certain order beforehand.
If your coordinates are unsorted, your search can only be improved slightly assuming it is  by filtering on latitude first as for earth1 degree of latitude on the sphere is 111.2 km or 69 milesbut that would not give a huge speedup.If you sort the airports by latitude first then you can use a binary search for finding the first airport that could match () and then only compare up to the last one that could match () - but take care of 0 degrees equaling 360. While you cannot use that library directly, the sources of bisect are a good start for implementing a binary search.While technically this way the search is still O(n), you have much fewer actual distance calculations (depending on tolerance) and few latitude comparisons. So you will have a huge speedup.
Where 1.41421356 is the distance between the queried point and the nearest neighbour and 1 is the index of the neighbour.See: http://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.KDTree.query.html#scipy.spatial.KDTree.query
From this SO question:where  is a tuple with two values (x, y) and  is an array of tuples with two values ()


Answer URL
https://docs.python.org/3/library/bisect.html
