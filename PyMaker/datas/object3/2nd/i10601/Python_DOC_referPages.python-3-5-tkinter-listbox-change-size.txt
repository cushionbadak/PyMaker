Natural Text
Could anyone advise me what's wrong go with the following code? I try to build a tkinker.listbox with dimensions can be changed with .config command, yet failed. Instead, it produce the error of "AttributeError: 'MovListbox' object has no attribute 'tk'" The code is attached below for your reference. Many thanks. 
I've made a few modifications to your code; it's probably not exactly what you want, but you should find it helpful.The Listbox width and height options are not pixel measurements; they specify dimensions in terms of characters, so  makes the Listbox 12 text lines high, and  makes the Listbox 40 characters wide.  If you like, you can remove the  call in  and instead doat the end of the  method.I've changed your  variable to .  is not a good choice for a variable name as that shadows the built-in  type, which can be confusing, and it can also lead to mysterious bugs.The  built-in function is used to access methods of the parent class. From the docs:super([type[, object-or-type]])Return a proxy object that delegates method calls to a parent or  sibling class of type. This is useful for accessing inherited methods  that have been overridden in a class. The search order is the same as that  used by getattr() except that the type itself is skipped. Thussays to call the  method of the parent class of the MovListbox class, in other words, the  method. We need to do this because MovListbox is derived from tk.Listbox and we need all the usual Listbox stuff to be set up for our MovListbox instance before we start doing extra stuff with it, like inserting the strings from .If a derived class doesn't define its own  method then the   method from the parent is called automatically when you create an instance of the derived class. But because we've defined an  method for MovListbox that new  gets called instead. So to get the usual Listbox initialization performed for MovListbox we need to manually call Listbox's , and the customary way to do that gracefully is to use . Actually, in Python 3, that  call can be simplified:The form I used earlier is necessary in Python 2. However,  only works on new-style classes (the only kind of class that Python 3 supports), but unfortunately Python 2 Tkinter uses the ancient old-style classes for its widgets, and calling  on such classes raises a  exception. :( When working with old-style classes we have to do the call by explicitly specifying the parent class, like this:That syntax is also valid in Python 3, but it's generally preferred to use  when it's available.


Answer URL
https://docs.python.org/3/library/functions.html#super
