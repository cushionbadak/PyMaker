Natural Text
I have ~5M csv files stored in ~100.000 folders. Each folder contains roughly the same number of files and there's always an even number of files in a folder. I need to find the paths to all these files and load them into a list in a somewhat strange order for a statistical modeling project.In particular, I need the following to be upheld:Uniqueness: Each file must only be in the list oncePairs: Each file must be next to another file from the same folder (it can be next to two if due to randomness)Randomness: The probability of any two files that are not "paired" being next to each other should be the same (i.e. it wouldn't work just to iterative over all files)I've created an example below.FilesGood Result (randomized, but upholds the rule of pairs)A simple approach might be something like "Pick a random folder, pick a random file in that folder and a random pair in the folder. Save these picks in a list to avoid getting picked again. Repeat.". However, that would take far too long. Can you recommend a good strategy for creating this list? The randomness requirement can be relaxed a bit if needed.
One way to ensure that everything's random is to use , which shuffles a list inplace. That way you can simply pair each item with its neighbor, safe in the knowledge that the pairing is random. To achieve a result like your example you can then shuffle and flatten the resulting list of pairs. Here's an example:
The best strategy would be to divide and conquer with some help from threading. You want to get the file names loaded into memory as quick as possible for fastest completion.First step would be to create a queue for the folder names and another for the list of the files in each folder. Something like:A Queue is a lot like a list, only it can be shared safely between different threads. Using threads to tackle multiple folders at once will speed up processing time.Create a function that will get the paths to each folders, then store each path "folders" queue.Eventually you will end up with a queue with all the folder paths in it (e.g. ["Folder A", "Folder B", ...])Make a worker function for the threads that will go through all the files in a folder and store the names of each in a list. The general idea is:Here "getFilesInFolder()" is a function that takes in a path argument and returns a list of all the files in that folder.By the time all the threads are finished, "files" should be full of lists of files for each folder. Now you need to empty the queue into a regular list.Now you have a list of lists. Shuffle each of the lists to randomize the file order:Now you can create the final list (statList) and pop off pairs of files from randomly chosen sub-lists until all the files have been appended:No guarantees that this will be speedy, but it's the fastest method I can think of. More information about queues and threading if interested:https://docs.python.org/3/library/queue.htmlhttp://www.tutorialspoint.com/python3/python_multithreading.htm


Answer URL
https://docs.python.org/3/library/queue.html
