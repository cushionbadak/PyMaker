Natural Text
Please consider this snippet of python 3.5 code:I'd like to annotate (using PEP-0484 annotations) return value of  method to say: "It returns a type, that is either a  or any subtype of it". I din't find any sensible way to do it in Python. Here are approaches that are obviously wrong: Following:  means that this method returns an instance of . Following:  means that this method returns a type, but sadly, there is no information about that this is needs to be a subtype of . In Java terms I'd like to have method with signature like: . 
As far as I understand, you really cannot. You're looking for a way to indicate the return type of a class; to check based on what the type of the class is, i.e its metaclass. The problem with that is that a metaclass doesn't help a type checker evaluate what the inheritance of an object might be, if it's of type  it's alright.Apart from that, and, not being sure what type-checker you use,  for example doesn't have support yet for custom metaclasses which you might use to group your objects in a more custom group. The way I see it, you either don't annotate at all all, or, you change the implementation and annotate with .
Lately (in Python ) a generic  was introduced, so solution is: See: python docs.
I think what you need is TypeVar from the typing module.From the documentation of typing:Alternatively, a type variable may specify an upper bound using  bound=. This means that an actual type substituted (explicitly  or implicitly) for the type variable must be a subclass of the  boundary type, see PEP 484


Answer URL
https://docs.python.org/3/library/typing.html#typing.Type
https://docs.python.org/3/library/typing.html#typing.TypeVar
