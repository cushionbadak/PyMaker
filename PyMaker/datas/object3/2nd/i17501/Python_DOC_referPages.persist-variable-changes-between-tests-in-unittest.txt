Natural Text
How do I persist changes made within the same object inheriting from  in unitttest?I.e.: I want those two tests above to pass
As some comments have echoed, structuring your tests in this manner is probably a design flaw in the tests themselves and you should consider restructuring them. However, if you want to do this and rely on the fact that the test runner you are using executes them in an alphabetical (seemingly) order then I suggest the following.Similar to what @Matthias was saying but I would do one thing differently for the cases where you may decide to inherit from the class at a later date.The difference between this answer and @Matthias's answer you accepted is the explicit declaration of the class versus the lookup of said class reference. I prefer the dynamicness so I can inherit the tests later and run both test classes back to back and not have any cross over between the two. Because if you would choose to inherit from this class, explicitly naming the class reference would cause both test classes to run against that reference rather than their own respective classes. 
I like your own answer for the simplicity of it, but if you want to keep distinct unit tests:Apparently unittest runs separate tests with fresh instances of the TestCase. Well, just bind the objects to be persisted to something else but self. For example:You might be interesed in setUpClass and tearDownClass too:https://docs.python.org/3/library/unittest.html#setupclass-and-teardownclassAlso take care about the execution order of your unit tests:https://docs.python.org/2/library/unittest.html#unittest.TestLoader.sortTestMethodsUsing
Couldn't figure it out; so ended up hacking it out with multiple non  prefixed functions:
Besides what others said, the data share among test methods shouldn't be implemented this way, use setup() is recommended. The test method itself should be isolated. 


Answer URL
https://docs.python.org/3/library/unittest.html#setupclass-and-teardownclass
