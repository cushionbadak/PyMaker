Natural Text
What's the best way to emulate single-precision floating point in python?  (Or other floating point formats for that matter?)  Just use ctypes?
 has a  type.
If  (the excellent suggestion of other answers) is inapplicable for you (e.g. because you're in an environment that doesn't allow arbitrary third-party extensions), the array module in Python standard library is fine too -- type code  gives you 32-bit floats.  Besides those and the (usual) double precision floats, there isn't much for "other floating point formats" -- what did you have in mind?  (e.g.  offers GMP's modest support for floats with much longer, arbitrary bit sizes -- but it's modest indeed, e.g., no trig functions).
how about ctypes.c_float from standard library?
If your application suits arrays/matrices, you can use numpy with 
It is possible to use Python's  module to truncate a 64-bit float to the precision of a 32-bit float.For example:To do arithmetic only with 32-bit floats, you would need to apply this truncation operation to the result of every arithmetic operation.
To expand a little on the  option [1]:With numpy [2], e.g.:numpy.astype does conversions, e.g.[1] https://docs.python.org/3/library/ctypes.html#fundamental-data-types[2] https://docs.scipy.org/doc/numpy-1.15.1/reference/arrays.dtypes.html


Answer URL
https://docs.python.org/3/library/ctypes.html#fundamental-data-types
