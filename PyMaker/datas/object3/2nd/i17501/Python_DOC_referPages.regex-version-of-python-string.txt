Natural Text
This question already has an answer here:Correctly parsing string literals with python's re module                    3 answers                I was wondering what regex-string you can use to parse a python string. After several fails I came to a regex-code, which can parse one of the most used string formats, like This is my regex-"code":I asked this question because I didn't find anything like that on the Internet before. Can I work with that expression and "develop" it to parse all kinds of python strings? If you find this question interesting and I recommend you, where you can check your expressions very quickly.
This seems to handle everything correctly:Test: https://ideone.com/DEimLlSyntax reference: http://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
Your regex pattern ( and the one in @thebjorn link) will fail if there is an odd number>1 of backslashes before the quote, I suggest you to use this pattern (with singleline mode):an optimised way:to deal with single quotes too:or(note that the last character of the four patterns are exactly on the same line, a sign?)
Here is a different way, which uses tokenize.generate_tokens to identify Python strings. The tokenize module uses regex; so by using  you leave the complex dirty work to Python itself. By using higher-level functions you can be more confident the regex is correct (and avoid reinventing the wheel). Moreover, this will correctly identify Python strings of all sorts (e.g. strings of the single quoted, double quoted, and triple quoted varieties) without being confused by comments.tokenize.generate_tokens returns tuples. The Token class allows youto access the information in the tuple in a nicer way.In particular, each Token has a name, such as 'STRING', 'NEWLINE','INDENT', or 'OP'. You can use this to identify Python strings.Edit: I like using the Token class so I don't have to write in lots of places. However, for the code above, it might be clearer and easier to forget about the Token class and just write the main idea explicitly:


Answer URL
