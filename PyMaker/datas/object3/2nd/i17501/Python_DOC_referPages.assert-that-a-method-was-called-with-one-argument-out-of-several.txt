Natural Text
I'm mocking out a call to  using the  library: The the call involves multiple arguments: the URL, a payload, some auth stuff, etc. I want to assert that  is called with a particular URL, but I don't care about the other arguments. When I try this: the test fails, as it expects it to be called with only that argument. Is there any way to check if a single argument is used somewhere in the function call without having to pass in the other arguments? Or, even better, is there a way to assert a specific URL and then abstract data types for the other arguments (i.e., data should be a dictionary, auth should be an instance of HTTPBasicAuth, etc.)? 
As far as I know  doesn't provide a way to achieve what you want via . You could access the  and  members and perform the assertions manually.However the is a simple (and dirty) way of achieving almost what you want. You have to implement a class whose  method always returns :Using it as:As you can see it only checks for the . You have to create subclasses of , otherwise the comparisons wont work1. However you still have to provide all the arguments. If you have many arguments you might shorten your code using tuple-unpacking:Except for this I cannot think of a way to avoid passing all parameters to  and work it as you intend.The above solution can be extended to check for types of other arguments. For example:however this doesn't allow arguments that can be, for example, both an  or a . Allowing multiple arguments to  and using multiple-inheritance wont help. We can solve this using Example:1 I used the name  for the function since it is "used as a class" in the code. Also  is a built-in...
You can also use the  helper to always match arguments you don't know or aren't checking for.More on the ANY helper: https://docs.python.org/3/library/unittest.mock.html#anySo for instance you could match the argument 'session' to anything like so:
see: calls-as-tuples
You can use : assert_any_call(args) https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_any_callrequests.post.assert_any_call(requests_arguments)


Answer URL
https://docs.python.org/3/library/unittest.mock.html#any
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_any_call
