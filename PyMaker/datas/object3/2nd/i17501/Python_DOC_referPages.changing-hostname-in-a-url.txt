Natural Text
I am trying to use python to change the hostname in a url, and have been playing around with the urlparse module for a while now without finding a satisfactory solution. As an example, consider the url:https://www.google.dk:80/barbazI would like to replace "www.google.dk" with e.g. "www.foo.dk", so I get the following url:https://www.foo.dk:80/barbaz. So the part I want to replace is what urlparse.urlsplit refers to as hostname. I had hoped that the result of urlsplit would let me make changes, but the resulting type ParseResult doesn't allow me to. If nothing else I can of course reconstruct the new url by appending all the parts together with +, but this would leave me with some quite ugly code with a lot of conditionals to get "://" and ":" in the correct places.
You can use  function and  method (Python 3):If you're using Python 2, then replace  with . is a subclass of  and  is a  method that:returns a new instance of the named tuple replacing specified fields  with new valuesUPDATE:As @2rs2ts said in the comment  attribute includes a port number. Good news:  has  and  attributes. Bad news:  and  are not the members of , they're dynamic properties and you can't do . It'll throw an exception. If you don't want to split on  and your url always has a port number and doesn't have  and  (that's urls like "https://username:password@www.google.dk:80/barbaz") you can do:
You can take advantage of  and  from Python's :As the docs state, the argument passed to  "can be any five-item iterable", so the above code works as expected.
Using  and  methods of  module:Output:
A simple string replace of the host in the netloc also works in most cases:This will not work if, by some chance, the user name or password matches the hostname. You cannot limit str.replace to replace the last occurrence only, so instead we can use split and join:
I would recommend also using  and  like @linkyndy's answer, but for  it would be:
You can always do this trick:
To just replace the host without touching the port in use (if any), use this:printsIf you've not given any port, this works fine as well.If you prefer the  way Nigel pointed out, you can use this instead:


Answer URL
https://docs.python.org/3/library/urllib.parse.html
