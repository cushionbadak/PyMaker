Natural Text
I am building an application in python that uses a wrap to a library that performs hardware communication I would like to create some test units and I am pretty new to unit tests, so I would like to mock the communications but I really don't know how to do itquick example:this is the application code using the comm libI want to test this without performing communications, i.e. replacing the comm.getval return by some mocked value, and sending comm.send to a mocked comm class.Can anyone give a hint on that?The thing is that comm is a object inside a classlet's say the class is like this:
You can use  framework to this kind of jobs. First of all you use  in  and that means you have something like  in 's module. In these cases you need to patch  reference in 's module to make your patch active.So an example of how you can test your code without do any connection could be:Now I can start to explain all details of my answer like why use  or how to apply patch to all methods but that means to rewrite a lot of  documentations and a SO answers. So I hope that is enough as starting point.
The trick is not to use global objects like . If you can, make it so that  gets injected to your class or method by the caller. Then what you do is pass a mocked  when testing and then real one when in production. So either you make a  reference a field in your class (and inject it via a constructor or setter method) like soor you make it a parameter in the method where it is used, like soUsing global anything makes mocking a huge pain, try to use Dependency Injection whenever you need to mock something.This is another good post about DI. It is in java, but it should be the same in python http://googletesting.blogspot.ca/2008/07/how-to-think-about-new-operator-with.html


Answer URL
https://docs.python.org/3/library/unittest.mock.html#module-unittest.mock
https://docs.python.org/3/library/unittest.mock.html#autospeccing
https://docs.python.org/3/library/unittest.mock.html#test-prefix
