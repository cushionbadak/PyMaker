Natural Text
I'm currently working on large data, and an important step of the work is to get all sorted combinations of thousand of strings.In python 3.4, i try three ways for perform this operation.First, faking the data as a list of string, with or without GO term :The GO term is just a constant string added to the beginning of all data strings. Results with and without GO term will follows.Now, perform the benchmark:Output with the GO term:Output without the GO term:The printed 49995000 for each call proves us that all methods produce the same amount of data.Now the questions :why is the first method so quick, compared to the second ? Use of filter is the main way i use for filtering data. Until now, i assume that the filter form was heavily optimized.Why the third method seems to be the better ? Sorting is O(N*log(N)), its seems to be something like costly on large lists ?Why the GO term impact more the first and the second method than the third one ?My first guess was that sorting + combinations produce far less comparisons of data, while the two other methods perform a comparison for each couple of string, but, as sorting sounds like an heavy operation, i'm not totally sure about that.
I'm pretty sure the significant contributor to the difference in performance you are observing is from checking  49995000 times vs sorting the list of 10000 elements, rather than the postulated sorted vs unsorted iterable. should be doing the same amount of work in both cases as they produce the same number of elements and doesn't sort the elements and returns them lexicographically.To properly test if sorting makes a difference either:Perform the same conditional check with the same set of data but sorted and not sorted:Perform the test without the conditional:Why is the first method so quick, compared to the second ? Use of filter is the main way i use for filtering data. Until now, i assume that the filter form was heavily optimized.Using combinations yields less elements that conditional is checked against.  for combinations vs  for product.Why the GO term impact more the first and the second method than the third one ?The first and the second method are impacted by the additional characters for comparison 49995000 and 100000000 times. The third only is impacted by the comparisons needed to sort the 10000 items.After some fiddling it seems that sorting might make some difference but not as large as using the conditional. No clue as to what causes that.
Really not a big surprise, seeing how combinations creates only the combinations where  holds true while product creates all combinations including the ones where  is not true -  in  is redundant. Omitting this check in  greatly reduces the execution time, as seen below.With the  check in :Without the  check in :


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
https://docs.python.org/3/library/itertools.html#itertools.product
