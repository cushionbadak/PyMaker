Natural Text
In threading, we have something called "Thread Context", in which we can save some data (state) for accessing in a special thread. In asyncio, I need to save some state in current execution path, so that all consequent coroutines can access it. What is the solution?Note: I know each coroutine function is instantiated for an execution path in asyncio, but for some reason I can not save the state in function properties. (Although this method os not very good anyway)
As of Python 3.7 you can make use of contextvars.ContextVar.In the example below I declared request_id and set the value in some_outer_coroutine, then accessed it in some_inner_coroutine.Output:
There's also https://github.com/azazel75/metapensiero.asyncio.tasklocal, but you must be aware that tasks are often created internally by libraries and also by asyncio using  and there's no actual way to track these new tasks and initialize their locals (maybe with those of the task that they are created from). (an "hack" whould be setting a  function with something that does the job, hoping that all code uses  to create the tasks, which is not always true...)Another issue is that if some of your code is executed inside a Future callback   function which is used by both the libraries to select  the right copy of locals to serve will always return ...


Answer URL
https://docs.python.org/3/library/contextvars.html#module-contextvars
