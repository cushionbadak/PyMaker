Natural Text
This question already has an answer here:strange result when removing item from a list [duplicate]                    4 answers                in this code I am trying to create a function anti_vowel that will remove all vowels (aeiouAEIOU) from a string. I think it should work ok, but when I run it, the sample text "Hey look Words!" is returned as "Hy lk Words!". It  "forgets" to remove the last 'o'. How can this be?
You're modifying the list you're iterating over, which is bound to result in some unintuitive behavior. Instead, make a copy of the list so you don't remove elements from what you're iterating through.To clarify the behavior you're seeing, check this out. Put  at the beginning of your (original) loop. You'd expect, perhaps, that this would print out your string vertically, alongside the list, but what you'll actually get is this:So what's going on? The nice  loop in Python is really just syntactic sugar: it still accesses list elements by index. So when you remove elements from the list while iterating over it, you start skipping values (as you can see above). As a result, you never see the second  in ; you skip over it because the index has advanced "past" it when you deleted the previous element. Then, when you get to the  in , you go to remove the first occurrence of , which is the one you skipped before.As others have mentioned, list comprehensions are probably an even better (cleaner, clearer) way to do this. Make use of the fact that Python strings are iterable:
Other answers tell you why  skips items as you alter the list. This answer tells you how you should remove characters in a string without an explicit loop, instead.Use :This deletes all characters listed in the second argument.Demo:In Python 3, the  method (Python 2: ) differs in that it doesn't take a deletechars parameter; the first argument is a dictionary mapping Unicode ordinals (integer values) to new values instead. Use  for any character that needs to be deleted:You can also use the  static method to produce that mapping:
Quoting from the docs:Note: There is a subtlety when the sequence is being modified by the  loop (this can only occur for mutable sequences, i.e. lists). An  internal counter is used to keep track of which item is used next, and  this is incremented on each iteration. When this counter has reached  the length of the sequence the loop terminates. This means that if the  suite deletes the current (or a previous) item from the sequence, the  next item will be skipped (since it gets the index of the current item  which has already been treated). Likewise, if the suite inserts an  item in the sequence before the current item, the current item will be  treated again the next time through the loop. This can lead to nasty  bugs that can be avoided by making a temporary copy using a slice of  the whole sequence, e.g.,Iterate over a shallow copy of the list using . You're modifying a list while iterating over it, this will result in some letters being missed.The  loop keeps track of index, so when you remove an item at index , the next item at th position shifts to the current index() and hence in the next iteration you'll actually pick the th item.Lets take an easy example:Iteration 1 : Index = 0. as it is at index 0. As it doesn't satisfies that condition you'll do noting.Iteration 2 : Index = 1. as it is at index 1. Nothing more to do here.Iteration 3 : Index = 2. as it is at index 2. As this item satisfies the condition so it'll be removed from the list and all the items to it's right will shift one place to the left to fill the gap.now  becomes :As you can see the other  moved to index 2, i.e the current index so it'll be skipped in the next iteration. So, this is the reason some items are bring skipped in your iteration. Whenever you remove an item the next item is skipped from the iteration.Iteration 4 : Index = 3. as it is at index 3.....Fix:Iterate over a shallow copy of the list to fix this issue:Other alternatives:List comprehension:A one-liner using  and a :regex:
You're modifying the data you're iterating over. Don't do that.
Output
You're iterating over a list and deleting elements from it at the same time.First, I need to make sure you clearly understand the role of  in .  Take the situation where we have reached the letter 'l'.  The situation is not like this:There is no link between  and the position of the letter 'l' in the list.  If you modify , the list will not be modified.  The situation is more like this:Notice that I've kept the  symbol.  This is the hidden pointer that the code managing the  loop uses to keep track of its position in the loop. Every time you enter the body of the loop, the pointer is advanced, and the letter referenced by the pointer is copied into .Your problem occurs when you have two vowels in succession.  I'll show you what happens from the point where you reach 'l'. Notice that I've also changed the word "look" to "leap", to make it clearer what's going on:advance pointer to next character ('l') and copy to  ('l') is not a vowel, so do nothingadvance pointer to next character ('e') and copy to  ('e') is a vowel, so delete the first occurrence of  ('e')advance pointer to next character ('p') and copy to When you removed the 'e' all the characters after the 'e' moved one place to the left, so it was as if  had advanced the pointer. The result is that you skipped past the 'a'.In general, you should avoid modifying lists while iterating over them.  It's better to construct a new list from scratch, and Python's list comprehensions are the perfect tool for doing this.  E.g.But if you haven't learnt about comprehensions yet, the best way is probably:
List Comprehensions:
Others have already explained the issue with your code.  For your task, a generator expression is easier and less error prone.or however,  is the best way to go.
You shouldn't delete items from list you iterating through:But you can make new list from the old one with list comprehension syntax. List comprehension is very useful in this situation. You can read about list comprehension hereSo you solution will look like this:It's pretty, isn't it :P
Try to not use the list() function on a string. It will make things a lot more complicated. Unlike Java, in Python, strings are considered as arrays. Then, try to use an index for loop and del keyword. 


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.maketrans
https://docs.python.org/3/reference/compound_stmts.html#the-for-statement
