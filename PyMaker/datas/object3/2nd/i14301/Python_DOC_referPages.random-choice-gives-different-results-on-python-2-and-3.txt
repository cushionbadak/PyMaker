Natural Text
BackgroundI want to test my code which depends on  module.The problematic PR is https://github.com/Axelrod-Python/Axelrod/pull/202 and code is here https://github.com/Axelrod-Python/Axelrod/blob/master/axelrod/strategies/qlearner.pyThe problemSince  module produces pseudo-random numbers, I always set  to known value . This works for consecutive test runs. However, Python 3 seems to give different numbers than Python 2 when using Following snippet:gives different result for Python 2 and 3However,  method works the same on 2.x and 3.x:WorkaroundI can  the output of , which works well for simple test cases. However, for fairly complicated test cases, I'm not able to mock output, because I simply don't know how it should look like.The questionHave I done something wrong when calling  method?
According to https://docs.python.org/2/library/random.html, the RNG was changed in Python 2.4 and may use operating system resources. Based on this and the other answer to this question, it's not reasonable to expect Random to give the same result on two different versions of Python, two different operating systems, or even two different computers. For all any of us knows, the next version of Python could implement a Random function that uses the system's microphone to generate a random sequence.Short version: you should never depend on a RNG to give a deterministic result. If you need a known sequence to satisfy a unit test, you need to either redesign your method or your unit test.One way you might do this is to split your method into two parts: one part generates the random number. The second part consumes the value and acts on it. You would then write two unit tests: one to test coverage of the generated values, and a separate one to test the output of your method based on specific inputs.Another way might be to change your method to output not just the result but the random number that created that result. You can modify your unit test to compare the two and pass or fail the test based on the expected output of known pairs. Or perhaps your unit test can be modified to simply run the test n number of times and look for a spread that confirms some sort of randomness.
There is a completely different implementation of  in each version.Python 2.7:https://hg.python.org/cpython/file/2.7/Lib/random.pyPython 3.4:https://hg.python.org/cpython/file/3.4/Lib/random.pyThe _randbelow method may call random() more than once, or may call  which has a different underlying call to .


Answer URL
https://docs.python.org/3/library/random.html#random.seed
