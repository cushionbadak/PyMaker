Natural Text
How do I improve the performance of this simple piece of python code ?Isn't  the best way to find a matching line, since it is almost ~6x slower than Perl or am I doing something wrong ?This code takes about 0.96 seconds to complete (Average of 10 runs)Output:while the following Perl code does it in 0.15 seconds.Output:EDIT: Corrected regular expression - Which worsened the performance slightly
actually, regular expression is less efficient than the string methods in Python. From https://docs.python.org/2/howto/regex.html#use-string-methods: Strings have several methods for performing operations with fixed  strings and they’re usually much faster, because the implementation is  a single small C loop that’s been optimized for the purpose, instead  of the large, more generalized regular expression engine.replacing  with  will give you better runtime. otherwise, using the  operator that others suggested would be optimized, too.as for the speed difference between the Python & Perl version, i'll just chalk it up to the inherent quality of each language: text processing - python vs perl performance
In this case you are using a fixed string, not a regular expression.For regular strings there are faster methods:Now this kind of text processing is the sweet spot of Perl (aka Practical Extraction and Reporting Language) (aka Pathological Eclectic Rubbish Lister) and has been optimized extensively over the years. All that collective focus adds up.
The overhead of calling , despite the caching, is massive. Useinstead.Further, you can doto further reduce overhead.You can also consider doing your own buffering:which removes the line-splitting and encoding overhead. (This isn't quite the same as it doesn't account for multiple instances per chunk. Such behaviour is relatively simple to add, but may not strictly be needed in your case.)This is a bit heavyweight, but thrice as fast as the Perl - 8x if you remove !


Answer URL
https://docs.python.org/3/library/re.html#re.compile
