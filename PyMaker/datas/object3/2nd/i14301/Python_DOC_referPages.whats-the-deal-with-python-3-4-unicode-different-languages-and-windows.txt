Natural Text
Happy examples:Unhappy output:And if I print them like this:I get:I've also tried the following from this question (And other alternatives that involve ):And things get even more cryptic:And the docs were not very helpful.So, what's the deal with Python 3.4, Unicode, different languages and Windows? Almost all possible examples I could find, deal with Python 2.x.Is there a general and cross-platform way of printing ANY Unicode character from any language in a decent and non-nasty way in Python 3.4?EDIT:I've tried typing at the terminal:To change the code page, as proposed here and in the comments, and it did not work (Including the attempt with sys.stdout.encoding)
The problem iswas (see Python 3.6 update below) with the Windows console, which supports an ANSI character set appropriate for the region targeted by your version of Windows.  Python throws an exception by default when unsupported characters are output.Python can read an environment variable to output in other encodings, or to change the error handling default.  Below, I've read the console default and change the default error handling to print a  instead of throwing an error for characters that are unsupported in the console's current code page.Note the US OEM code page is limited to ASCII and some Western European characters.Below I've instructed Python to use UTF8, but since the Windows console doesn't support it, I redirect the output to a file and display it in Notepad:On Windows, its best to use a Python IDE that supports UTF-8 instead of the console when working with multiple languages.  If only using one language, select it as the system locale in the  control panel and the console will support the characters of that language.Update for Python 3.6Python 3.6 now uses Windows Unicode APIs to write directly to the console, so the only limit is the console font's support of the characters.  The following code works in a US Windows console.  I have a Chinese language pack installed, it even displays the Chinese and Japanese if the console font is changed.  Even without the correct font, replacement characters are shown in the console.  Cut-n-paste to an environment such as this web page will display the characters correctly.Output:
Update: Since Python 3.6, the code example that prints Unicode strings directly should just work now (even without ).Python can print text in multiple languages in Windows console whatever  says:where  prints Unicode directly e.g.:All you need is to configure the font in your Windows console that can display the desired characters.You could also run your Python script via IDLE without installing non-stdlib modules:To write to a file/pipe, use  as @Mark Tolonen suggested:Only the last solution supports non-BMP characters such as ðŸ˜’ (U+1F612 UNAMUSED FACE) --  can write them but Windows console displays them as boxes even if the font supports corresponding Unicode characters (though you can copy-paste the boxes into another program, to get the characters).


Answer URL
https://docs.python.org/3/howto/unicode.html
