Natural Text
This question already has an answer here:Is it Pythonic to check function argument types?                    6 answers                I've spent the past year working in Java, where I used  to ensure that parameters passed into a method fulfilled certain preconditions. I'd like to do the same in Python, but I read here that exceptions are better to use than assert.This is what I have currently:Is there a more elegant and/or Pythonic way to approach this? Should I be writing my own exception class to raise when invalid parameters are passed?
don't limit yourselfYou will sometimes be astounded that many functions, classes etc. produce useful output with input more diverse in type that by the original authors intended, as long as it is similiar enough to the orignal types. Don't limit later but unforeseen uses of your code. This is known as the EAFP-Apporach.So test only where you know that code would produce senseless results. assert doesn't work alwaysAlso  won't do anything when you disable assertions ().
Firstly, you should check objects for type using e.g. , not using . This handles e.g. inheritance better (see Differences between isinstance() and type() in python).Secondly, does it really matter if  is a list instance? Would a tuple be OK? Some custom list subclass? Any  object? Anything that can be made a ? Python uses strong-but-dynamic "duck typing"; the specific type is not as important as it having the correct behaviour. One option would be something like:This will raise either a  (wrong type of argument for  or ) or  ( is the right type but the wrong size), which makes it easier to deal with effectively than getting an  whatever happens.
In Python, checking parameters is pretty expensive. The usual approach is to make sure that wrong types of parameters eventually breaks the code and hoping that the exception will give enough clues to the developer as to what is wrong.Some people go one step further and write unit tests to make sure the code breaks in expected ways.Keep in mind that Python isn't Java. In Java, developers are driven by fear (that some type could be wrong or that someone could see/use something that they shouldn't). Python doesn't support most of these notions because we feel they are a waste of time for small projects and only fools spend their time on huge projects when they could achieve the same (and more) with a bunch of small projects.That is why we rarely check parameter types. On the positive side, this allows you to pass much more into a function/method than anyone ever intended if these types just behave.
Python is built around the idea that it is Easier to ask for forgiveness than permission(EAFP)So you should go for  approach rather than checking the type.https://docs.python.org/2/glossary.htmlI know it is weird coming from statically typed language, it was the same for me after doing years of C/C++ :)Maybe something like the following. It is hard to guess what you really want from this numpy array. IMO the try catch should be around the operation you apply to the array, and not its initialisation.


Answer URL
https://docs.python.org/3/glossary.html#term-duck-typing
