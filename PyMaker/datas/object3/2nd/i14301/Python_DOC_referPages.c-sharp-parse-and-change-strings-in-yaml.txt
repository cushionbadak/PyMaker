Natural Text
I am looking for a way to parse yaml file and change each string then save file without changing structure of original file. In my opinion I should not use Regex for this but some kind of yaml parser.Sample yaml input bellow:Desired output:Is there a good yaml parser that could handle complicated yaml files, change strings and save that data back without affecting structure of document? Maybe you have other idea how to solve this problem. Basically i would like to iterate through each string from the top of the document and do some modification on the string. Any hints appreciated.
Most YAML parsers are build for reading YAML, either written by other programs or edited by humans, and for writing YAML to be read by other programs. What is notoriously lacking is the ability of parsers to write YAML that is still readable by humans:the order of mapping keys is undefinedcomments get thrown away the scalar literal block style, if any, is droppedspacing around scalars is discardedthe scalar folding information, if any, is droppedThe loading of a dump of a loaded  handcrafted YAML file will result in the same internal data structures as the intial load, but the intermediate dump doesn't normally look like the original (handcrafted) YAML.If you have a Python program:Then the following assertions hold:The intermediate  looks like:The above is the default behaviour for ruamel.yaml, PyYAML and for many YAML parsers in other language and online YAML conversion services. For some parsers this is the only behaviour provided.The reason for me to start ruamel.yaml as an enhancement of PyYAML was to make going from handcrafted YAML to internal data, to YAML, result in something that is better human readable (what I call round-tripping), and preserves more information (especially comments).gives you:My focus has been on comments, key, order and literal block style. Spacing around scalars and folded scalars are not (yet) special.Starting from there (you could also do this in PyYAML, but you would not have the built-in enhancements of ruamel.yaml key order keeping) you can either provide special emitters, or hook into the system at a lower level, overriding some methods in  (and making sure you can call the originals for the cases you don't need to handle:gives you:which hopefully is acceptable for further processing in C#
The YAML specification has this to say:In the representation model, mapping keys do not have an order. To serialize a mapping, it is necessary to impose an ordering on its keys. This order is a serialization detail and should not be used when composing the representation graph (and hence for the preservation of application data). In every case where node order is significant, a sequence must be used. For example, an ordered mapping can be represented as a sequence of mappings, where each mapping is a single key: value pair. YAML provides convenient compact notation for this case.So you really shouldn’t expect YAML to maintain any order when loading and saving documents.That being said, I totally understand where you are coming from. Since YAML documents are meant for humans, maintaining a certain order is definitely helpful. Unfortunately, because of the specification, most implementations will use unordered data structures to represent the key/value mappings. In C# and Python, this would be a dictionary; and dictionaries are by design without order.But both C# and Python do have ordered dictionary types,  and , and at least for Python, there has been some effort in the past to maintain the key order using ordered dictionaries:The  type is a special ordered mapping. It’s supported in PyYAML.PyYAML ticket 29 talks about possibly including an . There is also a short workaround using YAML constructors in between, and a possible implementation of a loader at the end.PyYAML ticket 161 has a recipe which also provides this functionality.Finally, there is this other Stack Overflow question that covers loading YAML into s.That’s the Python side; I’m sure there are similar efforts for C# implementations too.


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
