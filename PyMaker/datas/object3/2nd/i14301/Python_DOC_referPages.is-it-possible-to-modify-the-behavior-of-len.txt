Natural Text
I'm aware of creating a custom  or  method (and so on), to modify the behavior of operators and functions. Is there a method override for ?For example:Could this be done for , with a list? Normally, it would look like this:What if I want to leave search types out of the count? Like this:Is there a way to do this from within a  subclass?
Yes, implement the  method:Demo:From the documentation:Called to implement the built-in function . Should return the length of the object, an integer  0. Also, an object that doesnâ€™t define a  method and whose  method returns zero is considered to be false in a Boolean context.For your specific case:
Yes, just as you have already discovered that you can override the behaviour of a  function call by implementing the  magic method, you can specify the behaviour from a  function call by implementing (surprise surprise) then  magic:A pedant might mention that you are not modifying the behaviour of , you are modifying the behaviour of your class.   just does the same thing it always does, which includes checking for a  attribute on the argument.  
Remember: Python is a dynamically and Duck Typed language.If it acts like something that might have a length;Example:if it doesn't act like it has a length; KABOOM!Example:From Typing:Python uses duck typing and has typed objects but untyped variable  names. Type constraints are not checked at compile time; rather,  operations on an object may fail, signifying that the given object is  not of a suitable type. Despite being dynamically typed, Python is  strongly typed, forbidding operations that are not well-defined (for  example, adding a number to a string) rather than silently attempting  to make sense of them.Example:
You can just add a  method to your class. 


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__len__
https://docs.python.org/3/library/functions.html#len
https://docs.python.org/3/reference/datamodel.html#object.__len__
