Natural Text
In a previous life I did a fair bit of Java development, and found JUnit Theories to be quite useful.  Is there any similar mechanism for Python?Currently I'm doing something like:But this is rather clunky, if the first "case" fails, all others fail to be run.
It looks like pytest can do something like this: http://pytest.org/latest/parametrize.html#parametrize-basicsI haven't tried it out myself.
I'm not aware of any builtins for this in any common testing frameworks. The only problem with your solution is that the iteration is inside of the test. Rather it should be outside and generate tests, maybe something like thisThen to use it, create a  subclass that has a  attribute which is a list of arguments to apply to each test method on the test case.Depending on your needs and testing setup, you may find it better to just monkey-patch generated test methods on a TestCase rather than using a metaclass. Or you could generate them in an overriden loadTestsFrom... on the . In any case, use the sample data to generate the testing methods.
As it turns out, there's something like this built-in as of Python 3.4 -- : https://docs.python.org/3.4/library/unittest.html#distinguishing-test-iterations-using-subtestsNot quite as elegant as py.test's parameterized tests, or jUnit Theories, but if you want a standard-lib approach & are using a relatively recent version of Python it's an option.


Answer URL
https://docs.python.org/3/library/unittest.html#unittest.TestLoader
