Natural Text
In my CLI script I am using argparse to take in a few optional arguments and then a positional argument. The positional argument is used to determine a subparser to use which in turn runs a function that calls an external program that takes its own arguments. So, the command-line usage looks something like this:Now my problem is that there are conflicts between my OPTIONS I've declared and the SUBCOMMAND_OPTIONS declared in the external program. The easy fix is to ensure I rename all conflicts in myscript but I can't do this for all options - most notably the "-h" option for help. Ideally I'd like argparse to stop parsing immediately after it encounters the subcommand and simply pass on the rest of the args to the external program.So, the following invocation should show the help text for myscript:While, in contrast the following should show the help text from the external program invoked by the "bar" subparser:Some more code to make the above clearer:
Your initial description was sufficiently close to subparsers that it takes some careful reading to identify what's wrong (for you).From comments it sounds like the biggest fault is that the subparser captures the  give you a help message, rather than passing it through to the .  Subparsers, just like a main parser, takes a  parameter.producingIn a comment I mentioned a couple of  values,  and .  To the main parser, subparsers are just a positional with a  nargs (and action` type, which goes on to invoke another parser based on the 1st value. is like the  nargs, except that it takes everything, even strings that look like flags.   is like , requiring at least one string.  producingThe  note in the argparse docs is:argparse.REMAINDER. All the remaining command-line arguments are gathered into a list. This is commonly useful for command line utilities that dispatch to other command line utilities:and has an example similar to my last one.
The normal sub-commands support in  does this just fine. Just note that when reusing argument names, you should specify a custom  to make sure that your main commandsâ€™ values are not overwritten:Examples:
The  module has a subparser feature, which you can combine with  to capture any arguments without declaring those explicitly.Update:If you want to have more control than  provides, it might be worthwile to look into the  package instead. It has special support for ignoring unknown options and preventing options like  to be handled. Details athttp://click.pocoo.org/4/api/#click.Context.ignore_unknown_options


Answer URL
https://docs.python.org/3/library/argparse.html#sub-commands
https://docs.python.org/3/library/argparse.html#dest
