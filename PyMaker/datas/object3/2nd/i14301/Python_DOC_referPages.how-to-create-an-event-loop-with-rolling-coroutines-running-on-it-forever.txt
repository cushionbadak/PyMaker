Natural Text
In order to prevent from context switching, I want to create a big loop to serve both the network connections and some routines.Here's the implementation for normal functions:Here's the implementation for coroutines:And the mixed one:As you see, each coroutine function has a while loop surrounded. How can I make it like the normal one? I.e. when it is done, call itself after the given delay time, but not just put a loop there.
If you really want to eliminate the while-loop from the coroutines (I'm not sure why you feel that's necessary; it's the most natural way to do what you're trying to do), you can use  (or  on Python 3.4.4+) to schedule the coroutine to run again on the next event loop iteration:Note that you have to switch back to using  if you do this, since / will exit immediately after printing now.

UPDThis code would reach the maximum recursion depth. Might because Python has no tail call optimization. Leave the code here as a wrong example.
Did you actually try to run the three examples you gave? The difference in behaviour is pretty obvious.Since you never said what you expect, there’s not telling what is right and what is not. All three implementations could be right or wrong. I can tell you what behaviour each implementation has, and why it has such behaviour; only you know whether it is correct.In the second example (), the two coroutines are run concurrently. This means that each will execute on their own;  prints  every second, and  prints  every second.The other two examples both use , which is blocking. This means that when the first function (whichever that is; let’s say it’s ) reaches , the whole program will hang for one second. This means that when  sleeps,  cannot run either, and vice versa.The program executes like this:The loop is entered.The loop calls . in  is reached. The program sleeps for one second. printed. yields.The loop calls . printed. in  is reached. The program sleeps for one second. yields.Go to 2.Therefore both  and  appear every two seconds, because there are two  calls between each . You would easily notice that if you run the two examples.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.async
