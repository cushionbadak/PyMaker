Natural Text
I need to take some large files of strings and replace each string with an id from 1 up in a separate file. There are repeats of some of the strings within each file, and there are common strings between files so those need to get the same id. I have implemented this with a dictionary, which works, but due to the size of the files and the amount of strings, this solution seems to work slowly. Is there a data structure or perhaps hashing technique that would be better suited for this?______________________edited_______________________________________________________My implementation for dictAn input sample this should returnI should clarify, it does not necessarily need to be ordered in that way, though it does need to include every integer from 1 to the number of strings.4 2 3 1 1 1 1 5 6 7 8 9 10 would be valid as well
Slightly more memory friendly would be to use a  instead of a . Using the  example from the  docs at https://docs.python.org/3/library/itertools.html you could do this:An alternative that would scale to much larger data sets would be to use some sort of persistent key/value store that stores data on disk (instead of an in-memory mapping), e.g. with LevelDB (using Plyvel) it could look like this:
The bottleneck of your code is the w.write during the for loop. Generate the dict first and then write the file it will run much faster.


Answer URL
https://docs.python.org/3/library/itertools.html
