Natural Text
I'm trying to compare two lists in Python, checking if they are the same. The problem is that both lists can contain duplicate elements, and in order to be considered equal, they need to have the same amount of duplicate elements. I've currently "solved" this by creating a copy of both lists, and removing an element from both lists if they are equal:I doubt this solution works: doesn't  remove all occurrences of that element? Also, I don't think it's memory efficient, which is important, as the neighborhoods will be pretty big.Could anyone tell me how I can compare  and  properly, checking for an equal amount of duplicates while not altering the lists, without copying the lists?
Count them and compare the Counter-dicts:Output:
While  would be the usual way to perform this kind of multiset comparison in Python, I think comparing neighbors is a fundamentally misguided approach to vertex equality testing. Vertex equality should use either the default identity-based equality, or label-based equality, depending on the details of your program.You seem to be trying to implement a comparison where two vertices are equal if they have equal labels and equal collections of neighbors. However, if it's possible for two different vertices to have equal labels, then it should be possible for two distinct vertices to have the same label and the same neighbors, making this a broken equality comparison. If it's not possible for two vertices to have equal labels, then comparing neighbors is unnecessary.Your neighbor comparison nested loop also assumes that vertices are equal if the have equal labels, further supporting a label-based comparison. If this assumption is wrong, then you have the problem of how to determine that neighbors are equal. If you try to compare neighbors with , you'll run into infinite recursion.With the additional clarification that you're implementing a color refinement algorithm, we can confirm that comparing neighbors by label only is actually correct. However,  seems like a misleading name for the function you're implementing, since you're not testing whether the given Vertex objects represent the same vertex.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
