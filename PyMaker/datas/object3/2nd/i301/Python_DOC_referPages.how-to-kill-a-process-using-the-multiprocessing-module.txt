Natural Text
I have a process that is essentially just an infinite loop and I have a second process that is a timer. How can I kill the loop process once the timer is done?I want the python script to end once the timer is done.
You could do it by using a sharing state between the processes and creating a flag value that all the concurrent processes can access (although this may be somewhat inefficient). Here's what I'm suggesting:
A simple return statement after  in  would work perfectly. Moreover, you had an error in your  function. Your argument had the same name as inbuilt library time.Hope this answers your question!!!
I think you don't need to make a second process just for a timer.Graceful TimeoutIn case you need clean up before exit in your  process, you can use a -thread and let the while-loop check if it is still alive. This allows your worker process to exit gracefully, but you'll have to pay with reduced performancebecause the repeated method call takes some time. Doesn't have to be an issue if it' s not a tight loop, though.Example Output:Termination on TimeoutIf you don't have the need for a clean shut down (you are not using shared queues, working with DBs etc.), you can let the parent process  the worker-process after your specified time. terminate()Terminate the process. On Unix this is done using the SIGTERM signal; on Windows TerminateProcess() is used. Note that exit handlers and finally clauses, etc., will not be executed.Note that descendant processes of the process will not be terminated â€“ they will simply become orphaned.Warning If this method is used when the associated process is using a pipe or queue then the pipe or queue is liable to become corrupted and may become unusable by other process. Similarly, if the process has acquired a lock or semaphore etc. then terminating it is liable to cause other processes to deadlock. docsIf you don't have anything to do in the parent you can simply  the worker-process and  afterwards.Example Output:In case you want to use , but need your parent unblocked you could also use a -thread within the parent for that.Example Output:


Answer URL
https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes
