Natural Text
I came across the Python  statement for the first time today.  I've been using Python lightly for several months and didn't even know of its existence!  Given its somewhat obscure status, I thought it would be worth asking:What is the Python  statementdesigned to be used for?   What doyou use it for? Are there anygotchas I need to be aware of, orcommon anti-patterns associated withits use?  Any cases where it is better use  than ?Why isn't it used more widely?Which standard library classes are compatible with it?
I believe this has already been answered by other users before me, so I only add it for the sake of completeness: the  statement simplifies exception handling by encapsulating common preparation and cleanup tasks in so-called context managers. More details can be found in PEP 343. For instance, the  statement is a context manager in itself, which lets you open a file, keep it open as long as the execution is in the context of the  statement where you used it, and close it as soon as you leave the context, no matter whether you have left it because of an exception or during regular control flow. The  statement can thus be used in ways similar to the RAII pattern in C++: some resource is acquired by the  statement and released when you leave the  context.Some examples are: opening files using , acquiring locks using  (where  is an instance of ). You can also construct your own context managers using the  decorator from . For instance, I often use this when I have to change the current directory temporarily and then return to where I was:Here's another example that temporarily redirects ,  and  to some other file handle and restores them later:And finally, another example that creates a temporary folder and cleans it up when leaving the context:
I would suggest two interesting lectures:  PEP 343 The "with" Statement  Effbot Understanding Python's"with" statement1.The  statement is used to wrap the execution of a block with methods defined by a context manager. This allows common  usage patterns to be encapsulated for convenient reuse.2.You could do something like:OROR (Python 3.1)OR3. I don't see any Antipattern here.Quoting Dive into Python: try..finally is good. with is better.4.I guess it's related to programmers's habit to use  statement from other languages.
The Python  statement is built-in language support of the  idiom commonly used in C++. It is intended to allow safe acquisition and release of operating system resources.The  statement creates resources within a scope/block. You write your code using the resources within the block. When the block exits the resources are cleanly released regardless of the outcome of the code in the block (that is whether the block exits normally or because of an exception).Many resources in the Python library that obey the protocol required by the  statement and so can used with it out-of-the-box. However anyone can make resources that can be used in a with statement by implementing the well documented protocol: PEP 0343Use it whenever you acquire resources in your application that must be explicitly relinquished such as files, network connections, locks and the like.
An example of an antipattern might be to use the  inside a loop when it would be more efficient to have the  outside the loopfor examplevsThe first way is opening and closing the file for each  which may cause performance problems compared to the second way with opens and closes the file just once.
Again for completeness I'll add my most useful use-case for  statements.I do a lot of scientific computing and for some activities I need the  library for arbitrary precision calculations.  Some part of my code I need high precision and for most other parts I need less precision.I set my default precision to a low number and then use  to get a more precise answer for some sections:I use this a lot with the Hypergeometric Test which requires the division of large numbers resulting form factorials.  When you do genomic scale calculations you have to be careful of round-off and overflow errors.
See PEP 343 - The 'with' statement, there is an example section at the end.... new statement "with" to the Python  language to make      it possible to factor out standard uses of try/finally statements.
points 1, 2, and 3 being reasonably well covered:4: it is relatively new, only available in python2.6+ (or python2.5 using )
The with statement works with so-called context managers:http://docs.python.org/release/2.5.2/lib/typecontextmanager.htmlThe idea is to simplify exception handling by doing the necessary cleanup after leaving the 'with' block. Some of the python built-ins already work as context managers.
Another example for out-of-the-box support, and one that might be a bit baffling at first when you are used to the way built-in  behaves, are  objects of popular database modules such as:sqlite3psycopg2cx_oracleThe  objects are context managers and as such can be used out-of-the-box in a , however when using the above note that:When the  is finished, either with an exception or without, the connection is not closed. In case the  finishes with an exception, the transaction is rolled back, otherwise the transaction is commited.This means that the programmer has to take care to close the connection themselves, but allows to acquire a connection, and use it in multiple , as shown in the psycopg2 docs:In the example above, you'll note that the  objects of  also are context managers. From the relevant documentation on the behavior:When a  exits the  it is closed, releasing any resource eventually associated with it. The state of the transaction is not affected.
In python generally “with” statement is used to open a file, process the data present in the file, and also to close the file without calling a close() method. “with” statement makes the exception handling simpler by providing cleanup activities.General form of with:note: no need to close the file by calling close() upon file-var.close()


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#with
