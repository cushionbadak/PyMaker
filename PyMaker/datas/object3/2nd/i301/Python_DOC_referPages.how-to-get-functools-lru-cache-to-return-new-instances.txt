Natural Text
I use Python's  on a function which returns a mutable object, like so:If I call this function, mutate the result and call it again, I do not obtain a "fresh", unmutated object:I get why this happens, but it's not what I want. A fix would be to leave the caller in charge of using :However I would like to fix this inside . A pretty solution would be something likethough no  argument is actually taken by .Any suggestion as to how to best implement this behavior?EditBased on the answer from holdenweb, this is my final implementation. It behaves exactly like the builtin  by default, and extends it with the copying behavior when  is supplied.
Since the  decorator has unsuitable behaviour for you, the best you can do is to build your own decorator that returns a copy of what it gets from . This will mean that the first call with a particular set of arguments will create two copies of the object, since now the cache will only be holding prototype objects.This question is made more difficult because  can take arguments ( and ), so a call to  returns a decorator. Remembering that a decorator takes a function as its argument and (usually) returns a function, you will have to replace  with a function that takes two arguments and returns a function that takes a function as an argument and returns a (wrapped) function which is not an easy structure to wrap your head around.You would then write your functions using the  decorator instead of the standard one, which is now applied "manually" inside the updated decorator.Depending on how heavy the mutations are, you might get away without using deepcopy, but you don't give enough information to determine that.So your code would then readThis printsso the cacheing behaviour your require appears to be present. Note also tht the documentation for  specifically warns thatIn general, the LRU cache should only be used when you want to reuse previously computed values. Accordingly, it doesnâ€™t make sense to cache functions with side-effects, functions that need to create distinct mutable objects on each call, or impure functions such as time() or random().


Answer URL
https://docs.python.org/3/library/functools.html#functools.lru_cache
