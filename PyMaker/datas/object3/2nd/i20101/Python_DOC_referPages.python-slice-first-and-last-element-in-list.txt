Natural Text
Is there a way to slice only the first and last item in a list?For example; If this is my list:I want to do this (obviously  is not valid syntax):Some things I have tried:
One way:A better way (Doesn't use slicing, but is easier to read):
Just thought I'd show how to do this with numpy's fancy indexing:Note that it also supports arbitrary index locations, which the  method would not work for:As DSM points out, you can do something similar with itemgetter:

You can do it like this:
Some people are answering the wrong question, it seems.  You said you want to do:Ie., you want to extract the first and last elements each into separate variables.In this case, the answers by Matthew Adams, pemistahl, and katrielalex are valid.  This is just a compound assignment:But later you state a complication: "I am splitting it in the same line, and that would have to spend time splitting it twice:"So in order to avoid two split() calls, you must only operate on the list which results from splitting once.In this case, attempting to do too much in one line is a detriment to clarity and simplicity.  Use a variable to hold the split result:Other responses answered the question of "how to get a new list, consisting of the first and last elements of a list?"  They were probably inspired by your title, which mentions slicing, which you actually don't want, according to a careful reading of your question.AFAIK are 3 ways to get a new list with the 0th and last elements of a list:The advantage of the list comprehension approach, is that the set of indices in the tuple can be arbitrary and programmatically generated.
What about this?
Actually, I just figured it out:
Python 3 only answer (that doesn't use slicing or throw away the rest of the , but might be good enough anyway) is use unpacking generalizations to get  and  separate from the middle:The choice of  as the catchall for the "rest" of the arguments is arbitrary; they'll be stored in the name  which is often used as a stand-in for "stuff I don't care about".Unlike many other solutions, this one will ensure there are at least two elements in the sequence; if there is only one (so  and  would be identical), it will raise an exception ().
More General Case: Return N points from each end of listThe answers work for the specific first and last, but some, like myself, may be looking for a solution that can be applied to a more general case in which you can return the top N points from either side of the list (say you have a sorted list and only want the 5 highest or lowest), i came up with the following solution:and an example to return bottom and top 3 numbers from list 1-10:
You can use something like if you really want to use slicing. The advantage of this is that it cannot give index errors and works with length 1 or 0 lists as well.
This isn't a "slice", but it is a general solution that doesn't use explicit indexing, and works for the scenario where the sequence in question is anonymous (so you can create and "slice" on the same line, without creating twice and indexing twice): You could just inline it as (after  for brevity at time of use):but if you'll be reusing the getter a lot, you can save the work of recreating it (and give it a useful, self-documenting name) by creating it once ahead of time.Thus, for your specific use case, you can replace:with:and  only once without storing the complete  in a persistent name for  checking or double-indexing or the like.Note that  for multiple items returns a , not a , so if you're not just unpacking it to specific names, and need a true , you'd have to wrap the call in the  constructor.
Another python3 solution uses tuple unpacking with the "*" character:
These are all interesting but what if you have a version number and you don't know the size of any one segment in string from and you want to drop the last segment.  Something like 20.0.1.300 and I want to end up with 20.0.1 without the 300 on the end.  I have this so far:which returns in list form as:How do I get it back to into a single string separated by periods
I found this might do this:
Now just make an variable outside the function and recall the function : like this:


Answer URL
https://docs.python.org/3/library/operator.html#operator.itemgetter
