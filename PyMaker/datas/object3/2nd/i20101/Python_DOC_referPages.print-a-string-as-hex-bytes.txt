Natural Text
I have this string:  and I want to print it using Python as . works only for integers. How can it be done?
Your can transform your string to a int generator, apply hex formatting for each element and intercalate with separator:

For Python 2.x:The code above will not work with Python 3.x, for 3.x, the code below will work:
Another answer in two lines that some might find easier to read, and helps with debugging line breaks or other odd characters in a string:
Some complements to Fedor Gogolev answer:First, if the string contains characters whose 'ASCII code' is below 10, they will not be displayed as required. In that case, the correct format should be :Second, if your "string" is in reality a "byte string" -- and since the difference matters in Python 3 -- you might prefer the following:Please note there is no need for conversion in the above code as a bytes objects is defined as "an immutable sequence of integers in the range 0 <= x < 256".
Print a string as hex bytes?The accepted answer gives:returns: The accepted answer works only so long as you use bytes (mostly ascii characters). But if you use unicode, e.g.:You need to convert to bytes somehow.If your terminal doesn't accept these characters, you can decode from utf-8 or use the names (so you can paste and run the code along with me):So we see that: returnsa poor/unexpected result - these are the code points that combine to make the graphemes we see in unicode, from the unicode consortium - representing languages all over the world. This is not how we actually store this information so it can be interpreted by other sources, though.To allow another source to use this data, we would usually need to convert to utf-8 encoding, for example, to save this string in bytes to disk or to publish to html. So we need that encoding to convert the code points to the code units of utf-8 - in Python 3,  is not needed because  are iterables of integers:Or perhaps more elegantly, using the new f-strings (only available in Python 3):In Python 2, pass  to  first, i.e.  - more examples:
You can use 's(append  if you require lower-case). This works for both Python 2 & 3.
Using map and lambda function can produce a list of hex values, which can be printed (or used for other purposes)
This can be done in following ways:The output of this will be in hex as follows:0x48 0x65 0x6c 0x6c 0x6f 0x20 0x57 0x6f 0x72 0x6c 0x64 0x20 0x21 0x21
Just for convenience, very simple. 
In Python 3:This is similar to @Aesthete's answer.
Using  in python2 (its built-in)


Answer URL
https://docs.python.org/3/library/functions.html#bytes
