Natural Text
When creating an XML file with Python's etree, if we write to the file an empty tag using , I get:Unfortunately, our XML parser library used in Fortran doesn't handle this even though it's a correct tag. It needs to see:Is there a way to change the formatting rules or something in etree to make this work?
As of Python 3.4, you can use the  argument for both the  function and the  method:In older Python versions, (2.7 through to 3.3), as a work-around you can use the  method to write out the document:Both the  method and the  function support the  keyword argument.On even earlier versions of Python (2.6 and before) you can install the external ElementTree library; version 1.3 supports that keyword.Yes, it sounds a little weird, but the  output mostly outputs empty elements as a start and end tag. Some elements still end up as empty tag elements; specifically , ,  and such. Still, it's that or upgrade your Fortran XML parser to actually parse standards-compliant XML!
This was directly solved in Python 3.4. From then, the  method of  has the  parameter which: controls the formatting of elements that contain no content. If True (the default), they are emitted as a single self-closed tag, otherwise they are emitted as a pair of start/end tags.More details in the xml.etree documentation.
Adding an empty  is another option:But note that this will change not only the representation but also the structure of the document: i.e.  will be  instead of .Oh, and like Martijn said, try to use better libraries.
If you have sed available, you could pipe the output of your python script to Which will find any occurence of  and replace it by 
Paraphrasing the code, the version of  I use contains the following in a  method:To steer the program counter I created the following:Then I set  on those ElementTree nodes where I want an open-close tag rather than a self-closing one.By "steering the program counter" I mean constructing a set of inputs—in this case an object with a somewhat curious truth test—to a library method such that the invocation of the library method traverses its control flow graph the way I want it to. This is ridiculously brittle: in a new version of the library, my hack might break—and you should probably treat "might" as "almost guaranteed". In general, don't break abstraction barriers. It just worked for me here.


Answer URL
https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring
https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.write
https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.write
