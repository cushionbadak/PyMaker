Natural Text
I'm assigning all my MongoDB documents a GUID using uuid.uuid1(). I want a way I can derive an 11 character, unique, case-sensitive YouTube-like ID, such as from uuid's resulting hex string which looks likeI want to be able to match the shortened ID to the hex and vice-versa, dynamically without having to store another string in the database. Does anyone have some sample code or can point me in the direction of the module or formula that can do this?
Convert the underlying bytes to a base64 value, stripping the  padding and the newline.You probably want to use the  function to avoid using  and  ( and  are used instead), so the resulting string can be used as a URL path element:The reverse:To turn that into generic functions:This gives you a method to represent the 16-byte UUID in a more compact form. Compress any further and you loose information, which means you cannot decompress it again to the full UUID.YouTube's unique string is thus not based on a full 16-byte UUID, their 11 character ids are probably stored in the database for easy lookup and based on a smaller value.
You could look into Python's  model. A GUID is essentially a base-16 representation of a number, and you could trim out the hyphens, decode from base 16, and encode into base 64. Going in reverse requires decoding from base 64, encoding in base 16, and inserting the hyphens in the appropriate places.
For those looking specifically for a way to shorten uuids in a url safe way, the really useful answer from @MartijnPieters can be simplified some using the  module to handle the characters that are not url safe similar to the comment on that answer from @okoboko (without a few unnecessary bits).


Answer URL
https://docs.python.org/3/library/base64.html#base64.urlsafe_b64encode
https://docs.python.org/3/library/base64.html
