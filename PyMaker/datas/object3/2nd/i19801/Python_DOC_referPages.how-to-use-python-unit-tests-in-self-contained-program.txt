Natural Text
I want to use Python 3.3 with unit tests in small self-contained program, i.e. I don't want to split it up into a command line part and a "functional" part, which can be tested if it is started on itself on the command line.So I have this little program:Unfortunately, the print() is never reached, since unittest.main() exits the program.  And even if it would not exit, it would print all kinds of output to the screen that I don't want to see in normal operation.Is there a way to run the tests silently, as long as there is no error?  Of course, they should complain loudly if something doesn't work.I've seen Run python unit tests as an option of the program, but that doesn't answer my question as well.
It is possible to achieve the effect you want with a plain  module. You just need to write your own simple test runner. Like this: function will return  if all tests pass successfully. But if there is a test failure, it will print all errors/failures to stdout. For example:
Just use python's nosetests or py.test. Then you can write the code exactly the way you want to - with nothing except  functions added to the program and run tests viaorAlso yeah no need of classes then:Though it doesn't answer you "run silently" part. For me this + command line history works fine. For tiny programs ofc, basically snippets.
Other test frameworks won't help here because it's not test framework which is an issue here. Having said that  is the best one out there :).The problem is  function is designed specifically to run tests in a standard way and does not offer a way to customize this process in any way. This leaves us with two optionsUse  for running tests in separate process using , check theoutput and continue with running our program if all tests passedLeave high level  alone and use other facilitiesprovided by unittest moduleI'll write about both of these options as soon as I find some more free time.


Answer URL
