Natural Text
While looking over some code in Think Complexity, I noticed their  class assigning values to itself.  I've copied a few important lines from that class and written an example class, , that fails at this behavior.I'm sure the different built in types all have their own way of using this, but I'm not sure whether this is something I should try to build into my classes.  Is it possible, and how?  Is this something I shouldn't bother with, relying instead on simple composition, e.g. ?  Should it be avoided outside built in types?I ask because I was told "You should almost never inherit from the builtin python collections"; advice I'm hesitant to restrict myself to.To clarify, I know that  won't "work", and I could easily make it "work", but I'm curious about the inner workings of these built in types that makes their interface different from a child of .
Disclaimer : I might be wrong.the notation :is legit in the Graph class because it inherits fro dict. This notation is from the dictionnaries ssyntax not from the class attribute declaration syntax.Although all namespaces associated with a class are dictionnaries, in your class ChildObject, self isn't a dictionnary. Therefore you can't use that syntax.Otoh, in your class Graph, self IS a dictionnary, since it is a graph, and all graphs are dictionnaries because they inherit from dict.
They are accomplishing this magic by inheriting from . A better way of doing this is to inherit from UserDict or the newer collections.MutableMappingYou could accomplish a similar result by doing the same:You can also define two special functions to make your class dictionary-like:  and . You can see an example of this at Dive Into Python - Special Class Methods.
Is using something like this ok?
Your ObjectChild doesn't work because it's not a subclass of dict. Either of these would work:or
I realize this is an old post, but I was looking for some details around item assignment and stumbled upon the answers here. Ted's post wasn't completely wrong. To avoid inheritance from dict, you can make a class inherit from MutableMapping, and then provide methods for  and . Additionally, the class will need to support methods for , , , and (optionally) other inherited mixin methods, like . The documentation has more info on the details.Example use:Hope this serves to clarify how to properly implement item assignment for others stumbling across this post :)
You don't need to inherit from dict.  If you provide setitem and getitem methods, you also get the desired behavior I believe.


Answer URL
https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping
