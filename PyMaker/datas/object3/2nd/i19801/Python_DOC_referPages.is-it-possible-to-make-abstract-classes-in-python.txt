Natural Text
How can I make a class or method abstract in Python?I tried redefining  like so:but now if I create a class  that inherits from  like so:then I can't instantiate  either, since it calls its super class's  method.Is there a better way to define an abstract class?
Use the  module to create abstract classes. Use the  decorator to declare a method abstract, and declare a class abstract using one of three ways, depending upon your Python version.In Python 3.4 and above, you can inherit from . In earlier versions of Python, you need to specify your class's metaclass as . Specifying the metaclass has different syntax in Python 3 and Python 2. The three possibilities are shown below:Whichever way you use, you won't be able to instantiate an abstract class that has abstract methods, but will be able to instantiate a subclass that provides concrete definitions of those methods:
The old-school (pre-PEP 3119) way to do this is just to  in the abstract class when an abstract method is called.This doesn't have the same nice properties as using the  module does. You can still instantiate the abstract base class itself, and you won't find your mistake until you call the abstract method at runtime. But if you're dealing with a small set of simple classes, maybe with just a few abstract methods, this approach is a little easier than trying to wade through the  documentation.
Here's a very easy way without having to deal with the ABC module.In the  method of the class that you want to be an abstract class, you can check the "type" of self.  If the type of self is the base class, then the caller is trying to instantiate the base class, so raise an exception.  Here's a simple example:When run, it produces:This shows that you can instantiate a subclass that inherits from a base class, but you cannot instantiate the base class directly.Irv
This one will be working in python 3 
Most Previous answers were correct but here is the answer and example for Python 3.7. Yes, you can create an abstract class and method. Just as a reminder sometimes a class should define a method which logically belongs to a class, but that class cannot specify how to implement the method. For example, in the below Parents and Babies classes they both eat but the implementation will be different for each because babies and parents eat a different kind of food and the number of times they eat is different. So, eat method subclasses overrides AbstractClass.eat. OUTPUT:
Yes, you can create abstract classes in python with the abc (abstract base classes) module. This site will help you with it: http://docs.python.org/2/library/abc.html
Yes you can, using the  - Abstract Base Classes module, here is an example:Python3.6Python2.x
also this works and is simple:
In your code snippet, you could also resolve this by providing an implementation for the  method in the subclass, likewise:But this is a hack and I advise you against it, unless you know what you are doing. For nearly all cases I advise you to use the  module, that others before me have suggested.Also when you create a new (base) class, make it subclass , like this: . I don't know if it is that much significant anymore, but it helps retain style consistency on your code
Just a quick addition to @TimGilbert's old-school answer...you can make your abstract base class's init() method throw an exception and that would prevent it from being instantiated, no?


Answer URL
https://docs.python.org/3/library/abc.html#abc.ABC
https://docs.python.org/3/library/abc.html
