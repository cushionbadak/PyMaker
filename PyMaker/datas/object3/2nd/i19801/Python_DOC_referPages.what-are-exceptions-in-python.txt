Natural Text
I've read three beginning level Python books, however, I still don't understand exceptions. Could someone give me a high level explanation and/or point me in the right direction to a good tutorial for them?  I guess I understand that exceptions are errors in code or process that cause the code to stop working. 
In the old days, when people wrote in assembly language or C, every time you called a function that might fail, you had to check whether it succeeded. So you'd have code like this:The idea behind exceptions is that you don't worry about those exceptional cases, you just write this:If Python can't open the file, or turn the line into an integer, it will raise an exception, which will automatically close the file, exit your function, and quit your whole program, printing out useful debugging information.In some cases, you want to handle an exception instead of letting it quit your program. For example, maybe you want to print the error message and then ask the user for a different filename:Once you know the basic idea that exceptions are trying to accomplish, the tutorial has a lot of useful information.If you want more background, Wikipedia can help (although the article isn't very useful until you understand the basic idea).If you still don't understand, ask a more specific question.
The best place to start with that is Python's list of built-in exceptions, since most you'll see derive from that.Keep in mind that anybody can throw any error they want over anything, and then catch it and dismiss it as well. Here's one quick snippet that uses exceptions for handling instead of if/else where  throws an exception if the file isn't found in any of a list of paths. Despite that particular exception, the code will still work. However, the code would throw an uncaught error that stops execution if the file exists but the permissions don't allow reading.
Python's documentation: http://docs.python.org/2/tutorial/errors.htmlFor a high-level explanation, say we want to divide .  We know that  can't equal 0, but we might not want to perform the check every time we do the division:We can use exceptions to try the block without performing the conditional first, and then handle the behavior of the program based on whether or not something went wrong in the  block.  In the following code, if , then 'oops' is printed to the console:Here is a list of exceptions that can be used: http://docs.python.org/2/library/exceptions.html#exceptions.BaseExceptionHowever, if you know how it may fail, you can just open a python console and see what exception is raised:
Exceptions are not necessarily errors. They are things that get raised when the code encounters something it doesn't (immediately) know how to deal with. This may be entirely acceptable, depending on how you make your code. For instance, let's say you ask a user to put in a number. You then try to take that text (string) and convert it to a number (int). If the user put in, let's say, "cat", however, this will raise an exception. You could have your code handle that exception, however, and rather than break, just give the user a small message asking him to try again, and please use a number. Look at this link to see what I'm talking about: http://www.tutorialspoint.com/python/python_exceptions.htmAlso, you usually handle exceptions with a try, except (or catch) block. Example:Hope it helps!


Answer URL
