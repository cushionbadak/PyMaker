Natural Text
According to the documentation I can set the verbosity level of a python unittest when calling , e.g.How can I access this information within a ?
The problem with any method based on patching or subclassing  is that you have to get the patch in place before  is started. But that's not going to be possible if your test case is being run via discovery:An approach that works in the discovery case is to use the  module to search up the stack until a method on  is found:
A way to achieve this is to subclass  and  in a file. Here, you define a variable (e.g. ) the can be used globally or as class or Singleton, and then you override :Later, you subclass :With this approach it is possible to use the verbose,verbosity or any other number and information in a (derived) TestCase, from arguments passed on to a unittest. Comments welcome. 
I wasn't able to get Martjin Pieters' solution to work, I think because unittest.main runs the tests when it is initialized, before its result has been assigned to the global.Instead, I replaced my initialiation with:In the test cases that need to know the verbosity, I use something like:
If you just want to access the  option, you can check it with  in your test (inheriting from ). The field is true if  is called for that test.
My solution was quite different. Instead of monkeypatching I took advantage that all my tests are triggered via specially crafted launch script. It gathers various config variables and setups environment so it was pretty straight forward to just add one extra export.It might be sensible solution for more generic cases, instead of running tests directly, create test-runner.sh (or whatever) that will make exactly the same shell call but with extra export prefixed to it.Because one picture is worth thousands of words:This is my test runner:And then I have this method on unit test:
Climb the stack, find the "TestProgram" instance created by unittest.main( ), and access the verbosity field:


Answer URL
https://docs.python.org/3/library/inspect.html
