Natural Text
Is there any pre-made optimized tool/library in Python to cut/slice lists for values "less than" something?Here's the issue: Let's say I have a list like:and I want to delete all the numbers which are  6, so the resulting list would be6 is not in the list, so I can't use the built-in  method of the list. I can do things like:which would be fairly quick method if the index to cut from is close to the end of the list, but which will be inefficient if the item is close to the beginning of the list (let's say, I want to delete all the items which are , there will be a lot of iterations).I can also implement my own find method using binary search or such, but I was wondering if there's a more... wide-scope built in library to handle this type of things that I could reuse in other cases (for instance, if I need to delete all the number which are ).Thank you in advance.
You can use the bisect module to perform a sorted search:
 is what you are looking for, I guess.
If you just want to filter the list for all elements that fulfil a certain criterion, then the most straightforward way is to use the built-in  function.Here is an example:the  will contain:Note: This method does not rely on the ordering of the list, so for very large lists it might be that a method optimised for ordered searching (as bisect) performs better in terms of speed.
Bisect left and right helper functionTested in Ubuntu 16.04, Python 3.5.2.
Adding to Jon's answer, if you need to actually delete the elements less than 6 and want to keep the same reference to the list, rather than returning a new one.You should note as well that  will only work on a sorted list.


Answer URL
https://docs.python.org/3/library/functions.html#filter
