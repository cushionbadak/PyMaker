Natural Text
I have a file that I'd like to parse into a csv.  The file is an export file, and arrives to me in the following format (line by line, each file containing thousands of lines):I'd like to get the data into a csv file as follows:I've successfully done this, but using the wrong tools I believe.  I've been using lines like below:which gives me something like..The problems are: I have to use successive lines to parse each character and word into csv (descriptor words, colons, brackets, etc..) and it takes a long time over a large data-set.  Also I'm saving it all to a secondary file instead of writing in place.  By replacing the colons with commas, my times get broken down into separate columns.  I've spent a few days playing with different options and arrived at regex, but as a complete newb to python have yet to come up with a solution.  It may be simpler to rebuild the times from comma separated blocks into the correct format, but I'm at a loss. Please assist.  Thanks in advance.  Edit:I've tried to implement Sparkeandshine as well as Julian's versions of a workable solution.  I came closest to getting Sparkeandshie's version to work, but am only able to iterate one line; the one actually in the solution, not the entire file.  I spent the last 24 trying different iterations of both solutions, to no avail.  Here is where I am:Edit: Sparkandshines below solution works great for set lines, but I have found that some of my data has lines of varying lengths.  For example, sometimes a few lines will be short a few "columns" of data, or the last three columns may repeat twice.  To get around this problem I have been using "try" and "except error, continue" for the possible lengths.  With this method I get duplicate lines in my final file; is there a better way to use Sparkandshine's solution with lines of varying length? ...or is it easier to just find duplicate lines (by checking / comparing two/three columns) and removing them?   
Process each line using,Write to a csv file with,Or process all lines and save the results to a list of lists, then wirte to a csv file with ,The full source code,
If you have a known structure of your input files, you don't need to use regular expressions, as they are slower. For your case, try using something similar to the code below:You are editing only the data that requires it and then write the whole row to the csv.


Answer URL
https://docs.python.org/3/library/csv.html?highlight=csv#module-csv
