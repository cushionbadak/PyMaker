Natural Text
In Python (3.5.0), I'd like to print a string containig unicode symbols (more precisely, IPA symbols retrieved from Wiktionary in JSON format) to the screen or a file, e.g.correctly prints- however, whenever I use the string in a variable, e.g.it just prints out the string as-is, i.e.which isn't of much help.I have tried out several ways to avoid this (like going via /) but non of that helped.I cannot work witheither since I am already retrieving the string as a variable (as the result of a regex-match) and at no point in my code enter the actual literals.It might as well be that I made a mistake during the conversion from the JSON result; by now I have converted the byte stream into a string using , extracted the IPA part via regex (and done a replace on the double backslashes) and stored it in a string variable.Edit:This is the code I had so far:After modification with :For both versions, when calling it withwhat I get is:Is there any way to have the string printed/written as already decoded, even when passed as a variable?
You don't have this value:because that value prints just fine:You at the very least have literal  and  characters:Those  sequences are one backslash each, but escaped. Since this is JSON, the string is probably also surrounded by double quotes:Because that string has literal backslashes, that is exactly what is being printed:Note how the value echoed shows a string literal you can copy and paste back into Python, so the  character is escaped again for you.That value is valid JSON, which also uses  escape sequences. Decode it as JSON:Now you have a proper Python value:Note that in Python 3, almost all codepoints are printed directly even when  creates a literal for you. The  result directly shows all text in the value, even though the majority is non-ASCII.This value does not contain literal backslashes or  characters:As a side note, when debugging issues like this, you really want to use the  and  functions so you get representations that let you properly reproduce the value of a string:Note that only  on a string with actual Unicode codepoints beyond the Latin-1 range produces actual  escape sequences. (For  output Python can still fall back to  escapes if you terminal or console can't handle specific characters).As for your update, just parse the whole response as JSON, and load the right data from that. Your code instead converts the  response body to a  (the  call on bytes does not decode the data; instead you doubly escape escapes this way). Decode the bytes from the network as UTF-8, then feed that data to :Note that I also make sure to quote the  value into the URL query string.The above prints out any IPA it finds:


Answer URL
https://docs.python.org/3/library/functions.html#repr
https://docs.python.org/3/library/functions.html#ascii
