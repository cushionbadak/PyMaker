Natural Text
Python sometimes generates strange cryptic byte arrays. I have no clue how to interpret them.Consider the following example.The struct.pack function should output the 'bytes-representation' of each value in the list. The list consists of 64-bit floating point numbers (my computer is 64-bit), so I would expect every float to be represented by 8 bytes:By the way, I have used the following website to make the proper conversion: http://babbage.cs.qc.cuny.edu/IEEE-754.old/Decimal.htmlUnfortunately, Python does not output those bytes I would expect. Instead, Python outputs some very cryptic list of bytes. But is this really a list of bytes? The thing that Python outputs is so strange:Please help me to understand what Python is doing here.EDITApparently I should use  instead of , since I'm using double precision floating point numbers on my machine. Thank you mr. Rad Lexus for your answer. But I'm still a bit puzzled about the Python outputs. Let me clarify.I start with the following code that you gave me:Before proceeding, I inspect the object  to get a grasp of what is happening. This is what I get from :Some entries in  are 8 bytes long. That is what I would expect. But some entries are shorter. Anyway, there is no entry that gives the correct 8-byte representation of the corresponding float number - except for the float .Your code continues with some magic to extract the actual correct 8 bytes per float:Now we get the correct result. But why is the  object not yet containing the correct 8-bytes per float, to begin with? Why is this extra magic needed?
Format  is for 32bit float, you need to use  to denote 64bit float (double). See Format characters - Explicitly specify  to get same result with the site (big-endian)Use  to conver the binary string to hexadecimal representation.If you want to get each float representation separately, you need to iterate them and conver them. (using loop or list comprehension, ..)
You want to unpack as  but in the program you use the specifier for : . So that's what you get:(See python struct pack double for why you see some ASCII characters.)This code will print out one line of hex per number:Result:


Answer URL
https://docs.python.org/3/library/struct.html#format-characters
https://docs.python.org/3/library/struct.html#byte-order-size-and-alignment
https://docs.python.org/3/library/binascii.html#binascii.hexlify
