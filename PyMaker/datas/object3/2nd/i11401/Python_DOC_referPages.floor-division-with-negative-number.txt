Natural Text
The expression  yields , where floor division produces the whole number after dividing a number. But with a negative number, why does  return ?
The  operator explicitly floors the result. Quoting the Binary arithmetic operations documentation:the result is that of mathematical division with the ‘floor’ function applied to the result.Flooring is not the same thing as rounding to 0; flooring always moves to the lower integer value. See the  function:Return the floor of x, the largest integer less than or equal to x. For , first the result of  is calculated, so . Flooring then moves to the lower integer value, so .If you want to round towards zero instead, you'll have to do so explicitly; you could do this with the  function on true division: removes the decimal portion, so always rounds towards zero instead.
Floor division will also round down to the next lowest number, not the next lowest absolute value., which rounds down to 1, and up to 2., which rounds down to -2, and up to -1.
 in Python is a "floor division" operator. That means that the result of such division is the floor of the result of regular division (performed with / operator).The floor of the given number is the biggest integer smaller than the this number. For exampleFor negative numbers it is less intuitive:  so . Similarly  is defined to do the same thing as : return the largest integer value less than or equal to the floating-point result. 
A useful way to understand why floor division // yields the results it does for negative values is see this as complimenting the modulo, or remainder, % operator.i.e.But OrIt can seem strange, but it ensures results such as  etc. when generating sequences.


Answer URL
https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations
https://docs.python.org/3/library/math.html#math.floor
