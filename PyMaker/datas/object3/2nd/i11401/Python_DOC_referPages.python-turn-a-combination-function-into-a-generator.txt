Natural Text
I have a function that creates all combinations of list items, representing this as a list of lists:Calling  gives me a generator object, but calling  does not give me one combo at a time, it gives me the entire list of combos.How can I turn this into a generator function that I can call?
 doesn't create a list of lists. It actually flattens things. in this line you're just yielding a single item, the flattened list of all combinations.For Python 2.X  will work, but in Python 3.X  no longer returns a list. Instead it returns a map object. So, if anyones on Python 3.X simply turn this into  for this to run on 3.X.I think what you actually want is something like this:An alternative from the comment(s) for a one-liner:Instead of yielding we can return a generator object and cycle through just as we would with the .e.g. -As for this being "Pythonic" I wouldn't really say so. I actually prefer the nested forloop it is by far more readable.Although, we can still try to clean it up some more / compact it by doing a few "tricks"But, now you've lost all readability and this looks like something you'd see in Perl. (the horror!)Output:
 already has a method for joining iterables together: it's called .  What you want is something like the following:Simple, short, and fairly Pythonic in my opinion.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
