Natural Text
In Python 3.4.1, I'm trying to measure how long it takes for a function to run and complete then recording it. I'm currently doing it this like so:This usually results in Python spitting out something around 6.29989986222767E-06 (or 0.00000629989986222767E). Then I tried it with a time.sleep:This again resulted in 6.87261802845284E-06, even though (at least I think) it should take 3 seconds. I have tried this using threads, with the same result. What do you think? How can I measure how long it takes for a function to run and complete?
I generally use this decorator to time my functions: gives more precise time for benchmarks than  primarily because  measures CPU time.  will return seconds passed since epoch (i.e. wall time), which is what you need.Or you can also use  https://docs.python.org/3/library/timeit.html
For quick performance analyses I use the following two lines (plus imports):It's short, simple and all I usually need.(In most cases I've imported  anyway. So thats no overhead for me.)
I'll admit that I'm not very familiar with Python's asyncio, but I believe the issue is not in your timing, but in your useage of . I think you are just creating a future with the value of method(), however that is all that you are timing: the actual creation of this promise.You are not timing the actual evaluation of the future value. This is why timing sleep(3) and method() take roughly the same amount of time. I suggest trying to change  with  or just  if you can. 


Answer URL
https://docs.python.org/3/library/timeit.html
