Natural Text
How to efficiently convert a 32-bit integer into an array of four 8-bit integers in Python? Currently I have the following code, which is super slow: E.g:I need to achieve the same behavior on unsigned 32-bit integers. Additionally. Is it possible to vectorize it for a large numpy array of 32bit integers?
Using  as documented in:http://docs.scipy.org/doc/numpy/reference/generated/numpy.dtype.htmlOr adapted to your case:compare More documentation on http://docs.scipy.org/doc/numpy/user/basics.rec.html2) Tuple argument: The only relevant tuple case that applies to record structures is when a structure is mapped to an existing data type. This is done by pairing in a tuple, the existing data type with a matching dtype definition (using any of the variants being described here). As an example (using a definition using a list, so see 3) for further details):x = np.zeros(3, dtype=('i4',[('r','u1'), ('g','u1'), ('b','u1'), ('a','u1')]))array([0, 0, 0])x['r'] # array([0, 0, 0], dtype=uint8)In this case, an array is produced that looks and acts like a simple int32 array, but also has definitions for fields that use only one byte of the int32 (a bit like Fortran equivalencing).One way to get a 2d array of the 4 bytes is:Same idea, but more compact:
In Python 3.2 and higher, there is a new  method  which can also be used:
Just using python builtin division and modulus provides a 6x speedup in my tests.
You can either use bitwise operations:Or alternatively you can use  package in Python:One nice thing you can exploit about  package is that you can perform this  to  very efficiently:UPDATE: Compare  with :If you were to perform some actual computation:Take home message: use !


Answer URL
https://docs.python.org/3/library/stdtypes.html#int.to_bytes
