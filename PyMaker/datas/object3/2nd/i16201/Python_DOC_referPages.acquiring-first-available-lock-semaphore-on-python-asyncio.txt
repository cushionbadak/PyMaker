Natural Text
Using the new asyncio in python 3.4, how do I acquire the first lock/semaphores that is available from a set of locks/semaphores?The approach that I did was using , then cancel all the s that are still pending once I manage to acquire one. But I'm concerned that this may cause subtle bugs / race conditions, and I have the feeling that there is a more elegant way of doing it.The code above gives (memory addresses edited):
If I understand your problem correctly, you want to have a two different pools of locks, one that allows X number of connections per-proxy, and another that allows Y number of global connections. A single  object can actually be used for this pretty easily:class asyncio.Semaphore(value=1, *, loop=None)A semaphore manages an internal counter which is decremented by each  acquire() call and incremented by each release() call. The counter can  never go below zero; when acquire() finds that it is zero, it blocks,  waiting until some other thread calls release().So, rather than using a list of  objects each initialized with the default  of 1 to implement the pool, just initialize the  of a single  to whatever the maximum number of tasks you want to be able to run concurrently is.Then in your code, just always acquire the proxy semaphore prior to acquiring the global oneThat way, you won't hold a global lock while you wait on a proxy-specific lock, which could potentially block a connection from another proxy that would be free to run if it could get a global lock.Edit:Here's a complete example that demonstrates a way to do this without requiring a proxy-specific lock at all. Instead, you run one coroutine for each proxy, all of which consume from the same queue. The proxy coroutines limit the number of concurrent tasks they run simply by keeping track of the active tasks they've launched, and only starting new tasks when they drop below the limit. When a proxy coroutine launches a task, that task is responsible for acquiring the global semaphore. Here's the code:Sample output:


Answer URL
https://docs.python.org/3/library/asyncio-sync.html#semaphores
