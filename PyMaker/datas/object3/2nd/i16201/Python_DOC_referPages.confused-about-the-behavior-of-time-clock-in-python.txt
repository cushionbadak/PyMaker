Natural Text
So I can use  to measure the running time of a function call:But now if just call  repeatedly from the interactive shell:  What is the meaning of these numbers?And now if I do this:Ok I guess that  is not counted in processing time, so the two numbers are very close. But what does 8.361528 correspond to?I did read the documentation, but I still don't understand:Help on built-in function clock in module time:clock(...)      clock() -> floating point number
 docs:On Unix, return the current processor time as a floating point number expressed in seconds...  On Windows, this function returns wall-clock seconds elapsed since the first call to this function...i.e., the behavior (e.g., what "processor time" means, whether the  time is included, what is the precision) depends on platform but units are seconds on all platforms.So I can use time.clock() to measure the running time of a function call:Use  instead. It is assigned to  or  depending on OS. On Python 3.3+  is  on all platforms.It returns the value in seconds (only relative values are meaningful). It includes "sleep" time. It provides the highest available resolution to measure a short duration. The behavior is consistent across platforms.
What system? "This method returns the current processor time as a floating point number expressed in seconds on Unix and in Windows it returns wall-clock seconds elapsed since the first call to this function, as a floating point number."http://www.tutorialspoint.com/python/time_clock.htm
 appears return the time the Python process has spent computing things. In the interactive console at least, the time it spends waiting for your input is somehow not included in that time.Here's a snippet you can use to see more expected behavior of :


Answer URL
https://docs.python.org/3/library/time.html#time.clock
https://docs.python.org/3/library/time.html#time.perf_counter
