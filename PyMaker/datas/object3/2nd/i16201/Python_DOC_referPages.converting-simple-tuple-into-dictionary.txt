Natural Text
I have a even length tuple having elements like  which I want to convert to dictionary having elements like .I tried using  but that wasn't helping. I have just started learning Python and any help will be highly appreciable.
It looks like you're trying to group the tuple into pairs, and then make a dict out of those pairs. There are two ways to do this. The first is zipping slices:This is called an "extended slice", which is of the form . The first one is , so it has the default start (the beginning of the tuple) and stop (the end of the tuple), and a step of 2, so it gets elements 0, 2, and 4. The second one is , so it's the same, but it starts at 1 instead of the default, so it gets elements 1, 3, and 5.See the tutorial section on Lists for more details. (Of course you're using a tuple, not a list, but they both slice the same way.)The second is zipping an iterator with itself:Since the two references to  are both the same iterator, whenever you advance one, it advances both. So, the first one gets #0, then the second gets #1, then the first gets #2, the second #3, and so on.See the tutorial section on Iterators for more details. Also see How grouper works, which explains a more general version of this idea (or at least tries to).Either way, you get , then , then , so you can just pass that to :So, which one is better?Slicing is probably easier to understand. It's also usually faster.However, slicing doesn't work on arbitrary iterables, just sequences, it wastes memory on big inputs (you're essentially making a complete extra copy of the sequence), and it's a little harder to generalize.You should learn how both of them work so you can choose appropriately.
You can use a dict comprehension:Note that the part will generate a list of the form
Try this:
This should do the trick
Thanks to iterating-over-every-two-elements-in-a-list and python-dictionary-comprehensionn.


Answer URL
https://docs.python.org/3/tutorial/introduction.html#lists
