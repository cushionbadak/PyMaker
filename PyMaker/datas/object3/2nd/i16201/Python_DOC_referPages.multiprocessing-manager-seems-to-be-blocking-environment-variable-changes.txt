Natural Text
I use behave for running our gherkin based test suite, with a custom runner that handles running behave in parallel.This functions perfectly on my local (Windows 8.1) machine, and allows me to change environment variables within my subprocesses, using os.environ.updateThis fails on our Ubuntu 14.04 server and is not able to change the environment variables, which coincide with database names for each test to run under. Some stripped out code for what I am doing follows:Inside behave, we use the database in testing our Flask application. Flask is unable to find the set environment variable when running. EDIT: I dont know what changed, we are using the same version of Python on the server and my machine, and the same version of all known used packages. Environment variables are not being updated properly, and are therefore not accessible in later code.
Well, you could avoid using a  altogether, by using the  keyword argument to  to pass a normal  to all the workers:This doesn't really address whatever is going on with the , but will let you avoid the issue (assuming the  is  the real root cause).
The real problem came in my  function.The actual code used was a fair bit more complicated, and used behave's dry run to get a list of all unskipped scenarios in my feature files. Seemingly, this dry run imported our flask application.On windows, multiprocessing.Process does not share the sys.modules space with the parent process, on linux this is not the case. As the application was being imported in the parent process context, the children were all reusing that imported and configured flask app.This is documented at https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methodsOn Python3, multiprocessing.set_start_method('spawn') can be used to configure this to work on Linux, instead of forking. On windows, spawn is the default, hence why it worked therePython2 does not have this option, however, and I am looking into another solution to run this and collect the scenario list to run


Answer URL
https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods
