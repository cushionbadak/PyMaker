Natural Text
I am interested in understanding the new language design of Python 3.x.I do enjoy, in Python 2.7, the function :However, in Python 3.x things have changed:I understand the how, but I could not find a reference to the why. Why did the language designers make this choice, which, in my opinion, introduces a great deal of pain. Was this to arm-wrestle developers in sticking to list comprehensions?IMO, list can be naturally thought as Functors; and I have been somehow been thought to think in this way:
I think the reason why map still exists at all when generator expressions also exist, is that it can take multiple iterator arguments that are all looped over and passed into the function:That's slightly easier than using zip:Otherwise, it simply doesn't add anything over generator expressions.
Because it returns an iterator, it omit storing the full size list in the memory. So that you can easily iterate over it in the future not making any pain to memory. Possibly you even don't need a full list, but the part of it, until your condition is reached.You can find this docs useful, iterators are awesome.An object representing a stream of data. Repeated calls to the iteratorâ€™s  method (or passing it to the built-in function ) return successive items in the stream. When no more data are available a  exception is raised instead. At this point, the iterator object is exhausted and any further calls to its  method just raise  again. Iterators are required to have an  method that returns the iterator object itself so every iterator is also iterable and may be used in most places where other iterables are accepted. One notable exception is code which attempts multiple iteration passes. A container object (such as a ) produces a fresh new iterator each time you pass it to the  function or use it in a for loop. Attempting this with an iterator will just return the same exhausted iterator object used in the previous iteration pass, making it appear like an empty container. 
Guido answers this question here: "since creating a list would just be wasteful".  He also says that the correct transformation is to use a regular  loop.Converting  from 2 to 3 might not just be a simple case of sticking a  around it.  Guido also says:"If the input sequences are not of equal length,  will stop at the termination of the shortest of the sequences. For full compatibility with  from Python 2.x, also wrap the sequences in , e.g.becomes  "
In Python 3 many functions (not just  but ,  and others) return an iterator rather than the full list. You might want an iterator (e.g. to avoid holding the whole list in memory) or you might want a list (e.g. to be able to index).However, I think the key reason for the change in Python 3 is that while it is trivial to convert an iterator to a list using  the reverse equivalent  does not achieve the desired outcome because the full list has already been built and held in memory.For example, in Python 3  works just fine as there is little cost to building the  object and then converting it to a list. However, in Python 2  does not save any memory because the full list is constructed by  before the iterator is built.Therefore, in Python 2, separate functions are required to create an iterator rather than a list, such as  for  (although they're not quite equivalent),  for ,  for . By contrast Python 3 just requires a single function as a  call creates the full list if required.


Answer URL
https://docs.python.org/3/glossary.html#term-iterator
https://docs.python.org/3/whatsnew/3.0.html
