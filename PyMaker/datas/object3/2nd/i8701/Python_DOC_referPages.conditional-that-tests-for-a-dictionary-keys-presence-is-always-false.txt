Natural Text
I made a function that consumes two dictionaries,  and .  If there are any keys in  that aren't in , the function is supposed to just print , with no mutation of .But the  statement on the 5th line of my code doesn't seem to be working. It's supposed to trigger the next  statement, so no mutation of  occurs.
In Python, all comparisons have the same precedence, including .What's happening is comparison chaining, a special form intended to test transitive relationships like in math class:As Pawe≈Ç Kordowski pointed out in his comment, the above comparison chain is mostly equivalent to:(There is one difference:The "equivalent" code might evaluate  twice, while the comparison chain evaluates  exactly once.)In your case, the comparison chain is:...which is (mostly) equivalent to:This is only true if  contains  and  is empty... which should never happen.The problem with your code is the  --- in part because it turned a comparison into a comparison chain, but mostly because you never needed it in the first place.Python provides the  keyword for when you want a Boolean's opposite.Your conditional statement should read:One last suggestion:This function can be made even shorter by getting rid of the  counter and just returning as soon as an invalid  is found.(Once the you've discovered that  is invalid input, you probably don't care if it's "even more invalid".)I also used  to simplify the final  loop:


Answer URL
https://docs.python.org/3/reference/expressions.html#operator-precedence
https://docs.python.org/3/reference/expressions.html#comparisons
https://docs.python.org/3/library/stdtypes.html#dict.items
