Natural Text
You don't have to specify a default factory (but it's the same if you pass  explicitly)Why  though?  Then we get this thing:It's even explicitly allowed, because if you try to make a default dict from some other object,  say, there is a failing check I thought something like  would be a better default factory.  Why is the  optional?  I don't understand the use-case.  
When Guido van Rossum initially proposed a  that had a default value (unlike the current  which uses a function rather than a value) that set at during construction and be read-only (also unlike ).After some discussion Guidio revised the proposal.  Here are the relevant highlights:Many, many people suggested to use a factory function instead of a  default value. This is indeed a much better idea (although slightly  more cumbersome for the simplest cases)....Let's add a generic missing-key handling method to the dict class, as  well as a default_factory slot initialized to ....[T]he default implementation is designed so that we can writeThe important thing to note is that the new functionality no longer belongs to a subclass.  That means that setting the  in the constructor would break existing code.  So by design setting the  had to happen after the  was created.  It's initial value is set to  and it's now a mutable attribute so that it can be meaningfully overwritten.After yet more discussion, it was decided that maybe it would be best not to complicate the regular  type with a  specialization.  Steven Bethard then asked for clarification regarding the constructor:Should default_factory be an argument to the constructor?  The three  answers I see:"No."  I'm not a big fan of this answer.  Since the whole point of creating a defaultdict type is to provide a default, requiring two  statements (the constructor call and the default_factory assignment)  to initialize such a dictionary seems a little inconvenient."Yes and it should be followed by all the normal dict constructor arguments."  This is okay, but a few errors, like   will pass silently (until you try to use the  dict, of course)."Yes and it should be the only constructor argument."  This is my favorite mainly because I think it's simple, and I couldn't think of  good examples where I really wanted to do  or .  It's also forward compatible if we need to add some of the dict constructor args in later.Guido van Rossum decided that:The defaultdict signature takes an optional positional argument which  is the default_factory, defaulting to None. The remaining positional  and all keyword arguments are passed to the dict constructor. IOW:is equivalent to:Note that the expanded code mirrors exactly how it worked when Guido was considering altering  to provide the  behavior.He also provides some justifications upthread:Even if the default_factory were passed to the constructor, it still  ought to be a writable attribute so it can be introspected and  modified. A defaultdict that can't change its default factory after  its creation is less useful.Bengt Richter explains why you might want a mutable default factory: My guess is that realistically default_factory will be used to make  clean code for filling a dict, and then turning the factory off if  it's to be passed into unknown contexts. Those contexts can then use  old code to do as above, or if worth it can temporarily set a factory  to do some work. Tightly coupled code I guess could pass  factory-enabled dicts between each other.
My guess is that the design is intentional in order to make a  instance act like a normal dict, by default, whilst allowing the behaviour to be dynamically modified by simple attribute access later on.  For example:And we can reset it to something that looks like a vanilla dict (which will again raise ), by setting the factory back to .  I have yet to find a pattern where this could be useful, but this usage wouldn't be possible if it was forced to instantiate default dict with one callable positional argument.  


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
