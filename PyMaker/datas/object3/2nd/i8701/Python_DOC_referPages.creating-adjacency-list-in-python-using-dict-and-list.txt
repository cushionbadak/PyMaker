Natural Text
I wanted to create a data structure that can store the name of a vertex, vertices it is adjacent to along with the edge weight. I thought of creating a  that maps a vertex to a  that further has  to store vertices it is adjacent to with edge weight. In other words:Is there an effective way to do this? Also, if I use the structure above how do I access ? 
Dictionary works fine unless you have more complex structure. But you are declaring a list of dictionaries for your vertices. You can simplify it like this;And get adj_vertex2 weight like this;Or if you want to get a default value if a vertex is not adjacent to another, thus not exists in the dictionary you can use this (thanks to Hossein's comment):And add a new vertex like this;
You can do:To access  you must do This is not a very good way to work with graphs in python in my opinion. You should check some libraries out like python-graph or you could use sets, sets are a good way to use graphs with python as far as I remember.Note: . On tuples.
One efficient way that uses relatively standard tools would be to store adjacency as a sparse matrix. This would require you to use  and to number your vertices.Assume you have the connected vertices as list of lists and the weights as another list of lists of the same structure
Using a list of tuples to store the adjacencies and the weights makes more sense to me rather than storing it as dict. You can store it something like this,


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences
