Natural Text
I am using PyCharm 2016.3.2 with Python 3.6 as the interpreter to convert PDF files to .TXTThe code I have (see below) works fine, but it converts files sequentially and slowly. I wonder if I can take advantage of my 8 core cpu to make this a bit faster. Here is the code:I am new to Python coding so any help in parallelizing this block of code will be much appreciated, since I'm dealing with >100,000 files (65 GB+)Thanks!
Since you have lots of documents that you want to parse, this is relatively easy. (If you had been asking how to parse a single document on multiple cores, it would have been much harder).The technique is to create a pool of workers (usually one for each core, because you rarely get much benefit beyond that), and then assign tasks to the workers.As the basis for your pool, you can use either multiprocessing.Pool (uses multiple processes), multiprocessing.dummy.Pool (replicates the same API but uses threading), or something more recent like ThreadPoolExecutor.I will use the first of these for this example:This is untested in the details, but the basic outline I have tested.Note that threading often runs into limitations with the GIL in Python, so you end up not using all the CPU you could, while multiple processes gets around that, at the cost of startup and communication overhead for each task.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy
https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor
