Natural Text
Given a dictionary like so:How can one invert this map to get:EDITOR NOTE:  changed to  to avoid conflicts with the built-in function, . Some comments may be affected below.
For Python 2.7.xFor Python 3+:
Assuming that the values in the dict are unique:
If the values in  aren't unique:

Try this:(Note that the Python docs on dictionary views explicitly guarantee that  and  have their elements in the same order, which allows the approach above to work.)Alternatively:or using python 3.0's dict comprehensions
Another, more functional, way:
This expands upon the answer Python reverse / invert a mapping, applying to when the values in the dict aren't unique.The implementation is limited in that you cannot use  twice and get the original back. It is not symmetric as such. It is tested with Python 2.6. Here is a use case of how I am using to print the resultant dict.If you'd rather use a  than a , and there are applications for which this makes sense, instead of , use .
Combination of list and dictionary comprehension. Can handle duplicate keys
Adding my 2 cents of pythonic way:Example:
If the values aren't unique, and you're a little hardcore:Especially for a large dict, note that this solution is far less efficient than the answer Python reverse / invert a mapping because it loops over  multiple times.
We may also reverse a dictionary with duplicate keys using :See here:This technique is simpler and faster than an equivalent technique using .
In addition to the other functions suggested above, if you like lambdas:Or, you could do it this way too:
This handles non-unique values and retains much of the look of the unique case. For Python 3.x, replace itervalues with values. I can't take credit for this... it was suggested by Icon Jack. 
I think the best way to do this is to define a class. Here is an implementation of a "symmetric dictionary":Deletion and iteration methods are easy enough to implement if they're needed.This implementation is way more efficient than inverting an entire dictionary (which seems to be the most popular solution on this page). Not to mention, you can add or remove values from your SymDict as much as you want, and your inverse-dictionary will always stay valid -- this isn't true if you simply reverse the entire dictionary once.
Using zip
Try this for python 2.7/3.x
I would do it that way in python 2.
This will provide output as : {1: ['a', 'd'], 2: ['b'], 3: ['c']}
this code do like this:
For instance, you have the following dictionary:And you wanna get it in such an inverted form:First Solution. For inverting key-value pairs in your dictionary use a -loop approach:Second Solution. Use a dictionary comprehension approach for inversion:Third Solution. Use reverting the inversion approach:
Function is symmetric for values of type list; Tuples are coverted to lists when performing reverse_dict(reverse_dict(dictionary))
Since dictionaries require one unique key within the dictionary unlike values, we have to append the reversed values into a list of sort to be included within the new specific keys. 
Not something completely different, just a bit rewritten recipe from Cookbook. It's futhermore optimized by retaining  method, instead of each time getting it through the instance:Designed to be run under CPython 3.x, for 2.x replace  with On my machine runs a bit faster, than other examples here
If values aren't unique AND may be a hash (one dimension):And with a recursion if you need to dig deeper then just one dimension:
Inverse your dictionary:
As per my comment to the question. I think the easiest and one liner which works for both Python2 and Python 3 will be 
Fast functional solution for non-bijective maps (values not unique):In theory this should be faster than adding to the set (or appending to the list) one by one like in the imperative solution.Unfortunately the values have to be sortable, the sorting is required by groupby.
I wrote this with the help of cycle 'for' and method '.get()' and I changed the name 'map' of the dictionary to 'map1' because 'map' is a function.
For all kinds of dictionary, no matter if they don't have unique values to use as keys, you can create a list of keys for each value
This is not the best solution, but it works. Let's say the dictionary we want to reverse is: dictionary = {'a': 1, 'b': 2, 'c': 3}, then:The output of reverse_dictionary, should be {1: 'a', 2: 'b', 3: 'c'}


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
