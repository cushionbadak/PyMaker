Natural Text
I have a (large) integer array likewith few unique entries and I'd like to convert it into a dictionary of indices, i.e.,What's the most efficient way of doing so? (NumPy welcome.)
Alternative solution using enumerate() and dict.setdefault() functions:The output:
no need for , those are standard python structures, dict comprehension does that very well for your problem:result: finds all the indexes of the element in the list ( only finds the first one)In the first version of my answer I was iterating on the list itself, but that's a bit wasteful since it will overwrite the key several times when there are a lot of occurrences, and the inner list comprehension has  complexity so the overall complexity is not so good.While I was writing this final comment, someone suggested to iterate on unique elements, which is good, so turn that input list to a !
you may find  to be of use here, when an element is found for first time it will create a new list for you.
Here a numpy solution:Benchmarks wins for not too large ; since it uses an O(n log n) sort algorithm, the margins are slim (pp2 is a variant that replaces the slow but stable mergesort with quicksort at the cost of having to sort the individual index lists afterwards, pp3 replaces the full sort with  this gains some speed if the number of unique elements is small compared to the number of elements.):10 different integer values in the original array:100 different integer values in the original array:Benchmark code for reference:
Comprehensions can do this nicely:
I'd use , it is more efficient ( time, compared to Jean's answer, which is ): is now equal to:
Another one-liner, this time with :(For some applications, the Boolean array may be enough:)Note that  is faster than  for large arrays, and by a large margin if there are only a few unique entries.Anyhow, for most array sizes, the above is the fastest method yet:10 different integers:100 different integers:Code:
For the fun of it, here's a solution using :I thought it might perform well, but Paul's solution is still better:


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
