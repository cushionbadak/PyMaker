Natural Text
In the reference manual it is stated that every objects has a type, an identity and a value:Every object has an identity, a type and a value.For instances these look straightforward:At least, I suspect  is true.For classes, the  and  are again easy to find:but, what is considered as the value for this object? Its attributes and methods?
The Python language reference doesn't bother to define the concept of "value", leaving it a fuzzy, intuitive notion. Trying to apply the concept beyond the point where it becomes unintuitive doesn't work well, and the Python language reference itself doesn't try.If you really want to pick something to call the "value" of , you could say the value is "a user-defined type with base class  and one method, , that takes one argument named  and assigns it to the  attribute of ", but this won't be useful as part of your conceptual model or as a tool for communicating with other people.
I believe the usual meaning of the "value" of an object is enough of its attributes to determine whether it compares equal to another object of the same type:In this example, the sets  and  have the same value and same class but different identities. In this case,  and  have the same type but different identities and different values (even though all their attributes are the same).  and  have the same identity and value. (Incidentally we have have made the  method simply return  always, so that  and  - or for that matter  and  - have the same identity but different values, but I imagine such a broken equality definition would break in some places in practice. Equality should be an equivalence relation.)
The reference manual notes, somewhat obliquely, that value is a notion for each type to define for itself (emphasis added):An object’s type determines the operations that the object supports (e.g., “does it have a length?”) and also defines the possible values for objects of that type.In other words, there is no general notion of what "a value" is.  Each type defines for itself what "value" means for objects of that type.  Usually, the notion of "value" is linked to the notion of equality; objects are considered to have "the same value" if the compare equal.  So a type can specify its notion of value by defining an  method.So, to answer your specific question about classes: In this sense, the value of a class object is just itself, since class objects are compared by object identity, and no two class objects are equal.
I contend that the notion of value has a meaning only if we are able to compare it against another object. This claim is supported by the official Python 3 documentation:Chapter Objects, values and  types  states that objects have a value (in addition to type and identity).  The value of an object is a rather abstract notion in Python: For  example, there is no canonical access method for an object’s value.  Also, there is no requirement that the value of an object should be  constructed in a particular way, e.g. comprised of all its data  attributes. Comparison operators implement a particular notion of what  the value of an object is. One can think of them as defining the value  of an object indirectly, by means of their comparison implementation.The notion of value is even orthogonal to the type:Thus, if a value of an object can be examined only through equality testing, then we must admit that the value of a class object is indistinguishable from its identity. Proof:In the above example, the function  creates a new class object on every call. Semantically, those class objects should be identical (even if they are defined not to be empty). Still objects from different invocations of the  function do not compare equal, therefore they are assumed to have non-equal values merely because they have different identities.


Answer URL
https://docs.python.org/3/reference/datamodel.html#objects-values-and-types
https://docs.python.org/3/reference/expressions.html#value-comparisons
https://docs.python.org/3/reference/datamodel.html#objects
