Natural Text
When I use Python to connect the graph database(neo4j), I have the problem , but  is the result of method of . I don't know how to resolve the problem.Is there anything obvious I'm dong wrong here?
I have changed the code and the data of my map method is andbut it also has a problem enter image description hereI don't know how to resolve it. I am looking forward your answer, thanksÔºÅ
The quick answer to what the error in your image is saying is that you aren't returning a response from your  block. And thus because the  is failing, your view isn't returning anything. But that doesn't answer the real question. I haven't used  in python.  loops and list comprehension typically get the job done pretty well. I'm also not familiar at all with . That being said, I believe the answer is that you're using the  method. Is there any reason why you're doing that explicitly? According to the docs this used when iterating over an iterable to get the next set of data. In other words it's implicitly called when you loop over an iterable--with a  loop for instance. What may be happening is that if there is only one set of data, when you call  the first time, you get that first and only data set. But when you call it the second time it doesn't have data to return, so you get a . This may not be the 100% correct answer, but try removing the  calls, and see if that helps. Try to encode simply  and  instead of calling .
In Python 2, the  built-in returned a list. In Python 3, it returns an iterator instead of a list, which the  module can't serialize. If you need a list, and not an iterator, you should use a list comprehension: . You can also force-type it by doing , but that's not as clear as a listcomp.You should be aware that you can't call  (or, preferably, ) on a list, however, as that is an iterator method. You can print a whole list without consuming it, though, so unless you're explicitly trying to lazy load, a list is a better option here anyway.You can read about some of the difference between lists/other sequence types and iterators in the standard docs here and about the  built-in function and why it is preferable to  here.


Answer URL
https://docs.python.org/3/tutorial/classes.html#iterators
https://docs.python.org/3/library/stdtypes.html#iterator-types
