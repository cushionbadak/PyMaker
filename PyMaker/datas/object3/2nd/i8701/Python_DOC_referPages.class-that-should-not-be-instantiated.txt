Natural Text
I want to create a class hierarchy in which I have a class  which can be instantiated by itself. Then I have a class  which inherits from  and contains methods common to all lists, and finally I have classes ,  etc that inherit from . I want people to be able to instantiate  etc, but not . In other words, you can instantiate a plain  and you can instantiate an  that inherits from  that inherits from , but you can't instantiate . All attempts to Google this lead to Abstract Base Classes, but none provides and example that fits this case and I am having trouble extrapolating. 
The following conversation with the interpreter should show how this is possible. After inheriting from the Abstract Base Class with , you only need to mark the initializer on  as being an . This will prevent instantiation of the class without causing problems for child classes.
Inherit from  located in the  module and make methods that are implemented in base classes (that inherit from ) s (a decorator located in ):Having an ABC with s defined forbids from instantiation. 
Your List class should have ABCMeta as a metaclass and make the init methods abstract.https://docs.python.org/3/library/abc.html
The "one and obvious" way to do this is to use ABCMeta and mark some methods as abstract as documented on other answers.But if in your case you don't have a set of methods that one has to override in a mandatory way (let's suppose your  is reusable in some cases, and other of the list methods as well):In that case you can create a  method that checks if the clas being istantiated is the own class, and raises.  To do that,  you have to use teh magic  variable that is documentend only in corners of Python docs - if you as much as use the  variable in any method body, it will automatically take the value of the class where it was declared, at run time. It is part of the parameterless   mechanism of Python 3.Thus:Btw, you should give preference for the ABCMeta abstractmethods if your pattern allows it. Note that if your classes use a custom metaclass it will conflict with the ABCMeta as well - so you may need to resort to this as well(If you don't further customize , then you'd better not pass  and  upstream on the  method: Python's  ignore extra args if  is defined but  is not in the subclasses - but if both are defined it raises an error)


Answer URL
https://docs.python.org/3/library/abc.html
