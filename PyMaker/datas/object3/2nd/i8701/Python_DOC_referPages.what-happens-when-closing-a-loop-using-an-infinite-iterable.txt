Natural Text
I have written the following python function(s):As you can see, both functions don't have a  statement. Suppose I was to write something like this:What happens at the level of the memory when the  statement is reached? If I understand correctly, calling  makes the function start, go until the next  and then pause until it is needed again. When the  statement is reached, does the function instance close up, or does it continue existing in the backgroud, completely useless?
Your function  is a generator function. When you call it, nothing happens immediately (other than it returning a generator object). Only when  is called on it does it run to the next .When you call the generator function, you get an iterable generator object. If you're doing that in a  loop, the loop will keep a reference to the generator object while it is running. If you  out of the loop, that reference is released and the generator object can be garbage collected.But what happens to the code running in the generator function when the generator object is cleaned up? It gets interrupted by a  exception thrown in to it at the  it was paused for. If you need to, you could have your generator function catch this exception, but you can't do anything useful other than cleaning up your resources and exiting. That is is often done with a / pair, rather than an  statement.Here's some example code that demonstrates the behavior:Here's a sample run:
When you  from the  loop there is no reference left to the generator so it will eventually be garbage collected...Just for clarity calling  creates a generator. Calling  on the generator passes control to the generator and it runs until it s. The  implicitly calls  each loop.Consider this:Now you still have a reference to the generator called  so you can always get the next prime:
 returns an iterator. This is an object which spits out a new value whenever you call  on it. This is what a  loop does behind the scenes. Try this:Important to note is that  isn't running forever behind the scenes here, it just runs far enough to spit out a new value whenever you ask it to. It keeps hold of its data so that it's ready to start running again whenever, but you can't access that data.Now, in your code,As above  has been called and has returned an iterator, although in this case the iterator has no name (i.e. it is not bound to a variable). For every step of the loop, p will be assigned to  of the iterator.Now we break out and the for loop stops running  on the iterator. Nothing references the iterator any more (you can check this by calling  which shows you everything defined in the global namespace).Therefore after a while Python frees up the memory that the iterator was taking up. This is called garbage collection. It's also what will happen if e.g. you type  into the interpreter but don't bind it to a variable name. It is created but then effectively deleted to free up space because it's pointless.You can (and should) read more about iterators here:https://docs.python.org/3/tutorial/classes.html#iterators


Answer URL
https://docs.python.org/3/tutorial/classes.html#iterators
