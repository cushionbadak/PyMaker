Natural Text
I'm using the  library to create a websocket server in Python 3.4. Here's a simple echo server:Let's say we – additionally – wanted to send a message to the client whenever some event happens. For simplicity, let's send a message periodically every 60 seconds. How would we do that? I mean, because  is constantly waiting for incoming messages, the server can only take action after it has received a message from the client, right? What am I missing here?Maybe this scenario requires a framework based on events/callbacks rather than one based on coroutines? Tornado?
TL;DR Use  to run several coroutines concurrently.Maybe this scenario requires a framework based on events/callbacks rather than one based on coroutines? Tornado?No, you don't need any other framework for this. The whole idea the asynchronous application vs synchronous is that it doesn't block, while waiting for result. It doesn't matter how it is implemented, using coroutines or callbacks.I mean, because connection_handler is constantly waiting for incoming messages, the server can only take action after it has received a message from the client, right? What am I missing here?In synchronous application you will write something like , which would block whole application until you receive message (as you described). But in the asynchronous application it's completely different. When you do  you say something like: suspend execution of  until  will produce something. Using  inside coroutine returns control back to the event loop, so some other code can be executed, while we're waiting for result of . Please, refer to documentation to better understand how coroutines work.Let's say we – additionally – wanted to send a message to the client whenever some event happens. For simplicity, let's send a message periodically every 60 seconds. How would we do that?You can use  to run as many coroutines as you want, before executing blocking call for starting event loop.Here is an example client implementation. It asks you to enter name, receives it back from the echo server, waits for two more messages from server (which are our periodic messages) and closes connection.Important points:In Python 3.4.4  was renamed to .There are special methods for scheduling delayed calls, but they don't work with coroutines.
Same issue, can hardly got solution until I saw the perfect sample here: http://websockets.readthedocs.io/en/stable/intro.html#bothSo, I can handle multi coroutine tasks such as heartbeat and redis subscribe.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.ensure_future
https://docs.python.org/3/library/asyncio-task.html#coroutines
https://docs.python.org/3/library/asyncio-task.html#asyncio.async
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.run_forever
https://docs.python.org/3/library/asyncio-task.html#asyncio.ensure_future
https://docs.python.org/3/library/asyncio-eventloop.html#delayed-calls
