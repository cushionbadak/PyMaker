Natural Text
I am trying to make my function return items in a list one by one each time the function is called. I have this code:I can type something like this on the terminal and keep pressing  to get the next item in the list. And it should go on forever every time next is called. Instead of repeatedly typing  in the terminal, I want to make my function do all that (return the next item in the list) every time the function  is called.
Basically you're looking for a closure function:In Python 3 instead of defining  as a list we can use  keyword.Or using :
You need a .Every time a function call happensThis will get you the desired behavior.EDIT:
The function you have uses increasing amounts of memory because it appends to the list for each iteration.  An improvement is to maintain an index:What you have is exactly what you need.  It is a generator.  Normally you would not call  directly.  Normally you would use a loop to process the values produced by your generator:Since your generator never throws a  exception, the for loop will never end.
This calls for creating a higher order function that will use closure to create a secondary function to do what you want.And so on.Here is a quick intro to higher order functions and closures in the context of the above code -In the above code, func is actually a function reference, note how we call create_wrapper(abc) without the parens after abc, so it is not actually executing abc(). Then we create an iter object and create a child function called wrapper. We refer to the iter object in the child function even though it is defined in the parent function. This usage is called closure. When we return the function reference to wrapper, create_wrapper goes out of scope and so should any variables used inside it - including iter. But because it is being referenced in the child function, which lives on beyond its parent, iter is preserved.BTW - the way you create an infinite iterator by appending to the list is pretty clever :-) but it obviously runs the danger of a memory overflow. There are other ways to create infinite iterators. Check out https://docs.python.org/3/library/itertools.html.


Answer URL
https://docs.python.org/3/library/itertools.html
https://docs.python.org/3/library/itertools.html#itertools.repeat
