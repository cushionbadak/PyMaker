Natural Text
I'm trying to create a new application based on PyQt5 and asyncio (with python 3.4, looking forward to eventually upgrade to 3.5 with async/await). My goal is to use asyncio so that the GUI stays responsive even when the application is waiting for some connected hardware to finish an operation.When looking how to merge the event loops of Qt5 and asyncio, I found a mailing list posting, suggesting to use quamash. However, when running this example (unmodified), thenevers seems to return. I see the output 'Timeout', so the timer callback obviously fires, but the Future fails to wake up the waiting method. When manually closing the window, it tells me that there are uncompleted futures:I tested this on Ubuntu with python 3.5 and on Windows with 3.4, same behaviour on both platforms.Anyway, since this is not what I actually try to achieve, I tested some other code as well:The program is supposed to display a window with a button in it (which it does), with the button invoking slow_operation() without blocking the GUI. When running this example, I can click the button as often as I want, so the GUI is not blocked. But theis never passed and the terminal output looks like this:There is no exception thrown when I close the window this time. The slow_operation() function basically works if I directly run the event loop with it:Now, two questions:Is this a sensible way to achieve decoupling of lengthy operations from the GUI, generally? My intention is that the button callback posts the coroutine call to the event loop (with or without an additional level of nesting, cf. coroCallHelper()), where it is then scheduled and executed. I don't need separate threads, as it is really only I/O that takes time, no actual processing.How can I fix this behaviour?Thanks,Philipp
Ok, that's one plus of SO: Writing down a question makes you think again about everything. Somehow I just figured it out:Looking again at the example from the quamash repo, I found that the event loop to use is obtained somewhat differently:The key seems to be the . It is also important to note that the  mentioned there is the one from the quamash package, NOT from Qt5. So my example now looks like this:And it 'just works' now:Maybe this is of some help for others. I'm happy with it at least ;)Comments on the general pattern are still welcome, of course!Regards,Philipp


Answer URL
https://docs.python.org/3/library/asyncio-task.html#coroutines
