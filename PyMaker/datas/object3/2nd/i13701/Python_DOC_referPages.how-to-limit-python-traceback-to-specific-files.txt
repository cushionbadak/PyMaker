Natural Text
I write a lot of Python code that uses external libraries.  Frequently I will write a bug, and when I run the code I get a big long traceback in the Python console.  99.999999% of the time it's due to a coding error in my code, not because of a bug in the package.  But the traceback goes all the way to the line of error in the package code, and either it takes a lot of scrolling through the traceback to find the code I wrote, or the traceback is so deep into the package that my own code doesn't even appear in the traceback.Is there a way to "black-box" the package code, or somehow only show traceback lines from my code?  I'd like the ability to specify to the system which directories or files I want to see traceback from.
In order to print your own stacktrace, you would need to handle all unhandled exceptions yourself; this is how the  becomes handy.The signature for this function is  and its job is:This function prints out a given traceback and exception to .So as long as you can play with the traceback and only extract the portion you care about you should be fine. Testing frameworks do that very frequently; they have custom  functions which usually does not appear in the traceback, in other words they skip the frames that belong to the test framework. Also, in those cases, the tests usually are started by the test framework as well.You end up with a traceback that looks like this: +  + How to identify your code.You can add a global to your code:Then to identify the frames:How to extract your frames.skip the frames that don't matter to you (e.g. custom assert code)identify how many frames are part of your code -> extract  framesExample handler.install the handler:What next?You could adjust  to add one or more levels if you still want some info about where the failure is outside of your own code.see also https://gist.github.com/dnozay/b599a96dc2d8c69b84c6
As others suggested, you could use :This function prints out a given traceback and exception to sys.stderr.When an exception is raised and uncaught, the interpreter calls sys.excepthook with three arguments, the exception class, exception instance, and a traceback object. In an interactive session this happens just before control is returned to the prompt; in a Python program this happens just before the program exits. The handling of such top-level exceptions can be customized by assigning another three-argument function to sys.excepthook.(emphasis mine)It's possible to filter a traceback extracted by  (or similar functions from the  module) based on specified directories.Two functions that can help:They both use the . It returns "a list of “pre-processed” stack trace entries extracted from the traceback object"; all of them are instances of  (a named tuple). Each  object has a  field which stores the absolute path of the corresponding file. We check if it starts with any of the directory paths provided as separate function arguments to determine if we'll need to exclude the entry (or keep it).Here's an Example:The  module from the standard library doesn't allow reusing keys, yieldsWe can restrict stack trace entries to our code (in /home/vaultah/so/shadows/main.py).andgive the same result:There's a way to exclude all site directories (where 3rd party packages are installed - see )Note: Don't forget to restore sys.excepthook from sys.__excepthook__. Unfortunately, you won't be able to "patch-restore" it using a context manager.
the traceback.extract_tb(tb) would return a tuple of error frames in the format(file, line_no, type, error_statement) , you can play with that to format the traceback. Also refer https://pymotw.com/2/sys/exceptions.html


Answer URL
https://docs.python.org/3/library/sys.html#sys.excepthook
https://docs.python.org/3/library/traceback.html
https://docs.python.org/3/library/traceback.html#traceback.extract_tb
https://docs.python.org/3/library/traceback.html#traceback.FrameSummary
https://docs.python.org/3/library/site.html#site.getsitepackages
