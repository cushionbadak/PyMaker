Natural Text
I have a text file and two lists of strings.The first list is the keyword listThe second list is the words I want to replace the keywords withI want to take the text file as input, where when k appears, it's replaced with r, thus, "hi, how are you bob" would be changed to "ok, how are you bye"
Let's say you have already parsed your sentence:What you want to do is to check whether each word in this sentence is present in . If yes, replace it by the corresponding element in r; else, use the actual word. In other words:This can be written in a more concise way:Using list comprehensions, here's how you go about processing the whole sentence: is now equal to  (which is what you want).Note that in the code above we perform two equivalent search operations:  and . This is inefficient. These two operations can be reduced to one by catching exceptions from the  method:Now, you should also note that searching for  in sentence is a search with  complexity (where  is the number of keywords). Thus the complexity of this algorithm is  (where is the sentence length). You can reduce this complexity to  by using a more appropriate data structure, as suggested by the other comments. This is left as an exercise :-p
I'll assume you've got the "reading string from file" part covered, so about that "replacing multiple strings" part: First, as suggested by Martijn, you can create a dictionary, mapping keys to replacements, using  and .Now, one way to replace all those keys at once would be to use a regular expression, being a disjunction of all those keys, i.e.  in your example, and using  with a replacement function, looking up the respective key in that dictionary.Alternatively, you can just use a loop to replace each key-replacement pair one after the other:


Answer URL
https://docs.python.org/3/library/functions.html#func-dict
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/re.html#re.sub
