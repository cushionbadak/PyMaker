Natural Text
This pitfall is the number one hard to found bug since i work with python years ago. Let's me show an oversimplified example, i have this files/dir:Content of thread_test.py:Content of hello.py:While import_all_pitall/init.py is an empty file.Let's run it:Look carefully, where does "do_import 2B" and "do_import 3B" ? It just hang on import instruction without even go to the first line of import because there's only one time.time() will be run. It hang just because the first import the same module on another thread/function in the "unfinished" loop state. My entire systems is big and multi-thread, super difficult to debug before i know the case.After i comment out the '#undefined_func( "Done haha" )' in hello.py:And run it:I print the id and figure out they all share the same id 139851188124312. So 3 functions share the same import object/process. But this doesn't make sense to me, i thought object is local to the function, because if i try to print imported "hello" object on global scope, it will throw error:Edit the thread_test.py to print hello object at global scope:Let's run it:hello is not global,  but why it can be share by different thread's in different functions ? Why python don't allow unique local import ? Why python share the import process, and it make all other threads just "wait" by no good reason just because one thread hang in the process of import ?
To answer one of the questions -I print the id and figure they all share the same id 140589697897480. So 3 functions share the same import object/process.Yes, when you import a module, python imports the module object and caches it in  . And then for any subsequent imports for that module, python takes the module object from  and returns that, it does not import again.For the second part of that same question -But this doesn't make sense to me, i though object is local to the function, because if i try to print imported "hello" object on global scope, it will throw errorWell,  is not local, but yes the name  is local to the function. As stated above, if you try to import the module again, python will first lookup  to see if it has already been imported or not, and return if it contains the module , otherwise import it and add to .For the first program, when a python module is imported, it is run from the top level, in your  you have an inifite loop -  , since 1 is always true. So the import never finishes.If you do not want the infinite loop to run, you should put the code that you do not want to run when importing a module inside -The code inside the above if statement would only run , if the script is directly run, it will not run when the module is imported.I am guessing when you say -After i comment out the '#undefined_func( "Done haha" )' in hello.pyYou actually commented out the complete infinite loop, and hence the importing was successful.
I recommand you to print the  and name your threads in all your prints. It would be really easier to understand who did this action.Look carefully, where does "do_import 2B" and "do_import 3B" ?Python is currently loading the module, and the Python import processus is thread safe. It implies that two thread can not load the module in the same time. It's not about handling a , it's about having a lock on the file.I print the id and figure they all share the same id 140589697897480Yes, because Python load a module only one time. Considere your Python module as singleton.Hello is not global, but why it can be share by different thread's in different functions ?This is because hello is a local variable that points to a shared module. If as said before you considere your module as singleton, and then you considere that all the memory between threads in a same process is shared, then the singleton is shared with all threads.As a lot of people said, it's not a bug, it's a feature :)Here is another example. Let's considere 2 files :  which is the executed file, and  which is the imported file.Here is  :And here is I used  in order to avoid issue when 2 threads try to write in stdout at the same time. Here is the result I get (with python 2.7) :As you can see, the module is only imported one time.


Answer URL
https://docs.python.org/3/library/threading.html
