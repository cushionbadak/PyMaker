Natural Text
I'm creating a game that is supposed to run on the command line. The game uses text as a the canvas ( the software prints text in a shape of a rectangle, and when the text changes, the image changes). I've created a little scrip to test how this would workUnfortunately the code seems to be printing the grid too slowly resulting in a noticable scrolling effect during the printing, which would make the game unplayable.Is there a faster way to print text in python?Could the cause of this scrolling effect just be the fact that I have not made any framerate cap on this code, and it just happens to show the current output when the computer monitor refreshes?If my approach is completely wrong, what would be the best way to do this?
Printing to the console is usually slow, since most languages tend to wait until the message is displayed before moving on. There are ways around thid with your current approach.If you use the file API, via , you can  as many times as you want and call  when the screen is ready to be printed. You may also try calling  as little as possible, perhaps building strings in memory and outputting them whole.The frame-rate cap is definitely needed, though. The console is not a fast interface, it can't do high frame-rates. Implement a cap, and play with the number.In short:Call  as little as possibleCall  only when you're ready to renderCap the frame-rate at 10, then 20, then 30. ExperimentThe other approach, which will definitely bring your game up to speed, is to use . With it, you can update only the portions of the screen that need re-rendering, instead of reprinting the screen whole.
Since Python 3.3 print() supports the keyword argument "flush" (see documentation):
Assuming you're using a Unix-like OS (Linux or Mac) then the best way to do this would be using curses ( https://docs.python.org/3/howto/curses.html ). However, this can be a lot of effort and would probably be overkill for what you're doing.If you choose to go the simple route, then you should put a delay in your repainting. Right now you're clearing immediately after finishing putting everything on the screen, which is giving you problems. Instead, you can do something like this:What this will do is leave the text on the screen for longer before repainting which will make it easier to see. Play with the amount of time you sleep and find what looks best for your application.


Answer URL
https://docs.python.org/3/library/functions.html?highlight=print#print
https://docs.python.org/3/howto/curses.html
