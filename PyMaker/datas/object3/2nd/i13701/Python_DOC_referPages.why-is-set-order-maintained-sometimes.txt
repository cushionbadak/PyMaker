Natural Text
When running this code the results change as expected since a set is unordered: That is, multiple runs would give different lists, e.g.etc.(Note: You might be getting the same result instead, if you don't have , as suggested in the comments. Also, if you are using the console to replicate it, make sure you Rerun the console every time you run the code.)However, when placing the above code in a for loop the results are rather surprising: A single run of the for loop will print the same list. Rerunning the for loop can print a different list (e.g. ) but it will still be printed 10 times without changing. Why doesn't it change?
@ReblochonMasque has a correct point: set is based on the hash table and if hashes calculated between runs are the same, you'll have the same order between runs. However such behaviour is vulnerable to attacks. To prevent these attacks special variable  was introduced. When it is set to  each run Python will generate different hashes for the same items. That's why you get different order.To check this, you can run your program with  set to the same number. Order will be the same among runs.If you look at the . There is a note at the bottom (exactly about your case):Note By default, the  values of ,  and  objects are "salted" with an unpredictable random value. Although they remain constant within an individual Python process, they are not predictable between repeated invocations of Python.
You shall not expect that the order of a set will change; sets are unordered in a sense that the order is not an invariant i/e there is no guarantee that it will not change.The implementation is in the form of a hash table (dictionary); as long as there are no collisions of keys, the order will likely not change, but there is no telling. It is also not possible to predict if or when that will occur.Be careful with drawing conclusions from your experimentation: the results you get cannot be predicted and will depend on the state of your system at the moment you run. They also won't hold across platforms, versions of python, etc...


Answer URL
https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED
https://docs.python.org/3/reference/datamodel.html#object.__hash__
