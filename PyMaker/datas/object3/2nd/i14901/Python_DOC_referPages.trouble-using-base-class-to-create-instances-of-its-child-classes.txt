Natural Text
Below is a simplified version of the code I have: This code does not work. My understanding for the reason it doesn't work is that my base class definition is dependent upon definition of the subclasses, which are in turn dependent on the base class. What I am trying to accomplish is to create an API (for myself) in which I can do things like the following: I might be asked why, exactly, I want to be able to write code like this. The answer is it seems like it will be useful for a project I'm working on. However, I am considering abandoning the subclasses and doing it this way instead: As a relatively inexperienced programmer, I'm still trying to figure out what I should be doing for my particular problem. However, the focus of this question is: if there are situations where using the base class and subclasses in this way makes sense, how can I make this work the way I have described? On the other hand, if it definitely does not ever - or at least, very rarely - make sense to try and do this (in Python, I mean - Python is different from other languages), why is this true? 
Your design doesn't particularly make sense ... Generally, it's a bit strange for a base class to know about it's ancestors.  The information flow should go the other way around.  The particular problem with your code is that you call:which calls .  It picks out one of the subclasses ( in this example) and then (essentially) does:However, this calls  which just so happens to be  and so you have recursion problems.A much better design is to forget about having  pick out the subclass... Make your classes as you normally would:And then have a factory function do what  is doing now.This avoids any sort of weird recursion and strange inheritance tree problems.
Taking a guess about your requirements, it's almost as if you want to have multiple constructors for a class, each with a different number of arguments, i.e. multiple dispatch on arguments. You can use the multipledispatch module to overload , for example:So this might be a solution for you if you don't actually require separate sub classes, just different ways of constructing them.
This is gonna be a short answer as i am on my phone. First, check out this. Now, although you might find  a way of doing it (there is a way in c++ not sure about python) it is a bad design. You shouldn't have an issue like this. A parent cannot be dependent of its child. You missed the point of inheritance. It is like saying a parent class car depends on its children: Bentley or Mazeratti. Right now, I can think of 2 scenarios that you might have:If two classes really depend on each other (one object is LIKE the other), then there can be another base for both, which will contain the sharing part of both. If there cannot be a class base for both (one object is PART of another), you do not need inheritance at all.   In short, it really depends on your problem, try to fix the cause of such problem. You should change the design of your objects. 
In reading the other answers and thinking about this a bit more, I have come up with a way to accomplish what I set out to do as described in the question. However, I do not necessarily think it is a good design; I'll leave that to people with more experience than me. This approach uses functionality found in the abstract base classes or  module to override  so it behaves the way we want. Although I'm not certain, I believe the design approach I have used above is a sound one, as this kind of thing is what the  module seems to have been created for in the first place (providing a way to overload the  and  functions). 


Answer URL
https://docs.python.org/3/library/abc.html
