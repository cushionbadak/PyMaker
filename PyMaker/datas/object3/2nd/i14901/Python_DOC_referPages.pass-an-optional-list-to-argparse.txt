Natural Text
Is there a more elegant way to pass an optional list of integers to  than to pass a delimited string and parse it later? I also have a positional argument.doesn't work, because  attempts to grab  and complains that it isn't an integer.Ideally, I'd like to execute with one ofor something similar, but also be able to
If you just want to parse arguments of the form  (no whitespace), you can use something like this:This will not handle arguments separated by whitespace, though you could probably mitigate that somewhat with a smarter  function.  You would then need to quote them, however, or else the shell would pass them as separate arguments.
 is a handy way of saying 'positional arguments start here'.With your parser, these work:You could give the  argument a default (e.g. []) if you don't like the .Any problems with   are due to how the shell splits your command line.  Look at the  list.Problems with  arise because when handling , the parser tries to use all strings that follow that aren't obviously flags (e.g. with '-').  It does not use the 'int' type to test which ones to use and which to leave.Now if the  were positional, it would handle the :But that's because the parser uses a different strategy to allocate strings to several positional arguments.  It uses a  matcher that looks like .Kevin's  approach might be better implemented with a simple function:It could be generalized to handle quoted strings like "1 2 3".  can be any function that takes a string, and returns the desired value(s), and raises an error if it can't do the conversion.


Answer URL
https://docs.python.org/3/library/argparse.html#type
https://docs.python.org/3/library/operator.html#operator.methodcaller
