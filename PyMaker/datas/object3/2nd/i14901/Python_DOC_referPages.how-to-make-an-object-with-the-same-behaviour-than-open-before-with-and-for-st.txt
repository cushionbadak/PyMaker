Natural Text
I would like to create a class in Python that receive a filename, and return an object that can be handled by a context manager and iterable by a for-loop.Basicly, the file will be parsed line by line (iterable). The class will split each line into a defined pattern and will return at each step of iteration a tuple of values.I know that I need to implement ,  methods to make it iterable but I do not clearly understand how to proceed. The file is one of my class attribute, and I want the iterator to yield parsed line at each iteration.I also know that I need to implement  and  methods, but this also is a little bit fuzzy to me.I am not looking for an out-of-the box code, rather I would like to understand what each of those magic methods exactly needs to properly works in order to get the desired behaviour.Update:I finally resolved to do it in the following way:It seems to have the behaviour I am looking for. It works when I perform:Is this a good way to achieve it? Is it pythonic enough?
Just return  in both cases.Your class is itself the iterator (since you are providing a  method), and if you don't have a special value for  to return you generally just return .In fact, that's exactly what a file object does for both cases:For  you'd return a different object if you wanted to support independent iteration over the object; that new object would then return  for  and provide the  method rather than this class.For  you'd return whatever was convenient for the user to bind to in a  statement. For example, some database connection objects return a new cursor object, so that you can do:Note that your updated version returns a generator from , which is a new iterator each time you call . These iterators are not really independent as  will always return the file object itself, so iterating over one generator will affect the other generators as the file position advances.Moreover, since file objects are their own iterator, you can use the  function directly on a file object, but you cannot do the same on your object.A better solution is to stick to returning  and make your  method do the parsing:


Answer URL
https://docs.python.org/3/library/functions.html#next
