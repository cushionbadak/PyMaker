Natural Text
Is it possible to create a class that inherits from multiple instances of , or create something to the same effect (having an immutable type that combines the fields of the base types)? I haven't found a way to do so. This example illustrates the problem:The problem seems to be that  does not use  to initialize its base class, as can be seen when creating one:Even if I considered writing my own version of  to fix this, it is not obvious how to do that. If there are multiple instances of  in the MRO of a class they'd have to share a single instance of the base class . To do that, they'd have to coordinate on which  uses which range of indices in the base tuple.Is there any simpler way to achieve multiple inheritance with a  or something similar? Has anyone already implemented that somewhere?
You could use a decorator or metaclass to combined the parent named tuple fields into a new named tuple and add it to the class :
This code adopts a similar approach to Francis Colas', although it's somewhat longer :) It's a factory function that takes any number of parent namedtuples, and creates a new namedtuple that has all the fields in the parents, in order, skipping any duplicate field names.output
Well, if you just want a namedtuple with both the fields, it's easy to just recreate it:


Answer URL
https://docs.python.org/3/library/collections.html?highlight=namedtuple#collections.namedtuple
