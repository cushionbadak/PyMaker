Natural Text
Apparently, the following is valid syntaxI would like to know:What does this  character in front of the string mean?What are the effects of using it?What are appropriate situations to use it?I found a related question right here on SO, but that question is about PHP though, and it states the  is used to indicate the string is binary, as opposed to Unicode, which was needed for code to be compatible from version of PHP < 6, when migrating to PHP 6. I don't think this applies to Python.I did find this documentation on the Python site about using a  character in the same syntax to specify a string as Unicode. Unfortunately, it doesn't mention the b character anywhere in that document.Also, just out of curiosity, are there more symbols than the  and  that do other things?
To quote the Python 2.x documentation:A prefix of 'b' or 'B' is ignored in  Python 2; it indicates that the  literal should become a bytes literal  in Python 3 (e.g. when code is  automatically converted with 2to3). A  'u' or 'b' prefix may be followed by  an 'r' prefix.The Python 3 documentation states:Bytes literals are always prefixed with 'b' or 'B'; they produce an instance of the bytes type instead of the str type. They may only contain ASCII characters; bytes with a numeric value of 128 or greater must be expressed with escapes.
Python 3.x makes a clear distinction between the types: =  literals = a sequence of Unicode characters (UTF-16 or UTF-32, depending on how Python was compiled) =  literals = a sequence of octets (integers between 0 and 255)If you're familiar with Java or C#, think of  as  and  as .  If you're familiar with SQL, think of  as  and  as  or .  If you're familiar with the Windows registry, think of  as  and  as .  If you're familiar with C(++), then forget everything you've learned about  and strings, because A CHARACTER IS NOT A BYTE.  That idea is long obsolete.You use  when you want to represent text.You use  when you want to represent low-level binary data like structs.You can encode a  to a  object.And you can decode a  into a .But you can't freely mix the two types.The  notation is somewhat confusing in that it allows the bytes 0x01-0x7F to be specified with ASCII characters instead of hex numbers.But I must emphasize, a character is not a byte.In Python 2.xPre-3.0 versions of Python lacked this kind of distinction between text and binary data.  Instead, there was: =  literals = sequence of Unicode characters = 3.x  =  literals = sequences of confounded bytes/charactersUsually text, encoded in some unspecified encoding.But also used to represent binary data like  output.In order to ease the 2.x-to-3.x transition, the  literal syntax was backported to Python 2.6, in order to allow distinguishing binary strings (which should be  in 3.x) from text strings (which should be  in 3.x).  The  prefix does nothing in 2.x, but tells the  script not to convert it to a Unicode string in 3.x.So yes,  literals in Python have the same purpose that they do in PHP.Also, just out of curiosity, are there  more symbols than the b and u that do  other things?The  prefix creates a raw string (e.g.,  is a backslash +  instead of a tab), and triple quotes  or  allow multi-line string literals.
The b denotes a byte string.Bytes are the actual data. Strings are an abstraction.If you had multi-character string object and you took a single character, it would be a string, and it might be more than 1 byte in size depending on encoding.If took 1 byte with a byte string, you'd get a single 8-bit value from 0-255 and it might not represent a complete character if those characters due to encoding were > 1 byte.TBH I'd use strings unless I had some specific low level reason to use bytes.
It turns it into a  literal (or  in 2.x), and is valid for 2.6+.The  prefix causes backslashes to be "uninterpreted" (not ignored, and the difference does matter).
Here's an example where the absence of 'b' would throw a TypeError exception in Python 3.xAdding a 'b' prefix would fix the problem. 
From server side,if we send any response it will be sent in the form of byte type.So it will appear in the client asb'Response from server'In order get rid of b'....' simply use below code  server fileclient filethen it will printResponse from server 
In addition to what others have said, note that a single character in unicode can consist of multiple bytes. The way unicode works is that it took the old ASCII format (7-bit code that looks like 0xxx xxxx) and added multi-bytes sequences where all bytes start with 1 (1xxx xxxx) to represent characters beyond ASCII so that Unicode would be backwards-compatible with ASCII.


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
