Natural Text
Python's PEP 435 about the  module says that enumerators should be compared with  instead of the usual . I guess that the reasoning is that an enum members are static and won't ever change, so it makes sense.I am using Python 2.7.9 for compatibility reasons and I don't want to introduce too many new libraries to the project, so I don't plan to use the Python 2.7.9 port of the  module. Therefore I use a simpler form of enumerations instead:In such a case, is it still fine to use  for comparison? More generally, is it ok to compare static class variables that are known not to change during the lifetime of the program with  instead of , regardless of their type?Note: I take that only the name of the static variable will be used for assignment/comparison, never its value.
Can you? Yes - small integers are interned in CPython, so wherever you get e.g.  from,  will evaluate .Should you? No. For one thing, it doesn't make conceptual sense - do you really care if they're the same exact object (identity, ), or just whether they have the same value (equality, )? What if the values are sourced from somewhere other than the class itself, e.g. a database or user input? For another, interning of small integers is an implementation detail, so shouldn't be relied upon.More generally, is it ok to compare static class variables that are known not to change during the lifetime of the program with  instead of , regardless of their type?No, because this could fail whether or not they are "static":
It may work since CPython uses the same addresses for the numbers in  (they are never re-created):But it's relying on implementation which is not a good thing.Why not use  anyway?


Answer URL
https://docs.python.org/3/library/enum.html#module-enum
https://docs.python.org/3/library/enum.html#programmatic-access-to-enumeration-members-and-their-attributes
