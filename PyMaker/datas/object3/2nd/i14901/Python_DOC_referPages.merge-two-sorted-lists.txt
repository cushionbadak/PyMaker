Natural Text
Hello I want to ask why when I run this code below the  didn't change it's valueresult of this is [1, 5, 7, 2, 4, 6]thanks
Simply, when you pass  to the function, it is referencing a list in memory, but its not the same reference as  outside the function (even though they refer to the same object). In the function, when you haveEssentially you have the function scope reference point to the new object, but not the reference outside of the function.http://robertheaton.com/2014/02/09/pythons-pass-by-object-reference-as-explained-by-philip-k-dick/if you mutate  within the function, since they refer to the same object, the reference outside the function will still refer to the mutated object.
Because of variables inside the functions has local scope.you can return  in your function and assign the function result to a variable, add  at the trailing of your function:But note that changing a mutable object inside the function may impact the caller! but in this case you have assign  to  at the end  and then you do not change the arr,for example see the following example :On first state we have assigned a new object to name  so python will crate an local variable in the local namespace of function ! but in second case we have changed the name  and as  is a mutable object python doesn't create a new object, instead it change the name  globally! Or you can initial  as global and then you can print it in main function :


Answer URL
https://docs.python.org/3/library/heapq.html#heapq.merge
