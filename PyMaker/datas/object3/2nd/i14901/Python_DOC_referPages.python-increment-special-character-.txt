Natural Text
I want to read some words from an excel file and extracte some information.Reading the file is no problem.The point is, that I want to increment the last character of a word. It is no problem for normal characters like 'A'. But special Characters like 'Í' are a problem.I read the content with this:I put this value in a dictionary. The next step is to iterate through the dict and get the saved information. info['streettype'] contains my val from before. Now i convert the value to upper case like this:That is needed because some characters are special, like I said (e.g. 'é', 'ž', 'í'). Now I want to increment the last character of the word, which can be a special character.Now I increment the character by using:Next I want to save it in a text file.I want to save the original word and the edited word.I think I need to reencode my lastLetter2, but it does not work.When I just save my w2 and w3+lastLetter2 I get strange results because some are encoded, some are not.For the word:my Result is:but I want:(Í is ascii 205, Î is ascii 206)Can someone help me to save this problem?
Stop encoding your data to UTF-8 all the time; keep your text as Unicode, it makes processing much easier. Leave encoding to the last minute, preferably by having the file object encode this for you.Having the file encode Unicode means that in Python 2 you'd use  rather than the standard built-in  function; this is the same infrastructure Python 3 uses to handle Unicode and file I/O.You managed to create a Mojibake by encoding and decoding at will here; your text is now a mix of UTF-8 data decoded with Windows codepage 1252 then encoded to UTF8 again, plus non-mangled data:Note that the last character in the first stringis invalid; it is missing a byte! That's because the result of 'decoding' the last character's UTF-8 bytes should not have been possible in a proper CP1252 codec; I had to use the  project internal repair codecs to bypass that problem:The only way to fix this is to a) ensure you read your data using the correct codecs, and b) then treat all text as Unicode throughout your code, and only encode at the last moment to the correct output codec.Handling Unicode code points with  and  (in Python 2) and  in Python 3 will then work as expected:You may want to read up on Python and Unicode:Pragmatic Unicode by Ned BatchelderThe Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) by Joel SpolskyThe Python Unicode HOWTO


Answer URL
https://docs.python.org/3/library/functions.html#chr
