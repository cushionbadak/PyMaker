Natural Text
I have a function that is supposed to increment each element in the odd rows of a matrix by 5, and each element in the even rows by 10.  I have written the code below:The problem with this code, is that judging by the print(matrix.index(i)) statement in the function, the loop never passes the first item in the list.  I cannot understand why.  Below is the output:If I take the If/else statements out of the function, then the loop will iterate through each item in the list properly.  Result:Can anybody tell me why the If/else statements in the function are preventing the loop from iterating through each item in the list?
With your given data, you're changing the matrix at each step to ensure what was the next item in it is always found at index 0.To check that, changetoand you'll see the much more informative output:See?  Each time, you're changing the 0th index so it equals the next item in the matrix.Looping on a list's items and then doing an  of each item on the list, of course, will always find the first occurrence of a copy of each item -- besides wasting a lot of computation in any case (making a loop O(N squared) that should of course be O(N)) this will provoke truly weird results in cases like yours.To get back to sanity, change the part:to, e.gand use  throughout the rest wherever you're now re-computing (wasting ridiculous numbers of cycles) .
The problem is that on the second iteration, the first and second items compare equal, so index just gives you the first one again.I believe it's time for you to learn about enumerate(). Basically here  is just the index without having to scan the list for matches over and over.The code is much easier to read and it works properly now
It'll be much more straight-forward here to use a list-comp, and base the modulus on the "row number" that you're iterating over inside a conditional expression to choose either to add 5 or 10, eg:
First off, you're modifying the structure of a list while iterating over it. Don't do that.But I think you do that because you don't realize what this does:I don't know if you realize this, but  is going to be the element in the list at that loop in the iteration. An example:Outputs:And  is going to result in the index of the 'value'  in the list  using a simple linear search.If you want a "c-style" for-loop over an index, you'd do it like so:However, python has a nifty method, , which will give us both the index and the value at a location in an iterator.In which case your code would become the following:Which will result in the output you want. Of course you can actually collapse this into a single one-liner list comp leveraging :


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
