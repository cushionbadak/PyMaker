Natural Text
I'm trying to find the 5 most recent years without repeating digits, and I keep getting the error  This is my code and I so far -I can't figure out what's wrong with it. Any explanation as to how to fix it is appreciated.
You are assuming that you can index () an integer to get a digit out of it but that's not something you can do with integers in Python. What you can do is convert an integer into a string, and then you can index the string to get characters out of it:The reason the error message mentions an attribute  is because  basically expands to . Info on .Also I'd advise tackling this in smaller segments. Rather than trying to solve the whole problem at once, start by writing a function that takes one year and will return  if it doesn't have any repeating digits and  otherwise. Then when you've got that working you can write another function calling the first function in a loop to get the five results you need.There are a couple of nice ways to solve the complete problem:List comprehension:Iterator:The list comprehension is simpler but does a lot more work (it will try all the years in the range, only to throw out all but the first five); the iterator version is not as straightforward but (in Python 3) only does as much work as it needs to.
It's a one-liner with a list comprehension:You can test for no repeated digit with .And  bounds the number of years we need to test.Then we just slice the result with [0:5] to take the first five such years (in decreasing order from 2015).
This may work, try it:The last method will count the occurrence of each digits in the year. This should be more efficient.Now if you want to know if there is a repeated digit, use this postAny value under 4 means there is a digit that has more than one occurrence.
The problem is that you can't access the digits of an integer using  indexing notation. An easy way to do that to convert it into a sequence of digits, and an easy way to check for duplicates is by converting that sequence into a  and checking whether the length of the set is the same a the number of digits, it won't be if there are any duplicates â€” see this answer to another related question.The code below does this looking both at prior and future years from the starting year. It also checks the starting year, but it's not clear from your question if it should do this or not.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getitem__
