Natural Text
I am trying to "discover" what the  variable's value was when the  was generated.The only information that was given to me was that the following lines were used: Plus the value of  is a given which is .The value of  is also a given which is .So far this is what I've came up with but I am not sure if this is the right way or of there is a faster, better way.Basically I am looping the given hashing lines then for every iteration, I'd increment the value of the  until the value of  matches the . Then print out the value of the  when the loop terminates (a.k.a.  has matched )It's a brute force approach and my question is, is there a better way?NOTEI am a c# developer, trying to learn something new :)
It's a brute force approach and my question is, is there a better way?By all practical means for someone who is not a mathematical security/cryptography researcher, no.The specification of a "hash" function is simply that it's a function that is nearly impossible to invert, i.e. brute forcing is the fastest way of reversing it.There's a lot of tricks (rainbow tables, doing the math on a graphic card processor, or even a specialized chip etc) that make things faster, but aside from understanding the few weaknesses in MD5 and implementing this very close to the metal (read: probably C/C++, not python), there's nothing you can do.
It's a brute force approach and my question is, is there a better way?You can try to improve your brute force, by reducing the number of operation that you do at each loop cycle.For instance, you can store ,  and  in variables.You could also look at the source (as @tobias_k suggested), to find a quicker way to check if you have the right  (for instance using  might be faster than )I advise you to do some tests with a known  to find the fastest algorithm.Editmaybe you could try to use parallelism with multiple thread looking for the value at the same time (with 4 threads, the first looks for 4*n, the second for 4*n+1, and so on)
As per @tobias_k's suggestion to look at the source, I think this question boils down to, solving UNKNOWN in:Unfortunately you lose information every step of this algorithm which makes it almost impossible to reverse engineer.


Answer URL
https://docs.python.org/3/library/random.html?highlight=random.seed#random.seed
