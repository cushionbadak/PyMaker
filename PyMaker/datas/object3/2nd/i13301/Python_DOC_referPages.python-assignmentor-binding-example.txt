Natural Text
First : The result is 9 Second : The result is {1,3,4,6}At the first, the y is not changed by x's change.At the second, the S is changed by T's change.I wanna know the reason.Thank you in advance! =)   
This is a very common question. For Python, it's helpful to read this section of the language reference.In short, in Python, you have names bound to objects.In your first example you bind to the name  the object whose value is the integer 9. Then you bind to  that same object. Next you bind to  the object whose value is the integer 18. The object bound to  is still the one with the value 9, so 9 is printed.In your second example, you bind a set object to . Then you bind that same object to . The code  mutates the object bound to T, which is the same object bound to S. That is why when you inspect , you see the change that made through , because the names  and  were bound to exactly the same object.In pictures:See  did not change. Why not? Because I bound  to a new object. But I did not change what  was bound to. Now let's look at the second exampleThe object bound to  changes. Note I did not say that  changed! I never changed the bindings;  and  still point to the same object. It is very important to understand the difference between the names and the objects bound to them.Also note, I did not say the word "variable." :)
you start with  as an reference to object with the value 9, then  as a reference to the same object as . after you assign  to a new object with the value 18,  now refers to a different object but  still refers to the same object with the value 9.


Answer URL
https://docs.python.org/3/reference/datamodel.html#objects-values-and-types
