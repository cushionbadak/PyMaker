Natural Text
It is clear to me that  is used to signify the lack of a value. But since everything must have an underlying value during implementation, I'm looking to see what value has been used in order to signify the absence of a value, regarding .I understand, based on the documentation, that  is a singleton. Since my  skills are rusty, my best, amateur guess, would be that the value of  would be the pointer to the memory allocated for the  object; since it is a singleton this would guarantee uniqueness. Or is it assigned to 's  which has a value of  based on the second answer in this question?Additionally, the documentation also points out:Note that the PyTypeObject for None is not directly exposed in the Python/C API.Which I'm guessing means you cannot find it searching through source. (Which I did, not knowing where to look, for  naively believing I could understand anything) But I'm not certain about my opinion on this so I asked.What is the  level value for the  object in ?
 is a macro definition in . It is a an alias for  in  which is a static (as in storage) global variable of  type (which is a struct). It is assigned in Python terms to be of  (defined right above it in  and only used once for ).So it's not NULL or any other special value in C, it's a singleton  instance of . As for the   not being exposed, I suppose they refer to the  keyword (i.e. internal linkage) which means that the  is only accessible within  and is only used once for the definition of .Just to add to this a bit, whenever the documentation says that  has no type, it should not be taken literally. It has a special kind of type, , which you can still access through the  singleton but you can't create new instances or do any other thing you can do with a normal type. There seems to be a hard-coded limitation for not creating new instances, and although I can't find exactly where it's defined in the CPython source you can see its effect when trying to create a new instance:EDIT: It seems that the error is thrown from  when the  field is NULL. Surprisingly though  seems to be defined with a non-NULL  (points to the static  in ). It might be set to NULL afterwards at some point, but it's just an implementation detail and doesn't really make a difference for the scope of your question.
 is , and must be increfed and returned from a function during normal operation if no other value is to be returned.  is only returned if an exception is to be signaled to the VM, with the actual exception object created/assigned separately.
 is the value of the address of the  struct definition.See the code:


Answer URL
https://docs.python.org/3/c-api/none.html#c.Py_None
