Natural Text
I have tried multiple methods in doing this but none of them seem to workThe answer comes up alphabetically insteadAlso is there any way to get rid of the "/n" when it goes to the shell?
Based on the inputs and outputs, I'm guessing you're trying to sort the input names by the associated values. To sort numerically, you can either parse all the values pairs, or use a  function with  that does it for you (without storing the result anywhere). For example:The output from  would be (modulo some whitespace; the screenshot makes it hard to tell how much whitespace is after the comma, so I'm just using a single space):which is what you seem to want.Explanation of code as requested in the comments:In , we're splitting the provided string on whitespace ( does this when not given an argument), then taking the last value from the split with  (indexing with negative numbers starts from the end). So something like  is stored to  as . Then we convert the string  to its integer value with  and return it opens the file for read and assigns the result to ; when the indented  block finishes, the file is closed for you (even if the block exits due to exceptions or returning from a function) Creates a generator expression (sort of like a lazily evaluated list comprehension that can only be iterated once) that reads a line at a time and uses  to remove all trailing whitespace (e.g. the new line; you could use  to only remove the newline, not trailing tabs or spaces, but the  function would need to be tweaked). We could use a list comprehension instead of a generator expression, but since  will create the  for us anyway, we're being lazy to avoid having both the sorted and unsorted list stored at the same time (alternatively, a list comprehension could be followed by a  call on the result, which would also avoid keeping two lists in memory, but  doesn't return anything, so we'd have more lines of code). is just like the  you used in your attempt except it sorts each (-ed) line based on the result of calling  on it (it only calls the  function once per value, which is why  is superior to ;  would have to convert each value  times during the sort, on average, or  conversions total;  converts each value once, and performs a total of  conversions). So it sorts  relative to  by comparing the result of calling  () to  (). Since numbers sort in ascending order (lowest to highest) normally (so  would sort before ) and you want descending order (highest to lowest) we also pass  to reverse the "natural" sort of the integers.The final one-liner uses the "splat" operator () to convert the list resulting from the  call to sequential positional arguments to ; for Python 3's  function (or the  function you get in Python 2 with  that replaces the normal  statement of Py2), each argument is printed, with  printed between each argument (defaults to a single space, ), and when all arguments are printed, follows it up with the value of  (defaults to a new line, ). So that would let you print the input lines from highest to lowest on separate output lines rather than printing the representation of the sorted list on a single line.
To sort numerically by grade:How it worksThe above code has two parts.  The first reads the file and splits the lines:These lines are unsorted.The next step is to sort the lines.  This is done with  with the  option:The key, , takes the second element of the list, , and converts it to an integer.  In other words,  sorts by the integer value of the grade.Sorting in descending orderThe above sorts in ascending order.  To sort in descending order, we can add the  option:Sorting while keeping the original whitespaceSorting grades in ascending order:To print that out nicely:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.split
https://docs.python.org/3/library/functions.html#int
https://docs.python.org/3/reference/compound_stmts.html#with
https://docs.python.org/3/glossary.html#term-generator-expression
https://docs.python.org/3/glossary.html#term-list-comprehension
https://docs.python.org/3/library/stdtypes.html#str.rstrip
https://docs.python.org/3/library/functions.html#sorted
https://docs.python.org/3/glossary.html#term-argument
https://docs.python.org/3/library/functions.html#print
