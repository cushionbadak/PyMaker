Natural Text
Say I have a function in Python that uses a constant computed float value like 1/3.If I call the function repeatedly, will the value of 1/3 be automatically cached for efficiency? Or do I have to do something manually such as the following?
Find out for yourself! The dis module is great for inspecting this sort of stuff:As you can see, the  calculation happens every time. (Note: I changed  to  to force float division, otherwise it'd just be 0. You can also enable future-division, which actually changed the behavior, see edit section below). And your second approach:More information on the second can be found by inspecting the function object:You can see the default value is cached in there.EDIT: Turns out this is a little more interesting -- in Python 3 they do get cached (and also in Python 2.7 when you enable ):Switching to integer division () in either Python 3 or 2.7-with-future-division doesn't change this, it just alters the constant to be a  instead of  Also, using integer division directly in 2.7 without future-division will cache the  as well. Learned something new today!


Answer URL
https://docs.python.org/3/library/dis.html
https://docs.python.org/3/library/inspect.html
