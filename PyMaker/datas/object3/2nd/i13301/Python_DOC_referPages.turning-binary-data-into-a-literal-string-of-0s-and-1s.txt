Natural Text
I have a file filled with binary data representing a sequence of 2 byte instructions in big endian ordering.I need to be able to decode these instructions into their more meaningful equivalents, but I'm having trouble getting the data into a format I can work with. I think it would be best If I turned the instructions into actual strings of 0's and 1's.So far, I've written this:which prints out the bytes 1 at a time, like this:I know the first instruction in the file is:So, it looks like it's printing out the ascii chars corresponding to the integer values of each byte, except it's just printing out the hex representation when there's no ascii char for the int value.  Where do I go from here though? I need to turn my  into  because I actually care about the bits, not the bytes.
You could convert  to its corresponding integer  value, and then print the int in binary format using :Reading a large file one-byte-at-a-time can be very slow. You'll get better performance by reading more bytes per call to .You can iterate over the contents of the file in chunks of 1024 bytes using:Similarly, calling  once for each byte can be very slow. You'll get better performance by printing more bytes per call to . So you could use a list comprehension to loop over the bytes in , convert each to its string-binary format and then use  to join the strings together:Use bare  is considered a bad practice. If you choose to use  here, list only those Exceptions you wish to handle:
In Python 3, to convert 2 bytes into a bitstring ( may be  slightly slower):For a single-source Python 2/3 compatible version, see Convert binary to ASCII and vice versaTo load all instructions both time- and space-efficiently, you could use  module:For other ways to read a binary file efficiently, see Reading binary file in Python and looping over each byte.


Answer URL
https://docs.python.org/3/library/functions.html#ord
https://docs.python.org/3/library/array.html
