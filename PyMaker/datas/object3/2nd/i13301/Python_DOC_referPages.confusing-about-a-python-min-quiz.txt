Natural Text
Just now I saw a quiz on this page:The example answer isFrom the documentation I know that:min(iterable[, key=func]) -> value  min(a, b, c, ...[, key=func]) -> valueWith a single iterable argument, return its smallest item.  With two or more arguments, return the smallest argument. But why is  and ?I also tried a few others:
 is implemented roughly like this:The way the comparison operators work for sets break one of the assumptions that this implicitly makes: that for every pair of objects, either they are equal, or  or . Neither  nor  compare less than one another, so  gives you inconsistent answers.The other results you see are because of the rules for how Python defines an order for mixed types. A  and an  aren't comparable - neither of those types defines a rule for comparing to the other. This leads Python 2 to apply a rule called "arbitrary but consistent order" - one of the types is chosen to be the "lower" type, and it will remain the lower type for the lifetime of the program. In practice, it will be the same across all code you run, because it is implemented by comparing the type names alphabetically - but in theory, that could change. The "arbitrary but consistent order" rule has been dumped from Python 3, because the only effect it really had was to mask bugs. When there is no defined rule for finding an order, Python now tells you so:
The comparison operators , , , and  check whether one set is a strict subset, subset, superset, or strict superset of another, respectively. and  are  for all of these, so the result depends on the check order and operator.
The key point here is, the two sets are not subsets of each other, so both are  for  even though they are not equal:So which one is smaller? The fact that sets don't provide strict weak ordering means there's no correct answer.


Answer URL
https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference
