Natural Text
Why and how does it works? For example I'm writing a list comprehension like this:At now, if I remove the , this will also work, but:Does Python make a generator here? And if I do this without :I'm thinking about because  will make a generator, but that's impossible, however I'm not using two pair of  like:
Does Python make a generator here?Yes. Quoting official documentation of Generator expressions,The parentheses can be omitted on calls with only one argument.Note that this is the only exception from the actual syntaxSo, when you didPython was not able to parse it, as it is not a valid Python expression. That is why you were getting a .If you actually wanted to print all the elements from the generator expression, you can unpack the result of it to the  function, as suggested by Blckknght, like this
In Python 3.x, print is a function.Normally, when you try to create a generator expression and store it in a variable (or in some other places), you need to enclose it in  . Example -But if you are passing a generator expression to a function as a psotional argument, and it is the only argument , then you do not need the enclosing  .It is explained in the PEP 0289 -if a function call has a single positional argument, it can be a generator expression without extra parentheses, but in all other cases you have to parenthesize it.Or the documentation (As also given by the other answer) -The parentheses can be omitted on calls with only one argument.
The parentheses aren't what make a generator, just like they aren't what make a . Something like  will  the  of :You can make a  with a single character with just the comma:You only need the parentheses when they provide disambiguation for the syntax, such as .Regarding the  call, if you include the parentheses you can then use the  operator to unpack the generator:This occasionally saves some typing.


Answer URL
https://docs.python.org/3/reference/expressions.html#generator-expressions
