Natural Text
Searching online didn't help.  I'm not sure whether this is even possible.Preferably write solution in Python, but anything is fine.=====Edit: I originally said O(1) space, but I don't think it's possible.Changing the requirements:No space requirements, but you must modify the input in-place and return it.
How about this? I think the time complexity and the space complexity are both .
I don't think this is possible in O(n) time and O(1) space.  To get O(n) time you have to have a scratchpad (with O(1) insert and lookup, e.g. a ) recording all the elements you've already seen; that requires O(m) space (where m is the number of unique elements).  Conversely, to get O(1) space you have to rescan earlier elements in the array for each element, which is O(n2) time.If you'll accept an O(m) scratchpad, this fulfills the "modify the array in place" requirement and runs in O(n) time.This would still be O(n2) time if I deleted elements from the array as I iterated over it, because  is itself an O(n) operation: it has to slide everything after  down one.   where  is past the end of the array should be O(1), but if it really matters, you'd have to check the implementation.And if you must have O(1) space, here's the O(n2) time algorithm:I'm doing manual array indexing in these because deleting elements from an array you're iterating over using any of the usual for..in constructs is unsafe.  You could use a for..in loop in the first one, but you'd lose parallel structure so it would be less readable.In case you haven't seen it before, an  clause on a loop is executed only if the loop is not exited via .


To keep the speed efficient, you need to use O(n) space to record records that already exist. If there are a large amount of duplicates it won't take much space. However, the del operation on a standard array is O(n) because it has to shift all the following elements.
O(n) time, O(n) spaceNote: Do not modify a list you are iterating through like below:O(n^2) time, O(1) spaceIt certainly is bounded by n^2, but in reality it's less.O(n) time, O(1) spaceIf your list is sorted and you don't mind removing the first duplicates.



Answer URL
https://docs.python.org/3/reference/compound_stmts.html#the-while-statement
