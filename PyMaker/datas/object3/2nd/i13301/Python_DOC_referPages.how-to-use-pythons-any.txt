Natural Text
I feel very confused about some code like this[not written by me]: must be a num. when  is , should  return 1, when is , should return 2, when , should return 1.so I think it's wrong to use  in this code, because  just return  or . If I rewirte this logic using another way, I can not find a graceful way as a pythoner.I want to know whether  can achieve the logic, if not, how to achieve it gracefully?
You can simply use  here.Make sure the functions are defined before trying to call them.This works because  returns the first True-like value or the last value (if no value is True-like) . And 'None' is considered False-like in Boolean context.
@AnandSKumar's answer is optimal. But just to give you some information on any if you are interested:Take this example: Ultimately what is happening inside the any is, iterate over the array of methods j, and indicate whether each item is less than 3, what the "any" will do in this case is return "ANY" condition that matches that. So even if you find one that is False, it will still return True. There is another similar method to this called "all", that will ensure that ALL conditions are met based on your condition you are checking. Here is the example: So, as you can see, because one condition failed, it will return False.
For the arbitrary length case (where explicitly chaining  doesn't make sense), you can make a version of  that returns the first truthy value or a given value when all results are falsy with:The  only produces "truthy" values, and the two arg  gets the first "truthy" value, or the default value if  finds no "truthy" values.If the  is a non-empty  (rather than merely ), you can exactly match the behavior of chained s (the "falsy" result is the last value, not a specific value like  or ) with:to use the final element ("truthy" or "falsy") as the result when all elements were "falsy".To be clear, if the set of things to test is fixed and smallish, explicit  per Anand's answer is the better way to go.


Answer URL
https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable
