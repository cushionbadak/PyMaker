Natural Text
I want to create the following module and object structure:When I only had  everything worked as it should, as I created an empty  inside the  folder (since  does not have any objects at the moment), and I placed  next to it.However, when I tried to create two separate c modules to make  work (that is  and ) and then I added two s which both of them imported their extension modules relative to them, then I got into s (as wrappers around the  error "raised" from the shared libraries), because  needs a few of the C-level definitions from . Which makes me think, it would be way more easier, to create a single shared library which somehow creates "virtual" modules inside it, instead of the unnecessary library linking..So my question is: Is it possible? If so, how? Or, is there a better way to achieve what I'm looking for?
I think I got your problem now. For a long and detailed answer you should read Providing a C API for an Extension Module.Portability therefore requires not to make any assumptions about symbol visibility. This means that all symbols in extension modules should be declared static, except for the moduleâ€™s initialization function, in order to avoid name clashes with other extension modules [...]. And it means that symbols that should be accessible from other extension modules must be exported in a different way.To achieve this you should use Capsules. For these every function you want to use in another module should be stored inside a  array. Then you create a capsule with  using the array as first argument. This object must be added to your sub_module. Then you can call  in your sub_sub_module to import the array and access the functions you need.


Answer URL
https://docs.python.org/3/extending/extending.html#providing-a-c-api-for-an-extension-module
https://docs.python.org/3/c-api/capsule.html
