Natural Text
What is  for in a Python source directory?
It's a part of a package. Here's the documentation.The  files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as , from unintentionally hiding valid modules that occur later (deeper) on the module search path. In the simplest case,  can just be an empty file, but it can also execute initialization code for the package or set the  variable, described later.
Files named  are used to mark directories on disk as Python package directories.If you have the filesand  is on your path, you can import the code in  asor If you remove the  file, Python will no longer look for submodules inside that directory, so attempts to import the module will fail.The  file is usually empty, but can be used to export selected portions of the package under more convenient name, hold convenience functions, etc.Given the example above, the contents of the init module can be accessed as based on this
In addition to labeling a directory as a Python package and defining ,  allows you to define any variable at the package level. Doing so is often convenient if a package defines something that will be imported frequently, in an API-like fashion. This pattern promotes adherence to the Pythonic "flat is better than nested" philosophy.An exampleHere is an example from one of my projects, in which I frequently import a  called  to interact with my database. I wrote a "database" package with a few modules:My  contains the following code:Since I define  here, I can start a new session using the syntax below. This code would be the same executed from inside or outside of the "database" package directory.Of course, this is a small convenience -- the alternative would be to define  in a new file like "create_session.py" in my database package, and start new sessions using:Further readingThere is a pretty interesting reddit thread covering appropriate uses of  here:http://www.reddit.com/r/Python/comments/1bbbwk/whats_your_opinion_on_what_to_include_in_init_py/The majority opinion seems to be that  files should be very thin to avoid violating the "explicit is better than implicit" philosophy.
There are 2 main reasons for For convenience: the other users will not need to know your functions' exact location in your package hierarchy.then others can call add() by without knowing file1, likeIf you want something to be initialized; for example, logging (which should be put in the top level):
The  file makes Python treat directories containing it as modules. Furthermore, this is the first file to be loaded in a module, so you can use it to execute code that you want to run each time a module is loaded, or specify the submodules to be exported.
Since Python 3.3,  is no longer required to define directories as importable Python packages.Check PEP 420: Implicit Namespace Packages:Native support for package directories that donâ€™t require  marker files and can automatically span multiple path segments (inspired by various third party approaches to namespace packages, as described in PEP 420)Here's the test:  references:https://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packageshttps://www.python.org/dev/peps/pep-0420/Is __init__.py not required for packages in Python 3? 
In Python the definition of package is very simple. Like Java the hierarchical structure and the directory structure are the same. But you have to have  in a package. I will explain the  file with the example below: can be empty, as long as it exists. It indicates that the directory should be regarded as a package. Of course,  can also set the appropriate content.If we add a function in module_n1:After running:Then we followed the hierarchy package and called module_n1 the function. We can use  in subPackage_b like this:After running: Hence using * importing, module package is subject to  content.
 will treat the directory it is in as a loadable module.For people who prefer reading code, I put Two-Bit Alchemist's comment here.
Although Python works without an  file you should still include one.It specifies a package should be treated as a module, so therefore include it (even if it is empty).There is also a case where you may actually use an  file: Imagine you had the following file structure:And  contained this:To use  you would need one of the following:Maybe there you need (or want) to keep  inside  (runtimes/dependencies for example) but you only want to import .If you changed the name of  to  then you could use  by just importing :This works because  is treated as part of the package.Some Python packages actually do this.  An example is with JSON, where running  is actually importing  from the  package (see the package file structure here):Source code: 
It facilitates importing other python files. When you placed this file in a directory (say stuff)containing other py files, then you can do something like import stuff.other.Without this  inside the directory stuff, you couldn't import other.py, because Python doesn't know where the source code for stuff is and unable to recognize it as a package. 


Answer URL
https://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packages
https://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packages
https://docs.python.org/3/library/json.html
https://docs.python.org/3/tutorial/modules.html#the-dir-function
https://docs.python.org/3/library/sys.html#sys.builtin_module_names
