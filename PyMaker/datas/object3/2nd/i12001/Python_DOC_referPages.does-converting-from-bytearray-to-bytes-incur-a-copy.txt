Natural Text
Does converting from the mutable  type to the non-mutable  type incur a copy? Is there any cost associated with it, or does the interpreter just treat it as an immutable byte sequence, like casting a  to a  in C++?Does this differ between Python 3 where  is its own type and Python 2.7 where  is just an alias for ?
A new copy is created, the buffer is not shared between the  and the new  object, in either Python 2 or 3.You couldn't share it, as the  object could still be referenced elsewhere and mutate the value.For the details, see the  source code, where the buffer protocol is used to create a straight up copy of the data (via ). 
Martjin is right. I just wanted to back that answer up with the cpython source.Looking at the source for bytes here, first  is called, which will call , which will call , which creates a new bytes object and calls  (defined here). This calls , which is a memory copy function. The comment for the function reads:Copy src to a contiguous representation. order is one of 'C', 'F' (Fortran) or 'A' (Any). Assumptions: src has PyBUF_FULL information, src->ndim >= 1, len(mem) == src->len.Thus, a call to bytes with a bytearray argument will copy the data.


Answer URL
https://docs.python.org/3/c-api/buffer.html
