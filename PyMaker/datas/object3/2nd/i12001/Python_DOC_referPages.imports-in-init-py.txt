Natural Text
This is my project structure (Python 3.5.1.):Case 1File  is empty.File  is:If we run , the output is:Case 2File  is empty.File  is:If we run , the output is:QuestionWhy doesn't the program fail in Case 2?Usually if we run  then we can only reference it by , not . Hopefully somebody can help explain what's happening to the namespace in Case 2.
Python adds modules as globals to the parent package after import.So when you imported , the name  was added as a global to the  module, created by .From the Python 3 import system documentation:When a submodule is loaded using any mechanism (e.g. importlib APIs, the import or import-from statements, or built-in ) a binding is placed in the parent moduleâ€™s namespace to the submodule object. For example, if package  has a submodule , after importing ,  will have an attribute  which is bound to the submodule.Bold emphasis mine. Note that the same applies to Python 2, but Python 3 made the process more explicit.
An  statement brings a module into scope. You imported , so there it is, a module object.Read the documentation for :The basic import statement (no from clause) is executed in two steps:find a module, loading and initializing it if necessarydefine a name or names in the local namespace for the scope where the import statement occurs.You didn't import  in the first case.


Answer URL
https://docs.python.org/3/reference/import.html#submodules
https://docs.python.org/3/reference/simple_stmts.html#import
