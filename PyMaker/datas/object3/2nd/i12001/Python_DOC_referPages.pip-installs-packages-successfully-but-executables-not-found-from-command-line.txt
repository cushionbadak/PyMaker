Natural Text
I am working on mac OS X Yosemite, version 10.10.3.I installed python2.7 and pip using macport as done in http://johnlaudun.org/20150512-installing-and-setting-pip-with-macports/I can successfully install packages and import them inside my python environment and python scripts. However any executable associated with a package that can be called from the command line in the terminal are not found.Does anyone know what might be wrong? (More details below)For example while installing a package called "rosdep" as instructed in http://wiki.ros.org/jade/Installation/SourceI can run: which installs without errors and corresponding files are located in However if I try to run : ,it gives an error : This is not a package specific error. I get this for any package installed using pip on my computer. I even tried adding to my .But the executables are not found on the command line, even though the packages work perfectly from within python.
check your $PATH has a command line mode:  where is it?and what's in my $PATH?  Notice the /opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin?  That's what allows finding my pip-installed stuffNow, to see where things are from Python, try doing this (substitute  for ).that prints out:Now, cd to the directory right above  in the above.  Do you see a bin directory?  Do you see  in that bin?  If so try adding the  to your $PATH.output:
On macOS with the default python installation you need to add  to your $PATH.Add this to your .bash_profile:That's where pip installs the executables.Tip: For non-default python version  to find the location of your python installation and replace that portion in the path above. (Thanks for the hint Sanket_Diwale)
If you're installing using  (e.g. ), it is possible to get the platform-specific user install directory from Python itself using the  module.  For example, on macOS:By appending  to this, we now have the path where package executables will be installed.  We can dynamically populate the PATH in your shell's rc file based on the output; I'm using bash, but with any luck this is portable:I use the precise Python versions to reduce the chance of the executables just "disappearing" when Python upgrades a minor version, e.g. from 3.5 to 3.6.  They'll disappear because, as can be seen above, the user installation path may include the Python version.  So while  could point to 3.5 or 3.6,  will always point to 3.6.  This needs to be kept in mind when installing further packages, e.g. use  over .If you don't mind the idea of packages disappearing, you can use  and  instead:
I stumbled upon this question because I created, successfully built and published a PyPI Package, but couldn't execute it after installation. The variable was correctly set.In my case the problem was that I hadn't set the in the  file:
On Windows, you need to add the path  to your path.


Answer URL
https://docs.python.org/3/library/site.html#cmdoption-site-user-base
