Natural Text
I'm trying to calculate the shortest path from a node  to another  in a graph. I've been reading that the  operator, applied to a list, concatenates an element to the end of the former, creating a new list as a result. Whereas using  not only does the same of adding the elements to the end of the list but also keeps the same list instance.I can't see why if I use  my code works, and not if I use . I don't see the need of creating a new list each time the function is called for it to return the right results.Thanks in advanced.EDITUsing  creates a new instance of , thus all the other variables that depend in some way of it don't change each time I add a new element to . Now the question should be how should I remove that dependence?
 is expecting another sequence as its argument.  The same as you said , you need to say .  The easier way, however, would be to use : .  Here are the docs on .
I wasn't aware that applying operations to  will result in modifications in other variables such as or . When I saw that doing  or  also added  to the other two lists I realized that I should not use  when calling the function recursively in  but instead use  so as to send a copy of the list and not the reference.So in the end I kept the line  or  and modified the parameter  in the recursive call. By doing that the program returned the shortest path as expected. Thanks for the comments and the answers.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#more-on-lists
