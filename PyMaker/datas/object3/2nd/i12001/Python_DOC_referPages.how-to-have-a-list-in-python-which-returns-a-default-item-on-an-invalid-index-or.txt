Natural Text
I am trying to create a custom python shell where I initialize some objects on startup. Those objects could be individual items or list. the user of the shell could then call methods from those objects to perform some functions:For Ex, this code is run on the start of the python shell:Now in the shell, user will have to know that the initialized variable 'a' is a list or a class object. There can be a message displayed on startup of the python shell. But in case it is not seen, user might try to access the variable as a list when it was an object and vice versa.I was wondering if the list itself can be created as a smart list. i.e. if the user supplies an index to the list, the object at the index is returned. Otherwise in case of an invalid index or no index being given, the list returns the 0th element (or any fixed element for that matter) An example of the use case:Now in the shell, this file is imported on start (using "python -i"):Case 1: Object list was createdCase 2: Object was createdI wanted to try and see if I could make things work for user without them having to do a try-except.
Making  return the instance:and delegating attribute lookup of not found attributes tothe first list member with  would work:With a list:With an instance:
You can implement , , and  on your  to make it act like a list of one item:
Use try ... except:If N-th element exists in list, then it will be returned, otherwise 0 element (or some other) will be returned.


Answer URL
https://docs.python.org/3/reference/datamodel.html?highlight=__getitem__#object.__getitem__
https://docs.python.org/3/reference/datamodel.html?highlight=__getattr__#object.__getattr__
