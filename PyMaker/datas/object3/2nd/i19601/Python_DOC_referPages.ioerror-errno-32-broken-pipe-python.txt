Natural Text
I have a very simple Python 3 script:But it always says:I saw on the internet all the complicated ways to fix this, but I copied this code directly, so I think that there is something wrong with the code and not Python's SIGPIPE.I am redirecting the output, so if the above script was named "open.py", then my command to run would be:
I haven't reproduced the issue, but perhaps this method would solve it: (writing line by line to  rather than using )You could catch the broken pipe? This writes the file to  line by line until the pipe is closed. You also need to make sure that  is reading from the pipe before it gets too big - https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer
The problem is due to SIGPIPE handling. You can solve this problem using the following code:See here for background on this solution. Better answer here.
To bring Alex L.'s helpful answer,  akhan's helpful answer, and Blckknght's helpful answer together with some additional information:Standard Unix signal  is sent to a process writing to a pipe when there's no process reading from the pipe (anymore).This is not necessarily an error condition; some Unix utilities such as  by design stop reading prematurely from a pipe, once they've received enough data.By default - i.e., if the writing process does not explicitly trap  - the writing process is simply terminated, and its exit code is set to , which is calculated as  (to signal termination by signal in general) +  ('s specific signal number).By design, however, Python itself traps  and translates it into a Python  instance with  value , so that a Python script can catch it, if it so chooses - see Alex L.'s answer for how to do that.If a Python script does not catch it, Python outputs error message  and terminates the script with exit code  - this is the symptom the OP saw.In many cases this is more disruptive than helpful, so reverting to the default behavior is desirable:Using the  module allows just that, as stated in akhan's answer;  takes a signal to handle as the 1st argument and a handler as the 2nd; special handler value  represents the system's default behavior:
A "Broken Pipe" error occurs when you try to write to a pipe that has been closed on the other end. Since the code you've shown doesn't involve any pipes directly, I suspect you're doing something outside of Python to redirect the standard output of the Python interpreter to somewhere else. This could happen if you're running a script like this:The issue you have is that  is exiting without reading everything available on its standard input. This causes your write (via ) to fail at some point.I was able to reproduce the error with the following command on a Linux system:If I close the  pager without scrolling through all of its input (1000 lines), Python exits with the same  you have reported.
I feel obliged to point out that the method usingis indeed dangerous (as already suggested by David Bennet in the comments) and in my case led to platform-dependent funny business when combined with  (because the standard library relies on BrokenPipeError being raised in several places). To make a long and painful story short, this is how I fixed it:First, you need to catch the  (Python 2) or  (Python 3). Depending on your program you can try to exit early at that point or just ignore the exception:However, this isn't enough. Python 3 may still print a message like this:Unfortunately getting rid of that message is not straightforward, but I finally found http://bugs.python.org/issue11380 where Robert Collins suggests this workaround that I turned into a decorator you can wrap your main function with (yes, that's some crazy indentation):
This can also occur if the read end of the output from your script dies prematurelyie   open.py | otherCommandif otherCommand exits   and open.py tries to write to stdout  I had a bad gawk script that did this lovely to me.
I know this is not the "proper" way to do it, but if you are simply interested in getting rid of the error message, you could try this workaround:
Closes should be done in reverse order of the opens.


Answer URL
https://docs.python.org/3/library/signal.html#note-on-sigpipe
