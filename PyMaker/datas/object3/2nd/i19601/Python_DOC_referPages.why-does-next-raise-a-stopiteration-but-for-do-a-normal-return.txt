Natural Text
In this piece of code, why does using 'for' result in no 'StopIteration'or is the 'for' loop trapping all exceptions and then silently exiting?In which case, why do we have the extraneous 'return'?? Or is the caused by: ?Assuming  is being triggered by: .When is GeneratorExit generated?If i manually do a:In which case why don't I see a traceback?
The  loop listens for  explicitly.The purpose of the  statement is to loop over the sequence provided by an iterator and the exception is used to signal that the iterator is now done;  doesn't catch other exceptions raised by the object being iterated over, just that one.That's because  is the normal, expected signal to tell whomever is iterating that there is nothing more to be produced.A generator function is a special kind of iterator; it indeed raises  when the function is done (i.e. when it returns, so yes,  raises ). It is a requirement of iterators; they must raise  when they are done; in fact, once a  has been raised, attempting to get another element from them (through , or calling the  (py 2) or  (py 3) method on the iterator) must always raise  again. is an exception to communicate in the other direction. You are explicitly closing a generator with a  expression, and the way Python communicates that closure to the generator is by raising  inside of that function. You explicitly catch that exception inside of , its purpose is to let a generator clean up resources as needed when closing.A  is not propagated to the caller; see the  documentation.


Answer URL
https://docs.python.org/3/reference/expressions.html#generator.close
