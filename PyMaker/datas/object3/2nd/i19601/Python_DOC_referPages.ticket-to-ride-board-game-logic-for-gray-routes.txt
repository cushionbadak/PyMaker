Natural Text
I enjoy playing Ticket to Ride, so I decided to play around with implementing parts of the game logic in Python as a side programming project.  The game board is essentially a weighted multigraph, so replicating the basic structure of the game with NetworkX was a cinch.The one part I'm having trouble with is analyzing whether a particular path through the board is possible given an inventory of train cards the player possesses.  I think it's more of a math problem than a programming problem per se, and I can probably piece together a brute force method for figuring things out, but thought there must be a more efficient way.For those who don't know the game: at any given time, each player has a number of train cards in one of eight colors, plus a special "locomotive" category that serves as a wild card.  These colors correspond to the color of train lines on the game board (shown here) except for the gray lines, where you can use any color, as long as all cars in the segment are the same color.  (There are edge cases involving tunnels and ferries, but we'll leave those aside for now.)With the code as it stands now, I can find all paths between two given cities and get back how many train cards of each color are needed to take that particular path, unless the paths involve gray segments.  I do the non-gray segments first since they're more straightforward -- either you have enough red/green/blue cards for each red/green/blue segment in the path or you don't.  With gray, because you can pick any color to use for each segment, it gets a bit more involved.For paths with just one gray segment, it's still easy -- either you have enough cards of any one color to fill it in or not.  With multiple gray segments, however, one can run into situations where the color chosen for the first segment makes completing the second or third segment impossible.As an example, suppose a player's card inventory is 4 red, 2 green, 3 blue, and we're trying to figure out if he can get from Paris to Vienna.  Looking at the board, it's pretty easy to see that the only possible route for this card combination involves going Paris --(3 gray)--> Zurich --(2 green)--> Venice --(2 gray)--> Zagrad --(2 gray)--> Vienna.  My algorithm for figuring this out starts with the green segment, and allocates the two green cards there.  Then it needs to decide how to use the remaining 4 red and 3 blue cards to cover the gray segments of lengths 3, 2, and 2.The answer, of course, is to use the 3 blue cards between Paris and Zurich, and 2 red cards each for Venice to Zagrad and Zagrad to Vienna.  But how does one write a generalized algorithm that solves this problem for less obvious cases involving more colors and more segments?My code for this right now looks like this:("weight" is the length of the segment in train cars.)I feel like there's a really trivial solution lurking in here that I just can't put my finger on.  Any ideas?
As Daniel Br√ºckner says, the problem of finding a way to assign colors of cards to gray segments corresponds to the bin packing problem, with the sets of colored cards corresponding to the bins, and the gray segments corresponding to the objects to be packed.Now, the bin packing problem is NP-hard, but that's not a disaster in this case, because the problem can be solved in pseudo-polynomial time (that is, in time that's polynomial in the size of the bins) using dynamic programming, and that should be good enough for your application, where the size of the bins is limited by the number of cards in the game. Here's an example implementation of bin packing, using the  decorator to memoize it:from functools import lru_cacheAnd this can be used to determine if a path can be followed in Ticket to Ride:Note that if you made  a , then you could just write  instead of .
This problem bears some similarities with problems like bin packing, subset sum and other similar problems. The mentioned and many related problems are NP-complete and therefore it may turn out that there is no (known) efficient algorithm for this problem but I can not prove this at the moment - it is just an intuition. I will think about it some more and then update this answer.
Another way of approaching this is to build a search tree as follows:Each node is labelled with a city name, a set of cards, and a number of trains. This corresponds to the starting city of a particular route and the cards and train pieces you have available.Each child of a node corresponds to a city you can reach from the parent, along with the cards and train pieces that remain in your hand after completing the route from the parent to the node.For example, the root of the tree could correspond to Montreal with 4 blue, 1 white, and 1 wild card, and 45 train pieces. The children of the root would be:Toronto, (1 blue, 1 white, 1 wild), 42   # Use 3 blue cardsToronto, (2 blue, 1 white), 42           # Use 2 blue and a wild cardNew York, ( 1 blue, 1 white, 1 wild), 42 # Use 3 blue cardsNew York, ( 2 blue, 1 white ), 43        # Use 2 blue and a wild cardBoston, ( 3 blue, 1 white ), 43          # Use 1 blue and a wild cardBoston, ( 2 blue, 1 white, 1 wild ), 43  # Use 2 blue cardsBoston, ( 4 blue ), 43                   # Use 1 white and a wild cardNow, you just need to perform a depth-first search in this tree to see if you can reach the destination city. The edges you add to the search tree are limited by the cards in your hand (i.e., you can't go directly from Montreal to Sault St. Marie because you don't have a total of 6 black/wild cards in your hand) and the number of trains remaining (you couldn't go from Calgary to Seattle if you only had 3 cards remaining).


Answer URL
https://docs.python.org/3/library/functools.html#functools.lru_cache
https://docs.python.org/3/library/collections.html#collections.Counter
