Natural Text
I'm trying to transfer a function across a network connection (using asyncore). Is there an easy way to serialize a python function (one that, in this case at least, will have no side affects) for transfer like this?I would ideally like to have a pair of functions similar to these:
You could serialise the function bytecode and then reconstruct it on the caller.  The marshal module can be used to serialise code objects, which can then be reassembled into a function.  ie:Then in the remote process (after transferring code_string):A few caveats:marshal's format (any python bytecode for that matter) may not be compatable between major python versions.Will only work for cpython implementation.If the function references globals (including imported modules, other functions etc) that you need to pick up, you'll need to serialise these too, or recreate them on the remote side.  My example just gives it the remote process's global namespace.You'll probably need to do a bit more to support more complex cases, like closures or generator functions.
Check out Dill, which extends Python's pickle library to support a greater variety of types, including functions:It also supports references to objects in the function's closure:
Pyro is able to do this for you.
The most simple way is probably  (see the inspect module) which returns a String with the source code for a function or a method.
It all depends on whether you generate the function at runtime or not:If you do -  won't work for dynamically generated functions as it gets object's source from  file, so only functions defined before execution can be retrieved as source.And if your functions are placed in files anyway, why not give receiver access to them and only pass around module and function names.The only solution for dynamically created functions that I can think of is to construct function as a string before transmission, transmit source, and then  it on the receiver side.Edit: the  solution looks also pretty smart, didn't know you can serialize something other thatn built-ins
The  package (pip install cloud) can pickle arbitrary code, including dependencies.  See https://stackoverflow.com/a/16891169/1264797.
The basic functions used for this module covers your query, plus you get the best compression over the wire; see the instructive source code:y_serial.py module :: warehouse Python objects with SQLite"Serialization + persistance :: in a few lines of code, compress and annotate Python objects into SQLite; then later retrieve them chronologically by keywords without any SQL. Most useful "standard" module for a database to store schema-less data."http://yserial.sourceforge.net
Now


Answer URL
https://docs.python.org/3/library/marshal.html
