Natural Text
What I want is to be able to handle sets of data that have a fixed set of keys. All keys are strings. The data will never be edited. I know this can be done with normal dicts like so:They must be able to be called like so:However, this looks to be a waste of memory (since dictionaries apparently keep themselves 1/3 empty or something like that, along with also storing the keys multiple times) and also tedious to create as well since I need to keep entering the same keys over and over again in my code. I also risk accidentally changing something in the datasets.My current solution is to have a set of keys stored in a tuple first, then store the data as tuples too. It looks like this:To retrieve data, I would do this:Then, I learned about this thing called namedtuples which seem to be able to do what I needed:However, it appears I can't simply call the value by the key. Instead, to retrieve the data by the key, I have to use getattr, which doesn't seem very intuitive: My criteria is for memory efficiency first, then performance efficiency. Of these 3 methods, which would be the best way to do things? Or am I missing something and there's a more pythonic idiom to get what I want?EDIT: I've now recently also learned about the existence of , which apparently runs more efficiently for key:value pairs while pretty much consuming the same(?) amount of memory. Would an implementation acting similar to this be a suitable alternative to namedtuples?
Yes,  should do.Let's try that out:The conditional on  is a sanity check;  would happily fetch  for us if it weren't present.
 seems the right thing to use. If your "keys" are fixed, you don't need  and can use the normal syntax for retrieving objects' attributes:This usage is also demonstrated in the docs:You don't usually use  if the second argument (attribute name) is constant. It's only needed if it may change:


Answer URL
