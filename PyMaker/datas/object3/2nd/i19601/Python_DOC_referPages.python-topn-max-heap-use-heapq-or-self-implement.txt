Natural Text
there's heapq in python, for general usage.i want recording topN(0~20) for 10e7 records.if use heapq, should use '-' to translate max to min; and recording a min number of bottom, to call heapq.heappushpop()  should i use heapq or self implement a heap(maybe buggy or less efficient)?
The only problem with  is that it doesn't provide a  function like everything else in the stdlib does. (If you're curious why, Raymond Hettinger explains in this email. He's right that  couldn't provide the same interface as other sort functions—but the reasons don't affect your use case, where  would just be .)The usual workaround is to decorate-heap-undecorate. That is, put a modified version of your values into the heap that sorts by . Normally, this means one of the following:Storing  instead of , and then accessing  instead of  (assuming  is reversible).Storing  instead of , and then accessing . (This can break stability, but  doesn't promise stability anyway.)Writing a wrapper class that implements a custom  method, then storing  instead of  and accessing  instead of .In your case, the key function is reversible. So, just store , and access . That's about as trivial as decoration gets.Still, regardless of how simple it is, you should probably write a wrapper, or you will screw it up at some point. For example, you could write a  that wraps the minheap in  like this:… and so on for any other functions you need. It may be a bit of a pain, but it's a lot less work than implementing the whole thing from scratch.While you're at it, you may want to wrap the heap in an object-oriented API so you can do  instead of , etc.…If you take a quick look around the recipes at ActiveState or the modules on PyPI, you should find that others have already done most of the work for you.Alternatively, you could copy and paste the  source (it's pure Python) as  and just replace the  function with its opposite. (Of course if you're doing that, it's probably just as easy, and certainly a lot clearer, to modify  to take a  argument in the first place, and modify all the other functions to pass the  through—bearing in mind that it won't be as generally applicable anymore, because it can't make the usual guarantee that  is only called once.)If you really want to live dangerously (you shouldn't), you could even monkeypatch it:But you don't want to do that in real code.


Answer URL
