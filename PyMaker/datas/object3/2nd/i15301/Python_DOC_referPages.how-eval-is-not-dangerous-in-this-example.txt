Natural Text
I was checking a calculator example, in the example used  which is dangerous normally, but here is a part of that example;    I checked it but I didn't understand; how  is not dangerous? It's about  this part obviously, but I don't understand.Note:  is a string that we are adding numbers and smybols like . Then  processing it. 
The code is not safe in the slightest. It's relatively easy to get access to the  module just by accessing attributes of literals.eg.Broken down: is shorthand for  lists all the subclasses of  in the interpreter (this includes classes used by the import machinery -- select the  class. use the  to get access to the  module -- the very thing you were trying to restrict access to.
According to the documentation of ,The  argument is parsed and evaluated as a Python expression using the  and  dictionaries as global and local namespace. If the  dictionary is present and lacks , the current globals are copied into  before  is parsed. This means that  normally has full access to the standard  module and restricted environments are propagated. If the  dictionary is omitted it defaults to the  dictionary. If both dictionaries are omitted, the expression is executed in the environment where  is called.So the attempt of the code you are showing is to  an expression in a context where no potentially dangerous functions are available.  For example,  will print bad stuff but not if you pass an empty global namespace even without the builtin .Don't take this sense of security too far.  Untrusted code can also harvoc your program even within those restrictions.  For example, the following string if d will crash your Python interpreter by exceeding its recursion stack:As HÃ¥ken Lid has mentioned in his comment, a safer approach would be to use  which was just made for this.  As a general rule: it is always better to use the least powerful command that does the job rather than using a powerful one and trying to restrict it manually.  There are too many things you can forget.
The reason why that is a safer way of executing eval() is because it is explicitly restricting which builtin methods are allowed (which are none in this case). You can use that parameter to specify any of the builtins that are allowed.  Here is more information on the subject


Answer URL
https://docs.python.org/3/library/functions.html#eval
