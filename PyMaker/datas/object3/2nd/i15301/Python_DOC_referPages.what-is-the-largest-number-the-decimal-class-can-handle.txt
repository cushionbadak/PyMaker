Natural Text
My program calculates the mathematical constant e, which is irrational. In order to do this, I needed to get factorials of very large numbers. cannot handle numbers larger than 170!. (I found that the largest Google's calculator can handle is 170.654259, but I'm not sure how a non integer can be factorized.)   can not handle very large numbers either.I calculated e to 750000 digits, and  is a mind-boggling, large number. Yet,  handled it with apparent ease.How large of a number can  handle before an  is raised?  Is the size different in Python 2 versus Python 3?
What is the largest number the Decimal class can handle?The largest magnitude is infinity:The largest representable finite number on a given platform depends on :The number of significant digits depends on  e.g., to calculate  with the given precision:The constants (, ) are only relevant for the C implementation. Pure Python version can use larger values:
It depends on the context you provide for the Decimal object. From the library documentation:class decimal.Context(prec=None, rounding=None, traps=None,  flags=None, Emin=None, Emax=None, capitals=1) and  control the bounds of your decimal. If the exponent is greater than  or less than  there will be an overflow signal. You can look at the fields in  to see what they are by default, or  to see what they are at any given time.Edit: As @davidism pointed out you don't get exact answers from  calculations. The default precision of the module is 28. So all integers up to 999999999999999999999999999999 (28 nines) can be represented exactly, and higher numbers might be rounded.


Answer URL
https://docs.python.org/3/library/decimal.html#decimal.MAX_EMAX
https://docs.python.org/3/library/decimal.html#decimal.MAX_PREC
