Natural Text
QuestionI am observing behavior in Python 3.3.4 that I would like help understanding: Why are my exceptions properly raised when a function is executed normally, but not when the function is executed in a pool of workers?CodeThis code produces this error:Exception in thread Thread-3:  Traceback (most recent call last):     File "/user/peteoss/encap/Python-3.4.2/lib/python3.4/threading.py", line 921, in _bootstrap_inner      self.run()    File "/user/peteoss/encap/Python-3.4.2/lib/python3.4/threading.py", line 869, in run      self._target(*self._args, **self._kwargs)    File "/user/peteoss/encap/Python-3.4.2/lib/python3.4/multiprocessing/pool.py", line 420, in _handle_results      task = get()    File "/user/peteoss/encap/Python-3.4.2/lib/python3.4/multiprocessing/connection.py", line 251, in recv      return ForkingPickler.loads(buf.getbuffer())  TypeError: __init__() missing 1 required positional argument: 'message2'  Conversely, if I simply call the function, it seems to handle the exception properly:Produces:Traceback (most recent call last):    File "exceptions.py", line 40, in       print(func(1, 2))    File "exceptions.py", line 30, in func      raise ModuleException_2("We need to halt main") from None  __main__.ModuleException_2Why does  behave differently when it is run in a process pool?
The issue is that your exception classes have non-optional arguments in their  methods, but that when you call the superclass  method you don't pass those arguments along. This causes a new exception when your exception instances are unpickled by the  code.This has been a long-standing issue with Python exceptions, and you can read quite a bit of the history of the issue in this bug report (in which a part of the underlying issue with pickling exceptions was fixed, but not the part you're hitting).To summarize the issue: Python's base  class puts all the arguments it's  method receives into an attribute named . Those arguments are put into the  data and when the stream is unpickled, they're passed to the  method of the newly created object. If the number of arguments received by  is not the same as a child class expects, you'll get at error at unpickling time.A workaround for the issue is to pass all the arguments you custom exception classes require in their  methods to the superclass :Another possible fix would be to not call the superclass  method at all (this is what the fix in the bug linked above allows), but since that's usually poor behavior for a subclass, I can't really recommend it.
Your  fails while beeing unpickled.I was able to fix the problem by changing the signature tobut better have a look at Pickling Class Instances to ensure a clean implementation.


Answer URL
https://docs.python.org/3/library/pickle.html#pickling-class-instances
