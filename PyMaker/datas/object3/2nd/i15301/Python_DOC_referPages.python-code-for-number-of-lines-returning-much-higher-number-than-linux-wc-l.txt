Natural Text
When I do  on a file in Linux (a CSV file of a couple million rows), it reports a number of lines that is lower than what this Python code shows (simply iterating over the lines in the file) by over a thousand. What would be the reason for that?I've had cases where  reports one less than the above, which makes sense in cases where the file has no terminating newline character, as it seems like  counts complete lines (including terminating newline) while this code only counts any lines. But what would be the case for a difference of over a thousand lines?I don't know much about line endings and things like that, so maybe I've misunderstood how  and this Python code count lines, so maybe someone could clarify. In linux lines counting not working with python code it says that  works by counting the number of  characters in the file. But then what is tis Python code doing exactly?Is there a way to reconcile the difference in numbers to figure out exactly what is causing it? Like a way to calculate number of lines from Python that counts in the same way that  does.The file was generated possibly on a different platform that Linux, not sure if that might be related.
Since you are using  I'm assuming you are using Python 3.x, and I've used Python 3.4.2 as an example.There reason for different number of line counts comes from the fact that the file opened by  counts both  and  characters as separate lines as well as the  combination (docs, the universal newlines part). This leads to the following:whilst  gives:The  character is used as a newline in i.e. old Macintosh systems.If you would like to split only on  characters, use the  keyword argument to :The  comes from the fact you've already mentioned. There is not a single  character in the file so  returns 0, and Python counts that as a single line.
Try taking a part of the file and repeat line counting. For example:


Answer URL
https://docs.python.org/3/library/functions.html#open
