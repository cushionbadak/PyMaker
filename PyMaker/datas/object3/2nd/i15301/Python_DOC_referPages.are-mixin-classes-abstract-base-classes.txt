Natural Text
Are Mixin classes abstract base classes? In the example below, the calls to test_base would fail because python wouldn't be able to resolve self.assertEqual for example.Also, is PyCharm incorrect as flagging Mixin classes like the one below has having unresolved attribute errors?
Are Mixin classes AbstractBaseClasses?  The most accurate answer for your case is no but it probably should be. Your class as a stand-alone cannot survive for you reasons you pointed out. By making it an ABC you explicitly tell anyone looking at your class (like pycharm) that The problem is that you would need this for all of the other methods (self.AssertTrue, self.converter etc).  You could have something else in mind but this seriously looks like just a subclass of  to me.Oh and was PyCharm wrong.  No, they got it right.  If you made this an ABC or a subclass of TestCase, they would not have complained.  If you used Interfaces, like zope.Interface, pycharm and the like usually get that wrong since they don't understand the registration and lookup process.(it is outside the python core)
I kept having troubles to get PyCharm to not complain about unresolved attribute reference errors on mixin classes.  In particular, I also had mixin classes depending on other mixin classes for which I couldn't make one inherit from the other.  But then I found this almost perfect way to make PyCharm 2017.1 happy:The assert statement gives PyCharm the necessary information about which types self could be.  There's a drawback though: The assert statement itself does not do what you think it does: It only checks that self is of either type, not whether it's of both.  Unfortunately, using two assert statements doesn't work, because the second overrides the first one as far as PyCharm's type deduction is concerned.


Answer URL
https://docs.python.org/3/library/abc.html#module-abc
