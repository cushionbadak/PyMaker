Natural Text
I'm trying to reimplement (once more... i know...) a simple network in python made of node classes that reference other node classes (theyr children), and I was wondering what would happen if I create a recursive network (node1 -> node2 -> node3 -> node1) and accidentally lose all references to any of the nodes.Imagine I have the following codeafter the last line of code, all references to node1 and node2 are lost, but the memory originally allocated to the nodes sill contain a reference to themselves.Would node1 and node2 still be destroyed?
Yes, the objects will be garbage collected. The garbage collector will detect the circular reference and break it so that normal reference counting cleanup can take place. See the  module.You would have a problem if your  class implemented a  method and you are using a Python version < 3.4. In 3.4 now can break circular references involving instances with  methods in most cases.From the  documentation:Note:  doesn’t directly call  — the former decrements the reference count for  by one, and the latter is only called when ‘s reference count reaches zero. Some common situations that may prevent the reference count of an object from going to zero include: circular references between objects (e.g., a doubly-linked list or a tree data structure with parent and child pointers); a reference to the object on the stack frame of a function that caught an exception (the traceback stored in  keeps the stack frame alive); or a reference to the object on the stack frame that raised an unhandled exception in interactive mode (the traceback stored in  keeps the stack frame alive). The first situation can only be remedied by explicitly breaking the cycles; the latter two situations can be resolved by storing  in  or . Circular references which are garbage are detected when the option cycle detector is enabled (it’s on by default), but can only be cleaned up if there are no Python-level  methods involved. Refer to the documentation for the  module for more information about how  methods are handled by the cycle detector, particularly the description of the garbage value.


Answer URL
https://docs.python.org/3/whatsnew/3.4.html#pep-442-safe-object-finalization
