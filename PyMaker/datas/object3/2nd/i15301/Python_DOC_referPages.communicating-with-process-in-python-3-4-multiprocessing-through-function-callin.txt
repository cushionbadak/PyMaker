Natural Text
I create a new class that is a subclass of multiprocessing.Process and I would like to invoke methods on this class.  The methods change class members but take no arguments, and I think should work transparently.  For instance, in the MWE below I create a class that inherits from Process and has a stop() function which just sets an instance member flag.  When this flag is set though the run() method doesn't seem to notice a change.  This all seemed to work when I was inheriting from threading.Thread, thoughts?
You have to use something like  for synchronization between processes.Sample code: 
Processes do not share memory space with their parent in the same way threads do. When a process is ed it will get a new copy of the parent's memory so you can't share as easily as with threads (effectively... realistically there is copy-on-write).I recommend that in order to kill workers you use an synchronization primitive like , because usually workers are killed together in response to something that happened.You will end up with something like this (notice, no  method for workers):


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Value
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Event
