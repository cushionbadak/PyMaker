Natural Text
Why in Python 3 would the following codeoutput  instead of just  as it happens with regular text strings? It looks like ultimately explicit, would-be-easy creating a  object from the most related binary string type is so counter-intuitive.
In Python 3,  is not defined, so  is used instead, when you use  on the object. Note that  also calls  on objects passed in, so the call is entirely redundant here.If you are expecting text, decode explicitly instead:The  type can handle  objects explicitly, but only if (again) you provide an explicit codec to decode the bytes with first:The documentation is very explicit about this behaviour:If neither encoding nor errors is given,  returns , which is the “informal” or nicely printable string representation of object. For string objects, this is the string itself. If object does not have a  method, then  falls back to returning .If at least one of encoding or errors is given, object should be a bytes-like object (e.g.  or ). In this case, if object is a  (or ) object, then  is equivalent to .andPassing a  object to  without the encoding or errors arguments falls under the first case of returning the informal string representation.Emphasis mine.
Why do you want this to "work"? A bytes object is a bytes object, and its string representation in Python 3 is on that form. You can convert it's contents to a proper text string (in Python3 - which in Python2 would be "unicode" objects) you have to decode it to text.And for that you need to know the encoding - Try the following instead:Note the assumed "latin-1" text codec which will translate transparently codes not in ASCII range (128-256) to unicode. It is the codec used by default by Windows for western-European languages.  The "utf-8" codec can represent a much larger range  of characters, and is the preferred encoding for international text - but if your byte string is not properly composed of utf-8 characters you might have an UnicodeDecode error on the process. Please read http://www.joelonsoftware.com/articles/Unicode.html to proper undestand what text is about. 
Beforehand, sorry for my English...Hey, I had this problem some weeks ago. It works as the people above said.Here is a tip if the exceptions of the decoding process do not matter. In this case you can use:Ex:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str
