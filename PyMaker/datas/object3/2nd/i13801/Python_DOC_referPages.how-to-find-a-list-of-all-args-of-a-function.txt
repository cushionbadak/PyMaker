Natural Text
How can I find a list of all  of a function?For example, I know that  take , , etc. as arguments, and I would like to see a full list of these possible arguments.However, they're not listed in the Sympy Core doc page.And I've dug through the source code itself, but I can't trace and locate what I'm looking for.
 functionAs other answers have noted - one use of  in the  is to pass in Assumptions about the  being created.  The list of assumptions you can pass is documented under the Assumptions page as supported predicates.However, you should also note that some other special named arguments can be passed in.These are both documented in the section that you link and are:Despite its name, symbols() can create symbol-like objects like instances of Function or Wild classes. To achieve this, set cls keyword argument to the desired type:N.B. If not specified, the default  class is used.The docs say:If an iterable container is needed for a single symbol, set the   argument to  or terminate the symbol name with a commaCode walkYou note that you've looked through the code - so I'll show you where these are implemented in the code.  If you call the  function, it does various checks of its arguments, including -ing  and  arguments from  it then performs more checks etc, before finally calling through to instantiate the  here, here or here.  These call the constructor of  (or its subclass passed in via ) with whatever is left in  which are all interpreted as  in the constructor. - they are  here i.e. non-assumption or non-applicable named arguments are thrown out at this point!This shows that Assumptions +  +  form the set of named arguments that can be passed in  to Other functions (general case)It occurs to me that  may have simply served as a representative example of a more general question.  I hope the above has convinced you that all the values that can be usefully passed into  are documented.  This may give you some confidence that the same is true for other functions within SymPy.However, in the general case, the answer is that it is rather hard to prove to yourself that all the values that can be passed in as keywordarguments are in the documentation of any library or function.  Indeed, sometimes only a subset are documented deliberately as they are the "public API" for the library whereas the actual code may take other arguments, but for some reason the developer doesn't want to expose them to the public - e.g. because their availability may change, or their functionality is untested.If you do pass in invalid arguments, the behaviour of the library you are using may differ.  Some libraries or functions will ignore them, while others will throw errors if you pass in invalid keyword arguments.If you want to find out whether that's the case (and the library is open source, like SymPy), then you can always dive through the code (as I show in the Code Walk above).  If you do that - you need to follow the path of execution, looking for occurences of .  If there are other functions in SymPy that you are concerned about let me know in comments - but hopefully this general method will work for you.I'm assuming in the above that you understand the  and  syntax.  If that's not totally clear for you - this section of the python official tutorial deals with it.
These arguments are named assumptions and can be found in the documentation:Sympy Assumptions
Classification of assumptionsrelated with symbols for simplification, e.g. , .related with algebraic fields/rings, e.g. , .related with some facts, e.g. ., ,  andso on. They are help us to operate with calculation in core.Apparently they are derived from the above other classes ofassumptions (while start-upping of the objects) (in this case e.g.is_zero is means that it is a Zero for the ring). Or they can bederived from expression's analyze: in this case we can create someclass of assumption that are calculated (in this case is_zero can bemeans but it this sort of calculation is a difficult so called "zerotest" problem). In any case we can realize in mind with what we dealexactly (now in the core somewhere we used is_zero in second sense).Assumptions Examples :More References :Wiki Sympi AssumptionsAssuming Setting Assumptions on Variables in Sympy Relative to Other VariablesUsing SymPy's New Assumptions
You can get the argument details from any function using a built-in python library called :It will return an  named tuple with some information such as:To get the argument names you can simply access the  attribute of that returned object.


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#keyword-arguments
