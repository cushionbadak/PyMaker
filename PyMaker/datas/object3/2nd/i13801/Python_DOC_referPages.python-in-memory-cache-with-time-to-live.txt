Natural Text
I have multiple threads running the same process that need to be able to to notify each other that something should not be worked on for the next n seconds its not the end of the world if they do however.My aim is to be able to pass a string and a TTL to the cache and be able to fetch all the strings that are in the cache as a list. The cache can live in memory and the TTL's will be no more than 20 seconds.Does anyone have a any suggestions for how this can be accomplished?
You can use the  module:The core of the library is  class which is an ordered dictionary with auto-expiring values for caching purposes.In the description they do not talk about multithreading, so in order not to mess up, use a .
The OP is using python 2.7 but if you're using python 3,  mentioned in the accepted answer is currently, well, expired. The last commit to the github repo was June 17, 2017 and there is an open issue that it doesn't work with Python 3.5There is a more recently maintained project cachetools (last commit Jun 14, 2018) is the time to live in seconds.
Something like that ?
Regarding an expiring in-memory cache, for general purpose use, a common design pattern to typically do this is not via a dictionary, but via a function or method decorator. A cache dictionary is managed behind the scenes. As such, this answer somewhat complements the answer by User which uses a dictionary rather than a decorator.The  decorator in  works a lot like , but with a time to live.


Answer URL
https://docs.python.org/3/library/functools.html#functools.lru_cache
https://docs.python.org/3/library/threading.html#barrier-objects
