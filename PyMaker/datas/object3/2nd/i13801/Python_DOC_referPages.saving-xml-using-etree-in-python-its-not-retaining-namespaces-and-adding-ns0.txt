Natural Text
I see there are similar questions here, but nothing that has totally helped me. I've also looked at the official documentation on namespaces but can't find anything that is really helping me, perhaps I'm just too new at XML formatting.I understand that perhaps I need to create my own namespace dictionary? Either way, here is my situation:I am getting a result from an API call, it gives me an XML that is stored as a string in my Python application. What I'm trying to accomplish is just grab this XML, swap out a tiny value (The b:string value user ConditionValue/Default but that's irrelevant to this question)and then save it as a string to send later on in a Rest POST call.The source XML looks like this:My job is to swap out one of the values, retaining the entire structure of the source, and use this to submit a POST later on in the application. The problem that I am having is that when it saves to a string or to a file, it totally messes up the namespaces:I've narrowed the code down to the most basic form and I'm still getting the same results so it's not anything to do with how I'm manipulating the file normally:
You need to register the prefix and the namespace before you do  (Reading the xml) to avoid the default namespace prefixes (like  and  , etc.) .You can use the  function for that, Example -You can leave the  empty if you do not want a prefix.Example/Demo -
First off, welcome to the StackOverflow network! Technically @anand-s-kumar is correct. However there was a minor misuse of the  function, and the fact that namespaces might not always be known by the code or the same between tags or XML files. Also, inconsistencies between the  and  libraries and Python 2.x and 3.x make handling this difficult.This function iterates through all of the children elements in the XML tree  that is passed in, and then edits the XML tags to remove the namespaces. Note that by doing this, some data may be lost.I myself just ran into this problem, and hacked together a quick solution. I tested this on about 81,000 XML files (averaging around 150 MB each) that had this problem, and all of them were fixed. Note that this isn't exactly an optimal solution, but it is relatively efficient and worked quite well for me.CREDIT: Idea and code structure originally from Jochen Kupperschmidt.


Answer URL
https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.register_namespace
https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.register_namespace
