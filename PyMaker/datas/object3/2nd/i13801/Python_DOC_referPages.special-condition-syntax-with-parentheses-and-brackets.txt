Natural Text
This question already has an answer here:Python's syntactical sugar gone wrong                    2 answers                Is there any explanation about the following Python condition syntax?It seems to work like an  statement. Why does this work?
In Python,  is a subclass of .In other word,  is equal to 0, and  is equal to 1:So they can be used as a index:The expression  yields  or  based on the value of . So  will yield  or  accordingly.
 is a 2-element tuple. You can access its values using the index accessors  and  like this:Now, in Python, the boolean values  and  are actually instances of  (because  is a subtype of ):The int values of  and  are  and :So you can actually use them two access the elements in your 2-element tuple:And that explains why specifying a condition there—which returns a boolean—will work as well.This is also mentioned in the documentation (emphasis mine):Boolean values are the two constant objects  and . They are used to represent truth values (although other values can also be considered false or true). In numeric contexts (for example when used as the argument to an arithmetic operator), they behave like the integers 0 and 1, respectively.


Answer URL
https://docs.python.org/3/library/stdtypes.html#tuple
https://docs.python.org/3/library/stdtypes.html#common-sequence-operations
https://docs.python.org/3/library/constants.html#True
https://docs.python.org/3/library/constants.html#False
https://docs.python.org/3/library/stdtypes.html#bltin-boolean-values
