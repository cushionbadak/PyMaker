Natural Text
I'm writing script in python, and now I have to create pretty big list exactly containing 248956422 integers. The point is, that some of this "0" in this table will be changed for 1,2 or 3, cause I have 8 lists, 4 with beginning positions of genes, and 4 with endings of them. The point is i have to iterate "anno" several time cause numbers replacing 0 can change with other iteration."Anno" has to be written to the file to create annotation file.Here's my question, how can I divide, or do it on-the-fly , not to get memoryerror including replacing "0" for others, and 1,2,3s for others.Mabye rewriting the file? I'm waitin for your advice, please ask me if it is not so clear what i wrote :P .
You might be better of by determine the value of each element in  on the fly:Then you just iterate using . I got an edit proposal from the OP suggesting one function for each of ,  and so on, something like this:def anno_st():     for idx in xrange(248956422):         elm = "0"That's of course doable, but it will only result in the changes from  applied and one would need to combine them afterwards when writing to file which may be a bit awkward:However if you only want to apply some of the change sets you could write a function that takes them as parameters:And then call by supplying the lists (for example with only the two first changes):
You could use a  object to have a much more compact memory representation than a list of integers:
Instead of creating a list using list comprehension I suggest to create an iterator using a generator-expression which produce the numbers on demand instead of saving all of them in memory.Also you don't need to use the  in your loop since it's just a throw away variable which you don't use it.But note that and iterator is a one shot iterable and you can not use it after iterating over it one time.If you want to use it for multiple times you can create  independent iterators from it using itertools.tee().Also note that you can not change it in-place if you want to change some elements based on a condition you can create a new iterator by iterating over your iterator and applying the condition using a generator expression.For example :


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.tee
