Natural Text
Given 2 large arrays of 3D points (I'll call the first "source", and the second "destination"), I needed a function that would return indices from "destination" which matched elements of "source" as its closest, with this limitation: I can only use numpy... So no scipy, pandas, numexpr, cython...To do this i wrote a function based on the "brute force" answer to this question. I iterate over elements of source, find the closest element from destination and return its index. Due to performance concerns, and again because i can only use numpy, I tried multithreading to speed it up. Here are both threaded and unthreaded functions and how they compare in speed on an 8 core machine.Retults:Multithreading seems beneficial but I was hoping for more than 2X increase given the real life dataset i deal with are much larger.All recommendations to improve performance (within the limitations described above) will be greatly appreciated! 
Ok, I've been reading Maya documentation on python and I came to these conclusions/guesses:They're probably using CPython inside (several references to that documentation and not any other).They're not fond of threads (lots of non-thread safe methods)Since the above, I'd say it's better to avoid threads. Because of the GIL problem, this is a common problem and there are several ways to do the earlier.Try to build a tool C/C++ extension. Once that is done, use threads in C/C++. Personally, I'd only try SIP to work, and then move on.Use . Even if your custom python distribution doesn't include it, you can get to a working version since it's all pure python code.  is not affected by the GIL since it spawns separate processes.The above should've worked out for you. If not, try another parallel tool (after some serious praying).On a side note, if you're using outside modules, be most mindful of trying to match maya's version. This may have been the reason because you couldn't build . Of course,  has a huge codebase and the windows platform is not the most resilient to build stuff.


Answer URL
https://docs.python.org/3/library/multiprocessing.html
