Natural Text
This is the basic tcp server from asyncio tutotial:  Like all (i found) other examples it uses blocking loop.run_forever().How do i start listeting server and do something else in the time?I have tried to outsource starting server in a function and start this function with asyncio.async(), but with no success.What i'm missing here?
You can schedule several concurrent asyncio tasks before calling .When you call  or , nothing is actually executed: a coroutine object is created and wrapped in a task (consider a task to be a shell and the coroutine an instance of the code that will be executed in the task). The tasks are scheduled on the loop when created.The loop will execute  first (as it's scheduled first) until a blocking IO event is pending or the passive socket is ready to listen for incoming connections.You can see asyncio as a non-preemptible scheduler running on one CPU: once the first task interrupts itself or is done, the second task will be executed. Hence, when one task is executed, the other one has to wait until the running task finishes or yields (or "awaits" with Python 3.5). "yielding" () or "awaiting" () means that the task gives back the hand to the loop's scheduler, until  can be executed (data is available on the socket).Once the task gave back the control to the loop, it can schedule the other pending tasks, process incoming events and schedule the tasks which were waiting for those events. Once there is nothing left to do, the loop will perform the only blocking call of the process: sleep until the kernel notifies it that events are ready to be processed.  In this context, you must understand that when using asyncio, everything running in the process must run asynchronously so the loop can do its work. You can not use multiprocessing objects in the loop.Note that  is equivalent to .
Additionally, you can consider running what you want in an executor.For example.An executor will run whatever function you want in an executor, which wont block your server.


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.call_soon
