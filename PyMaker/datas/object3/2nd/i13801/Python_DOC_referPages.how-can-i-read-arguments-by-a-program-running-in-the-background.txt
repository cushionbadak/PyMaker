Natural Text
Example: A simple program that prints the value of a list every 10 seconds         The problem is that the program only reads the arguments passed at the start, I want it to read arguments passed at any time while it is running. I want to run the program in the background like a service, and pass arguments to the program every once in a while.
I understand that what you are asking for looks like a service (or daemon process) able to accept asynchonous commands.External interface:prog foo=> ok repeatedly prints later:prog bar=> second instance exits and first instance repeatedly prints Internal designThat's far from being simple! You need to setup an IPC mechanisme to allow second instance to communicate with first one, with non blocking IO (or multithreading) in first instance. Under Unix, you could use , but is you want a portable solution, your will have to use IP sockets on localhostStructure in high level pseudo codeCaveats on this simple design: there is a race condition is there is already a prog waiting on the socket that exits between the first try to bind and the send. To deal with that, you should use TCP protocol, with a  with timeout on listening socket, and a graceful shutdown to ensure that the message was received on the other side. In case of an error, you iterate (a maximum number of time) because the first server could have exited in the while.Here is an implementation example:
If you are passing more arguments during execution, you must read them from the stdin. Using the select module you can check if there is any new line in stdin and then add them to myList.
Basically what you're asking is how to do Inter-process communication (IPC). Why did I say that? Well, answer yourself: how would you like to pass these arguments to your background service? By hand? I don't think so (because that way you'd have a simple interactive program which should just wait for user input). You probably want some other script/program which sends these arguments via some kind of commands on-demand.Generally there are several several ways to communicate two or more programs, the most popular being:Shared file - you could simply check contents of a file on your disk. Advantage of this solution is that you could probably edit this file with your favourite text editor, without the need of writing a client application.Pipes - one program reads its input which is the other program's output. You should simply read sys.stdin.Sockets - a data stream sent over a network interface (but it can be sent locally on the same machine). Python docs have very nice introduction to sockets programming.Shared memory - your programs read/write the same memory block. In Python you can use mmap module to achieve this.Whichever way to communicate your processes you choose, you should establish some kind of interface between them. It can be very simple text-based interface like this one:So for example if you send a message over a socket (which I recommend), your receiver (server) should read a buffer until a newline character, then check if the first word is "ADD" and then add remaining characters (minus newline) to your list. Of course you should be prepared for some kind of "attacks" - like you should specify that your messages cannot be longer than e.g. 4096 bytes. This way you can discard your current buffer after it reached its limitation, meaning that you won't allocate memory indefinitely while waiting for a newline character. That's one very important rule: don't trust user input.Good luck! :)


Answer URL
https://docs.python.org/3/howto/sockets.html
https://docs.python.org/3/library/mmap.html
