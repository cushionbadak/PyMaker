Natural Text
I have some topic to discuss. I have a fragment of code with 24 s/s.  is my own class that represents functionality similar to . Here is a fragment of code:I have concerns from readability point of view. Is is better to change it into 24 classes and use polymorphism? I am not convinced that it will make my code maintainable... From one hand those s are pretty clear and it shouldn't be hard to follow, on the other hand there are too many s.My question is rather general, however I'm writing code in Python so I cannot use constructions like .What do you think?UPDATE:One important thing is that ,  and  are constructors and I wanted to assign an object to  reference.
You could possibly use a dictionary. Dictionaries store references, which means functions are perfectly viable to use, like so:It's good to have a default operation just in case, so when you run it use a  and handle the exception (ie. the equivalent of your  clause)Alternatively use a dictionary's  method, which allows you to specify a default if the key you provide isn't found.Note that you don't include the parentheses when storing them in the dictionary, you just use them when calling your dictionary. Also this requires that  be hashable, but that should be the case since you described it as a class similar to an ENUM.
Python's equivalent to a switch statement is to use a dictionary. Essentially you can store the keys like you would the cases and the values are what would be called for that particular case. Because functions are objects in Python you can store those as the dictionary values:Which can then be used as follows:Or more concisely:This can potentially scale a lot better than having a mess of if-else statements. Note that if you don't have an else case to deal with you can just use the dictionary directly with .
You could try something like this.For instance:Call it like thisThis method has the benefit of providing a default value (like a final else statement). Of course, if you only need to use this decision logic in one place in your code, you can always use strategy = dictionary.get(op, default) without the function.
You can use some introspection with :Let's say the operation is "STATUS", it will be capitalized as "Status", then prepended to "Object", giving "StatusObject". The  method will then be called on the , failing catastrophically if this attribute doesn't exist, or if it's not callable. :) (I.e. add error handling.)The dictionary solution is probably more flexible though.
If the , etc are hashable, you can use dictionary with keys as the condition and the values as the functions to call, example -And then you can do this dictionary lookup and call the function , Example -
Here is a bastardized switch/case done using dictionaries:For example:Then the equivalent switch block is invoked:


Answer URL
https://docs.python.org/3/library/enum.html
