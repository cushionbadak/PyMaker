Natural Text
According to a number of sources, including this question, passing a runnable as the  parameter in  (with or without  and ) is preferable to extending the  class.If I create a runnable, how can I pass the thread it is running on as  to it without extending the  class? For example, the following would work fine:However, I can't see a good way to get this version to work:This question is a followup to Python - How can I implement a 'stoppable' thread?, which I answered, but possibly incompletely.UpdateI've thought of a hack to do this using :Problem: calling a function to get a parameter that should ideally be passed in.Update #2I have found an even hackier solution that makes  seem much more attractive:Besides being incredibly ugly (e.g. by forcing the user to use keywords only, even if that is the recommended way in the documentation), this completely defeats the purpose of not extending .Update #3Another ridiculous (and unsafe) solution: to pass in a mutable object via  and to update it afterwards:To avoid synchronization issues, you could kick it up a notch and implement another layer of ridiculousness:I am still looking for a legitimate answer.
It seems like your goal is to get access to the thread currently executing a task from within the task itself. You can't add the thread as an argument to the  constructor, because it's not yet constructed. I think there are two real options. If your task runs many times, potentially on many different threads, I think the best option is to use  from within the task. This gives you access directly to the thread object, with which you can do whatever you want. This seems to be exactly the kind of use-case this function was designed for.On the other hand, if your goal is implement a thread with some special characteristics, the natural choice is to subclass , implementing whatever extended behavior you wish. Also, as you noted in your comment,  will return , meaning you can use both options and be assured that your task will have access to whatever extra behavior you've implemented in your subclass.
You can use a mutable object (like a ) as an argument to your thread and populate it after creation, but before running:You get:
The simplest and most readable answer here is: use . You can use various weird ways to pass the thread as a parameter, but there's no good reason for that. Calling  is the standard approach which is shorter than all the alternatives and will not confuse other developers. Don't try to overthink/overengineer this:If you want to hide it a bit and change for aesthetic reasons, you can try:If this is not good enough, you may get better answers by describing why you think the parameter passing is better / more correct for your use case.


Answer URL
https://docs.python.org/3/library/threading.html#threading.Thread
https://docs.python.org/3/library/threading.html#threading.current_thread
https://docs.python.org/3/library/threading.html?highlight=current_thread#threading.current_thread
