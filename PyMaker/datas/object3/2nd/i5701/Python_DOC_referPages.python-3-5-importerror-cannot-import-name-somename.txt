Natural Text
I am trying to implement a small library for Python 3.5 but keep struggling with how to correctly handle the structuring of the packages/modules and how to get the imports to work.I keep running into the problem where python complains of being unable to import some name with an error likeThis seems to happen when "SubClass1" needs to import some other module but that other module also needs to know about SubClass1 (a cyclic import).I need the cyclic import in my library because the base class has a factory method that creates the proper subclass instances (there are also other situations where cyclic imports are needed, e.g. checking the type of a function argument needs the import of where that type is defined, but that module may itself need the class where that check is done: another cyclic dependency!)Here is example code:Root directory contains the subdirectory dir1. The directory dir1 contains and empty file init.py, a file baseclass.py and a file subclass1.py.The file ./dir1/subclass1.py contains:The file ./dir1/baseclass.py contains:The file ./test1.py  contains:This results in the following error:What is the standard/best way to solve this problem, ideally in a way that is backwards compatible to python 2.x and python 3 up to version 3.2? I have read elsewhere that importing the module instead of something from a module may help here but I do not know how to just import the module (e.g. subclass1) in a relative way because "import . subclass1" or similar does not work.
Your issue is caused by a circular import. The  module is trying to import  from the  module, but  is trying to import  right back. You get  because the classes haven't been defined yet when the  statements are running.There are a few ways to solve the issue.One option would be to change your style of import. Instead of importing the classes by name, just import the modules and look up the names as attributes later on.And:Because  needs to be able to use  immediately at definition time, this code may still fail if the  module is imported before . So it's not idealAnother option would be to change  to do its import below the definition of . This way the  module will be able to import the name when it needs to:This is not ideal because the normal place to put imports is at the top of the file. Putting them elsewhere makes the code more confusing. You may want to put a comment up at the top of the file explaining why you're delaying the import if you go this route.Another option may be to combine your two modules into a single file. Python doesn't require each class to have its own module like some other languages do. When you have tightly coupled classes (like the ones in your example), it makes a lot of sense to put them all in one place. This lets you avoid the whole issue, since you don't need any imports at all.Finally, there are some more complicated solutions, like dependency injection. Rather than the base class needing to know about the subclasses, each subclass could register itself by calling some function and passing a reference to itself. For example:And in This style of programming is a bit more complicated, but it can be nice since it's easier to extend than a version where  needs to know about all of the subclasses up front. There are a variety of ways you can implement this style of code, using a  function is just one of them. One nice thing about it is that it doesn't strictly require inheritance (so you could register a class that doesn't actually inherit from  if you wanted to). If you are only dealing with actual inheriting subclasses, you might want to consider using a metaclass that does all the registration of subclasses for you automatically.


Answer URL
https://docs.python.org/3/faq/programming.html#how-can-i-have-modules-that-mutually-import-each-other
