Natural Text
I am developing an assignment server, where students can upload their program solutions. It should work wither several programming languages. For testing the programs I am executing a shell script and passing the test-cases and file as arguments like that:Its working, that's not the problem. For the output I am getting something like that:running python script with shell script:This format makes evaluation quite difficult and also maybe confuse students, because they don't see the inputs (when you run the python script from shell, the output looks like in the example below). For the evaluation the difficulty is, the students must not name their inputs like in this solution, it would be also okay if they just ask  instead of  .running python script directly from shell:Is there a way to combine the inputs in the output? Or maybe other ideas how I can solve this problems?Thanks a lot!
Handling user prompts automatically is harder than it seems, and  is unfortunately not good enough to simulate it completely. If you do not want to touch the python code itself, you'll probably have to use , which is a scripting language written to handle interactive programs.If it isn't on your system (which is likely), install it with  or . This crude thing here that I have mushed together should be able to handle your requirements:expect_script.expAnd then call it like this:If you have questions regarding syntax or semantics, feel free to ask. But don't expect much (ha ha), I am not very good at weird Unix tools.edit with variable amount of parameters:expect_script.expCall order has changed because we need to call our python script before sending the parameters its way:Alternatively, change the python script to accept command line parameters. If you plan to do task automation, or reuse code, or just in general - command line parameters are almost always a better idea than user prompts. The native python  module is very good, and even if you don't want to rewrite your current code, it might still be worth it to look into it and try to apply it in the future.
It is possible to make all your streams "demand driven", but it is not a trivial task, especially from scripting. By this I mean that each input string is only passed into the pipe when the pipe says it needs more input. Similarly, you have to collect output as soon as it is made ready. By doing this you can combine the input and output streams as they are consumed in order to make a sensible report. Note that you will probably need to inject a few newlines to make it truly readable.
Perhaps a different approach is to tell the users they must ask specific questions.Have your harness read the output character by character (I know), and as soon as it EXACTLY matches a particular expected question, then it injects the matching answer as input, but only one time per match. Of course, once all questions have been satisfied, you can switch to a faster batched read.You can then stream the byte-by-byte output, and the injected responses to the log file in a natural order which matches what your harness is doing. It may be good for the harness to have a time-out and print the un-consumed questions as a diagnostic aid.This allows for question ordering, optional questions, etc that have been mentioned, but hard-wires a part of the design spec to customer requirements. Make it clear to the students that they will lose marks for not matching the prompts well enough for the automated processor, or say, for a client who provides a local language translation.


Answer URL
https://docs.python.org/3/library/argparse.html
