Natural Text
This question already has an answer here:Python - Create a list with initial capacity                    9 answers                Short version of my question: Why is it common practice in Python to initialize an empty list even when the size of the list might change many times such as the following:Isn't it computationally expensive to change the size of an array iteratively?Long version of my question: I'm used to using MATLAB and am relatively new to Python. When I want to create an array, it is common practice in MATLAB to initialize an array of zeros of appropriate size, and then replace the elements of the array with the elements you want to end up with. This is because changing the size of an array iteratively in MATLAB is computationally expensive. Is there something about Python that avoids this expense? When I see people answer Python questions on this website that involve preinitializing a list to be added to, they always create an empty list and subsequently change the size, something I have always regarded as inefficient.
Python does not grow the list one by one.  It always allocates large chunks. The chunk size is dependent on the size of the list. So the pre-allocated space gets bigger when the list get bigger.For example, if you do 10 million appends, it does about 100 allocation, i.e. steps growing the list.If you start with an empty list and grow it by appending one element at a time you get this steps the actually allocate new memory:MATLAB array are more comparable to NumPy arrays. These array are fixed in size an growing them step-by-step is very expensive.
The main point of creating a list and populating it later would be because you don't know how many elements are going to make their way into it.  Since lists dynamically resize themselves, and arrays inherently do not, as they are typically reserved in contiguous blocks of memory and lists don't have to be, it's convenient to author your code in such a way that takes advantage of this fact.However, the above isn't a good use of creating a list.  You would want to use a list comprehension instead to generate this:You would want to fill the list if you know how many elements you have in it.  You can't fill the list if you don't know.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
