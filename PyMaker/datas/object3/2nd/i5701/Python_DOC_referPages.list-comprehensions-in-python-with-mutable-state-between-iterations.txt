Natural Text
I have something which is an awful lot like a list comprehension in Python, except that it shares mutable state between iterations. Is there any way to do it with a list comprehension?which returns . Here the important thing is the  function, not  which is here just a simple example to illustrate the issue.Alternatively I could implement using a generator:But it smells a little awkward. What I'm looking for is something like this...
No. Deliberately no. Eventually they put in , which is the closest thing to an Officially Recommended way to implement recurrence relations in a functional manner, but it doesn't exist on 2.7. You could copy the "roughly equivalent to" Python implementation from the docs if you want.
Is there any way to do it with a list comprehension?What I'm looking for is something like this...Sure, no problem:Note: This is a bad idea. (I pretty much only did this because user2357112 said there is no way)
You could do this in a single line, using e.g.  (or  in Python 3):But this is not only ugly, but also inefficient, as it will create a new list in each iteration. Or in a similar fashion to Stefan's approach, without creating intermediate lists:Or, as already hinted in the other answer, you could use , which is a lot better, but still a bit of a mis-use, as it actually expects a binary function, whereas here we use neither the second parameter, nor the actual iterable passed into the function, except for the very first value.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.accumulate
https://docs.python.org/3/library/itertools.html#itertools.accumulate
