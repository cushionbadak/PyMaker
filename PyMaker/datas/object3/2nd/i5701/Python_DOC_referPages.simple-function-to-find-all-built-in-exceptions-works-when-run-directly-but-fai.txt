Natural Text
I have a function that is supposed to generate a tuple of all built-in exceptions, (for use in the  form) and when I run it normally, it works just fine.and when run:which is just as I wanted.however, at the following, through the shell,nothing happens. even in a file:i get:this seems very strange. any help would be great!by the way, I looked at these, they weren't really related to what I had in mind.import fails when running python as script, but not in iPython?http://python-notes.curiousefficiency.org/en/latest/python_concepts/import_traps.htmlif you have any questions, just ask :)
The fundamental problem with your approach is that you are relying on two things you shouldn't rely on. The first is , the behavior of which should not be relied on because it exists mostly to aid debugging in the interactive shell. From the docs:If the object does not provide , the function tries its  best to gather information from the object’s  attribute, if  defined, and from its type object. The resulting list is not  necessarily complete, and may be inaccurate when the object has a  custom ....Note Because  is supplied primarily as a convenience for use at an interactive prompt, it tries to supply an interesting set of  names more than it tries to supply a rigorously or consistently  defined set of names, and its detailed behavior may change across  releases. For example, metaclass attributes are not in the result list  when the argument is a class.Furthermore, you use the  variable, which is an implementation detail Again, from the docs:As an implementation detail, most modules have the name   made available as part of their globals. The value of  is  normally either this module or the value of this module’s   attribute. Since this is an implementation detail, it may not be used  by alternate implementations of Python.Essentially, you are relying on two unreliable things. Note, what is actually happening in your case is that when you run the module directly, it returns the actual  module, however, when the module is imported,  contains the "value of this module's ". A few debugging prints could have illuminated this:And from the interactive interpreter:So when you call  on a  object, it simply returns the attributes introspectable from the dict-object, e.g. , , ,  and all the other  methods. The solution is to use the  module and don't use , use  (which just returns the  attribute), since you want the attributes of the module object.Finally, your approach with  is not good. If you want to do this sanely, check if it is a subclass of , which is the parent class of all built-in exceptions, so from the docs:exception The base class for all built-in exceptions. It is not meant to be      directly inherited by user-defined classes (for that, use ).So something like:Does what you are trying to accomplish. Note, this iterates over the values directly, so you don't end up using something like  or , which is an abuse in this case. Note, this catches every built-in exception, things like warnings, (e.g. ) and more esoteric things like .  FinallyJust because you can do this, doesn't mean you should. Your stated purpose is:I have a function that is supposed to generate a tuple of all built-in  exceptions, (for use in the  form)Well, you could just use  instead of going through the rigamarole of finding those exceptions in the first place (indeed,  essentially checks if   of whatever error is being raised. And fundamentally, there is rarely ever any good reason to have such a broad  clause. You should always try to catch as narrow an exception as possible.
This works, and seems to be the common technique for getting at the builtins module.


Answer URL
https://docs.python.org/3/library/functions.html#dir
https://docs.python.org/3/library/exceptions.html#BaseException
