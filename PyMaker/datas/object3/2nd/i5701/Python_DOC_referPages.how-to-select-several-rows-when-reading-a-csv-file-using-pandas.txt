Natural Text
I have a very large csv file with  and a list of the row numbers that I need.likeI know there is something called  that helps to skip several rows when  like thatHowever, since the csv file is very large, directly selecting the rows that I need could be more efficient. So I was wondering are there any methods to  when using ? Not try to select rows using  afterwards, since I try to minimize the time of reading file.Thanks.
I am not sure about  from Pandas (there is though a way to use an  for reading a large file in chunks), but you can read the file line by line (lazy-loading, not reading the whole file in memory) with  (or ), leaving only the desired rows with the help of :(assuming you would like to pick random/discontinuous rows and not a "continuous chunk" from somewhere in the middle - in that case @James's idea to have "start and "stop" would work generally better).
There is a parameter called  Number of rows of file to read. Useful for reading pieces of large files (Docs)In case you need some part in the middle. Use both  as well as  in .if skiprows indicate the beginning rows and  will indicate the next number of rows after skipping eg. Example: This will select data from the 6th row to 16 rowEdit based on comment:Since there is a list this one might help i.e 
From de documentation you can see that  can take an integer or a list as values to remove some lines.So basicaly you can tell it to remove all but those you want. For this you first need to know the number in lines in the file (best if you know beforehand) by open it and counting as following:Now you need to create the complementary list (here are sets but also works, don't know why). First you create the one from 1 to the number of rows and then substract the numbers of the rows you want to read.Finally you can read the csv as normal. here is the full code:
You will not be able to circumvent the read time when accessing a large file.  If you have a very large CSV file, any program will need to read through it at least up to the point where you want to begin extracting rows.  Really, that is what databases are designed for.However, if you want to extract rows 300,000 to 300,123 from a 10,000,000 row CSV file, you are better off reading just the data you need into Python before converting it to a data frame in Pandas.  For this you can use the  module.
Returns rows 3 through 5 and all columns.https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.iloc.html


Answer URL
https://docs.python.org/3/library/csv.html#csv.reader
https://docs.python.org/3/library/csv.html#csv.DictReader
https://docs.python.org/3/library/functions.html#enumerate
