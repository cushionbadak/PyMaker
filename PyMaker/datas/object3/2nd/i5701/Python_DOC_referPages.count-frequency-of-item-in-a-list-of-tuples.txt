Natural Text
I have a list of tuples as shown below. I have to count how many items have a number greater than 1. The code that I have written so far is very slow. Even if there are around 10K tuples, if you see below example string appears two times, so i have to get such kind of strings. My question is what is the best way to achieve the count of strings here by iterating over the generatorList:My code so far:
You've got the right idea extracting the first item from each tuple. You can make your code more concise using a list/generator comprehension, as I show you below.From that point on, the most idiomatic manner to find frequency counts of elements is using a  object.Extract the first elements from your list of tuples (using a comprehension)Pass this to Query count of Sure, you can use  if it’s only one item you want to find frequency counts for, but in the general case, a  is the way to go.The advantage of a  is it performs frequency counts of all elements (not just ) in linear () time. Say you also wanted to query the count of another element, say . That would be done with -If  doesn’t exist in the list,  is returned.If you want to find the most common elements, call  - Where  is the number of elements you want to display. If you want to see everything, don't pass .To retrieve counts of most common elements, one efficient way to do this is to query  and then extract all elements with counts over 1, efficiently with .(OP edit) Alternatively, use a list comprehension to get a list of items having count > 1 - Keep in mind that this isn’t as efficient as the  solution. For example, if you have one item with count > 1, and a million items with count equal to 1, you’d end up iterating over the list a million and one times, when you don’t have to (because  returns frequency counts in descending order). With  that isn’t the case, because you stop iterating as soon as the condition of count > 1 becomes false.
First method :What about without loop ?output:Second method :You can calculate using simple dict , without importing any external module or without making it so complex:output:Test_case :output:
Time it took me to do this  ayodhyankit-paul  posted the same - leaving it in non the less for the generator code  for testcases and timing:Creating 100001 items took roughly 5 seconds, counting took about 0.3s,filtering on counts was too fast to measure (with datetime.now() - did not bother with perf_counter) - all in all it took less then 5.1s from start to finish for about 10 times the data you operate on.I think this similar to what  in COLDSPEEDs answer does: foreach  in :if  not in list, put into  with else  in dict Code:Output:
Let me give you an example to make you understand.Although this example is very much different than your example, I found it very helpful while solving these type of questions.Now this is your example solved in the above manner


Answer URL
https://docs.python.org/3/library/time.html#time.perf_counter
