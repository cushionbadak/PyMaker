Natural Text
Let's assume I'm new to asyncio. I'm using async/await to parallelize my current project, and I've found myself passing all of my coroutines to . Lots of stuff like this:What I'd really like is for a call to an async function to return an executing task instead of an idle coroutine.  I created a decorator to accomplish what I'm trying to do.Does asyncio have a built-in way of doing this I haven't been able to find? Am I using asyncio wrong if I'm lead to this problem to begin with?
Does asyncio have a built-in way of doing this I haven't been able to  find?No, asyncio doesn't have decorator to cast coroutine-functions into tasks.Am I using asyncio wrong if I'm lead to this problem to begin with?It's hard to say without seeing what you're doing, but I think it may happen to be true. While creating tasks is usual operation in asyncio programs I doubt you created this much coroutines that should be tasks always.Awaiting for coroutine - is a way to "call some function asynchronously", but blocking current execution flow until it finished:Task on the other hand - is a way to "run function in background", it won't block current execution flow:When we write  programs we usually need first way since we usually need result of some operation before starting next one:Creating task on the other hand usually means that following further code doesn't depend of task's result. But again it doesn't happening always.Since  returns immediately some people try to use it as a way to run some coroutines concurently:Correct way to achieve this is to use asyncio.gather:May be this is what you want?Upd:I think using tasks in your case is a good idea. But I don't think you should use decorator: coroutine functionality (to make request) still is a separate part from it's concrete usage detail (it will be used as task). If requests synchronization controlling is separate from their's main functionalities it's also make sense to move synchronization into separate function. I would do something like this:
asyncio had  decorator in very early pre-released versions but we removed it. The reason is that decorator has no knowledge what loop to use. asyncio don't instantiate a loop on import, moreover test suite usually creates a new loop per test for sake of test isolation.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.gather
