Natural Text
I am trying to write a decorator function which converts a pure recursive function with two arguments that uses a "divide and conquer" strategy to an equivalent but more efficient one using dynamic programming.Note: it is designated to decorate two input functions.So I am trying to memoize the values but I am not sure how to correctly implement it in the form of a decorator? Also how can it decorate two input functions?EDIT:This is what I have managed to do:This is what it prints out when I test it:Output: The first output is correct but I am trying to profile it to see if the dynamic programming one is actually faster. However, it is showing the times as 0. Would I need to add a time.sleep() somewhere and where would I add it to correctly output the time (given that they are recursive functions)?I am wondering if I am decorating it properly. I am trying to decorate the dynamic function which is a decorator as well. And I am trying to decorate the factorial function with both the dynamic and profile function.Any help would be appreciated!
There's already a memoize / cache decorator in the standard library : https://docs.python.org/3/library/functools.html#functools.lru_cacheDon't re-invent the wheel, but perhaps it is not suited to what you need.


Answer URL
https://docs.python.org/3/library/functools.html#functools.lru_cache
