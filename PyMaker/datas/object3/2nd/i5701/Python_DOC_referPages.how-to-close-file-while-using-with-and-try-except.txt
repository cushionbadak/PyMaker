Natural Text
This question already has an answer here:Implementing use of 'with object() as f' in custom class in python                    3 answers                I wrote this example to show myself that  is not being run when an exception occurs:Output:That said, what is the correct way to use a  statement and catch exceptions, while making sure  is being run in the end?Thanks!
The  function is called, regardless whether the  body raises errors or not. Your function needs to have additional parameters  (the type of the exception),  (the exception object), and  (the traceback that is generated).In case the  body did not raise an , the three parameters are . In case there is an error, they take the values described above.But you can for instance close a file, regardless whether there is an error and then later handle the error.So we can here implement it for instance as:If we now write something like:We will obtain the exception, the  function will print:We can inspect the exception class, exception value and traceback, and handle accordingly. For instance based on the exception, we might decide to close a file, send a bug report, abort the SQL transaction or not.The  function also has a return value (if not specified, a Python function returns ). In case the  function returns an object with truthiness , it will surpress the exception: the exception will not raise out of the  block. Otherwise it will be raised out of the  block. For instance in our example, we still receive the exception.If we now call:we will not see the exception, since it is "catched" in the  function.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__exit__
