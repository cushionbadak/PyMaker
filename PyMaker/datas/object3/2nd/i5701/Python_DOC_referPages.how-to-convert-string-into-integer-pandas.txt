Natural Text
I have dataset with many columns.I want to take average of each column by grouping them with 'Club'My data is in the form of string and  some of the data is in the form'60+2' or '58-1'I want to convert this string datatype into integer so that i can use them for calculating mean.As i have searched and need re to skip '+ & -'..str.split is used to split the string. In my case pd.to_numeric wil not work as I want to edit bulk column at onceThis is giving output asAlso I want to use this data for further calculationsThank you
I want to remove symbols and add or subtract the numbers as per symbol  and convert the string into integer.Alright, one good way of doing this is using python's safe eval - . evaluates only certain string expressions. Assuming you have a column of strings with expressions that can be evaluated, this will evaluate them and return numeric results.Note that if you have a column of mixed integers and strings, the simplest thing to do would be to convert the entire column to string and apply ./Another good way of doing this is using ' safe eval - , as mentioned by this answer. Handling Malformed DataOn the off chance that your data contains invalid strings, a slightly different solution is needed, because everything mentioned above is going to fail. We'll need to define a function that handles these errors accordingly.
Since your'e using Pandas, I would recommend using  instead of Python's  method as correctly pointed out by Coldspeed (Thanks!). The advantage of using  is that it only evaluates Python expressions and not Python statements, therefore is much safer and compared to the  method (link to the documentation) should also run a little bit faster . Concretely, you can amend your code to do the following:This evaluates all expressions that are stored in the column called Acceleration in . The method should perform much faster and the output will the an integer or float depending on the expressions stored in the column. For more details, please take a look at the Pandas documentation. 


Answer URL
https://docs.python.org/3/library/ast.html#ast.literal_eval
