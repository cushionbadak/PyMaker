Natural Text
I want to use  in combination with a  GUI.I am new to  and my understanding of it is not very detailed.The example here starts 10 task when clicking on the first button. The task are just simulating work with a  for some seconds.The example code is running fine with Python . Butthe problem is that the GUI is freezed. When I press the first button and start the 10 asyncio-tasks I am not able to press the second button in the GUI until all tasks are done. The GUI should never freeze - that is my goal.A _side problem...is that I am not able to run the task a second time because of this error.MultithreadingWhould multithreading be a possible solution? Only two threads - each loop has it's own thread?
In a slight modification to your code, I created the asyncio  in the main thread and passed it as an argument to the asyncio thread. Now Tkinter won't freeze while the urls are fetched.
Trying to run both event loops at the same time is a dubious proposition.  However, since root.mainloop simply calls root.update repeatedly, one can simulate mainloop by calling update repeatedly as an asyncio task.  Here is a test program that does so.  I presume adding asyncio tasks to the tkinter tasks would work.  I checked that it still runs with 3.7.0a2.Both the tk update overhead and time resolution increase as the interval is decreased.  For gui updates, as opposed to animations, 20 per second may be enough.I recently succeeded in running async def coroutines containing tkinter calls and awaits with mainloop.  The prototype uses asyncio Tasks and Futures, but I don't know if adding normal asyncio tasks would work.  If one wants to run asyncio and tkinter tasks together, I think running tk update with an asyncio loop is a better idea.EDIT: A least as used above, exception without async def coroutines kill the coroutine but are somewhere caught and discarded.  Silent error are pretty obnoxious.
You can keep the GUI alive after pressing the  by adding a call to  in the right spot:
I've had great luck running an I/O loop on another thread, started at the beginning of the app creation, and tossing tasks onto it using .  I'm kind of surprised that I can make changes to the tkinter widgets on the other asyncio loop/thread, and maybe it's a fluke that it works for me -- but it does work.Notice that while the asyncio tasks are happening, the other button is still alive and responding.  I always like to  the disable/enable thing on the other button so you don't fire off multiple tasks accidentally, but that's just a UI thing.


Answer URL
https://docs.python.org/3/library/asyncio.html
https://docs.python.org/3/library/tkinter.html
