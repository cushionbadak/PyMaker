Natural Text
My aim is to discover a piece of text hidden through AscII 8bits in a very long (>115,000) sequence of DNA.I've written code to open the file with the DNA in, convert all C's and A's to 0 and all T's and G's to 1. I've then converted this string into AscII characters. Below is my code.However I am getting an error;And I have no clue what this could be. My DNA sequence apparently has a mix of random characters within but a snippet of a play/poem.I've tested my code with testDNA.txt containing the following;This returns (as expected);Can anyone shed any light why I'm getting this error with my DNA sequence?
As I mentioned in the comments,  contains numbers outside the valid ASCII range. But you already filtered out those when you created , so you should be looping over  to build .However, in Python 3 there's no need to call the  function on each ASCII code number. You can simply pass a list (or any other iterable) to the  constructor and it will build a  string, which you can then decode to Unicode text. Also, rather than using the  method to convert the DNA letters to '0' and '1' chars we can use , which is more efficient when you need to map single chars to other single chars;  can also delete unwanted characters. In the code below I use it to delete spaces and newlines. I also delete the Unicode Byte Order Mark, which your 'DNAseq.txt' file starts with. Firstly, here's a demo using the short DNA sequence given in the question.outputTo find the message hidden in your DNAseq.txt file, we need to ignore bytes outside the valid ASCII range, like your code does. However, we also need to skip a couple of bits before we start converting blocks of 8 bits to bytes. There are only 8 possible offsets, and since the amount of data isn't huge it was easy enough to discover the correct offset of 2 by trial and error. OTOH, it did take me a little while to think of trying an offset. ;) If we were working with many millions of bytes then we'd probably need to resort to doing statistical analysis to find blocks of bytes that could be valid English.The following program doesn't bother trying to isolate the hidden message, it's easy enough to spot in the middle of the garbage text. Note that the 1st line of the message is hidden at the end of the previous long line of garbage.outputFWIW, the secret message is a passage from Shakespeare's As You Like It, Act 5, Scene 4. 
I think you want to be using the builtin chr() function.Here's a brief example using str.translate to convert the characters to their numeric characters. Then converting the substrings into their ascii equivalents.


Answer URL
https://docs.python.org/3/library/functions.html?highlight=chr%20builtin#chr
https://docs.python.org/3/library/stdtypes.html?highlight=translate#str.translate
