Natural Text
This question already has an answer here:Why doesn't Python optimize away temporary variables?                    2 answers                Unlike many cases of c++, Python apparently is not as smart to optimize redundant operations, even between constants.I did a simple benchmark to test math.cos in and out of a loop.In this first case, I do Python calculate cos (3) 10 million times:The result is about .Now, just replacing  by  (or just putting  in a variable outside the loop), the time about 3 times faster: Now, if the  operation always generates a constant (1), why does Python not optimize execution with a cache, thus avoiding repeating the same  operation constantly?One of Python's philosophies is to make easier the programmer's life. But in this case what is happening is just the opposite.
Because you have to program that yourself. This is what the creator of C++ meant when he said : "Higher level language." in quite literally ALL of his books. (No seriously, it's always there in the beginning.)  I don't think Python is meant to make the programmers life easier per say, but be less "expensive" than higher level languages. 


Answer URL
https://docs.python.org/3/library/functools.html#functools.lru_cache
