Natural Text
I have an algorithm in which I need to work out the signed angle (-180 to 180) between edges in a graph. I've done some research and found plenty of specific answers but can't figure out how to relate them to my situation (e.g. this  question which uses , however the OP wanted only positive angles)I've tried implementing a few different ways (using atan2 or arccos) but I'm struggling to relate the examples to my specific problem. I've tried treating the edges as vectors but got strange results.Given a graph with points (A, B, C, D, E), and the average of those points (avg)... how do I find the signed angle between one of those points (e.g. A) and the other points (e.g. B, C, D, E), taking the angle from the current origin (A) to the 'avg' point as equal to 0 degrees. Example below......in this example, the anti-clockwise angle from (A, avg) to (A, B) would be positive something (between 0 and 180), and the angle from (A, avg) to (A, E) would be negative something (between 0 and -180).Ideally I want a formula which I could also apply to defining any of the points as the origin, for example taking point C as the origin.. the 'zero angle' would be (C, avg) and the angle between (C, avg) and (C, A) would be negative (0 to -180) and the angle between (C, avg) and (C, E) would be positive (0 to 180).I haven't studied math beyond high-school so I find it hard to decipher equations with symbols I don't understand.UPDATE: Thought I'd clean this up to make it more obvious what the conclusion was.I made two small changes to the accepted answer, resulting in the below snippet:...the final one-liner may be a bit much to grok after a few months of not working on this, so I turned it into it's own function, taking the result of  as it's argument...I thought this was a little clearer to read, though more lines.The final function in full:Note: The function assumes the three arguments will all be instances of a typical  class with  and  attributes.Also, the example graph above has only positive values, but I am fairly sure that this works with graphs that involve negative values too.
I read your problem statement as follows: given 2 points A and B, and a center O, find the angle A to B as the angle, positive if anticlockwise, between the vectors A→O and A→B.If my premises are correct, then you canfind the angle between A→B and a horizontal, rightward line passing in A,find the angle between A→O and a horizontal, rightward line passing in A,find the angle A to B as the difference of said angles,normalize the result range so that it's between -π and +π.What I've said can be visualized as followsor in code (assuming a  class with attributes  and )AddendumHere it is a small code example, the position of the points is just similar to what you can see in the pictureThe last line normalize your result  to be in the correct range , adding or subtracting  that doesn't change the meaning of the measured angle.
The definition of positive and negative angles is heavily depending on the reference system or reference point. Despite of its 'correct' definition, the basic calculation can be pretty much done based on the slope between two points and the resulting angle of incline which can be calculated by applying the inverse tan to the slope.Applying the inverse tan in programming can be a bit annoying since many programming languages provide two different functions for this: or  which is implemented in Python's  or  or  which is delivered by  or Both of these functions, regardless of the implementation in the  module or  package, return the calculated angle in radians which is basically based on the number Pi instead of degrees which makes some further conversion necessary. This can either be done manually or by applying a function like . To get a basic idea of the data points and to get some eye-balled estimation for the calculated results, I suggest plotting the data point by using .Glueing all the before-mentioned considerations into code can look like this:
If you consider the coordinates ,  and , the formula  gives the signed angle that is positive as counter clockwise.


Answer URL
https://docs.python.org/3/library/math.html#math.atan
https://docs.python.org/3/library/math.html#math.atan2
