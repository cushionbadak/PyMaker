Natural Text
I'm running into a problem with using DateTime as a dict key.  My goal is to bring in information from one data source that includes Datetime, and then look up in a dictionary and return all values for keys that are within 2 days +- of the input DateTime.For example, my input would be:My dictionary to reference would be:In that case, I would return: I have considered sorting the dictionary and then creating a dictionary of indexes maybe for odd-numbered dates, then taking in my input date, figuring the base date +- 2 of the input date, referencing the index dict, and then using those indexes to loop through the reference dict only between the indexes and return all values that are there.My main issue is that I can't predict what the dict datetimes will be or the input datetimes so I'm just not certain if I can return values for a range of keys in a dict other than by looping through the index of the keys in a sorted order.  Doing a for loop for all keys is not efficient here because of the number of keys to look through -- I am already reducing this list by deduplicating down as much as possible and only bringing in the minimum amount of reference data.  One other item is that my inputs will be 100,000s of datetimes to look up, many of which will be minutes, seconds, or hours off from each other, so reducing the number of lookups and for looping will be essential to keep the runtime down.I apologize if this isn't quite a proper question with full code to look at but I basically am not sure where to start on this issue, so I didn't think it would help anyone to put anything else in except for example input and dictionary with output goal.
First, sort the dictionary dates and transform a dictionary into list of sorted tuples : Then use bisect to find the position of your date inside that list : Look from this position to the left and break as soon as an element do not verify the condition, then do the same starting from the position to the right. (You can use your own conditions as I found that was quite unclear in you example - +-2days should not select 'B' IMO but that's not the point)EDITOne example of bisct_left implementation : I strongly advice you to use bisect as it will be quicker and more reliable.


Answer URL
https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp
