Natural Text
I am discovering Django () and want to set up a signin page in which I have 2 emails fields, if the 2 fields are identical, I call .The project tree : Internationalization config in  :With a basic django signin view it works well:  :I have a nice French translated HTML form (except for the ) :Let's add an  field in the form,  is a built-in user fields (as  & ) so I just add a new class  inheriting from  :  :I update  :It works : a nice French translated field is added but it do not have a  attribute :Now I'm stuck…If I want to set the attribute  to the  field (it is required and I want to show a translated ). The only way I found is overriding the built-in email field, but I loose translation and it do not shows the  :If I add a second  field, I was hoping copy the original  with something like , but it looks like this is not the good place were email is stored. I can use  as above, but I'd really like to take benefit of the built-in translation.Then here is my questions :How to use an  field with build in attributes (name, required, help_text, …) and get translations ? (When I have an answer I assume that I will found the way to do the same with the ,  & ) Can I duplicate the email field with this constraint? (I do not want to store this second field, just checking before calling )_
There are a few things at play here.The  is a , which derives its field from a model. In this case, the model is your current AUTH_USER_MODEL setting. When the  form field is created, it inspects the corresponding  field from the model, where it will find the  which is wrapped in a  (or ) call to allow for i18n to work, as well as any other attribute.If I understand your question correctly, you want to duplicate the  form field to override some (if any) attributes and to allow you to validate it against the original one. While Django makes it a little harder than what you tried because it is using metaclasses to generate the form class, there has been a public API for doing just that since version 1.8: get_field Here is an example of what you can do:A few of remarks:Using  instead of just  will save you from changing the reference to  in your entire codebase should you switch to a custom user model. also has a plural form (see docs) to retrieve multiple fields at the same time. In general, any runtime modifications of forms (overriding field attributes, etc.) happens in the  method, since it's where you first get the 'real' form after Django does its black magic with metaclasses, see the  attribute override.If you want to override a translatable text, you will have to go through  and learn about this mechanism if you want to do it properly. You could of course just hardcode it in French. ;)Edit: Form validation happens in the  and  form methods, triggered by . You don't have to have this logic inside the view.I hope that helps.


Answer URL
https://docs.python.org/3/reference/datamodel.html#metaclasses
