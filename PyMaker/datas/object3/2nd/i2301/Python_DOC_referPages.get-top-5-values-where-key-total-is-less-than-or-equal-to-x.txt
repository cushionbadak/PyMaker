Natural Text
Currently I have a list of items someone can buy as follows:Each item is set up like this: I have the list pulling the items with the top 5 .I am trying to retrieve a result where I get the top 5 total  where the top 5 total  is equal or less than 6.Any suggestions?
You can filter first, and use all following  on your filtered list.But for data manipulation like this,  can be very useful. Take, for exampleIf you want, you can first get the  of the  and just then get the 
Not sure if this is what you asking, I would first create all possible combinations of 5 elements from my_listThen i would find all possible combinations in result where total item cost would be less than or equal to 6.Now, I would find that element where total itemValue is the greatestThe index of element with maximum itemValue isNow, you can find that element in f.The answer i got is 
First you want to filter the list by the :Which can be done by: Or in a more python-like way And to keep it a generator to save memory just use parentheses instead of the square brackets.Then you want to get the n largest items:You can use heapq.nlargest: or implement similar function yourself. can be the list or one of the generators.
Answer to modified list ( to show extra feature)Answer to your original list
Not totally sure of what you are trying to do, but...If you are trying to retrieve the top x (5 or 6) based on  sorted by lowest cost, you can try this.
Max can receive a function to specify max criteria.The total_cost function, has a int(sum(c for _, c, _ in item) <= 6) portion that is 1 if total cost of the combination is less or equal then 6, and its 0 otherwise.We then multiply this portion with the total sum of values.combinations(my_list, 5) retrieves all possible combinations of my_list items having 5 items.Printing chosen elements you have:
Filter the list first:You can do it with sorted too:The above filters out items with ItemCost greater than 6, sorts your list descending based on ItemCost, and then returns the first 5 element
First using  we can get all possible combinations of 5 from . From here we can use  and only return combinations whose total  is less than or equal to .  Finally we sort by the which group has the highest total  and we take the greatest one being  we could use  and then it would be from itertools import combinations   
output:


Answer URL
https://docs.python.org/3/library/heapq.html#heapq.nlargest
