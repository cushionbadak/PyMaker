Natural Text
I am trying to figure out how to pass variables between (both directions) a python file and RobotFramework.  I am aiming to have a function in python gather values (folder names) and store them in a variable to then be used by another function which will then test each folder name in succession.  I am aiming to leverage RF's test reporting feature to generate a pass/fail report of which folders pass/fail.(The folder names/locations will change which is why I do not want to hard code them and instead have opted to use some code to gather the folder names via a file picker menu - but the implementation of this will come once I get these more basic issues resolved :) )I have found this example about getting a variable from a python file and having RF recognize it and do something with it - in this case Log To Console.  how to pass values from python code to variable of robot frameworkI have tried the example in the link and it does work.  The first bit of trouble I run into is when a put the variable inside a function.So my Python File (test.py) looks like this:My RF file (test.robot) looks like this:I would expect that 'Create The Thing' would run, which would make the variable 'a'.  I would then think that variable 'a' would be passed back to RF (as it is in the linked example), which then would log it to the console.I am at a loss as to how to get the variable 'a' passed between the 2 test cases.  Perhaps the Set Global Variable keyword?Instead, I see "Variable ${a} not found" as the error for the first test and "NameError: global name 'a' is not defined" as the error for the second test.I get that test 2 is failing because the variable is never passed back to RF in the first test, but is there not a way to have tests run as keywords and then return a variable that can be used later on in other tests?Adding a new section to show how I am using the answer form Todor to solve my issue since comments are not accepting code.Fixed Python file:Fixed RF file:Now to see if I can get this all to work with Sikuli's implementation of RF :)
Perhaps you should read some more about variables scope in python - here's a bit too technical explanation, a relevant entry in the language's FAQ and something lighter.In essence, if you define a variable inside a function, it is bound to it, and its scope is limited to the function (e.g. its lifetime is only during the function execution). When the execution point leaves the function, that variable is no longer present.When you think of it, this makes perfect sense - you don't want your global namespace polluted with all intermediate variables you used, plus that would lead to a lot conflicts and unexpected side effects.And this is what happened with your code - the function  defined a variable - which was local to it, and not visible/existent for any other function in the same module.I'm sure your code as given will throw the same NameError exception when you run it through python interpreter, no Robotframework involved.There are different solutions to your problem, here are a couple.Use returned values and argument passing.This is the cleanest one - the function generating something (the files list in your case) returns it at the end of its execution; the function that uses a generated something (the same files list) accepts it as a calling argument. Thus you have isolation - each of them has a single (and different) purpose, and they don't have a hard dependency on one another. In python speak:Usage in RF:Use global variables.A global variable is one defined at module scope level, and available to all its functions. Being available throughout you have to be careful in their usage (they are a shared state, with all the consequences of that), but are quite handy. So in python:As you can see, the change was defining the variable as such by using the  keyword, thus instructing the interpreter all changes are for the global variable "a", not for one limited to the scope of the function.Usage in Robotframework - the same as in your sample.There are also other approaches - like using the RF's , inside the python code or in RF keywords; it boils down to design choices.
If you want to get Varialbe a from your python function you should create one variable in RF for receive value from python function and you can  do following below codeand your python code should be use  for return valueand here the link for Pass variables from python file to robot framework variables link here .


Answer URL
https://docs.python.org/3/reference/executionmodel.html#resolution-of-names
https://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value
