Natural Text
How do I get the ASCII value of a character as an  in Python?
From here:function ord() would get the int value  of the char. And in case you want to  convert back after playing with the  number, function chr() does the trick.In Python 2, there is also the  function, returning the Unicode character whose ordinal is the  argument:In Python 3 you can use  instead of .ord() - Python 3.6.5rc1 documentationord() - Python 2.7.14 documentation
Note that  doesn't give you the ASCII value per se; it gives you the numeric value of the character in whatever encoding it's in. Therefore the result of  can be 228 if you're using Latin-1, or it can raise a  if you're using UTF-8. It can even return the Unicode codepoint instead if you pass it a unicode:
You are looking for:
The accepted answer is correct, but there is a more clever/efficient way to do this if you need to convert a whole bunch of ASCII characters to their ASCII codes at once. Instead of doing:      or the slightly faster:you convert to Python native types that iterate the codes directly. On Python 3, it's trivial:and on Python 2.6/2.7, it's only slightly more involved because it doesn't have a Py3 style  object ( is an alias for , which iterates by character), but they do have :Encoding as a type that natively iterates by ordinal means the conversion goes much faster; in local tests on both Py2.7 and Py3.5, iterating a  to get its ASCII codes using  starts off taking about twice as long for a  10  than using  on Py2 or  on Py3, and as the  gets longer, the multiplier paid for  rises to ~6.5x-7x.The only downside is that the conversion is all at once, so your first result might take a little longer, and a truly enormous  would have a proportionately large temporary /, but unless this forces you into page thrashing, this isn't likely to matter.


Answer URL
https://docs.python.org/3/library/functions.html#ord
