Natural Text
Write the program that reads in input three integers a, b and c. If the integer c is equal to 1, then the program displays on output (prints) the value of a + b; if c is 2 then the program displays the value of a-b; if c is equal to 3 then the output will be the value of ab. Finally, if the value 4 is assigned to c, then the program displays the value of a^2 + ba. If c contains another value, the program displays the message "Error"
Seems like you got it, just make use of  instead of a chain of , you can also add a message inside  that will be printed when prompting for an input
Your s work, but you have somewhat misaligned the logic. Use   and 
After the first if statement, you should use , which is short for "else if". There is no error message because there is no error, you just have your logic wrong. The compiler is treating every if statement independently, so else runs as long as c is not 4.
You're nearly there. The main problem with your program is your  statements are independent, where the problem statement suggests they should not be. Change them for  statements, which will mean your  branch only executes when  evaluates to an integer which is not in the set .Problem 1: program has (possibly) poor control flowIn most programming languages, the  statement is a basic construct used to execute a block of code conditionally if an expression is true. In the following Python-like pseudocode, the code behind the  block is only executed if the value obtained by evaluating  is true:You can augment  statements with  branches. In this case, we execute the body of the  statement if  evaluates to true, and we execute the other arm of the branch (the  branch) if the condition does not evaluate to true (by law of the excluded middle, it's false):A more complex construct uses an else-if construct to allow you to nest "if" statements. For example, suppose we were implementing a simple call controller which tries to reach someone on their fixed telephone, calls their portable telephone if they are unavailable, and sends an email otherwise. Using the knowledge from above, we might write:As you can imagine, this logic will become complex quickly if there are many nested "if" conditions, which is not unusual in real-world scenarios. Most programming languages provide a construct to pull the nested "if" statements to the top-level. In Python, this is , and the equivalent code to the above is:(comments elided for brevity).In your code as currently written, each of your  statements will be executed independently except the last , which will fall to the  branch if  is not equal to 4. As you want the tests of  to be mutually exclusive, i.e. you don't want anything to happen if an earlier case passed, and you only want to print an error if none of the cases were executed, you should use nested  statements, which are best implemented using the above  language construct.Problem 2: program assumes well-formed integersYour program also assumes the values read from STDIN for ,  and  are well-formed integers. If you enter a value which cannot be parsed as an integer, it will crash on the integer conversion in the  call, and will not fall through to reach your  line. This is an example of Python raising an exception because a problem has been encountered which the interpreter cannot itself recover from. Control flow will not begin executing the  blocks, so the  statement will never be executed.If you want to fix that issue, you'll need to catch the error returned by the  method when it cannot parse the provided value as an integer. This means learning to catch exceptions, which you can find out more about in the Python docs.(Hint: Python will raise an built-in exception of type  when the input to  cannot be parsed, so you need to wrap the calls which populate the three variables ,  and  with a  block which catches such an error:


Answer URL
https://docs.python.org/3/tutorial/errors.html
