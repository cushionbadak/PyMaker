Natural Text
Why is  only 56 bytes when it has an extra  attribute?
 only gives you the system memory use for the direct reference. Instance objects don't store attributes directly, by default those are stored in a dictionary object referenced by the  name. And dictionaries store keys and values as references too,  would only give you the memory size of the dictionary internal C arrays and other internal bookkeeping attributes, not the keys or values themselves.From the  documentation:Only the memory consumption directly attributed to the object is accounted for, not the memory consumption of objects it refers to.You'd have to recursively collect object sizes until you run out of attributes or key-value pairs, etc. The documentation links to this example code to show you how to do this.That specific recipe has no support for instances but here passing in the  attribute of your objects should suffice:so the two objects have different total size attribute dictionaries.Note that there are many places where Python caches or interns objects, so don't take these memory sizes as absolutes. For example, small integers are interned, so there is only ever a single  integer object in CPython memory, but it was counted separately in the above  output.And modern CPython versions can also save memory by having the  dictionary objects of those two instances share data on the keys, in the assumption that the vast majority of instances of a given class will have the same attributes.Take this into account when analysing  data. If you wanted to profile Python memory use, you'd be much better of learning how to use the  tool first.


Answer URL
https://docs.python.org/3/library/sys.html#sys.getsizeof
https://docs.python.org/3/library/tracemalloc.html#module-tracemalloc
