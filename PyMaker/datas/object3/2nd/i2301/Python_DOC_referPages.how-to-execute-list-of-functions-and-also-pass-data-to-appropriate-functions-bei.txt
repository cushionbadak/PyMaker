Natural Text
I previously was using requests, but I have since moved onto aiohttp + asyncio to run accounts in parallel, however I am having trouble putting the logic together in my head.I essentially just want to know how to queue multiple functions, in this instance query_login and send_friend_request, whilst also passing the correct data to said functions, assuming I'd be running three accounts on say a social media app simultaneously, it really boggles my mind, though I have a tendency of overcomplicating things, any help would be greatly appreciated.
Python is designed to make this fairly easy with the unpack operator * or using lambda. There are several good answers in this thread that have what you need: Passing functions with arguments to another function in Python?Let's walk through it.Then we can define our function:Then add a call to the stack with the arguments as a list.The * operator unpacks your list and provides them as arguments in order. You can also unpack keyword arguments with the double-star operator (**).An alternate way is to just make a lambda.Voila! All credit to the authors in the other thread. There's a gotcha here: If you're passing an object as an argument, it will passed as a reference. Be careful because you can modify the object before it gets called in your stack.You can get around this in the *args version with:In lambda functions, the entire thing is evaluated at call time so even things that normally wouldn't be a reference behave like references. The above trick won't work, so do any copying as needed before creating your lambda.
Alright so this is really cool, let me show you something:Output:Note that they may appear in any order.  You can call coroutines from non asynchronous code by wrapping the coroutine (the return value from the coroutine function) in a future (or more accurately a  which is a subclass of ).  This coroutine will now run in the background.  You can add a callback to the future which will be called when it finishes, passed one argument: the future object itself.  Look up futures in the asyncio documentation if you'd like to learn more about them (also check out Coroutines and Tasks).Anyway, those callbacks can do anything you want, including starting other tasks.Of course you could also do that with:which would be better  because any exceptions are actually handled properly instead of simply being ignored.  You could also do this, if you know the email in advance (which you may not):Of course you might not know the email until after the object is created, in which case you could either initialize it to None until some login function is called, or use one of the first two ways.If you wanted to execute a list of functions in sequence, you could do the following:but probably a better way to do it would be just to make an async def function call them all, because that way you get exception handling etc. without a lot of overcomplication.  A better way to do it, if you wanted it as a future (which you can also store as an attribute of an object and query to see if it's done yet), would be this:(By the way,  first checks to see if its argument is already a future, and if not, calls .)but the future api is really cool and I wanted to show it to you.  There are uses for it, and I can pretty much guarantee you're going to need both of these approaches in order to do anything complex.Sorry for the wall of text disorganized answer.  I'm a bit new here.  I just think asyncio is really cool.


Answer URL
https://docs.python.org/3/library/asyncio-future.html
https://docs.python.org/3/library/asyncio-task.html
