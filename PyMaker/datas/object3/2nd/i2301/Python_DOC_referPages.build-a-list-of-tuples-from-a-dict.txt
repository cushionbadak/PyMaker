Natural Text
I have a list  of keys from a dictionary that is derived from a call to the .I would like to build a list of tuples for each point of interest:This works if the field is in the list and I receive a list of results that look like the one below, which is exactly what I want:However, the script throws an error if a desired field is not in the list . How can I build a list of tuples that checks whether the desired field is in  before building the tuple?Here's what I've tried:However, this doesn't work and seems very inelegant. Any suggestions?
This list comprehension uses default values when one of the keys is not present (using ). I added variables so you can set the desired default values.
For a start, you should almost never loop over range(len(something)). Always iterate over the thing directly. That goes a long way to making your code less inelegant.For the actual issue, you could loop over the keys and only add the item if it is in the dict. That gets a bit more complicated with your one element that is a nested lookup, but if you take it out then your code just becomes:
You can use the  feature from .if  has key  returns the value or . For nested dicts, use  value from .For data structure, I recommend to keep it as an dict, and add dicts to an list.
Try this:
you can use the keys method to find the keys in a dict. In your case:note that you can also get all the key, value pairs in a dict using the items() method. That would actually simply the code a bit. To make it even better, itterate over the set, rather than calling len(set) to:


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.get
https://docs.python.org/3/library/stdtypes.html?highlight=dict#dict.get
