Natural Text
I have a long list of groups in json and I want a little utility:The obvious approach is to load the set outside the function, or otherwise declare a global -- but let's assume I don't want a global variable.In statically typed languages I can say that the set is static and, I believe that will accomplish my aim.  How would one do something similar in python?  That is : the first call initializes the set, group_ids, subsequent calls use the set initialized in the first call.BTW, when I use the profilestats package to profile this little code snippet, I see these frightening results:I tried adding functools.lru_cache -- but that type of optimization doesn't address my present question -- how can I load the set group_ids once inside a def block?  Thank you for your time.
There isn't an equivalent of , however you can achieve the same effect in different ways:One way is to abuse the infamous mutable default argument:This however allows the caller to change that value (which may  be a feature or a bug for you).I usually prefer using a closure:Python is an OOP language. What you describe is an instance method. Initialize the class with the set and call the method on the instance.I'd also like to add that it depends by the API design. You could let the take the responsibility of pre-computing and providing the value if they want performance. This is the choice taken by, for example, . The  parameter isn't necessary but it allows the user to remove the cost of computing that array for every call in performance critical code. So instead of having a mutable argument you use  as default and compute that set only if the value passed is  otherwise you assume the caller did the work for you. 


Answer URL
https://docs.python.org/3/library/random.html#random.choices
