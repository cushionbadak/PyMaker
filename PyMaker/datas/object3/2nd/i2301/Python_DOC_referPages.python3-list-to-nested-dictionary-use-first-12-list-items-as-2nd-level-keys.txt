Natural Text
A  of a bash script returns a query from a MySQL table as a string. gives me a list, that contains each table cell read from the left top as an item, like so:list = [ 'column1_label', 'column2_label', ..., 'column1_row1_value',  'column2_row1_value, ..., 'column1_row2_value', 'column2_row2_value' ]The table has a static 12 columns. Now I want to use the first 12 items of the list (which are the column labels in the table) to be taken as "2nd level" keys in a nested dictionary, like so:My python skills are to basic still. I don't even know where to start. There a some answered questions covering list to nested dict conversion, but none answer this case specifically.
You can use a dictionary comprehension with :Result:Of course, due to the unstructured nature of your input list you will have to manually amend  as appropriate. But the same principle applies.
Say this list is called  and the first  elements need to be made 2nd level keys.Say you have got a list  of length , values corresponding to those 12 keys.Assuming every row would correspond to it's own  and  we can do this as
Here  contains some of the value of the label. Accessing the first 12 elements of the list You have a dictionary with the first level key. Loop through the  to create 2nd level key     output {'row1': {'column1': 'value', 'column2': 'value', 'column3': 'value',  'column4': 'value', 'column5': 'value', 'column6': 'value', 'column7':  'value', 'column8': 'value', 'column9': 'value', 'column10': 'value',  'column11': 'value', 'column12': 'value'}}
My solution, inspired by PraveenRB's answer:Thank you @all!


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
https://docs.python.org/3/library/functions.html#zip
