Natural Text
Suppose I have the following list in Python:Given , I want to replace any other  elements with zero in my list, while keeping the next  elements. For example, if  and , I want my list to look like:If it can't be filled perfectly, as is the case with  and , then it's OK if my list looks like this:How should I try to solve this problem?
This just needs  assignments to do the job (and  probably is small).If you really just have two possible values (e. g. 10 and 0), you can do it even simpler:But that iterates in Python over the whole range of 95, so probably is not very fast.A bit more complex but probably more efficient (especially for huge lists and large values for  and ) would be this:But it builds internally lots of lists, so its up to tests to find out whether this is efficient in your case.  (Also memory consumption should be taken into account for large lists.)If you can use  (a bit off the question, but since it's widespread):
You could use  to create an endless sequence of  and then take the first 95 elements of that sequence with :
Yet another possibility, this time with :It uses the fact that  and  are equal to  and  in Python (see here).As a bonus, it works fine even if the list isn't constant:If the list contains strings, it replaces them with an empty string instead of :
This worked for me:which outputs:The code takes  and  and constructs a mask of ones and zeros with a length matching your initial  using the  function. Afterwards you just multiply the mask onto the list and get the zeros where you want them to be. It should also be flexibel to different lengths of the list and an (almost) arbitrary choice of  and .You can cast the array back to a list if you want.
How about this?Edit I found out that the above code changes the length of resulting list in some cases.Thus, the length should be restored somehow.
 can do this pretty concisely, too!
Maybe?Result
Also in the itertools family, you  can  a desired pattern:GivenCodeTestHowever, @Aran-Fey's  solution is cleaner as it does not require chaining.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.cycle
https://docs.python.org/3/library/itertools.html#itertools.islice
https://docs.python.org/3/library/functions.html#enumerate
https://docs.python.org/3/library/itertools.html#itertools.repeat
https://docs.python.org/3/library/itertools.html#itertools.cycle
