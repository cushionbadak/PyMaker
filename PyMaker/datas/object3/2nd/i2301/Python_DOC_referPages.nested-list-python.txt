Natural Text
I have two list . i want to compare with each other with the list index[1][2][3] of "a" of each list with other list index[1][2][3] of "b" .If its a match then ignore , if not then return the whole list.Desired Output :What i am trying :tried below but only managed to match index 1 of inner list , index 2 and 3 still need to be matched..I am not getting the expected output.Any idea how to do this ?
You need an inner loop so that each sub-list from list  can be compared to each sub-list in list .  The inner loop is accomplished with a generator expression. Slices are used to to compare only a portion of the sub-lists. The built-in function  consumes the generator expression; it is lazy and will return  with the first  equivalency comparison.  This will print each sub-list in  that does not have a match in  - to print each sub-list in  that does not have a match in , put  in the outer loop and  in the inner loop.Here is an equivalent Without using a generator expression or :Sometimes it is nice to use  so you can use names for the slices which can make the code more intelligible.: conveniently generates pairs and can be used as a substitute for the nested loops above.  The following uses a dictionary () to hold comparison results for each sublist in  and , then checks to see if there were matches - it does both the  to  and  to  comparisons.
I'm not sure this is ok for your purpose but you seems to want to capture the results of a network interface called  from these two lists.I'm sure there's probably a reason this is unacceptable but you could also expand this to include other keywords in longer lists, well, any length of lists that are nested as far as explained in your question. To do this, you would need to create another list, hypothetically Then we simply iterate this list also.


Answer URL
https://docs.python.org/3/reference/expressions.html#generator-expressions
https://docs.python.org/3/reference/expressions.html#slicings
https://docs.python.org/3/library/functions.html#any
https://docs.python.org/3/library/operator.html#operator.itemgetter
https://docs.python.org/3/library/itertools.html#itertools.product
https://docs.python.org/3/library/collections.html#collections.defaultdict
