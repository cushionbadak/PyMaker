Natural Text
Here is my project layout:test_module_1.py starts with:test_module_2.py starts with:Running  from the project directory gives errors:Adding  at the beginning of test_module_1.py and  at the beginning of test_module_2.py to see what is in the  cache shows that package_1 and package_2 from the tests directory have been already imported during the test discovery:Importing a previously imported package reuse the same cached package from , even if  have since been updated. So when  and  are executed, first package_1 and package_2 from the tests directory (which contain test_module_1 and test_module_2) are reimported instead of package_1 and package_2 from the project directory (which contain module_1 and module_2), then module_1 and module_2 are imported, raising a .Is there a workaround to avoid that the packages from the tests directory shadow those of the project directory, besides renaming?Update (post answer)An alternative solution to Laurent Laporte's below (his avoids having  and  already in  when executing  and , by having  and  instead, thanks to a change of the top-level directory) is to update  and reload the packages in test_module_1.py:and test_module_2.py:The only advantage of this solution is that the tests directory does not need to be a regular package (that is having an __init__.py file). So there won't be any advantage when Unittest allows recursive namespace package discovery (for the moment the ticket is still open: https://bugs.python.org/issue23882).Laurent Laporte's solution should be preferred, as package qualification is better to distinguish packages with the same names than package reloading. Another good solution is package renaming (for instance renaming package_1 and package_2 from the tests directory to test_package_1 and test_package_2).
You can solve your problem by using the flag -t, --top-level-directory directory to set the top level directory of your project (defaults to start directory)For instance:But, in order for discover to import your test modules you need to turn your  directory into a package by inserting a  in it.See the documentation about tests discovery.NOTES:I encounter the same problem with PyTest. See my study on GitHub.In other open source projects, there is only one root package (only  for instance), and there is no  directory, only  with all the  modules (and possibly with sub-packages). So, the problem doesn't appear.


Answer URL
https://docs.python.org/3/reference/import.html#the-module-cache
https://docs.python.org/3/library/unittest.html#test-discovery
