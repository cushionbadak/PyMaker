Natural Text
Let's say I have the following class defined:Along with the following function:Now, if I create a List of animals, as follows:If the function is applied to any instance of the Animal Class inside the list, the isAlive attribute gets changed to False. However, if I wanted to apply this function to this list and change its contents via the multiprocessing library, what would be the correct way to do it?I have tried the following:However, if i try checking the attribute for all the elements inside the list, the result is as follows:Output: True True True True TrueAdditionally, if I try checking the ID of the object that is passed to the Kill_Animal function during runtime via the Pool.Map, it does not match with the object's own ID. I am familiar with Python's call-by-object reference, but what is happening here? 
After studying the multiprocessing documentation, I understood the misinterpretation of the concept.With multiprocessing, even if an instance of a class is passed as an argument, it makes sense that the ID is different from the one in the calling method, since now we are working in a different Process altogether, and therefore this object is a copy of the original object, and does not correspond to the same place in memory. Because of that, whatever changes made in the copy have no impact on its original instance.In order to use parallellism and share states, a different concept must be applied, the one of multithreading, as available in the thread-based parallellism documentation. The difference between multithreading and multiprocessing has been thoroughly discussed here: Multiprocessing vs Threading PythonReturning to the original question, two easy ways could be achieved to loop through the List and apply the function:1. Using the multiprocessing.dummy:multiprocessing.dummy replicates the API of multiprocessing but is no more than a wrapper around the threading module.So the answer could be written as:Output: False False False False False2. Using a Queue:Output: False False False False False


Answer URL
https://docs.python.org/3/library/multiprocessing.html
https://docs.python.org/3/library/threading.html
https://docs.python.org/3/library/multiprocessing.html
https://docs.python.org/3/library/queue.html
