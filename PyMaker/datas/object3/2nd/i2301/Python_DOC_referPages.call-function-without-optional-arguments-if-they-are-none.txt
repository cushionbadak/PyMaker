Natural Text
There's a function which takes optional arguments.Let me iterate over what happens when we use that function in different ways:Now consider the case where I want to call it like  and  will either contain a value to be passed, or be . But even though the function handles , I want it to use its default value  instead.Maybe that's worded confusingly, so let me reword that:  If , call .   Else, call .The distinction is relevant because  has a different result than .  How can I concisely (but readably) make this distinction? One possibility would usually be to check for None within , which would be encouraged because that would make the code safer. But assume that  is used in other places where it is actually supposed to handle  as it does.  I'd like to handle that on the caller-side.  One possibility is to do a case distinction:But that can quickly become much code when there are multiple such arguments. (exponentially, 2^n)Another possibility is to simply do , but that requires us to know the default value. Usually, I'd probably go with this approach, but I might later change the default values for  and this call would then need to be updated manually in order to still call it with the (new) default value.I am using python 3.4 but it would be best if your answers can provide a good way that works in any python version.The question is technically finished here, but I reword some requirement again, since the first answer did gloss over that:I want the behaviour of  with its default values  preserved in general, so it is (probably) not an option to change  itself.In yet again other words, assume that  is being used somewhere else as  where the output  is expected behaviour.
Pass the arguments as kwargs from a dictionary, from which you filter out the  values:
although ** is definitely a language feature, it's surely not created for solving this particular problem. Your suggestion works, so does mine. Which one works better depends on the rest of the OP's code. However, there is still no way to write   - blue_noteThanks to your great answers, I thought I'd try to do just that:Â This is probably not perfect, but it seems to work: It's a function that you can call with another function and it's arguments, and it applies deceze's answer to filter out the arguments that are .
But assume that alpha is used in other places where it is actually supposed to handle None as it does.To respond to this concern, I have been known to have a -like value which isn't actually  for this exact purpose.Now the arguments are still optional, so you can neglect to pass either of them. And the function handles  correctly. If you ever want to explicitly not pass an argument, you can pass .and since  is a special made-up value created for this express purpose, anyone who passes  is certainly intending the "default argument" behavior, as opposed to someone who passes  who might intend that the value be interpreted as literal .
Unfortunately, there's no way to do what you want. Even widely adopted python libraries/frameworks use your first approach. It's an extra line of code, but it is quite readable. Do not use the  approach, because, as you mention yourself, it creates a terrible kind of coupling, since it requires the caller to know details about the function.Regarding work-arounds: you could make a decorator for you function (using the  module), which checks the arguments passed to it. If one of them is , it replaces the value with its own default value.
You could inspect the default values via  and then use them instead of . That way you circumvent the hard-coding of default values:
I'm surprised nobody brought this upYou assign None to p2 as standart (or don't, but this way you have the true standart at one point in your code) and use an inline if. Imo the most pythonic answer. Another thing that comes to mind is using a wrapper, but that would be way less readable.EDIT:What I'd probably do is use a dummy as standart value and check for that. So something like this:produces:


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
