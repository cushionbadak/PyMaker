Natural Text
Consider the following dataclass.  I would like to prevent objects from being created using the  method direclty. For instance, I would like to force the usage of the the additional constructors I define and raise an exception or a warning if an object is directly created as .What I've tried so far is as follows.with  in   I prevent  from being a parameter to the generated , so this partially solves the problem as  raises an exception.Also, I don't like it as a solution.Is there a direct way to disable the init method from being called from outside the class?
Trying to make a constructor private in Python is not a very pythonic thing to do. One of the philosophies of Python is "we're all consenting adults". That is, you don't try to hide the  method, but you do document that a user probably wants to use one of the convenience constructors instead. But if the user thinks they really know what they're doing then they're welcome to try.You can see this philosophy in action in the standard library. With . The class constructor takes a list of , which a fairly complicated to create. This is not the standard way a user is expected to create a Signature instance. Rather a function called  is provided which takes a callable as argument and does all the leg work of creating the parameter instances from the various different function types in CPython and marshalling them into the  object.That is do something like:
The  method is not responsible for creating instances from a class. You should override the  method if you want to restrict the instantiation of your class. But if you override the  method if will affect any form of instanciation as well which means that your  won't work anymore. Because of that and since it's generally not Pythonic to delegate instance creation to another function, it's better to do this within the   method. Detailed reasons for that can be simply found in doc:Called to create a new instance of class  is a static method (special-cased so you need not declare it as such) that takes the class of which an instance was requested as its first argument. The remaining arguments are those passed to the object constructor expression (the call to the class). The return value of  should be the new object instance (usually an instance of cls).Typical implementations create a new instance of the class by invoking the superclass’s  method using  with appropriate arguments and then modifying the newly-created instance as necessary before returning it.If returns an instance of , then the new instance’s  method will be invoked like , where self is the new instance and the remaining arguments are the same as were passed to .If  does not return an instance of cls, then the new instance’s  method will not be invoked. is intended mainly to allow subclasses of immutable types (like int, str, or tuple) to customize instance creation. It is also commonly overridden in custom metaclasses in order to customize class creation.
Since this isn't a standard restriction to impose on instance creation, an extra line or two to help other developers understand what's going on / why this is forbidden is probably worthwhile. Keeping in the spirit of "We are all consenting adults", a hidden parameter to your  may be a nice balance between ease of understanding and ease of implementation:It's certainly still possible to create an instance without going through , but a developer would have to knowingly work around your roadblock to do it.
Rather than creating two constructors and then forbidding one of them, and enforcing usage of a classmethod, why not simply provide only the constructor which you need?This looks much simpler than the original code, and does what was requested.
As Dunes' answer explained, this is not something you'd usually want to do. But since it's possible anyway, here is how:I probably don't need to say that the handle code looks absolutely heinous, and that it also makes it impossible to use  for anything else, which is quite unfortunate. But it is one way to answer the question in your post. 


Answer URL
https://docs.python.org/3/library/inspect.html#inspect.Signature
https://docs.python.org/3/library/inspect.html#introspecting-callables-with-the-signature-object
https://docs.python.org/3/reference/datamodel.html#object.__new__
