Natural Text
I'd like to modify a class method to do some things in addition to the original method call. I have a toy example posted below.Example:This does what I should have expected and gives a maximum recursion depth error. Is it possible to modify the  method so that it prints some text before calling the actual  method, while ideally keeping the name the same? I've been wondering if this is the situation to use a decorator, but I am not familiar enough with them to have a clear idea on how to do this.
The solution would be:My point to the your code:in  function you just print it then go to same function again and againthis makes it that it will keep printingit raises an error at the end because python basically has enough of thisMy point to my code:use the method-descriptor () to use it so it doesn't confuse it with use that because it will still be calling the real  class (not the metaclass)I am also blaming myself that why i didn't think of:
In the method  you are calling  which in turn calls  which... You see where this is going.What you probably intended to so was to call  from . This is done by using . Calling  returns an object which delegates method calls to the parent classes.
Research "Mapping" and "decorators" - I think there's an easier/more pythonic way to do what you're trying to do.
As @Schalton stated, there is a way to do it without having to inherit from str by using decorators. Consider this snippet:The great advantage of this is that the wrapper is reusable, e.g. if you have another class that you want to modify with the exact same behavior, you can just add the @decorator and don't have to redo all the work. Also, removing the additional functionality gets also easier.


Answer URL
https://docs.python.org/3/library/functions.html#super
https://docs.python.org/3/library/functions.html#super
