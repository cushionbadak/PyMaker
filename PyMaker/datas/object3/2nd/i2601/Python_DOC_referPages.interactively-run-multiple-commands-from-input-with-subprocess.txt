Natural Text
I am looking for a way to create some sort of terminal "clone" in Python 3.6 using subprocess. The clone should behave just like the real terminal. The goal is to have a python script simulating a shell which behaves as much as the normal shell as possible. Including commands like  or variable declarations.My target system is Linux with gnome shell, but my problems are probably cross OS relate. At first I din't think that was too hard as you can easily run terminal commands using subprocess but I encountered some problems.What I don't want to do:There would be a very easy way to run commands one after each other. The problem with that is, that this will start a new process for every command. So if I do the following commands it doesn't work as I want to:Because we start a new process every time, commands like cd do not have any effect. That's why I want to run all commands in the same process.First Attempt:This was my first attempt at solving my problem. This is what i got:So I can't just write multiple commands like this.Second Attempt:This attempt was based on another stackoverflow question which was similar to mine: Interactive input/output using pythonHowever, this did not work as well.  was just an empty string. When I looked into it i realized, that the content of  does not get written to the file until the program finished. Even if you close and reopen  between each iteration it still just writes to  after the program finishes.Contents of  after program finished:Third Attempt:At last I tried the second solution from the Stackoverflow question mentioned above. This didn't work as well, as it just always returned :Question:Does anyone know a way to solve any of these issues? Is it possible to communicate more commands even after communication started? Or is it possible for the file to be written before the program ends? Or does anyone know how to get the actual output instead of just  for the last attempt?Thank you in advance :)
Ok, so as it turns out, it is not that easy to run multiple command in the same process in order to keep shell builtins like  or variable assignment. But They can be implemented yourself in python. So here is my version of an interactive Shell in Python using subprocess:This allows me to use , variables and also strings surrounded by double quotes (").I hope this helps anyone who has a similar problem.
Are you looking simply for this?As the following brief demo shows, it has some obvious flaws; but it certainly shows how to simply get out of the way by leaving the stdout and stderr of the subprocess alone.


Answer URL
https://docs.python.org/3/library/io.html#io.RawIOBase.read
