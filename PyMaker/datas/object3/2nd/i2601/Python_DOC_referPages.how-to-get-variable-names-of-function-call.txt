Natural Text
I am going to to write a decorator which evaluates the actual names (not their value) of the variables that are passed to the function call. Below, you find a skeleton of the code which makes it a bit clearer what I want to do. 
You can't really have what you are asking for.There are many ways of calling a function, where you won't even get variable names for individual values. For example, what would the names when you use literal values in the call, so:or when you use a list with values for argument expansion with :Or when you use a  object to bind some argument values to a callable object:Functions are passed objects (values), not variables. Expressions consisting of just names may have been used to produce the objects, but those objects are independent of the variables.Python objects can have many different references, so just because the call used , doesn't mean that there won't be other references to the object elsewhere that would be more interesting to your code.You could try to analyse the code that called the function (the  module can give you access to the call stack), but then that presumes that the source code is available. The calling code could be using a C extension, or interpreter only has access to  bytecode files, not the original source code. You still would have to trace back and analyse the call expression (not always that straightforward, functions are objects too and can be stored in containers and retrieved later to be called dynamically) and from there find the variables involved if there are any at all.For the trivial case, where only direct positional argument names were used for the call and the whole call was limited to a single line of source code, you could use a combination of  and the  module to parse the source into something useful enough to analyse:Again, for emphasis: this only works with the most basic of calls, where the call consists of a single line only, and the called name matches the function name. It can be expanded upon but this takes a lot of work.For your specific example, this produces , so an  instance. Use  to get an  mapping with the name-value pairs, or  to turn that into a regular dictionary.You'll have to think about your specific problem differently instead. Decorators are not meant to be acting upon the code calling, they act upon the decorated object. There are many other powerful features in the language that can help you deal with the calling context, decorators are not it.


Answer URL
https://docs.python.org/3/library/functools.html#functools.partial
https://docs.python.org/3/library/inspect.html
https://docs.python.org/3/library/inspect.html#inspect.stack
https://docs.python.org/3/library/ast.html
https://docs.python.org/3/library/inspect.html#inspect.BoundArguments
