Natural Text
I'm writing an incredibly hackish piece of not-quite-production code in Python, and I need some way of detecting whether a  attribute access was called from a method defined on a class called . It's not quite as easy as that, though, since I need to detect the original method access in case anything has overridden  and called .I'm bad at explaining, so... the rules are similar to Java's , except I want to prevent cheating. (Yes, I know that this is counter to the Python philosophy; bear with me here.)My current plan of attack is:Use  to detect the name of the class (with preceding s stripped).Climb the  chain with  to find out where the attribute access was.Detect what class it was on... somehow. I'm stuck here.I might be able to do this by emulating 's walking of the MRO, but I'd much rather rely on detection because checking what's been called by  and what's been called by user functions is hard.So, to my actual question. Given a frame, how can I detect which class a method is associated with? If I had access to the function object I could do , but I don't (or, at least, I don't think I do). As is, I have no idea how to do this!Here's a simple example that demonstrates what I want to do:
As far as I know, there's no way to obtain the method where the attribute access occurred directly from a frame object. We can, however, obtain that method's code object. We can then search the object's MRO until we find the method to which that code object belongs.A small demonstration:


Answer URL
https://docs.python.org/3/library/types.html#types.CodeType
