Natural Text
I just started using the  module for python which is pretty slick (or similarly we could use Python 3.7 DataClasses).  A common usage pattern that I have is for the class to be a container for parameter values.  I like the labeling when I assign the parameters, and the cleaner attribute style referencing of values, but I also like to have a couple of features that are nice when storing the values in something like an ordered dict: unpacking like a  or a  to feed into function arguments unpacking when keyword passing is necessary or desirable.I can achieve all this by adding three methods to the classThen I can use the classes like this:The motivation here is that the dataclasses provide convenience and clarity.  However there are reasons why I don't what the module I'm writing to require using the data class.  It is desireable that the function calls should accept simple arguments, not complex dataclasses.The above code is fine but I am wondering if I am missing something that would allow me to skip writing the functions at all since the pattern is pretty clear.  Attributes are added in the order I would like them unpacked, and can be read as key-value pairs based on the attribute name for keyword arguments.Maybe this is something like:but I am not sure if there is something in  itself that does this that I haven't found.  Also, I am not sure how I would keep the ordering of the attributes as they are added and translate that into the keys method as such.
It's not integrated directly into the class, but the  and  helper functions are intended to perform this sort of conversion.They're not integrated into the class itself because that would make the class behave as a sequence or mapping everywhere, which can cause silent misbehavior when a / would be expected. Performance-wise, this should be fine; unpacking would convert to / anyway (it can't pass stuff that isn't a  or  in directly, as the C APIs expect to be able to use the type-specific APIs on their arguments).If you really want the class to act as a sequence or mapping, you basically have to do what you've done, though you could use the helper functions to reduce custom code and repeated variable names, e.g.:
Extending the ideas from @ShadowRanger, it is possible to make your own decorator that incorporates attr.s and attr.ib for a more concise solution that basically adds in extra processing.gives the output


Answer URL
https://docs.python.org/3/library/dataclasses.html
