Natural Text
I have an object with different attributes and a list that contains those objects.Before adding an object to the list, I'd like to check if an attribute of this new object is present in the list. This attribute is unique, so this is done to make sure that every object in the list is unique.I would do something like this:But obviously line 2 doesn't work as I'm comparing the  to the object list. 
Keep a separate set to which you add the attribute, and against which you can then test the next value:Another option is to create an ordered dict first, with the ids as keys:This will keep the most recently seen  reference for a given , but you'll still unique ids only.If ordering isn't important, just use a regular dictionary comprehension:If you are using Python 3.6 or newer, then the order will be preserved anyway as the CPython implementation was updated to retain input order, and in Python 3.7 this feature became part of the language specification.Whatever you do, don't use a separate list to test the  against, as that takes O(N) time each time you check to see if the id is present, where N is the number of items in your stream in the end. Combined with O(N) such checks, that approach would take O(N**2) quadratic time, meaning that for every 10-fold increase in the number of input items, you'd also take 100 times more time to process them all.But when using a set or dictionary, testing if the id is already there only takes O(1) constant time, so checks are cheap. That makes a full processing loop take O(N) linear time, meaning that it'll take time directly proportional to how many input items you have.
This should work


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
