Natural Text
I want to be able to recycle a method from a parent class that uses a second method in that parent class. However the second method is overridden in the child class. I want the recycled parent method to use the new overridden second method when it is called from the child class. An example of how I want it to work will hopefully make this clearer:Is this possible in python3? Or will calling the parent's method 2 also use the parent's method 1? I'm hoping to reuse large parts of a parent class as the child class differs in only a few ways. The methods nesting like that in the parent class make it a lot more general.Thanks!EDIT: I forgot to test it with simple code! It does work like I wanted if anyone was wondering!
Yes, this works the way you want it to.You can easily test this yourself. Unless you pass in nothing but 0s and 1s, it should be pretty obvious whether they're getting squared or cubed.And, in cases where it's less obvious, just add a debugger breakpoint to  and  and see which one gets hit. Or add  to the method and see if it gets printed out.If you're coming from another language with C++ OO semantics instead of Smalltalk OO semantics, it may help to think of it this way: Every method is always virtual.Are  calls virtual? Yes.What if you call a method during ? Yes.What if you call a method inside a  call? Yes.What about a ? Yes.What ifâ€¦? Yes.The only exceptions are when you go out of your way to explicitly tell Python not to make a virtual function call:Calls on  use the implementation from the next class in the MRO chain, because that's the whole point of .If you grab a parent's bound method and call that, like , you obviously get , because that's the whole point of bound methods.If you go digging into the class dicts and run the descriptor protocol manually, you obviously get whatever you do manually.If you're not trying to understand Python in terms of Java, and just want a deeper understanding of Python on its own terms, what you need to understand is what happens when you call .First,  doesn't know or care that you're going to call it. It's an attribute lookup, just like, say,  would be.The way Python resolves this is described in the Descriptor HOWTO, but an oversimplified version looks like this:Does  have anything named ? No.Does  have anything named ? Yes.Return .If that second lookup failed, Python would loop over  and do the same test for each one. But here, that doesn't come up.  is always going to be  for an instance of , and  exists, so it binds  to , and the result is what  means.
Short answer: yes.Just tried a slightly modified version of your code with prints.This is the output:As you can see, the method1 used is the child one.


Answer URL
https://docs.python.org/3/howto/descriptor.html
