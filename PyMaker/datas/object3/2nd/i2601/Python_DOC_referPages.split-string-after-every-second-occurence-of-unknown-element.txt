Natural Text
I have a string with list of coordinates which represents polygons.In this list each polygon have starting and ending coordinates which are the same.I need to have each polygon in separate string (or list).'17.17165756225586 -28.102264404296875,17.184370040893555 -28.200496673583984,17.1986083984375 -28.223613739013672,17.17165756225586 -28.102264404296875,28.865726470947266 -28.761619567871094,28.80694007873535 -28.75750160217285,28.792499542236328 -28.706947326660156, 28.865726470947266 -28.761619567871094'So from this simple example I need to have two elements:One = '17.17165756225586 -28.102264404296875,17.184370040893555 -28.200496673583984,17.1986083984375 -28.223613739013672,17.17165756225586 -28.102264404296875'Two = '28.865726470947266 -28.761619567871094,28.80694007873535 -28.75750160217285,28.792499542236328 -28.706947326660156, 28.865726470947266 -28.761619567871094'*There can be more polygons in string each needs to be separated.I can use only standard python libraries for this

Here's a fairly ugly but working solution, just putting the obvious approach into code really.
Since your input is already a string (and your expected result also?), you can try this super-lazy solution using a regular expression  with backreferences. Here,  is the first coordinate pair,  the other pairs, and  the first pair again.Or use  and get the  to get a list of strings directly:After some post-processing, to get the actual lists of pairs of numbers (with  being the result of ; for  drop the ):For longer strings, this may not be the fastest solution, I did not time it, though.
How about splitting your long string with every "," and puttting it into an array. Then make a for loop and do:So when the starting coordinates match a value, add all variables between those values to a string. Then push string to another array. Then start comparing the next value to data after.By the way this is just a pseudo code example.Hope this helps
Output:
I really like @newbie's solution in its conciseness. Here is a slightly more verbose/readable one:
input data...output:
A recursive approach:

Here is another way to do it, this approach applies to any string length as far as it will be based on the input format that you gave.



Answer URL
https://docs.python.org/3/library/re.html
