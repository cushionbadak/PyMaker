Natural Text
Summary: I created a new list variable by taking a slice of an original one. When I tweak the new list,  the previous one also changes, but I'm fairly certain they are two distinct lists! Here's my general method:1.Create initial list  by calling a function. Each list item is itself a list with 5 elements.2.Create a new list  by slicing the initial list to remove the first item (I need to do this for later code). Then confirm thet are distinct.3.Increment the first 3 elements of each outer list by 1. Then check.The initial list is also altered when it shouldn't be. I have tested with simpler examples and get the same result. Perhaps it's a result of my previous code that comes before this? (Can provide more details if needed).Thanks in advance!
When you do this:  You perform slicing on  to create a new list .The problem is that the elements of  are (references to) lists, so  will contain the copy of the references to lists. The references are copied, so at the end both lists contain references to the same lists.This explains why when you modifies the lists referenced by the elements of , you also modify the lists referenced by the elements of .Note that if you modify directly an element of  by assignment, i.e. if you replace the reference to a list with another one, then  is not changed:  If you really want to duplicate the data in another list, you have to use the method copy.deepcopy(), as follows:  
You should import  module and make a  if you don't want changes in original list.
This is happening because you're modifying mutable objects that both lists contain references to.  Modifying the list you sliced won't change the slice, but modifying a mutable object in that list will also be visible from the other list, because both lists contain the same object.


Answer URL
https://docs.python.org/3/library/copy.html
