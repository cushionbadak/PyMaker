Natural Text
sometimes I have a string like thisand sometimes I will have duplicates in it.how can I check if my string has duplicates and then if it does remove them?UPDATE.So in the second string i need to remove Agva, and Hett, because there is 2x of them in the string
Iterate over the parts (words) and add each part to a set of seen parts and to a list of parts if it is not already in that set. Finally. reconstruct the string:(note that I had to add some calls to  as there are spaces at the start of some of the words which this method removes)which gives:Why use a set?To query whether an element is  a set, it is  average case - since they are stored by a hash which makes lookup constant time. On the other hand, lookup in a list is  as Python must iterate over the list until the element is found. This means that it is much more efficient for this task to use a  since, for each new word, you can instantly check to see if you have seen in before whereas you'd have to iterate over a  of seen elements otherwise which would take much longer for a large list.Oh and to just check if there are duplicates, query whether the length of the split list is the same as the set of that list (which removes the duplicates but looses the order).I.e.which works as expected:
You can use , or equivalently the  recipe in the  docs, or equivalently @JoeIddon's explicit solution.Here's the solution using 3rd party :I've removed whitespace and used  to clean up a trailing  which may not be required.
if you will receive a string in only this format then you can do the following:what this code does is that it splits words into a list, finds unique items, and then merges them into a string like before
If order of words id important then you can make a list of words in the string and then iterate over the list to make a new list of unique words.  Output:
This looks a bit ugly, but does the job ;)Hope it helps!! Please feel free to ask if anything is not clear :)


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
