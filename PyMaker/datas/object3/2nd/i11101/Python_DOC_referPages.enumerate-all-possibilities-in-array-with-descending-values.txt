Natural Text
I'm trying to write a recursive approach to enumerate all possible values of an array of arbitrary length whose elements can all descend to one. More formally, given an array A with the elements, A_1, A_2,...,A_N and array B with B_1,B_2...B_N. There is a relationship between A_i and B_i, where i is between 1 and N and any element A_i lies between 1 and B_i. For such a set of arrays, I want to find all possible states for A_i.For example, the array [1 2 3] has the following six possible states:[1 2] would produce [1 1] and [1 2], etcI've tried a solution in python such as:but I can't seem to get the right values and I can't get the data-structure to populate. For example [3 3] only produces a tree with three nodes or the result:Since I'm doing this to think through problems, I'm curious how:the python itertools might make this possibleany links that talk about this family of problemshow to more efficiently think about my approachAny thoughts appreciated.
Basically for every column you have a set of 'allowed' values.  By picking a value from each of these sets and putting it in a relevant column you generate a valid "related" array.  You just need to try all the possibilities.Recursively, you need to make problem smaller. You may recurse on array length here:And you can have same effect with itertools, with no explicit recurrence:
The function / tool you are looking for is called the "Cartesian Product", which has been implemented in many places, including itertools.itertools.product(*iterables[, repeat])This might also be useful: linkTo achieve your final goal, what you need is so-called "lexicographical" sorting. I'm not sure if there is a easy-to-use tool available, since I'm not sure it is a solved problem (depends on many arbitrary sorting rules). However, you can look at the Python documentation to get started since they have some hints about lexicographical output.


Answer URL
https://docs.python.org/3/howto/sorting.html
