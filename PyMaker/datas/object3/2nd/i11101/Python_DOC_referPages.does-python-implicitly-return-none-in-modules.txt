Natural Text
I was playing around with Python bytecode with the  module when I noticed something about bytecode generated for modules. Given a small test module named :I created a code object for it with the  function:and then, disassembled the code object to view the bytecode:What struck me were the two last commands  and  which, if my understanding is correct, place the constant  on the value stack and consequently return it.Do modules implicitly return  and, if so, why?
Yes, in a nutshell, modules do implicitly return  in order for the big evaluation loop inside  to be able detect when to the current frame is finished and terminate. Interestingly, you can see this even when a python file that is completely empty is interpreted, from a terminal:This behavior is not limited to modules but, rather, for anything that can form a code block; this includes class definitions:and function bodies: That is, the  bytecode command terminates the current block that was executing and returns () the value on the top of the stack to the callee (if there exists one).The only caveat is that it is that specifying a custom return value is only allowed for functions, in class definitions and modules a return value doesn't have much of a purpose and as such trying to specify one results in an appropriate .For the people interested in the source code for this, you can find it by stepping through the functions defined in , from the documentation in :The relevant steps are  and  or  and  functions


Answer URL
https://docs.python.org/3/library/dis.html#module-dis
https://docs.python.org/3/library/functions.html#compile
https://docs.python.org/3/library/dis.html#opcode-LOAD_CONST
https://docs.python.org/3/library/dis.html#opcode-RETURN_VALUE
https://docs.python.org/3/reference/executionmodel.html#structure-of-a-program
