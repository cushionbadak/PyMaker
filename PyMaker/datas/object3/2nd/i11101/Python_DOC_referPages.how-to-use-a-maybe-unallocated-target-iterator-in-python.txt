Natural Text
If one would like to run an algorithm on an arbitrary interchangeable data source, it's a good idea to use iterators:In the given example, the iterator is a source. But how would it look, if I would like to use the iterator as a target? Something like:I could just use 's , but that would not work if the target iterator would not be a list, but some different iterator.In that example, the target iterator is not even allocated. I also wonder how I could/should preallocate and how it would look using  and NumPy.
First, just a terminology note: an iterator is a read-only construct; it's an object that has a  method. So  is not an iterator, but something else.What you want is something that is guaranteed to have an  method, which is any class that inherits from .  is just one such class, albeit (the only?) one that is part of the standard library.Python being the dynamically typed language it is, it is not required that  be an instance of a type that inherits from . It is a sufficient condition (such an object will work), but it is not a necessary condition (an object can have a suitable  method without actually inheriting from ).So the short answer is: go ahead and use . Just be sure to document that the  argument must support , and let your users decide what to use.
One option would be to use a generator and use the  method to return values to the  statement:Although you could also just pass a callable as the Target, that way you can either pass  or  as the , or any other function that does something with a single value:


Answer URL
https://docs.python.org/3/library/asyncio-task.html
