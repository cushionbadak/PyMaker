Natural Text
I have the following code example where I am creating a dictionary  for each  with a tuple of 2 numbers for its value.The idea is that I will eventually aggregate all these dictionary key-value pairs under one dictionary (perhaps this parts needs redesigning..).The problem I am dealing is for cases where the  of a specific  is greater than 1; in these cases I would like every 2 numbers inside the tuple for each  to be added with the previous numbers for that same .As an example, where for  it has   and if  gives  and   gives , gives  and   gives , gives  and   gives ,then, I would expect the output for  to be I know that tuples are immutable. I am struggling to come up with an implementation to pre-compute the 2 numbers for all files for each id and then create its specific dictionary entry. Alternatively, perhaps I should remove the tuples structure -even though I was hoping to use namedtuples and store the 2 numbers in a set (?). Any suggestions are would be much appreciated.Hoping for an efficient and pythonic suggestions.
Part of the problem is you've organized your code badly.  You're creating your dictionary too early.Consider if you reorganized it something like this:Now your dictionary is created after you've aggregated your data.
To create a tuple that contains sums, you can do something like this*:But just as a heads up, using your current code, this would store the same tuple value in the dict for all of your  keys. You don't currently have any way of associating a particular  with a particular .*If you only want to iterate once through  instead of twice, you can adapt one of the answers from here: Python element-wise tuple operations like sum.
There are a few things strange about your code, for one, you are creating a new dictionary every time you call count_stuff, but never doing anything with it or return it. From the question it seems like you want everything added to one dictionary.Something like this might work better:
You could try mixing map and sum:Edit:A more detailed example given your particular situation. Some parts will be described in comments in angle brackets.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences
https://docs.python.org/3/library/collections.html#collections.namedtuple
https://docs.python.org/3/tutorial/datastructures.html#sets
