Natural Text
Honestly, I just don't understand the lingo of "non-zero" status to really interpret what's going on or what that means (it wasn't even defined) on help pages. What are some examples of using python to call other scripts in which these processes of really differ from each other?When would you use either of those, and what are the disambiguated details of these methods? Should I be using os.system instead if I wanted simple OS calls?
The main difference is that, while  is a non-blocking function (meaning you can continue the execution of the program without waiting the call to finish), both  and  are blocking.The other difference is in what they return: returns a . returns the  attribute. returns the output of the command execution.The methods  and  are, in fact, blocking wrappers of , using a .For example, you can get the  attribute by calling .
To expand on @otorrillas's answer with some examples.Say you have a short script that you only care whether it succeeds or not*, and you just want to do it now and wait for the result. Say, for example, you want to send a single ping to a remote machine.  is the one for you:Now say that you have a command you want to assume is going to succeed, and is going to give you some output you want to use for something.  is for you. Perhaps a subversion command:In general, if your use case does not simply fall under one of those categories, you are probably going to wind up using .One simple use case might be, say you have a daemon process that you want to start, but then run alongside of your python process. Now you use :NB: If you use  raw, you must make sure you terminate the process, possibly using an  as I have illustrated.    * "non-zero" exit status just means the process failed. A famous computer science quote attributed to Tolstoy is "Happy processes are all alike; every unhappy process is unhappy in its own way", i.e. there's only one way for a process to be happy: to return 0. Everything else is unhappy, but there are lots of ways to be unhappy.


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.Popen
https://docs.python.org/3/library/subprocess.html#subprocess.call
https://docs.python.org/3/library/subprocess.html#subprocess.check_output
https://docs.python.org/3/library/subprocess.html#subprocess.Popen
https://docs.python.org/3/library/subprocess.html#subprocess.call
https://docs.python.org/3/library/subprocess.html#subprocess.Popen.returncode
https://docs.python.org/3/library/subprocess.html#subprocess.check_output
https://docs.python.org/3/library/subprocess.html#subprocess.call
https://docs.python.org/3/library/subprocess.html#subprocess.check_output
https://docs.python.org/3/library/subprocess.html#subprocess.Popen
https://docs.python.org/3/library/subprocess.html#subprocess.Popen.returncode
