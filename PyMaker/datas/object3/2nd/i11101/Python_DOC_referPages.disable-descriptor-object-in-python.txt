Natural Text
Here is a simple example of descriptor usage in Python:But what if I want a descriptor object to be an actual attribute of the class, so  would be  instance, not 42.
There are many ways to get what you want, depending on what exactly it is that you want.If all you want is to access the descriptor object (i.e., you don't care whether it is actually stored directly as an attribute on the class), then just store it in a list or something:This will require an extra level of indirection to access it, but in practice that's likely less work than the alternatives.As described in the documentation the descriptor is activated via .  So if you really wanted it to be an attribute, you could override  on the class containing the descriptor () and thus block the descriptor mechanism from taking effect:
use getattr_static() does not resolve descriptors, for example slot  descriptors or getset descriptors on objects implemented in C. The  descriptor object is returned instead of the underlying attribute.If you want to make this the default behaviour for instances you could override  to be :Quite frankly I don't see why you would want this, it would make more sense to store the descriptor in a data structure that doesn't invoke descriptors like a :Then you can look up  without risk of invoking the descriptor.
The simpliest idea I have is to wrap this descriptor into another one. It would work since only one  would be called.


Answer URL
https://docs.python.org/3/library/inspect.html?highlight=inspect#inspect.getattr_static
