Natural Text
consider the following objects:This mirrors the situation I am currently in, S is some library class, Item collects and organises data and data manipulation processes. Now I want to parallelise the work, for that I use the python multiprocessing module:The result is not what I expected:Where am I going wrong?
You're expecting your mutator, the static method  in class  (called from the non-static  in class ) to adjust each  fieldâ€”and it does.  The problem is not with the static method, but rather with the internal design of .The  package works by running multiple separate instances of Python.  On Unix-like systems, it uses , which makes this easier; on Windows-like systems, it spawns new copies of itself.  Either way, this imposes all the slightly odd restrictions described in the Python documentation: v2 and v3.  (NB: the rest of the links below are to the Python2 documentation since that was the page I still had open.  The restrictions are pretty much the same for both Python2 and Python3.)In this particular case, each  call makes a copy of the object  and sends that copy to a new process.  The process modifies the copy, which has no effect on the original.To fix this, you may either send the modified objects back, e.g., through a Queue() or Pipe() instance, or place the objects into shared memory.  The send-back technique is simpler and easier to program and automatically does most of the necessary synchronization (but see the caveat about being sure to collect all results before using a Process instance's , even implicitly).


Answer URL
https://docs.python.org/3/library/multiprocessing.html#programming-guidelines
