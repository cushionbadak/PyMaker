Natural Text
I often run into a situation where I have a top level function from which I want to be able to modify any of the parameters of multiple subfunctions. I'll express this as the following example:Now, this is sort of ugly, because I'm forced to redefine all the defaults for my inner functions, and my parameters are one big mess.  I suppose I could do the following:Still, this is not great, because I'm doing this odd practice of passing arguments via a dict, where they only wait for the function to be called to be validated.  Seems like a recipe for bugs and unreadable code.  Also, I have no freedom to swap the functions called internally for different functions with a similar interface.  So I could also go:However this also seems to involve unnecessary structure and fluff code (self.x = x and all that).  I can get around that by using partials (or lambdas):But this also seems unsatisfying - because there is no clear "type" of arguments to call the function with - just a partial function which should work when called - makes it more difficult for another programmer who wants to use the function.So, none of these methods leave me feeling fulfilled or happy.  I guess I like partial, but I'd like some way to declare that a partial function obeys some interface.  Does anybody know a better way?
Python 3.5 has a new (optional) type hinting system that might do what you want. It's not checked at run-time by the Python interpreter, but does allow you to make statements about the types of arguments and return function values. A separate static analyzer program like  can be run on the code to look for typing errors.For your  function, I think you'd want to declare things something like this:You might be able to get away with only one  rather than two if the  function returns the same the processed data using the same type as the original data. You could also specify those types more specifically (e.g. with  or whatever, rather than using a ) if you didn't need a generic approach.See PEP 484 and documentation the  module for more details.


Answer URL
https://docs.python.org/3/library/typing.html
