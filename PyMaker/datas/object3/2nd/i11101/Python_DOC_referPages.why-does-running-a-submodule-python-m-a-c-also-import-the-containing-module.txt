Natural Text
Given: filesI/OModule  has no dependencies on module . So, why does Python run module  as if it were importing it? To me this is surprising behavior. I didn't expect running a script without imports would cause the script itself to be imported and evaluated twice. Wouldn't this be dangerous for the scripts that don't use the protection of ?What is the justification for this behavior? Why does Python need to evaluate the containing module upon running its submodule?
Module a.c has no dependencies on module a. So, why does Python run module a as if it were importing itFrom the documentation:Importing parent.one will implicitly execute  and . Subsequent imports of  or  will execute  and  respectively.To me this is surprising behavior. I didn't expect running a script without imports would cause the script itself to be imported and evaluated twice.No, this isn't suprising. Think about this: whatever objects are exposed by package  in your example is controlled by . The interpreter now has to evaluate  to find out if  exists at all. And in the process, the print statement is executed. Further, no module is imported twice. It is imported only once -- although you could technically write import statements multiple times.
Module a.c has no dependencies on module aYou are confusing a package with a module. There is a dependency:  is a member of package .Questions about this are commonWhat's the difference between a Python module and a Python package?Module vs. Package?So, why does Python run module a as if it were importing it? To me this is surprising behaviorWhen you import module , python processes package  which includes executing code in the  and then module Q: Why?A: Because that is what the language states it will do. :) (I know, that isn't really the why you meant.)Q: Why? As in, "why would it do that, what good can that be?"A: The package level init might do something useful.The package init can provide things, and the members can count on the package being execute before the member module starts.You put  into package  for a reason.  People can use packages simply for structural organization.  If you have Java experience you may see the dots as just how you organize classes.  If you are only using the  for this reason, leave the  empty and all will be as you expect.But the package  allows other abilities.  It does require a care to use correctly, but is available when you need it.  Wouldn't this be dangerous for the scripts that don't use the protection of ?Yes, you need to clearly know what are scripts meant to be run (for example ) and what are modules meant as containers for classes and functions.In general, modules are not mean to be executed as stand alone scripts.   The common exception is during test and development.  Then you will regularly see bits of test code


Answer URL
https://docs.python.org/3/reference/import.html#regular-packages
