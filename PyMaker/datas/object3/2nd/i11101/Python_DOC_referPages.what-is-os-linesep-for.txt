Natural Text
Python's os module contains a value for a platform specific line separating string, but the docs explicitly say not to use it when writing to a file:Do not use os.linesep as a line terminator when writing files opened in text mode (the default); use a single '\n' instead, on all platforms.DocsPrevious questions have explored why you shouldn't use it in this context, but then what context is it useful for? When should you use the line separator, and for what?
the docs explicitly say not to use it when writing to a fileThis is not exact, the doc says not to used it in text mode.The  is used when you want to iterate through the lines of a text file. The internal scanner recognise the  and replace it by a single "\n".For illustration, we write a binary file which contains 3 lines separated by "\r\n" (Windows delimiter):The content of the binary file is:NB: I used the "rb" mode to read the file as a binary file.I get:If I read the content of the file using the text mode, like this:I get:The delimiter is replaced by "\n".The  is also used in write mode: any "\n" character is converted to the system default line separator: "\r\n" on Windows, "\n" on POSIX, etc.With the  function you can force the line separator to whatever you want.Example: how to write a Windows text file:If you read this file in text mode like this:You get:
As you know, reading and writing files in text mode in python converts the platform specific line separator to '\n' and vice versa. But if you would read a file in binary mode, no conversion takes place. Then you can explicitly convert the line endings using . This can be useful if a file (or stream or whatever) contains a combination of binary and text data.


Answer URL
https://docs.python.org/3/library/os.html#os.linesep
