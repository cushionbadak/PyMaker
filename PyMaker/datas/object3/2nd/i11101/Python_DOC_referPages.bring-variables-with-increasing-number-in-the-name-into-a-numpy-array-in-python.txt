Natural Text
I have a big number of variables that have an increasing number in their name:Is there an easy way (maybe with a loop) to create a numpy array that contains the values of the variables as elements?
Variables in Python are always available through your  (or , if in a narrower scope than their definition) dictionary:Using this, it would be simple to iterate through your variables:(There might be much more elegant ways of doing that, but you get the idea)As mentionned in comments though, this is a very brittle way of going about it: I mentionned  vs , but know that getting your hands dirty with 'internals' dictionaries is very messy and unreliable. Never use that in production ! If you have a file of variables in the format , you can easily parse that:If the format is more complex (maybe containing other things, or potentially invalid data), you still have a lot of parsing options: the csv module might be a good way to start.
If you have a file, say  that looks like that:you can do:and then do whatever you want with those pairs. Put them in a list, process further etc...
This should work, using  and assuming that no other variable name in the environment starts with "var":Example:You can also use : What's the difference between globals(), locals(), and vars()?
you can use the globals or locals function like below:
Is it a python file ()? You can try this workaround:Add the following lines to the end of where you have the variables:Provided no other variables start with 
If the variables are in a file in valid Python syntax, they can be imported and parsed from there. puts them into the local name space.  But if we don't use  we can isolate themThen any other the other answers that work from  can be used to convert this dictionary to an array.If the  labeling is consecutive, we can figure out the size of the resulting array from the size of this dictionary.  Otherwise we might have to find the maximum value first.or we can make a list of lists right away:and turn it into a array withThat still needs a  mapping.


Answer URL
https://docs.python.org/3/library/csv.html
