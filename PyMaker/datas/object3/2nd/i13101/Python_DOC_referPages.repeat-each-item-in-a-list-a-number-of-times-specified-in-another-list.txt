Natural Text
I have two lists,  and :I want to use these to create a new list.  The new list will have each element in  repeated the number of times specified by the corresponding element in .  Hence, the desired output isThe order of the elements in  doesn't matter to me.  It's also not crucial that it be a  -- any sequence type is fine.What is the fastest, most efficient, most Pythonic way to achieve this?
You can use list comprehension, like thisHere, we  the  and  so that the element from  and its corresponding count from  are grouped as a single tuple. Then, we iterate  number of items to produce the same item.If your objects in  are immutables, then you can create  copies of the same and put them together in a list, like thisYou can do the same lazily, with , like thisPlease note that the  returns an iterable, not a list. So, if you don't want all the elements at once, you can get the items one by one from it. This will be highly memory efficient if the  is going to be a very big number, as we don't create the entire list in the memory immediately. We generate the values on-demand.Thanks ShadowRanger. You can actually apply  over  and  and get the result like thishere,  function will apply the values from  and  to  one by one. So, the result of  will beNow, we use  to consume values from each and every iterable from the iterable returned by .
numpy's  function gets the job done:
Simple using  loop.
One way to achieve this is via using  function of  along with . For example:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.repeat
https://docs.python.org/3/library/collections.html#collections.Counter.elements
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/functions.html#zip
