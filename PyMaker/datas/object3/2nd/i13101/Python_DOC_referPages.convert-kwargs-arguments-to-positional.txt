Natural Text
I want to write a wrapper for functions which is aware of positional arguments. Unfortunately, I also want to allow the wrapped function to be called with named positional arguments (for readability). Since the wrapped function is actually a new function, it would not have the positional argument names for the old function.Example: Here is a wrapper.Here is a function.I wrap the function.I call the function without and with named parameters.I get an error, because  doesn't have , and adding it in would have just turned the error into an , since  would have indexed an empty list.Even worse is if the original function itself is wrapped (perhaps by the same wrapper). We would have to define both wrappers in a way that preserves the argument list.
 is used to get the signature of a function, even if the function is (correctly) wrapped. (See PEP-3062/Implementation.) This can be used to get the parameter names, and then wrap the wrapped function in another wrapper that will extract  to put into .(Note: This doesn't handle default args, assumes that there are no keyword arguments for f, and raises a  for missing arguments. I fix those issues in this version.)Now, we have:
inspect.Signature.bind can be used for that purpose.


Answer URL
https://docs.python.org/3/library/inspect.html#inspect.Signature
https://docs.python.org/3/library/inspect.html#inspect.Signature.bind
