Natural Text
I was trying to use tempfile.NamedTemporaryFile in Python 3. I found that if I wanted to call any other process using  or such by passing the new file name, I had to use , and then later on delete the file manually myself using . I presume I have to  the file before allowing another process to open it (in my case, calling a compiler to compile a source file created from Python), and apparently the file is deleted upon being closed.I wonder, when Python already provides  to produce temporary files which do not have names, of what use is a named temporary file if it is not to enable other processes to access them?It seems to me that the default should be to not delete the created file upon the file being closed, and putting the responsibility of deleting the temporary file on the user, no? In fact, it seems that the  argument is itself pointless because of this, since if the file will be deleted anyhow, then why do we need its name, so  should never delete...
It's an incorrect presumption that you have to close the file before other processes can access it.  In fact, as you observed, when you call close on the NamedTemporaryFile it deletes the file on disk by default.With  as with all of Python, scope and lifetime are all important.  That's one of the great things about object orient languages, objects clean up after themselves when they're no longer needed (either deleted or go out of scope). Upon destruction, the  objects free all resources in memory and named files on disk.Thus, if you want to use the temporary file on disk by using the file system name, the NamedTemporaryFile should be in scope and unclosed. It's not guaranteed across all platforms, but on Unix/Linux the file should be accessible in the file system by other processes.  However, the NamedTemporaryFile creates the file to readable and writeable only by the owner (unix permission 0600: -rw-------).If you want/need to do more of this management and cleanup yourself, you might consider using the lower level function .  For example, In either case be sure you flush the buffers before giving the filename to another process, file.flush().
So that you can use it in the  statement as a context manager and you can get the name of the file via the  property. Consider:This will automatically delete the file when the body of the  statement is exited either normally or by exception.
1 What makes you say you can't access the temp file. If you code forks and the file was not closed you can still access it.FH "are" in the forked process as well2 if the responsibility for deleting the file would be on user then I would argue there is no need for module like this. If I want to keep the file then I'll handle it myself, but if I just need to write to a file and not to worry about it then I use temofile module and the module is so nice that it allows me to keep the file if I really need to


Answer URL
https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile
