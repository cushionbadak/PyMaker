Natural Text
The related question How do I merge two python iterators? works well for two independent iterators.  However, I haven't been able to find or think of the tools necessary for merging two iterators where one is recursive and takes the other as an input.  I have iterator  that is a simple list.  Then I have iterator  that takes a function  and yields x, func(x), func(func(x)), where one of the inputs to  is an element of .  I've solved this with mutable state as follows:A concrete example in this format:I'm sure there's an elegant way of doing this without the mutable state and the for loop.  A simple zip doesn't do it for me because the  iterator uses its previous element as an input to the next element.One elegant way of expressing theta is using the  method available in the more_itertools package:However, the problem with this is that  will be fixed throughout the iteration.  It would be possible to deal with this by passing in the entire list  and then return the remainder of it from the update_theta method:However, I'd really rather not modify the  method to take an entire list it's not interested in and deal with the mechanics of returning the tail of that list.  While it's programmatically not difficult, it's poor separation of concerns.   shouldn't know anything about or care about the entire list .
As Peter Wood suggests in the comments, this is exactly what the built-in function  does:In Python 3,  has been moved to , so you'd need to import that:If you want an iterator of all the intermediate values, Python 3 provides . There's no argument to specify an initial value, so you'd need to put the initial value in the iterator:Python 2 doesn't have , but you could copy the equivalent code from the Python 3 documentation. There's no easy way to formulate it in terms of the Python 2 standard tools, which is why people wanted it added to Python 3 in the first place.


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
