Natural Text
How to find the majority votes for a list that can contain -1s, 1s and 0s? For example, given a list of:The majority is -1 , so the output should return Another example, given a list of:The majority vote would be And when we have a tie, the majority vote should return 0, e.g.:This should also return zero:The simplest case to get the majority vote seem to sum the list up and check whether it's negative, positive or 0. After the sum, I could do this check to get the majority vote, i.e.:But as noted previously, it's ugly: Python putting an if-elif-else statement on one line and not pythonic.So the solution seems to be EDITEDBut there are cases that  won't work, @RobertB's e.g. But in this case the majority vote should be 0!!
I am assuming that votes for 0 count as votes. So  is not a reasonable option.Try a Counter:So you could write code like:
You could use  statistics.mode if you were using python >= 3.4 ,catching a  for when you have no unique mode:The statistics implementation itself uses a Counter dict:Another way  using a Counter and catching an empty list:
You can count occurences of 0 and test if they are majority. 
This solution is based on counting occurrences and sorting:Additionally, there is one if statements. As mentioned in the comments it is undefined what happens with x = [1, 1, 0, 0, -1]
I believe this works for all provided test cases. Please let me know if I did something wrong.
Error handling for empty  lists or  lists with a set cardinality of 1 is trivial and left as an exercise for the reader.

This works with any number of candidates. If there is a tie between two candidates it returns zero else it returns candidate with most votes.We compare only two candidates because if there is a tie between two candidates it should return 0 and it doesn't depend on third candidate value
A very simple approach.In the above example the output will be -1,however if there is a tie, both the keys will be printed.
An obvious approach is making a counter and updating it according to the data list . Then you can get the list of numbers (from -1, 0, 1) that are the most frequent. If there is 1 such number, this is what you want, otherwise choose 0 (as you requested).
You don't need anything but built-in list operators and stuff, no need to import anything.3d line puts counts of respective votes in a new list, and counts.index() shows us which list position we find the max votes.I would dare to say that this should be about as pythonic as it can, without getting into eye-gouging oneliners.Upd: rewrote without text strings and updated to return 0 in case of several equal results (didnt notice this in the original post), added an IF for case if only one vote, eg votes=[-1]




Answer URL
https://docs.python.org/3/library/statistics.html#statistics.mode
https://docs.python.org/3/library/collections.html#collections.Counter.most_common
