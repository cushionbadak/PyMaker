Natural Text
Is there a way to evalute the number of numeric operations (+, -, /, *) in a function/expression? In example, lets take a simple linear algebra problem ():Next, lets apply Gauss elimination procedure:The result is:How could I count the operations?Note: I know the number of operations can be evaluated mathematically beforehand (i.e. for Gaussian elimination it is O(n^3)).
I am assuming you are trying to reduce the complexity here for performance. Listed in this post is an approach to kill the inner loop of  with  giving us a partially vectorized solution, like so -Runtime tests and verify output -
If you can take a little time for it, there should be a way: create a class of numbers and override the basic arithmetic methods: , , ,  by embedding a counter system in it (related to some global variable for instance). You should then be able to force Numpy to use your type by using the  parameter (at array creation) to make sure that Numpy doesn't convert your numbers to any other type. I sometimes did it for simpler task; I never did it with Numpy, but it should probably work. Hope it can help.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.call_count
