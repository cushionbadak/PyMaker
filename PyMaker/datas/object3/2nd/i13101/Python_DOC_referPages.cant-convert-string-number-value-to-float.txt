Natural Text
I am working with a CSV file that contains 2 columns, the first a date column with format yyyymmdd, the second a string value that is in the format of a float, 0.0 for example.I keep checking the type of rain_amount by using type(rain_amount), and it keeps registering as "str." What am I doing wrong? I keep trying to check and do different things but I can't find out the problem. I am definitely doing something wrong, but I have been looking at this too long to figure it out. Help?
 doesn't modify a variable in-place, it returns the new typed value. Assign it back:
The  function does not change its argument - it calculates the appropriate floating-point number required and returns that as a new object, so you have to save that somewhere if you want to use it. If you like, you can combine the  call with the updating step, eg:You may be wondering why Python works like that.As mentioned in the Python Data model docsAn object’s type determines the operations that the object supports  (e.g., “does it have a length?”) and also defines the possible values  for objects of that type. The  function returns an object’s type  (which is an object itself). Like its identity, an object’s type is  also unchangeable.[Footnote] It is possible in some cases to change an object’s type, under certain  controlled conditions. It generally isn’t a good idea though, since it  can lead to some very strange behaviour if it is handled incorrectly.So in general it's best to think of the type of an object as unchangeable. We may casually speak of converting a string to a float, but that's really just a sloppy way of saying that we are creating a float object with a numerical value that corresponds to the string object's contents.Not only can't you change an object's type, for many basic Python object types you can't even change their value! Such objects are called immutable; common immutable types include all numeric types, strings, and tuples. Apart from tuples, most built-in container types (lists, dictionaries and sets (but not frozensets)) are mutable, meaning you can modify their contents.So if you doYou aren't actually changing the string object : you can't because it's immutable. Instead, a new string object is created that contains , that new object is then bound to the name , and the old object that contained  is discarded.Similarly, if you doa new integer object is created that has the value of  and that new object is bound to the name .For more info on this topic, please see Facts and myths about Python names and values by SO veteran Ned Batchelder.
You are not storing the updated  type. You have to assign it back.do this:


Answer URL
https://docs.python.org/3/reference/datamodel.html
