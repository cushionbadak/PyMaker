Natural Text
It can be weird but I am looking for a way to get automatically all variables and method within a python script.For example,I want to getThis is a demonstrative example, I want to do this for a much bigger script.
The  module can do this fairly easily. If we assume the source is stored in a variable named  (could be read from a file):That loses ordering to gain uniquification and friendly display order, but you could just use a list comprehension or generator expression instead of a set comprehension if you don't need uniqueness but want ordering. The resulting  is:Unlike the other solutions posted so far, this will recurse into classes and functions to get the names used inside them, and doesn't require you to import the module or class to check, nor does it require you to implement recursive processing yourself; any syntactically valid Python code will work.Oddly, on Python 3 (substituting a valid  function call), you get:which adds  (as expected; it's a name now, not a keyword statement), but omits . You didn't ask for  (the argument received by ), and this doesn't produce it on Python 3. Names in function prototypes appear to not create a  node there, go figure. You can pull that info out of the  node from the  attribute of each entry in the  , but it's probably still not comprehensive; I suspect other definition related names might be missed, e.g. in class declarations with inheritance. You'd need to poke around with some examples to make sure you're checking everything (assuming you want stuff like  and want to work on Python 3).That said,  would show up just fine if you referenced it; if you passed it to  or used it in any way besides receiving and discarding it, it would show up.You can also make an effort to only handle names assigned to, not used (to exclude , ) by extending the test to:But that will also drop  (in both Py2 and Py3) because the definition itself doesn't produce an , only the use of it does. So again, you'd have to delve a little deeper into the  internals for , , etc. to get the names that aren't -ed directly.
There are a lot of variables imported by python so you're going to get a long list, but  will work. in terminal:EDITYou can clean it up a bit by checking for type of variablesin terminal: 
You can use  function to get all the global names in your module, and since python has some global names by default like  you can escape them :Since  return a dictionary contains the names and the values and builtin names have a format like  you can filter them:But note that it won't give you the local names inside the function like . For that aim you can see  module https://docs.python.org/3/library/inspect.html#inspect.getmembers
You can use dir() built-in for this. Suppose you save your file as test.py. You can do as follows:


Answer URL
https://docs.python.org/3/library/ast.html
https://docs.python.org/3/library/inspect.html#inspect.getmembers
