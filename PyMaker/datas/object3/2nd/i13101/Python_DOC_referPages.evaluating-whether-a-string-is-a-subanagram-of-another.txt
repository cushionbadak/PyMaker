Natural Text
I would like to create a function with 2 arguments (x,y) ,x and y is a string, and returns true if x is a sub anagram of y. example: "red" is a sub anagram of "reda" but "reda" is not a sub anagram of "red".So far what I have got:I have turned x,y into list and then sorted them. That way I can compare the alphabets from each string. What I am confused with:I want to compare the string y to x and if y contains all the characters from x then it returns true otherwise false
You can use .In the code above,  is basically a dictionary with the characters appearing in  and their frequency as the key, value.  Similarly for .Then the code checks that for all characters in , that character appears at least as many times in  as it does in .Edit: If a subanagram is defined to be strictly smaller than the original, e.g. you want  to be , then first compare the two counters for equality.If I were not using  for some reason, it would be something along the lines of:But as you can see, it is longer, less declarative and less efficient than using .
I don't think you can just check for each character in x being present in y, as this does not account for a character being repeated in x.  In other words, 'reeeeed' is not a sub-anagram of 'reda'.This is one way to do it:make a copy of yfor each character in x, if that character is present in the y-copy, remove it from the y-copy.  if it isn't present, return false.if you reach the end of the loop and the y-copy is empty, return false.  (x is an anagram, but not a sub-anagram.)otherwise return true.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
