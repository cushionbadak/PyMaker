Natural Text
I have sentences with horrible usage of punctuation, e.g.: I need to know the position of each "genuine" punctuation mark which particularly exclude their use in text emoticons. If I use:So I match the semicolons correctly, but I don't have their position within the string. However, when I use :I get, correctly, the whole matching group. When I use the naive approachI get the position of all "genuine" punctuation marks, but also the one that is part of the  emoticon.The example uses only , but it can be all kinds of punctuation marks: . Also, I don't have to worry about decimal numbers. Of course, I can change  to , but this would interfere with sentences that end with a number, e.g., .I guess I can apply the naive approach on the individual groups, but maybe there's a more straightforward way to do it.
When called without arguments,  returns the whole match. In your regex pattern the group containing  can be referred to as 1. Call  method of match objects with the group name as argument:outputsConsider specifying a symbolic group name, which you'll be able to use in place of 1 e.gThe output is the same.


Answer URL
https://docs.python.org/3/library/re.html#re.match.group
