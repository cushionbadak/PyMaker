Natural Text
In python, I can define a function as follows:In this case, i can call func as:I can also define a function as:which can be called asFinally, I can combine the two formsBut, what does not work is calling:My original thought was that this was probably because a functioncan be called asSo this would introduce some ambiguity as to whether 3 should be packed into args or kwargs.  However, with python 3, there is the ability to specify keyword only arguments:With this, it seems that there is no syntactic ambiguity with:However, this still brings up a syntax error (tested with Python3.2).  Is there a reason for this that I am missing?  And, is there a way to get the behavior I described above (Having *args with default arguments) -- I know I can simulate that behavior by manipulating the kwargs dictionary inside the function.
You can do that in Python 3.The bare  is only used when you want to specify keyword only arguments without accepting a variable number of positional arguments with . You don't use two s.To quote from the grammar, in Python 2, you havewhile in Python 3, you havewhich includes a provision for additional parameters after the  parameter.UPDATE:Latest Python 3 documentation here.
If you want to do a mixture of both remember that *args and **kwargs must be the last parameters specified.The comments seem to be based on mixing up how a function definition is constructed compared to how the arguments provided are assigned back to the parameters specified in the definition.This is the definition of this function which has 6 parameters.It is called by passing named and unnamed arguments to it in a function call.For this example...When an argument is named when calling the function it can be provided out of order.arg1 and arg2 are mandatory parameters and if not passed to the function as named arguments, then they must be assigned in order from the provided unnamed arguments.kw1 and kw2 have default values provided in the function definition so they are not mandatory, but if not provided for as named arguments they will take any available values from the remaining provided unnamed arguments.Any unnamed arguments left over are provided to the function in an array called argsAny named arguments that do not have a corresponding parameter name in the function definition are provided to the function call in a dictionary called kwargs.


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#def
https://docs.python.org/3/glossary.html#keyword-only-parameter
