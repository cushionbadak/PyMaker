Natural Text
I know that we can use os.walk() to list all sub-directories or all files in a directory. However, I would like to list the full directory tree content:Subdirectory 1:file11file12Sub-sub-directory 11:file111file112Subdirectory 2:file21sub-sub-directory 21sub-sub-directory 22sub-sub-sub-directory 221file 2211How to best achieve this in Python?
Here's a function to do that with formatting:
A solution without your indentation:os.walk already does the top-down, depth-first walk you are looking for.Ignoring the dirs list prevents the overlapping you mention.
I came here looking for the same thing and used dhobbs answer for me. As a way of thanking the community, I added some arguments to write to a file, as akshay asked, and made showing files optional so it is not so bit an output. Also made the indentation an optional argument so you can change it, as some like it to be 2 and others prefer 4. Used different loops so the one not showing files doesn't check if it has to on each iteration.Hope it helps someone else as dhobbs answer helped me. Thanks a lot.
Based on this fantastic post http://code.activestate.com/recipes/217212-treepy-graphically-displays-the-directory-structur/Here es a refinement to behave exactly like http://linux.die.net/man/1/tree
Similar to answers above, but for python3, arguably readable and arguably extensible:Example usage:Example output:NotesThis uses recursion. It will raise a RecursionError on really deep folder treesThe tree is lazily evaluated.  It should behave well on really wide folder trees.  Immediate children of a given folder are not lazily evaluated, though.Edit:Added bonus! criteria callback for filtering paths.
If anybody is interested - that recursive function returns nested structure of dictionaries. Keys are  names (of directories and files), values are either:sub dictionaries for directoriesstrings for files (see )The strings designating files are empty in this example. They can also be e.g. given file contents or its owner info or privileges or whatever object different than a dict. Unless it's a dictionary it can be easily distinguished from a "directory type" in further operations.Having such a tree in a filesystem:The result will be:If you like that, I've already created a package (python 2 & 3) with this stuff (and a nice  helper):https://pypi.org/project/fsforge/
You can execute 'tree' command of Linux shell.Installation:Using in python Example:This gives you a cleaner structure and is visually more comprehensive and easy to type.
On top of dhobbs answer above (https://stackoverflow.com/a/9728478/624597), here is an extra functionality of storing results to a file (I personally use it to copy and paste to FreeMind to have a nice overview of the structure, therefore I used tabs instead of spaces for indentation):
Maybe faster than @ellockie ( Maybe ) Test results in screenshot below:
This solution will only work if you have  installed on your system.  However I'm leaving this solution here just in case it helps someone else out.You can tell tree to output the tree structure as XML () or JSON ().  JSON of course can be parsed directly with python and XML can easily be read with .  With the following directory structure as an example:XMLJSON


Answer URL
https://docs.python.org/3/library/exceptions.html#RecursionError
