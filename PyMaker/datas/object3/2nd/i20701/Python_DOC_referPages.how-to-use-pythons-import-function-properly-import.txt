Natural Text
I'm trying to replicate  using the  function and I seem to have hit a wall. is easy:or The problem I'm having is that I am importing from a package (i.e. bar) and I want the script in the package to be the source of the import.So what I'd like is something likeBut this just imports the  in the foo package.How can this be done?EDIT:When I use the obvious, only the  is called
The  function will return the top level module of a package, unless you pass a nonempty  argument:See the Python docs on the  function.
How to use python's  function properly?There are two kinds of uses: direct importinga hook to alter import behaviorFor the most part, you don't really need to do either.For user-space importingBest practice is to use  instead. But if you insist:Trivial usage:Complicated:If you want the rightmost child module in the name, pass a nonempty list, e.g. , to :Or, as the documentation declares, use :DocumentationThe docs for  are the most confusing of the builtin functions. If you read it carefully, you get the sense that the API was originally intended to allow for lazy-loading of functions from modules. However, this is not how CPython works, and I am unaware if any other implementations of Python have managed to do this. Instead, CPython executes all of the code in the module's namespace on its first import, after which the module is cached in . can still be useful. But understanding what it does based on the documentation is rather hard. Full Usage of To adapt the full functionality to demonstrate the current  API, here is a wrapper function with a cleaner, better documented, API.To demonstrate, e.g. from a sister package to baz:Dynamic access of names in the moduleTo dynamically access globals by name from the baz module, use . For example:Hook to alter import behaviorYou can use  to alter or intercept importing behavior. In this case, let's just print the arguments it gets to demonstrate we're intercepting it:And now when you import you can see these important arguments.Perhaps in this context getting the globals or locals could be useful, but no specific uses for this immediately come to mind.
You should use ,  is not advised outside the interpreter.In 's docstring:Import a module. Because this function is meant for use by the Python  interpreter and not for general use it is better to use  importlib.import_module() to programmatically import a module.It also supports relative imports.
Rather than use the  function I would use the getattr function:where module is the module to look in and and model_s is your model string.  The  function is not meant to be used loosely, where as this function will get you what you want.


Answer URL
https://docs.python.org/3/library/importlib.html
