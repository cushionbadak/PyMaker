Natural Text
I need to implement a very simple web-server-like app in Python which would perform basic HTTP requests and responses and display very basic output on the web page. I am not too concerned about actually coding it in Python, but I am not sure where to start? How to set this up? One file? Multiple files? I guess I have no idea how to approach the fact that this is a "server" - so I am unfamiliar with how to approach dealing with HTTP requests/sockets/processing requests, etc. Any advice? Resources?
You can use socket programming for this purpose. The following snippet creates a tcp socket and listens on port 9000 for http requests:Start the server, .Open  in your web-browser (which acts as client). Then in the browser window, you can see the text "Hello World" (http response).EDIT**The previous code was only tested on chrome, and as you guys suggested about other browsers, the code was modified as:To make the response http-alike you can send in plain header with http version 1.1, status code 200 OK and content-type text/html.The client socket needs to be closed once response is submitted as it's a TCP socket.To properly close the client socket,  needs to be called socket.shutdown vs socket.closeThen the code was tested on chrome, firefox (http://localhost:9000/) and simple curl in terminal (curl http://localhost:9000). 
You should look at the SimpleHttpServer (py3: http.server) module.Depending on what you're trying to do, you can either just use it, or check out the module's source (py2, py3) for ideas.If you want to get more low-level, SimpleHttpServer extends BaseHttpServer (source) to make it just work.If you want to get even more low-level, take a look at SocketServer (source: py2, py3).People will often run python like  (or ) if they just want to share a directory: it's a fully functional and... simple server.
I decided to make this work in Python 3 and make it work for Chrome to use as an example for an online course I am developing.  Python 3 of course needs  and  in the right places.  Chrome - really wants to send its GET request before it gets data. I also added some error checking so it cleans up its socket if you abort the server or it blows up:The server also prints out the incoming HTTP request.  The code of course only sends text/html regardless of the request - even if the browser is asking for the favicon:But it is a pretty good example that mostly shows why you want to use a framework like Flask or DJango instead of writing your own. Thanks for the initial code.
There is a very simple solution mentioned above, but the solution above doesn't work. This solution is tested on chrome and it works. This is python 3 although it may work on python 2 since I never tested it.This is improved from the answer that was accepted, but I will post this so future users can use it easily.


Answer URL
https://docs.python.org/3/library/http.server.html
