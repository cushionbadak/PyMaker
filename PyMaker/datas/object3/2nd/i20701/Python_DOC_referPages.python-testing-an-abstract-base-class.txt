Natural Text
I am looking for ways / best practices on testing methods defined in an abstract base class. One thing I can think of directly is performing the test on all concrete subclasses of the base class, but that seems excessive at some times.Consider this example:Is it possible to test  without doing any subclassing? 
As properly put by lunaryon, it is not possible. The very purpose of ABCs containing abstract methods is that they are not instantiatable as declared. However, it is possible to create a utility function that introspects an ABC, and creates a dummy, non abstract class on the fly. This function could be called directly inside your test method/function and spare you of having to wite boiler plate code on the test file just for testing a few methods.
In newer versions of Python you can use 
Here is what I have found: If you set  attribute to be an empty set you'll be able to instantiate abstract class. This behaviour is specified in PEP 3119:If the resulting  set is non-empty, the class is considered abstract, and attempts to instantiate it will raise TypeError.So you just need to clear this attribute for the duration of tests. You cant instantiate A: If you override  you can: It works both ways: You can also use  (from 3.3) to override temporarily ABC behaviour. 
No, it's not.  The very purpose of  is to create classes that cannot be instantiated unless all abstract attributes are overridden with concrete implementations.  Hence you need to derive from the abstract base class and override all abstract methods and properties.
Perhaps a more compact version of the concreter proposed by @jsbueno could be:The resulting class still has all original abstract methods (which can be now called, even if this is not likely to be useful...) and can be mocked as needed.
You can use multiple inheritance practice to have access to the implemented methods of the abstract class. Obviously following such design decision depends on the structure of the abstract class since you need to implement abstract methods (at least bring the signature) in your test case. Here is the example for your case:


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch
