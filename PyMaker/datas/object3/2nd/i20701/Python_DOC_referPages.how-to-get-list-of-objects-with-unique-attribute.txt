Natural Text
BackgroundI have a . This  has many objects. Each object has an . Now the objects are of different types.where ProblemI want a  of unique objects based on the . Something like this:(This does not work. But I want something like this)
This works because  returns , so the expression in the list comprehension always yields , but only if  has not already been added to . (The expression could only evaluate to  if ; in that case,  would raise an exception. In case  contains  values, change the test to )Note that this will give you the first object in the list which has a given id. @Abhijit's answer will give you the last such object.Update:Alternatively, an ordereddict could be a good choice:
How about using  (since its keys are unique)?Assuming we havethen  with s unique by  field can be generated using  comprehension in Python 3in Python 2.7and in Python <2.7Finally we can write function (Python 3 version)where  may be any  and  is some  which returns  objects from  ( quals to  in our particular case).Marcin's answer works fine but don't look Pythonic to me since list comprehension mutates  object from outer scope, also there is some magic behind using  method and comparison its result (which is ) with .And final but not less important part:Benchmarkon my machine gives
Given your list of object  be something likeYou can do something like this
If you can change the class of the objects, you can add the appropriate methods which are used in set comparison:Output:
You can use the  recipe available in the  docs. This is also available in 3rd party libraries, e.g. . Note this method will keep the first instance of an object for a given attribute.If a lazy iterator is sufficient, you can omit  conversion.
A fairly simple way to do this would beAnd this should add any id not seen. Time taken is linear on the size of the source list.


Answer URL
https://docs.python.org/3/library/operator.html#operator.attrgetter
https://docs.python.org/3/library/itertools.html#itertools-recipes
