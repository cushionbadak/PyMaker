Natural Text
I have a script that runs another command, waits for it to finish, logs the stdout and stderr and based the return code does other stuff. Here is the code:The problem I'm having is that if  takes a long time to run none of the other actions get done. The possible errors won't get reported and the other stuff that needs to happen if no errors doesn't get done. It essentially doesn't go past  if it takes too long. Some times this command can takes hours (or even longer) to run and some times it can take as little as 5 seconds.Am I missing something or doing something wrong?
As per the documentation located here, it's safe to say that you're code is waiting for the subprocess to finish.If you need to go do 'other things' while you wait you could create a loop like:Pick a sleep time that's reasonable for how often you want python to wake up and check the subprocess as well as doing its 'other things'.
The  waits for the process to finish, before anything is returned. Thus it is not ideal for any long running command; and even less so if the subprocess can hang waiting for input, say prompting for a password.The  are needed only if you want to capture the output of the command into a variable. If you are OK with the output going to your terminal, then you can remove these both; and even use  instead of . Also, if you do not provide input to your subprocess, then do not use  at all, but direct that from the null device instead (in Python 3.3+ you can use ; in Python <3.3 use If you need the contents too, then instead of calling , you can read  and  yourself in chunks and output to the terminal, but it is a bit complicated, as it is easy to deadlock the program - the dummy approach would try to read from the subprocess'  while the subprocess would want to write to . For this case there are 2 remedies:you could use  to poll both  and  to see whichever becomes ready first and read from it thenor, if you do not care for  and  being combined into one,you can use  to redirect the stderr stream into the stdout stream: ; now all the output comes to  that you can read easily in loop and output the chunks, without worrying about deadlocks:If the stdout, stderr are going to be huge, you can also spool them to a file right there in ; say,


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.DEVNULL
https://docs.python.org/3/library/select.html
