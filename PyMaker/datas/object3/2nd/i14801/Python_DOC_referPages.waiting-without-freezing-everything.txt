Natural Text
I am attempting to work on a victory statement. I want screen the flash Blue and Yellow rapidly but not too rapidly when the victory requirements are met which is for now left clicking. The issue is that I cannot find a way to achieve this without making the game change based on the computer running the program. I tried to make it rerun the color several times so that the color will last longer before changing, but on a faster or a slower system, this effect will be different most likely.This just reruns the color four times before changing which is not ideal. I have tried to use a wait function but this freezes the entire program during this time which makes all other things feel really unresponsive obviously. Is there a way to make it flash without this restating idea and without freezing the whole program for however long? Thanks.Upon the use of one of the answers given by you guys, I have managed to get it to work sort of. The issue is that now, the flashing ceases whenever I use any form of input such as for instance an arrow key. Ideally, the flashing would not cease until V = 0 which would be when the game reset.This is the new version of that code shown prior. In case it matters, here is the entire loop.I would show all of the code, but it doesn't like to indent properly for the site to recognize it as code. Once, I manually put four spaces in all 500 lines. It wasn't fun.Upon request for more information, I have taken the liberty of giving all of the code. Hope this helps. Thanks.Recognize, this is not a finished product and thus may seem awkward in some respect because this program has evolved a lot. Thus might have some non used globals or some inaccurate text.
The problem is that you canÂ´t get any events for the amount of time the game pauses when you use for instance the  or  functions of the PyGame  module.To avoid this problem you could create your very own event which appears on the event queue every given number of milliseconds. You could use  to create an event:In this code we use a sort of a so-called state-machine with 3 different stages:Set , if a  event accurse,  (Next state: 2)Fill the  blue and increment , if variable  equals . (Next state: 3)Fill the  yellow and rest  to , if variable  equals . (Next state: 1)I hope this helps :)
There a two solutions to you problem, which represents the both approaches you tried: Either you wait a specific time for your next tick or you do something each tick but then you have the problem that ticks are dependent on how fast the computer is (and other factors like programs running in the background). (With tick I refer to each run through your main loop, which you probably use.)At the moment you say "okay, I want to change the background every fourth tick", with the problem that this might be every milisecond, or every second or whenever. So we need to not depend on the amount of ticks that happened but the amount of time. We can use time.perf_counter() to get the current time. This gives us:Normally you don't want to do this for every thing that is time dependent. Instead as the first thing in your while loop calculate a delta time, often called Then handle the  the same way we handled it before:The other way would be to use some kind of . As you already saw this will freeze the whole thread - but you can create more than one (of course you don't need to use threads, you could use processes or greenlets or all that other fancy multiprocessing stuff). The whole thing is a bit complicated, so I will not go into details here, but generally it is a good idea to have different threads for input and processing. The relative new  module deals with exactly that kind of problem. There are also different solutions like greenlets or threads. Doing things asyncronuos can be confusing at the beginning, the first solution can take you relative far.EDIT:My answer is independent of pygame, the events used in the other answer does this in the background for you. It is still a good idea to understand this delta time idea and to use it e.g. in physics computation. Generally being dependent on ticks (instead of time) is a bad idea and can give you unexpected behavior. It is said that the original space invaders did depend on ticks for their physics and graphics computations. Thus it sped up everytime you shoot enough enemies. This was an unexpected result (and then kept because it was a good mechanic to increase difficulty). The same problem is faced by emulators: Often old games (which depend on ticks and not on time) would run incredible fast because modern computers have much more processing power. An emulator has to take that into account and "slow processing down".
Maybe you could try:


Answer URL
https://docs.python.org/3/library/asyncio.html
