Natural Text
I'm working on porting a library so that it is compatible with both python 2 and 3.  The library receives strings or string-like objects from the calling application and I need to ensure those objects get converted to unicode strings.In python 2 I can do:In python 3 I can do:However, the best cross-version solution I have is:which certainly doesn't seem great (although it works).  Is there a better solution?I am aware of  and the  prefix but both of those solutions do not work as the inputs come from clients and are not literals in my library.
Don't re-invent the compatibility layer wheel. Use the  compatibility layer, a small one-file project that can be included with your own:Six supports every Python version since 2.6. It is contained in only one Python file, so it can be easily copied into your project. (The copyright and license notice must be retained.)It includes a  callable that does exactly this, convert a value to Unicode text:In the project source code this is defined as:
Calling the 's constructor in Python 3 with a  string will not behave as you'd expect:To see why that is, the docs for the 's constructor say:Passing a  object to  without the encoding or errors  arguments falls under the first case of returning the informal string  representation.To work around this, use something similar to Django's  (1.11):https://docs.djangoproject.com/en/1.11/_modules/django/utils/encoding/#force_textI know this will end up making you depend entirely on Django for such a tiny issue, so you can either copy the entire  module to your project, or just use Django.Also, if you don't really care about staying Python 2 compatible, be sure to check 's implementation in Django 2:https://docs.djangoproject.com/en/2.2/_modules/django/utils/encoding/#force_text


Answer URL
https://docs.python.org/3/library/stdtypes.html#str
