Natural Text
I'm trying to make a list temporarily unreadable when a flag is set to . That is, reading the list when the flag is  gives no value (as if it was empty or the list is already exhausted). Once it's set back to , the list becomes readable again and the cursor continues from where it last stopped. My current implementation resumes reading, but doesn't remember where the cursor previously was. Does anyone know how to change it? I know I could have a variable keeping track of where the cursor is/was, but is there a more elegant way?
You cannot do what you want with the generator; generators are specialised iterators, and iterators can only be iterated over once. Once they are exhausted ( has been raised), they cannot yield more items. Your code on the other hand expects  to be raised (the first loop ends), and then a second loop continues to iterate again.Instead of handling this in the generator, simply stop iterating. Create the generator once, then use it in both loops:
Your first loop works fine,you can add  after your first  loop!to see the result.But for second loop you have a miss understanding, because in second loop you cant iterate over your list from that part you have convert  to ! the second loop will began from start,so you can save the index of the last element in first loop to  variable and pass it to your function : result :
To do this would be fundamentally broken according the Python's iterator protocol:The intention of the protocol is that once an iteratorâ€™s next() method raises StopIteration, it will continue to do so on subsequent calls. Implementations that do not obey this property are deemed broken. What you should do is make this a class and store the index as an instance variable. This way you do not have to pass in arguments or rely on a global variable.
You may find the generator below of interest. Using a generator's  method we can send data back to the generator. See Yield expressions in the Python docs for further info on this feature. (The Python 3 version of that doc is here).output


Answer URL
https://docs.python.org/3/reference/expressions.html#yield-expressions
