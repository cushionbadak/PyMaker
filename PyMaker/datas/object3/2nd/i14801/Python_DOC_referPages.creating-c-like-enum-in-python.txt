Natural Text
Maybe I have already found the answer to this question in that it's not possible, but if there's a nifty trick... I'm all ears.  I'm trying to reproduce the following C enumeration list in python:However, I don't want to have to specify every value for the list because it's changing often.  Since I also have it set to a new value in the various sections, I can't use the AutoNumber methodology (e.g. VOLUME_REQUEST = 0x020000).  Anyone got a clever trick to reproduce C style enums in python, or am I stuck with reproducing it the hard way?
Please see the Python documentation for Python 3.4 if this is applicable. I wrote my code based off of what I found here.This is mostly a hack because I'm sure there is a much more efficient way to solve what I have done.Despite this is now marked as Duplicate, I think I can at least solve your problem.This 'enum' outputs are effectively:Note, the output is when the item is created using the print statement, it was meant for debug purposes, but it's the nicest way I could get the data to come out.
Maybe you could use some variant of this in Python 3. For Python 2, I simply did the following (with parentheses to avoid an ugly  at the end of each line):To handle multiple ranges, just use multiple separate  assignments. The downside is that you have to specify the final value explicitly.There seems to be some fancier methods in How can I represent an 'Enum' in Python? too, but the above should be closest to a C-style  with minimal syntactic overhead.Not a serious suggestion, but if you enjoy cryptic code and questionable practices, then the hack below seems to work as well for a C-style  (with the caveat that the enumerators are always created at module scope). Feel free to harp on it. ;) steps through its variable argument list of names and creates a variable for each, assigning increasing integer values starting from . It makes use of the  function, which return a dictionary with the global symbol table.
There is a new aenum library by the author of  which has a few extra goodies (such as a class-based  and a  class).One of the cool features available if you are using Python 3 is the built-in auto-numbering:and in use:


Answer URL
https://docs.python.org/3/library/enum.html
https://docs.python.org/3/library/enum.html
