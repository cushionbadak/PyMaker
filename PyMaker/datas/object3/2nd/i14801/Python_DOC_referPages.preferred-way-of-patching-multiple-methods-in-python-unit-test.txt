Natural Text
I need to patch three methods (,  and )  with mock methods before testing a call to a fourth method () in a unit test of mine.From looking at the documentation for the mock package, there's a few ways I could go about it:With  as decoratorWith  as context managerWith multiple  decoratorationsManually replacing methods using Personally I think the last one is clearest to read, and will not result in horribly long lines if the number of mocked methods grow. It also avoids having to pass in  as the first () argument to .But I don't find any of them particularly nice. Especially the multiple  approach, which requires careful matching of the parameter order to the nested decorations.Is there some approach I've missed, or a way to make this more readable? What do you do when you need to patch multiple methods on the instance/class under test?
No you didn't have missed anything really different from what you proposed. About readability my taste is for decorator way because it remove the mocking stuff from test body... but it is just taste.You are right: if you patch the static instance of the method by  you must use self in  family check methods. But your case is just a small class because you know exactly what object you need to patch and you don't really need other context for your patch than test method.You need just patch your object use it for all your test: often in tests you cannot have the instance to patch before doing your call and in these cases  cannot be used: you can just patch the static instance of the methods instead.If you are bothered by passing the instance to  methods consider to use  to break the dependency. Finally I wrote hundreds of test like that and I never had a problem about the arguments order.My standard approach at your test isPatching is out of the test method code Every mock starts by  prefixI prefer to use simple  call and absolute path: it is clear and neat what you are doingFinally: maybe create  and stop it are  and  responsibility and tests should take in account just to patch some methods and do the checks.I hope that answer is useful but the question don't have a unique valid answer because readability is not an absolute concept and depends from the reader. Moreover even the title speaking about general case, question examples are about the specific class of problem where you should patch methods of the object to test.[EDIT]I though a while about this question and I found what bother me: you are trying to test and sense on private methods. When this happen the first thing that you should ask is why? There are a lot chances that the answer is because these methods should be public methods of private collaborators (that not my words). In that new scenario you should sense on private collaborators and you cannot change just your object. What you need to do is to patch the static instance of some other classes.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.ANY
