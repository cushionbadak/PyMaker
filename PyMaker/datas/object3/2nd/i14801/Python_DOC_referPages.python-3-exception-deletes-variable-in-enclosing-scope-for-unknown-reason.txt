Natural Text
I have the following code:In Python 2.7, this runs as expected and prints:However in Python 3.x, the first line is printed, but the second line is not. It seems to delete the variable in the enclosing scope, giving me the following traceback from the last print statement:It is almost as if a  statement is inserted after the  block. Is there any reasoning for this sort of behavior? I could understand it if  the Python developers wanted except blocks to have their own local scope, and not leak into the surrounding scope, but why must it delete a variable in the outer scope that was previously assigned?
Quoting the documentation of ,When an exception has been assigned using , it is cleared at the end of the except clause. This is as ifwas translated toThis means the exception must be assigned to a different name to be able to refer to it after the except clause. Exceptions are cleared because with the traceback attached to them, they form a reference cycle with the stack frame, keeping all locals in that frame alive until the next garbage collection occurs.This is covered in these two PEPs.PEP 3110 - Catching Exceptions in Python 3000PEP 344  - Exception Chaining and Embedded Tracebacks


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#the-try-statement
