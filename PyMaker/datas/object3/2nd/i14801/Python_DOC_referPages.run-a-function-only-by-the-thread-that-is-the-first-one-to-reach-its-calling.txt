Natural Text
I'm kinda stumped here. Here's the code.Basically, whenever  is called, it launches several  threads that perform subprocesses specified in . These subprocesses may return the  value at different speeds. Also, they may not return a valid value (in that case  will return ). But one (or more than one) of the threads will eventually reach .My question is: how can I make  run only ONCE per that calling of ? In other words, how can I make only the thread that reaches it first to call it, and make all others ignore it? Maybe I can kill other threads from the "winner" thread after it calls ?
This sounds like it would be well suited to using  -- a way of submitting and controlling multiple jobs. Here you have many helper threads that do the leg work of calling the subprocess and one master thread that collects the results and decides what to do with them. For instance:As applied to your problem:
You should use a global variable as a guard: the first thread to reach that point of execution sets the variable, and other threads, when seeing the variable is already set, skip that piece of code:"Manually" killing a thread is almost never a good idea. Let them die when they reach the end of the function, preventing them from doing work by setting a guard.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
