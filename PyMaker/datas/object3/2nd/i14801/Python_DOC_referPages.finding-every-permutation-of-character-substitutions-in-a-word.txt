Natural Text
While it may seem an already-answered question, it's not.I am trying to find a way to do the following:I have a known string, e.g "I love dogs"I have a bunch of possible characters, eg "@!470"I have a bunch of characters that should be substitute in the "known string", e.g s,eI want a way to substitute for every interaction, in the known string "I Love dogs", 1 single character known in "possible characters", and let everything else unchanged.When finished, start substituting 2 characters at a timeWhen finished, start substituting 3 characters at a timeAnd so on till I have no more "possible characters"An example of the output expected is described below:I have known string "This is my string"I have a list of possible characters "!$"I have the characters to substitute "is"First, the program would proceed by changing every i in !, having:Next, it would change s in $:Now I finished the 1-character permutation and I need to start 2 characters permutations:Since I have only 1 pair, I only have one possible permutation here, hence the program finishes.I am trying to figure out how to do this in python, but I only end up in an infinite list of "if .. then.." and there must be a more efficient way of doing it.For those curious, I am interested in this because I "lost" my password. I mean, my password is something like "I love ice cream", but being the responsible person I am, I changed some of the characters with symbols and now I have no clue what was it...
This doesn't do exactly what you're asking for, but it might help:It uses  to iterate over every possible combination of  for :I've reformatted the output for compactness, but you get the idea. Obviously, the number of candidate passwords is going to increase exponentially with the number of substitutions, but there's not much you can do about that.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
