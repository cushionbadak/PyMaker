Natural Text
I want to replace some elements of a list immediately.Suppose we have these lists:I want to replace elements 1, 3, 4 from  with  values. for example :so the final list is => I know you can use it in this way in Matlab, but want to know what should I do in Python?Note : I know it's possible to use loops and do this.Edit : I want to use a pure python solution.
The "pythonic" way would be to use :Python itself doesn't support matlab-style array operations, but you can look into numpy if you're interested in that coding style (see @abarnert's answer). 
A slightly slower version without loops:
Since you're looking for a Matlab-like solution, there's a good chance you should really be using NumPy here. In fact, if you do things that way, you can write exactly the code you wanted:Besides giving you Matlab-ish element-wise operators and functions, NumPy also gives you convenient multi-dimensional arrays, and access to a huge library of higher-level functions (especially if you include adjunct libraries like SciPy). Plus you typically get performance benefits like, e.g., 6x speed and .25x space.If you want a pure-Python solution, it's not that hard to implement this much of NumPy (or as much as you need) in Python. You can write your own  class that emulates a container type in any way you want. In particular, note that  calls . You probably want to handle single numbers and slices the same way as , but there's nothing at all stopping you from handling other types that  rejects. For example:(You'd probably want to add a bit of error-handling for the case where  and  have different lengths. You could work out the best rules from first principles, or start by looking at what NumPy does and just decide what you do and don't want to copyâ€¦)Of course it's not an accident that the guts of this implementation will be code very much like alexis's answer, because all we're doing is wrapping up that logic so you only have to write it once, instead of every time you need it.


Answer URL
https://docs.python.org/3/reference/datamodel.html#emulating-container-types
