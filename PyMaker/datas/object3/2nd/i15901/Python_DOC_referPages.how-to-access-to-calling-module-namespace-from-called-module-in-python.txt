Natural Text
I made a tiny sql renderer/wrapper for SQLite. The main idea is to write:instead ofHere is the code:It works, but when I move the class  to a separate module (file sqlwrap.py) and import it, the program crashes with:I.e. variable i is not visible from the other module. How to overcome this?
This goes against normal scope rules of most programming languages.Normally you don't want that functions (or methods) that you call somehow magically do things with your own variables. That means, that only those variable values (!) are accessible to the called routine, which you explicitly added as parameter.When you in your first code (all in one module) move your for loop with the i into an own function will run into the same problem -- than i will be local to this function and not visible to SQLwrapper.Scope rules intentionally limit the access of variables to those which are "in scope" and don't give access to things that are "out of scope". Thus some information hiding is done and complexity is reduced.This implies some writing overhead in some situations, but also makes the programs more save by inhibiting some dangerous practices and complexity.I would recommend something like that, when you only intend to use SQLite (or MySQL):Thus you have a more readable and understandable version, but without the scope problems you encountered. The @-prefix works on SQLite and as much I know, also in MySQL -- but it is DB specific (sadly, SQL did not standardize it). In the documentation for the sqlite3-module an other prefix is used ':' this also works in SQLite, but I don't know on which other DB.See: sqlite3.Cursor.execute documentationBTW, if you want to reduce your writing overhead a little bit, you could write some wrapper like that:Thus you can call execute with a little less overhead (and less brackets):


Answer URL
https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute
