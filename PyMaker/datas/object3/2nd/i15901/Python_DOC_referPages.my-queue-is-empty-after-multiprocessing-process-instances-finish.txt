Natural Text
I have a python script where at the top of the file I have:I have learned that Queues are process safe data structures. I have a method:The  function here actually calls a celery worker, but I don't think is relevant (it is an asynchronous process call).I also have:Lastly I have a  function:The result from the print statement is a 0. Yet if I include a print statement of the size of  in , while the program is running, I can see that the size is increasing and things are being added to the queue.Ideas of what is happening?
It looks like there's a simpler solution to this problem.You're building a list of futures. The whole point of futures is that they're future results. In particular, whatever each function returns, that's the (eventual) value of the future. So, don't do the whole "push results onto a queue" thing at all, just return them from the task function, and pick them up from the futures.The simplest way to do this is to break that loop up so that each key is a separate task, with a separate future. I don't know whether that's appropriate for your real code, but if it is:Of course that doesn't do the grouping. But do you need it?The most likely reason for the grouping to be necessary is that the tasks are so tiny that the overhead in scheduling them (and pickling the inputs and outputs) swamps the actual work. If that's true, then you can almost certainly wait until a whole batch is done to return any results. Especially given that you're not even looking at the results until they're all done anyway. (This model of "split into groups, process each group, merge back together" is pretty common in cases like numerical work, where each element may be tiny, or elements may not be independent of each other, but there are groups that are big enough or independent from the rest of the work.)At any rate, that's almost as simple:Or, if you prefer to first wait and then calculate:But again, I doubt you need even this.
You need to use a , not a .  is thread-safe, not process-safe, so the changes you make to it in one process are not reflected in any others.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#future-objects
