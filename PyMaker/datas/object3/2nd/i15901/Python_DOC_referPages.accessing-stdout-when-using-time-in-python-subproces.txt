Natural Text
I have been doing some manual benchmark tests in my shell using the  command. I would like to scale my benchmarks by writing a python script that both automates the tests and affords me access to the time data so that I can record it in the format of my choosing (likely a csv). I see there is the  module, but that seems like it is more for benchmarking python code, where what I am trying to benchmark here are programs run in the command line.This is what I have been doing manually:My initial attempt to implement this in a script looks like:I can access the output of  just fine – this is delivered to stderr, however I am not getting 's output as expected in stdout. If I remove  from  and change  to True, I then get the program's output in stdout – however obviously not 's output, which is the whole point.If I add  back to cmnd with , I get time's output but  doesn't actually run.How can I get both working?
Instead of trying to get this to work, why not use the functionality built into Python in the  module?If you need to distinguish different child processes running simultaneously,  isn't obviously not sufficient. In that case, you need to use  or similar to get per-process resource usage. This makes your use of  more complicated. What you'd probably want to do for this case is subclass or fork the  code (but make sure to use  backport if you're on 3.1 or earlier to avoid the bugs in —and so that the class actually has the method you want to hook…) and change the  method to use  instead of  and stash the extra results in, e.g.,  so you can access it later.I think something like this would work:


Answer URL
https://docs.python.org/3/library/os.html#os.wait4
