Natural Text
I am trying to read in a file that is composed of groups of data each having a header line.  The number of groups associated with each header can vary.  In the example below you can see that the lines that begin with an 'A' are a header record and the 'B' and 'C' lines are associated with the 'A' record that immediately precedes it.  The second group shows a header record with 4 detail records associated.  Here is an example of the data-How can I get a list for each header record like the following-I've tried several generators functions but I can't seem to figure out how to group the "secondary" (The 3rd list above) records to a previous header record.The following is what I came up so far, but it doesn't work when there are more than 2 records per header i.e. it skips the B2222 and C2222. Any help is appreciated!
Your problem is that, instead of creating a list of lines, you're trying to create a fixed number (2) of separate variables. What you want to do is to keep reading lines until you get one that starts with  (or reach the end), and  each one to a list until that happens.This is a more general principle: if you want a variable number of anything, like 2 to 4 lines, you generally need a list (or other collection) and a loop.Also, calling  in the middle of a  isn't illegal or anything, but it is going to make it very hard to follow what's happening. You could put another loop inside the outer loop to keep reading until the next , and then somehow "put back" that  line for the next group, but there's no reason for that; just use a single, flat loop.This is what I meant in the comments by:loop over the lines one by one, keeping a "current group" list that you store and start over each time you hit another line starting with "A"In other words:You should be able to figure out how to add your  case and your  and so on from here.There are more concise ways to do this is to use . For example, you can group the lines into alternating groups based on whether they start with  or not, then zip the pairs together and chain them:Alternatively, you can use a more complicated grouping function so you don't need the zipping and chaining part. However you write it, it's going to work out to be about 3 lines of code, but probably not understandable to a novice.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/library/itertools.html#itertools.groupby
