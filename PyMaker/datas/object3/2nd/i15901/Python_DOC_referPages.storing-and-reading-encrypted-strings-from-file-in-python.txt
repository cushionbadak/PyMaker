Natural Text
I'm using AES (from PyCrypto) to encrypt passwords and store it in a file. The format of the file is:And this is the method I used for encryption:Now, how do I read the key from the file for decrypting it? If I use line.split(":"), wouldn't it cause problem if the encrypted key itself had ":" as a character?Is there any way to avoid ":" while encrypting it? Or is there a better way for storing the keys? I cannot use hashing as I need the key for some other functionality. Thanks.
Now, how do I read the key from the file for decrypting it? If I use line.split(":"), wouldn't it cause problem if the encrypted key itself had ":" as a character?Of course it wouldâ€”that's why exactly  has a second, optional argument :Alternatively, you can use :The difference between the two is what happens when there isn't a colon at all; the former will return one element, giving you a  from trying to unpack it into two variables, while the latter will just give you an empty .However, it's worth noting that if you're using Base 64,  is never going to appear in the first place. The only character used by Base 64 are -, -, -, , and . There are some Base 64 variants, and maybe one of them does use , but the standard version, as applied by Python's  module, does not.
Store the username in the first line and password in the second line, as the followingThis way you won't need to do this sort of things.Although the best solution is to store these kind of things in the database.
You can constrain how many splits are performed:As long as you know the fieldname doesn't have a ':' in it, this should work fine.


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.split
