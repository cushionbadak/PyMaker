Natural Text
I have a list called scores of varying -log probabilities.when I call this function: and print , I realize that the  loses its precision as a float. Is there a way I can get the maxState without losing precision? ex: I print out the list scores: and print maxState, I get this: (You can see it's rounded)
You are confusing string presentation with actual contents. Nowhere is precision lost, only the string produced to write to your console is using a rounded value rather than show you all digits. And always remember that float numbers are digital approximations, not precise values.Python floats are formatted differently when using the  and  functions; in a list or other container,  is used, but print it directly and  is used.If you don't like either option, format it explicitly with the  function and specifying a precision:to print it with 8 decimals, for example.Demo:The  output is roughly equivalent to using  as the format, while  is equivalent to ; here the precision denotes when to use scientific notation () and when to display in floating point notation ().I say roughly because the  output aims to give you round-trippable output; see the change notes for Python 3.1 on  representation, which where backported to Python 2.7:What is new is how the number gets displayed. Formerly, Python used a simple approach. The value of  was computed as  which evaluated to . The advantage of using 17 digits was that it relied on IEEE-754 guarantees to assure that  would round-trip exactly to its original value. The disadvantage is that many people found the output to be confusing (mistaking intrinsic limitations of binary floating point representation as being a problem with Python itself).The new algorithm for  is smarter and returns . Effectively, it searches all equivalent string representations (ones that get stored with the same underlying float value) and returns the shortest representation.


Answer URL
https://docs.python.org/3/whatsnew/3.1.html#other-language-changes
