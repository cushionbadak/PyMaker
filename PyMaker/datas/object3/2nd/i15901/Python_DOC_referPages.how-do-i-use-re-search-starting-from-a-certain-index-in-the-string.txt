Natural Text
Seems like a simple thing but I'm not seeing it. How do I start the search in the middle of a string?
The  function doesn't take a  argument like the  methods do. But  method of a compiled / pattern does take a  argument.This makes sense if you think about it. If you really need to use the same regular expressions over and over, you probably should be compiling them. Not so much for efficiency—the cache works nicely for most applications—but just for readability.But what if you need to use the top-level function, because you can't pre-compile your patterns for some reason?Well, there are plenty of third-party regular expression libraries. Some of these wrap PCRE or Google's RE2 or ICU, some implement regular expressions from scratch, and they all have at least slightly different, sometimes radically different, APIs.But the  module, which is being designed to be an eventual replacement for  in the stdlib (although it's been bumped a couple times now because it's not quite ready) is pretty much usable as a drop-in replacement for , and (among other extensions) it takes  and  arguments on its  function.Normally, the most common reason you'd want to do this is to "find the next match after the one I just found", and there's a much easier way to do that: use  instead of . For example, this str-method loop:… translates to this much nicer regex loop:When that isn't appropriate, you can always slice the string:But  that makes an extra copy of half your string, which could be a problem if  is actually, say, a 12GB . (Of course for the 12GB  case, you'd probably want to map a new window… but there are cases where that won't help.)Finally, you can always just modify your pattern to skip over  characters:All I've done here is to add, e.g.,  to the start of the pattern, which means to match exactly 20 of any character, plus whatever else you were trying to match. Here's a simple example:Debuggex DemoIf I give this , it will match the first  after the 3rd character—that is, the second .But notice that what it actually matches . Because I'm using capture groups for my real pattern, and I'm not putting the  in a group,  and so on will work exactly as I'd want them to, but  will give me the wrong thing. If that matters, you need lookbehind.


Answer URL
https://docs.python.org/3/library/re.html#re.search
https://docs.python.org/3/library/re.html#regular-expression-objects
https://docs.python.org/3/library/re.html#re.finditer
