Natural Text
This question already has an answer here:How to create full compressed tar file using Python?                    3 answers                Let say I have this code that moves files in another directory:So how could I archive (or compress) file just before moving it to antoher directory (does not matter zip or tar.gz)? (original file should only be in archive state, not like when you manually archive it, it leaves original file un-archived)I saw there a lib , where you could do something like that, but I saw some examples ofr archiving whole directory, but what I need is to archive each file separately.ExampleInit statefiles in there:file in there: noneNow compressing files and moving them to another directory:Final statefile in there: nonefiles in there:
Archives don't really make sense if all you going to do is put one file into each of them.Or did you mean to compress them, e.g. using the gzip or bz2 module?If you indeed really want archives with only a single file, create a tar or ZIP object and just add it straight away, e.g. for TarFile.add.Note that while it is very common when using unix-like operating systems to compress single files using bz2 or gzip doing so is very uncommon on other platforms, e.g. Windows. There the recommendation would be to use ZIP files, even for single files, since they are handled well by applications (Windows Explorer and others).To put a single file into a ZIP file do something similar to this:Not passing  to  will result in an uncompressed zip file.To compress a single file using e.g. gzip:The  and a (not available for Python 2) APIs are the same, just import / and use  instead.After both  blocks you can delete the original file () and move the archive file to the correct location. Alternatively, create the archive file directly in the correct location ( the target location and the archive name).
The standard library contains zipfile module for working with .zip archives, gzip module for working with  compressed files and bz2 module for working with  compressed files (the later is slower, but yields better compression).Python 3.3 also introduces [lzma] (for  and  files), which has even better compression ratio, but it does not seem to be backported to 2.7.Note that a single file does not need , a  will do. Because  is two levels.  to put several files together and  to compress it and you don't need the first  part if you have just one. Zip does both things, so for single file it is slightly less efficient than gz (they use the same compression method), but you may have some tool that understands zip files and not gz files, so there may be some reason to use it.To create single compressed file with gzip, bz2 or [lzma], you just use  function from the respective module and then use shutil.copyfileobj to copy the content of the source file to the archive.


Answer URL
https://docs.python.org/3/library/gzip.html
https://docs.python.org/3/library/bz2.html
https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.add
