Natural Text
I have a pool of processes in python using .  I pass to those processes different functions to be ran, calling the  function. If I introduce an error in one of those functions (i.e.: a line of code such as ), the expected command line report  never shows up, and the program never terminates.  Even if I introduce a callback function in the call to , the callback function never gets called if the function that the process has to execute has an error on it.How can I have those processes in the pool report errors and terminate if something goes wrong?
You have to actually try to  the result from the  returned by  (or ) for the exception to be raised in the parent.Any  you provide is only executed if the function returns successfully. It gets skipped if it raises an exception. In Python 3.2+, the  keyword argument was introduced, which allows you to pass a callback that gets executed if an exception is raised in the worker, but you can't do that in Python 2.x. What you can do is use wrap your worker function in a / block that returns any exception raised in the worker, rather than raising it:Then you can have a normal callback function that checks to see if an  was returned:


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.apply_async
