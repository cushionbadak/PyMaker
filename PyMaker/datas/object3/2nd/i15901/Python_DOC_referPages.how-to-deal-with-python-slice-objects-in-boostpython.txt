Natural Text
Suppose there is a class  in C++. It implements an array of  In order to make a  function for it in Python, I do something like thisIt is possible to get indices in  by using these functions. However, "Boost::Python is designed with the idea in mind that users never touch a PyObject*".Is there a better 'boost way' to do this?
Boost.Python is designed to minimize the need to interact with , and it often accomplishes this by:Providing higher-level type wrappers.Allowing access to the Python object's interface through the associated .For example, one can access the Python object's interface through C++ in a similar manner as  one would do in Python.  The following demonstrates accessing the  attribute of a  that refers to a Python  instance:While this approach works, it tends to result in much boilerplate code: creating defaults when  is provided, handling zero-length slices, and converting negative indexes to positive index.  In this case, Boost.Python provides a higher-level type wrapper  that has a  member-function that will remove much of the boilerplate code.  Here is a complete minimal example:Interactive usage:


Answer URL
https://docs.python.org/3/c-api/slice.html
