Natural Text
I recently wrote some code that looked something like this:However, I later found that I could achieve the same results with:This discovery got me thinking and I began to run some tests to see if there could be a scenario when I must use the  method of a dictionary.  My conclusion however is no, there is not.If I want the keys in a list, I can do:If I want to iterate over the keys, I can do:Lastly, if I want to test if a key is in , I can use  as I did above.Summed up, my question is: am I missing something?  Could there ever be a scenario where I must use the  method?...or is it simply a leftover method from an earlier installation of Python that should be ignored?
On Python 3, use  to get a dictionary view object, which lets you do set operations on just the keys:In Python 2, you'd use  for that.In Python 2,  returns a list, a copy of the keys in the dictionary. This can be passed around an a separate object that can be manipulated in its own right, including removing elements without affecting the dictionary itself; however, you can create the same list with , which works in both Python 2 and 3. You indeed don't want any of these for iteration or membership testing; always use  and  for those, respectively.
Source: PEP 234, PEP 3106Python 2's relatively useless  method exists for historical reasons. Originally, dicts weren't iterable. In fact, there was no such thing as an iterator; iterating over sequences worked by calling , the element access method, with increasing integer indices until an  was raised. To iterate over the keys of a dict, you had to call the  method to get an explicit list of keys and iterate over that.When iterators went in, dicts became iterable, because it was more convenient, faster, and all around better to saythanThis had the side-effect of making  utterly superfluous;  and  now did everything  did in a cleaner, more general way. They couldn't get rid of , though, since so much code already called it.(At this time, dicts also got a  method, so you could say  instead of . This was shorter and nicely symmetrical with ; the symmetry is also why iterating over a dict gives the keys instead of (key, value) pairs.)In Python 3, taking inspiration from the Java Collections Framework, the , , and  methods of dicts were changed. Instead of returning lists, they would return views of the original dict. The key and item views would support set-like operations, and all views would be wrappers around the underlying dict, reflecting any changes to the dict. This made  useful again.
Assuming you're not using Python 3,  is equivalent to . Which one you use is a matter of personal preference. I personally think  is slightly clearer, but to each their own.In any case, there isn't a scenario where you "need" to use  per se.In Python 3,  returns a "dictionary view object", so if you need to get a hold of an unmaterialized view to the keys (which could be useful for huge dictionaries) outside of a  loop context, you'd need to use .
key in dict is much faster than checkingkey in dict.keys()


Answer URL
