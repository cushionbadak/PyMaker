Natural Text
I would like to add context to an exception like this:I found a way that is uncharacteristically long winded for Python. Is there a better way than this?
The first item in  is always the message -- if there is any. (Note for some exceptions, such as the one raised by ,  is an empty tuple.) I don't know of a cleaner way to modify the message than reassigning a new tuple to . (We can't modify the tuple since tuples are immutable). The code below is similar to yours, except it constructs the tuple without using an intermediate list, it handles the case when  is empty, and to make the code more readable, it hides the boilerplate inside a context manager:yields a stack trace with this as the final message:
You could just raise a new exception:On Python 3 you don't need to provide the old exception explicitly, it will be available as  attribute on the new exception object and the default exception handler will report it automatically:In you case, you should probably use the explicit  syntax that sets  attribute on the new exception, see Exception Chaining and Embedded Tracebacks.If the only issue is the verbosity of the message-amending code in your question; you could encapsulate it in a function:where:


Answer URL
