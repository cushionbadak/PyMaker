Natural Text
I am looking through some unit testing code and I found this:I know that this means  in Python 3 which returns a byte array, as I found here.  I believe that the code was written for Python 3.3 and am trying to figure out how it works in other versions (in my case 2.7)  The related question that I found had a poorly-written accepted answer with contradictory comments that confused me.Questions:In what versions of python does  "work"?How does it behave in python 2.x?How does it behave in python 3.x?Does that have something to do with the byte literal change?
This is all described in the document you linked.In what versions of python does  "work"?: 2.6+.How does it behave in python 2.x? It creates a  literal—which is the exact same thing as a  literal in 2.x.How does it behave in python 3.x? It creates a  literal—which is not the same thing as a  literal in 3.x.Does that have something to do with the byte literal change? Yes. That's the whole point; it lets you write "future compatible" code—or code that works in both 2.6+ and 3.0+ without .Quoting from the first paragraph in the section you linked:For future compatibility, Python 2.6 adds  as a synonym for the  type, and it also supports the b'' notation.Note that, as it says a few lines down, Python 2.x / is not exactly the same type as Python 3.x : "most notably, the constructor is completely different". But bytes literals are the same, except in the edge case where you're putting Unicode characters into a bytes literal (which has no defined meaning in 2.x, but does something arbitrary that may sometimes happen to be what you'd hoped, while in 3.x it's a guaranteed ).


Answer URL
