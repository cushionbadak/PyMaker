Natural Text
I am using glade as my gui and creating a process to run my gui in. This app will open a socket when 'on' is clicked. When i press 'send', it will send whatever is in an textfield to the socket. The socket receives this data and sends it back. The problem is after i send data to the socket the thread doesn't terminate. Also after i close my gui it calls a sys.exit() but also leaves a process and doesn't terminate. I believe the error is in how i am implementing my processes or all my processing in general. Can anyone shine some light on this? It also relates to my last post as well. Thanksmain.py// Main thread that create a new process for my gui and displays ithandler.py// Handler for gtk glade signals, creates new threads and handles button and stuffserver.py// Opens a socket and listens for incoming data and sends it backclient.py// Sends whatever is inside text area to socket
This is just wrong:First, you can't start the gtk main loop in a subprocess, even if you did it rigth. Fortunately the process never really tries to start  as you call , which will block until the main loop exits and then return . So what you're actually doing is:Througout the rest of your code you keep creating new processes and then forgetting about them. If you would keep a reference to them, you could at least try to send the  signal to them to shut them down (using , or set the  flag). If you want to shut down the subprocess cleanly, you either need to handle that signal in the subprocess, or use other IPC mechanisms to get it to shut down cleanly (like , ...).Then there is this:This while loop will never loop (unless  magically returns something else then a string). The first execution path ends with  (taking the whole server down - the break is unreachable), the second ends with , so the loop is useless.A few lines below you have the exact opposite:Unless  was  in the first line, this will be an endless loop, as 's value won't change anymore.Generally you don't really need multiprocessing for most of this. Starting a server in a different process may be ok if if has to do a lot of work, but spawing a subprocess just to send some data is overkill. Sending and receiving using sockets are IO bound, using threading here would be more reasonable.You have two classes ( and ) which have only two methods, one of which is , and the other one is only used as target for a subprocess:and:That's a sign that these shouldn't be classes but functions.


Answer URL
