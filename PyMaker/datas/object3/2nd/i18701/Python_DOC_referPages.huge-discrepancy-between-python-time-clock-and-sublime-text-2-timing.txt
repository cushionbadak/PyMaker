Natural Text
I'm trying to compare the run times of two different algorithms for determining whether a number is prime, using Python's time module, for example:primesComparisonTXT() is a function that returns a list of the confirmed primes in (1, 1000000). isFermatProbablePrime() is a function that takes in 1. a suspected prime 2. a parameter that indicates how many times that suspected prime should be tested for primality using Fermat's primality test. The function returns True or False depending whether the suspect is a probable prime. (http://en.wikipedia.org/wiki/Fermat_primality_test)The algorithm correctly outputs that every prime in that list is indeed a probable prime, but I'm getting largely different results for the timing. 4.57107920129 is what's printed as "total," but Sublime Text states that the build was "[Finished in 15.1s]". Sublime's timing is more accurate. Is there any particular reason for this discrepancy; perhaps a better timing method should be used (timeit)?
This is exactly what you should expect. As the docs say:On Unix, return the current processor time as a floating point number expressed in seconds. The precision, and in fact the very definition of the meaning of “processor time”, depends on that of the C function of the same name…POSIX says that the C function:… shall return the implementation's best approximation to the processor time used by the process since the beginning of an implementation-defined era related only to the process invocation.In other words, this is processor time, not wall-clock time. If your processor is doing anything else (like, say, running other programs), or waiting around doing nothing while your program blocks on I/O, it isn't counted.Actually, it's even worse than that—such time may be counted on some Unix and Unix-like systems, and will be counted on Windows… so if you don't understand your platform, it's not necessarily easy to understand what  actually means.At any rate, the time reported by  should be <= the wall-clock time, not ==.
That's not how you do timing in python. Use the timeit module: http://docs.python.org/2/library/timeit.htmlWrap your code up in a function, and use:


Answer URL
