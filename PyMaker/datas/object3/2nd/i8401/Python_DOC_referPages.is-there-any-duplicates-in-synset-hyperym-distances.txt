Natural Text
I was just looking around the function (hypernym_distances()) and when I saw the result of all the possible hypernyms there were two "entity.n.01" elements with different distances,what is the reason for it ? could anyone please explain about this?In Python:This above code will display all hypernyms that lead to final term 'entity' is displayed.The output is :[{Synset('entity.n.01'): 3}, {Synset('object.n.01'): 4}, {Synset('physical_entity.n.01'): 5}, {Synset('organism.n.01'): 1}, {Synset('person.n.01'): 0}, {Synset('entity.n.01'): 6}, {Synset('living_thing.n.01'): 2}, {Synset('physical_entity.n.01'): 2}, {Synset('causal_agent.n.01'): 1}, {Synset('whole.n.02'): 3}]This is a name-value pair containing the synset which is one of the hypernym of the the specified word.Could anyone explain what is the reason for the appearing of the 'entity.n.01' two times in the output.{Synset('entity.n.01'): 6}{Synset('entity.n.01'): 3}
When code is obtuse, break them down.Also, try not to use one-liner, they usually have no computational speed ups other than just how fast you can type them.Know what you're iterating throughSo let's break the down.In the complicated print of a list comprehension that creates a dictionary for every element the list iteration, we see:It looks like the loop itself can be simplified. First set a variable to keep the synset. (I assume that you would want the same operation on several synsets instead of only using it only on ):Now let's see what  returns:The data structure of  is already a set of tuple where the first element is the hypernym and the second element is the distance. And  should only occur once in  since it's  type.Unpacking iterable of tuples/iterables in a loopWhen iterating through a tuple, you can easily "unpack" it (see Unpacking a list / tuple of pairs into two lists / tuples and How can I iterate through two lists in parallel?) By iterating through the list of tuples in the above way you avoid the ugly  syntax. Instead do .List vs Dict comprehensionIt seems like you are trying to put the tuples from  into a dictionary where the key is the synset and the value is the count. I guess the mistake comes when you're tripped between  and . There isn't a need to create a new dictionary for every element in . Instead, I think the dictionary comprehension is what you're looking for, i.e.:Casting list of tuples into dictionaryActually, if the dictionary above is what you want given an iterable of tuples with 2 items per tuple, casting the iterable into a dictionary would automatically set the first item in the tuple as the key and the second as the value:See alsoThere're high performance containers data structures in native python that can handle these, they come with nifty functions too. See https://docs.python.org/3/library/collections.html


Answer URL
https://docs.python.org/3/library/collections.html
