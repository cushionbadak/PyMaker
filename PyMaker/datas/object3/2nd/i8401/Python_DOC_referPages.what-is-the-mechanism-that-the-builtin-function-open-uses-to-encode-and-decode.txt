Natural Text
I have a little confusion about . I'm running Windows 10, when I call  I get  so if I pass the filename to  for example:Supposedly, the encoding for the source file is utf-8. Does  encodes the filename  with  encoding which is set to the default Windows ANSI codepage? And then passes the requests to the OS?Generally speaking, what happens when you pass filename to  as unicode in 2.X and  in 3.X? Is it true when the filename is passed as a  object in 3.X or  in 2.X, overrides the default automatic encoding of the filename?
Here's what happens internally when using the builtin  in 2.7 to be precise: Python sets a constant that names the default encoding of filenames, this constant is called  and varies per-platform. Ultimately, when its value is set to Null, Python will try to get the default encoding of the platform if there's any:  uses "mbcs" (Multi-byte-character-set) Windows encoding, you can check the value of  using  call:Python 2.7 Documentation:  On Windows NT+, file names are Unicode natively, so no conversion is performed.  still returns 'mbcs', as this is the encoding that applications should use when they explicitly want to convert Unicode strings to byte strings that are equivalent when used as file names.So for example let's assume when a filename with Chinese characters, for simplicity I'm going to use U+5F08 Chinese chess CJK for the filename that I'm going to write: Generally speaking, what happens when you pass filename to  as unicode in 2.X and  in 3.X?This answer is platform-dependent. For instance, in Windows, there's no need to convert Unicode strings to any encoding, not even with the default filesystem encoding "mbcs", to prove that: By the way, even if you use 'utf-8' encoding, you'll not get the correct filename: This will give you å¼ˆ.txt filename if you check that on Windows instead of 弈.txt. In conclusion, there's no conversion for Unicode filenames apparently. I think this rule applies to  too. Since  in 2.X is a raw byte string, Python won't pick encoding magically **I cannot verify this however and it might be possible that Python will decode  with "mbcs" encoding. It's possible to verify that I believe by using characters outside "mbcs" code pages character set, but this is again will depend on your Windows locale settings. So much is encapsulated at the lower level in Windows implementation. If memory serves, I think "mbcs" now is considered legacy for Windows APIs.   Python 3.6 uses UTF-8 instead, unless the legacy mode is enabled. Really though, it seems the issue is deep into Windows APIs and their implementation, rather than the implementation of Python itself. 


Answer URL
https://docs.python.org/3/howto/unicode.html#reading-and-writing-unicode-data
