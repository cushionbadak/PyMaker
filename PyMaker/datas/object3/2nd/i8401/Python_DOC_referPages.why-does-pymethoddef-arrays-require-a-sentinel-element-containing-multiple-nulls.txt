Natural Text
Several Python structures seem to need a sentinel (probably in order to know when to "stop"). But why do some, like arrays of , have a sentinel element initialized with multiple s?For example :Why does the last  in the "sentinel array" have the two s? Why not just 1? Or given that  has 4 entries why not 4 s as sentinel element?
I don't think it does. For two reasons:1) In the Python source code it only checks the name against NULL.As far as I'm aware,  arrays are used in two places: when attaching methods to a type, and when attaching methods to a module.To find the relevant bit of code start by noting that all types go through  and most modules go through  so start the search there.  forwards to . In  the methods get dealt with by the internal function . In  there is all call to  which is actually a public function if you want to do low level stuff yourself and which in turn calls the internal function .Both of these internal functions have a for loop to loop over the methods and add them to the relevant dictionary. In both cases the condition to continue looping is .Therefore, at least currently, only the name is checked.2) In both C and C++ partial initialization guarantees that the remaining fields are zero/default initialized. Therefore just initializing the first element of the sentinel to 0 ensures that all the other elements are initialized to 0. You can even just use .(As a side note, Python uses this automatic zero initialization a lot with the large structs it defines, for example  which is huge and which you rarely bother filling in completely.)After writing this answer I found that this had already been discussed.So in summary - Python only checks the  (although that's an implementation detail so I guess could change in future if they find a use for a  name with a non- method), and C automatically zeros the sentinel anyway. I don't know why the convention appears to be to set two elements, but there's something to be said from following convention.


Answer URL
https://docs.python.org/3/c-api/module.html#c.PyModule_AddFunctions
https://docs.python.org/3/c-api/typeobj.html
https://docs.python.org/3/extending/extending.html#the-module-s-method-table-and-initialization-function
