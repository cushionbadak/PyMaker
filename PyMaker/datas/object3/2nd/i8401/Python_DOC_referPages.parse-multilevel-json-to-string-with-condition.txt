Natural Text
I have this nested json item that I just want to flatten out to a comma separated string (i.e. parkinson:5, billy mays:4)so I can store in a database if needed for future analysis.  I wrote out the function below but am wondering if there's a more elegant way using list comprehension (or something else). I found this post but I'm not sure how to adapt it for my needs (Python - parse JSON values by multilevel keys).Data looks like this:Here's my code:
Firstly, the most important thing to make your code shorter and nicer to look at is to use your own variables. Be aware that  and . So you can write  instead of .Secondly, if you want something likeyou can make it shorter and easier to read by changing it toBut you don't even need that here, you can just use the  iterator to get the values. When combining these improvements your code looks like this:(I have also changed  to  and  to , because it is shorter and doesn't lower the readability)When you have this it is much easier to make it even shorter and more elegant by using list comprehension:
Maybe something like this will work?With the output looking like this
This might be a way to do it. Even though using a 'proper library' (depending on your actual use case) makes more sense.
This is a problem where we need to perform the 3 separate tasks:Filter out unqualified rows of dataFlatten the dict of lists into a simple listTransform each dictionary object into a simple tuple, ready for formattingHere is the code:Output:
Here's a generator expression that does it:Note: I changed the sample data slightly to make sure it handled data in more than one  the same as your code.


Answer URL
https://docs.python.org/3/reference/expressions.html#generator-expressions
https://docs.python.org/3/library/csv.html
