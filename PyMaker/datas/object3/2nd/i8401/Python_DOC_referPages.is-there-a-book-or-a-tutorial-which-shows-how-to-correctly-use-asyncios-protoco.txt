Natural Text
Is there a book or a tutorial which shows how to correctly use asyncio's Protocol? All the examples on the web mix IO right into protocol definition! I want to write a parser which does frame decoding and converts the message to a python data structure. Once this data structure is parsed, I want to pass this on to the client. Correspondingly, the client of the higher level API passes in a python data structure, the high level API feeds that data structure passes it to my protocl, which converts it to the correct byte/text representation and passes it on to the transport layer.I'm assuming this is the purpose of abstracting out the Protocol class in the first place. I don't want to respond to the other side of the connection from within the protocol, yet this is what most web tutorials show!Further, I would like to understand which high level interface is proffered in the python world, is it callbacks, stream interface or something else?
I want to write a parser which does frame decoding and converts the message to a python data structure. Once this data structure is parsed, I want to pass this on to the client.Correspondingly, the client of the higher level API passes in a python data structure, the high level API feeds that data structure passes it to my protocl, which converts it to the correct byte/text representation and passes it on to the transport layer.You can approach a protocol implementation from two different angles:Use low-level . For that, we have two APIs:  and . The former is used to create servers that can be exposed to the network and accept client connections (e.g. an HTTP server.) The latter can be used to implement a client (e.g. an API client, a database driver, etc).The core idea of  is pretty simple: it can implement a  method, that is called by  or by , once the connection is made. The protocol will receive an instance of the  object, which it can use to send data back to the client.It also can implement  method, which will be called by the event loop when there is incoming data to process. The general approach is to write a buffer abstraction for the protocol you are implementing, that can parse the data. Once the buffer has enough data to parse and process, you can either put the result into an  or schedule some asyncio tasks.  For example:Mind that this is a low-level asyncio API.  It's intended to be used by framework and library authors. For instance, asyncpg, a high-performance asyncio PostgreSQL driver uses these APIs.You can read more about protocols here: https://docs.python.org/3/library/asyncio-protocol.html#protocols.  A good example of successfully using these APIs is the asyncpg library: https://github.com/magicstack/asyncpg.Use high-level asyncio streams. Streams allow you to implement protocols using async/await syntax. Two main APIs:  and . Let's re-implement the above example using :I would recommend to always draft your first implementation of some protocol using streams, especially if you are new to networking and asyncio. You can build faster code using low-level APIs, bug with streams you'll get a working program much faster and the code base will be easier to maintain.  Ideally you should just stick to using async/await and high-level asyncio APIs.


Answer URL
https://docs.python.org/3/library/asyncio-protocol.html#protocols
