Natural Text
I have a question, for example I have listsI want to calculate the product of these four list.Actually maybe it seems simply, we just writebut the problem is, what if I have an in consistent number of list? sometimes I have 1 lists, 8 lists, 4 lists, or maybe 25 lists. I want to write a code that calculate the product of an in consistent number of list in same index automatically.
You can put your lists in a bigger list (list of lists):and then:
You can  these lists and use  to multiply the elements:Result:If you're using Python3.x, you need  to import  method.
Try this
You could write a function that can be overloaded with an arbitrary number of arguments and use that to do the multiplication. Something like:This has the advantage of being reusable. It seems like you may want to use this in a variety of places with a variety of arrays. Once you have this function, it's easy to use it with other arrays.
Use the  parameter mechanism to collect all the lists into one tuple of all the lists:Now you have a way to call a function to do what you want.Next, use  to iterate over each value in each list, in turn. That is,  will produce a tuple of (a[0], b[0], c[0]), then another tuple of (a1, b1, c1), etc.Using the  in this context flattens the tuple of args into a bunch of separate parameters, as though you had written .At this point,  is a tuple that you need to multiply.You can use  to apply a function that accumulates a value across an iterable (and tuples are iterables!). Like so:This would apply the lambda to each pair of values: (t[0], t1), then (result-of-previous, t[n]), etc.So, in your case, you can write your own lambda function to do multiplication:Or, you could import operator and use the operator.mul function, which does exactly this:Then capture the result:Putting it all together:
With Python 3, define a product function (useful in many cases):then compute the result directlyor by using a list of lists:


Answer URL
https://docs.python.org/3/library/functools.html?highlight=functools.reduce#functools.reduce
https://docs.python.org/3/library/functools.html?highlight=functools.reduce#functools.reduce
https://docs.python.org/3/library/functools.html?highlight=functools.reduce#functools.reduce
https://docs.python.org/3/library/functools.html?highlight=functools.reduce#functools.reduce
https://docs.python.org/3/library/functools.html?highlight=functools.reduce#functools.reduce
