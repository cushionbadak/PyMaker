Natural Text
I am new to C++, so apologies for any 'silly' mistakes.I have created a shared object in C++ for use in Python. However, when I try to call this function in Python, the kernel crashes. The C++ file is as follows:I create the .so file using:and I call the C++ function in Python using:The function, when returned correctly, should return a vector of all the numbers between 1 and 1000 containing a 3 (i.e. 3,13,23,30,31,...). Currently, however, the Python kernel crashes.I would imagine it's something to do with my use of vectors or a memory leak in the C++ file.Thanks in advance for any help!
 doesn't understand C++ types, so here is a version of the function that uses only C types in the function interface.  The result buffer has to be pre-allocated and the number of elements passed in by address.  The function updates the number of elements with the length of the computed vector, then returns 1 (success) if it could copy those elements into the result buffer, else returns 0 (fail).Note that the code algorithm is incorrect and returns the wrong answer, but ctypes works.
I'm wondering whether n and maximum are actual variables. Just try:Try to build a method that display your vector  in c++. So that you are not mixing printing langage methodes.
You need to tell python what the input and return types of you function are Docs. I pretty sure that std::vector is not part of the options, the options are listed in the docs. This is not the fastest of best practice optionWhat I did to get started, was to serialize your input to json, and pass them as a char_p to the shared library, and then cast them in c++, and return another char_p... But of course this is not the fastest or best option. (If you did define the types correctly, edit your post, and I will remove this answer)


Answer URL
https://docs.python.org/3/library/ctypes.html#ctypes-specifying-required-argument-types
