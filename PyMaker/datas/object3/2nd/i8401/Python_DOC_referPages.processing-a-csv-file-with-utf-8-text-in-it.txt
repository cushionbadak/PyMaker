Natural Text
I have a csv file (see [1] below) that has non ascii text in it (for instance a name like . The file has a list of books with URLs, excerpts and comments.In Python 3.5 I open and process the file like so:Now printing the rows of the csv (see  above) will give me results like:First off, I have a byte prefix. Why? (Python 3.x treats strings as unicode by default, Python 2.7 treats it as byte by default.)And then I have this:  instead of .I know that I have not fully grasped the concept of encoding in Python. Read many posts here on SO, but still I don't really get it.So if my csv file has special characters, I need to open it as ? I did that.Then, if I iterate over the csv reader, get all the rows and append them to a list (without encoding the columns), then try to print it, I get an error (see [2] below). Why can't I print that list?[1] csv file with utf-8 text[2] Trying to print a list of rows of the csv file without encoding the colums of the row will give me an error:
Typically, all encoding/decoding is done when communicating with the outer world. In your example, there are two communication steps:you read from a file opened with ,you write out the result using the  built-in.Between this, you should always work with decoded strings, ie. type  (Python 2's ).Reading from an on-disk fileThe first point goes well, initially: You open the file with the correct encoding and let  do the format parsing.This makes sure that the bytes found on the disk are correctly decoded into strings, without you having to use a  method.(As a side note, you can omit  here and just use the built-in , but it effectively does the same thing.)But then, you re-encode the strings with the following line:You shouldn't do this. Now you have to process  instead of strings.Note:The  type has common features with strings, but they are incompatible.That's why you have to  each element in the  function (which is not used in your code snippet, btw.), so that the membership test is done between strings and strings, not strings and bytes.One of the differences between the two types is that  uses the  form to display , thus the output will include quotes and the  prefix:Compare to printing strings:Writing text or data to STDOUTThis brings us to the next problem: Writing data to STDOUT using .If you try the above line, you probably get an exception:The problem is that, apparently,  encoding is used.Now, how do you specify the encoding?It's clear when using  to write to a file on disk:But you can't tell  what encoding to use.The reason for that is that it uses a file handle that is already open, ie. . In my case, this is:but you probably see  or something like .You have two possibilities:You write the output to a disk file, and don't use  at all.You change the encoding of .(More precisely, you replace it with a new TextIOWrapper around the underlying bytes-based STDOUT stream.)The first possibility is obvious, I hope.For the second one, you need one additional line of code (provided that  is imported):Now  will encode strings with UTF-8.However, you might still have trouble:It's quite likely that your terminal isn't configured to accept and properly display UTF-8 text, or that it doesn't even support Unicode.If that is the case, you either get garbled characters on screen, or maybe another exception.But that problem is outside Python, you'll have to fix it through the terminal config, or by switching to a different one.


Answer URL
https://docs.python.org/3/library/codecs.html#encodings-and-unicode
