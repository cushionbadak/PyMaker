Natural Text
I have a list of items with properties  and  that I want to quickly sum the time for each  and append to another list. The list looks like this:I want to do something that works like this:With  finally looking like this:This seems like something that should be easy to do efficiently with either a list comprehension or something similar to , but I can't figure it out. The best way I have figured is to use a separate list comprehension for each "Type" but that requires iterating through the list repeatedly. I would appreciate any ideas on how to speed it up. Thanks
Note that case is very important in Python : isn't a valid statement isn't the same as there's no  after  has a leading space, which confuses Python has one  too many isn't definedHaving said that, a  works just fine for your example :To get a list of tuples :
You can use a dict to keep track of the total times. Using the  method, you can tally up the total times. If the key for the activity doesn't already exist, set its tally to zero and count up from there.
You could use  from  along with  and  from :This small snippet results in a  instance containing the sums:It uses  to, obviously, repeat the  for  times and then feeds all these to  for the summation using .If your  list has many entries, you can again use  to chain these all together:This will get you a sum of all types in all the nested lists.
You can use  with :It simply builds up the  updating each  using the corresponding  value.
Here is a brief way of expressing what you'd like in one line. By the way, your list  doesn't need to be double bracketed:Here I zipped your output labels to a generator that calculates the sum for each of the three transportation types you have listed. For your exact output you could just use:
If you're willing to abuse generators for their side effects:This works because  returns .  will always evaluate  and throw out that element. So this generates a side effect empty list  as the only memory overhead.  would work equally well.
Just use a dictionary! Note that in python it is idomatic to use  for variables and keys.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
