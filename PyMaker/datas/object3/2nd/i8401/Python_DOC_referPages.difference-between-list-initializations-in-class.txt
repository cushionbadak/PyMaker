Natural Text
I have written following code in python:Output:My question is why l1 seems to be static member and z not?Are all non-primitive objects initialized in class body made static?I feel like it's one of those "magic wtf python" moments like with having list as default function parameter? (At least for me as person who mostly writes in C)
This behavior is a major pitfall for newbies in Python, this only requires little understanding to avoid it.  is a mutable object, that's an object that can be changed in-place. Take a look at this question:Immutable vs Mutable typesAnd  is also a class-level attribute that spans all instances unless it's redefined lower in the class tree, in a superclass or an instance of the class: or: This way you redefined an attribute higher in the class hierarchy and hence you'll receive the lowest-most attribute in your class tree. But this is not what you were asking about. Because  is an immutable object--an object that you cannot change in-place like a list, when you code something like this: You really define another  in the instance's namespace and this shadows  of class . For lists however, because they're mutable and because you can change them in-place, you'll get one reference of  for multiple instances, so for example: class A:     l1 = [1, 2, 3] What do we mean by in-place change? Since a list is a sequence that stores other objects, it technically has a reference for itself plus other references for its embedded objects. In-place assignments change a reference for an embedded object in lists, but not the reference of the list object itself.Python Documentation:Numeric objects are immutable; once created their value never changes. Python numbers are of course strongly related to mathematical numbers, but subject to the limitations of numerical representation in computers.Study this code yourself and you'll notice the difference: *Note: if you play around with lists or mutable objects generally speaking by changing their values in-place; in practice this will result in a very puzzling behavior for larger application. It'll be extremely tedious job to identify which line of code that changes the value of the mutable object in larger applications and this will intensify the debugging process. I always follow this advice and I think everyone should!


Answer URL
https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy
