Natural Text
Why id(b) is not same as id(a[0]) and id(a[1]) in python ?    
When the CPython REPL executes a line, it will:parse, and compile it to a code object of bytecode, and thenexecute the bytecode.The compilation result can be checked through the  module:Note that all 1234s are loaded with "", and all 5678s are are loaded with "". These refer to the constant table associated with the code object. Here, the table is .The compiler knows that all the copies of 1234 in the code object are the same, so will only allocate one object to all of them.Therefore, as OP observed,  and  do indeed refer to the same object: the same constant from the constant table of the code object of that line of code.When you execute , this will again be compiled and executed, independent of the previous line, so a different object will be allocated.(You may read http://akaptur.com/blog/categories/python-internals/ for a brief introduction for how code objects are interpreted)Outside of the REPL, when you execute a  file, each function is compiled into separate code objects, so when we run:We may see something like:The first three numbers share the same address 4415536880, and they belong to the constants of the "__main__" code objectThen  and  have addresses 4415536912 of the first lambda.The  has address 4415537104 of the second lambda.Also note that this result is valid for CPython only. Other implementations have different strategies on allocating constants. For instance, running the above code in PyPy gives:
There is no rule or guarantee stating that the id(a[0]) should be equal to the id(a[1]), so the question itself is moot. The question you should be asking is why  and  are in fact the same.If you do  followed by  you may or may not get the same id. As  has pointed out, these are just internal optimizations that you shouldn't depend upon.
A Python list is very much unlike a C array.A C array is just a block of contiguous memory, so the address of its first (0-th) element is the address of the array itself, by definition. Array access in C is just pointer arithmetic, and the  notation is just a thin crust of syntactic sugar over that pointer arithmetic. An expression  is just another form of .For the sake of the example, let's assume that in in Python,  is a "memory address of X", as  would be in C. (This is not true for all Python implementations, and not even guaranteed in CPython. It's just an unique number.)In C, an  is just an architecture-dependent number of bytes, so for  the expression  points to these bytes. Everything in Python is an object, including numbers. This is why  refers to an object of type  describing number . You can call its methods:  will return a string .So, when you have ,  is a "pointer" to a  object with three elements. The  object itself is pretty complex. But  is not the bytes that comprise the integer value 1; it's internally a reference to an  object for number 1. Thus  is a "pointer" to that object.In C terms, the elements of the array could be seen as pointers to the objects stored in it, not the objects themselves.Since there's no point to have two objects representing the same number 1,  is always the same during a Python interpreter run. An illustration:CPython actually preallocates objects for a few most-used small numbers (see comments here). For larger numbers, it's not so, which can lead to two 'copies' of a larger number having different  values.
You must note that: id() actually gives id of the value of variables or literals. For every literal/value that is used in your program (even when within the id() itself), id() returns (attempts to return) an unique identifier for the literal/variable within the program life-cycle. This can be used by:User: to check if two objects/variables are the same as in: a is b Python: to optimise memory i.e. avoid unwanted duplications of same stuff in memoryAs for your case, it isn't even guaranteed that a[0] and a[1] will give the same id though the value of both can be the same. It depends on the order/chronology of creation of literals/variables in the python program lifecycle and internally handled by python. Case 1:Case 2 (Note that at the end of case , a[0] and a[1] have same value but different ids):


Answer URL
https://docs.python.org/3/library/dis.html
