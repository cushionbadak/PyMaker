Natural Text
I have many 3*2 matrices(A1,A2,A3..), and each of the 3*2 is a draw. In the case two draws, we have a 3*4 ( we horizontally stack each draw of A1,A2). Clearly, it is easier for me to draw the 3*4 matrix (A) as a larger matrices once instead of draw a 3*2 over and over again.But I need to perform a matrix multiplication for each draw(each A1,A2...) to a matrix B. Say A1*B, and A2*B ...AN*B
You can reshape matrix A to 2 columns so that it is conformable to , do the matrix multiplication, and then reshape it back:
If you are unsure about how to store/stack the incoming arrays, one way would be stacking those as a  array, such that the each of those incoming arrays are index-able by its first axis -Sample run -Then, to get the equivalent output of matrix-multiplications of each incoming array with , we could use  on the  stacked array  with , thus losing the last axis from  and first from  in the sum-reduction, like so -Let's have a look at the output values and compare against each matrix-multiplication with , , etc. -Thus, essentially with this stacking operation and later on  we have :Alternative to  -We could use a simpler version with , to get the same output as with  -On Python 3.5, there's an even simpler version that replaces , the  -
Even if not needed for the calculation  can help us think through the problem: is (3,4), which won't work with the (2,2) .  Think of it as trying work with a doubled  dimension: .  But what if we inserted an axis?  'imk,jk->imk'?  Or added the extra dimension to ?The numbers are there, just the shape is (3,2,2).Or you could build  from the start so that  works ():`@piRSquared':
Shift you perspective.  You are locking yourself into  unnecessarily.You can think of  and  as  instead, then  would beThen take the transpose of So that you can do you operationLet your "draws" look like this


Answer URL
https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-465
