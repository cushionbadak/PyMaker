Natural Text
I tried this code:It did not do anything. As in, it did not even touch the file (there is no modification to the date and time of the file after running this code). Could anyone please explain why?Then I tried this:This one does something to the file, as in the modified data and time in the file changes after I run this code, but it does not remove the consecutive newlines, and the output is the same as the original file.EDIT: This a small sample from the original csv file:I want the output to be the following:
The answer to your question is that  is being applied to the string  not the file. It expects a string for the third argument and it does the substitution on that string. In the second piece of code, you open the file and read it one line at a time. This means that no line will ever contain two newlines. Two newlines will result in two consecutive lines being returned from the input file with the second line being empty.To get rid of the extra new lines, just test for a blank  and don't write it to the . Calling  on an empty line (one containing only whitespace characters) will return an empty string which will evaluate to  in an  statement. If  isn't empty, then write it to your output file.Note: Python treats text files in a platform-independent way and converts line endings to '\n' by default, so testing for '\r\n' wouldn't work even without the other problems. If you really want the endings to be '\r\n', you must specify  when you call  for the input file. See the documentation on https://docs.python.org/3/library/functions.html#open for a full explanation.Part IIWith the example input and output files posted by the OP, it appears that the problem was more complex than stripping extra newlines. The following code reads the input file, finds text between pairs of  characters and combines all of the lines onto a single line in the output file. Extra newlines not inside  are sent to the output file unaltered.


Answer URL
https://docs.python.org/3/library/functions.html#open
