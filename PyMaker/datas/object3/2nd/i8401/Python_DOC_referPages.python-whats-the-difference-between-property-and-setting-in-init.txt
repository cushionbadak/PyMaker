Natural Text
Couldn't quite get a straight answer from other threads on this one:In Python, what's the main difference between usingandBy the looks of it using @property in this way makes x read-only.. but maybe someone has a better answer? Thanks /Fred
For your example, yes this allows you to have read-only attributes. Further, properties can allow you to seem to have more attributes than you actually do. Consider a circle with  and . The area can be calculated based on the radius, rather than having to store both
The  decorator implementation uses the descriptor protocol, which is how we do data encapsulation in Python OOP. A descriptor is:In general, a descriptor is an object attribute with “binding  behavior”, one whose attribute access has been overridden by methods  in the descriptor protocol. Those methods are , ,  and . If any of those methods are defined for an object,  it is said to be a descriptor.Typically, in other OOP languages you use getters and setters. You'll frequently see people coming from, say, Java writing a Python class like this:This is very much not how you would do things in Python. The point of getters and setters is to provide data encapsulation. We encapsulate access to a data attribute by wrapping that in a getter and setter. Then, if we ever want to add something, say, make sure  is never set to a value below 10 (as a contrived example), we simply change the way  is implemented, and we don't have to modify the rest of our code. In Python, however, we would write the above class as follows:A person coming from Java might recoil in horror: "You aren't properly encapsulating your class! This will become a maintenance nightmare!"Nope, because we have descriptors/properties:And now, we don't have to refractor every method that uses , like . This is nice because it lets us avoid writing a bunch of boilerplate code, and implementing descriptors is relatively straightfoward in the cases where we do need it. Also, this makes our code nice and pretty, without  and  all over the code, and the much more readable  and 
Check out this SO post on Python properties - it refers to getters/setters specifically but the answers break down a lot more about them and I believe everything you want to know is in there: Python @property versus getters and setters


Answer URL
https://docs.python.org/3/howto/descriptor.html
