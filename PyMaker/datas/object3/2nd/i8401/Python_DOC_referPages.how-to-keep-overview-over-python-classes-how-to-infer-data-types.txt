Natural Text
Started a Python project, wrote some hundred lines of code, created a handful of classes, got immediate satisfaction, everything worked nicely.Returning to the project a few months later, I am hopelessly lost. Worse than spaghetti: the code now looks to me like a chaotic collection of a hundred class member functions. Most of these functions are only two to tens lines long; their working and their purpose are perfectly clear - except that I have no clue what are the data types of the function arguments, of the return value(s), and of the involved class member variables. Therefore I am unable to get the large picture how my classes are interrelated.How to proceed in such a situation? How to obtain a high-level overview as would be provided by .h headers in C++? How to insert that information into the source file so that the next time I need not to redo this research?
Using docstrings where appropriate goes a long way.Example quoted from the PEP:Such strings get added as a  special attribute to the function/method, which you can access from python. Directly, or with the pydoc module. As a bonus, such documentation is available directly from python console, using . You should also look into sphinx-doc, which is the tool used for documenting python itself. It's not in-source, but it's tailored for documenting python code and overall pretty convenient.As for your concern about actual types, usually you don't name specific types. They do not matter. What matters is what you can do with them, because python code normally uses duck typing. That is: you don't care what your argument is, as long as you can call its  method and access its  attribute and they behave as you expect.


Answer URL
https://docs.python.org/3/library/functions.html#help
