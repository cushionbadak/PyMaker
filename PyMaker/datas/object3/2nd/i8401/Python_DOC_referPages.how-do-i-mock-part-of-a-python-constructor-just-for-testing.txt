Natural Text
I am new to Python, so I apologize if this is a duplicate or overly simple question. I have written a coordinator class that calls two other classes that use the kafka-python library to send/read data from Kafka. I want to write a unit test for my coordinator class but I'm having trouble figuring out how to best to go about this. I was hoping that I could make an alternate constructor that I could pass my mocked objects into, but this doesn't seem to be working as I get an error that test_mycoordinator cannot be resolved. Am I going about testing this class the wrong way? Is there a pythonic way I should be testing it?Here is what my test class looks like so far:And here is the class I am trying to test:
There is no need to provide a separate constructor. Mocking patches your code to replace objects with mocks. Just use the  decorator on your test methods; it'll pass in references to the generated mock objects.Both  and  are then mocked out before you create the instance:So the moment  is called, the  code replaces the  reference with a mock object. Your  class then uses those mock objects rather than the real code. calling  returns a new mock object (the same object that  references), etc.I've made the assumption that  and  are top-level module names. If they are not, provide the full import path. From the  documentation:target should be a string in the form . The target is imported and the specified object replaced with the new object, so the target must be importable from the environment you are calling  from. The target is imported when the decorated function is executed, not at decoration time.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch
