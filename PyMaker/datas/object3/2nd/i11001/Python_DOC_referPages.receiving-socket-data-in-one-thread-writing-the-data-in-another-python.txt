Natural Text
I'm currently writing a Python program to receive data from either a TCP/UDP socket, and then write the data to a file. Right now, my program is I/O bound by writing each datagram to the file as it comes in (I'm doing this for very large files, so the slowdown is considerable). With that in mind, I've decided that I'd like to trying receiving the data from the socket in one thread, and then write that data in a different thread. So far, I've come up with the following rough draft. At the moment, it only writes a single data chunk (512 bytes) to a file. I imagine I'm doing something wrong, I'm just not sure what the best way to use threading is. Right now, my issue is that I have to supply an argument when I create my thread, but the value of that argument doesn't properly change to reflect the new data chunks that come in. However, if I put the line  inside the  loop, wouldn't I be creating a new thread each iteration?Also, for what it's worth, this is just my small proof-of-concept for using separate receive and write threads. This is not the larger program that should ultimately make use of this concept. 
You need to have a buffer that the reading thread writes to, and the writing thread reads from. A  from the  module is perfect, as it allows append/pop from either side without performance degradation.So, don't pass  to your thread(s), but the buffer.


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
