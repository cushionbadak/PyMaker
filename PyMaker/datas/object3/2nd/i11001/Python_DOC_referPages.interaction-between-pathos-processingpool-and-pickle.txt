Natural Text
I have a list of calculations I need to run. I'm parallelizing them using  does create a class called , which is defined in the same file as So far, so good.  will do some calculations, based on the  object, change some of its attributes, and finally store them using . Here's the relevant excerpt of the helper function (from a different module) that does the saving:when it gets to , it raises an Exception which is hard to debug because the debugger wont step into the worker that actually faced that exception. Therefore I created a breakpoint right before the dumping happened, and manually entered that command. Here is the output:The odd thing is that this doesn't happen when I don't parallelize, i.e. loop through  manually. I'm pretty sure that I'm opening the right  (and not the parent class).I know it is tough to debug things without a reproducible example, I don't expect any solutions on this part. Perhaps the more general question is:What does one have to pay attention to when parallelizing code that uses  via another module?
Straight from the Python docs. 12.1.4. What can be pickled and unpickled? The following types can be pickled:None, True, and Falseintegers, floating point numbers, complexstrings, bytes, bytearrays tuples, lists, sets, anddictionaries containing only picklable objects functions defined at the top level of a module (using def, not lambda) built-in functions defined at the top level of a module classes that are defined at the top level of a module instances of such classes whose  or the result of calling  is picklable (see section Pickling Class Instances for details).Everything else can't be pickled. In your case, though it's very hard to say given the excerpt of your code, I believe the problem is that the class  is not defined at the top level of the module, hence its instances can't be pickled.  The whole point of using  (or its actively developing fork ) instead of the built-in  is to avoid , because there are far too many things the later can't dump.  and  use  instead of . And if you want to debug a worker, you can use trace.NOTE As Mike McKerns (the main contributor of ) rightfully noticed, there are cases that even  can't handle, though it will be hard to formulate some universal rules on that matter. 


Answer URL
https://docs.python.org/3/library/pickle.html
