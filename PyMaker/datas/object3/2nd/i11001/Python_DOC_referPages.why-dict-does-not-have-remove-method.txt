Natural Text
I know python list has a remove() method, which remove the given object from the list.I know that we can use del statement to delete an item from the list by offset: I also know that we can use del statement to delete an item from the dictionary by key:However, there is no remove() method for a dictionary, which I think is perfectly fine:I guess one reason is that remove() does not save any typing than del statement for dictionary, so it is not necessary. Is this correct? While for list, remove() combines "search index by value" and "delete by index" together, so it has to be there. Is this correct?What are the other reasons if any?
Note that  makes a very strict guarantee - removing the first occurrence of a value. Now, the ordering in a  is arbitrary - there is no "first".
If you look at this question: Difference between del, remove and pop on lists : you'll note the main answer points outremove: removes the first matching value, not a specific indexdel:  removes a specific indexpop: returns the removed elementSo with a Dictionary it simply doesn't need a remove method as there can only be one instance of a key (they have to be unique) and  is sufficient.
It does, it's just called :pop(key[, default])  If key is in the dictionary, remove it and return its value, else return default. If default is not given and key is not in the dictionary, a KeyError is raised.
Dictionaries have , but not . Why not? Because  finds the first matching value and removes it, and returns nothing. So in a dictionary: ought to remove values. If I use , which key should it delete? Additionally this is not even very useful operation. If you need to remove a certain value from a dictionary, then you're using a wrong data structure.on the other hand, is not unlikeThis can be contrasted with  method of lists:is analogous tothat is, both of them operate using the same principle.


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.pop
