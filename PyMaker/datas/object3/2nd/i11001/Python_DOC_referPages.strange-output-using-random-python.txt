Natural Text
i have this problem where i sort a list based on randomness. how the algorithm works is two select a random number between 0 to N-1 (N is length of list) and swap with a iterating index.i have two different algorithms like this.here everything works fine. i print the return values from algo1 and algo2.But when i store the return values in variablesthey both contain the same list. how many times i run they show the same return valuessee this video https://www.youtube.com/watch?v=ZBjlnaCLKsQ&feature=youtu.be
Your function alters  and returns a reference to it. There is no new  being created.The difference in what you are seeing is:When you print, you show the current state of what  has returned (which is a reference to ).When you assign the result, you set  and  to a reference of , meaning . And you only print after, when you finished manipulating . That's why you see the same result, all theses 3 variables have the same reference to the same list.
You are modifying the list (I am assuming youâ€™re on python 2.7) in place. Thus, when you shuffle the  with , you are also affecting . All three lists are really the same object. You need to create a list copy, for example .I would also take a look at , which does pretty much the thing you want. Note that  also modifies the input in place, so you will need  too.
As you're passing, modifying and returning the same variable (list)  to both functions, you're modifying the same data each time.Try using:This will return the identity of the variable. You'll notice that z1, z2 and k all have the same identity.In the first case, you're printing the output directly, before calling the next function. This is why you didn't notice this behaviour.However, when you're assigning the return variable, saving it and then printing it, you'll notice the issue.To resolve it, instead of modifying the list that you've passed into the function, create a new list inside of the function, assign the values to it and return that list.
Try this:You are simply overwrite the same list. Google for "python Immutable vs Mutable types" to understand this behaviour.


Answer URL
https://docs.python.org/3/library/random.html#random.shuffle
