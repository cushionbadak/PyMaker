Natural Text
I have the following code:where  is python code that will eventually append items to  and  (that's why I am using  instead of ).I have tried already to execute the same code with pypy but for this particular block I don't get much better, that line with  is still my bottleneck.That said, my question is:Is there a faster alternative to ?If not, do you have any workaround to get some speed up in such a case?--UPDATE--To clarify,  contains around one million keys, to each key it is associated a script (around 50 line of code). The inputs for the scripts are defined before the  and the outputs generated by a script are stored in  and . So, each script has a line in the code stating  and . The rest of the program will evaluate the results and score each script. Therefore, I need to loop over each script, execute it and process the results. The scripts are originally stored in different text files.  is a dictionary obtained by parsing these files.P.S.Using the pre-compiled version of the code:I have got 5x speed increase, not much but it is something already. I am experimenting with other solutions...
If you really need to execute some code in such manner, use compile() to prepare it.I.e. do not pass raw Python code into exec but compiled object. Use compile() on your codes before to make them Python byte compiled objects.But still, it'll make more sense to write a function that will perform what you need on an input argument i.e. pool[k] and return results that are corresponding to x and y.If you are getting your code out of a file, you have also IO slowdowns to cope with. So it would be nice to have these files already compiled to *.pyc.You may think about using execfile() in Python2.An idea for using functions in a pool:


Answer URL
https://docs.python.org/3/library/functions.html#compile
