Natural Text
This question already has an answer here:Why won't dynamically adding a `__call__` method to an instance work?                    2 answers                I have a wrapper class similar to this (strongly simplified) example:I can use it like this:I thought I could optimize and get rid of one function call by changing to this:However, I receive aTypeError: 'wrap' object does not support indexingfor the  line with the latter version.The direct call to the method, i.e., , works in both cases...Why does the assignment version not allow indexing?
Special methods (essentially anything with two underscores on each end) have to be defined on the class. The internal lookup procedure for special methods completely skips the instance dict. Among other things, this is so if you dothe  method you defined is only used for instances of , and not for .
You can actually solve this by creating a new class for every type. If you want this to work transparently,  is the place for it.Initial "solution":Be careful however! This will do what you want - use the wrapped class' . However, this doesn't always make sense! For example,  is actually built into CPython's CAPI and not applicable to other types.


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-lookup
https://docs.python.org/3/reference/datamodel.html#special-lookup
