Natural Text
I came across the following code while reading about metaclasses here, although I don't know if this distinction is specific to metaclasses and I suspect that it is not:Note that the  call omits the first argument. I'm guessing it's passed implicitly, as it's calling a method on whatever class is returned by . That's the way I've usually seen such calls constructed, although they typically involve  on a normal class rather than cls/mcl on a metaclass.The  call passes  explicitly, though. I don't understand why. The signatures look the same to me.I am confused. Is  returning something different in each case, perhaps? What's happening here, and should I expect to be bitten by this when overriding other magic methods?[edit: Someone suggested that this is a duplicate of this question, which describes their different functionality. While the same difference is exhibited in some of the examples there, I see nothing stating why it exists or whether it's unique to .]
The super().__new__() call passes mcl explicitly, though. I don't  understand why. The signatures look the same to me.The  method is an oddity in that it is a staticmethod but has been special-cased so that you don't have to declare it as such.  Being a staticmethod means that you have to explicitly pass in any variables that are needed (in this case, the metaclass).In contrast,  is like any other regular method.  When you look it up from an instance, the instance is automatically passed in as the first argument.  This works whether you call the parent directly with  or by using super() with .  Both of those pass in cls as the first argument.  That is how bound methods work for normal classes and for metaclasses. It doesn't matter whether super() is used or not.So, the one odd case is  because it is a staticmethod which by definition doesn't have automatic prepending behavior.should I expect to be bitten by this when overriding other magic  methods?Staticmethods are somewhat rare.  And among magic methods,  is the only one I can think of.  So, you should be safe :-)


Answer URL
https://docs.python.org/3/reference/datamodel.html?highlight=__new__#object.__new__
https://docs.python.org/3/reference/datamodel.html?highlight=__new__#object.__init__
https://docs.python.org/3/library/functions.html#staticmethod
https://docs.python.org/3/reference/datamodel.html#object.__new__
