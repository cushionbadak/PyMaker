Natural Text
I naively tried to create a recursive generator. Didn't work. This is what I did: All I got was the first item . Is there a way to make such code work? Essentially transferring the  command to the level above in a recursion scheme?
Try this:I should point out this doesn't work because of a bug in your function. It should probably include a check that  isn't empty, as shown below:In case you are on Python 2.7 and don't have , check this question out.
Why your code didn't do the jobIn your code, the generator function:returns (yields) the first value of the listthen it creates a new iterator object calling the same generator function, passing a slice of the list to itand then stopsThe second instance of the iterator, the one recursively created, is never being iterated over. That's why you only got the first item of the list.A generator function is useful to automatically create an iterator object (an object that implements the iterator protocol), but then you need to iterate over it: either manually calling the  method on the object or by means of a loop statement that will automatically use the iterator protocol.So, can we recursively call a generator?The answer is yes. Now back to your code, if you really want to do this with a generator function, I guess you could try:Note: the items are returned in reversed order, so you might want to use  before calling the generator the first time.The important thing to note in this example is: the generator function recursively calls itself in a for loop, which sees an iterator and automatically uses the iteration protocol on it, so it actually gets values from it.This works, but I think this is really not useful. We are using a generator function to iterate over a list and just get the items out, one at a time, but... a list is an iterable itself, so no need for generators! Of course I get it, this is just an example, maybe there are useful applications of this idea. Another exampleLet's recycle the previous example (for lazyness). Lets say we need to print the items in a list, adding to every item the count of previous items (just a random example, not necessarily useful). The code would be:Now, as you can see, the generator function is actually doing something before returning list items AND the use of recursion starts to make sense. Still, just a stupid example, but you get the idea.Note: off course, in this stupid example the list is expected to contain only numbers. If you really want to go  try and break it, just put in a string in some_list and have fun. Again, this is only an example, not production code!
Recursive generators are useful for traversing non-linear structures.  For example, let a binary tree be either None or a tuple of value, left tree, right tree.  A recursive generator is the easiest way to visit all nodes. Example:Edit: replace  with  to catch other false values as errors.
Up to Python 3.4, a generator function used to have to raise  exception when it is done.For the recursive case other exceptions (e.g. ) are raised earlier than , therefore we add it manually.Note that  loop will catch  exception.More about this here


Answer URL
https://docs.python.org/3/whatsnew/3.5.html
