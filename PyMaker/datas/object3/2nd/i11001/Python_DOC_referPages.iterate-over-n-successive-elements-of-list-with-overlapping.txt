Natural Text
The itertools python module implements some basic building blocks for iterators. As they say, "they form an iterator algebra". I was expecting, but I could not find a succinctly way of doing the following iteration using the module. Given a list of ordered real numbers, for example... return a new list (or just iterate) grouping by some  value, say The way I found of doing this was as follows. First split the list in two, with evens and odds indexes:Then construct the new list:In essence, it is similar to a moving mean. Is there a succinctly way of doing this (with or without itertools)? PS.:ApplicationImagine the  list as the set of timestamps of some events occurred during an experiment:This code is being used to segment those events in accord with different temporal windows. Right now I am interested in the data between  successive events; 'n > 2' would be used only for exploratory purposes.
For 2, you can just doFor fixed n, the technique is similar:For variable n, you could zip a variable number of slices, or (especially if the window size is close to the size of ) you could use slicing to take windows directly:If  is not a list, you could generalize the  recipe from the itertools docs:
This is precisely what the  itertools recipe is for, for  that is.  Demo:If you are looking for variable group sizes, see user2357112's answer (I like the approach), or more generally you can implement a sliding window iterator and take slices of which there are many approaches. As an aside, a possibly poorly performing but amusing one-line window you could slice (to control the overlap) that isn't on the linked question would be this, using the new  syntax to combine generators. Demo:
Using a generator:Result:I think this solution is pretty succinct
As mentioned, the  recipe does overlapping pairs.This recipe is also implemented in an external library, , among other helpful windowing tools:Notice, with , you can control , the size of the sliding window (and even the amount of overlap via a  parameter if needed).  This tool may be useful in you exploration.Install this library via .


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/itertools.html#itertools-recipes
