Natural Text
Suppose I am given the following kind of string:and I want to extract substrings contained within a topmost layer of parentheses. I.e. I want to obtain the strings: and .Is there a nice pythonic method to do this? Regular expressions are not obviously up to this task, but maybe there is a way to get an xml parser to do the job? For my application I can assume the parentheses are well formed, i.e. not something like (()((). 
This is a standard use case for a stack: You read the string character-wise and whenever you encounter an opening parenthesis, you push the symbol to the stack; if you encounter a closing parenthesis, you pop the symbol from the stack.Since you only have a single type of parentheses, you don’t actually need a stack; instead, it’s enough to just remember how many open parentheses there are.In addition, in order to extract the texts, we also remember where a part starts when a parenthesis on the first level opens and collect the resulting string when we encounter the matching closing parenthesis.This could look like this:
Are you sure regex isn't good enough?
this isnt very "pythonic"...but 
This more or less repeats what's already been said, but might be a bit easier to read:


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
