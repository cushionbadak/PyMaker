Natural Text
I have a list of lists. Each sublist has a length that varies between 1 and 100. Each sublist contains a particle ID at different times in a set of data. I would like to form lists of all particle IDs at a given time. To do this I could use something like:list2 would contain the first elements of each sublist in list. I would like to do this operation not just for the first element, but for every element between 1 and 100. My problem is that element number 100 (or 66 or 77 or whatever) does not exists for every sublist.Is there some way of creating a lists of lists, where each sublist is the list of all particle IDs at a given time.I have thought about trying to use numpy arrays to solve this problem, as if the lists were all the same length this would be trivial. I have tried adding -1's to the end of each list to make them all the same length, and then masking the negative numbers, but this hasn't worked for me so far. I will use the list of IDs at a given time to slice another separate array:
--update--
You could use . This will  the lists together and insert  when one of the lists is exhausted.If you don't want the  elements, you can filter them out:
If you want it with a  and in an  you can do this:And if you want to know which id is from which list you can do this:list2 would be like this:
You could append  to your short lists and afterwards create a numpy arrayAfterwards you can use numpy slicing as usual.
Approach #1One almost* vectorized approach could be suggested that goes along creating ID based on the new order and splitting, like so -*There is a loop comprehension involved at the start, but being meant to collect just the lengths of the input elements of the list, its effect on the total runtime should be minimal. Sample run -Approach #2Here's another approach that creates a  array, which is easier to index and trace back to original input elements. This uses NumPy broadcasting alongwith boolean indexing. The implementation would look something like this -Sample run -So, now each column of the output would correspond to your ID based outputting.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
