Natural Text
This question already has an answer here:Mysterious for loop in python                    5 answers                I understand what the  operator does in this code:I also do understand that  will take on each value of the list in this code:I am curious if the  operator used in the  loop is the same as the  operator used in the first code.
They are the same concept but not the same operators.In the  example,  is an operator that handles several different situations.  The Python docs for the  operator give the details:  calls  if  has a  member function.  Otherwise,  tries iterating through  to find , or calls  if  doesn't exist.  The complexity is to provide consistent membership testing for older code as well as newer code â€”  is what you want if you're implementing your own classes.In the  loop,  is just a marker that separates the loop-index variable from whatever you're looping over.  The Python docs for the  loop discuss the semantics: whatever comes after  is evaluated at the beginning of a loop to provide an iterator.  The loop body then runs for each element of the iterator (barring  or other control-flow changes).  The  statement doesn't worry about  or .Edit @Kelvin makes a good point: you can change the behaviour of  with respect to your own new-style classes ():To change , define .  To change , define .
No, it is not the same. The  test like in your first example is a test for membership and returns a truth value. This  might be thought of as the sequential analogue of  or  (depending on how  is implemented).The  in your second example is part of the iteration grammar; it temporarily binds your selected variable  to each item in the iterable. This  might be thought of as the sequential analogue of , the assignment operator.
No, although they both use the same word they do different things.  is in both cases a syntax structure, e.g. it is not a name of a object and can't be changed. You can see here and here the syntactic definition of each one. As you can see the names are hardcoded and have no relationship.


Answer URL
https://docs.python.org/3/reference/expressions.html#membership-test-details
https://docs.python.org/3/reference/compound_stmts.html#grammar-token-for_stmt
https://docs.python.org/3/reference/datamodel.html#object.__contains__
https://docs.python.org/3/tutorial/classes.html#iterators
