Natural Text
I am trying to read the output of a subprocess called from Python. To do this I am using Popen (because I do not think it is possible to pipe stdout if using subprocess.call).As of now I have two ways of doing it which, in testing, seem to provide the same results.  The code is as follows:andThe first method does not include universal_newlines=True, as the documentation states this is only usable if universal_newlines=True i.e., in a text mode.The second version does include universal_newlines and therefore I specify a bufsize.Can somebody explain the difference to me?  I can't find the article but I did read about issues with an overflowing buffer causing some sort of issue and thus the importance of using .Additionally, when looking at the output, not specifying universal_newlines makes stdout a  object - but I am not sure what difference that makes if I just decode the bytes object with  (in terms of new lines and tabs) compared universal_newlines mode.  Lastly, setting the  to  makes the output "line-buffered" but I am not sure what that means.  I would appreciate an explanation about how these various elements tie together.  Thanks
What is the difference between using universal_newlines=True (with bufsize=1) and using default arguments with PopenThe default values are:  (meaning input/output is accepted as bytes, not Unicode strings plus the universal newlines mode handling (hence the name of the parameter. Python 3.7 provides   alias that might be more intuitive here) is disabled -- you get binary data as is (unless POSIX layer on Windows messes it up) and  (meaning the streams are fully buffered -- the default buffer size is used). uses  character encoding to decode bytes (that  may be different from  encoding used in your code).If  then  iterates over -separated lines. If the process uses non-ascii encoding e.g., UTF-16 for its output then even if  on your system; you may get a wrong result. If you want to consume text lines, use the text mode: pass  or use  explicitly.The second version does include universal_newlines and therefore I specify a bufsize.In general, It is not necessary to specify  if you use  (you may but it is not required). And you don't need to specify  in your case.  enables line-bufferred mode (the input buffer is flushed automatically on newlines if you would write to ) otherwise it is equivalent to the default .


Answer URL
https://docs.python.org/3/library/subprocess.html?highlight=subprocess
https://docs.python.org/3/glossary.html#term-universal-newlines
