Natural Text
I was interested in when I should use a generator in a function, and when I should just use a list, so I did some tests with filter and list comprehensions. Then I tried with range(100):Why does it take so much longer to make a list from the generator object than it does to simply create the list? If I needed to access that list more than once, would I just be better off using list comprehension rather than creating a list from the generator object?
There are two different issues that is evident from questionFrom the minuscule timing data for the standalone filter call it is evident that you are using Python 3.x, as filter returns a generator like object. So theoretically nothing actually happens.[1]The first expression invokes a lambda, a function call which is always costly in Python. So, a List comprehension excels over a filter calling a lambda wrapped with a list build-in.[2]
I will begin by answering your last question, yes you should use comprehensive list rather than  +  combination since it's more pythonic and as you showed it, more efficient.As for why it is more efficient, you have function call overhead (of the ) in the  code that you don't have in the comprehension list.Here is another timeit test to show you:As you can see, most of the difference comes from function call overhead.The last 1.7 unexplained seconds is probably due to the  poping into  while comprehension list builds the values directly into the list


Answer URL
https://docs.python.org/3/library/functions.html#filter
