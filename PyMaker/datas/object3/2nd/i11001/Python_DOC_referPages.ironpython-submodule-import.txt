Natural Text
I have a generic issue with IronPython module import processing.Given a Python package, submodules can refer to each other with relative references. Assume the package is called Poultry and submodules within it are Chicken.py and Duck.py. Chicken can then import Duck simply as "import Duck" and vica versa. A Python script loaded by the application can import the package correctly, can use the submodules and everything works fine.Directory structure of package looks like this:However, when I open Duck.py with my application for instance, I can't run and debug it as IronPython throws an import error on line "import Chicken" with the message "No module name Chicken".I understand this is not strictly an issue with IronPython but the hosting application. In the end the question is, how could I modify my hosting application to process these import statements correctly ?Shall I set some path variable in scope, or what ? How could I make the Python engine understand that the the currently loaded file is the part of a specific package ?Any ideas are welcome :-)
You have to always import  as part of its package. Inside an application, always do either of:If you run it directly with an interpreter, you must use the  switch as
You still need to import Chicken by typing . You can't just do . It would be the same from any file in your project. 


Answer URL
https://docs.python.org/3/using/cmdline.html#cmdoption-m
