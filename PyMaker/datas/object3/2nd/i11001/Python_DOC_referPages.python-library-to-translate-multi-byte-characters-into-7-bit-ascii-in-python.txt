Natural Text
Is there a python library that provides translation of multi-byte non-ASCII characters into some reasonable form of 7-bit displayable ASCII.  This is intended to avoid hard-coding the  as given in the answer to Translating multi-byte characters into 7-bit ASCII in PythonEDIT: I am currently using Python 2.7.11 or greater and not yet Python 3 but answers giving Python 3 solutions will be considered and found helpful.The reason is this: As I do the translation manually, I will miss some:My script is:The error I get is:This will be a never-ending battle to update the  for newly discovered characters. Is there a python library that provides this charmap so I don't have to hardcode it in this manner?
You may consider the unicodedata python package. I think one of the methods you may find interesting is  (see also example of usage given by peterbe.come):
 has an optional 'error' parameter that can replace un-encodable characters instead of throwing an error. Is that what you are looking for?https://docs.python.org/3/howto/unicode.html#converting-to-bytes
(Note: This answer pertains to Python 2.7.11+.)The answer at https://stackoverflow.com/a/1701378/257924 refers to the Unidecode package and is what I was looking for. In using that package, I also discovered the ultimate source of my confusion which is elaborated in-depth at https://pythonhosted.org/kitchen/unicode-frustrations.html#frustration-3-inconsistent-treatment-of-output and specifically this section:Frustration #3: Inconsistent treatment of outputAlright, since the python community is moving to using unicode strings everywhere, we might as well convert everything to unicode strings and use that by default, right? Sounds good most of the time but  thereâ€™s at least one huge caveat to be aware of. Anytime you output text to the terminal or to a file, the text has to be converted into a byte str. Python will try to implicitly convert from unicode to  byte str... but it will throw an exception if the bytes are non-ASCII:The following is my demonstration script to use it. The characters listed in the  variable are the characters I do need to have translated into something readable, and not removed, for the types of web pages I am analyzing.Sample output of the above script is:The following more elaborate script loads several web pages with many unicode characters. See the comments in the script below:The gist showing the output of the above script. This shows the execution of the Linux  command on the "old" and "new" html files so as to see the translations. There is going to be mistranslation of languages like German etc., but that is fine for my purposes of getting some lossy translation of single and double quote types of characters and dash-like characters.


Answer URL
https://docs.python.org/3/howto/unicode.html#converting-to-bytes
