Natural Text
Suppose I have the following in a really tight loop:The variable  is not used anywhere else.Does Python automatically compile away the assignment to , or does it take the time to do the variable assignment every time? In other words, is this code identical, or is it marginally faster due to the lack of assigning to ?Is the behavior the same for Python2.7 vs Python3?
So using the very fun  module we can look into the actual bytecode that is generated from the python code you provided. To keep things simple I have replaced  and  with builtin functions ( and ).So our source looks like this:Versus a simplified version:And then starting with the cpython 2.7 interpretter, we can see the bytecodes generated from the  function:As you can see there is no peephole optimization to remove the unnecessary intermediate variable, which results in an additional 2 instructions (, ) when compared against the bytecodes for the simplified `simple method: This is the same for the CPython interpreter for Python 3.5, and for the pypy interpreter for Python 2.7.
Use the dis module to compare the bytecode: looks like the second method produces fewer operations
Such type of queries could be easily checked with . Here are the results with .And this shows consistent results with other answers that describe the use the the awesome  module.
The actual time will depend on the functions  and  do. Not the best example, but a quick (and dirty) test code is given below:The output of the above code is:So yes, the implementation where we avoid the assignment of  is marginally faster in Pyhton 3.


Answer URL
https://docs.python.org/3/library/dis.html
