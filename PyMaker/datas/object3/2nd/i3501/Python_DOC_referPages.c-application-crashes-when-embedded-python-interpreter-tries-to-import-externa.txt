Natural Text
If I import an external module twice in different pybind11::scoped_interpreter sessions, the application crashes in eval.h in function eval at following line:withReproducible example codeI feel like this has to do with the comment in pybind11's embed.h:The interpreter can be restarted by calling  again. Modules created using pybind11 can be safely re-initialized. However, Python itself cannot completely unload binary extension modules and there are several caveats with regard to interpreter restarting. All the details can be found in the CPython documentation. In short, not all interpreter memory may be freed, either due to reference cycles or user-created global data.So there is no way to call the Python interpreter twice? I have a python file containing helper numpy functions that I need to call at different points of algorithm execution from C++. Does this mean I can't do that? 
Paraphrasing from the discussion at pybind11 github repo.Instead of using  use  and . Call the interpreter in between as many times as you like.Caveat:, “the Python interpreter is not fully thread-safe In order to support multi-threaded Python programs, there’s a global lock, called the global interpreter lock or GIL“.Example usage:


Answer URL
https://docs.python.org/3/c-api/init.html#thread-state-and-the-global-interpreter-lock
