Natural Text
I'm using  from  package ().I wrote a function that reads a text file and preprocessing it for a future function. I have about 20,000 such text files, thus I wanted to parallelize the process- and for this I used the pool. I have 32 cores on my remote server that is running the code, thus I tried to open 70 process (I also tried less, the problem remains) - this is how my system monitor looks like:  As one can see, 16 out of 32 cores don't work at all!Any help would be appreciated. 
As I said in my comment, all  structures are intended to simulate the multiprocessing interface using regular threads which can be quite useful for testing, debugging, profiling etc. Or, as the official docs say: replicates the API of  but is no more than a wrapper around the  module.While Python (CPython)  uses real system threads, and hence it is in theory possible to have your threaded code execute on different CPUs, due to the dreaded GIL no two of those threads will ever run simultaneously. There are exceptions to that rule, tho - all tasks that are abstracting system calls and wait for an event (like I/O) can execute in parallel but the moment processing moves to the Python domain it will be locked out by GIL and will not be allowed to continue execution until the opt-code counter switches its context.Long story short, if you want to utilize multiple cores through a  pool, do not use the adaptations and abstractions in the  (that reigns true for other  packages, too) and use the root  module itself - in your case, . That being said, given that the  module doesn't come with a pool interface I often find myself using  (or ) instead for I/O heavy stuff (i.e. not restricted by the GIL) when shared memory is more important than shared processing and the overhead that it incurs. It's quite possible that even with a switch to  you won't notice much of a difference if you don't do heavy post-processing when you grab the files.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing
https://docs.python.org/3/library/threading.html#module-threading
https://docs.python.org/3/library/threading.html#module-threading
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool
https://docs.python.org/3/library/threading.html#module-threading
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool
