Natural Text
Okay, I've got a file structure like the following:main.py/paquete/__ init__.pytest1.pyThis is what I've got in my main.py:This is what I've got in my test1.py:And this is what I've got in my __ init__.py:But that doesn't work, it says that there's no module named test1.However, if I have something like:It works perfect. But I don't get it, if __ init__.py it's in the same directory as test1, why do I need to prefix it with the name of the directory as if I was working from the root level of the project? 
What you are currently using is called an implicit relative import.  It was deprecated in Python 3.x and this is mentioned in PEP 8.You can still use a relative import; it just needs to use the syntax described below, with leading dots:These imports use leading dots to indicate the current and parent packages involved in the relative import.Also a reference - The only acceptable syntax for relative imports is . All import forms not starting with  are interpreted as absolute imports. (PEP 0328).
That's because  is in your  but the insides of the package are not. So you can make absolute imports for  package but can only make relative imports for its insides.  is on you  because it is in the same directory are you main.py.You can set the  attribute before the imports to get the insides of the package to be considered by the import statement.Take a look at this for reference https://docs.python.org/3/reference/import.html#module-path


Answer URL
https://docs.python.org/3/reference/import.html#module-path
