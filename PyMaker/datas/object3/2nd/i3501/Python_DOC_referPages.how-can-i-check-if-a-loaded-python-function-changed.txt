Natural Text
As a data scientist / machine learning developer, I have most of the time (always?) a  function. Executing this function often takes more than 5 minutes, because the executed operations are expensive. When I store the end result of  in a pickle file and read that file again, then the time often goes down to a few seconds.So a solution I use quite often is:This solution has a major drawback: If the  changed, the file will not be reloaded.Is there a way to check for changes in Python functions?
Assuming you're asking whether there's a way to tell whether someone changed the source code of the function between the last time you quit the program and the next time you start it…There's no way to do this directly, but it's not that hard to do manually, if you don't mind getting a little hacky.Since you've ed the module and have access to the function, you can use the  function to get its source code. So, all you need to do is save that source. For example:Of course even if the body of the function hasn't changed, its effect might change because of, e.g., a change in some module constant, or the implementation of some other function it uses. Depending on how much this matters, you could pull in the entire module it's defined in, or that module plus every other module that it recursively depends on, etc.And of course you can also save hashes of text instead of the full text, to make things a little smaller. Or embed them in the pickle file instead of saving them alongside.Also, if the source isn't available because it comes from an module you only distribute in  format, you obviously can't check the source. You could pickle the function, or just access its  attribute. But if the function comes from a C extension module, even that won't work. At that point, the best you can do is check the timestamp or hash of the whole binary file.And plenty of other variations. But this should be enough to get you started.A completely different alternative is to do the checking as part of your development workflow, instead of as part of the program.Assuming you're using some kind of version control (if not, you really should be), most of them come with some kind of commit hook system. For example,  comes with a whole slew of options. For example, if you have a program named , it will get run every time you try to . Anyway, the simplest pre-commit hook would be something like (untested):Now, every time you do a , if the diffs include any change to a file named  (obviously use the name of the file with  in it), it will first run the script  (which is a script you write that just deletes all the cached pickle files).If you've edited the file but know you don't need to clean out the pickles, you can just . Or you can expand on the script to have an environment variable that you can use to skip the cleaning, or to only clean certain directories, or whatever you want. (It's probably better to default to cleaning overzealously—worst-case scenario, when you forget every few weeks, you waste 5 minutes waiting, which isn't as bad as waiting 3 hours for it to run a bunch of processing on incorrect data, right?)You can expand on this to, e.g., check the complete diffs and see if they include the function, instead of just checking the filenames. The hooks are just anything executable, so you can write them in Python instead of bash if they get too complicated.If you don't know  all that well (or even if you do), you'll probably be happier installing a third-party library like  that makes it easier to manage hooks, write them in Python (without having to deal with complicated  commands), etc. If you are comfortable with , just looking at  and some of the other samples in the  directory should be enough to give you ideas.


Answer URL
https://docs.python.org/3/library/inspect.html#inspect.getsource
