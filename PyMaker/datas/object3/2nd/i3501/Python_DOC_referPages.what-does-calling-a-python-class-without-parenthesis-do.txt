Natural Text
I don't understand what happens when a class is called without parenthesis. My question stems from reading from this Python HOWTO: Logging Cookbook. Specifically I'm trying to understand a recipe that I've placed at the end of this question. The purpose of the recipe is to instruct a  formatter to use UTC time from within a logging configuration dictionary.A class is defined,and then later used by name only; without parenthesis.What happens here and why is calling the class in this way a benefit over creating an instance of the class? What is this way of doing things called? That is, what keywords (other than 'class') could I search for that would help me find more information about this in the python documentation?Full Recipe:
Using just the name of a class ( in your case) does not instantiate the class. Instead,  is a variable that points to a value of type :That variable can be used to create new instances via , but it can also be used like any other variable. In particular, it can be passed to functions and bound to other names. For example, you can do the following:This is useful in many situations. In your recipe, you define a formatter once by specifying a class () and a name (). That definition is then re-used when you configure different handlers to use that formatter, e.g.To construct the actual logger hierarchy from your configuration,  doesn't need one instance of  (which it would get if you had passed  instead) but one for each handler that you configure to use that formatter (two in your case). Passing the class itself instead of an instance allows  to create new instances as required.


Answer URL
https://docs.python.org/3/howto/logging-cookbook.html
