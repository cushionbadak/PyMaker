Natural Text
BackgroundThere are two files with name  & . This file pair is sitting in multiple folders(shown below), with each file pair having different content.Only way to recognise the names of file pair different from other pair is through the folder structure, they sit in.Files will always be opened in read-only mode using python file api in Linux.With respect to content, One file pair has no relation with other file pair. No clue on the depth of folder structure.Folder names are unknown(in advance).Every folder may not have these file pairs. Some folder may have only sub-folders that have these file pairs. So, a folder can be just empty.Size of each file pair is KB's in size and are static files.GoalThere is a need to access the content of all these file pairs in different areas of code, for different purpose. Program is a server program... that maintains the cache of these set of file pairs...1) Which data structure should I use to efficiently access these file pairs? to actually parse the content in these file pairs....for multiple reasons2) Does it be faster to have content of each file pair, in a pair of data structures? and keyed with a folder path.. 3) Can the file-reading be multi threaded before creating the cache? Because python GIL allows IO bound threads to interleave..
I recommend using nested dicts to cache your  and  pairs. Since a folder may or may not contain the file pairs, when it does, it should use the  key to store a dict of the file pairs in this folder, like this:And here is a recursive function that scans a given directory, reads any of the file pairs within, and returns a dict in the above data structure.You can put the block inside the  loop above into a thread pool if you wish to speed up the process.Or, if you prefer to cache the files in a flat dict, you can use  instead to traverse the entire directory in a loop.


Answer URL
https://docs.python.org/3/library/os.html#os.walk
https://docs.python.org/3/library/os.html#os.walk
