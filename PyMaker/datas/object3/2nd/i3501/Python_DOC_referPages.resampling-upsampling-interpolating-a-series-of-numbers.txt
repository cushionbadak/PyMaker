Natural Text
I have a comma separated series of integer values that I'd like to resample so that I have twice as many, where a new value is added half way between each of the existing values. For example, if this is my source:the result would be:In case that's not clear, I'm trying to add a number between each of the values in my source series, like this:I've searched quite a bit and it seems that something like scipy.signal.resample or panda should work, but I'm completely new at this and I haven't been able to get it working. For example, here's one of my attempts with scipy:Which outputs:Obviously I'm using signal.resample incorrectly. Is there a way I can do this with signal.resample or panda? Should I be using some other method? Also, in my example all of source numbers have an integer half way in between. In my actual data, that won't be the case. So if two of the number are 10,15, the new number would be 12.5. However I'd like to have all of the resulting numbers be integers. So the new number that gets inserted would need to either be 12 or 13 (it doesn't matter to me which it is).Note that once I get this working, the source file will actually be a comma separated list of 2,000 numbers and the output should be 4,000 numbers (or technically 3,999 since there won't be one added to the end). Also, this is going to be used to process something similar to an ECG recording- currently the ECG is sampled at 250 Hz for 8 seconds, which is then passed to a separate process to analyze the recording. However that separate process needs the recording to be sampled at 500 Hz. So the workflow will be that I'll take a 250 Hz recording every 8 seconds and upsample it to 500 Hz, then pass the resulting output to the analysis process.Thanks for any guidance you can provide.
Since the interpolation is simple, you can do it by hand:You can also use  this way:The trick is to have exactly twice the number of elements, so that odd points match your initial points. Also I think that the Fourier interpolation done by  is better for your ECG signal than the linear interpolation you're asking for.
Since you suggested a pandas solution, here is one possibility:It feels unnecessary complicated, though. I tag in pandas, so people more familiar with pandas functionality see it. 
Although I probably would just use NumPy here, pretty similar to J. Martinot-Lagarde's answer, you don't actually have to.First, you can read a single row of comma-separated numbers with just the  module:â€¦ or just string operations:And then you can interpolate that easily:If you want it to be fully general and reusable, just take a  argument and , and replace  with .And now, all you need to do is  the results and  them:Are there any advantages to this solution? Well, other than the read/split and join/write, it's purely lazy. And we can write lazy split and join functions pretty easily (or just do it manually). So if you ever had to deal with a billion comma-separated numbers instead of a thousand, that's all you'd have to change.Here's a lazy :And you can use an  as a lazily-read string (well, , but our data are pure ASCII, so that's fine):And let's use a different solution for lazy writing, just for variety:So, putting it all together:But, even though I was able to slap this together pretty quickly, and all of the pieces are nicely reusable, I'd still probably use NumPy for your specific problem. You're not going to read a row of a billion numbers. You already have NumPy installed on the only machine that's ever going to run this script. The cost of importing it every 8 seconds (which you can solve by just having the script sleep between runs). So, it's hard to beat an elegant 3-line solution.


Answer URL
https://docs.python.org/3/library/mmap.html
