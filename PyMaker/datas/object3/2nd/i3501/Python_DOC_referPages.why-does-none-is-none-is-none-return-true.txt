Natural Text
This question already has an answer here:Why does the expression 0 < 0 == 0 return False in Python?                    9 answers                Why is `True is False == False`, False in Python? [duplicate]                    5 answers                Today, in an interview, the CTO asked me what looks like an easy question, What does this statement return ? :I thought Python executed the first operation  and would return . After that, it would compare  which would return . But, to my surprise, the right answer is . I am trying to find answer to this question, but after a couple of days searching I didn't find anything. Can someone explain why this happens?
The bytecode shows that two comparisons are being performed here with the middle being duplicated:As stated in the docs for comparisons this is because these operators chain together. will be translated to  (note  is duplicated in the bytecode as shown above)
As some people comments, Python comparisons can be chained. For the sake of explanation, when chaining, Python actually ANDs the expressions. The rationale behind this, is that expressions like  have the interpretation that is conventional in mathematics. Hence the confusion of your particular expression  where identy operators are involved.So basically, this would translate to:which is clearly Here is another example in the Python docsFurther InformationEspecially since this was an interview question, it is important to note that this is not a general behavior shared among all languages.As it is stated in the documentation I linked,Unlike C, all comparison operations in Python have the same priority,  which is lower than that of any arithmetic, shifting or bitwise  operation.So, let's consider the  expression (since  operator is not valid in C).C's translation (because of operator precedence)Python's translation
 is a comparison operator, as seen in the docs:So just like the other comparison operators, it can be chained arbitrarily. So is equivalent to 


Answer URL
https://docs.python.org/3/reference/expressions.html#comparisons
https://docs.python.org/3/reference/expressions.html#comparisons
