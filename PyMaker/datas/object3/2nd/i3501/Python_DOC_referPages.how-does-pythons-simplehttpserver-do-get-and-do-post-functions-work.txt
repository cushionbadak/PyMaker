Natural Text
I've created the following little HTTP server for learning purposes:My assumptions are as follows:My class 'ServerHandler' extends the SimpleHTTPServer.SimpleHTTPRequestHandler class by two functions namely go_GET and do_POSTThe main() function creates a server handler object and server socket bound to my I.P. address and port of choice, and invokes a function to serve/listen indefinitely. Aside: I know by looking at the Python DOCs https://docs.python.org/2/library/simplehttpserver.html that SimpleHTTPServer.SimpleHTTPRequestHandler has a method  called do_GET, which I assume gets overridden by the do_GET in my ServerHandler class?Question:What is going on under the hood relating to do_GET and do_POST? Is it the case that once we have this server listening for HTTP "activity" directed towards a specific IP:PORT that it automatically know if an incoming signal is a GET or POST and as soon as one is encountered the server calls my do_GET or do_POST functions?    
When you call , you assign your  class as the class to receive incoming requests.All that the  module has helped you with is providing the basic HTTP functionality, but you could write all of that yourself.So, as you say, when you define , you are inheriting all the methods from the  class, but then overriding two of the pre-defined methods:  and . You could also override any other methods in the class.However, these  methods would never be called if it wasn't for the  method defined in the  as it is this function which is called by the  module.So if you were to just inherit the , you would loose all functionality as this class'  method does nothing:...This function must do all the work required to service a    request. The default implementation does nothing. Several instance    attributes are available to it; the request is available as    self.request; the client address as self.client_address; and the    server instance as self.server, in case it needs access to per-server    information....So, by importing the  from the  module, you immediately get the basic functionality for a HTTP server.All this functionality is documented here, with an important bit on its  method:...Calls handle_one_request() once (or, if persistent    connections are enabled, multiple times) to handle incoming HTTP    requests. You should never need to override it; instead, implement    appropriate do_*() methods. This method will parse and dispatch the request    to the appropriate do_*() method. You should never need to override    it....So finally, after breaking down how the  will call the  method for whatever class you pass it, we see how the  implements this as passing the request onto the appropriate ,  or whatever method depending on the headers of the request.If you want to see how you could implement this yourself, take a look at the source code, either in  or on GitHub.We can see there what their that  inherits  which is where the  and  methods are defined:So, as the docs describe,  just passes requests to  until the connection closes:and the  is where the  methods get called:(note, I double-hashed () my comments to seperate them from the original author's)


Answer URL
https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler
