Natural Text
Given a dictionary with tuples as keys (and numbers/scalars as values), what is a Pythonic way to convert to a nested dictionary?  The hitch is that from input-to-input, the tuples are of arbitrary length.Below, , , and  demonstrate increasing nestedness:And their resulting nested versions would be:My attempts: I like the this trick for initializing an empty data structure, which is given in a number of other SO answers:But am having trouble implementing this because the number of levels is uncertain.  I could use something like:But this would only work for  because its keys have 3 levels (i, j, k) above.  Here's my attempt at a solution to generalizing this, but I'm guessing there is a simpler route.
Just loop over each key, and use all but the last element of the key to add dictionaries. Keep a reference to the last dictionary so set, then use the last element in the key tuple to actually set a key-value pair in the output dictionary:You could use  to handle the traversing-down-the-dictionaries work:I used  rather than the auto-vivication  option, as this produces a regular dictionary that won't further implicitly add keys when they don't yet exist.Demo:Note that the above solution is a clean O(N) loop (N being the length of the input dictionary), whereas a groupby solution as proposed by Ajax1234 has to sort the input to work, making that a O(NlogN) solution. That means that for a dictionary with 1000 elements, a  would need 10.000 steps to produce the output, whereas an O(N) linear loop only takes 1000 steps. For a million keys, this increases to 20 million steps, etc.Moreover, recursion in Python is.. slow, as Python can't optimise such solutions to an iterative approach. Function calls are relatively expensive, so using recursion can carry significant performance costs as you greatly increase the number of function calls and by extension frame stack operations.A time trial shows by how much this matters; using your sample  and 100k runs, we easily see a 5x speed difference:
You can use  with recursion:Output:


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
