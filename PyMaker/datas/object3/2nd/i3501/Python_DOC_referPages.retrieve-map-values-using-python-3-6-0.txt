Natural Text
I'm trying to map a list into hex, and then use the list elsewhere. In python 2.6, this was easy:A: Python 2.6:However, in Python 3.1, the above returns a map object.B: Python 3.1:How do I retrieve the mapped list (as in A above) on Python 3.x? Alternatively, is there a better way of doing this? My initial list object has around 45 items and id like to convert them to hex.
Do this:In Python 3+, many processes that iterate over iterables return iterators themselves.  In most cases, this ends up saving memory, and should make things go faster.   If all you're going to do is iterate over this list eventually, there's no need to even convert it to a list, because you can still iterate over the  object like so:
Why aren't you doing this:It's called a list comprehension.  You can find plenty of information on Google, but here's the link to the Python (2.6) documentation on list comprehensions.  You might be more interested in the Python 3 documenation, though.
New and neat in Python 3.5:Thanks to Additional Unpacking GeneralizationsUPDATEAlways seeking for shorter ways, I discovered this one also works:Unpacking works in tuples too. Note the comma at the end. This makes it a tuple of 1 element. That is, it's equivalent to It's shorter by only one char from the version with the list-brackets, but, in my opinion, better to write, because you start right ahead with the asterisk - the expansion syntax, so I feel it's softer on the mind. :)
List-returning map function has the advantage of saving typing, especially during interactive sessions. You can define  function (on the analogy of python2's ) that returns list:Then calling  instead of  will do the job:  is shorter by 5 characters (30% in this case) than  and is certainly shorter than .  You may create similar functions for  too.There was a comment to the original question:I would suggest a rename to Getting map() to return a list in Python 3.* as it applies to all Python3 versions. Is there a way to do this? â€“  meawoppl Jan 24 at 17:58It is possible to do that, but it is a very bad idea. Just for fun, here's how you may (but should not) do it:
I'm not familiar with Python 3.1, but will this work?
Converting my old comment for better visibility: For a "better way to do this" without  entirely, if your inputs are known to be ASCII ordinals, it's generally much faster to convert to  and decode, a la . That gets you a  of the values, but if you need a  for mutability or the like, you can just convert it (and it's still faster). For example, in  microbenchmarks converting 45 inputs:If you leave it as a , it takes ~20% of the time of the fastest  solutions; even converting back to list it's still less than 40% of the fastest  solution. Bulk convert via  and  then bulk converting back to  saves a lot of work, but as noted, only works if all your inputs are ASCII ordinals (or ordinals in some one byte per character locale specific encoding, e.g. ).
map(func, *iterables) --> map object     Make an iterator that computes the function using arguments from     each of the iterables.  Stops when the shortest iterable is exhausted."Make an iterator"means it will return an iterator."that computes the function using arguments from each of the iterables"means that the next() function of the iterator will take one value of each iterables and pass each of them to one positional parameter of the function.So you get an iterator from the map() funtion and jsut pass it to the list() builtin function or use list comprehensions.
In addition to above answers in , we may simply create a  of result values from a  as We may generalize by another example where I was struck, operations on map can also be handled in similar fashion like in  problem, we can write function to obtain  of items to map and get result set at the same time. Ex. 
Using list comprehension in python and basic map function utility, one can do this also:


Answer URL
https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-448
