Natural Text
I've encountered this strange problem with opening/closing files in python. I am trying to do the same thing in python that i was doing successfully in matlab, and i am getting a problem communicating with some software through text files. I've come up with a strange workaround to solve the problem, but i dont understand why it works.I have software that communicates with a some lab equipment. To communicate with this software, i write a file ('wavefile.txt') to a specific folder, containing parameters to send to the device. I then write another file named 'request.txt' containing the location of this first file ('wavefile.txt') which contains the parameters to send to the device. The software is constantly checking this folder to find the file named 'request.txt' and once it finds it, it will read the parameters in the file which is specified by the text in 'request.txt' and then delete 'request.txt'. The software/equipment developer instructs to give a 50 ms second delay before closing the 'request.txt' file. original matlab code that works:original python code that does not work:Every time the device program reads the 'request.txt' when its working with matlab, it deletes it immediately after matlab closes it. When i run that code with python it works SOMETIMES, maybe 1 in every 5 tries will be successful and the parameters are sent. The 'request.txt' file is always deleted with the python code above,but the parameters i've input are clearly not sent to my lab device. My guess is that when i write the file in python, the device program is able to read it before python writes the text to it, so its just opening the blank file, not applying any parameters, and then deleting it. My workaround in python:This method in python seems to work 100% of the time. I open the file in w+ mode, and using fileh.read() is absolutely necessary. if i delete that line and still include the extra sleeptime, it will again work about 1 in 5 tries. This seems really strange to me. Any explanation, or better solutions?
My guess (which could be wrong) is that the file is being read before it is completely flushed. I would try using the    method after the write to make sure that the complete data is written to the file. You might also need the  method to make sure the data is flushed properly. Try something like this: 
Not knowing any details about the particular equipment and other software you are using it's hard to say. One guess is the difference in buffering on write calls.From this blog post on Matlab's fwrite: "The default behavior for fprintf and fwrite is to flush the file buffer after each call to either of these functions"Whereas for Python's open:When no buffering argument is given, the default buffering policy  works as follows:Binary files are buffered in fixed-size chunks; the size of the buffer  is chosen using a heuristic trying to determine the underlying  device’s “block size” and falling back on io.DEFAULT_BUFFER_SIZE. On  many systems, the buffer will typically be 4096 or 8192 bytes long.“Interactive” text files (files for which isatty() returns True) use  line buffering. Other text files use the policy described above for  binary files.To test this guess change:to:
The problem is probably that you are doing the delay while the file is still open and thus not written to disk.  Try something like this:The only difference here is that the sleep is done after the file is closed (the file is closed when the  block ends), and thus the delay doesn't happen until after the text is written to disk.To put it in words, what you are doing is:Open (and create) fileWrite text to a buffer (in memory, not on disk)Wait 50 msClose (and write) the fileWhat you want to do is:Open (and create) fileWrite text to a buffer (in memory, not on disk)Close (and write) the fileWait 50 msSo what you end up with is a period of at least 50 ms where the text file has been created, but where there is nothing in it because the text is sitting in your computer memory not on disk.To be honest, I would put as little in the  block as possible, to avoid issues like this.  So I would write it like so:Also keep in mind that you also can't do the opposite: assume that no text is written until you close.  For small files like this, that will probably happen.  But when the file is written to disk depends on a lot of factors.  When a file is closed, it is written, but it may be written before that too.


Answer URL
https://docs.python.org/3/library/functions.html#open
