Natural Text
Python 3.7 introduced the PYTHONUTF8 environment variable to enable UTF-8 encoding by default. How do I set this variable from within a Python program? (I can't find it in my operating system's list of environment variables.)
To access environment variables, and modify them if your platform allows it (which Windows and all popular Unixes do), just use .However, this isn’t going to do any good, unless you’re trying to set the environment variable for Python child processes that you’re launching with  or the like. Python reads its environment variables at startup, uses them to pick up configuration information, and doesn’t check them again later.The point of these environment variables (and command-line flags) is to set them in your shell, launcher script, etc., so they’re available when Python starts, not to set them from within Python.Normally, if you need this setting, you’re going to need it globally, so you’ll want to set it in your shell profile script (for Linux), your OS’s GUI for environment variables (for Windows), or both (for macOS—although on Mac, everything is already guaranteed to be set to UTF-8, and I believe even if you manage to break that somehow, Python will ignore it).You’re not going to find this in your existing list of environment variables (unless maybe you’re on an unusual Linux distro that does something odd with the locale settings but needs its default Python to ignore them), but that doesn’t matter; you can add any environment variables you want.But if you want to change things on the fly, while you can’t do that by setting an environment variable, you don’t need to, either.As the docs explain, what it controls is setting the filesystem encoding, preferred encoding, and stdio files encoding.The first two, you can just call the same functions in  and  to set them at any time.If you also want to change the stdio files, that’s a bit trickier. I believe the proposal to make it easier to change the encoding for these files on the fly was rejected or deferred, so the only thing you can do is replace them with new file objects wrapped around the same file descriptor, which looks something like this (untested for now):If you’ve already printed anything to stdout or typed/piped anything into stdin, you may need to  everything first.The only remaining issue that I know of is that  and  will (at least on Unix) have already been decoded with the wrong encoding. You can fix the args by reencoding and redecoding before setting the default encodings. I think this uses the locale settings, so it would look like:Fixing the environment is a bit trickier, because if you try to mutate  it’s going to do a  call that you don’t want. If this is an issue, the best option is probably to make a transcoded copy of  and use that for lookups, and explicitly pass it to subprocess, etc.
Usually you would specify this with a command line argumentIf you want to enable UTF-8 mode from environment variable:It should be set before entering the Python runtime.
You can technically set it using  (the value doesn't matter), but this won't affect the running script. By the time you do it in a Python script, Python has already started and checked for this variable, didn't find it, and therefore isn't using UTF-8 encoding by default. It would affect any Python interpreter you launched from your script, though.The point of the environment variable is to set it before you launch your Python script. You do this in the same way you would set any other environment variable. You don't mention what OS you're using, but on Linux, you generally add the appropriate command to . On Windows, you set them using a button on the Advanced page of the System Properties dialog.Obviously you won't find this environment variable in your system's list of environment variables if you haven't set it yet.


Answer URL
https://docs.python.org/3/howto/unicode.html#the-string-type
