Natural Text
I have the following example:However, this is not working since I'm getting the exception:And that makes sense, but what would be the idiomatic way of doing something like this? I don't just want to use different names. 
You're trying to use  as both the name of the property, and the name of the attribute used under the covers to store that property. That doesn't make sense; you need to give it a different name. Since that attribute is meant to be "private", and accessed only through the property, you normally want to use an underscore prefix.In other words, do exactly the same thing done in the example in the docs for .And of course that  has to be changed to access the same attribute via , not some local variable with the same name.Another option is to use a library that does this for you. As pointed out by Martijn Pieters in the comments,  gives you exactly what you want. And it's tested and robust in all kinds of edge cases you likely never thought about, like threads and asyncio. And it's also got great documentation, and readable source code, that explains how it works.Anyway, it may not be immediately obvious why that  is correct. in the class definition creates a class attribute named , shared by all instances of the class. in a method body doesn't change that class attribute, it creates an instance attribute with the same name.Instance attributes shadow class attributes. That is, when you try to access  in the  and  statements, that looks for an instance attribute, then falls back to a class attribute if one doesn't exist. So, the class attribute's  value works as a default value for the instance attribute.For providing default attribute values, this is a pretty common idiom—but it can be confusing in some cases (e.g., with mutable values).Another way to do the same thing is to just force the instance to always have a  attribute, by setting it in your  or  method:While this is a bit more verbose and complex at first glance (and requires knowing about ), it does avoid the potential for confusion about class vs. instance attributes, so if you're sharing your code with novices, it's more likely they'll be able to follow it.Alternatively, you can use  to see whether the attribute exists, so you don't need either a fallback class attribute or an , but this is usually not what you want to do. Taking a step back, you can even replace  with a descriptor that replaces itself on first lookup—but if you don't know what that means (even after reading the HowTo), you probably don't want to do that either.


Answer URL
https://docs.python.org/3/library/functions.html#property
https://docs.python.org/3/howto/descriptor.html
