Natural Text
I have just started learning Python and one thing is bugging me is the exact type of . So far, I have seen that  is mostly used as string literal like .I mean, it is not a function, it is not a variable. With all the other built-in variables and functions starting with __ it is just confusing. Any special reason it has to start with __? I know it has special meaning in the context of modules and namespaces, but I am talking purely in the terms of basic/primitive data types.
Yes,  is a string literal, since module names are strings. The module is called  to distinguish it from modules named , and since it is a system-assigned name.
Yes, it's just a string. The fact that it has two underscores is because it's a "special name". Special names in Python have these two leading and trailing underscores.What it actually represents is also explained in the docs:29.4.  — Top-level script environment is the name of the scope in which top-level code executes. A module’s  is set equal to  when read from standard input, a script, or from an interactive prompt.A module can discover whether or not it is running in the main scope by checking its own , which allows a common idiom for conditionally executing code in a module when it is run as a script or with  but not when it is imported:For a package, the same effect can be achieved by including a  module, the contents of which will be executed when the module is run with .
Yes, it is a string literal. Like magic methods like  start and end with 2 underscores in order not to be mixed with other methods,   has such naming not to be mixed with names of existing files.
Yes, it's just a string literal that by design looks a bit like the names of some special methods in Python.There is a bit more information in the docs: https://docs.python.org/3/library/main.html
You are right  is a string literal.   is just a variable (commonally called a dunder alias).Here are two easy ways to prove this:Using :This should be enough but you can also overwrite the value of  for example (you shouldn't however):My answer here expains what it is. is a DunderAlias - can be thought of as a global variable (accessible from modules) and works in a similar way to global.  It is a string (global as mentioned above) as indicated by  (), and is an inbuilt standard for both Python 3 and Python 2 versions.


Answer URL
https://docs.python.org/3/library/__main__.html
https://docs.python.org/3/library/__main__.html
