Natural Text
There seems to be slightly ambiguous wording in two parts of the Python docs regarding imports.From "The Module Search Path":When a module named  is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named  in a list of directories given by the variable .From "The Module Cache":The first place checked during import search is . This mapping serves as a cache of all modules that have been previously imported, including the intermediate paths.Which of these is a more accurate representation of what happens internally with Python's import system?  The logic below would say that they can't coexist, since  could very well contain modules that aren't builtin, and could exclude some modules that are.Here's where my confusion stems from: is for caching modules that have already been imported; it's not expressly for storing a comprehensive list of built-in modules.  (The closest thing to that, I think, is , but that also doesn't include stuff that has a  attribute such as .)If I start up a new interpreter session,  contains most builtins, but excludes some stuff from : namely,  and , among others.  Additionally, you can make imports of 3rd party packages, which will be placed into , and at that point  is certainly no longer a dictionary containing only built-in modules.  So, all of that would seem to say, " != built in modules."
You're looking at two completely different sources of information, the tutorial and the language reference.The tutorial section The Module Search Path (besides only describing the default behavior) is also describing only what happens when a module is actually imported. If the module is already in the cache, this process doesn't happen. That's not explained here, because it's already covered in the previous section, More on Modules:A module can contain executable statements as well as function definitions. These statements are intended to initialize the module. They are executed only the first time the module name is encountered in an import statement....Note For efficiency reasons, each module is only imported once per interpreter session.It doesn't explain the mechanism by which this happens, because this is just a tutorial.Meanwhile, in the reference docs for the import system, the module cache section explains the first thing that happen on an  statement. Notice that it's not exactly true that Python avoids executing the module's statements if the module has already been imported, or that it's only imported once for efficiency. That's a consequence of the fact that the default loaders put the module in the  cache. And if you replace the loaders, or monkey with the cache after the fact, a module will in fact be imported and executed multiple times.Subsequent sections—starting with the next section, Finders and loaders—similarly describe the details of how the module is found, more rigorously and in more detail than the Module Search Path section of the tutorial:Python includes a number of default finders and importers. The first one knows how to locate built-in modules, and the second knows how to locate frozen modules. A third default finder searches an import path for modules.So again, it's not exactly true that the interpreter first searches for a built-in module. Instead, the interpreter just searches its finders in order, and by default, the first finder is the built-in module finder. But if you change the list of finders, Python won't search for built-ins first.In fact, if you print out  on a default installation of CPython 3.7, what you'll see is:(Under IPython, or if you've imported something like  that helps rename modules, or if you've imported something like  that embeds versioned modules, you'll have a couple of extra finders.)That  is documented in the  library docs. (If you're wondering why it's not called , a finder that's also its own loader is called an importer.) What it actually does is look at  and call an implementation-specific function to handle anything found there. In CPython 3.6 (apologies for jumping back and forth between 3.6 and 3.7, but it shouldn't matter here…), the implementation-specific function it calls is , and you can trace things from there.But the key thing to notice is that not everything in  is actually "built-in" in the sense that it's pre-imported. For example, with a normal install, you'll probably see  there, but no .So the  function (or, for a different implementation, whatever it uses to implement the ) has to be able to import so/dll/pyd/dylib modules that come pre-installed with Python.
When you do import a module, the interpreter first searches the built-ins then the  . But that is only if you're really importing the module. Before importing a module, there is a cache to search. If the module is already in the cache, it is not imported again.
you need to distinguish between  and sys.modules This is a dictionary that maps module names to modules  which have already been loaded. This can be manipulated to force  reloading of modules and other tricks. Note that removing a module  from this dictionary is not the same as calling reload() on the  corresponding module object.When I load  in jupyter notebook, displays a dictionary of loaded module names mapped to a file location -This is my module cache, but when I try Since numpy is not in my module cache. I will ask python to look for if it in a fixed set of directories which is defined in . A list of strings where I can add or remove paths as I see fit. sys.path A list of strings that specifies the search path for modules.  Initialized from the environment variable PYTHONPATH, plus an  installation-dependent default.If python finds the library in my set of s ; it will create a mapping for it in my  for quick access in the active environment.


Answer URL
https://docs.python.org/3/reference/import.html#the-module-cache
https://docs.python.org/3/reference/import.html#the-module-cache
https://docs.python.org/3/reference/import.html#finders-and-loaders
https://docs.python.org/3/library/importlib.html#importlib.machinery.BuiltinImporter
https://docs.python.org/3/library/sys.html#sys.builtin_module_names
