Natural Text
The main process is the following:One main folder A with B,C,D... subfolders. This main folder has new under consideration files.Most of the subfolders have shps.There is one other main folder though. Let's call it K with L,M,N.. subfolders.These subfolders are the corresponding from the other subfolders of the other folder with the new files.The subfolders from A have the same names with the ones from K although K may have more that we don't need.I want the user to insert the directory of the main  folder and read the first shp from the first subfolder (if it exists an shp there) then go to the other  main folder and check the corresponding subfolder, get the  from there and do some comparisons between them and print the results(the italics parts i have already solved them)and then continue with the rest of the  folder's subfolders accordingly.If in one subfolder there is not an shp it should print:'folder name' has no shp. and continue with the rest.How should i do it?I have tried this code where does some part of it: It stores to a list each shp in every subfolder but from the first main folder. It needs from the two main folders for the comparison to be successful.When should i add this combination between each shapefiles.schema piece?if the shapefiles were inserted manually i would do it like this:And shows the differences like that:Now how should i show each combination's differences as it loops?The files so you can test if it works is here:http://www.mediafire.com/file/644y8e12pj9jrei/main_folders.zip
You can drastically simplify your file collection code by using  to do the collecting; you could use  to filter down the filenames to only  files:This is a generator function that yields a list of files per directory, so you can print information per directory to give to your users. â€˜os.walk()` will traverse all subdirectories, at any depth, starting at the root. If this is an issue, and further nested directories are to be ignored, then using  with grouping on the directory name would be simpler:When you loop over the generator object, you can take the relative path name of each file in a directory, and check if there is a corresponding file in the other location:As for your comparison code, you can make use of the fact that the  dictionary view object is a set, so you can use set operations on those directly without having to call  on them, and sets natively support producing differences. And  can take a key function, so you can sort your results without having to re-arrange your output list:


Answer URL
https://docs.python.org/3/library/os.html#os.walk
https://docs.python.org/3/library/fnmatch.html
https://docs.python.org/3/library/glob.html#glob.iglob
https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
