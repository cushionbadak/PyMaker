Natural Text
I am switched from Python 2.7 to Python 3.6.I have scripts that deal with some non-English content.I usually run scripts via Cron and also in Terminal.I had UnicodeDecodeError in my Python 2.7 scripts and I solved by this.Now in Python 3.6, it doesnt work. I have print statements like  and it throws error. I can solve this issue by replacing it to  but I don't want to write with each print statement.I did  in my terminal and I have still that issue.Is there a cleaner way to solve  issue in Python 3.6?is there any way to tell Python3 to print everything in utf-8? just like I did in Python2?
It sounds like your locale is broken and have another bytes->Unicode issue. The thing you did for Python 2.7 is a hack that only masked the real problem (there's a reason why you have to  to make it work).To fix your locale, try typing  from the command line. It should look something like: depends on  being set properly. Python effectively uses  to work out what encoding to use when writing to stdout in. If it can't work it out, it defaults to ASCII.You should first attempt to fix your locale. If  errors, make sure you've installed the correct language pack for your region.If all else fails, you can always fix Python by setting . This should be used as a last resort as you'll be masking problems once again.If Python is still throwing an error after setting  then please update your question with the stacktrace. Chances are you've got an implied conversion going on.
For a Python-only solution you will have to recreate your  object:After this, a normal  should be encoded to UTF-8 automatically.But you should try to find out why your terminal is set to such a strange encoding (which Python just tries to adopt to).  Maybe your operating system is configured wrong somehow.EDIT: In my tests unsetting the env variable  produced this strange setting for the stdout encoding for me:printed .So I guess you might want to set your  to something like .  Your terminal program doesn't seem to do this.
Python 3 (including 3.6) is already Unicode supported. Here is the doc - https://docs.python.org/3/howto/unicode.html So you don't need to force Unicode support like Python 2.7. Try to run your code normally. If you get any error reading a Unicode text file you need to use the  parameter while reading the file.
I mean you could write an custom function like this:(Not optimal i know)


Answer URL
https://docs.python.org/3/howto/unicode.html
