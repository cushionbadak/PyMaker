Natural Text
I am new to decorators but ideally I wan to use them to simply define a bunch of class functions within class OptionClass, each representing some particular option with a name and description and if it's required. I don't want to modify the operation of the class function at all if that makes sense, I only want to use the decorator to define name, description, and if it's required.Problem 1: I construct an OptionClass() and I want to call it's option_1. When I do this I receive a TypeError as the call decorator is not receiving an instance of OptionClass. Why is this? When I call option_1 passing the instance of OptionClass() it works.  How do I call option_1 without needing to always pass the instance as self.The error when received is: Problem 2: How would I run or call methods on the decorator to set_name, set_description, set_required?Problem 3: Although this is a sample I intend to code an option class using async functions and decorate them. Do I need to make the decorator call be  or is it fine since it's just returning the function?
Problem 1You implemented the method wrapper as a custom callable instead of as a normal function object. This means that you must implement the  descriptor that transforms a function into a method yourself. (If you had used a function this would already be present.)See the Descriptor HowTo GuideProblem 2The callable  instance replaces the function in the  dict. That means that mutating the callable instance affects all instances of  that use that callable object. Make sure that's what you want to do, because if you want to customize the methods per-instance, you'll have to build this differently.You could access it in class definition likeProblem 3The  method in your example isn't returning a function. It's returning the result of the  invocation. But that will be a coroutine object if you define your options using , which you would have to do anyway if you're using the async/await syntax in the function body. This is similar to the way that  transforms a function into a function that returns a generator object.


Answer URL
https://docs.python.org/3/howto/descriptor.html#functions-and-methods
