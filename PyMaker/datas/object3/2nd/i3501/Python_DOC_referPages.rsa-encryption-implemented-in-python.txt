Natural Text
The past days I have been trying to implement an RSA algorithm in Python. My code worked fine for smaller prime numbers (at least up to the first million primes). However, when trying to use the 49 millionth to 50 millionth, my code broke down and gave wrong results. For example, when using the primes 11 and 17 as starting primes, I get the following keys: public: (3,187) and private: (107,187). Using this to encrypt the number 50, the ciphertext is 84, which then decrypts back to 50.However when using the primes 961752619 and 961752931 to encrypt the number 50 I get 781250000000, which when decrypted gives 482883073917854018.I have tried the first 50000 numbers using the latter pair of primes and none have returned the correct value. Obviously something is going wrong here but I have no clue what. I have included a pastebin link to my code, and I have pasted the code below the post as well.
Assuming that you're using Python 3, in which division always returns a float, the problem lies in .  The expression  converts arbitrary-precision integers to limited-precision floats, and this is where the inaccuracy comes in.  If you want to test whether  is evenly divisible by  and return the quotient if so, you should instead write:or, slightly more efficiently with :


Answer URL
https://docs.python.org/3/library/functions.html#divmod
