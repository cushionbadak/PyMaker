Natural Text
This question already has an answer here:python 3 print generator                    2 answers                Recently I have started learning python programming language and I got stuck while printing 123..n sequence using this:I got this output:Expecting Output:     1234....n     (Note: Only continuous output)   
You are attempting to  a generator expression. This is not possible. The parentheses, or lack thereof, indicate a generator expression in Python.Instead, you can use a , indicated by square brackets:If you wish to print the contents of a generator expression, you can iterate explicitly:Or via unpacking the expression and using the  argument:In this specific example, since you are exhausting the iterator, you can pass a  object directly:The  operator is used for sequence unpacking. It can take any iterable and pass unpacked components to a feeder function, in this case . It works for  as this specific function can take an arbitrary number of arguments, e.g. try . It will not, in contrast, work with , which requires only one argument.
This line:Creates a generator and prints it out, it's exactly what's expected. To print the values as a , which i'm guessing is what you intended, add :If you intended to print each element on a separate line the syntax is similar but slightly modified:EDIT: For everything on the same line as you requested in your comment:
As many have mentioned this is creating a . Generators are different from normal functions. Generator returns an  which you can iterate one item per iteration.The method that uses  statement returns a generator.Difference between return statement and yield is, that  statement terminates the program completely. Whereas  statement saves the state of the variable for the next iterations. Suppose you want to do something with the yielded value in those scenarios we use generators.Following are the examples for return and yield statement.As you can see in the second example the state of the variable has been saved in each iteration and at `print('blah blah') you can put any other functionality you want to do in between the iterations.Please read here for further clarification: Python Generators
You need to add : Without the barracks, you'll get the iterator for 1 ... nWith them you'll get the list that the iterator creates  In order to print only the numbers use :
The correct way to print numbers in a sequence is to run the for loop first and the print them, liken=10;  for i in range(1,n):  print (i)



Answer URL
https://docs.python.org/3/reference/expressions.html#generator-expressions
