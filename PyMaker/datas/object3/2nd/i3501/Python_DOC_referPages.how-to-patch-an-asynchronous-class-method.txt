Natural Text
I'm working on the following problem, I have a class, an asynchronous  method of which I want to mock patch:I want to patch specifically only calls likeNormally I'd use where mocker is the pytest-mock plugin fixture and AsyncMock has the formwhich would give me a Mock object that behaves like a coroutine on call. The problem is, that I want to have access to the  attribute that is passed to the method.  is only passed to the mock object if you set  though (see also Python Doc on patching unbound methods), which you can't use together with .Does anyone have an idea how to resolve this?
Indeed, you can't mix autospeccing and a new callable. Instead, autospec the method, but then replace the  attribute, giving it an  instance:Because the  is a callable object, it'll be called every time  is called, and the arguments are passed on to the object. The result of that call is then used to return from :As you can see, the  argument and the parameter are recorded in the call, because  is a properly specced function.Of course, only if the returned  call result is actually awaited will we see that call recorded too:


Answer URL
https://docs.python.org/3/library/unittest.mock-examples.html#mocking-unbound-methods
