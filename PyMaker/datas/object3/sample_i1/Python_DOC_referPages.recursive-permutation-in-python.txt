Natural Text
I need create permutations of list from 3 numbers [0, 1, -1] in expanding list.My output:Expected output: all possible permutations of list size N but in my code only last 3 numbers are change 
Your code only advances to the next length of sequence when the last value of the current sequence is zero. That means you never extend a sequence that has any other value in its prefix. You need to change that behavior, so you recurse on all values.There are a bunch of different ways to do what you're looking for. It seems you are trying to be tail recursive (even though that doesn't offer any benefit in Python). We can make it work though, using an extra argument to tell the code if it should be expanding the list or not (it should not when the list is full, or when we are backtracking):A more natural approach would be to make several recursive calls when appropriate, and let the call stack take care of most of the backtracking logic:Note that in both of these solutions, I'm returning nothing (which is equivalent to return None), and only printing the results as we find them. If you want to get the results returned, you need more complicated logic. A generator is an easy way to do it, just change print(lst) to yield lst and make all the recursive calls be yield from rec(lst).Getting a list of lists as the result is a little bit more fiddly. One reason for that is that you'll need to copy the list of values every time you want to add a solution to the results. Otherwise you'd end up with many references to the same (empty) inner list at the end. You also need to figure out how to merge the results all together, which can be a little bit awkward.
It is the cartesian product of the set with itself


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.permutations
