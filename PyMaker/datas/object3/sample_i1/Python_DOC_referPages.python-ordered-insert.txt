Natural Text
I've been able to verify that the findUniqueWords does result in a sorted list. However, it does not return the list, why?
list.sort sorts the list in place, i.e. it doesn't return a new list. Just write
The problem is here:sort does not return the sorted list; rather, it sorts the list in place.Use:
Here is an email from Guido van Rossum in python's dev list explainig why he choose not to return self on operations that affects the object and don't return a new one.This comes from a coding style (popular in various other languages, I    believe especially Lisp revels in it) where a series of side effects    on a single object can be chained like this:which would be the same asI find the chaining form a threat to readability; it requires that the      reader must be intimately familiar with each of the methods.  The      second form makes it clear that each of these calls acts on the same      object, and so even if you don't know the class and its methods very      well, you can understand that the second and third call are applied to      x (and that all calls are made for their side-effects), and not to      something else.I'd like to reserve chaining for operations that return new values,      like string processing operations:
Python habitually returns None from functions and methods that mutate the data, such as list.sort, list.append, and random.shuffle, with the idea being that it hints to the fact that it was mutating.If you want to take an iterable and return a new, sorted list of its items, use the sorted builtin function.
Python has two kinds of sorts: a sort method (or "member function") and a sort function. The sort method operates on the contents of the object named -- think of it as an action that the object is taking to re-order itself. The sort function is an operation over the data represented by an object and returns a new object with the same contents in a sorted order.Given a list of integers named l the list itself will be reordered if we call l.sort():This method has no return value. But what if we try to assign the result of l.sort()?r now equals actually nothing. This is one of those weird, somewhat annoying details that a programmer is likely to forget about after a period of absence from Python (which is why I am writing this, so I don't forget again).The function sorted(), on the other hand, will not do anything to the contents of l, but will return a new, sorted list with the same contents as l:Be aware that the returned value is not a deep copy, so be cautious about side-effecty operations over elements contained within the list as usual:
To understand why it does not return the list:sort() doesn't return any value while.The sort() method  just sorts the elements of a given list in a specific order - Ascending or Descending without returning any value.So problem is with answer = newList.sort() where answer is none.instead you can just do return  newList.sort()The syntax of sort() method is:Alternatively, you can also use Python's in-built function sorted() for the same purpose.Note: Simplest difference between sort() and sorted() is: sort() doesn't return any value while, sorted() returns an iterable list.So in your case answer = sorted(newList)


Answer URL
https://docs.python.org/3/tutorial/datastructures.html
