Natural Text
I have this bit of code:Which outputs:Whereas this fails:We know that when we invoke a classmethod like <classname>.<methodname>(), the class is implicitly passed as an argument to it, but test here takes no arguments.Why don't we see a TypeError because of the unexpected argument? Isn't the class passed as an argument to test?
Nothing is passed to test() because functions do not bind to anything when accessed to a class. It remains unbound, you get the original function:You can call functions directly, provided you pass in the right number of arguments. Here that is 0, so ABC.test() succeeds.It is not a classmethod, that would require decorating it with @classmethod (or otherwise producing a classmethod object and storing it as an attribute of the class), at which point accessing the attribute binds the function to the class object, producing a bound method:Calling this results in an exception:Functions can be bound too, but only when accessed on an instance of the class. Both function and classmethod objects implement the descriptor protocol, and accessing attributes on classes and on instances will trigger the __get__ method on descriptors. But only classmethod objects return a bound method in that case, functions just return themselves.Specifically, the descriptor __get__ method is passed None for the first argument, the object to bind to, when the attribute access is on a class, and the instance when accessed on the instance. classmethod().__get__() ignores the instance argument and produces a method object that binds to the second argument (owner). Functions return self when the first argument is None, or a method object that binds to the instance otherwise:


Answer URL
https://docs.python.org/3/library/functions.html#classmethod
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/reference/datamodel.html#object.__get__
