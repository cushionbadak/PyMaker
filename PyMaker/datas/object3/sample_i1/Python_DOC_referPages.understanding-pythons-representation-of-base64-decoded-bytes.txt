Natural Text
Context:I am trying a program that captures some MQTT messages and then logs them. While doing this, I encounter a strange problem and I need help with it. In the incoming messages, I get one string which is base64 encoded. My program tries to decode and parse the binary data to figure out some headers of the packet. The code I have looks like this:The output of result looks like this:If the same operation is done using a nodeJS implementation, the output is quite different:I read a few other links within stack overflow and couldn't understand why the difference exists. The link NodeJS base64 Vs Python base64 has some valid points w.r.t to the encoding that was done hence what Python does here is not wrong. Upon reading further, I found another tip where a binascii function was used. So, If I apply this logic, my output looks exactly like the NodeJS output!Now my output looks like what I want. However, there is another new problem. The output of base64 decode was in the format b'\x00' while the output of hexlify is b'0'. Because of this difference, I am unable to run the other part of my code which splits this output byte by byte to do struct.unpack in different formats depending on the header of the packet.Is there any help I can get to proceed?
If I understand well, you are confused by the Python formatting of bytes.Basically, when displaying a byte in Python, if this byte matches an ASCII character, the character is used instead of the numerical value. The results are actually the same in Python and NodeJS, only the representation differs.You can check it by aligning the two representations:As you can see, the values are identical except for:The fact is that each hexadecimal value displayed above match a character in the ASCII table.You can verify it easily in a Python interpreter (ord gives the ascii code of the given character and hex converts it in a hexadecimal representation):Finally you could even get exactly the same representation as NodeJS in few lines of Python:
base64.standard_b64decode returns a bytes object, which is an immutable sequence of single bytes. This is indicated by the b letter before the ".From the docs:Bytes literals are always prefixed with 'b' or 'B'; they produce an instance of the bytes type instead of the str type. They may only contain ASCII characters; bytes with a numeric value of 128 or greater must be expressed with escapes.What you see here is the ASCII representation of the bytes object, not a string.In order to convert a bytes object to a string similar to the result you get from nodeJS, you can use the bytes object method hex:


Answer URL
https://docs.python.org/3/library/stdtypes.html#bytes-objects
https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
