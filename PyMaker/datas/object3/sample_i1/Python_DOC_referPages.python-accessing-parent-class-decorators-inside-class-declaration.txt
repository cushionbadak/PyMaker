Natural Text
Let's say I have this class:And then I create a subclass which uses the parent class decorator:How do I remove the need for Foo. before the decorator name? The below code doesn't work:I believe this is possible, because the sly library does this.See their example:As you can see, you can type in @_(...) instead of @Lexer._(...).How do they accomplish this?
This is done with a metaclass that implements a __prepare__ method. Excerpt from the docs:3.3.3.4. Preparing the class namespaceOnce the appropriate metaclass has been identified, then the class  namespace is prepared. If the metaclass has a __prepare__ attribute,  it is called as namespace = metaclass.__prepare__(name, bases, **kwds)  (where the additional keyword arguments, if any, come from the class  definition).To put it in simple terms: You make your __prepare__ method return a dictionary that contains an entry for the decorator. Proof of concept:
I have looked inside the library you are talking about and the Lexer class inherits a metaclass:class Lexer(metaclass=LexerMeta):Inside the LexerMeta you can find the following:A metaclass is used to create the class object which then is used to instantiate objects. From what i can see in that method is that here d['_'] = _ that metaclass dynamically attaches the _ method to the class you are going to use.This means that what they are doing is not much different from:


Answer URL
https://docs.python.org/3/glossary.html#term-metaclass
https://docs.python.org/3/reference/datamodel.html#preparing-the-class-namespace
