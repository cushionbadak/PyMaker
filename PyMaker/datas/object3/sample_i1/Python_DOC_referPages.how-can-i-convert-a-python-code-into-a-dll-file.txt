Natural Text
Well, I have a Python package. I need to compile it as dll before distribute it in a way easily importable. How? You may suggest that *.pyc. But I read somewhere any *.pyc can be easily decompiled!Update:Follow these:1) I wrote a python package2) want to distribute it3) do NOT want distribute the source4) *.pyc is decompilable >> source can be extracted!5) dll is standard  
Write everything you want to hide in Cython, and compile it to pyd. That's as close as you can get to making compiled python code. Also, dll is not a standard, not in Python world. They're not portable, either.
You can use py2exe.org to convert python scripts into windows executables. Granted this will only work on windows, but it's better then nothing.
You can embed python inside C. The real trick is converting between C values and Python values. Once you've done that, though, making a DLL is pretty straightforward.However, why do you need to make a dll? Do you need to use this from a non-python program?
Python embedding is supported in CFFI version 1.5, you can create a .dll file which can be used by a Windows C application.
I would also using Cython to generate pyd files, like Dikei wrote. But if you really want to secure your code, you should better write the important stuff in C++. The best would be to combine both C++ and Python. The idea: you would leave the python code open for adjustments, so that you don't have to compile everything over and over again. That means, you would write the "core" in C++ (which is the most secure solution these days) and use those dll files in your python code. It really depends what kind of tool or program you are building and how you want to execute it. I create mostly an execution file (exe,app) once I finish a tool or a program, but this is more for the end user. This could be done with py2exe and py2app (both 64 bit compatible). If you implement the interpreter, the end user's machine doesn't have to have python installed on the system.  A pyd file is the same like a dll and fully supported inside python. So you can normally import your module. You can find more information about it here. Using and generating pyd files is the fastest and easiest way to create safe and portable python code.You could also write real dll files in C++ and import them with ctypes to use them (here a good post and here the python description of how it works)
To expand on the answer by Nick ODellYou must be on Windows for DLLs to work, they are not portable.However the code below is cross platform and all platforms support run-times so this can be re-compiled for each platform you need it to work on.Python does not (yet) provide an easy tool to create a dll, however you can do it in C/C++First you will need a compiler (Windows does not have one by default) notably Cygwin, MinGW or Visual Studio.  A basic knowledge of C is also necessary (since we will be coding mainly in C).You will also need to include the necessary headers, I will skip this so it does not become horribly long, and will assume everything is set up correctly.For this demonstration I will print a traditional hello world:Python code we will be converting to a DLL:C code:Here is the tutorial for embedding Python.  There are a few extra things that should be added here, but for brevity I have left those out.Compile it and you should have a DLL. :)That is not all.  You will need to distribute whatever dependencies are needed,  that will mean the python36.dll run-time and some other components to run the Python script.My C coding is not perfect, so if anyone can spot any improvements please comment and I will do my best to fix the it. It might also be possible in C# from this answer How do I call a specific Method from a Python Script in C#?, since C# can create DLLs, and you can call Python functions from C#.
You can use pyinstaller for converting the .py files into executable with all required packages into .dll format.Step 1. pip install pyinstaller, step 2. new python file let's name it code.py . step 3. Write some lines of code i.e print("Hello World") step 4. Open Command Prompt in the same location and write pyinstaller code.py hit enter. Last Step see in the same location two folders name build, dist will be created. inside dist folder there is folder code and inside that folder there is an exe file code.exe along with required .dll files.
Grab Visual Studio Express and IronPython and do it that way? You'll be in Python 2.7.6 world though.


Answer URL
https://docs.python.org/3/extending/embedding.html
