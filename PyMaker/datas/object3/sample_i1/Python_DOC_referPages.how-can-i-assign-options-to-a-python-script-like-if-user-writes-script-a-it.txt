Natural Text
I am originally a C programmer. I have seen numerous tricks and "hacks" to read many different arguments. What are some of the ways Python programmers can do this?RelatedWhat’s the best way to grab/parse command line arguments passed to a Python script?Implementing a “[command] [action] [parameter]” style command-line interfaces?How can I process command line arguments in Python?How do I format positional argument help using Python’s optparse?
The canonical solution in the standard library is argparse (docs):Here is an example:argparse supports (among other things):Multiple options in any order.Short and long options.Default values.Generation of a usage help message.
sys.argv is a list that contains all the arguments passed to the script on the command line.Basically,
Just going around evangelizing for argparse which is better for these reasons.. essentially:(copied from the link)argparse module can handle positionaland optional arguments, whileoptparse can handle only optionalargumentsargparse isn’t dogmatic aboutwhat your command line interfaceshould look like - options like -fileor /file are supported, as arerequired options. Optparse refuses tosupport these features, preferringpurity over practicalityargparse produces moreinformative usage messages, includingcommand-line usage determined fromyour arguments, and help messages forboth positional and optionalarguments. The optparse modulerequires you to write your own usagestring, and has no way to displayhelp for positional arguments.argparse supports action thatconsume a variable number ofcommand-line args, while optparserequires that the exact number ofarguments (e.g. 1, 2, or 3) be knownin advanceargparse supports parsers thatdispatch to sub-commands, whileoptparse requires settingallow_interspersed_args and doing theparser dispatch manuallyAnd my personal favorite:argparse allows the type andaction parameters to add_argument()to be specified with simplecallables, while optparse requireshacking class attributes likeSTORE_ACTIONS or CHECK_METHODS to getproper argument checking
There is also argparse stdlib module (an "impovement" on stdlib's optparse module). Example from the introduction to argparse:Usage:
One way to do it is using sys.argv. This will print the script name as the first argument and all the other parameters that you pass to it.
The docopt library is really slick.  It builds an argument dict from the usage string for your app.Eg from the docopt readme:
If you need something fast and not very flexiblemain.py:Then run python main.py James Smithto produce the following output:Hello James Smith

I use optparse myself, but really like the direction Simon Willison is taking with his recently introduced optfunc library.  It works by:"introspecting a function  definition (including its arguments  and their default values) and using  that to construct a command line  argument parser."So, for example, this function definition:is turned into this optparse help text:
I like getopt from stdlib, eg:Lately I have been wrapping something similiar to this to make things less verbose (eg; making "-h" implicit).
As you can see optparse "The optparse module is deprecated with and will not be developed further; development will continue with the argparse module." 
Pocoo's click is more intuitive, requires less boilerplate, and is at least as powerful as argparse.The only weakness I've encountered so far is that you can't do much customization to help pages, but that usually isn't a requirement and docopt seems like the clear choice when it is.
You may be interested in a little Python module I wrote to make handling of command line arguments even easier (open source and free to use) - Commando
I recommend looking at docopt as a simple alternative to these others.docopt is a new project that works by parsing your --help usage message rather than requiring you to implement everything yourself. You just have to put your usage message in the POSIX format.
Yet another option is argh. It builds on argparse, and lets you write things like:It will automatically generate help and so on, and you can use decorators to provide extra guidance on how the arg-parsing should work.

My solution is entrypoint2. Example:help text:


Answer URL
https://docs.python.org/3/library/argparse.html
https://docs.python.org/3/library/sys.html#sys.argv
https://docs.python.org/3/howto/argparse.html
