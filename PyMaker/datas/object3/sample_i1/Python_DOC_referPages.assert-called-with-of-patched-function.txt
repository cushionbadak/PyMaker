Natural Text
I'm trying to assert the input of a patched request.get() call which is wrapped inside another function. test script:How do I assert the url which was passed to mocked_response_200? mocked_response_200 isn't 'known' within test_get_data.I've checked other posts on here This one comes close but the answer uses a different patch method. Any help would be greatly appreciated.
You are patching an unknown get object in the request module. You probably don't have such a module or object.You need to address the request object in the module under test. If get_data lives in the module views, then you need to patch views.request.get here:From the mock.patch() documentation:target should be a string in the form 'package.module.ClassName'. The target is imported and the specified object replaced with the new object, so the target must be importable from the environment you are calling patch() from. The target is imported when the decorated function is executed, not at decoration time.I'd not use a function here at all however. Just let mock patch the get() method for you, then configure that mock object. You can of course delegate that to a helper function:You can also create a magic mock object in such a function, then pass in the function to new_callable on mock.patch():Either way, the object used to patch request.get with is passed into test_get_data as an argument.Demo of either approach (using patch as a context manager instead of a decorator, but the principle is the same:
First of all, many thanks to @Ja8zyjits and @Martijn Pieters for their help.The solution which worked for me looks as follows:I can't say I fully understand the interaction between passing mock_response_200 as 'side_effect' and passing mock_get to test_get_data yet. But using this combination I was able to both assert the input of the patched request.get and return the desired response to prevent raising any errors during processing of the response.edit: code formatting
Unittest is to test one basic component at a time. So every other component called within needs to be tested in other tests.If you only want to assert url was passed properly then I would suggest not to use new keywordThis will help you to identify if it was called properly. In the later tests use the new keyword to check if the response returned was processed_properly.The mock_process_response is a MagicMock object and will prevent process_response from being called and hence wont require the mock_get to define json or status_code to be defined.edits: added mock for process_response.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch
