Natural Text
Is there a way that I can execute a shell program from Python, which prints its output to the screen, and read its output to a variable without displaying anything on the screen?This sounds a little bit confusing, so maybe I can explain it better by an example.Let's say I have a program that prints something to the screen when executedWhen I want to read the output into a variable in Python, I read that a good approach is to use the subprocess module like so:With this construct, I can get the program's output into my_var (here "Hello World"), however it is also printed to the screen when I run the Python script. Is there any way to suppress this? I couldn't find anything in the subprocess documentation, so maybe there is another module I could use for this purpose?EDIT:I just found out that commands.getoutput() lets me do this. But is there also a way to achieve similar effects in subprocess? Because I was planning to make a Python3 version at some point.EDIT2: Particular ExampleExcerpt from the python script:Screen Output (Note that not "everything" is printed to the screen, only a part ofthe output, and if I use commands.getoutput everything works just fine:
To add to Ryan Haining's answer, you can also handle stderr to make sure nothing is printed to the screen:
If subprocess.check_ouput is not working for you, use a Popen object and a PIPE to capture the program's output in Python.the .communicate() method will wait for a program to finish execution and then return a tuple of (stdout, stderr) which is why you'll want to take the [0] of that. If you also want to capture stderr then add stderr=subprocess.PIPE to the creation of the Popen object.If you wish to capture the output of prog while it is running instead of waiting for it to finish, you can call line = prog.stdout.readline() to read one line at a time.  Note that this will hang if there are no lines available until there is one.
I always used Subprocess.Popen, which gives you no output normally


Answer URL
