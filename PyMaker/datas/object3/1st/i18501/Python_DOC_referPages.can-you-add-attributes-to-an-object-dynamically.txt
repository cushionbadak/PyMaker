Natural Text
I would like to create an object then add attributes to the object on the fly. Here's some pseudocode EX1:EX2: the first page of this PDFIn Python is it possible to add attributes to an object on the fly (similar to the two examples I gave)? If yes, how?
If you are using Python 3.3+, use types.SimpleNamespace:
In Python is it possible to add attributes to an object on the fly  (similar to the two examples I gave)?Yes.If yes, how?You could do:Or even something truly awful like:The unasked question: should you be doing this?  Probably not.  You're just using these things as stand-ins for a proper dict.  If you want named attributes, consider a namedtuple.This provides a (loose) contract for A, and gives a nice repr:Or just use a dict.  That's what they're for.  In fact, that's what you're doing when you 'add attributes on the fly', just with an unnecessary layer of abstraction.  Consider, using the above AttrHolder:You're using a dict whether you like it or not!
Here is an example:output:So, the answer is "yes".  Although it might not be such a good idea (could lead to problems such as losing track of the attributes or something).
Um, am I missing something?  Take the following example:What seems to be the problem?
If you really want to add attributes to an anonymous instances of an anonymous class, you could write:But, really, don't do this!
I use dictionaries for the exact purpose that you are describing (at least from my understanding of the question)...


Answer URL
