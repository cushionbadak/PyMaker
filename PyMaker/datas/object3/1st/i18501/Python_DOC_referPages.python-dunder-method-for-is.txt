Natural Text
This question already has an answer here:Does the `is` operator use a __magic__ method in Python?                    2 answers                While looking through the docs, and specifically here http://docs.python.org/2/reference/expressions.html#is, I still can't find the dunder/protocol method that defines the implementation of the Python keyword is. What method determines it? From what I understand, all is does is to compare the results of the id function when called on two objects.
There is no dunder method for is. You can't override it, and that's intentional. The whole point of is is that it tells you whether two expressions reference the same value. So it has to be false, by definition, for two different values. So there's no need to override it.As the docs put it:The operators is and not is test for object identity: x is y is true if and only if x and y are the same object.(There's a little more in the Data model docs.)Also, is doesn't compare the results of id. id is just defined to return "an integer which is guaranteed to be unique and constant for this object during its lifetime". Which means is certainly could use id, but I don't know of any implementation where it does.That being said, in CPython, it does effectively the same thing under the covers—is checks that the pointers are equal, while id casts the pointer into an integer and returns it. So the only difference between implementing it directly vs. implementing it via id would be an extra pair of function calls and a cast that would compile to no machine code…But in other implementations, even that may not be true. (Which should be obvious, when you consider that Jython and PyPy are written in languages that don't even have such a thing as a pointer.) For example, in PyPy, is checks that the underlying RPython objects are the same, while id returns a key generated on the fly (and cached if you later call id on the same value).


Answer URL
