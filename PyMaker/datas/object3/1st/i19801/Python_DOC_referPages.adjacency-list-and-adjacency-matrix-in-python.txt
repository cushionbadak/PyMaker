Natural Text
Hello I understand the concepts of adjacency list and matrix but I am confused as to how to implement them in Python:An algorithm to achieve the following two examples achieve but without knowing the input from the start as they hard code it in their examples:For adjacency list:For adjacency matrix:Again any help will be much appreciated, Thank you!
Assuming:Here's some code for the matrix:And for the "list":
Setting up your data structures can be pretty simple. For instance, the adjacency list example can be implemented using a defaultdict like this:Then when you start getting input, just do N[start][end] = weight for each inputted edge. The set of nodes will be a little more tricky to come by, if you have some nodes with no outbound edges (you'll need to union the keys of the inner dictionaries with the outer one to be sure you have them all). But a lot of algorithms will work correctly even without a complete node list.The adjacency matrix is a little more complicated, since you need to know the number of nodes there are in order to set its dimensions correctly. If you know it ahead of time, then its easy:If you don't, you'll probably want to scan over the edges you get as input to find the highest numbered node, then use the same code above to make the matrix. For instance, if your edges are provided as a list of (start, end, weight) 3-tuples, you can use this:
I hope the below example helps you it has both Initialized Graph as well as user customized """    def addEdge(self,u,v):        if u not in self.edge:            self.addVertex(u)        if v not in self.edge:            self.addVertex(v)        if u not in self.edge[v]:            self.edge[v].append(u)        if v not in self.edge[u]:            self.edge[u].append(v)


Answer URL
