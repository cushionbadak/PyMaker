Natural Text
This is the scenario. I want to be able to backup the contents of a folder using a python script. However, I want my backups to be stored in a zipped format, possibly bz2.The problem comes from the fact that I don’t want to bother backing up the folder if the contents in the “current” folder are exactly the same as what is in my most recent backup.My process will be like this:Initiate backupCheck contents of “current” folder against what is stored in the most recent zipped backupIf same – then “complete”If different, then run backup, then “complete”Can anyone recomment the most reliable and simple way of completing step2? Do I have to unzip the contents of the backup and store in a temp directory to do a comparison or is there a more elegant way of doing this? Possibly to do with modified date?
Zip files contain CRC32 checksums and you can read them with the python zipfile module: http://docs.python.org/2/library/zipfile.html. You can get a list of ZipInfo objects with CRC members from ZipFile.infolist(). There are also modification dates in the ZipInfo object.You can compare the zip checksum with calculated checksums for the unpacked files. You need to read the unpacked files but you avoid having to decompress everything.CRC32 is not a cryptographic checksum but it should be enough if all you need is to check for changes.This holds for zip files. Other archive formats (like tar.bz2) might not contain such easily-accessible metadata.
Rsync will automatically detect and only copy modified files, but seeing as you want to bzip the results, you still need to detect if anything has changed.How about you output the directory listing (including time stamps) to a text file alongside your archive. The next time you diff the current directory structure against this stored text. You can grep differences out and pipe this file list to rsync to include those changed files.
You could also try the following process:1) Initiate backup2) Run backup3) Compare both compressed files: 4) If same – delete new backup file then "complete"5) Else “complete”NOTE: In case you need to check just the time between the modifications, you can have a look at this documentationRather than decompressing the folder and comparing individual files, I think it might be easier to compare the compressed files.Overall I feel (ok, its just an intuition :D) this will be better in case there is a high probability that the contents of the folder changes in between the times you run the script
I use this script to create compress backup of a directoryonly when the directory contents has changed after last backup.I use external md5 file to store the digest of the backup file and I checkit to detect directory changes.


Answer URL
