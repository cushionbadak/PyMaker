Natural Text
Python has at least six ways of formatting a string:A brief history of the different methods:printf-style formatting has been around since Pythons infancyThe Template class was introduced in Python 2.4The format method was introduced in Python 2.6 f-strings were introduced in Python 3.6My questions are:Is printf-style formatting deprecated or going to be deprecated?In the Template class, is the substitute method deprecated or going to be deprecated? (I'm not talking about safe_substitute, which as I understand it offers unique capabilities)Similar questions and why I think they're not duplicates:Python string formatting: % vs. .format — treats only methods 1 and 2, and asks which one is better; my question is explicitly about deprecation in the light of the Zen of PythonString formatting options: pros and cons — treats only methods 1a and 1b in the question, 1 and 2 in the answer, and also nothing about deprecationadvanced string formatting vs template strings — mostly about methods 1 and 3, and doesn't address deprecationString formatting expressions (Python) — answer mentions that the original '%' approach is planned to be deprecated. But what's the difference between planned to be deprecated, pending deprecation and actual deprecation? And the printf-style method doesn't raise even a PendingDeprecationWarning, so is this really going to be deprecated? This post is also quite old, so the information may be outdated.See alsoPEP 502: String Interpolation - Extended DiscussionString Formatter
While there are various indications in the docs that .format and f-strings are superior to % strings, there's no surviving plan to ever deprecate the latter.In commit Issue #14123: Explicitly mention that old style % string formatting has caveats but is not going away any time soon., inspired by issue Indicate that there are no current plans to deprecate printf-style formatting, the docs on %-formatting were edited to contain this phrase:As the new string-formatting syntax is more flexible and handles tuples and dictionaries naturally, it is recommended for new code. However, there are no current plans to deprecate printf-style formatting.(Emphasis mine.)This phrase was removed later, in commit Close #4966: revamp the sequence docs in order to better explain the state of modern Python. This might seem like a sign that a plan to deprecate % formatting was back on the cards... but diving into the bug tracker reveals that the intent was the opposite. On the bug tracker, the author of the commit characterises the change like this:changed the prose that describes the relationship between printf-style formatting and the str.format method (deliberately removing the implication that the former is any real danger of disappearing - it's simply not practical for us to seriously contemplate killing it off)In other words, we've had two consecutive changes to the %-formatting docs intended to explicitly emphasise that it will not be deprecated, let alone removed. The docs remain opinionated on the relative merits of different kinds of string formatting, but they're also clear the %-formatting isn't going to get deprecated or removed.What's more, the most recent change to that paragraph, in March 2017, changed it from this...The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). Using the newer formatted string literals or the str.format interface helps avoid these errors. These alternatives also provide more powerful, flexible and extensible approaches to formatting text.... to this:The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). Using the newer formatted string literals, the str.format interface, or template strings may help avoid these errors. Each of these alternatives provides their own trade-offs and benefits of simplicity, flexibility, and/or extensibility.Notice the change from "helps avoid" to "may help avoid", and how the clear recommendation of .format and f-strings has been replaced by fluffy, equivocal prose about how each style "provides their own trade-offs and benefits". That is, not only is a formal deprecation no longer on the cards, but the current docs are openly acknowledging that % formatting at least has some "benefits" over the other approaches.I'd infer from all this that the movement to deprecate or remove % formatting has not only faltered, but been defeated thoroughly and permanently.
The new .format() method is meant to replace the old % formatting syntax. The latter has been de-emphasised, (but not officially deprecated yet). The method documentation states as much:This method of string formatting is the new standard in Python 3, and should be preferred to the % formatting described in String Formatting Operations in new code.(Emphasis mine).To maintain backwards compatibility and to make transition easier, the old format has been left in place for now. From the original PEP 3101 proposal:Backwards CompatibilityBackwards compatibility can be maintained by leaving the existing  mechanisms in place.  The new system does not collide with any of  the method names of the existing string formatting techniques, so  both systems can co-exist until it comes time to deprecate the  older system.Note the until it comes time to deprecate the older system; it hasn't been deprecated, but the new system is to be used whenever you write new code.The new system has as an advantage that you can combine the tuple and dictionary approach of the old % formatter:and is extensible through the object.__format__() hook used to handle formatting of individual values.Note that the old system had % and the Template class, where the latter allows you to create subclasses that add or alter its behaviour. The new-style system has the Formatter class to fill the same niche.Python 3 has further stepped away from deprecation, instead giving you warning in the printf-style String Formatting section:Note: The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). Using the newer formatted string literals or the str.format() interface helps avoid these errors. These alternatives also provide more powerful, flexible and extensible approaches to formatting text. Python 3.6 also added formatted string literals, which in-line the expressions into the format strings. These are the fastest method of creating strings with interpolated values, and should be used instead of str.format() wherever you can use a literal. 
The % operator for string formatting is not deprecated, and is not going to be removed - despite the other answers.Every time the subject is raised on Python development list, there is strong controversy on which is better, but no controversy on whether to remove the classic way - it will stay. Despite being denoted on PEP 3101, Python 3.1 had come and gone, and % formatting is still around.The statements for the keeping classic style are clear: it is simple, it is fast, it is quick to do for short things. Using the .format method is not always more readable - and barely anyone - even among the core developers, can use the full syntax provided by .format without having to look at the reference Even back in 2009, one had messages like this: http://mail.python.org/pipermail/python-dev/2009-October/092529.html  - the subject had barely showed up in the lists since.2016 updateIn current Python development version (which will become Python 3.6) there is a third method of string interpolation, described on PEP-0498. It defines a new quote prefix f"" (besides the current u"", b"" and r"").Prefixing a string by f will call a method on the string object at runtime, which will automatically interpolate variables from the current scope into the string:
Guido's latest position on this seems to be indicated here:What’s New In Python 3.0PEP 3101: A New Approach To String FormattingA new system for built-in string formatting operations replaces   the % string formatting operator. (However, the % operator is still  supported; it will be deprecated in Python 3.1 and removed from the  language at some later time.) Read PEP 3101 for the full scoop.And the PEP3101 itself, which has the last modified dating back to (Fri, 30 Sep 2011), so no progress as of late on that one, I suppose.
Looking at the older Python docs and PEP 3101 there was a statement that the % operator will be deprecated and removed from the language in the future. The following statement was in the Python docs for Python 3.0, 3.1, and 3.2:Since str.format() is quite new, a lot of Python code still uses the %  operator. However, because this old style of formatting will  eventually be removed from the language, str.format() should generally  be used.If you go to the same section in Python 3.3 and 3.4 docs, you will see that statement has been removed. I also cannot find any other statement anywhere else in the documentation indicating that the operator will be deprecated or removed from the language. It's also important to note that PEP3101 has not been modified in over two and a half years (Fri, 30 Sep 2011).UpdatePEP461 Adding % formatting to bytes and bytearray is accepted and should be part of Python 3.5 or 3.6. It's another sign that the % operator is alive and kicking.


Answer URL
https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting
https://docs.python.org/3/reference/lexical_analysis.html#f-strings
https://docs.python.org/3/reference/lexical_analysis.html#f-strings
https://docs.python.org/3/library/stdtypes.html#str.format
