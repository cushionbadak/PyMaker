Natural Text
I am new to Python. I need to write some data from my program to a spreadsheet. I've searched online and there seem to be many packages available (xlwt, XlsXcessive, openpyxl). Others suggest to write to a .csv file (never used CSV and don't really understand what it is).The program is very simple. I have two lists (float) and three variables (strings). I don't know the lengths of the two lists and they probably won't be the same length.I want the layout to be as in the picture below:The pink column will have the values of the first list and the green column will have the values of the second list.So what's the best way to do this?P.S. I am running Windows 7 but I won't necessarily have Office installed on the computers running this program.I wrote this using all your suggestions. It gets the job done but it can be slightly improved.How do I format the cells created in the for loop (list1 values) as scientific or number?I do not want to truncate the values. The actual values used in the program would have around 10 digits after the decimal.
for more explanation:    https://github.com/python-excel
Use DataFrame.to_excel from pandas. Pandas allows you to represent your data in functionally rich datastructures and will let you read in excel files as well.You will first have to convert your data into a DataFrame and then save it into an excel file like so:and the excel file that comes out looks like this:Note that both lists need to be of equal length else pandas will complain. To solve this, replace all missing values with None.
xlrd/xlwt (standard): Python does not have this functionality in it's standard library, but I think of xlrd/xlwt as the "standard" way to read and write excel files. It is fairly easy to make a workbook, add sheets, write data/formulas, and format cells. If you need all of these things, you may have the most success with this library. I think you could choose openpyxl instead and it would be quite similar, but I have not used it.To format cells with xlwt, define a XFStyle and include the style when you write to a sheet. Here is an example with many number formats. See example code below.Tablib (powerful, intuitive): Tablib is a more powerful yet intuitive library for working with tabular data. It can write excel workbooks with multiple sheets as well as other formats, such as csv, json, and yaml. If you don't need formatted cells (like background color), you will do yourself a favor to use this library, which will get you farther in the long run.csv (easy): Files on your computer are either text or binary. Text files are just characters, including special ones like newlines and tabs, and can be easily opened anywhere (e.g. notepad, your web browser, or Office products). A csv file is a text file that is formatted in a certain way: each line is a list of values, separated by commas. Python programs can easily read and write text, so a csv file is the easiest and fastest way to export data from your python program into excel (or another python program).Excel files are binary and require special libraries that know the file format, which is why you need an additional library for python, or a special program like Microsoft Excel, Gnumeric, or LibreOffice, to read/write them.
CSV stands for comma separated values. CSV is like a text file and can be created simply by adding the .CSV extensionfor example write this code:you can open this file with excel.

Try taking a look at the following libraries too:xlwings - for getting data into and out of a spreadsheet from Python, as well as manipulating workbooks and chartsExcelPython - an Excel add-in for writing user-defined functions (UDFs) and macros in Python instead of VBA
I surveyed a few Excel modules for Python, and found openpyxl to be the best.The free book Automate the Boring Stuff with Python has a chapter on openpyxl with more details or you can check the Read the Docs site. You won't need Office or Excel installed in order to use openpyxl.Your program would look something like this:
OpenPyxl is quite a nice library, built to read/write Excel 2010 xlsx/xlsm files:https://openpyxl.readthedocs.io/en/stableThe other answer, referring to it is using the deperciated function (get_sheet_by_name). This is how to do it without it:
The easiest way to import the exact numbers is to add a decimal after the numbers in your l1 and l2. Python interprets this decimal point as instructions from you to include the exact number. If you need to restrict it to some decimal place, you should be able to create a print command that limits the output, something simple like:Would restrict it to the tenth decimal place, assuming your data has two integers left of the decimal. 


Answer URL
