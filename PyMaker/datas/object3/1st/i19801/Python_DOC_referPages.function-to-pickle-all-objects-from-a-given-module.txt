Natural Text
I would like to write a function that pickles all objects in the current namespace which are instances of classes from a given module. the idea is that during an ipython session a user creates many objects from mymodule, and may need to  save all of them  quickly. so, for example i want something like this end session, forget about for a month, come back and start new session,so my first attempt (show below) works when pasted into the current namespace. if i define as a function, or put it somewhere else, like in mymodule, then the dir() command doesnt return the current namespace, but the namespace as seen by the function.  even if i pass the result of dir() as an argument, the objects are not available  within the function.  is a function like this possible?
if i define as a function, or put it somewhere else, like in mymodule, then the dir() command doesnt return the current namespace, but the namespace as seen by the function. even if i pass the result of dir() as an argument, the objects are not available within the function.Right, that's because you're using eval to evaluate them, which evaluates them in the current namespace. You could pass the globals and locals from a different mainspace, and call eval with those parameters. In other words, instead of foo(dir()), foo(dir(), globals(), locals())`.However, this whole design is a bad idea. Using eval to get the members of a scope is a bad idea. In fact, using eval for almost anything is a bad idea.A much better solution is to pass the thing you want to evaluate the members of, and use getattr to get them.And an even better solution is to avoid using dir and then figuring out how to get the attributes with those names; if you want to inspect things, that's what the inspect module is for. (And even when you want to do something that inspect doesn't quite offer, reading its source code—which is linked from the docs—will usually tell you the best way to do it.)


Answer URL
