Natural Text
I am working through the Python for Everybody book (Py4E). A problem there is a problem asks Write a program which repeatedly reads numbers until the user enters "Done". Once "done" is entered, print out the total, count, and average of the numbers.  If the user enters anything other than a number, detect their mistake using try    and except and print an error message and skip to the next number.The problem is the "count" includes entries other than a number. I would like to know how to write the code to avoid this. The code I wrote to solve the problem is below. I have tried relocating the except above the counter variable, and a few other indentation manipulations. Also have tried to use the int() function on read_num. The expected result is that when a number is not entered, the try block is bypassed and the except block is activated, thereby avoiding the additional cycle in counter.
Hey you are actually pretty close.  You are incrementing your count before you parse it into an int (which raises the valueError exception on things other than numbers).  Ideally you want to increment your counter once you know the read_num can be pared into an int, not before.
It appears that you are thinking of the try block like a transaction. With a transaction-based approach, if an exception is hit in the block, all of the code executed in that block would be rolled back.In reality, python executes each line in the try block and only jumps to the except block if and when an exception is hit. This means changes made by successful lines of code are kept.counter = int(counter) + 1 is always going to be successful - since counter is already an integer. This line executes successfully, and then the exception is caught on the next line. Either move the first line below the second, or move this outside the try block completely and include an else block. The else block only executes if the try is successful (Best practice is to only include the line where you'd be expecting the exception in the try block):
I am leaving this, in case anyone else comes across this (it seems to be a popular class/book)I included avg = 0 as a flag so if done is entered at the first input, there isn't an error by trying to divide by zero.  Also, included read_num == int(read_num) prior to the counter = counter + 1 to throw the exception before it the program reached the counter. 


Answer URL
https://docs.python.org/3/tutorial/errors.html#errors-and-exceptions
