Natural Text
I have a class which has an __exit__ and __enter__ function so that I can use it in a with statement, e.g.:I am now trying to write a unit test to test this.   Basically, I am trying to test that do_something() has only been called once.   An example (which I called testmocking1):And my test:So I would expect this to pass, because the test_method has been called exactly once in the function fun().   But the actual result that I get is:How do I test whether a function in a class which is created using a with statement has been called (either once or multiple times), and (related) how do I set the results of those calls (using .side_effect or .return_value)?
The with statement takes whatever __enter__ returns to bind to the name in the as <name> part. You bound it to t:Note that temp() is called, so the with statement starts with temp.return_value. t is not temp.return_value either, it is whatever temp().__enter__() returns, so you need to use the return value for that call:Extending on this, if you want to alter what test_method() returns, do so on the return value of mocked_object.return_value.__enter__.return_value.You can always print out the mock_calls() attribute of your object to see what has happened to it:Note that your actual implementation of temp.__enter__() returns None, so without mocking your fun() function fails with an attribute error.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.mock_calls
