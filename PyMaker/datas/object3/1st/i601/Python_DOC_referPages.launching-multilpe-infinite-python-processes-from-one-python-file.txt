Natural Text
Let's say I have three modules:mod1mod2mod3where each of them runs infinitely long as soon as mod.launch() is called.What are some elegant ways to launch all these infinite loops at once, without waiting for one to finish before calling the other?Let's say I'd have a kind of launcher.py, where I'd try to:This obviously doesn't work, as It will wait for mod1.launch() to finish before launching mod2.launch().Any kind of help is appreciated.
If you would like to execute multiple functions in parallel, you can use either the multiprocessing library, or concurrent.futures.ProcessPoolExecutor. ProcessPoolExecutor uses multiprocessing internally, but has a simpler interface.
Depending on the nature of the work being done in each task, the answer varies.If each task is mostly or all IO-bound, I would recommend multithreading.If each task is CPU-bound, I would recommend multiprocessing (due to the GIL in python).
You can also use the threading module to run each module on a separate thread, but within the same process:The multiprocess module performs a very similar set of tasks and has a very similar API, but uses separate processes instead of threads, so you can use that too.
I'd suggest using Ray, which is a library for parallel and distributed Python. It has some advantages over the standard threading and multiprocessing libraries.The same code will run on a single machine or on multiple machines.You can parallelize both functions and classes.Objects are shared efficiently between tasks using shared memory.To provide a simple runnable example, I'll use functions and classes instead of modules, but you can always wrap the module in a function or class.Approach 1: Parallel functions using tasks.Approach 2: Parallel classes using actors.You can see the Ray documentation.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing
https://docs.python.org/3/library/concurrent.futures.html
https://docs.python.org/3/library/threading.html
https://docs.python.org/3/library/multiprocessing.html
https://docs.python.org/3/library/threading.html
