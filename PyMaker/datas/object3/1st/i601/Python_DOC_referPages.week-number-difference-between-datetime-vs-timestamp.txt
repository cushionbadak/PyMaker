Natural Text
I've got a big problem with datetime and timestamp working with my DataFrame. I want to identify the week number of a date but I found some inconstitencies. Here the case:gives meAs you can see, the date 2018-12-31  for a timestamp is in the first week of the year (a monday) 2019 but is still in 2018. Furthermore, for a datetime the first day of the first week of 2019 is the 2019-01-07.How can we deal with this ? The goal of this is to group by week
Pandas Timestamps and Python datetime.dates are both reporting ISO 8601 week numbers:yieldsdf['datenum'] = df['date'].dt.week is equivalent to df['week'] = df.date.apply(lambda x: x.week),but using the Series.dt accessor is faster (in terms of both writing and performance) than calling the lambda function on each item in df.date which is what apply does.Given a Python datetime.date (or datetime.datetime), the easiest way to obtain theISO week number is to call its isocalendar method:Notice that 2018-12-31 is in ISO year 2019. To make df['weekpy'] return the first day of the ISO week, you must pass the ISO year, d.isocalendar()[0], not the actual year, d.year.
In light of how the .week property is set for those weeks which straddle two different calendar years, we'll need a grouping function that is a little more agnostic to the new year. The simplest solution is to assume there are no skips in your data (you have a row for every day) and partition it into chunks of 7.But that feels really brittle. Instead, here's an implementation that asks, "what was the Monday of this week?" and groups on that.This works because the exact datetime value of a given week's Monday will be unique from week to week. Here's a demo.This of course assumes that you want December 31, 2018 to be in the same week as January 1, 2019 (which, arguably, it is since it falls in the same Monday to Sunday slice, but as Idlehands pointed out, that's a matter of semantics that's up to you to decide).
Use isocalendar() which returns a tuple of (year, week, day):To calculate the start of week, subtract the dayofweek:Final results:


Answer URL
https://docs.python.org/3/library/datetime.html#datetime.date.isocalendar
