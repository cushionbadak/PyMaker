Natural Text
Could anyone explain to me, why unzipping a zipped object (z1) leaves the initial object (z1) empty?
zip returns an iterator, and you can only consume an iterator once.If the number of elements is small, you could create a list or tuple with the elements, or you could use itertools.tee to create several independent iterators from the original:Result:
It doesn't delete it.If you execute print(z1), you will see that it prints a zip object. This is because zip does not create a tuple or a list, but rather an iterator.An iterator is something that generates values on demand. In this case, the zip object generates pairs taken from the input; namely, the mutants and powers lists. To see this in action, after you assign z1, you can call print(next(z1)), which causes z1 to generate the next pair and print it; in this case, ('charles xavier', 'telepathy').If you keep calling next(z1), it will iterate through the two lists until it reaches the end. At that point, it has no data left to read, so if you try calling next(z1) again, it will raise the StopIteration exception, which signifies that the iterable is exhausted.Conversely, if you did something like t1 = tuple(z1), you would be able to call print(*t1) as many times as you wanted. However, if you did that and then tried to call t2 = tuple(z1), you would realise that t2 was empty. This is for the same reason as the above: building t1 from z1 has already exhausted it, so when t2 tries to get values from z1, it immediately hits StopIteration and so generates an empty tuple.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.tee
