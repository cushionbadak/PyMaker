Natural Text
Goal:I want to be able to dynamically import all functions in a sub-package with 'a direct call'Usage:my project: foo.py has just one function: bar.py has just one function: and finally main.py: Comments: if my __init__.py is something like thisI will be able to call foo.foo_funct() or bar.bar_funct() but not foo_funct() or bar_funct()if my __init__.py is something like this:I will be able to call foo_funct() or bar_funct() but for each new sub package I will have to modify my __init__.pyAssuming that from src import * is not the most pythonic method, and assuming that it could be very dangerous to have direct calls due to possible naming conflicts such as a.tree_funct() and b.tree_funct(),  is there any method to reach my goal?
Personally, I prefer to keep things explicit, and just import names that are part of the package API into __init__ explicitly. Your project won't change so rapidly that dynamically importing everything into the __init__.py is going to be a time saver.But if you want to do this, then you have a few options here. If you need to support Python versions older than 3.7, then you can update the package namespace by poking at the globals() dictionary. List all .py files and import them using importlib.import_module() (or with __import__() if you need to support Python versions before 2.7):The above keeps the namespace clean; after the _load_all_submodules() function has run it is removed from the package. It uses the __file__ global to determine the current path and finds any sibling .py files from there.If you only need to support Python 3.7 and up, you can define module-level __getattr__() and __dir__() functions to implement dynamic lookups.Using those hooks in your package __init__.py file could look like:


Answer URL
https://docs.python.org/3/library/functions.html#globals
https://docs.python.org/3/library/importlib.html#importlib.import_module
https://docs.python.org/3/library/functions.html#__import__
