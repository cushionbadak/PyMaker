Natural Text
I have been started to understand AsyncIO, which basically "pauses" a function and goes to the next one when it needs to do non-blocking actions like make a web request or open a file (Are there others?)But then, where are the built-in implementations of an async web request or an async file opening? Isn't AsyncIO just a concept without these? I have only found external libraries that implement them.Or is this the intended case? If so how am I supposed to implement my own async request/file library?
But then, where are the built-in implementations of an async web request or an async file opening?The goal of asyncio is to provide the infrastructure for building async libraries and frameworks. The asyncio module bundled with Python supports sockets in client and server connections, subprocesses, synchronization tools (including queues), execution of blocking code using threading and multiprocessing, as well as communication between blocking code and an event loop running in a different thread.Using this toolset as the basis, third parties have provided open-source libraries for async http, file and console IO, websockets, discord, and many more.
Python supports aysnc/await for auto scheduling in the event loop.aiofiles is an Apache2 licensed library, written in Python, for handling local disk files in asyncio applications.For asynchronous web requests For more Asynchronous implementations, check out 


Answer URL
https://docs.python.org/3/library/asyncio-stream.html#asyncio.open_connection
https://docs.python.org/3/library/asyncio-stream.html#asyncio.start_server
https://docs.python.org/3/library/asyncio-subprocess.html#asyncio-subprocess
https://docs.python.org/3/library/asyncio-sync.html#asyncio-sync
https://docs.python.org/3/library/asyncio-queue.html#asyncio-queues
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor
https://docs.python.org/3/library/asyncio-task.html#asyncio.run_coroutine_threadsafe
