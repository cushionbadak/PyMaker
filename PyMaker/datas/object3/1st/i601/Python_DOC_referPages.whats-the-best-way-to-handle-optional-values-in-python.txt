Natural Text
I have a data structure below which I use to keep track of certain data from a video game.Depending on what data I have available I fill up the values as I go. But, all the attributes are optional and could be None. Ex. kills could be 12 or None. It all depends on what data I had available in that moment. I could make this a bit better by having an object to store the data, but I'll still have the issue of these optional values.What's the best way to deal with optionals like this in Python?
Your instincts were right.  There's no need to store all possible options.  Just store the ones that are applicable.Solution 1: Use get() instead of storing NonesUsually, we don't store all the possible None values in a dictionary.  Just fill in the the non-None values and use the dict.get() method for fetch values:Solution 2: Counter defaults to zero for numeric dataIf the values are all numeric, consider using collections.Counter() which lets optional entries default to zero:Solution 3: getattr() for optional data in instances or classesThe getattr() function lets you specific default values for attribute lookup when using instances or classes.  The instance approach is especially helpful for tracking data for each player:Solution 4: For known defaults, use a ChainMapThe ChainMap class lets you link pairs of dictionaries together to treat them as a single entity.This last solution lets you organize all possible defaults in one place, while letting instances store only the data that is needed.  It also provids simple dictionary access so there is no need for get() or getattr() for every lookup.Hope one of these solutions is a good fit for your problem :-)
If you simply never want to initialize the keys until you have to, you can use defaultdict from the collections package to insert new keys on the fly without the need of initially setting the key value pair.


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.get
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/functions.html#getattr
https://docs.python.org/3/library/collections.html#collections.ChainMap
