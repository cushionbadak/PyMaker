Natural Text
Reading the logging HOWTO (https://docs.python.org/3/howto/logging.html) I came away under the impression that if I configured a logger, then I could subsequently request my logger from the factory via logging.getLogger() and python would know how to get the right logger (the one I configured) and everything would just auto-work, i.e. I wouldn't need to pass the configured logger instance around my code, I could just ask for it wherever I needed it. Instead, I'm observing something different.File log_tester.py:File util/logging_custom.py:When I run this code only the debug statement that is in main() ends up in the log file. The debug statement from test() ends up I'm not sure where exactly.Contents of log/logger_test.log:My expectation was that In test() would also show up in my log file. Have I made some assumptions about how python logging works that are untrue? How do I make it so that all of the logging in my program (which has many classes and modules) goes to the same configured logger? Is that possible without passing around a logger instance everywhere, after it's created in main()?Thanks.
The getLogger function will return a the logger by its name (kind of a singleton): if it doesn't exist, it creates itIf it already exist, it returns itThen what you could do is:util/logging_custom.pylog_tester.pyany_other.pyUpdateTo set the level and the handling of the root logger instead of the one you setted up, use logging.getLogger() without passing any name:
From the docs:Multiple calls to getLogger() with the same name will return a  reference to the same logger object.Your assumptions are quite correct. The problem here is the way you are calling getLogger() in test(). You should be passing the name you used in SetupLogger()'s getLogger() i.e. logger = logging.getLogger(f"{name_prefix} {__name__}").


Answer URL
https://docs.python.org/3/howto/logging.html
