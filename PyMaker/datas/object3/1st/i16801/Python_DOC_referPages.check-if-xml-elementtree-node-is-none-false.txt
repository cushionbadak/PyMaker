Natural Text
This question already has an answer here:Why does bool(xml.etree.ElementTree.Element) evaluate to False?                    2 answers                Is it safe to check whether a variable myvar has not-None value by simply:I'm asking this because I have a variable and was checking whether the variable was not None by simply if variable: but the check has been failing. The variable contains some data but it was evaluating to False in the if check.Full Code:
In Python the boolean (truth) value of the object is not necessarily equal to being None or not. The correctness of that assumption depends on whether your object has the correct methods defined appropriately. As for Python 2.7:object.__nonzero__(self)Called to implement truth value testing and the built-in operation bool(); should return False or True, or their integer equivalents 0 or 1. When this method is not defined, __len__() is called, if it is defined, and the object is considered true if its result is nonzero. If a class defines neither __len__() nor __nonzero__(), all its instances are considered true.Also have a look at the PEP 8, that provides guidance for this issue (emphasis mine):Comparisons to singletons like None should always be done with is or is not, never the equality operators.Also, beware of writing if x when you really mean if x is not None -- e.g. when testing whether a variable or argument that defaults to None was set to some other value. The other value might have a type (such as a container) that could be false in a boolean context!Therefore, to safely test whether you've got None or not None you should use specifically:In the case of the xml.etree.ElementTree.Element the semantics of the boolean evaluation differ from the None-ness of the object:Why does bool(xml.etree.ElementTree.Element) evaluate to False?For reference:https://docs.python.org/2/reference/datamodel.html#object.nonzerohttp://legacy.python.org/dev/peps/pep-0008/#programming-recommendations
The ElementTree behaviour for nodes without children is a notorious departure from standard Python practice. In general, it'd be safe to just use the variable in your if condition and assume that the boolean value is sensible. In this case, as you've experienced first hand, you'll have to do a more explicit check. 
For your case, it is safe since ElementTree returns False to the __nonzero__ test to check if the element has been found or not. However, as the doc says, it is better to check explicitly, with is None if you want to check only if the element hasn't been found:Caution: Because Element objects do not define a nonzero() method, elements with no subelements will test as False.For reminder, object.__nonzero__ is used in value testing and in the bool() operation.


Answer URL
https://docs.python.org/3/library/stdtypes.html#truth-value-testing
