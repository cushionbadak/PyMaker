Natural Text
I have to implement for each class which command devices an operation and simulation mode. So in each method of all class I have to add a if statement like this:I am wondering wether is want to write it as generic as possible to make a procedure which does this thing.Here I could for example create 2 classes DeviceOperation and DeviceSimulated inheriting or maybe it's useless composing Device and switching class following Device.mode.I don't really know if it is relevant.If you any comment or a better way to do it.
well, it's really hard to give advices on a design with close to no context. But it looks like what you want is to take advantage of polymorphism:here I am assuming that there's a device member declared in "realdevice" that has a pretty simple API that matches the RealDevice API, though in real life that rarely happens. SimuDevice, though is basically a state machine that keeps a state and printouts what's happening. Then to make it a better simulator, you need to make it behave like the real device, by maybe adding delays, and giving back data.You can do the same thing using duck typing:which is basically the same thing except that RealDevice and SimuDevice do not inherit from a base class. The advantage of polymorphism over duck typing is that you can implement a partial API to your class, and have the left over methods fail loudly. You can also have common methods between the two classes defined in the mother class. Basically, if you're doing duck typing, and you need to copy the same code in the two classes, it's better to use polymorphism.Then the advantage of using duck typing or polymorphism over simple conditions within a single class are numerous. It makes the code simpler to read, by having one behavior attached to a class, and not two behaviors mixed in a single class.. And it also helps to have both classes with separated documentation. It makes maintenance easier, because when there's a bug affecting one class, the fix will not affect the other... Then, if the simulated device is being used for testing, you may want to have a look at the mock module that helps building objects for simulating behavior.


Answer URL
https://docs.python.org/3/library/unittest.mock.html
