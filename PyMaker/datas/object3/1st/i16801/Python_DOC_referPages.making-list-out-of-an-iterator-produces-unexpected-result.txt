Natural Text
Can anyone please explain why iterating over a list that is produced from iterator X is producing a different result compared to iterating over iterator X?In other words [x for x in list(IteratorObject)] != [x for x in IteratorObject]
The iterators that are yielded for each group from itertools.groupby are not independent of the top-level iteration. You need to consume each one of them before you go on to the next group, or the iterator becomes invalid (it will yield nothing further).This behavior is referenced in the docs:The returned group is itself an iterator that shares the underlying iterable with groupby(). Because the source is shared, when the groupby() object is advanced, the previous group is no longer visible. So, if that data is needed later, it should be stored as a listYour two list comprehensions show this. In the first one, you call list on x[1], which is the iterator. In the second version, all of the iterators are produced first in the list call around the groupby call, and only when you iterate over that list do the inner iterators get consumed. Note that the iterator over last group ([9]) does work!Here's a simpler example:
I think this point in the documentation explains the problem:"The returned group is itself an iterator that shares the underlying iterable with groupby(). Because the source is shared, when the groupby() object is advanced, the previous group is no longer visible. So, if that data is needed later, it should be stored as a list"In your second example, when you convert to a list, you immediately iterate through all of the groups.  But within each group, you don't iterate through the underlying elements.  When you finally try to do that with list(x[1]), it's too late - you've already exhausted the iterator.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
