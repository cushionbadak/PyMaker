Natural Text
This question already has an answer here:Why does Python “preemptively” hang when trying to calculate a very large number?                    2 answers                I was playing around with big numbers, and wrote the following code:Surprisingly, this outputs 0.016864107385627148, and insanely short amount of time. However, it actually takes about 8 seconds, not 0.02.Why is the time module reporting such a fast time when it clearly takes longer than that to run the code?According to time, clock() is deprecated, so I switched it out for process_time(). I get near identical results. Same with perf_counter().Note: this is running from IDLE. When I ran from command line, the time seemed accurately reported. Perhaps pythonw.exe has something to do with this, but what?However, when I add another 0 to the end of 2**10..., it takes ~7 seconds on command line, but reported 0.1781140373572865.
python.exe and pythonw.exe are optimizing the code before running. It seems that the 2**100000000 is being pre-computed. This small edit to the code:Produces the following output completely after the wait:So the program doesn't even run until after the majority of the wait.Data that suggests that this is with the 2**... part (running from command line):On that last run, there was a clear ~1.5 second wait between the output of program entered and 1.6400543291627092.
The constant is precomputed:Compare:vs.:In the first case the time doesn't change after increasing the power 10 times. It is changed as it should in the second case there the power is a variable.
The best way to time small bits of code is with timeitIf I use timeit on my computer and compare to yours, I get a similar number using Python 3.4:Prints:I used time.time() vs time.clock() but both seem to work. 


Answer URL
https://docs.python.org/3/library/time.html#time.clock
https://docs.python.org/3/library/time.html#time.process_time
https://docs.python.org/3/library/time.html#time.perf_counter
