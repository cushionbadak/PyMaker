Natural Text
I have a list that looks something like this:I want to clean up the output a bit, sort the values, remove duplicate entries, and so on. But in it's current format, instead of operating on each values as an entire individual element, it's operating on individual characters (i.e. just a string of individual letters). What I get back is just nonsensical diced up strings of text.So basically, I want to consolidate all the sublists into a single list, on a single line, in the following (regular) format:  I'm new to Python, so there's a chance I've missed something (or used incorrect terminology at some point), but this (and the placement of the square brackets) is why I assumed this to be considered a list (and/or multiple sublists); if I substitute print(links) with print(type(links)), I get the following output:The original piece of code where links is defined, looks something like this:  
Looks like you have a list of list in my_list. If soOutput:
toolz.concat is surprisingly efficient (as a lazy function) and elegant for this kind of task.Or, if you want a set:If you don't have toolz, you can use the below instead. toolz often provides easy access for some common hard-to-find functions hidden in other libraries.

you not have a single list, but 6 lists with one element. if you want to collectall that into one item without duplicates i suggest you use aset:...i was not able to test that; you may have to tweak it a litte.
Okay, I figured it out:The object/list in question (i.e. links), needs to be initialized outside the scope of the function and/or class in which it's defined (i.e. the block of code where items are appended to it). It can come before, or after; as long as long as it's interpreted first.  The same applies to calling the print() statement (regarding scope), but it should be interpreted last (after calling the function and/or class that sets it up).  For example:Input:Output:


Answer URL
https://docs.python.org/3/library/stdtypes.html?highlight=set#set
