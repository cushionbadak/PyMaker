Natural Text
This question already has an answer here:Python Assignment Operator Precedence - (a, b) = a[b] = {}, 5                    1 answer                I found the assignment a = a[1:] = [2] in an article.  I tried it in python3 and python2; it all works, but I don't understand how it works.  = here is not like in C; C processes = by right to left.  How does python process the = operator?
Per the language docs on assignment:An assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right.In this case, a = a[1:] = [2] has an expression list [2], and two "target lists", a and a[1:], where a is the left-most "target list".You can see how this behaves by looking at the disassembly:(The last two lines of the disassembly can be ignored, dis is making a function wrapper to disassemble the string)The important part to note is that when you do x = y = some_val, some_val is loaded on the stack (in this case by the LOAD_CONST and BUILD_LIST), then the stack entry is duplicated and assigned, from left to right, to the targets given.So when you do:it makes two references to a brand new list containing 2, and the first action is a STORE one of these references to a. Next, it stores the second reference to a[1:], but since the slice assignment mutates a itself, it has to load a again, which gets the list just stored. Luckily, list is resilient against self-slice-assignment, or we'd have issues (it would be forever reading the value it just added to add to the end until we ran out of memory and crashed); as is, it behaves as a copy of [2] was assigned to replace any and all elements from index one onwards.The end result is equivalent to if you'd done:but it avoids the use of the _ name.To be clear, the disassembly annotated:Make list [2]:Make a copy of the reference to [2]:Perform store to a:Perform store to a[1:]:
The way I understand such assignments is that this is equivalent toThe resulting value of [2, 2] is consistent with this interpretation.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#assignment-statements
