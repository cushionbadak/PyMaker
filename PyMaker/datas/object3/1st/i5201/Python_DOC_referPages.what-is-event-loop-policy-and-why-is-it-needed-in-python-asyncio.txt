Natural Text
The event loops documentation mentions event_loop_policy but doesnâ€™t describe what it is and why this abstract layer is needed in detail.(the documentation even says one can customize this layer).In addition, help(asyncio.get_event_loop_policy()) is just saying...UNIX event loop policy with a watcher for child processes.Then, I come to be more confused. What is watcher? What are child processes in event loop?
Event loop policy is an object that is uses to create, set or get event loops. For example, when you call asyncio.new_event_loop() it is policy who will determine concrete returned event loop's class.Policy is needed if you for some reason would want to change default event loop type. Encapsulating logic of creating loops inside a separate replaceable (what is convenient) policy object is a strategy programming pattern.help(asyncio.get_event_loop_policy()) gives you docs for concrete policy used in your OS, in your case for _UnixDefaultEventLoopPolicy.By the link you can see how things implemented there, find what watcher is and read it's docs:As you can see it's pretty low-level, OS-specific stuff and you usually don't need it to use asyncio.I think you may need investigate in policies only if you're going to write your event loops and/or policies that manages them.


Answer URL
https://docs.python.org/3/library/asyncio-eventloops.html
https://docs.python.org/3/library/asyncio-eventloops.html#event-loop-policy-interface
