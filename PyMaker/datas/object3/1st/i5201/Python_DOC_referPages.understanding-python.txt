Natural Text
Need help understanding what exactly this code does. I understand what the join functions does. I am just struggling a bit with understanding what the format function is doing and what the lambda function is doing.
TL;DR:lambda is just a good way at specifying (before-hand) what to look at or use. Otherwise you wouldn't be able to specify:"I want to sort on index 1 of each element in the iterable"Stepwise:The lambda is setting the key as the last element (x[-1]) of x, where x is an element inside c.items(). So essentially, the flow is this:sorted() gets executed first; it is going to sort the contents of c.items()But what does it sort on? lambda x:x[-1] says the key is the last element of each element in the iterable c.items(). So if:c.items() == ['123', '456', '789']Then the key for the sorted() is going to be the '3', '6', '9' and the will be sorted in reverse = True.But since c.items() likely represents a dict contents, the for key, val means that each element will unpack into 2 distinct variables: key, val. So my example before is more like:c.items() == [['this', 1], ['that', 2], ['thus', 0]And the lambda allows for sorting on 1, 2, and 0.You already said you understand the join, but the format is only using the value of key; hence the {0}.So here is an example with what you've got going on:Since the sorted() takes the lambda return as the key, we know that the key will be the last ([-1]) element for each element in the iterable (c.items()). That means we are going to automatically sort ascending, but since we have reversed = True we are going to sort descending. As such, the above is what you get!
That is a fun one. People shouldn't write stuff like that professionally, especially without comments to explain what it does. A counter is an iterable made from another iterable, with keys which are unique elements in the original iterable and values which are the number of times each element appears in the original iterable. For example:Counter.items() converts the counter into a list of tuples of the form (key, value). The line takes that list of tuples and sorts them in descending order by the value element of the iterable. From the example above:Now that the list is sorted, it iterates over each key, value pair in the list. String.format in this case replaces the {0} with the first argument passed. They probably passed two elements to confuse you. All it ends up doing is appending each key in descending order of the number of occurrences in the original iterable.This is functionally equivalent toThe String.format does basically nothing.
format is a method for string type for example:output of a will be 'Tom is very tall'and what lambda do is using a one time functionlambda x : x[-1] actually is do the same thing within your code sorted(c.items(), key = lambda x:x[-1], reverse = True)mean sort c.items by the ( last item in c.item ) and reverse for example c.items = [['a','1'],['b','0'],['c','3']] after sort will be
See the documentation for format string syntax:The format string "{0}" contains one replacement field. The 0 references the first (zero-indexed) positional argument (this is key in '{0}'.format(key, val)). As ShadowRanger mentioned in a comment, the second positional argument val is not used. See the documentation for sorted:The lambda function is passed as the key argument. Basically, this is a way to control how sorted sorts the iterable. From the documentation:key specifies a function of one argument that is used to extract a comparison key from each list element: key=str.lower. The default value is None (compare the elements directly).


Answer URL
https://docs.python.org/3/library/string.html#format-string-syntax
https://docs.python.org/3/library/functions.html#sorted
