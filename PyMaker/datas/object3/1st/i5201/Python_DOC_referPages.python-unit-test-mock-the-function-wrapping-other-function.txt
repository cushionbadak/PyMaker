Natural Text
This question already has an answer here:Python Mocking a function from an imported module                    2 answers                Here is what I want to test:test.pyAnd program code:a.pyb.pyWhat I want to do is testing function2(). Problem is though function2() call crawl_data() inside. I don't want crawl_data() to crawl data from web in the test, So I tried mocking this function.When I run the test, function2() still crawl data from the web in real!The reason that I don't want to mock function2 is that, when I start the test, test framework use virtual database (provided by django)!So, What I want to do is make crawl_data() as a mock when the function2() call it inside.How can I do that?EDITI followed the solution "Martijn Pietersâ™¦" gave, and implement code like below:a.pyb.pytest1.pyresultIt print out "1", not 10....I tried to change @patch("b.sum") to @patch("b.fake_sum") to check whether it import correctly, and @patch("b.fake_sum") occured error(something like fake_sum not exsits) so I think importing module works well Still doesn't work..
You are patching the wrong reference to crawl_data; the b module has a direct reference to the function, which patching a.crawl_data won't touch. Patch it in b:Also see the Where to patch section of the mock module documentation. There is no point in using data = crawl_data() in your test, there is little point in testing your mock.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#where-to-patch
