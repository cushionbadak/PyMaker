Natural Text
I'm using the Python C API to call a method. At present I am using PyObject_CallMethodObjArgs to do this. This is a variadic function:This is absolutely fine when the number of arguments is known at compile time. However, I have a scenario where the number of arguments is not known until runtime, they are supplied as an array.In essence my issue is precisely the same as in this question: How can I pass an array as parameters to a vararg function? The accepted answer there tells me that there is no solution to my problem. Is there are way around this hurdle. If I cannot solve the problem using PyObject_CallMethodObjArgs is there an alternative function in the Python C API that can meet my needs?For instance, PyObject_Call accepts parameters as a Python sequence object. Is it possible to use this function, or one with a similar interface?
I am not sure if I am completey wrong, but AFAICT it should be possible tocreate a tuple with the required number of argumentspass this tuple to https://docs.python.org/3/c-api/object.html#c.PyObject_CallObject or https://docs.python.org/3/c-api/object.html#c.PyObject_Call (this decision depending on the need for kwargs).
A possible way might be to use libffi, perhaps thru the ctypes Python library.  It knows your ABI and calling conventions (so is partly coded in assembler, for many popular implementations) and enables you to call an arbitrary function of arbitrary signature and arbitrary arity.Notice that there is no purely standard way of doing that (without using some external library Ã  la libffi...) in portable and standard C11 (check by reading n1570).BTW, libffi can be used from any C program. And ctypes can be used from any Python program.The Python Embedding and extending Python chapter explains how to call Python from C, or C from Python.


Answer URL
https://docs.python.org/3/c-api/object.html#c.PyObject_CallMethodObjArgs
https://docs.python.org/3/c-api/object.html#c.PyObject_Call
https://docs.python.org/3/c-api/object.html#c.PyObject_CallObject
https://docs.python.org/3/c-api/object.html#c.PyObject_Call
https://docs.python.org/3/library/ctypes.html
https://docs.python.org/3/extending/index.html
https://docs.python.org/3/c-api/index.html
