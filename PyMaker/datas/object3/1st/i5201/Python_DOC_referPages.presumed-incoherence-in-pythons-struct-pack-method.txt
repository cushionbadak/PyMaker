Natural Text
I am very confused right now.If I pack a 7-length binary string, the result is the following:Moreover, if I pack an unsigned long long, the result is:But, if I pack both together, the reuslt adds an extra byte:Anyone knows why this extra byte appears? b'\x1fBLOCK\n \x00\x00\xed\x01\x00\x00\x00\x00\x00'This fact is ruining the binary reading of a custom file...
The layout of bytes produced by struct.pack will (by default) match that produced by your platforms C compiler, which may include pad bytes between fields. You can disable this behaviour by adding a = to the start of your format string:
It seems that I have used the @ flag, which means that the byte order is the native one, and the final size is thus variable.The solution lies on using a fixed size flag, such as <, >, ! or =:
The additional \x00 is the string termination byte - in C a string is ended by  \x00. You concattenate a string to a unsigned long long, so Note By default, the result of packing a given C struct includes pad bytes in order to maintain proper alignment for the C types involvedapplies.https://docs.python.org/3/library/struct.html#format-characters


Answer URL
https://docs.python.org/3/library/struct.html#module-struct
https://docs.python.org/3/library/struct.html#format-characters
