Natural Text
I have two python scripts which import each other and access a variable defined in the first script. But changes made to this variable are not seen in the other module.Code with which the behavior can be reproduced:File a.pyFile b.py:Run the program with python a.py. The result is:Expected output:... where the keys are time.time() strings.I thought the global variable X should be able to be referenced wherever we want to. So why is X not updated in b.f even though the call to set is adding these keys to it?
The problem is that two instances of the variable X are created in such a set-up: one in a.py and another in b.py. The problem also occurs in this example that reduces it to the essence -- it is not related to creating threads:Problem in most simple formFile a.py:File b.py:When running a.py the output is:B original value  B new value  A original valueIf the same X were accessed, then the last line of the output would have read:A new valueExplanationThis happens because import creates new instances of all global names therein. It will do this only upon the first time import a is encountered, and it really is the first time here. The module created by execution of a.py is named __main__, not a. Since this name is different from a, import a will really import the module, and not just reference the already loaded __main__ module. See also the Python documentation for a description of how module names are resolved.As a consequence the names in these two modules are distinct; import a does not make the __main__ names accessible to the other module.SolutionA quick solution is to replace the import a statement in b.py with an import __main__ statement, and use __main__.X as the qualified name you want to access in b.py. But this is not regarded the advised way to proceed.A more robust way is to ensure the global variables are not defined in the executed script, but in an imported module -- one that is imported by both a.py and b.py. The second import will make the names available that were defined when the first import was parsed:File common.py:File a.py:File b.py:Now the output is:B original value  B new value  A new valueSolution applied to your codeFile common.py:File a.py:File b.py:
a.pyb.pyand finally here's your answer:
I think the answer lies in the fact that python does not truly allow global variables. A scope of a global is typically only in the same module. So when another module imports a module with globals, the namespace is copied and a variable is created with same original value. An imported Python module will not have direct access to the globals in the module which imports it, nor vice versa. You may want to read the section 1.2.5 & 1.15.6 from  Norman Matloff's Quick and Painless Python PDF Tutorial


Answer URL
https://docs.python.org/3/reference/import.html#the-module-cache
