Natural Text
I have a really large group of pandas dataframe.and transfer own column from json format string to dictionary.After we get dictionary, we need transfer one entity says df[0]['paragraphs'] from string to dictionary. Here is the code. i['t'] is key and i['p'] is value.And I call this function by:It works fine. but at this part i['paragraphs'] = preprocess.str2dict(i['paragraphs']) it did unnecessary copy.I want my str2dict function be like this:so that we can reduce the copy assignment.And I'm confused thatin Python everything is object, so the variable are like shared_pointer in C++.But where does there object be implement(initialized). Does all objects' pointee store in heap, and in stack of function all variable are pointer.  when we do thisPython will new a dictionary and let a point to it. and when a = 2, program will delete dictionary on heap and point to 2.but how about in function?s is still 1. I think a = {} create a dict and create a local variable a to point it, this a have no relation to parameter a. So how can I use parameter a to let output s = {}.And in the end, where can I learn how Python implement (where the variable store, what happens when it type changed)and memory staff? I think I should learn something about Cpython. Do you guys have any suggestion about what books or videos should I read? thx :)  
CPython works very differently from C++. Everything is on the heap. Memory is managed automatically by reference counting (cycles are dealt with a garbage collector). Variables are not typed. Python does not support pass by reference semantics. i['paragraphs'] = preprocess.str2dict(i['paragraphs']) does not make a copy. If no other reference to the string referenced by i['paragraphs'] exists, that string's reference count will go to zero once str2dict terminates, and the memory will be reclaimed.This function:creates a dict object, it gets assigned to the local name a. Once the function returns, no other references to that dict exist, and the dict object is deallocated. This is handled by the Python runtime, and generally, you do not worry about these things. 
Do you want to free RAM while runnig your program?I am not sure that you can do that,at least not in a way similar to C++.With CPython you have gcIt saysAnyway,gc could reclaim memory but it doesn't necessarily return it to the OS.


Answer URL
https://docs.python.org/3/library/gc.html
