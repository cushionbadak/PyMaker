Natural Text
I timed two Pandas queries with the hope of achieving much higher speeds with a index. However, the opposite happened. Can someone explain why that is? or whether something I am doing is wrong? My understanding was, a Pandas index works as a hash table and look ups would happen in constant time. As far as row filtering is concerned, I believe it is a sequential filtering where each time a filter is applied, all the rows in the data frame is scanned.The data set has about 8 million rows and 7 columns. I am trying to filter by a combination of string values in a column in which the data is not unique.After indexing:
.loc is implemented in Python so it's slow.The first way does two things:Compute .isin. Here's a link to the path that your code is taking. It relies on the hashtable module which is written in cython (and runs at near c speeds).Once you've computed a mask, applying it is mostly done with numpy which again means c speeds.The moral of the story is that sticking in c/cython land is faster than operating in Python land.
@HYRY's explanation on how indices are treated in pandas is informative:When index is unique, pandas use a hashtable to map key to value O(1).  When index is non-unique and sorted, pandas use binary search O(log N),  when index is random ordered pandas need to check all the keys in the  index O(N).


Answer URL
https://docs.python.org/3/library/profile.html#module-profile
