Natural Text
could someone please help with a questions around the parametrization of scipy distributions and how to transform them? I basically would like to recover distribution parameters of data that I simulate with numpy... ...by fitting a distribution with scipyFor the normal distribution, this works. recovered_parms ~= (81,7) However, for e.g. a wald distribution it does not. Result: recovered_parms ~= (1.28,3.66)    I understand that they need to be transformed but just can't figure out how. Any help appreciated.  
If the problem is to just estimate the lambda and mean of the wald distribution. You can just doThis estimate seems to be pretty close than whatever the scipy.stats.wald fit is returning (if we interpret one of them as mean or we know how to interpret it)
I don't know that you can; this appears to be a can of worms. See if you agree with my reasoning.First I generate four samples, one for each of the means 1, 2, 4 and 8, keeping the scale the same at 1. I calculate a fit for each sample. Then I generate another four samples, one for each of the scales 1, 4, 16 and 64, this time keeping the mean the same at 1.Here are the results.I would expect the location to appear first in each pair of results but it appears that location is second. Still, at least the location does approximate the mean, even if it shows an increasing negative bias. It's difficult to interpret the scale. Over a large range the scale estimates might be on a logarithm scale.This might be a question to put on the developer's site.
numpy.random.wald has two parameters, mean and scale.scale is, as the name suggests, a scale parameter, in the senseof a location-scale family.mean is a shape parameter; it is not a location parameter.If you look at the docstring for numpy.random.wald, it says"Draw samples from a Wald, or inverse Gaussian, distribution."The docstring for scipy.stats.wald, however, says that it is"a special case of invgauss with mu == 1", where mu is ashape parameter of scipy.stats.invgauss.  scipy.stats.wald hasonly two parameters, loc and scale.  (All the continuousdistributions in scipy.stats have these parameters.)  So the parametersof numpy.random.wald and scipy.stats.wald don't match up:numpy.random.wald has a shape and a scale parameter, but scipy.stats.wald has a location and a scale parameter.Instead of scipy.stats.wald, you must use scipy.stats.invgauss to fit data generated with numpy.random.wald.scipy.stats.invgauss is an implementation of the inverse Gaussian distribution that ismentioned in the docstring of numpy.random.wald.  scipy.stats.invgausshas three parameters: one shape parameter called mu, along with thestandard location (loc) and scale parameters.The shape parameter mu of scipy.stats.invgauss is not the same as theshape parameter mean of numpy.random.wald.  If you do a little algebra with the PDFs of the two functions, you'll find that the relation iswhere mu is the invgauss shape parameter, mean is the shape parameter used in numpy.random.wald, and scale has the same meaning in both functions.If you generate a sample using numpy.random.wald and you then want torecover the parameters by fitting the inverse Gaussian distribution toit, you must use the above relation to convert the result of the fit tothe mean used by numpy.random.wald.  Also, numpy.random.wald doesn'thave a location parameter, so you must restrict the location of scipy.stats.invgauss to be 0 by using the argument floc=0 in scipy.stats.invgauss.fit().Here's an example.  First, generate some data using numpy.random.wald:Now fit scipy.stats.invgauss to that data, with the restriction that thelocation parameter is 0:As expected, the scale parameter is close to the parameter that was used to generate the data.  To get the estimate of the shape parameter that was used, multiply mu and scale:It is approximately 4, as expected.A plot is always useful for visualizing the fit.  In the plot, the blue bars show the normalized histogram of the data, and the black curve is the PDF of the fitted inverse Gaussian distribution.


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions
