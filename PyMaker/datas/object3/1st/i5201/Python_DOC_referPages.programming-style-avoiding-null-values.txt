Natural Text
This question already has an answer here:How is returning the output of a function different from printing it?                    6 answers                So I'm working my way through Wentworth et al How to Think Like a Computer Scientist a Python 3 guidebook to try and teach myself more about programming. While it's a fantastic resource, it has very little to say about style and "best practice" for writing in Python 3. I'm working through one of practice questions in the chapter on conditionals that asks me to write a function that returns a string 'grade' when an int or float 'mark' is inputted. My direct question here is about the repetition in the conditionals in the function and the value the function returns. Is it possible to use a loop instead somehow to make it more concise instead of just writing elif statements over and over? Also, the main grade function is returning a null None value; How I can make this function "fruitful" and not print None when it's called? Here's what I've written:
Rather than using print() in the grade() function, return your result and have the caller print the resulting mark. The grade() function should only be used to return a grade:Note that finalmark() is responsible for printing now; that's the best place for it, as that same function also is responsible for printing the question on the screen and taking user input. Like your version, finalmark() returns None (because that's the default), and I removed the print() from around the finalmark() call to avoid printing that return value. There's no point in printing it, finalmark() will never return anything other than None.You can also remove half of your tests; only the first matching if or elif branch is picked, the rest are skipped. So you can remove tests for what a previous branch already covered:If the first if mark >= 75.0: test did not match, then there is no need to test for mark < 75.0 anymore, because we have tested for the inverse. Testing for mark >= 70.0 is enough for the next grade. If that fails to match, we know the mark is definitely smaller than 70, so the next test only needs to test if it is larger than 60.0, etc.Now a pattern emerges that you could build a loop on. You test for a lower bound, and if it matches, you know which index to return. Build a separate list to store the lower bounds:I used the zip() function here to pair up the grade names and the bounds, pairwise. You could also have used the enumerate() function to generate an index along with each grade name, or a for index in range(len(grds)): loop, but I find zip() to work cleaner here.Next, we can start being clever with the algorithm. The above still tests each grade, from high to low, one by one. That can take up to N steps, for N grades. That's a linear algorithm, it takes as many steps as there are inputs.But the grades are sorted, so we could use bisection here; jump to the middle and see if the mark is lower or higher than the current bound. Then pick either half, and test again, until you find a best match. Bisection takes at most Log(N) steps. Python has a very fast implementation included; it assumes values in increasing order, so reverse the grades and boundaries:bisect.bisect_right() bisects into bounds to find the 'insertion point' for mark, which will be to the right of the same value in the list. So 35.0 would be inserted at 0, 50.0 at 3 (as it is equal or higher), 74.0 at 5 and anything at 75.0 or higher at 6. And those happen to be the exact indices for the matching grades.
Two very simple things:You never return anything.  By default, Python is going to return None.  You can fix this by adding a return statement in addition to or in lieu of your print statement.You can simplify your expression.  Python accepts ranges of expressions analogous to mathematical ranges (e.g. 0 <= x <= 100 is valid Python).  You can see an example of that above; I leave cleaning it up and making it more readable as an exercise for the reader.
Below are two pythonic solutions. As a learning problem, there are a few interesting bits to understand: dictionaries with tuple keys, iterating dictionary items, generator expressions, class inheritance.This isn't the only way to structure your code. Another way is to set a sequence of boundary scores, as in @MartijnPeter's answer. However, these are readable and reasonably performant solutions.In both instances note the importance of the return statement, which is missing in your code. By default, Python returns None.FunctionalObject-orientedThe beauty of python is it marries, to some degree, object-oriented and functional programming. Consider the below solution. Efficiency will be similar to the above, but it introduces a construct, subclass dict_range inheriting from dict, which can be reused easily in other scenarios.
First : why does your function return None ?Because you actually use print, which echoes the text to the user. What you want to use instead is return, which will leave the function and basically say "that's what I have calculated".As there is no value returned, python automatically returns None. If you were in a stricter language, you would probably have an error.Therefore, you should do this :Second : how to improve your code ?The first thing to see is that if the first condition is valid (mark >= 75.0) then, in all the elifs, mark can't be more (or equal) to 75, which mean that you can, in this case, get rid of every lower than condition in every elif.Third : how to improve your code (2) ?Now, as I have told you, return leaves the function. So you can use this to remove the elifs as such : The issue now is that you have the same code repeated a lot of times. This mean that you can break it into a loop. I would recommend using an array of bounds as such :I hope I have explained this clearly, if you have any questions, just ask them below.
Slightly different approach to Makoto. Again, just for a snippet.


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/functions.html#enumerate
https://docs.python.org/3/library/bisect.html
https://docs.python.org/3/library/bisect.html#other-examples
