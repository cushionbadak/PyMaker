Natural Text
Suppose I have a binary search tree [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]If I run the following function, I want to know how many times the recursion function executes(in the following example, it is 31)I can get this by create a global variableThe variable ind will be 31.The question is, how can I make this indinside the dfs function rather than creating the global variable?
You could use a parameter.
You could return the number of executions:
If you don't want to rewrite your recursive function, you could also decorate it in a function that counts it using a counter of some sort. Example of an implementation:UPDATE: I've changed the answer, but the old answer is kept at the end of the answer //UPDATEAssume here that you have some recursion functions in some_module.py:And you want to apply the decorator to count how many recursions ran. Here, the code is performed inside some_function() to show that you don't have to keep the count variable(s) in the global scope. (See comments) (Also, the recursive functions are still in global space)A few modifications/variations:Instead of using my_deco = partial(counting_recursion, counter=counters), the recursive functions could be decorated directly:Instead of using fn.__name__ to identify the called function, the counting_recursion-function could be rewritten as:Then, to read the number from the counters dictionary:If you want to read more about wrapping functions, check out https://stackoverflow.com/a/25827070/1144382 and the docs on wrapsOLD EXAMPLE:To implement this in your case, just make some counter and decorate your function:Of course, you don't have to make a Counter-class to call counter.count() on, you could also have a dictionary of counters, e.g. counts[loopBST] += 1 or just an array with a single element count_list[0] += 1. (see the code example at top of this answer) (The entire point is to "hide" the value in a reference that is not rewritten when the variable is reassigned, which is why just an integer count count += 1 won't work.)
Maybe you can try with instance of a class, this way it probably is cleaner than having keyword argument. Not to mention that you can store additional data in instance.This is a Python 2.7 class.


Answer URL
https://docs.python.org/3/library/functools.html#functools.wraps
