Natural Text
I'm working on a script that needs to output numbers in a precision determined by length and not just decimal places. Let's say I want a max of 7 decimals but whole numbers above 7 digits are ok although they can't have decimals if the total amount of digits is 7 or higher.So the rules are:For example:are all correct.How do I handle numbers (all float) in this format?   For example:I was thinking about something along the lines of:but then I get in trouble with situations like  because the whole float is longer than 7 digits.What to do?Edit for asked examples:
I don't really get what you want, but perhaps this can help you?From the documentation:Return number rounded to ndigits precision after the decimal point. If ndigits is omitted or is None, it returns the nearest integer to its input.For the built-in types supporting round() , values are rounded to the closest multiple of 10 to the power minus ndigits; if two multiples are equally close, rounding is done toward the even choice (so, for example, both round(0.5) and round(-0.5) are 0, and round(1.5) is 2). Any integer value is valid for ndigits (positive, zero, or negative). The return value is an integer if called with one argument, otherwise of the same type as number.For a general Python object number, round(number, ndigits) delegates to number.__round__(ndigits).Note: The behavior of round() for floats can be surprising: for example, round(2.675, 2) gives 2.67 instead of the expected 2.68. This is not a bug: it's a result of the fact that most decimal fractions can't be represented exactly as a float. See Floating Point Arithmetic: Issues and Limitations for more information.
I think what you are asking can be solved in how you determine your length and also by finding if there is a decimal in your string or not.  For instance if you saidThis will give you the length of all your numbers to the left of the decimal place.And this will tell you if there is a decimal place in your number.
Here's one version, using string formatting to truncate the decimals.  It turns out that string formatting actually rounds, instead of dropping characters, so string slicing may work better for you
I change your code slightly and turned it into a function to make it easier to test.By changing the number into an int the decimals are dropped and we can check the length of the number with out the decimal in the way. If the int is greater than 7 digits we just return the int else we round the number as you were trying before.OutputIf you need to account for negative numbers than you can just add lstrip after converting it to a string.
Here's a super simple version using string slicing:Output:An alternative using str.format():


Answer URL
https://docs.python.org/3/library/functions.html#round
https://docs.python.org/3/tutorial/floatingpoint.html#tut-fp-issues
