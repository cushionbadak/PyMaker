Natural Text
Practicing with decorators, found this behavior strange:Why does the first print in the decorator show empty containers? Further, if I defined build() as:I know it will fail because of nested function scoping. I'm just not sure why they somehow don't exists before the call to build and suddenly return to scope.
You have two different callables here:test_decorator()the wrapper returned by test_decorator(), build().You are confusing the two. The first is called with only the class, becauseis really justThat call is only passed one argument, the class being decorated, which is assigned to the cls name. The args and kwargs arguments to that call remain empty.When you then call Test(...), you are really calling build(...). That call is passed arguments that are captured by the local args and kwargs objects, and passed to cls(...) (which references the original class object). Those arguments are not lost, they clearly are being passed on to the __init__ method and the instance attributes by the same names are correctly set.To distinguish the different catch-all parameters, start with giving them different names and augment your print() output:Now the output becomes:Note that the Decorator called with ... output was produced when the class statement was executed, while the t = Test(...) call triggered the build() wrapper called ... output.


Answer URL
https://docs.python.org/3/tutorial/classes.html#scopes-and-namespaces-example
