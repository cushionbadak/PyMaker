Natural Text
In Lua, there's a built-in function called setfenv(), which allows you to supply a table of variables as an environment for a function.  Here's an example that uses it:My motivation for doing this is that it allows me to set up a platform so that users can write easy-to-understand scripts in Lua (they can write nullary functions and can simply trust that variables will be there for them).  It also provides an elegant method of excluding modules and functions that I don't want them to use for security reason (e.g. if you define a variable table that doesn't have the os module defined, there's no way a more knowledgeable user could use it maliciously).I would like to be able to achieve the same thing in Python.  Is there something similar that can be done in Python?
There's exec:This isn't particularly good style (I would even say that it is particularly bad).  It makes the implementation of foo difficult to understand since it relies on knowing about the special way in which it will be called.  Instead, pass arguments to functions.This does not provide any measure of security.  As a first approximation, Python does not include any restricted execution capabilities.  Nothing stops a user from supplying this definition of foo instead:Just because you didn't supply os in the mapping doesn't mean they can't go get it themselves.  If you really need restricted execution, then you might want to stick with Lua, or at least investigate PyPy sandboxed mode.
Why would you ever want to do that? Did your code become too readable?Just pass a dict or a struct with your 'env' to the function.EDIT: read your motivation. First part i cannot understand (writing lua scripts in python? what does that mean?), the second is plain wrong. This is no way to restrict enviroment. For one, you can still import os.Restricted execution is kinda a complex topic. Some stuff i know of:  Python restricted module - http://docs.python.org/library/restricted.html. Deprecated.  An outdated wiki page - http://wiki.python.org/moin/SandboxedPython. Nothing insanely useful there.  PyPy. This is probably the way to go. PyPy sandbox docs: http://codespeak.net/pypy/dist/pypy/doc/sandbox.html
I'm not sure why you'd want to do this, but here is one hacky way:Caveat: This is not something I recommend doing.
I don't know of any sane way to do that. Just use function arguments.If you want it to have many variables, stick them in a dict and pass that.
You can have your function take an extra value that is a blob of keyword arguments:


Answer URL
https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep468
