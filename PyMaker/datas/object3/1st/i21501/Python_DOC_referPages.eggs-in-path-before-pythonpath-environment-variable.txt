Natural Text
If I have packages installed from easy_install, the eggs are prepended to sys.path before the items in the PYTHONPATH variable.For example, if I have an egg package called foo installed as well as a package called foo in the current directory, and then do this:This will use the egg version of foo instead of the local directory. Inspecting sys.path shows that eggs are placed before items from PYTHONPATH. This seems broken. Is there any way to override this behavior?
Unfortunately this is done with a hard-coded template deep inside setuptools/command/easy_install.py.  You could create a patched setuptools with an edited template, but I've found no clean way to extend easy_install from the outside.Each time easy_install runs it will regenerate the file easy_install.pth. Here is a quick script which you can run after easy_install, to remove the header and footer from easy_install.pth. You could create a wrapper shell script to run this immediately after easy_install:Example:For more clarification, here is the format of easy-install.pth:The two import sys lines are the culprit causing the eggs to appear at the start of the path. My script just removes those sys.path-munging lines.
Consider using the -S command-line option to suppress *.pth processing:https://docs.python.org/3/library/site.html#site.mainYou can also use -S with site.main() to delay *.pth processing until runtime, say to capture the original sys.path for appending:Start from explicit empty PYTHONPATHAppend to sys.path explicitly with extendImport site and call site.main()Append new paths to old path and then install it in sys.pathPrint with ":" for PYTHONPATHpython -S is desirable for later runs only using $PYTHONPATHpython -S may or may not be desirable while setting PYTHONPATH (depending on if you need sys.path expanded before extending)
I have done something like the following to prepend to the system path when running a top-level python executable file:Often, the "<your python path>" for me involves use of the __file__ attribute to do relative look up for a path that includes the top-level module for my project.  This is not recommended for use in producing, eggs, though I don't seem to mind the consequences.  There may be another alternative to __file__.


Answer URL
https://docs.python.org/3/library/site.html#site.main
