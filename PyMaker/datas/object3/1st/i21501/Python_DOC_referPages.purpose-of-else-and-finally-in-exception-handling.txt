Natural Text
Are the else and finally sections of exception handling redundant? For example, is there any difference between the following two code snippets?and More generally, can't the contents of else always be moved into the try, and can't the contents of finally just be moved outside the try/catch block? If so, what is the purpose of else and finally? Is it just to enhance readability?
The idea is that you keep the code for which you are handling exceptions as small as possible. Anything in the else block could get moved into the try, yes, but then you might end up catching an exception when you really want it to be raised. You may have successfully opened the file, but if the read causes an IOError and it's in the try, that will be caught too.From the horse's mouth:The use of the else clause is better than adding additional code to the try clause because it avoids accidentally catching an exception that wasn’t raised by the code being protected by the try ... except statement.As the other two answers have already said, the finally block is there for code that will get executed whether or not there is an exception raised anywhere, including inside the else or the except, and whether or not that exception is handled. The canonical use case for this is making absolutely sure that a file handle is closed, no matter what.*The official phrasing of this:When an exception has occurred in the try clause and has not been handled by an except clause (or it has occurred in a except or else clause), it is re-raised after the finally clause has been executed. The finally clause is also executed “on the way out” when any other clause of the try statement is left via a break, continue, or return statement.*This particular use has been somewhat obviated by context managers (with...as blocks).
finally is executed regardless of whether the statements in the try block fail or succeed. else is executed only if the statements in the try block don't raise an exception.
No matter what happens, the block in the finally always gets executed. Even if an exception wasn't handled or the exception handlers themselves generate new exceptions.
If you move the contents of the else block inside the try block, you will also catch exceptions that might happen during the else block.  If the linein your example throws an IOError, your first code snippet won't catch that error, while your second snippet will.  You try to keep try blocks as small as possible generally to really only catch the exceptions you want to catch.The finally block gets always executed, no matter what.  If for example the try block contains a return statement, a finally block will still be executed, while any code beneath the whole try/except block won't.


Answer URL
https://docs.python.org/3/tutorial/errors.html
