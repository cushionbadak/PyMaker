Natural Text
EDIT: I am running python 2.6I want to achieve something like this:But what I get is:Any clues as to how to achieve this?
I'd do it like this so changing its type in foo() won't require also changing it in bar().Update 1Here's a slight modification that preserves the original traceback:Update 2For Python 3.x, the code in my first update is syntactically incorrect plus the idea of having a message attribute on BaseException was retracted in a change to PEP 352 on 2012-05-16 (my first update was posted on 2012-03-12). So currently, in Python 3.5.2 anyway, you'd need to do something along these lines to preserve the traceback and not hardcode the type of exception in function bar(). Also note that there will be the line:in the traceback messages displayed.Update 3A commenter asked if there was a way that would work in both Python 2 and 3. Although the answer might seem to be "No" due to the syntax differences, there is a way around that by using a helper function like reraise() in the six add-on module. So, if you'd rather not use the library for some reason, below is a simplified standalone version.Note too, that since the exception is reraised within the reraise() function, that will appear in whatever traceback is raised, but the final result is what you want.
In case you came here searching for a solution for Python3 the manual  says:When raising a new exception (rather than using a bare raise to re-raise the exception currently being handled), the implicit exception context can be supplemented with an explicit cause by using from with raise:Example:Which looks like this in the end:Turning a totally nondescript TypeError into a nice message with hints towards a solution without messing up the original Exception.
Assuming you don't want to or can't modify foo(), you can do this:This is indeed the only solution here that solves the problem in Python 3 without an ugly and confusing "During handling of the above exception, another exception occurred" message.In case the re-raising line should be added to the stack trace, writing raise e instead of raise will do the trick.
One handy approach that I used is to use class attribute as storage for details,as class attribute is accessible both from class object and class instance: Then in your code:And when catching an error:
Unlike previous answers, this works in the face of exceptions with really bad __str__.It does modify the type however, in order to factor out unhelpful __str__ implementations.I'd still like to find an additional improvement that doesn't modify the type.The original traceback and type (name) are preserved.
I will provide a snippet of code that I use often whenever I want to add extra info to an exception.  I works both in Python 2.7 and 3.6.  The code above results in the following output:  I know this deviates a little from the example provided in the question, but nevertheless I hope someone finds it useful. 
You can define your own exception that inherits from another and create it's own constructor to set value.For example:
Maybe


Answer URL
https://docs.python.org/3/library/exceptions.html#TypeError
