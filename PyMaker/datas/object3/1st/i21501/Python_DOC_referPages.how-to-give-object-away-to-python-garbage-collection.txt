Natural Text
There are several threads on Python garbage collection in SO, and after reading about five, plus some doc on line, i am still not sure as to how garbage collection works and how i should manage objects which i am not using. In fact somewhere i read one should not do anything about collecting garbage, others tell one should del objects, while others again explain de-referencing an object is enough for Python to collect it as garbage.So, at the risk of creating a duplicate, i will ask the question again, but differently, hoping to get more comprehensive and clearer information.In my case i want to make a small simulation with objects representing people. Several instances of the Person() class will be created. It should exist for some time until it virtually "dies" while other instances will be created.Now how do i make this Person() instance "die" (assuming many many of these instances will be created and i don't want these instances to hang out like ghosts)?There are several ways i can reference an object:ororWhat is the best way to keep my program clean, freeing resources optimally? And what is the best way then to reference my object so i can control the deletion of the object?
I find that most programs create and dispose of objects quite naturally, so I never normally worry about it.Some examples:What I assume you are after is this:In this case people is the master list and you can control when a Person gets added and removed from the list (its a dictionary).You may have to think through the concept of a person being created and then dying very thoroughly:  Once created how does the person first interact with the simulation.  Upon death, how should you untangle the references?  (Its ok for a person to refer to other stuff, its things like House in my example that would keep a person alive.  You could have other objects hold on to just the name of the person).
Maybe this also can help:Refrences : del method ; gc module ; weakref module
None of this really has anything to do with garbage collection.Python's main method of memory management uses reference counting.In all cases above, Python keeps a count of all the references to the object, and when there are none left, the object is deleted (similar to std::shared_pointer in C++).References get decreased whenthe object holding them is either explicitly deleted (via del)or goes out of scope (see also here (esp. ex. 8)).In your case, this applies to either the john object, or either of the people containers. They go out of scope at the end of the function that created them (assuming they are not returned to the calling function). The vast majority of the time, you can just let them go out of scope - it's only when you create really heavy objects or collections - say inside a big loop - that you might want to consider explicitly using del.Garbage collection really only comes into play when there are reference cycles- for instance, when an object refers to itself. Like:Again, this happens automatically, and you shouldn't need to do anything special.
Previous answers are correct but here is what is recommended according to python 3.7 Document:"Python does automatic memory management (reference counting for most objects and garbage collection to eliminate cycles). The memory is freed shortly after the last reference to it has been eliminated."If you really have to do this because of memory management issues you are experiencing with a particular case then import the gc library and just do thishere is a simple example https://github.com/nanoseconds/PythonTest/blob/master/test.py


Answer URL
https://docs.python.org/3/tutorial/stdlib2.html
