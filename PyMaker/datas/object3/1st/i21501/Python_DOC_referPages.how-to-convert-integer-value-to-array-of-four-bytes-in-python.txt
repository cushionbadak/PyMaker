Natural Text
I need to send a message of bytes in Python and I need to convert an unsigned integer number to a byte array. How do you convert an integer value to an array of four bytes in Python? Like in C:Can someone show me how? It is strange to me at first to program without types. 
Sven has you answer. However, byte shifting numbers (as in your question) is also possible in Python:
Have a look at the struct module.  Probably all you need is struct.pack("I", your_int) to pack the integer in a string, and then place this string in the message.  The format string "I" denotes an unsigned 32-bit integer.If you want to unpack such a string to a tuple of for integers, you can use struct.unpack("4b", s):(The example is obviously on a little-endian machine.)
This is kind of an old thread, but in Python 3.2+ now you can simply say:or byteorder = 'little' as per your needs. Documentation here.
In case anyone looks at this question sometime later ...This statement should be equivalent to the code in the original question:And I don't think it matters what the host byte order is.If your integers are larger than int32, you can use "!Q" in the call to pack() for int64 (if your system supports Q).And list() or even bytearray() will work in place of tuple().Note, the result is a sequence of str objects (each holding a single byte), not integers.  If you must have a list of integers, you can do this:... or this:But using map() starts making things a bit messy.
You can pretty much do the same thing:or you can do something shorter:
It can be done with ctypes as well. It's especially useful for converting floating point numbers to bytes. Example:
And for completeness: you can also use the array module:


Answer URL
https://docs.python.org/3/library/stdtypes.html#int.to_bytes
