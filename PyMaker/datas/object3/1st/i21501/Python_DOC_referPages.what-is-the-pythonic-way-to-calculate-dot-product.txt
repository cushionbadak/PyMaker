Natural Text
I have two lists, one is named as A, another is named as B. Each element in A is a triple, and each element in B is just an number. I would like to calculate the result defined as :result = A[0][0] * B[0] + A[1][0] * B[1] + ... + A[n-1][0] * B[n-1]I know the logic is easy but how to write in pythonic way?Thanks!
http://docs.scipy.org/doc/numpy/reference/If you want to do it without numpy, try
Python 3.5 has an explicit operator @ for the dot product, so you can writeinstead of
My favorite Pythonic dot product is:So for your case we could do:

Using the operator and the itertools modules:
Probably the most Pythonic way for this kind of thing is to use numpy. ;-)
And that's it.
This might be repeated solution, however:In plain Python:Or using numpy (as described in user57368's answer) :
All above answers are correct, but in my opinion the most pythonic way to calculate dot product is:
Using more_itertools, a third-party library that implements the dotproduct itertools recipe:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
