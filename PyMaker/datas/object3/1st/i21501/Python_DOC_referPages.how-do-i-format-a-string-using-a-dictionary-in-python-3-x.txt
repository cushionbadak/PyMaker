Natural Text
I am a big fan of using dictionaries to format strings. It helps me read the string format I am using as well as let me take advantage of existing dictionaries. For example:However I cannot figure out the python 3.x syntax for doing the same (or if that is even possible). I would like to do the following
Is this good for you?
To unpack a dictionary into keyword arguments, use **. Also,, new-style formatting supports referring to attributes of objects and items of mappings:
As Python 3.0 and 3.1 are EOL'ed and no one uses them, you can and should use str.format_map(mapping) (Python 3.2+):Similar to str.format(**mapping), except that mapping is used directly and not copied to a dict. This is useful if for example mapping is a dict subclass.What this means is that you can use for example a defaultdict that would set (and return) a default value for keys that are missing:Even if the mapping provided is a dict, not a subclass, this would probably still be slightly faster.The difference is not big though, giventhen is about 10 ns (2 %) faster thanon my Python 3.4.3. The difference would probably be larger as more keys are in the dictionary, and Note that the format language is much more flexible than that though; they can contain indexed expressions, attribute accesses and so on, so you can format a whole object, or 2 of them:Starting from 3.6 you can use the interpolated strings too:You just need to remember to use the other quote characters within the nested quotes. Another upside of this approach is that it is much faster than calling a formatting method.

Since the question is specific to Python 3, here's using the new f-string syntax:Note the outer single quotes and inner double quotes (you could also do it the other way around).
The Python 2 syntax works in Python 3 as well:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.format_map
