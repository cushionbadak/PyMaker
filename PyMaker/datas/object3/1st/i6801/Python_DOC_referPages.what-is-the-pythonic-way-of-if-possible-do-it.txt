Natural Text
I wonder how it would be best/most pythonic to write the situation: if it can be done, do it. If not: just leave it.Example:I have a function that loads data from a database. If a writable destination is given the data is written to a file. Independent of the file being written or not, the data is always returned. I could ofcourse check whether there is a writable location and if so write the data to the file. It however seems a non-pythonic way and I think "it's better to ask for forgiveness than permission".I implement this like such:This somehow feels bad because I implement a useless except, after all I expect dest to not always be set to a location because the function can be called without setting it. I also feel that it is not an error that should be logged or treated in some way.Is this a correct way or would you suggest something better/more pythonic?
In this particular instance, I would default dest to None, and would explicitly check it for None.If you also want to quietly fail if dest is given but is invalid, you could use your approach. However, I would advocate replacing the catch-all except clause with except IOError. Otherwise you're potentially catching things like SyntaxError etc.In general, if you do rely on the "it's better to ask for forgiveness than permission" idiom, I think it's best to put as little code as possible inside the try block, and to catch as few exceptions as possible.
Starting with Python 3.4 there is a new tool contextlib.suppress that allows to write similar code without the except Exception: pass lines.Small example quoted from the docs:Technically it is a context manager and this one is reentrant (explained here) and reusable. This means you don't have to create a new one each time, e.g.:


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.suppress
https://docs.python.org/3/library/contextlib.html#reentrant-context-managers
