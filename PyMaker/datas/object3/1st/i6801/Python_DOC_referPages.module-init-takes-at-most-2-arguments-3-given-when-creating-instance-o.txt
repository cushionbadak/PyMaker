Natural Text
I have a class named Board that acts as a superclass. It is basically a randomly generated Sudoku Board with 81 numbers placing correctly on it by the rules. Then I defined a subclass named normalSudoku where it will be initialized with a parameter "difficulties"(a string) where it will decide how many empty entries will appear on the Sudoku.When I created an instance of normalSudoku and try to print it out to see if it works, the following error pops out:I am not sure what I did wrong and I am a bit confused about the use of self and object initialization in python. My Board Class:My normalSudoku Class:
You are trying to create a subclass of a module, not your base class.You import the module here:then try to subclass that directly:Board is the module. If the class is named the same, it's an attribute on the module:You already had the __init__ call call correct, just not the base class reference.Alternatively, import the class from the module:and leave your class definition the same but adjust the __init__ call:Some other pointers:Don't use __name__ dunder (double underscore) names. Those are reserved by Python for future system use, and thus can lead to forward compatibility issues.Try to follow the Python PEP 8 naming conventions; it'll lead to more clarity. Modules are generally named using lower_case_with_underscores names, classes use CamelCase. Your module should be named board, the class Board, making the difference obvious. The same goes for methods; those should be lowercase too.
In addtition to Martjin Pieters' answer, your line self.Create_Empty_Entries(self,difficulties) is also incorrect, it should be self.Create_Empty_Entries(difficulties).Consider this :


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers
