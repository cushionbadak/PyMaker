Natural Text
I would like to create a new Enum (IntEnum) class based on two existing ones. There is a working solution for this, like so:My question: is there a fancy way to achieve this, so that there is a proper class definition? Like overriding some of the metaclass methods, or so? I would like something like this, so that docstring can also be given:Any idea? Thanks!
The library prevents explicitly to do that:Subclassing an enumeration is allowed only if the enumeration does not  define any members.Allowing subclassing of enums that define members would lead to a  violation of some important invariants of types and instances. On the  other hand, it makes sense to allow sharing some common behavior  between a group of enumerations.Therefore, I found a Stackoverflow answer using almost the same workaround as you do. I think this is the only way.
Python 2Using a trick with vars() this can be accomplished:This works because:vars() returns the current namespacemodifying that namespace modifies the classWe delete member and cls because we don't want them to become members.Python 3The above doesn't (yet) work with the new Enum in Python3 3.4 and 3.5 (not sure about 3.6).  The work-a-round is to use aenum instead, which allows us to tell Enum to ignore certain names:1 Disclosure:  I am the author of the Python stdlib Enum, the enum34 backport, and the Advanced Enumeration (aenum)  library.


Answer URL
https://docs.python.org/3/library/enum.html#restricted-subclassing-of-enumerations
https://docs.python.org/3/library/enum.html
https://docs.python.org/3/library/enum.html#restricted-subclassing-of-enumerations
