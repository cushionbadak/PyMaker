Natural Text
If I have a dictionary like:How can I convert it to this?And how can I convert it to this?
It's not in the order you want, but dicts don't have any specific order anyway.1 Sort it or organize it as necessary.See: items(), iteritems()In Python 3.x, you would not use iteritems (which no longer exists), but instead use items, which now returns a "view" into the dictionary items. See the What's New document for Python 3.0, and the new documentation on views.1: Insertion-order preservation for dicts was added in Python 3.7
since no one else did, I'll add py3k versions:
You can use list comprehensions.will get you [ ('a', 1), ('b', 2), ('c', 3) ] and the other example.Read more about list comprehensions if you like, it's very interesting what you can do with them.
Create a list of namedtuplesIt can often be very handy to use namedtuple. For example, you have a dictionary of 'name' as keys and 'score' as values like:You can list the items as tuples, sorted if you like, and get the name and score of, let's say the player with the highest score (index=0) very Pythonically like this:How to do this:list in random order or keeping order of collections.OrderedDict: in order, sorted by value ('score'):sorted with lowest score first:sorted with highest score first:
What you want is dict's items() and iteritems() methods. items returns a list of (key,value) tuples. Since tuples are immutable, they can't be reversed. Thus, you have to iterate the items and create new tuples to get the reversed (value,key) tuples. For iteration, iteritems is preferable since it uses a generator to produce the (key,value) tuples rather than having to keep the entire list in memory.
and
By keys() and values() methods of dictionary and zip.zip will return a list of tuples which acts like an ordered dictionary.Demo:


For Python3.x useFor Python 2.7 use Thanks


Answer URL
https://docs.python.org/3/whatsnew/3.7.html#summary-release-highlights
