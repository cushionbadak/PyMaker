Natural Text
I was watching how to plot Histrogram using python and coming across this statement and I am not sure what it means or how it works.I am not sure how this statement works. I have tried watching videos on how len and range works but still unsure of how it applies to this statement.Thanks,
range(start_number, end_number) creates a range of value from start_number to end_number so in your case, since the length of population_ages is 28, you'll have values that are 0,1,2...27[x for x in ...] simply gives you each value within a list. For example [x for x in 'Hello'] will make a list equal to ['H', 'e', 'l', 'l', 'o']. x can be named anything. 
It's called a list comprehension, andis the same asBeing able to spell it using only one line of code can often help readability.In this case you'll often see people using i as the name of the variable, as in:since i will be an integer getting the legal indexes into mylist, i.e. the half-open interval [0..len(mylist)> meaning the first time i will get the value zero 0 and the last time it will get the length of the list - 1.
In your example:len(population_ages): computes the length of the list population_ages.for x in range(len(population_ages): when you do a cycle like for x in range(number) you're indicating that the cycle will range from 1 to the number. In this case it will go from 1 to the length of your list which is 28.In the expression [x for x in range(number))] the first x is taking the values that result from the evaluation of the loop, in your case it is going to be 1,2,3.....25. If you wanted for example to show the same values of your list you should put something like this: For more information about these topics you could read:len_documentation, python-list-comprehensionsI hope this help you
Other answers already cover the basics.I would like to add that the list comprehension inis a specialization ofwhich isn't really useful becauseit produces x, untransformed from the iterableit produces something no matter what.list comprehension is more useful in cases like this:If you really want a list out of this, it's even better & faster to create it by passing the iterable through the list object:(in python 2, range(len(population_ages)) is even enough since it directly returns a list, but your code isn't portable to python 3 if you really need a subscriptable object.)Also note that manipulating indexes is often a source of errors. Python has a lot of ways not to use indexes (unlike languages like C). A few examples:it can iterate on the values themselvesit can iterate on the indexes+values using enumerate(iterable)iterables of comparable sizes can be processed in parallel using zip or itertools.zip_longestthere are built-in dictionariesso think hard before using indices. There are probably better ways.
Let's see:population_ages is the list with all the records.len(population_ages) returns the length of the list. The list population_ages has 28 elements, therefore len(population_ages) returns 28.range(len(population_ages)), which in this case is range(28), returns [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]. That's a list that contains all the possible indexes that you can use to access population_ages (you can evaluate population_ages[0], population_ages[1], ..., population_ages[27]; but from 28 and onwards, it will raise and IndexError).[x for x in range(len(population_ages))] generates a list, in which each element is each element in range(len(population_ages)). This step isn't changing anything, the result still is [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27].That's what's being saved as ids. I wouldn't know how your code uses it later, but that's step by step what that line is doing.


Answer URL
https://docs.python.org/3/library/functions.html#len
