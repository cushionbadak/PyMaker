Natural Text
Suppose I have a class that will spawn a thread and implements .__enter__ and .__exit__ so I can use it as such:.__exit__ might perform certain actions for clean-up purposes (ie. removing temp files, etc.)That works all fine until I have a list of SomeAsyncTasks that I would like to start all at once.How should I use with on the list? I'm hoping for something like this:
I think contextlib.ExitStack is exactly what you're looking for. It's a way of combining an indeterminate number of context managers into a single one safely (so that an exception while entering one context manager won't cause it to skip exiting the ones it's already entered successfully).The example from the docs is pretty instructive:This can adapted to your "hoped for" code pretty easily:
Note: Somehow I missed the fact that your Thread subclass was also a context manager itself—so the code below doesn't make that assumption. Nevertheless, it might be helpful when using more "generic" kinds of threads (where using something like contextlib.ExitStack wouldn't be an option).Your question is a little light on details—so I made some up—however this might be close to what you want. It defines a AsyncTaskListContextManager class that has the necessary __enter__() and __exit__() methods required to support the context manager protocol (and associated with statements).Output:
@martineau answer should work. Here's a more generic method that should work for other cases. Note that exceptions are not handled in __exit__(). If one __exit__() function fails, the rest won't be called. A generic solution would probably throw an aggregate exception and allow you to handle it. Another corner case is when you your second manager's __enter__() method throws an exception. The first manager's __exit__() will not be called in that case.It can then be used like in your question:


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack
https://docs.python.org/3/library/multiprocessing.html
