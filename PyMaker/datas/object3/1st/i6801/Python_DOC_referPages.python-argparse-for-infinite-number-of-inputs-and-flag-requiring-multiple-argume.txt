Natural Text
I have a Python library which users currently run via main.py will call other *.py scripts within the same directory, and the program runs to completion. My problem is, users of this software should be able to input (in theory) an infinite number of "events", whereby users need to specific 4 pieces of information: "category" (string), "type" (string), "start_time" (integer), and "end_time" (integer). By default, if nothing is no flag is used, no "events" are schedule, and the program runs by default. Users must give each of the 4 arguments at once for each "event", or otherwise there's an error message. Users should be able to schedule as many "events" as need be. At the moment, I'm not sure of the best way to allow users to pass in argument variables using argparse, whereby (1) they can pass in dozens of arguments at once and (2) 4 categories are required. Is this possible? What is the data structure used, a dicitionary via argparse? For only one such input, the na√Øve approach could be to use argparse, and force users to use the following formatpython main.py ---user_specify "category1", 1233, 1452, 1673whereby in the main.py script I have something likeThat's quite clumsy. The bigger problem is that it doesn't solve the issue of allowing users to pass through dozens of such arguments. What is the correct pythonic way to do this? Is it possible to pass through dictionaries? How does one would with multiple inputs using the same argparse flag though? 
Each --event flag marks a new list of 4 items.  Post parsing code could iterate through the sublists of args.event and convert the last 2 elements to integers.Strings could also contain spaces if quoted.For many such 'events' you could put them in a @file as described inhttps://docs.python.org/3/library/argparse.html#fromfile-prefix-charsIf using the idea in https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.convert_arg_line_to_argsthe file could look likeData like that could also be read as a csv file.  Parsing a json string is also an option.  An argparse argument with a type=json.loads parameter can read such a string from the input or an @file.


Answer URL
https://docs.python.org/3/library/argparse.html#fromfile-prefix-chars
https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.convert_arg_line_to_args
