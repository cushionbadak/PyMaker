Natural Text
Say you have a piece of code that accepts either a list or a file name, and must filter through each item of either one provided by applying the same criteria:I'd like to remove as much redundancy as possible in the above code. I tried creating the following function for strip and lower, but it didn't remove much repeat code:Is there any way to iterate over both a list and a file in the same function? How should I go about reducing as much code as possible?
You have duplicate code that you can simplify: list and file-objects are both iterables - if you create a method that takes an iterable and returns the correct output you have less code duplication (DRY).  Choice of datastructure: You do not want duplicate items, meaning set() or dict() are better suited to collect the data you want to parse - they eliminate duplicates by design which is faster then looking if an item is already in a list:if the order of names matter usea OrderedDict from collections when on python 3.6 or less or a normal dict for 3.7 or more (dicts gurantee input order)more info: Are dictionaries ordered in Python 3.6+?if name order is not important, use a set() Either one of the above choices removes duplicates for you. Testcode:Output for -n Joh3333n -n Ji3333m -n joh3333n -n Bo3333b -n bo3333b -n jim:Input file:Output for -N names.txt:
Subclass list and make the subclass a context manager:Then the conditional can decide what to iterate overAnd the iteration code can be factored out.Here is a similar solution that makes an io.StringIO object from either the file or the list then uses a single set of instructions to process them.If the file is huge and memory is scarce, this has the disadvantage of reading the entire file into memory.


Answer URL
https://docs.python.org/3/reference/datamodel.html#with-statement-context-managers
