Natural Text
According to the documentation, this does not work because of this:For custom classes, implicit invocations of special methods are only guaranteed to work correctly if defined on an object’s type, not in the object’s instance dictionary. That behaviour is the reason why the following code raises an exception:https://docs.python.org/3/reference/datamodel.html#special-method-lookupI had tried this on a function generator, which does not have __len__, but I knew beforehand its length, then, I tried monkey patch it with something like c.__len__ = lambda: 5, but it kept saying the generator object had no length.This is the generator:I was passing the generator (which has no length) to this other function (yet, another generator), which requires the iterable length by calling len():https://github.com/arp2600/Etc/blob/60c5af803faecb2d14b5dd3041254ef00a5a79a9/etc.pyThen, when trying to add the __len__ attribute to get_sections, hence the error:TypeError: object of type 'function' has no len()
You can't add it to an existing object, so make your own wrapper class that has a class level definition you control:Now you just change your invalid attempt to set a length of:to a valid rewrapping that makes get_sections continue to be a valid generator (yield from will delegate all iteration behaviors to the wrapped generator), while exposing a length too:No other code needs to change.


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-lookup
https://docs.python.org/3/glossary.html#term-iterator
