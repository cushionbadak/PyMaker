Natural Text
I'm trying to take a nested DataFrame and convert it to a nested Dictionary.Here is my original DataFrame with the following unique values:input: df.head(5)output:input: len(df['reviewerName'].unique())output: 66130Given that there are multiple values in each of the 66130 unqiue values (ie. "Charles" would occur 3 times), I took the 66130 unique "reviewerName" and assign them all as the key in the new nested DataFrame, then assign the value using "title" and "reviewerRatings" as another layer of key:value in the same nested DataFrame.input: df = df.set_index(['reviewerName', 'title']).sort_index()output:As a follow up to the first question, I tried to convert the nested DataFrame to a nested Dictionary.The new nested DataFrame column indexing above shows "reviewerRatings" in the 1st row (column 3) and "reviewerName" and "title" in the 2nd row (column 1 and 2), and when I run the df.to_dict() method below, output shows {reviewerRatingsIndexName: {(reviewerName, title): reviewerRatings}}input: df.to_dict()output:But for my desired output below, I'm looking to get my output as {reviewerName: {title: reviewerRating}} which is exactly the way I had sorted in the nested DataFrame.Is there any way to manipulate the nested DataFrame or nested Dictionary so that when I run df.to_dict() method, it would show {reviewerName: {title: reviewerRating}}.Thanks!
There are a couple of approaches. You can use groupby with to_dict, or iterate rows with collections.defaultdict. Notably, the latter isn't necessarily less efficient.groupby + to_dictConstruct a series from each groupby object and convert it to a dictionary to give a series of dictionary values. Finally, convert this to a dictionary of dictionaries via another to_dict call.collections.defaultdictDefine a defaultdict of dict objects and iterate your dataframe by row.The resulting defaultdict does not need to be converted back to a regular dict as defaultdict is a subclass of dict.Performance benchmarkingBenchmarking is set-up and data dependent. You should test with your own data to see what works best.
Use groupby with lambda function for dictionaries per reviewerName and then output Series convert by to_dict:


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
