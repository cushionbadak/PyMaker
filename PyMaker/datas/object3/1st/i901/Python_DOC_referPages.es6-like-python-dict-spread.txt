Natural Text
This question already has an answer here:Destructuring-bind dictionary contents                    9 answers                I'm trying to write a function spread in Python 3.6 (I cannot use any newer release), and, so far, I've got something that looks like this:The problem is: there is kind of duplication since the position of the left side must match the keys list on the function's 2nd argument for it to make sense. So, change the order of the keys list, and variable a will hold a different value than d['a']. I need to keep consistency by eitherOr spread(d, ???). I'm not considering initializing a, b, c with None and then pass them as a list.Any thoughts or leads on how to approach this? Is it even possible?Thanks!
No this isn't really possible.  You can't have and give the same value to b.  This is because the right side of an assignment statement is evaluated first.  So spread executes and returns its values before your code knows which order you put them in on the left.  Some googling leads be to believe that by "spread-like syntax for dicts", you're looking for the **dict syntax.  See What does ** (double star/asterisk) and * (star/asterisk) do for parameters?
globals().update(d) does what you ask, but...It works in the global scope only, locals() is not guaranteed to return a writable dictionary.It impairs debuggability of your code.  If one of the variables set this way ends up with an unexpected value, no search will show you that this is the place the variable is being set.
You could assign the variables to the result of a values() call:I don't recommend doing this for versions of Python where dict ordering is not guaranteed, but luckily this should work in 3.6 and above.
not very pretty, but you can sort of get there doing:very different semantics, but posted in the hope it'll inspire something!


Answer URL
https://docs.python.org/3/reference/expressions.html#evaluation-order
