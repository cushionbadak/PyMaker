Natural Text
I wrote a script that goes through a list of strings and looks for matches in either (1) lines in a file or (2) filenames in a directory.Depending on the search mode (user input), each string is appended to a list if (1) it matches the line/filename exactly or (2) the line/filename contains it.I defined the comparison() function so I can use it more often later in the script without repeating those lines. However, I had to assign global string within the other function then, as I get the following error otherwise.NameError: name 'string' is not definedI'm wondering how I could avoid using a global variable. I read that classes may often be used to avoid such, but I couldn't figure out how this would be useful here. I'd appreciate any recommendations on how to solve this task in a nice way.
There are a few things we can do to clean up the code. We'll end up getting rid of the global variable by the end.Make data consistentInstead of waiting until the end to get the directory contents, we can get it at the very beginning. This way we can treat the lines of text and the directory contents exactly the same later on.When it makes sense, select the correct operation earlyBefore, we were checking each time which kind of operation to do (exact match or contains). Instead, we can select the option right when we get the user input and assign it to a single name to be used later on.Reorganize code into functionsNow that we have a better picture of the parts of the program, we can break it into functions. Using functions gives parts of the program concrete names and also helps narrow the scope of the variables they use. The fewer variables used in any piece of code the easier it is to understand later. We avoid global variables by choosing our functions carefully - one important criteria we might use is that everything in the function is self-contained and doesn't need to reference anything outside.We'll also use the if __name__ == '__main__' convention so we could include our script from another script if we wanted to.Further improvementsError handling - wherever something may go wrong we can raise an appropriate error (for something that can be handled) or assert (for something that we don't expect to happen and cannot really recover from).Modules like argparse can make it easier to take arguments into the script so we don't have to hard-code variable values.Instead of taking in a "search object" and then having to worry about whether it is a file or directory, we could also read from sys.stdin and leave it to the user to generate text somehow and pipe it to the program, like: cat words.txt | python script.py for contents or ls . | python script.py for files in a directory.


Answer URL
https://docs.python.org/3/library/argparse.html
