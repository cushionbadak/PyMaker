Natural Text
I need to find a given pattern in a text file and print the matching patterns.  The text file is a string of digits and the pattern can be any string of digits or placeholders represented by 'X'.  I figured the way to approach this problem would be by loading the sequence into a variable, then creating a list of testable subsequences, and then testing each subsequence.  This is my first function in python so I'm confused as to how to create the list of test sequences easily and then test it.  For example, searching for "X10X" in "11012102" should print "1101" and "2102".  
Let pattern = "X10X", string = "11012102", n = len(pattern) - just for followed illustration:Without using regular expressions, your algorithm may be as follows:Construct a list of all subsequences of string with length of n:Compare pattern with each element in parts:The comparison of pattern with part (both have now equal lengths) will be symbol with symbol in corresponding positions:If ch1 is the X symbol or ch1 == ch2, the comparison of corresponding symbols will continue, else we will break it:Finally, if all symbol with symbol comparisons were successful, i. e. all pairs of corresponding symbols were exhausted, the else branch of the for statement will be executed (yes, for statements may have an else branch for that case).  Now you may perform any actions with that matched part, e. g. print it or append it to some list:So all in one place:The output:
You probably wanted to create the list of testable sequences from the individual rows of the input file. So instead ofuse The strip() method removes whitespace characters from the start and end of rows, including \n symbols at the end of lines.Example of the sequence.txt file:The output of the print(testableStrings) command:


Answer URL
https://docs.python.org/3/library/re.html
