Natural Text
So I'm trying to write a function which takes multiple arguments, say a,b,c, some of which may be a list of length X and some of which may be single values, but this is unknown in advance. The function should then create parameter sets (a[i],b[i],c[i]) which will be passed to a multiprocessing pool. If a single value for a variable is given, it will just be repeated for each parameter set. Now, if I want to loop over each variable, I can write an if statement for each:but in practice this gets messy and long very quickly. I would like to know if there is an easier way to loop over the input variables.I'm hoping there is something likeEdit: additional infoSo as pointed out by Lauro Bravar, the above could be solved by passing the arguments as a list. Unfortunately the full problem I am trying to solve includes the presence of multiple optional variables so this does not work. So I am looking more for code which will solve in this context:Is there a way to do this without using **kwarg? Ideally I would like all the arguments visible in the definition as readability is important (this will be used by students with little coding experience)
You can pass your variables via *argsOut:1st Edit to my answer:regarding your additional information in the question: *args takes up as many arguments as you wish. When iterating over all elements of *args and checking their type, you can store the result in a dictionary or list to make it accessible:Out:2nd Edit to my answer:In the comment section you added two conditions: the help() function needs to return the arguments of fooYou cannot use *args because you want to create parameter sets of specified parameters (not the open passing scheme *args supports) So my new approach deals with the built-in function locals(), which returns the "current local symbol table". When locals() is called within a function, it will return all arguments of the function and their values as a dictionary. Make sure to call it at the very beginning, because at runtime new locals may be created in the function and you could end up in a loop. How about this?This allows you to pass your arguments for a, b, c and optionally d, e. Together withit returns
Easiest way I can imagine is doing something like this:You do not have to define each variable in your function, it's just easier for usage in the function. Because of the setup of above, you'll have to retrieve the desired argument from the arg list. Such as:Which I can imagine is also harder in readability, but it depends on your use case.
You could pass the arguments as a list and iterate over that list.
You can pass your variables and optional variables via *args and **kwargs:
This could take any number of arguments including positional as well.Output:Note: Optional arguments are caught in kwargs.


Answer URL
https://docs.python.org/3/library/functions.html#locals
