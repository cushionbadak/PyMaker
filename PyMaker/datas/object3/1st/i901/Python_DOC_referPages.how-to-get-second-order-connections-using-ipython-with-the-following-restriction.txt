Natural Text
I have a connection from region1 to region6 (1->6)But I want to get second order connections.  In other words: connections from region1 to region2 then region2 to region6. (i.e. 1->2, 2->6)I want to apply the following restriction: I don't want connections of the same region, such as region1 to region1  (i.e. 1->1, 1->6) to be listed as a second-order connection. Note: Region1 to region6 is the same as region6 to region1. In addition I want connections to be listed in descending order. Therefore, if there is a second order connection that goes from region1 to region0 and then from region0 to region6 (1->0, 0->6). I want it to instead be corrected to become region0 to region1 and then region0 to region6 (0->1, 0->6). Also, once all second order connections are performed I want it to be multiplied to get connection of region0 to region1 and then region0 to region6 (ie. 0->1, 0->6). Once that's done, I want to compare it to the first order connection at the beginning of this question (1->6).  And then I want the program to take the higher value.  and save it. This is what I have so far: Output I get: [(0,1), (0,1)], [(0,1), (0,2)], [(0,1), (0,3)], etc. This is not what I wantAny help would be appreciated.
You can start with itertools. The combinations module appears to be in sorted order, no repeated elements.Itertools are part of included packages in Python, and are excellent in iteratable areas. Read https://docs.python.org/3/library/itertools.htmlBeyond combinations is product, which is cartesian product, and permutations,that gives all possible orderings, no repeated elements.


Answer URL
https://docs.python.org/3/library/itertools.html
