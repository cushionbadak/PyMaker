Natural Text
I am learning Python, and I am a little confused about the data types of Python. I am reading this line again and again.:'Everything is an object in Python'This includes integer, floats, string, sets, lists, etc. and when we write like this:  [1, 2, 3], so we are actually creating an object of list class (or not)?  So, when we write an integer like 123, does it mean it's an object of int class? But when we read in books it says that to convert a string into integer we need to use the int method? But what I am thinking is that int is a class that also accepts the string object in constructor and then we get integer object, right?So, is int a method or class in Python? 
Yes int is a class (and it's also called a type; see Python : terminology 'class' VS 'type'), and doing int('123') returns an instance of an int object. However, (in standard Python aka CPython) for small integers (in the range -5 to 256, inclusive) the int constructor doesn't actually build a new integer object. For efficiency reasons the interpreter has a cache of small integers and the constructor simply returns a reference to the existing int object. This topic is discussed in the answers to “is” operator behaves unexpectedly with integers.Your book that calls int() "the int method" is being a tiny bit sloppy, IMHO. Pedantically speaking, int itself is a class, which is a callable object, and when you call a class that call gets automatically converted into a call to the class's constructor method (that is, its __new__ method). But informally it's common to refer to int() as a function call or method call.I almost forgot about the question in your first paragraph. When we write the interpreter creates the 3 int objects and puts them inside a fresh list instance. (To be more precise, it puts references to the int objects into the list).Using the standard dis module you can disassemble the bytecode for this operation:outputSo even though we're "just" creating a literal list it's still a fully-fledged list instance object. Unlike some OOP languages, Python doesn't have any "primitive" datatypes that aren't objects, so literal integers and literal strings are also objects. Thus a literal string comes equipped with all the standard string methods. Eg,outputshows us that the literal string 'hello' has the standard lower() method. 
As you can read in the python documentation.class int(x, base=10) Return an integer object constructed from a  number or string x, or return 0 if no arguments are given. If x is a  number, it can be a plain integer, a long integer, or a floating point  number. If x is floating point, the conversion truncates towards zero.  If the argument is outside the integer range, the function returns a  long object instead.So it's a class constructor that constructs an int object, depending on the given input x.


Answer URL
https://docs.python.org/3/library/dis.html
