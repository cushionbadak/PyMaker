Natural Text
I have a python class that has a couple performance-sensitive methods that justify being implemented in C. But it also has some methods that don't need to be fast and that would be a giant pain to write in C.Is there a standard way to have the best of both worlds, where a few core methods are defined in C but some convenience methods are defined in python?(Ideally it should work for special methods like __str__.)For example, maybe I could use inheritance. Is that the right way to do it? Are there performance costs?
Try Cython. It really does a fantastic job blending the best features of both languages. No longer do you have to decide between control and performance, and efficiency and ease of development.
If the C code doesn't need to interact with the object itself, possibly you could use the ctypes module to call C functions from your python code.Put your C code in into a shared library or DLL and then call it from your method.


Answer URL
https://docs.python.org/3/library/ctypes.html#module-ctypes
