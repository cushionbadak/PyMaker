Natural Text
I have a Python deque.I would like to append() a new element at the end of the deque, for example, every 1 second.At the same time, I would like to popleft() the first element of the deque, for example, every 3 seconds.This is the first time I'm doing time-based programming, so I'm not sure how I to achieve this.I thought about using wait(), but it is my understanding that this wouldn't allow for concurrent access to the deque.Any suggestion?Thanks for your help.
There are much more sophisticated (and proper) methods to obtain concurrency in Python than what I'm about to show, but the following approach is pretty straightforward and might be more friendly.n.b. This is not "true" concurrency in the sense that it's ever possible for more than one operation to happen at exactly the same time.  This is difficult to do even with more sophisticated methods due to Python's GIL.The idea here is that we have a "task manager" that maintains a list of pending jobs and the times at which each job should be run.  We're also able to tell the task manager to schedule a job for us at some point in the future.  This is the TaskManager class.At first, we create both a task manager instance and an empty deque.  Then (by abusing variable scope), we define our jobs.  I defined two, append which appends an 'x' to the deque and popleft which tries to popleft, silently ignoring errors that occur when it is empty.Both jobs reschedule themselves with the task manager after executing.Lastly, we have our main loop, which never breaks (you could though, given some conditions), which periodically "tickles" the task manager, prompting it to review it's job list, and see if any jobs are to be started.  (Jobs are "to be started" if their scheduled time is now or has passed).As the example code stands, this tickling is done every 1/10th of a second, but could be done more frequently, although it shouldn't be done too frequently.  That being said, 1/10th of a second is far slower than what it could be without affecting system performance.Sample output:


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.sleep
