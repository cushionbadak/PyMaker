Natural Text
I am playing around with concurrent.futures.Currently my future calls time.sleep(secs).It seems that Future.cancel() does less than I thought.If the future is already executing, then time.sleep() does not get cancel by it.The same for the timeout parameter for wait(). It does not cancel my time.sleep().How to cancel time.sleep() which gets executed in a concurrent.futures?For testing I use the ThreadPoolExecutor.
If you submit a function to a ThreadPoolExecutor, the executor will run the function in a thread and store its return value in the Future object. Since the number of concurrent threads is limited, you have the option to cancel the pending execution of a future, but once control in the worker thread has been passed to the callable, there's no way to stop execution.Consider this code:In general, whenever you want to have something cancellable you yourself are responsible for making sure that it is.There are some off-the-shelf options available though. E.g., consider using asyncio, they also have an example using sleep. The concept circumvents the issue by, whenever any potentially blocking operation is to be called, instead returning control to a control loop running in the outer-most context, together with a note that execution should be continued whenever the result is available - or, in your case, after n seconds have passed.
I do not know much about concurrent.futures, but you can use this logic to break the time. Use a loop instead of sleep.time() or wait() interrupt or break can be used to come out of loop. 


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future.cancel
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.wait
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor
https://docs.python.org/3/library/asyncio.html?highlight=asyncio#module-asyncio
https://docs.python.org/3/library/asyncio-task.html#example-future-with-run-until-complete
