Natural Text
If I have pairs of IP addresses like:I would like to encode each pair as a 64 bit value so that the first 32 bits is the first IP address and the second is the second IP address. I would then like to be able to save the 64 bit value to a file in such a way that I can read it back in and recover the two IP addresses.The aim is save space.Is it possible to do this in python?
Don't worry about encoding them in 64 bits. An IPv4 address is 32 bits (4 bytes). If you write two of them to a file, it will be 8 bytes in size.Use socket.inet_aton to convert a human-readable IP address string to a packed binary raw 4-byte string:Result:The complementary conversion function socket.inet_ntoa will convert a packed 4-byte string back into a human-readable IP address.Here's an example of writing and reading them back:Output:
Yes, it's possible, like this:This works in Python 2 and 3.Based on Jonathon Reinhart's answer, you can also use socket.inet_aton instead of struct.pack.
In Python3 there is an ipaddress module for working with IPs. Pack them into 32 bits each and add them together:Load them back in:Try it online: https://repl.it/Ce3k/1


Answer URL
https://docs.python.org/3/library/ipaddress.html
