Natural Text
I am having some difficulties using python's logging.  I have two files, main.py and mymodule.py.  Generally main.py is run, and it will import mymodule.py and use some functions from there.  But sometimes, I will run mymodule.py directly. I tried to make it so that logging is configured in only 1 location, but something seems wrong.  Here is the code.and the imported module:When I run the code, I see this output:But I expect to see this:Anybody have any idea why the second logging.info call doesn't print to screen?  thanks in advance!
Loggers exist in a hierarchy, with a root logger (retrieved with logging.getLogger(), no arguments) at the top. Each logger inherits configuration from its parent, with any configuration on the logger itself overriding the inherited configuration. In this case, you are never configuring the root logger, only the module-specific logger in main.py. As a result, the module-specific logger in mymodule.py is never configured.The simplest fix is probably to use logging.basicConfig in main.py to set options you want shared by all loggers.
Chepner is correct.  I got absorbed into this problem.  The problem is simply in your main scriptIf you use line 17, then your imported python modules will not log any messagesIn you submodule.pyHope this posting can help someone who got stuck on this problem.  
While the logging-package is conceptually arranged in a namespace hierarchy using dots as separators, all loggers implicitly inherit from the root logger (like every class in Python 3 silently inherits from object). Each logger passes log messages on to its parent.In your case, your loggers are incorrectly chained. Try adding print(logger.name) in your both modules and you'll realize, that your instantiation of logger in main.py is equivalent to logger = logging.getLogger('__main__')while in mymodule.py, you effectively producelogger = logging.getLogger('mymodule')The call to log INFO-message from myfunc() passes directly the root logger (as the logger in main.py is not among its ancestors), which has no handler set up (in this case the default message dispatch will be triggered, see here) 


Answer URL
https://docs.python.org/3/howto/logging.html#advanced-logging-tutorial
