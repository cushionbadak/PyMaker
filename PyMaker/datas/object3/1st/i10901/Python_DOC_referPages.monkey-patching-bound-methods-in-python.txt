Natural Text
This question already has an answer here:Adding a Method to an Existing Object Instance                    17 answers                I am trying to understand monkey-patching in Python. Please illustrate the reason for the error and how to fix it.
As described in this SO answer, you need to use types.MethodType or something similar when doing this, e.g.:The reason is that a.foo = foo just sets the function foo as an attribute of a - no "binding magic" is done. To have Python "magically" pass the instance as the first argument when calling a.foo, you need to tell Python to do such binding, e.g. by using types.MethodType.See the above linked answer for (much) more details.
So the tricky thing here is that what you get depends on where the method lives:If you run this, you'll get different results on python2.x and 3.x:But in either case it's clear that a.foo is a method of some sort.What happens if we try to monkey patch it?Ok, now we see that a.foo is of type function (not a method).  So the question is how do we make a method out of out "patch"?  The answer is we use it's descriptor protocol when adding it as an attribute:For a method on a class, when you do a.some_method, python actually does:  a.some_method.__get__(a, type(a)) so we're just reproducing that call sequence here (explicitly).


Answer URL
https://docs.python.org/3/library/unittest.mock.html
