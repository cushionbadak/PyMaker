Natural Text
After reading Eli Bendersky's article on implementing state machines via Python coroutines I wanted to...see his example run under Python3and also add the appropriate type annotations for the generatorsI succeeded in doing the first part (but without using async defs or yield froms, I basically just ported the code - so any improvements there are most welcome). But I need some help with the type annotations of the coroutines:This runs properly......and also typechecks:But I am pretty sure I can do better than just use the Generator base class in the type specs (just as I did for the Callable). I know it takes 3 type parameters (Generator[A,B,C]), but I am not sure how exactly they'd be specified here.Any help most welcome.
I figured out the answer on my own. I searched, but found no documentation for the 3 type parameters of Generator in the official typing documentation for Python 3.5.2 - beyond a truly cryptic mention of...Luckily, the original PEP484 (that started all this) was far more helpful:"The return type of generator functions can be annotated by the generic type Generator[yield_type, send_type, return_type] provided by typing.py module:Based on this, I was able to annotate my Generators, and saw mypy confirm my assignments:I tested my assignments by e.g. swaping the order of the types - and then as expected, mypy complained and asked for the proper ones (as seen above).The complete code is accessible from here. I will leave the question open for a couple of days, in case anyone wants to chime in - especially in terms of using the new coroutine styles of Python 3.5 (async def, etc) - I would appreciate a hint on exactly how they'd be used here.


Answer URL
https://docs.python.org/3/library/typing.html
