Natural Text
I have a configuration file which I recover like this:It works but my concern is about packaging the project. What is the best practice to adopt? Is it correct to use a relative path like this or should I create a module and import it instead of loading a json file?Thanks for your help!
Depending of the kind of application you have, you can have several configurations levels.The common one is two levelsÂ :Application-wide configuration located:near your application's installation folder (mostly for Windows applications),in a specific folder (in /etc for Posix applications).User-wide configuration, located is the user HOME directory.For a description of directory structure, see this article on Wikipedia: Filesystem Hierarchy Structure.Common application folder and configuration filesMac OS X:  /Application/<Your App> (app folder),  /Library/<Your App> (lib folder),  /Library/Preferences/<Your App>.plist (config file).Mac OS X (POSIX):  /usr/bin or /usr/local/bin (app folder),  /usr/lib or /usr/local/lib (lib folder),  /etc or /etc/<Your App> (config folder).Unix:  /usr/bin or /usr/local/bin (app folder),  /usr/lib or /usr/local/lib (lib folder),  /etc or /etc/<Your App> (config folder).Win XP:  C:\Program Files\<Your Company>\<Your App>Win 7 (32 bits app):  C:\Program Files (x86)\<Your Company>\<Your App>Win 7 (64 bits app):  C:\Program Files\<Your Company>\<Your App>Common user configuration foldersMac OS X:  ~/Library/Application Support/<Your App>Mac OS X (POSIX):  ~/.foo-barUnix:  ~/.config/foo-barUnix (POSIX):  ~/.foo-barWin XP (roaming):  C:\Documents and Settings\<user>\Local Settings\Application Data\<Your App>Win XP (not roaming):  C:\Documents and Settings\<user>\Application Data\<Your App>Win 7 (roaming):  C:\Users\<user>\AppData\Roaming\<Your App>Win 7 (not roaming):  C:\Users\<user>\AppData\Local\<Your App>Common application folder and configuration filesThere is a plethora list of configuration formats, but the most common are:Mac OS X:plist format, see: Generate and parse Mac OS X .plist filesUnix:cfg format is similar to ini format,rc format,json format, see: JSON encoder and decoder,Win:ini format format, see: Configuration file parserTake a look at File Formats.For the ini format, I recommend the excellent work of Armin Ronacher, see the python-inifile library.You can also use a Python file as a configuration format.
My App - Two-level configuration exampleExample of project with two levels of configuration files:LEVEL 1: read the configuration from the sources/application's folder (virtualenv)LEVEL 2: read the configuration from the user HOMEPython project structureAccording to the reference Packaging and Distributing Projectsa (modern) Python project should have the following structure.In the package directory, I add a __main__.py for the main entry pointand a my_app.ini for configuration.Here is the structure::Project's configurationYou must add a package_data entry in you setup.py to include "my_app.ini" in your Source Distribution.For exemple, here is a small setup.py::For backward compatibility with Python 2.6, you also need a MANIFEST.in file.For instance, we can include all *.ini files::To check your configuration, run the following command::Default configuration for loggingThe my_app.ini store the default configuration for logging.It has only one logger (the root logger), with default handlers and formatters.Main applicationThe __main__.py is the entry point of the application.Here is the source code of __main__.py::You can add this entry point in your setup.py, like this::To test the entry point, you can install it with pip::Then you can test your application::Note: the my_cmd was launched in a Mac OSX.Her it is.EDIT: Project on GitHubSee Ini Cfg Demo


Answer URL
https://docs.python.org/3/distutils/setupscript.html#installing-additional-files
