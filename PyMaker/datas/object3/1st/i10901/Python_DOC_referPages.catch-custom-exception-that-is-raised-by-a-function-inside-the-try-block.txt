Natural Text
I've been trying to catch an exception that should be caused by clicking a hotkey, unfortunately adding a hotkey requires to add a function that should be called when said hotkey is pressed.Now I know that exceptions will only be caught if they're raised inside the try-catch block, but this doesn't seem to work.The exception is raised, but it seems like it isn't raised inside the try-block? If I just raise the resetException without the function, this works perfectly fine.Is there any solution to this?Thanks in advance!
The problem is that you're out of the main thread's context. This is a multi-threaded environment which is hinted by you binding keys to callbacks.There is probably an eventloop with a thread (or threads) waiting to handle your key callbacks once a user presses a key.What you need to do is put the try-catch inside the resetRun so that the thread actually executing the code (which is calling your callback) can handle the exception.You could create a wrapper like this:Now bind like this:
That's because the exception inside your function doesn't raised at run-time. The fact is that a try-except expression will catch the exceptions in run-time, for example:And in this case it seems that you are just instantiating an object or smth. (your function is not executed at run-time)  Which means that the exceptions will raise after compile time (when you use that function), in this case, when you push the button.So if you want to handle the exception inside the function you need to catch them inside the function.
I am no expert, but it seems to me that the problem is your def resetRun(event) bit. The try...except instruction set cannot dig into a function definition. What happens if you create resetRun(event) outside of try...except? Does it work then?


Answer URL
https://docs.python.org/3/tutorial/errors.html#handling-exceptions
