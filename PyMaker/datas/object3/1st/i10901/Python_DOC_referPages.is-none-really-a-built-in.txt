Natural Text
I am trying to use Python's (2.7) eval in a (relatively) safe manner. Hence, I defined:As expected, the following does not work any more:However, I can still eval a "None" string:So, is None not a built-in?They are at least both part of __builtin__ ...Why is it still eval-able?How would I get rid of it, if I had to?
None is a constant in Python, see the Keywords documentation:Changed in version 2.4: None became a constant and is now recognized by the compiler as a name for the built-in object None. Although it is not a keyword, you cannot assign a different object to it.The compiler simply inserts a reference to the singleton None object whenever you name it:True and False are built-ins in Python 2, which also means they can be masked.In Python 3, None, True and False all are now keywords, and all three are materialised merely by naming them:See Guido van Rossum's blog post on why this was changed.Note that there is nothing safe about eval, even with __builtins__ neutered, as it can still be referenced via other means:or you can simply blow up the interpreter by creating a broken code object. See Eval really is dangerous.If all you want to do is load Python literal syntax (lists, tuples, dictionaries, strings, numbers, etc.) then you want to use the ast.literal_eval() function, specifically designed to be safe.
In Python 2.7, this is a perfectly valid statement.Try to do it with None though, and..SyntaxError: cannot assign to NoneCan kind of make your head spin. I'm not sure, but I suspect that True is a builtin and None is actually a constant. You can change True to a different value, but you can't change None.


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#keywords
