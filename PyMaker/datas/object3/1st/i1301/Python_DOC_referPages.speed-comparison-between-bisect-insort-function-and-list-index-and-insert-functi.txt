Natural Text
As Python doc says, I have thought that bisect module is much faster than list built-in method, index and insert to insert item to long ordered list. So, I simply measure the time expense for both functions, bisect_func() and insert_func() like below code.bisect_func() score 1.27s and insert_func() score 1.38s, which is not a dramatic time difference. My question is that do I miss something to test the efficiency of bisect in this example? Or is bisect not the only efficient approach to insert item into an ordered list?
Binary search only improves the performance of finding the insertion index. It does not improve the insertion into the list, which is O(N) in both cases and dominates the asymptotic complexity of both functions. Remember that inserting into an array based list needs to shift all elements after the insertion index.
From the documentation of insort:Insert x in a in sorted order. This is equivalent to  a.insert(bisect.bisect_left(a, x, lo, hi), x) assuming that a is  already sorted. Keep in mind that the O(log n) search is dominated by  the slow O(n) insertion step.The important part is:  Keep in mind that the O(log n) search is dominated by the slow O(n) insertion step. So both approaches are O(n) at the end, that is why their efficiency is similar, with insort being slightly better.


Answer URL
https://docs.python.org/3/library/bisect.html#bisect.insort_left
