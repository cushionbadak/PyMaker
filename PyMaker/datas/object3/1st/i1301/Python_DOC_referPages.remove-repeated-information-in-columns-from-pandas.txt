Natural Text
I need to clean a pandas dataframe, remove repeated information. For example:From the first name column I need to remove the information in strength, namely:Note, the presentation of strength in name may not exactly correspond to that in strength column up to blank space (500 mcg vs. 500mcg)My straightforward solution was to loop over all possible combinations of strength and if there is a match in name column, replace with empty character:It does work, however, I have a lot fo data and this is the most non-pythonic and not-efficient way to implement.Any suggestions?
Using re package to remove the undesired redundant string and apply function to rows in pandas DataFrame should do the work.In below code you can see a possible solution:The output DataFrame is then:In this way you end up using the strength column to look for redundant string within the name column and remove them, taking into account the redundant string might not have a space in between.
I would probably not match with all the possible combinations of strength. Since the the items seem to contain roughly the same characters for both columns, it would probably suffice to use the strength column to fuzzy search the name column.You could search case-insensitive with and without whitespace and you would probably get most items done.Case insensitive search can be done with regular expressions in python:Of course, replace the literals with your variables there.EDIT: There might be a more efficient way to do this with regular expressions, so if someone is more proficient with them, I'd be delighted to learn it.
This might me a better way. Firstly, we are reducing you data and one of the for loops which will make the complexity of code o(n2) instead of o(n3)
Assumption(s): the strength pattern is always "digit + space(optional) + mcg". There would be ways to generalize it more if needed.You could use regex and df.apply.First you would define the pattern you are looking for using re.compile(). Then you use re.sub() on your name column as shown in the code below.You can find more information regarding df.apply here and using regex with Python here


Answer URL
https://docs.python.org/3/library/re.html#re.compile
https://docs.python.org/3/library/re.html#re.sub
https://docs.python.org/3/library/re.html
