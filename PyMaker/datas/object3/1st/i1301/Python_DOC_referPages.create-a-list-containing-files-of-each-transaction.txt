Natural Text
Good evening, I want to create a list while reading a text file (historique.txt) which contains list of files associated to each taskid. Considering the following example: my text file contains these lines:(to explain more the content of the text file: 4 is an idtask and file1 is a file used by idtask=4, so basically, task 4 used (file1,file2).I want to obtain list Transactions=[[file1,file2],[file1,file3,file4],[file3,file4]]Any help and thank you.
This will not work if the input file is not orderedExactly the same idea as @mad_'s answer, just showing the benefit of turning file_data_list to be a list of lists instead of list of strings. We only need to .split each line once which is more readable and probably a bit faster as well.Note that this can also be done while reading the file instead of after-the-fact like I show below.
After reading from the file e.g f.readlines() which will give a list similar to belowApply groupbyOutputyou can also create a mapping dictOutputAs pointed out by @DeepSpace the above solution will work only if the ids are ordered. Modifying if it not orderedOutput
We can use the csv module to process the lines into lists of values.csv reads from a file-like object, which we can fake using StringIO for an example:Just to note: depending upon the version of Python you are using you might need to import StringIO differently. The above code works for Python 3. For Python 2, replace the import with from StringIO import StringIO.csv.reader returns an iterable object. We can consume the whole thing into a list, just to see how it works. Later we will instead iterate over the reader object one line at a time.We can use pprint to see the results nicely formatted:These lists can then be unpacked into a task and filename:We want to build lists of filenames having the same task as key.To efficiently organise this we can use a dictionary. The efficiency is because we can ask the dictionary to find a list of values for a given key. It will store the keys in some sort of a tree and searching the tree is quicker than a linear search.The first time we look to add a value to the dictionary for a particular key, we would need to check to see whether it already exists.If not we would add an empty list and append the new value to it. Otherwise we would just add the value to the existing list for the given key.This pattern is so common that Python's builtin dictionary has a method dict.setdefault to help us achieve this.However, I don't like the name, or the non-uniform syntax. You can read the linked documentation if you like, but I'd rather usePython's defaultdict instead. This automatically creates a default value for a key if it doesn't already exist when you query it.We create a defaultdict with a list as default:Then for any new key it will create an empty list for us:We can append to the list:I'll convert the defaultdict to a dict just to make it pprint more nicely:So, putting all this together:Output:Some final notes: In the example we've used StringIO to fake the file contents. You'll probably want to replace that in your actual code with something like:Also, where we take each row from the csv reader, and then unpack it into a task and filename, we could do that all in one go:So your whole code (without printing) would be quite simple:If you want a list of transactions (as you asked in the question!):However, this may not be in the same order of tasks as the original file. If that's important to you, clarify the question, and comment so I can help.
An alternate solution without using the groupby library (This solution does exactly what @mad_'s does, however it is more readable, especially for someone who is a beginner):As @mad_ said, the read list will be as follows:You could loop over the data, and create a dictTransactions will now contain the dictionary:


Answer URL
https://docs.python.org/3/library/csv.html
https://docs.python.org/3/library/io.html#io.StringIO
https://docs.python.org/3/library/csv.html#csv.reader
https://docs.python.org/3/library/pprint.html#pprint.pprint
https://docs.python.org/3/library/stdtypes.html#dict.setdefault
https://docs.python.org/3/library/collections.html#collections.defaultdict
