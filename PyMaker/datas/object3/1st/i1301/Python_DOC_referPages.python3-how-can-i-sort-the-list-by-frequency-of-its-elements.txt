Natural Text
This question already has an answer here:Sort list by frequency in python                    5 answers                I'm working on the code that can analyze the input text.One of the functions I would like to ask for help is that making a list of words used in order of descending frequency.By referring the similar topics in stack overflow, I was able to retain only alphanumeric characters (remove all quotation / punctuation etc) and put each words into the list.Here is the list I have now. (variable called word_list)['Hi', 'beautiful', 'creature', 'Said', 'by', 'Rothchild', 'the',  'biggest', 'enemy', 'of', 'Zun', 'Zun', 'started', 'get', 'afraid',  'of', 'him', 'As', 'her', 'best', 'friend', 'Lia', 'can', 'feel',  'her', 'fear', 'Why', 'the', 'the', 'hell', 'you', 'are', 'here'](FYI, text file is just random fanfiction I found from the web)However, I'm having trouble to modify this list to the list in order of descending frequency - for example, there are 3 'the' in that list, so 'the' becomes the first element of the list. next element would be 'of', which occurring 2 times.I tried several things similar to my case but keep displaying error (Counter, sorted). Can someone teach me how can I sort the list?In addition, after sorting the list, how can I retain only 1 copy for repeating ones? (my current idea is using for loop and indexing - compare with previous index, remove if it's same.) Thank you. 
You can use a itertools.Counter for your sorting in different ways:These approaches use either the Counter keys (1.) or set for the removal of duplicates.However, if you want the sort to be stable with regard to the original list (keep order of occurrence for equal frequency items), you might have to do this, following the collections.OrderedDict based recipe for duplicate removal:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#collections.OrderedDict
