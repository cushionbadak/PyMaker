Natural Text
I am a maintainer of a Python project that makes heavy use of inheritance.  There's an anti-pattern that has caused us a couple of issues and makes reading difficult, and I am looking for a good way to fix it.The problem is forwarding very long argument lists from derived classes to base classes - mostly but not always in constructors. Consider this artificial example:At this time, everything looks like DerivedA - long argument lists, all of which are passed to the base class explicitly.Unfortunately, we've had a couple of issues over the last couple of years, involving forgetting to pass an argument and getting the default, and from not noticing that one default parameter in one derived class was different from the default default.It also makes the code needlessly bulky and therefore hard-to-read.DerivedB is better and fixes those problems, but has the new problem that the Python help/sphinx HTML documentation for the method in the derived class is misleading as a lot of the important parameters are hidden in the **kwds. Is there some way to "forward" the correct signature - or at least the documentation of the correct signature - from the base class method to the derived class method?
I haven't found a way to perfectly create a function with the same signature, but I think the downsides of my implementation aren't too serious. The solution I've come up with is a function decorator.Usage example:All named inherited parameters will be passed to the function through the kwargs dict. The args parameter is only used to pass varargs to the function. If the parent function has no varargs, args will always be an empty tuple.Known problems and limitations:Doesn't work in python2! (Why are you still using python 2?)Not all attributes of the decorated function are perfectly preserved. For example, function.__code__.co_filename will be set to "<string>".If the decorated functions throws an exception, there will be an additional function call visible in the exception traceback, for example:>>> f2()Traceback (most recent call last):  File "", line 1, in   File "", line 3, in f2  File "untitled.py", line 178, in f2    raise ValueError()ValueErrorIf a method is decorated, the first parameter must be called "self".ImplementationShort explanation:The decorator creates a string of the formthen execs it and returns the dynamically created function.Additional features:If you don't want to "inherit" parameters x and y, use
Consider using attrs module:


Answer URL
https://docs.python.org/3/library/functions.html#exec
