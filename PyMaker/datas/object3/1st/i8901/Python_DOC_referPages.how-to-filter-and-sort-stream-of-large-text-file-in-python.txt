Natural Text
I have a large text file (>1GB) of three comma-separated values that I want to read into a Pandas DataFrame in chunks.  An example of the DataFrame is below:I'd like to filter through this file while reading it in and output a "clean" version.  One issue I have is that some Timestamps are out-of-order, but the problem is usually quite local (usually a tick is out-of-order by a few slots before or below).  Are there any ways to do localized, "sliding window" sorting?Also, as I'm fairly new to Python, and learning about the I/O methods, I'm unsure of the best class/method to use for filtering large data files.  TextIOBase? 
This is a really interesting question, as the data's big enough to not fit in memory easily.First of all, about I/O: if it's a CSV I'd use a standard library csv.reader() object, like so (I'm assuming Python 3):Then I'd probably keep a sliding window of rows in a collections.deque(maxlen=WINDOW_SIZE) instance with window size set to maybe 20 based on your description. Read the first WINDOW_SIZE rows into the deque, then enter the main read loop which would output the left-most item (row) in the deque, then append the current row.After appending each row, if the current row's timestamp comes before the timestamp of the previous rows (window[-2]), then sort the deque. You can't sort a deque directly, but do something like:Python's Timsort algorithm handles already-sorted runs efficiently, so this should be very fast (linear time).If the window size and the number of out-of-order rows are small (as it sounds like they can be), I believe the overall algorithm will be O(N) where N is the number of rows in the data file, so linear time.UPDATE: I wrote some demo code to generate a file like this and then sort it using the above technique -- see this Gist, tested on Python 3.5. It's much faster than the sort utility on the same data, and also faster than Python's sorted() function after about N = 1,000,000. Incidentally the function that generates a demo CSV is significantly slower than the sorting code. :-) My results timing  process_sliding() for various N (definitely looks linear-ish):N = 1,000,000: 3.5sN = 2,000,000: 6.6sN = 10,000,000: 32.9sFor reference, here's the code for my version of process_sliding():


Answer URL
https://docs.python.org/3/library/csv.html#csv.reader
https://docs.python.org/3/library/collections.html#collections.deque
