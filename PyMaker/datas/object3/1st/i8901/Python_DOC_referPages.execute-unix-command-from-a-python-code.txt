Natural Text
I want to execute the above command from Python code. Below is the code I have written.Running the above code, I get sh: 1: Syntax error: "(" unexpected error. As per my knowledge the unix os can't parse the echo command which is inside the braces.Help me fix this error.
First, os.system() is discouraged in favor of subprocess.call(cmd, shell=True). That's worth knowing because there's a lot of additional detail in the subprocess documentation, including this description of the shell=True parameter (emphasis added):On POSIX with shell=True, the shell defaults to /bin/sh.... Popen does the equivalent of:So now we know why your command doesn't work - it's not invoking Bash. As mhawke suggests you should instead invoke bash directly, but you should prefer the subprocess module over os.system():Note that, since we're explicitly invoking the Bash shell, we don't need shell=True, and since the command we're telling Bash to invoke is a single argument we don't need to repeatedly escape them, e.g. with """ as mhawke did.Once you've verified this command works, you'll likely want to move away from simply invoking call() to one of subprocess other functions that are more scripting-friendly, such as run(), which returns a CompletedProcess object you can inspect.As Jean-Fran√ßois Fabre suggests you can do a lot more powerful things with subprocess as well, including starting the <() substitutions as separate processes and piping them into a call to diff, thus avoiding needing to invoke bash or write Bash syntax in Python. It's more verbose, but more extensible and maintainable.
The command runs fine in bash, however, os.system() is executing the command in /bin/sh. You can check with:The command fails when executed with /bin/sh:You can explicitly run the command in bash like this:Since you are probably interested in the output of the command you would ordinarily be able to use subprocess.check_output() to execute the command and collect its output. Unfortunately diff likes to return non-zero exit codes when it detects differences in the input files, so that prevents simply using check_output. You can cheat by piping diff's output through cat:
or you could


Answer URL
https://docs.python.org/3/library/os.html#os.system
https://docs.python.org/3/library/subprocess.html#replacing-os-system
https://docs.python.org/3/library/subprocess.html
https://docs.python.org/3/library/subprocess.html#subprocess.run
