Natural Text
I need to assemble a long text string from xml fields.XML_FIELD_ONE = "Iamacatthatisoddlyimmunetocatnip"XML_FILED_TWO = [7,8,24]FILED_TWO contains the index at which to insert either \n or \r.If two indexes are 1 apart (like 7, 8), then I need to insert \r\n. If the index is solo (like 24) I need to insert \n.It takes about 2 minutes to process a 25K line file with this code.What am I doing wrong?The simple way of doing this is:But this violates the "if two offsets are together, first one is \r, next one is \n"
You wrote a triple loop when you need only one; this is horridly inefficient.  You know exactly where to insert the new items: go directly there, instead of incrementing two counters to find the place.I'm not sure exactly where you need the insertions, but this should be close.  To keep the original indices correct, you need to insert from the right end and work to the left; that's why I reverse XML_FIELD_TWO.I left in my debugging print statements.Output:
You can use the python enumerate() function to produce a sequence of index/value pairs in a single loop. You can then use the list.insert(pos, val) method to insert the character you want.
Here is a linear algorithm to achieve what you are trying to do. Actually, using try-except is perfectly appropriate here, but you should never have a naked except:I keep track of the number of insertions which offsets the index used in .insert to keep the original indices correct.


Answer URL
https://docs.python.org/3/library/functions.html?highlight=enumerate#enumerate
https://docs.python.org/3/library/stdtypes.html?highlight=list#typesseq-mutable
