Natural Text
I have a common situation in my projects, where I use custom Exceptions to wrap built in exception scenarios, like:along with a universal exception handler that looks like this:The known issue here is that I get both exception tracebacks, whereas in if-case I want only the last one. There are two solutions in this problem as far as I know.First workaround (use from None):Second workaround (call the traceback before raising the second exception)No need to call traceback.format_exc() in exception handler, just use the tracb_msg passed to the instance. Obviously first workaround is simpler.My Problem:Both of these approaches re-appear (repeating code/trick) dozens of times inside the code, every time I raise MyCustomException. Has anyone come up with a trick to handle this once inside the handler function?
Use the __suppress_context__ attribute to disable context printing.According to the docs, using raise MyCustomException(foo) from bar sets __cause__ to bar, and __context__ to the original exception (the implicitly chained exception).An implicitly chained exception in __context__ is shown only if __cause__ is None and __suppress_context__ is false.Here's an example:Here's the output I get:Here's the output if I set __suppress_context__ to False:


Answer URL
https://docs.python.org/3/library/exceptions.html
