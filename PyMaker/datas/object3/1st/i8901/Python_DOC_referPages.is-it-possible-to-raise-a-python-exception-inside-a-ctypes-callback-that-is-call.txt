Natural Text
I have a shared library that I've wrapped using ctypes. The library exposes function pointers that can be used to modify its error-handling behaviour. Rather than simply printing a warning or terminating the process with exit(1), I'd like to raise a Python exception which could be caught and handled on the Python side.Here's a sketch of what I'm trying to do:At the moment it seems as though the exception is being raised within the callback, since I see a traceback with the expected error message in my STDERR. However, this exception does not seem to propagate up to the calling Python process, since the exception never gets caught and the calling process terminates normally.
You'd have to use the ctypes.PyDLL() class (via the ctypes.pydll loader) to access your library, and your C code would have to use the Python C API. You 'raise' an exception in C code by calling one of the PyErr_* functions, and then returning -1 to flag an error from the function. The PyDLL() class will then check for an exception being set.You can't use any of the other loaders. Note that the PyDLL() loader also doesn't release the GIL; that would be the responsibility of your extension instead (use the macros supplied by the Python API headers).Note that since you already have to use the Python API just to raise exceptions, you may as well expose your C code as a proper Python extension.


Answer URL
https://docs.python.org/3/library/ctypes.html#ctypes.PyDLL
https://docs.python.org/3/c-api
https://docs.python.org/3/c-api/exceptions.html#raising-exceptions
https://docs.python.org/3/c-api/init.html#thread-state-and-the-global-interpreter-lock
