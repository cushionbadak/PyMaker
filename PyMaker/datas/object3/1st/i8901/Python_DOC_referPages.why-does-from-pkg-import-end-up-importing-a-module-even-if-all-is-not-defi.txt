Natural Text
I have created a package pkg in this manner.All the Python shell snippets below are from a single interactivesession with the Python interpreter. I have split them up into multipleblocks to add my own commentary in between.Here is my Python version.The following import does not import foo because __all__ is notdefined in __init__.py.The above behaviour has been described in the Python tutorial athttps://docs.python.org/3/tutorial/modules.html#importing-from-a-package.If __all__ is not defined, the statement from sound.effects import *  does not import all submodules from the package sound.effects into the  current namespace; it only ensures that the package sound.effects has  been imported (possibly running any initialization code in  __init__.py) and then imports whatever names are defined in the  package.The following imports only bar(). It does not import foo.But strangely after the previous import, the following import ends upimporting foo even if __all__ is not defined in __init__.py.Why does this happen?
Based off of the Python documentation that you cited, when you use from pkg import * you are importing only the module foo as well as __init__.py and not the functions of foo.I suspect the last code snippet you provided works because you have already imported bar() directly from foo and reimporting foo after you've strictly imported the bar function establishes the connection between foo and bar().Do you run into this same issue when specifying __all__?
foo is already imported in pkg namespace as pkg.foo when you do from pkg.foo import bar. So when you then import all names from pkg namespace to current scope you also import foo. See:(I am on python 2 but the logic for this is the same)


Answer URL
https://docs.python.org/3/tutorial/modules.html#importing-from-a-package
