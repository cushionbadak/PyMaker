Natural Text
I'm trying to understand why should I use types annotation in python. For exemple I can write function like: When I use it with int all gone good:But when I run for exempleI have result without any notes that types are wrong. So what is the reason to use types annotation? 
Type hints are there for other tools to check your code, they are not enforced at runtime. The goal is enable static analysis tools to detect invalid argument use.Use an IDE like PyCharm, or the commandline code checker mypy to be told that 2.0 is not a valid argument type.From the Type Hinting PEP (484):This PEP aims to provide a standard syntax for type annotations, opening up Python code to easier static analysis and refactoring, potential runtime type checking, and (perhaps, in some contexts) code generation utilizing type information.Emphasis mine. Runtime type checking is left to third-party tools. Note that such runtime checks would come with a performance downside, your code will likely run slower if you were to check for types on every call.
As one can read in the PEP 484 that introduces type hints:(...)This PEP aims to provide a standard syntax for type annotations,  opening up Python code to easier static analysis and refactoring,  potential runtime type checking, and (perhaps, in some contexts) code  generation utilizing type information.Of these goals, static analysis is the most important. This includes  support for off-line type checkers such as mypy, as well as providing  a standard notation that can be used by IDEs for code completion and  refactoring.IDE's (static analysis)So the main use is in static analysis: your IDE can detect that something is wrong when you call a function and can provide a list of functions you can call on the result of function.For instance if you write:your IDE can provide a list with real as a possible option so you can easily write:and if you write:It will hint that 'foo' is not an acceptable parameter nor is .bar a good call on that object.Dynamic inspectionYou can also use it for dynamic inspection with inspect.getfulargspec like:Now we know that some_function returns an int and can be feeded two ints. This can be used for arbitrary tests (which are popular in Haskell): you simply feed the some_function random integers and looks that it always returns an int (and does not raises an exception for instance).


Answer URL
https://docs.python.org/3/library/inspect.html?highlight=inspect.getfull#inspect.getfullargspec
