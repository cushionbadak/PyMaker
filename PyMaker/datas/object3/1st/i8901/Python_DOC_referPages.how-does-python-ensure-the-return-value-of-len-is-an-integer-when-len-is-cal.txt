Natural Text
If I run this by passing a string in for data I get an error when calling len on an instance of this class. Specifically I get 'str' object cannot be interpreted as an integer.So does the return statement in __len__ have to be an integer? I would think if I am overriding it, it should be able to output whatever I want, so why is this not possible?
TL;DRAt the C-level, Python inserts __len__ into a special slot that catches the output of the call to __len__ and does some validation on it to ensure it is correct.In order to answer this, we have to go a bit down the rabbit hole of what happens under the hood when len is called in Python.First, let's establish some behavior.When you call len, the C function builtin_len gets called.  Let's take a look at this.You will notice that the PyObject_Size function is being called - this function will return the size of an arbitrary Python object. Let's move further down the rabbit hole.It checks if the type defines the sq_length function (sequence length), and if so, calls it to get the length. It appears that at the C level, Python categorizes all objects that define __len__ as either sequences or mappings (even if that's not how we would think of them at the Python level); in our case, Python thinks of this class a sequence, so it calls sq_length.Let's take a quick aside: for builtin types (such as list, set, etc.) Python does not actually call a function to calculate the length, but accesses a value stored in a C struct, making this very fast. Each of these builtin types defines how to access this by assigning an accessor method to sq_length.  Let's take a quick peek at how this is implemented for lists:ob_size stores the object's size (i.e. number of elements in the list). So, when sq_length is called, it is sent to the list_length function to get the value of ob_size.OK, so that's how it is done for a builtin type... how does it work for a custom class like our foo?  Since the "dunder methods" (such as __len__) are special, Python detects them in our classes and treats them specially (specifically, inserting them into special slots).Most of this is handled in typeobject.c. The __len__ function is intercepted and assigned to the sq_length slot (just like a builtin!) near the bottom of the file.The slot_sq_length function is where we can finally answer your question.Two things of note here:If a negative number is returned, a ValueError is raised with the message "__len__() should return >= 0". This is exactly the error received when I tried to call len(foo(-1))!Python tries to coerce the return value of __len__ to a Py_ssize_t before returning (Py_ssize_t is a signed version of size_t, which is like a special type of integer that is guaranteed to be able to index things in a container).OK, let's look at the implementation of PyNumber_AsSsize_t.  It's a bit long so I will omit the non-relevant stuff.The relevant bit here is in PyNumber_Index, which Python uses to convert arbitrary objects to integers suitable for indexing.  Here is where the actual answer to your question lies.  I have annotated a bit.Based on the error that you received, we can see that '5' does not define __index__.  We can verify that for ourselves:


Answer URL
https://docs.python.org/3/library/functions.html#len
https://docs.python.org/3/library/functions.html#len
https://docs.python.org/3/library/functions.html#list
https://docs.python.org/3/library/functions.html#set
https://docs.python.org/3/reference/datamodel.html#object.__len__
