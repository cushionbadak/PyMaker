Natural Text
I have a list of dictionaries of images resolutions:I need to choose the dictionary which ratio is closer to 1.77672955975 (that is the result of float(565) / float(318)) and, if the ratio is equal, the one with the most pixels. In other words I need to choose the biggest image from the list which, once resized and cropped to 565x318, will need less cropping.I was thinking about sorting the list 2 times, the first time based on pixels and the second one based on which has the result of abs(ratio - (float(565) / float(318))) smaller. In this way on the top would remain the one with the most pixels and the closest ratio match. But how to do the sorting?
You can use min(..) for that with a key:resulting into:The idea is that the key: lambda x:(abs(1.77672955975-x['ratio']),-x['pixels']) will for each dictionary calculate the difference between your given ratio (here 1.77672955975) and the 'ratio' of this dictionary. We return a tuple (with -x['pixels'] as second element for tie-breaking (kudos to @MosesKoledoye for spotting that).
The standard solution for sorting by multiple attributes is to use tuples, because tuples get sorted by their elements.


Answer URL
https://docs.python.org/3/library/functions.html?highlight=super#min
