Natural Text
I'm wondering where to configure and initialize stuff related with logging module?For example I writing some class and I want to log some info while method will be executed. Should I configure logging in init or above class on the top of module:What is the best practice ?
The logging package serves two purposes, assisting the author to produce logs and assisting the user to consume logs. You might perform both those roles but thinking about them separately will help you write clean, understandable code.Authors ConcernsAuthor should instantiate the logger at the right level:Package logger should go in the packages __init__ file. Note the use of __name__, it'll resolve to SomePackage:Module logger at the top of your module. Note the power of __name__! Here it'll resolve to SomePackage.SomeModule.Class level logger could go in a classes __init__ (or use a meta-class). Note the awesome power of __name__ enhanced with getLogger! The loggers name will be SomePackage.SomeModule.SomeClass. Also, not the underscore in _class_logger to signal that it is for internal use.:Instance logger in the classes __init__. Use ID to produce a unique identifier. Note the stupend... you get the idea. Logger name will be SomePackage.SomeModule.SomeClass.<large_unique_number>:The names may not suit your application. For instance you may want an instance logger that is derived from one of it's instantiating args. However, you should still aim to get a grip on your logger at the right level.Users ConcernsIt's the Users job to configure handlers. Generally, the author will have ensured that no handlers will be active by default. logging.basicConfig will dump all log records of level warning and above to stderr.Remember you can use logging.getLogger() to access the same loggers that the author defined.If you're debugging your own modules by calling them directly, you probably have a def main() and they should go in there. This ensures a package user won't get unexpected log files or consoles messages.


Answer URL
https://docs.python.org/3/library/functions.html#id
