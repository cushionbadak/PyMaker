Natural Text
Apologies if something similar has already been asked - I did search around a bit, and I probably missed something, but it seems to me at least that the answers for other questions weren't really about the same thing I'm wanting to do.I have a text file, (let's call it 'Potatoes.txt') containing the following info:What I want to do is decrease the number for certain towns, and modify the text file accordingly.I did a little research and it appears you can't modify text files, and I need the text file to have the same name, just have different values inside it, so I'm currently doing this instead:So basically I'm just overwriting the old file to a blank one, then copying the value from the modified / temporary file. Is there a better way to do this I'm missing?Thanks for the help.
I did a little research and it appears you can't modify text filesThere is a module that gives you the same effect as modifying text as you loop over it.  Try using the fileinput module with the inplace option set to True.  Here is a little Python3.6 code to get you started:
Try:This is certainly not the best way, but it's certainly better and works.
You can use the csv module to do the file/string handling.Just read all the values in and loop over them line by line, making adjustments as required. Then write them back to a new file using a csv.writer object.The lineis possibly a little messy. It arises because the values from the csv are all strings. So this is a simple way to convert it to an integer, subtract 20 and convert back to a string.Looking at your code, there is a mistake in there often made by beginners.You have to realize that this is combination of two separate statements and is not what you expect. The first statement is just Town 2, which will always evaluate to True. The second statement is "Town 4" in line", which will return True if the string "Town 4" is contained anywhere in the line string. Your intent was no doubt to test if either string was in line. To do that you need to explicitly test both strings.Will work as expected. You can take it a step further though and cut out some inelegance present in that statement. You know that string should always occur in the first element of the string, after the split this is info[0] in your code (or line[0] in mine as I let csv do the split).You can therefore writeWhich I think you'll agree is easier to read and less repetitive typing, especially if you go on to add more Towns.
It is possible to open a file for both reading and writing using mode "r+"In order to keep everything clean, I rewind the file after reading it using seek(0), write every line back into it from a buffer, and truncate any remaining part of the file before closing it. I would be interested to know if and when these operations aren't necessary.This variation doesn't modify (clobber) any other files in the directory, which is a benefit in cases where the code might run simultaneously on different input files. I have no idea if only opening one file one time has any performance benefit, but it probably does to a small degree.


Answer URL
https://docs.python.org/3/library/fileinput.html
