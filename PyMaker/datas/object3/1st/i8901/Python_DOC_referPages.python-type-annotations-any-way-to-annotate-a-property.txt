Natural Text
I'm defining a Python class:I want to annotate the bar property to say that it contains an item of class Bar. Is there an accepted way of doing that? I know that this is valid Python syntax:But is this an accepted way of annotating a property?
If you want to be safe, simply refactor it into using the decorator form and specify a return value:this is also the form used in typeshed which collects stubs annotating the standard library and also smoothly passes through mypy. As for variable annotation syntax of Python 3.6, the form:is currently acceptable when checking with mypy. 
In such situation. I may well draw upon the design of other languages.Take Scala for example:Scala language has Uniform Access Principle in mind:there should be no difference from user between accessing with an attribute, precomputed property, or parameterless method.A computable property in theory is just a function that has zero parameters, e.g. ()=>T in Scala. While from user viewpoint it should just be a constant property with type T.Back to the question, if we borrow the principle(it's good in my opinion), the type should just the return type -- Bar, not the property decorator type in Python.


Answer URL
https://docs.python.org/3/library/functions.html#property
