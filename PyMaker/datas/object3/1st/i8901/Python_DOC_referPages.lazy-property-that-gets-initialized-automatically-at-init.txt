Natural Text
I want to use something like the usual lazy property decorator, but due to how TensorFlow works and how I use it, I need all of the lazy properties to be initialized automatically at __init__ the latest (the TensorFlow part is not part of the question, but see here for what I mean). By "initializing" I just mean calling getattr to run the property method once and cache the result.The following works already:However, it would be nice to get rid of the manual calls to self.input and self.do_stuff in __init__ -- that quickly gets tedious.I was thinking about multiple ways of "remembering" which properties are graph_propertys somewhere in a list, but all must fail, I think, since at the time the decorator is applied, the class is not yet known to it (let alone self). One way I could imagine to work is giving the returned decorated object some tag attribute, and write a metaclass for Test which looks at all methods, collects the ones with this tag, and somehow creates an initializer for them. I failed to implement this because I'm very not familiar with metaclasses and the property descriptor doesn't let me add attributes. Would the described approach be feasible (if so, how)? Or is there an easier way (without manual overhead and with equally nice syntax) and I'm just not seeing it?
You could add a simple mixin and define a subclass of property and then do all of the initializing related to this custom property in the __init__ method of mixin. This way you can choose in which class you want them to initialize and when you don't want them initialized.Demo output:
Since you have full control of your properties and class hierarchy, it is simply a matter of marking the properties you want initalized, and have code in a base class __init__ method that will call all of them.So, first, in your decorator, set a variable on your graph_property decorator, so that it marks the methods to be initialized.Since property objects, unlike functions, can't be assigned arbitrary attributes, the fix for that is to wrap Python's native property in a user-defined class:And then, on a Base or mixin class for all your other classes, do this:And that should be it.


Answer URL
https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_members
