Natural Text
For example, if a process is generating an image, and other parallel process is accessing this image through a get method, my intuition tells me that it may be dangerous to access that image while it is being written.In C++ I have to use mutexes to make sure the image isn't accessed while it is being written, otherwise I'm experiencing random segfaults. but since python has some data protection mechanisms that I don't fully know, I'm not sure if I need to do this.Is this safe? 
First of al, the threading module uses threads, not different processes!The crucial difference between threads and processes is that the former share an address space (memory), while the latter don't.The "standard" python implementation (CPython) uses a Global Interpreter Lock to ensure that only one thread at a time can be executing Python bytecode. So for data that can be updated with one one bytecode instruction (like store_fast) you might not need mutexes. When a thread that is modifying such a variable is interrupted, either the store has been done or it hasn't.But in general you definitely need to protect data structures from reading and modification by multiple threads. If a thread is interrupted while it is in the proces of modifying say a large dictionary and execution is passed to another thread that tries to read from the dictionary, it might find the data in an inconsistant state.
Python shouldn't segfault in situations like this - the global intepreter lock is your friend. However, even in your example there's every chance that a camera interface is going to go into some random C library that doesn't necessarily behave itself. Even then, it doesn't prevent all race conditions in your code and you could easily find inconsistent data because of that.Python does have Lock which is very low-level and doesn't provide much functionality. Condition is a higher-level type that is better for implementing a mutex-like lock:Incidentally, there was a mutex in Python 2, which was deprecated in 2.6 and removed in Python 3.
I think what you are looking for is is the lock Object -> https://docs.python.org/2/library/threading.html#lock-objectsA primitive lock is a synchronization primitive that is not owned by a  particular thread when locked. In Python, it is currently the lowest  level synchronization primitive available, implemented directly by the  thread extension module.In your example, I would encapsulate the access  to the image in a function like thisFor more on Thread synchronization, see -> http://effbot.org/zone/thread-synchronization.htmEdit:Here are the cahnges to the ohter functions


Answer URL
https://docs.python.org/3/library/threading.html#lock-objects
https://docs.python.org/3/library/threading.html#threading.Condition
