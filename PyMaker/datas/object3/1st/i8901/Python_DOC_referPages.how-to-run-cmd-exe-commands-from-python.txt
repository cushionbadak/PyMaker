Natural Text
I would like to run to run a script that opens GUI in which i press a start button which runs (opens, writes, runs) cmd.exe command line.Command is following : "ConverterApp.exe"  file1.x file1.yConverterApp is placed in a random desktop folder. What is does it converts one type of photo to another. And right now i have to use the command above for every photo, so i want to write pyhton program which will convert all .x files in folder to .y.From my reaserch on the topic i have to use subprocess, bit im kind of lost on how to use it.
use the subprocess module.Python 2: https://docs.python.org/2/library/subprocess.htmlexample:Python 3: https://docs.python.org/3/library/subprocess.htmlyou can still use subprocess.call, but for Python versions >3.4, it's preferred to use the newer subprocess.run.example:Note: in both subprocess.call, and subprocess.run, your command should be passed as a sequence (i.e. a list).
Have you looked into using os.system to execute commands? It is simple to use and may be sufficient to accomplish what you are trying to do. On Windows, it usually runs cmd.exe for you.os.system(command)Execute the command (a string) in a subshell. This    is implemented by calling the Standard C function system(), and has    the same limitations. Changes to sys.stdin, etc. are not reflected in    the environment of the executed command. If command generates any    output, it will be sent to the interpreter standard output stream.On Unix, the return value is the exit status of the process encoded in    the format specified for wait(). Note that POSIX does not specify the    meaning of the return value of the C system() function, so the return    value of the Python function is system-dependent.On Windows, the return value is that returned by the system shell    after running command. The shell is given by the Windows environment    variable COMSPEC: it is usually cmd.exe, which returns the exit status    of the command run; on systems using a non-native shell, consult your    shell documentation.The subprocess module provides more powerful facilities for spawning    new processes and retrieving their results; using that module is    preferable to using this function. See the Replacing Older Functions    with the subprocess Module section in the subprocess documentation for    some helpful recipes.Availability: Unix, Windows.


Answer URL
https://docs.python.org/3/library/subprocess.html
https://docs.python.org/3/library/os.html#os.system
