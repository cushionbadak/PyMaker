Natural Text
Aim: I'd like to get (or be able to work with) a set of all possible permutations obtained from a list of strings.Example in Python:Since for my analysis ('A', 'A', 'B', 'B') is the same as ('A', 'A', 'B', 'B'), (although the 'A' may have changed the position), I do:Now this is great, but the list I want to work with has 481 strings, with 5 unique strings with different frequencies:This is not a problem for itertools.permutations(real_list), but when I want to get the set, it takes ages. This is because the number of permutations is 9.044272819E+1082.What I want to do is:First I want to know the number of unique elements in that permutation space, i.e. the length of the set. To get the number of unique elements it might be possible to do it analytically, however since the frequency of each unique element is different I don't how to do that.  Second I would like to be able to get a sample of those unique elements in the set of permutations.I'd appreciate any help provided.Best,Alejandro
Calculating the number of unique permutations is simply a matter of applying a formula - we know that were we to have n distinct elements, we would have n! permutations. Then to account for repeated permutations we must divide by each count of permutations of repeated letters. This is a multinomial coefficient.So a simple implementation to generate the unique count may look something like Then sampling from the unique permutations is probably most simply achieved by just ensuring your sample values remain unique, as opposed to trying to generate all of the unique values and then sampling. There is a recipe in the itertools module, random_permutation, which could be useful for this. So creating a unique sample might look something like Demo


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
