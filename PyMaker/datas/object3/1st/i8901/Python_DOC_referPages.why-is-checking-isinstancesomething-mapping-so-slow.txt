Natural Text
I recently compared the performance of collections.Counter to sorted for comparison checks (if some iterable contains the same elements with the same amount) and while the big-iterable performance of Counter is generally better than sorted it's much slower for short iterables.Using line_profiler the bottleneck seems to be the isinstance(iterable, collections.Mapping)-check in Counter.update:gives me:So even for length 1000 iterables it takes more than 15% of the time. For even shorter iterables (for example 20 items it increases to 60%).I first thought it has something to do with how collections.Mapping uses __subclasshook__ but that method isn't called after the first isinstance-check anymore. So why is checking isinstance(iterable, Mapping) so slow?
The performance is really just tied to a collection of checks in ABCMeta's __instancecheck__, which is called by isinstance.The bottom line is that the poor performance witnessed here isn't a result of some missing optimization, but rather just a result of isinstance with abstract base classes being a Python-level operation, as mentioned by Jim. Positive and negative results are cached, but even with cached results you're looking at a few microseconds per loop simply to traverse the conditionals in the __instancecheck__ method of the ABCMeta class. An exampleConsider some different empty structures. We can see the performance discrepancy - what accounts for it?For a dict For a listWe can see that for a dict, the Mapping abstract classes' _abc_cache includes our dict, and so the check short-circuits early. For a list evidently the positive cache won't be hit, however the Mapping's _abc_negative_cache contains the list type as well as now the pd.Series type, as a result of calling isinstance more than once with %timeit. In the case that we don't hit the negative cache (like the first iteration for a Series), Python resorts to the regular subclass check with which can be far slower, resorting to the subclass hook and recursive subclass checks seen here, then caches the result for subsequent speedups. 


Answer URL
https://docs.python.org/3/library/functions.html#isinstance
