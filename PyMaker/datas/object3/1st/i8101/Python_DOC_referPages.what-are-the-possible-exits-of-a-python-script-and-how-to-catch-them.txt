Natural Text
I want to write a python script which ensures in any case that a database connection will be closed. (Please note that I'm not sure if I used the correct terms for everything described below.)I could think of the following situations to end the script:The script runs without any problem to its end. The script is stopped by an raised exception.The script is stopped while receiving a SIGTERM.The script is stopped while receiving a SIGKILL.What would be the best method to ensure that the database connection will be closed in any case. It would be nice if you could point out where the strengths and boundaries of the with and finally statements are. As this question has a more theoretical interest no minimal code example is given. Please also node that it doesn't have to be a database connection I'm generally interested in the possibilities. Thank you in advance.Best,Christian 
One possibility is the atexit module. But it is cleaner to use try:/finally:, or even better make a context manager so that your connection object can be used in a with: statement.By the way, another way an exit can happen is that the sys.exit() function is called. Internally, even sys.exit() works by raising an exception of type SystemExit, so with: statements and finally: handlers will still be called.As the atexit documentation points out, none of these will be called if the program is exited with os._exit().


Answer URL
https://docs.python.org/3/reference/datamodel.html#context-managers
https://docs.python.org/3/library/sys.html#sys.exit
https://docs.python.org/3/library/exceptions.html#SystemExit
https://docs.python.org/3/library/os.html#os._exit
