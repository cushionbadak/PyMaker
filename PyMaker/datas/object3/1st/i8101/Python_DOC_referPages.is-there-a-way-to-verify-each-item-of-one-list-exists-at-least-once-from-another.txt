Natural Text
I am attempting to verify that each string in a list exists at least once in another list. The problem I keep getting stuck on is that the strings will never be an exact match, so I need some form of regex/globbing.The idea is to return True if a given device list contains at least one of each device string from the must_have_list. If the given device list only contains one (or none) of the items in the must_have_list, then return FalseTrue One of each foundFalse Only 2x APPLE HDD found, no APPLE SSD listedTrue One of each found, even though there is more than one APPLE HDDFalse Only APPLE SSD listed, no APPLE HDD listedHow can I use regex to verify that each item in one list exists in another list?
If, as in your example, the pattern to be tested is always the initial part of the string, it is somewhat simpler:If it can be an inner string, then you'd have to use must_have in example instead of startswith, wich raises algorithmical complexity.Additional optimization would be to remove an example device found to not test it against other musthaves.Finally, you can turn the whole process inside out and iterate through the example list on each example device removing a musthave found to be the prefix of this example, until there is no musthaves left. Depending on the sizes of must have list and examples list, it makes sense to copy the musthaves into a fresh dict (or set from collections) to improve search time.
Without using regex. This is an approach to your question using str.startswith():Output:
You can use all and any to test your conditions:Prints:Which can be used with a list comprehension to produce a list that fits the conditions:A regex isn't required in this case, but you could use re.search rather than in if testing each string required it. Example, say you wanted to know that the tested substring were standing alone and not part of another word like SSDHYBRID:


Answer URL
https://docs.python.org/3/library/functions.html
