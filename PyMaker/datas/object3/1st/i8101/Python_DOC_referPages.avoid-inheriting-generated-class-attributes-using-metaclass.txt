Natural Text
I was thinking of automatically adding child classes to parent for "chaining" using a metaclass. However, inheriting these attributes from parent classes messes thing up. Is there a nice way to avoid this?
Well, this turns out to be trickier than it seens at first - because basically you want to have class inheritance relationship, but do not use the normal attribute lookup paths on class inheritance - Otherwise, HTTPError, being a subclass of BaseError, for example, would always have all the attributs present in BaseError itself - Therefore,the chain BaseError.HTTPError.HTTPError.HTTPError.HTTPError... would always be valid.Fortunately, Python does offer  a mechanism to register classes as subclasses of other, without "physical" inheritance - that is, it is reported as subclass, but does not have the parent class in its bases or __mro__ - and therefore, attribute lookup on the derived class (adopted?) does not search attributes in the "foster" parent.This mechanism is provided through the "abstract base classes" or "abc"s, through its ABCMeta Metaclass, and "register" method.And now, due to the fact you also probably want to declareyour class hierarchy with the normal inheritance syntax - that is,being able to write class HTTPError(BaseError): to indicate the newclass derives from BaseError - you get the actual "physical" inheritance.So, we can inherit from ABCMeta class (instead of type) and write the __new__ method so that the physical inheritance is excluded - and we use the setattr for containment you intended with your code as well, and also, we trigger the needed call to parentclass.register directly on the metaclass. (Note that as we are now changing the base classes, we need to fiddle in the __new__ method of the metaclass, not on __init__:And for a quick test:In the interactive mode, check if it works as you intend:And then, most important of all, testing if the Exception hierarchy actually works in this way:A few notes:  no need to inherit from both Exception and object explicitly - Exception itself already inherits from object. And, most important: whatever project you are working on, do whatever is possible to move it to Python 3.x instead of Python 2. Python 2 is with the days counted, and there are many, many new features in Python 3 you are excluding yourself of using. (The code in this answer is Python 2/3 compatible, but for the __metaclass__ usage declaration of course).
A fairly naive global mapping solution that also seems to be working:


Answer URL
https://docs.python.org/3/library/abc.html
