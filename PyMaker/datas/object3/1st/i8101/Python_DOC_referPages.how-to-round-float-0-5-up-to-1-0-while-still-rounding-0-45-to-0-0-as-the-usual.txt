Natural Text
Appears that the default Python round(1 / 2) gives 0.How to round float 0.5 up to 1.0, while still rounding 0.45 to 0.0, as the usual school rounding?NOTE: Sorry for deleting and posting this again, but it was incorrectly marked as duplicate of another question.
It is actually currently considered proper to NOT blindly round *.5 up. Rather, it is proper to round *.5 to the nearest even number. Python 3 implements this "proper" form of "banker rounding", but a lot of other languages don't (yet). Blindly rounding *.5 up produces a slight bias, but "banker rounding" helps to balance it it out. See this thread for more info. So...Method 1You could conditionally use aceil(...) function (from the math module for the rounding up aspect. You'll have to do it conditionally in order to also maintain the regular rounding behavior for values less than 0.5. Try something like the following (note that this isn't extremely robust in that it only works on positive values...it should be able to be easily adapted to work with both positive and negative values though):Note that a ceil(...) function will return an integer, not a float. This shouldn't be a major issue, but now you are aware.Method 2From the post I linked to above, it looks like another option is to use the decimal module to emulate the "old" way of rounding's behavior. I'm kind of copy & pasting from there, but here you go:Supposedly the decimal.ROUND_HALF_UP form of rounding is what you are looking for. This way you don't have to use a ceil(...) function conditionally.I'm guessing that this was marked as a duplicate of another because a little digging would have given you more than enough info on this topic. (I didn't mark it as a duplicate, I'm just assuming that is why someone else did.)
Getting the "school" rounding, with rounding away from 0 for value in between, also for negative numbers, the function below can be used.  This is also the rounding that was in Python 2.Some example results:


Answer URL
https://docs.python.org/3/library/math.html
https://docs.python.org/3/library/decimal.html#decimal-faq
