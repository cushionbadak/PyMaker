Natural Text
From What’s New In Python 3.7 we can see that there is new math.remainder. It says Return the IEEE 754-style remainder of x with respect to y. For finite x and finite nonzero y, this is the difference x - n*y, where n is the closest integer to the exact value of the quotient x / y. If x / y is exactly halfway between two consecutive integers, the nearest even integer is used for n. The remainder r = remainder(x, y) thus always satisfies abs(r) <= 0.5 * abs(y).Special cases follow IEEE 754: in particular, remainder(x, math.inf) is x for any finite x, and remainder(x, 0) and remainder(math.inf, x) raise ValueError for any non-NaN x. If the result of the remainder operation is zero, that zero will have the same sign as x.On platforms using IEEE 754 binary floating-point, the result of this operation is always exactly representable: no rounding error is introduced.But we also remember that there is % symbol which is remainder of x / yWe also see that there is a note to operator:Not for complex numbers. Instead convert to floats using abs() if appropriate.I haven't tried to run Python 3.7 if it's even possible.But i tried So difference would be, instead of nan and ZeroDivisionError we would get ValueError as it says in docs.So the question is what is the difference between % and math.remainder? Would math.remainder also work with complex numbers(% lacks from it)? What is the main advantage?Here is the source of math.remainder from official CPython github repo.
Return the IEEE 754-style remainder of x with respect to y. For finite  x and finite nonzero y, this is the difference x - n*y, where n is the  closest integer to the exact value of the quotient x / y. If x / y is  exactly halfway between two consecutive integers, the nearest even  integer is used for n. The remainder r = remainder(x, y) thus always  satisfies abs(r) <= 0.5 * abs(y).for the modulo this is m = x - n*y where n is the floor(x/y), so 0 <= m < y instead of abs(r) <= 0.5 * abs(y) for the remainder.so
Thanks to @MaartenFabré, I wasn't being attentive to details: math.remainder() is the difference x - n*y, where n is the closest integer to the exact value of the quotient x / yI built Python 3.7:And here are differences:Zero as divisor:Basic numbers, where math.remainder(x, y) < x % yComplex numbers:Infinity(math.inf)


Answer URL
https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex
