Natural Text
I am in the process of shifting from Perl to Python, and I am struggling with what was a hash of hashes of arrays.I have this data structure return from a REST service:Speaking in Perl, I'd like to parse it and have the Python equivalent ofIn Python I tried things along the line:but encountered various errors.In the end, I want d to look like:so grouping by tissue, then by value, and for each value have a list of genes.
You can use list comprehension to get output of your desired format!
You can use the dict.setdefault() method to insert nested data structures for keys that are missing. Because that method returns either the already existing key, or the newly-inserted default value, you can chain these calls:So for each d[tissue] key, ensure that there is a nested dictionary. For each d[tissue][value] pair of keys, ensure that there is a nested list value, and append the gene to that.Demo:Do realise that floating point values can be imprecise. You may want to apply some rounding to normalise the values. 0.555100655197016 and 0.555100655197017 are very close together, for example, but not equal:You could simply use the round() function on value, to a number of digits that still makes sense for your application:
I would personally use a mix of list comprehensions and default dicts, but I wanted to illustrate what the most simple / introductory approach would be as you're transitioning to Python:the reason why this is so verbose (compared to a Perl approach) is that Perl has some conveniences built in for creating data structures of a certain type as needed. In Python you need to use either check for the presence of the correct datastore or use one (of several) approaches to a dict that has default values.
I think this will do the job. In fact you have almost done it


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.setdefault
https://docs.python.org/3/library/functions.html#round
