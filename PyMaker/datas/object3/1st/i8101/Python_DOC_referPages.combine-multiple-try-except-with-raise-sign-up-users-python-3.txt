Natural Text
The scenario is the following:I have a database where I store users and I want to keep the data (database) and the logic (bussiness) layers completely isolated.I've created several specific exceptions to display the correct message in the interface (Flask) layer. Such as UserNotFound, UserEmailUsed, UserNameTakenAll the code is in a single file cruduser.pyConection to the database:Get users by email and/or username (Returns a User object):Now to check duplicates I created the following code when a new user signs up:My questions are:Is this approach pythonic?Is there a better way to write the available_user function?Is it appropriate to use exceptions in this way?Note: This is a learning project so I would like to keep as pure as possible, no flask plugins at this point.
I am not too experienced with custom Exceptions but it looks like both of them are raised in any case, in contrast to your comment (if). So I'd put this condition into the code, and maybe catch UserNotFound in a common except.https://docs.python.org/3/tutorial/errors.html#handling-exceptions
After think and try several solutions I came to this:First, DB logic and Business Logic should be separated so there is a dbconnect.py file with the following code:All possible scenarios are covered there.Now the cruduser.pyAnd the available functionality is achieved with two functions:The reason why I switch between using get_user_by_email and get_user_by_username to get_users is for performance, the latter just uses two columns while the former returns a whole object after performing a Join. Additionally the exception where renamed to a more explicit name and where moved from DB Logic to Business Logic file


Answer URL
https://docs.python.org/3/tutorial/errors.html#handling-exceptions
