Natural Text
So I am working on a UVA problem and I have 4 nested loops to iterate over a list of polygons (each polygon contains a list of points where each point contains an integer x and y to represent it's coordinates, i.e polygon[0] is a point which coordinates are polygon[0].x and polygon[0].y). I am trying to reduce the number of for loops in the program in order to make it more efficient and have a lower runtime. My code is as follows:And I tried to make it more efficient by using itertools.product as follows:Anyhow my code is having the same runtime in both cases, is there a way to reduce the number of nested loops for my algorithm?Thanks in advance for any given help, much appreciated
Your two outer loops are creating combinations of lists; use the itertools.combinations() iterator for those. Your innermost double loop produces the carthesian product, so use the itertools.product() iterator.Don't generate indices with range(), just loop directly over the polygon lists; useenumerate()` to add indices rather than make indices work the other way around.To pair up sections, the pairwise() recipe from the itertools recipes section; that'll let you get all segments to work with. To circle round to the start again (pairing up the last coordinate with the first), just append a list with the first element to the end.Once you get rid of nested loops, you can use break to end them rather than use a flag variable.In fact, once you have determined something is a union, you don't have to continue with the rest of the tests. You could use the any() function to stop testing the isInside() and doIntersect functions early:This is not only far more readable now, it should also be more efficient!


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
https://docs.python.org/3/library/itertools.html#itertools.product
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/functions.html#any
