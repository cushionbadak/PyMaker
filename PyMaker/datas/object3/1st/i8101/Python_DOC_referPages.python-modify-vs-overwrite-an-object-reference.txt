Natural Text
Can someone explain modifying vs. overwriting object reference in an easy to understand way? Here is an example of what I mean:By modifying an object reference:By overwriting an object reference:Does that mean when using "append" we are only modifying the object reference while using assigning values i.e.we are overwriting the value and assigning nested[1] to a new object reference? Is it caused by the underlying difference between the "append" method and assigning values? If so what's the difference?
Let's assign the name x to an empty list such that it is easier to reason about the code.In your first exampleyou are creating a list nested with three references to x. Here's proof:We only ever created one empty list x, that's why andare all equivalent and appending to the same list in memory:The second example is easy. You create a list nested which initially holds three references to the same empty list.Then you overwrite what the second element of nested (i.e. nested[1]) refers to by issuesing The second element of nested is a new list that has nothing to do with the first and third element of nested.Since you did not modify what nested[0] and nested[2] reference, they are still holding the same empty list (which in our example also goes by the name x).
As I wrote in my comment, the * operator on lists just copies the references inside the list:All three elements inside nested_list refer to the same list. This makes sense if you think about what the expression above really says. The evaluation really happen in the following order:To the second part of your question. If you replace the second element by a new list:The first and third element are referring to the same empty list, but the one just assigned to (['zzz']) is a new list (with one element, 'zzz'.)E.g. if you do the following you will see that the first and third are still referring to the same list:SolutionTo create three distinct empty lists, which is probably what you want, you usually do something like (the following lines are equivalent):


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
