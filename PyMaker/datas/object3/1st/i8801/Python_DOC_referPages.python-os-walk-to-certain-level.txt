Natural Text
This question already has an answer here:Python 3 - travel directory tree with limited recursion depth                    2 answers                I want to build a program that uses some basic code to read through a folder and tell me how many files are in the folder.Here is how I do that currently: This works great until there are multiple folders inside the "main" folder as it can return a long, junky list of files due to poor folder/file management. So I would like to go only to the second level at most. example:I know how to go to only the first level with a break and with del dirs[:] taken from this post and also this post. But no matter my searching I can't find out how to go two layers deep. I may just not be understanding the other posts on it or something? I was thinking something like del dirs[:2] but to no avail. Can someone guide me or explain to mehow to accomplish this?
you could do like this:key is: if root[len(stuff)+1:].count(os.sep)<2It removes stuff+separator from root, so result is relative to stuff. Just count the number of files separators, and don't enter the condition unless you get 0 or 1 separators.Of course, it still scans the full file structure, but unless it's very deep that'll work.Another solution would be to only use os.listdir recursively (with directory check) with a maximum recursion level, but that's a little trickier if you don't need it. Since it's not that hard, here's one implementation:Note: os.listdir and os.path.isfile perform 2 stat calls so not optimal. In Python 3.5, the use of os.scandir could avoid that double call.
You can count the separators and if it's two levels deep delete the content of dirs so walk doesn't recurse deeper:Python documentation states following about the behavior:When topdown is True, the caller can modify the dirnames list in-place (perhaps using del or slice assignment), and walk() will only recurse into the subdirectories whose names remain in dirnames; this can be used to prune the search, impose a specific order of visiting, or even to inform walk() about directories the caller creates or renames before it resumes walk() again.Note that you need to take into account the the separators present in the folders. For example when y:\path1 is walked root is y:\path but you don't want to stop recursion there.


Answer URL
https://docs.python.org/3/library/os.html#os.walk
