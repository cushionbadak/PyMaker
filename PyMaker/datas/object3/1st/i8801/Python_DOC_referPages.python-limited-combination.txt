Natural Text
I have a list with 200 elements. I want to randomly calculate 10% of all the combinations of length k of those elements and store the result in a list.For example:Assume 'ABCD' as in ['A', 'B', 'C', 'D'] and I want combinations of length 2. All possible combinations in this case would be 6 (n! / ((n-k)! x k!)). I want to get 10% of that which is 0.6 -> 1 (round up).I tried itertools.combinations('ABCD', 2) but it gives me all combinations.Here's some more information about my problem.I have and I want to calculate combinations of 3 of them and usebut it gives me all combinations of my points. When I run it for 100 points it is very time consuming so I want to calculate just a limited number of these combinations.
We can generate the random combinations using random.sample, and use a set to ensure we don't generate any combination more than once. Here's a simple demo.outputAs tobias_k mentions in the comments, this code is only suitable when num is not too close to the total number of combinations. If you want < 50% of the total number of combinations it should be fine, but beyond that it will have a high chance of re-generating combinations that it's already generated, which will cause it to loop for a long time.Note that this code considers ((2, 3), (12, 13), (8, 9)) to be distinct from a tuple containing those 3 pairs in a different order, eg ((2, 3), (8, 9), (12, 13)). If you don't want that we can make our items into sets. We need to use frozenset for this, since normal sets are mutable and therefore unhashable and hence cannot be set items.output
Another rather simple possibility: Generate all the combinations, but only keep those where some random variable is < 0.1 to get (roughly) 10% of the resulting combinations.Compared with using random.sample, this has the advantage that it does not need to keep all the combinations in memory, although it will still generate all the combinations, but discard 90% of them immediately. Also, the result will be only roughly 10% of the combinations, but not exactly. For large numbers, that should not be too much of a problem, though.
If you don't want to calculate all combinations in advance before picking a small subset of them, you have two options:Ugly, but does the jobShuffle the elements of your list. Add the result to a setContinue until the set has the desired length.Beautiful but complicatedCreate a list of indices < n! (where n is the number of elements in your list)Calculate the combination for each index (similar to this question.
Option 1 (not random but generates what is needed only):Take the first 10% percent of the results returned by itertools.combinations().Option 2 (random but generates the full list first):Take 10% percent of the results returned by itertools.combinations() randomly. Requires Python 3.6 because of random.choices()original can also be a list.
Ä± solve my problem like this


Answer URL
https://docs.python.org/3/library/random.html#random.choices
