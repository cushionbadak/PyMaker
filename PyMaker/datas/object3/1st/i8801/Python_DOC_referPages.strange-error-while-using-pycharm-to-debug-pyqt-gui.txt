Natural Text
I've been using PyCharm to debug my gui in PyQt. This has been really successful thus far, until I've run into a strange error in trying to debug my gui just now. I've set a breakpoint at the beginning of the script as well as at various points but the program does not have a chance to get to this point. I've also tried removing all the breakpoints and running the debug but get the same result. The full traceback is:Does anyone know what is causing this error and how it can be resolved? When I run the code normally (without debugging) I do not run into any of these errors.
I ran into the same issue, and it took me a while but I found a solution that works for me.  I believe what happens, is that the debugger is looking for the module _pydevd_bundle.pydevd_cython in a directory code.  However, because you are running the script out of your own code directory, the debugger checks your folder, sees their is no module, and throws the error.  That would explain why deleting the __init__.py works, because the debugger won't confuse the two directories anymore.So, renaming your code directory to something else, should fix the issue and let you keep the init file.
You seem to be running Python 3 that does not recognize legacy Python 2 syntax.Make sure you selected the right interpreter for your project.I wonder why IronPython-oriented classes are even imported when you run Anaconda which is CPython.
I've recently hit this issue (while working on [SO]: zipfile.BadZipFile: Bad CRC-32 when extracting a password protected .zip & .zip goes corrupt on extract (@CristiFati's answer)). As a note, I name my code snippets code.py, unless otherwise constrained.PythonAccording to [Python 3]: The Module Search Path (emphasis is mine):When a module named spam is imported, the interpreter first searches for a built-in module with that name. If not found, it then searches for a file named spam.py in a list of directories given by the variable sys.path. sys.path is initialized from these locations:The directory containing the input script (or the current directory when no file is specified).PYTHONPATH (a list of directory names, with the same syntax as the shell variable PATH).The installation-dependent default.Little demo:As seen (under normal circumstances), if the module code (applies to packages as well) is found in cwd, it's loaded from there. The code module (code.py) is not randomly chosen (read the next section). Check [Python 3]: code - Interpreter base classes for details about one part of the standard Python library.PyCharmWhen running a PyCharm configuration, PyCharm (simplified) launches project interpreter on the configured script. This works. In my case it's:However when debugging the same configuration, things are a bit more complicated. The simplified version:A server is created (by pydevd) that executes the target scriptPyCharm IDE connects to that server in order to get outputAgain, in my case it's:The key point is somewhere at the beginning of pydevconsole.py (which is mentioned in the exception traceback):So, it tries to load the InteractiveConsole, which (obviously) fails. Apparently, the code module is specific to CPython


Answer URL
https://docs.python.org/3/tutorial/modules.html#the-module-search-path
https://docs.python.org/3/library/sys.html#sys.path
https://docs.python.org/3/library/sys.html#sys.path
https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH
https://docs.python.org/3/library/code.html
