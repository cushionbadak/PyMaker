Natural Text
Suppose I have a package containing two submodules and also a substantial amount of code in __init__.py itself:and, to make planned future refactorings easier, I want components of the package to exclusively use relative imports to refer to each other.  In particular, import pkg should never appear.From foo.py I can doto get access to the bar.py module, and vice versa.The question is, what do I write to import __init__.py in this manner?  I want exactly the same effect as import pkg as local_name, only without having to specify the absolute name pkg.UPDATE: Inspired by maxymoo's answer, I triedThis does not set local_name to the the module defined by __init__.py; it instead gets what appears to be a bound method wrapper for the __init__ method of that module.  I suppose I could doto get the thing I want, but (a) yuck, and (b) this makes me worry that the module hasn't been fully initialized.Answers need to work on both Python 2.7 and Python 3.4+.Yes, it would probably be better to hollow out __init__.py and just have it reexport stuff from the submodules, but that can't happen just yet.
python2 and python3 (uses the discouraged __import__):from 1st level module (pkg.foo, pgk.bar, ...):from module in subpackage (pkg.subpkg.foo, ...):python3 only*:From pkg.foo or pkg.bar:From pkg.subpkg.baz:*import_module on python2 tries load pkg. in this case, unfortunately.
There's nothing special about the dunders (they're just discouraged when writing your own module/function names); you should just be able to do


Answer URL
https://docs.python.org/3/library/functions.html#__import__
