Natural Text
Consider this scenario:I know that this example is kinda redundant, but you should consider that we need to use the same walk data more than once. I've a benchmark scenario and the use of same walk data is mandatory to get helpful results.I've tried walk2 = walk to clone and use in the second iteration, but it didn't worked. The question is... How I can copy it? Is it ever possible?Thank you in advance.
You can use itertools.tee():Note that this might "need significant extra storage", as the documentation points out.
If you know you are going to iterate through the whole generator for every usage, you will probably get the best performance by unrolling the generator to a list and using the list multiple times.walk = list(os.walk('/home'))
Define a functionOr even thisBoth are used like this:
This is a good usecase for functools.partial()to make a quick generator-factory:  What functools.partial() does is hard to describe with human-words, but this^ is what it's for. It partially fills out function-params without executing that function. Consequently it acts as a function/generator factory.
This answer aims to extend/elaborate on what the other answers have expressed. The solution will necessarily vary depending on what exactly you aim to achieve.If you want to iterate over the exact same result of os.walk multiple times, you will need to initialize a list from the os.walk iterable's items (i.e. walk = list(os.walk(path))).If you must guarantee the data remains the same, that is probably your only option. However, there are several scenarios in which this is not possible or desirable.It will not be possible to list() an iterable if the output is of sufficient size (i.e. attempting to list() an entire filesystem may freeze your computer).It is not desirable to list() an iterable if you wish to acquire "fresh" data prior to each use.In the event that list() is not suitable, you will need to run your generator on demand. Note that generators are extinguised after each use, so this poses a slight problem. In order to "rerun" your generator multiple times, you can use the following pattern:The aforementioned design pattern will allow you to keep your code DRY.


Answer URL
https://docs.python.org/3/library/functools.html#functools.partial
