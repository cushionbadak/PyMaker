Natural Text
i have the following example. i would like to obtain a new list that looks like this:that is, i want to distribute and concatenate each element of the first list with each item in each tuple in the second list. the second list can have more than 2 tuples, but each tuple will always have exactly 3 items. any way to do this without having to write nested for loops?
Use a nested list comprehension:You can unwrap the comprehension into a for loop to understand better how it all works:
Can't see any way of getting four separate tupels without nesting (explicit or otherwise).itertools.product will combine the lists.This looks interesting:Then map a function to the product of prefix and suffix.OrOr without map
Using Numpy Broadcasting:Here's a fully vectorized implementation that does not use any loops. This function works for any size of a prefix/suffix input.for the given inputs, this returns: Up to this point no loops were used. Since you asked the final output to be a list of tuples, map can be used to convert the above array to a list of tuples which runs a loop under the hood.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
