Natural Text
I have a stream of strings where I need to analyze each one and check whether it is a valid JSON.The pythonic way (EAFP) dictates something like this:The problem is that a significant number of strings are not JSONs, and the many exceptions raised by this code slow the process quite a bit.I am looking for some way to try and parse the text as JSON, returning some kind of pre-defined value (e.g. an empty tuple()) indicating the string is not JSON compatible.I don't mind hacking around the standard json package (overriding a function or two..) if this is the easiest solution.Any suggestions?Update:As I'm only interested in 'complex' JSONs (arrays and objects), I've eventually decided to go with a simple if to check the first and last characters of the string:ujson is a much more efficient implementation than Python's standard json. Additionally, skipping all strings which are not wrapped with [] or {} reduces the amount of exceptions by a large factor. It turns out that mixing LBYL and EAFP was what I needed.
for speed issue you can use multiprocessing to speed up the parsing , for example by utilizing 5 workers in multiprocessing you parse 5 string at a time instead of oneif i understand second part of question , for custom exception do something like this to get custom error for different error that return by json:or if you don't want to get any exception on error raising do this , just give it a pass to do nothing , not showing up anything:
If the string is JSON it should start with "{" and end with "}".I think you can firstly do a check if the string starts with "{"; if not, you know for sure it's a simple string; if it starts with "{" you can parse it and use the try/except (just to be sure it's not just a simple string starting with "{").


Answer URL
https://docs.python.org/3/glossary.html#term-eafp
https://docs.python.org/3/glossary.html#term-lbyl
