Natural Text
I am trying to export a Dataframe to an Oracle table and keep running into the errorTypeError: expecting string or bytes object.I would like to be able to ignore or bypass this error in order to export what I have. Is that possible? Here is a link to where I go into detail explaining the entirety of my problem: Python - TypeError: expecting string or bytes object. My data honestly appears perfect, it is all consistently the correct number of columns and rows, they're all the same data type, I've used this exact method to export hundreds of other Dataframes before, and I would like to go around the error message in order to export what I have so far.Also, because it fails on the cursor.executemany( line I decided to research that command. Here is the documentation for cx_Oracle: http://cx-oracle.readthedocs.io/en/latest/cursor.html. It states that:When true, the batcherrors parameter enables batch error support within Oracle and ensures that the call succeeds even if an exception takes place in one or more of the sequence of parameters.So I set it to true as cursor.executemany(sql_query, exported_data, batcherrors=True) and it changed nothing. Here is my relevant code:And here is a printout of exported_data:[('DATE', 'TRADE ID', 'AVAILABLE STOCK', 'AMOUNT', 'BUY PRICE', '2013', '4', '16'), ('04/02/13', 130014, 'WINTER SNE', 12000, 'TRADE IN RETURN FOR', '2013', '4', '16'), (0, 0, 0, 0, 'HADDOCK GOM,', '2013', '4', '16'), (0, 0, 0, 0, 'YELLOWTAIL GOM, OR', '2013', '4', '16'), (0, 0, 0, 0, 'WITCH - OFFERS', '2013', '4', '16'), ('FY13 QUOTA â€“ TO BUY', 0, 0, 0, 0, '2013', '4', '16'), ('DATE', 'TRADE ID', 'DESIRED STOCK', 'AMOUNT', 'BUY PRICE', '2013', '4', '16'), ('3/26/13', 130006, 'COD GBE', 'ANY', 'OFFERS', '2013', '4', '16'), ('4/9/13', 130012, 'COD GBW', 'UP TO 100,000', 0.3, '2013', '4', '16'), ('3/26/13', 130007, 'COD GBW', 'ANY', 'OFFERS', '2013', '4', '16'), ('3/26/13', 130001, 'COD GOM', 'INQUIRE', 1.5, '2013', '4', '16'), ('3/26/13', 130009, 'WINTER GB', 'ANY', 'OFFERS', '2013', '4', '16'), ('4/9/13', 130013, 'WINTER SNE', 'UP TO 100,000', 0.3, '2013', '4', '16'), ('3/26/13', 130010, 'WINTER SNE', 'ANY', 'OFFERS', '2013', '4', '16'), ('3/26/13', 130008, 'YELLOWTAIL GB', 'ANY', 'OFFERS', '2013', '4', '16'), ('3/26/13', 130011, 'YELLOWTAIL GOM', 'ANY', 'TRADE FOR GB STOCKS -\nOFFERS', '2013', '4', '16'), (1, 0, 0, 0, 0, '2013', '4', '16')]I would really like help solving this because I've been stuck on it for over a week now. Thanks.
Error or exception handling in Python is done by using try-except blocksWhat you want to do for error handling is up to you. The default Python behaviour is to raise the error (hence you are seeing it). When an error is encountered excecution is stopped at that point and the error handling routines you defined are executed. Ignoring the error will not make the method cursor.executemany pick up where it left off, but rather simply does not handle the error. You can call the method again in there (with the same arguments), but that obviously will not help, since it will just produce the same error again.


Answer URL
https://docs.python.org/3/tutorial/errors.html
