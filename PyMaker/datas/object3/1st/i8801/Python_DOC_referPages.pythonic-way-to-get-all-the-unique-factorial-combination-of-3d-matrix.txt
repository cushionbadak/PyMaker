Natural Text
So I have 2 lists, one looks like:the other looks like:This could be easily represented by a table like:So I want to calculate all the VALID combinations, meaning that I can leave a drive outside the schedule but I cannot put a driver on 2 cities at the same, and I cannot leave a city without a driver. Any ideas? 
If you can make the assumption that all cities in cities are unique, you can simply generate all itertools.permutations of length len(cities), and (optionally) zip them with the cities like:Or if you want to zip them with the cities:For the last one we generate:So in the first case 'bob' drives to 'Austin', 'Lenny' to 'San Antonio' and 'frank' to 'Houston'; in the second case 'bob' drives to 'Austin', 'Lenny' to 'San Antonio' and 'sunny' to 'Houston'; and so on. The total number of valid configurations is here 2×3×4=24 which is also the number of elements that are yielded.Nevertheless if you want to find the optimal combinations - something that is not clear from your question - you can use a variant of the Hungarian algorithm to solve this in O(n3).
A way for a hierarchical presentation, using Pandas Dataframe:with df :We can do :For : 


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.permutations
