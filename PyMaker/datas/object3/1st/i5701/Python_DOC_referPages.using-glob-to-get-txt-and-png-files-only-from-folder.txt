Natural Text
Is there a better way to use glob.glob in python to get a list of multiple file types such as .txt, .mdown, and .markdown?  Right now I have something like this:
Maybe there is a better way, but how about:Perhaps there is another way, so wait in case someone else comes up with a better answer.
If you need to specify a path, loop over match patterns and keep the join inside the loop for simplicity:
Chain the results:Then:
glob returns a list: why not just run it multiple times and concatenate the results?
with glob it is not possible. you can use only:* matches everything? matches any single character[seq] matches any character in seq[!seq] matches any character not in seq  use os.listdir and a regexp to check patterns:
For example, for *.mp3 and *.flac on multiple folders, you can do:The idea can be extended to more file extensions, but you have to check that the combinations won't match any other unwanted file extension you may have on those folders. So, be careful with this.
After coming here for help, I made my own solution and wanted to share it. It's based on user2363986's answer, but I think this is more scalable. Meaning, that if you have 1000 extensions, the code will still look somewhat elegant.
A one-liner, Just for the hell of it..output:
This is a Python 3.4+ pathlib solution:Also it ignores all file names starting with ~.
Here is one-line list-comprehension variant of Pat's answer (which also includes that you wanted to glob in a specific project directory):You loop over the extensions (for ext in exts), and then for each extension you take each file matching the glob pattern (for f in glob.glob(os.path.join(project_dir, ext)).This solution is short, and without any unnecessary for-loops, nested list-comprehensions, or functions to clutter the code. Just pure, expressive, pythonic Zen. This solution allows you to have a custom list of exts that can be changed without having to update your code. (This is always a good practice!)The list-comprehension is the same used in Laurent's solution (which I've voted for). But I would argue that it is usually unnecessary to factor out a single line to a separate function, which is why I'm providing this as an alternative solution.Bonus: If you need to search not just a single directory, but also all sub-directories, you can pass recursive=True and use the multi-directory glob symbol ** 1:This will invoke glob.glob('<project_dir>/**/*.txt', recursive=True) and so on for each extension.1 Technically, the ** glob symbol simply matches one or more characters including forward-slash / (unlike the singular * glob symbol). In practice, you just need to remember that as long as you surround ** with forward slashes (path separators), it matches zero or more directories.
I have released Formic which implements multiple includes in a similar way to Apache Ant's FileSet and Globs.The search can be implemented:Because the full Ant glob is implemented, you can include different directories with each pattern, so you could choose only those .txt files in one subdirectory, and the .markdown in another, for example:I hope this helps.
Not glob, but here's another way using a list comprehension:
The following function _glob globs for multiple file extensions.

To glob multiple file types, you need to call glob() function several times in a loop. Since this function returns a list, you need to concatenate the lists.For instance, this function do the job:Simple usage:You can also use glob.iglob() to have an iterator:Return an iterator which yields the same values as glob() without actually storing them all simultaneously.
You can try to make a manual list comparing the extension of existing with those you require.
You could use filter:
You could also use reduce() like so:this creates a list from glob.glob() for each pattern and reduces them to a single list.
https://docs.python.org/3.5/library/functools.html#functools.reducehttps://docs.python.org/3.5/library/operator.html#operator.add
One glob, many extensions... but imperfect solution (might match other files).
I had the same issue and this is what I came up with 
For example:A function:
Use a list of extension and iterate through
Yet another solution (use glob to get paths using multiple match patterns and combine all paths into a single list using reduce and add):
This Should Work:
this worked for me:


Answer URL
https://docs.python.org/3/library/glob.html#glob.glob
https://docs.python.org/3/library/glob.html#glob.iglob
