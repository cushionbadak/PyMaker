Natural Text
I would like to avoid redundancy into all possible combinations in a list of string (for example 1122 is the same thing as 2211 in my context therefore only one or the other should be in the resulted list). I would also like to apply a filter during the combination. For example, I don't want to have any string in the result that contains 3.  How should I handle this logic?This code is doing the combination
Depending on your actual data there may be a more efficient way to do this, but the algorithm below will work. We eliminate the duplicates by a simple comparison. I've put the check for '3's into a function. That's slightly slower than doing it directly in the list comprehension, but it makes the code more general.output
The same is possible by filtering itertools.combinations_with_replacement:CodeThis version is more general and does not rely on comparing numeric strings.DetailsFrom the docs we can understand why this works:The code for combinations_with_replacement() can be also expressed as a subsequence of product() after filtering entries where the elements are not in sorted order (according to their position in the input pool)In this manner, each item is associated with a unique index.  When the indices of two items are compared, only sorted combinations are used to yield an item.  The remaining indices are discarded as already seen.See the docs for more details on the similarity between this tool and itertools.product.
This should do what you want:results:It makes a new list, and if that sorted item (which makes 1122 the same as 2211) exists or the number "3" exists, don't add it to the new list.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement
https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement
