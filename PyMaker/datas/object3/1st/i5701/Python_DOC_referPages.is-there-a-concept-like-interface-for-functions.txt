Natural Text
I have various functions accepting the same arguments and returning the same type. They do similar things (eg. performing integration with different approximate methods) and differ only in name. I want to force all variations to have the same signature.It could be done by wrapping them into classes, but there's no conceptual reason to. So, is there a concept similar to interface for functions? That is, is there any way to do something like Obviously, the question makes sense only for languages in which functions are first class objects (i'm mostly interested in python/javascript). 
The concept you're looking for is the type of the function. Specifically, this is a "higher-kinded" type because it is a type of types rather than a type of values.In a language like Haskell, you must pass arguments that are functions like this. If you don't name the type explicitly the compiler will infer it for you. But if you try to pass a different function that accepts different types then you'll get a compilation error. C# has a special syntax for declaring a type of a function, called a delegate type. Java 8+ has a concept of a functional interface, or an interface with only one method, and has some language features to make it easier to pass around an object that represents a function of a given type.In JavaScript and Python, objects don't really have interfaces, at least not explicitly. But what you can implement are protocols where you require that an argument be a function that accepts certain arguments and behaves a certain way. A good example of this in the Python standard library is the key argument to the sorted() function: it's required to be a function that accepts one item of the iterable to be sorted and returns a comparable object to use as the sort key.
In python, it is possible to enforce type checkingWith this decorator you may haveTo use this decorator, put the types you want for the arguments in args_types as an array, and apply the resulting interface on the function you define. You will probably still have to use typing library for effects such as 'None-able' arguments, or implement your own by modify this code. In fact, the merit of this decorator is enabling you to define an arbitrary type-checking routine (otherwise typing could be better).If your typing requirement is exactly the same for all functions, you may drop the outermost decorator and use a hard-coded arg_types.


Answer URL
https://docs.python.org/3/library/typing.html#callable
