Natural Text
I am trying to use a multiprocessing Pool without a return value for parallel calculation. It could be faster if there's no need to return and retrieve values from the subprocess. Is there a way to do that?Here is a simple example:Does anybody know why? And is there a solution for that?
Your function funchanges a mutable argument a. However when you call this using p.map(fun, multi) each item in the multi list is pickled, sent to a worker process and mutated there. This can't have any effect on the original items in the list in the calling process.You can create data structures that can be shared between processes, so called proxy objects, using managers. You'd have to create 10 shared dictionaries. In your example you only have one dictionary, the list contains 10 references to it, data = [a["1"] for a in multi] will always only contain the same value because a is always the same object.So this should work:Note that multi = m.list([a] * 10) or similar would not work, because only list access is synchronized, not updates of the contained elements. But all of this creates additional IPC overhead and probably will be worse then just using the return value of the function if you can.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#proxy-objects
https://docs.python.org/3/library/multiprocessing.html#managers
https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes
