Natural Text
I discovered a strange error when using concurrent.futures to read from multiple text files.Here is a small reproducible example:file1 and file2 are arbitrary text files in the data directory.I am getting the following error (basically a process tries to read data_dir variable before it is assigned):If I place data_dir assignment before if __name__ == '__main__': block, I don't get this error and the code executes as expected.What is causing this error? Clearly, data_dir is assigned before any asynchronous calls should be made in both cases.
fork() not available on windows, so python use spawn to start new process, which will start a fresh python interpreter process, no memory will be shared, but python will try to recreate worker function environment in the new process, that's why module level variable works. See doc for more detail.
ProcessPoolExecutor spaws a new Python process, imports the right module and calls the function you provide.As data_dir will only be defined when you run the module, not when you import it, the error is to be expected.Providing the data_dir file descriptor as an argument to read_file might work, as I believe that processes inherit the file descriptors of their parents. You'd need to check, though.If were to use a ThreadPoolExecutor however, your example should work, as the spawned threads share memory.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods
