Natural Text
I have a function and a dictionary containing a reference to that function.If I paste these into the python interpreter in the order given, all works well.But if I import dict1 from a file, the interpreter says func1 is not defined, even though it is defined.So, with file 'dictfile.py' containing a single line of text:Then this into the interpreter:What's going on here?
func1 is not defined in the scope of your dictfile.py context.The global scope of 'func1' is limited to that it defines itself. This is so it can operate as a self-contained module. That is, so it can operate as a module is supposed to operate: so it can be imported and run by any other module. This is done to avoid clashes when different modules use identical names for different things in their global definitions.From the python docs:Thus, the author of a module can use global variables in the module  without worrying about accidental clashes with a user’s global  variables.By loading the file with an import statement you make it a module. You cannot then expect that module to acquire the scope from which you import it. It's own scope remains distinct. Its integrity is protected. It must itself import any definitions it uses if it does not define them itself.For you to be able to load the dictionary which references the function, the function has to be defined in the scope (the file) in which it is located.Since the dictfile.py file doesn't know anything about your interpreter's current state (your state isn't imported into the file and I'm not sure if that's possible), it can't find the reference to the function.According to the Python docs,Each module has its own private symbol table, which is used as the  global symbol table by all functions defined in the module. Thus, the  author of a module can use global variables in the module without  worrying about accidental clashes with a user’s global variables. On  the other hand, if you know what you are doing you can touch a  module’s global variables with the same notation used to refer to its  functions, modname.itemname.For your function to be accessible in your module's (file's) scope, you'd need to import your interactive interpreter's "module", which I don't think is possible.
Each module defines a namespace, so "global" variables in a module are actually scoped to that module; another module can access them, but it needs to do so through the module that defined the name.When running in an interactive session, objects you create are added to a special module called __main__. Another module could import things from this if it wanted, but I don't recommend it.As an example for learning purposes only:In a real-world program, you should avoid circular dependencies like this. But it still can be useful to import functions from one module, assemble them into a data structure in another module, and then use the data structure from a third module.A good rule of thumb about dependencies between parts of your program: implementations should only depend on abstractions, and abstractions should only depend on other abstractions.


Answer URL
https://docs.python.org/3/tutorial/modules.html#more-on-modules
https://docs.python.org/3/tutorial/modules.html#more-on-modules
