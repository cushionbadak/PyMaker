Natural Text
Is there a reason why looping through an implicit tuple in a for loop is okay, but when you do it in a comprehension you get a syntax error? For example:But in a comprehension: Is there a reason for this? I wasn't sure about the correct terminology, so my searches yielded nothing useful. Update:Per the comments, this syntax is valid for Python 2.x, but not for Python 3.x. 
This changed in Python3, mainly in order to make list comprehensions more consistent with generator expressions.With for-loops and list comprehensions, there is no ambiguity when using a tuple with no parentheses, because the former is always terminated by a colon, and the latter by either a closing bracket or a for/if keyword.However, part of the design of generator expressions requires that they can be used "bare" as function arguments:which creates some ambiguity for unparenthesized tuples, because any commas may introduce a new argument:So tuples must always be parenthesized in generator expressions, and the same restriction now also applies to list comprehensions in order to preserve consistency.PS:Guido van Rossum wrote a article that spells out all the details on this subject in his History of Python blog:From List Comprehensions to Generator Expressions
Because the for i in in the first code is a different syntactical construction than the for i in in the second code.The first case is a for statement, which has the grammar:'a', 'b', 'c' is most definitely an expression_list, so that works out.In the second case, however, the inline for inside square brackets forces the code to be interpreted as a list comprehension, and in Python 3, list comprehensions must have the syntax:Note that the part after the in must be an or_test, yet comma-delimited expressions create expression lists, and an expression list cannot be an or_test --- or, put another way, or has higher precedence than comma.  Python thus thinks the comprehension ends at the comma, so that the three elements of the list are:which (unless you put the i for i in 'a' in parentheses) is obviously invalid.As to why this works in Python 2 ... I'm still looking.
I think the problem is here: in the latter case it is not so obvious which objects are you iterating:Where's a border between elements? Is it an array of 3 elements: generator and 2 integers?  Like this:for doesn't have such ambiguity - so it doesn't need parenthesis. 


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#the-for-statement
https://docs.python.org/3/reference/expressions.html#grammar-token-expression_list
https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries
https://docs.python.org/3/reference/expressions.html#expression-lists
