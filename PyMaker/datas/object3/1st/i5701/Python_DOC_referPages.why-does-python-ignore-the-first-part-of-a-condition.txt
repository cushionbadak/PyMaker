Natural Text
Suppose I have the following code:Why is if ('x' and 'y') in target true?Why doesn't this code produce error?Why do braces have no effect?This does not seem logical, since if ('x' and 'y') = true then ('y' and 'x') should also be true, however, this is no the case.At the same time expression if ('y' and 'x') in target is false
There are two things to consider here:How and works with strings'x' and 'y' is not True.'x' and 'y' is 'y', which might seem confusing but it makes sense when looking at how and and or work in general:a and b returns b if a is True, else returns a.a or b returns a if a is True, else returns b.Thus:'x' and 'y' is 'y''x' or 'y' is 'x'What the parentheses doThe brackets do have an effect in your if statement. in has a higher precedence than and meaning that if you writeit implicitly means the same aswhich will only check if y is in the target string. So, usingwill have an effect. You can see the whole table of operator precedences in the Python docs about Expressions.SolutionTo achieve what you are wanting to do, @Prem and @Olga have already given two good solutions:or 
You seem to be confusing how AND operator works.andSo in your first case, you do check if y is present. In reverse, you check if x is present in string.
Because it is checking for just 'y' in target.You need something like this:
You may want to use all instead if all(c in target for c in ['x','y']):...


Answer URL
https://docs.python.org/3/reference/expressions.html#operator-precedence
