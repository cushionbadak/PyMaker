Natural Text
How is it possible that a core module is importing a non-existent name from another core module?Specifically, the re module importing enum.IntFlagWays to ReproduceIt can be reproduced by launching an interpreter and attempting the import, running a program that depends on enum.IntFlag such as pip, viewing the interpreter settings page in Eclipse, using the text editor, running the interactive console in PyDev, ...Directly importingRun a dependant program (pip)Viewing the Python Interpreter settings in Eclipse also produces the above traceback (in the window the interpreter settings would be in).Preferences =:> PyDev =:> Interpreters =:> Python InterpreterAlso the text editor doesn't recognise a print statement.Also, when I run the console interpreter (eg: Ctrl+Alt+Enter, eclipse fails with a popup showing this:'Create Interactive Console' has encountered a problem.Error initializing console.Error DetailsClick the Error Details button:Progressin the standard library version /usr/lib/python3.6/enum.py,the name enum.IntFlag exists in enum.__all__Is enum being imported from the standard library version? It is importing from /usr/lib/python3.6/site-packages/enum/__init__.py I checked that file and there is no IntFlag. Also, it's a package init rather than a single file. There is no /usr/lib/python3.6/site-packages/enum/enum.py. There is a README file that says that this is ver 3.4.I could replace the contents of __init__.py with enum.pyI could delete the site-packages/enum directorySolutionThere is another enum module, a python3.4 compatibility package, that was masking the module version in the standard library.python34 compatibility package: /usr/lib/python3.6/enum/__init__.py the standard library module: /usr/lib/python3.6/enum.py.I deleted the directories:Now, enum.__file__ shows /usr/lib/python3.6/enum.py as it should and everything works. Thanks for the help! :)
You should check to see if there's another module named enum on your python path that is shadowing the stdlib enum module. To do that, you can do:If that doesn't match the python3 stdlib module path, you try should try to remove it. Ideally, you should use whatever package manager your system uses to uninstall it, as it it might be a dependency of some other package. But if that isn't possible, you can just try removing it manually.


Answer URL
https://docs.python.org/3/library/re.html#module-contents
