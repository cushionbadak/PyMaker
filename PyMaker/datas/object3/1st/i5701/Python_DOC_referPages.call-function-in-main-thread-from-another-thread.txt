Natural Text
I have 3 threads. Each thread stores a val. And each thread receives messages from a websocket. When on_message() is called in each thread, val is updated and I want to call a function in my main thread to sum the vals of all 3 threads.My current solution isThe problem is that this code is using 100% CPU and repeatedly calculating the sum even if no val is updated. But I don't want to use sleep() because as soon as val in any thread is updated I need the sum to be calculated ASAP. I have read about using a queue but I don't want to use a Queue because I don't need them all executed, only the most recent.So is there a way to call a function in the main thread when on_message() is called in thread 1, 2, or 3?
A Queue would actually be the appropriate method for going about this. You have each updated value added the the queue and the main thread will wait for an item to be added each time. You could format it as some kind of "Event Stream" so you know where it comes from. Each value in the queue might look something like:I'm assuming in each thread you have some kind of produce() function. It might look something like this:And then in your main thread:The get() function causes the main thread to wait until the next event comes in, then it continues and processes that value. As such, it'll recalculate exactly once for each new message that arrives.To keep with your on_message() metaphor, you can just think of last_event as the value you call on_message() with, and everything that happens immediately after it as the interior of that method. I mean, you could write it as it's own method if you wanted.Hope this gives you a bit of an idea.


Answer URL
https://docs.python.org/3/library/queue.html#module-queue
