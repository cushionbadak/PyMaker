Natural Text
By iterating over a python list, I would like to create a list dictionaries, whereby the value of each dictionary is also a list.The structure would be:I begin with a list of integers:For each element in the list, this should become a dictionary key. I then append two items to the value of the dictionary (which is a list). (Let's say the two items are always "dog" and "cat")Here is what the final result should look like:My attempt to do this has many problems:I don't like that I have to name an empty dictionary, and have them each named the same thing (here, d). Later, I would like to access each of these dictionaries by the keys---I don't care about their names.I don't know how to sensibly append multiple items to the dictionary value when it's actually supposed to be a list. What if I wanted to add several items?The bug is appending the dictionary to the original list and then deleting the item. Naturally, this can be solved with a new list:but this feels very clumsy.
If you want something really simple, you can use a list comprehension:Additionally, here is an example of adding/removing values with the very convienient defaultdict:Which outputs:Using a defaultdict here is helpful, as it initializes each entry in the dictionary with an empty list. If you don't want to do this, you could achieve this with a normal dictionary, as shown in your question, but this requires you to initialize the empty lists yourself. 
If you want to use list comprehension with different values for each keys.Output:
You don't need to remove , Without importing any external module or without making it too complex You can simply  follow this pattern in pure python:output:
You could use a collections.defaultdict dictionary subclass to make the processing very simple:Output:Of course, if all you going to do is append those two items to each entry, it would be slightly more efficient to do both in a single operation like the following:


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
