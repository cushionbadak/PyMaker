Natural Text
Here are two strings:Apparently, there are three elements contained in d, which are '1', '2', '3'.Now, try to replace these three elements by using the elements in list1. And print every possible combination down.So, we could replace '1' by '1', '2', '3', '4', '5', alternatively, but don't forget we need to do the same thing for '2' and '3' in d.Then the result would look like:Many thanks for @tobais_k reminding, this question could be described as 'equal characters in the input to be mapped to equal characters in the output'. Thus if we have d1 = '111222333' the output would be If d2 = '123123123', the situation will be very different with d1, because we can't get '111111222' from d2. The result would be:And here's my code to give the result above:You may wish to try d = '123123123' or d = '111222333' whatever, to check the result,  but notice that they are several embedded "for" in the code and make this code not so Pythonic. Is there any more elegant way to give the same result?My code seems a little awkward and no doubt I can learn more from you; then, this skill would help under other situation, e.g. we have a complicate encryptedD ='bccle', key = 'ap'; after passing through this simple programme, we may find out the D actually means 'apple'.
You can use itertools.product to get all the combinations, and combine those with str.maketrans and str.translate to map the original characters to their replacements.Lets's also have a look at the intermediate results to better understand what's happening:Or as a generator function (based on first version by @AntonvBR)
Try product:And if you want to use d = '123' you can change repeat param to len(d).Question got updated and an alternative solution would be:However.. I ran some small timings and the accepted answer is faster. So I'd stick to that.
we have a complicate encryptedD ='bccle', key = 'ap'; after passing through this simple programme, we may find out the D actually means 'apple'.Step: 1 - Create a list of lists: [[b],[c],[c],[l],[e]]Step: 2 - Append the key letters to the list: [[b,a,p],[c,a,p],[c,a,p],[l,a,p][e,a,p]]Step: 3 - Use itertools.product() to create the combinatoric list of words.'apple' is one of the results.
Everyone is going to give you loop solution, If you want to try little different approach not that same old loop approach then you can try this :Without loop in one line :output:


Answer URL
https://docs.python.org/3/library/itertools.html#product
https://docs.python.org/3/library/stdtypes.html#str.maketrans
https://docs.python.org/3/library/stdtypes.html#str.translate
