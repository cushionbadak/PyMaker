Natural Text
This question already has an answer here:Python Assignment Operator Precedence - (a, b) = a[b] = {}, 5                    1 answer                I am using Jupyter Notebook for Python and also using Numpy Lib.Here is what i have tried Output is :But I thought slice_arr would be [ 6  6  6  6  6] as i am getting first 5 element from arr and assigning 6 to all 5 elements and then assigning to slice_arrHow this statements would executed and How slice_arr value is 6?Does 6 is assigned separately to arr[:5] and slice_arr?  If the assignment if from right to left then slice_arr should be [ 6  6  6  6  6]Thanks in advance
Multiple assignments like this are not common, and not encouraged (without good reason):Assigning an immutable object like a number to several variables is fine:Assigning a mutable object like an array or list should be done with caution:The simple interpretation of [216] is that the same list is assigned to both variables.  While I haven't seen your expression before, it makes sense to me that slice_arr would be 6, the value on the RHS.The arr[:5] = 6 is executed as arr.__setitem(slice(None,5), 6), that is, a method call on arr.  Conceivably the interpreter could also execute  slice_arr = arr.__getitem__(slice(None,5)), but it would be simpler (and less ambiguous) if it is executed slice_arr = 6.  That is, assign the same thing to both objects, rather than chain the action.Another way to look at this, is that the replication of 6 is done within arr, or as part of the process of mutating arr.  It isn't replicated before the assignment.  numpy operates within Python.  The Python interpreter parses the code, translating it into function and method calls.  Here's a list exampleThe documentation says the target assignments are done left to right.  I think this illustrates that:alist first gets the value [1,2,3], and then a slice (the last element) is replaced by the same list.A somewhat artificial array example of the left to right assignment:idx is assigned the value before being used in the arr[:idx] expression.  This only works because the assignments are executed left to right (after the RHS has been evaluated).From the assignment docs, the formal language expression is:https://docs.python.org/3/reference/simple_stmts.html#assignment-statementsassignment_stmt ::=  (target_list "=")+ (starred_expression | yield_expression)
https://docs.python.org/3/reference/simple_stmts.html#assignment-statementsAn assignment statement evaluates the expression list (remember that this can be a single expression or a comma-separated list, the latter yielding a tuple) and assigns the single resulting object to each of the target lists, from left to right.To get what you want, maybe do this:slice_arr = arr[:5] = np.zeros([5])+6


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#assignment-statements
https://docs.python.org/3/reference/simple_stmts.html#assignment-statements
