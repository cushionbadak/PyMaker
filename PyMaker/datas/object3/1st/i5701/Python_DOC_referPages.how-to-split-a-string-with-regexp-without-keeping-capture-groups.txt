Natural Text
I want to split text with a regular expression with backreference in Python.I got ['blahblah', '``', 'blahblah'] but expected ['blahblah', 'blahblah'].How can I split string without keeping capture groups?
From the re.split() documentation: If capturing parentheses are used in pattern, then the text of all groups in the pattern are also returned as part of the resulting list.Since you want to use a backreference you can't avoid the first capturing group, but you can make the rest of them non-capturing and post-process your split to get what you want, e.g.:UPDATE: I just noticed that you changed your pattern in the meantime, but the principle is just the same:
You could first replace the split pattern with a unique delimiter then split on that:The advantage to this approach is you do not need to make an assumption on where the split pattern is in your string. You can also then use the speedier Python split since you have converted a regex target to fixed strings:UpdateTiming showing this is just as fast as the accepted answer:On my older iMac, Python 3.6, prints:With PyPy, it is faster to do it the way I am suggesting:So not sure what you mean by for very large input string, it's a terrible cost... -- the timing show it is either the same or faster even with huge input strings.


Answer URL
https://docs.python.org/3/library/re.html#re.split
