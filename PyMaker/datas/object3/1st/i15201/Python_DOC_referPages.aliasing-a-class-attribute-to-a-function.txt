Natural Text
Is it possible to do something like the following:I hope the example is clear since I'm not super clear on what the terminology is for what I want to do. My basic goal is to remove a bunch of parentheses for methods that don't have arguments to make the code cleaner to read. The function is slow and rarely used so it would be easiest to calculate it real time rather than calculate it once ahead of time and store the variable.Is this possible? Is it good practice? Is there a better way?
The standard way to achieve this is to use property, which is a decorator:A couple of things to notice:You still need self in the method signature as usual, because sometimes you're going to need to refer to e.g. self.some_attribute inside the method. As you can see, that doesn't affect the use of the property at all.There's no need to clutter your API with both a f.bar() method and a f.b property - it's better to decide what makes most sense for your class than offer a heap of different ways to do the same thing.
b = bar obviously wouldn't work.  However a property would for the simplest "doesn't require the empty parentheses" ask of yours:Now every access to f.b will call f.bar() "behind the curtains".However this means that if you access f.b twice, f.bar() gets called twice, repeating the computation.  If the repetition is irrelevant (i.e if the result doesn't change for repeated computations on the same object) you can do better ("caching" the result in f.b forever once it's first been computed) -- something like:
By static method, but need to call by parentheses. output:


Answer URL
https://docs.python.org/3/library/functions.html#property
https://docs.python.org/3/glossary.html#term-decorator
