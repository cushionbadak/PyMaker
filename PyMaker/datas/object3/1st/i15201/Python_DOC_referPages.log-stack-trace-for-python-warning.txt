Natural Text
A package that I'm using in my python program is throwing a warning that I'd like to understand the exact cause of.  I've set logging.captureWarning(True) and am capturing the warning in my logging, but still have no idea where it is coming from.  How do I also log the stack trace so I can see where in my code the warning is coming from?  Do I use traceback?
It's a little hackish, but you can monkeypatch the warnings.warn method to this:This is the output:See that calling the original warnings.warn function does not report the line you'd want, bu the stack trace is indeed correct (you could print the warning message yourself).
I've ended up going with the below:
If you do not know what data/instruction is causing the warning throw, you can use tools like the standard Python Debugger.The documentation is really good and detailed, but some quickly examples that may help should be:Without modifying source code: invoking the debbugger as script:$ python -m pdb myscript.pyModifying source code: you can make use of calls to pdb.set_trace(), that work like breakpoints; For example, consider I have the following example code:And I would like to know what value does x and y have before the return, or what does the stack contains, I would add the following line between those statements:pdb.set_trace()And I will be promted to the (Pdb) prompt, that will allow you to go through the code line by line. Useful commands for the (Pdb) prompt are:n: executes the next statement.q: quits the whole program.c: quits the (Pdb) prompt and stops debugging.p varname: prints the value of varnameAs you do not provide more information, I do not know if that should be enough, but I think that at least, it may be a good start.BONUS EDITBased on this answer, I have found there is a nice and friendly GUI debugging tool, that you can simply install by:$ pip install pudbAnd run the debugger with your script with:$ python -m pudb.run myscript.pyEDIT: Adding the postmortem debuggingIf we do not even know if the code is going to crash or not, we can enter in postmortem debugging if there has been a crash. From the Pbd documentation:The typical usage to inspect a crashed program is:As postmortem looks at sys.last_traceback, to enter only if there is a traceback (and so on, a warning or crash):
You can turn warnings into exceptions, which means you will get a stack trace automatically:See https://docs.python.org/3.4/library/warnings.html#the-warnings-filter
If it was me, I'd go with @Llu√≠s Vilanova's quick & dirty hack, just to find something. But if that's not an option...If you really want a "logging" solution, you could try something like this (fully working source).Basic steps are:Create a custom logging.Formatter subclass that includes the current stack where the logging record is formattedUse that formatter on the class of the warningThe meat of the code is the custom formatter:Per the docs:
For python 3.2 and above, using the optional stack_info keyword argument is the easiest way to get stack trace info along with the log message.In the example below, "Server.py" is using "lib2.py", which is in turn using "lib.py".On enabling the stack_info argument the complete trace back is logged along with every logging.log() call. This works the same with logging.info() and other convenience methods as well.Usage :-Output :-


Answer URL
https://docs.python.org/3/library/logging.html#logging.Logger.debug
