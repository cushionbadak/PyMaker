Natural Text
I am trying to make a program where the it will ask the user's name and then a series of questions. With a point added for every time the question is correct. I am trying to make it store the score along with the user's name onto a text file so it will look like so on the text file:so let's use John as an example, if he were to score 4 points, in the text file it would write:But I want it so that if John were to take the test again instead of having John twice:I want it to read:Instead of rewriting the name and score, it would write tab and then the score onto the same line as the one with the name John in.Here is my code so far:I have no idea how to do this, I am new to python so sorry if I made any mistakes, thanks!
Well, for a start, you could store everybody's scores in a dictionary.Let's introduce a scores object:It will have the names as the keys and the scores as the values. Like that:If you introduce a new player, we'll create a new element inside the said dictionary, let's call it 'John', with a score 0:Then if the player guesses correctly, we increment the player's score:(You can use the += operator if you'd like to just add something to the object. It's a shorter way of saying scores['John'] = scores['John'] + 1.Then the magic kicks in!There's a builtin module in Python called pickle, which can store the objects (like the dictionary we've made - scores) in files and then just pop them out of files and they're being restored!There's a quick manual on how to work with pickle. In short, you save the scores into the file like that:and then load it like that:It's not really the greatest way to store stuff - there are more things like json, csv, sqlite and even manual read/writing, but you'll be OK for now :)
Just serialize your data using pickle or json. Here is an example using json to serialize the scores (storing scores in a dict - a mapping between a name and a score):Now we'll make a function to write a score to a given file:What it does is:Load the serialized results object from the score file (dict)update the score dict (add key / update value of key)write the updated dict to the file (using json.dump)When writing the write_score function, we were missing a read_scores function, that enables us to see what the current scores are. So let's write this read_scores:What read_scores does is:Read the serialized dict (using json.load)Now we can test if it actually works. Here is a small example:Tip 1: You may want to use name.lower() when writing a score so that john and John are considered the same user.Tip 2: Because we referenced the json library as serializer, and it has the same API as pickle, you can choose between the two simply by replacing import json as serializer to import pickle as serializer. Just make sure you delete the scores file since they don't serialize data the same way.The whole code together:Output:To read a specific score you can use the existing method read_scores:Bonus - Closures:You can make the functions specific to a file if you understand closures, the following way:Now, we only have to call the function with the file name argument once, and from that moment we can use the result ot write scores:The same done with read_score:The whole code with closures together:Output:
That's not how file access works: In a file, you can't just "insert" new values somewhere, shifting the rest of the file backwards; you can only overwrite characters or rewrite the whole file.Generally, as long as your file is rather short, you won't notice any performance effect if rewriting the whole file.


Answer URL
https://docs.python.org/3/library/pickle.html#pickle-python-object-serialization
https://docs.python.org/3/library/stdtypes.html#mapping-types-dict
