Natural Text
I have any array of values, that are often the same and I am trying to find the index of the smallest one. But I want to know all the objects that are the same.So for example I have the array a = [1, 2, 3, 4] and to find the index of the smallest one I use a.index(min(a)) and this returns 0. But if I had an array of a = [1, 1, 1, 1], using the same thing would still return 0.I want to know that multiple indices match what I am searching for and what those indices are. How would I go about doing this?
list.index(value) returns the index of the first occurrence of value in list.A better idea is to use a simple list comprehension and enumerate:where v is the value you want to search for and iterable is an object that supports iterator protocol e.g. it can be a generator or a sequence (like list).For your specific use case, that'll look likeSome examples:If you're not sure whether the seq is empty or not, you can pass the default=-1 (or some other value) argument to min function (in Python 3.4+):Consider using m = min(seq or (-1,)) (again, any value) instead, when using older Python.
A different approach using numpy.where could look likeThis approach is slighly less efficient than the list comprehension for small list but if you face large arrays, numpy may save you some time.
Here is my solution:Code very straightforward I think here all clear without any explanation.


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
