Natural Text
I've got a grid representing a tessellation, which is a set of instances of the Polygon class (a class I made). I also have a Boundary class, which is the class representing the boundary of the simulation I'm running (another class I've made). Any line of any pentagon can either have two Polygon objects or a Polygon and a Boundary object as "parents" (an attribute which I've defined for the line class). The type of the object determines how I do certain computations.  So, in short, I need a way to tell which of two classes a particular variable is an instance of, where I've made both classes. When I call type(parent), I get:How am I supposed to determine this?
The idiomatic way to perform typechecking in Python is to use isinstance:Demo:Note that doing type(x) is Boundary would also work, but it will not factor in inheritance like isinstance does.
In old-style classes you check the class of an instance using its __class__ attribute, in new-style classes type() will work fine(Read: NewClass Vs Classic Class). In old-style classes every instance of user-defined class was of type instance(Unifying types and classes in Python 2.2). In new-style classes type(ins) and ins.__class__ now do the same thing:You can also use isinstance() to check if an object is an instance of a class:But checking this using isinstance doesn't mean the class is the exact parent of the instance:
Try testing the __class__ attribute of your object:


Answer URL
https://docs.python.org/3/library/functions.html#isinstance
