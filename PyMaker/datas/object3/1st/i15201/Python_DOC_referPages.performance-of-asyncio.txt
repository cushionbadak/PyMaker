Natural Text
I'm trying to get familiar with asyncio, so I've decided to write a database client. However, performance exactly matches synchronous code. I'm sure this is my misunderstanding of a concept. Could someone explain what am I doing wriong? Please see example of code below:   Thanks in advance.
You've made a mistake in the way you're calling send_data. Right now, you've got this:By using yield from inside the for loop, you're waiting for the future you're returning from send_data to yield a result before moving on to the next call. This makes your program basically synchronous. You want to make all your calls to send_data, and then wait for results:
The python asyncio module is single threaded:This module provides infrastructure for writing single-threaded concurrent code using coroutines, multiplexing I/O access over sockets and other resources, running network clients and servers, and other related primitives. This question has an explanation of why asyncio can be slower than threading, but in short: asyncio uses a single thread to execute your code, so even if you have multiple coroutines, they all execute serially. A thread pool is used to execute some callbacks and I/O. Because of the GIL, threading also executes user code serially, though I/O operations can be run synchronously.The reason using asyncio doesn't give you an improvement over serially executed code, is because the event loop is only running one coroutine at a time.


Answer URL
https://docs.python.org/3/library/asyncio.html
