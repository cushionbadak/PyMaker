Natural Text
I have a list that I need to convert to floats. As the data is not inputted by me, there are elements that have an accidental extra period, for example 39.04.1450. I need to be able to automatically remove all of the periods except for the first one that appears so that I don't get an error when I say list=float(list).Sample list:As you can see, latitude[1] has an extra decimal point. Of course, I will also need to strip the N in 6.8N but that is a separate problem.
I would do it like this:The function replaces the first occurrence of '.' with '[DOT]'. Then, it removes all the ocurrences of '.'. Finally, it replaces '[DOT]' back to '.'.To apply it to all the elements of your list, write:
will split on . and rejoin only adding the first period ... it does not however do anything about -6.8N
You can use regular expressions: \d means any digit, + means one or more, \. matches the dot character. The parenthesis is capturing that part of the match, and later on in the sub() is used as \1 (meaning first capturing group). 
A small hack if your corrupted data contains only N at the end and more than one . ... Else you've gotta add more except clausesOutput
You can use regular expression to extract the numbers out of the list and convert them to floats right away.edit:Sorry, I haven't noticed, the digits following second decimal point are also valid. A new solution still expects the first dot is OK and all the rest are to be removed.One of the values contain N, so I suppose there might be also S which means it's southern, i.e. negative latitude. Therefore I implemented this assumption into code.def valid_lat(s):    a = re.findall('\s*[+-]*\d*\.\d*',s)[0]    b = s.lstrip(a)    d = b.replace('.','')    c = re.sub('[nNsS]$','',d)    sign = 1.    if re.match('[sS]$',d):sign = -1.    return (float(a + c))*signThen just map it:map(valid_lat,latitude)
You can remove any letters using str.rstrip:You can do it in a single list comp but less efficiently:
What about this one?Output:Just being original... :)


Answer URL
https://docs.python.org/3/library/re.html
