Natural Text
I want to find out the sum of products of couples in a list.For example a list is given [1, 2, 3, 4]. What I want to get is answer = 1*2 + 1*3 + 1*4 + 2*3 + 2*4 + 3*4.I do it using brute-force, it gives me the time-out error for very large lists. I want an efficient way to do this. Kindly tell me, how can I do this?Here is my code, this is working but i need more efficient one: 
Here it is:Let xs = a1, a2, .., an, then　　　　(a1+a2+...+an)^2 = 2(a1a2+a1a3+...+an-1an) + (a1^2+...+an^2)So we have　　　a1a2+...+an-1an = {(a1+a2+...+an)^2 - (a1^2+...+an^2)}/2Compare the performance of @georg's method and mineThe result and the test codes as following(The less time used is better):
Use itertools.combinations to generate unique pairs:Then use a list comprehension to get the product of each pair:Then use sum to add up your products:This can be all wrapped up in a one-liner like so:In making it a one-liner the result of combinations is used without casting to a list.  Also, the brackets around the list comprehension are discarded, transforming it generator expression.Note:  Eastsun's answer and georg's answer use much better algorithms and will easily outpreform my answer for large lists.
Note: actually @Eastsun's answer is better.Here's another, more "algorithmical" way to deal with that. Observe that givena0, a1, ..., anthe desired sum is (due to the distributive law)a0 (a1 +  a2 + ... + an)   + a1 (a2 +  a3 + ... + an)   + ...  + an-2 (an-1 +  an)   + an-1 anwhich leads to the following algorithm:let sum be 0 and current be the last elementon each stepmultiply sum and current and add to the resultadd current to sumlet current be the previous of currentIn python:
def sumOfProductsOfCouples(l):  return sum(l[i-1] * l[i] for i, n in enumerate(l))
With no external library, you can use map and lambda to calculate * pairwise, and then sum everything upBut since you are dealing with big data, I suggest you use numpy.EDIT: to keep up with the updated question of OPSo what it does is taking out the first element of list and * with the rest. Repeating until there is nothing to take out from the list.
Output;combinations() will give your pairs like you want. Then do your calculates. Debug it like;See that your pairs are here. Actually you will find the sum of this combinations pairs.
Use the permutations method from the itertools module:
you can use map, sum functions.Dividing above expression in parts,


Answer URL
https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression
