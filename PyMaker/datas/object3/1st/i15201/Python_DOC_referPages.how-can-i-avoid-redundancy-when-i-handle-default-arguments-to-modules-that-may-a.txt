Natural Text
I'm trying to find a good way to avoid redundancy (that could possibly inject a risk for divergence) to my python module that can be executed from the command line.Consider a python module like this:So, someone using this module could either import it into their own code or call it from the command line. I don't like that there is a redundancy in specifying the default value for the 'a' argument between the function definition and the command line parser. Aside from the aesthetic annoyance, I tend to fret that, in larger modules that might be edited via version control by many devs, one of the defaults could be changed but not the other.Is there a good way to eliminate the redundancy of specifying the default in two different places?
Alternatively, if you are using ArgumentDefaultsHelpFormatter to display the default values trough the usage message, you could do something like this:On terminal:You define it once and get it in three different places, without constants or poluting the function's body...EDITI didn't know that much about recovering function metadata. So, reading the docs was pretty helpful in order to answer this question. If you can, take a look at the inspect module of the Standard Library...Here, another possibility, assigning the parameter defaults inside the function definition:In Python 3, the "inspect" block would be a little bit more legible:
First, define funky to use None as default arguments instead:Then, let None be the default value for each command-line argument as well:If the actual default values were to change, you only need to change them in one place (inside the body of funky) rather than two places (in the definition of -a/-b and in the argument list to funky).


Answer URL
https://docs.python.org/3/library/argparse.html#argparse.ArgumentDefaultsHelpFormatter
