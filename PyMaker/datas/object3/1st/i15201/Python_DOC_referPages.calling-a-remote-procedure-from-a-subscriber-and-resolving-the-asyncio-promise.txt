Natural Text
I'm having problems getting asyncio based autobahn RPCs to work in an event handler:Reading the documentation, I'm under the impression that this should work. However, if I'm using yield inside Foo.bar none of its code is being executed at all. I've tried decorating with asyncio.coroutine in various patterns, but can't get it to run at all.The only way I've found to make it work is by resolving the returned future "manually":I'm sure I'm just not understanding asyncio programming correctly yet, so what do I have to do to be able to write baz = self.call('baz') and get the result immediately (meaning without additional explicitly stated callbacks)?
The presence of the yield keyword in the body of a def statement makes the defined function into a generator function.When you call a generator function (as autobahn would), the body of the function is not executed. Instead, a generator object is created. When you call next on the generator, control advances to the next yield statement. Generators have been discussed extensively in other Stack Overflow posts, as well as in the docs and elsewhere on the web.The API of asyncio makes extensive use of coroutines and yield from. (For most purposes, you can consider 'coroutine' and 'generator' to be synonymous.) The event loop tracks a collection of generators and calls next, send and throw on them as appropriate.*It looks like autobahn.subscribe expects a regular callback function, not a coroutine, and that's why your code is not getting executed. One way to work around this is to write a callback function that schedules your coroutine, using asyncio.async.In the absence of a function in autobahn to do this, you can write your own reusable decorator to subscribe coroutines to WAMP topics.Now your class will look like this:* This is a simplification. The event loop in fact tracks Futures, not coroutines. The algorithm to call the appropriate methods on a generator is implemented by Task, which wraps a coroutine up into a Future.


Answer URL
https://docs.python.org/3/reference/expressions.html#yield-expressions
https://docs.python.org/3/glossary.html#term-generator
https://docs.python.org/3/library/asyncio-task.html#coroutines
https://docs.python.org/3/library/asyncio-eventloop.html
https://docs.python.org/3/library/asyncio-task.html#asyncio.async
https://docs.python.org/3/library/asyncio-task.html#future
https://docs.python.org/3/library/asyncio-task.html#task
https://docs.python.org/3/glossary.html#term-generator
