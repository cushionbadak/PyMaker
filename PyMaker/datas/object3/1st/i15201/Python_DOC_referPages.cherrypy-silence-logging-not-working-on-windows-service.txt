Natural Text
Environment:  Windows 7 64bit, Python version 3.2.5 with PyWin32-218 and cherrypy version 3.6.0.I copied the windows service example (CP 3.1) from CherryPy as a Windows Service and found out that the service starts and stops almost immediately. After some fiddling I created a static log file to write to for debugging(because services run in diff directory than original script) and got this:Googled the error and found this running CherryPy 3.2 as a Windows service who had precisely the same error.Did some more research and saw that windows services' console output points to 'Nothing'.so I added sys.stdout = open('stdout.log', 'a+') and sys.stderr = open('stderr.log', 'a+')just before cherrypy.engine.start()and what do you know, it works!BUT now I want CherryPy to not log at all.Tried various config settings and code eg.:log.screen = None and server.log_to_screen = False and checker.check_skipped_app_config = False and evenNone of them work resulting in the service stopping and giving the same error as above.Am I missing something or is it truly impossible to silence the logging?
Follow the docsBasically your config should looks like:
I don't think it has much to do with CherryPy logging. As you can see your first stack trace ends in Python stdlib warnings module. Its purpose is letting developer know that some undesired conditions are met, but they aren't important enough to raise an exception. It also provides means of filtering warning messages. Here's the relevant quote from the module's documentation:Warning messages are normally written to sys.stderr, but their disposition can be changed flexibly, from ignoring all warnings to turning them into exceptions. The disposition of warnings can vary based on the warning category (see below), the text of the warning message, and the source location where it is issued. Repetitions of a particular warning for the same source location are typically suppressed.If you looked at the warnings.showwarning code, you would have seen this:CherryPy actively uses warnings, and specifically in the config checker which is referenced in the first stack trace. It seems in your service environment sys.stderr is None. To completely avoid showing warnings, you can do the following:Also if you would like to keep redirecting them, you may find this question useful.


Answer URL
https://docs.python.org/3/library/warnings.html
