Natural Text
I'm trying to monkeypatch how pandas Panel's slicing (__getitem__).  This is straightforward to do with a basic function, foo.WhereORIGINAL_getitem is storing the original Panel method.  I'm trying to extend to the case where foo() is not a function, but an instance method of an object, Foo.  For example:Foo.foo() must access the attribute self.name.  Therefore, the monkeypatched function would need a reference to the Foo instance somehow, in addition to the Panel.  How can I monkepatch panel with Foo.foo() and make self.name accessible?  The switching between the monkey patched function happens in another method, Foo.set_backend()What I really need is for newgetitem to maintain a reference to self.  Solution AttemptsSo far I've tried taking making newgetitem() a pure function, and using partial functions to pass a reference to self in.  This doesn't work.  Something like:But this doesn't work.  A reference to self is passed, but no access from the calling Panel possible. That is:Passes a reference to Foo, not to Panel.Yes, I know this is bad practice, but it's just a workaround for the time-being.
The basics of monkey patching are straightforward but it can quickly become tricky and subtle, especially if you're aiming at finding a solution that would work for both Python 2 and Python 3.Furthermore, quickly hacked solutions are usually not very readable/maintenable, unless you manage to wrap the monkey patching logic nicely.That's why I invite you to have a look at a library that I wrote especially for this purpose. It is named Gorilla and you can find it on GitHub.In short, it provides a cool set of features, it has a wide range of unit tests, and it comes with a fancy doc that should cover everything you need to get started. Make sure to also check the FAQ!
You can use patch from mock framework to handle your case. Even it is designed for testing, its primary work is monkey patching in defined contex.Your set_backend() method could be:That will work either when self._getitem is a method or a reference to a function.
One way to do this is to create a closure (a function with reference to names other than locals or globals). A simple closure:I don't have pandas on my system, but it works much the same with a dict.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#patch
