Natural Text
I am trying to create a dictionary of colors where an integer maps to a color.In my first list l1, it has 177 items but only 5 unique integers (0 to 4).In the second list, it has 5 html colors.I am trying to create a dictionary where each color will map to a unique integer.Here is my code:However, I get an incocomplete dictionary:How do i fix this?
You need a set so you get all unique numbers from l:If you always want the numbers sorted:You will always need to have only 5 unique values in l if you only have five values in l2 or again you will lose data. 
If the unique integers are consecutive, you can use enumerate():
You may try to use set() to get all the unique integer of l1:Output:
Based on the code you've presented, I would suggest considering an enum.Enum or enum.IntEnum object instead of a dictionary (docs). It's hard to say for sure, but IntEnum may work better for you here. You can create your IntEnum this way:Now all of your colors have been automatically mapped to an integer value (beginning with 1; the reason for starting with 1 instead of zero is so that all members of an Enum evaluate to True). You can iterate over Color and access member names and member values, similar to how you would with a dictionary: Notice that when you access the member by key like in a dictionary, the IntEnum member object itself is returned, not the integer it's mapped to: ...however, this probably won't matter to you, because since it's an IntEnum the member objects act like integers, including for the purposes of comparison, etc:The above is the key reason I am thinking this may be a better alternative. Your l1 list is full of integers that represent colors. The ideal thing would be to fill it with Color members instead of integers: However, if you can't/don't want to do that, you can still compare the integers to the Color members (I assume you don't have any interest in "adding", "multiplying", etc, colors together). So, you could maybe do things like this: The Color enum also comes with a built-in dictionary object (Color.__members__) that will return a dictionary with the member names as the keys and the member itself as the value. 
@Simeon Visser's answer is the most concise one for the specific example you provided (using integers from 0 to 4). But, if what you wanted is to have a sequence of #s like {0: '#0000FF', 2: '#FFFFFF', 3: '#00FF00'} where all the items show up from the original list (even repeated), this won't work.It seems your intention, however, was to actually grab the colors for all the corresponding items of the list. If that's the case, what you can do is use Simeon's answer and combine it with your original list like in the following way:This will map all the colors to a new list based on the integer sequence from l1. Hope that helps.


Answer URL
https://docs.python.org/3/library/enum.html
