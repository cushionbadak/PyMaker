Natural Text
If I currently have a file that is importing:I can create a file foo.py with a function f0 in it to satisfy the first import.Is there any way to satisfy the second import from within that same file foo.py?
I just wanted to do that same thing. I only found this question, without an actual answer. So, here's what I came up with as a solution:In essence, you subclass types.ModuleType to define a module. You then add it manually to sys.modules below the namespace of the current module, as given by __name__.This is a minimal solution. If one would want to move add_submodule() to a separate stand-alone module for re-usability, it would have to be expanded a bit:One could not simply use __name__ as this would be the namespace where add_submodule() was defined in. This should work instead:In the separate module:In the actual module:I fear there's no nicer way of getting the parent's name into the function, though.Both cases can now be used like so:In [1]: import submodtest.submod1 as sm1In [2]: import submodtest.submod2 as sm2In [3]: sm1. [TAB]sm1.foo  sm1.mro  In [3]: sm2. [TAB]sm2.bar  sm2.mroEDIT: Pushed the above full example to my Github.
Create a directory called fooWithin this directory, have a file called __init__.pyThis effectively creates a module called foo In this file, store the functions you want bundled with fooCreate a subdirectory of foo, called bar.Within this directory, have a file called __init__.pyThis effectively creates a sub module foo.bar In this file, store the functions you want bundled with foo.bar
No, you should create a directory named foo as a package.Click here to read official documentation about The import system


Answer URL
https://docs.python.org/3/reference/import.html#regular-packages
