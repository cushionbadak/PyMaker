Natural Text
In Python, is it possible to automagically get the original name of the variables passed to the current function as positional arguments?It can be convenient for debugging purpose. For example in a pretty-print function to prefix the output of every dumped value with its original name instead of having the caller to manually specify it.The most obvious way to get something similar would probably be to use keyword arguments like in:But this is quite inconvenient as we manually have to name each argument :)I would rather go for some magic like:The pprint_func function would find the original name then print it before the dump of the actual value:How can I achieve that in Python3.x?I assume we need access to the source code of the calling context. Please note that very dirty options like lexing/parsing Python source code manually is definitely a no-go.Note: this question is related to a previous one of mine. I created a new question because the topic evolved.Also, I found this answer interesting but it doesn't work if the passed parameter is the direct result of a call (i.e.: pprint_func(result())), resulting in an incomplete solution to my problem. And the final solution offered by the original poster is as dirty as it can be.
It looks like the only way to do this is to walk through the AST of the caller's context, searching for a call to the current function. Then, thanks to AST's structure, we can easily find every information we need about our positional arguments.I don't flag this answer as accepted in the hope a Python Guru will pass by and tell the TruthI've made an implementation that just does the trick and works pretty well for the usual cases. The code definitely deserves some improvements, especially the find_caller_node part since it's as precise as it can be, which is not 100%.Also I had to read the complete module of the caller since inspect.getsource sometimes didn't return the complete source block (e.g.: the caller was directly located into __main__; Python v3.4.2). Is it a bug or a feature?Anyway, please don't be too harsh with the code as it is supposed to be used for debugging and educational purpose only.You can find the latest version here.And here is a copied/pasted version for the posterity:


Answer URL
https://docs.python.org/3/library/ast.html
https://docs.python.org/3/library/inspect.html#inspect.getsource
