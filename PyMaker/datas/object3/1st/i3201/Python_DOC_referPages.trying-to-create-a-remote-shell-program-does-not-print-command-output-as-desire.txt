Natural Text
I'm trying to create a remote shell in python and have got the server to send a command to the client and to have it executed on the remote machine. What is going wrong is that although the client is sending back the output (from my understanding) the server is not receiving and printing it properly. It was working up until I changed my code to receive all data, not just one chunk. How do I receive all the data and print it correctly?Server code:Client code:If any more info is needed please just ask :)
It appears you are using stream sockets. In that case the problem is you cannot  test for EOF (zero length data being read) to break out of your receiving loop if the connection is not being closed (by client.py). Your server.py reads the input, but then goes back to receive more from the socket and just waits for more data (which is not coming).In client.py you can start your loop by accepting a new connection and end by closing it (note: the socket returned by accept is to be closed, not the listening one whose accept method was called). In server.py you can start and end your loop by setting up and close the connection (resp.) to your counterpart. In that case if not data: break can be used just fine.The other option is. You can handle this on protocol/application level. You either start your transmission by sending length of data to follow (and receive until you have this now known amount of data) or pick a message delimiter (e.g. b'\0') which you also send after each complete block of output. You can then receive data one by one until you reach the next delimiter. In this case you can keep your existing connection alive and reuse it for forth and back communications. I.e. in your receiving loop you check for: if data == b'\0': break and you send conn.send(b'\0') after each message in your client.py loop.Unrelated side note: WindowsError should be a subclass of OSError which is the one your probably really want to catch to make your code portable.


Answer URL
https://docs.python.org/3/library/socket.html#socket.socket.accept
https://docs.python.org/3/library/socket.html#socket.socket.close
