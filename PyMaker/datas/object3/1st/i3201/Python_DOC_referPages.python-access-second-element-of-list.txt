Natural Text
When I print my list I get something like this [[6.0, 0.5], [6.1, 1.0], [6.2, 1.5], [6.3, 2.0], [6.4, 2.5], [6.5, 3.0], [6.6, 3.5], [6.7, 4.0], [6.8, 4.5]]I want to extract first and second elements from above list into separate lists so that I can ask the plt to plot it for me. So my results should be [6.0,6.1,6.2 ... 6.8] and [0.5,1.0,1.5,2.0 , ... .4.5]I  want to know if we have a cleaner solution than to 
You can try list indexing:output : 
I would recommend using numpy arrays. For example:Output:
Here a try with zip, zip() will makes iterator that aggregates elements based on the iterables passed, and returns an iterator of tuples, so map() function is used to make the tuples to list :O/P will be like :
zip() will provide the required output.Output:zip() aggregates the elements from all the iterable. zip(x,y) would provide the list you currently have. zip() with * can be used to unzip a list.Also, there is no need to convert the tuples to list since pyplot.plot() takes an array-like parameter.
One-liner using zip built-in and unpackingif you are embarassed that results are tuples we can turn them into lists simply using map built-in:
Lots of pure Python approaches here.  But given that your goal is to plot the separated values, I think there's a case to be made here for the simplicity of Pandas - just drop the list as-is into a data frame and plot():
To plot:


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/functions.html#map
https://docs.python.org/3/tutorial/index.html
https://docs.python.org/3/library/stdtypes.html
https://docs.python.org/3/library/functions.html
