Natural Text
we can use if-else like this: statement if condition else statement,but there are some problems here I can't understand why?if i run count += 1 if True else l = [](count is defined already), then raise a error:Can not it be assigned value after else?when run count += 1 if False else l.append(count+1)(note: count = 0, l = []), there is a error will be raise:and the result of l is [1].As same condition, if I use if-else blockï¼Œthere are no error. Can you explain it the difference.
The "conditional expression" A if C else B is not a one-line version of the if/else statement if C: A; else: B, but something entirely different. The first will evaluate the expressions A or B and then return the result, whereas the latter will just execute either of the statements A or B.More clearly, count += 1 if True else l = [] is not (count += 1) if True else (l = []), but count += (1 if True else l = []), but l = [] is not an expression, hence the syntax error.Likewise, count += 1 if False else l.append(count+1) is not (count += 1) if False else (l.append(count+1)) but count += (1 if False else l.append(count+1)). Syntactically, this is okay, but append returns None, which can not be added to count, hence the TypeError.
For your first error, you are trying to misuse a ternary expression. In Python, ternary expressions cannot contain statements they contain expressions. As can be seen in Python's official grammar, an assignment is a statement, and a method call is an expression.In your samples, l = [] is considered a statement, whereas l.append(...) is an expression.For your second error, list.append returns None, not the list. Therefore, you are essentially trying to add None to either an integer, which is not permitted, hence the TypeError.Lastly, please don't use the lowercase L's (l) or uppercase o's (O) as variable names. As stated in PEP 8, these can be extremely confusing variable names due to their similarity to 1's and 0's.
The one-line if-else statement in python is more like the ternary operator in other languages. It is not just a more compact version of an if-else block. The one-line if-else evaluates to a value, while the if-else block specifies conditions under which different actions should be taken. The single-line if-else statement is like a function that returns one value under some condition and another value if the condition is False.So in your example, when you write count += 1 if True else l = [], what i think you mean is: But what this line is really doing is something like:Hence the syntax error.


Answer URL
https://docs.python.org/3/reference/expressions.html#conditional-expressions
https://docs.python.org/3/reference/compound_stmts.html#the-if-statement
