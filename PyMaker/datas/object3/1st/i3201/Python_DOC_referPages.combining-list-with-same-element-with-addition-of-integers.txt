Natural Text
I have a nested list how can I make the same elements removed with addition of its numbers.What my list contains:I want this 'Blue Shirt' to merge, to make this:what i've tried so farMy approch was to count the occurrence of name if its more than 2 then make a new list with that name and updated price and put it in the place of the previous list but it was not simple enough.  I am trying the count function but its seems to not work efficiently on a nested list. Would love to have to most simplest option to solve this without using some external functions (imports).
list.count('Blue shirt') counts how many times the string 'Blue shirt' is present in a list. That's exactly once, and not a useful number for your needs.You want to put your strings into a dictionary, so you can track the numbers without having to do a full scan:Now you have a mapping with the sums of all your numbers; turn that back into a list of lists:This doesn't necessarily keep the same order as the elements in the input list. If that's needed, you'd have to loop over the original list and see if the name string is still there, and if so, add the name and count from the mapping to a new list and remove the name from the mapping:However, in Python 3.6 and newer, dictionaries will remember the insertion order of keys, meaning that the loop over counts.items() gives you your strings in the original first-seen order again.Demo, using Python 3.6:If you can use the standard library, then you could also use a collections.defaultdict() object to avoid having to use counts.get(name, 0) (you'd use counts = defaultdict(int) outside the loop, and counts[name] += 1 in the loop instead), or collections.OrderedDict() for the dictionary to remember insertion order on Python versions before Python 3.6.
Using only base Python:Not sure if "external functions" means no additional imports - but if you can use Pandas, use groupby and sum:
Another approach to use without any libraries (like collections.Counter):Output:
Assuming you are not able to use neither an external library nor collections.Counter() The following solution might help you:The problem using list.count() is that it just applies to a single list, but you are having a list of lists. Basically, my solution uses a dictionary that has as keys the items you need to count and as values the count. Then I use a list comprehension to produce your desire output. 


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/collections.html#collections.OrderedDict
