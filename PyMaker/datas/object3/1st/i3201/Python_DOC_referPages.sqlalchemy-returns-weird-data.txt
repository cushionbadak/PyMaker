Natural Text
I am trying to export a date from a table. I want to just pull the raw created object out.I am running the query below:But it returns the entire record as so and I have no idea how to export created out.If i try calling created in cls.created as soand it exports a weird datetime version. I just want the raw versionHow can i export the value for created out as the raw string?
SqlAlchemy queries for attributes (as opposed to the entire model) return KeyedTuples which behave like a namedtuple. Like normal Python tuples, a tuple with a single element is constructed by a trailing comma.  This is why your result (datetime.datetime(2018, 7, 17, 20, 17, 9, 653809),) shows the datetime object followed by a comma.Values can be accessed by indexOr by nameThe values are python objects with all their usual methodsIt is a little confusing that the tutorial says that .first() applies a limit of one and returns the first result as a scalarand the example shows a single object being returned, like this:whereas calling first on your query by attribute returns a value wrapped in a tuple.  It makes sense if you consider the tuple to be a row in the resultset.  If you called .all() on your query you would get a list of tuples (rows).  If you called .limit(1).all() on your query you would get a list containing a single tuple.  So when you call .first() you are getting the first result from .limit(1).all(), which is a tuple.
If the column is a datetime column, the raw value isn't a string, it's… well, a datetime.In most database engines, under the covers, the actual raw value stored in the database for datetime columns is some kind of number. For example, IIRC, in Microsoft SQL Server, it's a 64-bit integer of decimicroseconds since 1901. But you don't want that number. What would you do with it?If you want a string in some particular format, you can of course ask the database to format it for you to whatever string formats it accepts, but why? Your engine and/or SQLAlchemy has represented the datetime value as a Python datetime object. That's smaller, faster to pass over the wire from the database, and more flexible (e.g., you can do comparisons and arithmetic with them) than a string.And you can always format it to whatever string format you want. For example:… and so on.


Answer URL
https://docs.python.org/3/library/datetime.html#datetime-objects
