Natural Text
I understand that the average case of hash-table lookup is O(1), but does this include the time it takes to compute the hash value itself of the given input? I've tried looking for the answer on google, read all the docs needed but could not find the implementation of the internal hash() function in Python. Some websites state that computing the hash value takes a constant amount of time, some say it is O(k) where k is the length of the input. I would be happy if you could help me find the correct answer. Thanks in advance :)
It depends entirely on the type being hashed. Here are some simple tests in CPython 2.7.13, which is not the only option:Note how hashing a freshly created string is O(n), but every string is caching its hash so it amortises to constant time when repeated (number=1000000 is the default for timeit). long is also O(n), where n is the width of the number, thus logarithmic of magnitude. The granularity is that of digit, typically 2**30 specifically to be usable directly as a hash for smaller ints. Other objects will have their own behaviour, for instance tuples will roughly sum the hash time of their contents. 
A small test I made to test the hypothesis. The results don't seem to depend on the length of the length of the input.Results


Answer URL
https://docs.python.org/3/library/time.html#time.perf_counter
https://docs.python.org/3/library/timeit.html#module-timeit
