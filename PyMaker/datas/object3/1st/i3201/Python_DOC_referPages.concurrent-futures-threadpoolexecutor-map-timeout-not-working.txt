Natural Text
The docs say:The returned iterator raises a concurrent.futures.TimeoutError if __next__() is called and the result isnâ€™t available after timeout seconds from the original call to Executor.map()But here the script didn't raise any exception and kept waiting. Any suggestions?
As the docs specify, the timeout error will only be raised if you're calling the __next__() method on the map. To call this method, you could for example convert the output to a list:Output:Here, the n-th task sleeps for n seconds, so the timeout is raised after task 2 is completed.EDIT: If you want to terminate the tasks that didn't complete, you could try the answers in this question (they don't use ThreadPoolExecutor.map() though), or you could just ignore the returned values from the other tasks and let them finish:Output:
As we see in the source (for python 3.7) map returns a function:The TimeoutError is raised from yield fs.pop().result(end_time - time.time()) call but you have to request a result to reach that call.The rationale is that you do not care about submitting the tasks. The tasks are submitted and start running in the background threads. What you care about is timing out when you request a result - it is a usual use case you submit tasks and you request a result from them in a limited time, not just submitting them and expect them to terminate in a limited time.If the latter is what you were about you could use wait, as illustrated for instance in Individual timeouts for concurrent.futures


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
