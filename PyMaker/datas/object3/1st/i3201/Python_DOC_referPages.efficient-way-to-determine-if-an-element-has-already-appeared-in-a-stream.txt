Natural Text
The questionIs there any efficient way (with particular attention to memory), either deterministic or probabilistic with arbitrary error, to determine if i-th element has already appeared or not in a stream of strings (such as the one modelled below)?Stream modelThe stream is modelled by the following generator of strings. In this model, the last M=10000 values are the ones that appear twice. Obviously in the real application it is not known when a duplicate shall show itself.Current implementationMy current implementation uses a form of dictionary, using either directly the dict or an implementation using patricia-trie customised in such a way to exploit eventual frequent substrings.The already_seen value should be 10000.The problem with the current implementation is that it requires to maintain in the main memory all the distinct items. Is there any other way?
Yes, it's called Bloom Filters:Bloom filters are space-efficient probablistic data structures used to  test whether an element is a member of a set.I used pybloom-mirror package to modify your code and set the bloom filter to capacity 20000 and error rate 0.01 (according BloomFilter calculator the size of filter is around ~23.4kB). But it can give you false positives.Output is:For capacity of 10 million and probability 0.01 the size is around 11.43MiB (there are lot's of variables to play with though, depends on your use case).Edit:For chaining Bloom Filters you could use this example:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#dictionaries
