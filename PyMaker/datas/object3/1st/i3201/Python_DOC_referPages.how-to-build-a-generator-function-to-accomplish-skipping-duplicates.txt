Natural Text
I want to ake a generator function that loops over an input iterable sequence, yielding one element at a time, but skipping duplicates. An example code is below:Does anyone ave any ideas why this code is not printing?
A simple unique generator would just keep a set of items already seen, e.g.:
Simplest way is to use OrderedDict, an easy way to dedupe while preserving order:Technically, it operates eagerly (all deduping is done up front, then you iterate the completely deduped OrderedDict), but all other solutions would need to build an equivalent set anyway by the end, so this delays the production of the first value, but does the same amount of work overall (and on Python versions with a C implemented OrderedDict, runs faster than handrolling a generator using a set as a "seen" store). The cases for which it is unsuitable are infinite input iterables and finite but large iterables where it is likely you'll stop processing them longer before you finish (in which case a lazier, unique_everseen solution based on a set is needed).On Python 3.6 and higher, plain dict preserves order (though it's not an official guarantee until 3.7), so you don't even need an import:
Is there a reason you need a generator? Why not just use a set?If you really need a generator:


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
https://docs.python.org/3/whatsnew/3.6.html#new-dict-implementation
https://docs.python.org/3/whatsnew/3.7.html#summary-release-highlights
https://docs.python.org/3/library/itertools.html#itertools-recipes
