Natural Text
thanks in advance,say you have an async funtion:say you want to start some coroutines:my question is :firstly, is it right to assume that :this code block here would temporarily halt the task and automatically switchto another coroutine?if so,then does the "i" variable in each coroutine get stored separately,or does the halting of the task completely abandon the previous processand when you come back to that same process you are just going to have to startagain from 0.Thanks!
this code block here would temporarily halt the task and automatically switch to another coroutine?The task is not halted temporarily, the coroutine wrapped in it is. It will not just switch to any other coroutine, but to the one that it is instructed to wait for; the coroutine created by calling asyncio.sleep(0.0001) in your case.then does the "i" variable in each coroutine get stored separately, or does the halting of the task completely abandon the previous process and when you come back to that same process you are just going to have to start again from 0.Coroutine functions (i.e. a function definition using async def or decorated with @asyncio.coroutine) are functions nonetheless, hence all the known rules regarding variable scopes apply. So yes, i is local to each of your coroutines and remains alive until the function it is local to terminates. You do not start over from 0. You can verify this by simply doing print(i) inside your create_list coroutine function. You will see the value of i constantly raising for each of the coroutines independently; never resetting, although they are constantly suspended and resumed.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#task
