Natural Text
Let's say I have three functions that do different things but should react to a set of exceptions in the same way. One of them might look like:The vast majority of the code is the exception handling, and I'd like to avoid having to repeat it in every function that needs it. Is there a way to define something like an exception handling function containing the handling code? Ideally my function would end up effectively:
You practically already did it. Just define the handler_function() somewhere and it gets called when an Exception in the try block gets raised. Maybe helpful: you can bind the Exception to a variable and use it for exception handling in the handler function:Then you can for example do `print(e)Ì€  to give out the exception or do different handling for different exceptions in the function. Hope that helps!  You also can specify several exceptions in one line if you don't want to be general, but catch all specific exceptions with one statement:
I might write a decorator function for the exception handling; for instance using functool.wraps.Then you can write a very simple API call function, and wrap it with the retry wrapper:In your original function, notice that you can move the contents of the try...else block into the main try block without affecting the logic (extracting the value from the query result won't raise one of the network-related exceptions), and then you can just return out of the try block instead of arranging to stop the loop.  Then the contents of the try block are what I've broken out here into get_order().  I restructured the remaining loop a little and turned it into decorator form.


Answer URL
https://docs.python.org/3/library/functools.html#functools.wraps
