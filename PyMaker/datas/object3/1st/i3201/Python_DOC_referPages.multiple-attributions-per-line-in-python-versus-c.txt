Natural Text
Doing my best at understanding how python works. I come from a somewhat solid C background.Trying to translate the following line into C:    p, q = q, p - x // y * qMy problem is that multiple assertions/attributions (please correct me on terminology) don't work as I expect them to.How does that line of code actually unwrap into C-like syntax?
Any assignment statement works by first evaluating the expression on the right side, then assigning it to the target list.1In your case, the right side is a tuple display with two elements:So, Python evaluates the first element, q, then it evaluates the second element, p - x // y * q, then it builds a tuple out of those two values.Next, since you have a target list with two targets on the left side, Python uses iterable unpacking (described in the same Tuples and Sequences tutorial section)2 to unpack that tuple into two separate values, and assign one to each target.So, in C terms, it's roughly:In fact, a real Python implementation might optimize out that build-a-tuple/unpack-a-tuple code, the same way you would if writing this yourself, so what you get is more like:If you're used to C, you might be used to looking at the assembly that a compiler generates (without optimizations disabled) to figure out what something really means. You can do the same thing in Python with the dis module, except that the assembly language is for CPython bytecode rather than x86_64 or ARM9 or whatever:And as you can see, in CPython 3.7, it actually did optimize out the tuple, and also optimized out the temporary local variables and just stored intermediate values anonymously on the stack.1. This is slightly oversimplified, because a target like spam[eggs][0] = … actually requires evaluating spam[eggs] as an expression, and then treating <the result of that>[0] as a target… but that isn't relevant here.2. The tutorial calls this "sequence unpacking", because it hasn't gotten to the notion of "iterable" yet.
You'd do the equivalent thing in C with:But what's really going on is that the right hand side creates a tuple, with the tuple items being built left to right:And then that tuple gets unpacked on the left hand side:This use of tuples for essentially parallel assignment comes in very handy. And I'm sure you'll get used to it very quickly. But one thing that may take a little longer to get used to is Python's data model, which works rather differently to C's. You may find this article helpful: Facts and myths about Python names and values, which was written by SO veteran Ned Batchelder.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#assignment-statements
https://docs.python.org/3/tutorial/datastructures.html#tut-tuples
https://docs.python.org/3/library/dis.html
