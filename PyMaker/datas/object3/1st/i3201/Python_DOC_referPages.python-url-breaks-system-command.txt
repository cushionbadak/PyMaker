Natural Text
I am trying to open chromium to an authorization URL with a specific launch parameter. I was not able to find the solution to this launch parameter using the webbrowser library, so I moved onto os.systemThis works up until the "&" in the URL. So chromium opens without bothering me with keyring nonsense, but only opens the URL until the first &. Is there a way of handling the URL and maintaining its integrity?
This is because & is special to the shell. The canonical way to run a subprocess from within Python 3 is:
This is exactly why you shouldn't use os.system for anything non-trivial. As the docs for that function say:The subprocess module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function. See the Replacing Older Functions with the subprocess Module section in the subprocess documentation for some helpful recipes.If you follow that link, you'll see that you can write this as:Because you're passing a list of arguments, rather than trying to put them together into a string that you can smuggle through the shell, you don't have to worry about quoting, or anything else.By the way, you probably want to use run rather than call here, but for some reason the recipes still haven't been updated in the docs as of 3.7, and I didn't want to add confusion by showing something that doesn't matchâ€¦ Anyway, you should read the at least the quick-start "Using" section at the top of the docs.If you really want to use os.system anyway for some reason, you will need to quote and/or escape the auth_url argument. Assuming you don't care about Windows, the best way to do this is with the shlex module:If you do care about Windows, you can add posix=False to the quote call. The effects of the posix flag are documented under the shlex constructor. The default True value means it follows POSIX rules as closely as possible, which means it should be able to handle anything that could possibly be handled, as long as your shell is strictly compatible with sh (as, e.g., bash is, but Windows cmd is definitely not, and even tcsh or fish may not be). With False, it uses "compatibility mode". For simple examples like yours, it should work for most shells without fiddling, but if you need to get more complicated, you need to read Improved Compatibility with Shells. (And, for Windows cmd or PowerShell, there's a limit to how far you can push things.)


Answer URL
https://docs.python.org/3/library/os.html#os.system
https://docs.python.org/3/library/subprocess.html#module-subprocess
https://docs.python.org/3/library/subprocess.html#subprocess-replacements
https://docs.python.org/3/library/subprocess.html#module-subprocess
https://docs.python.org/3/library/shlex.html#shlex.quote
https://docs.python.org/3/library/shlex.html#shlex.shlex
https://docs.python.org/3/library/shlex.html#improved-shell-compatibility
