Natural Text
I have been trying to figure out how I can accomplish this with the for loop and the enumerate objects that I am given in python. I have a time in the format of HH:MM. And I have a csv file in which the first column is a timestamp that follows in that same format. I then search the file for the matching time, and then I extract that row to later be converted into an XML File. However, I need to extract the row before and the row after that target row as well. I have tried the following piece of code:However, I realized shortly after that this is not the correct way to do this because I am extracting the index and not the value. What I need is something something like row[i-1],row[i],row[i+1]. In other words, I need i's element that matches the row.Is there an easy way to do this? I have thought about using range(csvFile) but I honestly have no idea what that would end up doing. 
I would use a different approach:store the previous row in your loopif matches, then use next to get the next row, and return the 3 rowslike this (I added a comment since timeInRow should be extracted from row but your code doesn't show it):next uses a default empty list value just in case the last line matches (avoids StopIteration exception)This linear approach works, but if the rows are sorted by time and you need to perform several searches, a better approach (faster) would probably to create a list of rows, a list of times, then use bisect module to compute the insertion point in the list of times, check that the times match, and use the index to return a slice of the list of rows.Something like:If you only need to perform 1 search, this is slower because you have to create the list anyway so O(n) + O(log(n)). But if you want to perform several time searches in the same list, the cost is O(log(n)) per search.
You can use a deque for this.Given:Presume you want the line with Jane and the line before and after. Try:Then:
Alternate (functional) approach to those above would be to use zip or a variation of it.  Something like:If you wanted to include the first two and last two rows in your iteration asthen you would have to pre- and post-pend the rows list by two None's on both ends.Not saying this is necessarily better than other answers, but it is an alternative approach that I would consider writing.[Edit]Using itertools.islice per suggestion of Jean-Fran√ßois:


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
