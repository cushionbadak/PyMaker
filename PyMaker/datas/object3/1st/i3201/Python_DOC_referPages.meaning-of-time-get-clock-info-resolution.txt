Natural Text
The python time module offers five clocks: time, monotonic, perf_counter, process_time, and thread_time (and the deprecated clock). What these clocks do is well explained in the documentation. You can get system-depended information about these clocks with the time.get_clock_info(<clock_name>) function. This in particular returns the resolution of this clock, which is in my understanding the minimal difference between to consecutive calls to that clock, that is not zero. To test this, I created the following code:This code prints the following for me:This is quiet surprising, because the actual minimal delta of time is 2.4x smaller than promised and the actual minimal delta of process_time and thread_time are both 150.000 times bigger than promised.Why is that? Is that implementation depending and python doesn't know the actual resolution? If it is that way, why does it pretend to know? Or am I misunderstanding something?System Information:Windows 10 64bitPython3.7 64bit
The values "150.000 times bigger than promised" is completely fine. The execution of your code is going to take some time. What you're promised is that this is the minimal difference you'll that can be registered, not that 2 consecutive calls will get that value. Also, that's the resolution of the values in the timer, not the timer itself. You can have a timer which counts in 100 ns increments, but actually adds 10 of them every 1us. For the other way: You can follow "time" implementation for windows to pygettimeofday (which uses GetSystemTimeAdjustment) You'll have to dig into those descriptions to see what is the result. An interesting bit is that the lpTimeIncrement apparently only matters if lpTimeAdjustmentDisabled is set - and that's something cpython doesn't check.The perf_counter is just weird and unlikely to be correct. It takes the value from QueryPerformanceCounter, but executing the time measurement in 377ns is very unlikely.For a better idea how the timers behave, you could also do a histogram plot of the results rather than using the minimum.


Answer URL
https://docs.python.org/3/library/time.html
