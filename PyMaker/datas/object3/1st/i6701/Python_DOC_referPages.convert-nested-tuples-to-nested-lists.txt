Natural Text
I am able to get the first element but the other elements are still extracted as a tuple whereas I want all of them to come out as part of a list. Basically, I want every element to come out individually as part of a list.
in 3.3+ there is a recursive idiom that can be modified to flatten nested tuples of 'any' depth (see: system recursion limit)which can then be used in a list comprehension    I found the above by searching for 'python flatten', in the comments to https://jugad2.blogspot.in/2014/10/flattening-arbitrarily-nested-list-in.htmlfor 2/7 http://joedicastro.com/aplanar-listas-en-python.html has recipes, I modded: (I had to change basestring to str for 3+)and it ran with the same result

I kept it to a simple recursive routine that can also be used in a comprehension:Output:
Iterate each iterable, flatten all elements, then recast the iterable to a list.  Here are two approaches:GivenCodeA modified flatten from this post (Python 2/3 compatible):For a one-liner, consider more_itertools.collapse, a tool that also flattens nested iterables:Note: more_itertools is a third-party library that implements several itertools recipes and useful tools. Install by pip install more_itertools.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
