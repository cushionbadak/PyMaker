Natural Text
Background: I am trying to understand why static and class methods are not callable while being descriptors, while ordinary methods of a class (i.e. methods of a class which are neither static or class methods) and functions which are not attributes of classes are both descriptors and callable. In Python, what is the definition of a callable type?From https://docs.python.org/3/reference/datamodel.htmlCallable types These are the types to which the function call operation (see section Calls) can be applied:Is the operator for "the function call operatation" ()? So is acallable type  defined as a type whose instances the function calloperator () can be applied to?From https://docs.python.org/3/reference/expressions.html#callsThe primary must evaluate to a callable object (user-defined functions, built-in functions, methods of built-in objects, class  objects, methods of class instances, and all objects having a  __call__() method are callable). Does it mean that a callable type may or might not have a__call__() method? If a class has a __call__() method, then itmust be a callable type? If a class doesn't have a __call__()method, then it might or might not be a callable type?Do "user-defined functions, built-in functions, methods of built-inobjects, class objects, methods of class instances" not have a__call__() method? Are they instances of callable types? Whatspecific types do they have respectively?Thanks.
Is the operator for "the function call operatation" ()? So is a callable type defined as a type whose instances the function call operator () can be applied to?Yes, exactly.Does it mean that a callable type may or might not have a __call__() method? If a class has a __call__() method, then it must be a callable type? If a class doesn't have a __call__() method, then it might or might not be a callable type?For a given object to be a callable, it must define __call__, functions do, for example:staticmethod's or classmethods (to continue from the previous question), don't define __call__:(callable essentially does something like getattr(foo, '__call__', False))Do "user-defined functions, built-in functions, methods of built-in objects, class objects, methods of class instances" not have a call() method? Are they instances of callable types? What specific types do they have respectively?User defined functions (function type, like foo) have __call__. Built-in functions (e.g max) also have __call__, see callable(max).Methods of built-in objects, yes: callable(str.isupper).Class objects, yes (type defines a __call__ for them): Methods of class instances: They are all callable because they define a __call__ special method. That's the only way to make an object callable.As for staticmethods and classmethods, though they usually wrap callables (which they then expose via the descriptor protocol), they themselves are not callable since they don't define a __call__ special method.
Check the definition of Callablethe source codes is as follows:the tricky part is the method of __subclasshook__, so any classes who can find a __call__ method could be treated as a subclass of Callable, instead of inheriting from it directly.PS: not only __subclasshook__ can do this, the register() method can also register another class as a subclass of the base class.


Answer URL
https://docs.python.org/3/reference/datamodel.html
https://docs.python.org/3/reference/expressions.html#calls
