Natural Text
Given a list:What is the Pythonic way to return every nth block of m elements?  Note that this is different from just returning every nth element.Desired result of taking every 1st of 3 blocks of 3 elements (take 3, skip 6, take 3, skip 6...):I can get to this as:Is there a cleaner way?
For a fixed order of select and skip, you can wrap indices taking the modulo on the total length of the window (9 here) and select only those beneath the given threshold, 3:You can make this into a function that makes it more intuitive to use:
Perhaps just writing a simple generator is the most readable This has the advantage of working even if the input is infinite, or not slicable (e.g. data coming in from a socket).  
more_itertools is a third-party library that implements itertools recipes and other helpful tools such as more_itertools.windowed.Codewindowed naturally steps one position per iteration.  Given a new step by advancing beyond the overlaps (m), the windows are appropriately determined.
You can do it using some generic "chunks" recipe:Now that you've windowed you're data as you think of it, use islice's second variant for its' 'step' capabilities:
You can use a list comprehension and create a function that does this for any skip, take and list values:
Using incomprehensible list comprehension :D


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/itertools.html#itertools.islice
