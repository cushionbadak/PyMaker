Natural Text
I have a use case where I would like a Python @property to act differently if called as a method (i.e, with parenthesis at the end) than it would if I called it without the parenthesis. Is anything like this possible.
Well, you could make the getter return a Proxy that either behaves like the value returned from the getter or behaves like a callable in case you call it. That will be ambiguous if you return something that's callable from the getter but in your case you do return integers (uncallable). It's still inadvisable but you could make it work (based on the property emulator mentioned in the Python descriptor how-to):This could be further refined by utilizing a real proxy class (like wrapt.ObjectProxy) instead of the CallableProxy class. But that depends on the availability of such packages. Just in case you have wrapt this is how it would look like:
You need to look at how decorator syntax desugars:becomeswhilebecomesIn the first case, the decorator is a function that is called with the decorated function as an argument. In the second, the decorator is called with 1 as an argument and returns a function that takes the decorated function as a argument.In other words, you are asking if there is a way to define a function dec whose behavior depends on how its return value is used. The function can't look that far into the future.
I don't think there's a way to have @property work this way, but depending on your use case, one possible alternative would be to have the property return something that ducktypes as your value, but is actually a callable returning the value of your function:There is likely additional magic you can do to get a syntax quite similar to the syntax you've described for assigning the __call__() method to the wrapper. This is only useful to the extent that you are willing to have the property return a wrapper of a different type rather than the original value itself, of course.That said, it's probably not a great idea to try to overload a property like this, as it will likely make your code harder to read and understand.


Answer URL
https://docs.python.org/3/howto/descriptor.html#properties
