Natural Text
I know that a Python script can be debugged from the command line withif my_script.py is a script intended to be run with python my_script.py.However, a python module my_module.py should be run with python -m my_module.  Even scripts that contain relative imports should be run with python -m.  How can I run python -m my_module under pdb's control?  The following does not work:
You can't do it now, because -m terminates option listThat means it's mod's job to interpret the rest of the arguments list and this behavior fully depends on how mod is designed internally and whether it support another -mLets check out what's happening inside pdb of python 2.x. Actually, nothing intereseting, it only expects a script name to be supplied:Same for the currently released versions of python 3.xGood newsThe pull request that allows to do what you're asking has been merged 5 days ago. What a mysterious coincidence! Here's the codeSo just wait a bit for the upcoming python 3.x versions to have this issue resolved )
The following script will run a module and break into post-mortem debugging if an exception occurs while running the module. It should work both with Python 2.7 and 3.x.Usage:Known limitations:While running the module code, sys.argv[0] is preserved as the module name, instead of being resolved to the file path of the module.If the target module is not found, the error is not reported any differently than if the error occurred during the execution of the modulemdb.pyDemonstration:
You can add pdb.set_trace() in your code for interactive debugging, before the code you want to debug.Running this will outputAnd let you use python debugger.
According to the python command-line manpage the -m flag does the following:Searches  sys.path for the named module and runs the corresponding .py file as a script.Given this, I would feel confident debugging by running the .py file as per your first example. One thing to keep in mind is that -m searches sys.path. Luckily, python looks at the current working directory first, so as long as the .py you are debugging is in your cwd, python -m module and python module.py equivalent.
Python 3.7 adds that featureFrom the docs, it looks that your command:will start working on Python 3.7:New in version 3.7: pdb.py now accepts a -m option that execute modules similar to the way python3 -m does. As with a script, the debugger will pause execution just before the first line of the module.


Answer URL
https://docs.python.org/3/library/pdb.html
