Natural Text
The following data representation: Is generated from this loop: Based on data that looks, more or less, like so: I've tried to find the maximum value of the second value in each dict, i.e.How can I access all of the second values (the ones that look like u'90000') from that set of nested dictionaries, record and output the max and the min? To precisely define terms: In the example up top, i.e.: I'd like to search on the basis of u'90000', u'40000' and u'21000'- that's what I mean by "second" value. The selection of max I'd like to make would be on the basis of the number alone, so in that case u'90000'. EDIT:Trying to call it in the following way, I generated the error reproduced below: 
Once you have your data in a tractable form, it's a one-liner.In this case, since those dictionaries are obviously records of some sort, the ideal data type is either a custom class or acollections.namedtuple.I went with the namedtuple, since all the values are atomic and immutable.(Also, it comes with many handy features like decent __str__ and __hash__ methods, and it's more efficient too.)All of the effort below is in _as_pairs, which generates immutable key-value pairs from that frustrating list of one-item dictionaries.It also converts the stringified integers(value)into the actual integers you wish they were.After that, using the data is easy.Output (Python 3):I've included a couple suggestions in the comments:Is it important that those dictionaries have exactly one item each?Should those hexadecimal strings(which I called id)also be converted into integers?I can't tell what you're using this for, so I can't answer either of those questions.
Are you constrained to using dictionaries here? A list of tuples might be simpler to use: yields:('0xc3f68d46b9e462110e4897a41b573a10fef72747fd4c9e8413eb2e4cba0af9b5', '21000') for the minimumand('0xffda7269775dcd710565c5e0289a2254c195e006f34cafc80c4a3c89f479606e', '1000000') for the maximumEdit to show example using collections.namedtuple:sorted(dict_hash_gas, key=lambda x: int(x.second))


Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
https://docs.python.org/3/library/collections.html#namedtuple-factory-function-for-tuples-with-named-fields
https://docs.python.org/3/library/functions.html#min
https://docs.python.org/3/library/collections.html#collections.namedtuple
