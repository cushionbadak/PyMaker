Natural Text
I would like to extract an IP and Port from a returned list. I am currently using str(var).replace command to remove extra characters. This will/has cause problems when the string format changes making the .replace command through an errorSo the problem would come if:    [<Device: xxx.xxx.xxx.xxx:xxxx>]Changed to this:    [<now_what: xxx.xxx.xxx.xxx:xxxx>]The dicovery_device() would through and error.What is the best practise to identify an ip/port pattern and extract ip and port without having to rely on the integrity of surrounding characters? From this: [<Device: 192.168.222.123:8075>]To this: 192.168.222.123:8075and preferably: [192.168.222.123, 8075]Taking into consideration IP variances within dot blocks and largest port number based on 16-bit (normally 4 integers after the colon up to 5 integers)
Assuming an IPv4 address, try extracting numbers and critical punctuation.  Then slice the valid result when necessary. Also validating ip addresses may be a safer approach.  In Python 3:CodeDemoFeaturesinsensitive to surrounding charactersip address validation (not IPv6) and exception handlingsafeguard against numbers in the device namevalidate port numbers (optional)DetailsTypically result is a list comprising the ip and an optional port number.  However, in cases where numbers are in the device name, the first index of the result will include unwanted numbers.  Here are examples of result:The exception handling tests for numbers in the device name and validates ip addresses in the first or second indices.  If none are found, an exception is raised.Although validating port numbers is outside the scope of the question, ports are assumed to be a number. A simple test was added to the validate_port decorator, which can be applied or updated as desired. The decorator screens the output from discover_device().  If the port is not a pure number, an exception is raised.  See this post for modifying restrictions.  See this blog for a great tutorial on Python decorators.OptionsIf validation is not a concern, the following code should suffice, provided "." is absent from the device name:If a non-decorator solution is preferred, define the following function:Now pass the return values of discover_device() into the latter function, i.e.return validate_port(result[1:]) and return validate_port(result).Regards to @coder for suggestions.
No regex is needed for this. Use str's builtin method split.If you really want to use a regex, I would use a simple one:
You can simply use a regex to find the IP address, independently from what's before.For example this one :As a test :
I think your best bet is to use regular expressions:If your regex string is (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(?:\:\d{1,5})?), then the breakdown is:\d{1,3}\. looks for between 1 and 3 digits followed by a period(?:\:\d{1,5})? looks for one or zero occurrences of a semicolon followed by between 1 and 5 digits (the ?: specifies that it's a non-capturing group so that it won't be present by itself in your result)If you wanted it to capture the port and IP separately, you could doHere's the regex if you want to play with it.


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.split
