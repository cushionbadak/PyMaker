Natural Text
I have a text file say really_big_file.txt that contains:I would like to write a Python script that divides really_big_file.txt into smaller files with 300 lines each. For example, small_file_300.txt to have lines 1-300, small_file_600 to have lines 301-600, and so on until there are enough small files made to contain all the lines from the big file.I would appreciate any suggestions on the easiest way to accomplish this using Python

Using itertools grouper recipe:The advantage of this method as opposed to storing each line in a list, is that it works with iterables, line by line, so it doesn't have to store each small_file into memory at once.Note that the last file in this case will be small_file_100200 but will only go until line 100000. This happens because fillvalue='', meaning I write out nothing to the file when I don't have any more lines left to write because a group size doesn't divide equally. You can fix this by writing to a temp file and then renaming it after instead of naming it first like I have. Here's how that can be done.This time the fillvalue=None and I go through each line checking for None, when it occurs, I know the process has finished so I subtract 1 from j to not count the filler and then write the file. 

I do this a more understandable way and using less short cuts in order to give you a further understanding of how and why this works. Previous answers work, but if you are not familiar with certain built-in-functions, you will not understand what the function is doing. Because you posted no code I decided to do it this way since you could be unfamiliar with things other than basic python syntax given that the way you phrased the question made it seem as though you did not try nor had any clue as how to approach the questionHere are the steps to do this in basic python:First you should read your file into a list for safekeeping:Second, you need to set up a way of creating the new files by name! I would suggest a loop along with a couple counters:Third, inside that loop you need some nested loops that will save the correct rows into an array:Last thing, again in your first loop you need to write the new file and add your last counter increment so your loop will go through again and write a new filenote: if the number of lines is not divisible by 300, the last file will have a name that does not correspond to the last file line.It is important to understand why these loops work. You have it set so that on the next loop, the name of the file that you write changes because you have the name dependent on a changing variable. This is a very useful scripting tool for file accessing, opening, writing, organizing etc. In case you could not follow what was in what loop, here is the entirety of the function:

I had to do the same with 650000 line files.Use the enumerate index and integer div it (//) with the chunk sizeWhen that number changes close the current file and open a new oneThis is a python3 solution using format strings.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
