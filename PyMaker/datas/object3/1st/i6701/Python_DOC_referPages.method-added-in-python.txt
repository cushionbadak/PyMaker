Natural Text
In Ruby, one can create callbacks for when methods are defined on an object:Does Python have any similar callback?
In Python, methods are just attributes that happen to be callable*. You'd have to hook in to attributes being set to see new methods being added to a class.You'd have to use a metaclass to intercept new attributes being added to a class:which then looks like this:If you wanted to know about the initial set of attributes, the result of executing the class body, then you have two options: use a metaclass, or in Python 3.6 and up, the __init_subclass__ method. Either one is called to create new classes, and can be used to inspect the attributes:or the __init_subclass__ method:You may want to read up on metaclasses at What is a metaclass in Python?*Well, the attributes are functions actually. Functions are descriptor objects, which causes them to be bound when accessed via an instance. That binding process produces a method object, that when called takes the original function and passes in the instance to which it was bound.


Answer URL
https://docs.python.org/3/reference/datamodel.html#metaclasses
https://docs.python.org/3/reference/datamodel.html#customizing-class-creation
https://docs.python.org/3/howto/descriptor.html
