Natural Text
I've got a really useful python method like this:when I want to test it to make sure I called close(), I do:but what do I do when I want to test not calling close when the return value of load_widget_from_file doesn't evaluate to True?If I tried making another unit test with:this would blow up. 
You need to create a second mock object (instead of setting mock_widget = None), but the widget needs to be falsey to prevent the function from entering the if condition.In Python, an object is always "truthy" unless is has a zero-length, or it has a __bool__ method that returns False:object.__bool__(self)Called to implement truth value testing and the built-in operation bool(); should return False or True. When this method is not defined, __len__() is called, if it is defined, and the object is considered true if its result is nonzero. If a class defines neither __len__() nor __bool__(), all its instances are considered true.Probably the "right way" to add a __bool__ method to your mock object would be to use MagicMock, which comes with many of the Python "magic methods" pre-defined. But you'll also have to change the return value to False, like so:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__bool__
