Natural Text
I am working through a problem that requires me to compare elements in a dictionary containing words as keys and lists of words as values. See example below. I would like to return a new dictionary which contains keys that match the values of other keys in the dictionary. My code below is incorrect, I think because it is only considering each key-value pair independently and comparing items within those pairs only. Is there a way to iterate across keys to get the desired result? My desired result is shown below.  Thank you for your help. 
Try with:Multiple for is because you have a [['mitt', 'ball', 'bat']] bidimensional list.Maybe is more clear using setEDITYou post the antoher example dict without bidemensional values in dict, the sol is simple, delete a for like:
The following works for me:Essentially, you check all the values against the list of keys, excluding the current key. If you want the returned dict to contain more than one value, use lists or sets:and append the values
If your problem statement is correct, then your trouble lies in the fact that your test_dict is a dictionary mapping strings to lists of lists instead of mapping them to a list of words.Your find_matches function iterates over the dictionary, placing the string key into key and the list-of-lists-of-words into value. You then try to iterate over value. But of course if value is set to then when you do the variable word will take on the value ['gum', 'glove', 'knee'] and then the loop will end, because value only contains one element - a sublist of three words.You can confirm this by printing key and then printing each word in your loop - I expect you will only see one line, with a list of words.To fix this, ideally you would change the format of your dictionary. Why store a list of 1 list of words? Why not just store a list-of-words directly?If that is impossible for some reason, then you will need to decide how to proceed: if there are more than one list-of-words, do you want to scan them all, or only the first such list?
You can actually solve this problem with a dict comprehension. You just need to iterate over the names and lists in test_dict until you find a name which is both in the dict and a list:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#sets
