Natural Text
Why does this not work (values are not swapped):But this works (values are swapped):
The reason why the first example is not working is because you are calling .index() multiple times, and after each time, the values in the list are changing, so the indices found in the code are not representative of the actual locations of the elements. The second example works because you have stored the first indices in two variables, and use both in the swap.Overview of first example:First part: lol[lol.index("test")] stores 0Second part: lol[lol.index("test2")] stores 1Third part: lol[lol.index("test2")] still stores 1This is when it gets interesting. The forth part of the example, lol[lol.index("test")], finds the index of test, however, test was assigned 1 from the third segment of the code. Therefore, lol[lol.index("test")] is 1, not 0. Consequently, lol[lol.index("test2")] still stores 1.
ExplanationIt all comes down to understand properly how the evaluation order works here, in particular the case expr3, expr4 = expr1, expr2.If we step through the statement lol[lol.index("test")], lol[lol.index("test2")] = lol[lol.index("test2")], lol[lol.index("test")] we'd get something like this:The other snippet is trivial:Oneliner alternativesSomething like these ones should do:Aditional notesIf you really want to know more about how these functions are really interpreted, a very good way to do so is by using the module dis, for example:
Because X,Y="test","test2" will get handled as X="test";Y="test2"First the right handed side will get evaluated, so you get:which will have the same effect as the following lines:


Answer URL
https://docs.python.org/3/reference/expressions.html#evaluation-order
