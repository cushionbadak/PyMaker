Natural Text
There is a json like this:How can I find all P1's value without it iterating all json?PS:P1 can be anywhere in json.If no method can do this, can you tell me how to iterate through the json?
My approach to this problem would be different.As JSON doesn't allow depth first search, so convert the json to a Python Object, feed it to an XML decoder and then extract the Node you are intending to search
As I said in my other answer, I don't think there is a way of finding all values associated with the "P1" key without iterating over the whole structure. However I've come up with even better way to do that which came to me while looking at the accepted answer to a different question How to get string objects instead of Unicode from JSON?The basic idea is to use the object_hook parameter that json.loads() accepts just to watch what is being decoded and check for the sought-after value. Note: This will only work if the representation is of a JSON Object (i.e. something enclosed in curly braces {}), as in your sample json.Output:
I had the same issue just the other day. I wound up just searching through the entire object and accounted for both lists and dicts. The following snippets allows you to search for the first occurrence of a multiple keys.It returns a dict with the keys being the keys searched for. Haystack is expected to be a Python object already, so you have to do json.loads before passing it to deep_search.Any comments for optimization are welcomed!
Using json to convert the json to Python objects and then going through recursively works best.  This example does include going through lists.
Converting the JSON to Python and recursively searching is by far the easiest:(where a is the string)The example code ignores arrays.  Adding that is left as an exercise.
I don't think there's any way of finding all values associated with P1 without iterating over the whole structure. Here's a recursive way to do it that first deserializes the json object in a file into an equivalent Python object. To simplify things most of the work is done via a private nested function.
Bearing in mind that json is simply a string, using regular expressions with look-ahead and look-behind can accomplish this task very quickly.Typically, the json would have been extracted from a request to external api, so code to show how that would work has been included but commented out.
You could also use a generator to search the object after json.load().Code example from my answer here: https://stackoverflow.com/a/39016088/5250939


Answer URL
https://docs.python.org/3/library/xmlrpc.client.html
