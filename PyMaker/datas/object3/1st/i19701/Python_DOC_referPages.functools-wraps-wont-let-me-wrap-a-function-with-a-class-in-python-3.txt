Natural Text
I want to write a decorator for some functions that take file as the first argument. The decorator has to implement the context manager protocol (i.e. turn the wrapped function into a context manager), so I figured I needed to wrap the function with a class.I'm not really experienced with the decorator pattern and have never implemented a context manager before, but what I wrote works in Python 2.7 and it also works in Python 3.3 if I comment out the wraps line.The error I get when uncommenting the wraps line occurs inside update_wrapper:I know the docs don't say that I even can use functools.wraps to wrap a function with a class like this, but then again, it just works in Python 2. Can someone please explain what exactly this traceback is telling me and what I should do to achieve the effects of wraps on both versions of Python?EDIT: I was mistaken. The code above does not do what I want it to. I want to be able to use the function both with and without with, like the builtin open.The code above turns the decorated function into a context manager. I want to be able to do:as well asSo my version of the code should probably look approximately as follows:Feel free to comment about anything I have overlooked.Note: the class version by J.F. Sebastian seems to work then:I basically removed the wraps from the class and changed return CManager to:
functools.wraps() is for wrapper functions:ExampleIf you want to use a class-based context manager then a workaround is:To make it behave identically whether the decorated function is used directly or as a context manager you should return self in __enter__():Example
Although I don't know what the error you're seeing is from, it looks like you are probably doomed anyway:Edit: J.F. Sebastian has the solution, but i'm leaving this bit as exposition on why it must be a function and not a class


Answer URL
