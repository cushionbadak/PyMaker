Natural Text
I'm new to the site and to python so I hope I'm giving all the required information. I've already searched for this question but none of the solutions seem to work for me.I'm trying to create a function that reads some text and returns the amount of digits it contains. For example:"It is 2012" , should return "Text has 4 digits"If there are no digits, it should return a different message such as:"It is Monday" , should return "Text does not contain digits"So I wrote this:The functions seem to be OK however, the prints turn out wrong, for example:When I only input text:When I input text and numbers (but text first):I know my error lies in the blocks, (I think), but I haven't figured out a way because when I use return, it stops before it finished to read the text. I've tried about 20+ different things, please help me !Thank you !!P.S. I need this to work as a .py and not just in the IDLE (Python Shell) window, that's why I'm writing the blocks like this.
I just solved your codes problems:
The issue is you are printing the "Text does not contain digits" message every time you encounter a non-digit character. Try moving that print statement to after the loop when you know how many characters there are:Edit: A couple more points towards good Python code:As noted in the comments of your question, by convention, functions/methods in Python are named in lower case with underscores, i.e., count_numbers not CountNumbers.Pedantic mode: you are counting the digits in the string, not numbers, so it should really be named count_digits for clarity.There is a built-in Python function called sum. It is considered bad practice to shadow this function by having a variable of the same name. I'd rename your sum variable to count.There is no need to surround a function call in parentheses (it doesn't do any harm, apart from making it look bad IMHO).With these changes, your code becomes:
Early returns are quite alright and can greatly simplify the code:This function returns as soon as a non-digit character appears, or prints the length of the input string (which is made of nothing but digits).You could also write that with a "generation expression" like:Now, Python functions more typically return values and let the calling code act on it. This version returns the strings and lets the "main" part of your program print the results. It also renames the function to all lowercase (Python usually uses capitalized names for classes):Hmmm, not too shabby! But Python also has nifty conditional expressions like:Finally, maybe you'll want to make that into a proper module so other code can use it. Wrap the interactive part of your program like this and it will only execute if you're running it like a command line script, but not if your importing it as a module:If I were writing that function as part of a production system, that's pretty close to how it'd look. Notice that the logic is identical to your first attempt. The biggest difference is that this version lets Python do most of the work.
A slightly more pythonic reworking of the original. Personally, I find the 'list comprehension' form a little easier to read (unless it's nested):


Answer URL
