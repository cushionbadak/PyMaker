Natural Text
I'm using python3.3.I want to get a slice object and use it to make a new range object.It goes something like that:Well, the problem is obvious here - range doesn't accept None as a value:But what is not obvious (to me) is the solution. How will I call range so it will work in every case?I'm searching for a nice pythonic way to do it.Thanks :)
TryThis will reinterpret .start and .step appropriately if they are None.Another option could be the .indices() method of a slice. It is called with the number of entries and reinterprets None to the appropriate values and wraps negative values around the given length parameter:It depends what you intend to do with negative indices...
There's an easier way to do this (at least in 3.4, I don't have 3.3 at the moment, and I don't see it in the changelog).Assuming your class already has a known length you can just slice a range of that size:If you don't know the length a priori you'll have to do:
The problem:A slice consists of start, stop, and step parameters and can be created with either slice notation or using the slice  built-in.  Any (or all) of the start, stop, and step parameters can be None.However, as pointed out in the original question, the range function does not accept None arguments.  You can get around this in various ways...The solutionsWith conditional logic:...which can get unnecessarily complex since any or all of the parameters may be None.With conditional variables:... which is explicit, but a little verbose.With conditionals directly in the statement:... which is also unnecessarily verbose.With a function or lambda statement:...which can be difficult to understand.With 'or':I find using or to assign sensible default values the simplest. It's explicit, simple, clear, and concise.Rounding out the implementationTo complete the implementation you should also handle integer indexes (int, long, etc) by checking isinstance(item, numbers.Integral) (see int vs numbers.Integral).Define __len__ to allow for using len(self) for a default stop value.Finally raise an appropriate TypeError for invalid indexes (e.g. strings, etc).TL;DR;
I would special-case the item.step is None branch:and you'll handle ranges that need to count down correctly.
In your last example a[1:5], item.step == None and you are trying to do range(1, 5, None), which of course causes the error. Fast way to fix:But it is just to show you your problem. It is not the best approach.


Answer URL
https://docs.python.org/3/library/functions.html#slice
