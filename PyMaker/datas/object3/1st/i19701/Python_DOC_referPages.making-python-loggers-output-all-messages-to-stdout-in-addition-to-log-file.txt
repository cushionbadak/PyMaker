Natural Text
Is there a way to make Python logging using the logging module automatically output things to stdout in addition to the log file where they are supposed to go? For example, I'd like all calls to logger.warning, logger.critical, logger.error to go to their intended places but in addition always be copied to stdout. This is to avoid duplicating messages like:
All logging output is handled by the handlers; just add a logging.StreamHandler() to the root logger.Here's an example configuring a stream handler (using stdout instead of the default stderr) and adding it to the root logger:
the simplest way:
It's possible using multiple handlers.Please see: https://docs.python.org/2/howto/logging-cookbook.html
You could create two handlers for file and stdout and then create one logger with handlers argument to basicConfig. It could be useful if you have the same log_level and format output for both handlers:
The simplest way to log to file and to stderr:
Since no one has shared a neat two liner, I will share my own:
Here is a solution based on the dictConfig configuration function.Instead of sending every log message to stdout, it sends messages with log level ERROR and higher to stderr and everything else to stdout.This can be useful if other parts of the system are listening to stderr/stdout.
Take a look to the loguru module.
Here's an extremely simple example:The output will show "test msg" on stdout and also in the file.


Answer URL
https://docs.python.org/3/library/logging.html#logging.basicConfig
https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig
