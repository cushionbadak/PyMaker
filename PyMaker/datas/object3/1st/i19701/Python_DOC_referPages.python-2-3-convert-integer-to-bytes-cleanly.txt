Natural Text
The shortest ways I have found:I am particularly concerned with two factors: readability and portability.  The second method, for Python 3, is ugly.  However, I think it may be backwards compatible.Is there a shorter, cleaner way that I have missed?  I currently make a lambda expression to fix it with a new function, but maybe that's unnecessary.
To convert a string to a sequence of bytes in either Python 2 or Python 3, you use the string's encode method. If you don't supply an encoding parameter 'ascii' is used, which will always be good enough for numeric digits.Python 2: http://ideone.com/Y05zVYPython 3: http://ideone.com/XqFyOjIn Python 2 str(n) already produces bytes; the encode will do a double conversion as this string is implicitly converted to Unicode and back again to bytes. It's unnecessary work, but it's harmless and is completely compatible with Python 3.Above is the answer to the question that was actually asked, which was to produce a string of ASCII bytes. But since people keep coming here trying to get the answer to a different question, I'll answer that question too. If you want to convert 10 to b'10' use the answer above, but if you want to convert 10 to b'\x0a\x00\x00\x00' then keep reading.The struct module was specifically provided for converting between various types and their binary representation as a sequence of bytes. The conversion from a type to bytes is done with struct.pack. There's a format parameter fmt that determines which conversion it should perform. For a 4-byte integer, that would be i for signed numbers or I for unsigned numbers. For more possibilities see the format character table, and see the byte order, size, and alignment table for options when the output is more than a single byte.
You can use the struct's pack:The ">" is the byte-order (big-endian) and the "I" is the format character. So you can be specific if you want to do something else:This works the same on both python 2 and python 3.Note: the inverse operation (bytes to int) can be done with unpack.
I have found the only reliable, portable method to beJust bytes([n]) does not work in python 2.  Taking the scenic route through bytearray seems like the only reasonable solution.  
Converting an int to a byte in Python 3:;) guess that'll be better than messing around with stringssource: http://docs.python.org/3/library/stdtypes.html#binaryseq
from int to byte:where the lenth is 1/2/3/4...., and endian could be 'big' or 'little'form bytes to int:
In Python 3.x, you can convert an integer value (including large ones, which the other answers don't allow for) into a series of bytes like this:


Answer URL
https://docs.python.org/3/library/struct.html
https://docs.python.org/3/library/struct.html#struct.pack
https://docs.python.org/3/library/struct.html#format-characters
https://docs.python.org/3/library/struct.html#byte-order-size-and-alignment
https://docs.python.org/3/library/struct.html
