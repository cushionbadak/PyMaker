Natural Text
I've log files containing all sort of junk as well as useful data.I'm extracting some information by matching certain patterns and able to get in following format while reading the file line by line in python and applying some if statements Now the issue is the same log set repeats with same job ids (with different values)If there is some smart way of writing in a file/csv in a tabular format such that by only looking at job_id, it presents all Bin1, Bin2 jobs per set, Right now it is basically lot of duplication, same job comes again with a different set of values like job#33ABC keep coming 10,11 times with different valuesI'm reading that log line by lineUPDATEI tried using a dictionary likebut it is presenting in following format;My question is how can i identify and present like         33ABC, " ['30.86','30.86',,'99.0','1099',, ] Since there has to be 4 job bins, right now it is taking all values as one large list, instead of breaking into 4, 4 bins or is there any way of doing that in current logic?
Putting the issue of IO aside, you could use a defaultdict for easy logistics. Or a defaultdict of defaultdicts to be precise.Your outer dict can have keys corresponding to job names. The value for each job name is a dict itself, with keys corresponding to bin names. So for each job name and key name you try to append an element to the value of the inner dict. If the bin had come up by then, the value gets appended. If the bin is new, the default empty list is used, and the first value is appended (defaultdicts are only needed to avoid testing for existing keys all the time):This will returnYou can see that values are collected across job and bin names. You can perform the writing according to your taste, but I don't think a CSV makes sense in this context. You probably have to use a printer of your own.You just have to loop over logs first, this will give you the unique job names (the keys), then loop over each bin for the given job, then print the lists of values:The output from the above iswhich is what we'd expect.


Answer URL
https://docs.python.org/3/library/collections.html#defaultdict-objects
https://docs.python.org/3/library/collections.html#defaultdict-examples
