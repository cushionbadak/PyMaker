Natural Text
I created the empty abstract class AbstractStorage and inherited the Storage class from it:I expected the output to behowever, the one I'm getting isThe problem (apparently) goes away if I remove metaclass=abc.ABCMeta (so that AbstractStorage becomes an ordinary class) and/or if I set dbh to some other value. What's going on here?
This isn't really a problem with ABCs, it's a problem with PyMongo.  There is an issue about it here.  It seems that pymongo overrides __getattr__ to return some sort of database class.  This means that host.__isabstractmethod__ returns a Database object, which is true in a boolean context.  This cause ABCMeta to believe that host is an abstract method:The workaround described in the issue report is to manually set host.__isabstractmethod__ = False on your object.  The last comment on the issue suggests a fix has been put in for pymongo 3.0.
Short Versionmongo.MongoClient returns an object that appears to be (is?) an abstract method, which you then assign to the dbh field in Storage.  This makes Storage an abstract class, so instantiating it raises a TypeError.Note that I don't have pymongo, so I can't tell you anything more about MongoClient than how it gets treated by ABCMeta.Long VersionThe ABCMeta.__new__ method looks inside each field of the new class it's creating.  Any field that itself has a True (or "true-like")  __isabstractmethod__ field is considered an abstract method.  If a class has any non-overridden abstract methods, the whole class is considered abstract, so any attempt to instantiate it is an error.From an earlier version of the standard library's abc.py:This is not mentioned in the abc.ABCMeta class docs, but a bit lower, under the @abc.abstractmethod decorator:In order to correctly interoperate with the abstract base class machinery, the descriptor must identify itself as abstract using __isabstractmethod__.  In general, this attribute should be True if any of the methods used to compose the descriptor are abstract.ExampleI created a bogus "abstract-looking" class with an __isabstractmethod__ attribute, and two supposedly-concrete subclasses of AbstractStorage.  You'll see that one produces the exact error you're getting:Running this produces:


Answer URL
https://docs.python.org/3/library/abc.html#abc.abstractmethod
