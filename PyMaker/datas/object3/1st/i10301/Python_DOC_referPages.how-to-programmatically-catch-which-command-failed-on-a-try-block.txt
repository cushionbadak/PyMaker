Natural Text
I'm trying to get some data from an JSON API. I don't want all the data that the API returns so I wrote a method that reads all the data and returns a dictionary with the relevant fields. Sometimes though, some data are missing and I would like to replace the fields that are missing with an underscore. A sample of the method is like that;  If a field is missing from the data, this throughs a KeyError. Is it possible to catch programmatically which field produced the error, in a single try-except block and not write a try-except block for every field?instead of  Thank you
Use .get method of dict:.get returns its second argument (None by default) if a dict doesn't have requested key, so it is always safe to use it in uncertain situations. Example:
You can probably get that information from the members of the KeyError exception object, but a simpler way would be to just use get() that will return a default value if the key is not there.Another reason this is better than handling an exception is that you can only handle one exception. What happens if two keys are missing? And on top of that, ret_dict will not even be defined in your example because the code failed.
Instead of using try block, you can use dict.get(key, default_val)For example:
If you want to avoid the repetitiveness of typing .get(attr, '_') for each key, you can use a defaultdict, setting it to return _ when a key is trying to be accessed but missing.


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.get
https://docs.python.org/3/library/stdtypes.html#mapping-types-dict
https://docs.python.org/3/library/collections.html#collections.defaultdict
