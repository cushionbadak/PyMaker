Natural Text
I'm building a class that inherits OrderedDict, in which every key returns a list. I'm looking to overload setitem such that if the key doesn't exist, new assignments immediately put the value into a list, otherwise the new value is appended to the list. The following seems to be working:which prints:Instead of appending with an assignment operator '=', I would rather have new items be appended with '+=', or even something like:How would one go about overloading this? Besides being possible to monkey patch an add function, is it even a Pythonic/readable means to alter class behavior, or is this acceptable because the inherited function (OrderedDict) is untouched?
You can already use += on existing keys:Note that += on a list is basically the same thing as list.extend(), so you need to append lists.If you want this to work for keys that don't exist yet, implement a __missing__ method, rather than __setitem__:When a key is missing during dict[key] lookup, __missing__ is called and it's return value is returned instead of raising a KeyError.Now both + and += work on missing keys too:If you concatenation must work without adding lists, you could produce a custom list subclass too:then use that type in __missing__ (and convert any new lists set directly in __setitem__):after which you can forgo brackets:
I've extended Martijn's ListDict so you can provide default_factory and have a similar to collections.defaultdict's functionality + key ordering:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__missing__
https://docs.python.org/3/library/collections.html#collections.defaultdict
