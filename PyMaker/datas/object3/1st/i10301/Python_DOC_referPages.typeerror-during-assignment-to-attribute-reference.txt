Natural Text
Reading about Assignment statements in the Python's docs I found this:If the target is an attribute reference: The primary expression in the reference is evaluated. It should yield an object with assignable attributes; if this is not the case, TypeError is raised. That object is then asked to assign the assigned object to the given attribute; if it cannot perform the assignment, it raises an exception (usually but not necessarily AttributeError).I'm wondering how to get this TypeError?What Python's types doesn't have routine for setting attributes?
This documentation line is just really out of date. It dates back to at least Python 1.4, long before type/class unification. I believe back then, trying to do something likewould have produced a TypeError, but I wasn't writing Python back then, and I don't have a sufficiently ancient interpreter version to test it.If you look at the source code for attribute assignment dispatch, you can see that the documented check still exists:If an object's type has no routine for setting attributes, Python raises an error, complaining about "no attributes" or "only read-only attributes" depending on whether the type has a routine for getting attributes. I believe in the early days, types like int would have gone down this code path. However, all types now inherit such routines from object, so I don't think this code path is ever taken.There's a related code path in type.__setattr__ that raises a TypeError for setting attributes on types written in C. This code path is still taken, but it's not as general as what the documentation describes:
This code produces a TypeError and it seems like it is what the documentation describes:But is this TypeError really raised because the documentation says that? I sincerely doubt it. I guess func_globals implementation simply raises TypeError if you try to assign something to it.BTW...I would actually excpect the same in the next example, but it is an AttributeError instead:Update (Python 3)The above was in Python 2.7. In Python 3, there is no func_globals, so this is not applicable (you can assign anything to it).What attributes function has in Python 3 seem to raise an AttributeError when it is read-only.This makes perfect sense to me. Perhaps this part of the documentation is just a relic as far as Python 3 is concerned.
If you want to raise TypeError in your code:I suggest you read up on exceptions and exception handling in Python for more information. https://docs.python.org/3/tutorial/errors.html 


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#assignment-statements
https://docs.python.org/3/tutorial/errors.html
