Natural Text
I'm doing a little deep learning, and I want to grab the values of all hidden layers.  So I end up writing functions like this:If I didn't have to get the intermediate values, I'd use the much less verbose form:Bam.  All one line, nice and compact.  But I can't keep any of the intermediate values.So, what is there any way to have my cake (nice compact one-liner) and eat it too (return intermediate values)?Edit:  My conclusions so far:In Python 2.x, there is no clean one-liner for this.In Python 3, there is itertools.accumulate, but it is still not really clean because it doesn't accept an "initial" input, as reduce does.In Python 4, I hereby request a "map-reduce comprehension":  Which would also give a useful job to that from keyword, which normally just sits around doing nothing after all the imports are done.
In general, itertools.accumulate() will do what reduce() does but will give you the intermediate values as well.  That said, accumulate does not support start value so it make not be applicable in your case.Example:
The dot tells me you are using one or more numpy arrays.  So I'll try:In py3 I have to write the reduce solution as:That intermediate value u that is passed from one evaluation to the next makes a list comprehension tricky.accumulate uses the first item as the start.  I can work around that with a function likeThen I need to add extra start values to ws and bs:Here's a list comprehension version, using an external u:No real advantage over the original loop with append.numpy.ufunc have an accumulate method, but that isn't easy to use with custom Python functions.  So there is a  np.maximum.accumulate, but I'm not sure how that could be used in this case.  (also np.cumsum which is np.add.accumulate).
In Python 2.x, there is no clean one-liner for this.  In Python 3, there is itertools.accumulate, but it is still not really clean because it doesn't accept an "initial" input, as reduce does.  Here is a function that, while not as nice as a built-in comprehension syntax, does the job.Tests:


Answer URL
https://docs.python.org/3/library/itertools.html#module-itertools
https://docs.python.org/3/library/functools.html#functools.reduce
