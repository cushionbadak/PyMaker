Natural Text
User data, as follows:is sent to an application via json. In many places in the code the following it done:which leads me to believe a function should be used:which in turn leads me to believe that the code should be refactored with the use of a User class instead, with a name method. Do you agree and is there any argument for not refactoring the code to use a class instead?
I'm sure you are hesitant to use classes because of the need to write boilerplate code.But there's a nice library that may make your life easier: attrs.Glyph has a post with a self-speaking title: The One Python Library Everyone Needs. Of course, it's an opinionated piece, but here's a quote from its Examples page:By default, all features are added, so you immediately have a fully functional data class with a nice repr string and comparison methods.It's a quite handy library, so check it out.Here's an example of your User class:
Dictionaries are great for storage and retrieval, but if you need more functionality on top of that, a class is usually the way to go. That way you can also assure certain attributes are set, etc.For your situation, if a user's attributes are read-only, my approach would actually be using namedtuple. You get immutability of attributes, memory efficiency, and you can still set name to a pre-defined method to be used just like you'd use property on a class:


Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
