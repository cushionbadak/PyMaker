Natural Text
I'm trying to get only the first 100 rows of a csv.gz file that has over 4 million rows in Python. I also want information on the # of columns and the headers of each. How can I do this? I looked at python: read lines from compressed text files to figure out how to open the file but I'm struggling to figure out how to actually print the first 100 rows and get some metadata on the information in the columns. I found this Read first N lines of a file in python but not sure how to marry this to opening the csv.gz file and reading it without saving an uncompressed csv file. I have written this code:I'm new to Python and I don't understand the results. I'm sure my code is wrong and I've been trying to debug it but I don't know which documentation to look at. I get these results (and it keeps going down the console - this is an excerpt): 
Pretty much what you've already done, except read_csv also has nrows where you can specify the number of rows you want from the data set.Additionally, to prevent the errors you were getting, you can set error_bad_lines to False. You'll still get warnings (if that bothers you, set warn_bad_lines to False as well). These are there to indicate inconsistency in how your dataset is filled out.You can easily do something similar with the csv built-in library, but it'll require a for loop to iterate over the data, has shown in other examples.
I think you could do something like this (from the gzip module examples)
The first answer you linked suggests using gzip.GzipFile - this gives you a file-like object that decompresses for you on the fly.Now you just need some way to parse csv data out of a file-like object ... like csv.reader.The csv.reader object will give you a list of fieldnames, so you know the columns, their names, and how many there are.Then you need to get the first 100 csv row objects, which will work exactly like in the second question you linked, and each of those 100 objects will be a list of fields.So far this is all covered in your linked questions, apart from knowing about the existence of the csv module, which is listed in the library index.
Your code is OK;pandas read_csvwarn_bad_lines : boolean, default True 


Answer URL
https://docs.python.org/3/library/gzip.html#examples-of-usage
https://docs.python.org/3/library/gzip.html#gzip.GzipFile
https://docs.python.org/3/library/csv.html#csv.reader
https://docs.python.org/3/library/index.html
