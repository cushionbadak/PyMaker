Natural Text
Having a raised exception I would like to jump into that frame. To explain better what I mean I wrote this mwe:Assuming I have the following code:which unsurprisingly leads to:Now to debug the problem I would like to "jump" into the frame which originally raised the exception (ZeroDivisionError). The original exception is still available under self._value complete with self._value.__traceback__.
The call that pm (or post_mortem) calls is from the value field of sys.exc_info, and the default invocation of post_mortem is done on the __traceback__ of that value.  However if you want to get to the underlying object, you want to access its __context__ instead.  Given this code example:Running the code.  The main_ex would be analogous to your self._value.Note we have a new pdb prompt at the same location, which is where the exception was originally raised.  Let's try it with __context__ if we need to go further up:If needed, keep repeating until you get to the target context/traceback desired.Now for the multiprocessing case, which I wasn't aware would have made this much difference, as the question implies something general (How can I “jump” into stackframe from exception?), but it turns out the specifics in multiprocessing made all the difference.In Python 3.4 a workaround was done to just show that traceback as a string; due to how much stuff a traceback actually has, communicating all that proved to be difficult as discussed in the issue 13831 on the Python tracker, so instead a hack was done to bring a __cause__ attribute into the current exception, but it is no full __traceback__ as it just has the string representation of that, as I had suspected.Anyway this is what would have happened:So this isn't actually possible until they figure out how to bring all those states across process boundaries.


Answer URL
https://docs.python.org/3/library/sys.html#sys.exc_info
