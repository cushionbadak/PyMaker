Natural Text
How can I create a wrapper that makes celery tasks look like asyncio.Task? Or is there a better way to integrate Celery with asyncio?@asksol, the creator of Celery, said this::It's quite common to use Celery as a distributed layer on top of async I/O frameworks (top tip: routing CPU-bound tasks to a prefork worker means they will not block your event loop).But I could not find any code examples specifically for asyncio framework.
That will be possible from Celery version 5.0 as stated in the official site:http://docs.celeryproject.org/en/4.0/whatsnew-4.0.html#prefaceThe next major version of Celery will support Python 3.5 only, were we are planning to take advantage of the new asyncio library.Dropping support for Python 2 will enable us to remove massive amounts of compatibility code, and going with Python 3.5 allows us to take advantage of typing, async/await, asyncio, and similar concepts thereâ€™s no alternative for in older versions.The above were quoted from the previous link.So the best thing to do is wait for version 5.0 to be distributed!In the mean time, happy coding :)
You can wrap any blocking call into a Task using run_in_executor as described in documentation, I also added in the example a custom timeout:
The cleanest way I've found to do this is to wrap the async function in asgiref.sync.async_to_sync (from asgiref):I pulled this example from a blog post I wrote.


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.run_in_executor
https://docs.python.org/3/library/asyncio-task.html#asyncio.wait_for
