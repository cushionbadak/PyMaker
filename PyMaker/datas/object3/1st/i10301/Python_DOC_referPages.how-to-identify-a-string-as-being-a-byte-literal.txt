Natural Text
In Python 3, if I have a string such that:yields something like this:I know it's a byte literal. Is there a function that can be used to determine if that string is in byte literal format (versus having, say, the Unicode 'u' prefix) without first interpreting? Or is there another best practice for handling this? I have a situation wherein getting a byte literal string needs to be dealt with differently than if it's in Unicode. In theory, something like this:
The easiest and, arguably, best way to do this would be by utilizing the built-in isinstance with the bytes type:Since, a byte literal will always be an instance of bytes, isinstance(some_str, bytes) will, of course, evaluate to True.
Just to complement the other answer, the built-in type also gives you this information. You can use it with is and the corresponding type to check accordingly.For example, in Python 3:


Answer URL
https://docs.python.org/3/library/functions.html#isinstance
https://docs.python.org/3/library/functions.html#type
https://docs.python.org/3/library/functions.html#isinstance
