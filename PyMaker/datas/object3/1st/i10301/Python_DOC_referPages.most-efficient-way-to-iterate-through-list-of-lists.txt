Natural Text
I'm currently collecting data from quandl and is saved as a list of lists. The list looks something like this (Price data):This is typically 1 of about 5000 lists, and every once in awhile Quandl will spit back some NaN values that don't like being saved into the database.What would be the most efficient way of iterating through the list of lists to change 'nan' values into zeros?I know I could do something like this, but it seems rather inefficient. This operation will need to be performed on 11 different values * 5000 different dates * 500 companies:I would be interested in any solution that could reduce the time. I know DataFrames might work, but not sure how it would solve the NaN issue.Or if there is a way to include NaN values in an SQLServer5.6 database along with floats, changing the database is also a viable option.
Don't create a new list - rather, edit the old list in-place:The only way I can think of, to make this faster, would be with multiprocessing
I haven't timed it but have you tried using nested list comprehension with conditional expressionsÂ ?For example:I did not use math.isnan(y) because you have to be sure that y is a float number or you'll get an error. This is much more difficult to do while almost everything has a string representation. But I still made sure that I did the lower case comparison to 'nan' (with .lower()) since 'NaN' or 'Nan' are legal ways to express "Not a Number". 
how about this(the return is optional, as the modification was made in-place, but it is needed if used with map or similar, assuming of course that data_list is well a list or similar container)depending on how you get your data and how you work with it will determined how to use it, for instance if you do something like thisyou can change it toor use map or if you are in python 2 imapthat way you get to work with your data as soon as that arrive from the database/Quandl/whatever, granted if the place where you get the data also work as a generator, that is don't process the whole thing all at once, and if it does, procure to change it to a generator if possible. In either case with this you get to work with your data as soon as possible.


Answer URL
https://docs.python.org/3/library/functions.html#map
