Natural Text
I'm halfway through my logistic regression model program and I'm stuck on gradient descent function. I'm translating from Matlab to Python. This is the code for it I got in Matlab (working):And this is my translation to Python:Apparently, I got the value of w correct, the func_values aren't fine though. I think the problem is in the [~, grad] etc. translation. I've been looking for it but haven't found anything on it yet; how could I properly translate ~ from Matlab to Python? I assume it's skipping rows and assigning columns only to grad, and then, in [L, ~] it's assigning rows to L and skipping columns. If I'm wrong, let me know! The error I get is:Why is it out of range? There was no range assigned to func_values yet. I've tried [i, 0] as well, producing this error:Any ideas? 
One of the main differences between MATLAB and Python is that in MATLAB, arrays will automatically resize themselves to fit your data. I.e., will create a 10x1 matrix for you and put 3 in that position. While this is super convenient, its actually pretty bad practice: array resizing takes a lot of computational overhead. MATLAB will sometimes warn you about it when it sees it happening, with the message "consider pre-allocating for speed".In python, you're forced to do the preallocation. With that in mind, your function should look more like the following:An aside, your function in MATLAB seems pretty inefficient: you calculate val, grad twice for every value of w, just to get the extra func_value at the end. This version will return a slightly offset version of func_values with only one evaluation per w, with a bit more code you could get the same answer out.Edit: func_values should now match the MATLAB version...
You have not adequately understood non matlab languages enough to know what you are doing.  You need to learn more about python before you attempt this problem, you make many mistakes that wouldn't be made if you understood the language well enough.  To help I'll go through my parsing of your code and what is wrong with your python.   Given that you know matlab, you should be able to merely go through this official python tutorial to understand all the constructs of the python language to a degree in which you could do this conversion properly.  Going through this tutorial should only take a weekend, if that, and will teach you all the basics of the language.  Its made for people who already know a language already. To go over what has happened here, you have made a matlab function, called gradient_descent which takes in four parameters and returns two values, w and func_values. Now onto the python, you've defined a function gradient descent that takes four parameters, and returns w and func_values. You need to go over python's rules badly.  You can't just copy and paste matlab and expect it to work.  Fixing the issues I raised above will fix your program assuming your objective function, w0, ecpochs and eta are all proper. You'll need to implement the array based subtraction and element wise multiplication yourself unless you use Numpy. You'll need to do something like this:


Answer URL
https://docs.python.org/3/tutorial/
