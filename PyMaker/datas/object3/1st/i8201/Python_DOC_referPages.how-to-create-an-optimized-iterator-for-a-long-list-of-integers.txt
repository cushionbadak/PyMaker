Natural Text
Say I have a very large list of integers that occupies a very large amount of memory. If the list's integers were in even increments, I could then easily express the list as an iterator occupying comparatively no memory. But with more complicated patterns, it would become more difficult to express this list as an iterator.Is there a Python package that can analyze a list of integers and return an "optimized" iterator? Or methodologies I can look into to accomplish this?
My proof of concept, using lzma library (backport for python 2) with compression to memory. Instead of memory buffer you can use file on disk:Result:
I agree with Efron Licht, clearly: It entirely depends on complexity of particular list to compact (not to say 'compress'). Unless your lists are simple enought to express as generators, your only choice is to use Bartek Jablonski answer.
A generator is what you are looking for. You can encapsulate all the custom logic inside. The question is a bit vague, so might help knowing if this aids you
This is very easy - just wrap your filtered iterator with a generator, e.g.:


Answer URL
https://docs.python.org/3/library/lzma.html
