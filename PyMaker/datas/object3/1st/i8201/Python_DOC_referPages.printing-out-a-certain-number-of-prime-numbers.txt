Natural Text
I am trying to print out a number of prime numbers that the user inputs, e.g if the user inputs 10 it will print out the first 10 prime numbers.Here are my instructions.
Steps: Initialize counter to first prime plus one. Check if the number you are checking is not divisable by a previous prime number. If not, add this number to the list of prime number. Add +2 to counter to avoid even number.Edit: This solution is not the fastest one. We can work on speed improvement if needed.Output: ('The prime numbers are:', [2, 3, 5, 7, 11])Edit 2:First point, initialization of counter, you know that 2 is a prime number, so no need to check it. It is already in the prime numbers list. So you can initialize it to the next integer. (Here 3 or prime[0]+1)Then, your first if: it has to be counter % x as you want to check if counter is a prime number or not. Else (your version), you check if your prime number is divisible by counter i.e. the number you assume is prime (unless the algo is telling you otherwise).In my version, i check if counter is divisible by any previous prime number. If it is not divisible, i continue. If counter is a multiple of any prime number, it goes in the else so my for loop is broken. As a consequence, if counter is a multiple of any of the prime number x will not be equal to the last element of prime. If so, i'm not doing anything. Else i add x to the list of prime number.As for the counter += 2, it will avoid 4, 6, 8, 10, ..., 2*i which correspond to even numbers (that can not be prime numbers)Edit 3:To be correct, you should actually use boolean (i apologize i didn't realize before). Else if counter is a multiple of prime[-1] it is still added to the prime list.
it may help to break your code into parts (functions). you could take out the part that checks whether or not a candidate is a prime (note that you only need to do trial division up to sqrt(candidate); and you only need to check odd numbers):the commented part (using itertools.count) would just be a nicer way to iterate over 3, 5, 7, ... than the while True loop.the difference you then see between this code and yours (apart from the fact that your test x % counter is the wrong way round) is that you check for primes and accept if the test fails in the same loop (without having tested all the primes first); my example has 2 loops: one for primalty testing and one to loop over the candidates.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.count
