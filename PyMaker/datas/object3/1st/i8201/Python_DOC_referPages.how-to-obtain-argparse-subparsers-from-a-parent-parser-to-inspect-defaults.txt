Natural Text
Suppose that I create a parser with a default value for an argument, and then give it a subparser with a further default value for an argument.This is all fine. But suppose that I have a function which creates and returns the parent parser parser from above, but with no direct access to the subparser.How can I still print out defaults for the subparser arguments? Or get a handle to each subparser separately?There doesn't appear to be any more attributes or methods from parser._subparsers or from parser that could display defaults.The overall problem is: how to programmatically access subparser defaults when you only have a handle to the parent parser?
You got it right.  But maybe I can explain a few details.add_argument creates an Action object (or actually a subclass depending on the action parameter).  You can save a pointer to that object in your own environment.  But that Action is also collected in the parse._actions list.  That's how the parser keeps tracks of its arguments.  Reading _actions should always be safe.  Modifying it risks breaking breaking the parser.  argument_groups have access to the list.is a specialized version of add_argument, creating and returning a argparse._SubParsersAction object.  subparsers is that object.  And as noted from the earlier answer, you can find it in the _actions list by searching for the correct subclass.  (To the main parser, subparsers is just another positional argument.)subparsers maintains its own specialized dictionary of parsers, accessible as its choices attribute.  The main parser does not have any record of those sub parsers.creates a parser, puts it in that choices map, and returns a reference for your own use (with add_argument etc).  Each sub parser has its own _actions list. (and its own _defaults).Look at the code for the get_defaults method:It uses the _actions attribute. And looks at the action.default attribute of the Action. self._defaults is the dictionary updated by the parser.set_defaults method.  That method also copies its parameters to the relevant Action objects.  get_defaults checks that in case the dest is one of those defaults that isn't tied to a particular Action.  https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.set_defaultsI haven't used the parser._subparsers attribute much.  Looking at the parser.add_subparsers method I see it is actually an argument_group.  Argument_groups are primarily a help tool, used to group help lines.  The relationship between a parser object and its argument_groups is a little tricky, and probably not something you want to use.Here's an example, with more (too much) detail:The _defaults of _subparsers is actually the same dictionary as parser._defaultsparser._subparsers._actions is also identical to parser._actions.  But the group does maintain its own list actions (used in the help display).So you could use parser._subparsers._group_actions[0] to find the subparsers action object instead of searching the parsers._actions list.On second thought, parser._subparsers._group_actions might not be so useful.  If you don't give it a special title, then it is identical to parser._positionals, the argument group of all positional arguments.  So you'd still need to verify the _SubParsersAction class.
Based on this answer it looks like it can be done as follows:thenprints "world" as expected.


Answer URL
https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.set_defaults
