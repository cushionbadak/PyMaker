Natural Text
Assume I have 3 listsThat picks from one, how would I pick 1 name from all three lists with equal probability?
Assuming that by "1 name from all three lists with equal probability" you mean that each name will have an equal probability of being selected, since the introduction of random.choices in python 3.6, it's possible to do this relatively straightforwardly without needing to concatenate to build one giant list.  For example:where we select one of the lists using the lengths to weight our selection, and then we choose uniformly from that list.  seqs just makes a list of references to the sublists, and so no concatenation is performed.As a sanity check of the uniformity:
If you don't want to incur the overhead of concatenating multiple lists together, (in which case I wouldn't blame you - it's O(n) for what should be an O(1) operation), you can do the same thing by choosing an index that corresponds to a location in the concatenated lists, then indexing the appropriate list. In code:This computes an index, then iterates over the list of lists until it finds the one it falls in, then returns the appropriate element.
Another possible implementation. Assumes input is well formed.ExplanationThis chooses a list randomly from the list of lists:This chooses an item randomly from the randomly chosen list:
If the equal probability needs to be between all names combined :The thing to be aware of here is that if one list has more strings, that 'list' has higher probability of being selected.If the probability needs to be such that the 3 lists should have equal probability to be picked and within that list, each string has equal probability, then it changes to something like :
You can go with Psidom's suggestion (unless the lists are very big or this is in a tight loop) or shashank's one - depending on your definition of "equal probability":The first will create a new list concatenating the 3 lists, pass it as an argument to random.choice and discard it, while the second will pick a random element form each list and then pick again one of the choices (if your definition of "equal probability" fits this one you can stop here.If the lists are small but you are calling random.choice inside a loop that will repeat a million times, you better store the concatenated lists in a variable:If the lists are really big, you may want to avoid the creation of a new big-big-big list in memory using something like this (untested):[edit]If you are lucky enough to be using Python 3.6 or newer, you do as suggested by DSM:


Answer URL
https://docs.python.org/3/library/random.html
