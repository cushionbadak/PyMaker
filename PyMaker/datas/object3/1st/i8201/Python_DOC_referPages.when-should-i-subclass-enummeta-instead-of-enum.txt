Natural Text
In this article Nick Coghlan talks about some of the design decisions that went in to the PEP 435 Enum type, and how EnumMeta can be subclassed to provide a different Enum experience.However, the advice I give (and I am the primary stdlib Enum author) about using a metaclass is it should not be done without a really good reason -- such as not being able to accomplish what you need with a class decorator, or a dedicated function to hide any ugliness; and in my own work I've been able to do whatever I needed simply by using __new__, __init__, and/or normal class/instance methods when creating the Enum class:Enum with attributesHandling missing membersclass constants that are not Enum membersAnd then there is this cautionary tale of being careful when delving into Enum, with and without metaclass subclassing:Is it possible to override __new__ in an enum to parse strings to an instance?Given all that, when would I need to fiddle with EnumMeta itself?
The best (and only) cases I have seen so far for subclassing EnumMeta comes from these two questions:A more pythonic way to define an enum with dynamic membersPython enum prevent invalid attribute assignmentWe'll examine the dynamic member case further here.First, a look at the code needed when not subclassing EnumMeta:The stdlib wayThe aenum way 1 2The above code is fine for a one-off enumeration -- but what if creating Enums from JSON files was common for you?  Imagine if you could do this instead:As you can see:_file is the name of the json file to use_name is the path to whatever should be used for the name_value is a dictionary mapping paths to values3_init_ specifies the attribute names for the different value components (if using aenum)The JSON data is taken from https://github.com/lukes/ISO-3166-Countries-with-Regional-Codes -- here is a short excerpt:[{"name":"Afghanistan","alpha-2":"AF","country-code":"004"},{"name":"Ã…land Islands","alpha-2":"AX","country-code":"248"},{"name":"Albania","alpha-2":"AL","country-code":"008"},{"name":"Algeria","alpha-2":"DZ","country-code":"012"}]Here is the JSONEnumMeta class:A few notes:JSONEnumMeta.__prepare__ returns a normal dictEnumMeta.__prepare__ is used to get an instance of _EnumDict -- this is the proper way to get onekeys with a leading underscore are passed to the real _EnumDict first as they may be needed when processing the enum membersEnum members are in the same order as they were in the file1 Disclosure:  I am the author of the Python stdlib Enum, the enum34 backport, and the Advanced Enumeration (aenum)  library.2 This requires aenum 2.0.5+.3 The keys are numeric to keep multiple values in order should your Enum need more than one.


Answer URL
https://docs.python.org/3/library/enum.html
