Natural Text
In Python 3, I'd like to be able to use re.sub() in an "accent-insensitive" way, as we can do with the re.I flag for case-insensitive substitution.Could be something like a re.IGNOREACCENTS flag:This would lead to "¿It's 80°C, I'm drinking X in X with Chloë。" (note that there's still an accent on "Chloë") instead of "¿It's 80°C, I'm drinking X in a cafe with Chloë。" in real python.I think that such a flag doesn't exist. So what would be the best option to do this? Using re.finditer and unidecode on both original_text and accent_regex and then replace by splitting the string? Or modifying all characters in the accent_regex by their accented variants, for instance: r'[cç][aàâ]f[éèêë]'?
unidecode is often mentioned for removing accents in Python, but it also does more than that : it converts '°' to 'deg', which might not be the desired output.unicodedata seems to have enough functionality to remove accents.With any patternThis method should work with any pattern and any text.You can temporarily remove the accents from both the text and regex pattern. The match information from re.finditer() (start and end indices) can be used to modify the original, accented text.Note that the matches must be reversed in order to not modify the following indices.If pattern is a word or a set of wordsYou could :remove the accents out of your pattern words and save them in a set for fast lookuplook for every word in your text with \w+remove the accents from the word:If it matches, replace by XIf it doesn't match, leave the word untouched
You can use Unidecode:In your program:


Answer URL
https://docs.python.org/3/library/re.html#re.finditer
