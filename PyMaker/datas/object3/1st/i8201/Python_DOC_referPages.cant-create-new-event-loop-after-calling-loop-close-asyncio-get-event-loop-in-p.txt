Natural Text
In Python3.6.1 after calling loop.close() on a loop obtained from asyncio.get_event_loop(), can a new loop be created?  I've looked at other posts with answers for properly closing a loop, and also how to use task.cancel(), but have not been able to use any of those examples in a way that would let a new loop be created after the first was closed.  I also tried explicitly setting executor and later calling executor.shutdown(wait=True), but that didn't help.  I also tried 'del loop', and del a bunch of other things.Documentation indicates that closing a an event loop is idempotent and irreversible.  Does that also mean that a new loop cannot be created?Here is some simple example code to demonstrate the issue:`
asyncio.get_event_loop returns the current loop. It pays no attention to the state of the loop. If you need a new loop after closing one, you can use asyncio.new_event_loop.Be aware that getting a new loop won't affect subsequent calls to get_event_loop. If you'd like that to return your new loop instead of the original one (especially since you've probably closed it), you'll need to call asyncio.set_event_loop yourself.


Answer URL
