Natural Text
I know this has been asked around but everytime the example is different or more complex than what I would like to do so here goes.First.pySecond.pySo all I want to do it pass a SINGLE variable to another python that is running independently. Please I do not want to pass all the variables from the First script to the next or call the entire second script as I have seen some examples. I am running these two scripts on the Raspberry Pi and the first script is reading some sensor data while the second scripts takes that data and further computes it. Lots of variables are used from the first script so I really don't want to pass everything, only the ones I want.Also I would like v2.7 if that makes any difference.ThanksHere is my code: {The variable that I want to pass to Second.py is temp}First.pySecond.pyI have it working on a test code but not in my main code for some reason, Here is what I tried and I was successfully able to pass the data:firsttest.pysecondtest.pyThe out put is indeed 1000, and I only have to run the secondtest.py and the firsttest.py gets executed automatically. But when I run my original code, the first.py does execute but I'm not having any output from the second.pyI don't know if this is raspberry pi related since I'm using multiple GPIO's or if this is a programming error.Any help would be amazing. My worse solution would be to make the first.py output to a text file and have the second.py read it from there, hopefully that wont also contradict since both scripts will be trying to use it at the same time?
Use an import like this:file1.py:and in file2.py:Make sure to have both files in one package (directory must contain an    __init__.py file). Of course you can also access the file if it is in another package.Alternatively, you can write a get_value() function in file1.py that returns the requested value and import this function:If temp is a variable that is updated frequently (as I suspect looking at your code), you could do either1) write a function (e.g. First.read_temp()) that reads the temperature once and then import and use this function in Second.py or2) fetch the latest value for temp from the database (if the time delay does not matter).
Start second.py with from first import value. This will import only that one name into your namespace.Keep in mind that the entire script first will have to be run to make this work. So if you have any runnable code in your script, make sure that it is guarded be a line like if __name__ == '__main__'. 
INTROThis is going to be a bit long, so I have written an intro.Since you are trying to get two independent processes to communicate with each other, the problem can not be solved with just imports. One process has to write the data, the other has to read it. You have a number of options available for doing this. Here are three, but keep in mind that there are other ways:Have one process start the other and use the subprocess module to communicate between them.Use Unix Domain Sockets, which are like regular sockets, but can be accessed via a named file on a Linux (or other Unix implementation) machine. This would use the socket module.Use a shared memory implementation to just write the value in a shared piece of memory. As far as I know there is no built-in module for doing this with processes that are completely independent of each other.Of the three methods described above, the first is the most portable, but you have to start one script from the other. I can't imagine this being a huge problem for you given the code that is shown.The second method only works on Unix-like systems, which I don't expect to be a problem on a Raspberry Pi. It allows you to run the processes completely independently: they only have to share the name of the socket between them, and you can actually guarantee that it will be the same using imports. I will not go into this method because it is probably overkill for your case.I am not aware of any way to implement the third option using only builtin modules. You could use a library like shm, but I will not go into any detail about this method.CodeBefore I explain how to implement items 1 and 2, I would like to propose restructuring your code a bit to make the transition process easier. I like that you have a getdata function already planned in Second.py. However, there are a couple more changes that I would suggest to make this process easier:First.py:Second.py:Most of the changes are cleanups like defining constant items outside the loop. The key additions are the calls to write_out in First.py and get_temp in Second.py.Also notice that the functionality of First is now within a main function, which only gets called when __name__ == '__main__'. This will allow you to run First.py as a script from the command line just as you did before. When you do import First inside Second.py, it will not run all of the code, just define the constants that you have outside of main.Subprocess MethodWith this method, First.py would have to start Second.py or vice versa. I will go with the first approach because it just seems a bit simpler. Either way, the standard output of First will go to the standard input of Second. You could change First.py to read as follows:Here, first kicks off Second.py and pipes the temperature values to Second's stdin. Here is an answer that is relevant. First.main now has to accept a subprocess as an argument, which needs to be passed to write_out.Second.py does not need any modifications in this case: just a definition of get_temp that reads from stdin:ConclusionGiven the amount of work you have to do to make this work, you may want to consider another approach entirely. Perhaps you could just define a function that does the additional processing in Second.py (similarly to what I did with main in First.py). You could then call the function in a background thread from First.py every time you got a new temperature reading. This would make your code much simpler and easier to deal with. Assuming that your function was called process_temp, you could do something like the following in First.py:


Answer URL
https://docs.python.org/3/library/subprocess.html
https://docs.python.org/3/library/socket.html
