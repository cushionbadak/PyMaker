Natural Text
type(object) returns type of an object.In this syntax, type(__builtins__) should return callable object that takes ('my_module') as argument. type(object) returns callable object?How to understand what this is doing?
Let's run through some examples:So, since type(int) returns a type, it makes sence thatsince More importantely:Now, if you instead do:which is also expected sinceandSo, putting things together: int is an object of type typeint() is an (integer) object of type intAnother example:which means that therefore, it behaves just like a string object:I have the feeling that I might have made this seem much more complicated than it actually is... it isn't!type() returns the class of an object. So:type(12) is just an ugly way of writing inttype(12)(12) is just an ugly way of writing int(12)So, "Yes!", type() returns a callable. But it's much better to think about it as (from official docs )class type(object)With one argument, return the type of an object. The return value is a type object and generally the same object as returned by object.__class__.
The type() function returns the class of an object.  In the case of type(__builtins__) it returns a Module type.   The semantics of module are detailed at:  https://docs.python.org/3/library/stdtypes.html#modulesThe source code for CPython has this in Objects/moduleobject.c::module_init():That means you can call (instantiate) module objects with the name of the module as a required argument and the docstring as an optional argument.


Answer URL
https://docs.python.org/3/library/functions.html#type
https://docs.python.org/3/library/stdtypes.html#modules
