Natural Text
ProblemI struggle to find a nice way to import modules in chain when your second import is from outside the folder. More clearly, here is my folder organisation:In stuff.py -- typically a big piece of code -- I want to do something like this:from a.foo import thingbut in foo.py -- typically some kind of library -- I have already something like this:from bar import other_thingWhen I run stuff.py, I have an import error saying that foo.py does not know the module bar. Of course, when I run foo.py alone, I have no error.Possible solutions so farA simple workaround is to put:from a.bar import other_thinginstead in foo.py. But it feels strange to have to specify the module a since both files live in the same folder. When you develop something in foo.py, you should not have to care about this.I can also add something like:sys.path.insert(1, '../a')in stuff.py. But in this case in stuff.py I can completely ignore the module structure and just import:from foo import thingwhich does not feel right either.This is purely a question of style, but I am sure that there is a nice solution for this, probably using the __init__.py files. I can't find it though. Any idea? I am using Python 3.4 by the way
You can use package relative imports in foo.py.See Intra-Package References for details. Note that if you run stuff.py directly, it is a top-level script (__main__) and is not a member of the package. If some other module imports b.stuff, you get a different copy. Personally, I put top-level scripts in a different bin directory so they are not mistaken for package modules.


Answer URL
https://docs.python.org/3/tutorial/modules.html#intra-package-references
