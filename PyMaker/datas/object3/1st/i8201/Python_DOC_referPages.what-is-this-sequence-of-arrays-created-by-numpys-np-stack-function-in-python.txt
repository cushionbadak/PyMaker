Natural Text
I'm reading the documentation on np.stack:Join a sequence of arrays along a new axis.    output: ndarraySo np.stack is going to take, say, 2 numpy array and return what? It will return a new array, which contains a, um, sequence of arrays?I can't visualize what an array consisting of a sequence of arrays is, so how about I run a little experiment:  This gives me:  Then,np.stack(arrays, axis=0)givesPretending for a second that the printout is not basically unreadable (10 square brackets, really?), I see what appears to be 2 arrays, in an array, in a ordered sequence. I guess the documentation is correct, but I still have no mental visualization of what this object looks like.   Maybe I should look at the dimensions:   gives  So we have two rows, one column, and two layers of this? Isn't that one array?  My questions are:  What exactly is a 'sequence of arrays' and how does an array possess a notion of order, as does a sequence by definition?  Why would anyone ever want a 'sequence of arrays' anyway, whatever that is, as opposed to concatenating multiple arrays into one (as the .shape implies this really is anyways)?  Why did they call this function "stack" and how does the colloquial use of this word attempt to be helpful?Thanks.  EDIT too many good answers...having trouble selecting one for the checkmark...
What exactly is a 'sequence of arrays' and how does an array possess a notion of order, as does a sequence by definition?A sequence is an abstract-data type that, as you intuited, is an ordered collection of items. In Python, a sequence can be assumed to implement __getitem__ and __len__, that is, it supports bracketed indexing, e.g. seq[0] or seq[1], and has a len.  It also implements __contains__, __iter__, __reversed__, index, and count. Built-in sequence types include list, tuple, str, bytes, range and memoryview. A numpy.ndarray is a sequence. Why would anyone ever want a 'sequence of arrays' anyway, whatever that is, as opposed to concatenating multiple arrays into one (as the .shape implies this really is anyways)?The documentation is letting you know that the function accepts any sequence of arrays. A multidimensional array is a sequence of arrays, itself, or you can pass a list or tuple of arrays you want to "stack" on top (or up against) each other. The function returns a numpy.ndarray, which is any numpy array (n-dimensional array).  It is a slightly different operation than concatenate. See below.Why did they call this function "stack" and how does the colloquial use of this word attempt to be helpful?Because it stacks stuff together. According to the docs for np.stack, it "Join[s] a sequence of arrays along a new axis.", np.concatenate on the other hand: "Join[s] a sequence of arrays along an existing axis."Looking at the example in the docs is helpful.np.concatenate does something different:It is one of many related stacking, concatenating, appending operations on np.arrays that come built-in.
I think your problem starts with np.random.randn(1,2) possibly not giving you what you expect.  This is going to give you a (1,2) array.  I helps to think of this as a nested list.  The "outer" list has one item, and this item is the "inner" list of two items (in fact this is the exact way it is represented inside the array() wrapper).Now you make a list of two of these arrays.  These brackets are outside the array wrapper so it is just a list.  the np.stack command, then, moves the brackets inside the wrapper, in a certain way according to the axis command. In this case axis=0, and the number of elements in the 0 axis becomes the number of items in the outer list.  The other two dimensions move over, and the shape becomes (2,1,2) As a list, this would be a list of two items, each item being a list of a single item, this single item being a list of two numbers.There are many different ways to arrange these arrays, other than stack.  The other major one is np.concatenate, which will let you join them along an existing axis (axis=0 will have an output of shape (2,2), while axis=1 will have shape (1,4))  stack is for when you want a new axis to join them along.
In Python parlance, "sequence" is just a thing that can contain other things, has a sense of "order", and can optionally indexed like seq[i].  Python is duck-typed so anything behaving like a sequence can be called one.  It can be a list or a tuple, for example.  In this case the ordering is definitely important.The sequence can be built up piece-by-piece, as is common in programming.  For example you may download some data using a RESTful API, build an array from each response, and append each one to a list.  After you're done with requesting, you can use the accumulated "sequence of arrays" for your computation later.If you look at the examples on that page it's pretty clear.  You have a list of arrays, let's say, l = [a, b] where a and b are arrays.  What stack(l) does is to create a new array with a "on top of" b, if the shapes are compatible.  Of course there's also concatenate but it isn't the same. stack creates a new dimension, but concatenate connects along the axis you specify, as the name suggests.  From the release note:The new function np.stack provides a general interface for joining a sequence of arrays along a new axis, complementing np.concatenate for joining along an existing axis.
Numpy arrays:Now answering your questions in the same order:A sequence of arrays in the above example is a and b , a and b together form a sequence of arrays. The reason this function is useful is - Imagine if you are trying to build a matrix where each row (array) is obtained from some special function specific to that row number , np.stack allows you to stack each array and create a 2D array with ease.In the true sense , stack means placing things over something. In this , you are just adding an array on top of another array.Hope this helps!Edit - Based on a comment- The difference between concatenate and stack (apart from functionality)-Concat is more like merge
np.stack is just concatenate on a new axis.Your arrays is a list of 2 (1,2) shaped arrays.  It is a sequence.That's the same as if we took np.array of this list of listsnp.stack with the default axis=0 does the same thing:It joins the 2 (1,2) arrays on a new axis (dimension).  It might be clearer if arrays contained 3 arrays, producing a (3,1,2) array. np.stack give more flexibility, allowing us to join the arrays on other new axes (I'll flag that with '):Regarding the name, it's a spin off of hstack, vstack, and column_stack, which have been part of numpy for a long time.  Those are all specialized applications of np.concatenate.  And if you look at the code, np.source(np.stack), you'll see that np.stack is also just an application of concatenate.The name is not any more exotic than a 'stack of papers'.Your arrays list contains 2' (1,2) shaped arrays.  np.stack adds a dimension to each (with reshape).  For the default axis=0, it reshapes them to (1',1,2).  Then it does a concatenate on the first axis, resulting (2',1,2) shape.


Answer URL
https://docs.python.org/3/library/collections.abc.html
