Natural Text
Is the program below guaranteed to always produce the same output?
Yes, it is. This is because the str type is an immutable sequence. Sequences represent a finite ordered set of elements (see Sequences in the Data model chapter of the Reference guide). Iteration through a given string (any Sequence) is guaranteed to always produce the same results in the same order for different runs of the CPython interpreter, versions of CPython and implementations of Python. 
Yes.  Internally the string you have there is stored in an c style array (depending on interpreter implementation), being a sequential array of data, one can create an iterator.  In order to use for ... in ... syntax, you need to be able to iterate over the object after the in.  A string supplies its own iterator which allows it to be parsed via for in syntax in sequential order as do all python sequences.  The same is true for lists, and even custom objects that you create.  However not all iterable python objects will necessarily be in order or represent the values they store, a clear example of this is the dictionary.  Dictionary iteration yields keys which may or may not be in the order you added them in (depending on the version of python you use among other things, so don't assume its ordered unless you use OrderedDict) instead of sequential values like list tuple and string. 
Yes, it is.  Over a string, a for-loop iterates over the characters in order.  This is also true for lists and tuples -- a for-loop will iterate over the elements in order.You may be thinking of sets and dictionaries.  These don't specify a particular order, so:will iterate in some arbitrary order that you can't easily predict in advance.See this Stack Overflow answer for some additional information on what guarantees are made about the order for dictionaries and sets.
Yes. The for loop is sequential.
Yes, the loop will always print each letter one by one starting from the first character and ending with the last.


Answer URL
https://docs.python.org/3/reference/datamodel.html#objects-values-and-types
https://docs.python.org/3/library/stdtypes.html#iterator-types
