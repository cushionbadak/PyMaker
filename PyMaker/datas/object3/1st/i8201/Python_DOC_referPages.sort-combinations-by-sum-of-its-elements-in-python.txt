Natural Text
I have a huge list of integers in Python (1000000+ elements), but I will illustrate what I need with an example for the sake of simplicity. Let's suppose I have this list:Now I'd like to get all the combinations (size 3) of that list, so I use itertools.But my problem is that this will return the combinations in lexicographical order:and so on.I'd like to get the combinations sorted by the sum of its elements. That would be:(1,2,3) which sums 6, (1,2,4) which sums 7,(1,3,4) which sums 8,and so on so forth.How can I achieve this?
Ordered combinations too big to fit in memoryThe number of combinations for 1,000,000 things taken 3 at a time is 166,666,166,667,000,000.  That is too big to fit in memory, too big to sort, and too huge to even loop over in a reasonable amount of time.For a way to generate these combinations lazily, see "GENERATING ALL COMBINATIONS" in Donald Knuth's fascicle on Combinatorial Algorithms.Ordered combinations that can fit in memoryAs long as the number of combinations is reasonable, the most straight forward approach is to directly sort the combinations by their sum:The technique uses sum() as a key-function for sorted().Bridging the two worldsWhen nCr is bigger than can be practically enumerated, it would make sense to reduce the problem by removing the larger elements from list A until the sum gets big enough to include those values.
The key thing to consider here is the no.of combinations is really huge ~(1000000)^^3So, any sorting algorithm with O(NlogN) is going to be bad. We need something in O(N).We can try create a SortedDictionary (sorteddict) or use a standard external hash implementation like memcache to store the combination as{sum:[tuple1, tuple2]}. Complexity for this operation will be ~O(N)Then, Create a new list, loop through the cache and all values to it. Again the complexity will be O(N).Overall, we will have O(2N) which is efficient than O(NLogN). Hope this will help!


Answer URL
https://docs.python.org/3/library/functions.html#sum
https://docs.python.org/3/glossary.html#term-key-function
https://docs.python.org/3/library/functions.html#sorted
