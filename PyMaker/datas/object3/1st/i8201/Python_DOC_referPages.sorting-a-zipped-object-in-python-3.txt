Natural Text
This question already has an answer here:How do I sort a zipped list in Python?                    5 answers                I've a zip object and I want to sort it(based on a specific key).I've already seen How do I sort a zipped list in Python? but the accepted answer does not work in python 3.6 anymore.For example  In other words how do I make the zip iteration order conform to the sorting order. I'm aware that converting a zip to a list of tuples will allow me to fix this, but I want to retain the zipped object (as it used to be in the good old days of python2.7)
zip() in Python 3 returns an iterator; the inputs are zipped as you request elements from it. Iterators are not sortable, no.You can use the sorted() function to 'draw out' the elements and return a sorted list from them:You could also convert the zip() object to a list by calling list() on it, then sort that result in-place with the list.sort() method, but that's then more work than just using the sorted() function.sorted() takes the same keyword arguments as list.sort() does, so you can still use the same key function:Demo:Also see What is the difference between `sorted(list)` vs `list.sort()` ? python
You can't use sort on zip object, zip object doesn't have such attribute. But, you can convert the zip object to a list with list(zipped_object) and then apply sort on it, to do an in-place sort. But, as zipped object is also an iterable, my recommendation is to use sorted(). It will let you write a sort function also, based on which the collection will be sorted.Here, I am sorting it based on the values of y in each (x,y) pair. .Note that, sorted will return a new sorted list, whereas sort will sort the collection in place. 


Answer URL
https://docs.python.org/3/library/functions.html#sorted
