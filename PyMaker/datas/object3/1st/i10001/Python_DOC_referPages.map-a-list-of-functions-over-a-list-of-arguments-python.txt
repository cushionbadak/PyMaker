Natural Text
I have a list of functions:  listFunc=[g1, g2, g3].  This list is generated with the code below:  Now, I have a list of arguments ListArg = [4, 5, 6];How could I get a result list of [g1(4), g1(5), g1(6), g2(4), g2(5), g2(6), g3(4), g3(5), g3(6)] using map only?      I thought about using the following code:But it only gives a result of [g1(4), g2(5), g3(6)]. Thanks,
This is a perfect use-case for a list comprehension with two for-clauses:This is eminently readable and eminently functional - list comprehensions were borrowed from Haskell.If you feel some deep need to use map, then you will have to approach it like this:Which is eminently unreadable and likely slower. List comprehensions win here.
If you want to use map(), you could do:
You can't quite do this with just map, but you can nest one call in another, and use sum to flatten the result.
itertools.product helpsThe only alternative to the list comprehension I could come up with is:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
