Natural Text
I want to implement class Fraction so that when I pass non-integer, exception is raised and object is NOT created. The following code raises an exception but in can create a quirky fraction 'hello, world'/0The question is, how do I elegantly catch non-integer inputs and 0 denominators?UpdateTotally forgot that I need to raise an exception, not just make except clause. Here's how code looks now
In the except block just raise the original exception.To check for zero denominator, just do:
You could have a factory method that creates your object:Then when you want a new Fraction call the factory method:You'll then need to test if my_fraction is None:
Somewhere in your code you'll callWhy don't you change it to:This way the object is never created. You could also add exceptions if you wanted.
If you want to print or log an error message and raise an exception, just add raise to your existing except suite - it will raise the most recent exception.  Use a descriptor to reject a denominator of zero. NonZero adapted from Python Descripters DemystifiedFor posterity, my first solution used assert to reject a zero value for the denominator, hence the comment by @PM2Ring. I debated with myself on using it. It's docs state : Assert statements are a convenient way to insert debugging assertions into a program - and down at the bottom of UsingAssertionsEffectively : Assertions should *not* be used to test for failure cases that can occur because of bad user input - so my bad. The descriptor is the way to go.  (But assert sure was convenient). 


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement
