Natural Text
I'm writing a function that needs to go through a list of lists, collect all letters uppercase or lowercase and then return a list with 1 of each letter that it found in order. If the letter appears multiple times in the list of lists the function only has to report the first time it sees the letter.For example, if the list of lists was [['.', 'M', 'M', 'N', 'N'],['.', '.', '.',    '.', 'g'], ['B', 'B', 'B', '.','g']] then the function output should return ["M","N","g","B"].The code I have so far seems like it could work but it doesn't seem to be working. Any help is appreciated 
There are a few things wrong with your code. You are using return in the wrong place, looping only over the outer list (not over the items in the sublists) and you were appending symbols to newlot instead of the matched item.You can use a double for loop and use in to check if the character is in symbols and isn't already in newlot:This is the output for your list:
To build on your existing code:Using string gets us the letters a little more neatly. We then loop over each list provided (each sublot of the lot), and then for each element (x), we check if it is both in our list of all letters and not in our list of found letters. If this is the case, we add it to our output.
this also can be done by using chain, OrderedDict and isalpha as followchain.from_iterable will serve the same purpose as if you concatenate all the sublist in one As the order is relevant, OrderedDict will server the same purpose as an set by removing duplicates with the added bonus of preserving the order of the first instance of the object added. The fromkeys class-method will create a dictionary with the given keys and same value, which by default is None, and as we don't care about it, for our purpose is a orderer setFinally the isalpha will tell you if the string is a letter or notyou can also take a look at the unique_everseen recipe, because itertools is your best friend I recommend to put all those recipes in a file that is always at hand, they always are helpful 


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.chain
https://docs.python.org/3/library/collections.html#ordereddict-objects
https://docs.python.org/3/library/stdtypes.html#str.isalpha
https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
https://docs.python.org/3/library/stdtypes.html#dict.fromkeys
https://docs.python.org/3/library/stdtypes.html#str.isalpha
https://docs.python.org/3/library/itertools.html#itertools-recipes
