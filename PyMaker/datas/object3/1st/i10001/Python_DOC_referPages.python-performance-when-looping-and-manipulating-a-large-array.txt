Natural Text
My question is two-fold:  Is there a way to both efficiently loop over and manipulate anarray using   enumerate for example and manipulate the loop atthe same time?Are there any memory-optimized versions of arrays in python?(like NumPy creating smaller arrays with a specified type)I have made an algorithm finding prime numbers in range (2 - rng) with the Sieve of Eratosthenes.Note: The problem is nonexistent if searching for primes in 2 - 1,000,000 (under 1 sec total runtime too). In the tens and hundreds of millions this starts to hurt. So far changing the table from including all natural numbers to just odd ones, the rough maximum range I was able to search was 400 million (200 million in odd numbers).Whiles instead of for loops decrease performance at least with the current algorithm.NumPy while being able to create smaller arrays with type conversion, it actually takes roughly double the time to process with the same code, exceptin place ofand using integers to assign values "prime" and "not prime" to keep the array type.Using pseudo-code, the algorithm would look like this:Python is a neat language particularly when looping over every item in a list, but as the index in, saycan't be manipulated while in the loop, I had to convert the range a few times to produce an iterable which to use. In the code: "P" marks prime numbers, "_" marks not primes and 0 not checked.
To make your code more pythonic, split your algorithm in smaller chunks (functions), so that each chunk can be grasped easily. My second comment might astound you: Python comes with "batteries included". In order to program your Erathostenes' Sieve, why do you need to manipulate arrays explicitly and pollute your code with it? Why not create a function (e.g. is_prime) and use the standard memoize decorator that was provided for that purpose? (If you insist on using 2.7, see also memoization library for python 2.7).The result of the two pieces of advice above might not be the "most efficient", but it will (as I experienced with that exact problem) work well enough, while allowing you to quickly create sleek code that will save your programmer's time (both for creation and maintenance).


Answer URL
https://docs.python.org/3/library/functools.html#functools.lru_cache
