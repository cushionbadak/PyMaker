Natural Text
I'm trying to decipher some complicated code. Below, I've simplified the code, of what I do understand of it, to get to the heart of my question. It seems to me that arange() creates an array of values, ranging from 8 to 11, with values 0.25 apart. But then what does 2**arange do? I know ** is for exponentiation, but it doesn't make sense to me that one could exponentiate an array! Exponentiating the values inside the array make sense, sure. But that seems like very strange syntax for it!
Numpy arrays let you apply numeric operators to all elements in the array. So array * 3 would apply the multiplication to all elements in the array, producing a new array with the results. You can use an array on either side of such an expression; after all, not all operators are commutative.Using 2 ** array simply applies each element in the array as an exponent of 2, producing an array with the 2 ** <input item> calculation:So the input is an array with 8, 8.25, 8.5, etc., and the resulting array contains the result of 2 ** 8, 2 ** 8.25, 2 ** 8.5, and so on.The array.astype(int) operation then floors the results:
arange returns a numpy array, which supports vectorized operations.For example, 2 ** [1 2 3] returns [2 4 8], just as 2 + [1 2 3] returns [3 4 5].
Every type in Python can implement methods that are the backing methods for various Python operators or operations. Specifically in this case, numpy.arange().__rpow__(int()) is invoked due to the operator and operands (respectively ** and int().__pow__(numpy.arange()) previously having returned NotImplementedError). This allows not only definitions of operations on new types, but also on existing types that would not be aware of how to handle the new type operand themselves.


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-names
