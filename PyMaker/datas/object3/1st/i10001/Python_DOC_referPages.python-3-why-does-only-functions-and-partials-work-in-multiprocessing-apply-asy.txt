Natural Text
I was trying to use use some closures in my multiprocessing code and it kept failing for no reason. So I did a little test:The results are:Can anyone explain this weird behavior?
Because those objects can't be transferred to another process; pickling of callables only ever stores the module and name, not the object itself.The partial only works because it shares the underlying function object, which here is another global.See the What can be pickled and unpickled section of the pickle module documentation:functions defined at the top level of a module (using def, not lambda)built-in functions defined at the top level of a module[...]Note that functions (built-in and user-defined) are pickled by “fully qualified” name reference, not by value. [2] This means that only the function name is pickled, along with the name of the module the function is defined in. Neither the function’s code, nor any of its function attributes are pickled. Thus the defining module must be importable in the unpickling environment, and the module must contain the named object, otherwise an exception will be raised. [3]Do note the multiprocessing Programming guidelines:PicklabilityEnsure that the arguments to the methods of proxies are picklable.andBetter to inherit than pickle/unpickleWhen using the spawn or forkserver start methods many types from multiprocessing need to be picklable so that child processes can use them. However, one should generally avoid sending shared objects to other processes using pipes or queues. Instead you should arrange the program so that a process which needs access to a shared resource created elsewhere can inherit it from an ancestor process.If you try to pickle each of your callable objects directly, you can see that which can be pickled happen to coincide with what callables successfully were executed using multiprocessing:


Answer URL
https://docs.python.org/3/library/pickle.html#what-can-be-pickled-and-unpickled
https://docs.python.org/3/library/multiprocessing.html#programming-guidelines
