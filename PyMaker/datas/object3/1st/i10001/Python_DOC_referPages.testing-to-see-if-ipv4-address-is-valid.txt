Natural Text
I want to return a boolean depending if the address given is a correct IPv4 address or not. I am having an issue with the all() built in in python. I have looked up the documentation on it and it seems straight forward. That being said I can't get it to work for my expression. If you could explain how it works layman's terms and how I could correct my code, that would be great.
As said in the documentation of all, it checks if every element in a list evaluates to True (basically bool(e) is True) or it is empty.Now you have a list of integers in slice_split_address and so it'll check if every element of that list evaluates to True if you just call it like you do and any number other than 0 will evaluate to True, but an IP like 127.0.0.1 is actually valid.So what you need is actually a list which contains True if the corresponding number is between 0 and 255 (inclusive):If you call then all(is_valid) it returns if every item in slice_split_address is between 0 and 255. Usually it'll be combined into something like all(0 <= e <= 255 for e in slice_split_address).Now there is still one issue in your implementation because slice_split_address doesn't actually contain the first number of the IP address, so you might include it. Or do you actually want the first number to be lower or equal to the other three numbers?Also your check all(…) >= … doesn't make sense as all() only returns True or False so comparing it with an integer doesn't really make sense.Note that all(is_valid) will also return True to IP addresses like 0.0.0.0 so might need to adjust the range I used.
If you are using Python3, there is a built-in ipaddress module that you can use.As for what is wrong with your code, I don't believe that the all() function does what you think it does. all() expects an iterable of Booleans, and returns True if every one of those Booleans is True.To get that to work how you expected, you probably want something like
Don't reinvent the wheel (unless you're happy to maintain the wheel).  You can use a regex to validate ipv4 addresses.  The following pattern is taken from Django:If you are working already in the context of a Django project, you may prefer to just import their validator and use it directly:
As others have said, there are better ways to do this. And your algorithm doesn't actually validate IPv4 addresses. But here's a repaired version of your code.outputI've moved the lst_split_address stuff into the else block because there's no need to do it if the if / elif parts return False. uses a simple generator expression to check that all items in slice_split_address are >= the head item.


Answer URL
https://docs.python.org/3/library/functions.html#all
https://docs.python.org/3/library/ipaddress.html
