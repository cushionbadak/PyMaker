Natural Text
I'm getting a Can't set attribute error when I'm using the += operator on a read-only property that is of a type for which I've defined a __iadd__() method.Simplified (but runnable) version of my code:The last line produces the error. It goes away if I add the following line to the definition of Widget:(Runnable at https://repl.it/EONf/0)This behaviour seems strange on two accounts. First, I thought that Python passes objects by reference, so why should the property have to be readable? And second, how come that my dummy setter even works?
__iadd__ returns a replacement object to be rebound to the variable.  This of course requires a setter.In this case it works because you're ignoring the set, but still leaving the original object in place, which you've changed in place.This behavior is required because some objects are immutable, but in place add still works on them.i += 5 takes the number i is bound to, adds 5 to it, and rebinds i to the NEW result number.  That is, it is exactly equivalent to i = i + 5, which has an assignment in it.
It's caused by how Python's augmented assignment operators work. After calling the appropriate special method, they assign the return value to the object at the left hand side of the operator.If x is an instance of a  class with an __iadd__() method, x += y is equivalent to x = x.__iadd__(y). Otherwise, x.__add__(y) and y.__radd__(x) are  considered, as with the evaluation of x + y.Thereforeis equivalent toand you need a setter to perform assignment. It doesn't have to do anything, though, because the __iadd__ method is defined and modifies the list in-place.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements
https://docs.python.org/3/glossary.html#term-special-method
