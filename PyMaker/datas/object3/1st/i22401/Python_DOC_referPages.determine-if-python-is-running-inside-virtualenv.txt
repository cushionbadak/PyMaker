Natural Text
Is it possible to determine if the current script is running inside a virtualenv environment?
AFAIK the most reliable way to check for this (and the way that is used internally in virtualenv and in pip) is to check for the existence of sys.real_prefix:Inside a virtualenv, sys.prefix points to the virtualenv directory, and sys.real_prefix points to the "real" prefix of the system Python (often /usr or /usr/local or some such).Outside a virtualenv, sys.real_prefix should not exist.Using the VIRTUAL_ENV environment variable is not reliable. It is set by the virtualenv activate shell script, but a virtualenv can be used without activation by directly running an executable from the virtualenv's bin/ (or Scripts) directory, in which case $VIRTUAL_ENV will not be set.
Try using pip -V (notice capital V)If you are running the virtual env. it'll show the path to the env.'s location.
This is an improvement of the accepted answer by Carl Meyer. It works with virtualenv for Python 3 and 2 and also for the venv module in Python 3:The check for sys.real_prefix covers virtualenv, the equality of non-empty sys.base_prefix with sys.prefix covers venv.Consider a script that uses the function like this:And the following invocation:
Using $VIRTUAL_ENV variable indeed will check if we are inside virtual environment, but the issue might be with deactivate function that not clear this variable when we leave virtualenv.
According to the virtualenv pep at http://www.python.org/dev/peps/pep-0405/#specification you can just use sys.prefix instead os.environ['VIRTUAL_ENV'].the sys.real_prefix does not exist in my virtualenv and same with sys.base_prefix.
I routinely use several Anaconda-installed virtual environments (venv).  This code snippet/examples enables you to determine whether or not you are in a venv (or your system environment), and to also require a specific venv for your script.ADD TO PYTHON SCRIPT (code snippet):RUN YOUR SCRIPT (examples):Update: use in bash scripts:You can also use this approach in bash scripts (e.g., those that must run in a specific virtual environment).  Example (added to bash script):
To check whether your inside Virtualenv:You can also get more data on your environment:
(edited) I found that way, what do you think of it ? (it also returns the venv base path and works even for readthedocs where checking the env variable does not):
You can do which python and see if its pointing to the one in virtual env.  
It's not bullet-proof but for UNIX environments simple test likeworks great for me. It's simpler then testing existing of some attribute and, anyway, you should name your venv directory venv.
In windows OS you see something like this: Parentheses mean that you are actually in the virtual environment called "virtualEnvName".
A potential solution is:In my case I really just wanted to detect if I could install items with pip as is. While it might not be the right solution for all cases, consider simply checking if you have write permissions for the location of the Python executable.Note: this works in all versions of Python, but also returns True if you run the system Python with sudo. Here's a potential use case:


Answer URL
https://docs.python.org/3/library/venv.html
