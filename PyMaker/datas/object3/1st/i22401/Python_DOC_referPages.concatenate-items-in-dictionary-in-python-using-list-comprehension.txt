Natural Text
EDIT: Clarified the question a  bitHow can I get a string from a dictionary with the formatin a relatively fast way ? (relative to plain concatenation)
There's no reason to use list comprehension here.Python 3.x:Python 2.x:EDIT because of comment by OP in another answer:If you're passing it to a function and not printing it here, then you should just pass the generator to the function, or the dict itself and let the function handle whatever it needs to do with it. This is much better than converting it to a string inside a scope where it's not even needed. The function should do that, since that's where it's used.I made a wrapper function, since editing the main function is out of the question.

Explicit is better than implicitList comprehension is a way to create list, not to avoid loops.From PEP 202:List comprehensions provide a more  concise way to create lists in  situations where map() and filter()  and/or nested loops would currently be  used.So you should ask yourself:When is it useful to create this code in Python? It may be more compact but code is read many more times than it is written so what is the advantage in it?Tor Valamo's solution, although not what was asked for in the original request, is in my opinion far more readable, and therefore should be preferred.EDIT after question updatestr.join is a good way to implement a fast concatenation from a list - and replies from Nadia and Ritchie are good examples of how to use it.Again, I would not perform everything in a single line, but I would split it in various steps to emphasize readability.
Like this:
I prefer the pythonic way:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.join
