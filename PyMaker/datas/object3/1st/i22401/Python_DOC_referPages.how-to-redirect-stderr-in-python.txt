Natural Text
I would like to log all the output of a Python script. I tried:Now, if I "print 'something' " it gets logged. But if I make for instance some syntax error, say "print 'something# ", it wont get logged - it will go into the console instead.How do I capture also the errors from Python interpreter?I saw a possible solution here:http://www.velocityreviews.com/forums/showpost.php?p=1868822&postcount=3but the second example logs into /dev/null - this is not what I want. I would like to log it into a list like my example above or StringIO or such...Also, preferably I don't want to create a subprocess (and read its stdout and stderr in separate thread).
You can't do anything in Python code that can capture errors during the compilation of that same code.  How could it?  If the compiler can't finish compiling the code, it won't run the code, so your redirection hasn't even taken effect yet.That's where your (undesired) subprocess comes in.  You can write Python code that redirects the stdout, then invokes the Python interpreter to compile some other piece of code.
I have a piece of software I wrote for work that captures stderr to a file like so:so it's definitely possible.I believe your problem is that you are creating two instances of writer.Maybe something more like:
I can't think of an easy way.  The python process's standard error is living on a lower level than a python file object (C vs. python).You could wrap the python script in a second python script and use subprocess.Popen.  It's also possible you could pull some magic like this in a single script:And then use select.poll() to check cat.stdout regularly to find output.Yes, that seems to work.The problem I foresee is that most of the time, something printed to stderr by python indicates it's about to exit.  The more usual way to handle this would be via exceptions.---------EditSomehow I missed the os.pipe() function.  Then read from r
Actually, if you're using linux/mac os, you can just use file redirect to do that. For example, if you're going to run "a.py" and record all the messages it will generate into file "a.out", it would just bepython a.py 2>&1 > a.outThe first part redirects stderr to stdout, and the second redirects that to a file called a.out.For a longer list of redirection operators in Linux/Unix, see https://askubuntu.com/questions/420981/how-do-i-save-terminal-output-to-a-file
Since python 3.5 you can use contextlib.redirect_stderr

Python will not execute your code if there is an error. But you can import your script in another script an catch exceptions. Example:Script.pyFinalScript.py
To add to Ned's answer, it is difficult to capture the errors on the fly during the compilation. You can write several print statements in your script and you can stdout to a file, it will stop writing to the file when the error occurs. To debug the code you could check the last logged output and check your script after that point.Something like this:This will create a log file and stream the print statements to the file.Note: Watch out for escape characters in your filepath while concatenating with script_dir in the second line from the last in the code. You might want something similar to raw string. You can check this thread for this. 


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stderr
