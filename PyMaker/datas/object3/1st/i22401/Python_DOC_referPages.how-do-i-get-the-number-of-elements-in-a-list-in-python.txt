Natural Text
Consider:How do I get the number of elements in the list?
The len() function can be used with several different types in Python - both built-in types and library types. For example:Official 2.x documentation is here: len()Official 3.x documentation is here: len()
How to get the size of a list?To find the size of a list, use the builtin function, len:And now:returns 3.ExplanationEverything in Python is an object, including lists. All objects have a header of some sort in the C implementation. Lists and other similar builtin objects with a "size" in Python, in particular, have an attribute called ob_size, where the number of elements in the object is cached. So checking the number of objects in a list is very fast.But if you're checking if list size is zero or not, don't use len - instead, put the list in a boolean context - it treated as False if empty, True otherwise.From the docslen(s)Return the length (the number of items) of an object. The argument may be a sequence (such as a string, bytes, tuple, list, or range) or  a collection (such as a dictionary, set, or frozen set).len is implemented with __len__, from the data model docs:object.__len__(self)Called to implement the built-in function len(). Should return the length of the object, an integer >= 0. Also, an object that doesnâ€™t  define a __nonzero__() [in Python 2 or __bool__() in Python 3] method and whose __len__() method returns zero  is considered to be false in a Boolean context.And we can also see that __len__ is a method of lists:returns 3.Builtin types you can get the len (length) ofAnd in fact we see we can get this information for all of the described types:Do not use len to test for an empty or nonempty listTo test for a specific length, of course, simply test for equality:But there's a special case for testing for a zero length list or the inverse. In that case, do not test for equality.Also, do not do:Instead, simply do:orI explain why here but in short, if items or if not items is both more readable and more performant.
While this may not be useful due to the fact that it'd make a lot more sense as being "out of the box" functionality, a fairly simple hack would be to build a class with a length property:You can use it like so:Essentially, it's exactly identical to a list object, with the added benefit of having an OOP-friendly length property.As always, your mileage may vary.
Besides len you can also use operator.length_hint (requires Python 3.4+). For a normal list both are equivalent, but length_hint makes it possible to get the length of a list-iterator, which could be useful in certain circumstances:But length_hint is by definition only a "hint", so most of the time len is better.I've seen several answers suggesting accessing __len__. This is all right when dealing with built-in classes like list, but it could lead to problems with custom classes, because len (and length_hint) implement some safety checks. For example, both do not allow negative lengths or lengths that exceed a certain value (the sys.maxsize value). So it's always safer to use the len function instead of the __len__ method!
Answering your question as the examples also given previously:
And for completeness, it is possible without using the len() function (I would not condone this as a good option):(The colon in list[:] is implicit and is therefore also optional.)


Answer URL
https://docs.python.org/3/library/functions.html#len
