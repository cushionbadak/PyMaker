Natural Text
I'dl like to generate some alphanumeric passwords in python. Some possible ways are:But I don't like both because:  way 1 only unique chars selected and you can't generate passwords where length > len(chars)way 2 we have i variable unused and I can't find good way how to avoid thatSo, any other good options?P.S. So here we are with some testing with timeit for 100000 iterations:So, the winner is ''.join(choice(chars) for _ in xrange(length)).
Python 3.6 onwardsYou should use the secrets module to generate cryptographically safe passwords, which is available starting in Python 3.6. Adapted from the documentation:
For the crypto-PRNG folks out there:Note that for an even distribution, the chars string length ought to be an integral divisor of 128; otherwise, you'll need a different way to choose uniformly from the space.
WARNING this answer should be ignored due to critical security issues!Option #2 seems quite reasonable except you could add a couple of improvements:_ is a conventional "I don't care what is in there" variable. And you don't need list comprehension there, generator expression works just fine for str.join. It is also not clear what "slow" means, if it is the only correct way.
I think this'll do the trick. random.SystemRandom uses the same underlying crypto random function as os.urandom but it uses the familiar random interface.  This function won't be subject to the weird 128 byte thing as in Ben's answer.  
I suggest the following for those stuck on python <3.6:This has the advantage over Ben Mosher's solution that the each symbol from symbols has an equal change of occurring whereas using modulus slightly favors the first symbols in the alpabet. The alphabet of symbols is also larger in this suggestion.
I wrote a script with my preferences, which mostly are concerned with avoiding mistakes when transcribing and remembering.  (For example: remove somewhat ambiguous and no repeated characters.)
You may want to use map instead of list comprehensions:


Answer URL
https://docs.python.org/3/library/secrets.html#recipes-and-best-practices
