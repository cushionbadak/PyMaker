Natural Text
Given the following listI am trying to count how many times each word appears and display the top 3.However I am only looking to find the top three that have the first letter capitalized and ignore all words that do not have the first letter capitalized.I am sure there is a better way than this, but my idea was to do the following:put the first word in the list into another list called uniquewordsdelete the first word and all its duplicated from the original listadd the new first word into unique wordsdelete the first word and all its duplicated from original list.etc...until the original list is empty....count how many times each word in uniquewords appears in the original listfind top 3 and print
If you are using an earlier version of Python or you have a very good reason to roll your own word counter (I'd like to hear it!), you could try the following approach using a dict.Top Tip: The interactive Python interpretor is your friend whenever you want to play with an algorithm like this. Just type it in and watch it go, inspecting elements along the way.
In Python 2.7 and above there is a class called Counter which can help you:Result:I am quite new to programming so please try and do it in the most barebones fashion.You could instead do this using a dictionary with the key being a word and the value being the count for that word. First iterate over the words adding them to the dictionary if they are not present, or else increasing the count for the word if it is present. Then to find the top three you can either use a simple O(n*log(n)) sorting algorithm and take the first three elements from the result, or you can use a O(n) algorithm that scans the list once remembering only the top three elements.An important observation for beginners is that by using builtin classes that are designed for the purpose you can save yourself a lot of work and/or get better performance. It is good to be familiar with the standard library and the features it offers.
To just return a list containing the most common words:this prints:the 3 in "most_common(3)", specifies the number of items to print. Counter(words).most_common() returns a a list of tuples with each tuple having the word as the first member and the frequency as the second member.The tuples are ordered by the frequency of the word."the word for word, word_counter in", extracts only the first member of the tuple.
Is't it just this ....Which should output [('Jellicle', 6), ('Cats', 5), ('are', 3)]
nltk is convenient for a lot of language processing stuff. It has methods for frequency distribution built in. Something like:
A simple, two-line solution to this, which does not require any extra modules is the following code:Output:The term in squared brackets returns all unique strings in the list, which are not empty and start with a capital letter. The sorted() function then sorts them by how often they appear in the list (by using the lst.count key) in reverse order. 
The simple way of doing this would be (assuming your list is in 'l'):Complete sample:With simple I mean working in nearly every version of python.if you don't understand some of the functions used in this sample, you can always do this in the interpreter (after pasting the code above):
The answer from @Mark Byers is best, but if you are on a version of Python < 2.7 (but at least 2.5, which is pretty old these days), you can replicate the Counter class functionality very simply via defaultdict (otherwise, for python < 2.5, three extra lines of code are needed before d[i] +=1, as in @Johnnysweb's answer).Then, you use the class exactly as in Mark Byers's answer, i.e.:
There's two standard library ways to find the most frequent value in a list:statistics.mode:Raises an exception if there's no unique most frequent valueOnly returns single most frequent valuecollections.Counter.most_common:Can return multiple most frequent valuesReturns element count as wellSo in the case of the question, the second one would be the right choice. As a side note, both are identical in terms of performance.
If you are using Count, or have created your own Count-style dict and want to show the name of the item and the count of it, you can iterate around the dictionary like so:or to iterate through this in a template:Hope this helps someone


Answer URL
https://docs.python.org/3/library/statistics.html#statistics.mode
