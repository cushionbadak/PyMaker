Natural Text
What is the fastest way to check if a string matches a certain pattern? Is regex the best way?For example, I have a bunch of strings and want to check each one to see if they are a valid IP address (valid in this case meaning correct format), is the fastest way to do this using regex? Or is there something faster with like string formatting or something. Something like this is what I have been doing so far:
It looks like you are trying to validate IP addresses. A regular expression is probably not the best tool for this.If you want to accept all valid IP addresses (including some addresses that you probably didn't even know were valid) then you can use IPy (Source):If the IP address is invalid it will throw an exception.Or you could use socket (Source):If you really want to only match IPv4 with 4 decimal parts then you can split on dot and test that each part is an integer between 0 and 255.Note that your regular expression doesn't do this extra check. It would accept 999.999.999.999 as a valid address.
I'm normally the one of the very few Python experts who steadfastly defends regular expressions (they have quite a bad reputation in the Python community), but this is not one of those cases -- accepting (say) '333.444.555.666' as an "IP address" is really bad, and if you need to do more checks after matching the RE, much of the point of using a RE is lost anyway.  So, I second @Mark's recommendations heartily: IPy for generality and elegance (including support of IPv6 if you want!), string operations and int checks if you only need IPv4 (but, think twice about that limitation, and then think one more -- IPv6's time has way come!-):I'd far rather do that than a convoluted RE to match only numbers between 0 and 256!-)
If you use Python3, you can use ipaddress module http://docs.python.org/py3k/library/ipaddress.html. Example: 
One more validation without re:
Your regular expression doesn't check for the end of the string, so it would match:To fix this, use:(note the $ at the end).Finally, in Python the usual style is to use is not None instead of != None.
Install netaddr packageAnd then you can do thisAlso you create a IPAddress object from that string and a lot more ip related operations
you should precompile the regexp, if you use it repeatedlythen usebut.. is e.g. '111.222.333.444' really the IP?i'd look at netaddr or ipaddr libraries whether they can be used to match IPs
If you are validating IP address I would suggest the following:If you just want to check if it is in the right format then you would want to do it for all legal bases (not just base 10 numbering).Also, are the IP address IPv4 only (and none are IPv6) then you could just look up what valid address are and use split() (to get individual components of the IP) and int() (to type-caste for comparison). A quick reference to valid IPv4 rules is here.
We do not need any import to do this. This also works much faster
Other regex answers in this page will accept an IP with a number over 255.This regex will avoid this problem:
You can make it a little faster by compiling it:
I cheated and used combination of multiple answers submitted by other people. I think this is pretty clear and straight forward piece of code. ip_validation should return True or False. Also this answer only works for IPv4 addresses
Very simple to check whether given IP is valid or not using in built library ipaddress. You can also validate using mask value.Note: Tested in Python 3.4.3
This works for ipv6 addresses as well.Unfortunately it Works for python3 only
Save the code with some name say- check_ip.py and run it as python check_ip.py 192.168.560.25Note:-  Above code fails for the below ip address-023.65.029.33
On Python 3.6 I think is much simpler as ipaddress module is already included:
You may try the following (the program can be further optimized):
You can use regular expressions: http://www.regular-expressions.info/python.html


Answer URL
https://docs.python.org/3/library/ipaddress.html
