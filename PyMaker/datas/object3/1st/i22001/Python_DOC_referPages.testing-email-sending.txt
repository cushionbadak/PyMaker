Natural Text
Any tips on testing email sending? Other than maybe creating a gmail account, especially for receiving those emails?I would like to, maybe, store the emails locally, within a folder as they are sent.
You can use a file backend for sending emails which is a very handy solution for development and testing; emails are not sent but stored in a folder you can specify!
Django test framework has some built in helpers to aid you with testing e-mail service.Example from docs (short version):
If you are into unit-testing the best solution is to use the In-memory backend provided by django.Take the case of use it as a py.test fixtureIn each test, the mail.outbox is reset with the server, so there are no side effects between tests.
For any project that doesn't require sending attachments, I use django-mailer, which has the benefit of all outbound emails ending up in a queue until I trigger their sending, and even after they've been sent, they are then logged - all of which is visible in the Admin, making it easy to quickly check what you emailing code is trying to fire off into the intertubes.
Django also has an in-memory email backend. More details in the docs under In-memory backend. This is present in Django 1.6 not sure if it's present in anything earlier.
Patching SMTPLib for testing purposes can help test sending mails without sending them.http://www.psychicorigami.com/2007/09/20/monkey-patching-pythons-smtp-lib-for-unit-testing/
Use MailHogInspired by MailCatcher, easier to install.Built with Go - MailHog runs without installation on multiple platforms.Also, it has a component called Jim, the MailHog Chaos Monkey, which enables you to test sending emails with various problems happening:What can Jim do?Reject connectionsRate limit connectionsReject authenticationReject sendersReject recipientsRead more about it here.(Unlike original mailcatcher, which failed on me when sending emails with emoji, encoded in UTF-8 and it WASN'T really fixed in the current release, MailHog just works.)
Using the file backend works well, but I find it a little a cumbersome to poke around the filesystem to look at emails.  You could use mailcatcher, https://github.com/sj26/mailcatcher, to capture emails and display them in a web UI.To use mailcatcher with Django you'll need to add something like the following to your settings.py:
Why not start your own really simple SMTP Server by inherit from smtpd.SMTPServer and threading.Thread:process_message is called whenever your SMTP Server receive a mail request, you can do whatever you want there.In the testing code, do something like this:Just remember to close() the asyncore.dispatcher by calling smtp_server.close() to end the asyncore loop(stop the server from listening).
My solution is write content to a html file. This way can help you see how email look like. I leave it here htmlfilebased.EmailBackend.Other tip: You can use django email template editor which can help you edit your email template with zero inline css.
If you have a TomCat server available, or other servlet engine, then a nice approach is "Post Hoc" which is a small server that looks to the application exactly like a SMTP server, but it includes a user interface that allows you to view and inspect the email messages that were sent.   It is open source and freely available.   Find it at: Post Hoc GitHub SiteSee the blog post:  PostHoc: Testing Apps that Send Email
https://websocket.email provides a simple way to test email sending with minimal setup (you don't even need an account).
Use Maildump.https://github.com/ThiefMaster/maildumpMailDump is a python-based clone of the awesome MailCatcher tool. Its  purpose is to provide developers a way to let applications send emails  without actual emails being sent to anyone. Additionally lazy  developers might prefer this over a real SMTP server simply for the  sake of it being much easier and faster to set up.However it requires Python 2.


Answer URL
https://docs.python.org/3/library/smtpd.html
https://docs.python.org/3/library/threading.html#threading.Thread
https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher.close
https://docs.python.org/3/library/asyncore.html#asyncore.dispatcher
