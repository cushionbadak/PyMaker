Natural Text
Is there a Python equivalent to Ruby symbols? If so then what is it?If not then are we stuck with using strings as our keys in dictionaries only?
No, python doesn't have a symbol type.However string literals are interned by default and other strings can be interned using the intern function. So using string literals as keys in dictionaries is not less performant than using symbols in ruby.
As others have said, there is no symbol in Python, but strings work well.To avoid quoting strings as keys, use the dict() constructor syntax:
Also for those interested: symbols in Ruby when used in a hash are very similar to empty objects in python. For example you could do:and then set a dictionary key as some_var:and then do a standard retrieval:However, as sepp2k noted there is no performance benefit in doing this. In fact I did a quick test and noted little to no performance boost: Speed tested in ipython:So in my case the 'symbols' run slower! (for fun numbers, not accurate). However it is to note that there are probably memory advantages to doing it this way. If you don't care about the key type objects have a smaller footprint than strings. Although that raises the question of how python treats the memory of the variable name some_var. 
No, there is no equivalent.No you can use every hashable object as dictionary key.
Not as a first-class type but there does exist https://pypi.python.org/pypi/SymbolType.


Answer URL
https://docs.python.org/3/library/sys.html#sys.intern
