Natural Text
How do I find multiple occurrences of a string within a string in Python? Consider this:So the first occurrence of ll is at 1 as expected. How do I find the next occurrence of it?Same question is valid for a list. Consider:How do I find all the ll with their indexes? 
Using regular expressions, you can use re.finditer to find all (non-overlapping) occurences:Alternatively, if you don't want the overhead of regular expressions, you can also repeatedly use str.find to get the next index:This also works for lists and other sequences.
I think what you are looking for is string.countHope this helps NOTE: this only captures non-overlapping occurences
For the list example, use a comprehension:Similarly for strings:this will list adjacent runs of "ll', which may or may not be what you want:
FWIW, here are a couple of non-RE alternatives that I think are neater than poke's solution.The first uses str.index and checks for ValueError:The second tests uses str.find and checks for the sentinel of -1 by using iter:To apply any of these functions to a list, tuple or other iterable of strings, you can use a higher-level function —one that takes a function as one of its arguments— like this one:
For your list example:If you wanted all the items in a list that contained 'll', you could also do that.

Brand new to programming in general and working through an online tutorial. I was asked to do this as well, but only using the methods I had learned so far (basically strings and loops). Not sure if this adds any value here, and I know this isn't how you would do it, but I got it to work with this:
This version should be linear in length of the string, and should be fine as long as the sequences aren't too repetitive (in which case you can replace the recursion with a while loop).bstpierre's list comprehension is a good solution for short sequences, but looks to have quadratic complexity and never finished on a long text I was using.For a random string of non-trivial length, the two functions give the same result:But the quadratic version is about 300 times slower
This program counts the number of all substrings even if they are overlapped without the use of regex. But this is a naive implementation and for better results in worst case it is advised to go through either Suffix Tree, KMP and other string matching data structures and algorithms.
Here is my function for finding multiple occurrences. Unlike the other solutions here, it supports the optional start and end parameters for slicing, just like str.index:
A simple iterative code which returns a list of indices where the substring occurs.
You can split to get relative positions then sum consecutive numbers in a list and add (string length * occurence order) at the same time to get the wanted string indexes.  
Maybe not so Pythonic, but somewhat more self-explanatory. It returns the position of the word looked in the original string. 
This link explains how to do the whole thing in O(n) and includes a solution in python as well.If you go further down the sets to 'Suffix trees' you'd be able to do the same thing if you had one big string but wanted to search for 1000s of patterns in it.
I think there's no need to test for length of text; just keep finding until there's nothing left to find. Like this:
You can also do it with conditional list comprehension like this:
I had randomly gotten this idea just a while ago. Using a While loop with string splicing and string search can work, even for overlapping strings.I'm an amateur in Python Programming (Programming of any language, actually), and am not sure what other issues it could have, but I guess it's working fine?I guess lower() could be used somewhere in it too if needed.


Answer URL
