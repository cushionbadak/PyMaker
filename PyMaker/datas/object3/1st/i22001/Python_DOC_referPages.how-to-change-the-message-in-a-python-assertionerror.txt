Natural Text
I'm writing per the following, in which I try to produce a decent error message when comparing two multiline blocks of Unicode text. The interior method that does the comparison raises an assertion, but the default explanation is useless to meI need to add something to code such as this below:I cannot figure out how to change the printed error message in the assertionerror I catch. I always get AssertionError: u'something' != 'something else', which only shows the first line of the output.How can I change the assertion message to print out whatever I want?If it's relevant, I am using nose to run the test.
Use e.args, e.message is deprecated.This preserves the original traceback. Its last part then looks like this:Works in both Python 2.7 and Python 3.
For instance,From the docs:Assert statements are a convenient way  to insert debugging assertions into a  program:The simple form,  assert expression, is equivalent toThe extended formis equivalent toThese equivalences assume that  __debug__ and AssertionError refer to the built-in variables with those  names. In the current implementation,  the built-in variable __debug__ is  True under normal circumstances, False  when optimization is requested  (command line option -O). The current  code generator emits no code for an  assert statement when optimization is  requested at compile time. Note that  it is unnecessary to include the  source code for the expression that  failed in the error message; it will  be displayed as part of the stack  trace.
You want to take the caught exception, convert it to a string, combine it with some additional string info, and raise a new exception.
With this method I was able to edit the message and still have the stack trace (+any other information) visible. Also newlines are displayed right.
You can pass the desired message when creating the exception.Hope this helps.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement
