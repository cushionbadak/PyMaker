Natural Text
In Python, strings are immutable.What is the standard idiom to walk through a string character-by-character and modify it?The only methods I can think of are some genuinely stanky hacks related to joining against a result string.--In C:This is super expressive and says exactly what I am doing. That is what I am looking for. 
Don't use a string, use something mutable like bytearray:Results in:Edit:Since this is a bytearray, you aren't (necessarily) working with characters. You're working with bytes. So this works too:gives:If you want to modify characters in a Unicode string, you'd maybe want to work with memoryview, though that doesn't support Unicode directly.
The Python analog of your C:would be:which is also very expressive.  It says exactly what is happening, but in a functional style rather than a procedural style.
you can use the UserString module:
I'd say the most Pythonic way is to use map():This is the equivalent of writing:
string.translate is probably the closest function to what you're after.
Strings are iterable and can be walked through like lists.  Strings also have a number of basic methods such as .replace() that might be what you're looking for.  All string methods return a new string. So instead of modifying the string in place you can simply replace its existing value.
Assigning a particular character to a particular index in a string is not a particularly common operation, so if you find yourself needing to do it, think about whether there may be a better way to accomplish the task. But if you do need to, probably the most standard way would be to convert the string to a list, make your modifications, and then convert it back to a string.EDIT: As posted in bstpierre's answer, bytearray is probably even better for this task than list, as long as you're not working with Unicode strings.
If you want to store this new string you'll have to mystring = mystring.replace("1", "i"). This is because in Python strings are immutable.
Here is an example using translate to switch "-" with "." and uppercase "a"sThis is much more efficient that flipping to byte array and back if you just need to do single char replacements
The question first states that strings are immutable and then asks for a way to change them in place. This is kind of contradictory. Anyway, as this question pops up at the top of the list when you search for "python string in-place modification", I'm adding the answer for a real in place change.Strings seem to be immutable when you look at the methods of the string class. But no language with an interface to C can really provide immutable data types. The only question is whether you have to write C code in order to achieve the desired modification.Here python ctypes is your friend. As it supports getting pointers and includes C-like memory copy functions, a python string can be modified in place like this:Results in:(Of course, you can calculate the replacement string at runtime by applying a function F to every character of the original string. Different ways how to do this have been shown in the previous answers.)Note that I do not in any way encourage doing this. However, I had to write a replacement for a class that was mapped from C++ to python and included a method:(The caller is supposed to provide memory with length bytes and the method then writes the available data -- up to length -- into that memory, returning the number of bytes written.) While this is a perfectly sensible API in C/C++, it should not have been made available as method of a python class or at least the users of the API should be made aware that they may only pass mutable byte arrays as parameter. As you might expect, "common usage" of the method is as shown in my example (create a string and pass it together with its length as arguments). As I did not really want to write a C/C++ extension I had to come up with a solution for implementing the behavior in my replacement class using python only.

If I ever need to do something like that I just convert it to a mutable listFor example... (though it would be easier to use sort (see second example) )
You can use StringIO class to receive file-like mutable interface of string. 


Answer URL
https://docs.python.org/3/library/io.html#io.StringIO
