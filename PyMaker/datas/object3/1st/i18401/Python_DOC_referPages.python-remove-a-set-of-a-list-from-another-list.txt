Natural Text

Try this: The above makes use of the difference() method of sets, which returns a new set with elements in the set that are not in the iterable(s) received as parameter. Notice that there's no need to convert array2 to a set for this to work.Also be aware that by using sets, all duplicate elements will be removed and the original order of the iterables won't necessarily be preserved. If that's an issue, try this alternative solution:
If you don't care about the order of elements in the result, or about duplicate elements, set.difference, as in Óscar López's answer, is exactly what you want.If you do care about order and preserving duplicates, the simplest way is to just build a new list, filtering out the ones in array2:If you need to destructively modify array1 in-place instead of building a new one, it's almost always simpler to just destructively replace the contents of array1 all at once:If you really want to modify it element by element, the best way would be to iterate array1 backward, removing in-place:Finally, you can do it the way flornquake suggested, but that will take quadratic time instead of linear, because it takes no advantage of the set; for each element in set2, it does a linear array1.remove.
Do you want array1 - array2?set1 = set(array1)set2 = set(array2)set1.difference(set2) is what you want.
s -> sequencehttp://docs.python.org/3/library/stdtypes.html#index-23None of the elements in array1 is a set.  All the elements in array1 are integers.
The remove() method takes a single element of the list, so we have to call it once for each element:Other methods such as Óscar's and abanert's are better though, they are more idiomatic and a lot more efficient.


Answer URL
