Natural Text
I have now:I wish to have:Simply an element-wise addition of two lists.I can surely iterate the two lists, but I don't want do that.What is the most Pythonic way of doing so?
Use map with operator.add:or zip with a list comprehension:Timing comparisons:
The others gave examples how to do this in pure python. If you want to do this with arrays with 100.000 elements, you should use numpy:Doing the element-wise addition is now as trivial asjust like in Matlab.Timing to compare with Ashwini's fastest version:So this is a factor 25 faster! But use what suits your situation. For a simple program, you probably don't want to install numpy, so use standard python (and I find Henry's version the most pythonic one). If you are into serious number crunching, let numpy do the heavy lifting. For the speed freaks: it seems that the numpy solution is faster starting around n = 8.

As described by others, a fast and also space efficient solution is using numpy (np) with it's built-in vector manipulation capability:1. With Numpy2. With built-ins2.1 LambdaNotice that map() supports multiple arguments.2.2 zip and list comprehension
It's simpler to use numpy from my opinion:Results:For detailed parameter information, check here: numpy.add
Perhaps "the most pythonic way" should include handling the case where list1 and list2 are not the same size. Applying some of these methods will quietly give you an answer. The numpy approach will let you know, most likely with a ValueError.Example:Which result might you want if this were in a function in your problem?
This will work for 2 or more lists; iterating through the list of lists, but using numpy addition to deal with elements of each list
This is simple with numpy.add()See doc hereIf you want to receiver a python list:
Use map with lambda function:
I haven't timed it but I suspect this would be pretty quick:  
If you need to handle lists of different sizes, worry not! The wonderful itertools module has you covered:In Python 2, zip_longest is called izip_longest.See also this relevant answer and comment on another question.

Although, the actual question does not want to iterate over the list to generate the result, but all the solutions that has been proposed does exactly that under-neath the hood! To refresh: You cannot add two vectors without looking into all the vector elements. So, the algorithmic complexity of most of these solutions are Big-O(n). Where n is the dimension of the vector.So, from an algorithmic point of view, using a for loop to iteratively generate the resulting list is logical and pythonic too. However, in addition, this method does not have the overhead of calling or importing any additional library.The timings that are being showed/discussed here are system and implementation dependent, and cannot be reliable measure to measure the efficiency of the operation. In any case, the big O complexity of the vector addition operation is linear, meaning O(n).


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
