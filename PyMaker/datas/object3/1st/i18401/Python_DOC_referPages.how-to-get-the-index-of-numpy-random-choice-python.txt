Natural Text
Is it possible to modify the numpy.random.choice function in order to make it return the index of the chosen element? Basically, I want to create a list and select elements randomly without replacementa.remove(np.random.choice(a)) will remove the first element of the list with that value it encounters (a[1] in the example above), which may not be the chosen element (eg, a[7]).
Here's one way to find out the index of a randomly selected element:Or you could retrieve the element and the index in a single step:
If you want a sample without replacement, just ask numpy to make you one. Don't loop and draw items repeatedly. That'll produce bloated code and horrible performance.Example:
Regarding your first question, you can work the other way  around, randomly choose from the index of the array a and then fetch the value.But if you just need random sample without replacement, replace=False will do. Can't remember when it was firstly added to random.choice, might be 1.7.0. So if you are running very old numpy it may not work. Keep in mind the default is replace=True
This is a bit in left field compared with the other answers, but I thought it might help what it sounds like you're trying to do in a slightly larger sense. You can generate a random sample without replacement by shuffling the indices of the elements in the source array :This will create a sample (here, of size 10) by drawing elements from the source set (here, of size 100) without replacement.You can interact with the non-selected elements by using the remaining index values, i.e.:
Based on your comment:The sample is already a. I want to work directly with a so that I can control how many elements are still left and perform other operations with a. â€“ HappyPyit sounds to me like you're interested in working with a after n randomly selected elements are removed.  Instead, why not work with N = len(a) - n randomly selected elements from a?  Since you want them to still be in the original order, you can select from indices like in @CTZhu's answer, but then sort them and grab from the original list:So now you can save that as a again:and work with a with n elements removed.
Instead of using choice, you can also simply random.shuffle your array, i.e.


Answer URL
https://docs.python.org/3/library/random.html#random.shuffle
