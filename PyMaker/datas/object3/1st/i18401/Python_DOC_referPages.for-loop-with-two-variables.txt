Natural Text
How can I include two variables in the same for loop?
If you want the effect of a nested for loop, use:If you just want to loop simultaneously, use:Note that if x and y are not the same length, zip will truncate to the shortest list.  As @abarnert pointed out, if you don't want to truncate to the shortest list, you could use itertools.zip_longest.UPDATEBased on the request for "a function that will read lists "t1" and "t2" and return all elements that are identical", I don't think the OP wants zip or product.  I think they want a set:The intersection method of a set will return all the elements common to it and another set (Note that if your lists contains other lists, you might want to convert the inner lists to tuples first so that they are hashable; otherwise the call to set will fail.).  The list function then turns the set back into a list.UPDATE 2OR, the OP might want elements that are identical in the same position in the lists.  In this case, zip would be most appropriate, and the fact that it truncates to the shortest list is what you would want (since it is impossible for there to be the same element at index 9 when one of the lists is only 5 elements long).  If that is what you want, go with this:This will return a list containing only the elements that are the same and in the same position in the lists.
There's two possible questions here: how can you iterate over those variables simultaneously, or how can you loop over their combination.Fortunately, there's simple answers to both. First case, you want to use zip.will outputRemember that you can put any iterable in zip, so you could just as easily write your exmple like:Actually, just realised that won't work. It would only iterate until the smaller range ran out. In which case, it sounds like you want to iterate over the combination of loops.In the other case, you just want a nested loop.gives youYou can also do this as a list comprehension.Hope that helps.
Any reason you can't use a nested for loop?
should do it.
If you really just have lock-step iteration over a range, you can do it one of several ways:All of the above are equivalent to for i, j in zip(range(x), range(y)) if x <= y.If you want a nested loop and you only have two iterables, just use a nested loop:If you have more than two iterables, use itertools.product.Finally, if you want lock-step iteration up to x and then to continue to y, you have to decide what the rest of the x values should be.
"Python 3."Add 2 vars with for loop using zip and range; Returning a list.Note: Will only run till smallest range ends.
I think you are looking for nested loops. Example (based on your edit):Which can be reduced to a single comprehension:But to find the common elements, you can just do:If your list contains non-hashable objects (like other lists, dicts) use a frozen set:
For your use case, it may be easier to utilize a while loop.As a caveat, this approach will truncate to the length of your shortest list.


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#while
