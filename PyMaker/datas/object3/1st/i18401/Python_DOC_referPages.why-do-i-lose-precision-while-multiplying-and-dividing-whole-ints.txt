Natural Text
I had thought Python3 is supposed to be able to handle numbers of arbitrary length, but I'm running into a problem where they don't seem to act consistently.After multiplying then dividing, my int seems to have changed it's internal representation, and no longer evaluates as a match for it's former self.I'm using whole numbers, without any decimals or fractions, but it's acting almost as if it's losing precision to rounding..?I'd appreciate any insight on why this is happening, and if there's something I should be doing differently. I have workarounds for my code, but since the result is counter-intuitive, I'd love to know what's behind the behavior ;)This seems to work if I use floor division, however-Python 2.7 also seems to avoid this scenerio, keeping them in longsI'd appreciate any insight!Thank you!
You are dividing using the true division operator /, which will always result in floating point values. Use floor division instead, //, to get integer results:Your computer hardware cannot handle float values with the required precision.The alternative is to use decimal.Decimal() values, but this will result in slower arithmetic operations.In Python 2, the / operator is the floor division operator, but when applied to integers only. To get the same behaviour in Python 2, add:The behaviour was changed because the difference between using only integer operators and using at least one float argument was confusing.In other words, the standard Python 2 / operator is a different beast from the Python 3 / division operator. When applied to two integer operands, it acts just like the // floor division operator in Python 3. But if either one of the two operands is a float instead, then it acts like the / float division operator instead. The above __future__ import swaps out the Python 2 / operator for the true division operator found in Python 3.You can see this when disassembling Python bytecode:the __future__ import caused the Python compiler to use a different bytecode for the division operator, swapping BINARY_DIVIDE for BINARY_TRUE_DIVIDE.


Answer URL
