Natural Text
This question already has an answer here:Is False == 0 and True == 1 in Python an implementation detail or is it guaranteed by the language?                    6 answers                Anyways when debuging my code I found statement that basically subtracted boolean from float.Then I tried following in python console: Can anyone explain to me: Why subtracting booleans from numeric types is legal (the docs only state that you can do and, not and or on boolean values: http://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not)Has this any practical use?
http://docs.python.org/3/library/stdtypes.html#boolean-valuesBoolean values are the two constant objects False and True. They are used to represent truth values (although other values can also be considered false or true).In numeric contexts (for example when used as the argument to an arithmetic operator), they behave like the integers 0 and 1, respectively.not really nowadays, but you can write result = numeric_value * a_bool (this one is used a lot, for example, in shader languages)instead ofresult = numeric_value if a_bool else 0or result = (value_if_false, value_if_true)[a_bool]Don't do any of that though.It's mostly what people with experience in lower-level languages expect, why take that away from them? In C, true and false are still macros for 1 and 0.Before 2.3, there was no bool type in Python as well, so when it was introduced making it a subclass of int made sure no code was broken.
It is legal, because bool is a subclass of int:Yes, it has some practical application. For example it was possible to do something like that before ternary statement was introduced:Which basically does what would be done in this code:Other practical usages are:you can sum several checks / booleans to receive number of results equaling True,you can multiply by the result of the check:
True evaluates to 1 and False evaluates to 0.Bool is a subclass of int. As stated in PEP-285:6) Should bool inherit from int?=> Yes.In an ideal world, bool might be better implemented as a separate  integer type that knows how to perform mixed-mode arithmetic.   However, inheriting bool from int eases the implementation enormously  (in part since all C code that calls PyInt_Check() will continue to  work -- this returns true for subclasses of int).  Also, I believe  this is right in terms of substitutability: code that requires an int  can be fed a bool and it will behave the same as 0 or 1.  Code that  requires a bool may not work when it is given an int; for example, 3 &  4 is 0, but both 3 and 4 are true when considered as truth values.This isn't of any much practical use and there are other answers with sudo examples of using bools. I thought it would be good to have some real examples:The section in question:The selection of the return each line is based on two boolean expressions, if both are true we get (True) + 2*(True) which evaluates to 4 which is a fizzbuzz. Not too hard to understand once you get used to the idea that True == 1 and False == 0 Further more keeping with the theme:This example relies on what happens when you multiply strings in python:And that not True evaluates to 0:Uses for this fall into two categories:Making harder to read code. Competing in code golf competitions.


Answer URL
