Natural Text
I'm trying to determine if there are any reference counting memory leaks in a Python C extension module. Consider this very simple test extension that leaks a date object:PyDate_FromDate creates a new reference (i.e. internally calls Py_INCREF) and since I never call Py_DECREF, this object will never get garbage collected.However, when I call this function, the number of objects being tracked by the garbage collector doesn't seem to change before and after the function call:And I can't seem to find the leaked date object at all in the list of objects returned by gc.get_objects():Am I missing something here about how gc.get_objects() works? Is there another way to demonstrate that the memleak() function has a memory leak?
From the documentation of the gc module:Since the collector supplements the reference counting already used  in Python, you can disable the collector if you are sure your program  does not create reference cycles.So the gc module is used only to deal with references cycles. In your case there is no cycle, hence the date object isn't returned by the get_objects function.In fact old versions of python did not have the garbage collector at all, they only used reference-counting. The garbage collector was introduced to avoid creating memory leaks with reference-cycles(since this can be done from the python side pretty easily, and you do not want that a pure-python programs create memory leaks).To see that kind of memory leak you should call the memleak function in a loop and see that the memory used increases (slowly in your case).There are also some 3rd party libraries that can be used to profile memory usage, see the Which Python memory profiler is recommended? question on SO.
For this type of debugging, you want to use an instance of Python that is compiled with the --with-pydebug option. One of the features enabled by debug mode is tracking the total number of reference counts via a new function in the sys module - gettotalrefcount().For more information, see http://docs.python.org/3/c-api/intro.html#debugging-builds
Solve your problem Py_DECREF(date);


Answer URL
