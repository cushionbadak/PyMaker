Natural Text
The concept is simple. I want to create a list of 26 by 26 and fill it with the alphabet. Except that each time, I have to shift one letter to the right.Example: A, B, C, E, F, G...Z, A, B, C, E, F, G...Y, Z, A, B, C, E, F, G... I made this code which works but it displayed the basic alphabet at the end. Looks like the array is resseted to the basic alphabet.I get  ['A' 'B' 'C' 'D' 'E' 'F' 'G' 'H' 'I' 'J' 'K' 'L' 'M' 'N' 'O' 'P' 'Q' 'R' 'S' 'T' 'U' 'V' 'W' 'X' 'Y' 'Z']  26 times instead of getting the right result.
You are over thinking it, there is no need to use numpy here.To shift a letter, just get the latest letter, remove it from the list and add it on the front, eg:Note that: There are other ways to solve this issue, just demonstrated a way which is readable and easy to understand.
It uses a few tricks. First of all, list comprehension to make the 2D array. You don't need numpy. Second of all, it uses modulo arithmetic, chr() and ord().This will give you an array with each row:Does the shift for each row, but goes out of the 0-26 rangeUsing mod 26, we put our numbers into the 0-25 range. Now it's just a question of turning 0-25 into A-Z. The built-ins chr() and ord() help you there.
The problem may be simpler than you're making it:
A deque has a rotate method; turn your list into a deque; append the deque (as a list) to the final list; rotate; repeat 25 times.


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
