Natural Text
Suppose I have a speak function:I can disassemble it as one usually does, with dis.dis:But I want to destruct the code object associated with the speak function into a sequence of instructions, and then compile these back.With the help of dis.Bytecode, I can get a sequence of dis.Instructions that represents the code object:Is there a straightforward way to compile these Instruction objects into the original code object?For instance, I'm looking for a compile_back function that would take a sequence of instructions and output an executable code object:
The sequence of Instruction objects from dis.Bytecode is not enough to reconstruct a code object. A code object isn't just a sequence of instructions; it includes plenty of other data, like the argument count, the size of the evaluation stack, flags indicating various properties, etc. Most of these things are (briefly) described in a table in the inspect module docs, but there's even some "scratch space" not accessible through ordinary means.Instruction objects would be enough to recover a lot of a code object's information, but not all. With some dangerous assumptions, you might be able to get something that usually works, but it'd be better to keep more of the information from the original code object in the first place.In any case, there's no straightforward way.


Answer URL
https://docs.python.org/3/library/dis.html#dis.dis
https://docs.python.org/3/library/dis.html#dis.Bytecode
https://docs.python.org/3/library/dis.html#dis.Instruction
https://docs.python.org/3/library/inspect.html#types-and-members
