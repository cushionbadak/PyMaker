Natural Text
I'm comparing Unicode strings between JSON objects.They have the same value:But they have different Unicode representations:How can I compare between two Unicode strings on their value?
Unicode normalization will get you there for this one:Use unicodedata.normalize on both of your strings before comparing them with == to check for canonical Unicode equivalence.Character U+F9FB is a "CJK Compatibility" character. These characters decompose into one or more regular CJK characters when normalized.
Character U+F9FB (炙) is a CJK Compatibility Ideograph. These characters are distinct code points from the regular CJK characters, but they decompose into one or more regular CJK characters when normalized.Unicode has an official string collation algorithm called UCA designed for exactly this purpose. Python does not come with UCA support as of 3.7,* but there are third-party libraries like pyuca:For this case—and many others, but definitely not all—picking the appropriate normalization to apply to both strings before comparing will work, and it has the advantage of support built into the stdlib.* The idea has been accepted in principle since 3.4, but nobody has written an implementation—in part because most of the core devs who care are using pyuca or one of the two ICU bindings, which have the advantage of working in current and older versions of Python.
I would have used PyICU and its Collator class. But first, you should think at what level of Unicode collation algorithm you want the equality to happen.This outputs:


Answer URL
https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize
