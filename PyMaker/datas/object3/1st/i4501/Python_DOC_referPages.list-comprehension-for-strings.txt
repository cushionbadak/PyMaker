Natural Text
I have two lists as shown below. I want to find whether the strings inside the first list are in any of the strings in the second list. For some reason, I get an empty list when I try to run this.For example: in list5, string 'apple' is in list6's 'I ate an apple'.The exact same things run smoothly for a list of integers. Is there a different way of going through the strings?
You are checking if apple is in the list but you want to check if any string in the list contains appleEDITThis creates a list of list in which contain the indexes of the sentence in the second list, which contain the word from the first list  As I said in my comment a dictionary would be better in this situationAnd if only exact matches should be stored you can use this, but this does not work if the first list does not only contain words, for example if list5 contains "an apple" this does NOT work
Your code is checking if x is a member of list6, when it seems like you want to know if x is a substring of any member in list6. You can do this using Python's reduce method (in functools with Python 3).The reduce call is iterating through all members of list6 and checking if x is a substring, then or'ing those results against exist (which defaults to False here) to return True if it's found at least once. See the Python3 documentation for functools.reduce for a better idea of how it works.
It sounds like you are asking for set intersection in which case I would just go around and use sets instead of lists and use the intersection operator instead of a loop, like this a & b where a and b are sets.But you example makes it seem like you are looking for substrings from list5 in each of the strings in list6, which is a totally different probably and one we would need more information about what your expected output would be to help you more.Also BTW, you don't need to use enumerate since you aren't using the value from it.

One way is to call a function in your list comprehension.It is not a one-liner, but the logic is clear and it will short-circuit as soon as a match is found.


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
