Natural Text
I have to check if foo is a attribute of myclass.Right now I dowhile I think I should be doingIs there any difference between the two approaches, and which one should be preferred?I am looking for the following criteria:Consistency with multiple inheritancePortability across python versions Limited overhead
Both of those approaches are functionally equivalent.From the hasattr docs:hasattr(object, name)The arguments are an object and a string. The result is True if the string is the name of one of the objectâ€™s attributes, False if  not. (This is implemented by calling getattr(object, name) and seeing  whether it raises an AttributeError or not.)And the getattr docs state the following:getattr(x, 'foobar') is equivalent to x.foobarRegarding speed, my tests show that hasattr is a little faster. The results with 1 million iterations were:Unless you're writing highly optimized code, there's no need to worry about such a small difference. There's also no need to worry about compatibility with python versions; attribute access and hasattr are available in every version of python.In the end, it comes down to preference. Choose whichever you find more readable.


Answer URL
https://docs.python.org/3/library/functions.html#hasattr
https://docs.python.org/3/library/functions.html#getattr
