Natural Text
For both files I am only looking at the first column (0th), which is for phone numbers. The files are sorted by phone number, so any duplicates are next to each other. I need to know how many rows there are of the same phone number in the cred file, and then I need to know how many rows with that same phone number there are in the pur file. I need to do this as many times as it takes to compare all number of duplicate phone numbers between filesex:What I would need to know with this example is that there are 2 instances of 2476 in the credits file versus 1 in the purchases file, and then that there is 1 instance of 3654 in the credits file versus 1 instance in the purchases file. I need to compare every single phone number in the cred file and get the number of occurrences in both files, but if there are phone numbers present in the pur file that are not in the cred file, I don't need to count anything. (But if there are 2 of a number in cred and none in pur, I do need a 0 to be returned for purnum.) Note that the real two files are 5,000kb and 13,000kb in size and have tens of thousands of lines.I'm a serious newbie to python so I'm not sure of the best way to go about this. Looping in python is definitely different than I'm used to (I mostly use c++)I will edit to add anything needed so please let me know if anything needs clarification. This isn't like any project I've ever had to do before so the explanation may not be ideal.EDIT: I think I may have skipped explaining an important factor because it was included in my sample code. I need to know those numbers only to compare them, not necessarily to print the counts. If crednum != 2*purnum, then I want to print that phone number and only that phone number, otherwise I don't need to see it in the output file, and I'll never need to actually print the counts, just use them for comparison to figure out what phone numbers need printing. 
I wrote some code. It essentially stores the number you're looking for duplicates as a key in the dictionary. The value that gets stored is the number of occurrences of that number within the file. It skips the first line (headers).Output is the following:New code above simply outputs:     3654EDIT: I updated the code to fix what you are referring to.
Since you're not interested in new entries, all you need is to run through the first file and collect all the entries in the first column (counting them in the process) and then run through the second file, check if any of its first column entries has been collected in the first step and if so - count them as well. You cannot avoid running the necessary number of loops to read all the lines of both files but you can use a hashmap (dict) for blazingly fast lookups afterwards, so:Now that you have count of all the phone numbers from the first file stored in the c_phones dictionary, you should clone it but reset the counters so you can count the occurences of these numbers in the second CSV file:And now that you have both dictionaries, and you have both counts you can easily iterate over them to print out the countsWhich, with your example data, will yield:
To help with my understanding, I've broken this problem into smaller, more manageable tasks:Read phone numbers from the first column of two sorted csv files.Find duplicate numbers that appear in both lists of phone numbers.Reading the phone numbers is a reusable function, so let's separate it:For the task of finding duplicates a set() is a useful tool. From the python docs:A set is an unordered collection with no duplicate elements.And to put it all together:If you need to process files that are hundreds of times larger, you can look into the collections.Counter module.
The way i understand your situation is that you have two files, namely cred and pur.Now for each of the tn in cred, find whether the same tn exist in pur. Return the count if exist, or 0 if non-exist.You can use pandas and the algo can be as below:Agg pur by TN and countFor each row in cred, get the count. Else 0Below is the ex:There you go! you have your count in the list


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#sets
https://docs.python.org/3/library/collections.html?highlight=collections#collections.Counter
