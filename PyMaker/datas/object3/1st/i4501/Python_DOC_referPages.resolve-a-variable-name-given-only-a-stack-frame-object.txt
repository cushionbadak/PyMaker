Natural Text
I'm trying to find out if it's possible to resolve variables in stack frames (as returned by inspect.currentframe()).In other words, I'm looking for a functionFor an example, consider the following piece of code:Local and global variables are trivially looked up through the f_locals and f_globals attributes of the frame object:But the problem are closure variables. They aren't stored in a dictionary like the local and global variables, as far as I know. To make things even worse, variables only become closure variables if the function actually accesses them (for example by reading its value like _ = closure_var or writing to it with nonlocal closure_var; closure_var = _). So there are actually 3 different cases:How can I rewrite my resolve_variable function to support all of these? Is it even possible?
Not generally possible. Python only holds onto closure variables that closures actually refer to.As you can see from this example, there's no hope of inspecting a from the frame frame. It's gone.As for closure variables the frame actually used, those usually show up in f_locals. I know of one weird case where they won't, which is if the frame is for a class statement with closure variables:After digging through the CPython implementation (specifically frame objects, the LOAD_CLASSDEREF opcode, and inspect.getclosurevars), I think the only way to access class frame closure variables is going to be with ctypes, gc.get_referents, or similarly nasty means.Also, note that the f_locals dict may not be up to date if the closure variable values have changed since it was accessed; accessing frame.f_locals again refreshes the contents, but it might be out of date again by the time you look.


Answer URL
https://docs.python.org/3/library/inspect.html#inspect.currentframe
