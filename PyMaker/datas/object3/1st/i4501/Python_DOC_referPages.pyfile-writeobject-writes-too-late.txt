Natural Text
I have more or less this code:What I really would like is to replicate str(obj) (the Python 2 version of), and then use the result in printf call.  I cannot find a sane API for calling something like this.  So, PyFile_WriteObject was the closest I could find...  However, instead of writing to stdout, it waits until every possible interaction with stdout finishes in C, and only then it prints whatever it was supposed to...I've looked at what Cython generates for code like print(obj) or str(obj), and I want to pull my hair out, it's so complex.  All I need, really, is to be able to print out the Python objects for debugging purposes.  I also tried the GDB way, but Python objects are such a mess when you look at them from GDB perspective, it's not really workable either.
However, instead of writing to stdout, [PyFile_WriteObject] waits until every possible interaction with stdoutYou are likely getting bitten by Python-level buffering. A call to PyObject_CallMethod(pystdout, "flush", "") would probably fix the issue.What I really would like is to replicate str(obj) (the Python 2 version of), and then use the result in printf call.The API you're looking for is PyObject_Str in combination with PyUnicode_AsUTF8. This allows things like:That will leak the string returned by __str__ and crash if PyObject_Str raises; the correct version could look like this:


Answer URL
https://docs.python.org/3/c-api/object.html#c.PyObject_Str
https://docs.python.org/3/c-api/unicode.html?highlight=pyunicode_asutf8#c.PyUnicode_AsUTF8
