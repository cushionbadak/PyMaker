Natural Text
I have a class with a method that looks like this:The idea is that several of these are run in their own thread and at some point one thread does stop_event.set(), which naturally stops all others. I want to switch to asyncio for this, because the tasks in run are mostly sleeping and doing IO. Thus, I got to:The problem is that the asyncio.Event cannot be waited on, so when it is set, there are at most 3 seconds to wait before the method completes. This is a problem, because the sleep time may be minutes. Currently, I am working around this by wrapping the run in an asyncio.Task and then cancelling it like event_loop.call_soon(the_task.cancel).I want to ask if there is a better way to achieve the above? Is there a way I can wait on an asyncio.Event with a timeout somehow, similar to the threading.Event?
Is there a way I can wait on an asyncio.Event with a timeout somehow, similar to the threading.Event?asyncio.wait_for makes it convenient to add timeout to any coroutine. An emulation of threading.Event.wait with timeout could look like this:This allows a run almost exactly like the one that used threading.Event:


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.wait_for
https://docs.python.org/3/library/asyncio-sync.html
