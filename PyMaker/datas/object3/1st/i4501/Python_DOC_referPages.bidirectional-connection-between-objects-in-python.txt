Natural Text
Is there any smart way in Python to make bidirectional connections between objects?It's many-to-many type of connection. Take a look at this sample picture:All of the objects visible on the picture are also objects in my program. What I would like to achieve is that whenever I do something like print(object.connetions) I get a list of all connected objects.So looking at the sample picture when I do print(N2.connections) it lists R6,Jolie etc. Similarly print(AB.connections) prints P1...3, P8..0. What I currently implemented is one-way connection using list(), so that I am only able to print connections of AB object - it stores all connected objects(P1...3, P8..0) in a list.I know that one of the possible solutions is to add such a connection lists to all objects, but it would require two lists and two append() operations for every single connection.Do you now any other smart method to implement such functionality?
You will need data structures both on the "outgoing" object and on the "incoming" object. Both structures could be lists, and grow with append, no matter - but the important thing is to have specialized methods on the objects to handle the connections on both sides - otherwise it would soon get out of hand to keep all sides in sync.That said, one nice way to go would be to make your objects to attend the "MutableMapping" protocol, by inheriting from   collections.abc.MutableMapping : that way, with a few methods that are easy to get right you get the full functionality one gets  out of a Python native dict. And then, have in all your objects an internal real dictionary  to keep all connections - keep along with each key, that might be an object id or any unique filed, a reference to the other object, as well as whether it is outgoing or incoming reference - that is, metadata for the edge connecting both objects - and further implement an explict "delete" method so that an object can erase itself from all listed connections if it is to be removed; (also, depending on your scenario, you might want to use weakrefs to point to the other objects)Check the docs at:https://docs.python.org/3/library/collections.abc.htmlYou only have to implement the __getitem__, __setitem__, __delitem__, __iter__, __len__ methods and have __setitem__ and __delitem__ operate both on self and on the other object.
You're doing simple graph analysis. And as such, you could use networkx. With it you can have unidirectional or bidirectional graphs. You translate your information to nodes and edges. In such way you can verify easily adjacent nodes (your objects). You can give a look to the tutorial, it should be quite fun/interesting if you have never tried it before.Additionally, you can do a lot of analysis, not only the adjacent nodes, but you can do operations such as shortest path from one node to another, graph centrality, assortativity, flow analysis, etc.


Answer URL
https://docs.python.org/3/library/collections.abc.html
