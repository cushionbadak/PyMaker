Natural Text
There is the following simple script:QUESTION: Is it possible to rewrite MyFunction() somehow, so B becomes equal to [1, 2, 3] without None? Please, don't recommend me to use if expressions in the list comprehension, process B after list comprehension etc.
Is it possible to rewrite MyFunction() somehow, so B becomes equal to [1, 2, 3] without None? Please, don't recommend me to use if expressions in the list comprehension, process B after list comprehension etcNo, it isn't.  Your list comprehension will not change the length of the list.  There's nothing you can do in MyFunction() to change that.  You must use an if in the list comprehension or do some kind of pre- or post-processing on the list.As described in the Python language reference:The comprehension consists of a single expression followed by at least one for clause and zero or more for or if clauses. In this case, the elements of the new container are those that would be produced by considering each of the for or if clauses a block, nesting from left to right, and evaluating the expression to produce an element each time the innermost block is reached.You get one element per for iteration.  This is built right into the language.
To filter elements you need to use filter() or a list comprehension with if.I.e:You may use your function, but it should return boolean:Or simply:With list comprehension:
It is possible, but ugly as hell, to tweak the iterator from the function.  Unfortunately I can't get rid of the last None, but maybe someone else could pick-up the idea and refine it.  Here is my effort, and I extended the test data:produces:I fully expect someone to say this practice is highly dangerous and implementation specific - and I would not argue with such a comment.


Answer URL
https://docs.python.org/3/reference/expressions.html#grammar-token-comprehension
