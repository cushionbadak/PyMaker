Natural Text
I have the following file app.pyand the second file main.pyRunning the file python main.py gives the correct output.Now in the second file, I'm just importing the function not the class, although successful execution of my function requires the class as well.When importing the function does Python automatically import everything else which is needed to run that function, or does it automatically search for the class in the current directory?
As @DavidZ already mentioned the whole Python file gets compiled when we import it. But another special thing happens when a function body is parsed, a function knows which variables it should look for in local scope and which variables it should look for in global scope(well there are free variables too).  So, here Baz must be fetched from global scope.But how to identify this global scope when we import app.py in another  file?Well, each function has a special attribute __globals__ attached to it which contains its actual global namespace. Hence, that's the source of Baz:So, app's module dictionary and foo.__globals__ point to the same object:Due to this even if you define another variable named Baz in main.py after importing foo it will still access the actual Baz.From data-model page:__globals__ func_globals:A reference to the dictionary that holds the function’s global  variables — the global namespace of the module in which the function  was defined.
Python does not automatically do any of these things.When you import something from a module (in this case, the app module), Python first runs all the code in the corresponding file (app.py). The code in the file app.py which you've written does two things:define the class Bazdefine the function fooWhen the function foo runs, Python looks for Baz in the module that foo is part of, and only there. (Well, it also checks local variables defined in the function foo, but you don't have any of those except obj.) Specifically, it looks for app.Baz. If you alter your main.py to do the same search:you will see that app.Baz is the class you defined in app.py.If you put the definition of class Baz in yet another file, and if you don't import that file, Python will not run it. This shows that Python does not automatically import dependencies. In particular, suppose app.py containsand baz.py containsand main.py is unchanged. You'll get an error because Python has not run the code to define the class Baz.


Answer URL
https://docs.python.org/3/reference/import.html#the-module-cache
