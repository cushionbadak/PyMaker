Natural Text
Suppose I have a list TruncList with some number of elements greater than n. If I want to remove n elements from the end of that list, is it faster to redefine the list as a slice of itself preserving the desired elements, as by TruncList = TruncList[:-n], or to delete the slice of unwanted elements from the list, as by del TruncList[-n:]?Does the answer change if I was removing the first n elements from TruncList instead, as in TruncList = TruncList[n:] versus del TruncList[:n]?Besides speed, is one of these methods more Pythonic than the other?I would imagine that the redefinition method might be slower, since it iterates through TruncList and then reassigns it, while del truncates the list in place, but I'm not sure if either of these are the case.I would also suppose del is the better route, because it seems like the natural use of the function.
It'll depend entirely on how many elements you delete.In CPython, the list type uses a dynamic overallocation strategy to avoid having to resize the underlying C array too often. There is an array to hold the elements, and it is kept slightly too large at all times.Deletion then (using del TruncList[-n:]) could be a virtually free operation, provided n is sufficiently small. In fact, you can safely delete up to half the size of the over-allocated array, before a resize occurs. Resizing requires copying across all existing references to a new array.Using a slice is always going to create new list object, requiring allocation of memory and copying across of the elements involved. This is slightly more work than re-allocation of data.So, without measuring time performance (using timeit), I'd expect the del option to be faster than slicing; in the case of n < len(TruncList) // 2 (less than half the length) in many cases you don't even incur a resize, and even if you did, slightly less work needs to be done as only the internal array has to be recreated.When you remove items from the front, you'll always have to recreate the internal array. The differences won't be a stark then, but creating a slice is still going to result in allocation for an entirely new object.
So I tested it out myself using timeit with these samples:...and got these results:It looks like del is faster, and by quite a broad margin.EDITIf I run the same samples but with trunc = 2 instead, these are the results:del is still faster.Here's a test where nearly all of the list elements are removed: trunc = 80 and TruncList = range(81)...In this case, del is somewhat slower than the redefinition method.


Answer URL
https://docs.python.org/3/library/timeit.html#module-timeit
