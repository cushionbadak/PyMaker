Natural Text
I'm currently doing the tutorials on DataQuest.io.The goal in the following exercise is to loop through a dataset (flight_delays) and create a list of unique carriers.The print(unique_carriers) command returns an empty list while I was expecting a list of unique carriers. Can somebody explain/correct? FYI - I managed to solve the problem by using another approach. I'm still interested to see how I could have fixed this!
The issue in your code is the test. You want to check that the carrier is not yet in unique_carriers but your test is a bit weird. In any case, you should avoid comparing Boolean values in a test because a test is already a comparison of a Boolean value. The simple expression would be:What you wanted to write was:That would have worked (but is inelegant). You could also write not (row[carrier_column] in unique_carriers).What is interesting in your question is what actually happens. This is not an issue about operator priority: your code is not interpreted as row[carrier_column] in (unique_carriers == False), that would raise a TypeError exception stating that you cannot use the in operator with a Boolean.No, what happens is that in Python, you can chain comparisons such as x < y < z, and in and == are both comparisons in that sense. Therefore your statement was interpreted as (row[carrier_column] in unique_carriers) and (unique_carriers == False).You can confirm it with the bytecode. Here I do a simple function to look at what Python will do with it:And then, let's look at bytecode!At 10 you see the DUP_TOP that duplicates the top of the stack which, at that time, is the list. Then the ROT_THREE rotates the stack such that you end up with:Now you get the first comparison using in (12) which, if True continues to 18 and 21 to compare what remains (unique_carriers since the other 2 have been popped in the comparison) with False. That's it, your test is:
Thank you for your answer. To resume, the following solutions would have worked:The explanation on why my code didn't work kind of got over my head. But I now understand the complexity of the test I created ensuring that I will try to find an elegant solution first.Kind regards


Answer URL
https://docs.python.org/3/reference/expressions.html#not-in
