Natural Text
How can I load a Python module given its full path? Note that the file can be anywhere in the filesystem, as it is a configuration option.
For Python 3.5+ use:For Python 3.3 and 3.4 use:(Although this has been deprecated in Python 3.4.)Python 2 use:There are equivalent convenience functions for compiled Python files and DLLs.See also. http://bugs.python.org/issue21436.
The advantage of adding a path to sys.path (over using imp) is that it simplifies things when importing more than one module from a single package.  For example:
You can also do something like this and add the directory that the configuration file is sitting in to the Python load path, and then just do a normal import, assuming you know the name of the file in advance, in this case "config".Messy, but it works.
It sounds like you don't want to specifically import the configuration file (which has a whole lot of side effects and additional complications involved), you just want to run it, and be able to access the resulting namespace. The standard library provides an API specifically for that in the form of runpy.run_path:That interface is available in Python 2.7 and Python 3.2+
You can use the method from imp module.
I have come up with a slightly modified version of @SebastianRittau's wonderful answer (for Python > 3.4 I think), which will allow you to load a file with any extension as a module using spec_from_loader instead of spec_from_file_location:The advantage of encoding the path in an explicit SourceFileLoader is that the machinery will not try to figure out the type of the file from the extension. This means that you can load something like a .txt file using this method, but you could not do it with spec_from_file_location without specifying the loader because .txt is not in importlib.machinery.SOURCE_SUFFIXES.
Here is some code that works in all Python versions, from 2.7-3.5 and probably even others.I tested it. It may be ugly but so far is the only one that works in all versions.
Do you mean load or import?You can manipulate the sys.path list specify the path to your module, then import your module. For example, given a module at:You could do:

If your top-level module is not a file but is packaged as a directory with __init__.py, then the accepted solution almost works, but not quite. In Python 3.5+ the following code is needed (note the added line that begins with 'sys.modules'):Without this line, when exec_module is executed, it tries to bind relative imports in your top level __init__.py to the top level module name -- in this case "mymodule". But "mymodule" isn't loaded yet so you'll get the error "SystemError: Parent module 'mymodule' not loaded, cannot perform relative import". So you need to bind the name before you load it. The reason for this is the fundamental invariant of the relative import system: "The invariant holding is that if you have sys.modules['spam'] and sys.modules['spam.foo'] (as you would after the above import), the latter must appear as the foo attribute of the former" as discussed here.
I believe you can use imp.find_module() and imp.load_module() to load the specified module.  You'll need to split the module name off of the path, i.e. if you wanted to load /home/mypath/mymodule.py you'd need to do:...but that should get the job done.
To import your module, you need to add its directory to the environment variable, either temporarily or permanently.TemporarilyPermanentlyAdding the following line to your .bashrc file (in linux) and excecute source ~/.bashrc in the terminal:Credit/Source: saarrrr, another stackexchange question
This should work
This area of Python 3.4 seems to be extremely tortuous to understand! However with a bit of hacking using the code from Chris Calloway as a start I managed to get something working. Here's the basic function.This appears to use non-deprecated modules from Python 3.4. I don't pretend to understand why, but it seems to work from within a program. I found Chris' solution worked on the command line but not from inside a program.
I'm not saying that it is better, but for the sake of completeness, I wanted to suggest the exec function, available in both python 2 and 3.exec allows you to execute arbitrary code in either the global scope, or in an internal scope, provided as a dictionary.For example, if you have a module stored in "/path/to/module" with the function foo(), you could run it by doing the following:This makes it a bit more explicit that you're loading code dynamically, and grants you some additional power, such as the ability to provide custom builtins. And if having access through attributes, instead of keys is important to you, you can design a custom dict class for the globals, that provides such access, e.g.:
To import a module from a given filename, you can temporarily extend the path, and restore the system path in the finally block reference:
I made a package that uses imp for you. I call it import_file and this is how it's used:You can get it at:http://pypi.python.org/pypi/import_fileor athttp://code.google.com/p/import-file/
Import package modules at runtime (Python recipe) http://code.activestate.com/recipes/223972/
You can use the pkgutil module (specifically the walk_packages method) to get a list of the packages in the current directory. From there it's trivial to use the importlib machinery to import the modules you want:
In Linux, adding a symbolic link in the directory your python script is located works.ie: python will create /absolute/path/to/script/module.pyc and will update it if you change the contents of /absolute/path/to/module/module.pythen include the following in mypythonscript.py
quite simple way: suppose you want import file with relative path ../../MyLibs/pyfunc.pyBut if you make it without a guard you can finally get a very long path
A simple solution using importlib instead of the imp package (tested for Python 2.7, although it should work for Python 3 too):Now you can directly use the namespace of the imported module, like this:The advantage of this solution is that we don't even need to know the actual name of the module we would like to import, in order to use it in our code. This is useful, e.g. in case the path of the module is a configurable argument.
Create python module test.pyCreate python module test_check.pyWe can import the imported module from module.
Adding this to the list of answers as I couldn't find anything that worked. This will allow imports of compiled (pyd) python modules in 3.4:
This answer is a supplement to Sebastian Rittau's answer responding to the comment: "but what if you don't have the module name?"  This is a quick and dirty way of getting the likely python module name given a filename -- it just goes up the tree until it finds a directory without an __init__.py file and then turns it back into a filename.  For Python 3.4+ (uses pathlib), which makes sense since Py2 people can use "imp" or other ways of doing relative imports:There are certainly possibilities for improvement, and the optional __init__.py files might necessitate other changes, but if you have __init__.py in general, this does the trick.
The best way, I think, is from the official documentation (29.1. imp â€” Access the import internals):


Answer URL
https://docs.python.org/3/library/runpy.html#runpy.run_path
https://docs.python.org/3/library/importlib.html#importlib.util.spec_from_loader
https://docs.python.org/3/library/importlib.html#importlib.util.spec_from_file_location
https://docs.python.org/3/library/importlib.html#importlib.machinery.SourceFileLoader
https://docs.python.org/3/library/importlib.html#module-importlib.machinery
https://docs.python.org/3/library/importlib.html#importlib.machinery.SOURCE_SUFFIXES
https://docs.python.org/3/reference/import.html#submodules
https://docs.python.org/3/library/functions.html#exec
https://docs.python.org/3/library/pkgutil.html#pkgutil.walk_packages
