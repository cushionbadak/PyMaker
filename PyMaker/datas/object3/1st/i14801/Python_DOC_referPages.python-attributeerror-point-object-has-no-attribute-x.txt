Natural Text
For some reason I keep getting the above error message whenever I get to: distanceToOne = point1.Distance(pointUser) after grabbing my three points to calculate the distance from.Here is a better view if needed: http://pastie.org/private/vige6oaphkwestdemr5uwThanks in advance for your help!
The actual error is due to accessing toPoint.x, which doesn't exist because you have never defined it. On a related note, prepending attributes with double underscores activates pythons name mangling feature.  The actual attributes will still be publicly accessible at my_point._Point__x, my_point._Point__y, etc from outside the class.  As a matter of style, there does not seem to be any reason to use name mangling in this case.  The intended use-case of this feature is to avoid clashes with inherited classes, it's not really about trying to make "private" variables (for that, the convention is to use a single underscore to indicate when an attribute is implementation detail).  In your case, I think you should just name (and access) the attributes normally x, y, etc.  In python we don't normally write getters and setters for class members unless there is a special requirement to do so, because Python is not Java.  
In the return line of Distance(), __x instead of x (same for y and z), since the instances of the Point class do not have x, y z attributes but they do have __x, __y, __z attributes.â€‹
You could make the x, y and z attributes of your Point class publicly accessible. If you want the client to be able to read but not write to them, you can use a property. For example:You can then access x, y and z without the leading underscores and your Distance function should work.
This example uses the namedtuple class from collections.  I've also re-written the class to implement it (it should still work with your existing program).Also note that python generally does not use setters or getters.  In fact. you set the description directly in your program (as you should) rather than having used your setter function.
Another way to do it is to unpack toPoint.PointCoords into local variables like this:


Answer URL
https://docs.python.org/3/library/functions.html#property
