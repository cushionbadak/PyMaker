Natural Text
I have a class Sentence with a magic method function __getslice__I am not understanding how to call that function ? I am trying to do slicing of words. so for example if the string is "HELLO WORLD, james" , and I slice it at [0:1] , I expect to get "HELLO"I am getting instead this error: 'method' object is not subscriptableHere is my code:Also where can I learn more about magic method functions ? As it seems I am having trouble calling the functions more than writing them
When you do hippo.__getslice__[0:1] you are actually trying to slice the method hippo.__getslice__. That is why it is failing with the errorImportant Note: __getslice__ is deprecated since Python 2.0 and it is not available in Python 3.x. Quoting the official documentation of __getslice__,Deprecated since version 2.0: Support slice objects as parameters to the __getitem__() method. (However, built-in types in CPython currently still implement __getslice__(). Therefore, you have to override it in derived classes when implementing slicing.)So you should use __getitem__ for slicing. Quoting the question,for example if the string is "HELLO WORLD, james" , and I slice it at [0:1] , I expect to get "HELLO"Since you want to get words with slicing, if the key passed to __getitem__ is a slice object, then call self.getWords() and slice the returned object like shown belowNote 1: You don't have to explicitly call __getitem__ when you are  subscripting the hippo object. You can simply doThis will internally call __getitem__ with k as 0.Note 2: Same as the previous one. You don't have to explicitly call __add__ and that can be implicitly called with the arithmetic operator +, like thisNote 3: In your __frequenceTable__ implementation, you are using has_key method (which is a deprecated dictionary method on a string. So, at runtime, your program will fail withPerhaps you meant to use in operator.PS: I am not sure what this __frequencyTable__ method tries to achieve.
__getslice__() was deprecated in Python 2.6 and is removed in Python 3. You should instead use __getitem__() which will receive a slice object when called with slice notation. i.e.You can refer to the datamodel documentation for details on all the magic methods.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getitem__
https://docs.python.org/3/glossary.html#term-slice
https://docs.python.org/3/reference/datamodel.html#object.__add__
https://docs.python.org/3/reference/datamodel.html
