Natural Text
Similarly (-1==-1 & 1==1) is also False.Apologies if this is something obvious but I can't find an explanation for it.
& is the bitwise AND operator. As mentioned in the documentation, Bitwise operators have higher precedence than logical operators, so BecomesAnd you can imagine it goes downhill from there:Assuming what you wanted was a logical AND, the python way to do that would be using and:Which gives you True as you'd expect.
Lets break this up.The highest priority sign here is the brackets. Except we're wrapping the entire expression, so they don't do anything.Next we have the bitwise operator &.0 & 1 which equals 0.This leaves us with 0 == 0 == 1As 0 does not equal 1, we get False.For reference, here is the python documentation about operator precedence.


Answer URL
https://docs.python.org/3/reference/expressions.html#operator-precedence
https://docs.python.org/3/reference/expressions.html#operator-precedence
