Natural Text
So, I have a problem which I assume must be common:I'd like to parallelize a script with a multiprocessing.Pool, handing inputs to the pool, having it process them in parallel, and receive the outputs in the parent process.apply_async() looks like the best fit for what I want to do. But I can't just give a callback function, since in the end I want to print all the results to a single file. I think handing it a callback which prints to a single filehandle will result in jumbled results (not even sure I can pass a filehandle between processes like that).So how's the best way to submit inputs to the Pool, then receive the outputs and handle them in the main process? At the moment I'm just collecting the AsyncResult objects in a list and periodically iterating through it, calling a .get() method on each.UpdateI'll clarify a few parameters of my problem in response to comments:@martineau and @Juggernaut: By not "jumbled" I mean I'd really like to preserve the order of the input so that the output is in the same order.@RolandSmith and @martineau: My main process is just reading inputs from a file, handing them to the pool, and printing the results. I could just call .apply(), but then the main process is waiting for the function to complete before it proceeds. I'm using multiprocessing to reap the benefits of parallelization and have many inputs processed simultaneously.
As you requested in a comment, here's code showing how to do it with Pool.map() instead of Pool.async()â€”which seems like a much better fit for this problem given the need to wait for all the results before further output processing can be done (e.g. it needs to be in the same order as the input).As you can see it requires substantially less code and doesn't require sorting the results before outputting them (so is probably faster, too).Output:
To kind of answer your question, I don't think you can do what you want without a callback. You want the results computed asynchronously, yet printed in the same order as the inputs. This implies not only having to wait until all of the inputs are processed before printing them, but also some way to know their relative position in the inputs so they can be sorted back into that order before outputting them.So here's how to do it with one. As I previous said, the slightly tricky part is that the results must include something that indicates the corresponding position of the input so the results can be sorted in a similar order before printing. Because of that requirement, the script must wait until all the inputs have been processed.Note that despite this, you are getting the benefits of parallel processing in the sense that the individual results themselves are being created by concurrent processes.Output:
I think handing it a callback which prints to a single filehandle will  result in jumbled resultsThe solution is to populate a Queue in your callback with the result and then fetch them later. Queues are thread-safe so you don't have to worry about the jumbled results you're talking about.later


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.map
https://docs.python.org/3/library/queue.html#queue.Queue
https://docs.python.org/3/library/threading.html#condition-objects
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Condition
