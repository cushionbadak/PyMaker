Natural Text
Tensorflow overrides multiple operators for the Tensor class, including __lt__, __ge__, etc.However, the implementation for __eq__ seems to be conspicuously absent:Why does == for tensorflow's tensors not behave the same way as for numpy arrays?Code example:With numpy, on the other hand:
Tensors do implement __eq__, but the implementation only tests for identity. I found this GitHub issue, which explains why tensors test for identity, and do not broadcast:This may be a complication of fact that tensors can be used as keys in dictionaries, which I believe use == to find the matching object with the same hashThe commenter is correct; if __eq__ was overloaded to broadcast then you could not use tensors as keys in a dictionary. Objects that define a __hash__ method (required if you want to use such objects as keys in a dictionary), must produce the same hash value for two objects that are equal; see the __hash__ method:The only required property is that objects which compare equal have the same hash valuebut broadcasting would produce a 'true' tensor object for objects with different hash values.(the speculation that __eq__ would break boolean testing is wrong; boolean testing uses __bool__, which tensors do implement).If you need to make element-wise equality tests on tensors, you can use the tf.equal() and tf.not_equal() functions.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__hash__
https://docs.python.org/3/reference/datamodel.html#object.__bool__
