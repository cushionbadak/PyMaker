Natural Text
I have the following function, that aims at returning the best average grade.It takes inputs like: How can I improve it so it handles large inputs within a set period of time? That is to say how to have hte better run-time complexity?EDIT: it should handle negative scores and empty scores.
Without going into thenumpy array or pandas dataframe shown by @galaxyman, you're missing many basic Python stuff. You need to get acquainted with things like dictionaries. Here's an example using the defaultdict that initializes to 0 when assigning to a non-existing key:A regular dictionary, mydict = {} would fail on the first attempt to assign mydict['somename'] += grade, since += assumes an existing key. the defaultdict construct surrounds such problems with a try except block, to make first initialization. I suggest you google all these things. GL. That final line is a generator, though you should check list comprehensions as well.
It may fast than your code and less lines of code output:
How to improve it? Glad you asked. Mostly it's a matter of using appropriate data types, which let you avoid O(N) operations within a loop. That way you avoid accidentally writing quadratic O(N^2) code. Here, it means moving from array / list to dict.The for i in range(0,len(scores)) loop is very nice Fortran, but we have an opportunity to use python idioms instead:The if name not in namelist test hides a linear scan, O(N), within your loop. By using a dict we can obviate that. Also, the test for "does this name already exist?" can be buried in a defaultdict:
You can improve your runtime by casting your variable types using cython. This link is a good introduction. Because Python is dynamically typed, every time a loop iterates over a variable it has to determine what type of variable is returned (int, string, etc...). Using cython to set the variable types can improve speed dramatically.  


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
