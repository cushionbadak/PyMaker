Natural Text
This question already has an answer here:Chaining “is” operators                    4 answers                Can somebody explain this for me?Doesn't the 'is' operator take 2 operands, compare objects from the left, and return Boolean?
Because it is being interpreted as a chained comparison:Comparisons can be chained arbitrarily, e.g., x < y <= z is equivalent  to x < y and y <= z, except that y is evaluated only once (but in both  cases z is not evaluated at all when x < y is found to be false).Formally, if a, b, c, …, y, z are expressions and op1, op2, …, opN are  comparison operators, then a op1 b op2 c ... y opN z is equivalent to  a op1 b and b op2 c and ... y opN z, except that each expression is  evaluated at most once.Thus, since is is a comparison operator, your first expression is equivalent to:
Compare with 2 < 3 < 4.Is the 2nd None the same as the 1st None? Yes. Is the 3rd same as the 2nd? Yes.OTOH, (True) is None is clearly False. The parentheses broke the chaining.Evaluating lo < n < hi is a common python idiom, and that doesn't make you worried about an intermediate result of True < 4. Evaluating x is y is z is less common, but for your singleton None the three objects are identical.


Answer URL
https://docs.python.org/3/reference/expressions.html#comparisons
