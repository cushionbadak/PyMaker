Natural Text
So I am doing a code to login and create a username and password and when logging in, i am reading an external file that contain all the user name and passwords in dictionary form e.g. {"aaaaaaaa": "aaaaaaA999"}This is the code to read itHowever when I try and read it it keeps saying that the user doesn't exist, any suggestions
The function f3.read() is reading the entire file at once, and moving the file pointer to the end. Any subsequent file read without closing and reopening the file is going to return None.You need to actually parse the file into a data structure that allows you to search for containment, instead of checking to see if the name or password exists in the entire file. What happens if two users have the same password? If you're just searching for a single string through the whole file, you're not ensuring that a password is correct for the given username.For example, assume your file looks something like this:Your parsing code should open and read the file, and check for containment without searching the whole file every time:Note that I changed your file open to use a context manager (the keyword with). You should do this for more reliable resource management. You could also make further improvements by make the dictionary generation a dictionary comprehension, and possibly by using exceptions to handle the dictionary checking instead of if X in Y:You could even condense the user/password dictionary creation into a single comprehension, but I think that hampers readability significantly without any benefit.
The reason you're having the problem is this:when you use f3.read() for the first time it will move the pointer to the end and you won't be able to read it again without reopening.So, you can read and parse it the first time you read the file, something like this:Another way of re-reading file contents without reopening it would be to call f3.seek(0) before calling f3.read(). That'll move the pointer to start again but the above is better for your case.
It is better to use the "with" statement while you read and write data into a file like so:The with statement gives better exception handling and automatically closes the file and does any clean up necessary


Answer URL
https://docs.python.org/3/library/json.html
