Natural Text
I have a list X and a list Y where there are some shuffled indexes.I want to have a new list Z such thatThe issue is that i have to do this multiple times, for such big arrays. There is any more efficient approach than the list-by-comprehension for loops?Note: numpy solutions are apreciated!
Since operator.itemgetter accepts multiple indices, one solution is:The efficient one (as posted in comments) would be via numpy's array indexing:but only if X and Y are converted to numpy.array once (ahead of use) and used many times.Performance testsIndexing 1k elements (Y) from a list of 1M elements (X).1) List comprehension ~ 34 µs2) itemgetter ~ 16.6 µs3) numpy, arrays converted on fly ~ 31.6 ms   ⇒   slowest4) numpy, arrays pre-converted ~ 1.72 µs   ⇒   fastest
Convert your lists to NumPy arrays and use the second as the index for the first:


Answer URL
https://docs.python.org/3/library/operator.html#operator.itemgetter
