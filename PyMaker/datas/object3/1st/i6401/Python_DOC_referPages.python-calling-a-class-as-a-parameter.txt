Natural Text
This question already has an answer here:How to access object attribute given string corresponding to name of that attribute                    2 answers                I'm quite new in Python, but googling around did not match any answer for it .I created a module, containing 10 GUI buttons classes. To use a button I write in code ButtonLib.TypeA(**kwargs), ButtonLib.TypeB(**kwargs) and so on.kwargs is same for all buttons.Buttons ( amount and type ) are selected by user (stored in button_type_vector) and not known in advance.I wish to know if there is a way writing code more efficiently rather than:and so on.by efficiently I mean something like:thnks
You can use the getattr built-in function to access attributes of an object using strings:Return the value of the named attribute of object. name must be a string. If the string is the name of one of the objectâ€™s attributes, the result is the value of that attribute. For example, getattr(x, 'foobar') is equivalent to x.foobar. If the named attribute does not exist, default is returned if provided, otherwise AttributeError is raised.As mentioned by @MadPyhisist, modules are not some kind of magical object, and thus can be used with like any normal object could be getattr.
You could define a dictionary (preferably inside your module):and then call the entry:If your button classes have a function returning their name, you could also define the dictionary like this:More advanced: Python stores the name of a class in .__name__.Even more advanced: You could get the elements of the module with getattr(ButtonLib, name). But this might impair readability.


Answer URL
https://docs.python.org/3/library/functions.html#getattr
https://docs.python.org/3/library/exceptions.html#AttributeError
