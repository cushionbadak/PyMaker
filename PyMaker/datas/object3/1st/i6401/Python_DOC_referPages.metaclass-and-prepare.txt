Natural Text
I am teaching myself about the __prepare__ function. And I see this snippet at PEP3115My question is at this line:    result.member_names = classdict.member_namesHow could the variable classdict get a attribute from the member_table class? I see the __prepare__ function returns an instance of member_table, but how is the link between member_table() and  classdict.member_names generated?Many thanks to all of you!
That is pretty straightforward, as it is exactly what prepare does.3.3.3.3. Preparing the class namespace Once the appropriate metaclass has been identified, then the class namespace is prepared. If the  metaclass has a __prepare__ attribute, it is called as namespace =  metaclass.__prepare__(name, bases, **kwds) (where the additional  keyword arguments, if any, come from the class definition).If the metaclass has no __prepare__ attribute, then the class  namespace is initialised as an empty ordered mapping.https://docs.python.org/3/reference/datamodel.html#preparing-the-class-namespaceWhich means, the classdict attribute that is passed into the metaclass __new__ and __init__ methods is exactly the same object that is returned by __prepare__. That object should be a mapping instance, that is, an object that behaves like a dict and have at least the __setitem__ method. This __setitem__ method is called by Python for all variables set inside the the declared class body itself. That is, for an ordinary class, with no custom metaclass, the variables are recorded in a dictionary (an ordered dictionary, as of Python 3.6). That happens as Python runs each statement inside the class body. This is the same object that is returned should one call locals() inside the class body:The main use case when this feature was first designed probably was exactly the possibility of making the order of declarations inside a class body meaningful. That is, a __prepare__ method could just return a collections.OrderedDict  instance, and __new__ or __init__ would act upon that order. As of Python 3.6, ordering of class attributes is by default - and the __prepare__ feature remains so advanced one really has to think up of uses for it.


Answer URL
https://docs.python.org/3/reference/datamodel.html#preparing-the-class-namespace
