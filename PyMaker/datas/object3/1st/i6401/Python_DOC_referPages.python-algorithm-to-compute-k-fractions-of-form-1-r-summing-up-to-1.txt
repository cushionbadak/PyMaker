Natural Text
This question already has an answer here:Is floating point math broken?                    28 answers                I have the code already figured out and have found a way to get around the problem that for k > 6 the largest denominator is very large. But when my code adds up for examplepython says that it is not equal to 1, but it should be. Why does python recognize other sums as being equal to 1 but not this one?
It is because you are asking for floating point arithmetic, and when the roundoff errors add up, you'll get wrong answers.Use the https://docs.python.org/3/library/fractions.html module to get real fractions and roundoff issues should disappear for you.
You need to be extremely careful when hard-comparing any decimal values. Computer don't provide unlimited precision, thus it could be that your argument adds up to something like 0.99999998 instead of 1. Then the comparison might fail.Thus you should always compare corresponding to an allowed difference of delta, like 1 - 0.99999998 < delta where delta = 0.0001 or something like that.


Answer URL
https://docs.python.org/3/library/fractions.html
