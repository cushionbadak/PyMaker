Natural Text
Trying to count unique value from the following list without using collection:The output which I require is :My code currently isIs it possible to get the output?
Using difflib.get_close_matches to help determine uniquenessThe actual keys in the dictionary will depend on the order of the words in the list.difflib.get_close_matches uses difflib.SequenceMatcher to calculate the closeness (ratio) of the word against all possibilities even if the first possibility is close - then sorts by the ratio. This has the advantage of finding the closest key that has a ratio greater than the cutoff. But as the dictionary grows the searches will take longer.If needed, you might be able to optimize a little by sorting the list first so that similar words appear in sequence and doing something like this (lazy evaluation) - choosing an appropriately large cutoff.Results:I imagine there are python packages that do this sort of thing and may be optimized.
I don't believe the python list has an easy built-in way to do what you are asking.  It does, however, have a count method that can tell you how many of a specific element there are in a list. Example:Usually the way you get what you want is to construct an incrementable hash by taking advantage of the Hash::get(key, default) method:
You can try this:Output:
First, making a set from original list (or tuple) gives you all values from it, but without repeating.Then you create a dictionary with keys from that set and values as occurrences of them in the original list (or tuple), employing the count() method.
You can use this code, but same as Jon Clements`s talk, TOILET and TOILETS aren't the same string, you must ensure them. 


Answer URL
https://docs.python.org/3/library/difflib.html#difflib.get_close_matches
