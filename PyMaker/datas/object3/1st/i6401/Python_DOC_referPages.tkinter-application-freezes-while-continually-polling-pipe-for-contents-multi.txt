Natural Text
I have two scripts:Processor_child.py: Its purpose is to perform a number of data analysis and cleaning operations. This must perform the same operations when run alone (without Tkinter_parent.py) as it does when packaged into a GUI with Tkinter_parent.py.Tkinter_parent.py: Its purpose is to provide a GUI for those who can't use Processor_child directly.Within Processor_child, there are for loops that ask the user for input on each iteration. These prompts need to appear in the Tkinter app, accept the input, and send it back to Processor_child.The code below does this, raising an Entry field whenever there's data in the Pipe (added by the loop). However, it often seems to 'freeze', getting stuck loading and not progressing through the code. Sometimes, it runs perfectly as intended. (No changes in the code in these instances.)How can I resolve this / make it more stable? I've commented below where the 'freeze' is happening.Tkinter_parent.py:And processor_child:This is related to the broader SO question How can I implement an input method in a Tkinter parent script, with the displayed prompt and return value being sent back to a child script?, and comes from a posted, but non-functional, solution there.As of Oct 23, 2017 there is still not a solution to this.
Your Connection.poll() call is busy-waiting and chewing through the CPU. But note that Connection objects have a fileno() method; this means you can use select/poll calls to put your process to sleep while waiting for them to become ready for I/O. Note that the tkinter event loop supports file handlers to allow you to do this without blocking the UI.
Consider writing your app in a client-server fashion.The client, is the Tk app, which can connect to the server.the server, simply executes whatever the client requires.this way, you can detach the processing.there are several ways you can do this, like cherrypy, rabbitmq and similar.Recently, in desktops apps, I've used Electron, to connect to a cherrypy server, and AJAX requests from Electron using Javascript.  the final icon simply starts both, the server and the client.this allows me to have a richer widget set, since the web is more powerful than Tk.That will allow you in a possible future to have a webapp.HTH
The simplest way is to get the input, either from the console or gui, and then send the results to the child program.  When you ask for input from the console, add a statement that opens Tkinter instead if some variable is set, and gets the info there.
It appears that the behaviour you are trying to achieve is to communicate with a function whilst it's running. I think that your problems could be solved by using generators. A generator lets you yield multiple values from a function, and send values to that function.Here is some more information on generators if you want to know how they work.I'm not entirely sure if this is exactly the behaviour you want from your program, but I have modified your code to use generators rather than multiprocessing, and it no longer freezes:Processor_child.py:Tkinter_parent.py:Generators will throw a StopIteration exception when you call next() on them and they have finished, so be sure to put next(p_review) and and p_review.send(...) calls inside try blocks where appropriate.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Connection
https://docs.python.org/3/library/tkinter.html#file-handlers
