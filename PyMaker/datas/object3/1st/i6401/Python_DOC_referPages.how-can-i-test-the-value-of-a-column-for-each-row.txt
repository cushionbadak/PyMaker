Natural Text
I have a dataframe with 10 columns and around 20,000,000 rows.I need to compare the values of the 10 columns row by row and create five columns with the new values. To do this, I defined a function consisting of an if function and applied it to test each.For example:I was able to get the answer this way, but I needed five defined functions, each with a long list of conditions. And the calculation was too slow.(Actual data should be tested on all 10 columns, with at least 10 conditions.)Is there a better way to test the data in each column row by row than this one?
IIUC, you have consistent values you want to assign to each row.  For example, n1 is either 0, 1, or 2.  If that's the case, you can just start n1 at 0 and add with indexing:
apply() accepts several parameters: func and also args, which arePositional arguments to pass to function in addition to the array/seriesYou could could pass in e.g. (0, 2, 11, 14) to allow a more generic function to score column A, (2, 4, 14, 16) for column B, and so on. Alternatively, pass in the column name and let the function make decisions based on that.There's a fair amount of CPU overhead and memory footprint to process 20 M rows. You might find it more performant to read each row to be scored using a csvreader and emit the result with a csvwriter, and have pandas import the augmented CSV file.


Answer URL
https://docs.python.org/3/library/csv.html
