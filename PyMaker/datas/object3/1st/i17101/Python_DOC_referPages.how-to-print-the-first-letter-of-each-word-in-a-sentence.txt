Natural Text
I got this question in a quiz last week, a lot of people got it wrong, so I am pretty sure it will be on our midterm:Write a function that takes as a parameter a list of strings and  returns a list containing the first letter of each of the strings.  That is, if the input parameter is ["Daniel","Nashyl","Orla",  "Simone","Zakaria"], your function should return ['D', 'N', 'O', 'S',  'Z']. The file you submit should include a main() function that  demonstrates that your function works.I know you can use this [#:#] to print any letters of a word or sentence.But I get confused when it comes to printing the first letter of a bunch of words. I also think that the ".split" function is needed here. I am using python 3.3.3
str.split takes a string and breaks it into a list of strings. Your input is already a list of strings, therefore you do not need .split."mystring"[:1] gets the first character of the string (or "" if the string is "" to begin with). Apply this to each string in the input list, and return the result.
You can do this with a list comprehension. You'll definitely want to read about them! Here's a minimal example that does what you're looking for:This loops through each name in your list and creates a new list from the first letter of each item in the original list. For example, "Daniel"[0] == 'D'. No .split is needed.
List comprehensions are cool, and you should learn to use them indeed, but let me explain a bit what's going on here, since in your question you said you're confused how to do it with a bunch of strings.So, you have a list of strings. Lists are an iterable collection, which means we can iterate through it using, for example, a for loop:I'm sure you were taught about loops like this in class. Now, instead of printing the first letter, let's construct a new list that contains those letters:Here I created a new list, then for every word, I appended the starting letter of that word to the new list. A list comprehension does the same thing, with a more obscure syntax, more elegance, and a bit more efficiency:This is the gist of it.


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#for-statements
