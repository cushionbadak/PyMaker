Natural Text
I have three functions that I'm trying to test the call order of.Let's say that in module module.py I have the followingI want to check that b is called after a, and before c. So getting a mock for each of a, b and c is easy:Checking that each of the individial mocks are called is easy, too. How do I check the order of the calls relative to one another? call_args_list won't work as it's maintained separately for each mock.I've tried using a side effect to log each of the calls:But this only gives me the args that the mocks were called with, but not the actual mock that the call was made against. I can add a bit more logic:And that seems to get the job done... Is there a better way though? It feels like there should already be something in the API that can do this that I'm missing.
Define a Mock manager and attach mocks to it via attach_mock(). Then check for the mock_calls:Just to test that it works, change the order of function calls in the main_routine() function add see that it throws AssertionError.See more examples at Tracking order of calls and less verbose call assertionsHope that helps.
I needed this answer today, but the example code in the question is really hard to read because the call args are the same as the names of the mocks on the manager and in the scope of the test. Here's the official documentation on this concept, and below is a clearer example for non-robots. All the modules I'm patching are made-up for the sake of the example:Note that you have to use attach_mock in this case because your mocks were created by patch. Mocks with names, including those created by patch, must be attached via attach_mock for this code to work. You don't have to use attach_mock if you make your own Mock objects without names:


Answer URL
https://docs.python.org/3/library/unittest.mock.html#attaching-mocks-as-attributes
