Natural Text
What I'm trying to do is sort word objects (which consist of a scanned word, its alphabetized version, and its length) into lists by their length. So, I initialized an list of length 0 and I am extending it as I'm going through my input file. What I want to do it to have a list within a list such that my results[5] contain a list of length 5. How do I do that?I first initialize my list as follows:I then scan through the input file line by line creating temp objects and I want them to be be placed into their appropriate lists:I feel at least one of the following needs to be edited(1) The way I initialize the results list(2) The way I append objects to the list(3) The way I'm extending the list (though I think that part is right) I am using Python 3.4.  EDIT:EDIT:This is my word class:EDIT:Here is a clarification of what I'm trying to achieve: As I'm iterating through a list (of unknown length) of words (also of unknown length), I am creating word objects that include the word, its alphabetized version, and its length (e.g. dog, dgo, 3). As I'm going through that list, I want all objects to go into a list that is within another list (results[]), indexed by the word's length. If results[] does not contain such an index (e.g. 3), I want to extend results[] and start a list in results[3] that contains the word object (dog, dgo, 3). At the end, results[] should contain lists of words indexed by their length. 
Rather than a list, you could have a dictionary:here the key would be length and the value a list of words:You can simplify further with d = collections.defaultdict(list).
Your difference is negative. You need to subtract the other way round. You'll also need to add one extra since index starts at 0Turns out it's usually easier to use a defaultdict for thiseg:
Three notes on your questions.Nested list initializationYou mention it in your question title, although you might not need it in the end. One simple way to do this is to use two nested list comprehensions:Using some default data structureAs others pointed out, you could use a dictionary. In particular, a collections.defaultdict will give you initialization-on-demand:Comparing custom objectsThe built-in sorted function takes a keyword argument key, that can be used to compare custom object, that do not themselves provide sorting hooks:
If you're set on using a list (which may not be the best choice), I think it would be easier and more clear to create the list as big as it needs to be from the get go.  That is to say, if the longest word is 5 characters long, you start by creating this list:This has the advantage that you won't have to worry about catching exceptions as you go but it does require that you know all your words before you start.  Since you created an object class to store all this, I'm assuming you're actually storing all this so it shouldn't be an issue.You'll always need the None at the beginning so the indices match up.  Once you have this you can iterate through your list of words and simply append it to the appropriate list as you already do.So specifically for you, what I would do is instead of storing tempWordObject, I'd make a list (wordObjList) of these objects as you work through your file.  Once you're done with the file, close the handle, then proceed to do the rest of you processing.  Generate the template list:Fill the list from your list of word obejctsSome other things to note:You don't need to handle hitting the end of the file.  When Python reaches the end of the file in the for loop, it will automatically stop iteratingAlways make sure you close your files.  You can you the with construction to do this (with open("file.txt", 'r') as f:  for line in f:)
You refused to accept answers proposed to store your objects in dictionaries. However your real problem is that you want to put your 6mil of words containing scanned images into your memory. Use indexing (or some kind of simple references) and track them into your structure, then lookup for your data based on them. Use iterators to retrieve the info you need.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/functions.html#sorted
