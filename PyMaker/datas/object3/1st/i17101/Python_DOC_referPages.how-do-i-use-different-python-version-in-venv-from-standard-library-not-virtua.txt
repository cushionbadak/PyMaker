Natural Text
I have installed Python 3.4.0 and created virtual environment with python -m venv myenv. How  can I change Python version in my virtual environment? Documentation says:Each virtual environment has its own Python binary (allowing creation  of environments with various Python versions) and can have its own  independent set of installed Python packages in its site directories.UPDATEPlease, note that I ask about venv from standard library, not about virtualenv.Let me provide some links.This is PEP 405. http://legacy.python.org/dev/peps/pep-0405/Python venv. http://docs.python.org/3.4/library/venv.htmlVirtualenv. http://www.virtualenv.org/en/latest/I don't see something like a --python flag in venv.Are venv and virtualenv absolutely similar?Is venv is so unpopular and no one uses it so that virtualenv remains the standard?
Update 2018These days, I suggest using Pipenv to create virtual environments and handle project dependencies in Python.Pipenv — the officially recommended Python packaging tool from Python.org, free (as in freedom).Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. Windows is a first–class citizen, in our world.To create a virtual environment, cd into the project directory and run:Replace 3.6 with the version you need. (The version you choose has to be installed on your system. Here is how you install multiple Python versions next to each other)Install a package in your environment:or if the dependency is for development purposes only (testing, etc.):Run something in your environment.:Old AnswerOn Linux you can easily install multiple versions of Python next to the main one and you can use the venv package from the standard library to create virtual environments from each version >= 3.3.Create venvActivate venvDeactivate venvNotice: python vs pythonX.XIf you have multiple Python versions installed, you can access each one by adding the version num to the command e.g. python3.5, python3.6, etc. But keep in mind that when you activate a venv, you bind it to the clean/versionless python command, for as long as it's activated. E.g:
This is a very good question as there are several python modules / libraries (built-in & third party) with similar names and purposes. Can completely sympathise with OP's confusion.There are really two different behaviours / responsibilities:1). The ability to switch between different versions of (System) Python Interpreter eg. 2.7.10 or 3.5.0 etc2). The ability to create virtual environments (which is just a local folder containing all the plumbing (binaries and libs) for a particular version of python. Can sort of think of this as a frozen local instance of a particular python version. Essentially it is a self-contained, light-weight python installation.A module like pyvenv provides 2) above. It will allow you to create a virtual environment that is set at the version of Python that was used to create it.For further infoormation on pyvenv, see library/venvA module like pyenv (the names are confusing, right? Notice, pyenv, and not pyvenv) on the other hand, controls which VERSION of python your system is basically running. This provides 1) above. So, when not running a particular virtual env via pyvenv etc, this is the "global" version in use. In fact, it is slightly more convoluted than that (as you can also setup local configuration etc), but essentially that is enough for this discussion. For further information on pyenv see github.com/yyuu/pyenvSuppose I want to run Python versions 2.7.10 and 3.5.0, then I would use pyenv to install these two versions (here, I chose as globals), and can view this using:Yes, there are several prominant alternatives to each of the above referenced modules / libs. Heated discussions on Reddit / SOF etc detailing and arguing which is best. Many of them do very similar things...
It's simply impossible. To create python venv of specific Python version, we need this specific version.Obviously, Python interpreter doesn't contain all previous versions. Python 3.4.1 doesn't contain Python 2.7.8 executable anywhere inside.


Answer URL
https://docs.python.org/3/library/venv.html
