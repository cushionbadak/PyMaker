Natural Text
I am trying to get a random object from a model AFor now, it is working well with this code:But I feel this code is better:Which one is the best? Possible problem with deleted objects using the first code? Because, for example,  I can have 10 objects but the object with the number 10 as id, is not existing anymore? Did I have misunderstood something in A.objects.all()[random_idx] ?
Just been looking at this. The line:has reportedly brought down many servers.Unfortunately Erwans code caused an error on accessing non-sequential ids.There is another short way to do this:The good thing about this is that it handles non-sequential ids without error.
The second bit of code is correct, but can be slower, because in SQL that generates an ORDER BY RANDOM() clause that shuffles the entire set of results, and then takes a LIMIT based on that.The first bit of code still has to evaluate the entire set of results. E.g., what if your random_idx is near the last possible index?A better approach is to pick a random ID from your database, and choose that (which is a primary key lookup, so it's fast). We can't assume that our every id between 1 and MAX(id) is available, in the case that you've deleted something. So following is an approximation that works out well:
Yet another way:Works even if there are larger gaps in the pks, for example if you want to filter the queryset before picking one of the remaining objects at random.
I'm sharing my latest test result with Django 2.1.7, PostgreSQL 10.It seems that random fetching with random.choice() is about 2x faster.


Answer URL
https://docs.python.org/3/library/random.html#random.choice
