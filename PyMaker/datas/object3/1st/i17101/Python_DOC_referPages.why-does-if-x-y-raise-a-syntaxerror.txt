Natural Text
This question already has an answer here:Python tuple assignment and checking in conditional statements [duplicate]                    3 answers                I would like to know if there is any reason that the following code raises a SyntaxError:Should not 1,2 be interpreted by Python as a two-item tuple (which would then evaluate to True when tested by the if-statement)?  The below demonstration suggests that it should:Moreover, if you look at the documentation for Python's if-statement, you will read this:As you can see, it clearly says that the syntax for an if-statement is the if keyword followed by an expression.  If I am not mistaken, 1,2 is indeed an expression.  Finally, it could be argued that this syntax is useless, so why allow it?  That is true, but the Zen of Python explicitly says:Special cases aren't special enough to break the rules.So why the SyntaxError?
It is to do with how Python scans and interprets expressions. You get a SyntaxError because Python if statements do not tolerate having a comma between conditions. Python reads the statement from left to right, and separates the conditions by a comma unless brackets are explicitly used for separation. This means that your expression is interpreted as this:So the tuple is not separated but rather the two conditions. As commas are not allowed to separate conditions you get a SyntaxError. With this in mind, we can know why putting the brackets around the tuple gets a different result. The brackets are explicitly used for separation, so Python can interpret the tuple on its own and compare it. In that case there is only one condition- so no error.
what you are doing is not what you think.1==1,2 :you declare two things.  1==1=True and 2.1==(1,2)=False :they are two different types even.if 1==1,2:  undoable: not a statement if you think about what I showed you so the (,)comma is not only superfluous it's wrong.


Answer URL
