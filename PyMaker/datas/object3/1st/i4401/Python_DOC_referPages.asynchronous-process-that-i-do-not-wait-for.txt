Natural Text
There's many questions on the topic but apparently none with my exact use-case.I'm running a long loop where each iteration takes a lot of time. I want to at the end of each loop plot (using matplotlib) the current progress. The basic setup isHowever, the plotting routine takes a lot of time. My initial solution was to and change the plotting part to However, it appears that matplotlib is not thread save. My newest idea was then to and However, it appears that this will only schedule the function call, and not actually execute it. Execution happens via pool.close(); pool.join() or res.get(). However, pool.join() and res.get() do block the main process until the pools are done.I believe my questoin is this: How can I asynchronously call plotStuff(data) without having to ever wait for the result? Additionally, I'd be happy if there's a way of controlling the jobs in the pool. Say, I only want to have at max 10 jobs in the pool, and the plotting is too slow -- would there be a way of deleting the oldest jobs such that we have a chance of catching up with the ``outer process''?
Regarding the first question, your assumptions are wrong. The actual computation happens immediately after you call apply_async. The AsyncResult object the method returns can be used to retrieve the computation results. It will block until they are ready but you can ignore it if you want.Keep in mind that if you don't collect the AsyncResult, errors triggered in plotStuff will go unnoticed. If you still want to report errors, you can set a callback function when calling apply_async and print the error message there.For the second part of the question I'd kindly ask you to better elaborate as it's not really clear what you want to achieve.


Answer URL
https://docs.python.org/3/library/multiprocessing.html?highlight=process#multiprocessing.pool.AsyncResult
https://docs.python.org/3/library/multiprocessing.html?highlight=process#multiprocessing.pool.Pool.apply_async
