Natural Text
While learning NumPy, I came across its advantage that,NumPy requires less memory than traditional list.this looks convincing, but than when I try,It shows higher memory size than list.Can someone help me out understanding this behavior.
First off all, as mentioned in comments getsizeof() is not a good function to relay on for this purpose, because it does not have to hold true for third-party extensions as it is implementation specific. Also, as mentioned in documentation, if you want to find the size of containers and all their contents, there is a recipe available at: https://code.activestate.com/recipes/577504/.Now, regarding the Numpy arrays, it's very important to know how Numpy determines its arrays' types. For that purpose, you can read: How does numpy determin the array's dtype and what it means?To sum up, the most important reason that Numpy performs better in memory managements is that it provides a wide variety of types that you can use for different kinds of data. You can read about Numpy's datatypes here: https://docs.scipy.org/doc/numpy-1.14.0/user/basics.types.html. Another reason is that Numpy is a library designed to work with matrices and arrays and for that reason there are many under the hood optimizations on how their items consume the memory.Also, it's note worthy that Python provides an array module designed to perform efficiently by using constrained item types.Arrays are sequence types and behave very much like lists, except that the type of objects stored in them is constrained. The type is specified at object creation time by using a type code, which is a single character.
It's easier to understand the memory use of arrays:The databuffer of p is 80 bytes long.  The rest of p is object overhead, attributes like shape, strides, etc.An indexed element of the array is a numpy object. So this multiplication doesn't tell us anything useful:Though it may help us estimate the size of this list:The list of 10 int64 objects occupies 320+192 bytes, more or less (the list overhead and its pointer buffer plus the size objects pointed to).We can extract an int object from the array with item:Lists of the same len can have differing size, depending on how much growth space they have:Further complicating things is the fact that small integers have a different storage than large ones - ones below 256 are unique.


Answer URL
https://docs.python.org/3/library/sys.html#sys.getsizeof
https://docs.python.org/3/library/sys.html#sys.getsizeof
https://docs.python.org/3/library/array.html
