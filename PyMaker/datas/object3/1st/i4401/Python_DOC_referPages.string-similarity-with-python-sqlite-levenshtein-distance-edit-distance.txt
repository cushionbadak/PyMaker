Natural Text
Is there a string similarity measure available in Python+Sqlite, for example with the sqlite3 module? Example of use case: This query should match the row with ID 1, but not the row with ID 2:How to do this in Sqlite+Python?Notes about what I've found so far:The Levenshtein distance, i.e. the minimum number of single-character edits (insertions, deletions or substitutions) required to change one word into the other, can be useful, but I'm not sure if an official implementation exists in Sqlite (I've seen a few custom implementations, like this one)The Damerau-Levenshtein is the same, except it also allows transposition between 2 adjacent characters; it is also called the Edit distanceI know it's possible to define a function myself, but implementing such a distance will be non-trivial (doing natural language processing comparison super efficiently for databases is really non-trivial), that's why I wanted to see if Python / Sqlite already features such a toolSqlite has FTS (Full Text Seach) features: FTS3, FTS4, FTS5but I don't find about string comparison with such a "similarity distance", FTS's features MATCH or NEAR don't seem to have similarity measure with letters changes, etc.Moreover this answer shows that:SQLite's FTS engine is based on tokens - keywords that the search engine tries to match.  A variety of tokenizers are available, but they are relatively simple. The "simple" tokenizer simply splits up each word and lowercases it: for example, in the string "The quick brown fox jumps over the lazy dog", the word "jumps" would match, but not "jump". The "porter" tokenizer is a bit more advanced, stripping the conjugations of words, so that "jumps" and "jumping" would match, but a typo like "jmups" would not.The latter (the fact that "jmups" cannot be found as similar to "jumps") makes it unpractical for my use case, sadly.
Here is a ready-to-use example test.py:Important note: The distance editdist3 is normalized so thatthe value of 100 is used for insertion and deletion and 150 is used for substitutionHere is what to do first on Windows:Download https://sqlite.org/2016/sqlite-src-3110100.zip, https://sqlite.org/2016/sqlite-amalgamation-3110100.zip and unzip themReplace C:\Python27\DLLs\sqlite3.dll by the new sqlite3.dll from here. If skipping this, you'd get a sqlite3.OperationalError: The specified procedure could not be found laterRun:or(With MinGW, it would be: gcc -g -shared spellfix.c -I ~/sqlite-amalgation-3230100/ -o spellfix.dll)Here is how to do it on Linux Debian:(based on this answer)Here is how to do it on Linux Debian with an older Python version:If your distribution's Python is a bit old, it will require another method. As sqlite3 module is built-in in Python, it seems not straightforward to upgrade it (pip install --upgrade pysqlite would only upgrade the pysqlite module, not the underlying SQLite library). Thus this method works for example if import sqlite3; print sqlite3.sqlite_version is 3.8.2:


Answer URL
https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.create_function
