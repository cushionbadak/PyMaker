Natural Text
I wrote an extension in C which uses threads. In order to try to stay cross-platfrom, I used Apache Portable Runtime wrappers around platform-specific functions related to parallelism.  However, the installation of such package for Windows users will be really painful.  Another concern that I have is that I don't really need the entire APR library, only the part which deals with threads.Before I started working on this project, I considered different libraries for this task, and when looking into Python's implementation of threads, all the exported API I could find was dealing with GIL. In principle, I could create thread objects, and have them run C functions to do the work, however, I'm wondering if it makes sense?  Do Python threads map to underlying OS threads (like, in case of Linux, pthreads library), or are they basically a prototype for asyncio, where they don't do any work in parallel (and maybe only wait in parallel)?  The only exported API I found is the set of functions related to PyThreadState.  I can see Python wrappers for pthreads and NT threads in the source code, but they don't seem to be available for extensions.  Or am I missing something?
It could make sense to wrap your C code with Python threads as long as your long running tasks in C don't access python objects and so they can release the GIL:Calling system I/O functions is the most common use case for releasing  the GIL, but it can also be useful before calling long-running  computations which donâ€™t need access to Python objectshttps://docs.python.org/3/c-api/init.html#thread-state-and-the-global-interpreter-lock


Answer URL
https://docs.python.org/3/c-api/init.html#thread-state-and-the-global-interpreter-lock
