Natural Text
QuestionWhy do virtual subclasses of an abstract Exception created using the ABCMeta.register not match under the except clause?BackgroundI'd like to ensure that exceptions that get thrown by a package that I'm using are converted to MyException, so that code which imports my module can catch any exception my module throws using except MyException: instead of except Exception so that they don't have to depend on an implementation detail (the fact that I'm using a third-party package).ExampleTo do this, I've tried registering an OtherException as MyException using an abstract base class:The assertion passes (as expected), but the exception falls to the second block:
The why is easy:Edit: This assert mimics the outcome of the except clause, but does not represent what actually happens. Look at the accept answer for an explanation.The workaround also is easy:
Alright, I looked into this some more. The answer is that it's a long-outstanding open issue in Python3 (there since the very first release) and apparently was first reported in 2011. As Guido said in the comments, "I agree it's a bug and should be fixed." Unfortunately, this bug has lingered due to concerns about the performance of the fix and some corner cases that need to be handled. The core issue is that the exception matching routine PyErr_GivenExceptionMatches in errors.c uses PyType_IsSubtype and not PyObject_IsSubclass. Since types and objects are supposed to be the same in python3, this amounts to a bug.I've made a PR to python3 that seems to cover all of the issues discussed in the thread, but given the history I'm not super optimistic it's going to get merged soon. We'll see.
It seems that CPython once again takes some shortcuts and doesn't bother calling the metaclass's __instancecheck__ method for the classes listed in except clauses.We can test this by implementing a custom metaclass with __instancecheck__ and __subclasscheck__ methods:We can see that the print statements in the metaclass aren't executed.I don't know if this is intended/documented behavior or not. The closest thing to relevant information I could find was from the exception handling tutorial:A class in an except clause is compatible with an exception if it is  the same class or a base class thereofDoes that mean that classes have to be real subclasses (i.e. the parent class must be part of the subclass's MRO)? I don't know.As for a workaround: You can simply make MyException an alias of OtherException.In the case that you have to catch multiple different exceptions that don't have a common base class, you can define MyException as a tuple:
Well, this doesn't really answer your question directly, but if you're trying to ensure a block of code calls your exception, you could take a different strategy by intercepting with a context manager.


Answer URL
https://docs.python.org/3/reference/datamodel.html#class.__instancecheck__
https://docs.python.org/3/reference/datamodel.html#class.__instancecheck__
https://docs.python.org/3/reference/datamodel.html#class.__subclasscheck__
https://docs.python.org/3/tutorial/errors.html#handling-exceptions
