Natural Text
I am trying to find the largest cube root that is a whole number, that is less than 12,000. I am not sure how to check if it is a whole number or not though! I could convert it to a string then use indexing to check the end values and see whether they are zero or not, that seems rather cumbersome though. Is there a simpler way?
To check if a float value is a whole number, use the float.is_integer() method:The method was added to the float type in Python 2.6.Take into account that in Python 2, 1/3 is 0 (floor division for integer operands!), and that floating point arithmetic can be imprecise (a float is an approximation using binary fractions, not a precise real number). But adjusting your loop a little this gives:which means that anything over 3 cubed, (including 10648) was missed out due to the aforementioned imprecision:You'd have to check for numbers close to the whole number instead, or not use float() to find your number. Like rounding down the cube root of 12000:If you are using Python 3.5 or newer, you can use the math.isclose() function to see if a floating point value is within a configurable margin:For older versions, the naive implementation of that function (skipping error checking and ignoring infinity and NaN) as mentioned in PEP485:
We can use the modulo (%) operator. This tells us how many remainders we have when we divide x by y - expresses as x % y. Every whole number must divide by 1, so if there is a remainder, it must not be a whole number. This function will return a boolean, True or False, depending on whether n is a whole number.
You could use this:
You don't need to loop or to check anything. Just take a cube root of 12,000 and round it down: 
You can use a modulo operation for that.
Wouldn't it be easier to test the cube roots? Start with 20 (20**3 = 8000) and go up to 30 (30**3 = 27000). Then you have to test fewer than 10 integers.
How about 
The above answers work for many cases but they miss some. Consider the following:Using this as a benchmark, some of the other suggestions don't get the behavior we might want:Instead try:now we get:isclose comes with Python 3.5+, and for other Python's you can use this mostly equivalent definition (as mentioned in the corresponding PEP)
You can use the round function to compute the value. Yes in python as many have pointed when we compute the value of a cube root, it will give you an output with a little bit of error. To check if the value is a whole number you can use the following function:But remember that int(n) is equivalent to math.floor and because of this if you find the int(41063625**(1.0/3.0)) you will get 344 instead of 345.So please be careful when using int withe cube roots.Hope I have answered your question. If you have any other queries then you can contact me.
Just a side info, is_integer is doing internally: Not exactly in python, but the cpython implementation is implemented as mentioned above.
Try using:It will give lot more precision than any other methods.


Answer URL
https://docs.python.org/3/library/math.html#math.isclose
https://docs.python.org/3/library/math.html#math.isclose
