Natural Text
I need to print some stuff only when a boolean variable is set to True. So, after looking at this, I tried with a simple example:Same thing if I write print a if b==True.What am I missing here?
Python does not have a trailing if statement.There are two kinds of if in Python:if statement:if expression (introduced in Python 2.5)And note, that both print a and b = a are statements. Only the a part is an expression. So if you writeit meansand similarly when you writeit meansNow what would it print/assign if there was no else clause? The print/assignment is still there.And note, that if you don't want it to be there, you can always write the regular if statement on a single line, though it's less readable and there is really no reason to avoid the two-line variant.
Inline if-else EXPRESSION must always contain else clause, e.g:If you want to leave your 'a' variable value unchanged - assing old 'a' value (else is still required by syntax demands):This piece of code leaves a unchanged when b turns to be False.
The 'else' statement is mandatory. You can do stuff like this :EDIT:Or, depending of your needs, you may try:
If you don't want to from __future__ import print_function you can do the following:Which prints:If you're not aversed to from __future__ import print_function or are using python 3 or later:Adding the else is the only change you need to make to make your code syntactically correct, you need the else for the conditional expression (the "in line if else blocks") The reason I didn't use None or 0 like others in the thread have used, is because using None/0 would cause the program to print None or print 0 in the cases where b is False.If you want to read about this topic I've included a link to the release notes for the patch that this feature was added to Python.The 'pattern' above is very similar to the pattern shown in PEP 308:This syntax may seem strange and backwards; why does the condition go  in the middle of the expression, and not in the front as in C's c ? x  : y? The decision was checked by applying the new syntax to the  modules in the standard library and seeing how the resulting code  read. In many cases where a conditional expression is used, one value  seems to be the 'common case' and one value is an 'exceptional case',  used only on rarer occasions when the condition isn't met. The  conditional syntax makes this pattern a bit more obvious:contents = ((doc + '\n') if doc else '')So I think overall this is a reasonable way of approching it but you can't argue with the simplicity of:
Since 2.5 you can use equivalent of C’s ”?:” ternary conditional operator and the syntax is:So your example is fine, but you've to simply add else, like:
You can use:Just as well you can keep going like:Real world example:
Try this . It might help you
For your case this works:Edit: How does this work?In the questionSo evaluatingresults inwhich is assigned to a.If b == False?, b or 0 would evaluate to the second operand 0 which would be assigned to a.
This can be done with string formatting. It works with the % notation as well as .format() and f-strings (new to 3.6)oror
You're simply overcomplicating.
You always need an else in an inline if:But an easier way to do it would be a = int(b).
Well why don't you simply write:
hmmm, you can do it with a list comprehension. This would only make sense if you had a real range.. but it does do the job:or using just those two variables:


Answer URL
https://docs.python.org/3/library/string.html#format-string-syntax
https://docs.python.org/3/reference/lexical_analysis.html#f-strings
