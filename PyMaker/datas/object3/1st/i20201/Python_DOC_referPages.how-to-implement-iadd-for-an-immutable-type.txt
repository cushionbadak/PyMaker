Natural Text
I would like to subclass an immutable type or implement one of my own which behaves like an int does as shown in the following console session:Not surprisingly, int objects have no __iadd__() method, yet applying += to one doesn't result in an error, instead it apparently creates a new int and also somehow magically reassigns it to the name given in the augmented assignment statement.Is it possible to create a user-defined class or subclass of a built-in immutable one that does this, and if so, how?
The return value of __iadd__() is used. You don't need to return the object that's being added to; you can create a new one and return that instead. In fact, if the object is immutable, you have to.
Simply don't implement __iadd__, but only __add__:If there's no x.__iadd__, Python simply calculates x += y as x = x + y doc.
When it sees i += 1, Python will try to call __iadd__. If that fails, it'll try to call __add__.In both cases, the result of the call will be bound to the name, i.e. it'll attempt i = i.__iadd__(1) and then i = i.__add__(1).



Answer URL
