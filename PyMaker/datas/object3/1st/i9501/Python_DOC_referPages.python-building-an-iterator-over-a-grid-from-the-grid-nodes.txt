Natural Text
I am using python 3I would like to start from a list of nodes in 3 dimensions and build a grid. I would like to avoid the constructI am looking for a more compact version of the above lines. An iterator like zip, but that would iterate on all possible tuple in the grid
You can use something like np.meshgrid to construct your grid.  Assuming that func is properly vectorized, that should be good enough to construct lIf func isn't vectorized, you can construct a vectorized version using np.vectorize.Also note that you might even be able to get away without using np.meshgrid through judicious use of np.newaxis:As pointed out in the comments, np.ix_ can be used as a shortcut instead of np.newaxis:Also note that with this stupid simple function, np.vectorize isn't necessary and will actually hurt our performance a lot...
Say your func is something likeHook the lists you want to it using partial by doingNow just do a map supplying the indices and you're set!
With a simple function:and space defined by:This iteration is as fast any as any, even if it is a bit wordy:As @mgilson explains, you can generate 3 arrays that define the 3d space with:foo was written so it works with arrays just as well as with scalars, so:So if your function fits this pattern, use it.  Look at those I,J,K arrays, with and without sparse. There are other tools for generating the i,j,k sets.  For example:itertools.product is fast, especially when used as list(product(...)).  But the iteration mechanism isn't that important.  It's the repeated call to foo that take up most of the time.ndindex actually uses nditer, which can be used directly in:nditer is best described in: https://docs.scipy.org/doc/numpy/reference/arrays.nditer.html.  It is best used as a stepping stone toward a cython version. Otherwise it doesn't have any speed advantages.  (Though with this foo, and 'external_loop' it is as fast as foo(I,J,K)).  Note that this doesn't need the indices (but see 'multi_index').And yes, there's vectorize.  Convenient, but not a speedy solution.


Answer URL
https://docs.python.org/3/library/functools.html
