Natural Text
Here's a python module in a python package:I run the module and get the results as follows:From the printout, it seems that each test.dict was filled in parallel by multiprocessing. However, when I try to recover the results, the test.dicts seems to be empty. Can someone explain why this is happening and what I can do to recover the nonempty test.dicts?EDIT:@Valentin Lorentz, @Moinuddin Quadri, @zstewartEven if I change the latter part of the module toI get the same results. Each process is completely independent of the others (they don't share memory and don't need to). So when answers speak of sharing memory between processes, does this mean between the main module and the multiprocessing processes?
You can not transmit data between threads using built-in types. You need to use multiprocessing.Queue or mutiprocess.Pipes to perform that. Check: Exchanging objects between processes.You may refer: Running multiple asynchronous function and get the returned value of each function. It is having the example on how to use Queue() instead of list. 
Processes do not share memory by default. That's on purpose, because sharing memory between execution threads is a very complicated topic (synchronization between threads, communications, ...)The most direct solution to your problem is to explicitely share this object: https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processesHowever, a cleaner way is to make your function return a result, and use multiprocessing.Pool.map to call the function in multiple processes.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes
