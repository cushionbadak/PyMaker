Natural Text
I have three lists that are generated by other functions. Let's assume for now they are:As you can see, g is part of y. I am trying to get all combinations of the elements of the three lists. I have tried going about this in two ways:One way:Another way using itertools:Both ways produce the following combinations:But what I would like to get is:Also, when x for example is empty, I get no combinations at all when I am still expecting to get the element combinations of the remaining two lists.
This is inspired from @Psidoms answer but just uses a specifically tailored flatten function to make sure only items that should be flattened are iterated:Note that there is unfortunatly no such flatten function in the standard library but you could also use one from an external library, for example iteration_utilities.deepflatten. Note that this requires to provide str or basestring as ignore:To exclude empty iterables from the product simply exclude empty subiterables. For example:
As @BrenBarn commented, you can flatten list y with chain function, and then use product:
I would like to point out two implementations for flatten-like functions available in more_itertools (install via pip install more_itertools).flatten is an itertools recipe and emulates @Psidom's proposal:However, for flattening more deeply nested iterables, consider using collapse:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
