Natural Text
The normal kind of permutation is:But, what if I want to do this:What is this called, and how efficient would this be with arrays with hundreds of elements?
Your terminology is a bit confusing: what you have are not permutations of your characters, but rather the pairing of every possible character with every possible character: a Cartesian product.You can use itertools.product to generate these combinations, but note that this returns an iterator rather than a container. So if you need all the combinations in a list, you need to construct a list explicitly:Or, if you're only looping over these values:Or, if you want to generate the 2-length strings, you can do this in a list comprehension:
Nothing against itertools, but if you want a little insight on how to manually generate permutations of strings by applying modulo arithmetic to an incrementing sequence number.  Should work with a string of any length and any value of n where  n <= len(s)The number of permutations generated is len(s) ** nFor example, just call printPermutations("abc", 2)
As it says Andras Deak, using itertools product:
You'll want to use the itertools solution. But I know what it's called...Most people call it counting. You're being sneaky about it, but I think it's just counting in base len(set), where set is your input set (I'm assuming it is truly a set, no repeated elements). Imagine, in your example A -> 0, B->1, C->2. You're also asking for elements that have a certain amount of max digits. Let me show you:Here's some outputs:outputs:andoutputs:andoutputs (a big one):P.S. numberToBase courtesy of this post


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.permutations
