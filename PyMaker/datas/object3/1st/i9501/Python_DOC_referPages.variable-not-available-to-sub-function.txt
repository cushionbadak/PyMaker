Natural Text
This question already has an answer here:Why doesn't a sub-function inherit scope in Python?                    2 answers                This script defines a variable inside main(), but the variable isn't available to func(), which runs inside main(). Why is that?Error:If I convert the script to Python2, the error is the same, except it says global name instead of name.I assume I'm just missing a key concept. I just started learning Python after learning Bash.Edit: After reading the answers, I realized my mistake: I'm still thinking in terms of Bash, where functions either run in the same shell as the caller (with the same variables), or a subshell of the caller (inherited variables).
In your solution, greeting defined in main function is a local variable and can't be accessed outside main function. that is the reason it was giving you errors
I don't know much about python but in general global variables need to be defined outside the scope of main but before the function you want to use them in. If you don't want to make a variable global you need to pass the variable into the function as a parameter.
There are a lot of answers about python scoping rules, and it really matters here. But as I see your question, your misunderstanding consists in something completely different: a huge difference between defining function and calling it.LEGB rule is important but what really matters here that:"Scopes are determined statically, they looked up dynamically!". Roughly, function knows where to look for variable (when compiled), but it does not know the variables value (before you call function).In your case you simply call one function into the body of another function. When you call function the caller passes control to the callee (roughly, imagine this as a jump in your source code to the beginning of the function's codeblock). So when you call func you jump into func body. This function tries to find names: print and greeting (this process is called Name resolution) it looks in local scope, then in global scope (the scope where it was defined, not called) and finally in builtins. It finds only print in builtins. Because it did not find greeting name, an exception NameError is raised (exception is raised at the point where the error is detected) in your case in the place where main called func. And when an exception is not handled at all, the interpreter terminates execution of the program, or returns to its interactive main loop. In either case, it prints a stack backtrace, except when the exception is SystemExit.Hope it will clarify some points for you.One more place to look for information: The Python Language Reference: Execution modelp.s.: the global scope is always module (file with code) where function was defined. It is very important to understand!!!
In python, functions can't access any variable outside of the function unless its a parameter or is declared global.This should hopefully fix the issue:
See this post. In Python, each function has its own scope, so you can not access to the variable 'greetings' outside the function 'main', since it has been defined inside this function.


Answer URL
https://docs.python.org/3/reference/executionmodel.html#execution-model
