Natural Text
The description of the asyncio module is:This module provides infrastructure for writing single-threaded  concurrent code using coroutines, multiplexing I/O access over sockets  and other resources, running network clients and servers, and other  related primitives.I have been reading about the new and extraordinary asyncio python module/package/whatever. I understand there is the python GIL and so the asyncio properly fits well with the GIL since (the intention is) you manage things with an event loop on a single thread. So what is concurrent? Well it seems that the I/O seems to be concurrent. I believe I/O operations are handled by the operating system. So in the internals of asyncio, does it write a concurrent C-extension that utilizes functions given by the operating system?
In asyncio, single-threaded IO concurrency is achieved by combining many concepts:However, it is possible to achieve the same purpose without futures, as proven by curio:LinksStandard library:generatorselectselectornative coroutineAsyncio:asyncio coroutineasyncio futureasyncio taskbase event loopselector event loopCurio:curio coroutinecurio taskcurio kernel


Answer URL
https://docs.python.org/3/library/
https://docs.python.org/3/reference/expressions.html#yield-expressions
https://docs.python.org/3/library/select.html
https://docs.python.org/3/library/selectors.html
https://docs.python.org/3/reference/compound_stmts.html#async-def
https://docs.python.org/3/library/asyncio.html
https://docs.python.org/3/library/asyncio-task.html#coroutines
https://docs.python.org/3/library/asyncio-task.html#future
https://docs.python.org/3/library/asyncio-task.html#task
https://docs.python.org/3/library/asyncio-eventloop.html
https://docs.python.org/3/library/asyncio-eventloops.html#asyncio.SelectorEventLoop
