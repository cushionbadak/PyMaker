Natural Text
I'm trying to generate a list of number sequences using python, like below.Right now, I can do this using pure python with a recursive call, but it takes a lot of time for a single run (a few hours). I wonder if it's possible to do this with numpy and save a huge amount of time, and if yes, how?
What you're looking for is itertools.combinations_with_replacement. From the docs:combinations_with_replacement('ABCD', 2)  AA AB AC AD BB BC BD CC CD DDHence:The best part of this method is that since it returns a generator, you can iterate over it without storing it. This is a huge plus, since it'll save you a lot of memory.Other implementations and timingHere are some more implementations, including a numpy implementation. combinations_with_replacement (the try2 function) appears to be the fastest:This is true even for bigger numbers:Notes:I was using python3I used this answer for the implementation of try1.I used this answer for the implementation of try3.
do you mean this (or how is the sequence you mean defined)?this prints:not sure if that is what you are looking for, but product is included in python.this should be fast and memory-efficient. the lists are created on demand....on second thought: this is probably what you mean, right?with output:and now i see how you would want that more efficient...looks like Praveen's answer provides just that.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement
https://docs.python.org/3/library/itertools.html#itertools.product
