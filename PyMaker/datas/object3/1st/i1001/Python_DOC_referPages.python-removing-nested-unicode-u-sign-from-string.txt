Natural Text
I have a unicode object which should represent a json but it contains the unicode u in it as part of the string value e.g. u'{u\'name\':u\'my_name\'}'My goal is to be able to load this into a json object. Just using json.loads fails. I know this happens because of the u inside the string which are not part of an acceptable json format. I, then, tired sanitizing the string using replace("u\'", "'"), encode('ascii', 'ignore') and other methods without success.What finally worked was using ast.literal_eval but I'm worried about using it. I found a few sources online claiming its safe. But, I also found other sources claiming it's bad practice and one should avoid it.Are there other methods I'm missing?
The unicode string is the result of unicode being called on a dictionary.  If you control the code that's doing this, the best fix is to change it to call json.dumps instead.If you don't control the creation of this object, you'll need to use ast.literal_eval to create the dictionary, as the unicode string is not valid json.                                                                                          The docs confirm that ast.literal_eval is safe:can be used for safely evaluating strings containing Python values from untrusted sourcesYou could use eval instead, but as you don't control the creation of the object you cannot be certain that it has not been crafted by a malicious user, to cause damage to your system.


Answer URL
https://docs.python.org/3/library/ast.html#ast.literal_eval
