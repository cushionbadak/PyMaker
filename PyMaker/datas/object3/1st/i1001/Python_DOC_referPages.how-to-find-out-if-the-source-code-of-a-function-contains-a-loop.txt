Natural Text
Let's say, I have a bunch of functions a, b, c, d and e and I want to find out if they directly use a loop:I want to write a function uses_loop so I can expect these assertions to pass:(I expect uses_loop(c) to return False because c uses a list comprehension instead of a loop.)I can't modify a, b, c, d and e. So I thought it might be possible to use ast for this and walk along the function's code which I get from inspect.getsource. But I'm open to any other proposals, this was only an idea how it could work.This is as far as I've come with ast:
You need to check if the function's Abstract Syntaxt Tree has any nodes that are an instance of ast.For or ast.While or ast.AsyncFor. You can use ast.walk() to visit every node of the ASTSee the documentation for ast, async for was added in 3.5. 
You were almost there! All you had to do was to find out how to get the data from the body objects. They are all attributes after all of some Node type. I just used getattr(node, 'body', []) to get the children and if any of them are of _ast.For or _ast.While return a True. Note: I was just tinkering around the code. Not sure if this is documented somewhere and can be relied upon. I guess may be you can look it up? :)
If you are just trying to check if the function body contains the keywords 'for' or 'while', you can do the following:


Answer URL
https://docs.python.org/3/library/ast.html#ast.walk
https://docs.python.org/3/library/ast.html#abstract-grammar
https://docs.python.org/3/whatsnew/3.5.html#pep-492-coroutines-with-async-and-await-syntax
