Natural Text
This question already has an answer here:Is there a way to view cPickle or Pickle file contents without loading Python in Windows?                    2 answers                I need to do some maintenance on a system that basically looks like:(Complicated legacy Python program) -> binary pickle file -> (Another complicated legacy Python program)Which requires figuring out exactly what is in the intermediate pickle file. I suspect the file format is much simpler than the codes that generate and consume it, and it would help if I could verify that by eyeballing the file itself instead of having to figure out exactly what all the code does.Is there a way to take the binary pickle file and convert it, not to live objects in memory (which is what every page I could find with a Google search reckons 'unpickle' means) but to some readable text format? JSON, XML, whatever, I'm not fussy about the exact format, anything would do as long as it is a complete and readable representation of the contents that I can load up in a text editor and look at.
If the application is old enough it might use pickle protocol 0, which is human-readable.You could try the pickletools module found in python 3.2+.Using python3 -m pickletools <file> will "disassemle" the pickle file for you.Alternatively, you could try loading the data using data = pickle.load() and then immediately dump it using print(json.dumps(data)). Note that this might fail, because pickle can represent more things than JSON can.
Python native types are just readable enough. The hard part in your way is that unpickling will automatically try to import any modules with classes for any instances defined in code in your file.Fortunatelly, Python is flexible enough its possible to temporarily hack the import machinery in order to fool the unpickling and give it false classes to fill in with the pickled attributes.Then, it is a matter of converting the dictionary of the instances that were unpickled in this way back to human readable.Fortunatelly, I maintain a pet project that performs this "temporary import system hacking", so I could lend a couple lines of code from there to make the same here. In order to test this thing, I ended up creating a stand-alone script. As the comments on it spell: don't try to incorporate this in a larger program - it will break the running Python program as it is, by creating faking modules - but it should be enough for you to visualize what is pickled in there - although it would be impossible to match all the corner cases you can have there - you will have to work from here, mostly on the "pythonize" function bellow:update: as this might have some use for more people, I just made a gist out of this code. Maybe it is even pip worth: https://gist.github.com/jsbueno/b72a20cba121926bec19163780390b92


Answer URL
https://docs.python.org/3/library/pickle.html#data-stream-format
https://docs.python.org/3/library/pickletools.html
