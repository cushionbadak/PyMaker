Natural Text
I have a repository that is best characterized as a specialized application rather than a library.Here's an example structure:I would like to use an instance of logging.handlers.RotatingFileHandler for each module and each standard severity level found in the logging package.  Each .py file currently contains just logger = logging.getLogger(__name__); for a.py this would produce logger.name == 'logtest.a'.  What I would like to achieve is to set up multiple handlers for each logger:One that pertains to just the respective module, i.e. /tmp/mod-a.log.  The level of this handler should be NOTSET.Five that pertain to the five logging levels besides NOTSET, i.e. levels 10 thru 50.  Each of these has the appropriate .level to filter only log records of that severity, but the source may come from any logger instance.A picture probably says a lot more:(Yes, I realize this will log messages redundantly.)What is the recommended and efficient way to design such as setup?  It seems like logging.config.dictConfig would be useful, except that gets away from the logging.getLogger(__name__) calls. If the above is a bit unclear: I have a logger instance for each module besides __init__.py, each of which is created via logging.getLogger(__name__).  I realize that I can add 5 filehandlers to the root logger, because all of the other loggers inherit from that.  However, is there a more programmatic way to add the "module-level" file handler for each logger?I know that the adding of severity-level handlers could be done like this:But am unsure of how to treat the second part.
My current solution has two parts (still certainly appreciate other approaches):Set up the level-based handlers within __init__, and add them to a parent logger there.  As pointed out by @Sraw, this should be __name__, not the root logger, from which other packages might inherit.Add a helper function getModuleLogger() that mimics getLogger() within __init__, but also add a file handler specific to the module there.Each module then calls getModuleLogger(__name__) just as it would normally call logging.getLogger(__name__), and no additional setup is required.From __init__.py:From a.py (similar structure for others):Illustration:


Answer URL
https://docs.python.org/3/library/logging.html#logging-levels
