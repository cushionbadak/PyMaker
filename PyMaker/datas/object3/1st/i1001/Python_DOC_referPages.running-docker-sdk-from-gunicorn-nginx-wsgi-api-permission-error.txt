Natural Text
I am writing a Flask API that calls docker containers which execute Selenium web scraping scripts. I have tested this in dev and it works fine (python3 -m run flask  host=0.0.0.0) and I have made sure that the user (ubuntu) is in the docker group and the group has been reset (newgrp docker) however its still gets a permission error when attempting to run. I have checked the PID and the user is ubuntu for the gunicorn process, the image is available in docker, what else might be needed to provide permission? My flask code is below
The code you show should be extremely straightforward to set up without using Docker, since you're running Python code from a Python script.  You should add the long list of pip packages you're installing to your own application's setup.py or requirements.txt file, and then use the ordinary subprocess module to launch the scripts:(Using sys.executable here will use the same Python in your active virtual environment; it may not necessarily be the first Python in $PATH.)Adding Docker to this adds a huge amount of complexity and security considerations: if you get this wrong, you're opening up the possibility of a very straightforward remote root exploit.If you're getting permission errors than your user or group doesn't have permission to access the Docker socket file.  Check the output of id and ls -l /var/run/docker.sock.Both the use of exec you show and installing new software in a container after startup are anti-patterns.  (Should your HTTP request just fail if packages.python.org has a temporary outage?)  Write a custom Docker image that includes all of the dependencies for your script, and run that script as the main container process, if you need to run this in a container at all.


Answer URL
https://docs.python.org/3/library/subprocess.html
