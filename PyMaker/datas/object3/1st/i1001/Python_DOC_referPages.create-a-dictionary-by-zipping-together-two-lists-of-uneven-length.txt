Natural Text
This question already has an answer here:How to zip two differently sized lists?                    8 answers                I have two lists different lengths, L1 and L2. L1 is longer than L2. I would like to get a dictionary with members of L1 as keys and members of L2 as values.As soon as all the members of L2 are used up. I would like to start over and begin again with L2[0].As expected, the output is this:What I would like to achieve is the following:
Use itertools.cycle to cycle around to the beginning of L2:In your case, concatenating L2 with itself also works.
Use itertools.cycle:OutputAs an alternative you could use enumerate and index L2 modulo the length of L2:
cycle is fine, but I shall add this modulo based approach:
You can also use a collections.deque() to create an circular FIFO queue:Which pops the left most item currently in L2 and appends it to the end once the number is added to the dictionary. Note: Both collections.deque.popleft() and collections.deque.append() are O(1) operations, so the above is still O(N), since you need to traverse all the elements in L1. 
Other option without dependencies with good old for loop:Or just:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.cycle
https://docs.python.org/3/library/itertools.html#itertools.cycle
https://docs.python.org/3/library/functions.html#enumerate
https://docs.python.org/3/library/collections.html#collections.deque
https://docs.python.org/3/library/collections.html#collections.deque.popleft
https://docs.python.org/3/library/collections.html#collections.deque.append
