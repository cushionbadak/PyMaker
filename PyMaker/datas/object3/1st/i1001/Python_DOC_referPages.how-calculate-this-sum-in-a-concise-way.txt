Natural Text
I am trying to put in a sum within some modeling in Python. The mathematical formula is:sum(f_i*c_i) for i=1 until i=5How can I put in that sum in Python without typing in every single term? I defined f1 to f5 and c1 to c5 before.
The variable name f_i doesn't become the variable name f1 just because it is in the vicinity of a definition of another variable called i. What you want to do is compute the name of the variable based on the value of i. The way to do that in Python is to use a list:After you have done this, f[1] (not f1) has the value 2 (and not 1, because list indexes are zero based).Then you can do 
One way to do a summation of many variables is to store them in a list and loop over the list using a for-loop. I assume you have all the c and f variables declared.
Creating lists beforehand seems to be what you need to do.
If you want the freedom of changing the intervals between f and c (e.g. f[1:5] and c[5:9]) you can use zipped slices. Keep in mind that iterables are zero-indexed in Python and that a slice contains the starting point but not the ending point. As such f[1:5] contains four items, starting from index 1.
In general, it's a common rookie idea that you can have an index in the variable name. This actually causes more problems than it's worth, since variable names are strings. Aside from the relative difficulty of accessing variables by dynamically generated names, you have things like a_2 coming after a_10 and having to decide if the variable name is a_10 or a_0010.To that end you have a data structure called a list, which allows you to access elements using an actual integer froma single location. You could store your numbers in a pair of lists:Now you can access the data c[0], ..., c[4], rather than c_1, ..., c_5. The index is zero-based.If your data are always paired like that, you could also choose to reflect that in the structure. Instead of having two lists, you could choose to have a single list of two-tuples:Now what you called c_1 before will be the first element of the first tuple: cf[0][0]. Similarly, f_5 will be the second element of the last tuple: cf[4][1].The sum of products you are trying to compute can be computed from either arrangement of the data:ORThe expression that we pass to sum is called a generator expression. It would normally be enclosed in parentheses, except when it is the sole argument to a function. The expression will lazily yield the computed product from each element pair.If you are doing lots of data analysis, you may want to look into Python's computational libraries. The most fundamental one of these is numpy, which allows you to store data in densely packed arrays and perform fast vectorized operations on them.To convert a list into an array:The sum of products is now just a for product:Or you could compute it "manually":Alternatively, you could dofc will now be a matrix of two columns, so you can do something like:OR
Apart from using lists, if you have a large dataset, you can also make use of NumPy arrays which allow an element wise multiplication simply using the multiplication operator *. Then you can sum the values using np.sum. Below is an example using a small dataset. As suggested by @Mad Physicist, what you want it basically the dot product. So you can also do, 
A "pythonic" way to do it would be to use the built-in zip() and sum() functions to produce pairs of each term and calculate the total.Obviously it would be more concise to have the data stored directly in the two lists if feasible:


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/functions.html#sum
