Natural Text
Initially, I've a simple program to print out the whole output to the console.Initial Code to display output in the console onlyOutput in consoleThen, I decided to have a copy on a log file (log.txt) too while maintaining the original output to the console.So, this is the new code.Unfortunately, this didn't really work as expected. Some of the output only displayed on the console (os.system('ver') and subprocess.run('whoami')) while the print() function was only displayed on log.txt file and not in the console anymore.Output in consoleOutput in log.txt fileI was hoping to get similar output on both console and log.txt file. Is this possible?What's wrong with my new code? Please let me know how to fix this.Desired Output in both console and log.txt file
The most appropriate way to handle this is with logging.  Here's an example:This is the python 2.6+ and 3.x version of how you can do it.  (Can't override print() before 2.6)That option allows you the capability of using logging levels.  For instance, you can put debug logging throughout your code for when the application starts acting funky.  Swap logLevel to logging.DEBUG and suddenly, you're getting that output to screen.  Notice in the above example, we have 2 different logging levels, one for screen and another for file.  Yes, this will produce different output to each destination.  You can remedy this by changing both to use logging.INFO (or logging.DEBUG, etc).  (See full docs relating to log levels here.)In the above example, I've overridden print(), but I'd recommend instead that you just reference your framework using log.DEBUG('Variable xyz: {}'.format(xyz)) or log.INFO('Some stuff that you want printed.)Full logging documentation.There's another, easier way to do it with overriding, but not quite so robust:
There is no magic done by system, file pointer such as stdout and stderr need to be treated differently by your code. For example,  stdout is one of the file pointer, you can do it in below:Based on your requirement, you want to make the magic function to handle more than one file pointer in single line, you need a wrapper function in below:Then, you can make the magic happen now (make the output in both screen and file.)After finishing the print part, let's move on to system call. Running any command in the operating system, you will get the return in default system file pointers: stdout and stderr. In python3, you can get those result in bytes by subprocess.Popen. And while running below code, what you want should be the result in stdout.Yet again, you can call the wrapper function written in above and make output in both stdout and targeted file_pointer.Finally, combining all the code in above. (Plus one more convenient function.)Note: because the output of Popen is in bytes, you might need to do decode to remove b''. You can run stdout.decode() to decode bytes to utf-8 decoded str.*


Answer URL
https://docs.python.org/3/library/logging.html#levels
https://docs.python.org/3/library/logging.html
