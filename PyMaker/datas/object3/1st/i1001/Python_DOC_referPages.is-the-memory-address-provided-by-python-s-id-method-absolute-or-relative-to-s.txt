Natural Text
TO THE POINT VERSION (tldr):Can I use id() in Python to get the location of a variable in memory, restart my computer, and then use that same id to verify if the data is still stored there? Or is id() a ‘Python-only’/session dependent value?—————————————————DETAILED VERSION:Background:I’m storing an integer in a variable x, then using Phthon’s id() method to get the location in memory. I’m verifying the value in that location matches what I set to x using ctypes and the id returned from id().What I need to do is remove the variable from RAM (physically remove it so it no longer exists and could never be recovered). I know that makes it sound like I’m doing something sketchy, but I promise that is not the case.I’ve tried:del xx = NoneBut when I run ctypes using the id I still get the value initially set to x.Potential Solution:Since messing around with the physical RAM is above my skill level, my plan is to save the value id() returns in a text file, restart my computer (theoretically clearing RAM) and then use another script to verify if x’s pre-resart location in memory holds an integer between 0-255. If it does not, then continue with the program.Problem/Question:Does the value I get from Python’s id() method give an absolute address in memory that I can check after restart (or using a different programming language) or is that value relative to a Python session?I tried looking at CPython on GitHub, but I couldn’t find the id() method to see what is goin on under the hood.
The correspondence of the output of id() to the memory address is an implementation detail of CPython.  It does not apply to other python implementations (such as as Jython or Pypy) and it may not apply to future releases of CPython.  You should not depend on this behaviour.


Answer URL
https://docs.python.org/3/library/functions.html#id
