Natural Text
Writing a pandas DataFrame to a gzip-compressed CSV adds the timestamp to the archive:I'd like to write it without the timestamp, such that two subsequent exports of the same DataFrame are identical:
After looking through the Pandas code for CSV writing, the best I can suggest is to use the gzip module directly.  that way you can set the mtime attribute directly which seems to be what you want:This outperforms the two-step subprocess approach below for this tiny dataset:I'm using a TextIOWrapper() to handle converting strings to bytes as Pandas does, but you could also do this if you know you're not going to be saving much data:Note that gzip -lv df.csv.gz still shows the "current time" but it's just pulling this from the inode's mtime.  dumping with hexdump -C shows the value is saved in the file, and changing the files mtime (with touch -mt 0711171533 df.csv.gz) causes gzip to display a different valueAlso note that the original "filename" is also part of the gzipped file, so you'll need to write to the same name (or also override this) to make it deterministic.
You can export as an uncompressed CSV and then call gzip with the -n flag to avoid timestamping (this is also an instruction to not save the file name in the archive):


Answer URL
https://docs.python.org/3/library/gzip.html#gzip.GzipFile
