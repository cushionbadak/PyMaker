Natural Text
This question already has an answer here:Access nested dictionary items via a list of keys?                    14 answers                Let's say i have a list of keysand i have a valueand an example dict my_dict with this structureHow can i dynamically assign the new value in variable value to my_dict["key1"]["key2"]["key3"] by going thru / looping over my key_lst?I can not just say my_dict["key1"]["key2"]["key3"] = value since the keys and the number of keys is changing. I always get the keys (the path that i have to save the value at) in a list...I'm using Python 3.7
Predefined dictionary structure: functools.reduceYou can define a function using functools.reduce to apply getitem repeatedly and then set a supplied value:Note operator.getitem is used to access dict.__getitem__, or its more commonly used syntactic sugar dict[]. In this instance, functools.reduce calls getitem recursively on dataDict, successively using each value in mapList[:-1] as an argument. With [:-1], we intentionally leave out the last value, so we can use __setitem__ via dict[key] = value for the final key.Arbitrary dictionary nesting: collections.defaultdictIf you wish to add items at arbitrary branches not yet been defined, you can construct a defaultdict. For this, you can first defaultify your regular dictionary input, then use set_nested_item as before:
You can iteratively build/access levels using setdefault in a loop:d is the reference to your dictionary, and d2 is a throw-away reference that accesses inner levels at each iteration.
I guess you can loop through your keys like this :Edit: I guess I misread the question and answered as if the dictionnary wasn't already existing. jpp answer is pretty neat otherwise I guess!
This is what you want:You could use defaultdict too, it's neat in a sense but prints rather ugly...:



Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
