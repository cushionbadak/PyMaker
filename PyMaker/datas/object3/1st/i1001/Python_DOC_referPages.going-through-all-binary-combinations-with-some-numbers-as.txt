Natural Text
I have to generate all the possible binary representations of a given string, where some characters are "?" and others are 1 or 0.I'm trying to do a recursive search but I encounter some weird problems I can't figure out.For the input ?01?1 I should be getting:00101, 00111, 10101 and 10111but I get 101111010100101 printed out. In addition, anslist isn't working properly. I just can't seem to figure this out.
a list is a mutable type, that means that you only have one list on which all modifications are made. This causes your first call fill(inp) to also fill the remaining '?' in inp, thus only giving you one result with the second option for the first ? (first ?=1: two results, first ?=0: one result because the last result of the first ? is still saved in the list)To resolve this problem, use list.copy(). This will pass a copy of the list to fill() and thus cause the original list to be left as it is.Your complete code with .copy() and other minor modifications:
Here's example solution without using builtin tools. Here we use recursion, when we occur '?' during iterating over our input we replace it with '0' and '1' and add result of fill() of what's after current index.Output
this just uses the builtin itertools.product to create all possible strings of "01" of length N(however many question-marks there are in the string)then it converts each one of those into an iterator where each item is consumed as soon as it is seen, then we use re.sub to substitute our products into our original strings, in place of our question-markshere it is in a repl https://repl.it/@JoranBeasley/AssuredAncientOpengroupI see in a comment here you dont want to use builtins ... so nevermind then i guessif you do not want to use builtin itertools.product .. .simply write your ownsame with built in iterand lastly we need to write our own custom subbernow we tie it all together in the same way
A simple solution that avoids using a global or a library:Tries to spell things out rather than make the most efficient array operations, which is left as an exercise for the OP.OUTPUT
Sample python code using itertools.product (you can use an equivalent implementation but this is fine)example usage:


Answer URL
https://docs.python.org/3/library/stdtypes.html#list
