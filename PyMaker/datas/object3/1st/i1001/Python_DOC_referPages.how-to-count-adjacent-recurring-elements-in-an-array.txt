Natural Text
I have an array of 0's and 1's as suchI want to define a function that will take this array as input and output an array of the same length, with the count of adjacent 1's in the index where the first 1 appeared (and 0 otherwise). So the output would bebecause 1 appeared in the 2nd index 3 consecutive times and 1 appeared in the 9th index 2 consecutive times.Is there a way to do this using numpy? If not, is there some (efficient) pythonic way to do it?
Here is a solution using pure vectorized operations and no list iterations:
Using the itertools module:
You could use groupby to group the consecutive elements:OutputA shorter (more pythonic?) is the following:
Use pandas, take advantage in pandas count counts non-NaN values.  Create NaNs using mask then groupby changes in values of s.Output:
Here's one way using numpy and a list comprehension:The logic:Find leading and trailing indices of where you have consequence 1s.Split your array from those indicessum those sub lists that have one and  leave sub lists with zero the way they areflatten the result using np.hstack.If you want to replace the remained ones with 0 just do the following:[0]*(len(x) -1) will create the expected 0s for you and using an in-place unpacking you'll be able to place them beside the sum(x).If you ever wanted a pure Python approach here's one way using itertools.groupby:
using groupbyoutput
TL;DR: this gives you the output you want:will give you:explanation:itertools has the groupby function to split runs of "the same"will give you:so k is the key, the element in the input sequence and g is the group. so the if conditions appends either (in case of a 0) the series of 0's from the input, or the length if the run of 1's plus zeros to fill up for the length of the 1-run.
Other option with no dependencies:The good old while loop accessing by index (sometimes faster than numpy):It works also with array = [0,0,4,4,4,0,0,0,0,5,5,0,0]


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/library/itertools.html#itertools.groupby
