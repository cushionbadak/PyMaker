Natural Text
Could someone explain the concept behind how to pass data between asynchronous calls in python?I have this scenario:I have a main procedure (mainthread) and then I run another async call that adds two numbers() and sleeps for some time.  The expectation is to have main thread wait until calc and sleeping are done.  In terms of pseudo code this might look like this:How do I made the last print wait for z?  I tried to use threading.Event() and played with set, wait, and clear, but they block everything.I do not think my case is unique and there has to be a neat systematic way of doing it.  I looked into twisted reactor but it was partially successful.  My actual code involved GUI that has to wait for results from async processes and then self- and auto- update...but I think the example depicts the bulk of the problemI think I am missing the actual concept of how to work asynchronously in python.
If you are using multi-threading, you should use futures to encapsulate your results. Specifically, the future.result(timeout=None) would be used in your situation:Return the value returned by the call. If the call hasn’t yet completed then this method will wait up to timeout seconds. If the call hasn’t completed in timeout seconds, then a concurrent.futures.TimeoutError will be raised. timeout can be an int or float. If timeout is not specified or None, there is no limit to the wait time.As mentioned in the comments above, if you are not using multi-threading (and are using asynchronous programming), then callbacks would be the way to go.
If your main thread has progressed as far as it meaningfully can without the result from the worker thread and you want to block, you can either use a threading.Event to wait for a certain point in the worker thread's execution or thread.join (where thread is a threading.Thread instance) to wait for the worker thread to complete:However, in the context of a GUI, it is unlikely that your main thread has progressed as far as it can -- it is probably constantly busy keeping the GUI responsive. In that case, as was mentioned in the comments on the question, it's better to just pack anything you want done after the worker's calculation is finished into a callback for the worker thread to call:


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#future-objects
