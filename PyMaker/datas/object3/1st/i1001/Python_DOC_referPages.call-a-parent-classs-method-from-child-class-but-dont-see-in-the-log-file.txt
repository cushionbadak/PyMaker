Natural Text
I would like to call a parent class's method from child class but I don't see the logging entry in the log file when I run the following command:If I call the printA() method in the A.py code then I see the logging entry.The following piece of Python code is A.py file:B.py file:logging.yaml file:Actual result is an empty log file. The question is what should I change on my source code to make the logging function complete?Will be grateful for any help.
You are configuring and re-configuring the logging module, and each time you call logging.config.dictConfig() you leave the disable_existing_loggers parameter to dictConfig() to True. See the Dictionary Schema Details section of the documentation:disable_existing_loggers - whether any existing loggers are to be disabled. This setting mirrors the parameter of the same name in fileConfig(). If absent, this parameter defaults to True. This value is ignored if incremental is True.So each time you call dictConfig() any logging.Logger() instances are being disabled.Your code works if you only call dictConfig() once, before you use logging.getLogger(__name__) to create your single Logging() object. But when you expanded to two modules, your from A import * line imports A, executes dictConfig() and creates a Logger() before control returns to the B module, which then again runs dictConfig() (the logger reference you create in B is otherwise unused anywhere).You only need to configure logging once, preferably as early as possible from the main entry point (the script you run with Python), and if your code has already created Logger() instances you want to continue to use, you either need to set incremental to True (but understand [that only a subset of your configuration will be applied then), or set disable_existing_loggers to False.Remember that you can always update the dictionary you load from the .yaml file, so you could just use:before you pass config to logging.config.dictConfig().I'd use a if __name__ == '__main__': guard to ensure that you only configure logging at that point. Don't run top-level code in a module that alters global configuration without such a guard:


Answer URL
https://docs.python.org/3/library/logging.config.html#dictionary-schema-details
https://docs.python.org/3/library/logging.config.html#logging-config-dict-incremental
