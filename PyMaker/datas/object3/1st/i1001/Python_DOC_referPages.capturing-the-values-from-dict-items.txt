Natural Text
Recently I came across this list comprehension code from a python book:when passing 'attrs = {'size':'large', 'quantity':6} it produces ['size="large"', 'quantity="6"'] as output. But I am confused as to which variable captures the keys and which one captures the values. I understand that attrs.items() will produce 2-tuples containing keys and values, but there is only one variable, (items) provided to capture it, then how does it work? Can someone please take its parts apart and explain what magic is going on here? It is all the more complex as there is some string formatting also going on here simultaneously. 
item is a tuple consisting of the key and the value:Since item is a tuple, it can be used directly as the right-hand argument for %, and its elements are consumed in order by the format string.(This is the reason why it is recommended that you always use an expicit tuple with % if you aren't positive that an argument isn't already a tuple. For example, if foo=('a', 'b'), then "%s" % foo would produce an error, but "%s" % (foo,) would produce "('a', 'b')" as presumably expected.)
Output:But you should probably switch to str.format() syntax on 2.7+ :https://docs.python.org/2/library/string.html#format-string-syntaxprint ( "{} {} {} {}".format("It","works","like","this") )and to f-strings in python 3.6+:https://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literalsprint ( f"{'It'} {'works'} {'like'} {'this'}" # makes no sense - but for consistency sakeYou might also want to visit https://pyformat.info/ for mor input on how to format properly.
items() returns tuples of key, value, and then the tuple is passed as parameter to the % operator, so it gets used to replace the placeholders in the string.


Answer URL
https://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literals
