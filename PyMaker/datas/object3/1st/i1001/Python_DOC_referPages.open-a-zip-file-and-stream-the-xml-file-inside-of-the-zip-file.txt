Natural Text
I am trying to open bulk data from the USPTO. The xml files within the zips are concatenated xml files containing multiple xml declarations and are quiet large. I am trying to only read lines from the xml until i get to the next xml declaration. I found this related question, without code.What I want to create is a function that does the following:For each *.zip fileExtract all xml file(s) (or open xml file(s) for reading)Read lines from the xml file(s)Append each line until the next xml declarationReturn the stringSo far, I've been able to open the zip file, find all the xml file(s) and extract each xml file. I would prefer to not write the xml file to disk, but instead create a string that is a single xml document that I then further parse. 
Use read instead of extract. It returns the bytes of a file in the zip, given a name. It's important to understand that you're essentially extracting the archive to memory, so be aware of how much data is actually going to be extracted and your limitations in that regard.For example, the following function returns a dict with the names of a zip archive's files as keys, and the files' contents as values:


Answer URL
https://docs.python.org/3/library/zipfile.html#zipfile.ZipFile.read
