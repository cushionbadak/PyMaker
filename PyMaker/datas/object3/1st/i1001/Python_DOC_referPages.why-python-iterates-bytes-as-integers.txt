Natural Text
Taken from official Python documentation:Since bytes objects are sequences of integers (akin to a tuple), for a bytes object b, b[0] will be an integer, while b[0:1] will be a bytes object of length 1.I am quite confused as to why the designer choose to do so, since byte is just 8-bit and int is usually 32-bit. Can somebody explain the reason behind why b[0] is an int? Thank you!Edit:I tried the following experiment:It seems that bytes is represented by bytes in memory; but the question remains why iterate bytes as int?
A bytes object does not store ints. Indexing or iterating over a bytes object produces ints, but a bytes object stores bytes as bytes. Object overhead is only incurred once for the whole bytes object.Individual bytes extracted from a bytes object are represented with the same integer type as any other integer because there is no point in doing otherwise. Since CPython stores canonical copies of small integers, the only cost of storing a byte as an ordinary int is the cost of the pointer.Creating a dedicated byte type just for this would still cost 16 bytes of object overhead per byte object on a standard 64-bit CPython build, plus 1 byte for the data, plus 8 bytes for the pointer, for a net loss of 17 bytes compared to just storing the pointer for an int. Sure, you could store canonical byte objects, but that still gives you no benefit over the existing canonical ints. Also, a byte type would add extra complexity to code that needs to interact with byte.The only way to store bytes in less bytes per byte in CPython's data model than just using ints is to use a packed representation, and the packed representation for that is bytes itself.
A byte can be represented as an int below 2**8, or under 256. This is for easier redability of the bytes object's bytes.Note: When you make a bytes object, it displays:This means a bytes object is just many ints but turned into encoded bytes.Think of a bytes object as a list of ints. Check this out:Now about the question of why?What other way can one represent a byte?A string sure would represent many bytes with an encoding, but not if it has a different encoding or no encoding specified.A tuple wouldn't make sense as it can have anything inside it. That includes other strings, floats, and other stuff a byte wouldn't represent.An integer would only represent one byte, and a tuple of ints specifically for this purpose would work.Therefore, a tuple of ints would make up a bytes object, and a bytes object would be able to be decoded and encoded into strings for use. An int would be the only 'pure' way of representing a single byte inside the bytes object.


Answer URL
https://docs.python.org/3/library/stdtypes.html#binary-sequence-types-bytes-bytearray-memoryview
