Natural Text
What is the most "pythonic" way to create a class member which is an instance of that class? I.e. something like this:One can solve this by adding a member after the class definition:but this seems a little wrong; naturally, class members should be defined in that class.Is there a better way to do this?
That is not "A little wrong" - it is the simple and obvious way to do that.One line of code, readable by everyone and obvious "what it is". Still it does not "feel" elegant. So, if you don't want to do that just for the looks, and perhaps, if there are many classes like this, not repeating code, it could be done with a class decorator:Decorators are ok for that, as they get the cls to be modified as a parmater after it is fully created. With metaclasses, that would be tricky because some steps of class instantiating, like calling __init_subclass__ are performed after any explicit metaclass methods that can be overriden, so, one could have problems trying to create an instance inside a metaclass initialization method (__init__, __new__, or meta-meta-class' __call__)
It appears that you want a setUp type of functionality.  Here's a "slightly dirty" way to do it from within the class: set a class-variable flag to denote the first use of the class.  Check the flag on instantiation; if this is the first access, then clear the flag and run the set-up method.
While the class isn't defined within the body, it is defined when inside __init__However, there's a problem that instantiating the class inside __init__ is recursive, so you need to track whether instance_as_member has been made yet.Something like the following works:This results in:None  <__main__.Foo object at 0x7fcd9f68f3c8>(As to whether this is a good idea is an entirely different question!)


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__init_subclass__
https://docs.python.org/3/reference/datamodel.html#metaclasses
