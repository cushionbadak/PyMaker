Natural Text
1. The days enterred should be after 15/10/15822. Should consider the leapyears.3. Even when "ctrl + c" or alphabets are enterred, the source code should go on (Use try...except) 3. Repeat until 0 is enterred in 'year'.THis is what I tried.....I completely can't think of how to solve this, so I'd like to get some hints how I should deal with this problem!Year: 2019 Month: 0 Day: 12 There is only January ~ DecemberYear: 2019 Month: 1 Day: 0 Day should be at least 1Year: 2019 Month: 1 Day: 32 January is upto 31Year: 2020 Month: 2 Day: 30 2020 is a leapyear, but Feburary is upto  29Year: 2019 Month: 2 Day: 29 2019 is not a leapyear, so Feburary is  upto 28Year: 1582 Month:1 Day:1 1/1/1582 is before when Gregorian calender  startedYear: 2019 Month: 1 Day:8 OKYear: 0
Well, the first thing to do, obviously, is to check whether your user inputs are proper numerics. As mentionned in the instructions, this can be done using exception handling (try/except blocks). Exception handling is documented so first check the doc and use the interactive shell to test out things until you get how ot works... Just a couple hints here: only catch the exact exceptions you expect at a given point, and have the less possible code in the try block so you're sure you only catch the exceptions raised by this exact piece of code. (NB : Note that this can ALSO be done without exception handling by testing the content of the strings returned by input() _before_ passing them to int(), but you're obviously expected to use exception handling here, cf the "Use try/except" mention.)The second thing is to validate that the individual values entered for day, month and year are in the expected range; ie there are only 12 month, so for this variable, any value lower than 1 (january) or higher than 12 (december) is invalid. Note that since the number of days in a month changes from month to month and, for february, can change from year to year, you can only validate days once you know the month and the year. I suggest you first make the "day" validation work without taking care of leap years, and only then take care of the leap year special case. As often, a good data structure is key to simple effective code, so read about the standard basic Python data types (lists, dicts, tuples etc) and think about which of those types you could use to map a month number to how many days it has (for a non leap year, that is). There are quite a few other things to care of, but first manage to get those first two points working and the rest should not be too difficult. 


Answer URL
https://docs.python.org/3/tutorial/errors.html
