Natural Text
I have the below sample  pretty basic code for working with conditions in Python:As per my understanding when the consumer calls the wait() method it would release the condition and go into sleep.When the producer notifies the threads after it calls notify() it seems that neither of the consumers are reacquiring the condition before they try to pop from the integer list. Is this not a race condition ?
The consumers do not need to reacquire the condition after being woken up from wait() because they do not release it until after resuming from wait().What they release is a lock that is always associated with the condition, either explicitly or implicitly.From the docs:A condition variable is always associated with some kind of lock; this can be passed in or one will be created by default. [...] The lock is part of the condition object: you donâ€™t have to track it separately.The lock is acquired and released implictly by acquiring / releasing the condition, as well as when calling wait() resp. waking up from it.The acquire() and release() methods also call the corresponding methods of the associated lock.  [..] The wait() method releases the lock, and then blocks until another thread awakens it by calling notify() or notify_all(). Once awakened, wait() re-acquires the lock and returns.So there is always a maximum of one thread that can hold the lock, and thus modify the shared resource safely at any given point in time.


Answer URL
https://docs.python.org/3/library/threading.html#condition-objects
https://docs.python.org/3/library/threading.html#threading.Condition.wait
https://docs.python.org/3/library/threading.html#threading.Condition.notify
