Natural Text
This problem came up while trying to write code for a truth-table generating function. How can I generate a list of lists of all length-n permutations of True and False? In other words, given a list of elements [True, False], how can I generate all permutations of all possible length-n combinations of those elements?For example:n=2 length-2 permutations are:n=3 the length-3 permutations are: I know there's 2^n lists in this list. I also have considered using itertools.product, but that only seems to give permutations of a specific combination. In this case, I think I want to generate permutations of ALL  combinations of a length-n list of true/false. 
Use product:And do a list:
It's relatively easy if you consider the values to be bits instead. Like for the n = 3 case, see it as a value containing three bits.Loop (using integers) from 0 to 2‚Åø - 1 (inclusive) and print all bits in each value (with 0 being False and 1 being True). Then you will have all permutations.Of course, it's not a very Pythonic solution, but it's generic.
It is not efficient solution but you can use:
Try itertools.product with the repeat argument:As you can see above, it returns an iterable, so wrap it in list():It also returns a list of tuples instead of a list of lists, but that should be fine for most use cases and can be solved very easily with a list comprehension if lists are really needed:
And if you want list of lists, not list of tuples, start with U9-Forward's answer:and continue:lll will be a list of lists, instead of tuples.Much better way, following comments:Thanks to Kevin.
EDIT: Looks like I didn't check the output before posting my answer. It'll stay as it is as the right way would be a duplicate answer of the correct answer.Use this simple code:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
