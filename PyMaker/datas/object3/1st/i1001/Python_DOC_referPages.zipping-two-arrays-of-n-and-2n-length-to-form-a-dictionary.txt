Natural Text
I am struggling with this little thingy. Suppose:output something like:Zipping right now:How do I achieve a cyclic zipping on values? I can achieve this long way having multi-loops. One-liner would be cool :D. 
Quite simple really, you don't even need zip:Make use of the steps in slicing your list, and starting with the index of the field_name will do.
Assuming that your values are separated by a distance of 3 indices, you can do something like this without using any zip by a single for loop. Using enumerate gives access to index which you can leverage to access the list values. In case you want to make it more general, you can use the number of fields ('keys') as the offset. OutputPutting it all together 
We can group the values with the grouper function from more_itertools or with the namesake recipe in the itertools docs. The groups can then be transposed with zip.This produces no intermediate lists.
Assuming you have control over the structure of field_values (which you do as I understand from your comment), you can take a step back, and reformat them into a nested list. It would then look like this and be much better for your task:Now it is just a single, readable line:which produces:Being able to solve whatever problem comes your way is definitely a very important asset but making sure you don't have many problems is even better.
You could use zip multiple times:OutputOr in one line:
Here's a long way of doing it. You can probably write a one-liner with this but would make it unreadable. The output is different but may help in your problem.  Hope it helpsOutputs:
Here is way of doing it.P.S: Just to help you understand this statementfield_values[idx::len(field_name)]L[start_index::step_number] means a slice of L where the start_index is the index to start from and step_number tells the interpreter how many value index it needs to skip. 
Here's one answer making use of nested zip():


Answer URL
https://docs.python.org/3/library/functions.html#zip
