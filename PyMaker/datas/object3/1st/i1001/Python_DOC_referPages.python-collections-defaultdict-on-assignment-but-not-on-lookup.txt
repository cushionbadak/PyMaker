Natural Text
I have the following code:which enables me to write any new "path" in the dict as a one liner:which is what I want.But I want to get an exception when running (for any non existing path):I feel I need defaultdict when writing, plain dict when reading...Or, is there a simple nice way to check if a 'path' exists in a defaultdict without modifying its contents...I tried converting the defaultdict back to a dict before the lookup, hoping that:would raise a exception... but it kept creating missing keys...
You can't distingsuish between lookups and writes here, because it is the lookups that create your intermediary structure in the data['A']['B']['C'] = 3 assignment. Python executes the indexing operations data['A'] and then ['B'] first, before assigning to the 'C' key. The __getitem__, __setitem__ and __missing__ hooks involved to make that work are not given enough context to distinguish between access that then leads to the 'C' assignment from only 'reading' 'XXX' in your second example.You really only have 3 options here:Don't use defaultdict. When writing, explicitly create new nested dictionaries with dict.setdefault() instead; you can chain these calls as needed:or you can wrap recursive behaviour in a few functions.Create a recursive copy of your defaultdict structure to replace it with a dict structure once you are done writing:Set all the default_factory attributes to None to disable creating new values for missing keys:
An obvious solution is to just use plain dicts with a function that can "materialize" the intermediate keys:outputs


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.setdefault
