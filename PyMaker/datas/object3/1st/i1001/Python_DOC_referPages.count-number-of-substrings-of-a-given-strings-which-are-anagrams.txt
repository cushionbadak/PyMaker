Natural Text
This question already has an answer here:Can this python code be more efficient?                    2 answers                I need to find anagrams of all substrings of a given string. I found all possible substrings for the given string using the following code:I want to find substrings of equal length from this list and if they are anagrams. Any thoughts?
If two strings are anagrams they must have the same length, you can just test them directly with a simple nested for loop.To check if two strings are anagrams, collections.Counter comes in handy: it counts the occurrences of every distinct element in an iterable, so two strings si and sj are anagrams if and only if Counter(si) == Counter(sj).
As in @MarcoBonelli answer you could use collections.Counter to create a representation of a string that will be equal if and only if the strings are anagrams of each other, for example:Instead of doing a nested for loop and check every pair, you could use a dictionary to group strings with the same Counter representation and use a single loop:OutputIn the output the sub-list corresponds to the groups of strings that are anagrams of each other. To use the Counter in a dictionary you have to convert the items to a frozenset. Finally this approach complexity is O(n) where n is the number of substrings.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset
