Natural Text
I just tried to run this script with Python 3.3.Unfortunately it's about twice as slow than with Python 2.7.Here are the results:Profiling shows that the additional time is spend in print:How can I avoid this overhead? Has it something to do with UTF-8?
Python 3 decodes data read from stdin and encodes again to stdout; it is not so much the print() function that is slower here as the unicode-to-bytes conversion and vice-versa.In your case you probably want to bypass this and deal with bytes only; you can access the underlying BufferedIOBase implementation through the .buffer attribute:You'll now have to use stdout.write() as print() insists on writing to the stdout TextIOBase implementation.Note that the .split() now uses a bytes literal b'"' and we write a bytes-literal b'\n' as well (which normally would be taken care of by print()).The above is compatible with Python 2.6 and up. Python 2.5 doesn't support the b prefix.


Answer URL
