Natural Text
Suppose I have the following code which takes in a distance function and two points, and spits out the distance:I'd like to be able to check that if a user uses a particular distance function that it is, first and foremost, actually a function.  After this, I can check other things, but my main question is: how do I assert that dist_fun is actually a function?If there is no easy way to do this, or if there's an alternative way to do this kind of thing, let me know.  I've done a bit of testing before in Python, but never ran across this problem until now.  I've seen that the "type" of a function is "function", but Python does not allow me to use this as a type?  Would it be easier just to go back to try-except here?
The motto for Python is, of course, that it's better to ask forgiveness than permission. So, you'd be perfectly fine counting on the user to pass you valid input, or excepting the TypeError that gets thrown if you try to call something that can't be called. That being said, if you really want to assert that something is a function, I suppose you could always check the type...
how do I assert that dist_fun is actually a function?This is normally done via:
If you want to assert that it's actually a function, that's easy:… or:In general, when you have this problem:I've seen that the "type" of a function is "function", but Python does not allow me to use this as a type?… for a built-in type, the type you want is available in types and/or a function that checks more simply can be found in inspect.However, you probably don't want to do that; rather, you want to assert that it's something callable. After all, a bound method, a functools.partial, an object with a custom __call__ method, a custom function-like object implemented in a C extension, etc. would all be just as useful here, right? So use callable:(Unless you need to support Python 3.0-3.1, or really ancient 1.x versions. callable was added somewhere around 1.4, removed in 3.0, then added back in 3.2.)Or, maybe even better (with Python 3.3+ only):This checks that it's not just callable, but callable with the arguments you want to pass it. (Not such a big deal when it's just two positional arguments… but when you're passing keyword arguments, or forwarding args with /*, etc., it can be.)
well, instead of trying to test if the parammeter is a valid function, you can test is it's callable, because with python any user can user a callable instead of a function, this is one way to do it:or


Answer URL
