Natural Text
I want to sort this dictionary d based on value of sub key key3 in descending order. See below:So final dictionary would look like this.My approach was to form another dictionary e from d, whose key would be value of key3 and then  use reversed(sorted(e)) but since value of key3 can be same, so dictionary e lost some of the keys and their values. makes sense?How I can accomplish this? This is not a tested code. I am just trying to understand the logic.
Dictionaries do not have any inherent order. Or, rather, their inherent order is "arbitrary but not random", so it doesn't do you any good.In different terms, your d and your e would be exactly equivalent dictionaries.What you can do here is to use an OrderedDict:The original d has some arbitrary order. d_ascending has the order you thought you had in your original d but didn't. And d_ascending has the order you want for your e.If you don't really need to use e as a dictionary, you just want to be able to iterate over the elements of d in a particular order, you can simplify this:If you want to maintain a dictionary in sorted order across any changes, instead of an OrderedDict, you want some kind of sorted dictionary. There are a number of options available that you can find on PyPI, some implemented on top of trees, others on top of an OrderedDict that re-sorts itself as necessary, etc.
A short example to sort dictionary is desending orderFollowing will be the output
you can make use of the below code for sorting in descending order and storing to a dictionary:
Python dicts are not sorted, by definition.  You cannot sort one, nor control the order of its elements by how you insert them.  You might want to look at collections.OrderDict, which even comes with a little tutorial for almost exactly what you're trying to do: http://docs.python.org/2/library/collections.html#ordereddict-examples-and-recipes
ListDictionary
You can use the operator to sort the dictionary by values in descending order.The Sorted dictionary will look like,Here, operator.itemgetter(1) takes the value of the key which is at the index 1.
sort dictionary 'in_dict' by value in decreasing orderexample above 


Answer URL
