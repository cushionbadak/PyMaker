Natural Text
I have 3 files. The first is a Runners file which is abstract. The other two are CharityRunner and ProfessionalRunners. In these I can create runners. Runners:CharityRunners:ProfessionalRunners:Now I have also created a club object that has a club id and club name. There is also a list called self._runners = []. I'm trying to get a add function that will add the runners created in the list. But it must make sure that the runner is not already in the list. The object printing method should be in the format of:Club: <club id> <club name>Runner: <runner id 1> <runner name 1>Runner: <runner id 2> <runner name 2>At the moment I only have this for the club object:
I'm guessing the part you're missing is:im trying to get a add function that will add the runners created in the list.Your existing code does this:This has multiple problems.First, you're trying to modify self._runner, which doesn't exist, instead of self._runners.Next, you're appending the Runner class, when you almost certainly want an instance of it, not the class itself.In fact, you almost certainly want an instance of one of its subclasses.And I'm willing to bet you want a specific instance, that someone will pass to the add_runner function, not just some random instance.So, what you want is probably:And now that you posted the UML diagram, it says that explicitly: add_runner(Runner: runner). In Python, you write that as:Or, if you really want:… but that will probably mislead you into thinking that this is a Java-style definition that requires an instance of Runner or some subclass thereof and checks it statically, and that it can be overloaded with different parameter types, etc., none of which is true.To use it, just do this:Next:But it must make sure that the runner is not already in the list.You can translate that almost directly from English to Python:However, this does a linear search through the list for each new runner. If you used an appropriate data structure, like a set, this wouldn't be a problem. You could use the same code (but with add instead of append)… but you don't even need to do the checking with a set, because it already takes care of duplicates for you. So, if you set self._runners = {}, you just need:


Answer URL
