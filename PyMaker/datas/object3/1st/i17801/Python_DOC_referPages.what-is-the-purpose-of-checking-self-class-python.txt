Natural Text
What is the purpose of checking self.__class__ ? I've found some code that creates an abstract interface class and then checks whether its self.__class__ is itself, e.g.What is the purpose of that?Is it to check whether the class is a type of itself?The code is from NLTK's http://nltk.googlecode.com/svn/trunk/doc/api/nltk.probability-pysrc.html#ProbDistI
self.__class__ is a reference to the type of the current instance.For instances of abstract1, that'd be the abstract1 class itself, which is what you don't want with an abstract class. Abstract classes are only meant to be subclassed, not to create instances directly:For an instance of a subclass of abstract1, self.__class__ would be a reference to the specific subclass:Throwing an exception here is like using an assert statement elsewhere in your code, it protects you from making silly mistakes.Note that the pythonic way to test for the type of an instance is to use the type() function instead, together with an identity test with the is operator:type() should be preferred over self.__class__ because the latter can be shadowed by a class attribute.There is little point in using an equality test here as for custom classes, __eq__ is basically implemented as an identity test anyway.Python also includes a standard library to define abstract base classes, called abc. It lets you mark methods and properties as abstract and will refuse to create instances of any subclass that has not yet re-defined those names.
The code that you posted there is a no-op; self.__class__ == c1 is not part of a conditional so the boolean is evaluated but nothing is done with the result.You could try to make an abstract base class that checks to see if self.__class__ is equal to the abstract class as opposed to a hypothetical child (via an if statement), in order to prevent the instantiation of the abstract base class itself due to developer mistake.
I'd say that some would do:Even when the base is abstract, you wouldn't want the base's __init__ to throw NotImplementedError. Hey, maybe it even does something useful?
What is the purpose of that? Is it to check whether the class is a type of itself?Yes, if you try to construct an object of type Abstract1 it'll throw that exception telling you that you're not allowed to do so.
The clues are in the name of the class, "abstract1", and in the error. This is intended to be an abstract class, meaning one that is intended to be subclassed. Each subclass will provide its own behaviour. The abstract class itself serves to document the interface, i.e. the methods and arguments that classes implementing the interface are expected to have. It is not meant to be instantiated itself, and the test is used to tell whether we are in the class itself or a subclass.See the section on Abstract Classes in this article by Julien Danjou.


Answer URL
https://docs.python.org/3/library/abc.html
