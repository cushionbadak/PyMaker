Natural Text
I want to create a list which is the combination of incoming + outgoing.  E.g incoming[0][0] should be added to outgoing[0][0], incoming[0][1] should be added to outgoing[0][1] and so on.  A list called joint will be produced and have the exact same structure as incoming and outgoing (e.g a list of 5 lists of 10 elements).  The code which does this is below:This works fine.  But I would like it as a list comprehension.The above doesn't work, can someone explain why this failed and give an example of a correct list comprehension.
You want to use zip() here to combine your lists into pairs:The outer loop pairs up the rows from outgoing and incoming into pairs, so outgoing[0] together with incoming[0], outgoing[1] with incoming[1]`, etc.The inner loop then pairs up the paired rows, putting outgoing[0][0] and incoming[0][0] together into a tuple, followed by outgoing[0][1] and incoming[0][1], and so on. The inner loop produces one row of summed values.Demo:Your specific code doesn't work because you cannot use assignment statements (enhanced or otherwise) inside an expression. The += part of your code cannot be used like that.Another problem is that joint was just another reference to incoming, not a copy. You altered the same list via a different reference to it.
You need something likeYour attempted list comprehension doesn't work because it tries to assign to joint[x][y] before the structure of joint (i.e. list of lists) is set up. Your earlier code works because joint is incoming (note: not a copy, it is a reference to the same object), so the structure is there.
Firstly flatten both lists using a nested loop-comprehension and then use the built-in zip() function in-conjunction with  the map() and sum() functionsSo Try this:


Answer URL
