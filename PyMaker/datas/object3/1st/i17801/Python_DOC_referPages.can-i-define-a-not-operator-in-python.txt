Natural Text
I am trying to interface a C++ library that implements logical operators &&, ||, ! (unary operator not) to operate on custom selection classes. I'm a bit stuck because I can't find an unary 'not' operator in Python. Is it possible to override the built in 'not' operator which works on boolean in Python ? Is there another suitable operator, or do I need to define a function 'Not()' to implement this behavior?
You cannot override the boolean operators (and, or, and not) with special method hooks, because and and or operate lazily and a special method would require that you evaluate operands early instead.You can only influence how the object is evaluated to a boolean (using the __nonzero__ or __len__ methods, depending on whether you are implementing a numeric or container type; Python 3 renamed __nonzero__ to __bool__).You can hook into bitwise operators (&, | and ~), with the __and__, __or__, and __invert__ methods, however. This is probably what you are looking for instead. For & and | there are also inverse and in-place hooks available (__rand__, __ror__, __iand__ and __ior__).The result of the boolean hooks (__nonzero__, etc.) are cast to a boolean (True or False), but the bitwise operator hooks can return anything you like. ~custom_obj will evaluate to whatever type(custom_obj).__invert__(custom_obj) returns; custom_obj1 & custom_obj2 will return the result of type(custom_obj1).__and__(custom_obj1, custom_obj2), unless that method doesn't exist or returns NotImplemented, in which case type(custom_obj2).__rand__(custom_obj2, custom_obj1) is called instead.
not just acts on boolean values in python. If that is sufficient in your use case you can override the __nonzero__ method. Otherwise your stuck to implement your own obj.inverted() method.
Just have to use the matching Python operator.


Answer URL
