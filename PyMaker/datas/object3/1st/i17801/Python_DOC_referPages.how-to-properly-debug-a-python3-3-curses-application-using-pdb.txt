Natural Text
When using pdb to debug a curses application, the interactive debugger is useless, since curses messes up the terminal screen. Debugging post mortem works though, but that is a bit limited.So what we probably need is having the debugger work in a terminal separately from the debuggee (the application that is being debugged).Some alternatives which apply remote debugging (such as xpdb) appear either not to work with python 3.3 or give weird errors for other reasons.So how can I use pdb in a different terminal, or in another proper way?
Use some debugger's functionalities  for attach to a running process. For instance you can try:See how here Python Wiki DebuggingWithGdb.being  the pid of the process you want to debug. Also there is WinPdb that allows you to connect to a remote or local process. WinPdb is well documented and I think is your best option.
I've found that this bit of advice from the Python documentation helps:A common problem when debugging a curses application is to get your  terminal messed up when the application dies without restoring the  terminal to its previous state. In Python this commonly happens when  your code is buggy and raises an uncaught exception. Keys are no  longer echoed to the screen when you type them, for example, which  makes using the shell difficult. In Python you can avoid these  complications and make debugging much easier by importing the module  curses.wrapper. It supplies a wrapper() function that takes a  callable. It does the initializations described above, and also  initializes colors if color support is present. It then runs your  provided callable and finally deinitializes appropriately. The  callable is called inside a try-catch clause which catches exceptions,  performs curses deinitialization, and then passes the exception  upwards. Thus, your terminal wonâ€™t be left in a funny state on  exception.Please see here for info.


Answer URL
https://docs.python.org/3/howto/curses.html
