Natural Text
I was expecting 2 decimal precission, but:Why is Decimal not honoring the Context precission?
Quoting from documentation (Emphasis mine) - If value is a float, the binary floating point value is losslessly converted to its exact decimal equivalent. This conversion can often require 53 or more digits of precision. For example, Decimal(float('1.1')) converts to Decimal('1.100000000000000088817841970012523233890533447265625').The context precision does not affect how many digits are stored. That is determined exclusively by the number of digits in value. For example, Decimal('3.00000') records all five zeros even if the context precision is only three.The purpose of the context argument is determining what to do if value is a malformed string. If the context traps InvalidOperation, an exception is raised; otherwise, the constructor returns a new Decimal with the value of NaN.And from same documentation -The significance of a new Decimal is determined solely by the number of digits input. Context precision and rounding only come into play during arithmetic operations.Great examples given in the documentation -
From the documentation:If value is a float, the binary floating point value is losslessly  converted to its exact decimal equivalent. This conversion can often  require 53 or more digits of precision. For example,  Decimal(float('1.1')) converts to  Decimal('1.100000000000000088817841970012523233890533447265625').The context precision does not affect how many digits are stored. That  is determined exclusively by the number of digits in value....Context precision and rounding only come into play during arithmetic operations.Emphasis mine.You can truncate the value by using the Decimal.quantize method:or the Context.quantize:


Answer URL
https://docs.python.org/3/library/decimal.html
https://docs.python.org/3/library/decimal.html#decimal.Decimal.quantize
https://docs.python.org/3/library/decimal.html#decimal.Context.quantize
