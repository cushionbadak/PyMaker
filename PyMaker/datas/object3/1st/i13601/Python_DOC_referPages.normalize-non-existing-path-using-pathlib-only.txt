Natural Text
python has recently added the pathlib module (which i like a lot!).there is just one thing i'm struggling with: is it possible to normalize a path to a file or directory that does not exist? i can do that perfectly well with os.path.normpath. but wouldn't it be absurd to have to use something other than the library that should take care of path related stuff?the functionality i would like to have is this:but without having to resort to os.path and without having to type-cast to str and back to Path. also pth.resolve() does not work for non-existing files.is there a simple way to do that with just pathlib?
is it possible to normalize a path to a file or directory that does not exist?Starting from 3.6, it's the default behavior. See https://docs.python.org/3.6/library/pathlib.html#pathlib.Path.resolvePath.resolve(strict=False)  ...  If strict is False, the path is resolved as far as possible and any remainder is appended without checking whether it exists
As of Python 3.5: No, there's not. PEP 0428 states:Path resolutionThe resolve() method makes a path absolute, resolving  any symlink on the way (like the POSIX realpath() call). It is the  only operation which will remove " .. " path components. On Windows,  this method will also take care to return the canonical path (with the  right casing).Since resolve() is the only operation to remove the ".." components, and it fails when the file doesn't exist, there won't be a simple means using just pathlib.Also, the pathlib documentation gives a hint as to why:Spurious slashes and single dots are collapsed, but double dots ('..')  are not, since this would change the meaning of a path in the face of  symbolic links:PurePath('foo//bar') produces PurePosixPath('foo/bar')PurePath('foo/./bar') produces PurePosixPath('foo/bar')PurePath('foo/../bar') produces PurePosixPath('foo/../bar') (a na√Øve approach would make PurePosixPath('foo/../bar') equivalent to PurePosixPath('bar'), which is wrong if foo is a symbolic link to another directory)All that said, you could create a 0 byte file at the location of your path, and then it'd be possible to resolve the path (thus eliminating the ..). I'm not sure that's any simpler than your normpath approach, though.
If this fits you usecase(e.g. ifle's directory already exists) you might try to resolve path's parent and then re-append file name, e.g.:


Answer URL
https://docs.python.org/3/library/pathlib.html
