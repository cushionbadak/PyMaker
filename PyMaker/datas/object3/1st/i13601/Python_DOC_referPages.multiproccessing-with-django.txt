Natural Text
I have made a website using the python web framework django.  In my code, I have created a django form and displayed it on home.html.  The django form gets a string value from the user, and that string value is used as a parameter in 6 functions.  After the 6 functions have finished calculating there results, the results are displayed on home.html.  Everything works just as intended, but it is very slow.  The slow code looks something like this.To speed the process, I used multiprocessing.  This actually did speed up the process by a lot, and I know this because I am printing the data on the terminal as it is being calculated (the data prints much quicker).  For multiprocessing, I essentially removed the and replaced it with However, this method does not display any data on home.html.  To elaborate, when the user submits their string value, the result that is displayed is the word None.  This suggests to me that the lists img1, img2, ..., img6 are empty, but I know that the multiprocessing code to call the 6 functions did work, so I am confused. Additionally, the code on my home.html page looks something like thisCan someone please help me with this, I would immensely appreciate it.  Thank you. 
The reason you seem to not be getting data back is that you're spawning the child processes to perform the tasks, but the children do not inform the parent what results they've produced.You should consider this documentation sample about sharing state between processes and adapt it to share the results produced in the children instead.Quoting the code snippet from the documentation link above:Note that this is not really a django-specific detail. This is simply about inter-process communication and should be useful in general.UPDATEThis update is to account for some of your questions in the comments section below.I don't understand what the phrase that starts with if name == 'main'  is doing.The if __name__ == '__main__' is not an assignment, it's a comparison (notice the double == instead of a single =) used to protect against unintended code execution. Whenever a Python module is launched directly by you, its name will be '__main__' and will run as intended, but when it's imported from a different module (e.g. using pydoc3), then the __name__ will be different and the check will fail, preventing the program from actually running, which is what you'd want.It is assigning num as a double with an initial value of 0.0, and arr as an array with integer elements that are range(10).The documentation is your friend:multiprocessing.Arraymultiprocessing.ValueIt's there to answer these kinds of questions :)Also, how would I initiate an array with string 14 string elements?  Would this work arr = Array('string', len(14))?This won't work because thelen function expects a sequence or collection, whereas you're sending a scalar value (i.e. 14).I'd recommend you write a short test programs to see how they work. I think learning is more effective that way. For example:PS: I've removed my previous comments, which were the basis for this update.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Array
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Value
