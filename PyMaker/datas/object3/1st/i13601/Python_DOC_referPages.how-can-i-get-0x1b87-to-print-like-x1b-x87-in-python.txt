Natural Text
How can I get 0x1b87 to print like \x1b\x87 in Python?
I'm going to use format(..., 'x') for hexadecimal representation, avoiding the unnecessary slicing (hex(...)[2:]).Python 2Just decode the string (using the hex codec):or pack the integer with struct.pack (> for big-endian order, H for unsigned short - change format character to meet your requirements)Python 3bytes.fromhex does that:struct.pack is still an option, format strings are as for Python 2 (see the previous section):The hex codec is now one of the binary transforms, use codecs.decode:Python 3.2 and newerPython 3.2 introduced the cool int.to_bytes method:It will produce a fixed number of bytes (4 in this example) or the OverflowError "if the integer is not representable with the given number of bytes".There's a way to calculate the minimum number of bytes necessary to represent the integer:Also, consider specifying the signed argument thatdetermines whether two's complement  is used to represent the integer.  If signed is False and a negative  integer is given, an OverflowError is raised.



Answer URL
https://docs.python.org/3/library/stdtypes.html#bytes.fromhex
https://docs.python.org/3/library/struct.html#struct.pack
https://docs.python.org/3/library/struct.html#format-strings
https://docs.python.org/3/library/codecs.html#binary-transforms
https://docs.python.org/3/library/codecs.html#codecs.decode
https://docs.python.org/3/library/stdtypes.html#int.to_bytes
