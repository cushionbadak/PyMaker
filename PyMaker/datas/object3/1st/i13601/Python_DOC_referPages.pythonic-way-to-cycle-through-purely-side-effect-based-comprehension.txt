Natural Text
What is the most pythonic way to execute a full generator comprehension where you don't care about the return values and instead the operations are purely side-effect-based?An example would be splitting a list based on a predicate value as discussed here.  It's natural to think of writing a generator comprehensionIn this case the best solution I can come up with is to use anyHowever that's not immediately obvious what's happening for someone who hasn't seen this pattern.  Is there a better way to cycle through that full comprehension without holding all the return values in memory?
You do so by not using a generator expression.Just write a proper loop:or perhaps:Using a generator expression here is pointless if you are going to execute the generator immediately anyway. Why produce an object plus a sequence of None return values when all you wanted was to append values to two other lists?Using an explicit loop is both more comprehensible for future maintainers of the code (including you) and more efficient.
itertools has this consume recipein your case n is None, so:Which is interesting, but also a lot of machinery for a simple taskMost people would just use a for loop
As others have said, don't use comprehensions just for side-effects.Here's a nice way to do what you're actually trying to do using the partition() recipe from itertools:Output:
There's nothing non-pythonic in writing things on many lines and make use of if-statements:If you want a one-liner you could do so by putting the loop on one line anyway:If you want it in an expression (which still beats me why you want unless you have a value you want to get out of it) you could use list comprehension to force looping:Which solution do you think best shows what you're doing? I'd say the first solution. To be pythonic you should probably consider the zen of python, especially:Readability counts.If the implementation is hard to explain, it's a bad idea.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/whatsnew/3.0.html#views-and-iterators-instead-of-lists
