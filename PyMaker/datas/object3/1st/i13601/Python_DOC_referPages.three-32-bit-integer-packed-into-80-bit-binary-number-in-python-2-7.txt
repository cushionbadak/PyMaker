Natural Text
I have some problem with 80 bits manipulation, which can be easily figured out.But I am missing basic stuff. These my code snippetexpected output:Problem here is list contains 3 - 32 bit number which leads to 96 bits         e.g.[32bitNumber1, 32bitNumber2, 32bitNumber3]. I want only 80 bits as a bin of long value. I researched, I got bit array, but I don't to do it using in bit array, I want to do in pythonic way  How could I achieve this. Please help me in sorting out issue. Thanks in advance for assistance.
As Kevin said, what you are trying to do is impossible for any 3 32 bit ints. If the leftmost 16 binary digits will always be 0 as your example has, then the expected_output will be number1*2^64+number2*2^32+number3. To make it cut off the first 16 bits of number 1, so the output is guaranteed to fit in 80 bits, you would want to mod the above answer by 2^80.for i, value in enumerate(list_of_inputs[::-1]):     output+=value*(2**(32*i))output=output%(2**80)The first line iterates through both the elements of the array backward, as well as their index (where they are in the array). The reason to go through backward is so the 3rd element is the smallest as you seem to want. It then sets the output to the values bit shifted into place. The last line gets rid of the leading 16 bits, so that 80 remain.
With some modifications to make it actually run at all, your code works fine for me:
In python >= 3.2, you can make use of int.from_bytes and int.to_bytes:However, I'd query why you need to put this into an 80-bit integer in the first place - why not just a sequence of bytes:


Answer URL
https://docs.python.org/3/library/stdtypes.html#int.from_bytes
https://docs.python.org/3/library/stdtypes.html#int.to_bytes
