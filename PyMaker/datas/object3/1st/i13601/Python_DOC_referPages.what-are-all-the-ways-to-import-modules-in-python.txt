Natural Text
I've done some research, and I came across the following article: http://effbot.org/zone/import-confusion.htm. While this seems to be a great guide, it was written in 1999, a while back. I'm am using Python 3.4.3, so I am thinking that some things have changed, which worries me, because I don't want to learn what is not applicable. Therefore, in Python 3, what are all of the ways to import packages and modules, in detail? Which ways are the most common and should be used above others?
The only ways that matter for ordinary usage are the first three ways listed on that page:import modulefrom module import this, that, totherfrom module import *These haven't changed in Python 3.  (Some of the details about where Python looks for the module.py file to load module have been tweaked, but the behavior of the import itself still works as described on the page you linked.)One thing has been added, before Python 3 but since that article.  That is explicit relative imports.  These let you do things like from ..module import blah.  This kind of import can only be used from inside a package; it lets modules in a package refer to other modules in the same package in a way that is relative to the package (i.e., without having to specify how to import the top-level package).  You can read the details in PEP 328.  Even this, though, is basically just a new variation on the from module import blah style syntax mentioned on the page you linked to.__import__ also still works in Python 3.  This is an internal function that you only would need to use if doing something rather unusual.  The same applies to various functions in the importlib module (and the deprecated imp module).  The exact level of wizardliness of these importing functions varies from one to another, but for ordinary usage of "I just want to import this module and use it", you essentially never need to use them.  They're only needed if you want to do something like dynamically import a module whose name isn't known until runtime.
The Zen of Python gives you some hints:So given the simple, obvious method is: import module_name and it preserves namespaces I would suggest that while there are several import methods as you can see from the python3 manual entry and you can extend them by overriding the __import__() method or by rolling your own I would say stick with it until you have a good reason not to.The fact that__import__() is surrounded by double underscores is also a hint to leave it alone.If you are looking to understand the design decisions behind the import mechanisms then start with the manual then follow up into the PEPs 302 & 420 are good starting points.
We can import modules in Python using the following waysimport modulefrom module import functionfrom module import *Although using from module import *   is not a good practice, because of readability: Other programmer cannot understand what all are actually used in the current module. Memory overload: All are loaded in to memory. Best practices for using import in a module.
I think import as tuple would be much better for readability and Maximum Line Length(pep8)The import statement has two problems:Long import statements can be difficult to write, requiring variouscontortions to fit Pythonic style guidelines.Imports can be ambiguous in the face of packages; within a package,it's not clear whether import foo refers to a module within the package or some module outside the package.golang language have the same thing for thatso would more prefer import kinda thisinstead of thishttps://legacy.python.org/dev/peps/pep-0328/


Answer URL
https://docs.python.org/3/reference/import.html
