Natural Text
Am I right in my understanding that the if statement will only 'execute' if it evaluates True?If so, what is the purpose of types returning True?What is the logic behind this rule? Can someone give me an example of where it would be useful?example:Returns:
From docs :Any object can be tested for truth value, for use in an if or while  condition or as operand of the Boolean operations below. The following  values are considered false:NoneFalsezero of any numeric type, for example, 0, 0L, 0.0, 0j.any empty sequence, for example, '', (), [].any empty mapping, for example, {}.instances of user-defined classes, if the class defines a  __nonzero__() or __len__() method, when that method returns the integer zero or bool value False. [1]> All other values are considered true â€” so objects of many types are  always true.Operations and built-in functions that have a Boolean result always  return 0 or False for false and 1 or True for true, unless otherwise  stated. (Important exception: the Boolean operations or and and always  return one of their operands.)Since all types are derived from object, __nonzero__ doesn't return False or integer zero and they don't have __len__ method, it is considered as True.There is another interesting thing:__nonzero__ of float is <slot wrapper '__nonzero__' of 'float' objects>Here is some info about that: What is a wrapper_descriptor, and why is Foo.__init__() one in this case?
All objects (including types, which are instances of type) are inherently true because they represent the presence of a value of the underlying type, as opposed to None which represents the absence of a value of any type. (It's not useful for None to evaluate to true just because it is an instance of NoneType.)Some instances of certain types (empty strings and the empty instances of container types, to name a few) evaluate to False instead because it is convenient to consider them so.In your own classes, you can override the truth value of a particular instance by overriding either __nonzero__ or __len__ to return 0 or False for a particular instance.
The  basic question is:What is the logic behind this rule?This rule is there to define how Python (should) operate: whenever there is an if-statement with an value other as True or False the results should be clear. And the same for all implementations!It does not imply it's a good style. Nor that one should use itPersonal, I have no clue what will be printed. And I will not look it up, as it is bad anyhow. I always tell my class: "Even when the compiler understand it, your college will not"


Answer URL
https://docs.python.org/3/library/stdtypes.html#truth-value-testing
