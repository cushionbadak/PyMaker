Natural Text
I know that this is a rather silly question and there are similar ones already answered, but they don't quite fit, so...How can I perform the same operation on multiple variables in an efficient way, while "keeping" the individual variables?example:What I want as the output in this scenario is 6, 8, 10. It is rather important that I can still use changed variables. Thank you very much for your answers!
You can use numpy or python lambda function combined with map to do the same.Using numpy:Using lambda:
You may want to look into Python's map function. The following link may be helpful:https://www.w3schools.com/python/ref_func_map.asp
Map is your friend here, but you also need to use 'implicit tuple unpacking':This way you can get the changed values back without modifying the original values
You can store them in a container, and then use map to apply one function on every element of the containerFor example with a list:This can also be done with lambda functions to avoid defining a new function every timeIf you have a really large set of variables and you want to retrieve them automatically without having to type each one of them like in a,b,c = container,  you can use dict to store them with names or exec function to assign them dynamically.map documentation: https://docs.python.org/3/library/functions.html#maplambda documentation: https://docs.python.org/3/reference/expressions.html#grammar-token-lambda-expr
You can use the following generator expression:
You can use map to apply a function to every element of a list with a lambda function to perform your operation. Then use list unpacking to overwrite values in orginal variables.map returns a generator, that's why we need to explicit create the list to unpack.


Answer URL
https://docs.python.org/3/library/functions.html#map
https://docs.python.org/3/reference/expressions.html#grammar-token-lambda-expr_
