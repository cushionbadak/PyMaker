Natural Text
The function histogram returns a dictionary where the keys are letters and the values are the number of times that letter appears in the argument passed to it.I would like the function has_duplicates to use histogram.  Then search the dictionary that is returned to check for any values that are greater than 1, returning either True or False.I am having difficulty accessing the values within the dictionary that's been returned by histogram.
You are not assigning histogram(t) to anything in your has_duplicates function.You don't need to reinvent a wheel: collections.Counter will do it for you.So... something like this?If you meant a single True if any duplicates are detected,
like so:
Assuming its python 3Result:{'d': 4, 'b': 3, 'c': 2}For Python 2, use iteritems()
If you're only interested in whether or not there are duplicates, there is no reason to loop over the entire dictionary when you've found a duplicate earlier:collections.Counter however is useful for counting the characters in histogram().
You find good answers to your question in the posts, above.But here's another approach with little code that you might think about, if your goal is just to check for any duplicate characters (or objects):set(t) converts the string in t into a set of chars. During conversion, all duplicates are automatically removed, because sets can hold every object only once. Comparing the length of the initial string with the number of items in the created set will return True if there are no duplicates, but False if at least one duplicate has been removed during set creation. That works with other sequences as well.Note: Negative comparison '!=' was used to make the function a positive check for dupes, instead of a negative check for no dupes.Michael


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
