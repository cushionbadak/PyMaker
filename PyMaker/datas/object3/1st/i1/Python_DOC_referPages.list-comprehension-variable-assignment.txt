Natural Text
This question already has an answer here:Get the cartesian product of a series of lists?                    11 answers                I am attempting to create a 4d array and assign variables to each of the cells.Typically I would use four "for loops" but this is very messy and takes up a lot of space.What i'm currently doing:I've tried using list comprehension but this only creates the list and does not assign variables to each cell.Are there space-efficient ways to run through multiple for loops and assign variables with only a few lines of code?
Assuming you've already created an empty (numpy?) array, you can use itertools.product to fill it with values:If not all of the array's dimensions are equal, you can list them individually:
You may however be wondering how itertools.product does the trick. Or maybe you want to encode a different transformation in your recursive expansion. Below, I'll share one possible solution using Python's generators -Because product accepts a a list of iterables, any iterable input can be used in the product. They can even be mixed as demonstrated here -We could make a program foo that provides the output posted in your question -Or use destructuring assignment to create bindings for individual elements of the product. In your program, simply replace print with your real function -Because product is defined as a generator, we are afforded much flexibility even when writing more complex programs. Consider this program that finds right triangles made up whole numbers, a Pythagorean triple. Also note that product allows you to repeat an iterable as input as see in product (r, r, r) belowFor additional explanation and a way to see how to do this without using generators, view this answer.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
