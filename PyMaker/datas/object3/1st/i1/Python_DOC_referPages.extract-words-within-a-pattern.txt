Natural Text
I have the following stringI want to extract only the first words after the open bracket. My output should be - data I tried the following.But this pattern matching is not working. Any help please
Analysis of regex here: https://regex101.com/r/kAXpNA/1.
Change your code to:Or if you want to have all first words after a (, write:
A couple issues with your current pattern:The single quotes in your pattern are literal single quote chars that it's searching your string for. Your data doesn't have any single quotes, so it's not matching.You haven't escaped the parenthesis at the beginning. ( and ) are special chars in regexes that are used to create regex groups. To literally match a parenthesis you need to do \(.Also .* matches any char, and the regex will end up trying to match as many characters as it can, meaning it will span multiple pairs in your string. (as something like "(net, asset), (amount, asset), (connect," does in fact satisfy that pattern) If you know the elements you're looking for instead are all word chars, as they are in your example, you could try doing \w* instead.Finally search only looks for the first match that it encounters. You instead want to use findall to get every instance of your pattern in the string. So the result would be:
Your pattern tries to match single quotes which are not present in the example data and you have to escape the opening parenthesis to match it literally.The .* is greedy which will first match until the end of the string and then will backtrack matching the last comma to fulfill the whole pattern. You might turn that into a lazy quantifier .+? and use a plus to match it 1+ times.Another way to get your matches if you want to match more than only word characters and you don't want to match an opening parenthesis of a comma is to  use a negated character class:Explanation\( Match ( literally( Start capturing group[^,(]+ Negated character class, match 1+ times not , or () Close capturing groupFor exampleRegex demo | Python demo


Answer URL
https://docs.python.org/3/howto/regex.html#grouping
https://docs.python.org/3/library/re.html#re.search
https://docs.python.org/3/library/re.html#re.findall
