Natural Text
I have a dictionary such as below:I am trying to calculate total of each food item and it is not working as expected.For eg: I would like to count total of Carrot, total of Apples and so on.The above code is giving me following error:How to sum up total of each item?
Simply dofrom collections import defaultdictfood = defaultdict(int)  <-- default value of 0 to every non existent key..and your code should work :)PS. You get the error because you are trying to add values to uninitialized keys... Don't assume that non existent keys start from 0... 
Your food dictionary is empty and has no keys at the start; you can't just sum up a value to something that isn't there yet.Instead of +=, get the current value or a default, using dict.get() again:You don't really need to use b.get() here, as you already have the values of b in the variable j:You could also use a collections.defaultdict() object to make keys 'automatically' exist when you try to access them, with a default value:and in the inner loop then use food[i] += j.I strongly recommend you use better names for your variables. If you iterate over dict.values() rather than dict.items(), you can look at the values only when you don't need the keys (like for the outer for loop):Another option is to use a dedicated counting and summing dictionary subclass, called collections.Counter(). This class directly supports summing your groceries in a single line:map(Counter, ...) creates Counter objects for each of your input dictionaries, and sum() adds up all those objects (the extra Counter() argument 'primes' the function to use an empty Counter() as a starting value rather than an integer 0).Demo of the  latter:A Counter is still a dictionary, just one with extra functionality. You can always go back to a dictionary by passing the Counter to dict():
You get the error, because in the beginning the keys, i.e. 'Apples', 'Tomatoes', ..., do not exist in food. You can correct this with a try-except block:Also, you can get rid of the b.get(i,0) statement, because you already iterate through b and only get values (j) that actually exist in b.


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/collections.html#collections.Counter
