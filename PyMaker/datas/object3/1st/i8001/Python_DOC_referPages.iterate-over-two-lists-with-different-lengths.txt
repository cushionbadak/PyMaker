Natural Text
I have 2 lists of numbers that can be different lengths, for example:I need to iterate over these with the function:but can't figure out how to deal with the range as the shorter list will become "out of range" if I use the max length. Any thoughts on how to overcome this or how to change my function?
itertools.zip_longest(*iterables, fillvalue=None) will do the job for you:If the iterables are of uneven length, missing values are filled-in with fillvalue.For your example lists, this will yield:If you only want to use as many values as are present in both lists, use the built-in zip():The iterator stops when the shortest input iterable is exhausted.
You can process adjacent items from the lists by using itertools.zip_longest() (itertools.izip_longest() if using Python 2) to produce a sequence of paired items. Pairs will be padded with None for lists of mismatched length.Then you can simplify the code in the body of the loop by flattening the sequence of paired items and filtering out the None values, and in your case, 0 values. That's what the generator expression below does.Then it's just a matter of appending or inserting values into final_list if greater or less than zero respectively.In code:Notice that this will filter out any zero values that might be present in the lists. If you want to keep these then modify the generator expression to filter out the None values only:and modify the body of the loop to insert the 0 wherever it should go in final_list.
In your case you should probably just check if the index is longer than the sequence:Or use itertools.zip_longest (or itertools.izip_longest on python-2.x) and check for some fillvalue (i.e. None):However your approach skips items when they are == 0, that's probably an oversight but you should check that it's working correct with zeros.Also you use insert a lot. The last elifs could instead use final_list.append(item1) (or item2), like I did in the second example.In this case the handling for item1 and item2 is identical, so you could use another loop:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
