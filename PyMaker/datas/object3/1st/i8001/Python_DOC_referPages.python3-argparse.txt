Natural Text
I have been struggling with this for a few days now and still dont have a good solution. Instead of providing code this time which with this problem has lately been leading to unhelpful tangents, let me just give you an idea of exactly what I am trying to accomplish and perhaps this will streamline the solution.All I am trying to do run a python program while inputting a few variables to control what the program does. Allow me to give a specific example.Example Syntax StructureGeneric Syntax ExampleAnother ExampleSo to expand on these examples. The first program "parrot" has an add function. When the program is run and the add function is used from the command line, the program expects three variables (Name, color, weight). In the second example, the program named "datamine" has a function named "search" that expects a single string (the search term). The idea is, the program (datamine) for example will have several functions that could be used. Perhaps "add", "search", "delete" are all examples and each will have different expected variables. Using datamine help would list out each function and the required and or optional components.Using argparse, I have not been able to figure out a working implementation of this yet. From past experience, I think the solution will involved using custom actions. Can anyone please help with some example code? I am using Python 3 by the way.Thanks for the help! 
Use subparsers. The docs give a good example of how to use set_defaults to specify the function that should be called for each subparser:One particularly effective way of handling sub-commands is to combine the use of the add_subparsers() method with calls to set_defaults() so that each subparser knows which Python function it should execute. In your examples, parrot and datamine would be separate parsers in separate modules, and add and search would be subparsers under them respectively. For example, the datamine module would look something like this:If this file is executable in your shell as datamine, you can do:
Without optional flags you don't need anything fancy - just look at sys.argv directly:sample runs
Fully functional extrapolation of code from your parrot example using subparsers.  Data set (created by this code) and usage examples at the bottom.  Beware, example set does not consist strictly of parrotsDataset and usage examples:


Answer URL
https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_subparsers
https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_subparsers
