Natural Text
Currently I use for logging a custom logging system that works as follow:I have a Log class that ressemble the following:I created a function decorator that perform a try/except on the function call, and add a message either to .mssg or .err on the Log object accordingly.So usually a script is a class that is composed of multiple methods that are run sequentially.I hence run those methods (decorated such as mentionned above) , and lastly I  upload the Log object into a mysql db.This works quite fine and alright. But now I want to modify those items so that they integrate with the "official" logging module of python.What I dont like about that module is that it is not possible to "save" the messages onto 1 log object in order to upload/save to log only at the end of the run. Rather each logging call will write/send the message to a file etc. - which create lots of performances issues sometimes. I could usehandlers.MemoryHandler , but it still doesn't seems to perform as my original system: it is said to collect messages and flush them to another handler periodically - which is not what i want: I want to collect the messages in memory and to flush them on request with an explicit function.Anyone has any suggestions?
Here is my idea. Use a handler to capture the log in a StringIO. Then you can grab the StringIO whenever you want. Since there was perhaps some confusion in the discussion thread - StringIO is a "file-like" interface for strings, there isn't ever an actual file involved. And then something like:And when you want the log information:
At program start (in the main), you can:instanciate your custom logger => global variable/singleton.register a function at program end which will flush your logger.Run your decorated functions. To register a function you can use atexit.register function. See the page Exit handlers in the doc. EDITThe idea above can be simplified.To delay the logging, you can use the standard MemoryHandler handler, described in the page logging.handlers â€” Logging handlersTake a look at this GitHub project: https://github.com/tantale/python-ini-cfg-demoAnd replace the INI file by this:To log to a database table, just replace the alternate handler by your own database handler.There is some blog/SO questions about that:You can look at Logging Exceptions To Your SQLAlchemy Database to create a SQLAlchemyHandlerSee Store Django log to database if you are using DJango.EDIT2Note: ORM generally support "Eager loading", for instance with SqlAlchemy


Answer URL
https://docs.python.org/3/library/atexit.html?highlight=exit#module-atexit
https://docs.python.org/3/library/logging.handlers.html#memoryhandler
https://docs.python.org/3/library/logging.html#logrecord-objects
https://docs.python.org/3/library/logging.html#logrecord-objects
