Natural Text
Python Tutorial 4.7.1. Default Argument Values states the following:Important warning: The default value is evaluated only once. This makes a difference  when the default is a mutable object such as a list, dictionary, or instances of most  classes. For example, the following function accumulates the arguments passed to it on  subsequent calls:This will printI don't quite understand the meaning of "evaluated only once" in terms of memory management. Apparently, the default value of the function is evaluated once when the function is first called and stored in a separate memory address even after the function has ended. (according to my understanding, after the function ended, all local variables should be freed?)Am I correct?
In Python, functions are objects too, and the defaults are stored with the function object. Defaults are not locals; it is just that when the function is called, the arguments are bound to a default when not given an explicit value.When Python encounters a def <functionname>(<arguments>): statement, it creates a function object for you there and then; this is 'definition time'; the function is not called but merely created. It is then that defaults are evaluated and stored, in an attribute on the function object.Then when you call the function, the defaults have already been created and are used when you didn't provide a more concrete value for the argument. Because the defaults are stored with the function object, you get to see changes to mutable objects between function calls.The locals are still cleared up of course, but as they are references (all identifiers in Python are), the objects they were bound to are only cleared up if nothing else is referencing them anymore either.You can take a look a the defaults of any function object:The foo() function has a __defaults__ attribute, a tuple of default values to use when no values for the arguments have been passed in. You can see the mutable list change as the function is called, and because the function returns the eggs list, you can also see that it is the exact same object as the second value in that tuple.
The function that you have defined f is an object in its own regard.  When you define defaults, these defaults are bound to the function that you have created.You can see this in action:edit, further, you can see that the list container does not change either:On each subsequent call, the default list ("L") of your f function will have your a value appended.
A function is just an object in python, that is created using the def syntax. Default values are stored within the function object when the function is defined, and they are not re-evaluated later.This is sometimes used to create function variables that persist to subsequent invocations. You can use the __defaults__ methods to check what the default values are for your function.A common way to initialize new objects instead of reusing the same is:You can check this page for more details.
Sorry this answer was meant for a different question, but I'll leave it here as a reference if anyone who wants to look at it.  Define once means that at the first point when the code is executed, the default variable gets assigned to an object which is retained within the function object itself.    Notice only 1 object address gets printed, the default list object is used.  Notice 2 different object addresses are printed, when you perform L=[] within the function, you are binding L to a different list object, therefore the default list object does not get change.  The function above is basically the same as the one below except it uses the None object instead of a empty list object.  


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#default-argument-values
