Natural Text
I am using Python 3.4.I have started a project to download the UK Met Office Forecast data (in JSON format) and use the information as a weather compensator for my home heating system.  I have succeeded in downloading the JSON datafile from the MET Office, and now I want to extract the info I need.  I can do this by converting the file to a string and using .find and .int methods to extract the data, but this seems crude (but effective).  As JSON is said to be a well-used data interchange format, there must be a better way to do this.  I have found things like json.load and json.loads, and also json.JSONDecoder.decode but I haven't had any success in using these, and I really have little idea of what I am doing!My code is:When using json.loads(FCDataStr) I get the following error message:"ValueError: Expecting value: line 1 column 1 (char 0)"By deleting the b' at the start and the ' at the end, this error goes away (see below). Printing the JSON file in string format, using print(FCDataStr) gives:The result of using:gives a very similar result to the original FCDataStr file.  How do I proceed to extract the data (such as temperature, wind speed etc for each 3 hourly forecast) from the file?    
This is the problem:When you call str on a bytes object, what you get is the string representation of a bytes object—in quotes, with a b prefix, and with special characters backslash-escaped.If you wanted to decode the binary data to text, you have to do that with the decode method:(I'm guessing UTF-8 because JSON is always supposed to be in UTF-8 unless otherwise specified.)In more detail:urllib.request.urlopen returns an http.client.HTTPResponse, which is a binary file-like object, (which implements io.RawIOBase).You can't pass that to json.load because it wants a text-file-like object—something with a read method that returns str, not bytes. You could wrap your HTTPResponse in an io.BufferedReader, then wrap than in an io.TextIOBase (with encoding='utf-8'), then pass that to json.load, but that's probably more work than you want to do.So, the simplest thing to do is exactly what you were trying to do, just using decode instead of str:data_bytes = response.read()   data_str = data_bytes.decode('utf-8')   data_dict = json.loads(data_str) Then, don't try to access the data in data_str—that's just a string, representing the JSON encoding of your data; data_dict is the actual data. For example, to find the dataDate of the DV of the SiteRep, you just do this:That will get you the string '2014-07-31T14:00:00Z'. You'll still probably want to convert to that to a datetime.datetime object (because JSON only understands a few basic types: strings, numbers, lists, and dicts). But it's still a lot better than trying to pick it out of data_str by find-ing or guessing at the offsets.My guess is that you've found some sample code written for Python 2.x, where you can convert between byte strings and Unicode strings just by calling the appropriate constructors, without specifying an encoding, which would default to sys.getdefaultencoding(), and often (at least on Mac or most modern Linux distros) that's UTF-8, so it just happened to work despite being wrong. In which case you may want to find some better sample code to learn from…
For other clueless people who may want to use the UK Met Office 3-hourly forecast data feed, below is the solution that I am using:I hope this helps somebody!
I been at parsing the Met Office datapoint output.Thanks to the response above I have something that works for me.I am writing the data I am interested in to a CSV file:


Answer URL
https://docs.python.org/3/library/stdtypes.html#bytes.decode
https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen
https://docs.python.org/3/library/http.client.html#httpresponse-objects
https://docs.python.org/3/library/io.html#io.RawIOBase
https://docs.python.org/3/library/json.html#json.load
