Natural Text
PYTHON: I just looked at heapq source code and can anyone explain what the line 6 do? What is >> operator and how it works?
The >> operator means bitwise right shift. Shifting (nonnegative integers) right by one bit is equivalent to dividing by two and rounding down. In other words, spam >> 1 and spam // 2 are the same.So, why use >>? Some CPUs—especially older ones—can do bit-shifting orders of magnitude faster than division. Most modern C compilers will optimize n / 2 into n >> 1 whenever appropriate, but older ones wouldn't. Of course that makes almost no difference in Python, but most traditional heap implementations—the kinds you'll see in data structures textbooks—will use >>. On top of that, to some people (the kind of people who learned from those textbooks), >> in an algorithm is a good signal that it's logarithmic.so this parentpos = (pos-1) >> 1 line is trying to return the index of its parent. But why minus 1? Say the current index is 4 which is the third level of the tree, and then you minus 1 get 3. And the binary number is 11, if you shift one right then it will be index 1, and its not the parent index. Read the top of the documentation:This implementation uses arrays for which heap[k] <= heap[2*k+1] and heap[k] <= heap[2*k+2] for all k…So, for k=1, the children are 2*1+1 = 3 and 2*1+2 = 4. As the next paragraph notes, this is potentially confusing:The API below differs from textbook heap algorithms in two aspects: (a) We use zero-based indexing. This makes the relationship between the index for a node and the indexes for its children slightly less obvious, but is more suitable since Python uses zero-based indexing.So, you expect that the children of 1 are 2 and 3, but if you think of it in 0-based terms, you should be expecting that the children of 0 are 1 and 2, and the children of 1 are 3 and 4.
The >> is the right-shift operator.  It drop the rightmost bit which is the same as dividing by two and ignoring the remainder.  So that line could have been written parentpos = (pos - 1)  // 2.Python's heaps are zero-based, so a node i has children at 2 * i + 1 and 2 * i + 2.   And its parent is located at (i - 1) // 2.What siftdown does is move a value upward (by swapping it with its parent) until the parent is smaller than the child.


Answer URL
https://docs.python.org/3/library/heapq.html
