Natural Text
Folks,I'm scratching my head on a python logging config that I can't get right.Let's say I have the following package installed:As the script can be used interactively or run from a crontab, I have the following requirements:no print statements, everything goes through logging;log using a timedRotatingFileHandler, always at DEBUG level;log using a mailinglogger.SummarisingLogger, always at INFO level;log to console, with level set by default to INFO or overridden through a command-line option.Problem is, I can change the log level through the command-line and the console log level is changed accordingly, but the other handlers are also changed, which I don't want... :-/In a logging config file, I'm not sure I understand the precedence between the root logger's level, other loggers' level and handlers' level settings.Here is some sample code. Any clues will be appreciated :-)UPDATE 1In the meantime, I discovered this answer and successfully modified my code this way:Now, I'll try to translate this in a logging.config file...UPDATE 2Here is the best logging config and code combination I found.In the mypackage.logging.conf file, the "mypackage" logger is:set up only with the file and email handlers;its propagate is set to false;its level is set to DEBUG;while the file and email handlers are respectively set to INFO and DEBUG.In the script:the logging config is read;a console_formatter is (re-)created;a console handler is created with the log level from the command-line option, then added to the "mypackage" logger.Things would be simpler if the handlers were "addressable" by name when loaded from a config file.Then, we could have the mypackage console handler set up in the config file and its log level changed in the code like this:There would no need to re-create a formatter either...(last update: yes, I'm aware of https://docs.python.org/3/library/logging.config.html#incremental-configuration, but in this case, I'm stuck with Python 2.6... :-)
An approach to update your handler:My logging.cfg is pretty similar than your except the fact that the logger name si set in a constant module (a can do module rename without breaking the logging configuration)To update from command line, you must have a mapping between your opts value and logging.Handler sub class name. 
Use dictConfig.  Here is an example of logging to multiple files with separate handles in dictConfig.  This isn't exactly what you are looking for, but you could modify this example and simply change the level of each handler that you are looking to use. 


Answer URL
https://docs.python.org/3/library/logging.config.html#incremental-configuration
