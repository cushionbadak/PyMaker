Natural Text
Can I use lambda function to loop over a list of class objects and change value of an attribute (for all objects or for the one that meet a certain condition)?
Unfortunately, that’s not possible since the body of a lambda only allows for simple expressions while a student.age += 3 is a statement. So you can’t use a lambda there. You could however still use the map solution:Note that students2 will contain the same students as students though, so you don’t really need to capture the output (or return something from incrementAge). Also note that in Python 3, map returns a generator which you need to iterate on first. You can call list() on it to do that: list(map(…)).Finally, a better solution for this would be to use a simple loop. That way, you don’t have overhead of needing a function or create a duplicate students list, and you would also make the intention very clear:
Lambda functions can only contain expressions, not statements.  Assignment in Python is a statement.  Lambdas cannot do assignments.  Additionally, assignment statements do not evaluate to their values, so your map would not produce a list of students.You want this:This does not give you a new list, it modifies the old list, but your old list would be modified anyway, you aren't doing anything to produce new Students.
You can use setattr, which will apply the change to the objects. A big plus is that you can continue using the same list.From the docs:The function assigns the value to the attribute, provided the object allows it. For example, setattr(x, 'foobar', 123) is equivalent to x.foobar = 123.The equivalency of which is:If you really want a new list:The above approach doesn't return a new list; instead returning None (the return value of setattr). Adding an or comparison with the object you want in the array (in this case s) will amend that, though.The comparison is equivalent to None or s which will always yield the latter. Also note that the new list is identical to the old one.
Using a simple for-loop to retrieve the students to update the age for each is good enough like others said, but if you still want to use a lambda to update the values, you may need to leverage the exec() function:Output:In this case, what actually does the updating is the exec(), and the map() just yields None. So the returned result makes no sense and I put a _ to clarify this. A more concise form would be this:Besides, if only considering what you want to do, you don't need to use a map() at all (probably more confusing though):Furthermore, a lambda can be discarded either:As you can see, no "trick" codes above seem more concise than what other answers post:So maybe the so-called "one-liner" is useful just when it comes to having fun... :)  
Q:  "Can I use lambda function to loop over a list of class objects and change value of an attribute"A: Yes....but you shouldn't.  It's poor coding style, inefficient, and only appropriate for things like code golfYou should write it like the other two answers have suggested....but if you really wanted to...Prints: ...or even:[Same output]


Answer URL
