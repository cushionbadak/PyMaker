Natural Text
In a python unit test (actually Django), what is the correct assert statement that will tell me if my test result contains a string of my choosing?I want to make sure that my result contains at least the json object (or string) that I specified as the second argument above
You can modify it to work with json.Use self.assertContains only for HttpResponse objects. For other objects, use self.assertIn.
To assert if a string is or is not a substring of another, you should use assertIn and assertNotIn:These are new since Python 2.7 and Python 3.1
You can write assertion about expected part of string in another string with a simple assertTrue + in python keyword :
Build a JSON object using json.dumps().Then compare them using assertEqual(result, your_json_dict)
As mentioned by Ed I, assertIn is probably the simplest answer to finding one string in another. However, the question states:I want to make sure that my result contains at least the json object (or string) that I specified as the second argument above,i.e., {"car" : ["toyota","honda"]}Therefore I would use multiple assertions so that helpful messages are received on failure - tests will have to be understood and maintained in the future, potentially by someone that didn't write them originally. Therefore assuming we're inside a django.test.TestCase:Which gives helpful messages as follows:
I found myself in a similar problem and I used the attribute rendered_content, so I wroteassertTrue('string' in response.rendered_content) and similarlyassertFalse('string' in response.rendered_content) if I want to test that a string is not renderedBut it also worked the early suggested method,AssertContains(response, 'html string as rendered')So I'd say that the first one is more straightforward.I hope it will help.


Answer URL
https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIn
