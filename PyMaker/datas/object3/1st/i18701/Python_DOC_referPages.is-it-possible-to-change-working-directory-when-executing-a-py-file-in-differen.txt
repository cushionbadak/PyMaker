Natural Text
For example,here is my directory tree:test.py:another.py:after running test.py ,I expected to have a folder whatever in subdir,but what I got is: The reason is quite obvious:working directory hadn't been changed to subdir.So is it possible to change working directory when executing a .py file in different folder? Note:any function is allowed, os.system is just an exampleos.system('cd XXX') and os.chdir not allowedEDIT:Finally I decide to use context manager,following an answer inhttps://stackoverflow.com/posts/17589236/edit
Ummm, this is the function to do so: os.chdir(path).Maybe it's a little bit confusing or incosistent because function to obtain current working directory is called os.getcwd() and has no counterpart setter. Nevertheless, doc says clearly chdir changes CWD.In python 3.x path can be also a valid file descriptor, while in 2.x branch fchdir(fd) must be used.
You could indeed use os.chdir but relying on assumptions about what the current working directory actually is is looking for troubles, and in your case this holds for the os.system call in test.py as well - try executing test.py from anywhere else and you'll find out why.The safe approach is to derive the current module / script's absolute path from the __file__ attribute and build absolute path for both the call to os.system in test.py and the call to os.mkdir in another.pyTo get the absolute path to the current module or script's directory, just use:
Pass the cwd parameter to subprocess.call().os.system() is obsolete; the subprocess module is much more powerful.


Answer URL
