Natural Text
I have written the following script to concatenate all the files in the directory into one single file. Can this be optimized, in terms of idiomatic pythontime Here is the snippet:
Use shutil.copyfileobj to copy data:shutil reads from the readfile object in chunks, writing them to the outfile fileobject directly. Do not use readline() or a iteration buffer, since you do not need the overhead of finding line endings.Use the same mode for both reading and writing; this is especially important when using Python 3; I've used binary mode for both here. 
Using Python 2.7, I did some "benchmark" testing ofvsI iterated over 20 .txt files ranging in size from 63 MB to 313 MB with a joint file size of ~ 2.6 GB. In both methods, normal read mode performed better than binary read mode and shutil.copyfileobj was generally faster than outfile.write.When comparing the worst combination (outfile.write, binary mode) with the best combination (shutil.copyfileobj, normal read mode), the difference was quite significant:The outfile had a final size of 2620 MB in normal read mode vs 2578 MB in binary read mode.
No need to use that many variables.
The fileinput module provides a natural way to iterate over multiple files
You can iterate over the lines of a file object directly, without reading the whole thing into memory:
I was curious to check more on performance and I used answers of Martijn Pieters and Stephen Miller.I tried binary and text modes with shutil and without shutil. I tried to merge 270 files.Text mode - Binary mode - Running times for binary mode - Running times for text mode - Looks like in both modes, shutil performs same while text mode is faster than binary. OS: Mac OS 10.14 Mojave. Macbook Air 2017. 


Answer URL
