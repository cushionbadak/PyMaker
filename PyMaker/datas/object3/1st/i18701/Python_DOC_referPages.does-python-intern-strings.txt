Natural Text
In Java, explicitly declared Strings are interned by the JVM, so that subsequent declarations of the same String results in two pointers to the same String instance, rather than two separate (but identical) Strings. For example:My question is, does CPython (or any other Python runtime) do the same thing for strings? For example, if I have some class:And create 10 instances of this class, will each one of them have an instance variable referring to the same string in memory, or will I end up with 10 separate strings?
This is called interning, and yes, Python does do this to some extent, for shorter strings created as string literals. See About the changing id of a Python immutable string for some discussion.Interning is runtime dependent, there is no standard for it. Interning is always a trade-off between memory use and the cost of checking if you are creating the same string. There is a built-in intern() function to force the issue if you are so inclined, which documents some of the interning Python does for you automatically:Normally, the names used in Python programs are automatically interned, and the dictionaries used to hold module, class or instance attributes have interned keys.Note that Python 3 moved the intern() function to the sys module.
A fairly easy way to tell is by using id(). However as @MartijnPieters mentions, this is runtime dependent.
All length 0 and length 1 strings are interned.Strings are interned at compile time ('wtf' will be interned but ''.join(['w', 't', 'f'] will not be interned)Strings that are not composed of ASCII letters, digits or underscores, are not interned. This explains why 'wtf!' was not interned due to !.https://www.codementor.io/satwikkansal/do-you-really-think-you-know-strings-in-python-fnxh8mthaThe above article explains the string interning in python. There are some exceptions which are defined clearly in the article.


Answer URL
https://docs.python.org/3/library/sys.html#sys.intern
