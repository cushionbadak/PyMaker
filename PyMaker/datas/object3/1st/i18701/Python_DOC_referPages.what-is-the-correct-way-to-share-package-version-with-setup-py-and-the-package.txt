Natural Text
With distutils, setuptools, etc. a package version is specified in setup.py:I would like to be able to access the same version number from within the package:I could add __version__ = '1.0.0' to my package's __init__.py, but I would also like to include additional imports in my package to create a simplified interface to the package:andHowever, these additional imports can cause the installation of foobar to fail if they import other packages that are not yet installed. What is the correct way to share package version with setup.py and the package?
Set the version in setup.py only, and read your own version with pkg_resources, effectively querying the setuptools metadata:file: setup.pyfile: __init__.pyTo make this work in all cases, where you could end up running this without having installed it, test for DistributionNotFound and the distribution location:
I don't believe there's a canonical answer to this, but my method (either directly copied or slightly tweaked from what I've seen in various other places) is as follows:Folder heirarchy (relevant files only):main_package/_version.py:main_package/__init__.py:setup.py:... which is ugly as sin ... but it works, and I've seen it or something like it in packages distributed by people who I'd expect to know a better way if there were one.
I agree with @stefano-m 's philosophy about:Having version = "x.y.z" in the source and parsing it within  setup.py is definitely the correct solution, IMHO. Much better than  (the other way around) relying on run time magic.And this answer is derived from @zero-piraeus 's answer. The whole point is "don't use imports in setup.py, instead, read the version from a file".I use regex to parse the __version__ so that it does not need to be the last line of a dedicated file at all. In fact, I still put the single-source-of-truth __version__ inside my project's __init__.py.Folder heirarchy (relevant files only):main_package/__init__.py:setup.py:... which is still not ideal ... but it works.And by the way, at this point you can test your new toy in this way:PS: This official Python packaging document (and its mirror) describes more options. Its first option is also using regex. (Depends on the exact regex you use, it may or may not handle quotation marks inside version string. Generally not a big issue though.)PPS: The fix in ADAL Python is now backported into this answer.
Put __version__ in your_pkg/__init__.py, and parse in setup.py using ast:If using Python < 3.4, note that importlib.util.find_spec is not available. Moreover, any backport of importlib of course cannot be relied upon to be available to setup.py. In this case, use:
Based on the accepted answer and comments, this is what I ended up doing:file: setup.pyfile: __init__.pyExplanation:__project__ is the name of the project to install which may bedifferent than the name of the packageVERSION is what I display in my command-line interfaces when--version is requestedthe additional imports (for the simplified package interface) onlyoccur if the project has actually been installed
There are several methods proposed in the Packaging guides on python.org.
The accepted answer requires that the package has been installed. In my case, I needed to extract the installation params (including __version__) from the source setup.py. I found a direct and simple solution while looking through the tests of the setuptools package. Looking for more info on the _setup_stop_after attribute lead me to an old mailing list post which mentioned distutils.core.run_setup, which lead me to the actual docs needed. After all that, here's the simple solution:file setup.py:file extract.py:


Answer URL
https://docs.python.org/3/library/importlib.html#importlib.util.find_spec
https://docs.python.org/3/distutils/apiref.html#module-distutils.core
