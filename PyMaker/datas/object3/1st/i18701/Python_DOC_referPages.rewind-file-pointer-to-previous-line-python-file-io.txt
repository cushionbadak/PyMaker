Natural Text
I'm reading throug a large gene file of the formatEach gene start with a > then a unique ID. After comes line of the nucleotides of that gene.Unfortunately, this file was generated so that there are line breaks between each of the lines of sequence.I need to read in each sequence as one contiguous string. So, I have been using the next method (as shown below).I find that my script is only picking up half of the genes in the file because when next is called on the condition that makes the while loop fail, the file pointer is pointing to the next gene ID, then when the next iteration of the for loop executes, it moves to the next file.Is there a way to rewind the file pointer to the previous line, so my for loop catches that as a new gene?I have seen similar questions, but none of them address the specific way that I am reading through the file with the 
I would use a generator instead of skipping through lines (something tells me this can be simplified greatly):Now, you can safely iterate over the whole thing with just a few lines of code:There's also pyfasta.Or a more general function with itertools:
Is there a way to rewind the file pointer to the previous line, so my for loop catches that as a new gene?In Python 3, no. You cannot mix file iteration with explicit operations on the file pointer.In Python 2, maybe. But this only works by accident, which is why it was banned in 3.0, and it's not guaranteed to work properly in every case. So, you shouldn't do it.A better way to do it is to ask how to rewind an iterator. And the answer is itertools. You can peek ahead by using tee. You can rebind the iterator to chain([pushed_back_value], iterator). And so on.But, as others have pointed out, there's an even better way to do this. You don't really need to peek ahead or seek back here, you just need to group things. You can do that with itertools too, but in this case it's trivial enough that you might as well just do it explicitly, as Blender shows.
Here's another method that uses re and mmap:Doing it this way enables the entire file to be treated as a string, but will make use of the OS providing the part of the file on demand to be complete the regex. As it uses finditer we're also not building a result set up in memory.
There are much easier ways to read a fasta file, for example:This will give you an list of tuples.  The first element is the sequence ID and the second element is a list of the sequences.It's easy to join the sequences after this:


Answer URL
