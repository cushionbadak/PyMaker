Natural Text
Sorry I'm fairly new to python, but I needed to take 6 individual lists and concatenate them such that they resemble a list of lists. i.e. a1 from list A + b1 from list B + c1 from list C and  a2 from list A + b2.... etcshould become [[a1,b1,c1], [a2,b2,c2]...]I tried this:and then tried a variation where I appended instead:So I have two questions.Why didn't either of those work, cus in my mind they should have. And I don't need to put i++ at the bottom right? For some reason it just wasn't working so I was just trouble shooting. I ended up finding a solution, which is below, but I'd just like to understand what happened in the above two codes that failed so terribly. 
The issue with at you did is that you are creating a list of 6 references to the same thing.[0]*6 will generate a list of 6 references to the same number (zero), and [[0]*6]*len(lengthList) will generate a list of references to the same [0]*6 list.I think the function you want is zip:which gives:So in your case, this would work:
a = [0]*6 defines a list with 6 references, all those references point to the number 0[a]*m defines a list with m references, all pointing to a, in this case [0]*6.The code in your final example works because it adds references to new objects, rather than modifying an existing one repeatedly.Other people recommended you use zip, and it is indeed the best solution, IMHO.
You are making a list of names all pointing at the same list of six zeros when you do:This is equivalent to doing this:Instead, if you use zip you can get what you want in one pass:
You could do this with a comprehension across a zip, if the lists are all the same length
Depending on version of Python and how big your 3 lists are you should use either zip or izip.izip if you're running Python < 3 (you can use zip as well but if the lists are really big then a generator would be a whole heap faster and better for you).zip if you're running Python >= 3And just for a bit tutoring on how to write good clean looking Python:Your loop that you've done for i in range(len(lengthList) could very easily be transformed to whats really Pythonic.Now you're thinking "what about my index, i can't access the index of the element".Well Python has a fix for that too it's called enumerate and you use it like so:So translating your code down to a more Pythonic syntax:


Answer URL
