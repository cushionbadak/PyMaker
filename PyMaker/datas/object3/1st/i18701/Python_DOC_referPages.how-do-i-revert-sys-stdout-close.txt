Natural Text
In the interactive console:Attempting to revert:I agree that it's a frivolous question, but I'm curious how sys.stdout.close() can be reverted in Python (without restarting the interactive console, of course) and why sys.stdout.open() does not make sense.
Okay, so I hope you are on a unix system...Basically sys.stdout is just a variable containing any writable object.So we can do magic like and now we can write to that file as if it was stdout.Knowing unix is just one big box of files. Unix is kind enough to give us /dev/stdoutSo to re-open stdout its simpleJob done, you now have a new stdout opened up.Edit
In your case, you can get the sys.stdout back by sys.stdout = os.fdopen(1, 'w', 0).But, in truth, you do not close the sys.stdout really. If you want to close it completely, you have to use os.close(sys.stdout.fileno()). You can read Why doesnâ€™t closing sys.stdout (stdin, stderr) really close it? for why. In this case, I don't know how to reopen it. The above method or even open('/dev/stdout', 'w') have failed on my Linux.
sys.stdout.open() doesn't make any sense because open takes a filename and mode as parameters and a closed stream object doesn't have an open method.The main answer is Don't Close It In The First Place!
The reason why sys.stdout.open() does not make sense whereas sys.stdout.close() does (despite the apparent symmetry), is that .open() and .close() apply to the stream/file, to which sys.stdout is just a pointer (and sys.stdout doesn't point to any stream/file once the latter is closed).


Answer URL
