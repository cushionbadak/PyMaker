Natural Text
I need to do an XOR of two hex strings so that each byte is XORed separately, but it doesn't work because the ord() function that I use seems to be getting an int as input instead of the intended string. Take a look at his code first to see what I mean:And the error that I am getting:I then checked the values of q, and they indeed where integers for some reason. I don't see why, because according to my logic they are supposed to be strings because I gave it a hex encoded string, unhexlified it and then stuck each character into a slot in q.
You are using hexlify and unhexlify on Python 3, where they return a bytes object. You then zip these objects, which iterates over the bytes objects to create the pairs. Iteration over a bytes object produces integers. See the bytes type documentation:While bytes literals and representations are based on ASCII text, bytes objects actually behave like immutable sequences of integers, with each value in the sequence restricted such that 0 <= x < 256.You do not need to use ord() when looping over a bytes object; you already have integers representing the individual bytes.Simply use a bytes object again after XOR-ing the values:Note that hexlify returns a bytes object too. If you have to have a string (unicode) object then decode from ASCII:Demo:
output Basic CBC mode e


Answer URL
