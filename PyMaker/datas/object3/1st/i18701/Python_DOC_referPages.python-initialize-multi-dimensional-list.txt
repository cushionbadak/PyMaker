Natural Text
I want to initialize a multidimensional list. Basically, I want a 10x10 grid - a list of 10 lists each containing 10 items.Each list value should be initialized to the integer 0.The obvious way to do this in a one-liner: myList = [[0]*10]*10 won't work because it produces a list of 10 references to one list, so changing an item in any row changes it in all rows.The documentation I've seen talks about using [:] to copy a list, but that still won't work when using the multiplier: myList = [0]*10; myList = myList[:]*10 has the same effect as myList = [[0]*10]*10.Short of creating a loop of myList.append()s, is there a quick efficient way to initialize a list in this way?
You can do it quite efficiently with a list comprehension:
This is a job for...the nested list comprehension!
Just thought I'd add an answer because the question asked for the general n-dimensional case and I don't think that was answered yet. You can do this recursively for any number of dimensions with the following example:
You might actually need an array instead of some lists. Almost every time I see this "presized nested list" pattern, something is not quite right.
An additional solution is to use NumPy library:This can be easily converted to a regular python list with the .tolist() method if necessary.
Two common and short way to do this:First:Second:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
