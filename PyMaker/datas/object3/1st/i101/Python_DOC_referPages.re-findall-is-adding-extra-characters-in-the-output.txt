Natural Text
When I create a string containing backslashes, they get duplicated:Why?
What you are seeing is the representation of my_string created by its __repr__() method. If you print it, you can see that you've actually got single backslashes, just as you intended:The string below has three characters in it, not four:You can get the standard representation of a string (or any other object) with the repr() built-in function:Python represents backslashes in strings as \\ because the backslash is an escape character - for instance, \n represents a newline, and \t represents a tab.This can sometimes get you into trouble:Because of this, there needs to be a way to tell Python you really want the two characters \n rather than a newline, and you do that by escaping the backslash itself, with another one:When Python returns the representation of a string, it plays safe, escaping all backslashes (even if they wouldn't otherwise be part of an escape sequence), and that's what you're seeing. However, the string itself contains only single backslashes.More information about Python's string literals can be found at: String and Bytes literals in the Python documentation.
As Zero Piraeus's answer explains, using single backslashes like this (outside of raw string literals) is a bad idea.But there's an additional problem: in the future, it will be an error to use an undefined escape sequence like \d, instead of meaning a literal backslash followed by a d. So, instead of just getting lucky that your string happened to use \d instead of \t so it did what you probably wanted, it will definitely not do what you want.As of 3.6, it already raises a DeprecationWarning, although most people don't see those. It will become a SyntaxError in some future version.In many other languages, including C, using a backslash that doesn't start an escape sequence means the backslash is ignored.In a few languages, including Python, a backslash that doesn't start an escape sequence is a literal backslash.In some languages, to avoid confusion about whether the language is C-like or Python-like, and to avoid the problem with \Foo working but \foo not working, a backslash that doesn't start an escape sequence is illegal.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__repr__
https://docs.python.org/3/library/functions.html#repr
https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
