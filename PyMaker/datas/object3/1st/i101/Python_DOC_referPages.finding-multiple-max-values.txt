Natural Text
I'm working on the following problem:A supermarket wants to reward its best customer of each day, showing the customer’s name on a screen in the supermarket. For that purpose, the customer’s purchase amount is stored in one list and the customer’s name is stored in another list. Implement a function nameOfBestCustomer(sales, customers) that returns the name of the customer with the largest sale. Write a program that prompts the cashier to enter all prices and names, adds them to two lists, calls the method that you implemented, and displays the result. Use a price of 0 as a sentinel.I have the following code working properly except that it doesn't account for multiple customers with the same purchase amount being the max. Any suggestions on how I could easily fix this problem? I'm obviously new to Python so any other suggestions you might have are also welcome! Thanks!
Right now, you are using index to get the first customer with the max sales. It sounds like you want to get all the customers that tie for that max sales. There are several ways to do this, but a list comprehension would be especially pythonic:Then, to return customers, you could use another list comprehension:You can read more about list comprehensions here. Notice, the second example isn't a "list" but it uses the same comprehension syntax to create a generator. I fed that into a python set to make sure it returns distinct customers.Other ConsiderationsYou don't need to set bestCustomer or salesMax ahead of time. They can be created on the fly.You would need to change the way you print your answer if you use my code.I wonder if the question you're working on actually wants you to total the sales by customer and find the top spender. In that case, you might find zip and groupBy really handy.
After finding the maxSale, you can start a loop to find all maximum sales and customers. Also you need to make the bestCustomers a list. Hope this helps.
If your result have multiple same max values you can change your nameOfBestCustomer function to this one:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
