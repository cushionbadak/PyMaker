Natural Text
I am asking Python to print the minimum number from a column of CSV data, but the top row is the column number, and I don't want Python to take the top row into account. How can I make sure Python ignores the first line?This is the code so far:Could you also explain what you are doing, not just give the code? I am very very new to Python and would like to make sure I understand everything.
You could use an instance of the csv module's Sniffer class to deduce the format of a CSV file and detect whether a header row is present along with the built-in next() function to skip over the first row only when necessary:Since datatype and column are hardcoded in your example, it would be slightly faster to process the row like this:Note: the code above is for Python 3.x. For Python 2.x use the following line to open the file instead of what is shown:
To skip the first line just call:Files in Python are iterators over lines.
You would normally use next(incsv) which advances the iterator one row, so you skip the header. The other (say you wanted to skip 30 rows) would be:
In a similar use case I had to skip annoying lines before the line with my actual column names. This solution worked nicely. Read the file first, then pass the list to csv.DictReader.
Borrowed from python cookbook, A more concise template code might look like this: 
use csv.DictReader instead of csv.Reader.If the fieldnames parameter is omitted, the values in the first row of the csvfile will be used as field names. you would then be able to access field values using row["1"] etc
The new 'pandas' package might be more relevant than 'csv'. The code below will read a CSV file, by default interpreting the first line as the column header and find the minimum across columns.
Well, my mini wrapper library would do the job as well.Meanwhile, if you know what header column index one is, for example "Column 1", you can do this instead:
For me the easiest way to go is to use range.   
The documentation for the Python 3 CSV module provides this example:The Sniffer will try to auto-detect many things about the CSV file. You need to explicitly call its has_header() method to determine whether the file has a header line. If it does, then skip the first row when iterating the CSV rows. You can do it like this:
I would use tail to get rid of the unwanted first line:
just add [1:]example below:that works for me in iPython
Python 3.XHandles UTF8 BOM + HEADERIt was quite frustrating that the csv module could not easily get the header, there is also a bug with the UTF-8 BOM (first char in file).This works for me using only the csv module:
Because this is related to something I was doing, I'll share here. What if we're not sure if there's a header and you also don't feel like importing sniffer and other things? If your task is basic, such as printing or appending to a list or array, you could just use an if statement:


Answer URL
https://docs.python.org/3/library/csv.html#csv.Sniffer
https://docs.python.org/3/library/csv.html#csv.Sniffer
https://docs.python.org/3/library/csv.html#csv.Sniffer
