Natural Text
What is best practice for extending Enum type in Python 3.4 and is there even a possibility for do this?For example:Currently there is no possible way to create a base enum class with members and use it in other enum classes (like in the example above). Is there any other way to implement inheritance for Python enums?
Subclassing an enumeration is allowed only if the enumeration does not define any members.Allowing subclassing of enums that define members would lead to a violation of some important invariants of types and instances.https://docs.python.org/3/library/enum.html#restricted-subclassing-of-enumerationsSo no, it's not directly possible.
Calling the Enum class directly and making use of chain allows the extension (joining) of an existing enum. I came upon the problem of extending enums while working on a CANopen  implementation. Parameter indices in the range from 0x1000 to 0x2000  are generic to all CANopen nodes while e.g. the range from 0x6000  onwards depends open whether the node is a drive, io-module, etc.nodes.py:drives.py:
While uncommon, it is sometimes useful to create an enum from many modules.  The aenum1 library supports this with an extend_enum function:1 Disclosure:  I am the author of the Python stdlib Enum, the enum34 backport, and the Advanced Enumeration (aenum)  library.
I've opted to use a metaclass approach to this problem.This metaclass can be used like so:Note what happens in the event of a namespace conflict:This is due to the base enum.EnumMeta.__prepare__ returning a special enum._EnumDict instead of the typical dict object that behaves different upon key assignment.  You may wish to suppress this error message by surrounding it with a try-except TypeError, or there may be a way to modify the namespace before calling super().__prepare__(...).This approach creates a new Enum using the same name-value pairs as the source Enums, but the resulting Enum members are unique.  The names and values will be the same, but they will still fail certain comparisons:


Answer URL
https://docs.python.org/3/library/enum.html#restricted-subclassing-of-enumerations
https://docs.python.org/3/library/enum.html
