Natural Text
This is test.py:The above python code when ran on system generates the following output:What I am confused why is not there an infinite loop of "Here 1 \n Here 3" outputs. How can the print a, b outputs can be justified?
When you run the file as a script, it is not considered to be the test module. It is considered to be the __main__ module.When execution hits import test, a second execution of the file starts, where the module is considered to be test.When execution hits import test again, Python recognizes that it's already importing test and does not reexecute the module. Instead, it merely loads the half-initialized test module object into the current namespace and continues on. Python's optimistic assumption is that you've written the code so that the contents of test won't be needed until the import finishes.When execution hits the assignments to test.a and test.b, that affects the test module, but not __main__, despite the fact that they came from the same file. Thus, the print a, b from the imported module reflects the new values, while the print a, b from __main__ reflects the initial values.
A file can only be imported once. The 'import test' line succeeds the first time it is encountered. When it is encountered a second time, the interpreter will check that it has already been loaded. When a program is initially run, it does not count as being 'imported'.
The general flow of this script is as follows:Main is run, so it prints 'Here 3'change is called, so it prints 'Here 1'When importing test, python runs the main function of testWhen calling change the second time, python is smart enough to know that test is already imported, so it effectively skips that line.The imported main finishes runningThe original script finishes running.
While user2367112's excellent answer explains why this happens, none of the answers here offer a workaround.There are two easy ways to achieve the desired behavior.Rather than importing test, use import __main__ instead. If you assign an alias with import __main__ as test, you won't even have to change any other code.You can set sys.modules['test'] = sys.modules['__main__'] to tell python "Hey, this module already exists". After this, import test will not re-import the module, thus making your code work as expected. The relevant docs on sys.modules can be found here.


Answer URL
https://docs.python.org/3/library/sys.html#sys.modules
