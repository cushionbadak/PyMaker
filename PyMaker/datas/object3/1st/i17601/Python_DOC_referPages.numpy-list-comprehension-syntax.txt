Natural Text
I'd like to be able to use list comprehension syntax to work with NumPy arrays easily.For instance, I would like something like the below obviously wrong code to just reproduce the same array.What is the easy way to do this, to avoid using range(len(X)?
First, you should not be using NumPy arrays as lists of lists.Second, let's forget about NumPy; your listcomp doesn't make any sense in the first place, even for lists of lists.In the inner comprehension, for i in X is going to iterate over the rows in X. Those rows aren't numbers, they're lists (or, in NumPy, 1D arrays), so X[i] makes no sense whatsoever. You may have wanted i[j] instead.In the outer comprehension, for j in X[i] has the same problem, but is has an even bigger problem: there is no i value. You have a comprehension looping over each i inside this comprehension.If you're confused by a comprehension, write it out as an explicit for statement, as explained in the tutorial section on List Comprehensions:… which expands to:… which should make it obvious what's wrong here.I think what you wanted was:Again, turn it back into explicit for statements:That's obviously right.Or, if you really want to use indexing (but you don't):So, back to NumPy. In NumPy terms, that last version is:… and if you want to go in column-major order instead of row-major, you can (unlike with a list of lists):… but that will of course transpose the array, which isn't what you wanted to do.The one thing you can't do is mix up column-major and row-major order in the same expression, because you end up with nonsense.Of course the right way to make a copy of an array is to use the copy method:Just as the right way to transpose an array is:
The easy way is to not do this. Use numpy's implicit vectorization instead. For example, if you have arrays A and B as follows:then the following code using list comprehensions:can be much more easily written asIt'll also run much faster. Generally, you will produce faster, clearer code if you don't use list comprehensions with numpy than if you do.If you really want to use list comprehensions, standard Python list-comprehension-writing techniques apply. Iterate over the elements, not the indices:Thus, your example code would become
Another option (though not necessarily performant) is to rethink your problem as a map instead of a comprehension and write a ufunc:http://docs.scipy.org/doc/numpy/reference/ufuncs.htmlYou can call functional-lite routines like:http://docs.scipy.org/doc/numpy/reference/generated/numpy.apply_over_axes.htmlhttp://docs.scipy.org/doc/numpy/reference/generated/numpy.vectorize.htmlEtc.
Do you mean following?Using numpy.ndarray.copy:


Answer URL
