Natural Text
Is there any performance difference between this:And this:Assume I'm doing this a couple hundred million times so any performance difference will help.EDIT:I'm not actually implementing this based off the results of this question, I'm just wondering theoretically what is faster. I'm just curious.
Here are dis'es of both versions, side by side:As you can see, the only difference is JUMP_ABSOLUTE (with else) vs. JUMP_FORWARD (without it). Since both opcodes are immediately after BREAK_LOOP, they won't run in any case, so both versions are fully equivalent.That said, an else after a breaking statement (break/continue/return) is usually considered a code smell (and takes an extra useless line).If you're interested in maximal performance, it might be worth considering .index or itertools.takewhile instead of a plain loop with if.
This sounds like pre-mature optimization: Don't do it.You should make your program work correctly before you try to optimize it, if you even have to.If your finished app turns out to be slower than you need, then measure, measure, measure.  Use a profiling tool.  The parts that are slow will probably surprise you.  Don't waste time fixing parts that aren't provably slow.But back to the first point: Don't try to optimize a program that isn't feature-complete.
As Grant Birchmeier said: measure, measure, measure.On my box using Python 3.3.1 (default, Apr 17 2013, 22:30:32) [GCC 4.7.3] on linux I get these results:Using:YMMV. I am just comparing ints and no real world data. I have no idea how costly is your __eq__, what doFunction does, etc.
Grant's answer has it right: if you're concerned about performance, first get the code running, then measure what needs to be improved, and finally improve that stuff. For posterity, here are my timing results. The short answer: there's no real difference, even over billions of iterations.And the code:Whatever the cost of having the else statement might actually be, it's clearly dwarfed by any actual operations you're doing (such as your __eq__ implementation, or what your actual doFunction is, or even just other stuff happening on your machine).


Answer URL
