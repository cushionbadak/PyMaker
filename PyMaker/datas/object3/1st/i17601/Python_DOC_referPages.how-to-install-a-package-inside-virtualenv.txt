Natural Text
I created a virtualenv with the following command.After starting the virtualenv with workon, I type ipython. It prompts me When I try to install ipython with the virtualenv, I got the following error message:Does anyone know how to install inside the virtualenv?
Create your virtualenv with --no-site-packages if you don't want it to be able to use external libraries:Otherwise, as in your example, it can see a library installed in your system Python environment as satisfying your requested dependency.
Avoiding Headaches and Best Practices:Virtual Environments are not part of your git project (they don't need to be versioned) !Create a folder for your Virtual Environments. After activating the virtual environment of your project, never  "sudo pip install package".After finishing your work, always "deactivate" your environment.Avoid renaming your project folder.For a better representation, here's a simulation:creating a folder for your projects/environmentscreating environmentactivating environmentinstalling packagespackage available inside the environmentdeactivate environmentpackage NOT AVAILABLE outside the environmentNotes:Why not sudo? Virtualenv creates a whole new environment for you, defining $PATH and some other variables and settings. When you use sudo pip install package, you are running Virtualenv as root, escaping the whole environment which was created, and then, installing  the package on global site-packages, and not inside the project folder where you have a Virtual Environment, although you have activated the environment.If you rename the folder of your project......you'll have to adjust some variables from some files inside the bin directory of your project.For example:bin/pip, line 1 (She Bang)bin/activate, line 42 (VIRTUAL_ENV)
Well i don't have an appropriate reason regarding why this behavior occurs but then i just found a small work aroundInside the VirtualEnvironmentnow this will install the version in your virtual environmentAdditionally you can check inside the virtual environment with thisThis shall give you the details of all the installed packages in both the locations(system and virtualenv)While some might say its not appropriate to use --system-site-packages (it may be true), but what if you have already done a lot of stuffs inside your virtualenv? Now you dont want to redo everything from the scratch.You may use this as a hack and be careful from the next time :)
For Python 3 :
To use the environment virtualenv has created, you first need to source env/bin/activate. After that, just install packages using pip install package-name.
To further clarify the other answer here:Under the current version of virtualenv, the --no-site-packages flag is the default behavior, so you don't need to specify it.  However, you are overriding the default by explicitly using the --system-site-packages flag, and that's probably not what you want.  The default behavior (without specifying either flag) is to create the virtual environment such that when you are using it, any Python packages installed outside the environment are not accessible.  That's typically the right choice because it best isolates the virtual environment from your local computer environment.  Python packages installed within the environment will not affect your local computer and vice versa.Secondly, to use a virtual environment after it's been created, you need to navigate into the virtual environment directory and then run:What this does is to configure environment variables so that Python packages and any executables in the virtual environment's bin folders will be used before those in the standard locations on your local computer.  So, for example, when you type "pip", the version of pip that is inside your virtual environment will run instead of the version of pip on your local machine.  This is desirable because pip inside the virtual environment will install packages inside the virtual environment.The problem you are having is because you are running programs (like ipython) from your local machine, when you instead want to install and run copies of those programs isolated inside your virtual environment.  You set this up by creating the environment (without specifying any site-packages flags if you are using the current version), running the activate script mentioned above, then running pip to install any packages you need (which will go inside the environment).
I had the same issue and the --no-site-packages did not work for me. I discovered on this older mailing list archive that you are able to force an installation in the virtualenv using the -U flag for pip, eg pip -U ipython. You may verify this works using the bash command which ipython while in the virtualenv.source: https://mail.python.org/pipermail/python-list/2010-March/571663.html
From documentation https://docs.python.org/3/library/venv.html: The pyvenv script has been deprecated as of Python 3.6 in favor of using python3 -m venv to help prevent any potential confusion as to which Python interpreter a virtual environment will be based on.In order to create a virtual environment for particular project, create a file /home/user/path/to/create_venv.sh:Then run this script in the console: 
You can go to the folder where your venv exists and right click -> git bash here.Then you just right python -m pip install ipython and it will install inside the folder.I find it even more convenient with the virtualenv package that creates the venv inside the project's folder. 
Sharing what has worked for me in both Ubuntu and Windows. This is for python3. To do for python2, replace "3" with "2":UbuntuTo install any package: pip install packageTo get out of the virtual environment: deactivateTo activate again: source /tmp/VIRTUAL/bin/activateFull explanation here.Windows(Assuming you have MiniConda installed and are in the Start Menu > Anaconda > Anaconda Terminal)To install any package: pip install package or conda install packageTo get out of the virtual environment: deactivateTo activate again: activate VIRTUALFull explanation here.
Sharing a personal case if it helps. It is that a virtual environment was previously arranged. Its path can be displayed byecho $VIRTUAL_ENVMake sure that the it is writable to the current user. If not, using    sudo ipythonwould certainly clear off the warning message.In anaconda, if $VIRTUAL_ENV is independently arranged, one can simply delete this folder or rename it, and then restart the shell. Anaconda will recover to its default setup.


Answer URL
https://docs.python.org/3/library/venv.html
