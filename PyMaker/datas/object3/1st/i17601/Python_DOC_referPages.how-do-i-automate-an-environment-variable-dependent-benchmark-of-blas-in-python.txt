Natural Text
I need some help in figuring out how to automate a benchmark effort in python.  I'm testing the effects of threading on a BLAS library calls through numpy in python.  In a linux environment, threading in OpenBLAS is controlled through the environment variable OMP_NUM_THREADS.  I want to do a test where I increment OMP_NUM_THREADS from 1 to a max value, time a routine at each thread count, and then finally manipulate the aggregate timing for all thread counts. The issue is the following.  Environment variables can be set in python, but they only affect subprocesses or subshells.  So I can correctly run my benchmark with the following driver code:and numpy_test script:but analyzing this is a very manual process.  In particular, I can't return the value dot_time from numpy_test up to my outer wrapper routine, so I can't analyze the results of my test in any automated fashion.  As an example, I'd like to plot dot_time vs number of threads, or evaluate whether dot_time/number of threads is constant.  If I try to do a similar test entirely within a python instance by defining a python test function (avoiding the os.system() approach above), and then running the test function within the thread in thread_set loop, then all instances of the test function inherit the same value for OMP_NUM_THREADS (that of the parent python shell).  So this test fails:This fails in that every instance of thread takes the same time, as test_numpy() always inherits the value of OMP_NUM_THREADS in the parent environment rather than the value set through os.environ().  If something like this worked however, it would be trivial to do the analysis I need to do.In the real test, I'll be running over a few 1000 permutations, so automation is key.  Given that, I'd appreciate an answer to any of these questions:How would you return a value (dot_time) from a subprocess like this?  Is there a more elegant solution than reading/writing a file?Is there a better way to structure this sort of (environment variable dependent) test?Thank you in advance.
You can do something like this:Then you'll have the output of the the numpy_test script in stdout. In general I believe subprocess.call and subprocess.Popen are prefered over os.system.
If you want to get the output from the subprocess, use subprocess.check_output, e.g. replace with


Answer URL
