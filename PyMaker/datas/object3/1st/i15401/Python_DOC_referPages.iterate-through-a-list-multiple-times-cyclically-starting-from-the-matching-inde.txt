Natural Text
I need to do the following in python.  I have a list of strings, list, a string to search for, text, and variable containing the number of elements to print, x.  I want to iterate through x no. of consecutive elements of the list, wrapping around to the front of list if necessary.  First I need to find the first element in list that has text as a substring.  I will then start with the first element of list after that matched element, and continue to iterate through a total of x consecutive elements of the list, wrapping around if necessary.How would I do this?In this example I want to end up looking at the following 11 elements:
For our problem data:Algorithm 1: (Cycle & Slice)Most pythonic way is using the functions, islice and cycle from the itertools module offcourse:Cycle through / Repeat the list infinitely (cycle function)Slice out / Pick the desired elements using start/stop indices from the repeated list (slice function)Code:Algorithm 2: (Loop & Modulo Indexing)A more traditional way would be:Loop through the list x no. of times starting after the matched index, i+1Cycle through the list elements using modulo indexing  Code:Algorithm 3 - Bad Implementations: (Rotate & Repeat)Many poor/ slow implementations are also possible e.g. using numpy functions, like roll, tile:Roll/ Rotate the numpy array so as to start it with the element at the matching index, iTile / Repeat the array so as to increase its length more than the desired x no. of elementsPick x no. of elementsCode: Output:Timing:iPython line magic function %timeit shows that Algorithm 1 is not surprisingly ~1.5 and ~11 times faster than 2 and 3 respectively:Conclusion:Using itertools is the Fastest and Slickest way to go whenever you can use cycle, islice, count, repeat, etc!
You can use cycle from itertools, maybe in combination with islice and enumerate.Output:
Hope this will help
Was annoid not getting it, so here is a beautiful solution.. :PIt assumes that each string in the list is unique, else you can just set the offset.
use a while-loop?


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
