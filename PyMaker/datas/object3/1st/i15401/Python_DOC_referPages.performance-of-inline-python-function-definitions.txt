Natural Text
A general question for someone that knows function definition internals better than I do.In general, is there a performance trade off to doing something like this:Versus:I've seen developers inline functions before to keep a small, single use function close to the code that actually uses it, but I always wondered if there were a memory (or compute) performance penalty for doing something like this.Thoughts?
Splitting larger functions into more readable, smaller functions is part of writing Pythonic code -- it should be obvious what you're trying to accomplish and smaller functions are easier to read, check for errors, maintain, and reuse.As always, "which has better performance" questions should always be solved by profiling the code, which is to say that it's often dependent on the signatures of the methods and what your code is doing. e.g. if you're passing a large dictionary to a separate function instead of referencing a frame local, you'll end up with different performance characteristics than calling a void function from another. For example, here's some trivial behavior:vs.The two use the same number of function calls and there's no performance difference, which backs up my claim that it really matters to test in specific circumstances.You can see that I have an unused import for the disassembly module.  This is another helpful module that will allow you to see what your code is doing (try dis.dis(my_function)).  I'd post a profile of the testcode I generated, but it would only show you more details that are not relevant to solving the problem or learning about what's actually happening in your code.
Using timeit on my mac seems to favor defining the function at the module level (slightly), and obviously the results can vary from one computer to the next ...:Note that this difference is small (~10%) so it really won't make a major difference in your program's runtime unless this is in a really tight loop.The most frequent reason to define a function inside another one is to pick up the out function's local variables in a closure.  If you don't need a closure, then you should pick the variant that is easiest to read. (My preference is almost always to put the function at the module level).


Answer URL
https://docs.python.org/3/library/profile.html
https://docs.python.org/3/library/dis.html
https://docs.python.org/3/library/profile.html
