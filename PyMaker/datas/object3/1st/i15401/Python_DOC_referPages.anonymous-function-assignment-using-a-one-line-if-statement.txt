Natural Text
When assigning a variable to an anonymous function using a one line if statement, the 'else' case does not behave as expected. Instead of assigning the anonymous function listed after the 'else', a different anonymous function is assigned. This function returns the expected anonymous function. What seems to be happening is that lambda x: x if False else lambda x: x*x as a whole is returned as an anonymous function in the 'else' case. I was able to achieve the desired behavior by using the following:However, I would still like to get the bottom of this unusual behavior. Any thoughts?
lambda has a weaker binding than the conditional expression.  In fact, it has the least operator precedence in the language.  From the documentation1:So, this line:is actually being interpreted by Python as:To do what you want, you would need to add parenthesis:1Note that the table is ordered from least to greatest.


Answer URL
https://docs.python.org/3/reference/expressions.html#operator-precedence
