Natural Text
I'm learning the Python programming language and I've came across something I don't fully understand. In a method like:What does self do?  What is it meant to be?  Is it mandatory?What does the __init__ method do?  Why is it necessary? (etc.)I think they might be OOP constructs, but I don't know very much.
In this code:... the self variable represents the instance of the object itself.  Most object-oriented languages pass this as a hidden parameter to the methods defined on an object; Python does not.  You have to declare it explicitly.  When you create an instance of the A class and call its methods, it will be passed automatically, as in ...The __init__ method is roughly what represents a constructor in Python.  When you call A() Python creates an object for you, and passes it as the first parameter to the __init__ method.  Any additional parameters (e.g., A(24, 'Hello')) will also get passed as arguments--in this case causing an exception to be raised, since the constructor isn't expecting them.
Yep, you are right, these are oop constructs.__init__ is the constructor for a class.  The self parameter refers to the instance of the object (like this in C++).The __init__ method gets called when memory for the object is allocated:It is important to use the self parameter inside an object's method if you want to persist the value with the object.  If, for instance, you implement the __init__ method like this:Your x and y parameters would be stored in variables on the stack and would be discarded when the init method goes out of scope.  Setting those variables as self._x and self._y sets those variables as members of the Point object (accessible for the lifetime of the object).
A brief illustrative exampleIn the hope it might help a little, here's a simple example I used to understand the difference between a variable declared inside a class, and a variable declared inside an __init__ function:
In short:self as it suggests, refers to itself- the object which has called the method. That is, if you have N objects calling the method, then self.a will refer to a separate instance of the variable for each of the N objects. Imagine N copies of the variable a for each object__init__ is what is called as a constructor in other OOP languages such as C++/Java. The basic idea is that it is a special method which is automatically called when an object of that Class is created
__init__ does act like a constructor. You'll need to pass "self" to any class functions as the first argument if you want them to behave as non-static methods. "self" are instance variables for your class.
Try out this code. Hope it helps many C programmers like me to Learn Py.Output:JaySum =  5Doc - Inside ClassDoc - __init__ ConstructorDoc - Inside ShowDestructor Deleting object -  Jay
Had trouble undestanding this myself. Even after reading the answers here. To properly understand the __init__ method you need to understand self. The self ParameterThe arguments accepted by the __init__ method are :But we only actually pass it two arguments :Where has the extra argument come from ?When we access attributes of an object we do it by name (or by reference). Here instance is a reference to our new object. We access the printargs method of the instance object using instance.printargs.In order to access object attributes from within the __init__ method we need a reference to the object.Whenever a method is called, a reference to the main object is passed as the first argument. By convention you always call this first argument to your methods self.This means in the __init__ method we can do :Here we are setting attributes on the object. You can verify this by doing the following :values like this are known as object attributes. Here the __init__ method sets the arg1 and arg2 attributes of the instance.source: http://www.voidspace.org.uk/python/articles/OOP.shtml#the-init-method
note that self could actually be any valid python identifier.  For example, we could just as easily write, from Chris B's example:and it would work exactly the same.  It is however recommended to use self because other pythoners will recognize it more easily.
Basically, you need to use the 'self' keyword when using a variable in multiple functions within the same class. As for init, it's used to setup default values incase no other functions from within that class are called.
__init__ is basically a function which will "initialize"/"activate" the properties of the class for a specific object, once created and matched  to the corresponding class..self represents that object which will inherit those properties.
Class objects support two kinds of operations: attribute references and instantiationAttribute references use the standard syntax used for all attribute references in Python: obj.name. Valid attribute names are all the names that were in the class’s namespace when the class object was created. So, if the class definition looked like this:then MyClass.i and MyClass.f are valid attribute references, returning an integer and a function object, respectively. Class attributes can also be assigned to, so you can change the value of MyClass.i by assignment. __doc__ is also a valid attribute, returning the docstring belonging to the class: "A simple example class".Class instantiation uses function notation. Just pretend that the class object is a parameterless function that returns a new instance of the class. For example:The instantiation operation (“calling” a class object) creates an empty object. Many classes like to create objects with instances customized to a specific initial state. Therefore a class may define a special method named __init__(), like this:When a class defines an __init__() method, class instantiation automatically invokes __init__() for the newly-created class instance. So in this example, a new, initialized instance can be obtained by:Of course, the __init__() method may have arguments for greater flexibility. In that case, arguments given to the class instantiation operator are passed on to __init__(). For example,Taken from official documentation which helped me the most in the end.Here is my exampleWhen you create instance of class Bill:You get:    
The 'self' is a reference to the class instanceNow we can create an instance of foo and call the method on it, the self parameter is added by Python in this case:But it can be passed in as well if the method call isn't in the context of an instance of the class, the code below does the same thingInterestingly the variable name 'self' is just a convention. The below definition will work exactly the same.. Having said that it is very strong convention which should be followed always, but it does say something about flexible nature of the language

In this code:Here __init__ acts as a constructor for the class and when an object is instantiated, this function is called. self represents the instantiating object.The result of the above statements will be as follows:
Just a demo for the question.
Python __init__ and self what do they do?What does self do? What is it meant to be? Is it mandatory?What does the __init__ method do? Why is it necessary? (etc.)The example given is not correct, so let me create a correct example based on it:When we create an instance of the object, the __init__ is called to customize the object after it has been created. That is, when we call SomeObject with 'blah' below (which could be anything), it gets passed to the __init__ function as the argument, blah:The self argument is the instance of SomeObject that will be assigned to an_object. Later, we might want to call a method on this object:Doing the dotted lookup, that is, an_object.method, binds the instance to an instance of the function, and the method (as called above) is now a "bound" method - which means we do not need to explicitly pass the instance to the method call.The method call gets the instance because it was bound on the dotted lookup, and when called, then executes whatever code it was programmed to perform.The implicitly passed self argument is called self by convention. We could use any other legal Python name, but you will likely get tarred and feathered by other Python programmers if you change it to something else.__init__ is a special method, documented in the Python datamodel documentation. It is called immediately after the instance is created (usually via __new__ - although __new__ is not required unless you are subclassing an immutable datatype).
What does self do? What is it meant to be? Is it mandatory?The first argument of every class method, including init, is always a reference to the current instance of the class. By convention, this argument is always named self.In the init method, self refers to the newly created object; in other class methods, it refers to the instance whose method was called.Python doesn't force you on using "self". You can give it any name you want. But remember that the first argument in a method definition is a reference to the object.Python adds the self argument to the list for you; you do not need to include it when you call the methods.if you didn't provide self in init method then you will get an errorWhat does the init method do? Why is it necessary? (etc.)init short for initialization. It is a constructor which get called when you make instance of the class and it is not necessary. But usually it our practice to write init method for setting default state of the object. If you are not willing to set any state of the object initially then you don't need to write this method.
Here, the guy has written pretty well and simple: https://www.jeffknupp.com/blog/2014/06/18/improve-your-python-python-classes-and-object-oriented-programming/Read above link  as a reference to this:self? So what's with that self parameter to all of the Customer  methods? What is it? Why, it's the instance, of course! Put another  way, a method like withdraw defines the instructions for withdrawing  money from some abstract customer's account. Calling  jeff.withdraw(100.0) puts those instructions to use on the jeff  instance.So when we say def withdraw(self, amount):, we're saying, "here's how  you withdraw money from a Customer object (which we'll call self) and  a dollar figure (which we'll call amount). self is the instance of the  Customer that withdraw is being called on. That's not me making  analogies, either. jeff.withdraw(100.0) is just shorthand for  Customer.withdraw(jeff, 100.0), which is perfectly valid (if not often  seen) code.init self may make sense for other methods, but what about init? When we call init, we're in the process of creating an object, so how can there already be a self? Python allows us to extend  the self pattern to when objects are constructed as well, even though  it doesn't exactly fit. Just imagine that jeff = Customer('Jeff  Knupp', 1000.0) is the same as calling jeff = Customer(jeff, 'Jeff  Knupp', 1000.0); the jeff that's passed in is also made the result.This is why when we call init, we initialize objects by saying  things like self.name = name. Remember, since self is the instance,  this is equivalent to saying jeff.name = name, which is the same as  jeff.name = 'Jeff Knupp. Similarly, self.balance = balance is the same  as jeff.balance = 1000.0. After these two lines, we consider the  Customer object "initialized" and ready for use.Be careful what you __init__After init has finished, the caller can rightly assume that the  object is ready to use. That is, after jeff = Customer('Jeff Knupp',  1000.0), we can start making deposit and withdraw calls on jeff; jeff is a fully-initialized object.


Answer URL
https://docs.python.org/3/tutorial/classes.html
https://docs.python.org/3/reference/datamodel.html#object.__init__
