Natural Text
This question already has an answer here:Calculation error with pow operator                    4 answers                In PythonWhy is -i**4 not evaluated as (-i)**4, but as -(i**4)? I suppose one could argue that raising to a power takes precedence over (implicit) multiplication of i with minus one (i.e. you should read -1*i**4). But where I learned math, -i**n with n even and i positive, should come out positive.
The ** operator binds more tightly than the - operator does in Python. If you want to override that, you'd use parentheses, e.g. (-i)**4.https://docs.python.org/2/reference/expressions.html#operator-precedencehttps://docs.python.org/3/reference/expressions.html#operator-precedence
The power operator (**) has a higher precedence than the unary negation (-) operator. -i**4 is evaluated as -(i**4) - i.e., you take 3 up to the power of four, which is 81, and then negate it, resulting in -81.
You can use the pow() function from math.This will yield a positive value. As stated here: Exponentials in python x.**y vs math.pow(x, y), this option (or just build in pow()) would be ideal if you want to always produce a float.
You have to do (-i)**4 to get a positive result.The *'s have higher priority than the '-'.When in doubt, use parentheses. (or, as Amber suggested, refer to the language documentation)


Answer URL
https://docs.python.org/3/reference/expressions.html#operator-precedence
