Natural Text
I made a little test case to compare YAML and JSON speed :And the result is :I am using PyYAML 3.11 with libyaml C library on ubuntu 12.04.I know that json is much more simple than yaml, but with a 223x ratio between json and yaml I am wondering whether my configuration is correct or not.Do you have same speed ratio ?How can I speed up yaml.load() ?
You've probably noticed that Python's syntax for data structures is very similar to JSON's syntax.What's happening is Python's json library encodes Python's builtin datatypes directly into text chunks, replacing ' into " and deleting , here and there (to oversimplify a bit).On the other hand, pyyaml has to construct a whole representation graph before serialising it into a string.The same kind of stuff has to happen backwards when loading.The only way to speedup yaml.load() would be to write a new Loader, but I doubt it could be a huge leap in performance, except if you're willing to write your own single-purpose sort-of YAML parser, taking the following comment in consideration:YAML builds a graph because it is a general-purpose serialisation  format that is able to represent multiple references to the same  object. If you know no object is repeated and only basic types appear,  you can use a json serialiser, it will still be valid YAML.-- UPDATEWhat I said before remains true, but if you're running Linux there's a way to speed up Yaml parsing. By default, Python's yaml uses the Python parser. You have to tell it that you want to use PyYaml C parser.You can do it this way:In order to do so, you need yaml-cpp-dev (package later renamed to libyaml-cpp-dev) installed, for instance with apt-get:And PyYaml with LibYaml as well. But that's already the case based on your output.I can't test it right now because I'm running OS X and brew has some trouble installing yaml-cpp-dev but if you follow PyYaml documentation, they are pretty clear that performance will be much better.
For reference, I compared a couple of human-readable formats and indeed Python's yaml reader is by far the slowest. (Note the log-scaling in the below plot.) If you're looking for speed, you want Python's built-in JSON reader:Code to reproduce the plot:
Yes, I also noticed that JSON is way faster. So a reasonable approach would be to convert YAML to JSON first. If you don't mind ruby, then you can get a big speedup and ditch the yaml install altogether:Here is a comparison for 100K records:And for 1M records:If you insist on using yaml.load anyway, remember to put it in a virtualenv to avoid conflicts with other software.


Answer URL
https://docs.python.org/3/library/json.html
