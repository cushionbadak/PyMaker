Natural Text
I'm trying to write a networked game with Pygame and asyncio, but I can't work out how to avoid hanging on reads. Here is my code for the client:This hangs on the line line = yield from reader.read(2**12). I previously thought that the point of asyncio was that it was non-blocking, and so if there wasn't any data to read it would just continue executing. I see now that this isn't the case.How do I integrate the asyncio networking code with the Pygame drawing and event code?
The point of yield from is to switch the execution to the asyncio's event loop and to block the current coroutine until the result is available. To schedule a task without blocking the current coroutine, you could use asyncio.async().To print read-so-far data without blocking the pygame loop:There should be no blocking calls inside the while loop.read() and sleep() coroutines run concurrently in the same thread (obviously you could run other coroutines concurrently too).
You can "transform" a blocking task into a non-blocking one.I suggest this: https://docs.python.org/3/library/asyncio-eventloop.html#executor.I have a function that listens to a twitter feed, function "mention", and I run it in an executor, so if it hangs, it doesn't block the other tasks.
well since you are trying to read the value of 'line' right after you call read()  you need that value at any cost...if the coroutine wouldn't stop cause there are no data, you could get an AttributeError on the line.decode() call if 'line' then is None.one thing you can do is to set a timeout on the blocking call and handle the timeout exception:


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#executor
