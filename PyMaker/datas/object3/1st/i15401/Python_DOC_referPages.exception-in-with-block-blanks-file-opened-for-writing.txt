Natural Text
This simple coderather than merely throwing an exception, deletes all data in "myfile", although no actual write operation is even attempted.This is dangerous to say the least, and certainly not how other languages treat such situations.How I can prevent this? Do I have to handle every possible exception in order to be certain that the target file will not be blanked by some unforeseen condition? Surely there must be a standard pattern to solve this problem. And, above all: What is happening here in the first place?
You are opening a file for writing. It is that simple action that blanks the file, regardless of what else you do with it. From the open() function documentation:'w'  open for writing, truncating the file firstEmphasis mine. In essence, the file is empty because you didn't write anything to it, not because you opened it.Postpone opening the file to a point where you actually have data to write if you don't want this to happen. Writing a list of strings to a file is not going to cause exceptions at the Python level.Alternatively, write to a new file, and rename (move) it afterwards to replace the original. Renaming a file as left to the OS.
The statement open('myfile', 'w') will delete all the contents on execution i.e. truncate the file. If you want to retain the lines you have to use open('myfile', 'a'). Here the a option is for append. 
Opening a file for writing erases the contents. Best way to avoid lost of data, not only in case of exceptions, also computer shutdown, etc. is to create a new temporary file and rename the file to the original name, when everything is done.


Answer URL
https://docs.python.org/3/library/functions.html#open
