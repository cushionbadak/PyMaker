Natural Text
I'm writing an internal unit tests framework which involves mocking multiple functions/classes.@patch seems to be working great for my needs, but as there are many tests that will require to patch many different classes/functions, I'm looking to avoid writing multiple @patch before every test and maybe encapsulate them all into another decorator.To better illustrate my needs:current state:desired state:Is it possible to implement something like this?, so far I wasn't able to as @patch requires to be followed either def or another @.EDIT 2:I've tried Michele's suggestion, but the test is no longer being identified as a test:After adding functools.wraps to the patch_all decorator, it worked.With the @patch_all decorator this is what I get:If I remove it:Thanks in advance.
patch decorator like all decorators is just a function that take a function and return a function ([EDIT] in the original version I forgot @functools.wraps(f) to make a correct test decorator, thanks to @MenyIssakov to let me know that my answer was wrong). You can define your own patch_all decorator likeNow you can use @patch_all decorator in your tests like:You can go over this and define your own decorator that take a list of tuple to pass to the patch calls.However i think that is not a good idea: test should be simple and mocking should be explicit to make clear the aim of the test. If you must patch a lot of objects/methods/functions in a lot of tests functions consider to apply the decorator to the class instead of the single methods to write it just one time for all test methods. 


Answer URL
https://docs.python.org/3/library/unittest.mock.html#test-prefix
