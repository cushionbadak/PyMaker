Natural Text
Consider the code below:I'd like to automatically remove the newline. I know I could do:But this requires looping the length of f twice (and loading the whole thing into memory). I'm wondering if there is something even more Pythonic like:or maybe just:Of course, neither of these work. To see how this could be applied elsewhere, here's an example with nested lists:
Welcome to the world of Python iterators :)You have the right idea with the list comprehensions, except you want it to lazy-load and not build up the entire list in memory first (which may even be untenable for very large files): use generator expressions instead, which have the same syntax except the square brackets are replaced by parentheses (which you can omit if it is the sole argument to a function):Source: Read more about them in the relevant Python Enhancement Proposal and the official docs.An alternative, functional way of doing it with a syntax similar to LISP's is using map which applies a function to each element of an iterator â€” it doesn't have to be a sequence, and assuming you're on Python this will involve looping through all the lines just once:Also, f.readlines() would probably be clearer than just looping over f, and a with statement is more Pythonic than calling f.close() yourself.
You can use a generator expression:This is very similar to the list comprehension, except that it produces items lazily (one-by-one) instead of collecting them all into a list at once.  So, we only loop the length of f a single time and also avoid dumping everything into memory all at one time.
Haven't tested but should be right: the important part is using replace. In my opinion a for loop is a valid way to do it, but if you want a one liner, use something like:Please do note that "replace" makes a copy of the to-be-replaced content. A huge file opened on a system with little memory will cause issues (MemoryError). Anyway, test it, see what works better.


Answer URL
https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression
https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression
https://docs.python.org/3/whatsnew/2.4.html#pep-289-generator-expressions
