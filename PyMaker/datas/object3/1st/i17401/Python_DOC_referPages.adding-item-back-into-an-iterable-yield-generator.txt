Natural Text
I thought this is a great moment to use yield, but I'm stuck.When something fails, I would like to send the item back into the generator. I've read that this is possible, so I'd really like to use my first generator.How to use a generator in such a case?
You are probably referring to a coroutine, which leverages the yield expression.  It works a little like this:and (contrived) usage:Salient points - normal yield behavior assigns None to bad.  If it's not None, something has been send-ed into the generator.  When we send something into the generator, it resumes operation until it reaches the next yield expression.  So keep that in mind - the above control flow in the coroutine isn't what I'd call "standard" since there is no yielding done in the error block.Here is a coroutine that operates a little more like what you were talking about:We send our state back into the generator, and it keeps yielding it until we stop sending it.
Two generators, sending back the value if the return value evaluates to false for some function. (random in this case). 
While it's possible to do what you're asking with regular generators and gen.send() and sent_back = yield x, your code will be very complicated. It may be easier to write your own iterator type, which supports a method other than send for getting the "sent back" items:If you only need to deal with repeating an item that just came out of the iteration, you could make it simpler yet:Here's how you could use that last version:


Answer URL
