Natural Text
This question already has an answer here:If range() is a generator in Python 3.3, why can I not call next() on a range?                    1 answer                I wrote this and expected 0:Instead I got:TypeError: 'range' object is not an iteratorBut I thought it was a generator?The initial answer yielded the same thing I initially said to myself: it's an iterable, not an interator. But then, that wouldn't explain why this works, if both are simply generators:
range returns an iterable, not an iterator. It can make iterators when iteration is necessary. It is not a generator.A generator expression evaluates to an iterator (and hence an iterable as well).
The range object is iterable. However, it's not an iterator.To get an iterator, you need to call iter() first:Edit: But be careful not to call iter() with every call to next(). It creates a new iterator at index 0.
The next builtin calls the __next__ hook method.  So, range objects have a well defined __iter__, but not a well-defined __next__.iterable objects have __iter__ defined, iterator objects have well defined __next__ (typically with an __iter__ method which simply returns self).
It's because the next function calls the next method of the object that passed in. listiterators and generators both have the next method.But a list doesn't have it. And that is the reason why it raises that exception.next doesn't care much about whether the object it's passed is an iterator or not.But adding the next method doesn't necessarily make it a collection/sequence/iterable.But adding the __iter__ method to it makes it one.The next seems to have some builtin intelligence when it comes to list. 


Answer URL
