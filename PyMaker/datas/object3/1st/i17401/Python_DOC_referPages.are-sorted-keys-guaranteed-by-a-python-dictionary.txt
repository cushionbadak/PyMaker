Natural Text
That iterating over a dict could yield sorted keys was surprising. It would be considerably useful too, if this is a guaranteed behaviour.example codeoutputNote: I would like to point out that I don't want implement an ordered dict. I just wanted to verify if the code written above is a normal, recurring behavior in python (version 2.7 above)
You can subclass the dict and create your own SortedDict class, like thisComplete working implementation is here
From the docs:Keys and values are listed in an arbitrary order which is non-random, varies across Python implementations, and depends on the dictionaryâ€™s history of insertions and deletions.
Iteration over a dict is not guaranteed to produce any particular order. In particular, it is not guaranteed to be sorted, it is not guaranteed to be in insertion order, it may be different between equal dicts, and it may be different from one execution of the interpreter to another. Here's an example:Two equal dicts, two different orders. Neither dict is in the order the keys were inserted in, and the second dict's keys aren't in sorted order.If you want to iterate over the keys in sorted order, useIf you want to iterate over the keys in the order they were inserted in, use a collections.OrderedDict.
Besides OrderedDict, you can just use the built-in sorted function to iterate a dict:BTW, sorted() returns a two element tuple list, not a dict.
As the docs state, no, keys are not sorted in a Python dict. But many people have found that behavior useful and there exist many implementations of sorted dicts on PyPI. The SortedDict data type does exactly what you observed: efficiently maintains its keys in sorted order.One such implementation is the sortedcontainers module which provides sorted list, sorted dict, and sorted set data types. It's implemented in pure-Python but is fast-as-C implementations. Unit tests provide 100% coverage and it's passed hours of stress testing.Perhaps most importantly, sortedcontainers maintains a performance comparison of several popular implementations along with a description of their tradeoffs.


Answer URL
