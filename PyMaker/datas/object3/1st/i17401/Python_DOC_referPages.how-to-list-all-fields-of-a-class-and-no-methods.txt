Natural Text
Suppose o is a Python object, and I want all of the fields of o, without any methods or __stuff__. How can this be done?I've tried things like:but these return the same as dir(o), presumably because dir gives a list of strings. Also, things like __class__ would be returned here, even if I get this to work.
You can get it via the __dict__ attribute, or the built-in vars function, which is just a shortcut:There's only attributes of the object. Methods and class attributes aren't present. 
The basic answer is "you can't do so reliably".  See this question.You can get an approximation with [attr for attr in dir(obj) if attr[:2] + attr[-2:] != '____' and not callable(getattr(obj,attr))].However, you shouldn't rely on this, because:Because dir() is supplied primarily as a convenience for use at an interactive prompt, it tries to supply an interesting set of names more than it tries to supply a rigorously or consistently defined set of names, and its detailed behavior may change across releases.In other words, there is no canonical way to get a list of "all of an object's attributes" (or "all of an object's methods").If you're doing some kind of dynamic programming that requires you to iterate over unknwon fields of an object, the only reliable way to do it is to implement your own way of keeping track of those fields.  For instance, you could use an attribute naming convention, or a special "fields" object, or, most simply, a dictionary.
You can iterate through an instance's__dict__attribute and look for non-method things.For example:Output:You can do it in a single statement with a list comprehension:Which would print ['foo', 'bar'].
This should work for callables:You could get rid of the rest with:
You could use the built-in method vars()


Answer URL
