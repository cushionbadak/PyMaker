Natural Text
My requirement is similar to Multiple producers, single consumerexcept i need it in python I have created an application that spawns 5 concurrent processes (I am using multiprocessing library).These 5 process are independently producing output in dict format.Earlier I was printing the output to console, but now would like to output it to a file.I am looking for a pattern where all my 5 producers write to a shared queue that supports concurrent writes.And a single consumer process that too has access to this queue and consumes the data from it, with the ability to wait if there is no data to write and terminate when producers are done with their task.Thanks Anuj
since you are already using multiprocess, all you need is the Queue classand a sample (modified from the Queue docs)Edit:For multiple answers from each child replace the last for loop with:
I've implemented this pattern in Python where a supervisor process spawns a bunch of processes and then consumes log messages from all of them and writes those log messages into a single log file.Basically, I used execve to spawan the processes an specified that stderr for each process was connected to a PTY. Then my supervisor opened all the master PTYs and used select to read from them in a loop. The PTY's are line-buffered by the tty line discipline and you can use readline on them for non=blocking reads. I believe that I also used fcntl on the PTYs to set os.O_NONBLOCK as well.Works great. The only hitch is that you need to read more than one line per pty when you return from the select poll, otherwise you can lose output (assuming you have something reaping the child processes and restarting). By reading all lines available on each PTY you also avoid tracebacks getting interleaved with other messages.If you really need to send objects rather than text lines, then you are better of using a real pub-sub messaging system like AMQP or ZeroMQ. AMQP is a much bigger hammer than you need so only check that out if you expect to be building lots of similar apps. Otherwise, try the simpler 0MQ http://www.zeromq.org/intro:read-the-manual which is just a messaging library that makes sockets much much easier to use.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing-programming
