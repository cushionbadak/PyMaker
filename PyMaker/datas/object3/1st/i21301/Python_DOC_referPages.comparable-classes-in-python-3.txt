Natural Text
What is the standard way of making a class comparable in Python 3?  (For example, by id.)
For a full set of comparison functions I have used the following mixin, which you could put in say for example a mixin.py in your module.To use the mixin above you need to implement a _cmpkey() method that returns a key of objects that can be compared, similar to the key() function used when sorting. The implementation could look like this:The reason I use this instead of the total_ordering recipe is this bug. It's fixed in Python 3.4, but often you need to support older Python versions as well.
sort needs only __lt__. functools.total_ordering (as of 2.7 / 3.2) is a decorator that provides all of the comparison operators so you don't have to write all of them yourself.By default, classes are hashable, and this uses their id(); I'm not sure why you'd want to order classes by their id() unless you just wanted the order to be stable.
Not sure if this is complete, but you'd want to define:As agf said, I'm missing:
You said you are trying to do this:You should simply do this:EDIT: Or as gnibbler said:  max(obj_list, key=f)But you told gnibbler you need an object reference to the max object.  I think this is simplest:Of course you might want to let it raise an exception rather than return none if you try to find the max_obj() of an empty list.
I just thought of a really hackish way to do it.  This is in the same spirit as what you were originally trying to do.  It does not require adding any functions to the class object; it works for any class.I really don't like that, so here's something less terse that does the same thing:Or, you could use this one-liner if obj_list is always an indexable object like a list:This has the advantage that if there are multiple objects such that f(obj) returns an identical value, you know which one you will get: the one with the highest index, i.e. the latest one in the list.  If you wanted the earliest one in the list, you could do that with a key function.


Answer URL
https://docs.python.org/3/library/functools.html#functools.total_ordering
