Natural Text
How to delete a file or folder in Python?
os.remove() removes a file.os.rmdir() removes an empty directory.shutil.rmtree() deletes a directory and all its contents.pathlib.Path.unlink() removes the file or symbolic link.pathlib.Path.rmdir() removes the empty directory.
Python syntax to delete a fileOrBest practiceFirst, check whether the file or folder exists or not then only delete that file. This can be achieved in two ways :a. os.path.isfile("/path/to/file")b. Use exception handling.EXAMPLE for os.path.isfileException HandlingRESPECTIVE OUTPUTPython syntax to delete a folderExample for shutil.rmtree()
Use (See complete documentation on shutil) and/orand(Complete documentation on os.)
For deleting files:You can use unlink or remove. OrThis functions removes (deletes) the file path. If path is a directory, OSError is raised.In Python 2, if the path does not exist, OSError with [Errno 2] (ENOENT) is raised. In Python 3, FileNotFoundError with [Errno 2] (ENOENT) is raised. In Python 3, because FileNotFoundError is a subclass of OSError, catching the latter will catch the former.For deleting folders:rmdir Remove (delete) the directory path. Only works when the directory is empty, otherwise, OSError is raised. In order to remove whole directory trees, shutil.rmtree() can be used.shutil.rmtree Delete an entire directory tree. Path must point to a directory (but not a symbolic link to a directory). If ignore_errors is true, errors resulting from failed removals will be ignored and if false or omitted, such errors are handled by calling a handler specified by onerror or, if that is omitted, they raise an exception.See also:os.removedirs(name) Remove directories recursively. Works like rmdir() except that, if the leaf directory is successfully removed, removedirs() tries to successively remove every parent directory mentioned in path until an error is raised (which is ignored, because it generally means that a parent directory is not empty). For example, os.removedirs('foo/bar/baz') will first remove the directory 'foo/bar/baz', and then remove 'foo/bar' and 'foo' if they are empty. 
Create a function for you guys.
You can use the built-in pathlib module (requires Python 3.4+, but there are backports for older versions on PyPI: pathlib, pathlib2). To remove a file there is the unlink method:Or the rmdir method to remove an empty folder:
How do I delete a file or folder in Python?For Python 3, to remove the file and directory individually, use the unlink and rmdir Path object methods respectively:Note that you can also use relative paths with Path objects, and you can check your current working directory with Path.cwd.For removing individual files and directories in Python 2, see the section so labeled below.To remove a directory with contents, use shutil.rmtree, and note that this is available in Python 2 and 3:DemonstrationNew in Python 3.4 is the Path object. Let's use one to create a directory and file to demonstrate usage. Note that we use the / to join the parts of the path, this works around issues between operating systems and issues from using backslashes on Windows (where you'd need to either double up your backslashes like \\ or use raw strings, like r"foo\bar"):and now:Now let's delete them. First the file:We can use globbing to remove multiple files - first let's create a few files for this:Then just iterate over the glob pattern:Now, demonstrating removing the directory:What if we want to remove a directory  and everything in it? For this use-case, use shutil.rmtreeLet's recreate our directory and file:and note that rmdir fails unless it's empty, which is why rmtree is so convenient:Now, import rmtree and pass the directory to the funtion:and we can see the whole thing has been removed:Python 2If you're on Python 2, there's a backport of the pathlib module called pathlib2, which can be installed with pip:And then you can alias the library to pathlibOr just directly import the Path object (as demonstrated here):If that's too much, you can remove files with os.remove or os.unlinkorand you can remove directories with os.rmdir:Note that there is also a os.removedirs - it only removes empty directories recursively, but it may suit your use-case.
shutil.rmtree is the asynchronous function, so if you want to check when it complete, you can use while...loop

I recommend using subprocess if writing a beautiful and readable code is your cup of tea:And if you are not a software engineer, then maybe consider using Jupyter; you can simply type bash commands:Traditionally, you use shutil:


Answer URL
https://docs.python.org/3/library/pathlib.html#pathlib.Path.unlink
https://docs.python.org/3/library/pathlib.html#pathlib.Path.unlink
https://docs.python.org/3/library/pathlib.html#pathlib.Path.unlink
https://docs.python.org/3/library/pathlib.html#pathlib.Path.rmdir
https://docs.python.org/3/library/shutil.html#shutil.rmtree
https://docs.python.org/3/library/pathlib.html#pathlib.Path.unlink
https://docs.python.org/3/library/pathlib.html#pathlib.Path.rmdir
https://docs.python.org/3/library/shutil.html#shutil.rmtree
