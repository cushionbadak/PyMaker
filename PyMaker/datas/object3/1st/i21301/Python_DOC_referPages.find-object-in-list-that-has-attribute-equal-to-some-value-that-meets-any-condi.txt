Natural Text
I've got list of objects. I want to find one (first or whatever) object in this list that has attribute (or method result - whatever) equal to value. What's is the best way to find it?Here's test case:I think using generators and reduce() won't make any difference because it still would be iterating through list.ps.: Equation to value is just an example. Of course we want to get element which meets any condition.
This gets the first item from the list that matches the condition, and returns None if no item matches. It's my preferred single-expression form.However,The naive loop-break version, is perfectly Pythonic -- it's concise, clear, and efficient. To make it match the behavior of the one-liner:This will assign None to x if you don't break out of the loop.
Since it has not been mentioned just for completion.The good ol' filter to filter your to be filtered elements.Functional programming ftw.I know that generally in python list comprehensions are preferred or at leastthat is what I read, but I don't see the issue to be honest. Of course Python is not an FP language, but Map / Reduce / Filter are perfectly readable and are the most standard of standard use cases in functional programming. So there you go. Know thy functional programming. filter condition listIt won't get any easier than this:
I just ran into a similar problem and devised a small optimization for the case where no object in the list meets the requirement.(for my use-case this resulted in major performance improvement):Along with the list test_list, I keep an additional set test_value_set which consists of values of the list that I need to filter on. So here the else part of agf's solution becomes very-fast.
You could also implement rich comparison via __eq__ method for your Test class and use in operator.Not sure if this is the best stand-alone way, but in case if you need to compare Test instances based on value somewhere else, this could be useful.
For below code, xGen is an anonomous generator expression, yFilt is a filter object. Note that for xGen the additional None parameter is returned rather than throwing StopIteration when the list is exhausted.Output:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__eq__
