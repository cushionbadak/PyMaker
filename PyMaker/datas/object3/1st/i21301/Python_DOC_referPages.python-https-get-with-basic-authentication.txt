Natural Text
Im trying to do a HTTPS GET with basic authentication using python. Im very new to python and the guides seem to use diffrent librarys to do things. (http.client, httplib and urllib). Can anyone show me how its done? How can you tell the standard library to use?
In Python 3 the following will work.  I am using the lower level http.client from the standard library.  Also check out section 2 of rfc2617 for details of basic authorization.  This code won't check the certificate is valid, but will set up a https connection.  See the http.client docs on how to do that.
Use the power of Python and lean on one of the best libraries around: requestsVariable r (requests response) has a lot more parameters that you can use.  Best thing is to pop into the interactive interpreter and play around with it, and/or read requests docs.
Update: OP uses Python 3. So adding an example using httplib2The below works for python 2.6:I use pycurl a lot in production for a process which does upwards of 10 million requests per day.You'll need to import the following first.Part of the basic authentication header consists of the username and password encoded as Base64. In the HTTP header you will see this line Authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=. The encoded string changes depending on your username and password.We now need a place to write our HTTP response to and a curl connection handle.We can set various curl options. For a complete list of options, see this. The linked documentation is for the libcurl API, but the options does not change for other language bindings.If you do not need to verify certificate. Warning: This is insecure. Similar to running curl -k or curl --insecure.Call cStringIO.write for storing the HTTP response.When you're making a POST request.Make the actual request now.Do something based on the HTTP response code.
A correct way to do basic auth in Python3 urllib.request with certificate validation follows.Note that certifi is not mandatory. You can use your OS bundle (likely *nix only) or distribute Mozilla's CA Bundle yourself. Or if the hosts you communicate with are just a few, concatenate CA file yourself from the hosts' CAs, which can reduce the risk of MitM attack caused by another corrupt CA.


Answer URL
https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.request
