Natural Text
I have a Python script that needs to invoke another Python script in the same directory. I did this:I get the following error:I have the script somescript.py in the same folder though. Am I missing something here?
If 'somescript.py' isn't something you could normally execute directly from the command line (I.e., $: somescript.py works), then you can't call it directly using call.Remember that the way Popen works is that the first argument is the program that it executes, and the rest are the arguments passed to that program. In this case, the program is actually python, not your script. So the following will work as you expect:This correctly calls the Python interpreter and tells it to execute your script with the given arguments.Note that this is different from the above suggestion:That will try to execute the program called python somscript.py, which clearly doesn't exist.Will also work, but using strings as input to call is not cross platform, is dangerous if you aren't the one building the string, and should generally be avoided if at all possible.
Windows? Unix?  Unix will need a shebang and exec attribute to work:as the first line of script and:at command-line or as mentioned previously.Windows should work if you add the shell=True parameter to the "call" call.
Check out this.
subprocess.call expects the same arguments as subprocess.Popen - that is a list of strings (the argv in C) rather than a single string.It's quite possible that your child process attempted to run "s" with the parameters "o", "m", "e", ...
If you're on Linux/Unix you could avoid call() altogether and not execute an entirely new instance of the Python executable and its environment.For what it's worth.
What's wrong withor better still wrap the functionality in a function, e.g. baz, then do this.There seem to be a lot of scripts starting python processes or forking, is that a requirement?
First, check if somescript.py is executable and starts with something along the lines of #!/usr/bin/python.If this is done, then you can use subprocess.call('./somescript.py').Or as another answer points out, you could do subprocess.call(['python', 'somescript.py']).

The subprocess call is a very literal-minded system call. it can be used for any generic process...hence does not know what to do with a Python script automatically.Try If that doesn't work, you might want to try an absolute path, and/or check permissions on your Python script...the typical fun stuff.


Answer URL
https://docs.python.org/3/library/subprocess.html#older-high-level-api
