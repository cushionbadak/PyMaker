Natural Text
I have a python program creates tmp directories under /temp by using tempfile.mkdtemp.Unfortunately, the python program did not delete the directory after using it. So now the disk space is low.Questions:How do I delete the temp directories left under /temp manually? Itried to delete them manually but got "permission denied" error.In the python program, how to delete temp dir after using them.
To manage resources (like files) in Python, best practice is to use the with keyword, which automatically releases the resources (i.e., cleans up, like closing files); this is available from Python 2.5.From Python 3.2, you can use tempfile.TemporaryDirectory() instead of tempfile.mkdtmp() – this is usable in with and automatically cleans up the directory:If you are using an earlier version of Python (at least 2.5, so have with), you can use backports.tempfile; see Nicholas Bishop’s answer to tempfile.TemporaryDirectory context manager in Python 2.7.It’s easy and instructive to roll your own class, called acontext manager. The return value of the __enter__() method is bound to the target of the as clause, while the __exit__() method is called when the context is exited – even by exception – and performs cleanup.You can simplify this with the @contextlib.contextmanager decorator, so you don’t need to write a context manager manually. The code prior to the yield is  executed when entering the context, the yielded value is bound to the target of the as, and the code after the yield is executed when exiting the context. This is fundamentally a coroutine that encapsulates the resource acquisition and release, with the yield yielding control to the suite (body) of the with clause. Note that here you do need to have a try...finally block, as @contextlib.contextmanager does not catch exceptions in the yield – this just factors the resource management into a coroutine.As simplylizz notes, if you don’t mind the directory already being deleted (which the above code assumes does not happen), you can catch the “No such file or directory” exception as follows:You can compare with the standard implementation in tempfile.py; even this simple class has had bugs and evolved over the years.For background on with, see:The Python Tutorial: Methods of File ObjectsWith Statement Context ManagersPEP 343 -- The "with" Statement
Read the documentation, it's simple. ;) From the docs: the directory is readable, writable, and searchable only by the creating user ID.To delete temp directory try something like this:Also you can try tempdir package or see its sources.
I think the user is responsible for deleting the temporary directory and its content created by using tempfile.mkdtemp().it will not deleted automatically just like temporary file.There are many ways you can delete the directoryIf the directory is empty you can use Note it can be used only if the directory is empty otherwise will raise OSErrorThis will delete the entire directory path:be careful while using this, it will delete the whole directory and files inside it. 


Answer URL
