Natural Text
Suppose I have the following Button made with Tkinter in Python:The method action is called when I press the button, but what if I wanted to pass some arguments to the method action?I have tried with the following code: This just invokes the method immediately, and pressing the button does nothing.
I personally prefer to use lambdas in such a scenario, because imo it's clearer and simpler and also doesn't force you to write lots of wrapper methods if you don't have control over the called method, but that's certainly a matter of taste.That's how you'd do it with a lambda (note there's also some implementation of currying in the functional module, so you can use that too):
This can also be done by using partial from the standard library functools, like this:
Python's ability to provide default values for function arguments gives us a way out.See: http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/extra-args.htmlFor more buttons you can create a function which returns a function:
Example GUI:Let's say I have the GUI:What Happens When a Button Is PressedSee that when btn is pressed it calls its own function which is very similar to button_press_handle in the following example:with:You can simply think that command option should be set as, the reference to the method we want to be called, similar to callback in button_press_handle.Calling a Method(Callback) When the Button is PressedWithout arguments So if I wanted to print something when the button is pressed I would need to set:Pay close attention to the lack of () with the print method which is omitted in the meaning that: "This is the method's name which I want you to call when pressed but don't call it just this very instant." However, I didn't pass any arguments for the print so it printed whatever it prints when called without arguments.With Argument(s)Now If I wanted to also pass arguments to the method I want to be called when the button is pressed I could make use of the anonymous functions, which can be created with lambda statement, in this case for print built-in method, like the following:Calling Multiple Methods when the Button Is PressedWithout ArgumentsYou can also achieve that using lambda statement but it is considered bad practice and thus I won't include it here. The good practice is to define a separate method, multiple_methods, that calls the methods wanted and then set it as the callback to the button press:With Argument(s)In order to pass argument(s) to method that calls other methods, again make use of lambda statement, but first:and then set:Returning Object(s) From the CallbackAlso further note that callback can't really return because it's only called inside button_press_handle with callback() as opposed to return callback(). It does return but not anywhere outside that function. Thus you should rather modify object(s) that are accessible in the current scope.Complete Example with global Object Modification(s)Below example will call a method that changes btn's text each time the button is pressed:Mirror
The reason it invokes the method immediately and pressing the button does nothing is that action(somenumber) is evaluated and its return value is attributed as the command for the button. So if action prints something to tell you it has run and returns None, you just run action to evaluate its return value and given None as the command for the button.To have buttons to call functions with different arguments you can use global variables, although I can't recommend it:What I would do is make a class whose objects would contain every variable required and methods to change those as needed:
One simple way would be to configure button with lambda like the following syntax:
I believe should fix this
Use a lambda to pass the entry data to the command function if you have more actions to carry out, like this (I've tried to make it generic, so just adapt):This will pass the information in the event to the button function. There may be more Pythonesque ways of writing this, but it works for me.
JasonPy - a few things... if you stick a button in a loop it will be created over and over and over again... which is probably not what you want. (maybe it is)...The reason it always gets the last index is lambda events run when you click them - not when the program starts. I'm not sure 100% what you are doing but maybe try storing the value when it's made then call it later with the lambda button. eg: (don't use this code, just an example)then you can say....hope this helps!  
For posterity: you can also use classes to achieve something similar. For instance:Button can then be simply created by:This approach also allows you to change the function arguments by i.e. setting instance1.x = 3.
Building on Matt Thompsons answer : a class can be made callable so it can be used instead of a function:
The best thing to do is use lambda as follows:


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions
https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python
