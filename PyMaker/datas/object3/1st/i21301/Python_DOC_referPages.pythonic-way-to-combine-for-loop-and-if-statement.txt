Natural Text
I know how to use both for loops and if statements on separate lines, such as:And I know I can use a list comprehension to combine these when the statements are simple, such as:But what I can't find is a good example anywhere (to copy and learn from) demonstrating a complex set of commands (not just "print x") that occur following a combination of a for loop and some if statements. Something that I would expect looks like:Is this just not the way python is supposed to work?
You can use generator expressions like this:
As per The Zen of Python (if you are wondering whether your code is "Pythonic", that's the place to go):Beautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Flat is better than nested.Readability counts.The Pythonic way of getting the sorted intersection of two sets is:Or those elements that are xyz but not in a:But for a more complicated loop you may want to flatten it by iterating over a well-named generator expression and/or calling out to a well-named function. Trying to fit everything on one line is rarely "Pythonic".Update following additional comments on your question and the accepted answerI'm not sure what you are trying to do with enumerate, but if a is a dictionary, you probably want to use the keys, like this:
I personally think this is the prettiest version: Editif you are very keen on avoiding to use lambda you can use partial function application and use the operator module (that provides functions of most operators).https://docs.python.org/2/library/operator.html#module-operator

I would probably use:
The following is a simplification/one liner from the accepted answer: Notice that the generator was kept inline.  This was tested on python2.7 and python3.6  (notice the parens in the print ;) )
You can use generators too, if generator expressions become too involved or complex:
Use intersection or intersection_updateintersection :intersection_update:then b is your answer


Answer URL
https://docs.python.org/3/reference/datamodel.html#specialnames
