Natural Text
I define a learner and a worker. I wish that learner runs its member function learn in the background, and once in a while, worker sends learner some information to print.The following code is an exampleHowever, learner will not run log_score until learn is complete, which is not what I want. I've thought of a way to make it work: Instead of calling Learner.learn explicitly, I have Worker call it. Specifically, I redefine learn and sample as followsAlthough this works, but now I have to control how often learn should be called, which seems kind of redundant. Is there any way better to achieve what I want?
This is a great question. In Ray's actor model, each actor task is atomic in the sense that the actor will execute task at a time and will not begin a new one until the previous one has returned. This choice simplifies reasoning about concurrency, but makes it harder to have the actor do two things at once.To make something like this work, you essentially have two choices.Threading: Have the actor do some work in a background thread and leave the actor's main thread idle so that it can execute new tasks.Smaller Units of Work: This means restructuring the code so that no actor method loops forever. In your example, you can make the learn function return after some number of passes through the loop. In that case, new learn tasks must continually be submitted. It's even possible to have the learn method submit return and submit itself in order to allow other methods to be scheduled in between. There are many ways to do this, which will depend on your application, but this one example is below.


Answer URL
https://docs.python.org/3/library/threading.html
