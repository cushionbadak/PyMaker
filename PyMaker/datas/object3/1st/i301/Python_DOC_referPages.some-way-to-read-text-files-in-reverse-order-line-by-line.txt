Natural Text
I want to read text file given below in reverse direction line by line. I don't want to use readlines() or read().a.txtexpected result:My Solution:
Here's a way to do it without reading the whole file into memory all at once. It does require first reading the whole file, but only storing where each line starts. Once that is known, it can use the seek() method to randomly access each one in any order desired.Here's an example using your input file:Output:UpdateHere's a version that does the same thing but uses Python's mmap module to memory-map the file which should provide better performance by taking advantage of your OS/hardware's virtual-memory capabilities. This is because, as PyMOTW-3 put's it:Memory-mapping typically improves I/O performance because it does not involve a separate system call for each access and it does not require copying data between buffers â€“ the memory is accessed directly by both the kernel and the user application.Code:
No, there isn't a better way to do this.  By definition, a file is a sequential organization of some basic data type.  A text file's type is character.  You are trying to impose a different organization on the file, strings separated by newlines.Thus, you have to do the work to read the file, re-cast into your desired format, and then take that organization in reverse order.  For instance, were you to need this multiple times ... read the file as lines, store the lines as data base records, and then iterate through the records as you see fit.The file interface reads in only one direction.  You can seek() to another location, but the standard I/O operations work only with increasing location descriptions.For your solution to work, you'll need to read in the entire file -- you can't reverse the file descriptor's implicit iterator.
Whlie @martineau's solution gets the job done without loading the entire file into the memory, it nevertheless wastefully reads the entire file twice.An arguably more efficient, one-pass approach is to read from the end of the file in reasonably large chunks into a buffer, look for the next newline character from the end of the buffer (minus the trailing newline at the last character), and if not found, seek backwards and keep reading in chunks and prepending the chunks to the buffer until a newline character is found. Use a larger chunk size for more efficient reads as long as it's within the memory limit:so that:outputs:


Answer URL
https://docs.python.org/3/library/mmap.html#module-mmap
