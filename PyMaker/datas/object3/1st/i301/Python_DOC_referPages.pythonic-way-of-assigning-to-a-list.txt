Natural Text
I have a list of dictionaries with all of them having the same keys such asI would like to create a new dictionary where the ones which share the same value for a specified key (here animal) are grouped together. While grouping them I would like to remove the 'animal' key from the initial dictionaries. For the given example it would like thisI achieve this with the code below, but I am quite sure that there must be a more elegant approach to this. Is it possible to write this as a one-liner? 
The easiest way is probably using a defaultdict. I'm assuming you actually want to drop the "animal" tag in the output, since you also have missing commas in the input so likely a typo.Depending on how many key/value pairs you have in your dictionary, it may be quicker to simply remove the key from the dictionary, rather than use a dictionary comprehension to rebuild a dictionary excluding that key. For a sample this size, it really doesn't matter for speed, and it doesn't risk altering your initial data.
This would be your fixed attempt - but it needs pre-sorting and is less effective then the defaultdict:Output:Doku:itertools.groupby()Make an iterator that returns consecutive keys and groups from the iterable. The key is a function computing a key value for each element. If not specified or is None, key defaults to an identity function and returns the element unchanged. Generally, the iterable needs to already be sorted on the same key function.
Not be one liner but defaultdict is the one to go with


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/itertools.html#itertools.groupby
