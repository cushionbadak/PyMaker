Natural Text
I have list of tuples like :The third element of all the tuples are the same. I am trying to convert this list into a dictionary in the following way:UPDATE:As of now I am doing it manually but I have around 1000's of tuples in a list with the same timestamp, but sometimes I do also have different timestamps. I am trying to automate this process by writing a function as I need to re-use the code again and again for multiple list of tuples to create list of dictionaries but I'm not sure how to approach this problem. Any help would be appreciated?
If the timestamp is guaranteed to be the same, or otherwise you don't care if it isn't, then just use:The second line takes the first two elements of each tuple, and passes those directly to the dict.update() method. Like the dict() constructor, that method accepts an iterable of (key, value) tuples, and with slicing, that's what you have already.Demo:If speed is of the essence, you can use operator.itemgetter() to do the fetching, and use the Python 3 version of map() to apply it when updating:With those changes the whole result.update() loop is executed in native C code.If your timestamps are not guaranteed to be the same and you need to produce a list, you need to split out (group) your tuples by timestamp. If your input is at least grouped (all entries with the same timestamp appear consecutively), then you can use itertools.groupby() to do the grouping. The way you then build each dictionary remains the same; we can use the itemgetter() calleble here too to produce the grouping key:If they are not grouped, then I'd not sort the input. You want to shunt them into each timestamp group linearly, using a dictionary to do the grouping, then just sort the values of that dictionary when producing the output:This gives you the grouped dicitonaries in timestamp order. If output order doesn't matter, just use result = list(groups.values()).
Accounting for changing timestamps:OUTPUT:

I think the simplest way is the following:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
