Natural Text
I have two classes A and B, each one storing references to objects of the other class in lists:Now, my app builds two lists, one of objects of A, one of objects of B, having cross references.Obviously, if I call json.dumps() on either list_of_..., I get a circular reference error.What I want to do to circumvent that issue is to dump JSON with list of elements name attributes instead of lists of objects themselves:The only way I can think of is to maintain in each class an additional list of strings (respectively my_Bs_names and my_As_names) and to use JSONEncoder as follows:If I am not mistaken, I would get the following result:Is there a more elegant way of getting this result? For instance one that does not require any additional lists of strings?
General JSONEncoder class that prevents circular reference errorThe following encoder class MyEncoder performs recursive encoding of the nested objects until a circular reference is detected, whose "name" attribute is returned instead of the object itself. Output:Using a custom toJSON methodYou can implement a serializer method in your classes.Output:
The best-practice approach is to record the id() values of objects already seen, when encoding. id() values are unique for objects with overlapping lifetimes, and when encoding, you can generally count on the objects not being short-lived. This works on any object type, and doesn't require the objects to be hashable.Both the copy and pickle modules use this technique in a memo dictionary that maps id() values to their object for later reference.You can use this technique here too; you really only need to keep a set of the ids to detect that you can return the .name attribute. Using a set makes testing for repeated references fast and efficient (membership testing takes O(1) constant time, as opposed to lists, which take O(N) linear time):then use json.dumps() with this class:For your sample input, this produces:
How about this?Classes like A and B only need to specify a class attribute (_deep_fields) listing their attributes that may lead to circular dependencies (need to be "shallow"-serialized)They also need to inherit from ShallowSerializable which simply ignores attributes in _deep_fields if shallow is TrueThe encoder encodes all keys of the object, but calls make_shallow on all values, to make sure that shallow=True is sent to any objects that inherit from ShallowSerializableThe solution is generic, in the sense that any other class that needs to implement this behavior only needs to inherit from ShallowSerializable & define _deep_fields.Usage:
You Can do it by changing what string representation of object or say representation of python object made through python magic method this how many libraries changing their console and string representation insted of using hexes of class in return Run Code HereYou can also now optimise your code because it is just changing your representation how it represented without extra class bundle


Answer URL
https://docs.python.org/3/library/copy.html
https://docs.python.org/3/library/pickle.html
