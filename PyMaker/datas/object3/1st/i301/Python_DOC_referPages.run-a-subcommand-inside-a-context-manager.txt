Natural Text
In the context of a python click CLI application, I would like to run a subcommand inside of a context manager that would be setup in a higher level command. How is it possible to do that with click? My pseudo-code looks something like:And this would be called like:Edit: note that the above example is forged to better illustrate the missing functionality of click, not that I want to solve this problem in particular. I know I could repeat the same code in all commands and achieve the same effect, which I already do in my real use case. My question is precisely on what could I do only in the main function, that would run all transparently subcommands in a context manager.
Decorating commandsDefine a context manager decorator using contextlib.ContextDecoratorUse click.pass_context decorator on main(), so you can explore click contextCreate an instance db_context of the context managerIterate on commands defined for group main using ctx.command.commandsFor each command, replace the original callback (function called by the command) with the same callback decorated with the context manager db_context(cmd)This way you will programmatically modify each command to behave just like:But without requiring to change your code beyond your function main().See the code below for a working example:It does what you describe in your question, hope it will work as expected in real code.Using click.pass_contextThis code below will give you an idea of how to do it using click.pass_context.Another solution to avoid explicit with statement could be passing the context manager as a decorator using contextlib.ContextDecorator, but it would likely be more complex to setup with click.


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.ContextDecorator
https://docs.python.org/3/library/contextlib.html#contextlib.ContextDecorator
https://docs.python.org/3/reference/compound_stmts.html#the-with-statement
