Natural Text
Basically I am making an app to better assist me at managing my ebay store. I am still very new to programming and OOP.  After watching some tutorials I pieced together the following code. Everything so far works pretty well.  What I am currently stuck on is when the user inputs an item for inventory, it is not saving it.  And, when the user wants to view the inventory the item they added wont populate. Any input or suggestions would be much apprenticed. 
You need to read about Scope, OOP and dicts:You are not adding to your Inventory.All_Inventory  - you create a new local with All_Inventory = item_infohttps://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces Short description of the scoping rules?You mix up static class attributes and instance attributes, read:https://docs.python.org/3/tutorial/classes.html#class-objects.What is the difference between @staticmethod and @classmethod?You are deleting / accessing your dictionary wrongly - see :https://docs.python.org/3/tutorial/datastructures.html#dictionariesDelete an element from a dictionaryFixed:Output:
Sorry to rework your code pretty extensively, but I think this is more like what you are going for:You had a variable user that did nothing. You can simply enter an infinite loop with while True:. If you wanted to loop the way you did, then instead of a break you could have put a user = False to break out of the loop. This is sometimes a nifty trick, but doesn't make sense here I think. It seemed to me the inventory was really the only thing that would benefit by being stored in your class, and the methods could then access it to adjust it via a self.all_inventory. I moved your code to ask for item inputs to the add_item() and sale_status() methods, so now the main block of code looks a lot cleaner. I also wrapped it in if __name__ == "__main__": so that you can import this class to another project without running the entire program! I threw in some basic error checking with try: and except: clauses also. I think you were misunderstanding the difference between a Class and an Instance. So in my code the Class is EbayInventory, but the Instance is my_app. You create instances of your class just like I did with my_app = EbayInventory() and then the self now refers to my_app. In this manner I can call my_app.add_item(). You can have several instances of objects though, and they each have their own space in your computers memory. So you could have said:And only the app1 will have any items, whereas app2 is still an empty list, but still has the methods to build an inventory via app2.add_item(). To answer your main question though, you never call your function Inventory() and therefore it doesn't exist to hold your information. When you call item_info = Ebay_Inventory(manufacturer, object_type, price) in fact you are making an Instance of a class, which is really nonsensical to do here because that means on the next line you could say item_info.add_item() and this would make another instance, yet you are not saving this information anywhere so you can never retrieve it!


Answer URL
https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces
https://docs.python.org/3/tutorial/classes.html#class-objects
https://docs.python.org/3/tutorial/datastructures.html#dictionaries
