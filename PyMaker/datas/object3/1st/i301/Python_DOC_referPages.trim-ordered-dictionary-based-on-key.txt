Natural Text
What is the fastest way to "trim" a dictionary based on they key?My understanding is that dictionaries now preserve order since Python 3.7I have a dictionary that contains key (type datetime): val (type float).The dictionary is in a sorted (chronological) order.I would like to trim the dictionary, removing everything outside of start_date and end_date. Dictionary can have 1000s of values.Is there a faster method than:
If your dictionaries have 1000s of keys, and you are removing keys from the start and end of the ordered sequence of timestamps, consider using binary search to find the cut-off points in a list copy of the keys. Python includes the bisect module for this:I've run some time trials to see if this is going to make a difference against your typical datasets; as expected, it pays off when the number of keys removed is significantly lower than the length of the input dictionary.Time trial setup (imports, building the test data dictionary and start and end dates, defining the test functions)Trial outcome:(The test subtracts the base-line cost of making a dict copy first).However, there may well be more efficient data structures for these kind of operations. I checked out the sortedcontainers project as it includes a SortedDict() type that supports bisection on the keys directly. Unfortunately, while it performs better than your iteration approach, I can't make it perform better here than bisecting on a copy of the keys list:I may be using the project wrong, however. Deleting keys from SortedDict objects is O(NlogN) so I suspect that that's where this falls down. Creating a new SortedDict() object from the other 9950 key-value pairs is slower still (over 2 milliseconds, not something you want to compare against the other approaches).However, if you were to use the SortedDict.irange() method you can simply ignore values, not delete them, and iterate over a sub-set of dictionary keys:eliminating the need to delete anything. The irange() implementation uses bisection under the hood.
test result


Answer URL
https://docs.python.org/3/library/bisect.html
https://docs.python.org/3/library/timeit.html
