Natural Text
So my program is a game and I am developing the menu, I am taking an OOP approach and I understand as I have been told before that the class Button should probably just handle clicking with methods. I have the buttons loading where the play/quit buttons should load first as the first stage of the menu, then the second stage has 4 buttons for easy/med/hard/vet difficulty and the third stage is level number 1/2/3/4. I had it working before with like a mix of OOP and not OOP which I don't want where I could click buttons through to each one. However now I have the problem that I am not sure how to go about OOP getting responses for loading each set of buttons and also to stop a click going through every button. HelpP.S the code I am uploading does not have the images for the text on each button as well as the background and title etc. I will speech-marks or has them out except the text images because they are needed to distinguish each button LoadImage is a class that just draws an image to the screen. 
So I think there's two issues here.  The first, is how to group the buttons into some kind of logical and functional set.  The other issue is tracking the state of the user, and using that to decide what it is they see on-screen.  My understanding of the button-sets is that for a given state of the game, a different set of buttons is shown.So when you think "state" in programming, generally you also think "enum".  In the code below I have created two sets of enumerated types, one for the game state, another for the Button Events. Basically enumerated types are just nicely-named numbers.  Their use makes the code more readable - but it is a bit more work. For example:is much less understandable than:Any user-driven program has sub-sections, where control is not necessarily about the "main business" of the program.  It might be opening a file, or choosing a difficulty - essentially the control input (mouse movements, clicks and keyboard key events, etc.) need to be handled differently. So we're keeping track of the game_state, to know which part we're handling at the moment.  For this particular program, it allows us to control which ButtonSet menu to draw to the screen.To group a set of Button objects into some kind of group I created the un-imaginatively named ButtonSet.  It's basically a wrapper object around a list of buttons, with helper functions to operate on the entire set at once.While I was writing some demo' code for these, it occurred to me that for event handling, it was time consuming to write (and for python to interpret) lots of if button_name == "blah" all over the place.  So I created a set of unique button events with a ButtonEvent enum.  When a button is clicked, it now posts a unique event number rather than a single click-event for all buttons. Next I realised that the width, height, etc. fields could all be stored in a PyGame rect, and the click checked with the point-collision function of the rect class.  This simplified the code a bit.To be honest, the Button and ButtonSet closely follow the look and usage of PyGame's Sprite and SpriteGroup classes.  It would probably make for better code if the Button class inherited pygame.sprite.Sprite, but I don't think its really  necessary for a button, and your implementation with a text-bitmap over a coloured background is a slightly different setup too.


Answer URL
https://docs.python.org/3/library/enum.html
