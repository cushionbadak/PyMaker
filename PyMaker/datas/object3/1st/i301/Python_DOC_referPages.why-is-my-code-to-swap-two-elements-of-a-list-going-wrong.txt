Natural Text
Here is my code:I'm trying to swap a[0] with a[a[0]] (i.e. a[1] in this case), so the result I expect is:The result I get is [2, 2, 1, 4, 5], which is not what I want.if I simplify a[0], a[a[0]] = a[a[0]], a[0] to a[0], a[1] = a[1], a[0], it works.How can I make this swap inside a list work like a, b = b, a does? 
That assignment's doing quite a lot. Let's break everything down …Ok, that's the easy bit. Next:The first thing that happens in any assignment is that the right hand side is evaluated, so:a[a[0]], a[0] reduces to a[1], a[0], which evaluates to (2, 1).Then, each assignment target in turn gets one of those items from the right hand side assigned to it:Now that's done, a looks like this:Now we'll do the second assignment:But wait! a[0] is now 2, so this reduces toAnd, lo and behold, if we look at a again, it's ended up as:What you've discovered is that although Python claims to be able to swap two values simultaneously with e.g. a, b = b, a, that isn't really true. It almost always works in practice, but if one of the values is part of the description of the other one – in this case, a[0] is part of the description of a[a[0]] – the implementation details can trip you up.The way to fix this is to store the initial value of a[0] before you start reassigning things:After which, a looks the way you'd expect:
python system lib dis module may help. The dis module supports the analysis of CPython bytecode by disassembling it. you can disassembling it to see how the swap works internally.https://docs.python.org/3/library/dis.html


Answer URL
https://docs.python.org/3/library/dis.html
