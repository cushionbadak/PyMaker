Natural Text
Is there a way in python to programmatically determine the width of the console? I mean the number of characters that fits in one line without wrapping, not the pixel width of the window.EditLooking for a solution that works on Linux
uses the 'stty size' command which according to a thread on the python mailing list is reasonably universal on linux. It opens the 'stty size' command as a file, 'reads' from it, and uses a simple string split to separate the coordinates.Unlike the os.environ["COLUMNS"] value (which I can't access in spite of using bash as my standard shell) the data will also be up-to-date whereas I believe the os.environ["COLUMNS"] value would only be valid for the time of the launch of the python interpreter (suppose the user resized the window since then).
Not sure why it is in the module shutil, but it landed there in Python 3.3, Querying the size of the output terminal:A low-level implementation is in the os module.A backport is now available for Python 3.2 and below: https://pypi.python.org/pypi/backports.shutil_get_terminal_size
useEDIT: oh, I'm sorry. That's not a python standard lib one, here's the source of console.py (I don't know where it's from).The module seems to work like that: It checks if termcap is available, when yes. It uses that; if no it checks whether the terminal supports a special ioctl call and that does not work, too, it checks for the environment variables some shells export for that.This will probably work on UNIX only.
Code above didn't return correct result on my linux because winsize-struct has 4 unsigned shorts, not 2 signed shorts:hp and hp should contain pixel width and height, but don't.
I searched around and found a solution for windows at :http://code.activestate.com/recipes/440694-determine-size-of-console-window-on-windows/and a solution for linux here.So here is a version which works both on linux, os x and windows/cygwin :
Starting at Python 3.3 it is straight forward:https://docs.python.org/3/library/os.html#querying-the-size-of-a-terminal
It's either:The shutil function is just a wrapper around os one that catches some errors and set up a fallback, however it has one huge caveat - it breaks when piping!, which is a pretty huge deal.To have get terminal size when piping use os.get_terminal_size(0) instead.First argument 0 is an argument indicating that stdin file descriptor should be used instead of default stdout. We want to use stdin because stdout detaches itself when it is being piped which raises in this case raises an error..I've tried to figure out when would it makes sense to use stdout instead of stdin argument and have no idea why it a default here.
It looks like there are some problems with that code, Johannes:getTerminalSize needs to import oswhat is env? looks like os.environ.Also, why switch lines and cols before returning? If TIOCGWINSZ and stty both say lines then cols, I say leave it that way. This confused me for a good 10 minutes before I noticed the inconsistency.Sridhar, I didn't get that error when I piped output. I'm pretty sure it's being caught properly in the try-except.pascal, "HHHH" doesn't work on my machine, but "hh" does. I had trouble finding documentation for that function. It looks like it's platform dependent.chochem, incorporated.Here's my version:
Many of the Python 2 implementations here will fail if there is no controlling terminal when you call this script.  You can check sys.stdout.isatty() to determine if this is in fact a terminal, but that will exclude a bunch of cases, so I believe the most pythonic way to figure out the terminal size is to use the builtin curses package.
I was trying the solution from here that calls out to stty size:However this failed for me because I was working on a script that expects redirected input on stdin, and stty would complain that "stdin isn't a terminal" in that case.I was able to make it work like this:
@reannual's answer works well, but there's an issue with it: os.popen is now deprecated. The subprocess module should be used instead, so here's a version of @reannual's code that uses subprocess and directly answers the question (by giving the column width directly as an int:Tested on OS X 10.9
Try "blessings"I was looking for the very same thing. It is very easy to use and offers tools for coloring, styling and positioning in the terminal. What you need is as easy as:Works like a charm in Linux. (I'm not sure about MacOSX and Windows)Download and documentation hereor you can install it with pip:
If you're using Python 3.3 or above, I'd recommend the built-in get_terminal_size() as already recommended. However if you are stuck with an older version and want a simple, cross-platform way  of doing this, you could use asciimatics.  This package supports versions of Python back to 2.7 and uses similar options to those suggested above to get the current terminal/console size.Simply construct your Screen class and use the dimensions property to get the height and width.  This has been proven to work on Linux, OSX and Windows.Oh - and full disclosure here: I am the author, so please feel free to open a new issue if you have any problems getting this to work.
Here is an version that should be Linux and Solaris compatible. Based on the posts and commments from madchine. Requires the subprocess module.


Answer URL
https://docs.python.org/3/library/os.html#querying-the-size-of-a-terminal
