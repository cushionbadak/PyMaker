Natural Text
I try to unpack a list of values from bytes. I want to read and unpack them together but i meet this thing...When we calculate a size of concatenated string fmt we get one result, if we calculate a size of all parts of string fmt and sum them, we get another result (expected result).May be I does not understand something?
In "native" byte order (the default), the struct module applies the same padding rules as C does to its structures. So a padding byte occurs between 3B and 2H (because H is two byte aligned), and another between 1B and 4H.Per the docs:Note: By default, the result of packing a given C struct includes pad bytes in order to maintain proper alignment for the C types involved; similarly, alignment is taken into account when unpacking. This behavior is chosen so that the bytes of a packed struct correspond exactly to the layout in memory of the corresponding C struct. To handle platform-independent data formats or omit implicit pad bytes, use standard size and alignment instead of native size and alignment: see Byte Order, Size, and Alignment for details.So just use a non-default size/alignment to "fix" this if appropriate.


Answer URL
https://docs.python.org/3/library/struct.html
https://docs.python.org/3/library/struct.html#struct-alignment
