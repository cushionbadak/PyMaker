Natural Text
BackgroundI'm currently using a technique that is perfectly demonstrated in another Stackoverflow post to create the Cartesian product of a dictionary of lists, i.e.:ProblemHere's my sample dictionary, d:The problem I'm running into, is that I want to use this technique to create agenerator. However, I want to control the order in which certain lists are"swept". For example, here's a common result for the first few iterationsgenerated by my code:However, I need to be able to control the ordering of how the product generatesthese permutations. The code which is "fed" the dictionaries has a high "cost"when I toggle the "on"/"off" value of "status", but no penalty is incurred forchanging the "numbers" or "letters" elements. For example, this would be theideal set of iterations yielded by the generator:In short, I want to be able to minimize the number of transitions from one value to another by showing "preference" to certain members of the dictionary, d.QuestionHow can I accomplish this?ConclusionUsing the accepted answer, I generated this code snippet:Code ListingSample Output
If you're using Python 3.5 or later versions, you can make status the first key in your dict instead:For earlier versions, use collections.OrderedDict in place of a dict.


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
https://docs.python.org/3/library/itertools.html#itertools.product
