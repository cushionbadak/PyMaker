Natural Text
I try to pickle a QPolygon and load it afterwards, but I get an error. I have done this on Python2 with PyQt4 but want to use it now on Python3 with PyQt5.I do not want to read/load data generated with Python 2! The pickle file is simply used to temporarily store Qt-elements like QPolygons from Python3 to Python3.I have tested different protocol options from 1-4 for pickle.dump() and tried to use the "fix_imports=True" option which should not make a difference in Python3.Here is my simplified codeI get the following error message but can't do anything with it:Is there maybe any alternative to pickle?Thanks in advance!
You can use QDataStream to serialize / deserialize Qt objects:
A bit of searching on the docs tells you how you can implement custom pickling for custom classes via the __reduce__ method. Basically you return a tuple including the constructor for the new object to be created when un-pickling as well as a tuple of arguments that will be passed to the constructor. Optionally you then can then pass a state object (see __getstate__ and __setstate__) and some iterators to add positional data and key-value data.by subclassing QPolygon we can add picklability as such: (this could probably be cleaned up / restructured, but this is the first implementation I got to that worked)
This must be a bug in pyqt5, since the documentation states that pickling QPolygon is supported. Please therefore post a bug report to the pyqt mailing list using your example.In the meantime, by far the simplest alternative is to use QSettings:Output:This can be used with any type PyQt supports for pickling, plus anything else that PyQt can convert to/from a QVariant. PyQt also supports a type argument to QSettings.value() that can be used to explicitly state the required type. And since QSettings is designed for storing application config data, any number of objects can be stored in the same file (somewhat like python's shelve module).
Inspired by the previous answers I created a function that takes some kind of Qt that supports QDataSteam and returns a class that inherits from that class and is picklable, in the following example I show with QPoygon and QPainterPath:Using the OP code:


Answer URL
https://docs.python.org/3/library/pickle.html#object.__reduce__
https://docs.python.org/3/library/shelve.html#module-shelve
