Natural Text
How can I reset a loop that iterates over a set? A common answer for iterating over a list is to reset the index you are using to access the list, however sets do not support indices. The point is to be able to iterate over a large set of objects, perform some action against each element until a result matches the result I require. The functionality I am searching for is the ability to reset a loop. Meaning restart the iteration from the beginning to ensure I visit every element again for whatever reason. How can I reset the following loop?I'm using python 2.7 for this specific problem, but I'd also welcome python 3 solutions.
One way to do so would be by using iterators. You could define an iterator by simply calling iter() on your set, and call its next method on each iteration. When the condition is met, you can simply create again the iterator object from the set and repeat the process:
I would just convert the set to a list and use a while loop:
Here's a neat trick that takes any kind of iterable (including sets), and returns an instance of a ReIterable class (our short name for "resettable iterable").We can then use the re-iterable in a for loop as for r in my_reiterable, just as we would use the original iterable in for i in my_iterable.Inside the for loop, whenever the conditions are right for re-setting the loop, we only have to call the reset() method on the re-iterable.Here's an example usage with a set s (but it could just as well have been a list or any other iterable):Here's the output (Note that the first time the user was prompted to reset, the user responded with a y, causing the set to be iterated all over again. The second time the user was prompted to reset, the user responded with a n, and the loop proceeded without getting reset):How does this work? The wrapper class ReIterable makes use of the protocol between a for loop and an iterable.Here's what the ReIterable class looks like (but you only need to know how to use the class, though, as shown above):Note:Besides the fact that it supports the reset operation, the ReIterable class essentially delegates all the iteration work to the original iterable or its iterator. The actual "resetting" involves junking the old iterator and getting a new one (as also in @yatu's answer).


Answer URL
https://docs.python.org/3/howto/functional.html
