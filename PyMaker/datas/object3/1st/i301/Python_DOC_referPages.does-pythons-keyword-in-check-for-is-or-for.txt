Natural Text
What exactly does the keyword in check for in python, generally? equality, identity, something else?Example:Suppose I have two classes X and Y with different __eq__ operatorsNow I can doThis suggests a check for identity to me.But I can also dowhich suggests a check for equality. The only theory I came up with is that it first checks for identity, and if this is not the case, then check for equality. Is that correct?
Checking containment on a list is equivalent to looking for identity or equality on each element.From the documentation:For container types such as list, tuple, set, frozenset, dict, or collections.deque,  the expression x in y is equivalent to any(x is e or x == e for e in y)(With the caveat that the objects in a hash-based container, like a set, must have a hash implementation that is consistent with their definition of equality.)For user-defined container types, the behaviour of in is determined by the __contains__ method.
The true answer is that by itself, in doesn't do any test - it's up to the container (the object after in in your expression) implementation. in will actually invoke either container.__contains__(obj)  if it's defined, else container.__getitem__(obj), and return the result. How the container implements the test (identity, equality, arcane algorithm based on the moon's phase and the captain's birthdate) is the container's concerns.


Answer URL
https://docs.python.org/3/reference/expressions.html#membership-test-operations
https://docs.python.org/3/reference/expressions.html#membership-test-operations
