Natural Text
So, my use case is a datastructure which have optional fields.. but should be able to modify it if desired..
A defaultdict should be appropriate for what you want.  It works by providing it a function on construction which it calls every time an unset element is accessed.  Here's a demo:
Tuples are, by definition, immutable. Namedtuples follow this pattern as well.In python3 it appears there is a SimpleNamespace [1] that you can use. If you want to simply use a read/write datastructure though you could create a class and put constraints on its members.[1] - Why Python does not support record type i.e. mutable namedtuple
A namedtuple, like a tuple is not modifiable. Since the question is about namedtuple, in some case you may find ok (or sometimes even preferable) to create a new object with the _replace method. Of course the other references to the same object will be unchanged.
For a slight variation on the above answers, why not extend the advice in the tutorial and have a class that returns None for any undefined attribute?  For example:This is much the same as a defaultdict, but accessible via direct attributes much like a named tuple.
Why not just use a class?


Answer URL
https://docs.python.org/3/library/typing.html#typing.NamedTuple
