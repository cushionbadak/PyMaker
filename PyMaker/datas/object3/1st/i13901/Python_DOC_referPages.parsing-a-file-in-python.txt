Natural Text
Caveat emptor: I can spell p-y-t-h-o-n and that's pretty much all there is to my knowledge. I tried to take some online classes but after about 20 lectures learning not much, I gave up long time ago. So, what I am going to ask is very simple but I need help:I have a file with the following structure:And this block repeats itself hundreds of times in the same file.Other than object_name_here being unique and required, all other lines may or may not be present, email addresses can be from none to 10+ different email addresses.what I want to do is to export this information into a flat file, likes of /etc/passwd, with a twistfor instance, I want the block above to yield a line like this:again, the number of fields or length of the content fields are not fixed by any means. I am sure this is pretty easy task to accomplish with python but how, I don't know. I don't even know where to start from.Final Edit: Okay, I am able to write a shell script (bash, ksh etc.) to parse the information, but, when I asked this question originally, I was under the impression that, python had a simpler way of handling uniform or semi-uniform data structures as this one. My understanding was proven to be not very accurate. Sorry for wasting your time.
As jaypb points out, regular expressions are a good idea here. If you're interested in some python 101, I'll give you some simple code to get you started on your own solution.The following code is a quick and dirty way to lump every six lines of a file into one line of a new file: This isn't exactly what you want to do but it gets you close. For instance, if you want to get rid of " - " from the beginning of the email addresses and replace it with "=", instead of just appending to outputLine you'd do something like that last bit is a python slice, [3:] means "give me everything after the third element," and it works for things like strings or lists.That'll get you started. Use google and the python docs (for instance, googling "python strip" takes you to the built-in types page for python 2.7.10) to understand every line above, then change things around to get what you need. 
Since you are replacing text substrings with different text substrings, this is a pretty natural place to use regular expressions.Python, fortunately, has an excellent regular expressions library called re.You will probably want to heavily utilizeLook at the documentation here:https://docs.python.org/3/library/re.htmlUpdate: Here's an example of how to use the regular expression library:Example output:


Answer URL
https://docs.python.org/3/library/re.html
