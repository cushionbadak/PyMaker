Natural Text
How can I get the Cartesian product (every possible combination of values) from a group of lists?Input: Desired output:
In Python 2.6+Documentation:Python 3 - itertools.product

For Python 2.5 and older:Here's a recursive version of product() (just an illustration):Example:
with itertools.product:
In Python 2.6 and above you can use 'itertools.product`. In older versions of Python you can use the following (almost -- see documentation) equivalent code from the documentation, at least as a starting point:The result of both is an iterator, so if you really need a list for furthert processing, use list(result).
I would use list comprehension : 
Here is a recursive generator, which doesn't store any temporary listsOutput:
Although there are many answers already, I would like to share some of my thoughts:Iterative approachRecursive ApproachLambda Approach
Just to add a bit to what has already been said: if you use sympy, you can use symbols rather than strings which makes them mathematically useful.About sympy.
A minor modification to the above recursive generator solution in variadic flavor:And of course a wrapper which makes it work exactly the same as that solution:with one trade-off: it checks if recursion should break upon each outer loop, and one gain: no yield upon empty call, e.g.product(()), which I suppose would be semantically more correct (see the doctest).Regarding list comprehension: the mathematical definition applies to an arbitrary number of arguments, while list comprehension could only deal with a known number of them.
Recursive Approach:Iterative Approach:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
