Natural Text
How could I define a class such that the object name can be used as a variable? I am writing a class for numerical analysis, which contain only one numpy array as instant variable and many mathematical operations. For convenience and readability, it would be nice to access the numpy array simply by it's object name. For example, a numpy array (or objects from many other packages like matplotlib, pandas, etc...) can be called directly,This is something like what I have (definition methods are omitted)This prints foo as pointer and content of foo.dataI tried self = np.array(input_array) in the constructor but it still gives an address. I am thinking something like overloading object name but I couldn't find any information. If it is not possible, then how could those packages achieve this? I tried to read some source code of numpy and pandas. But as a newbie to python, it's nearly impossible for me to find the answer there.EDITThanks for CoryKramer and ≈Åukasz R. for suggestion of using __str__ and __repr__. But I realized what I really needed was subclassing numpy.ndarray or even pandas DataFrame such that all mathematical functions are inherited. I found these two links very helpful, for ndarray and for DataFrame, to tweek __init__ calls for my interface.
You can define the __str__ method if you want to be able to represent your class object in a printable wayAlso, you can see here for detailed discussion of when it is appropriate to use __repr__ vs __str__ for your class.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__str__
