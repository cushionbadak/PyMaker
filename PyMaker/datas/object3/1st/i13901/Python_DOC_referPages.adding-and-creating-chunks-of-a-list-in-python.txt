Natural Text
This is my listi tried to do thisNow i'd like to add a 'data' to every chunk so that it would look likebut tuples are immutable and i'd have to destroy them, append and create them again.is there a better way to accomplish this in python?

You can use itertools.repeat to create a new iterator contain the data and then apply the zip function on your prior iterators and new repeated iterator :Note that as @Padraic Cunningham mentioned on his answer there is no need to call the len function in itertools.repeat.So you can simply use repeat('data')If you want to modify the list of tuples after creation you can use a list comprehension to modify your tuples by adding the new elements to the tuples.Example :
This should be a linear time way to do it:If I am not ignoring some Python intricacy, since tuple() has complexity O(n), the slice accessor has complexity O(k) and the overhead caused by the +["data"] isn't greater than simply appending a node at the end of a list (which is O(1)), it should be O((len(list1) / k) * k ^ 2) aka O(n k), where k is fixed to 3 in your case.means:[list1[x:x+3]+["data"] for x in (0, 3, ... 12)]aka:It is also well behaved with odd lists:
Since tuples are immutable, if you're adding and deleting from them often, you're perhaps better off using lists of lists:
How about adding them to the zip function when you are creating the chunked_lists itself -For Python 3.x , you would need to divide the len(list1) using // operator (for it to return int) . (And most probably wrap zip in list() , since zip in Python 3.x , returns an iterator.)


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.repeat
