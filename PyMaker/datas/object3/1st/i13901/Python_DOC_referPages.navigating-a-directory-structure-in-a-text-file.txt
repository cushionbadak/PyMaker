Natural Text
I am making a Python script which will allow, among other things, downloading files from an S3 filestore.  I'm using the boto module to do this.  As a first step, I get a list of files in a user-specified bucket.  I'm storing that list in a temporary text file.  Although S3 doesn't really have directories, we fake it the same way as everyone else by prepending a fake path to the filename.  So, suppose I have the following in my bucket:This is a very, very short version of the file.  The real one is about 35,000 lines, so it needs to be presented to the user in a manageable way.  I'm looking for suggestions on how to go about this.  The way I've attempted has worked well, except that it assumed that everything would share a common directory path length.  As you can see, that's no longer true.  I'm assured that more variations will be coming, so I'd like to accommodate essentially arbitrary directory/file structures.My method was, in effect, to extract the leftmost part of each path (that is, the top-level directory), create a uniq'd list of those, and present that to the user to choose.  Then, when they choose, take everything starting with their choice and extract the second part of the path (if it existed), uniq those and present them to the user.  When they choose, concatenate their first selection, a /, and their second selection, and repeat until there's no more path left. This is unwieldy and it's hard to say, for example, "this directory contains both files and directories."How would you go about this?  I'm having a hard time wrapping my head around this without creating an awkward presentation and spaghettified code.  Thank you.
If I understand your question correctly, you want to be able to "drill down" into a list of path-like strings, correct?If so, I'd suggest the newer pathlib module in the standard library. The code I'll show allows you to do something like this:Now for the code... First, we import pathlib and convert our list of strings to a list of pathlib.Path objects:Now I'll want to make some helper functions. First is a menu function that asks the user to select an entry from a list of choices. This will return an element of the list:We'll need a list of choices to give to that function, so we'll make a path_choices function which does as much. We give this function a container of full paths and the current path the the user has selected. It then returns the "next steps" that the user can take. For example, if we have a list of possibilities: ['foo/apple', 'foo/banana/one.txt', 'foo/orange/pear/summary.txt'], and curpath is foo, then this function will return {'apple', 'banana/', 'orange/'}. Note that the directories have trailing slashes, which is nice.Lastly, we'll have a simple function to filter a container of paths, only returning paths which start with curpath, and which aren't in fact equal to curpath:After this, it's just a matter of gluing these functions together:


Answer URL
https://docs.python.org/3/library/os.path.html?highlight=os.path#module-os.path
