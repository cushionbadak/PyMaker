Natural Text
I'm trying to implement this: How to fake type with Python. I'm wrapping some .NET objects I don't control, so don't want __new__ to be called on them by the instantiation of the class in the wrapper. I've taken the code from the question above and built a simple example:When I run the following tests, everything is as expected:However, when I run gimmieFive, I get the following:Why does python think gimmieFive is a static method, when it seems to know __getattribute__ is not? It will happily run e.g.:
You are bypassing the normal descriptor protocol here. __getattribute__ does more than just look up names on the class, it also binds them if the object retrieved supports binding.Python function objects are descriptors, binding them to an instance produces a method object that, when called, passes in the bound instance as the first function argument. You are returning the original unbound function object.Re-implementing binding behaviour is.. complex. In case of a conflict between a instance attribute and a descriptor object retrieved from the class, you'll need to check for local attributes, determine if the descriptor is a data descriptor or regural descriptor, and decide which one to return.A simple and basic implementation would at the very least need to support __get__ binding:This may be enough for your usecase since your wrapped_user class doesn't have any data descriptors right now.With the above change, your specific example works as expected:


Answer URL
https://docs.python.org/3/howto/descriptor.html
