Natural Text
While learning about Python's multiprocessing package (for Python 3.4), I noticed multiprocessing.Pool is defined in the Class BaseContext in context.py.  This definition is Thus, it ends up calling multiprocessing.pool.Pool defined in pool.py.Why does the multiprocessing package define both multiprocessing.Pool and multiprocessing.pool.Pool?
context.py contains OS-dependent code. The Pool and many other values aredefined differently depending on whether sys.platform == 'win32' or not.The pool.py module contains code related the creation of a Pool given acontext. By organizing the code in this way, the developer manages to write pool.py in an OS-agnostic way. There are no if sys.platform ... statements in pool.py, for example.The __init__.py contains:which copies values from context._default_context into the multiprocessing packages' namespace. This is how multiprocessing.Pool gets defined.As a user of the multiprocessing package, you are expected to access the Poolvia multiprocessing.Pool, although it is possible to usemultiprocessing.pool.Pool too.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing
