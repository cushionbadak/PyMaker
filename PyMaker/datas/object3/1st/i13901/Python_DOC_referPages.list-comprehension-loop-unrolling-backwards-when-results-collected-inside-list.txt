Natural Text
This is a repost from earlier where I got the answer, but I just am not clear on syntax and would like someone to explain what is going on else I'll just memorize the "rule" here.This expression works as intended, but gives each character in the matrix back in a single list:If I want to have each character in the matrix remain in it's corresponding list (or row here), I would expect the below code to work (to preserve loop unrolling order where inner loop [rightmost loop in a comprehension]This gives a NameError not defined... so I've learned the appropriate structure is:I use comprehensions all the time, and I guess I just haven't encountered this yet so it caught me by surprise, but it seems creating the list within the comprehension requires us to essentially reverse the loop order where now the rightmost for statement actually executes first, rather than the left, or reversed from normal list comp syntax.  I've found several examples online and in books (e.g. squaring every element of a matrix) that confirm the syntax, but they all gloss over the fact that the for loops suddenly reverse order when a list is used to accumulate results inside the comprehension.Is it a fair statement that for statements are not always executed left/right in a comprehension, given the above?
The syntax of comprehensions is (for Python 3.x) from documentation -comprehension ::=  expression comp_forcomp_for      ::=  "for" target_list "in" or_test [comp_iter]comp_iter     ::=  comp_for | comp_ifcomp_if       ::=  "if" expression_nocond [comp_iter]Where expression can be any expression like - a literal or a mathematical expression or a function call or a tuple or list , or even another list comprehension. Any expression from the list of expressions here.for loops within a single list comprehension are always executed from left to right , as you can see from the above syntax as well. But we can have nested list comprehensions (that is list comprehension as the expression for another list comprehension, so on) .When you do - There are two list comprehensions (since you are creating a list of lists) a comprehension to create the outer list, and a comprehension to create the inner list.So the outer list comprehension looks like -And the inner list comprehension is -
no this is an instance of a nested list comprehension, it is fundamentally differentis the equivelent of your second example is the equivelent ofwithin ANY single list comprehension, the for statements are always from left to right.


Answer URL
https://docs.python.org/3/reference/expressions.html
https://docs.python.org/3/reference/expressions.html
