Natural Text
I would like to be able to write code like this:when I want obj to wait with sending updates about itself until multiple jobs are completed. I have hooks on __setattr__ that take some time to run, and the changes can be sent together.I do not want to use code like this, since it increases the risk of forgetting to leave batch_mode (which is what the with keyword is good for):I have not been able to figure out how to implement this. Just typing with obj: (and simply implementing with on obj) does not read anywhere near as descriptive.
Generally, a very simple way to implement context managers is to use the contextlib module. Writing a context manager becomes as simple as writing a single yield generator. Before the yield replaces the __enter__ method, the object yielded is the return value of __enter__, and the section after the yield is the __exit__ method. Any function on your class can be a context manager, it just needs the be decorated as such. For instance, take this simple ConsoleWriter class:Example usage:Outputing:
If you are after a simple solution and do not need any nested mode-change (e.g. from STD to BATCH to VERBOSE back to BATCH back to STD)outputs
Maybe something like this:Implement helper classIn the class itself, implement method instead of field, to use with the with statementThen use it:  
This builds on Pynchia's answer, but adds support for multiple modes and allows nesting of with statements, even with the same mode multiple times. It scales O(#nested_modes) which is basically O(1). Just remember to use stacks for data storage related to the modes.and then I have these checks wherever I need them:It is also possible to use methods for modes:just remember to save my_arg in a stack within x, and to clear it from the stack when that mode is popped from the mode stack.The code using this object can now beand there are no problems with nesting, so we can add another with obj.in_some_mode: wherever without any hard-to-debug errors or having to check every function called to make sure the object's with-statements are never nested:


Answer URL
https://docs.python.org/3/library/contextlib.html
