Natural Text
I am writing a Java collection class that is meant to be used with Jython. I want end users to be able to manipulate the collection this way:What I find in the Python documentation is the following methods:__getitem__ and __setitem__ methods should do the job for bracket operator overloading.__iadd__ method is the good candidate for the +=.How can I mix both to do want I want ? 
Note that myCollection[0] += 10.; will really be interpreted something like:Therefore, to make this work you need to implement:__getitem__ and __setitem__ on MyJavaCollection; and__iadd__ (or __add__, which Python will fall back to if __iadd__ isn't implemented) on whatever .__getitem__ is going to return, not MyJavaCollection itself - if it will return something that already implements addition, like the floats in your example, you're fine.A quick demonstration:
Your original question had a list passed as the index, so I wrote this assuming that you wanted to access the (i, j)th element of a 2D list. You can do that by defining your class with something like:Here you are overloading the __getitem__ and __setitem__ methods to retrieve or set the (i, j)th element in your values list when you pass a list of indices [i, j]. If your values are just numbers, then the syntax myCollection([1, 1]) += 10 will add 10 to values[1][1].As stated in another answer, if you are not simply storing numbers in your object, then you may need to overwrite the __add__ or __iadd__ method on whatever class your data comprises to get the behavior that you want.Testing my example class:The documentation on special method names gives you everything you could want to know about special methods like this. It can be a good place to search if you are not sure what method you may need to overload.


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-names
