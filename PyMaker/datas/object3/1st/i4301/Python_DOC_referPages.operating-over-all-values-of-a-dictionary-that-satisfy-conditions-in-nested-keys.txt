Natural Text
I'm new to using dictionaries and I've been looking how to do this but I cannot find the answer to this specific problem.I have a 4-level nested dictionary and inside the last level I have the values (arrays) of interest. It looks like this:What I need to do is operate over all arrays that satisfy certain condition(s) on a specific level.For instance, I need the averages of all the arrays that have the word 'dog' in its second level, no matter if it's domestic or stray, or if it's old or young, etc.And what if I needed to satisfy several conditions at once? For instance, average over all dogs that are young. Any help is appreciated!Edit: The reason why I was not using Pandas is because my arrays have 2 dimensions, and I'm looking how to operate over every (x,y) for each "key conditions". I realize now with some answers/comments how my title question is not clear, and how the example I provided is not showing what I was really intending to do. I'm sorry for that, I should learn not to post after a long day of work.In Pandas I've always used averages over all values, but since what I need to do here is get an array of averages according to some conditions, I thought this couldn't be done using Pandas, so after some research I thought the best idea was to start using dictionaries to store the data.In my example, what I would need to obtain is an array (x0,y0,z0) of averages. For instance, if I want the average over all "dogs" & "golden", the result should be Is this possible to achieve using Pandas?
One way without pandas is to create a function which does this for you.For large datasets, this is advisable only for isolated calls. For groups of calculations, pandas is a better option.ExplanationThe criteria are supplied to the averager function via a dictionary of {index: value} items.We use a list a comprehension to extract relevant numpy array values.Use numpy.mean with axis=0 to calculate mean by index across arrays.
What you have there is not a nested dictionary, but simply a dictionary consisting of keys which are tuples of 4 values. A nested dictionary would be more like d={'a':{'b':{'c':{...}}}}. So you can get the key of the dictionary simply by iterating over it or using d.keys(). For example, if you want to average over all arrays that have the word "dog" in the second position of the tuple:It can be done much more succinctly with list comprehension:For this question, I've assumed you want the full average over all elements of all arrays and that the arrays are all the same shape. 
Without using PandasFilter the dictionaryCreate a 2-d array from the results and get the mean of the columns:Using the in operator, this solution does Not test for values in specific positions of the dictionary keys.


Answer URL
https://docs.python.org/3/tutorial/index.html
https://docs.python.org/3/reference/expressions.html#comparisons
https://docs.python.org/3/library/operator.html#operator.itemgetter
