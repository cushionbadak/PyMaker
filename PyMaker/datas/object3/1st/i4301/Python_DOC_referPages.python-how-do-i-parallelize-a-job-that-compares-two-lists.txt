Natural Text
I have two lists and need to compare and calculate element by element. As these lists get larger, performance is suffering.  Someone recommended breaking one of the lists into N sections and running the comparison in parallel. How do I run these in parallel?
Assuming you actually do need to compare the cartesian product (every element in list1 against every element in list2, as opposed to just comparing each element in list1 with the corresponding element in list2), the easiest way is to just replace your outer loop with a map call to a ProcessPoolExecutor or a Pool. The only trick is that you don't want to try to share that mutable key dict; instead, pass back the individual dicts and merge at the end.For example:Experiment with chunksize, but first, there are ways to improve on this. For just one example, you should really be iterating directly over list1 and list2, not over range(len(list1)) and range(len(list2))â€”and doing that won't just make things simpler, but also more efficient, especially with large chunksizes. In fact, it's often best to simplify first, and then optimize.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
https://docs.python.org/3/library/multiprocessing.html#using-a-pool-of-workers
