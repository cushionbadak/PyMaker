Natural Text
Why does xx yield something different from x{2}?Please have a look at the following example:
As per the documentation of findall, if you have a group in the regex, it returns the list of those groups, either as a tuple for 2+ groups or as a string for 1 groups. In your case, your two regexes are not merely xx versus x{2}, but rather the second one is (x){2}, which has a group, when the first regex has no groups.Hence, "x" matches the group the first time, then "y" matches the group the second time. This fulfills your overall regex, but "y" overwrites "x" for the value of group 1.The easiest way to solve this in your example is to convert your group to a non-matching group: (?:".*?"){2}. If you want two groups, one for "x" and one for "y", you need to repeat the group twice: (".*?")(".*?"). You can potentially use named groups to simplify this repetition.
The first expression is "X and then Y, where Y accidentally matches the same thing as X".The second expression is "(X){repeat two times}". Group 1 cannot contain XX, because group 1 does not match XX. It matches X. In other words: Group contents does not change just because of a quantifier outside of the group.One way to remedy the second expression is to make an outer group (and make the inner group non-capturing)
About your second pattern (".*?"){2}:A cite from the rules of matchingIf a group is contained in a part of the pattern that matched multiple times, the last match is returned.And findall does the following:If one or more groups are present in the pattern, return a list of groups;Your pattern (".*?"){2} means that (".*?") should match twice in a row, and according to the first rule, only the content of the last match is captured.For your data findall finds the sequence (".*?"){2} only once, so it returns a list consisting of the last captured group for a single match: ['"y"'].This example would make it more obvious: You can see that findall finds the sequence (\d){2} three times and for each it returns the last captured content for the group (\d).Now about your first pattern: ".*?"".*?".This one does not contains subgroups, and, according to findall again, in this case it returns:all non-overlapping matches of pattern in string, as a list of strings. So for your data it is ['"x""y"'].
AFAIK, findall() is capture group first, if there is any capture group in the applied regex, then findall() returns only capture group values.And only when there is no capture group in the applied regex, findall() returns fullmatch values.Therefore, if you want findall() returns fullmatch value, then you must not use capture group in the regex like thisin which (?: ... ) indicate non-capture group.Thus, in python


Answer URL
https://docs.python.org/3/library/re.html#re.findall
