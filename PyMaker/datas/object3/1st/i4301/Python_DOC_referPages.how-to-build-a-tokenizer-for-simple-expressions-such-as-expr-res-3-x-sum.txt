Natural Text
We want to build a tokenizer for simple expressions such as xpr = "res = 3 + x_sum*11". Such expressions comprise only three tokens, as follows:  (1) Integer literals: one or more digits e.g., 3 or 11;(2) Identifiers: strings starting with a letter or an underscore and followed by more letters, digits, or underscores e.g., res or x_sum;(3) Operators: =, +, *, etc.Leading or trailing white-space characters should be skipped.To find which token each lexeme is associated with, we only need to find the first non-empty item in each tuple. Write a tokenize  generator (using re.findall and map) that returns all pairs (tuples) of lexemes and tokens. The output of list(tokenize(xpr)) should thus be:
You could use tokenize.tokenize:yieldsYou could modify the Token.name property to match your specification exactly, but since the token names as shown above are already defined in the token module, you may want to change your specification to match what Python uses (if you can).


Answer URL
https://docs.python.org/3/library/tokenize.html#tokenize.tokenize
