Natural Text
I'm trying to practice Python exercises, but using list comprehension to solve problems rather than the beginner style loops shown in the book. There is one example where it asks for a list of numbers to be put into a list of even numbers only, BUT they must be in sublists so that if the numbers follow after one another without being interrupted by an odd number, they should be put into a sublist together:So you can see in the desired output above, 10,12,14 are evens that follow on from one another without being interrupted by an odd, so they get put into a sublist together. 8 has an odd on either side of it, so it gets put into a sublist alone after the odds are removed.I can put together an evens list easily using list comprehension like this below, but I have no idea how to get it into sublists like the desired output shows. Could someone please suggest an idea for this using list comprehension (or generators, I don't mind which as I'm trying to learn both at the moment). Thanks!
As explained in the comments, list comprehensions should not be deemed "for beginners" - first focus on writing your logic using simple for loops.When you're ready, you can look at comprehension-based methods. Here's one:The main point to note in this solution is nothing is computed until you call list(res). This is because filter and generator comprehensions are lazy.
You mentioned also wanting to learn generators, so here is a version that's also a bit more readable, imho.Incidentally, if you absolutely, positively want to implement it as a list comprehension, this solutions falls out of the above quite naturally:
If you don't want to use itertools, there's another way to do it with list comprehensions. First, take the indices of the odd elements:And add two sentinels: [-1] before and [len(my_list)] after:You have now something like that:You can see your sequences. Now, take the elements between those indices. To do that, zip odd_indices with itself to get the intervals as tuples:You just have to filter the non empty lists:You can merge the two steps into one comprehension list, but that is a bit unreadable:As pointed by @jpp, prefer basic loops until you feel comfortable. And maybe avoid those nested list comprehensions forever... 


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
