Natural Text
This question already has an answer here:What does the built-in function sum do with sum(list, [])?                    3 answers                I'm using python 3.6. I came across the below way to flatten the nested list using sum:which returns:What exactly is going on here? Sum takes an iterable, in this case a list, and a start value. I don't understand what python reads to flatten the list.
This is just a result of how Python interprets addition of lists. From the docs sum(iterable[, start])Sums start and the items of an iterable from left to right and returns the total.Since sum starts by adding the first element of the iterable to the start argument, you have:Then it continues adding items from the iterable:
sum([a, b, c], d) produces d + a + b + c.In your example, a, b, c, and d are [1, 2], [3, 4], [5, 6], and [].sum([[1, 2], [3, 4], [5, 6]], []) produces [] + [1, 2] + [3, 4] + [5, 6], which is [1, 2, 3, 4, 5, 6] because + is concatenation for lists.This is absurdly inefficient, because every + operation involved requires copying all the data from each of its arguments:sum(x, []) takes quadratic time, whereas a more efficient implementation takes linear time. Never do sum(x, []).
As the sum(iterable[, start]) document says:Sums start and the items of an iterable from left to right and returns the total. start defaults to 0. The iterableâ€™s items are normally numbers, and the start value is not allowed to be a string.So, in the example you shared:Here, iterable is a (which is [[1, 2], [3, 4], [5, 6]]) and start is []. Hence, the resultant is equivalent to:
The start argument gives the function the starting point. It's what is being added to. So sum([1,2,3]) returns 6 and sum([1,2,3],5) returns 11. In your case, because you're passing in an 2-d list and an empty list, the function is going to add everything in the first argument to the second argument. Essentially, you're doing this:It's a bit of a quirk of python's operator overloading.


Answer URL
https://docs.python.org/3/library/functions.html#sum
https://docs.python.org/3/library/functions.html#sum
