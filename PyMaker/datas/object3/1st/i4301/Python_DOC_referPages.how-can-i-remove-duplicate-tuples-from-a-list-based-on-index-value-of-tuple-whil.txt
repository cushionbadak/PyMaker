Natural Text
This question already has an answer here:How do you remove duplicates from a list whilst preserving order?                    24 answers                I want to remove those tuples which had same values at index 0 except the first occurance. I looked at other similar questions but did not get a particular answer I am looking for. Can somebody please help me?Below is what I tried.my expected output : [(1,2,3), (2,3,4), (0,2,0), (5,4,3)]
A simple way is to loop over the list and keep track of which elements you've already found:found is a set. At each iteration we check if the first element in the tuple is already in found. If not, we append the whole tuple to NewList. At the end of each iteration we add the first element of the tuple to found.
The itertools recipes (Python 2: itertools recipes, but basically no difference in this case) contains a recipe for this, which is a bit more general than the implementation by @pault. It also uses a set:Python 2:Python 3:Use it with:This should be slightly faster because of the caching of the set.add method (only really relevant if your abc is large) and should also be more general because it makes the key function a parameter. Apart from that, the same limitation I already mentioned in a comment applies: this only works if the first element of the tuple is actually hashable (which numbers, like in the given example, are, of course).
A better alternative using OrderedDict:Output:Simple although not very efficient:Output:
@PatrickHaugh claims:but the question is explicitly about maintaining the order of the  tuples. I don't think there's a solution using groupbyI never miss an opportunity to (ab)use groupby().  Here's my solution sans sorting (once or twice):OUTPUT
To use groupby correctly, the sequence must be sorted:or if you need that very exact order of your example (i.e. maintaining original order):the trick here is to add one field for keeping the original order to restore after the groupby() step.Edit: even a bit shorter:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/collections.html#ordereddict-objects
https://docs.python.org/3/library/itertools.html#itertools.groupby
