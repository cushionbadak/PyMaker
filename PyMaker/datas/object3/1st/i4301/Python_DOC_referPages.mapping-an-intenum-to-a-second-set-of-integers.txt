Natural Text
I have generated an IntEnum with different DatatypesThe integers of the enums are specified for communication, so I would like to keep this enum as it is or least something similar that has the same associations.As visible in the comments the datatypes have different sizes I would like to get the size of a datatype in someway. I could write a function to map the the parametersbut is there a nice, cleaner and/or more pythonic way?
Looks like you want to have an extra size attribute on your DataType Enum (and maybe a __doc__ as well).  You can roll your own (if using the stdlib or the enum34 backport, or take advantage of aenum's advanced features1.Rolling your own with enum34 (py2/3) or the stdlib enum (3.4+):Taking advantage of aenum's features (py2/3):And in use:1 Disclosure:  I am the author of the Python stdlib Enum, the enum34 backport, and the Advanced Enumeration (aenum)  library.
A slightly cleaner way would be to move the function into the class.outputs:answers to specific questions from comment belowthe @property decorator makes a method look and act like an attribute. without the decorator, in order to get the size you would call DataTypes.Bytei.size(). With the decorator DataTypes.Bytie.size returns the same thing. So @property is unnecessary here, but I thought that since the that acted like a property of the object and not a method, it would be nice to make it work like on. super calls the method of the parent class.  so, super(DataTypes, self).__repr__() means get the repr using self and use the repr function from the parent class (this returns a string).  then, since it's a str, that is, indeed, str.replace. 


Answer URL
https://docs.python.org/3/library/enum.html
