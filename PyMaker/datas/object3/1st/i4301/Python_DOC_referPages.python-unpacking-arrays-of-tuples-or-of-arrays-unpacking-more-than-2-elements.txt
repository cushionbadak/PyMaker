Natural Text
My aim is to get a more elegant unpacking of a sub-tuple or sub-list for longer tuples or longer lists.For example, I have an array with sub-arraysExperimenting with an array and sub-tuple or sub-list with 2 elements,I have the following:ORI can unpack 's' whether it has tuples or lists:Produces the resultSuppose I have the following array with sub-arrays of four elements each:I can unpack 'bongo' using the variables a,b,c,dDespite being able to unpack the mixed chr/number sub-array I seem to have a problem unpacking a mixed 'chr' and number sub-list (or sub-tuple (not shown, but get the same result)):That is, doing an unpacking I get the desired result with an error:My question:  Is there a more elegant way of unpacking, such that I would like to get the first element, say as a key, and the rest?To illustrate with pseudo-code - it does not work directly in python:Such as to get the following output:Inspiration: Experimenting with the defaultdict at para 3.4.1 https://docs.python.org/3/library/collections.html#collections.defaultdict particularly the unpacking of an array with a sub-tuple.Thank you,Anthony of Sydney
You can covert to your desired format first:
Further to the Mr Azim's answer, in the 5th line he used *v. This inspired me to apply this for further experimentation to an array/tuple/list instead of the dictionary. This code produces the same result:asConclusion: the * operator can be applied not only in dictionaries, but also in arrays/tuples/lists. When applied in a 'for' loop, as inThanks,Anthony of exciting Sydney
Here is a subtle difference between printing *v and v.Then we have Note the subtlety here: whether we use *v in the 'for' loop, print v or *v produces the same result:Produces the same result:    Thank you,Anthony of Sydney


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
