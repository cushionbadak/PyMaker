Natural Text
I have a class with several properties, each of which has to be a number.  After repeating the same code over and over again I think there is a more pythonic way to declare multiple class instance properties as numbers.Right now I set each property value to None and raise a type error if the value is set to a non number type.  I'd prefer to set the property type to a number when the property is initialized.Thanks!Example:Also, I actually have this wrapped into a method that is repeated at each property setter:
If every property of this class should be a number you can implement custom __setattr__ method:From documentation: __setattr__ (is) called when an attribute assignment is attempted. This is called instead of the normal mechanism (i.e. store the value in the instance dictionary). name is the attribute name, value is the value to be assigned to it.More general approach would be to not allow type of once assigned attribute to change:Speaking of pythonic, from pep8:Class names should normally use the CapWords convention.Use the function naming rules: lowercase with words separated by underscores as necessary to improve readability.
A fairly modern (python 3.5+) and pythonic way is using type hintsA more compatible way is to try to convert to int, which will then throw an exception for you if that fails. It might also have unwanted behaviour like accepting floats:But there's already nothing wrong with your implementation in general.If you do not want to explicitly declare getters and setters, you could check their type when used, not when assigned.
The most Pythonic way is probably to call the int constructor and let it throw an exception:if the numprops are part of your interface then creating @property accessors would be appropriate.  You can also implement your own descriptor:usage:


Answer URL
https://docs.python.org/3/library/typing.html
