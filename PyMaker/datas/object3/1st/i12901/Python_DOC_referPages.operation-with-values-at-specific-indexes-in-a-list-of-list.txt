Natural Text
I'm currently writing a little script in python (2.x), and there's a portion of the code that I'd like to improve without knowing how to do so.I have a list of lists that looks like the following:I need to get the sum of all the integers at the index 1 and the sum of all the integers at the index 2. To do so, I currently have:What could be a more pythonic way to do that? Maybe using reduce and a lambda function or something?
A more pythonic way to do that would be using the sum function along with the for ... in ... generator and do all the work in a single line, like this:
The most Pythonic would probably be list comprehensions:Summations:Which returns:
You could do sum(x[1] for x in in my_list), sum(x[2] for x in my_list) if you don't mind looping twice.or reduce(lambda acc, l: (acc[0] + l[1], acc[1] + l[2]), my_list, (0, 0)) if you want to do it both at once. This will return a tuple with the sum of [1] on the first element, and [2] on the second
You can use zip and list comprehension Or use zip and islice class from itertools 
Here's a one liner that doesn't use a generator expression. Use zip plus unpacking to transpose the list, then run sum on all the numeric columns using map.Unfortunately it's a little wordier in 3.X since you can't slice a zip object.
You can use reduce but, since the elements in your sequence are lists, you'll need to set an initial value of 0. In Example:


Answer URL
https://docs.python.org/3/library/itertools.html
