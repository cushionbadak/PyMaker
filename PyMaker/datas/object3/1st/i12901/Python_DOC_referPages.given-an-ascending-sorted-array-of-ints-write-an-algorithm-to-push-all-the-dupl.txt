Natural Text
I tired doing this in python but my attempted solution is wrong ( it doesn't work for more than 2 duplicates). I'm triyng to avoid using collections or built in modules, becuase I want to understand the logic for a potential interview question. HELP
This seems a bit brute force but it works without using any imports, etc.EDIT: I took another look at this and there is a simple change that will make it O(n^1) instead of O(n^2) in time.I ran %timeit comparing the two, summarized in below table.Results show sort_1 is O(n^2) while sort_2 is O(n^1) with respect to time, with just that minor modification.
Ignoring your request to not use builtin modules...If you borrow the roundrobin implementation from the itertools recipes. It's a one liner. Yay itertoolsThe intermediate step is to create this data structure that is needed by roundrobin
Edit: quick summary: because the list is already sorted (ascending or descending doesn't matter, either guarantees that all equal values occur together), at each point in the list we only need to track the previously seen value (prev) and the current value (val).if prev and val are the same, then val is a duplicate; it gets appended to the list of duplicate valuesotherwise val is the initial occurence; it gets appended to a list of initial values, and prev gets updated for the next comparisonwhen we have processed the entire list, we return (all initial values) + (all duplicates)So, This is O(n), where your solution is O(n**2) (because list.count() is O(n)).Also, as John La Rooy points out, x for x in sett fails if values appear more than twice; you would have to use x for x in array instead.Be aware that the result of  list(set(sorted_lst)) is not necessarily in sorted order! You would have to use sorted(set(sorted_lst)) instead, which is O(n log n).If you want to match John La Rooy's output (all first occurrences, then all second occurrences, etc) you can apply this function recursively like return init + reorder_duplicates(dups).
TryOutput OrOutput-EDIT-Did not discard the previous-Just correct and one liner but with built-in modules-
Here is a straightforward way without importing anythingBut worst case is O(n^2) if all the quantities are different


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
