Natural Text
I'm upgrading a bunch of scripts where the ecosystem is a bit of a mess.  The scripts always relied on external modules, and didn't have any package infrastructure of their own (they also didn't do much OOP, as you can imagine).  There's nothing at the top level, but it is the working directory when starting Python and I'd like to keep it that way.  At the top-level, I've just created __init__.py file (based on another question).  As I'm less experienced with Python __init__.py confuses me a bit.  All of the __init__.py files I've created are empty, it's my understanding that this is all that's required.Assume I have the following directory structure:And the code is like this : I've created __init__.py at the root, in F/ and in B/.  However, when I run python F/Foo.py, I get an error:What exactly would I need to do to invoke python F/Foo.py and be able to depend on things defined in sibling directories?UpdateThanks to @user2455127, I realized that I forgot to remove the file extension .py and my working directory was wrong.  From the mypackage directory, running python -m mypackage/F/Foo, the error was : myvirtualenv/bin/python: No module named mypackage/B/bar.  Re-reading @user2455127's post, I ran from the directory above and get a long Traceback:I'm not quite sure what needs to be done to fix this, but it seems like the __package__ attribute may help.  I'll try and figure that out, and post another update.
Have a look to this :Attempted relative import in non-package even with init.py and brenBarn's answerIf you run it from the folder upper than the one with dev.properties and the others files (called lambda in my case), with this command line : it works.
If the current working directory is F's and B's parent directory, then F and B are available as modules to all Python code. You should run:and then F/foo.py should containAs for __init__.py, that file's existance simply makes the directory an importable module. If you want to know more about it, check the docs on how imports work. (For most people, reading all of that isn't necessary.)Relative imports can be pretty messy, so I'd advise shying away from them for now.


Answer URL
https://docs.python.org/3/reference/import.html
https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH
