Natural Text
I'm trying to write a small script to mount a VirtualBox shared folder each time I execute the script. I want to do it with Python, because I'm trying to learn it for scripting.The problem is that I need privileges to launch mount command. I could run the script as sudo, but I prefer it to make sudo by its own.I already know that it is not safe to write your password into a .py file, but we are talking about a virtual machine that is not critical at all: I just want to click the .py script and get it working.This is my attempt:My python version is 2.6
Try this and let me know if it works. :-)And this one:os.popen("sudo -S %s"%(command), 'w').write('mypass')
Many answers focus on how to make your solution work, while very few suggest that your solution is a very bad approach. If you really want to "practice to learn", why not practice using good solutions? Hardcoding your password is learning the wrong approach!If what you really want is a password-less mount for that volume, maybe sudo isn't needed at all! So may I suggest other approaches?Use /etc/fstab as mensi suggested. Use options user and noauto to let regular users mount that volume.Use Polkit for passwordless actions: Configure a .policy file for your script with <allow_any>yes</allow_any> and drop at /usr/share/polkit-1/actionsEdit /etc/sudoers to allow your user to use sudo without typing your password.All the above allow passwordless root privilege, none require you to hardcode your password. Choose any approach and I can explain it in more detail.As for why it is a very bad idea to hardcode passwords, here are a few good links for further reading:http://www.security-faqs.com/why-you-shouldnt-hard-code-your-passwords-when-programming.htmlhttps://security.web.cern.ch/security/recommendations/en/password_alternatives.shtmlhttps://security.stackexchange.com/questions/92465/whats-more-secure-hard-coding-credentials-or-storing-them-in-a-databasehttps://blogs.manageengine.com/it-security/passwordmanagerpro/2010/02/17/use-of-hard-coded-credentials-a-dangerous-programming-error-cwe.htmlhttps://www.csoonline.com/article/3038302/application-development/hard-coded-passwords-remain-a-key-security-flaw.html
To pass the password to sudo's stdin:Note: you could probably configure passwordless sudo or SUDO_ASKPASS command instead of hardcoding your password in the source code.
subprocess.Popen creates a process and opens pipes and stuff. What you are doing is:Start a process sudo -SStart a process mypassStart a process mount -t vboxsf myfolder /home/myuser/myfolderwhich is obviously not going to work. You need to pass the arguments to Popen. If you look at its documentation, you will notice that the first argument is actually a list of the arguments.
Use -S option in the sudo command which tells to read the password from 'stdin' instead of the  terminal device.Tell Popen to read stdin from PIPE.Send the Password to the stdin PIPE of the process by using it as an argument to communicate method. Do not forget to add a new line character, '\n', at the end of the password.
Please try module pexpect. Here is my code:
To limit what you run as sudo, you could runwithout needing to store the password. The -E parameter passes your current user's env to the process. Note that your shell will have sudo priveleges after the second command, so use with caution!
sometimes require a carriage return: 
I know it is always preferred not to hardcode the sudo password in the script. However, for some reason, if you have no permission to modify /etc/sudoers or change file owner, Pexpect is a feasible alternative.Here is a Python function sudo_exec for your reference:
I used this for python 3.5. I did it using subprocess module.Using the password like this is very insecure.The subprocess module takes command as a list of strings so either create a list beforehand using split() or pass the whole list later. Read the documentation for moreinformation.


Answer URL
https://docs.python.org/3/library/subprocess.html
https://docs.python.org/3/library/subprocess.html
