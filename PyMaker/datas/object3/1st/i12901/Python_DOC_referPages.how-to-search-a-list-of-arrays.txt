Natural Text
Consider the following list of two arrays:Then finding the index of a correctly giveswhile this does not work for b:It seems to me, that calling a list's .index function is not working for lists of numpy arrays. Does anybody know an explanation? Up to now, I always solved this problem kind of daggy by converting the arrays to strings. Does someone know a more elegant and fast solution?
The good question is in fact how l.index[a] can return a correct value. Because numpy arrays treat equality in a special manner: l[1] == b returns an array and not a boolean, by comparing individual values. Here it gives array([ True,  True], dtype=bool) which cannot be directly converted to a boolean, hence the error.In fact, Python uses rich comparison and specifically PyObject_RichCompareBool to compare the searched value to every element of the list is sequence, that means that it first test identity (a is b) and next equality (a == b). So for the first element, as a is l[0], identity is true and index 0 is returned.But for any other element, identity with first element is false, and the equality test causes the error. (thanks to Ashwini Chaudhary for its nice explaination in comment).You can confirm it by testing a new copy of an array containing same elements as l[0]:it gives the same error, because identity is false, and the equality test raises the error.It means that you cannot rely on any list method using comparison (index, in, remove) and must use custom functions such as the one proposed by @orestiss. Alternatively, as a list of numpy arrays seems hard to use, you should considere wrapping the arrays:
This error comes from the way numpy treats comparison between array elements see : link,So I am guessing that since the first element is the instance of the search you get the index for it, but trying to compare the first element with the second you get this error.I think you could use something like: [i for i, temp in enumerate(l) if (temp == b).all()] to get a list with the indices of equal arrays but since I am no expert in python there could be a better solution (it seems to work...)


Answer URL
https://docs.python.org/3/c-api/object.html#c.PyObject_RichCompareBool
https://docs.python.org/3/c-api/object.html#c.PyObject_RichCompareBool
