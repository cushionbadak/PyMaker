Natural Text
The Goal (simplest outline of a larger problem)I am iteratively searching for a list of nearest sums of powers to a large integer.Some contextI am new to multithreading. My understanding is that my current bottleneck could possibly be alleviated by multithreading. However, I am unsure if other methods are better suited to make further improvement.The Code_ Description _ Sample output>>> print(*sorted(sum2)[:100],sep='\n') >>> print(*sorted(sum3)[:100],sep='\n')
Will multi-threading help?As @Blckknght noted, CPython's multi-threading is limited by the GIL (Global Interpreter Lock).  Since only one thread can run at a time, threading isn't helpful for improving the performance of CPU bound code?Will multi-processing help?Yes, the multi-processing module is great for improving the performance of CPU bound code, but only for problems that:1) Can be partitioned into independent sub-problems2) Does not have communication overhead that offsets the advantages of parallel processingCan combinations be partitioned into sub-problems?A single run of the combinations iterator isn't easily partitioned (it doesn't have a way to start in the middle of an iteration sequence).However, you can run combinations(pk, 2) and combinations(pk, 3) in separate processes.


Answer URL
https://docs.python.org/3/glossary.html#term-global-interpreter-lock
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing
