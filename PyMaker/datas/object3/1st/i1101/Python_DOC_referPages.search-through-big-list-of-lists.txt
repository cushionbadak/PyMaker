Natural Text
This question already has an answer here:Fastest way to search a list in python                    4 answers                I have a list of coordinates (x and y like this: coordinates = [[1, 2], [2, 3]] but much bigger) that updates every iteration (appends new list). So I need to search if current_pos (which is also a list like [4, 10]) is in coordinates. Here is my snippet of code:It works pretty fine with small lists, but it takes too long time for big lists with 10.000 - 1.000.000 items. I think the problem is in searching through list, because as it becomes bigger, the time it uses becomes also longer.
just turn coordinates to a setand make current_pos a tuple so you can insert it in a set. At some point:then your loop becomes:and that's it. You get O(1) lookup so it doesn't depend on the length of the coordinates set.If order matters, just creates a set as above and keep the list too to append to if not already seen (widely covered like here: How do you remove duplicates from a list whilst preserving order?).
If order matters the out of box solution is a OrderedDict that remembers the order of insertion, and still has O(1) lookup. You also need your coordinates as tuples, so they would be immutable (as opposed to the mutable lists).Inserting into the dictionary would be:and look up would just be


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
