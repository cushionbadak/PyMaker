Natural Text
Here is an example:where func is non-commutative.In the code above, list_[offset:] will create a new list, but all I need is a view to list_. How can I optimize this?
To replicate your slicing but in O(1) time each iteration, you can use collections.deque with popleft:Result:This should be more efficient than list slicing: see deque.popleft() and list.pop(0). Is there performance difference?. Note also list slicing works in O(k) time where k is the length of the slice.
Using collections.deque, as suggested by @jpp's answer, is slightly faster sometimes. Both slice and deque solutions perform similarly, and better than e.g. using itertools.islice or just plain indexes on list_.I've tried to make the versions more or less equivalent overall, and used a dummy func that counts the loops:Results:


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
