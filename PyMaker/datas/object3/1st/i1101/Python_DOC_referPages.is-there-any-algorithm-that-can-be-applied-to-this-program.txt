Natural Text
I am doing an intern writing a program to do gene matching.For example:File "A" contains some strings of gene type. (the original data is not sorted)rs17760268rs10439884rs4911642rs157640rs1958589rs10886159rs424232....and file "B" contains 900 thousands of rs number like above (also not sorted)My program now can get correct results, but I would like to make it more efficient. Is there any algorithm that can be applied to this program? BTW, I will try to make my program do multi-processing and see if it gets better performance.
I don't think there's a need to sort anything first.Process larger list B into a hashmap or hashset, O(n) amortizedIterate over list A and remove from A if not in B, O(m)return ATotal: O(n + m)
Though your explanations are quite unclear, I guess that you are appending the A values to a list. Use a dictionary instead, and you can lookup A much more efficiently.
From the description it appears you want result[] to contain rs strings that are in both A and B (aka Intersection).Your algorithm is O(n*m), but you could easily improve this by sorting both files first (O(n*logn) for comparison based sorts), and then read from both at the same time, increasing position in one that has lower current rs number, and adding matches to result[] at the same time.


Answer URL
https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files
https://docs.python.org/3/tutorial/datastructures.html#sets
https://docs.python.org/3/library/stdtypes.html#set
