Natural Text
I understand this is insane and non-pythonic for a number of reasons, but I'm interesting in seeing how it could be done in order to learn more about the language.I have about a billion parser functions that I have given names like:And I call:This nomenclature means the code base is less than beautiful, but it works. If I write a new parser, I just increment my file, and hope I counted correctly, didn't make any typos to overwrite something existing, etc.What I would love, however, is some way of calling them, not by a name I have given them, a name that I have to think up with my dumb human brain, but according to some machine-generated name derived from the  contents of the function.Eg, my ideal would be something like:These md5funs could be stored in a dictionary mapping to their implementation, for example, then they could be iterated over, or applied according to some logic, perhaps the logic even coming from other md5funs in the mapping.How would I do this in python?Bonus points would be for, not just using the md5 of the string representation of the function, but the md5 of the AST of the function so that:andwould get the same hash, and mean I don't have to human-name the function twice.
A very crude and dirty way of doing this would be (well, this whole idea is crude and dirty)This approach requires you to:Still come up with names (def f) but they don't need to be unique. Once add_md5_to_globals is called, the name 'f' has no significance and can be reused.Know the md5 of the function you want to call (for example, _123fdffc617d4a2514f219cdd26487a3('but why')).If you don't mind using globals() in every call, you can return md5 from add_md5_to_globals and use that to call each function:


Answer URL
https://docs.python.org/3/library/functions.html#exec
