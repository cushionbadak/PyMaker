Natural Text
How can I modify this list so that all p's appear at the beginning, the q's at the end, and the values in between are sorted alphabetically?So I would like to have:
You can use sorted with the following key:Explanation To get a better idea of how this is working, the following list comprehension aims to replicate what is being returned from the lambda function defined in the key argument prior to making comparisons:This will then be the key to be used to sort the items in the list, as mentioned in the documentation:The value of the key parameter should be a function that takes a single argument and returns a key to use for sorting purposes. So taking into account that False = 0 and True = 1, when this list of tuples is sorted the result will be the following:
One idea is to use a priority dictionary with a custom function. This is naturally extendable should you wish to include additional criteria.
Use the key parameter in sorted:Output
Just define an appropriate key function:Note, every character is mapped to an integer >= 0, so we can just rely on ord, and since -1 will always be less than anything returned by ord, we can use that for p, and for q, we can use infinity, so it will be alway greater than something returned by ord.
You can find all p and q elements, filter the original list, and then sort:Output:
You could also store you front, middle and ends in a collections.defaultdict(), then just add all three lists at the end:
Solution to this question is:First find all p and q elements in list.Filter the original list. Then, finally sort the list.


Answer URL
https://docs.python.org/3/howto/sorting.html
https://docs.python.org/3/howto/sorting.html
https://docs.python.org/3/library/functions.html#sorted
https://docs.python.org/3/library/collections.html#collections.defaultdict
