Natural Text
While coding in python I'm getting an error: "Object of type myObject is not JSON serializable" I tried to use some solutions I saw in other questions, but I didn't find many similarities between my code and the code in those questions, so I found it difficult to adapt the solutions in my code.A part of my script is as follows. The error occurs in the last line of the first block: In another python file is defined the class of 'myObject', where is also the method 'to_json()', which I'm calling in the line of code that produces the error.I would be glad if I could get a solution to that problem. Thanks in advance.
from the code you provided i can only speculate what types exactly your property_A, property_B, property_C variables/attributes are but Let's me speculate that your properties are Classinstances which have no "definition" of how they should be serialized into JSON. This is backed up by what you said : "Object of type myObject is not JSON serializable" I guess the problem is with the from_json() classmethod, there you should probably do smth. like :EDITED:Assuming that the __init__() method of your Class looks as follows I suggest the following:Furthermore i suggest, if it's possible, that you change your JSON Format, provided in your to_json() method by simply replacing the whitespaces from "property A" to "property_A" (same for other properties). In addition you can change "Name" to lowercase "name". Why ? Because with this format, and my changed __init__() method you can convert your from_json() to the following utilizing unpacking operation :
Here's a modified (and working) version of your code.custom_object.py:code.py:Notes:Corrected the errors (or added data that was missing)Did some renames (class, objects, attributes) for clarityAssumed that prop_a, prop_b are strings (not very important)The (main) problem was in from_json function (I'm not sure what you tried to do there: why so many myObject instantiations, when there should have been only one). Anyway, what it does now:Gets name, prop_a, prop_b attributes from json_data (which is a dict)Constructs the object out of the 3 values from #1.Read the objects for prop_c, and adds them one by one (if any) to the object (by calling add_c_element)Program searches for a file (with json contents):If found, it tries to load the object from it and displays itIf not found, it creates a dummy object and dumps it in the fileThis is one (not a very nice) way of doing things. It's meant to require minimum code changes, and it's also for learning purposes. The proper (scalable, general) way would be to extend JSONEncoder, JSONDecoder ([Python 3]: json - JSON encoder and decoder), but I feel that it would be a bit too advanced at this pointOutput:


Answer URL
https://docs.python.org/3/library/json.html#module-json
