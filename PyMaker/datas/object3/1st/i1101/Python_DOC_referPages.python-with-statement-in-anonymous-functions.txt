Natural Text
Is it possible to use with statement in Python anonymous functions? For example, I have a function that writes 1 to a file:But this function is to be organized in a dict:Obviously I can write this statement to add this function to the dict:But the problem is the name write_one still exists in the current scope. How can I introduce an anonymous function without polluting the current namespace?For simple functions, I can use lambda. For slightly complicated functions, I can return a tuple to execute multiple statements (to be precise, expressions). But I didn't find a way to cleverly use lambda so that it can work with with statements. If this is impossible, where it says so in its documentation?The solution with a del write_one doesn't look good to me. I don't want this name to be introduced at all in the current namespace.In a word, what I want is something like this:This is kind of awkward with Python's indentation-based rules, I know. But it does its job.
Lambda expressions are quite restricted in what they can do. From the docsNote that functions created with lambda expressions cannot contain statements or annotations.Just use a full function definition. If you really want to avoid polluting the namespace, just del the name afterwards.Or if you simply want to avoid the module namespace from having a bunch of these small functions for code-completion purposes, use _ in the front of the function name.If you truly want to avoid it, you could use the function constructor and dynamically compile code, etc. Or use some other kind of dynamic code execution, e.g. using eval or exec. But that is almost certainly not worth the trouble.  Especially if you can just del the name after you are done using it.Or perhaps the best approach is to put all these functions in another namespace, like another module.
There are not many namespaces in Python - a function is basically the local one. That gives a good hint to a possible solution:Run this:So you can make arbitrarily complex functions - to hide them from the global namespace you just enclose them in another function.


Answer URL
https://docs.python.org/3/reference/expressions.html#lambda
