Natural Text
It seems that whatever I throw in input in hopes to break it, python just keeps one upping me. It like knows what I'm trying to achieve here and goes "nope"
The EOFError mentioned by others can also be triggered by standard input being something that isn't an infinite stream (like standard input generally is), such as /dev/null:In a similar vein, we could also write input that's impossible to decode as UTF-8 (here using xxd to decode hex into bytes that are then passed to Python).
Not exactly an answer to the question, but you can throw a UnicodeDecodeError by changing the default encoding in python and then trying to input a unicode character (such as an emoji) which follows a different encoding scheme.
The easiest way I can think of is to press CTRL+D which will trigger an EOFError.Similary, CTRL+C will raise a KeyboardInterrupt.Demo:Maybe a more interesting way to get the EOFError is to use an empty file as the input to your program.
Based on the comments on the question here, it appears that the actual confusion stems from how the Python interactive prompt displays the return value of input. The interactive session always displays values using repr, which is designed to try to print a string which, when parsed, would produce the original value. For strings this can lead to some confusion, since the thing that is printed in the interactive session is not the actual string, but a representation of the string.To see the difference, you can try playing around with this program, which will likely be instructive:Here are some examples of what it prints:
Well Well Well,Try this little bugger. Apparently you can raise EOF errors with the right symbol or with ctrl + D. Docs
In that case, change the environment from python 3.0 to python 2.7Then whatever you put it will throw an error, For instance, consider "dude" as a string then it throws the following error


Answer URL
https://docs.python.org/3/library/exceptions.html#EOFError
