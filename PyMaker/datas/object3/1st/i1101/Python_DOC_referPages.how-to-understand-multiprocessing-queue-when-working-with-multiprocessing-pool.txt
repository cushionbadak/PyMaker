Natural Text
Why can't I put process in Pool into a Queue?Here my code works when using Pool and can get Test instance attributes.When I try to use Queue not python list to store processes, this won't work. My code:Error msg:I go see the multiprocessing doc:class multiprocessing.Queue([maxsize])  Returns a process shared queue implemented using a pipe and a few locks/semaphores. When a process first puts an item on the queue a feeder thread is started which transfers objects from a buffer into the pipe.The usual queue.Empty and queue.Full exceptions from the standard libraryâ€™s queue module are raised to signal timeouts.Queue implements all the methods of queue.Queue except for task_done() and join().Here it says "puts an item", this item can't be anything (python object)? In my case I try to put process in Pool() into Queue. 
There are at least two problems with your Queue-based code. Pool.apply_async method returns an AsyncResult object, not a process. You can call get on this object to obtain the result of the corresponding process. With this difference in mind let's look at your code:The second line will always fail in your case. Anything that you put in a queue must be picklable, because multiprocess.Queue uses serialization. This is not well documented and there is an open issue in Python's issue tracker to update the documentation. The problem is that AsyncResult is not picklable. You can try yourself:AsyncResult contains some lock objects internally and they are not serializable. Let' move to the next problem:If I'm not wrong, in the code above you want to call AsyncResult.get and not Queue.get. In this case you have to first get your object from the queue and then call the corresponding method on your object. However this is not the case in your code, since AsyncResult is not serializable.
As @Mehdi Sadeghi explained, AsyncResult objects can't be pickled, which multiprocessing.Queues requires. However you don't need one here because the queue isn't being shared among the processes. This mean you can just use a regular Queue.Output:


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.AsyncResult
https://docs.python.org/3/library/queue.html#module-queue
