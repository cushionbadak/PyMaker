Natural Text
I have an input, which is a tuple of strings, encoded in a1z26 cipher: numbers from 1 to 26 represent alphabet letters, hyphens represent same word letters and spaces represent an space between words.For example:8-9 20-8-5-18-5 should translate to 'hi there'Let's say that the last example is a tuple in a var called stringThe first thing I find logical is convert the tuple into a list using string = list(string)so now The problem now is that when I iterate over the list to compare it with a dictionary which has the translated values, double digit numbers are treated as one, so instead of, for example, translating '20' it translate '2' and then '0', resulting in the string saying 'hi bheahe' (2 =b, 1 = a and 8 = h)so I need a way to convert the list above to the following     list I've already tried various codes usinglist(),  join() and   split()But it ends up giving me the same problem.To sum up, I need to make any given list (converted from the input tuple) into a list of characters that takes into account double digit numbers, spaces and hyphens altogetherThis is what I've got so far. (The last I wrote) The input is further up in the code (string)
You don't really need hypens, am I right?I suggest you the following approach:Now a is ['8', '9', ' ', '20', '8', '5', '18', '5']You can then convert each number to the proper character using your dictionaryNow b is equal to HI THERE
There's no need to convert the tuple to a list. Tuples are iterable too.I don't think the list you name is what you actually want. You probably want a 2d iterable (not necessarily a list, as you'll see below we can do this in one pass without generating an intermediary list), where each item corresponds to a word and is a list of the character numbers:From this, you can convert each number to a letter, join the letters together to form the words, then join the words with spaces.To do this, you need to pass a parameter to split, to tell it how to split your input string. You can achieve all of this with a one liner:This does exactly the splitting procedure as described above, and then for each number looks into the dict num_to_letter to do the conversion.Note that you don't even need this dict. You can use the fact that A-Z in unicode is contiguous so to convert 1-26 to A-Z you can do chr(ord('A') + num - 1).
I think, it's better to apply regular expressions there.Example:Result:
using regex here is solutionoutput ['8', '-', '9', ' ', '20', '-', '8', '-', '5', '-', '18', '-', '5']if you want to get hi there from the input string , here is a method (i am assuming all character are in uppercase):output:    HI THERE
You could also try this itertools solution:Output:Explanation of above code:Split each string by delimiter '-'.Create interspersing delimiters.Create pairs of characters and separators with itertools.zip_longest.Extend flattened pairs to result list with itertools.chain.from_iterable.Remove trailing ' ' from result list added.You could also create your own intersperse generator function and apply it twice:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
