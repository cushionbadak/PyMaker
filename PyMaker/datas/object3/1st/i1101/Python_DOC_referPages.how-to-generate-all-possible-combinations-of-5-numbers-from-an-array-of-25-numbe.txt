Natural Text
I have a list with 15 numbers in, and I need to write some code that produces all 32,768 combinations of those numbers. I've found some code (by Googling) that apparently does what I'm looking for, but I found the code fairly opaque and am wary of using it. Plus I have a feeling there must be a more elegant solution.The only thing that occurs to me would be to just loop through the decimal integers 1–32768 and convert those to binary, and use the binary representation as a filter to pick out the appropriate numbers. Does anyone know of a better way? Using map(), maybe?
Have a look at itertools.combinations:Return r length subsequences of elements from  the input iterable.Combinations are emitted in lexicographic sort order. So, if the  input iterable is sorted, the  combination tuples will be produced in  sorted order.Since 2.6, batteries are included!
This answer missed one aspect: the OP asked for ALL combinations... not just combinations of length "r".So you'd either have to loop through all lengths "L":Or -- if you want to get snazzy (or bend the brain of whoever reads your code after you) -- you can generate the chain of "combinations()" generators, and iterate through that:
Here's a lazy one-liner, also using itertools:Main idea behind this answer: there are 2^N combinations -- same as the number of binary strings of length N. For each binary string, you pick all elements corresponding to a "1".Things to consider:This requires that you can call len(...) on items (workaround: if items is something like an iterable like a generator, turn it into a list first with items=list(_itemsArg))This requires that the order of iteration on items is not random (workaround: don't be insane)This requires that the items are unique, or else {2,2,1} and {2,1,1} will both collapse to {2,1} (workaround: use collections.Counter as a drop-in replacement for set; it's basically a multiset... though you may need to later use tuple(sorted(Counter(...).elements())) if you need it to be hashable)Demo
In comments under the highly upvoted answer by @Dan H, mention is made of the powerset() recipe in the itertools documentation—including one by Dan himself. However, so far no one has posted it as an answer. Since it's probably one of the better if not the best approach to the problem—and given a little encouragement from another commenter, it's shown below. The function produces all unique combinations of the list elements of every length possible (including those containing zero and all the elements).Note: If the, subtly different, goal is to obtain only combinations of unique elements, change the line s = list(iterable) to s = list(set(iterable)) to eliminate any duplicate elements. Regardless, the fact that the iterable is ultimately turned into a list means it will work with generators (unlike several of the other answers).Output:
Here is one using recursion:
This one-liner gives you all the combinations (between 0 and n items if the original list/set contains n distinct elements) and uses the native method itertools.combinations:Python 2Python 3The output will be:Try it online:http://ideone.com/COghfX
I agree with Dan H that Ben indeed asked for all combinations. itertools.combinations() does not give all combinations.Another issue is, if the input iterable is big, it is perhaps better to return a generator instead of everything in a list:
You can generating all combinations of a list in python using this simple codeResult would be :
I thought I would add this function for those seeking an answer without importing itertools or any other extra libraries.Simple Yield Generator Usage:Output from Usage example above:[] ,  [1] , [2] , [1, 2] , [3] , [1, 3] , [2, 3] , [1, 2, 3] , [4] ,  [1, 4] ,  [2, 4] , [1, 2, 4] , [3, 4] , [1, 3, 4] , [2, 3, 4] , [1, 2,  3, 4] ,
Here is yet another solution (one-liner), involving using the itertools.combinations function, but here we use a double list comprehension (as opposed to a for loop or sum):Demo:
Below is a "standard recursive answer", similar to the other similar answer https://stackoverflow.com/a/23743696/711085 . (We don't realistically have to worry about running out of stack space since there's no way we could process all N! permutations.)It visits every element in turn, and either takes it or leaves it (we can directly see the 2^N cardinality from this algorithm).Demo:
It could be done using itertools For permutations This method takes a list as an input and return an object list of tuples that contain permutation of length L in a list form.For Combination This method takes a list and a input r as a input and return a object list of tuples which contain all possible combination of length r in a list form.see this
This code employs a simple algorithm with nested lists...
I know it's far more practical to use itertools to get the all the combinations, but you can achieve this partly with only list comprehension if you so happen to desire, granted you want to code a lotFor combinations of two pairs:And, for combinations of three pairs, it's as easy as this:The result is identical to using itertools.combinations:
Without using itertools:
Combination from itertoolsThanks
This is an approach that can be easily transfered to all programming languages supporting recursion (no itertools, no yield, no list comprehension):
Using list comprehension:Output would be:
This is my implementation
Here are two implementations of itertools.combinationsOne that returns a listOne returns a generatorPlease note that providing a helper function to those is advised because the prepend argument is static and is not changing with every callThis is a very superficial case but better be safe than sorry
How about this.. used a string instead of list, but same thing.. string can be treated like a list in Python:
Without itertools in Python 3 you could do something like this:where initially carry = "".

If someone is looking for a reversed list, like I was:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
