Natural Text
So I am trying to get a loop function to automatically identify the next list to append a number. The following sample code summarizes what I am trying to achieve.I need the loop to append a data point into each of the 10 empty lists. I tried to do this by setting up currentPList to identify the list to work with. The problem is, I am not quite sure how to convert currentPList, which is currently a string, into a proper object (ie. one of the empty patchLists). How do I go about doing this?
You are definitely overcomplicating this. Just use a list of lists:This way you can get the same functionality of each individual list and have it be extensible and not try to reference a variable by a concatenated string for its name.
@Charles Drotar's answer is what you want to do, but since the title says how to convert a string to variable name, here is how you can actually create variables specified as strings (but don't do this in your circumstance):What you are doing here is adding the variable entry to the namespace. In the absence of an object argument vars() acts like locals()
I think the Pythonic way to do it would be to store all the patch lists a single dictionary. That way you can easily select which one by creating a unique dictionary key for each of them. Note also that the keys generated don't even need to be valid Python identifiers using this approachâ€”and it would be very easy to change how many there were, since it's all done dynamically.Here's what I mean (Note I also made the variable names used following the PEP 8 Naming Conventions):Sample utput:{'patch1List': [5], 'patch2List': [8], 'patch3List': [4], 'patch4List': [9], 'patch5List': [10], 'patch6List': [9], 'patch7List': [5], 'patch8List': [9], 'patch9List': [8], 'patch10List': [7]}


Answer URL
https://docs.python.org/3/library/functions.html#locals
