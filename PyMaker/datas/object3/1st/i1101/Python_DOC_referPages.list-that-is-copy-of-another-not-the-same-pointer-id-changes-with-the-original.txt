Natural Text
This question already has an answer here:Copying nested lists in Python                    2 answers                I'm aware that simply assigning one list to another preexisting list gives it the same address e.g.x = [1, 2]y = xy[0] = 3print(x, y)gives the output[3, 2] [3, 2]and to prevent this, it has to be written as such...y = list(x), y = x[:], etc.However, this doesn't seem to work in my case...I'd like ref_matrix to be simply a copy of result, but when I change result in the conditional statements, I notice that ref_matrix changes along with it. I've checked their id's, but they're both different as expected. Any thoughts?
You're using a nested list of lists, but ref_matrix = result[:] only makes a shallow copy of the top level list, so you have a new list containing the same lists as the first.The simplest solution here is to just switch to a full deep copy:then replace:with:No matter how deeply nested your lists (and how mutable their contents), this will ensure all mutable elements are fully dissociated from the original list.


Answer URL
https://docs.python.org/3/library/copy.html#copy.deepcopy
