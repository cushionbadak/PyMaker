Natural Text
I am considering using the factory_boy library for API testing. An example from the documentation is:For this to work, we need first_name, last_name, etc to be passed as parameters to the __init__() method of the base.User() class. However, if you have many parameters this leads to something like:Now the question is, is this construction considered anti-pattern, and if yes, what alternatives do I have?Thanks
You could pack the __init__ method's keyword arguments into one dict, and alter the instance's __dict__ directly:However, this has the drawback of disallowing you from supplying arguments without naming them - x = User("Mr", "Kevin") works with your original code, but not with this code.
In Python 3.7, dataclasses (specified in PEP557) were added. This allows you to only write these arguments once and not again in the constructor, since the constructor is made for you:It also adds a __repr__ to the class as well as some others. Note that explicitly inheriting from object is no longer needed in Python 3, since all classes are new-style classes by default.There are a few drawbacks, though. It is slightly slower on class definition (since these methods need to be generated). You need to either set a default value or add a type annotation, otherwise you get a name error. If you want to use a mutable object, like a list, as a default argument, you need to use dataclass.field(default_factory=list) (normally it is discouraged to write e.g. def f(x=[]), but here it actually raises an exception).
Yes, too many arguments is an antipattern (as stated in Clean Code by RObert C. Martin)To avoid this, you have two design approaches:The essence patternThe fluent interface/builder patternThese are both similar in intent, in that we slowly build up an intermediate object, and then create our target object in a single step.I'd recommend the builder pattern, it makes the code easy to read.
The biggest risk would be if you had a large number of positional arguments and then ended up not knowing which is which.. Keyword arguments definitely make this better.As suggested by others, the builder pattern also works quite nicely.If you have a very large number of fields, you can also do something more generic, like so:


Answer URL
https://docs.python.org/3/library/dataclasses.html
