Natural Text
Are there situations in which sys.stdout.write() is preferable to print? (Examples: better performance; code that makes more sense)
print is just a thin wrapper that formats the inputs (modifiable, but by default with a space between args and newline at the end) and calls the write function of a given object. By default this object is sys.stdout, but you can pass a file using the "chevron" form. For example:See: https://docs.python.org/2/reference/simple_stmts.html?highlight=print#the-print-statementIn Python 3.x, print becomes a function, but it is still possible to pass something else than sys.stdout thanks to the fileargument.See https://docs.python.org/3/library/functions.html#printIn Python 2.6+, print is still a statement, but it can be used as a function withUpdate: There is a little difference between the print function and the print statement (and more generally between a function and a statement) pointed by Bakuriu in comments.In case of error when evaluating arguments:
print first converts the object to a string (if it is not already a string). It will also put a space before the object if it is not the start of a line and a newline character at the end.When using stdout, you need to convert the object to a string yourself (by calling "str", for example) and there is no newline character.Sois equivalent to:
My question is whether or not there  are situations in which  sys.stdout.write() is preferable to  printAfter finishing developing a script the other day, I uploaded it to a unix server. All my debug messages used print statements, and these do not appear on a server log. This is a case where you may need sys.stdout.write instead.
Here's some sample code based on the book Learning Python by Mark Lutz that addresses your question:Opening log.txt in a text editor will reveal the following:
There's at least one situation in which you want sys.stdout instead of print.When you want to overwrite a line without going to the next line, for instance while drawing a progress bar or a status message, you need to loop over something likeAnd since print adds a newline, you are better off using sys.stdout.
My question is whether or not there are situations in which sys.stdout.write() is preferable to printIf you're writing a command line application that can write to both files and stdout then it is handy.  You can do things like:It does mean you can't use the with open(outfile, 'w') as out: pattern, but sometimes it is worth it.
In 2.x, the print statement preprocesses what you give it, turning it into strings along the way, handling separators and newlines, and allowing redirection to a file. 3.x turns it into a function, but it still has the same responsibilities.sys.stdout is a file or file-like that has methods for writing to it which take strings or something along that line.
Are there situations in which sys.stdout.write() is preferable to  print?For example I'm working on small function which prints stars in pyramid format upon passing the number as argument, although you can accomplish this using end="" to print in a separate line, I used sys.stdout.write in co-ordination with print to make this work. To elaborate on this stdout.write prints in the same line where as print always prints its contents in a separate line.
Are there situations in which sys.stdout.write() is preferable to print? I have found that stdout works better than print in a multithreading situation.  I use Queue (FIFO) to store the lines to print and I hold all threads before the print line until my print Q is empty.  Even so, using print I sometimes lose the final \n on the debug I/O (using wing pro IDE).When I use std.out with \n in the string the debug I/O formats correctly and the \n's are accurately displayed. 
In Python 3 there is valid reason to use print over sys.stdout.write, but this reason can also be turned into a reason to use sys.stdout.write instead.This reason is that, now print is a function in Python 3, you can override this. So you can use print everywhere in a simple script and decide those print statements need to write to stderr instead. You can now just redefine the print function, you could even change the print function global by changing it using the builtins module. Off course with file.write you can specify what file is, but with overwriting print you can also redefine the line separator, or argument separator. The other way around is. Maybe you are absolutely certain you write to stdout, but also know you are going to change print to something else, you can decide to use sys.stdout.write, and use print for error log or something else. So, what you use depends on how you intend to use it. print is more flexible, but that can be a reason to use and to not use it. I would still opt for flexibility instead, and choose print. Another reason to use print instead is familiarity. More people will now what you mean by print and less know sys.stdout.write.
it is preferable when dynamic printing is useful, for instance, to give information in a long process:


Answer URL
https://docs.python.org/3/library/functions.html#print
