Natural Text
Sometimes it makes sense to cluster related data together.  I tend to do so with a dict, e.g.,One of my colleagues prefers to create a classNote that we are not defining any class methods.I like to use a dict because I like to minimize the number of lines of code.  My colleague thinks the code is more readable if you use a class, and it makes it easier to add methods to the class in the future.Which do you prefer and why?
If you're really never defining any class methods, a dict or a namedtuple make far more sense, in my opinion.  Simple+builtin is good! To each his own, though.
BackgroundA summary of alternative attribute-based, data containers was presented by R. Hettinger at the SF Python's 2017 Holiday meetup.  See his tweet and his slide deck.  He also gave a talk at PyCon 2018 on dataclasses.Other data container types are mentioned in this article and predominantly in Python 3 documentation (see links below).Here is a discussion on the python-ideas mailing list on adding recordclass to the standard library.OptionsAlternatives in the Standard Librarycollections.namedtuple: tuple with attributes (see seminal recipe)typing.NamedTuple: sub-classable tuple (see this post comparing it with namedtuple)types.SimpleNamespace: simple class w/optional class declarationtypes.MappingProxy: read-only dictenum.Enum: constrained collection of related constants (does behave like a class)dataclasses.dataclass: mutable namedtuple with default/boilerplate-less classesExternal optionsrecords: mutable namedtuple (see also recordclass)bunches: add attribute access to dicts (inspiration for SimpleNamedspace)box: wrap dicts with dot-style lookup functionalityattrdict: access elements from a mapping as keys or attributesfields: remove boilerplate from container classes.namedlist: mutable, tuple-like containers with defaults by E. SmithWhich one?Deciding which option to use depends on the situation (see Examples below).  Usually an old fashioned mutable dictionary or immutable namedtuple is good enough.  Data classes are the newest addition (Python 3.7a) offering both mutability and optional immutability, with promise of reduced boilerplate as inspired by the attrs project.Examples 
I prefer to follow YAGNI and use a dict.
There is a new proposal that aims to implement exactly what you are looking for, called data classes. Take a look at it. Using a class over a dict is a matter of preference. Personally I prefer using a dict when the keys are not known a priori. (As a mapping container). Using a class to hold data means you can provide documentation to the class attributes. Personally, perhaps the biggest reason for me to use a class is to make use of the IDEs auto-complete feature! (technically a lame reason, but very useful in practise)
Your way is better. Don't try to anticipate the future too much as you are not likely to succeed.However, it may make sense sometimes to use something like a C struct, for example if you want to identify different types rather than use dicts for everything.
By the way, I think Python 3.7 implemented @dataclass is the simplest and most efficient way to implement classes as data containers. The output would be :helloIt is too similar to Scala like case class and the easiest way to use a class as a container. 
You can combine advantages of dict and class together, using some wrapper class inherited from dict. You do not need to write boilerplate code, and at the same time can use dot notation.
I disagree that the code is more readable using a class with no methods. You usually expect functionality from a class, not only data.So, I'd go for a dict until the need for functionality arises, and then the constructor of the class could receive a dict :-)
In a language which supports it, I would use a struct. A dictionary would be closest to a structure in Python, at least as far as I see it.Not to mention, you could add a method to a dictionary anyway if you really wanted to ;)
A dict is obviously appropriate for that situation. It was designed specifically for that use case. Unless you are actually going to use the class as a class, there's no use in reinventing the wheel and incurring the additional overhead / wasting the space of a class that acts as a bad dictionary (no dictionary features).
What about Prodict:And if you want auto type conversion and auto code complete(intelli-sense):


Answer URL
https://docs.python.org/3/library/collections.html
https://docs.python.org/3/library/typing.html#typing.NamedTuple
https://docs.python.org/3/library/types.html#types.SimpleNamespace
https://docs.python.org/3/library/types.html#types.MappingProxyType
https://docs.python.org/3/library/enum.html
