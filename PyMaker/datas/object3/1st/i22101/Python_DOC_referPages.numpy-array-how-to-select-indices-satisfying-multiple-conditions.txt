Natural Text
Suppose I have a numpy array x = [5, 2, 3, 1, 4, 5], y = ['f', 'o', 'o', 'b', 'a', 'r']. I want to select the elements in y corresponding to elements in x that are greater than 1 and less than 5.I triedbut this doesn't work. How would I do this?
Your expression works if you add parentheses:
IMO OP does not actually want np.bitwise_and() (aka &) but actually wants np.logical_and() because they are comparing logical values such as True and False - see this SO post on logical vs. bitwise to see the difference.And equivalent way to do this is with np.all() by setting the axis argument appropriately.by the numbers:so using np.all() is slower, but & and logical_and are about the same.
Add one detail to @J.F. Sebastian's and @Mark Mikofski's answers:If one wants to get the corresponding indices (rather than the actual values of array), the following code will do:For satisfying multiple (all) conditions:For satisfying multiple (or) conditions:
I like to use np.vectorize for such tasks. Consider the following:The advantage is you can add many more types of constraints in the vectorized function.Hope it helps.
Actually I would do it this way:L1 is the index list of elements satisfying condition 1;(maybe you can use somelist.index(condition1) or np.where(condition1) to get L1.)Similarly, you get L2, a list of elements satisfying condition 2;Then you find intersection using intersect(L1,L2).You can also find intersection of multiple lists if you get multiple conditions to satisfy.Then you can apply index in any other array, for example, x.
For 2D arrays, you can do this. Create a 2D mask using the condition. Typecast the condition mask to int or float, depending on the array, and multiply it with the original array.


Answer URL
https://docs.python.org/3/reference/expressions.html#operator-precedence
