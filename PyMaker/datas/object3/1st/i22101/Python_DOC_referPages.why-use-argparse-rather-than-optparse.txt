Natural Text
I noticed that the Python 2.7 documentation includes yet another command-line parsing module.  In addition to getopt and optparse we now have argparse.Why has yet another command-line parsing module been created?  Why should I use it instead of optparse?  Are there new features that I should know about?
As of python 2.7, optparse is deprecated, and will hopefully go away in the future.argparse is better for all the reasons listed on its original page (https://code.google.com/archive/p/argparse/):handling positional argumentssupporting sub-commandsallowing alternative option prefixes like + and /handling zero-or-more and one-or-more style argumentsproducing more informative usage messagesproviding a much simpler interface for custom types and actionsMore information is also in PEP 389, which is the vehicle by which argparse made it into the standard library.
Why should I use it instead of  optparse? Are their new features I  should know about?@Nicholas's answer covers this well, I think, but not the more "meta" question you start with:Why has yet another command-line  parsing module been created?That's the dilemma number one when any useful module is added to the standard library: what do you do when a substantially better, but backwards-incompatible, way to provide the same kind of functionality emerges?Either you stick with the old and admittedly surpassed way (typically when we're talking about complicated packages: asyncore vs twisted, tkinter vs wx or Qt, ...) or you end up with multiple incompatible ways to do the same thing (XML parsers, IMHO, are an even better example of this than command-line parsers -- but the email package vs the myriad old ways to deal with similar issues isn't too far away either;-).You may make threatening grumbles in the docs about the old ways being "deprecated", but (as long as you need to keep backwards compatibility) you can't really take them away without stopping large, important applications from moving to newer Python releases.(Dilemma number two, not directly related to your question, is summarized in the old saying "the standard library is where good packages go to die"... with releases every year and a half or so, packages that aren't very, very stable, not needing releases any more often than that, can actually suffer substantially by being "frozen" in the standard library... but, that's really a different issue).
The best source for rationale for a Python addition would be its PEP: PEP 389: argparse - New Command Line Parsing Module, in particular, the section entitled, Why aren't getopt and optparse enough?
There are also new kids on the block!Besides the already mentioned deprecated optparse. [DO NOT USE]argparse was also mentioned, which is a solution for people not willing to include external libs.docopt is an external lib worth looking at, which uses a documentation string as the parser for your input.click is also external lib and uses decorators for defining arguments. (My source recommends: Why Click)python-inquirer For selection focused tools and based on Inquirer.js (repo)If you need a more in-depth comparison please read this and you may end up using docopt or click. Thanks to Kyle Purdon!
At first I was as reluctant as @fmark to switch from optparse to argparse, because: I thought the difference was not that huge.Quite some VPS still provides Python 2.6 by default.Then I saw this doc, argparse outperforms optparse, especially when talking about generating meaningful help message: http://argparse.googlecode.com/svn/trunk/doc/argparse-vs-optparse.htmlAnd then I saw "argparse vs. optparse" by @Nicholas, saying we can have argparse available in python <2.7  (Yep, I didn't know that before.)Now my two concerns are well addressed. I wrote this hoping it will help others with a similar mindset.


Answer URL
https://docs.python.org/3/library/argparse.html
