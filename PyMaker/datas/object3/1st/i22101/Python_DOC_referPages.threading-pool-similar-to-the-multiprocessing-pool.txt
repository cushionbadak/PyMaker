Natural Text
Is there a Pool class for worker threads, similar to the multiprocessing module's Pool class?I like for example the easy way to parallelize a map functionhowever I would like to do it without the overhead of creating new processes.I know about the GIL. However, in my usecase, the function will be an IO-bound C function for which the python wrapper will release the GIL before the actual function call.Do I have to write my own threading pool?
I just found out that there actually  is a thread-based Pool interface in the multiprocessing module, however it is hidden somewhat and not properly documented.It can be imported viaIt is implemented using a dummy Process class wrapping a python thread.  This thread-based Process class can be found in multiprocessing.dummy which is mentioned briefly in the docs.  This dummy module supposedly provides the whole multiprocessing interface based on threads.
In Python 3 you can use concurrent.futures.ThreadPoolExecutor, i.e.:See the docs for more info and examples.
Yes, and it seems to have (more or less) the same API. 
For something very simple and lightweight (slightly modified from here):To support callbacks on task completion you can just add the callback to the task tuple.
Hi to use the thread pool in Python you can use this library :and then for use, this library do like that :The threads are the number of threads that you want and tasks are a list of task that most map to the service.
Here's the result I finally ended up using. It's a modified version of the classes by dgorissen above.File: threadpool.pyTo use the pool
The overhead of creating the new processes is minimal, especially when it's just 4 of them. I doubt this is a performance hot spot of your application. Keep it simple, optimize where you have to and where profiling results point to. 
There is no built in thread based pool. However, it can be very quick to implement a producer/consumer queue with the Queue class.From:https://docs.python.org/2/library/queue.html


Answer URL
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy
https://docs.python.org/3/library/queue.html#queue.Queue.join
