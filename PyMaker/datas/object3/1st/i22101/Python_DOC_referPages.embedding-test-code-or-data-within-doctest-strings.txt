Natural Text
I'd like to have several of the doctests in a file share test data and/or functions.  Is there a way to do this without locating them in an external file or within the code of the file being tested?updateSo I guess that doctest copies the module once, and then copies the copy for each docstring?In any case, importing the module into each docstring seems usable, if awkward.I'd prefer to use a separate namespace for this, to avoid accidentally trampling on actual module data that will or will not be imported into subsequent tests in an possibly undocumented manner.It's occurred to me that it's (theoretically) possible to dynamically create a module in order to contain this namespace.  However as yet I've not gotten any direction on how to do that from the question I asked about that a while back.  Any information is quite welcome!  (as a response to the appropriate question)In any case I'd prefer to have the changes be propagated directly into the namespace of subsequent docstrings.  So my original question still stands, with that as a qualifier.
This is the sort of thing that causes people to turn away from doctests: as your tests grow in complexity, you need real programming tools to be able to engineer your tests just as you would engineer your product code.I don't think there's a way to include shared data or functions in doctests other than defining them in your product code and then using them in the doctests.You are going to need to use real code to define some of your test infrastructure.  If you like doctests, you can use that infrastructure from your doctests.
This is possible, albeit perhaps not advertised as loudly.To obtain literate modules with tests that all use a shared execution context (i.e. individual tests can share and re-use their results), one has to look at the relevant part of documentation which says:... each time doctest finds a docstring to test, it uses a shallow copy of M‘s globals, so that running tests doesn’t change the module’s real globals, and so that one test in M can’t leave behind crumbs that accidentally allow another test to work. ...You can force use of your own dict as the execution context by passing globs=your_dict to testmod() or testfile() instead.Given this, I managed to reverse-engineer from doctest module that besides using copies (i.e. the dict's copy() method), it also clears the globals dict (using clear()) after each test.Thus, one can patch their own globals dictionary with something like:and then use it as: 


Answer URL
https://docs.python.org/3/library/doctest.html#what-s-the-execution-context
