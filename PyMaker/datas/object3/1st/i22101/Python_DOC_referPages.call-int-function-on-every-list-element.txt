Natural Text
I have a list with numeric strings, like so:I would like to convert every list element to integer, so it would look like this:I could do it using a loop, like so:Does it have to be so ugly? I'm sure there is a more pythonic way to do this in a one line of code. Please help me out.
This is what list comprehensions are for:
In Python 2.x another approach is to use map:Note: in Python 3.x map returns a map object which you can convert to a list if you want:
just a point,the list comprehension is more natural, whileis faster. Probably this will not matter in most casesUseful read: LP vs map
If you are intending on passing those integers to a function or method, consider this example:This construction is intentionally remarkably similar to list comprehensions mentioned by adamk. Without the square brackets, it's called a generator expression, and is a very memory-efficient way of passing a list of arguments to a method. A good discussion is available here: Generator Expressions vs. List Comprehension
Another way,
Another way to make it in Python 3:numbers = [*map(int, numbers)]
Thought I'd consolidate the answers and show some timeit results.Python 2 sucks pretty bad at this, but map is a bit faster than comprehension.Python 3 is over 4x faster by itself, but converting the map generator object to a list is still faster than comprehension, and creating the list by unpacking the map generator (thanks Artem!) is slightly faster still.Note: In Python 3, 4 elements seems to be the crossover point (3 in Python 2) where comprehension is slightly faster, though unpacking the generator is still faster than either for lists with more than 1 element.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/library/functions.html#map
https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists
