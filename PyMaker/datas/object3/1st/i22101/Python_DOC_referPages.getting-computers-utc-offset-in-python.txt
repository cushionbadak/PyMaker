Natural Text
In Python, how do you find what UTC time offset the computer is set to? 
gmtime() will return the UTC time and localtime() will return the local time so subtracting the two should give you the utc offset.
time.timezone:It prints UTC offset in seconds (to take into account Daylight Saving Time (DST) see time.altzone:where utc offset is defined via: "To get local time, add utc offset to utc time."In Python 3.3+ there is tm_gmtoff attribute if underlying C library supports it:Note: time.daylight may give a wrong result in some edge cases.tm_gmtoff is used automatically by datetime if it is available on Python 3.3+:To get the current UTC offset in a way that workarounds the time.daylight issue and that works even if tm_gmtoff is not available, @jts's suggestion to substruct the local and UTC time can be used:To get UTC offset for past/future dates, pytz timezones could be used:It works during DST transitions, it works for past/future dates even if the local timezone had different UTC offset at the time e.g., Europe/Moscow timezone in 2010-2015 period.
I like:I tried JTS' answer first, but it gave me the wrong result.  I'm in -0700 now, but it was saying I was in -0800.  But I had to do some conversion before I could get something I could subtract, so maybe the answer was more incomplete than incorrect.

Create a Unix Timestamp with UTC Corrected TimezoneThis simple function will make it easy for you to get the current time from a MySQL/PostgreSQL database date object.Example Output
Here is some python3 code with just datetime and time as imports.  HTH
This works for me:


Answer URL
