Natural Text
I am using multiprocessing module, and using pools to start multiple workers. But the file descriptors which are opened at the parent process are closed in the worker processes. I want them to be open..! Is there any way to pass file descriptors to be shared across parent and children?
There isn't a way that I know of to share file descriptors between processes.If a way exists, it is most likely OS specific.My guess is that you need to share data on another level.
On Python 2 and Python 3, functions for sending and receiving  file descriptors exist in multiprocessing.reduction module.Example code (Python 2 and Python 3):
There is also a fork of multiprocessing called multiprocess, which replaces pickle with dill.  dill can pickle file descriptors, and thus multiprocess can easily pass them between processes.
multiprocessing itself has helper methods for transferring file descriptors between processes on Windows and Unix platforms that support sending file descriptors over Unix domain sockets in multiprocessing.reduction: send_handle and recv_handle. These are not documented but are in the module's __all__ so it may be safe to assume they are part of the public API. From the source it looks like these have been available since at least 2.6+ and 3.3+.All platforms have the same interface:send_handle(conn, handle, destination_pid)recv_handle(conn)Where:conn (multiprocessing.Connection): connection over which to send the file descriptorhandle (int): integer referring to file descriptor/handledestination_pid (int): integer pid of the process that is receiving the file descriptor - this is currently only used on Windows


Answer URL
https://docs.python.org/3/library/multiprocessing.html?#multiprocessing.connection.Connection
