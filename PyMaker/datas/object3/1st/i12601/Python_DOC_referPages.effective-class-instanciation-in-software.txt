Natural Text
I have written a coloured_output module which holds a class named ColouredMsg.To use it I only have to create an instance of ColouredMsg:then use it this way:The thing is I am planning to use this class for console logs, in a software:As one might guess, this call will be often made, in almost every module. So at this point, I'd like to know which practice is best. Either I stick with this way, and I will have to import the module coloured_output and to declare an instance of ColouredMsg at the beginning of each module, or I can make a general function in the coloured_output module, like this:then in my software:But here I would have to create an instance of ColouredMsg everytime I want to print a coloured message, which would be heavy and should probably be avoided.Which leaves me with a third choice, I could create a general instance of ColouredMsg in my coloured_output module, which would look like:So I have two choices: either declaring a general instance in each of my software modules, or declaring a general instance in the coloured_output module. Or something else I have not thought about.I would embrace any suggestion.
Daniel's suggestion in the comments is good. But if you really want to do this yourself, I recommend using a hidden instance in the module, rather than creating a new temporary instance in each function call. The "hidden instance" approach is used in the standard library, eg, that's what the random module does for the standard random functions.


Answer URL
https://docs.python.org/3/library/logging.html#formatter-objects
