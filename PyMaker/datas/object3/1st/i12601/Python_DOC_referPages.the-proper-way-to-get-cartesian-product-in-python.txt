Natural Text
I have two lists with the same length, say 3.I want to get Cartesian product of the two, but the element at the same position shouldn't be count i.e. :How shall I do that?
You can nearly directly jot down your 'refined' carthesian product:
So here's my way to do it use zip() and itertools.product():From the document of itertools.product():itertools.product(*iterables, repeat=1)  Cartesian product of input iterables.Equivalent to nested for-loops in a generator expression. For example, product(A, B) returns the same as ((x,y) for x in A for y in B).The nested loops cycle like an odometer with the rightmost element advancing on every iteration. This pattern creates a lexicographic ordering so that if the inputâ€™s iterables are sorted, the product tuples are emitted in sorted order.And zip() does Make an iterator that aggregates elements from each of the iterables. As the document says.So my code create a set and it has the elements which you don't want, then itertools.product(A, B) produces the full list, if i not in spe removes the elements which you don't want in that list.
Just get the product in the normal way, then filter it out:Result:prod is a generator there, so remember to instead create a comprehension with prod = [...] if you plan on using it more than once.Note that this doesn't work if A and B contain repeated elements. To solve this, enumerate it and discard the items with unwanted indices:Result:
Without any indexing on the lists nor any calculation based on the length of the lists, using plain enumerate
You can iterate list A and iterate list B for each value of list A. If index of both list differs, you can print out the combination of elements from both lists.
You can try the following approaches. Since the cartesian product is a set, I will provide my answer as a set of tuples:Using a set comprehensionI use enumerate(l) in order to have a tuple (index, element) at each iteration in which index is the index of each element of l.Using itertools


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/itertools.html#itertools.product
