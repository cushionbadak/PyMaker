Natural Text
How do I change all dots . to underscores (in the dict's keys), given an arbitrarily nested dictionary?What I tried is write two loops, but then I would be limited to 2-level-nested dictionaries.This ...... should become:Is there an elegant way?
You can write a recursive function, like thisand when you invoke this with the dictionary you have shown in the question, you will get a new dictionary, with the dots in keys replaced with _sExplanationHere, we just check if the current object is an instance of dict and if it is, then we iterate the dictionary, replace the key and call the function recursively. If it is actually not a dictionary, then return it as it is.
Assuming . is only present in keys and all the dictionary's contents are primitive literals, the really cheap way would be to use str() or repr(), do the replacement, then ast.literal_eval() to get it back:Result:If the dictionary has . outside of keys, we can replace more carefully by using a regular expression to look for strings like 'ke.y': and replace only those bits:If your dictionary is very complex, with '.' in values and dictionary-like strings and so on, use a real recursive approach. Like I said at the start, though, this is the cheap way.


Answer URL
https://docs.python.org/3/glossary.html#term-mapping
