Natural Text
I understand that in python, whenever you access a class/instance variable, it will call __getattribute__ method to get the result. However I can also use obj.__dict__['x'] directly, and get what I want.I am a little confused about what is the difference? Also when I use getattr(obj, name), is it calling __getattribute__ or obj.__dict__[name] internally?Thanks in advance.
__getattribute__() method is for lower level attribute processing.Default implementation tries to find the name in the internal __dict__ (or __slots__). If the attribute is not found, it calls __getattr__().UPDATE (as in the comment):They are different ways for finding attributes in the Python data model. They are internal methods designed to fallback properly in any possible situation. A clue: "The machinery is in object.__getattribute__() which transforms b.x into type(b).__dict__['x'].__get__(b, type(b))." from docs.python.org/3/howto/descriptor.html
Not every python object has a dictionary where it's attributes are stored, there are slots, properties and attributes, that are calculated, wenn needed. You can also overwrite __getattribute__ and __getattr__. Attribute access is more complicated, than a simple dictionary lookup. So the normal way to access attribute is bywenn you have a variable with attribute name:Normally you shouldn't use the internal attributes __xxx__.
Attributes in __dict__ are only a subset of all attributes that an object has.Consider this class:An instance ic = C() of this class will have attributes 'ab', 'ac' and 'show' (and few others). The __gettattribute__ will find them all, but only the 'ab' is stored in the ic.__dict__. The other two can be found in C.__dict__.


Answer URL
https://docs.python.org/3/howto/descriptor.html
