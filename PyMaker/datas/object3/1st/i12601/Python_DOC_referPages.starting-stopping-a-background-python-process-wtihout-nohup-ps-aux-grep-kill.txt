Natural Text
I usually use:to start a background Python process that I'd like to continue running even if I log out, and:It works but it's a annoying to do all these steps.I've read some methods in which you need to save the PID in some file, but that's even more hassle.Is there a clean method to easily start / stop a Python script? like:Or could this long part nohup python -u myscript.py &> ./mylog.log & be written in the shebang of the script, such that I could start the script easily with ./myscript.py instead of writing the long nohup line?Note : I'm looking for a one or two line solution, I don't want to have to write a dedicated systemd service for this operation.
As far as I know, there are just two (or maybe three or maybe four?) solutions to the problem of running background scripts on remote systems.1) nohup1 bis) disownSame as above, slightly different because it actually remove the program to the shell job lists, preventing the SIGHUP to be sent.2) screen (or tmux as suggested by neared)Here you will find a starting point for screen.See this post for a great explanation of how background processes works. Another related post.3) Bash Another solution is to write two bash functions that do the job:Just put the above functions in your ~/.bashrc or ~/.bash_profile and use them as normal bash commands.Now you can do exactly what you told:4) DaemonThis daemon module is very useful:
Do you mean log in and out remotely (e.g. via SSH)? If so, a simple solution is to install tmux (terminal multiplexer). It creates a server for terminals that run underneath it as clients. You open up tmux with tmux, type in your command, type in CONTROL+B+D to 'detach' from tmux, and then type exit at the main terminal to log out. When you log back in, tmux and the processes running in it will still be running.


Answer URL
https://docs.python.org/3/library/os.html#os.system
https://docs.python.org/3/library/subprocess.html#subprocess
https://docs.python.org/3/library/os.html#os.kill
