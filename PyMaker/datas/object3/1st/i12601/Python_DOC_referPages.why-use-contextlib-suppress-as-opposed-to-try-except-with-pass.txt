Natural Text
Why would one use contextlib.suppress to suppress an exception, instead of try/except with a pass?There is no difference in the amount of characters between these two methods (if anything, suppress has more characters), and even though code is often counted in LOC instead of characters, suppress also seems to be much slower than try/except in both cases, when an error is raised and when it's not:
It is two lines less code without sacrificing readability.It might be especially convenient for nested or consecutive code blocks. Compare:vs.:It also allows to express the intent: with suppress(SpecificError): do_something() says don't propagate the error if it is raised while doing somethingtry: do_something() except SpecificError: pass says do something and don't propagate the error if it is raisedIt is less important because most people won't notice the difference.
Conceptually, for me, the contextlib.suppress approach allows me to handle errors that are likely to occur (such as attempting to remove a file that may not actually be there). try/except then becomes a more active handling of 'this should not happen' events (such as a divide by 0 or inability to open a few to which I want to write). 


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.suppress
