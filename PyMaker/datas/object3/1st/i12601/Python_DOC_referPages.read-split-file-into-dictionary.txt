Natural Text
I have a file in which my data is like:And so on.I'd like to read this file to access data line by line in my script so I try this to read my file and memorize it in a dictionary:Then I will do something like:I have this error:because I don't know how to deal with the second split element which is a list.Is there an other way to access and work with any input file easily?
First at all, you can set a maxsplit argument of str.split(). From the document:str.split(sep=None, maxsplit=-1) Return a list of the words in the string, using sep as the delimiter string. If maxsplit is given, at most maxsplit splits are done (thus, the list will have at most maxsplit+1 elements). If maxsplit is not specified or -1, then there is no limit on the number of splits (all possible splits are made).Demo:Then you need convert the string of list to a real list. I'd recommend use ast.literal_eval(). From the document:ast.literal_eval(node_or_string)Safely evaluate an expression node or a string containing a Python literal or container display. The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and None.For example:If you need remove the \n after the string, just use str.strip(). From the document:str.strip([chars])Return a copy of the string with the leading and trailing characters removed. The chars argument is a string specifying the set of characters to be removed. If omitted or None, the chars argument defaults to removing whitespace.Use it like this:It remove all tabs, newlines, spaces before and after the string, If you just want remove the spaces, newlines before or after the string, take a look at str.lstrip() and str.rstrip(). So you can write your code like this:If you want the dictionary's keys be int objects, just use int() function to convert it like:
For a save eval use ast.literal_eval:From the docs:This can be used for safely evaluating strings containing Python values from untrusted sources without the need to parse the values oneself.
Would this do?it producesIn case you want the key to be an integer instead of a string just do
Use the maxsplit argument and ast.literal_eval():Note that I've changed the name of the list to something that doesn't mask the built-in function list(), and used the default delimiter of any whitespace.


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.split
https://docs.python.org/3/library/ast.html#ast.literal_eval
https://docs.python.org/3/library/stdtypes.html#str.strip
https://docs.python.org/3/library/stdtypes.html#str.lstrip
https://docs.python.org/3/library/stdtypes.html#str.rstrip
https://docs.python.org/3/library/ast.html?highlight=literal_eval#ast.literal_eval
