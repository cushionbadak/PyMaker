Natural Text
This is mostly syntactic sugar but I'd like to access the items of a dictionary as object properties.Example:and I'd like to haveEdit: some code of a potential solution with a nested structure with dot notation: device.property.field
You want __getattr__ and __setattr__, though you'll have to roll your own class (I'm not aware of any builtins, though namedtuple might work if you don't need to change values much)If you just want to access a sub-dictionary that way, you just change self to self.cool_dictNote that __getattr__ is used after any other lookups fail, but if you want to ensure that your function is called first, you can use __getattribute__Also note that self.cool_dict does not exist on CoolThing until after __init__ is called. My initial version of this would throw a maximum recursion depth exceeded, because as you created the class it would go to set self.cool_dict in init, call __setattr__, which would try to get self.cool_dict so it could set [attr] = value on it. Naturally it can't find cool_dict yet, and so it will try to call __getattr__ again... which can't find cool_dict and round and round it goes.Another option would be to use a class-level variable instead, but that's probably not at all what you want :)
CoolDict already exists, it's named __dict__:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getattr__
https://docs.python.org/3/reference/datamodel.html#object.__setattr__
https://docs.python.org/3/reference/datamodel.html#object.__getattribute__
