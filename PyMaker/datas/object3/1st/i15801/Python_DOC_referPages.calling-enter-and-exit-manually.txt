Natural Text
I've googled calling __enter__ manually but with no luck. So let's imagine I have MySQL connector class that uses __enter__ and __exit__ functions (originally used with with statement) to connect/disconnect from a database.And let's have a class that uses 2 of these connections (for example for data sync). Note: this is not my real-life scenario, but it seems to be the simplest example. Easiest way to make it all work together is class like this:Q: Is it okay (is there anything wrong) to call __enter__/__exit__ manually like this? Pylint 1.1.0 didn't issue any warnings on this, nor have I found any article about it (google link in the beggining).And what about calling:Is this a good/bad practice? Why?
No, there's nothing wrong with that. There are even places in the standard library that do it. Like the multiprocessing module:Or the tempfile module:The standard library examples aren't calling __enter__/__exit__ for two objects, but if you've got an object that's responsible for creating/destroying the context for multiple objects instead of just one, calling __enter__/__exit__ for all of them is fine.The only potential gotcha is properly handling the return values of the __enter__ __exit__ calls for the objects you're managing. With __enter__, you need to make sure you're returning whatever state is required for the user of your wrapper object to get back from the with ... as <state>: call. With __exit__, you need to decide if you want to propagate any exception that occurred inside the context (by returning False), or suppress it (by returning True). Your managed objects could try to do it either way, you need to decide what makes sense for the wrapper object.
Your first example is not a good idea:What happens if slave_connection.__enter__ throws an exception:master_connection acquires its resourceslave_connection failsDataSync.__enter__ propogates the exceptionDataSync.__exit__ does not runmaster_connection is never cleaned up!Potential for Bad ThingsWhat happens if master_connection.__exit__ throws an exception?DataSync.__exit__ finished earlyslave_connection is never cleaned up!Potential for Bad Thingscontextlib.ExitStack can help here:Asking the same questions:What happens if slave_connection.__enter__ throws an exception:The with block is exited, and stack cleans up master_connectionEverything is ok!What happens if master_connection.__exit__ throws an exception?Doesn't matter, slave_connection gets cleaned up before this is calledEverything is ok!Ok, what happens if slave_connection.__exit__ throws an exception?ExitStack makes sure to call master_connection.__exit__ whatever happens to the slave connectionEverything is ok!There's nothing wrong with calling __enter__ directly, but if you need to call it on more than one object, make sure you clean up properly!


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack
https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack
