Natural Text
I have 3 lists:I need to do the following:For each list, get max of every 5 element blocks, so hypothetically:Sum each "maxes" list, so:Take the max of these 3 sums, so:I could not get myself to use map() here. What would be the most Pythonic (concise) way to do this? Thanks.
Just get the sumof each chunk x[i:i+5]To make it more obvious, the lists become split into the following chucks:Then max just gets the largest sum:If you want the highest two elements from each check:If the answer should be 53:
Let's break this into pieces.The first point is that you probably don't want separate a1, a2, and a3` variables; if you're going to have to do the exact same thing repeatedly to multiple values, and then iterate over those values, they probably belong in a list. So:Now, how do you split an iterable into 5-element pieces? There are a number of ways to do it, from the grouper function in the itertools recipes to zipping slices to iterating over slices. I'll use grouper:Now we just want the max value of each group, so:And now, we want to sum up each sublist:And finally, we want to take the max of these sums:Now, given that each of these list comprehensions is only being used as a one-shot iterable, we might as well turn them into generator expressions. And if you want to, you can merge some of the steps together:And, having done that, you don't actually need a to be created explicitly, because it only appears once:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
