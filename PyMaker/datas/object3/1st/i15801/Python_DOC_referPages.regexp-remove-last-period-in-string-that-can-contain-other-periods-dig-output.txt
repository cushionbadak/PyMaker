Natural Text
I am trying to parse the output of the linux dig command and do several things on one shot with regular expressions.Let's say I dig the host mail.yahoo.com:This command outputs:What I'd like to is finding all the <host>, <record_type> and <resolved_name> parts without the final period using only one regular expressionFor this particular example with mail.yahoo.com, it'd be:But it turns out that the dig command might be showing a period at the end of the name: Doing a regular expression that splits dig's output and returns the name with the final period is fairly straightforward:But calling .findall with that regex does return the final period in the host, because \S+ will match the last period as well:So I'd need something that matches all non-spaces \S except if it's a period followed by a whitespace.I've done endless tries, and I haven't been able to come up with a decent solution.Thank you in advance!PS:I know I can always use the "easy" regular expression and (on a second pass) remove the last dot of the found string, but I'm curious about whether this can be done with a regular expression in one shot.
You can use this pattern with multiline modifier:Groups stored in $1 $2 and $3DEMOEdit:  Try this:
But calling .findall with that regex does return the final period in the host, because \S+ will match the last period as well…There are two problems here.First, once you're escaping things with backslashes, you need to use raw string literals (r"…"), or you have to escape the backslashes too. I'm not actually sure whether any of your backslash-prefixed characters happen to match Python backslash-escape sequences, but that in itself is enough reason to use a raw-string literal, so your readers don't have to look up the exact rules.Second, the general case of this problem is that regex repeats are greedy by default: they will match as much as possible while still allowing the rest of the pattern to match; when you want them to match as little as possible while still allowing the rest of the pattern to match, you need to add a ? after the + or *.In your particular case, the \S+ can match everything up to and including the final ., and the \.*\s* will successfully match 0 .s and 0 spaces. but \S+? will leave the final . for the next part of the pattern. You can also force the period out of the first group by appending a period after it. Like so:Debuggex Demo
You can simply force that there is no period at the end of your group (and that it contains no space) :
As an alternative answer i suggest to use str.split(),if you have your string lines in a list like L you need this :Note that [:-1] remove the last . from host address !


Answer URL
https://docs.python.org/3/howto/regex.html#greedy-versus-non-greedy
