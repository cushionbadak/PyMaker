Natural Text
I am trying to split a path to get the name of the file, the last part of the string, and I am dealing with a problem that I am not being able to solve:My string: te = 'C:\Users\Desktop\TEST\Excel_Reports\1837.xlsx'I have done this:I do not know what is the problem with \0 or \number....is it any special Python character??Here is what I would like to get:But I can't get exactly this.PD: is not a valid solution something like file_name = te[-5:-1] because the name of the excel file can be different anytime, always numbers though.EDIT: Showing how I am getting teEDIT: Thanks for all the answers and comments, they pointed me on the right direction.However, I solved the issue just by replacing this line:for this one:And then, this works:Gives the name (number) of the file without the extension xlsx
You need to make the literal for te a raw stringThis is due to the syntax for python literal strings. \g, \n, \t etc would also cause problems. The other slashes don't need to be escaped since the character following isn't a valid escape sequence - but it's confusing as hell. Better to use the raw string syntaxIf you're getting te from some place other than a source file eg an ini file or a database (as you should), you wouldn't even see this problem. 
Assuming you have a correct path, then:You could also then further split to just get the base of the filename, eg:
You can avoid str.split at all, using only os.path functions:If you know in an advance that you are parsing Windows path, it is best to use npath - windows flavour of os.path module, so your code does it's job even if run on Linux:


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
