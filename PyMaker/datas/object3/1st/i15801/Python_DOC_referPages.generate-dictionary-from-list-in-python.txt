Natural Text
Here's the original list:And so on. I need to extract the name/value pairs into a dictionary:Can someone elaborate on the easiest way to do this? 
If L is your original list, You can use zip(*[iter(L)]*2) to group the items into pairs. The dict constructor can take an iterable of such pairs directlyI'm not sure what you mean by simpler (simpler to understand?). It's hard to guess you think is simpler as I don't know what level you're at. Here's a way without using iter or zip. If you don't know what enumerate does yet, you should look it up.
Not to take away from anyone. I think this might be a little simpler to understand:Though this is less efficient for large list than gnibbler's answer.
You need a function to group a sequence into fixed-length chunks. Unfortunately, this is lacking from the Python core. You could use partition from the funcy library. (Side note: In other languages this is called chunksOf or grouped).The itertools documentation suggests this function:And the zip documentation suggests a different way to accomplish the same thing (given in gnibbler's answer):Once that's available, the rest of the job is trivial.
You can try thisa[::2] will get all second element from list start from 0th element. a[1::2] will get all second element from list start from 1st element.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/functions.html#zip
