Natural Text
I have been trying to understand better the decorators and closures.I am trying to decorate the function to achieve: remembering previously passed values, counting how many times the function was called.I want to make it using two separate decorators - for science :)So I managed to create this working code (I used some snippet for the counting - I admit)output:Now I want to change the memoize function to a neat pythonic decorator. Here is what I came out with so far:And here is the output:How to get rid of the "ugly" line ( print dosth._memoize__f.count() ) ? In other words - how can I directly call the methods of the stacked decorators? (without adding a method to the decorators to call the methods of other decorators - that is not my point)
You'll still have to unwrap the decorators if you want to access specific decorator results, but the 'default' attribute for this is __wrapped__. The Python 3 version of the @functools.wraps() decorator sets this attribute for you (via the functools.update_wrapper() utility function, starting with Python 3.4), but you can do the same manually in your own decorators:Now you can access the wrapped callable with:wich is the standard Pythonic way of unwrapping decorators.


Answer URL
https://docs.python.org/3/library/functools.html#functools.wraps
https://docs.python.org/3/library/functools.html#functools.update_wrapper
