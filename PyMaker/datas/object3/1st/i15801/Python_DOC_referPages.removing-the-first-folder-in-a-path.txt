Natural Text
I have a path which looks likeand I would like to remove the First from it, thus obtainingThe only idea I could come up with is to use recursively os.path.split but this does not seem optimal. Is there a better solution?
There really is nothing in the os.path module to do this. Every so often, someone suggests creating a splitall function that returns a list (or iterator) of all of the components, but it never gained enough traction.Partly this is because every time anyone ever suggested adding new functionality to os.path, it re-ignited the long-standing dissatisfaction with the general design of the library, leading to someone proposing a new, more OO-like, API for paths to deprecated the os, clunky API. In 3.4, that finally happened, with pathlib. And it's already got functionality that wasn't in os.path. So:Or… are you sure you really want to remove the first component, rather than do this?If you need to do this in 2.6-2.7 or 3.2-3.3, there's a backport of pathlib.Of course, you can use string manipulation, as long as you're careful to normalize the path and use os.path.sep, and to make sure you handle the fiddly details with non-absolute paths or with systems with drive letters, and…Or you can just wrap up your recursive os.path.split. What exactly is "non-optimal" about it, once you wrap it up? It may be a bit slower, but we're talking nanoseconds here, many orders of magnitude faster than even calling stat on a file. It will have recursion-depth problems if you have a filesystem that's 1000 directories deep, but have you ever seen one? (If so, you can always turn it into a loop…) It takes a few minutes to wrap it up and write good unit tests, but that's something you just do once and never worry about again. So, honestly, if you don't want to use pathlib, that's what I'd do.
A bit like another answer, taking advantage of os.path :... assuming your string starts with a separator.
A simple approachoutput:In this above code i have split the string. then joined leaving 1st elementUsing itertools.dropwhile:
I was looking if there was a native way to do it, but it seems it doesn't. I know this topic is old, but this is what I did to get me to the best solution:There was two basically two approaches: using split() and using len(). Both had to use slicing.1) Using split()Result: --- 0.420122861862 seconds ---*Removing the char "/" in the line new_path = "/" + "/".... didn't improve the performance too much.2) Using len(). This method will only work if you provide the folder if you would like to removeResult: --- 0.199596166611 seconds ---*Even with that "if" to check if the path starts with the file name, it was twice as fast as the first method. In summary: each method has a pro and con. If you are absolutely sure about the folder you want to remove use method two, otherwise I recommend to use method 1 which people here have mentioned previously.  


Answer URL
https://docs.python.org/3/library/pathlib.html
