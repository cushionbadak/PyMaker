Natural Text
I am learning about namedtuple. I would like to find a way, using the ._replace method, to update all the appearances of a namedtuple wherever they are. Say I have a list of nodes, and lists of elements (two-node beams, four-node quads) and boundaries ("one node" elements) defined by these nodes. I am playing around with doing this:Now, if I replace n1 with a new Node:None of the other items are updated:I understand the Python naming and object model and the why behind this: b1.b has been set to the object Node(0,0), not the name n1. So when n1 is changed, the other namedtuples still contain the same object as before, while n1 gets a new object. What I would like to do is change this behavior so that when I change n1, the changes are "felt" in b1, be1, q1, etc. How can I do this? 
All instances of namedtuple-produced classes are immutable. ._replace() creates a new instance, it doesn't even update the one instance you call this on.Because the instances are immutable you cannot do what you want with a namedtuple. You'll have to provide such functionality in a subclass, effectively breaking the immutability. Or just provide your own Node custom class that allows the attributes to be mutated directly:Like a namedtuple, this class uses __slots__ to cut back on memory use. You can set the x and y attributes directly on instances, and any other references to the instance will see the change:


Answer URL
https://docs.python.org/3/reference/datamodel.html#slots
https://docs.python.org/3/library/string.html#formatstrings
