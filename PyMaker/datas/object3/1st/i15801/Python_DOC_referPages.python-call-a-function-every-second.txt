Natural Text
I have a game that I've written for my first project and I'd like to have a system where I can play and pause the game. When you click the unpause button, I want it to call a function every 1 second that advances the date. Time.sleep stops the whole program so it's not useful to me and I cant seem to restart threads after I've started one. Here's the advancing day function.Later I have the code for when the button is clicked that checks if it's paused or notEverything works perfectly up until I press the button a third time. Does anyone know a way I can restart the thread or maybe use a different method to do what I want?
Without seeing the rest of your code, it's hard to be sure where the problem is, but my guess would be that sometimes, when you click the button, ispaused is 1, but timer is an expired timer rather than a paused one. Calling start on an expired timer has no effect.While that could be fixed, there are easier ways to do this.For one thing, it looks like you're using some kind of GUI or game framework here. I have no idea which one you're using, but pretty much every one of them has a function to do timers (in the main event loop, as opposed to in a separate thread, but that's not the key thing here) that are more powerful than threading.Threadâ€”in particular, that can automatically recur every second until canceled. That would obviously make your life easier.If not, it's pretty easy to write your own repeating Timer, or to just find one on PyPI. Notice that the threading docs start with a link to the source code. That's because, like many modules in the stdlib, threading is written to be simple and easy to understand, to serve as sample code on top of being useful in its own right. In particular, Timer is dead simple, and it should be pretty obvious how to extend it: Just put a loop around the run method.
At the start of your function you've set up a new global each time and a timer:Then at the end of the function you have threading.Thread.time(self) which isn't needed and needs to be removed. Then after the function declaration you have timer = threading.Timer(1.0, time) which may be an error because when it is first called, the global timer may not have been created yet.  Replace that last line of code with time() to just call the function immediately the first time. Changing these two lines will probably fix your code good enough.Also, you have your for loops like this:and the problem with this would be the use of the keyword self . If this function is defined inside a class, then this use of self may be interpreted as a reference to the object.  It is usually better not to use keywords such as self as iterators.  Replace all uses of self with something else, like m to improve your code.


Answer URL
https://docs.python.org/3/library/threading.html
