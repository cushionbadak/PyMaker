Natural Text
I've got a feeling that the core concept of this might be a repeat question but I can't find it.I have a bunch of radio callsigns and want to find the country of origin from here.I've tried to do basic comparison to find the country location but the way that Python orders numerals and characters vs the way the callsigns do is different:In Python "ZR1" < "ZRA" == True but this would be False in the callsign convention.Is there anyway that I can change Python's ordering from ... 7 < 8 < 9 < A < B … to ... X < Y < Z < 0 < 1 < 2 …?
You could create a dict mapping characters to their positions in the "correct" ordering and then compare the lists of positions:Usage:To make this comparison automatic, you could also create a class Callsign and override the __cmp__ or __eq__ and __lt__ methods accordingly:
Functions like sorted() allow you to provide your own cmp function - you just have to implement it. But you're free to say that numbers are over letters and the usual sorting algorithm will take care of the rest.If you just want to compare things rather than sort, you'll have to implement your own function for it. Go character by character from both strings and make the decision based on that.
You can simply write your own key function, like this:It wouldn't be easy to alter behaviour of > and < symbols but I suppose this approach solves your problem. You can also use radio_order as a key param if you were to sort some strings according to this new ordering.In this case, we can keep python's approach to comparing sequences (strings) but want to alter how parts of those sequences (chars) are compared. Hence, we map our chars to stuff (ints) that would get compared in a way we like and then map our strings to tuples of those ints. Easy to see that resulting tuples of ints would be compared in a way we need original strings to be compared.
You can use string.translate a couple times, though it might be costly... Basically, map the strings to a value that will be compared correctly using the default python comparison operators. Assuming you can read in all of the call sign ranges from the website you linked to, I would put them into a list radio_sign_ranges and then translate them and your signs in questionThen use some numerical tools to find which sign belongs to which country. I would have a look at numpy.digitize where argument x=signs_py and argument bins=ranges_py, or something like that..Is there anyway that I can change python's ordering from "... 7 < 8 < 9 < A < B ..." to "... X < Y < Z < 0 < 1 < 2 ..."?Maybe have a look here if you want to dig deeper.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#comparing-sequences-and-other-types
