Natural Text
I have a list of lists (which can contain up to 90k elements)I would like to assign an id to each elements, where the id is unique, except when the item is duplicated. So for the list above, I'd need this back:What is the most effective way to do this?
Keep a map of already seen elements with the associated id.you could also use a list-comprehension:Unfortunately lists aren't hashable so you have to convert them to a tuple when storing them as keys of the mapping.Note the trick of using defaultdict, and count().__next__ to provide unique increasing ids. On python2 you have to replace .__next__ with .next.The defaultdict will assign a default value when it cannot find a key. The default value is obtained by calling the function provided in the constructor.In this case the __next__ method of the count() generator yields increasing numbers.As a more portable alternative you could do:An alternative solution, as proposed in the comments, is to just use the index as unique id:This is imple however:It takes O(N^2) time instead of O(N)The ids are unique, increasing but not consecutive (which may or may not be a problem)For comparison of the two solutions see:Note how for a 90k element list the mapping solution takes less 40 milliseconds while the indexing solution takes 26 seconds. 
This is how I approached it:Which prints out the sequence of ids, along with an approximate time it took to compute a sequence of random integers in a list between 1 and 4, 90000 times. The actual time will always be a bit higher, since it needs to be accounted for in the print statement at the end, but it should not be too much of a difference. I also used the time library to label the time intervals between the start and the end of the code block.The itertools library along with product used in the code segment will speed up the computation too.
I slight modification of Bakuriu's solution that works only with numpy arrays, it works better in terms of memory footprint and computation (as it does need to cast arrays to tuples):


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
