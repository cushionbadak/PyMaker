Natural Text
I want to extract all Python functions/methods with their signatures from a Python project. I've tried:but this doesn't show full signatures when parameters span several lines. Any suggestions?
You can tokenize the file and use that to print function definitions:This works regardless of how many lines a function definition uses.Demo:The above uses the textwrap module to demonstrate how it can handle multi-line definitions.If you need to support Python 3 code with annotations, you'll need to be a little bit cleverer and track open and closing parens too; a colon within the parentheses doesn't count. On the other hand, Python 3 tokenize.tokenize() produces named tuples which make the function below a little easier to read:In Python 3 you'd preferably open source files in binary mode and let the tokenizer figure out the right encoding. Also, the above Python 3 version can tokenize Python 2 code without issue.
This isn't a place to use regex in my opinion, unless you accept the fact that you'll potentially miss many edge cases.Instead I'd suggest you use inspect and funcsigs (funcsigs is a backport of changes made in Python 3's inspect module. It includes the signature parsing functions).Here's the file we'll parse (inspect_me.py):And here's the code that will parse it for us:Inspect is the way to go about introspection in python. token and ast could both do the job but they're much more low level/complex than what you actually need here.The output of running the above:
You can parse the source using the ast module. It allows you to see exactly the same code structure the interpreter sees. You just need to traverse it and dump out any function definitions you find.If you want to handle edge cases like multi-line declarations, bash/grep is not enough.


Answer URL
https://docs.python.org/3/library/tokenize.html#tokenize.tokenize
https://docs.python.org/3/library/inspect.html
https://docs.python.org/3/library/inspect.html#introspecting-callables-with-the-signature-object
