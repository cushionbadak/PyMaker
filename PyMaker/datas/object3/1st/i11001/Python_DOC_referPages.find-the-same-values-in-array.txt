Natural Text
Given an item, how can I count its occurrences in a list in Python?
If you only want one item's count, use the count method:Don't use this if you want to count multiple items. Calling count in a loop requires a separate pass over the list for every count call, which can be catastrophic for performance. If you want to count all items, or even just multiple items, use Counter, as explained in the other answers.
If you are using Python 2.7 or 3 and you want number of occurrences for each element:
Counting the occurrences of one item in a listFor counting the occurrences of just one list item you can use count()Counting the occurrences of all items in a list is also known as "tallying" a list, or creating a tally counter.Counting all items with count()To count the occurrences of items in l one can simply use a list comprehension and the count() method(or similarly with a dictionary dict((x,l.count(x)) for x in set(l)))Example: Counting all items with Counter()Alternatively, there's the faster Counter class from the collections libraryExample:How much faster is Counter?I checked how much faster Counter is for tallying lists. I tried both methods out with a few values of n and it appears that Counter is faster by a constant factor of approximately 2.Here is the script I used:And the output:
Another way to get the number of occurrences of each item, in a dictionary:
list.count(x) returns the number of times x appears in a listsee:http://docs.python.org/tutorial/datastructures.html#more-on-lists
Given an item, how can I count its occurrences in a list in Python?Here's an example list:list.countThere's the list.count methodThis works fine for any list. Tuples have this method as well:collections.CounterAnd then there's collections.Counter. You can dump any iterable into a Counter, not just a list, and the Counter will retain a data structure of the counts of the elements.Usage:Counters are based on Python dictionaries, their keys are the elements, so the keys need to be hashable. They are basically like sets that allow redundant elements into them.Further usage of collections.CounterYou can add or subtract with iterables from your counter:And you can do multi-set operations with the counter as well:Why not pandas?Another answer suggests:Why not use pandas? Pandas is a common library, but it's not in the standard library. Adding it as a requirement is non-trivial.There are builtin solutions for this use-case in the list object itself as well as in the standard library.If your project does not already require pandas, it would be foolish to make it a requirement just for this functionality.
If you want to count all values at once you can do it very fast using numpy arrays and bincount as followswhich gives
I've compared all suggested solutions (and a few new ones) with perfplot (a small project of mine).Counting one itemFor large enough arrays, it turns out thatis slightly faster than the other solutions.Counting all itemsAs established before,is what you want.Code to reproduce the plots:2.
If you can use pandas, then value_counts is there for rescue. It automatically sorts the result based on frequency as well. If you want the result to be in a list of list, do as below
Why not using Pandas?Output:If you are looking for a count of a particular element, say a, try:Output:

I had this problem today and rolled my own solution before I thought to check SO.  This:is really, really slow for large lists.  My solutionis actually a bit faster than the Counter solution, at least for Python 2.7.
To count the number of diverse elements having a common type:gives3  , not 6
Output list:
It was suggested to use numpy's bincount, however it works only for 1d arrays with non-negative integers. Also, the resulting array might be confusing (it contains the occurrences of the integers from min to max of the original list, and sets to 0 the missing integers).A better way to do it with numpy is to use the unique function with the attribute return_counts set to True. It returns a tuple with an array of the unique values and an array of the occurrences of each unique value.and then we can pair them asIt also works with other data types and "2d lists", e.g.
Count of all elements with itertools.groupby()Antoher possiblity for getting the count of all elements in the list could be by means of itertools.groupby().With "duplicate" countsReturnsNotice how it combined the first three a's as the first group, while other groups of a are present further down the list. This happens because the input list L was not sorted. This can be a benefit sometimes if the groups should in fact be separate.With unique countsIf unique group counts are desired, just sort the input list:Returns
You can also use countOf method of a built-in module operator.
May not be the most efficient, requires an extra pass to remove duplicates. Functional implementation : returns : or return as dict :returns : 
Below are the three solutions:Fastest is using a for loop and storing it in a Dict.Result
This will return the amount of occurences of your_value
if you want a number of occurrences for the particular element:



Answer URL
https://docs.python.org/3/library/operator.html#operator.countOf
https://docs.python.org/3/library/operator.html
