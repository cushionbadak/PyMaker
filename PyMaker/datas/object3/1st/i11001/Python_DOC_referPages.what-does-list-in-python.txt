Natural Text
I'm learning python and have a question about the code presented below:The result of this code must be 2. But why? I don't understand this code. Could you explain the last line? I don't understand what list(nums) does.
The set containing 1 - 6.The intersection of the set containing 0 - 3 and the previous set, thus { 1, 2, 3 } (the elements common to both).filter gets rid of the elements that don't return true when passed through the callable given as its first argument. Thus here it gets rid of the entry 1, leaving {2, 3}.Now you see why the length is 2.
Questions like this is where the REPL can come in handy:From this we can see that & will join two sets and take the logical-AND commonality of the two (also called the intersection, or logical conjunction). filter takes a function (defined by lambda) and walks through a collection, eliminating anything that doesn't return True from the filtering function.To understand how lambda works, we can also use the interpreter:In this case we assign a function to f, one that takes a value and returns a boolean indicating whether it is greater than or less than one. Functional programming patterns, such as filter utilize functions in this form a great deal: lambda is how you define such a function, and it can be used in an in-line form to create an 'anonymous' function (that is, a function that is not assigned a name).One final note, because it will not be clear from your provided sequence:Note that once you apply list to the filter object provided by calling the filter function, that object will be emptied. Calling list on that object again will result in nothing being returned.
& gives the intersection of two sets. That is, lambda is an anonymous function. It is similar to the codefilter iterates through nums and calls the lambda function on each one. If the lambda function returns True then the element is included in the returned set. list() converts an iterable to a list type.len() returns the number of elements in the list.


Answer URL
https://docs.python.org/3/library/stdtypes.html#set.intersection
https://docs.python.org/3/library/functions.html#filter
https://docs.python.org/3/tutorial/interpreter.html
