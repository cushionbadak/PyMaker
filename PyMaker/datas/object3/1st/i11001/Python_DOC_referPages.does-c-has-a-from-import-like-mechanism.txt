Natural Text
I've read here about importing a module in python. There is an option to not import a whole module (e.g. sys) and to only import a part of it (e.g. sys.argv). Is that possible in C? Can I include only the implementation of printf or any other function instead of the whole stdio.h library?I ask this because it seems very inefficient to include a whole file where I need only several lines of code.I understand that there is a possibility that including only the function itself won't work because it depends on other functions, other includes, defines, and globals. I only ask in order to use this for whole code blocks that contain all the data that are needed in order to execute.
C does not have anything that is equivalent to, or even similar to Python's "from ... import" mechanism.I ask this because it seems very inefficient to include a whole file where I need only several lines of code.Actually, what normally happens when you #include a file is that you import the declarations for macros, or functions declared somewhere else.  You don't import any executable code ... so the "unnecessary" inclusions have ZERO impact on runtime code size or efficiency.If you use (i.e. "call") a macro, then that causes the macro body to expanded, which adds to the executable code size.  If you call a function whose declaration you have included, that will add the code ... for the call statement itself.  The function does not expanded though.  Instead, an "external reference" is added to your ".o" file, which the loader resolves when you create the executable from the ".o" files and the dependent libraries.
Python:  "There is an option to not import a whole module" : I think you misunderstand what is going on here.  When you specify the names to import, it means that only those names go into you namespace.  The "whole" module is compiled, and any code outside functions is run, even when you specify just one name.C:  I am going to assume that you are using an operating system like UNIX/Linux/OS X or Windows (the following does not apply to embedded systems).  The closest C has to import is dynamic runtime linking.  That is not part of standard C, it is defined by the operating system.  So POSIX has one mechanism and Windows has another.  Most people call these library files "DLLs", but strictly speaking that is a Microsoft term, they are "shared objects" (.so) on UNIX type systems.When a process attaches to a DLL or .so then it is "mapped" into the virtual memory of the process.  The detail here varies between operating systems, but essentially the code is split into "pages", the size of which varies, but 4kb for 32-bit systems and 16kb for 64-bit is typical.  Only those pages that are required are loaded into memory.  When a page is required then a so-called "page-fault" occurs and the operating system will get the page from either the executable file or the swap area (depending on the OS).One of the advantages of this mechanism is that code pages can be shared between processes.  So if you have 50 processes all using the same DLL (like the C run-time library, for example), then only one copy is actually loaded into memory.  They all share the one set of pages (they can because they are read-only).  There is no sharing mechanism like that in Python - unless the module is itself written in C and is a DLL (.pyd).All this occurs without the knowledge of the program.EDIT:  looking at other's answers I realise you might be thinking of the #include pre-processor directive to merge a header file into the source code.  Assuming these are standard header files, then they make no difference to the size of your executable, they should be "idempotent".  That is, they only contain information of use by the pre-processor, compiler, or linker.  If there are definitions in the header file that are not used there should be no side effect.Linking libraries (-l directive to the compiler) that are not used will make the executable larger, which makes the page tables larger, but aside from that if they are not used then they shouldn't make any significant difference.  That is because of the on-demand page-loading described above (the concept was invented in the 1960s in Manchester UK).


Answer URL
https://docs.python.org/3/reference/import.html
