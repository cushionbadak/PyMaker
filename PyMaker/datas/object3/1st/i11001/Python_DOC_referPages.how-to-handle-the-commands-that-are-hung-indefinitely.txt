Natural Text
Is there any argument or options to setup a timeout for Python's subprocess.Popen method?Something like this:subprocess.Popen(['..'], ..., timeout=20) ?
I would advise taking a look at the Timer class in the threading module.  I used it to implement a timeout for a Popen.First, create a callback:Then open the process:Then create a timer that will call the callback passing the process to it.Somewhere later in the program, you may want to add the line:Otherwise, the python program will keep running until the timer has finished running.EDIT: I was advised that there is a race condition that the subprocess p may terminate between the p.poll() and p.kill() calls.  I believe the following code can fix that:Though you may want to clean the exception handling to specifically handle just the particular exception that occurs when the subprocess has already terminated normally.
subprocess.Popen doesn't block so you can do something like this:It has a drawback in that you must always wait at least 20 seconds for it to finish.
The output of this should be:where it can be seen that, in the first execution, the process finished correctly (return code 0), while the in the second one the process was terminated (return code -15).I haven't tested in windows; but, aside from updating the example command, I think it should work since I haven't found in the documentation anything that says that thread.join or process.terminate is not supported.
You could do using Twisted's asynchronous process API.
A python subprocess auto-timeout is not built in, so you're going to have to build your own.This works for me on Ubuntu 12.10 running python 2.7.3Put this in a file called test.pySave it, and run it:The sleep 20 command takes 20 seconds to complete.  If it doesn't terminate in 3 seconds (it won't) then the process is terminated.There is three seconds between when the process is run, and it is terminated.
Unfortunately, there isn't such a solution. I managed to do this using a threaded timer that would launch along with the process that would kill it after the timeout but I did run into some stale file descriptor issues because of zombie processes or some such.
No there is no time out. I guess, what you are looking for is to kill the sub process after some time. Since you are able to signal the subprocess, you should be able to kill it too.generic approach to sending a signal to subprocess:You could use this mechanism to terminate after a time out period.
As of Python 3.3, there is also a timeout argument to the blocking helper functions in the subprocess module.https://docs.python.org/3/library/subprocess.html
Yes, https://pypi.python.org/pypi/python-subprocess2 will extend the Popen module with two additional functions,This will wait up to  acertain number of seconds  for the process to complete,  otherwise return Nonealso,This will wait up to a point, and then call .terminate(), then .kill(), one orthe other or some combination of both, see docs  for full details:http://htmlpreview.github.io/?https://github.com/kata198/python-subprocess2/blob/master/doc/subprocess2.html
For Linux, you can use a signal.  This is platform dependent so another solution is required for Windows.  It may work with Mac though.    


Answer URL
https://docs.python.org/3/library/subprocess.html
