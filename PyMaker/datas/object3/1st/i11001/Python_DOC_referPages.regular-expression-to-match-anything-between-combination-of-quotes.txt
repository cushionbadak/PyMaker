Natural Text
[Follow up from my old question with better description and links]Trying to match any character (including newlines, tab characters, whitespaces, etc.) between two symbols, including those symbols.For example:foobar89\n\nfoo\tbar; '''blah blah blah'8&^"''' need to match ''blah blah blah'8&^"'''and fjfdaslfdj; '''blah\n blah\n\t\t blah\n'8&^"''' need to match '''blah\n blah\n\t\t blah\n'8&^"'''My Python code (taken and adapted from here) onto which I am testing the regexes :where the file_with_examples_to_match is:From this answer, I try r"('''.*?''')|"r'(""".*?""") to match both cases of triple single-quotes and triple double-quotes without success. Same when trying r'([\'"]{3}).*?\2').I have set up an online regex tester where some of the regexes do match as they are supposed to but when in the code above they fail.I am interested in gaining understanding in Python's regular expressions so I would appreciate both a solution (perhaps a valid regex to do the desired matching on my code) and a brief explanation so I can see my shortcomings.
You're probably missing flags to make . match newline alsoIn this case the output isCOM is now matching way too much, since . now gets everything to the end of file. If we modify this pattern a bit to make it less greedywe can now use re.MULTILINE to make it match lessThe output now isIf you definitely don't want to use flags, you can use a kind of 'hack' to do without ., since this metacharacter matches almost everything, except newlines. You can create a match group, which would match everything but one symbol, which is highly unlikely to be present in files you would parse. For example, you could use a character with an ASCII code 0. Regex for such character would be \x00, the corresponding pattern [^\x00] would match every symbol (even newlines), except symbol with ASCII code 0 (that's why it's a hack, you aren't able to match every symbol without flags). You'll need to keep initial regex for COM, and for BOTH it would beHighly recommended for working with regex are online tools which explain them, like regex101For more complex cases of quote matching you'll need to write a parser.  See for example this Can the csv format be defined by a regex? and this When you should NOT use Regular Expressions?.


Answer URL
https://docs.python.org/3/library/re.html#writing-a-tokenizer
