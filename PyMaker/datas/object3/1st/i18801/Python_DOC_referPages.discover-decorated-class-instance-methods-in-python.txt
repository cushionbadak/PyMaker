Natural Text
I have a python class, for example:The method pretty_status is decorated with @serializable.What is the simplest and most efficient way to discover the methods in a class that have a certain decoration ? (in the above example giving: pretty_status).Edit:Please also note that the decorator in question is custom/modifiable.
If you have no control over what the decorator does, then in general, you can not identify decorated methods. However, since you can modify serializable, then you could add an attribute to the wrapped function which you could later use to identify serialized methods:yields
Generally speaking, you can't. A decorator is just syntactic sugar for applying a callable. In your case the decorator syntax translates to:That is, pretty_status is replaced by whatever serializable() returns. What it returns could be anything.Now, if what serializable returns has itself been decorated with functools.wraps() and you are using Python 3.2 or newer, then you can see if there is a .__wrapped__ attribute on the new .pretty_status method; it's a reference to the original wrapped function.On earlier versions of Python, you can easily do this yourself too:You can add any number of attributes to that wrapper function, including custom attributes of your own choosing:and then test for that attribute:One last thing you can do is test for that wrapper function; it'll have a .__name__ attribute that you can test against. That name might not be unique, but it is a start.In the above sample decorator, the wrapper function is called wrapper, so pretty_status.__name__ == 'wrapper' will be True.
You can't discover them directly but You can mark decorated methods with some flag.And then You can make metaclass for example analyse presence or absence of _serializable attribute.Or You can collect all wrapped methodsin decorator


Answer URL
