Natural Text
I am writing a Python wrapper for a C library using the cffi. The C library has to be initialized and shut down. Also, the cffi needs some place to save the state returned from ffi.dlopen().I can see two paths here:Either I wrap this whole stateful business in a class like thisOr I provide two global functions that hide the state in a global variableThe first path is somewhat cumbersome in that it requires the user to always create an object that really serves no other purpose other than managing the library state. On the other hand, it makes sure that terminate() is actually called every time.The second path seems to result in a somewhat easier API. However, it exposes some hidden global state, which might be a bad thing. Also, if the user forgets to call terminate(), the C library is not unloaded correctly (which is not a big problem on the C side).Which one of these paths would be more pythonic?
Exposing a wrapper object only makes sense in python if the library actually supports something like multiple instances in one application. If it doesn't support that or it's not really relevant go for kindall's suggestion and just initialize the library when imported and add an atexit handler for cleanup.Adding wrappers around a stateless api or even an api without support for keeping different sets of state is not really pythonic and would raise expectations that different instances have some kind of isolation.Example code:For more details about atexit this question has some more details, as has the python documentation of course.


Answer URL
https://docs.python.org/3/library/atexit.html
