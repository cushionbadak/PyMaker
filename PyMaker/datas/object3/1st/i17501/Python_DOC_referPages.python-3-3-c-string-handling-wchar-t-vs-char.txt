Natural Text
I'm trying to embed Python 3.3 in our C++ project.Python 3.3 seems to have introduced UTF-8 as preferred storage, PEP 393: "the specification chooses UTF-8 as the recommended way of exposing strings to C code."I wrote this initialization code, which seems to be simple and intuitive: but compiling it fails:So yeah, obviously I need a wchar_t * here, but I don't see any reason why char * would not do the job here.What is the best practice here?Convert char * to wchar * and deal with locales (mbstowcs), which would also introduce unnecessary dynamic memory allocs?Also, if Python decided to go for wchar entirely, why does Py_GetVersion() return a char * as I expected it? I found a similar question for Python <3.3 , but I hope Python 3.3 is different (PEP 393?).The code has to be cross-platform capable.=> What's a fast and efficient solution to pass C strings (char *) to Python 3.3?
can you use this...?
In Python 3.5, Py_DecodeLocale can be used to do the conversion.https://docs.python.org/3/c-api/sys.html#c.Py_DecodeLocale


Answer URL
https://docs.python.org/3/c-api/sys.html#c.Py_DecodeLocale
