Natural Text
I would like to know what is the best way/efficient way to remove element(s) from the list.There are few functions provided by Python:some_list.remove(value), but it throws error if value is not found.some_list.pop(some_list[index]), removes the item at the given position in the list, and return it.del (some_list[index]), it removes element from the given index, it's different from pop as it doesn't return value.Scenarios:If you have few items to remove say one element or between 1 to 5.  If you have to remove multiple items in a sequence.If you have to remove different items based on a condition.How about if you have a list of lists and want to remove elements in sequence.
Use a list comprehension:Scenario 1:Scenario 2:Scenario 3:Scenario 4(Nested list comprehension):Note that if you want to remove just one item then list.remove, list.pop and del are definitely going to be very fast, but using these methods while iterating over the the list can result in unexpected output.Related: Loop ‚ÄúForgets‚Äù to Remove Some Items
My answer is not exactly to your question but after you read this, I hope you can decide which type you need to choose for your needs. Python‚Äôs lists are variable-length arrays, not Lisp-style linked lists. The implementation uses a contiguous array of references to other objects, and keeps a pointer to this array.This makes indexing a list a[i] an operation whose cost is independent of the size of the list or the value of the index.When items are appended or inserted, the array of references is resized.Some algorithm is applied to improve the performance of appending items repeatedly;when the array must be grown, some extra space is allocated so the next few timesdon‚Äôt require an actual resize i.e over-allocation. More InformationRemoving vs Pop vs Delete:At first glance it looks like all of them are doing the same thing. Under the hood its behaving different.removing : remove an element from the list by iterating from 0 index till the first    match of the element is found. taking more time to iterate if the element is at the end.pop : removing element from the list by using the index. taking less time.del : is a python statement that removes a name from a namespace, or an item    from a dictionary, or an item from a list by using the index. REMOVE:it removes the first occurence of value.raises ValueError if the value is not present.it takes only one argument, so you can't remove multiple value in one shot.POP:remove and return item at index (default last).Raises IndexError if list is empty or index is out of range.it takes only one argument, so you can't remove multiple value in one shot.DEL:remove the item at index and return nothing.it can remove slices from a list or can clear the whole list.Benchmark:Worst case : deleting from the end of the list.Best case: begining of the list.Point to be noted:if array grows or shrinks in the middleRealloc still depends on total length.But, All the trailing elements have to be copiedSo, now I hope you can decide what you need to choose for your needs.
Use filter instead of list comprehension:Scenario 1:Scenario 2:Scenario 3:Scenario 4(Nested filtered list):For some reason, it's the same thing as a list comprhension, but it's quite clear that we are filtering things instead of generating them.
Good question, and James‚Äô answer is the only one with actual performance data for Python 2.x for some of the suggested approaches. (See also my comment on that question.)To complete the picture for Python 3.x, here are a few more tests. Because a single test may modify its list, we need N lists to modify for N tests; therefore I‚Äôve created the set of lists before running a test. All tests, whether they modify a list in place of generate a new one, iterate over that set of lists, to ensure that the conditions for the tests are the same. For simplicity‚Äôs sake, all tests remove a single element from the middle of the list.Let‚Äôs start with the examples from the question using the built-in list() functions:List comprehensions as outlined in Ashwini Chaudhary‚Äôs answer:Using filter() as outlined in Lo√Øc Faure-Lacroix‚Äôs answer. Note, however, that the examples in the above answer return a filter object for Python 3.x, and not a list like they do for Python 2.x!Removing an element that does not exist using Python‚Äôs built-in functions requires an additional test; the list comprehension and the filter solution handle non-existing list elements gracefully. I hope I got this right‚Ä¶ ü§ì


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#more-on-lists
https://docs.python.org/3/tutorial/datastructures.html#more-on-lists
