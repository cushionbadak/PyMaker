Natural Text
How do I read every line of a file in Python and store each line as an element in a list? I want to read the file line by line and append each line to the end of the list.

See Input and Ouput:or with stripping the newline character:Editor's note: This answer's original whitespace-stripping command, line.strip(), as implied by Janus Troelsen's comment, would remove all leading and trailing whitespace, not just the trailing \n.
This is more explicit than necessary, but does what you want.
This will yield an "array" of lines from the file.
If you want the \n included:If you do not want \n included:
You could simply do the following, as has been suggested:Note that this approach has 2 downsides:1) You store all the lines in memory. In the general case, this is a very bad idea. The file could be very large, and you could run out of memory. Even if it's not large, it is simply a waste of memory.2) This does not allow processing of each line as you read them. So if you process your lines after this, it is not efficient (requires two passes rather than one).A better approach for the general case would be the following:Where you define your process function any way you want. For example:(The implementation of the Superman class is left as an exercise for you).This will work nicely for any file size and you go through your file in just 1 pass. This is typically how generic parsers will work.
If you don't care about closing the file, this one-liner works:The traditional way:Using with and readlines() (recommended):
Data into listAssume that we have a text file with our data like in the following lines:Text file content:Open the cmd in the same directory (right click the mouse and choose cmd or PowerShell)Run python and in the interpreter write:The Python scriptUsing appendOr...Or...Or...
This should encapsulate the open command. 
Clean and Pythonic Way of Reading the Lines of a File Into a ListFirst and foremost, you should focus on opening your file and reading its contents in an efficient and pythonic way. Here is an example of the way I personally DO NOT prefer:Instead, I prefer the below method of opening files for both reading and writing as itis very clean, and does not require an extra step of closing the fileonce you are done using it. In the statement below, we're opening the filefor reading, and assigning it to the variable 'infile.'  Once the code withinthis statement has finished running, the file will be automatically closed.Now we need to focus on bringing this data into a Python List because they are iterable, efficient, and flexible.  In your case, the desired goal is to bring each line of the text file into a separate element. To accomplish this, we will use the splitlines() method as follows:The Final Product:Testing Our Code:Contents of the text file:Print statements for testing purposes:Output (different-looking because of unicode characters):
To read a file into a list you need to do three things:Open the fileRead the fileStore the contents as listFortunately Python makes it very easy to do these things so the shortest way to read a file into a list is:However I'll add some more explanation.Opening the fileI assume that you want to open a specific file and you don't deal directly with a file-handle (or a file-like-handle). The most commonly used function to open a file in Python is open, it takes one mandatory argument and two optional ones in Python 2.7:FilenameModeBuffering (I'll ignore this argument in this answer)The filename should be a string that represents the path to the file. For example:Note that the file extension needs to be specified. This is especially important for Windows users because file extensions like .txt or .doc, etc. are hidden by default when viewed in the explorer.The second argument is the mode, it's r by default which means "read-only". That's exactly what you need in your case. But in case you actually want to create a file and/or write to a file you'll need a different argument here. There is an excellent answer if you want an overview.For reading a file you can omit the mode or pass it in explicitly:Both will open the file in read-only mode. In case you want to read in a binary file on Windows you need to use the mode rb:On other platforms the 'b' (binary mode) is simply ignored.Now that I've shown how to open the file, let's talk about the fact that you always need to close it again. Otherwise it will keep an open file-handle to the file until the process exits (or Python garbages the file-handle). While you could use:That will fail to close the file when something between open and close throws an exception. You could avoid that by using a try and finally:However Python provides context managers that have a prettier syntax (but for open it's almost identical to the try and finally above):The last approach is the recommended approach to open a file in Python!Reading the fileOkay, you've opened the file, now how to read it? The open function returns a file object and it supports Pythons iteration protocol. Each iteration will give you a line:This will print each line of the file. Note however that each line will contain a newline character \n at the end (you might want to check if your Python is built with universal newlines support - otherwise you could also have \r\n on Windows or \r on Mac as newlines). If you don't want that you can could simply remove the last character (or the last two characters on Windows):But the last line doesn't necessarily has a trailing newline, so one shouldn't use that. One could check if it ends with a trailing newline and if so remove it:But you could simply remove all whitespaces (including the \n character) from the end of the string, this will also remove all other trailing whitespaces so you have to be careful if these are important:However if the lines end with \r\n (Windows "newlines") that .rstrip() will also take care of the \r!Store the contents as listNow that you know how to open the file and read it, it's time to store the contents in a list. The simplest option would be to use the list function:In case you want to strip the trailing newlines you could use a list comprehension instead:Or even simpler: The .readlines() method of the file object by default returns a list of the lines:This will also include the trailing newline characters, if you don't want them I would recommend the [line.rstrip() for line in f] approach because it avoids keeping two lists containing all the lines in memory.There's an additional option to get the desired output, however it's rather "suboptimal": read the complete file in a string and then split on newlines:or:These take care of the trailing newlines automatically because the split character isn't included. However they are not ideal because you keep the file as string and as a list of lines in memory!SummaryUse with open(...) as f when opening files because you don't need to take care of closing the file yourself and it closes the file even if some exception happens.file objects support the iteration protocol so reading a file line-by-line is as simple as for line in the_file_object:.Always browse the documentation for the available functions/classes. Most of the time there's a perfect match for the task or at least one or two good ones. The obvious choice in this case would be readlines() but if you want to process the lines before storing them in the list I would recommend a simple list-comprehension.
I'd do it like this.
Here's one more option by using list comprehensions on files;This should be more efficient way as the most of the work is done inside the Python interpreter.
Another option is numpy.genfromtxt, for example:This will make data a NumPy array with as many rows as are in your file.
If you'd like to read a file from the command line or from stdin, you can also use the fileinput module:Pass files to it like so:Read more here: http://docs.python.org/2/library/fileinput.html
The simplest way to do itA simple way is to:Read the whole file as a stringSplit the string line by lineIn one line, that would give:
Read and write text files with Python 2 and Python 3; it works with UnicodeThings to notice:with is a so-called context manager. It makes sure that the opened file is closed again.All solutions here which simply make .strip() or .rstrip() will fail to reproduce the lines as they also strip the white space.Common file endings.txtMore advanced file writing / readingCSV: Super simple format (read & write)JSON: Nice for writing human-readable data; VERY commonly used (read & write)YAML: YAML is a superset of JSON, but easier to read (read & write, comparison of JSON and YAML)pickle: A Python serialization format (read & write)MessagePack (Python package): More compact representation (read & write)HDF5 (Python package): Nice for matrices (read & write)XML: exists too *sigh* (read & write)For your application, the following might be important:Support by other programming languagesReading / writing performanceCompactness (file size)See also: Comparison of data serialization formatsIn case you are rather looking for a way to make configuration files, you might want to read my short article Configuration files in Python.
Introduced in Python 3.4, pathlib has a really convenient method for reading in text from files, as follows:(The splitlines call is what turns it from a string containing the whole contents of the file to a list of lines in the file).pathlib has a lot of handy conveniences in it. read_text is nice and concise, and you don't have to worry about opening and closing the file. If all you need to do with the file is read it all in in one go, it's a good choice.
Now variable out is a list (array) of what you want. You could either do:oryou'll get the same results.
Just use the splitlines() functions. Here is an example.In the output you will have the list of lines.
A real easy way:If you want to make it a fully-fledged program, type this in:For some reason, it doesn't read .py files properly.
You can just open your file for reading using:The list lines will contain all your lines as individual elements, and you can call a specific element using lines["linenumber-1"] as Python starts its counting from 0.
If you want to are faced with a very large / huge file and want to read faster (imagine you are in a Topcoder/Hackerrank coding competition), you might read a considerably bigger chunk of lines into a memory buffer at one time, rather than just iterate line by line at file level.
To my knowledge Python doesn't have a native array data structure. But it does support the list data structure which is much simpler to use than an array.
Use this:data is a dataframe type, and uses values to get ndarray. You can also get a list by using array.tolist().
You can easily do it by the following piece of code:
The easiest ways to do that with some additional benefits are:ororIn the case with set, we must be remembered that we don't have the line order preserved and get rid of the duplicated lines.
You could also use the loadtxt command in NumPy. This checks for fewer conditions than genfromtxt, so it may be faster.
Check out this short snippetor refer docs for reference
Outline and SummaryWith a filename, handling the file from a Path(filename) object, or directly with open(filename) as f, do one of the following:list(fileinput.input(filename))using with path.open() as f, call f.readlines() list(f)path.read_text().splitlines()path.read_text().splitlines(keepends=True)iterate over fileinput.input or f and list.append each line one at a timepass f to a bound list.extend methoduse f in a list comprehensionI explain the use-case for each below.In Python, how do I read a file line-by-line?This is an excellent question. First, let's create some sample data:File objects are lazy iterators, so just iterate over it.Alternatively, if you have multiple files, use fileinput.input, another lazy iterator. With just one file:or for multiple files, pass it a list of filenames:Again, f and fileinput.input above both are/return lazy iterators.You can only use an iterator one time, so to provide functional code while avoiding verbosity I'll use the slightly more terse fileinput.input(filename) where apropos from here.In Python, how do I read a file line-by-line into a list?Ah but you want it in a list for some reason? I'd avoid that if possible. But if you insist... just pass the result of fileinput.input(filename) to list:Another direct answer is to call f.readlines, which returns the contents of the file (up to an optional hint number of characters, so you could break this up into multiple lists that way). You can get to this file object two ways. One way is to pass the filename to the open builtin:or using the new Path object from the pathlib module (which I have become quite fond of, and will use from here on):list will also consume the file iterator and return a list - a quite direct method as well:If you don't mind reading the entire text into memory as a single string before splitting it, you can do this as a one-liner with the Path object and the splitlines() string method. By default, splitlines removes the newlines:If you want to keep the newlines, pass keepends=True:I want to read the file line by line and append each line to the end of the list.Now this is a bit silly to ask for, given that we've demonstrated the end result easily with several methods. But you might need to filter or operate on the lines as you make your list, so let's humor this request.Using list.append would allow you to filter or operate on each line before you append it:Using list.extend would be a bit more direct, and perhaps useful if you have a preexisting list:Or more idiomatically, we could instead use a list comprehension, and map and filter inside it if desirable:Or even more directly, to close the circle, just pass it to list to create a new list directly without operating on the lines:ConclusionYou've seen many ways to get lines from a file into a list, but I'd recommend you avoid materializing large quantities of data into a list and instead use Python's lazy iteration to process the data if possible.That is, prefer fileinput.input or with path.open() as f.


Answer URL
https://docs.python.org/3/library/pathlib.html
https://docs.python.org/3/library/pathlib.html#pathlib.Path.read_text
