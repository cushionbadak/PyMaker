Natural Text
I have a very simple java class that I am trying to port to Python, but I'm stuck on the line:I have found this example, but I don't understand how Character.getNumericValue(character) could return 10 (since the ASCII value is 65 for instance). Without understanding this line, it's difficult to port it.
Character.getNumericValue() returns 10 for A because it is digit in number systems with bases beyond the decimal system (such as hexadecimal, all the way up to 35-base):From the Character.getNumericValue() documenation:The letters A-Z in their uppercase ('\u0041' through '\u005A'), lowercase ('\u0061' through '\u007A'), and full width variant ('\uFF21' through '\uFF3A' and '\uFF41' through '\uFF5A') forms have numeric values from 10 through 35. This is independent of the Unicode specification, which does not assign numeric values to these char values.There is no direct Python equivalent; Character.getNumericValue() also interprets roman numerals, for example, you'd have to code such mappings yourself.
There is no single ready-made Python function that's equivalent, but I think two functions combined cover the whole range. For ASCII characters 0..9 and A..Z, int() with a proper base argument (36) suffices. For getting the numeric value of a unicode code point, there's unicodedata.numeric, discounting the fact that it returns a float.


Answer URL
