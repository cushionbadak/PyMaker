Natural Text
I would like to write a simple program to cross encrypt a word. (i.e. change "A" to "Z", "B" to "Y" etc) I am new to python and can not get the loop to work. Here is what I have. I Realize there is probably a better way to do this. But I am attempting to do this using the most basic fundamental knowledge of the language.I get an error saying that the list position [i] is invalid because it is a string. But, my intent is to use the value as a counter to go through the list objects and change the letter.
You can map characters to their unicode code points with the ord function. For the 26 uppercase English letters these correspond to integer values between 65 and 90 inclusive. Subtracting the integer code for each character from 155 will give you the character code for its complement.
is one way (probably the preferred way)is another way using a dictionaryis another way using math...basically there are a million ways to accomplish thiswith regards to your code i is your actual letter so change toif you also want the index (to replace)
for i in l: loops over the characters in l, not the numerical indices. To make your code run with minimal changes you can change the for loop, as shown below. You also need to move the print call outside the loop.However, there are much better ways to do this that don't require 26 if/elif statements. BTW, although it works here, it's better to do if l[i] == "A": rather than if l[i] is "A":.Here's an improved way to do this that's hopefully not too advanced for you. It uses extended slicing to create a reversed version of the alphabet. It uses the zip function to iterate over a pair of strings; zip can be used for any number of strings, and also for other containers like lists. And it uses a dictionary to store the translation table. This version handles both upper & lower case letters.Test


Answer URL
https://docs.python.org/3/library/functions.html#ord
