Natural Text
I think I understand class inheritance in python, basically you can inherit the attributes of the parent class on the child class for re-usability and also to "add" to it to make even more complex classes. Here is my question: I have a Car class below that has (model, color, mpg) as parameters, after that I created a new child class called ElectricCar that inherits from the parent Car class...and now when I call ElectricCar with "(battery_type, model, color, mpg), I get the following error:TypeError: init() takes exactly 2 arguments (5 given)I know got to fix it. I need to add self.model, self.color and self.mpg to the ElectricCar class. But why do i have to do that? It seems this defeats the purpose of inheritance if I need to re-define again on the child class. 
I need to add self.model, self.color and self.mpg to the ElectricCar class.You don't. Python allows you to call methods of parent classes you've replaced. You just have to call the constructor of the parent class explicitly.The first argument of ElectricCar.__init__ is the battery type. Store the rest of positional arguments in a list (args) and unpack them to the parent constructor:
When you define the __init__ method, you are overriding the__init__ method of the parent class.  Such overriding is why the super() function was created.
You need to pass  model, color, mpg in your ElectricCar class. Then you can call super to initialize the base class.


Answer URL
https://docs.python.org/3/library/functions.html#super
