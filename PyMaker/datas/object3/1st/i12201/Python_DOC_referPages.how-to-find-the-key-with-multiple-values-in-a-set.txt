Natural Text
I have a set that contains small dictionaries saved as strings that looks like this:I can easily convert each item in the set from a string into a small dictionary using eval() but I am trying to figure out a good algorithm to note which keys in the set have more than one value. For example, as seen above there are two keys '151H0' and '151H1'. The key '151H1' has only a value of 1 in each case. The key '151H0' has values 28, 38, 36, and 37. All I want to do is find an elegant way to read the set and return the key '151H0' because it has more than one associated value, and ignore the key '151H1' because it always has the same value. As a bonus, I would like to get the average of the values as an integer for the returned key. In this case it would be 35. So my output could be a tuple such as: '151H0', 35I am asking for help because the solutions that I have come up with so far involve more lines of code than I think should be necessary for this. 
You'll need to convert to real dicts, and no, eval is not the way to go (it's a giant sign that reads "This code is insecure!"). Use ast.literal_eval for this, it works the same, except it only evaluates legal Python literals, so it can't be used to execute arbitrary code. In any event, the easy way to do this is to use collections.defaultdict to accumulate the values for each key so you know which ones have more than one unique value:


Answer URL
https://docs.python.org/3/library/ast.html#ast.literal_eval
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/functions.html#map
