Natural Text
Write a function that takes a string consisting of alphabetic  characters as input argument and returns the most common character.  Ignore white spaces i.e. Do not count any white space as a character.  Note that capitalization does not matter here i.e. that a lower case  character is equal to a upper case character. In case of a tie between  certain characters return the last character that has the most countThis is the updated codeThe above is my code. I am getting an error of string index out of bound which I can't understand why. Also the code only checks the occurrence of first character I am confused about how to proceed to the next character and take the maximum count? The error i get when I run my code:
Actually your code is almost correct. You need to move count, j, length inside of your for i in range(0, len(new_string)) because you need to start over on each iteration and also if count is greater than higher_count, you need to save that charater as return_character and return it instead of character which is always last char of your string because of character = new_string[i].I don't see why have you used j+1 and while length-1. After correcting them, it now covers tie situations aswell.
You can use a regex patter to search for all characters.  \w matches any alphanumeric character and the underscore; this is equivalent to the set [a-zA-Z0-9_].  The + after [\w] means to match one or more repetitions.Finally, you use Counter to total them and most_common(1) to get the top value. See below for the case of a tie.In the case of a tie, it is a little more tricky.In the case of your code above and your sentence "The cosmos is infinite", you can see that 'i' occurs more frequently that 'e' (the output of your function):You can see the issue in your code block:You are iterating through a sentence and assign that letter to the variable character, which is never reassigned elsewhere.  The variable character will thus always return the last character in your string.
If we ignore the "tie" requirement; collections.Counter() works:Example:To return the last character that has the most count, we could use collections.OrderedDict:Example:Note: this solution assumes that max() returns the first character that has the most count (and therefore there is a reversed() call, to get the last one) and all characters are single Unicode codepoints. In general, you might want to use \X regular expression (supported by regex module), to extract "user-perceived characters" (eXtended grapheme cluster) from the Unicode string.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#collections.OrderedDict
https://docs.python.org/3/library/functions.html#max
https://docs.python.org/3/library/functions.html#reversed
