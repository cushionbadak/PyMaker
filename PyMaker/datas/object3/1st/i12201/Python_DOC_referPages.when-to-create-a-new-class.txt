Natural Text
So I starting to learn about classes and it is still a bit confusing of when I should make a new class instead of a function. I am making a code that gets information from a website, store the information in a database and makes a graph with this information.(I currently have a class called "Stats" that is doing this) I would like to use Tkinter to create buttons so that the person can choose what type of information he wants to see in the graphs, my question is if I should create a different class for the Tkinter and to make the graphs or if I should make them as functions from the "Stats" class. here is my code:
Generally, it is a good idea to separate output from computation.If you place the Tkinter code in a separate class:then your Stats class may be more reusable. You could write other scripts thatused the Stats class -- for example, a command-line script that uses Statswithout Tkinter, or a script that uses a different GUI framework, or multiplescripts that use Stats in different ways.If the Stats code were entangled with Tkinter code, then none of that would bepossible.To follow the above advice, the __init__ method should not call graph. Letthe GUI code do that.Any problem that can be solved using classes can also be solved with plainfunctions.  Sometimes using classes can make the code more succinct, however, byavoiding the need to explicity pass around the state as an argument to eachfunction, or by taking advantage of inheritance.When trying to decide when to use a class, try to imagine what the code wouldlook like with a class versus plain functions. Ask yourself what you are gainingby using a class. Is there a possibility of subclassing? Is there a way to takeadvantage of inheritance? Does the code become more compact / succinct by usinga class instead of plain functions? Does the class take advantage of special methods? Consider Jack Diederich's advice about whento Stop Writing Classes.If you can't identify the benefit of using a class, use functions.


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-names
