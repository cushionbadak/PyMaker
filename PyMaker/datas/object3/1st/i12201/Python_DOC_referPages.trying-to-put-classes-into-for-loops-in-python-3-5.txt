Natural Text
I am trying to make a for loop, which iterates through a range, and makes classes. How could I do this? How could the classes be named?Here is what I have and mean.I'm making an RPG type game and I want a range of different monster types. I want to be able to generate classes for each monster type. I want each monster to be a level higher than the last so the health and other stats will be multiplied by the previous monster's stats
To answer the question specifically, you would use the 3 argument form of type to create a metaclass:The form Bar=type('Bar', (), {}) is analogous to:Instantiating an instance would be:vs
If you want to make brand new classes with names as if defined manually, you're usually stuck with format-ing and eval-ing strings. This is how Python implements collections.namedtuple; it's implemented in Python code using a template string that it fills in programmatically then evals.Take a look at the namedtuple implementation for an example of how you might do something like this.You can also make classes programmatically using the three argument type constructor, which lets you explicitly provide a name, bases and class dictionary, so making Name# six times with no special base classes or class attributes or member functions could be made and assigned to globals via:
One you create a class, it's available like any other symbol. So try this:Now you have an object of type class (not really, but pretend), you can install it wherever you like:
The more pythonic way would be a list of monster objects accessed like monsters[1]. You can do it like this. To do it your way you can see the other answers in the thread.
You can generate classes in a loop, but it is the sign of a bad design, and always can be avoided.This code generates classes and stores them in an arrayIt would be much better if all the monsters would be of the same type, and there would be some kind of "metaclass" for monster types. This means that you would have a dynamic structure which is language independent, can be changed even in runtime, and monster types can be loaded from resource files:
First things first: as other answers advised, be sure to think through this design decision. Creating classes in a loop is a possibly a red flag that your design is flawed. Moving on.You can do this using metaclasses, or the type function. In fact, type is the default metaclass. It is the class of all built-in classes: ...it is the class of the basic object class:...type is even its own class:...and unless specified otherwise, all classes you create are themselves type objects: All metaclasses - including type - can be used to create classes. When used this way, type takes 3 arguments: class name (a string)a tuple containing the parent classesa dictionary containing class attributes/membersProbably the simplest way to accomplish your goal is to first create a dictionary to hold your classes:We will populate the dictionary values using the type metaclass:We can accomplish all of the above with this one-liner:In the example above we are inheriting from object and providing no class members, but this can be adjusted as needed. If you need more customization in your dynamically created classes, a good option is to use a base class with the starting functionality you require:Recall: type is the default metaclass. However, even more custimization can be accomplished by creating your own custom metaclass. You do this by inheriting a new class from type: And use it like this:Note that you no longer have to provide the BaseMonster argument, nor do you have to construct the string representing the class name; this is all taken care of in the MetaMonster.__new__ method. 


Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
https://docs.python.org/3/library/functions.html#type
