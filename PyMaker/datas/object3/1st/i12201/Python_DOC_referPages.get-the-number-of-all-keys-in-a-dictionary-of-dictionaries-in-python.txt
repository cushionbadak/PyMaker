Natural Text
I have a dictionary of dictionaries in Python 2.7.I need to quickly count the number of all keys, including the keys within each of the dictionaries.So in this example I would need the number of all keys to be 6:I know I can iterate through each key with for loops, but I am looking for a quicker way to do this, since I will have thousands/millions of keys and doing this is just ineffective:
Keeping it SimpleIf we know all the values are dictionaries, and do not wish to check that any of their values are also dictionaries, then it is as simple as:Refining it a little, to actually check that the values are dictionaries before counting them:And finally, if you wish to do an arbitrary depth, something like the following:In this last case, we define a function that will be called recursively.  Given a value d, we return either:0 if that value is not a dictionary; orthe number of keys in the dictionary, plus the total of keys in all of our children.Making it FasterThe above is a succinct and easily understood approach.  We can get a little faster using a generator:This gets us a bit more performance:
How about What you are doing is iterating over all keys k and values v. The values v are your subdictionaries. You get the length of those dictionaries and add one to include the key used to index the subdictionary.Afterwards you sum over the list to get the complete number of keys.EDIT:To clarify, this snippet works only for dictionaries of dictionaries as asked. Not dictionaries of dictionaries of dictionaries...So do not use it for nested example :)
As a more general way you can use a recursion function and generator expression:Example:Note: In python 3.X use dict.items() method instead of iteritems().A benchmark with accepted answer which shows that this function is faster than accepted answer:result:
Using a generator function and the yield from syntax new in Python 3.x. This will work for an arbitrary nested dictionaryIn Python 2.x you need a to do this:
Something like:print len(dict_test) + sum(len(v) for v in dict_test.values())
Here is the recursive function to find the nested dictionaries' total number of keys...
You could try using pandas DataFrame for that:The pd.DataFrame(data) line will convert your dictionary to a N x M matrix, where N is number of "parent" keys and M is the number of unique children keys:For each [row, column] you have a value or NaN. You just need to count the non NaN values, which will give you the number of children keys and add len(df.columns), which stands for the number of columns (i.e. parent keys).
recursive function:
len(dict) will return the number of keys in a dictionary, so, assuming you know how nested it is and that all the values are dictionaries:You can wrap this in a list comprehension :which is probably the most pythonic. You can extend it as :but I tend to think that this is fairly unreadable.
Try this,


Answer URL
https://docs.python.org/3/whatsnew/3.3.html#pep-380-syntax-for-delegating-to-a-subgenerator
