Natural Text
With python 2.7.8 and 3.4 on my machine when I have a backslash-W inside a raw string literal it's not getting treated as raw. Is this  really the expected behaviour?Result I get from PyScripter and remote python interpreter. Note 9W vs 9\W and D:\Feb vs D:\Work....and command shell Python 3:Gist here if you want to stick a fork in it:https://gist.github.com/maphew/9368fe16df751b016bbd
It's not raw strings tripping you up here; you misunderstand os.path.join. os.path.join is supposed to add a slash when the component doesn't start with one. And if a slash already exists, it's treated as the beginning of an absolute path, which discards the preceding components and begins again "from scratch" (except, on Windows, the drive letter). From the docs:If a component is an absolute path, all previous components are thrown away and joining continues from the absolute path component.On Windows, the drive letter is not reset when an absolute path component (e.g., r'\foo') is encountered. If a component contains a drive letter, all previous components are thrown away and the drive letter is reset. Note that since there is a current directory for each drive, os.path.join("c:", "foo") represents a path relative to the current directory on drive C: (c:foo), not c:\foo.So it is expected and normal for:to produce the string C:\a\b on Windows (the repr of which would be "C:\\a\\b" due to the necessary escaping of the backslash), while:the '\\b' means "starting a new absolute path from the current drive" and throws away the \a replacing it with \b. Similarly,would, when it sees '\\c', throw away aand b and build up the path from there, producing C:\c\d.


Answer URL
https://docs.python.org/3/library/os.path.html#os.path.join
