Natural Text
Write a function that accepts an input string consisting of alphabetic  characters and removes all the trailing whitespace of the string and  returns it without using any .strip() method. For example if:input_string = "  Hello       "then your function should return an output string such as:       output_string = "  Hello"This is my code:I am certain that the logic is correct. I have dry run the code with possible test cases. Still my code doesn't give any output. Please help.
Correct the line where you assign new_s variable.Also, since you're loop needs to be decremented after every iteration. Replace 0 with -1.EDIT: Refer @InbarRose's answer for a much better alternative.
Here's the main reason you're having trouble:If the slice starts at len(input_str) then you wont get any characters out of it at all. You need to only use [:count], except that you're also not getting count correctly.In order to loop from the end you have to use the third argument for range to decrement your value, so it has to beYou want -1, which reduces the value by one each time. You also want to start at len-1 otherwise you get invalid indices, and if you want to end at 0 you need to pass -1, since range doesn't go to the end value.Now you can get use the count and slice input_str properly:
In case you want to see a one-liner answer. This is it: Example:Bonus: all whitespace chars, not just space, and best efficiency.
Try using re.sub()Explanation:re is a module in python for regular expressions.re.sub(pattern, replacing_pattern, string_to_be_modified) is the syntax.Here, any character in the square braces (\w -> any character, -> space, \t -> tab, \n -> newline, \r -> carriage return) when encountered is replaced by ''(Nothing). Hence you get a stripped string.Find all the regex matches here
Use while loop:
range() by default goes up.  If you want it to go in reverse, you have to set the step explicitly.  Also, you don't want to start at len(input_str) + 1.  You want to start at len(input_str) - 1.  For any iterable, x, x[len(x)] is not defined.  x[len(x) + 1] is even farther off.  To get the last element, you should use len(input_str) - 1.  Also, if you set the second number to 0, then the first element will not be evaluated.  The second argument to range() is exclusive, so you should go one number farther than you think you should:
Your loop is not going through. You have to specify that it is decrementing. Below is the working code.


Answer URL
https://docs.python.org/3/library/re.html
https://docs.python.org/3/library/re.html#regular-expression-syntax
