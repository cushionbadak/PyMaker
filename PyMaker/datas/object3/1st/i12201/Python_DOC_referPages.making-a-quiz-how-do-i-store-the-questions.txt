Natural Text
I'm trying to make a quiz game with multiple choice (4 choices).  So far I've made a simple quiz containing just one question.  I cannot wrap my head around a good way to index the questions.  The plan is to expand my quiz with at least 500 questions, and randomly pick a question from the question pool.  How should I structure it?This is what I've got so far in my one-question game:
You can create a list-of-dictionaries that will house all this data. So you can do something like this: Then use random.choice to select a random index of your data structure. 
Store it as a JSON arrayand load it using json.load.
You should create a txt file and put the questions in to that file. After then you could read that file's lines and pick a line randomly(line is the question in here) with random.choice() method.Basically, you will write your questions in a txt file. Then read the lines and print a line(question) with random.choice(). Make another txt file for answers, check that file when user answered a question.
I would (based on your code):Use a list of questions. That list would be the pool of questions.I would also discard the id attribute you had, I do not see thereason of using it now.I would choose a random number in the range of 0 to the length ofthe list - 1, so that I can index the question pool for a question to ask the user.Finally, I would take the answer of the user, convert it inlowercase and then check if the answer is correct.Here is the code:A next step for you, would be to validate the input, for example to check that the user typed a letter, A, B, C or D.Questions that helped:Generate random integers between 0 and 9How to convert string to lowercase in Python? I am pretty sure Berlin is not the capital of Belgium :)
I would try importing the random function, then generating a random number between 1 and (no. of questions). Say you have 10 questions, you can type it like this;then, you add all the questions one by one, each under if statements as shown;And so on.If you want to make it repeat, and ask multiple questions, start the coding with;And then you have a working quiz program. I hope someone found this helpful.
I think that quiz was made overly complicated.This code is easier too read and shorter imo.


Answer URL
https://docs.python.org/3/library/json.html#json.load
