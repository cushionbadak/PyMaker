Natural Text
I want to create a logger for my project which has a custom handler that works across all submodules and which logs uncaught exceptions.  Below is my proof-of-concept; note that I am using a file handler as a stand-in for what will eventually be my custom handler.main.py:module.py:After I run main.py, here is the output of test.log:The uncaught exception in module.py was logged beautifully, but the lineapparently did nothing (there was no console output either).  What is the mistake?
I just ran into this issue , where my root logging format wasn't being used in other sub-modules. I solved this by changing logger = logging.getLogger(__name__) in the main.py module to logger = logging.getLogger()so that it actually gets the root logger and not the __main__ logger. See https://docs.python.org/2/library/logging.html#logging.getLogger
I had similar problem, this is what I did to solve this :- module.pyIn main.pyCall divide() by passing logger as 3rd argument In your case handler is not set for module.py
Add your custom handler to your root logger and be done. If you change nothing else (no other defaults), logging from all your modules will be passed to that handler as long as the levels of your other loggers allow it.All (other) loggers are descendants of the root logger. This diagram should help understand information flow in logging.


Answer URL
https://docs.python.org/3/howto/logging.html
