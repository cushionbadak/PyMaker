Natural Text
Outputwhy python assigns a different id to y3, other than x3.Here x3 and y3 are lists, python does the same with tuples and dictionaries too, I also want to know where else python has the same behaviour of assigning new id's to variables having the same values and why so?
Because otherwise this would happen:In fact, which is a Good Thingâ„¢ . If x3 and y3 would be identical, changing one would change the other, too. That's generally not epected.See also when does Python allocate new memory for identical strings? why the behaviour is different for strings.Also, use == if you want to compare values.
Tichodroma put it very nicely. However if you want to have same id() for lists, dicts, etc (if you want to have different names for the same object perhaps) that have same value, you can do it this way:In that case x3 and y3 are referencing the same list object in memory. So, if you change any one of them, the other is going to change.Bonus:If integer values are same, not always will they have same id. Take a look here.The current implementation keeps an array of integer objects for all  integers between -5 and 256, when you create an int in that range you  actually just get back a reference to the existing object.Test:One more interesting test (go figure!):P.S.: I am running python 3.4. And the quotation from docs is for python 2.7 (I didn't find the equivalent for python 3.4). But still I am getting outputs like that in python 3.4 I am running. So the current implementation as said for python 2.7 seems still valid for python 3.4.


Answer URL
https://docs.python.org/3/library/functions.html#id
