Natural Text
I have the following piece of code. Basically, I'm trying to replace a word if it matches one of these regex patterns. If the word matches even once, the word should be completely gone from the new list. The code below works, however, I'm wondering if there's a way to implement this so that I can indefinitely add more patterns to the 'pat' list without having to write additional if statements within the for loop. To clarify, my regex patterns have negative lookaheads and lookbehinds to make sure it's one word. 
Just add another for loop:

Add another loop:
If in your pattern, then changes are only the words, then you can add the words joined with | to make it or. So for your two patterns from the example will become one like below one.If you need to add more words, just add with a pipe. For example (?:word1|word2|word3)Inside the bracket ?: means do not capture the group.
something like this:
I will attempt a guess here; if I am wrong, please skip to the "this is how I'd write it" and modify the code that I provide, according to what you intend to do (which I may have failed to understand).I am assuming you are trying to eliminate the words "Global" and "Pacific" in a list of phrases that may contain them.If that is the case, I think your regular expression does not do what you specify.  You probably intended to have something like the following (which does not work as-is!):The difference is in the look-ahead patterns, which are positive ((?=...) and (?<=...)) instead of negative ((?!...) and (?<!...)).Furthermore, writing your regular expressions like this will not always correctly eliminate white space between your words.This is how I'd write it:In the regular expression for patterns, notice (a) \b, standing for "the empty string, but only at the beginning or end of a word" (see the manual), (b) the use of | for separating alternative patterns, and (c) \s, standing for "characters considered whitespace".  The latter is what takes care of correctly removing unnecessary space after each eliminated word.This works correctly in both Python 2 and Python 3.  I think the code is much clearer and, in terms of efficiency, it's best if you leave re to do its work instead of testing each pattern separately.Given:this produces:


Answer URL
