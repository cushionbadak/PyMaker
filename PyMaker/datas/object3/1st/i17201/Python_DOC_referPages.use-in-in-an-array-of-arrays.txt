Natural Text
I have a list of lists, so a two dimensional array. I'm trying to use in to figure out if a string is in these arrays. So instead of doing if word in wordlist:, I'm using:Is there a more graceful way of doing this?Edit:Sample wordlist:[['civilizati', 1, 1], ['of', 1, 1], ['science', 2, 1], ['is', 2, 1], ['knowledge', 3, 1], ['is', 3, 1]]Edit edit:I think I wasn't clear in my question. If I were using a 1d list, I could do something like this:This is much more graceful than my for loop monstrosity. However, since wordlist is not 1d, the statement word in wordlist never returns true, even if word is in a sublist of wordlist. I'm wondering if there is a more graceful way of doing that than using that for loop.
I would suggest doing a loop with an else clause:A more efficient approach might be to use a dictionary mapping from words to lineno, count sublists. Searching a dictionary is O(1), rather than O(n) to search your list of lists. In order to make the code work for words that are not found, you can use the setdefault method:
Instead of using an index pointer and using it to iterate over the list, just iterate over the list directly:Just to prove they're identical:What you want - now that you've provided your data format - is
You would be better off using a dict with the words as keys, and [linenum, count] pairs as values.  Your entire function becomes simply:If you have to turn this into a list, you can do:
If you are looking for word counts in file, you can do:If you want to get all words in the file, you can do:if you want to get count of partical word:


Answer URL
