Natural Text
Recently I'm writing a Python program, and it has a bug, I spent more than an hour solving this and finally it turned out that the regular expression was the problem, I didn't know that there MUST be no space between m and n in pattern M{m,n}, and I wrote it as M{m, n}, and the code couldn't be executed. I checked http://docs.python.org/3/library/re.html about the {m,n} part, it didn't say that you can't put a space between m and n in {m,n}. Why is that? Is there other tiny things that the documents don't mention and I should know about the regular expressions?
You won't find any documents noting this, but this stems from the nature of regular expressions, because every character in the regular expression has special meaning and it could have different meanings depending on the context where it is used.That's why some flavors support a flag usually called Free Spacing Mode, that allows you to write regular expressions with spaces to improve readability and maintainability by allowing you to also include comments inside the regular expression itself.Summary: Every character and symbol inside a regular expression matters, so don't put something assuming it would mean nothing or it would pass along just like that.
If you need white space to be ignored you can use the verbose option when usings regex as described here:http://docs.python.org/3/library/re.html?highlight=single%20line%20mode#re.VERBOSEe.g. re.compile(r"\d{3,     5}", re.X)is treated the same asre.compile(r"\d{3,5}")
That's the correct behavior.  Range quantifiers ({n,m}), like character classes ([xyz]), are considered atomic units; free-spacing mode has no effect on them.  In a character class a space character still matches a literal space, and in a range quantifier it's still a syntax error.  For example, Java treats {3, 5} as a syntax error because the braces aren't escaped, but in Python it matches the literal sequence {3, 5}.


Answer URL
