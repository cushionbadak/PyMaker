Natural Text
I understand how functions like range() and zip() can be used in a for loop. However I expected range() to output a list - much like seq in the unix shell. If I run the following code:The output is range(10), suggesting it's not a list but a different type of object. zip() has a similar behaviour when printed, outputting something likeSo my question is what are they, what advantages are there to making them this, and how can I get their output to lists without looping over them?
You must be using Python 3.  In Python 2, the objects zip and range did behave as you were suggesting, returning lists.  They were changed to generator-like objects which produce the elements on demand rather than expand an entire list into memory.  One advantage was greater efficiency in their typical use-cases (e.g. iterating over them).The "lazy" versions also exist in Python 2.x, but they have different names i.e. xrange and itertools.izip.To retrieve all the output at once into a familiar list object, you may simply call list to iterate and consume the contents:
In Python 3.x., range returns a range object instead of a list like it did in Python 2.x.  Similarly, zip now returns a zip object instead of a list.  To get these objects as lists, put them in list:While it may seem unhelpful at first, this change in the behavior of range and zip actually increases efficiency.  This is because the zip and range objects produce items as they are needed, instead of creating a list to hold them all at once.  Doing so saves on memory consumption and improves operation speed.
Range (xrange in python 2.*) objects are immutable sequences, while zip (itertools.izip repectively) is a generator object. To make a list from a generator or a sequence, simply cast to list. For example:But they differ in a way how elements are generated. Normal generators are mutable and exaust their content if iterated, while range is immutable, and don't:


Answer URL
