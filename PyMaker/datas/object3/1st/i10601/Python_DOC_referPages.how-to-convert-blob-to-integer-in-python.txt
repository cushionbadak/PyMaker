Natural Text
I have some file with little-endian encoding bytes in it, I want to take N bytes, specify endianess  and convert them into a decimal number using python (any version). How to do it correctly?
In Python 3 you can use something like this:
As Harshad Mulmuley' answer shows, this is easy in Python 3, using the int.from_bytes method. In Python 2, it's a little trickier.The struct module is designed to handle standard C data types. It won't handle arbitrary length integers (Python 2 long integers), as these are not native to C. But you can convert them using a simple for loop. I expect that this will be significantly slower than the Python 3 way, since Python for loops are slower than looping at C speed, like int.from_bytes (probably) does.output(I put that Python 3 print call in there so you can easily verify that my function gives the same result as int.from_bytes).If your data is really large and you don't want to waste RAM reversing your byte string you can do it this way:Of course, that uses some RAM for m, but it won't be as much as the RAM used for reversing the input string.
Using Python 3 (or 2), you can achieve this with the struct library.Now, you unpack using the appropriate format specifier string. For example, big-endian int:


Answer URL
https://docs.python.org/3/library/struct.html
https://docs.python.org/3/library/struct.html#byte-order-size-and-alignment
