Natural Text
I wrote the code for a simple TCP client:I would like to know, how " generate " multiple clients TCP using Threads instead of opening multiple instances of the terminal and run the script several times.
Try this:The worker method will be set as target for the thread. So every thread will use the code of the method. After starting all thread, the for loop at the bottom will wait for all threads to finish. In the worker method you can use arrays or lists of data from outside the method. So you can iterate for example over a list of Urls or append the fetched data to a new output array. 
The simplest and most pythonic way is to use multiprocessing thread pool implementation, and then call pool.map. The former will allow you effortlessly swap from threads to processes when needed. The latter will provide you a clean interface hiding synchronisation chores behind the scenes.
I have just wrapped your code/what you want to do, into a function i.e. worker(). Next, I have added extra code for thread spawning and set the worker() function as the target (the function/work/code each spawned thread will execute - this is why it's a convention to name it worker).The multithreaded version of you above example can be as follows:
Here is one solution with queues to send distinct messages.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.map
