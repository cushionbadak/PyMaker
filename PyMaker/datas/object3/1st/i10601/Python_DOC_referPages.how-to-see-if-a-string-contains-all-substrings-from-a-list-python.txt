Natural Text
Here's the scenario:I have a long list of time-stamped file names with characters before and after the time-stamp.Something like this: prefix_20160817_suffixWhat I want is a list (which will ultimately be a subset of the original list) that contains file names with specific prefixes, suffixes, and parts of the timestamp. These specific strings are already given in a list. Note: this "contains" list might vary in size.For example: ['prefix1', '2016', 'suffix'] or ['201608', 'suffix']How can I easily get a list of file names that contain every element in the "contains" array?Here's some pseudo code to demonstrate what I want:
I'd compile the list into a fnmatch pattern:This basically concatenates all strings in contains into a glob pattern with * wildcards in between. This assumes the order of contains is significant. Given that you are looking for prefixes, suffixes and (parts of) dates in between, that's not that much of a stretch.It is important to note that if you run this on an OS that has a case-insensitive filesystem, that fnmatch matching is also case-insensitive. This is usually exactly what you'd want in that case.
You're looking for something like that (using list comprehension and all():
This should work for you.
Your pseudocode was not far from a usable implementation as you see:I would suggest to have a deeper look into the really good official tutorial - it contains many useful things.
Given:You can test the existence of each substring in the list of conditions with in and (in the interim example) a list comprehension:That can then be used in a single all statement to test all the substrings:Then you can combine with filter (or use a list comprehension or a loop) to filter the list:


Answer URL
https://docs.python.org/3/tutorial/index.html
