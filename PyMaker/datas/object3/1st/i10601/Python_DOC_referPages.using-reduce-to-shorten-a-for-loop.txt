Natural Text
From an array Ns, I'd like to derive an array multipliers as follows:The resulting array multipliers is [1, 3, 9, 54]. My gut feeling is that it should be possible to make this code more succinct using reduce or another built-in function, but I don't yet see how. Any ideas?
You can simulate the behavior of accumulate (see @soon's answer) in Python 2 with reduce. You have to manage the list by yourself. 
You could use itertools.accumulate with a custom accumulation function (Python 3 only, if you want to use Python 2 you could install fn.py library (or similar) or backport the function using the implementation provided in the docs) :And then just fix the first and the last elements:
reduce give you just the final result of the reducing process, so if you want all the intermediate values you can use list comprehension as followed:but that isn't efficient since it reducing again and again for each sublist.
As my comment and other answers mention, this is easy in Python 3, using  itertools.accumulate. However, from your previous questions it appears that you're using Python 2.In Python, it's almost always better to iterate directly over a list rather than using indices. Your code could be rewritten like this. (I've changed your list name to ns to comply with the PEP 8 style guide).outputNote that this code does an extra multiplication at the end, the result of which doesn't get appended to multipliers. Here's an alternative that's a little more compact. Instead of using the last variable it looks up the last element in multipliers, which is slightly less efficient, and while it doesn't do that extra multiplication it does need to create a new list when it slices ns.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.accumulate
https://docs.python.org/3/library/itertools.html#itertools.accumulate
https://docs.python.org/3/library/itertools.html#itertools.accumulate
