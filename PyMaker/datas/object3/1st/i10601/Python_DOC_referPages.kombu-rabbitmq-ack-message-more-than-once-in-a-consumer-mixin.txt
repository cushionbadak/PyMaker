Natural Text
I have stumbled upon this problem while I was documenting Kombu for the new SO documentation project.Consider the following Kombu code of a Consumer Mixin:The code fails with:Because the message was ACK-ed twice, on print_even_characters() and print_odd_characters().A simple solution that works would be ACK-ing only the last callback function, but it breaks modularity if I want to use the same functions on other queues or connections.How to ACK a queued Kombu message that is sent to more than one callback function?
Solutions1 - Checking message.acknowledgedThe message.acknowledged flag checks whether the message is already ACK-ed:Pros: Readable, short.Cons: Breaks Python EAFP idiom.2 - Catching the exceptionPros: Readable, Pythonic.Cons: A little long - 4 lines of boilerplate code per callback.3 - ACKing the last callbackThe documentation guarantees that the callbacks are called in order. Therefore, we can simply .ack() only the last callback:Pros: Short, readable, no boilerplate code.Cons: Not modular: the callbacks can not be used by another queue, unless the last callback is always last. This implicit assumption can break the caller code.This can be solved by moving the callback functions into the Worker class. We give up some modularity - these functions will not be called from outside - but gain safety and readability.SummaryThe difference between 1 and 2 is merely a matter of style.Solution 3 should be picked if the order of execution matters, and whether a message should not be ACK-ed before it went through all the callbacks successfully.1 or 2 should be picked if the message should always be ACK-ed, even if one or more callbacks failed.Note that there are other possible designs; this answer refers to callback functions that reside outside the worker.


Answer URL
https://docs.python.org/3/glossary.html
