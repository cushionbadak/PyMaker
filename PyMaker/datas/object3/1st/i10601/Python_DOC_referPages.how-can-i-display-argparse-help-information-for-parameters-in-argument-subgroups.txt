Natural Text
I'm putting together an argparse parser where I want to have multiple levels of sub-grouping:I've got it coded like the following, presently:When I call my script with --help, I get the following:The help content for all of the 'group-level' parameters shows up just fine. However, the help for my sub-sub-group parameters -a and -s is missing. The options are being parsed, because it shows [-a | -s] in the signature, but their help isn't being displayed.Relocating -a and -s from their mutually-exclusive group up to gp_thresh doesn't help. The only difference is (naturally) that -a and -sshow up separately in the signature:How can I make the help content display for -a and -s? I've looked through the whole of the argparse help, but haven't found anything that looks like a 'display depth' setting or whatever.  Would it work to set up sub-parsers? That seems like overkill, though....This is Python 3.5.1 on Windows 7 64-bit. The code in this state is here at my GitHub repo.
We've discussed this in other SO questions, but the simple answer is that argument groups do not nest.  mutually exclusive groups can nest in an argument group for display purposes, but they don't nest for parsing or testingArgument groups only affect the help display.  Actions added to a group are also added to the parser.  The parser only looks at the Actions its own list, and ignores any grouping.  And the help display does not allow for any nested indentation.==================add_argument_group is a method in an abstract parent class _ActionsContainer, as are methods like add_argument.  _ArgumentGroup and ArgumentParser both subclass this, so inherit this method.  So it is possible to add a group to a group (no error is raised).  And because of how add_argument works, arguments (Actions) are shared with the parser and all groups (they all access the same list).  So parsing of the nested actions works fine.The flaw is in the help formatter.  It gets the list of argument groups from the parser.  Those groups include the default 2 (optionals and postionals).  But there's no provision in the formatter to check if the groups contain subgroups.The original developer(s) didn't anticipate the interest in nesting groups.  Hence this incomplete nesting was not blocked in the class hierarchy nor in the documentation.  And patching has been slow.


Answer URL
https://docs.python.org/3/library/argparse.html
