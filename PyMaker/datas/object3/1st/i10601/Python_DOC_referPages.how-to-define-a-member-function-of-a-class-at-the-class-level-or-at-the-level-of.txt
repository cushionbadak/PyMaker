Natural Text
In Python 2.7, when defining a class, how can we define member functions at the level of class, i.e. its first argument is the class object, not an instance object of the classmember functions at the level of the class' instance objects, i.e. its first argument is an instance object of the class, not the class object.When using a given class, how can we tell if a member function is at the level of class or at the level of the class' instance objects?For example, in the Python standard library, the setUp() from TestCase is called for each instance object of TestCase, i.e. at the level of instance objects, while class level fixtures are implemented in TestSuite. When the test suite encounters a test from a new class then tearDownClass() from the previous class (if there is one) is called, followed by setUpClass() fromthe new class.Thanks.
The @classmethod form is a function decorator â€“ see the description of  function definitions in Function definitions for details.It can be called either on the class (such as C.f()) or on an instance  (such as C().f()). The instance is ignored except for its class. If a  class method is called for a derived class, the derived class object  is passed as the implied first argument.Class methods are different than C++ or Java static methods. If you  want those, see staticmethod() in this section.For more information on class methods, consult the documentation on  the standard type hierarchy in The standard type hierarchy.https://docs.python.org/2/library/functions.html#classmethod


Answer URL
https://docs.python.org/3/library/functions.html#classmethod
https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy
