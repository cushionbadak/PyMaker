Natural Text
For instance 3x^4 - 17x^2 - 3x + 5.  Each term of the polynomial can be represented as a pair of integers (coefficient,exponent).  The polynomial itself is then a list of such pairs like[(3,4), (-17,2), (-3,1), (5,0)] for the polynomial as shown.Zero polynomial, 0, is represented as the empty list [], since it has no terms with nonzero coefficients.I want to write two functions to add and multiply two input polynomials with the same representation of tuple (coefficient, exponent):addpoly(p1, p2)multpoly(p1, p2)Test Cases:addpoly([(4,3),(3,0)], [(-4,3),(2,1)]) should give [(2, 1),(3, 0)]addpoly([(2,1)],[(-2,1)]) should give []multpoly([(1,1),(-1,0)], [(1,2),(1,1),(1,0)]) should give [(1, 3),(-1, 0)]Here is something that I started with but got completely struck!
As suggested in the comments, it is much simpler to represent polynomials as multisets of exponents.  In Python, the closest thing to a multiset is the Counter data structure.  Using a Counter (or even just a plain dictionary) that maps exponents to coefficients will automatically coalesce entries with the same exponent, just as you'd expect when writing a simplified polynomial. You can perform operations using a Counter, and then convert back to your list of pairs representation when finished using a function like this:To add polynomials, you group together like-exponents and sum their coefficients.(In fact, if you were to stick with the Counter representation throughout, you could just return p + q).To multiply polynomials, you multiply each term from one polynomial pairwise with every term from the other. And furthermore, to multiply terms, you add exponents and multiply coefficients.
I have come up with a solution but I'm unsure that it's optimized!and the second one:-
This python code worked for me,hope this works for u too..Addition funcMultiply func


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
