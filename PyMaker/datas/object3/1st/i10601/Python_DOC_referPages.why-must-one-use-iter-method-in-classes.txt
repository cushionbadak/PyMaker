Natural Text
What exactly is the role of iter? Consider the following code block:omitting iter(self) and rewritting:Then:The classes behave the same way regardless of whether I include iter() or not, so why should i include it in the first place? I'm sorry if my question isn't clear--I simply don't know how to state it in a more clear way...
The __iter__ method is always called, when an iterator is needed, e.g. by explicitly calling iter or in for-loops or when creating lists list(xy).So you cannot use your second class Reverse2 in all these contexts.To answer the question in the comment: the __iter__-method must return any iterator or instance with a __next__-method. Only if your class is a iterator by itself, it should return self. An example of returning a generator as iterator:
The __iter__ return the iterator object which allows to convert the object to a container which can be iterated via for .. in ...The iterator object is any object which define __next__ method which returns the next item if exists or raise StopIteration otherwise.While __iter__ can return any such iterator object, It can return itself if it implement __next__ method.For example:Now you can use in for loops:


Answer URL
https://docs.python.org/3/library/stdtypes.html#iterator-types
