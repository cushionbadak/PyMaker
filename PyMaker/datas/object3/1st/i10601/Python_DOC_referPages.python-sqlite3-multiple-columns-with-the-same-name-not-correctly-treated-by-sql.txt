Natural Text
I am accessing a sqlite database taken from my phone (specifically, from the gnucash app). I want to access the columns by name, so I set conn.row_factory = sqlite3.Row on my connection. Then I join two tables with the following query:The column names are correctly reported, but without the table alias:so, when I access values, I get the same values for duplicate columns:The values for _id, uid, created_at and modified_at come from SPLITS, and the one from TRANSACTIONS are not available.You may tell me I shouldn't use "SELECT *", but that doesn't solve the problem:while using column aliases, luckily, works:Would you consider this behaviour a bug? And what would you expect from sqlite3, in such a case? I think that if table aliases are given they should be prepended to column names, otherwise a sqlite3.OperationalError exception should be thrown, as for syntax errors in the query. Other ideas?
The documentation says:The name of a result column is the value of the "AS" clause for that column, if there is an AS clause. If there is no AS clause then the name of the column is unspecified.So when you have a row with two columns that happen to have the same name, it is not possible to access both of them by their name.How should Python know that row['_id'] and row['_id'] should be different?You either have to explicitly rename some columns, or access the row values by their position (row[0] and row[1]).


Answer URL
https://docs.python.org/3/library/sqlite3.html
