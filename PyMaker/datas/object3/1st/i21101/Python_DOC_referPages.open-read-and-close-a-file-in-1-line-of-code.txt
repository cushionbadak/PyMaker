Natural Text
Now I use:But to make the code look better, I can do:When using the above syntax, how do I close the file to free up system resources?
You don't really have to close it - Python will do it automatically either during garbage collection or at program exit. But as @delnan noted, it's better practice to explicitly close it for various reasons.So, what you can do to keep it short, simple and explicit:Now it's just two lines and pretty readable, I think.
Python Standard Library Pathlib module does what you looking for:Don't forget to import Path:On Python 27 install backported pathlib or pathlib2
Using CPython, your file will be closed immediately after the line is executed, because the file object is immediately garbage collected.  There are two drawbacks, though:In Python implementations different from CPython, the file often isn't immediately closed, but rather at a later time, beyond your control.In Python 3.2 or above, this will throw a ResourceWarning, if enabled.Better to invest one additional line:This will ensure that the file is correctly closed under all circumstances.
What you can do is to use the with statement:The with statement will take care to call __exit__ function of the given object even if something bad happened in your code; it's close to the try... finally syntax. For  object returned by open, __exit__ corresponds to file closure. This statement has been introduced with Python 2.6.
No need to import any special libraries to do this.  Use normal syntax and it will open the file for reading then close it.or which gives you an array x containing the lines, and can be printed like so:These one-liners are very helpful for maintenance - basically self-documenting.
use ilio: (inline io):just one function call instead of file open(), read(), close().

I frequently do something like this when I need to get a few lines surrounding something I've grepped in a log file:
Using more_itertools.with_iter, it is possible to open, read, close and assign an equivalent output in one line (excluding the import statement):Although possible, I would look for another approach other than assigning the contents of a file to a variable, i.e. lazy iteration - this can be done using a traditional with block or in the example above by removing join() and iterating output.
If you want that warm and fuzzy feeling just go with with.For python 3.6 I ran these two programs under a fresh start of IDLE, giving runtimes of:So not much of a difference.OUTPUT:OUTPUT:


Answer URL
https://docs.python.org/3/library/pathlib.html
