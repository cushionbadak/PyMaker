Natural Text
I am running Python 3.5 on Windows 10 and I would like to compile my Python code into a single executable to share with some end users.  I'm using Cython 0.25.2 to try to get this done.I've got a HelloWorld program working, by using the Cython --embed flag.  From the Windows command prompt Cython makes a .c file:This gives me a HelloWorld.c file.  Then I open the MSVC++ 2015 x86 Native Command Prompt and compile the HelloWorld.c file into a Windows exe:This works well.  When run from the windows command prompt my new helloTest.exe program prints to the command line.  I need to figure out how to get the 1st set of commands (from the regular command prompt) into a distutils setup script, which I haven't done.  Perhaps I can make the windows compiler commands into a make file or batch file or something.The shortcomings here are that I want to be able to build up many modules and packages together and I also don't want to ensure that the end user has all of the dependencies (Python 3.5 and all of the needed modules) in place.I haven't been able to figure out how to build multiple Cython files and then link them into the final Windows .exe.  However, seeing how I also want to include Python itself and any included python modules, I really need a freeze tool in addition to some pre-compilation processing.Cython has a demo folder for cython_freeze.  This looks perfect.  It says it pulls all included modules, including Python itself, into one c file for compilation.  The example file includes a readme and a make file for gcc.  I don't fully understand what's going on here, and since I'm using MSCV cl.exe, I think the right thing to do is to find/ modify this to work for cl.exe.  I lack the skills to do this.  In fact, because I'm on windows I got cython from pre-compiled wheels and I'm not even sure if cython_freeze exists in my virtualenv (I did a search and didn't come up with anything).  Similarly, "cython freeze" web searches also came up empty.  Thus far I've got the cython --embed HelloWorld program working and I've downloaded the cython source from GitHub to review the cython_freeze readme and make files.So, my questions:How can I use cython_freeze and cl.exe to build a single, windows executable that contains python, my main program and included packages/modules (standard or my custom ones)?Because I installed Cython 0.25.2 from a wheel pre-compiled for Windows, is cython_freeze even in my virtualenv already?  If so, how do I use it?  If not, how do I "install" it?I'm definitely open to other non-cython_freeze ways of doing this.  However, I should note that I've looked at several other options that didn't look nearly as promising:py2exe and cx-freeze and other similar freeze tools zip up the custom code but still require Python and all modules to be installed.  This put too much on my users.  I really want them to be able to click.exe and (as long as they are on Windows) have it run.I've considered using gcc as the compiler, but since MSVC 2015 is used to compile Python for windows and all of the extensions it sounds like this would open the door to lots of compatibility problems with python itself.I'm also leaning toward cython as I have some fairly slow "big math" routines in numpy that are taking too long, so I'm motivated to learn more about cython to speed those up soon too.In addition to windows10 and Python 3.5, I'm using pip and virtualenv to manage my packages and create my virtualenv.  I'm not using ant or conda.  Cython, and most my other packages, are installed from pre-compiled wheels, as linked above.UPDATE:The spirit of my question is actually about packaging Python for users who don't have Python installed.  Matt gives an excellent way to do that (and a good education on compiling Python).  Biswa_9937 and S.Moncayo correctly point out that Py2Exe (Python versions 3.4 and earlier) and PyInstaller (works on Python 3.5) can also achieve this goal.  These are great answers and very helpful.However, the details of my question are about getting Cython_freeze to work on Windows.  No one has attempted that, so I'm leaving the question unanswered in hopes that a Cython guru can weigh in.
I'm not going to answer your question (directly) but get you the result I think you want. Instead I'm going to give you a link to a precompiled Python 3.5 x64 Windows build embedded copy with NumPy SciPy Pandas installed and you can just download and add every library you import from Python/libs/site-packages/ into the extension_modules/ directory and plug and play only using your .py script.  https://stackoverflow.com/a/44610044/6037118 you may need to scroll to my answer.  Besides freeze in my understanding won't put everything into the exe anyway you'll still need subfolders with imported libs.  Here's the compiled embedded Python 3.5 x64 VS 2015 link w/ NumPy, SciPy, Pandas, Intel MKL:https://www.dropbox.com/sh/2smbgen2i9ilf2e/AADI8A3pCAFU-EqNLTbOiUwJa?dl=0HOW TO COMPILE YOURSELFAnd rather than recompile this to x32, I'll teach you how to fish per se.  Here's the Visual Studio project call_function.c file:And here's the Visual Studio solution file you can save out as embedpython.sln:Now you'll have to download the embeddable zip file (32bit one is here): https://www.python.org/ftp/python/3.5.1/python-3.5.1-embed-win32.zip and extract and place it in the directory with the built EXE file.  Also, you don't need python.exe or wpython.exe it comes with, and copy all the PYD files into the \extension_modules\ directory.  Note you also need to add any linked libraries .lib files in the linker:Here's the embedpython.vsxproj file:Be sure all the directories in all the above point to your actual Python3 installation (here it assumes \Python3\ is the installation directory).  Then just open up the solution file and build x32 or x64 or whatever you'd like.  You'll have to play around a bit to find everything your packages require. For example Numpy requires linking to \Python3\Lib\site-packages\numpy\core\lib\npymath.lib.  Any of your own compiled PYD Cython programs can sit directly in \extension_modules\ For my build on Windows I also had to include msvcp140_app.dll in the directory with the EXE (which is strangely \Program Files (x86)\Microsoft Visual Studio 14.0\VC\redist\x64\Microsoft.VC140.CRT\msvcp140.dll renamed, or the \x86\ directory for 32bit).For all these odd reasons I note, that's why I advise downloading the prebuilt version to get started - at least it will show you how things must be packaged for it to work.Enjoy.
You should try py2exe, I think that is the easiest way to make a .exe from a python code. I understand what you want, but is easy to create a .exe with py2exe, copy the folder in C and then create a shortcut. 


Answer URL
https://docs.python.org/3/extending/embedding.html#pure-embedding
