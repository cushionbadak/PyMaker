Natural Text
This question already has an answer here:Shared state in multiprocessing Processes                    1 answer                Let's say that I have a lot of instances of a class. This class has a run function, which I am running through a Process in order to spread out work over multiple cores. The class also has an attribute c that I am accessing in the run function. The problem is, when I change one of the instance's c, it is not seen as updated in the output of the run function.Demonstration:Expected output:Actual output:What's the best way to make sure that the variable is synced correctly among processes? (My actual code is a lot more complex - including many more objects, classes, and variables)
multiprocessing provides an API for easily spawning subprocesses, not threads. This isn't just semantics; the reason you aren't getting your expected results is that separate processes do not share memory spaces (where threads do).Here is a quick example to demonstrate. The thread is the one that prints the 5, whereas the subprocess prints the 0.Here is the documentation for the threading library, which I believe is what you're looking for.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes
