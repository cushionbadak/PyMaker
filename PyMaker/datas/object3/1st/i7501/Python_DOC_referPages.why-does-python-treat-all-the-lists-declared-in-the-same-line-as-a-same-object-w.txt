Natural Text
In python3 lets say i need to have 3 empty lists.I can assign empty lists separately in 3 separate lines. But the when i declared them in the same line as shown below s1 , s2 , s3 = [[]]*3After doing this whenever i append an element to any one of these lists the same element gets appended to all the lists. Its the same with all operations and whenever i pop an item in one list , all the three lists s1 , s2 , s3 pop an item . I can't seam to understand this behaviour
No one actually answered the OP, which was why the OP's original syntax (i.e. s1 , s2 , s3 = [[]]*3) would treat them all as the same list (i.e. changing one of the lists will change all of them).Why are they the same list?This happens because python lists just make references to things they contain, so the list of a list [[]] just points to an empty list. But, when you multiply it by 3, it takes that same empty list and refers to it 3 times.A Sensible ExampleConsider a situation where this would make more intuitive sense. Suppose we already had a list and we wanted to repeat that list 3 times:then you get:but then, if you change a value in the list:you get:This makes sense because three_myList just references myList 3 times over (with a pointer) and myList changed. In effect, three_list asks for the value of myList 3 times, so all 3 references change together.ConclusionIn your case, you don't want s1, s2, and s3 to refer to the same list, but they do because on the right side of the assignment, you constructed a list that uses the same list three times.  Different for simple listBut, it's still confusing because a very similar process will cause a different result. Suppose you take a simple list (not nested) and triple it, then it won't update:gives:but, when you update:    The long version doesn't:This is because to triple a simple list we had to smash its contents together three times to get another simple (not nested) list. Evaluating this forces a computation that makes a new list. So, triple_myList is a new thing that doesn't actually contain myList (as an element) and hence doesn't make any references to myList.Other CommentaryNick Chapman's answer is actually just another syntax to the get the OP's result in one line, not an explanation of why the OP's syntax works the way it does.Stan Zeez's comment on the OP explained how to get a different result (3 separate lists that update separately), but he used too many brackets so it creates 3 double-nested lists:This would create 3 simple lists like the OP did (but these are actually independent, unlike the OP):
Ok assuming that you meant:The reason that appending to one of them appends to all of the others is because all of them are pointing at the same object. s2 and s3 are really just aliases for s1. If you want to make deep copies of things then consider looking into the copy module: https://docs.python.org/3/library/copy.html


Answer URL
https://docs.python.org/3/library/copy.html
