Natural Text
When I run these methodsI always got as output or all True, or all False for each value of s (which is of course a string). What's​ the difference between the three? Can you provide an example that gives two trues and one false (or viceversa)?
It's mostly about unicode classifications.  Here's some examples to show discrepancies:Specific behaviour is in the official docs here.Script to find all of them:
The Python documentation notes the difference between the three methods.str.isdigitReturn true if all characters in the string are digits and there is at least one character, false otherwise. Digits include decimal characters and digits that need special handling, such as the compatibility superscript digits. This covers digits which cannot be used to form numbers in base 10, like the Kharosthi numbers. Formally, a digit is a character that has the property value Numeric_Type=Digit or Numeric_Type=Decimal.str.isnumericReturn true if all characters in the string are numeric characters, and there is at least one character, false otherwise. Numeric characters include digit characters, and all characters that have the Unicode numeric value property, e.g. U+2155, VULGAR FRACTION ONE FIFTH. Formally, numeric characters are those with the property value Numeric_Type=Digit, Numeric_Type=Decimal or Numeric_Type=Numeric.str.isdecimalReturn true if all characters in the string are decimal characters and there is at least one character, false otherwise. Decimal characters are those that can be used to form numbers in base 10, e.g. U+0660, ARABIC-INDIC DIGIT ZERO. Formally a decimal character is a character in the Unicode General Category “Nd”.Like @Wim said, the main difference between the three methods is the way they handle specific unicode characters.
By definition, isdecimal() ⊆ isdigit() ⊆ isnumeric(). That is, if a string is decimal, then it'll also be digit and numeric.Therefore, given a string s and test it with those three methods, there'll only be 4 types of results.1. Some examples of characters isdecimal()==True (thus isdigit()==True and isnumeric()==True)2. Some examples of characters isdecimal()==False but isdigit()==True(thus isnumeric()==True)3. Some examples of characters isdecimal()==False and isdigit()==False but isnumeric()==True
a negative number a = "-10" would be false for all of these threeare     False, False, False isdecimal() will have only 0 to 9 in any language, but with out negative signsisdigit() will have only 0 to 9 in any language, also in the "to the power of" positions. (decimal numbers in power, ex: 2 to the power of 5). isnumeric() is even broader spectrum.. it will also include more than 0 to 9 in any position, but it will also have Tens, hundred, thousands in any language, ex. roman 10 is X, its a valid isnumeric(). But all the three are false for: Negative numbers, ex: -10 and floating point numbers, ex: 10.1 


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.isdecimal
https://docs.python.org/3/library/stdtypes.html#str.isdigit
https://docs.python.org/3/library/stdtypes.html#str.isnumeric
https://docs.python.org/3/library/stdtypes.html#str.isdecimal
