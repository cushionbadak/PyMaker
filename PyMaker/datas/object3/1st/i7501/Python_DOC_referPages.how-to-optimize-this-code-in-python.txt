Natural Text
I need to optimize this code, that basically checks if every character of string s1 is contained in s2, taking in consideration doubles.I did some research on map, iterators and generators, and I'm sure in one or more of these there is a solution, but right now I'm pretty confused and frustrated (I'm very new to python, just a couple weeks), so maybe you can help me understand what's the best strategy in this case. Thanks!
A solution using Counter that will handle duplicated characters correctly:
You can count the number of occurrences of each character in both strings. You also don't need to make either string a list: strings are their own iterators.First, create a set as sets have an average lookup of O(1).Then, iterate through the set and get the counts of each character. If any counts aren't equal, return False. It also scales much better as the size of the string grows, than your current solution:
Hmm... you could keep s1 and s2 as strings and then use the replace function:str.replace(.., .., 1) removes only the first occurrence of that character.
A slight adjustment on Adrien's great answer which is (maybe?) more efficient:result:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#collections.Counter
