Natural Text
From https://docs.python.org/3/reference/datamodel.html#implementing-descriptorsCalled to get the attribute of the owner class (class attribute  access) or of an instance of that class (instance attribute access).  owner is always the owner class, while instance is the instance that  the attribute was accessed through, or None when the attribute is  accessed through the owner. This method should return the (computed)  attribute value or raise an AttributeError exception.Called to set the attribute on an instance instance of the owner class  to a new value, value.Why does object.__get__ have an argument owner for the owner class, while object.__set__ doesn't?Does that mean that when the descriptor's class supplies both __get__ and __set__,  we can get the descriptor attribute, no matter whether the attribute is an attribute of the owner class or of an instance of that class, we can set the descriptor attribute, when the attribute is an attribute of an instance of the owner class, but not when the attribute is an attribute  of the owner class?My question is actually part of What is the lookup procedure when setting an attribute from a class or from an instance?Thanks.
owner mostly exists for getting the attribute on the class itself, rather than an instance. When you're retrieving the attribute on an instance, the owner argument is redundant, since it's just type(instance).__set__ doesn't apply to setting the attribute on the class itself, so it has no use for owner.


Answer URL
https://docs.python.org/3/reference/datamodel.html#implementing-descriptors
