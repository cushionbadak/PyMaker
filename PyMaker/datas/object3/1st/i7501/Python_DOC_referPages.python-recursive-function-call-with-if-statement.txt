Natural Text
I have a question regarding function-calls using if-statements and recursion.I am a bit confused because python seems to jump into the if statements block even if my function returns "False"Here is an example:My function_2 returns "False" but python continues the code on line 5 for example. Can anyone explain this behavior? Thanks in advance for any answers.edit: Sorry, forgot the brackets concrete example:After both functions "isFieldFree" and "isFieldEscape" return False python continues the code in line 5 sometimes in line 6.
You may misunderstand how recursion works, yes it continues at line 5 or 6 because the recursion has ended at a lower level in the call stack, so it continues at a higher-level in the call stack. Here's a sample call stack, note the next operation after False is the next findExit() at the higher call stack:
Short answer:That's because you're not actually calling the function. You can call the function by using the parenthesis.Long answer:Functions in Python are a first class citizen (functional paradigm), and so it is completely valid to refer to a function just by its name. The following is valid syntax:The next concept in play is truth-ness of non-Boolean variables.In Python, the following are considered False-yNone False zero of any numeric type, for example, 0, 0L, 0.0, 0j. any empty sequence, for example, '', (), []. any empty mapping, for example, {}. instances of user-defined classes, if the class definesa nonzero() or len() method, when that method returns theinteger zero or bool value False.Everything else is True-ish. Since a function name falls under none of the above categories, it is considered True-ish when tested in a conditional context.Reference: https://docs.python.org/3/library/stdtypes.html#truth-value-testingEdit: The earlier question was incomplete, and did not have a function call. For the new question, AChampion's answer is the correct one.


Answer URL
https://docs.python.org/3/library/stdtypes.html#truth-value-testing
