Natural Text
Why are [range(10)] and list(range(10)) different in Python 3?Output is as follows:
Quoting the docs, "lists may be constructed in several ways":builds a list of 1 item, the range object. In general a comma separated list of items enclosed in square brackets constructs a list of said items.passes the range object as an argument to the list constructor: class list([iterable])The constructor builds a list whose items are the same and in the same order as iterable‘s items. iterable may be either a sequence, a container that supports iteration, or an iterator object. If iterable is already a list, a copy is made and returned, similar to iterable[:]. For example, list('abc') returns ['a', 'b', 'c'] and list( (1, 2, 3) ) returns [1, 2, 3]. If no argument is given, the constructor creates a new empty list, [].A range in Python 3 represents an immutable sequence of numbers, so in your case the resulting list is a list of numbers from the range.
[x] means "make a list whose one element is x".list(x) means "make a list whose elements are the elements of x".range(10) returns an object that prints as range(0, 10) (since it shows the starting value when it prints) and whose elements are the integers from 0 to 9, so [range(10)] gives the one-element list [range(0, 10)] and list(range(10)) gives the 10-element list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].
In your first example you are simply creating a list object using square bracket notation, and placing a range() object inside. On the other hand, in your second example, you use the list() builtin to convert the range() object to a list.The difference, is that using [] simply creates a list. It does nothing to the contents passed in. list() on the other hand, will either return an empty list if you pass nothing in, or attempt to convert what you passed in to a list object.The documentation for list() notes this:The constructor builds a list whose items are the same and in the same order as iterable‘s items. iterable may be either a sequence, a container that supports iteration, or an iterator object. If iterable is already a list, a copy is made and returned, similar to iterable[:]. For example, list('abc') returns ['a', 'b', 'c'] and list( (1, 2, 3) ) returns [1, 2, 3]. If no argument is given, the constructor creates a new empty list, [].
range() function in python 3.x is similar to the xrange() function in python 2.x.In Python 2.x range() produced a list, and xrange() returned an iterator - a sequence objectIn python 2.xIn python 3.xAnd to get a list, you can pass the generator in list()For further reference , read here


Answer URL
https://docs.python.org/3/library/stdtypes.html#lists
https://docs.python.org/3/library/functions.html#func-range
https://docs.python.org/3/library/functions.html#func-range
https://docs.python.org/3/library/stdtypes.html#list
https://docs.python.org/3/library/stdtypes.html#typesseq-range
https://docs.python.org/3/library/stdtypes.html#list
