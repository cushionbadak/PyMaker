Natural Text
I have a class called Time, and I need to implement a Frequency class. How can I implement dividing ints or floats by an instance of Time to get an instance of Frequency ?I already know about __div__, __truediv__, __floordiv__ and other Python special methods, and I already use them in my code to divide instances of classes by numbers or instances of other classes, but I cannot find a way to divide a number by an instance of my class.Is it possible to implement dividing a number by an instance of a class in Python ?
The __rtruediv__ method is what you're looking for.When x / y is executed, if type(x) does not implement a __div__(self, other) method where other can be of class type(y), then type(y).__rtruediv__(y, x) is executed, and its result is returned.Usage:
Yes. You just have to make sure that Time.__rtruediv__() returns a Frequency instance when it receives a float or integer.Usage:Implementation: The python docs contains a full example on implementing the arithmetic operations for your custom classes.The proper way to handle incompatible types is to return the special value NotImplemented. NotImplementedSpecial value which should be returned by the binary  special methods (e.g. __eq__(), __lt__(), __add__(), __rsub__(), etc.)  to indicate that the operation is not implemented with respect to the  other typeSuppose you try to use a unsupported complex number, returning NotImplemented will eventually cause a TypeError with a correct error message. (at least in python 3)
you need to implement __rtruediv__ and__rfloordiv__.from the documentationThese methods are called to implement the binary arithmetic operations  (+, -, *, @, /, //, %, divmod(), pow(), **, <<, >>, &, ^, |) with  reflected (swapped) operands. These functions are only called if the  left operand does not support the corresponding operation [3] and the  operands are of different types. [4] For instance, to evaluate the  expression x - y, where y is an instance of a class that has an  __rsub__() method, y.__rsub__(x) is called if x.__sub__(y) returns NotImplemented.


Answer URL
https://docs.python.org/3/library/numbers.html#implementing-the-arithmetic-operations
https://docs.python.org/3/library/constants.html#NotImplemented
https://docs.python.org/3/reference/datamodel.html#object.__radd__
