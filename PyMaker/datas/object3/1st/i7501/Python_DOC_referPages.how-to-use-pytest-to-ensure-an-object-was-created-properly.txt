Natural Text
I have a file that is saved in a particular format, and a class that will create an object based on the data in the file.I want to ensure that all values in the file/string were extracted correctly by testing each attribute in the object.Here is a simplified version of what I'm doing:classlist.pytest_classlist.pyI want to create objects based on different data and use them as a parametrized value.My current setup works, although there is the unnecessary overheard of creating the object for each test. I'd want them to be created once.If I try doing the following:AttributeError: 'function' object has no attribute 'students'...it doesn't work as it references the function rather than the fixture.Furthermore, the code in test_name and test_age is almost identical. In my actual code, I'm doing this for about 12 attributes. Should/can this be merged into a single function? How?How can I clean up my test code?Thanks!Edit:I feel this is relevant, but I'm unsure how make it work for my situation: Can params passed to pytest fixture be passed in as a variable?
My current setup works, although there is the unnecessary overheard of creating the object for each test. I'd want them to be created once. This smells like unnecessary pre-optimization to me, but if you care about this, then run the functions that create your data to test at module level, so they only run once.For example:Furthermore, the code in test_name and test_age is almost identical.  In my actual code, I'm doing this for about 12 attributes. Should/can  this be merged into a single function? How?How can I clean up my test code?A couple of ways to do this, but from your example, provide an equality magic method to the Student class and use that to test your code (also add a repr for sane representation of your object):Then your test can look like this:
You can add one fixture which returns object of that class and call that fixture before every test. I have done some changes and create a fixture get_object in test_classlist.py while classlist.py is as it is.get_object will give you an object of that class and you can use that object in test function via request module. I have assigned that class object in request.instance.cobj. The same you can access in test function.What I am getting from your description is you want to create object of ClassList. If i am not getting wrong ,the below solution should work for you. Try this. 


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__eq__
https://docs.python.org/3/reference/datamodel.html#object.__repr__
https://docs.python.org/3/library/collections.html#collections.namedtuple
