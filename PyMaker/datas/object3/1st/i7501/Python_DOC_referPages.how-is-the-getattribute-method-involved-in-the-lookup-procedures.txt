Natural Text
Python in a Nutshell describes:the lookup procedure when getting an attribute from a class, e.g. cls.name (see the first part in Why are the lookup procedures for getting an attribute from a class and from an instance different?)the lookup procedure when getting an attribute from an instance, e.g. obj.nameHow is the __getattribute__ method involved in the above lookup procedures?Is the __getattribute__ method called somewhere in the lookup procedures?Or, are the lookup procedures started by calling __getattribute__, which then does all the work in the two links?Thanks.
TLDR: Attribute lookup starts with calling __getattribute__ and it does all the work mentioned in the links. Based on the type of the object either object.__getattribute__ or type.__getattribute__ is called.Any attribute lookup results in LOAD_ATTR bytecode internally.LOAD_ATTR then calls PyObject_GetAttr.PyObject_GetAttr now looks for either tp_getattro or tp_getattr(deprecated) slot on the object's type. Now if an object has its own implementation of __getattribute__ then that is used else it falls back to  either object.__getattribute__ or type.__getattribute__ based on the type. tp_getattro slot in case of object points to PyObject_GenericGetAttr and for type it points to type_getattro.PyObject_GenericGetAttr and type_getattro basically do all the work of checking for descriptors, dictionary, slots etc(based on the type) and try to return a value. If they fail to find it even after everything then AttributeError is raised and if the object's type defined __getattr__ then it will be invoked.


Answer URL
https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_getattro
https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_getattr
