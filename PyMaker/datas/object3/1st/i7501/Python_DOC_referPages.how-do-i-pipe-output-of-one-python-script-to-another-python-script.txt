Natural Text
I got stuck in piping the output of one script into another script (both are python).This question is very similar but (1) it does not provide an answer (2) there is a slight difference in mine. So, I thought opening a new question would be better.Here is the problem.Both scripts are almost identical:receiver.pyreplicator.pyWhen I am executing these scripts in bash or cmd one by one, everything is fine. Both examples below are working and I see the input text in the output:Works: (One line of output appears each 3 seconds)But once I pipe from one script to another script they stop working:Doesn't work: (Nothing appears until the end of file is being reached)Then when I pipe the first script to another tool it works again!Works:And finally when I remove the blocking sleep() function it starts to work again:Removing the timer:Now it works:Does anybody know what is wrong with my piping?I am not looking for alternative ways to do it. I just want to learn what is happening here.UPDATEBased on the comments, I refined the examples.Now both scripts not only print out the content of data.txt, but also add a time-stamp to each line.receiver.pydata.txtThe resultAs you see when I am piping the output of python script to itself, the second script waits until the first one is finished. Then it starts to digest the data.However, when I am using another tool (sed in this example), the tool receives the data immediately. Why it is happening?
This is due to the internal buffering in File Objects (for line in sys.stdin).So, if we fetch line by line:The code will work as expected:Documentation... Note that there is internal buffering in file.readlines() and File  Objects (for line in sys.stdin) which is not influenced by this  option. To work around this, you will want to use file.readline()  inside a while 1: loop.NOTE: The File Object thing was fixed in Python 3 


Answer URL
https://docs.python.org/3/using/cmdline.html#cmdoption-u
