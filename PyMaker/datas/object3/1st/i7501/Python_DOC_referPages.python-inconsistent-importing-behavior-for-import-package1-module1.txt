Natural Text
I was assuming that statements of the formimport package1.module1were only for packages and modules, but not for an object in a module, so for instance if module1 contains variable1, I am not able to doimport package1.module1.variable1Here's the perceived inconsistency: assume that module1 and variable1 have the same name, for instance let's say both are called module1. And, in the __init__.py of package1 I havefrom .module1 import module1then doingimport package1.module1will import the object module1, not the module module1.This only works if module1 is the same name for both the object and the module.
The official explanation can be found in the docs:The import statement first tests whether the item is defined in the package; if not, it assumes it is a module and attempts to load it. If it fails to find it, an ImportError exception is raised.It seems that import appears to think the object module1 from the module module1 is a module, which is why the import package1.module1 works but yields the object instead.As far as a workaround goes, if you try the from _ import _ as x, that will rename the attribute and get around the name shadowing. It should yield the result you're looking for - a path import of the module module1 (since Python will see type <module>) and not an object import of the variable module1.Here is some code output to help illustrate things more clearly:Here I did from module1 import module1 as m in the __init__.py of package1 and I set the module1 variable to 1 in module1.py.


Answer URL
https://docs.python.org/3/tutorial/modules.html#packages
