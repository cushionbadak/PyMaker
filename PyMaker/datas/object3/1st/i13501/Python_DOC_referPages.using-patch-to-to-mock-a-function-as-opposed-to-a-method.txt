Natural Text
I want to do something like the following example (found here)However this is patching the method called method on ProductionClass.  I want to patch a generic function within a context.  Ideally something looking like...my_fn is called deep within do_some_other_fn and therefore is difficult to mock out directly.  This seems like it should be straight forward but I can't find the right syntaxEDIT  In the module that do_some_other_fn lives I import my_fn like followingsSo I need a way to be able to tell mock to patch that from outside the module.  Is this possible?EDIT 2 I think this makes it more clear what I am looking forThis works but is not ideal:However I would much rather have it work like this (or something similar)
Your attempt to patch with from my_module import fn does not work because the import statement creates a local symbol fn which points to whatever value fn has in my_module at the time of import. You later patch my_module.fn but it does not matter because you already have a local copy of fn.If the file that contains the patch call is the main module (the file that python initially loaded), you should be able to do it by patching __main__.fn:If the file that contains the patch call is loaded as a module from the main module then __main__ won't work and you need to pass the absolute module name of the module that contains your patch call to patch rather than __main__.
You can see function like module object's static method. To patch a function  func in module mymodule you can use You should take care of Where to patch and if the function is in the same module where you have the test should use "__main__.func" as patch argument.patch like patch.object can be useed as decorator, context or by start() and stop() method.Now when in a module you import a function from an other module like:You create a new reference to func in the new module called foo. Every time in this module you call foo you will use the reference to mymodule.func that you load when you imported it: if you whould like change this behavior you should patch foo in the new module.To make it more clear I build an example where you have mymodule that contain func, module_a that include mymodule and use mymodule.func, module_b that use from mymodule import func as foo and use bot foo and mymodule.funcmymodule.pymodule_a.pymodule_b.pytest.pyIn other words what really rules on choosing where to patch is how the function is referenced where you want use the patched version.


Answer URL
https://docs.python.org/3/library/unittest.mock.html
https://docs.python.org/3/library/unittest.mock.html#where-to-patch
https://docs.python.org/3/library/unittest.mock.html#where-to-patch
