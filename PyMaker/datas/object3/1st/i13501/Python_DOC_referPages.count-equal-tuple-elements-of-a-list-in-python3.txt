Natural Text
The code here works for me. But I am new to Python and want to know and learn if there is a more elegant or pythonic way to do that job.There is a list of two-element-tuples. I want to join equal list elements and store the count of equal elements as a third tuple-element (the first in front of the other two-tuple elements).
Similar to the other answers, but for any tuple dimension:Counter is definitely very useful (and idiomatic) for this, but it's good to remember that it's easy to construct a similar structure with a plain dict:Its properties are ideal for this task. If you're not familiar with dicts, more amazement is awaiting you. :)
Using a combination of a Counter and a list comprehension, we can do this fairly quickly. It will result in a new tuple though, since a tuple is immutable. The org_count variable looks like this at the end of the script:It's important to note that the Counter is a dictionary subclass, thus unordered. That means you final list can be in a different order than the original org variable. I made the assumption that this was alright, because duplicates would be compressed into a single entry, thus messing up the order.In the list comprehension, I utilize the unique set of org to prevent duplicate entries.
An easier way to do what you are doing would be to use collections.Counter and list comprehension -Please note, this would not preserve the order from the original list.Demo -If you want to preserve the order, I would suggest you use a set to record the elements that are already seen and use collections.Counter() for counting. Example -Demo -Also, just a suggestion , a better way to do the following -Is to use any() , Example -


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
