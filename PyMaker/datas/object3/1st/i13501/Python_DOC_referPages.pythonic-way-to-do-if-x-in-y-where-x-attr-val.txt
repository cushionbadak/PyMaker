Natural Text
I have a class that represents a polynomial as a collection of terms where each term has a coefficient and an exponent. I am working on the __add__ method of the class and I am wondering what the most effective way to do something like:It strikes me that I'm looking for something such as:Or in my specific case:Does such a thing exist?
You need to filter your list before doing your contains check.  As tobias_k suggested, you can either build a new list, e.g.This works directly in an if statement, because an empty list is False:But this does some wasteful work, since it a) has to construct a new list and b) doesn't short-circuit once a result is found.  Better is to use the same syntax in a generator expression:Which you can then similarly use in an if statement, but no wasteful work is done:
I think you want [x for x in y if x.attr == val], or use next with the same expression for just the first such value.In your case, it could look something like this:However, this will not work too well. First, __add__ should not modify neither self nor other but instead create a new polynomial. Also, this will ignore any values from other that have a different exponent that any of the terms in self. And third, the performance is pretty lousy, as it loops the list of terms in other for each term in self, giving it quadratic complexity.Instead, I suggest using a dictionary, mapping exponents in the term to their coefficient. In fact, you could probably just use a collections.Counter for that; it already implements __add__ in the right way. Something like this:Example:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
