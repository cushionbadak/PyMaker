Natural Text
os.path.sep is the character used by the operating system to separate pathname components.But when os.path.sep is used in os.path.join(), why does it truncate the path?Example:Instead of 'home/python', os.path.join returns '/python':I know that os.path.join() inserts the directory separator implicitly. Where is os.path.sep useful? Why does it truncate the path?
Where os.path.sep is usefull? I suspect that it exists mainly because a variable like this is required in the module anyway (to avoid hardcoding), and if it's there, it might as well be documented. Its documentation says that it is "occasionally useful".Why it truncates the path?From the docs for os.path.join():If a component is an absolute path, all previous components are thrown away and joining continues from the absolute path component.and / is an absolute path on *nix systems.
Drop os.path.sep from the os.path.join() call. os.path.join() uses os.path.sep internally.On your system, os.path.sep == '/' that is interpreted as a root directory (absolute path) and therefore os.path.join('home', '/', 'python') is equivalent to os.path.join('/', 'python') == '/python'. From the docs:If a component is an absolute path, all previous components are thrown  away and joining continues from the absolute path component.
As correctly given in the docstring of os.path.join -Join two or more pathname components, inserting '/' as needed. If any component is an absolute path, all previous path components will be discarded.Same is given in the docs as well -os.path.join(path, *paths)Join one or more path components intelligently. The return value is the concatenation of path and any members of *paths with exactly one directory separator (os.sep) following each non-empty part except the last, meaning that the result will only end in a separator if the last part is empty. If a component is an absolute path, all previous components are thrown away and joining continues from the absolute path component.When you give os.path.sep alone, it is considered as an absolute path to the root directory - / .Please note , this is for unix/linux based os.path , which internally is posixpath . Though the same behavior is seen in windows os.path.join() .Example -
Here's the snippet of code that is run if you are on a POSIX machine:posixpath.pySpecifically, the lines:And, since os.path.sep definitely starts with this character, whenever we encounter it we throw out the portion of the variable path that has already been constructed and start over with the next element in p.
But when os.path.sep is used in os.path.join() , why it truncates the path?Quoting directly from the documentation of os.path.joinIf a component is an absolute path, all previous components are thrown away and joining continues from the absolute path component.So when you do:os.path.sep returns '/' which is an absolute path, and so 'home' is thrown away and you get only '/python' as the output.This can is also clear from the example:Where os.path.sep is usefull?os.path.sep or os.sep returns the character used by the operating system to separate pathname components.But again quoting from the docs:Note that knowing this is not sufficient to be able to parse or concatenate pathnames — use os.path.split() and os.path.join() — but it is occasionally useful.


Answer URL
https://docs.python.org/3/library/os.path.html#os.path.join
https://docs.python.org/3/library/os.path.html#os.path.join
