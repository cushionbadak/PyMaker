Natural Text
I've been switching from Matlab to NumPy/Scipy, and I think NumPy is great in many aspects.But one thing that I don't feel comfortable is that I cannot find a  data structure similar to struct in C/C++.For example, I may want to do the following thing:One simplest way is using a dictionary as follows. But in case of a dictionary, unlike struct, any keys may be added. I'd like to restrict keys.The other option might be using a class as follows. But it also has the same type of problems.From a thread, I saw that there is a data structure called named tuple, which looks great, but the biggest problem with it is that fields are immutable. So it is still different from what I want.In sum, what would be the best way to use a struct-like object in python?
If you don't need actual memory layout guarantees, user-defined classes can restrict their set of instance members to a fixed list using __slots__. So for example:gets you a class where on initialization, it's guaranteed to assign two float members, and no one can add new instance attributes (accidentally or on purpose) to any instance of the class.Please read the caveats at the __slots__ documentation; in inheritance cases for instance, if a superclass doesn't define __slots__, then the subclass will still have __dict__ and therefore can have arbitrary attributes defined on it.If you need memory layout guarantees and stricter (C) types for variables, you'll want to look at ctypes Structures, but from what you're saying, it sounds like you're just trying to enforce a fixed, limited set of attributes, not specific types or memory layouts.
While taking the risk of not being very Pythonic, you can create an immutable dictionary by subclassing the dict class and overwriting some of its methods:Some usage examples:


Answer URL
https://docs.python.org/3/reference/datamodel.html?highlight=__slots__#object.__slots__
https://docs.python.org/3/library/ctypes.html#structures-and-unions
