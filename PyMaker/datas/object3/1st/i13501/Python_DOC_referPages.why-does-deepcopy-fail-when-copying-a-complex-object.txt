Natural Text
How can I replicate a complex object so that I can add new members to it?  When I try to use deepcopy, it fails with "TypeError: cannot serialize ..."The original problem is that I want to add some member variables to an existing object but can't because doing so results in "AttributeError: Object is fixed"So the idea is create a full copy of the original object in a new class with the added members.But I get:Followup answer to comment, "What is SomeSqlObject?"Perhaps my name is wrong... actual name obfuscated for the company. It is a method that returns an object that represents the base of a tree (of some kind)  That tree is defined 
copy.deepcopy's behavior for classes that don't provide direct support (by defining __deepcopy__) is to pickle then unpickle the object to ensure a new instance is created. io.TextIOWrapper (which is a wrapper than converts binary file-like objects to text file-like objects) can't be serialized (because it assumes it may have external/run time state, e.g. a file descriptor that has a specific position in a file that may not be available when it's later deserialized).The error comes because the object you're copying contains io.TextIOWrapper, and the serialization fails.If the shared state is okay, you might limit yourself to a shallow copy, or use a composition based wrapper (based on __getattr__) to access the underlying object through the wrapper object semi-seamlessly (aside from those pesky special methods), or you might try to individually deepcopy the values from the dictionary and just ignore the ones you can't copy, e.g.:and just hope that the stuff you can't copy isn't too important.
My guess is what you really want is a proxy class, one example from google:http://python-3-patterns-idioms-test.readthedocs.org/en/latest/Fronting.htmlYou will initialize your proxy class from the object to wrap; attributes that the proxy class knows are handled locally; attributes that the proxy class doesn't know about are passed through to the wrapped object. (normally, you'd subclass if you're creating these objects yourself... sounds like that is not an option here...)
This exception means that somewhere, somehow your object is linked to a file object, a socket or something like that.TextIOWrapper is the class that wraps file descriptors and lets you read/write unicode strings.And, as you can see, TextIOWrapper cannot be copied.
Ok Found The answer.The original error seen when trying to do a setattr() was AttributeError: Object is fixed.  That was an error from code in the original SomeSqlObject for a custom __setatter__() that was looking checking for bit _attr_lock and preventing adding members to the object.  Once I de-asserted this lock, I was able to add members easily.The original problem is that I have a number of class members (call them id's) of the form id0, id1, id3, id2, etc.  Each of them is a complex object also.  But, the better way from the code-user's point of view is to use a list-type member id[#] to access them.  So, I needed to add on a list-type member id[] and make sure each successive element points to the same objects as pointed to by id0, id1,  ie. id[0], id[1], etc.So, my final code to take a complex object and add a list-type member, is. 


Answer URL
https://docs.python.org/3/library/pickle.html
https://docs.python.org/3/reference/datamodel.html#special-lookup
