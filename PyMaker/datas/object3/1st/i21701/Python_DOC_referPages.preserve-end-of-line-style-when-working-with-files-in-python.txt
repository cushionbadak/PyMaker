Natural Text
I am looking for a way to ensure that the end-of-line style of a file is maintained in python program while reading, editing and writing.Python has universal file ending support, which can convert all line endings to \n when the file is read, and then convert them all to the system default when the file is written.  In my case I would like to still do the initial conversion, but then write the file with the original EOL style rather than the system default.Is there a standard way to do this kind of thing?  If not, is there a standard way to detect the EOL style of a file?Assuming that there is no standard way to do this, a possible work flow would be:Read in a file in binary mode.Decode into utf-8 (or whatever encoding is required).Detect EOL style.Convert all line endings to \n.Do stuff with the file.Convert all line endings to original style.Encode file.Write file in binary mode.In this work flow, what is the best way to do step 2?
Use python's universal newline support:newlines contains the file's delimiter or a tuple of delimiters if the file uses a mix of delimiters. 
To preserve original line endings, use newlines='' to read or write line endings untranslated.Note that if the text manipulation itself deals with line endings, additional or alternative logic may be needed to detect and match original line endings.The 'U' mode also works, but is deprecated.Python Documentation: opennewline controls how universal newlines mode works (it only applies to text mode). It can be None, '', '\n', '\r', and '\r\n'. It works as follows:• When reading input from the stream, if newline is None, universal newlines mode is enabled. Lines in the input can end in '\n', '\r', or '\r\n', and these are translated into '\n' before being returned to the caller. If it is '', universal newlines mode is enabled, but line endings are returned to the caller untranslated. If it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated.• When writing output to the stream, if newline is None, any '\n' characters written are translated to the system default line separator, os.linesep. If newline is '' or '\n', no translation takes place. If newline is any of the other legal values, any '\n' characters written are translated to the given string.


Answer URL
https://docs.python.org/3/library/functions.html#open
https://docs.python.org/3/library/os.html#os.linesep
