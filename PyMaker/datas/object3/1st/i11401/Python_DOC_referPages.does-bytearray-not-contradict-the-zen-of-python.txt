Natural Text
Python PEP 3137 introduced bytearray as a mutable 8-bit array type. However, a list of the immutable bytes type accomplishes the same goal, and actually has better performance, albeit perhaps a clunkier syntax. This new type contradicts the Zen of Python There should be one-- and preferably only one --obvious way to do it.So my question is: is there any documented major advantage or design consideration for using a bytearray over a list of bytes? So far, I have not found a piece of motivation documented in the PEP or in the documentation pages. In fact, the documentation treats them as near-equals:The bytearray type is a mutable sequence of integers in the range 0 <= x < 256. It has most of the usual methods of mutable sequences...And then,List and bytearray objects support additional operations that allow in-place modification of the object. Other mutable sequence types (when added to the language) should also support these operations. As bytearrays are statically typed (as 8-bit unsigned integers) one might expect a performance increase, but as mentioned above the inverse is probably true. Also, there should be no memory advantage for a bytearray over a list of bytes. I could imagine that there was a need to a itertools.chain-style mutable type, but this is not mentioned anywhere and does not seem to be the design goal.
First,  a list-style container for sequences of objects that can seamlessly iterate through them (something that itertools.chain provides, actually) definitely seems convenient. As PEP 3137 mentions, the array module might have served for this purpose, but was "far from ideal". The authors wished for "both a mutable and an immutable bytes type", which might mean that the design goal was having the same interface for both a mutable (perhaps using non-contiguous memory for fast insertions and deletions), as well as an immutable (definitely contiguous memory) implementation. This created, as far as I can appreciate, a jumble of sequence types, including array.array, bytes, bytearray, str, unicode, list, tuple and generator. In essence, they provide interfaces to statically typed or ducked type, mutable or unmutable sequences which are stored in memory or evaluated on-the-fly (generators). Most of these do follow the rationale of the Abstract Base Classes, but I do think that there is more design to be done before this can be deemed Pythonic.Note: I'm leaving this answer open for editing hoping that people might contribute insights or corrections.


Answer URL
https://docs.python.org/3/library/array.html
https://docs.python.org/3/library/stdtypes.html#binaryseq
