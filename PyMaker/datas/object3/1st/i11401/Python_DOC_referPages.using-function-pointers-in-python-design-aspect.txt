Natural Text
I have a case in which a class A has a function called foo1() which I need to use with couple of modifications to its current flow sometimes when relevant.I thought of importing this class from the file and to make foo able to get two function pointers as optional parameters which will determine if we will do  different and additional flow or not.For example making foo having its original parameters (...) as long with the new function pointers foo(...,func_pointer1 = None,func_pointer2=None) Just to clarify, func_pointer1 will hold a function to launch in any case of the flow, func_pointer2 is designed to add more code to process at the end of the flow if passed.I think this method of passing two function pointer is not something so common, and I need to pass each function **kwargs parameters also.Anyone has an idea if this sounds okay, or do you have more reasonable solution?
Maybe you could pass functions with parameters as two lists to another function and then tell this next function how to manage those lists?I had to do sth similar, and I did this:
What you call "function pointers" are actually just functions in python. Functions are objects just as anything else, so you can also pass them around as much as you like. In the standard library this is used for max(key=function) or for things in functools like partial. So what you do is totally okay.If you don't want to pass *args and **kwargs explicitly you can use a lambda or partial.


Answer URL
https://docs.python.org/3/library/functools.html#functools.partial
