Natural Text
I'm trying to write simpler code for adding unique elements into a python list. I have a dataset that contains a list of dictionaries, and I'm trying to iterate through a list inside the dictionaryWhy doesn't this work? It's adding all the items, including the duplicates, instead of adding unique items.vs. the longer form which works:Is there a way of making this work using list comprehension, or am I stuck with using double for loops? I want to keep the ordering for this.Here's the list of dictionaries:output should be ["apple", "banana", "strawberry", "blueberry", "kiwi"]I noticed someone asking a similar question on another post: Python list comprehension, with unique items, but I was wondering if there's another way to do it without OrderedDict or if that's the best way
The easiest way is to use OrderedDict:If you want alternatives check OrderedSet recipe and package based on it.
all_items isn't continuously overwritten during the list comprehension, so you're constantly looking for things in an empty list.I would do this instead:and I get:But there are more efficient ways to do this anyway.
Why not just use set?e.g. - If you want a list:Instead of the curly braces {} for the set you could also just use the set keyword, since the braces may be overly obscure for some.Here's a link to the syntax


Answer URL
https://docs.python.org/3/reference/expressions.html#set-displays
