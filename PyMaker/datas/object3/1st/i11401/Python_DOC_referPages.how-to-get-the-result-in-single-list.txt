Natural Text
I'm creating Fare Estimator on the basis of a Codefight Code challenge.That can tell you how much your ride will cost before you request it. It works by passing approximated ride distance and ride time through this formula:(Cost per minute) * (ride time) + (Cost per mile) * (ride distance)ExampleFor ride_time = 30,ride_distance = 7,cost_per_minute = [0.2, 0.35, 0.4, 0.45]cost_per_mile = [1.1, 1.8, 2.3, 3.5], the output should befareEstimator(ride_time, ride_distance, cost_per_minute,cost_per_mile) = [13.7, 23.1, 28.1, 38]Where Output must be in a listSince: 30 * 0.2 + 7 * 1.1 = 6 + 7.7 = 13.730 * 0.35 + 7 * 1.8 = 10.5 + 12.6 = 23.130 * 0.4 + 7 * 2.3 = 12 + 16.1 = 28.130 * 0.45 + 7 * 3.5 = 13.5 + 24.5 = 38Here is my Code:Its outputI've tried using List Comprehension where I am getting TypeError: 'float' object is not iterableNow please help me to get the result in a single list Like this.[13.7, 23.1, 28.1, 38]
Instead of printing, append to a list that you then return:This is easily converted to a list comprehension; just put the result expression at the front:Demo:Note that this returns the new list, if you still need to print this result, do so where you called fareEstimator().
The issue is here:For each result, you create a list containing only the result, and print it.What you want to do seems to be in the lines of creating an empty list, and add each result to it.Like this:See https://docs.python.org/3/tutorial/datastructures.html to know more about the operations you can do on a list.
You just need to use list comprehension and return the result from the function:
A simplest (editing-wise) approach is to just replace the print([result]) with yield result and your fareEstimator would become a generator function.If you need a list (e.g. for indexed access) and not just some iterable, call it like this:Or, if you know always need a list you may also do it like this:Or, better, the same written as a list comprehension:AndWould print that list.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
