Natural Text
I have a nested loop structure to generate a large number of backtests by varying the value of 4 variables, oq, aq, lev, and val.  The idea is to execute every combination of the variables below within the ranges provided.  Without a constraint, this loop would therefore execute a total of 5 * 6 * 5 * 5 = 750 times which at ~5-10 seconds each would take several hours.  However, there is a constraint, which is that all the weights must sum to exactly 1 (tot_wgt).  By adding an if statement, I hoped to simply discard such cases.Unfortunately, the code still seems to execute sometimes when tot_wgt does not have a value of 1.  This seems to happen every time the val loop has completed a cycle (and presumably also happens when each of the other 3 loops have completed a cycle). Problem solved: I had an indentation error: my  needed to be at the level of the if statement.  But see the excellent answer on recognition of floating point numbers.
This is caused by the limitations of representing floating-point numbers in computer hardware as base 2 (binary) fractions. Refer to Floating Point Arithmetic: Issues and Limitations for the detailed description. For instance, in  your case, As you can see, this is not equvelent to 1. One simple way to resolve it is just to replace the line if (tot_wgt != 1): with, Python 3.5 adds the math.isclose for testing approximate equality. For an earlier version, the equivalent function is as follows.Use numpy.isclose to test if two arrays are element-wise equal within a tolerance.


Answer URL
https://docs.python.org/3/library/math.html#math.isclose
