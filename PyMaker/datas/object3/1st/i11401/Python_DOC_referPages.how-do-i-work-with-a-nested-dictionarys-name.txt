Natural Text
I'm writing a program using dictionaries nested within a list. I want to print the name of each dictionary when looping through the list, but don't know how to do that without calling the entire contents of the dictionary. Here is my code:Here is the output:Everything works, I just need the names of my dictionaries to print. What's the solution?
Values in a list aren't really variables any more.  They aren't referred to by a name in some namespace, but by an integer indicating their offsets from the front of the list (0, 1, ...).If you want to associate each dict of data with some name, you have to do it explicitly.  There are two general options, depending on what's responsible for tracking the name: the collection of people, or each person in the collection.The first and easiest is the collections.OrderedDict --- unlike the normal dict, it will preserve the order of the people in your list.Alternatively, you can store each person's name in his or her own dict... assuming you're allowed to change the contents of those dictionaries.  (Also, you wouldn't want to add anything to the data dictionary that would require you to change / update the data more than you already do.  Since most people change their favorite food or song much more often than they change their name, this is probably safe.)Note that how you print the data depends on whether you store the name in the collection (OrderedDict variant), or in each person's dict (list  variant).
The (more) correct way of doing this is to construct a dict of dicts instead, such as:Then you can simply do the following:This will print the following:As a side note, it is more readable to use string formatting in your print statement:
what you are basically trying to do is printing the name of a variable. Of course, this is not reccomended. If you really want to do this, you should take a look at this post:How can you print a variable name in python?What i would do, is to store the name of the dictionary inside of the lists. You could do this by changing 'people = [sam, dave]' to 'people = [["sam", sam], ["dave", dave]]'. This way, person[0] is the name of the person, and person[1] contains the information.
The simplest way is to store the name as a string that maps to the matching variable identifier:If you really don't like the idea of typing each name twice, you could 'inline' the dictionaries:Finally, if you can rely on those variables being in the global namespace and are more concerned with just making it work than purity of practice, you can find them this way:
Thanks for the great input. This program is for a practice example in "Python Crash Course" by Eric Matthes, so the inefficient "dictionaries inside list" format is intentional. That said, I got a lot out of your comments, and altered my code to get the desired output:Here is the output:Thanks again, all who provided insightful answers.


Answer URL
