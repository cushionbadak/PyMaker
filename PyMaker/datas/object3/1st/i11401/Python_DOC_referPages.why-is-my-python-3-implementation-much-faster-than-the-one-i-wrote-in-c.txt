Natural Text
I know that C++ should be much faster than Python 3 because it is a compiled language as opposed to an interpreted language.  I wrote 2two programs that use the Monte Carlo Simulation to calculate Pi, one in Python 3 and the other in C++.  Python turned out to be approximately 16x faster than C++. As seen in the photos bellow, with a repetition value of (10,000,000), Python takes 8.5 seconds whilst C++ takes 137.4 seconds.I'm new to C++ but I can't find posts online that explains this behavior.According to this post C++ in general should be 10x - 100x faster than Python, which is clearly not the case with me.Please help me understand why Python is significantly faster than C++ in my case.My results:Monte Carlo Simulation (Estimation of Pi) in C++Monte Carlo Simulation (Estimation of Pi) in Python 3Python Source Code:C++ Source Code:
The main problem is that you're reseeding a random number generator for each random number in your C++ code. Additionally you're not compiling with optimizations enabled (-O3).I moved the initialization of the random number generator outside the randomFloat function (equally, you could use static variables inside the function):and compiled with -O3 and now C++ is considerably faster than PythonAnother possibility could be that python and C++ code use a different random number generator. Python random module (C code here) uses a MT19937 Mersenne Twister random number generator that is a fast PRNG optimized specifically for numerical problems such as Monte Carlo; the algorithm of default_random_engine in C++ is implementation-defined. As pointed out by Melak47, you can force the use of MT19937 PRNG in C++ with:orP.S., Python outperforming C++ is not unheard of; the C++ algorithms value genericity whereas the Python algorithms are often quite optimized for some use cases. See for example this question on substring matching.
The main cost is your randomFloat() c++ method.building a random_device, default_random_engine and uniform_real_distribution every iteration is incredibly wasteful.By making these static I was able to increase the speed of the c++ implementation by over a factor of 100. But you'd be better served injecting them, or wrapping this in a class and making them instance members.Original implmentation LogUsing static random generator
Not meant as an answer to your question why python is faster, just to show that python can get event faster and neater for this problem.To possibilities to speed things up in python:Use numpy vectorization:And / or numba just in time compilation:


Answer URL
https://docs.python.org/3/library/random.html
