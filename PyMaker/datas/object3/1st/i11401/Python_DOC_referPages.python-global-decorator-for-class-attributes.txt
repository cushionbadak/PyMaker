Natural Text
Below is an abstracted piece of code that simplifies an issue that I have.In this example, I have a program that has a login and logout attributes.The login is version-independent and logout is version-dependent.executor is an external interface that performs the actual action, and it should receive a string. The do function cannot be altered.The version can and will change at run-time, so I was looking for some sort of global decorator/property that will call a function when the decorated attribute is accessed. The objective is to select the correct string per version before it is sent to executor.do.The obvious answer is to change the perform function to executer.do(self.logout[self.version]), but self.login and self.logout should not be accessed differently. There are inheritances in which self.logout is only a string, and perform is shared.I was thinking of something like:That obviously doesn't work.Is this even possible?
Manual SolutionLooks like a use case for a property decorator:Now:Automated Solution 1If you have lot such properties, you can automate a bit:Now:Automated Solution 2The "Automated Solution 1" redefines the properties every time you makea new instance of A. This solutions avoids this but is bit more involved.It makes use of a class decorator.Now:
You say that "self.login and self.logout should not be accessed differently. The code below keeps the self.logout dictionary but renames it to self.logouts so that we can access it as a property. Similar remarks apply to self.logout_message.This code runs on Python 2 or 3.output


Answer URL
https://docs.python.org/3/library/functions.html#property
