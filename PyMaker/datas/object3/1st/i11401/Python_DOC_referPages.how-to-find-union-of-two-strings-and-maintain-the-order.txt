Natural Text
I have two strings and I would like to find a union of them. While doing so I would like to maintain the order. My aim of doing this is that I'm trying several ways to OCR an image and get different results. I would like to combine all the different results into one result which will have the most content. This is atleast what I'm after:This is what I've tried:
You could use the difflib.SequenceMatcher for this:Used like this:If you want to perform the merge on a character level, you can simply modify the call to operate on the string directly (instead of a list of words):This solution properly maintains the order of the individual parts of the string. So if both strings end with a common part but have a different segment before the end, then both those different segments will still appear before the common end in the result. For example merging A B D and A C D will give you A B C D.So you can find each of the original strings in the correct order by simply removing parts of the resulting string. If you remove the C from that example result, you get back the first string; and if you remove the B instead, you get back the second string. And this also works with more complex merges.
Do not use a set for this. As you must have noticed, only one are made it to the final result as set() keeps unique objects.
You can use a generator comprehension and join like this to accomplish what you want. This sets i to the index of a word in string1 and x to that word. It then checks if that word is in string2, and if not, adds the word in string2 at i to x to put both words in the final string.


Answer URL
https://docs.python.org/3/library/difflib.html#sequencematcher-objects
