Natural Text
Sometimes there is some non-critical asynchronous operation that needs to happen but I don't want to wait for it to complete.  In Tornado's coroutine implementation you can "fire & forget" an asynchronous function by simply ommitting the yield key-word.I've been trying to figure out how to "fire & forget" with the new async/await syntax released in Python 3.5.  E.g., a simplified code snippet:What happens though is that bar() never executes and instead we get a runtime warning:
Upd:Replace asyncio.ensure_future with asyncio.create_task everywhere if you're using Python >= 3.7 It's newer, nicer way to spawn task.asyncio.Task to “fire and forget”According to python docs for asyncio.Task it is possible to start some coroutine to execute "in background". The task created by asyncio.ensure_future function won't block the execution (therefore the function will return immediately!). This looks like a way to “fire and forget” as you requested.Output:What if tasks are executing after event loop complete?Note that asyncio expects task would be completed at the moment event loop completed. So if you'll change main() to:You'll get this warning after the program finished:To prevent that you can just await all pending tasks after event loop completed:Kill tasks instead of awaiting themSometimes you don't want to await tasks to be done (for example, some tasks may be created to run forever). In that case, you can just cancel() them instead of awaiting them:Output:
This is not entirely asynchronous execution, but maybe run_in_executor() is suitable for you.
Thank you Sergey for the succint answer. Here is the decorated version of the same. Produces


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task
https://docs.python.org/3/library/asyncio-task.html#asyncio.Task
https://docs.python.org/3/library/asyncio-future.html#asyncio.ensure_future
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.BaseEventLoop.run_in_executor
