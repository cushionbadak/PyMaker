Natural Text
I am trying to process batches of a vector let say, I have this vectorI want to print every three elements, if it reaches the end, it goes back to the beginning and takes the first to element and so on. For example, the output would be something like10, 20, 3040, 70, 8090, 10, 20    <== starts over30, 40, 70 80, 90, 10    <== starts overand so on...I know I can do this creating a function and calculating the start and end index using module, but I was thinking if there is a way just playing with the sintaxis, something likeI know you can do this for a single index v[index % len(v)], but is it possible to do it for a range v[range % len(v)] ? 
Though computing indexes is possible, I would use itertools.cycle with the zip(*[] * x) grouper:Change n to however many times you want to loop. Output:
itertools have a number of tools that can help you with that:which produces (yields):The chunks function has been taken from here
If I understand your problem correctly, you want circular indexing. I think there are two ways of achieving this. Through explicit functions, as you mentioned, and other answers have elaborated. But you want to achieve the same through usual list syntax (including slicing). It is only possible if you make a subclass out of base list class. Below is an example of doing this:Note: I do not recommend this, and suggest the other methods above.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.cycle
https://docs.python.org/3/library/itertools.html#module-itertools
