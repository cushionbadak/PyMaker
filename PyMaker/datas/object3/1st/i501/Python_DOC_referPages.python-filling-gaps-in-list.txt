Natural Text
I have a list made of tuples, generated from a database query, eg:The first number in each tuple must be a consecutive number, going from 0 to 15. There may also be missing ones, and I'm looking for the best method to fill gaps.Currently I do this by looping through, but being the Python noob I am I figure it's sloppy and there's better ways:So, expected output for the list at start would be:list = [(0,1,1), (1,2,1), (2,4,3), (3,0,0), (4,2,1), (5,0,0), (6,0,0), (7,0,0), (8,0,0), (9,0,0), (10,0,0), (11,0,0), (12,0,0), (13,0,0), (14,0,0), (15,0,0)]
There are many ways, you could generate a new list like this:As a side note, I renamed your list data, as it is better to avoid using the names of builtin functions as variables.
You can convert the list of tuples to a dict indexed by the first items of the tuples first, so that you can iterate through the range of 0 to 15 to find the missing indices and produce default values for them in a list comprehension:This outputs:
In order to introduce some interesting language features, that can be used to solve this, here a solution based on Python's stable sort with a simple sort key function and itertools.groupby() to group the items based on the index.You then take the first of two, if you had this index in the input data. Or the default item, if there was none with this index.The output is:For reference:https://docs.python.org/3/library/stdtypes.html#list.sorthttps://docs.python.org/3/library/itertools.html#itertools.groupbyhttps://docs.python.org/3/reference/expressions.html#lambda


Answer URL
https://docs.python.org/3/library/stdtypes.html#list.sort
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/reference/expressions.html#lambda
