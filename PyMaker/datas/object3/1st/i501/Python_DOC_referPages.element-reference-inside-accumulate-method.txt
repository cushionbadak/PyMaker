Natural Text
could someone help me understand what the s[1] and s[0] are referring to in the code below? This code will generate a Fibonacci serie. And I am still trying to understand how accumulate() works. Does it return the first value (0,1) as it is, then uses the result from the first application of the lambda function as s[1] and another tuple (0,1) from the list generated by repeat() as s[0]? or s[0] and s[1] are assigned as 0 and 1 respectively? Thanks!
indexable[n] is the way to get the value in index n of indexable. Since tuples are indexable collections (they define __getitem__), you're getting the zero-index and one-index of that tuple (the first and second values, respectively).This might be better-understood in the no-longer-valid syntax:As you correctly intuited, accumulate([x1, x2, x3], fn) returns the infinite series [x1, fn(x1, x2), fn(x2, fn(x1, x2)), ...] fn in this case is a function that has the signature:The docs probably show this most clearly, using operator.add (aka +)
Since p=1 and q=1 and r=0, we can ignore them altogether and it ultimately boils down to just this:You can visualize it like this:as you can see current never gets used. In your code i is current, s is prev, and so s[0] == prev[0] which is the first element in the tuple, and s[1] is the 2nd element


Answer URL
https://docs.python.org/3/library/itertools.html?highlight=itertools%20accumulate#itertools.accumulate
