Natural Text
The group function picks up pp from another big group. I want the program to say if any elements from pp existed in rr, I want to refuse it and call pick function again. If not append rr list with pp.I have two lists like this:and I have this function:Here rr contains 7 which existed in pp, must be refused. but the problem that it is still accepted. and rr still appended by this wrong pp.If I do like this:It will still run forever without any output.this is my soloution, it works, but i can't put it in answer:
If you are checkin single integers from both lists of lists, you can do something like:
I'm not entirely sure what you're after.But maybe this is something that you can work with:itertools just flattens the "check list", so it's easier to work with the numbers. Then simply iterate over those and check which rr pairs contain invalid numbers. Store those invalid pairs in ignore.If you don't want to ignore a pair, simply skip the ignore part.But it will make sure that [7, 8] doesn't belong in your results - if for instance your pp looked like this: pp = [[7,9], [8, 11]]
Here another approach [Disclaimer: As the others I'm not entirely sure I understood your question correctly, please leave a comment if it is not what you want].If any value in rr appears in pp,too, pp will not be appended, else pp will be appended.Output:
I approached  this way:result:
I think I know what you are asking, but I'm not sure. Because the question is phrased awkwardly, for me anyway.I think you want to use sets. Sets are a data-structure in python that control lists of unique elements. So it sounds like you want things in rr only to be in rr, if they are not already in pp?So, I'd use a set for pp. Create a set of everything in pp:Running this code:Because I find the question a bit awkward, I've just thrown together a possible solution. It's not complete, but hopefully it shows the main benefit of using a set 
This is my solution, it works:1- the group Function that choose the elements into groups:2- the logic for accepting or Refusing that Group, then send the result to the view:


Answer URL
https://docs.python.org/3/library/stdtypes.html?highlight=set#set
