Natural Text
What is the Python equivalent of Perl's chomp function, which removes the last character of a string if it is a newline?
Try the method rstrip() (see doc Python 2 and Python 3)Python's rstrip() method strips all kinds of trailing whitespace by default, not just one newline as Perl does with chomp.To strip only newlines:There are also the methods lstrip() and strip():
And I would say the "pythonic" way to get lines without trailing newline characters is splitlines().
The canonical way to strip end-of-line (EOL) characters is to use the string rstrip() method removing any trailing \r or \n.  Here are examples for Mac, Windows, and Unix EOL characters.Using '\r\n' as the parameter to rstrip means that it will strip out any trailing combination of '\r' or '\n'.  That's why it works in all three cases above.This nuance matters in rare cases.  For example, I once had to process a text file which contained an HL7 message.  The HL7 standard requires a trailing '\r' as its EOL character.  The Windows machine on which I was using this message had appended its own '\r\n' EOL character.  Therefore, the end of each line looked like '\r\r\n'.  Using rstrip('\r\n') would have taken off the entire '\r\r\n' which is not what I wanted.  In that case, I simply sliced off the last two characters instead.Note that unlike Perl's chomp function, this will strip all specified characters at the end of the string, not just one:
Note that rstrip doesn't act exactly like Perl's chomp() because it doesn't modify the string. That is, in Perl:results in $x being "a".but in Python:will mean that the value of x is still "a\n". Even x=x.rstrip() doesn't always give the same result, as it strips all whitespace from the end of the string, not just one newline at most.
I might use something like this:I think the problem with rstrip("\n") is that you'll probably want to make sure the line separator is portable. (some antiquated systems are rumored to use "\r\n"). The other gotcha is that rstrip will strip out repeated whitespace. Hopefully os.linesep will contain the right characters. the above works for me.
You may use line = line.rstrip('\n'). This will strip all newlines from the end of the string, not just one.
will remove all newlines at the end of the string s. The assignment is needed because rstrip returns a new string instead of modifying the original string. 
or you could always get geekier with regexps :)have fun!
This would replicate exactly perl's chomp (minus behavior on arrays) for "\n" line terminator:(Note: it does not modify string 'in place'; it does not strip extra trailing whitespace; takes \r\n in account)
you can use strip:demo:
Careful with "foo".rstrip(os.linesep): That will only chomp the newline characters for the platform where your Python is being executed. Imagine you're chimping the lines of a Windows file under Linux, for instance:Use "foo".rstrip("\r\n") instead, as Mike says above.
An example in Python's documentation simply uses line.strip().Perl's chomp function removes one linebreak sequence from the end of a string only if it's actually there.Here is how I plan to do that in Python, if process is conceptually the function that I need in order to do something useful to each line from this file:
rstrip doesn't do the same thing as chomp, on so many levels. Read http://perldoc.perl.org/functions/chomp.html and see that chomp is very complex indeed.However, my main point is that chomp removes at most 1 line ending, whereas rstrip will remove as many as it can.Here you can see rstrip removing all the newlines:A much closer approximation of typical Perl chomp usage can be accomplished with re.sub, like this:
I don't program in Python, but I came across an FAQ at python.org advocating S.rstrip("\r\n") for python 2.2 or later.

workaround solution for special case:if the newline character is the last character (as is the case with most file inputs), then for any element in the collection you can index as follows: to slice out your newline character. 
If your question is to clean up all the line breaks in a multiple line str object (oldstr), you can split it into a list according to the delimiter '\n' and then join this list into a new str(newstr).newstr = "".join(oldstr.split('\n')) 
It looks like there is not a perfect analog for perl's chomp.  In particular, rstrip cannot handle multi-character newline delimiters like \r\n. However, splitlines does as pointed out here.Following my answer on a different question, you can combine join and splitlines to remove/replace all newlines from a string s:The following removes exactly one trailing
I find it convenient to have be able to get the chomped lines via in iterator, parallel to the way you can get the un-chomped lines from a file object. You can do so with the following code:Sample usage:
I'm bubbling up my regular expression based answer from one I posted earlier in the comments of another answer.  I think using re is a clearer more explicit solution to this problem than str.rstrip.If you want to remove one or more trailing newline chars:If you want to remove newline chars everywhere (not just trailing):If you want to remove only 1-2 trailing newline chars (i.e., \r, \n, \r\n, \n\r, \r\r, \n\n)I have a feeling what most people really want here, is to remove just one occurrence of a trailing newline character, either \r\n or \n and nothing more.(The ?: is to create a non-capturing group.)(By the way this is not what '...'.rstrip('\n', '').rstrip('\r', '') does which may not be clear to others stumbling upon this thread.  str.rstrip strips as many of the trailing characters as possible, so a string like foo\n\n\n would result in a false positive of foo whereas you may have wanted to preserve the other newlines after stripping a single trailing one.)
Just use : orYou don't need any of this complicated stuff

There are three types of line endings that we normally encounter: \n, \r and \r\n. A rather simple regular expression in re.sub, namely r"\r?\n?$", is able to catch them all.(And we gotta catch 'em all, am I right?)With the last argument, we limit the number of occurences replaced to one, mimicking chomp to some extent. Example:... where a == b == c is True.
If you are concerned about speed (say you have a looong list of strings) and you know the nature of the newline char, string slicing is actually faster than rstrip. A little test to illustrate this:Output:
This will work both for windows and linux (bit expensive with re sub if you are looking for only re solution)
A catch all:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.rstrip
https://docs.python.org/3/library/stdtypes.html#str.rstrip
https://docs.python.org/3/library/stdtypes.html#str.splitlines
https://docs.python.org/3/library/stdtypes.html#str.join
https://docs.python.org/3/library/stdtypes.html#str.splitlines
https://docs.python.org/3/library/stdtypes.html#str.splitlines
