Natural Text
I'm unable to flatten and transform an XML to CSV file using XSLT, when dealing with large XML files.Currently, I'm parsing a nested XML file with lxml using a XSL file to flatten the output and then I write the output to a CSV file.My XML looks something like this:I want to end up with the following CSV file:My XSLT:My Python code:This works great for small files, but now I want to do the same with an XML file of +- 2.5gb. Using etree.parse will load it into memory, which won't work with larger files obviously.I want to iterate somewhere, so I'm not loading the XML file into memory and  write to CSV line for line, while still making use of the XSLT for transforming. I'm using the XSLT file because it's the only way I know (now)  how to flatten a nested XML file.
One possibility is to use XSLT 3.0 streaming. There are two challenges here:(a) making your code streamable. We can't judge how difficult that is without seeing the stylesheet code.(b) installing and running a streaming XSLT 3.0 processor. This depends how locked in to the Python environment you are. If it has to be done in Python, you could try installing Saxon/C. The alternative is to call out to a different environment in which case you have more options, for example you could run Saxon-EE on Java.LATERLooking at the code you have posted, it's rather strangeI suspect you want to output the topid of the "current" level2 element, but that's not what this is doing (in XSLT 1.0 it will print the value of the first level2/topic, in XSLT 2.0+ is will print the values of all the level2/topic elements. I suspect you really want something like this:That's almost streamable, but not quite. Streaming doesn't allow you to go back to the topid and subtopid elements. The easiest way to make it streamable might be to save the most recent values of these elements in accumulators:and then access the values as:
I'd rather use XSLT 3.0 (or even 2.0!) in Python, but haven't had the time to figure out how to use Saxon/C.Another option would be to use iterparse().Example...XML Input (fixed to be well-formed and to add a second level3 for testing)PythonCSV Output
Saxon/C and python can work:One user has successfully used Boost.Python to interface with the C++ library. Another user has done the interfacing in a different way: https://github.com/ajelenak/pysaxon


Answer URL
https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.iterparse
