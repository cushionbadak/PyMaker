Natural Text
Hi I have a question about splitting strings into tokens.Here is an example string:string = "As I was waiting, a man came out of a side room, and at a glance I was sure he must be Long John. His left leg was cut off close by the hip, and under the left shoulder he carried a crutch, which he managed with wonderful dexterity, hopping about upon it like a bird. He was very tall and strong, with a face as big as a ham—plain and pale, but intelligent and smiling. Indeed, he seemed in the most cheerful spirits, whistling as he moved about among the tables, with a merry word or a slap on the shoulder for the more favoured of his guests."and I'm trying to split string correctly into its tokens. Here is my function count_wordsand the result of split here ['as', 'i', 'was', 'waiting', 'a', 'man', 'came', 'out', 'of', 'a',  'side', 'room', 'and', 'at', 'a', 'glance', 'i', 'was', 'sure', 'he',  'must', 'be', 'long', 'john', 'his', 'left', 'leg', 'was', 'cut',  'off', 'close', 'by', 'the', 'hip', 'and', 'under', 'the', 'left',  'shoulder', 'he', 'carried', 'a', 'crutch', 'which', 'he', 'managed',  'with', 'wonderful', 'dexterity', 'hopping', 'about', 'upon', 'it',  'like', 'a', 'bird', 'he', 'was', 'very', 'tall', 'and', 'strong',  'with', 'a', 'face', 'as', 'big', 'as', 'a', 'ham—plain', 'and',  'pale', 'but', 'intelligent', 'and', 'smiling', 'indeed', 'he',  'seemed', 'in', 'the', 'most', 'cheerful', 'spirits', 'whistling',  'as', 'he', 'moved', 'about', 'among', 'the', 'tables', 'with', 'a',  'merry', 'word', 'or', 'a', 'slap', 'on', 'the', 'shoulder', 'for',  'the', 'more', 'favoured', 'of', 'his', 'guests', '']as you see there is the empty string '' in the last index of the split list.Please help me understand this empty string in the list and to correctly split this example string.
You could use a list comprehension to iterate over the list items produced by re.split and only keep them if they are not empty strings:You should also consider returning the data from the function, and printing it from the caller rather than printing it from within the function.  That will provide you with flexibility in future.
That happened because the end of string is . and it is in the split pattern so , when match . the next match will start with an empty and that why you see ''.I suggest this solution using re.findall instead to work an opposite way like this :
Python's wiki explains this behavior:If there are capturing groups in the separator and it matches at the  start of the string, the result will start with an empty string. The  same holds for the end of the stringEven though yours is not actually a capturing group, the effect is the same. Note that it could be at the end as well as at the start (for instance if your string started with a whitespace).The 2 solution already proposed (more or less) by others are these:Solution 1: findallAs other users pointed out you can use findall and try to inverse the logic of the pattern. With yours, you can easily negate your character class: [^\s\.,!?:;'\"-]+.But it depends on you regex pattern because it is not always that easy.Solution 2: check on the starting and ending tokenInstead of checking if each token is != '', you can just look at the first or at the last one of the tokens, since you are eagerly taking all the characters on the set you need to split on.
You have an empty string due to a point is also matching to split at the string ending and anything is downstream. You can, however, filter out  empty strings with filter function and thus complete your function:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html?highlight=list%20comprehensions#list-comprehensions
https://docs.python.org/3/library/re.html#re.split
