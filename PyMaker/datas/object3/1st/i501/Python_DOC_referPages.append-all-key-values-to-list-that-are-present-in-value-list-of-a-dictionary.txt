Natural Text
My main concern is doing this more pythonically. The code below works, but seems clunky.I have a dictionary with keys mapped to lists. I want to loop through the dictionary and see if each key is in a value list, and if so, append that to a new list associated with that key value. I will post an example below for clarification.To simplify the problem, say that I have a dict like so:In my_dict, key 1 is present in the value list of key 3, so we would create a new dict with key = 1, and value = list(3)Similarly, key 6 is present in the value lists of keys 2, 4, and 5. We would create a new key =6 and value = list(2,4,5) in our dict.Here would be the final output for our dict:My code so far: Any pointers are much appreciated. Thank you for your time. 
You can use setdefault to invert the dictionary:OutputThe idea is to iterate over each (key, values) pair then use each value as key, setdefault will handle the case when the key is missing. An alternative will be to set the empty list as default value for each new key in new_dict, for example:This will produce the same output as above, a third option will be to use collections.defaultdict and skip the first loop:OutputNote that this returns a defaultdict, that is a sub-class of dict.
Just for completeness, here is another version using dict comprehension:


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.setdefault
https://docs.python.org/3/library/collections.html
