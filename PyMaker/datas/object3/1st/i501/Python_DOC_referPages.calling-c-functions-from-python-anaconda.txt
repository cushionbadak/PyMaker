Natural Text
Update:So I have gotten my C++ code to compile, as per the docs using setup.py as shown in section 4.1 here, and it seems the module is being successfully imported as when I query assignment1.add? after importing I receive the information:Docstring: Add two numbers.Type:      builtin_function_or_methodHowever, when I actually call the function assignment1.sum(1,2) the Python kernel immediately dies with no further error message than "Kernel died, restarting".Any suggestions as to where I should look next for the cause of the problem?
Your first attempt uses Python3 API. I'm not sure what "linker error 1120" is, not going to look it up, but my guess is undefined reference, which is totally understandable if you are trying to use Python2.7 (why by the way?) Python2 and Python3 have different incompatible C APIs.The second attempt uses Python2.7. The example you have copied is wrong. The init function to initialise a module named module should be called initmodule, not initmod. But wait, there's more! You have not copied it verbatim. You have renamed the file "module.c" to "assignment1.c", but neglected to change either the module name string or the init function string, and you have called your python file the same as your supposed module, "assignment1", which doesn't exist. A module called assignment1 should be in a library named assignment1.<your library extension> and have an init function named initassignment1. The library you have created is not usable as a Python module. My guess is that your Python module assignment1.py has imported itself, and it of course doesn't have anything called sum. Live demo of the fixed module.All of this is totally irrelevant for calling C++ functions from Python. Just use pybind11. 


Answer URL
https://docs.python.org/3/extending/extending.html
https://docs.python.org/3/extending/building.html#building
