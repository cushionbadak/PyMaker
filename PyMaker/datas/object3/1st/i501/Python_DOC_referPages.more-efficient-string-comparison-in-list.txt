Natural Text
I'm writing a program to detect court cases cited in a large number of texts from different sources, and count how many times each is cited across texts. The problem stems from the fact that cases exist in two states within most documents: They are referenced in full once or twice in a given text (ie "Timothy Ivory Carpenter v. United States of America") and then are referred to in a shorter form throughout the rest of the document (ie "Carpenter v. U.S."). Currently I am appending the titles to a massive list and then running the list thru the FuzzyWuzzy string similarity detection package.Right now I am comparing each variable against every other variable each time, which is INSANELY inefficient. My question is: Is there a way to only run the comparison's that haven't been executed? I know I could cut the list in half and make it slightly more efficient, but I'd still be comparing 1/2 the list against itself. My other thought was to create a list of which had been compared and cross reference each pair and it's mirrored version (ie both "1:5" and "5:1"), in terms of processing time, that ends up being 34% slower than just brute forcing it.What I'm doing now is comparing each of the following:which is terrible, I knowIs there a way to get python to run this instead?One part of the problem is that you can't just checkif the comparison has been run because the overlappedchecks are mirrored, not identical (ie the redundancy of3:1 is that 1:3 has been compared already, not 3:1)I don't neeed the self reference, but I includedit since I assume this would be based on achecking if the comparison has been done.Code:This isn't an "error" code problem, but a conceptual one instead. I included the code to show what I was doing: Running each iteration of var_1 : var_2 through three different filters to cull close but incorrect matches.
I assume you want combinations of your variables see the combinations iterator in itertools packageif you need to compare them to themselves you can use combinations_with_replacementso in the end your loop should look like 


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
