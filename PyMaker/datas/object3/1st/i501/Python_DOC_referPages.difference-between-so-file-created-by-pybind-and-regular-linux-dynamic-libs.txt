Natural Text
When one uses pybind to create python-c++ bindings, upon compilation pybind creates a *.so file. AFAIK the compilation step in pybind just uses the c++ compiler, so this should be no different from just regular shared libs that one would create for a normal c++ code. How does the python interpreter introspect into these *.so files to notice that there are python-compatible modules in them?
Ultimately, you'll want to look at the CPython docs for how C extensions work. From the docs: https://docs.python.org/3/extending/building.htmlA C extension for CPython is a shared library (e.g. a .so file on Linux, .pyd on Windows), which exports an initialization function.As it says here, the primary difference is that it defines its initialization / entry point function.All pybind does is wrap this entry point via PYBIND11_MODULE:https://pybind11.readthedocs.io/en/stable/basics.html#creating-bindings-for-a-simple-functionhttps://github.com/pybind/pybind11/blob/25abf7e/include/pybind11/detail/common.h#L283


Answer URL
https://docs.python.org/3/extending/building.html
