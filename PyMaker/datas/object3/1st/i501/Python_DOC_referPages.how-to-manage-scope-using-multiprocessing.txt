Natural Text
I'm trying to implement a function that uses python multiprocessing in order to speed-up a calculation. I'm trying to create a pairwise distance matrix but the implementation with for loops takes more than 8 hours.This code seems to work faster but when I print the matrix is full of zeros. When I print the rows in the function it seems to work. I think is a scope problem but I cannot understand how to deal with it.
Unfortunately your code wont work written in that way. Multiprocessing spawn separate processes, which means that the memory space are separate! Changes made by one subprocess will not be reflected in the other processes or your parent processes.Strictly speaking this is not a scoping issue. Scope is something defined inside a single interpreter process.The module does provide means of sharing memory between processes but this comes at a cost (shared memory is way slower due to locking issues and such.Now, numpy has a nice feature: it releases the GIL during computation. This means that using multi threading instead of multiprocessing should give you some benefit with little other changes to your code, simply replace import multiprocessing with import threading and multiprocessing.Process into threading.Thread. The code should produce the correct result. On my machine, removing the print statements and the sleep code it runs in under 8 seconds:An alternative is to have your subprocesses return the result and then combine the results in your main process.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#shared-ctypes-objects
https://docs.python.org/3/library/threading.html
