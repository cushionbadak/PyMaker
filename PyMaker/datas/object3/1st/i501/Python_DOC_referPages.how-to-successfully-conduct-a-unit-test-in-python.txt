Natural Text
So I am trying to run a Unit Test in which only one correct solution passes and every other incorrect solutions need to fail. But, the thing is the Unit Test has to account for a broad spectrum of test cases even negative values. How can I do this in which only one solution passes and every other fails? I heard of people doing this efficiently by using hash tables in which the input is the key and the output is the value.What I did below apparently isn't good enough of a Unit Test and is marked incorrect.Unit_Test/lecture/MainObject.pyUnit_Test/tests/Testing.py
From your example and description I take it that there might be a very fundamental misconception about how a test should look.  Every test somehow stimulates its subject (the system under test, aka SUT), and then verifies that the result meets the expectation.On a very abstract level, a test looks like this:The intention is, that a failing test will indicate that there is a bug in the SUT.  Correctly implemented code shall not lead to a failing test. (*)In your code example, you have stimulated the SUT and checked the result in the following way:From the implementation of computeShippingCost it is clear that the result in this case would be 5 and not 3.  There are now two possibilities:A) computeShippingCost is implemented correctly.  Then, the expectation in this case should be 5.  An assertion against anything else than 5 will fail.  This violates the above goal (*), because you will have a failing test although the code is implemented correctly.B) computeShippingCost has a bug, and it actually should deliver 3 in this situation.  Then, this assertion represents a useful test, and the fact that it fails indicates to you that your function has a bug.


Answer URL
https://docs.python.org/3/library/unittest.html#basic-example
