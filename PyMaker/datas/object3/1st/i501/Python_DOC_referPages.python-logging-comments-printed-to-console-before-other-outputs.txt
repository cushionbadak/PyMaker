Natural Text
I have been trying to understand logging in python. I have an init module, two other modules and a main module. For some reason, when I run my module, log details jump the code flow and are printed first before the other outputsCould someone tell me why this is happeningthis is in __init__.py This is in other two modules(written inside __init__() of the resp classsnippet of addn() function defined inside one of the moduleAnd my main modules(which I run) has this:I was expecting a output as belowaddition results sum is 3dir1.mod1 - ERROR - incrementing number!But what I got wasdir1.mod1 - ERROR - incrementing number!dir1.mod1 - ERROR - incrementing number!addition results:sum is 3Why is the log message printed first jumping out of code flow? And also could someone tell me why log message gets printed twice??
Python StreamHandler will log to stderr by default while you print statements goes to stdout. Those are two different pipelines and the ordering isn't guaranteed between them.To ensure proper ordering start by sending all output to the same pipe. For example you could add the file=sys.stderr argument to your print statements.
U can try disable the propagate property of your logger.Propagate: If this attribute evaluates to true, events logged to this logger will be passed to the handlers of higher level (ancestor) loggers, in addition to any handlers attached to this logger. Messages are passed directly to the ancestor loggersâ€™ handlers - neither the level nor filters of the ancestor loggers in question are considered.This is an example of init logger that uses file and stdout with different debug level:I used number to define the log level, but 10 = DEBUG and 40 = ERRO. More information at this link.


Answer URL
https://docs.python.org/3/library/logging.html#logging-levels
