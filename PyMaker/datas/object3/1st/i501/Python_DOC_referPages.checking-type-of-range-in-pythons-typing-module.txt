Natural Text
It's about missing typing.Range.There is no type for range in the typing package, but at the same time we see typing.re.Match, which is a package-oriented type.The typing.sequence or typing.Iterable is too comprehensive.Is there a better way to check range type and only range type? Besides using:update:To be clear, I mean some of the types in typing are including all elements or aspects of something, like typeing.Iterable (generic type, that's fine)On the other hand, there are also very specific types like typing.Generator, typing.Tuple, typing.Dict, typing.re.Matchtyping.AsyncContextManager, ...but nottyping.RangeFact 1: a range type is a different type in python(for example, a range has extra optimization given for checking elements there, and sometimes it makes sense to know if you're dealing with list or range)Fact 2: a typing module seems to covers all aspects of types.(see imports and logic there if you doubt)Knowing this, I think typing.Range is missing.The difference between type hints and type checking doesn't matter here.
The main idea of the typing package interface segregation. In most cases you should not care whether the argument passed is actually a range object, but about some aspect of its functionality. In most cases, that functionality is covered by the typing.Iterable (I don't understand what you mean by "too comprehensive").On the other hand, if you want to explicitly check for the range type, just use isinstance(x, range)
You asked:Is there a better way to check range type and only range type, besides:I think you can use isinstance() for this case (I tested it in Python 3.x):As you can see, it works correctly in recognizing range objects and it also does not get confused by lists or generators.


Answer URL
https://docs.python.org/3/library/functions.html#isinstance
