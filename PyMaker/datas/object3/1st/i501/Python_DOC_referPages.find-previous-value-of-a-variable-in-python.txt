Natural Text
This might be a really strange question but nevertheless,Consider a variable called a.Let us now assign it a value as follows:Let us now change the value of a now.Is there any way in Python to know the previous value of a variable without storing it in another variable.Does python internally maintain a sort of a ledger of all the values of a variable during its lifetime that can be accessed ?
Answer: actually, we CANBut not in general case. You need some magick for this.And magick is called  "custom namespaces".Whole idea is from Armin Ronacher presentation 5 years of Bad Ideas.Magick: custom namespace with history of valuesLet's create custom namespace that saves history of values.For demonstration purposes let's change rule for __del__ - instead of deleting values we will insert None.Rejoice!Custom namespaces is very powerful technique but almost never used.The fact I find somewhat puzzling.
Short answer No, long answer Yes, if you do it yourself.NOThe precise handling (dict, array, ...) of local names is implementation defined, but for all intents and purposes the history of a name is not tracked. None of the major implementations provide this functionality.As far as the Python language is concerned, an object not assigned to a name is gone. In practice, garbage collection is free to claim any ambient object not currently bound to a name. Whether this happens immediately or at an arbitrary time does not change that such objects are off limits for Python code. Otherwise, Python would have to keep a significant share of dead objects alive.Once a name is re-asigned, its previous referent is gone from it.Yes, but please don't do it unless your really have toThere are various ways to hook into the execution of Python code. For example, you can intercept calls/lines/returns by using sys.settrace; this is how debuggers work, and can inspect anything. If you have control over how the actual code is executed, see Alex Yu's answer for a way to hook just into the namespace.
No. There is no way to know the previous value of a variable without assigning to the object another variable. Only the presence of references keeps an object alive in memory. The garbage collector disposes of the object, when the reference count of the object reaches zero.However, according to the example from Fluent Python by Luciano Ramalho it's possible in a console session using a weak reference to an object (weak reference doesn't increase the reference count of the object!):VSOutput:The trick is that Python console automatically assigns the variable _ to the result of expressions, which are not None


Answer URL
https://docs.python.org/3/library/functions.html#locals
https://docs.python.org/3/library/sys.html#sys.settrace
https://docs.python.org/3/library/functions.html#__import__
