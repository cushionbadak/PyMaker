Natural Text
Lets say I have a PyListObject, and I want to append a PyObject then I can use PyList_Append API which is documented in List Objects C-API. But for my use case I want to pop an element from the PyListObject(i.e. my_list.pop() in python layer).But the List Objects C-API documentation does not mention anything about pop operation.So is there any document available about PyListPop API function?.
No, the list.pop method is not directly available via the C-API on PyListObjects.Given that list.pop already exists and is implemented in C you could simply look up what the CPython implementation does:Source for CPython 3.7.2This includes a lot of functions that are not (easily) accessible for a C extension and it also handles popping from a specific index (even negative ones). Personally I wouldn't even bother to re-implement it but just call the pop method with PyObject_CallMethod:It might be a bit slower than a re-implementation but it should be "safer" - one cannot accidentally mess up invariants of the list object (for example resize conditions).Another implementation is present in CythonThat could also be adapted for your use-case.
You will have to roll it out by yourself. Here is a possible implementation (without error checking):Py_SIZE is just a macro to access lst->ob_size, which we decrease while executing pop. Also versions without error checking, i.e. PyList_GET_ITEM and PyList_GET_SIZE, are used, because once it is established (see TODO-comment), that the list isn't empty - nothing could go wrong.The caller receives a new reference, albeit PyList_GET_ITEM returns a borrowed one: decreasing the size of the list the way we did in the code above, makes list "forget" the reference without decreasing the reference counter.As @MSeifert has pointed out, this version doesn't change the size of the underlying array, the same way list.pop() would do (if only half or less of the underlying array is used after pop).  This could be seen as "feature" of the above implementation - trading speed for memory.


Answer URL
https://docs.python.org/3/c-api/structures.html#c.Py_SIZE
