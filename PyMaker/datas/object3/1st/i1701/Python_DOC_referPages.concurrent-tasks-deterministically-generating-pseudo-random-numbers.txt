Natural Text
I have a coroutine that returns a list of pseudo-random bytesAs expected, this list is always the same on every run, even though the time interval between each generation is different [based on some external entropy from os.urandom], the pseudo-random number generator is seeded with the same value.Now, if I run two of these concurrently, creating two lists......the lists are always different: the tasks basically interfere with each other, and are no longer deterministic.How can I have two concurrent tasks of pseudo-random numbers generated, where each list of pseudo-random numbers is just as deterministic as though no other task were running?[My use case: testing concurrent behaviour, using large amounts of pseudo-random numbers, generated at non-deterministic intervals, but would like the pseudo-random numbers themselves to be the same for each run of the test for each task]
From the random module docs:The functions supplied by this module are actually bound methods of a hidden instance of the random.Random class. You can instantiate your own instances of Random to get generators that donâ€™t share state.
You can use random.getstate and random.setstate, ensuring that between setting the state, generating the random number(s), and getting the state, you don't yield to another task.


Answer URL
https://docs.python.org/3/library/random.html
https://docs.python.org/3/library/random.html#random.getstate
https://docs.python.org/3/library/random.html#random.setstate
