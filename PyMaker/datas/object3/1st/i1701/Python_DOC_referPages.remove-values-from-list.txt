Natural Text
This question already has an answer here:How to remove items from a list while iterating?                    23 answers                I have the following problem: I have a list:in this list I want to remove every value that is < 1200 and > 1950.I tried the following: That gives me the following result:But the output I am aiming for would be the following: I found a way to complete my task with slicing: That gives me the output I want:But I would like to understand why attemp1 doesnÂ´t work and if maybe there are better ways to fulfil my task than attemp2Can anyone help? Thanks in advance.
I would create a function for identifying valid values:Then you can use this in a list comprehension:Or you can use filteredit: The reason you were having trouble is because you can't modify something you are iterating over. It doesn't "know" that you've pulled the rug out from under it.An alternative is to make a copy of the list and iterate over that instead.Also, the remove is a linear search (which is slow). It's usually better to do the filter. If you really need to modify the list temp refers to (rather than just making temp point at a different list) you can do:[:] is a slice operator which if you assign to it will replace the entire contents of the original list (rather than assigning a new list to the name).
Your attempt1 doesn't work because you modify the same list that you loop over. This can lead to all sort of weird behaviour like skipping some values.  Here's an example:Just don't do that: never modify the list you loop over.And for the record here's the simpliest correct way (not necessarily fastest):Also note that your slicing method temp[temp.index(1200):temp.index(1950)+1] works only under the assumption that the list is sorted. And under this assumption we can get a lot faster then any of the presented method. i.e. we could do binary search + slice. But the complexity might not be worth it unless you deal with millions of values.
@freakish answer above is correct, I just want to make it more clearer.Skipping values due the list iteration is the main problem of this behaviurSee python list iteration visualization in for loop down belowiteration 1temp= [950, 1000, 1100, 1200, 1400, 1450, 1500, 1600, 1650, 1700, 1900, 1950, 2000, 2100, 2200]currentIndex = 0 (item with value 950)removing element with index 0 going to second iterationiteration 2temp looks like thattemp= [1000, 1100, 1200, 1400, 1450, 1500, 1600, 1650, 1700, 1900, 1950, 2000, 2100, 2200]currentIndex = 1 (item with value 1100)removing element with index 1 going to third iterationiteration 3temp looks like thattemp= [1000, 1200, 1400, 1450, 1500, 1600, 1650, 1700, 1900, 1950, 2000, 2100, 2200]currentIndex = 2 (item with value 1400)1400 < 1200 then going to next element.I hope it should be enought to clearly understand what's going on due such iteration. To avoid such behaviour try to use other methods list exporessions or numpy arrays.
Output:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/library/functions.html#filter
