Natural Text
The find_longest method in the following dict class finds the longest key value inside the dictionary.The code is working, but I am having a very hard time undertanding the logic behind the if not or statement. I originally usedinstead ofbut it produces the error: TypeError: object of type 'NoneType' has no len(). Why is this? Thank you very much for enlightening me on this.
Why you need if not longest check is because first time the loop is run, longest is None and you can't do len(None). So you do if not longest check and only if  this is False, the second condition  is checked. This additional check can be avoided in this case by initialising longest to -1 instead of None and comparing len(key) with longest (not len(longest)).Something like this:Note: Your code prints only the last key which might not be the longest key every time. In if, you need to update longest key along with longest value as shown.
First, you declare the variable longest and assign it to None NoneType doesn't have len(). So it lead to this statement:It checks whether longest has been updated or not
This is because you are checking the length of longest which is set to None. Hence the error.Example,The reason you don't get the error is because if not longest is executed while the second condition len(key) > len(longest) is not even executed because first is matched already. On top of that, the reason it works is the value of longest changes on second iteration.
When you are doing:You are making sure that the object longest have 'no value' or 'empty value'. In Python we don't need to declare variables first, so there are no really empty variables in Python. Setting a variable to None is then not the same thing as setting it to a default empty value; None is a value too, albeit one that is often used to signal emptyness. So how can you count the length of an object if its empty? That's the logic being used here, longest doesn't have any value at all so it throws an error:And when you are using:You are making sure that the object longest doesn't have the value None. 
It's to prevent an error from occurring during the first iteration of the for loop.The not longest part of the logical expression is evaluated first and if it's True then the remainder of the expression—the or len(key) > len(longest) portion—won't be evaluated and the value of the whole expression will also be True. This is needed because initially longest got set to None, and writing the logical expression that way prevents the len(longest) part of the second half from being evaluated and a TypeError occurring because longest has no length yet.


Answer URL
https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not
