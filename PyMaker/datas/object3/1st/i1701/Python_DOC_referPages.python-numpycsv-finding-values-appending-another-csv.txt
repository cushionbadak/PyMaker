Natural Text
I have found other posts very closely related to this, but they are not helping. I have a Master CSV file, and I need to find specific 'string' from the third column. Shown below:The ID column is unique, and so I was trying to find 'KTD684'(for expample). Once found, I need to export the values of "Date", "Prj1_Assigned", "Prj1_closed", "Prj2_assigned" and "Prj2_solved".The export would be to a file 'KTD684.csv'(same as ID) where there is already headers available 'Date,Prj1_Assigned,Prj1_closed,Prj2_assigned,Prj2_solved'So far (as I am a non-programmer) I have not been able to draft this, but can one please be kind to guide me in:Finding the row with the element 'KTD684'.Selecting the values of the below from that row:['Date,Prj1_Assigned,Prj1_closed,Prj2_assigned,Prj2_solved']Appending the file with the ID name itself please('KTD684.csv')I need to perform this for 45 userIDs, and now with hiring in company, its 195. I tried to write excel macro(didn't work either), but I feel python is most reliable.I know I need to at least show the basic progress, but after over 2 months of trying to learn from someone, I'm still unable to find the element in this csv.
This is an ideal use-case for pandas:This will open the CSV, only select rows that are in your list (id_list), group by the values in the ID column and save individual CSV files for each unique ID. You just need to expand id_list to have the ids you are interested in.Extended example:Reading in the CSV results in a DataFrame object like this:If you just select KTD684 and GSL89D:The groupby operation groups on ID and export each unique ID to a CSV file resulting in:
If I understand your problem correctly; You need to read from 2 input files:1 containing the users IDs you are looking for 2 containing the project data related to usersIn that fashion something like this would find all the users you specify in 1 in file 2 and write them out to result.csvSepicify your search IDs in search_for.csv. Keep in mind that this  will revrite your result.csv every time you run it.For example, search_for.csv looks like this
Here's a pure python approach which reads the master .csv file with csv.DictReader, matches the ids, and appends the file data into a new or existing .csv file with csv.DictWriter():Which can be called like this:And produces the following KTD684.csv:


Answer URL
https://docs.python.org/3/library/csv.html#csv.DictReader
https://docs.python.org/3/library/csv.html#csv.DictWriter
