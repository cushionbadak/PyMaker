Natural Text
I am trying to have the list returned when I call upon the object in interactive mode. This is what keeps happening:
I think the methodology you may be looking for is documented here:https://docs.python.org/3/tutorial/classes.html#class-and-instance-variablesModified example code:The 'push' method appends items to the 'stack_list' when it's called.
The Python interactive shell prints the representation, not the string, so you need to implement a __repr__ method. But both __str__ and __repr__ should always return a string. So try:
I'd suggest first to override __repr__ instead of __str__ to match your goal, however below you can find both approaches for the class: Basically, what happened earlier you were triggering the representation of the object which is what you've called when you simply put s.To have it transform to, let's say, a string representation you could do:Analogously, you could do it for __repr__.A example of its execution:For deeper reference on the differences among them, you could check following thread Difference between __str__ and __repr__?
Instead of returning the 'self.stack' from the __str__() function, you can return the list as shown below:Output:
There are two things to note here:When the REPL evals an object, it uses its __repr__ method for presentation.Your __str__ method will cause errors because it does not return a string.After running your code, the following behavior can be observed:To fix these issues, implement __repr__, for example like this:Nowshows the content of s.stack. In addition, you can remove the __str__ method, because when printing, __repr__ will be called as a fallback when there's no __str__ implementation.If you want to keep __str__, make sure to modify it in order to return a str object, otherwise you'll get a TypeError as demonstrated above.A little more about __repr__:Ideally, the method should return a string such that when copy pasted into the interpreter, an equal object will be built. Since your __init__ method accepts no arguments, it's not possible here to display an informative string that would be evaluated as an instance of Stack and show the content of the stack at the same time. If you changed __init__ toyou could change __repr__ towhich would look like this when implemented:... eval'ing this string would create a Stack with the same content.While we're at it, consider implementing __eq__ for good measure...... such that:


Answer URL
https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables
