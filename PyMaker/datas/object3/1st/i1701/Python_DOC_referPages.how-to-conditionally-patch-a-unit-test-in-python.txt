Natural Text
I'm test a method which makes external API calls which are mocked using a patch decorator. However, I'd like to be able to set an environment variable, MAKE_EXTERNAL_REQUESTS, such that if it is truthy, the patch is not applied.Essentially, I'm looking to something similar to the skipIf and skipUnless decorators (cf. https://docs.python.org/3.7/library/unittest.html#skipping-tests-and-expected-failures), but like patchIf and patchUnless. As far as I can tell, though, no such functionality is built into patch. Should I write my own decorator?
You could write your own decorator that checks the environment variable and then calls the regular patch() if needed. You could also use the wraps argument in the regular patch() decorator.wraps: Item for the mock object to wrap. If wraps is not None then calling the Mock will pass the call through to the wrapped object (returning the real result). Attribute access on the mock will return a Mock object that wraps the corresponding attribute of the wrapped object (so attempting to access an attribute that doesnâ€™t exist will raise an AttributeError).I think that means you could check the environment variable before setting the return variable in your test. If you don't set a return value, then calls will be passed through to the wrapped object.
You could just manually monkey patch out the dependency you're trying to mock/fake. This is what the patch decorator is doing under the hood (it also unpatches for you at the end of the function).Note that when you assign to the given module attribute you're trying to patch over, that patch is live for the entire session of your interpreter. So if you just patch and don't unpatch, that patch will be live for other tests in your test suite.If you're doing it one time this might be nice as a quick/dirty solution, if it's many times you might want a decorator to do it.HTH.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#patch
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock
