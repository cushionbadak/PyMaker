Natural Text
I'm trying to get how many any character repeats in a word. The repetitions must be sequential. For example, the method with input "loooooveee" should return 6 (4 times 'o', 2 times 'e').I'm trying to implement string level functions and I can do it this way but, is there an easy way to do this? Regex, or some other sort of things?So far I tried this:And it returns 8 with "loooooveee".
Original question: order of repetition does not matterYou can subtract the number of unique letters by the number of total letters. set applied to a string will return a unique collection of letters.Or you can use collections.Counter, subtract 1 from each value, then sum:New question: repetitions must be sequentialYou can use itertools.groupby to group sequential identical characters:To avoid the nested sum calls, you can use itertools.islice:
You could use a regular expression if you want:This correctly yields 6 and makes use of the .span() function.The expression iswhich captures a word character (one of a-zA-Z0-9_) and tries to repeat it as often as possible.See a demo on regex101.com for the repeating pattern.If you want to match any character (that is, not only word characters), change your expression to:See another demo on regex101.com.
try this:EDIT:added total count of repetitions
Since it doesn't matter where the repetition is occurring or which characters are being repeated, you can make use of the set data structure provided in Python. It will discard the duplicate occurrences of any character or an object.Therefore, the solution would look something like this:This will give you the exact result.Also, make sure to look out for some edge cases, which you should as it is a good practice.
I think your code is comparing the wrong thingsYou start by finding the last character:Then you compare this to itself:Why not just run through the characters:This seems to work.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#sets
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/library/itertools.html#itertools.islice
