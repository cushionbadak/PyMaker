Natural Text
The first function is able to separate each letter of a string and list how many times that letter appears. For example:How do I get rldecode(rle): do the the complete opposite of rlencode(s) so that rldecode(rlencode(x)) == x returns True
You can use the fact that you can multiply a string by a number to repeat it and use `''.join() to bring the elements of the list together.To show the effect of string multiplication, I multiplied "a" by 5Using that in a comprehension will give you Then add in the ''.join() and you have your answer.So your function would be Also, if you would like to make your rlencode a little cleaner, you can simplify it a little bit by using enumerate to help you keep your position in the string and check if you're about to hit either a new character or the end of the string. You just have to increment the counter on each loop.
Use join:You can also use list comprehensions for your initial function.
You can use collections.Counter.elements():This outputs:
A simple, readable solution is to iterate over all of the tuples in the list returned by rlencode and construct a new string from each letter (and it's frequency) like so:
An answer that's easy to read but also accounts for ordering in the problem:I adapted it from the answer posted by @Brian CohanIt should be noted that the answer is computationally expensive because of .index() if letter grows really long as explained in this SO post


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.join
