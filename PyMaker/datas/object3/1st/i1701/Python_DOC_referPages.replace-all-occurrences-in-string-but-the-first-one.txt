Natural Text
Given the string:X did something. X found it to be good, and so X went home.I would like to replace all occurrences of X but the first one, with Y, such that the output string would look like:X did something. Y found it to be good, and so Y went home.I tried many regex patterns (based on https://vi.stackexchange.com/questions/10905/substitution-how-to-ignore-the-nth-first-occurrences-of-a-pattern) but failed to implement this with Python
str.partition splits a string into the part before a delimiter, the delimiter itself, and the part after, or the string and two empty strings if the delimiter doesnâ€™t exist. What that comes down to is:
You cold use the fact that re.sub uses a function:OutputThe idea is to use a function that keeps the count of seen X and then replace it when the count if above 1.
Another Option is to find the first one and only after replace all X occurrences.Finally, concat the beginning to the start of the sentence 
Here's a low tech solution without regex. :)Solution if 'Y' can exist in the original string:Demo:
Apply iteratively the regex after finding the first match over the remaining of the string. Or just using replace if it is possible.
We can use slicing to produce two string: first one up to (and including) the first element, and the next slice that contains the rest. We can then apply the replace part on that part, and merge these back:For example:
If you are still interested in using regular expression operations, you can use re.finditer(). This returns an iterator yielding MatchObject instances of each match case found. Casting the iterator to a list allows you to index into the MatchObject instances. In the function below, [1:] indicates to skip the first match.Run:Output:Side Note: This can also useful for ignoring any n^th occurrence of a pattern.


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.partition
https://docs.python.org/3/library/re.html#re.sub
