Natural Text
I have 2 different lists:The lengths of l1 and l2 will always be the same. They're in fact logical mappings - each item in l1 corresponds to a value in l2.I wanted to identify distinct elements in l1. I did that using set and list comprehension as follows:Here, the output will be:which is nothing but the first occurrence of every distinct element.Now, how do I build a list distl2 so that I get the output as the value in l2 that corresponds to the first occurrence's value i.e., distl1?
My idea is to use an OrderedDict to build a mapping of (key, value) pairs corresponding to the elements of l1 and l2 and then extract the values from that dict as a list.Note for Python 3.7+ users: regular dicts are guaranteed to remember their key insertion order, so you can omit importing the OrderedDict.
You can also do this:
Python 3.6+Dictionaries are ordered in Python 3.6+, as an implementation detail in 3.6 and confirmed in 3.7+. So in this case you can use dict with an iterable which ignores duplicates. To ignore duplicates, you can use the itertools unique_everseen recipe, also available via 3rd party more_itertools.unique_everseen or toolz.unique:Python 2.7You can use collections.OrderedDict instead of dict for Python 2.7, where dictionaries are not ordered:
The question doesn't say if you need to preserve the order. If not, list of unique values of l1 would be:And the corresponding values of l2:(where index() always returns the first occurrence)The resulting lists will keep your logical mapping, in the random order:EDIT:Another approach (no dictionaries, no index() in a loop, order preserved, 2.7 friendly):


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
