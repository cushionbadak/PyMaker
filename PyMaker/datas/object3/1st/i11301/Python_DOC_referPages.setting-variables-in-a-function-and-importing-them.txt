Natural Text
I'm writing an adventure game, and I'm writing functions in different files, such as the saveGame function and read function. There are 4 main files, all interconnected. The main one is agMain.py. My issue is that I've imported one of my other files agRead.py, and call the function within that called read(). Here is the data for the agRead.py:As you can see, it sets variables such as stage and level. My agMain files however:As you can see here, it uses the stage when it from the function in the code. But it can't. If I run this, it says stage is not defined, like I hadn't run the function. Is it possible to set variables in a function, use the function, and use the variables in creates in a different file?EDITAt the time I made this, I had no knowledge of classes, so I apologise. Everyone who is having a similar problem (sharing variables between functions) just make a class with the functions you want as methods. It saves a lot of hassle!
The variables are only visible from inside read.Contain the variables you want to use by doing something like this.agRead.pyand agMain.py
https://docs.python.org/3/tutorial/controlflow.html#defining-functions:More precisely, all variable assignments in a function store the value in the local symbol table; whereas variable references first look in the local symbol table, then in the local symbol tables of enclosing functions, then in the global symbol table, and finally in the table of built-in names. Thus, global variables cannot be directly assigned a value within a function (unless named in a global statement), although they may be referenced.Assigning to a variable in a function implicitly creates a local variable in that function, unless you've declared it as global.
By using chaining, you can reduce the number of lines used and increase readability.   
You need to understand a little more about scoping. Inside a function, names that are bound by an assignment statement are created in the local namespace of the function call. This namespace is created when the function call is made and initialised with the values of the parameters bound to their names. When the function returns (or raises an exception) the namespace is deleted, and the names are no longer available.Since you want to read lots of different values, consider creating an instance of a class. Instances also have a namespace, and names bound in that namespace will continue to be available until deleted or until the object is garbage collected.After @Merlin published his helpful answer I decided to update this answer to include a data-driven version, reproduced below (but not tested). Thinking about this might lead you to a function that can create/initialise several different types of object.Since execution speed is unlikely to be an issue I preferred an approach that was more generalised.
Yes it's possible, but variable would be available only after function execution:
Okay, so I have worked this out. Thanks to everyone who answered, but holdenweb and nightcrawler especially. I have created a class in the agRead.py, and put all of the variables as a  part of that class, before returning the class. Here is my agRead.py now:and my agMain.py:And this works perfectly, thank you everyone! This is an amazing community, and I hope to become a real member of it! Thanks again!


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#defining-functions
https://docs.python.org/3/reference/simple_stmts.html#global
