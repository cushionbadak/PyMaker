Natural Text
I want to unify two slightly different scripts.My idea was to keep the common part in a file (modX.py) and create two other files to gives two different entry points (A.py and B.py). The common part will be called through an 'import'.Now, I don't see how I can have specific parts in modX. One idea was to test a variable having different values in A.py and B.py.In modX.py :A.py :How can my_string get "spam" ?Altough putting all the common part in a function can be more pythonic, I would avoid refactoring modX.py too much if I can.
I've never figured out a way to pass arguments to a module on import â€” although it would be very useful. However there are ways to work around the limitation which make use of the fact that modules objects are cached in the sys.modules dictionary when they're first imported and can be replaced with an instance of a class. Note that attributes assigned to the class instance (self) effectively become the module's attributes after it's stored in sys.modules.Here's how that could be used in your example:modX.pyA.pyB.py
The reason that it is not work is because modX.globals() is different object the A.globals()You do it like that:In modX.py :A.py :You can also try to use at inspect module, maybe you find the way with that. Tell us if it help you.


Answer URL
https://docs.python.org/3/library/inspect.html
