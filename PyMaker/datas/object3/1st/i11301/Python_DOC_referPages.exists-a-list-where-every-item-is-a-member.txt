Natural Text
I'm currently trying to write an abstraction for some Spark Streaming jobs that each have a portion of code which the the same between all of them (hence the need for an abstraction). The format of each job is in this format:There is always a format_record_keys_for_salesforce map stage and always a dStream.map(self.OUTPUT.project_row) stage. The problem comes from the first two filter()s. There is almost always the two filter stages in in each job however sometimes the job does not require it. I would rather have the filters be redundant and do nothing but return True than have a dev have to write extra code. So, how can I write a list where any arbitrary value is a member of it? We do not know the values beforehand, only that it is a member of the list.Kind of like: Is this possible or will I have to remove those stages from my abstraction and leave it up to the dev writing to job to decide whether they need a filter or not?
If I understand you correctly, you need a list-like object, claiming that it contains any object.You need to define a list-like class.The simplest solution I can think about is a dirty hack:then  for any value assigned to anyValue:
If I understand correctly, you just want to mock the __contains__ operator. So maybe something like:


Answer URL
https://docs.python.org/3/reference/datamodel.html#emulating-container-types
