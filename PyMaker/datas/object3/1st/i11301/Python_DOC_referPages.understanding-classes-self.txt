Natural Text
This question already has an answer here:What is the purpose of self?                    19 answers                In the following example employee is not used in the __init__ function, but we used it in the add_employee function calling self.employee.append(). Why is that? Why did we use self.employee.append() instead of employee.append() ? I thought we only use self for variables in the __init__ function.
The employee object is a class variable, not an instance variable. This means it is shared across all instances of that class. You can access it with classname.classvariablename or instancename.classvariablename. If you reassign an instance's version of it with something like instancename.classvariablename = newvalue, that instance will have a new instance variable of that name that masks its access to the class variable with the self reference (i.e., you won't be able to do instancename.classvariablename to get the class variable), but other instances - and the class - will still be able to (i.e., classname.classvariable will still work, and otherinstancename.classvariable will still point to that class variable). The following example demonstrates this.
employee, __init__, and add_employee are just attributes of the class Workers.employee is an attribute being a list, and __init__ is another attribute, being a method.Also from the [def documentation](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-funcdef):A function definition is an executable statement. Its execution binds the function name in the current local namespace to a function object (a wrapper around the executable code for the function).so employees and __init__ and all other methods are really the same: names in a namespaces.See also https://docs.python.org/3/tutorial/classes.html#class-objects


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#grammar-token-funcdef
https://docs.python.org/3/tutorial/classes.html#class-objects
