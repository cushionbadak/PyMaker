Natural Text
Most of the info I found was not in python>pandas>dataframe hence the question.I want to transform an integer between 1 and 12 into an abbrieviated month name.I have a df which looks like:I want the df to look like this:
You can do this efficiently with combining calendar.month_abbr and df[col].apply()
One way of doing that is with the apply method in the dataframe but, to do that, you need a map to convert the months. You could either do that with a function / dictionary or with Python's own datetime.With the datetime it would be something like:In a simillar way, you could build your own map for custom names. It would look like this:Obviously, you don't need to define this functions explicitly and could use a lambda directly in the apply method.
You can do this easily with a column apply.
Use strptime and lambda function for this:
Since the abbreviated month names is the first three letters of their full names, we could first convert the Month column to datetime and then use dt.month_name() to get the full month name and finally use str.slice() method to get the first three letters, all using pandas and only in one line of code:
Having tested all of these on a large dataset, I have found the following to be fastest:
The calendar module is useful, but calendar.month_abbr is array-like: it cannot be used directly in a vectorised fashion. For an efficient mapping, you can construct a dictionary and then use pd.Series.map:Performance benchmarking shows a ~130x performance differential:
Reference:http://strftime.org/


Answer URL
https://docs.python.org/3/library/calendar.html
https://docs.python.org/3/library/calendar.html#calendar.month_abbr
