Natural Text
I have 2 lists of ordered times which are the start/stop times for ServiceA and ServiceB, respectively. I want to combine the lists in one list containing the start and stop times (in order) of when at least 1 of the services was running. (Both services always start after 00:01:00 and stop before 23:59:00.)The code below does not produce the desired results. After numerous attempts that accounted for most but not all possible cases, I'm posting what I have currently. The lists could be vastly different, for example there may be no overlap or complete overlap between start/stop times of the 2 services.
You could do this without a single for-loop by using itertools.reduce from the standard library to do the heavy lifting. Some consider this to be more idiomatic (except Guido of course who doesn't like the reduce function so much he chose to remove it from Python's prelude).The output is, as expected,By testing with the timelike values in the provided example:this also yields the desired answer of
Breaking down the problemYour code can be more readable if you break it down into functions and plan before coding.Your problem can be broken down into smaller manageable parts:Create a function that returns the total uptime of two timings.Sort the timings in aList and bList in ascending order Compare the first two timings of aList and bList to get the total uptime for the first two timings.4a. If it returns 4 timings, the timings given are disjoint. Take the last two timings and compare with the next two in aList.4b. If not, the timings are connected. Take the two timings and compare with the next two and compare with the next two in aList.With the results from 4, compare the timings in bList in a similar fashion as in 4.Repeat until end of the list.The problem, after reading through your code, seems to be that it is too unclear what needs to be done (step by step).Solving the problem1. Create a function that returns the total uptime of two timings.The timings will have these possible cases:With that in mind, you can go ahead and create the code for it.2. Sort the timings in aList and bList in ascending order.This can be done by converting all your timings to be stored as tuples, sort it, then remove the tuples.3-6. The recursive functionYou would see the last step includes repetition of the same process. This usually hints that a recursive function will do the job.Using all the functions as mentioned above, here is the recursive function:In your test case that you gave in the comments, it will returnwhen passed in


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
