Natural Text
How can I create a zip archive of a directory structure in Python? 
As others have pointed out, you should use zipfile. The documentation tells you what functions are available, but doesn't really explain how you can use them to zip an entire directory. I think it's easiest to explain with some example code:Adapted from: http://www.devshed.com/c/a/Python/Python-UnZipped/
The easiest way is to use shutil.make_archive. It supports both zip and tar formats.If you need to do something more complicated than zipping the whole directory (such as skipping certain files), then you'll need to dig into the zipfile module as others have suggested.
To add the contents of mydirectory to a new zip file, including all files and subdirectories:
How can I create a zip archive of a directory structure in Python?In a Python scriptIn Python 2.7+, shutil has a make_archive function.Here the zipped archive will be named zipfile_name.zip. If base_dir is farther down from root_dir it will exclude files not in the base_dir, but still archive the files in the parent dirs up to the root_dir.I did have an issue testing this on Cygwin with 2.7 - it wants a root_dir argument, for cwd:Using Python from the shellYou can do this with Python from the shell also using the zipfile module:Where zipname is the name of the destination file you want (add .zip if you want it, it won't do it automatically) and sourcedir is the path to the directory.Zipping up Python (or just don't want parent dir):If you're trying to zip up a python package with a __init__.py and __main__.py, and you don't want the parent dir, it's Andwould run the package. (Note that you can't run subpackages as the entry point from a zipped archive.)Zipping a Python app:If you have python3.5+, and specifically want to zip up a Python package, use zipapp:
This function will recursively zip up a directory tree, compressing the files, and recording the correct relative filenames in the archive. The archive entries are the same as those generated by zip -r output.zip source_dir.
Use shutil, which is part of python standard library set. Using shutil is so simple(see code below): 1st arg: Filename of resultant zip/tar file, 2nd arg: zip/tar, 3rd arg: dir_nameCode:
For adding compression to the resulting zip file, check out this link.You need to change:to 
I've made some changes to code given by Mark Byers. Below function will also adds empty directories if you have them. Examples should make it more clear what is the path added to the zip.Above is a simple function that should work for simple cases. You can find more elegant class in my Gist:https://gist.github.com/Eccenux/17526123107ca0ac28e6
You probably want to look at the zipfile module; there's documentation at http://docs.python.org/library/zipfile.html.You may also want os.walk() to index the directory structure.
I have another code example that may help, using python3, pathlib and zipfile.It should work in any OS.
Here is a variation on the answer given by Nux that works for me:
Try the below one .it worked for me.  
If you want a functionality like the compress folder of any common graphical file manager you can use the following code, it uses the zipfile module. Using this code you will have the zip file with the path as its root folder. 
Modern Python (3.6+) using the pathlib module for concise OOP-like handling of paths, and pathlib.Path.rglob() for recursive globbing. As far as I can tell, this is equivalent to George V. Reilly's answer: zips with compression, the topmost element is a directory, keeps empty dirs, uses relative paths. Note: as optional type hints indicate, zip_name can't be a Path object (would be fixed in 3.6.2+).
To give more flexibility, e.g. select directory/file by name use:For a file tree:You can e.g. select only dir4 and root.txt:Or just listdir in script invocation directory and add everything from there:
Here's a modern approach, using pathlib, and a context manager. Puts the files directly in the zip, rather than in a subfolder.
I prepared a function by consolidating Mark Byers' solution with Reimund and Morten Zilmer's comments (relative path and including empty directories). As a best practice, with is used in ZipFile's file construction.  The function also prepares a default zip file name with the zipped directory name and '.zip' extension. Therefore, it works with only one argument: the source directory to be zipped.

Well, after reading the suggestions I came up with a very similar way that works with 2.7.x without creating "funny" directory names (absolute-like names), and will only create the specified folder inside the zip.Or just in case you needed your zip to contain a folder inside with the contents of the selected directory.
Function to create zip file. 


Answer URL
https://docs.python.org/3/library/shutil.html#shutil.make_archive
https://docs.python.org/3/library/zipfile.html
https://docs.python.org/3/library/zipapp.html
