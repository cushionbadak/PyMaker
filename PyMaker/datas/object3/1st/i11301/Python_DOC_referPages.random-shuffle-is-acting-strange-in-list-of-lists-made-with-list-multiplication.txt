Natural Text
My createIndividual function is trying to take a list of lists of lists called courses, and then add members of a global list variable (PEOPLE) to it randomly. The code is:I ran this function a bunch of times, trying to get lots of copies with different results. However, each time it created the exact same results for the course variable within each individual. The results differed between runs of the program, but were the same within a single run.An example value of the courses argument would be:The innermost "lists" are actually Table() classes, which have a maximum value defined, but in all other ways act like lists. The maximum attribute of each Table is 3.The list of PEOPLE would be:The first individual created was:The second individual created was:These continue with apparent randomness, but each course in the individual is always identical to the other courses within the same individual, regardless of how I change the parameters. 
This question really needs more detail to answer it with confidence, but since there's a common error that could produce this weird result (and since I wasn't able to reproduce it any other way)...I think the problem is not in your createIndividual function, but in the data structure you're feeding it.  Here's a bit of my main function that produced exactly the random output you expected:Output:To reproduce your problem, I had to create courses using the list-multiplication syntax, which doesn't do what most beginners (and some tutorials) think it does:4.6.1. Common Sequence Operations[table omitted]Notes:[...]  Note that items in the sequence s are not copied; they are referenced multiple times. This often haunts new Python programmers; [...]Further explanation is available in the FAQ entry How do I create a multidimensional list?.I'm guessing somewhere in your code, you did something like this:Output using the aliased lists:Since both courses[0] and courses[1] point to the same list, two weird things happen.  First, the contents of the "two" courses will be the same, as you've already noticed.  Each update seems to add a pair of identical Tables to two different lists, although it's really just adding one Table to one list... and then printing that list twice...  You can see this in action by adding an extra pprint to createIndividual:Second, notice how the last three "updates" don't actually change anything?  Something should have failed when you tried to add 18 values to only 9 slots.  Unfortunately, the maximum field that protects you from over-filling a Table also saves you from the error that could have tipped you off earlier.  From createIndividual:After the "first" (really, the only) three Tables are filled, they're all at maximum length, so neither individual or myPeople will change again.Contrast the list-comprehension version in my main, which creates six different Table objects, like you'd expect:
You have to use deepcopy because your lists store another lists and you have to copy them too. Look for examples: http://www.python-course.eu/deep_copy.php


Answer URL
https://docs.python.org/3/library/stdtypes.html#typesseq-common
https://docs.python.org/3/faq/programming.html#faq-multidimensional-list
https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types
