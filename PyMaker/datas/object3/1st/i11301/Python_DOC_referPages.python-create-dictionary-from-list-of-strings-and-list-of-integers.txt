Natural Text
I have two lists: one contain the name of pages like ['Barrel - Part 1', 'Petit Trees (sketch)', 'Island (sketch)'] and the other list contain the corresponding page number like [1, 2, 3]I want to create a dictionary from two lists such that the splitted words from list one as a key and corresponding value from list two as value. And if key already is in dictionary then append value to it.For the above example I want a dictionary like:
You might be surprised that the results are out of order, but that's because dicts in python don't have an order. If you want them ordered you'll need to use something other than a vanilla dict.This outputs:
You can use zip() to loop through the two lists simultaneously. If you don't need the dict to be in order, it's much easier to use collections.defaultdict() than a normal dictionary:Although since your pages is just a list of subsequent numbers, it's probably better to use enumerate so you don't have to update the pages list every time you make changes:Now if you do need the dict to be in order, you can use OrderedDict combined with @Keatinge's answer:Or if you only need the output to be sorted, use the earlier defaultdict solution and throw in sorted() when outputting the values:Finally, you could use an OrderedDefaultDict, but most would argue that this is a bit of an overkill for such a simple program.
List comprehension approach. Basically double iteration in list comprehension is used here (look more pythonic to me). Another way of iterating would be using itertools.chain. And to convert the a list with duplicated keys, if the order is not a concern. Then coolections.defaultdict would be quite useful. Though pure base python approach would also work, and it will be something like this:


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/functions.html#enumerate
https://docs.python.org/3/library/collections.html#collections.OrderedDict
https://docs.python.org/3/library/functions.html#sorted
