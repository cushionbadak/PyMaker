Natural Text
So the example code is very basic:This works well. But adding autospec keyword to the mock:causes additional argument to be passed to the side_effect callable, which obviously results in error:What I don't uderstand, is why autospeccing gives additional argument. I've read the docs, but still can't find the explanation of this behaviour.Theoretically, it's written that In addition mocked functions / methods have the same call signature as the original so they raise a TypeError if they are called incorrectly.so it'd be okay (is_valid has self argument, which is probably what is being passed here), but on the other hand it's also written about side_effect thatThe function is called with the same arguments as the mock, and unless it returns DEFAULT, the return value of this function is used as the return value.So as far as I understand, side_effect should be called with the self argument even without autospeccing. But it is not.is called with the same arguments as the mockSo if someone could explain it to me, preferably quoting the docs, I'd be thankful.
You are misunderstanding the documentation.  Without autospec, the side_effect that is being called is literally as is without inspecting the original declaration.  Let's create a better minimum example to demonstrate this issue.Now your original test should work about the same with some adjustmentsRunning the test as is will cause Book is valid be printed to stdout, even though we haven't gone through the dance to set the Book.valid flag to true, as the self.form.is_valid being called in Client.post is replaced with the lambda which is invoked.  We can see this through a debugger:Also within the frame of the Client.post method call, it's not a bound method (we will get back to this later)So hmm, we might have a problem here: the side_effect could literally be any callable that could be different to what reality is, in our case the is_valid function signature (that is the argument list) could be different to the mock we provide.  What if the BookForm.is_valid method was modified to take in an additional argument:Rerun our test... and you will see that our test has passed, even though Client.post is still calling BookForm.is_valid without any arguments.  Your product will fail in production even though your test has passed.  This is why autospec argument is introduced, and we will apply that in our second test without replacing the callable through side_effect:This now happens when calling the functionWhich is what you want and what autospec intends to provide - a check before the mocks are called, andIn addition mocked functions / methods have the same call signature as the original so they raise a TypeError if they are called incorrectly.So we have to fix the Client.post method by providing an authcode greater than 0.Since our test didn't mock the is_valid function via the side_effect callable, the method will end up printing Book is invalid.Now if we want to provide the side_effect, it will have to match the same signatureBook is valid will now be printed again.  Going through the debugger to inspect that autospec'd and mocked is_valid object within the frame of the Client.post method callAh, somehow the method signature is not a simple MagicMock object (recall the <MagicMock name='is_valid' id='140554947029032'> noted previously) and is a properly bound method, which means the self argument is now passed into the mock, solving this:side_effect: A function to be called whenever the Mock is called. See the side_effect attribute. Useful for raising exceptions or dynamically changing return values. The function is called with the same arguments as the mock...The "same arguments as the mock" in this case means the same as whatever that was passed into the mock. To reiterate, the first case the self.form.is_valid was replaced with a naked, unbounded callable so self is never passed; and in the second case the callable is now bound to self, both the self AND authcode will be passed into the side_effect callable - just as what would happen in the real call. This should reconciled the perceived misbehavior of interactions with autospec=True for mock.patch.object and manually defined side_effect callable for a mock.


Answer URL
https://docs.python.org/3/library/unittest.mock.html
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect
