Natural Text
Up to now I do this:If the timeout is hit, I get an exception:I would like to handle this gracefully:The output for all hosts I could reach should go into rets and all hosts which timed out should go into a separate list.How could this be done?
As far as I know, you can't, or at least not with map_async. map_async is a convenience method there to solve a particular problem for a particular use case, and that doesn't match up with what you've got because you want more fine control.However, you can still do it, you just need to use the more fine-grained methods in the multiprocessing module. In particular, you can add jobs to your pool on the fly by using apply_async, which gives you much more control over how to handle success and failure of individual tasks. Below is a pretty minimal example that I think does what you want:This runs 10 jobs that print a line, sleep, then print another line. The first sleeps for 0 seconds, the next for 1, the next 2 etc. We timeout the pool after 5 seconds, and so we expect 5 tasks to have finished and 5 tasks to have timed out.Be aware that I have not stopped the tasks that are still running, and so in the real world they may continue and finish in the time it takes to print the results. You'll have to work out how much you care about that / what to do about it.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.AsyncResult
