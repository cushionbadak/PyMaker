Natural Text
I have a function foo(par1) with an internal function call, (db_fetch) which is a database call using SQLAlchemy to get a stored value as below:I am currently creating a db pytest fixture and loading test data every time I run the test suite in order to provide data for the db_fetch function call. How can i convert the test to use dummy data for the db_fetch function call to speed up the test run?
You can either:1- use dependency injection (change the way your function is defined, so that it is easier to test)In normal code, call it like this:instead of:And in unit tests, call it like this:And so, during the unit tests, the value will always be 42, instead of the real database value.2- mock the call to fetch_functionIn your unit test, instead of calling :You should call:Instead of 'fetch_function', you may have to write 'my_module.fetch_function', if fetch_function is imported from a module.See the documentation: https://docs.python.org/3/library/unittest.mock-examples.html There are several ways of doing the mock, and several libraries that can do the job.3- Make a pytest fixture so that every unit test is run on a test-specific memory database, that contains only test data.This is more tricky to set up. 
This is called stubbing the function and it is pretty easy in python.The way you can achieve this is by:


Answer URL
https://docs.python.org/3/library/unittest.mock-examples.html
https://docs.python.org/3/library/unittest.mock.html
