Natural Text
I've found this statement in one of the answers to this question. What does it mean? I would have no problem if the statement were "Python never implicitly copies dictionary objects".  I believe tuples, lists, sets etc are  considered  "object" in python but the problem with dictionary as described in the question doesn't arise with them. 
The statement in the linked answer is broader than it should be. Implicit copies are rare in Python, and in the cases where they happen, it is arguable whether Python is performing the implicit copy, but they happen.What is definitely true is that the default rules of name assignment do not involve a copy. By default,will not copy the object being assigned to a. This default can be overridden by a custom local namespace object, which can happen when using exec or a metaclass with a __prepare__ method, but doing so is extremely rare.As for cases where implicit copies do happen, the first that comes to mind is that the multiprocessing standard library module performs implicit copies all over the place, which is one of the reasons that multiprocessing causes a lot of confusion. Assignments other than name assignment may also involve copies; a.b = c, a[b] = c, and a[b:c] = d may all involve copies, depending on what a is. a[b:c] = d is particularly likely to involve copying d's data, although it will usually not involve producing an object that is a copy of d.
python has a lot of difficult types. they are divide on two groups:1) not change - integer, string, tuple2) change - list, dictionaryfor example:- not changefor this 'x' python create new object like 'Int' with link in memory 0x0001f0apython create new link in memory like 0x1003c00- changefor this 'x' python create new object like 'Int' with link in memory 0x0001f0apython copy link from 'x' to 'y' 


Answer URL
https://docs.python.org/3/library/multiprocessing.html
https://docs.python.org/3/faq/programming.html#why-did-changing-list-y-also-change-list-x
