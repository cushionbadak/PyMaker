Natural Text
I am programming a lotto simulator where the code generates 6 random unique numbers out of 45 for both the winning numbers and 1000 players, both of which are stored as lists.What I would like to do is calculate the number of winners per division. So 1st division if all 6 winning numbers equal to the 6 numbers the player has, 2nd division if any 5 of the 6 winning numbers equal to the 5 of the 6 numbers the player has, 3rd division if any 4 of the 6 winning numbers equal to the 4 of the 6 numbers the player has, so on.Currently my code only looks for 1st division and does not count how many times a match (if any) of 6/6 is found. This is where I get stuck how do I do this while also needing to find matches of 5/6, 4/6, 3/6.I am using a binary search algorithm to compare the winning numbers against the numbers the player has.Thank you for the help.
This seems like a better job for sets. You get easier and efficient calculation of intersections for free.That tells you what "division" that entry is in. Deal with it in whatever manner is most appropriate for your overall goal.Obviously if you have control over how winNum and the elements of lotto are generated, it would be more efficient to start with sets in the first place.


Answer URL
https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset
