Natural Text
I have been using asyncio for concurrency, however I have run into a problem. I have the need to schedule a task with asyncio but it is blocking and so I would like to execute it in an executor using threadpool from concurrent.futures.I have seen example like this, that schedule tasks:and like this that run tasks in executors:But how can I schedule a blocking task to run in executor?
run_in_executor returns a future, so you can't use it with call_at, which requires an ordinary function. However, you can easily postpone execution using asyncio.sleep():This has the advantage that the task created by create_task can be canceled during the sleep. Also, you can return a useful value from my_task() and obtain it using await taskobj, calling taskobj.result(), or loop.run_until_complete(taskobj).


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.sleep
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.create_task
https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.cancel
https://docs.python.org/3/library/asyncio-task.html#asyncio.Future.result
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.run_until_complete
