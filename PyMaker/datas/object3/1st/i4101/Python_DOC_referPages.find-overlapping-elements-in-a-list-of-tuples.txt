Natural Text
From my understanding of the intersection function, it finds complete overlap between elements in a list. For example:would yield:However, suppose my list of tuples are set up as this:Where there's an overlap in 2 elements of the 2nd tuple in tup_1 and 1st tuple in tup_2. If I want to python to return these 2 tuples: (4,5,5) and (4,5,6), is there an easier way than this nested for loop (below)?EDIT: For this case, suppose order matters and suppose the tuples contain 5 elements:And I would like to find the tuples that intersect with each other in their respective first 4 elements. So the result should be:How would the code change to accommodate this?
If you want to return all the pairs of "overlapping" tuples there's no way around comparing all the pairs, i.e. a quadratic algorithm. But you could make the code a bit more elegant using a list comprehension, product for the combinations and zip and sum for the comparison:Note: This checks whether two tuples have the same element in at least two positions, i.e. order matters. If order should not matter, you can convert a and b to set instead and check the size of their intersection, but that might fail for repeated numbers, i.e. the intersection of (1,1,2) and (1,1,3) would just be 1 instead of 2.If you only want to match the first two, or first two and last two elements, you can compare slices of the tuples in an accordant disjunction:
This is one way using a list comprehension. The logic as written checks for an overlap of at least 2 elements.Note that if there is no overlap you will be left with the one element of tup_2, but that can be trivially identified.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
