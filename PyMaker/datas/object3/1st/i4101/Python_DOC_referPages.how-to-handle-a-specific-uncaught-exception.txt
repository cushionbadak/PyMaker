Natural Text
I would like to handle one specific exception in my script in a single place without resorting to a try/exception everytime*. I was hoping that the code below would do this:The idea was that ValueError would be handled "manually" and the script would continue running (return to the script). For any other error (ZeroDivisionError in the case above), the normal traceback and script crash would ensue.What happens is The documentation mentions that (emphasis mine)When an exception is raised and uncaught, the interpreter calls  sys.excepthook with three arguments, the exception class, exception  instance, and a traceback object. In an interactive session this  happens just before control is returned to the prompt; in a Python  program this happens just before the program exits.which would mean that when I am in handler() it is already too late as the script has decided to die anyway and my only possibility is to influence how the traceback will look like.Is there a way to ignore a specific exception globally in a script ?* this is for a debugging context where the exception would normally be raised and crash the script (in production) but in some specific cases (a dev platform for instance), this specific exception needs to just be discarded. Otherwise I would have put a try/exception clause everywhere where the issue could arise.
One way to do it is to use contextlib.suppress and have a global tuple of suppressed Exceptions:And then anywhere where the error might occure you just wrap it in with suppress(*suppressed):And then in production you just change suppressed to ():I think this is the best you can do. You can't ignore the exception completly globally, but you can make it so you only have to change on place. 


Answer URL
https://docs.python.org/3/library/sys.html#sys.excepthook
https://docs.python.org/3/library/contextlib.html#contextlib.suppress
