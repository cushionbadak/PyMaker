Natural Text
I'm wondering if I have some python scripts in a folder that will have common functionality like method names but different functionality can by dynamically imported. These python scripts will be in a single folder but I don't know how many their will be. I'd like to have a script look in the folder, get a list of the scripts and create objects for each of them.
What you're describing is what's usually called a plugin system.For Python 3.4 and later, there's a standard recipe for importing a source file.The only things left to do are (a) enumerating all the source files in a specified directory, and (b) calling some factory/register/whatever function on each module after you've loaded it.So:The plugin_factory is just a function or class that "creates an object" for each module. You can call it whatever you want. Often, either every plugin provides a class that's a subclass of (or duck-types as) some type that you defined, or provides a function that returns an instance of some class that you defined. But in really simple cases, you can just use the module itself as the plugin object. In that case, of course, the last line just becomes plugins.append(module).And obviously, if you want to access the plugins by name rather than just iterating over them (and they don't have some name attribute), you'll want to store them in a dict rather than a list.And of course you can add them to sys.modules, as in the recipe in the docs, but usually you don't need that.
Suppose we have three files in current dir.a.py:b.py:c.py:And the following main.py script which scans current directory for python files, and imports them as needed:In Python >=3.4 you can use the importlib module, and avoid __import__, whose use is discouraged in the python docs:


Answer URL
https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly
https://docs.python.org/3/library/functions.html#__import__
