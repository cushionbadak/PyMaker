Natural Text
I have a list of tuples that can be understood as key-value pairs, where a key can appear several times, possibly with different values, for exampleI now want to get a list of tuples with the highest value for each key, i.e.The order of the keys is irrelevant.How do I do that in an efficient way?
Sort them and then cast to a dictionary and take the items again from it:The idea is that the key-value pairs will get updated in ascending order when transforming to a dictionary filtering the lowest values for each key, then you just have to take it as tuples.
At its core, this problem is essentially about grouping the tuples based on their first element and then keeping only the maximum of each group.Grouping can be done easily with a defaultdict. A detailed explanation of grouping with defaultdicts can be found in my answer here. In your case, we group the tuples by their first element and then use the max function to find the tuple with the largest number.In your particular case, we can optimize the code a little bit by storing only the maximum 2nd element in the dict, rather than storing a list of all tuples and finding the maximum at the end:This keeps the memory footprint to a minimum, but only works for tuples with exactly 2 elements.This has a number of advantages over Netwave's solution:It's more readable. Anyone who sees a defaultdict being instantiated knows that it'll be used to group data, and the use of the max function makes it easy to understand which tuples are kept. Netwave's one-liner is clever, but clever solutions are rarely easy to read.Since the data doesn't have to be sorted, this runs in linear O(n) time instead of O(n log n).


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/functions.html#max
