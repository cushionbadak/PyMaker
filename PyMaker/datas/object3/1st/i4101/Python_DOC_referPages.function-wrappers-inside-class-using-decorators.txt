Natural Text
I have a class which interacts with a database and so there are repetitive actions (establish session, commit, close session) before and after each member method of the class.As follows:What is an idiomatic way to abstract out the repeated session calls with a function wrapper?I would prefer to do this with decorators by declaring a private _Decorators class inside UserDatabaseManager and implementing the wrapper function inside there, but then such class won't be able to access the self.engine instance attribute of the outer class.
A simple (and in my opinion, the most idiomatic) way of doing this is to wrap the setup/teardown boilerplate code in a context manager using contextlib.contextmanager. You then simply use a with statement in the functions that do the work (rather than trying to wrap that function itself). For example:
You can create a simple function outside the class to wrap each method:Generally, setup and tear-down operations like the above are best put in a contextmanager:


Answer URL
https://docs.python.org/3/reference/datamodel.html#context-managers
https://docs.python.org/3/library/contextlib.html
https://docs.python.org/3/reference/compound_stmts.html#the-with-statement
