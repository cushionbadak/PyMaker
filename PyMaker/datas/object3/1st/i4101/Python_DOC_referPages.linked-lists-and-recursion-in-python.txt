Natural Text
I am newbie in programming and starting out in Python. My question is regarding linked  lists, I wrote a class for the linked list, what I need to do is to have a function with an input as a reference pointing towards the head of the list. 'linked_list.head' as I understand, with linked_list being the name of the list in question. Specifically using recursion, I am trying to find the length of the list as the output of this function. Here's my code, I don't quite understand how I could move to the next node and return the number of nodes with recursion in this case. 
Recursion is a functional heritage and so using it with functional style will yield the best results. In your program, you have implemented a linked list using imperative style mutable nodes- that is, the values of data and next can change over time. While this might feel like an intuitive approach, I'd like to focus on an immutable implementation that frees us from crippling state complexity. In this answer, we will implement all linked list functions using recursive forms expressed with functional styles.We start with simple node and linked_list classes. This time we skip creating get_* and set_* functions as you have done. There's other ways to do this kind of thing in Python as we'll see in a minuteNext we define primitive properties for our list: is_empty, head, and tailNow the use of a node is completely abstracted, and we can write higher level list behaviors by using our new propertiesAbove, we see it's very easy to talk about our list thru use of its properties. Before we go further, let's see how we can construct lists and visualize them using print. For object-to-string conversion, we use __str__Remember, because we've built an immutable linked list, add_first does not change the list it was called uponBefore we move on, let's make it easier to construct our linked lists. We add a static build function which allows us to construct a list of a varying number of inputsNow, let's look at your remove_first and remove_last functions nowAnd node_numberAnd a add_last freebieFull program demonstration at repl.it
I'd set it up where the length function is actually part of the Node class rather than the Linked_List class.  The Linked_List class would have a length function too, but all it would do is to call the length function of the head node of the list.Then, each node would just return the length of it's next instance plus 1.
The recursion should have a base case where the code checks if the next attribute is None. If so, the function returns the current count. If not, the counter is incremented and the function length is called as a method of the next attribute, to be able to continue the progression of the recursion along the links, which can be written as:First, below is a simpler linked list class construct for demonstration:Output:


Answer URL
https://docs.python.org/3/library/functions.html#property
https://docs.python.org/3/reference/datamodel.html#object.__str__
https://docs.python.org/3/library/functions.html#staticmethod
