Natural Text
New to python, so I have this setup where I file gets created, and I have to add an extension number.  The first file will have an extension number of 1 since being the first.  A second file gets created and the extension number will increment, so it will be 2.  So each files gets created, the extension number will increment.Now, if it's a different day then that extension number will reset to 1, and it will increment if new files are created.  So each day, the extension number needs to be reset to 1I have set up this function but it will not work because the now and counter variable will get overwritten.  So will need these variables somewhere else.  Just wondering if there is a work around this process or is there a  python library that can handle this type of situation.  Your suggestions will be appreciated!
You could assign the counter outside of that function and send it as a parameter, that way you don't overwrite it every single time you call your function, like so:and leave your function like this:
When you need to preserve state across function calls that is a hint that you need a custom object. You could use global variables as well but encapsulating the state inside an object is usually better.Here I implement a class Counter that takes care of everything. It has a __next__ method that returns the next number so the calling code only needs to call next(counter). It also has an __iter__ method so it can be used in for loops.You need to provide a function to get the current (date_getter) time when creating an instance. Besides making the code more testable this allows you to decide if you want to use utc time, local time, the first day of the week so the counter resets each week, etc.This is the code I used to test it. Note that I am using as date_getter a function that actually returns whatever date I want. I do not want to wait until 23:59 to run the test. Instead I tell the function which date to return (including going backwards in time) and see how the counter behaves.Here is a more realistic way in which yo could use this class:Print the first couple of numbers:Output:Using a loop to add numbers to names in a list:Output:Now I realize that Counter is a really bad choice because there is already a completely unrelated Counter class in the standard library. But I cannot think of a better name right now so I will leave it as is.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
