Natural Text
Suppose you want to constrain a type variable to implement a certain interface. You might write something like so:Why is Python unhappy about this use of type constraints? PEP 484 and the Python source code are unhelpful in this regard.Note: in my particular case I am interested in constraining a type variable to implement an abstract base class, but the principle is the same.
You’re looking for bound:From the docs:a type variable may specify an upper bound using bound=<type>. This means that an actual type substituted (explicitly or implicitly) for the type variable must be a subclass of the boundary type, see PEP 484.TypeVar(name, *args) means that the type has to be one of args, so all instances of T would just be replaceable by Callable if T = TypeVar('T', Callable) were allowed.You should be able to see the difference here (though I didn’t actually try it, heh):


Answer URL
https://docs.python.org/3/library/typing.html#typing.TypeVar
