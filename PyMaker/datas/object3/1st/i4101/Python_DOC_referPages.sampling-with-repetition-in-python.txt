Natural Text
I have a string with 50ish elements, I need to randomize this and generate a much longer string, I found random.sample() to only pick unique elements, which is great but not fit for my purpose, is there a way to allow repetitions in Python or do I need to manyally build a cycle?
You can use numpy.random.choice. It has an argument to specify how many samples you want, and an argument to specify whether you want replacement. Something like the following should work.If your input is a string, say something like my_string = 'abc', you can use:Then get a new string out of it with:PerformanceTiming the three answers so far and random.choices from the comments (skipping the ''.join part since we all used it) producing 1000 samples from the string 'abc', we get:numpy.random.choice([char for char in 'abc'], size=1000, replace=True):34.1 µs ± 213 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)random.choices('abc', k=1000)269 µs ± 4.27 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)[random.choice('abc') for x in range(1000)]:924 µs ± 10.4 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)[random.sample('abc',1)[0] for _ in range(1000)]:4.32 ms ± 67.3 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)Numpy is fastest by far. If you put the ''.join parts in there, you actually see numpy and random.choices neck and neck, with both being three times faster than the next fastest for this example.
You could do something like this:
Not saying this is the most effective (you should prob. use choice here) ... but consider it:
I have found this, I forgot to mention I was on Python 3.6:Using k=50 named argument will generate repeated elements.


Answer URL
https://docs.python.org/3/library/random.html#random.choices
