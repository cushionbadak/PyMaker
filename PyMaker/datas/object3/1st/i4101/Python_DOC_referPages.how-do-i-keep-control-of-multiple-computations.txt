Natural Text
I assume that asyncio.sleep(0) is a (standard?) way for a coroutine to let other coroutines have a run. But it seems my coroutine can't have any subroutine structure (and give up control below the top level).What's the best way to allow a complex bit of code to run while other complex codes are running, so that when one completes I can kill the others?
You mentioned "computations" in the topic, I would assume your "a complex bit of code" is CPU-intensive. As its name, asyncio is more with I/O-bound operations, thus not helpful in your case.I would suggest using multiprocessing or subprocess if you want to literally kill a process externally. If you do have I/O or complex timing schedules, you may use asyncio subprocess.For a graceful internal shutdown, it is usually a good practice to programningly set an exit flag from outside and trigger the clean up process inside the worker:But it is your responsibility to keep each step of work relatively small, in order for the exit signal to respond quickly enough.


Answer URL
https://docs.python.org/3/library/multiprocessing.html
https://docs.python.org/3/library/subprocess.html
https://docs.python.org/3/library/asyncio-subprocess.html
