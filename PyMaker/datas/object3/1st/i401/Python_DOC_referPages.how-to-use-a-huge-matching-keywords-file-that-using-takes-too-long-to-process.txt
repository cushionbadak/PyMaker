Natural Text
I am using the following code in which I have a dictionary file,  Dictionary.txt, and a search text file, SearchText.csv, and I am using regex to find and store the matching keywords and count them.I have a problem: some of the files are thousands or hundreds of thousands of keywords and it takes too much time to process. I run the code on one dictionary which has 300,000 keywords and after an hour it hasn't written a single row.So, what should I do to reduce the running time of this process?Here is an example of some rows from Dictionary.txt:
As user Martineau comments, it's best to profile code to determine where optimisation will be most effective, and to measure the effects of any attempted optimisations.In the absence of any profiling data, the best candidate for optimisation is likely to be this inner loop:Here the code is calling strip on each string in allCities - something which could be done just once, outside the loop, then calling re.search for each city.It may be more efficient to combine all the cities into a single regex using the | metacharacter, which denotes alternate matches.  For example the pattern will match 'foo' or 'bar'.Here's a simple example:Calling re.escape on each city name prevents the search pattern being altered if one of the city names contains a character which is also a regular expression metacharacter.  Applying this technique to the code in the question:The behaviour of the | metacharacter is described in the documentation.REs separated by '|' are tried from left to right. When one pattern completely matches, that branch is accepted. This means that once A matches, B will not be tested further, even if it would produce a longer overall match. So if there are potential matches which are substrings of other candidates - like "Dubai" and "Dubai City" - the longer candidate must appear earlier in the pattern, otherwise the engine will find the shorter and return it as the match.To prevent this, sort allCities in descending order of length before creating the pattern:allCities.sort(key=len, reverse=True)or use sorted if the order of allCities must be preserved:
You could use a set instead of a list of city names and split the description on spaces to isolate words.  This may work faster than a regular expressionFor example:


Answer URL
https://docs.python.org/3/library/re.html#regular-expression-syntax
