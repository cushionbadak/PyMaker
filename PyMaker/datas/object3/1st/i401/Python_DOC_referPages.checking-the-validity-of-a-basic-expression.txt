Natural Text
I have to write a function that accepts a string as a parameter and return a boolean value (True or False) that indicates whether that string represents a valid basic expression.I have to assume that these valid expressions consist of one or more positive integers that are separated by basic operators (only +, -, *, and /). The string must start and end with integer. Moreover, a single space must always separate integers and operators in a valid expression.For example:I have no clues how and from where to start.I am allowed to use only string and list related things (like methods)
Here's an example of how to use regular expressions to solve this problem:What we do here is make a regex string that specifies the pattern to recognize, and then call fullmatch() to make sure that the entire string s matches the given pattern. Let's go over each part of that:We use re.fullmatch() instead of one of re's other methods to make sure that the entire string matches what we want. If we used re.match(), then it would match anything with a number at the beginning, regardless of whether the rest of the string wasn't what we wanted.re.fullmatch() returns a regex match object if the string matches, or None (which evaluates to false when you put it in an if statement) otherwise. We just test for whether it's None or not, and return True or False accordingly.
How is everyone is overcomplicating it that much? Is just one line of code!Simply, the regex maps the whole string from start ^ to the end $ expecting one number \d (with at least one digit +).It allows to add one the operation symbols ([\+\-\*\/]) if they are preceded by a space and followed by another space and again one number with at least one digit.This last part can be repeated multiple times with operator *.
You could use regex:Regex breakdown:


Answer URL
https://docs.python.org/3/library/re.html
