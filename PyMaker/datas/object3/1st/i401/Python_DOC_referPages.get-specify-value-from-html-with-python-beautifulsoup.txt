Natural Text
Im new in scrapping,And am doing some scrapping project and I trying to get value from the Html Below:i want to get this value :379104which located in onclickim using BeautifulSoup The code:temp return list of objects and temp= to the Html Abovecan someone help to extract this idthanks!!Edit******Wow guys thanks for amazing explanation!!!!!  but i have 2 issues 1.retry mechanism that no working i set it to timeout=1 in order to make it fail but once its fail its return: can you please help me with retry mechanism code below : 2. perfromance issues witout the retry mechanism when im set timeout=6 scrapping duration of 8000 items taking 15 minutes how i can improve this code performance ? Code below:
EditReplaced ".*\}.*,.*'(\d+)'\).*" with ".*'(\d+)'.*". They produce the same result but the latter is much cleaner.Explanation : Soupfind the (first) element w/ an a tag where the attribute "href" has "javascript:void(0)" as its value. More about beautiful soup keyword arguments here.  This is equivalent toIn older versions of Beautiful Soup, which don’t have the class_ shortcut, you can use the attrs trick mentioned above. Create a dictionary whose value for “class” is the string (or regular expression, or whatever) you want to search for. -- see beautiful soup documentation about "attrs"a points to an element of type <class 'bs4.element.Tag'>. We can access the tag attributes like we would do for a dictionary via the property a.attrs (more about that at beautiful soup attributes). That's what we do in the following statement.  The dictionary keys are named after the tags attributes. Here we have the following keys/attributes name : 'title', 'href' and 'onclick'.We can check that out for ourselves by printing them.  This will outputFrom here, we need to get the data we are interested in. The key to our data is "onclick" (it's named after the html attribute where the data we seek lays).  data now holds the following string.  Explanation : RegexNow that we have isolated the piece that contains the data we want, we're going to extract just the portion we need.We'll do so by using a regular expression (this site is an excellent resource if you want to know more about Regex, good stuff).To use regular expression in Python wemust import the Regex module re. More about the "re" module here, good good stuff.Regex lets us search a string that matches a pattern.  Here the string is our data, and the pattern is ".*'(\d+)'.*" (which is also a string as you can tell by the use of the double quotes).You can think of regular expressions as wildcards on steroids. You are probably familiar with wildcard notations such as *.txt to find all text files in a file manager. The regex equivalent is ^.*\.txt$.Best you read about regular expressions to further understand what it is about. Here's a quick start, good good good stuff.Here we search for a string. We describe the string as having none or an infinite number of characters. Those characters are followed by some digits (at least one) and an enclosed in single quotes. Then we have some more characters.  The parenthesis is used to extract a group (that's called capturing in regex), we capture just the part that's a number.  By placing part of a regular expression inside round brackets or parentheses, you can group that part of the regular expression together. This allows you to apply a quantifier to the entire group or to restrict alternations to part of the regex.  Only parentheses can be used for grouping. Square brackets define a character class, and curly braces are used by a quantifier with specific limits. -- Use Parentheses for Grouping and CapturingDefining the symbols :  .* matches any character (except for line terminators), * means there can be none or infinite amount' matches the character '\d+ matches a least one digit (equal to [0-9]); that's the part we capture(\d+) Capturing Group; this means capture the part of the string where a digit is repeated at least one() are used for capturing, the part that match the pattern within the parentheses are saved. The part captured (if any) can later be access with a call to r.groups() on the result of a re.search.This returns a tuple containing what was captured or None(r refers to the results of the re.search function call).    In our case the first (and only) item of the tuple are the digits...  We can now access our data which is at the first index of the tuple (we only captured one group)
Both solutions below assume regular/consistent structure to the onclick attributeIf there can only be one match then something like the following.If more than one match


Answer URL
https://docs.python.org/3/library/re.html
