Natural Text
Let's say I wrote a piece of code :Why doesn't the loop terminate now ?Even when I do this :It doesn't effect the loop ?I'm just wondering how python is managing loop variables ?
the range() function returns a list that you're iterating overExample for i in range(5) is equivalent to for i in [1,2,3,4,5]The for loop stops when it receives a StopIterationNow, in your first block,i is assigned to 11 after printing, but after the assignment, the iteration finishes and i is reassigned to the next list element.Moving the assignment before works as you'd expectOutput:In your second block: n is updated after range() has already generated it's list [1...10] so updating n has no effect
Python for loops are based on iteration, not a condition. They are stopped when StopIteration is reached, not when a certain Boolean condition evaluates to False.range creates a temporary range object that cannot be changed during iteration. After range(10) or range(n) or whatever is called, this object is completely independent of what was used to create it.You were probably expecting something like this to happen (C code):This is not how a for loop works in Python. It is more similar to this:
The range() function generates the integer numbers between the given start integer to the stop integer, which is generally used to iterate over with for Loop.i is returned output not the assignment.Docs: https://docs.python.org/3/library/functions.html#func-range
The whatever code we give inside the for loop is taken as a single block and will execute 10 times from i=0 to 9.Even if you assign i=11 or any other variable x=1 inside the for loop , it will print the value that we assigned 10 times.Please find the attachments. 


Answer URL
https://docs.python.org/3/library/functions.html#func-range
