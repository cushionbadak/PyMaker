Natural Text
Let's say I have a simple linked list implementation using a dictionary called child that associates a node with the following node in the linked list. For example:Would be :Converting this to a normal list is trivial, I'm struggling to come up with any way this would be possible with a list comprehension. Is there no way?
Summary: List comprehensions are designed around for-loops rather than while-loops, so this isn't a good fit.What would be needed: The for-loop requires an iterator for input.Alternative 1: This could work with a list comprehension, but that would entail shifting the work into a generator (which likely isn't what you were hoping for):Alternative 2: Besides generators, another way to make an iterator is to use the two argument form of iter().  For that to work, you would need a stateful, zero-argument function that emitted successive linked list nodes:Assessment: Both of these alternatives are a bit gross, so you're better-off without the list comprehension.  Simple, straight-forward code is the best :-)Footnote: This question is a good one.  More than one person has suggested that the language add while-loop comprehensions.  If that suggestion ever came to fruition, Python 3.8's adoption of assignment expressions would also help for your use case.


Answer URL
https://docs.python.org/3/glossary.html#term-iterator
https://docs.python.org/3/glossary.html#term-generator
https://docs.python.org/3/library/functions.html#iter
https://docs.python.org/3/glossary.html#term-list-comprehension
