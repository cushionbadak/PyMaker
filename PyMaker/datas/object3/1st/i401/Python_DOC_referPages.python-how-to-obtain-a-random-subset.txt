Natural Text
How would I get a random subset of a set s in python? I tried doingBut I now realize that this obviously doesn't work since the distribution of the len(s) where s is a random subset is not uniform from 0 to n.I'm sure I could compute that distribution and use numpy's sample with probability, or something like that, but I'd like something preferably with pure python.
I just realized I can simply go through each element in s and decide independently to keep it or not. Something like thisThis has the correct distribution.
What subset you obtain will depend largely on the criterion you specify for including or excluding elements. If you have a function criterion that accepts an element and returns a Boolean to indicate inclusion in the subset, the actual creation process becomes simplyfilter creates a lazy generator, so the return subset is the only place the selection gets stored. The default criterion is very simple and has a uniform distribution. randrange is similar to randint except that it is exclusive in the right bound. At least as of Python 3.2+, both functions produce fairly uniform results regardless of range size.You can further refine the criterion by using random:Applying a threshold like that may seem like overkill, but it lets you adjust the distribution. You can have a function that generates criteria for whatever threshold you like:You could use it to get a smaller subset:In fact, you can make the criterion as complicated as you would like. The following example is a contrived callable class that operates on sets of strings. If a string with a matching first character has already been added, it automatically rejects the current element. If the second letter has been seen already, it sets the probability of inclusion to 0.25. Otherwise, it flips a coin:This example wouldn't be very good in practice because sets are unordered, and can give different iteration orders between different runs of the same script. What it shows, however, is a method for creating a criterion that is random, but is adjusted in response to elements that are already in the subset.Avoiding NumpyNow that I have a better understanding of your original intent, you can leverage the fact that Python 3 has infinite length integers and that choices accepts a length parameter to get the correct length. I don't recommend this approach though:A better solution for computing the binomial coefficients could be something like:


Answer URL
https://docs.python.org/3/library/random.html#random.randrange
https://docs.python.org/3/library/random.html#random.randint
https://docs.python.org/3/library/random.html#random.random
https://docs.python.org/3/library/random.html#random.choices
