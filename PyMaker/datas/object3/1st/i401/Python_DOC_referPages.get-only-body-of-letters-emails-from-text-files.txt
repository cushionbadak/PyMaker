Natural Text
I want to remove all from, to, cc, subject sent tags from this text document and only keep the body of the mail so that I can use this to summarize content of the document. What is the best way to do this in python. I think it's better to first do the extraction and then use preprocessing for this case. Also attaching code here. So if anyone can suggest how to do this, would be really helpful. The payload and ismultipart part of the file is not done properly and there is where my doubt is and so have commented that part and require help there.Attaching code and the .txt file below for reference.TEXT FILE
It's not really clear which part of the code you need help with, what you want it to do instead of what it currently does, or how to pass on the results for further processing correctly.However, I will note that your code has a number of problems.You cannot read an email message as UTF-8 text. Regardless of the file extension, an RFC822 message is simply a sequence of bytes. Traditional email could come in a large number of different encodings, and if you try to coerce it into UTF-8, you will run into UnicodeDecodeErrors and other snags.As always, a blanket except Exception: is a major bug. Perhaps you only put this in for debugging, but it actually makes debugging harder.Typical modern email messages come with somewhat complex MIME body structures which you have to analyze in context before you decide which one(s) you actually want to process.  One common phenomenon is multipart/alternative where the same message is rendered in different formats so that recipients can decide whether they want to read it rendered as HTML, plain text, or, occasionally, perhaps PDF or RTF or a single image or whatever, depending on the application.  Also, HTML structures often have multiple parts, because the main HTML wants to pull in small images which are supplied in the MIME structure as well (company logo, animated emojis, and other insults to the reader). Perhaps see also What are the "parts" in a multipart email?Another complication for this answer is that Python's email library went through an overhaul relatively recently. The new functionality was introduced experimentally in Python 3.3, but only became the documented and default version in 3.6. Most of the code you will find out in the wild will be using the pre-3.6 facilities, but going forward, you will probably want to target the new and improved API.With the legacy API your code might look something likeTo use the new 3.6+ API you will need to adapt this to something likeThis will result in a new email.message.EmailMessage object which has some different methods and different behaviors than the legacy email.message.Message class.  The documentation suggests that maybe one day the default policy will be passed in by default, at which point old code will switch to new behavior (but also probably some amount of unpleasant surprises and outright breakage).Notice also the get_body() method which is new in 3.6 and which lets you easily pick out a "probable main part"; though if no text/plain part is available, the code above will fall back to HTML, which you will then need to process further to extract the actual text (look at Beautifulsoup maybe?)There is no technical, robust, reliable way to separate boilerplate (headers, signatures, etc) from actual content in email. Some HTML email clients might provide hints in the generated message as to which <div> contains things the user typed in, but in the general case, you just have to wade up to your eyebrows in (frankly, hopeless) heuristics.
If you want to only remove the From, Sent, To, Cc, Subject and Forwarded tags from the email you could use regex. Concerning removing the content after 'regards'.  I didn't add that to my regex, because emails can be signed severals ways.  Here are some of the most common ways:UPDATED ANSWER ONE The updated answer below cleans some more of your email input, but more cleaning is required.UPDATED ANSWER TWO The updated answer below uses the python email library.  My input file was an original email message pulled from my email client.  Using the code below, I was able to extract the body of every email message that I tried. I also tested the gensim module and it worked correctly.FINAL ANSWER This is my final answer to this question.  Hopefully, one of these 4 answers meets your requirements.  You will have to do some small cleanup of the output, because I don't know all your requirements.  


Answer URL
https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.get_body
