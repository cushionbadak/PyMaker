Natural Text
Given the following file structure,I'm wondering if it's possible that python's os.walk function returns the folders in different orders on Mac and Linux?  Both are using python 3.5.Mac:On Linux:In the case of Mac, looks as though the folder v1 is encountered first, while on Linux it's v2.  Any insight as to why this might be the case?
See the documentation on os.walk, relevant part:Changed in version 3.5: This function now calls os.scandir() instead  of os.listdir(), making it faster by reducing the number of calls to  os.stat().And then in os.scandir():Return an iterator of os.DirEntry objects corresponding to the entries  in the directory given by path. The entries are yielded in arbitrary  order, and the special entries '.' and '..' are not included.Regardless of listdir() or scandir(), both are returned in arbitrary order anyhow.In short - order is not to be expected.Having said that, you should be able to manipulate the dirnames in the loop based on this part:When topdown is True, the caller can modify the dirnames list in-place  (perhaps using del or slice assignment), and walk() will only recurse  into the subdirectories whose names remain in dirnames; this can be  used to prune the search, impose a specific order of visiting, or even  to inform walk() about directories the caller creates or renames  before it resumes walk() again. Modifying dirnames when topdown is  False has no effect on the behavior of the walk, because in bottom-up  mode the directories in dirnames are generated before dirpath itself  is generated.So if you folders.sort() it should work based on your sorted order.  I just tried it and it works.  I've also bolded the key part in-place - the folders must be sorted in place for os.walk() to take the order:


Answer URL
https://docs.python.org/3/library/os.html#os.walk
https://docs.python.org/3/library/os.html#os.scandir
