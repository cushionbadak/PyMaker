Natural Text
Inspired by this question, I thought it'd be interesting to throw together a "MutableNum" class for fun that, in as many cases as possible, acted just like a standard numeric type, but it would be mutable, so something like the following would work:I got to the following:Which works (so far, as far as I can tell), but I found myself wanting to "catch" the magic methods, since many of them would follow very similar structure.For example, I'd like to catch __mul__, __add__, __sub__, etc in something like:So for __add__, catch() would returnIs something like this possible?  Or should I just implement all of the magic methods like I have already done?EDIT:  I've experimented a little with trying to catch magic methods with __getattr__(self,key), but I'm getting mixed results.Thanks in advance.Edit 2With everyone's help, here's what I came up with:I put the entire class, with usage header and rough test suite here.mgilson's suggestion of using @total_ordering will simplify this a bit.As long as you follow the usage guidelines (e.g. using x *= 2 instead of x = x * 2), it seems that you'll be fine.Although, simply wrapping the argument in a list and then modifying x[0] seems much easier -- still was a fun project.
The easiest thing to do is going to be to implement them all by hand.  If this was something you were going to add to lots of classes then you might look at metaclasses (can be brain melting) or class decorators (much easier to deal with), but you should do it once by hand so you know what's going on.The reason __getattr__ only works sometimes is that it is only called if the name it is looking for cannot be found on the class or any of its base classes.  So if __xyz__ can be found on object, __getattr__ will not be called.
Most magic methods are looked up on the type rather than an instance. You can neither overwrite them in an instance nor catch them with __getattr__. In order to hook into a double under function you have to implement it.Example:doesn't callInstead the call goes through the type. It's almost equal to (except it skips getattr on the meta class, too).The lookup is documented http://docs.python.org/3/reference/datamodel.html#special-method-lookup


Answer URL
