Natural Text
I'm having an issue parsing data after reading a file. What I'm doing is reading a binary file in and need to create a list of attributes from the read file all of the data in the file is terminated with a null byte. What I'm trying to do is find every instance of a null byte terminated attribute.Essentially taking a string likeand storing it in a list.The real issue is I need to keep the null bytes in tact, I just need to be able to find each instance of a null byte and store the data that precedes it. 
While it boils down to using split('\x00') a convenience wrapper might be nice.then you can do something likeThis has the added benefit of not needing to load the entire contents into memory before splitting the text.
Python doesn't treat NUL bytes as anything special; they're no different from spaces or commas. So, split() works fine:Note that split is treating \x00 as a separator, not a terminator, so we get an extra empty string at the end. If that's a problem, you can just slice it off:
To check if string has NULL byte, simply use in operator, for example:To find the position of it, use find() which would return the lowest index in the string where substring sub is found. Then use optional arguments start and end for slice notation.
Split on null bytes; .split() returns a list:If you know the data always ends with a null byte, you can slice the list to chop off the last empty string (like result_list[:-1]).


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.find
