Natural Text
I'm using the Python mock module for tests. I would like to replace an active object with a mock, and automatically have all calls made to the mock object forwarded to the original object. I think this is called a "Spy" in standard testing terminology. At the moment I'm doing inside a test:It would be nice if all method calls on the mock could be forwarded to the live object automatically without the boilerplate.
I seem to have stumbled across the solution:Seems to work okay for functions, methods and properties, but not for class or instance attributes.See the documentation.
You can use patch.object(wraps=obj_instance) as suggested in Spying on instance methods with Python's mock module.For example:
You can use a simple function to iterate through all the method and configure your mock
Here's how to mock only datetime.date.today(), forwarding the rest of datetime calls to the datetime module:foo_module imports datetime and uses many other datetime functions besides date.today.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#the-mock-class
