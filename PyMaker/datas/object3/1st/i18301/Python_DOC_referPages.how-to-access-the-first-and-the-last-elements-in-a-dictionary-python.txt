Natural Text
Before posting, I have already gone through Access an arbitrary element in a dictionary in Python, butI'm uncertain about this.I have a long dictionary and I've to get the values of its first and last keys. I can use dict[dict.keys()[0]] and dict[dict.keys()[-1]] to get the first and last elements, but since the key:value pairs are outputted in a random form(as in the positioning of the key:value pairs is random), will the solution provided in this link always work?
Use an OrderedDict, because a normal dictionary doesn't preserve the insertion order of its elements when traversing it. Here's how:
If working with Python 3.6+ you can do a one liner:First:Last:This is the case because Python 3.6+ default dictionary preserves insertion order. This is also mentioned in the documentation:Dictionaries preserve insertion order. Note that updating a key does not affect the order. Keys added after deletion are inserted at the end.andChanged in version 3.7: Dictionary order is guaranteed to be insertion order. This behavior was an implementation detail of CPython from 3.6.
There is no such thing as "first" or "last" key in dictionary, which does not guarantee any particular ordering. So there is no possibility to get "first" or "last" element. You can only create your own wrapper around python dict, which will store the information about "first" and "last" objectSomething likeAlthough as it was pointed out in the comment there is already a class OrderedDict: http://docs.python.org/2/library/collections.html#collections.OrderedDictOrdered dictionaries are just like regular dictionaries but they remember  the order that items were inserted. When iterating over an ordered  dictionary, the items are returned in the order their keys were first  added.
Python dictionaries are unordered, so "first" and "last" isn't defined.  Instead, you can sort your keys, and then access the element associated with the first and last key in your sorted set.EDIT:The OP clarified that by "first" and "last" he meant the order in which keys were added to the dictionary.  collections.OrderedDict should work for this case.
CPython implementation detail: Keys and values are listed in an arbitrary order which is non-random, varies across Python implementations, and depends on the dictionaryâ€™s history of insertions and deletions. -- dict documentationHowever I highly recommend to not rely on order of items in associative array data structure (dict is one of them) since frequently there is no single obvious way to order keys. For example in python "21" < "3" while 21 > 3.
def dictionarySortingExample(yourDictionary):example dictionary sortingsampleDictionary = {4:"four", "Cranberry":2, 3:"three", 2:"two", "Apple":3, 1:"one", "Bananna":1}dictionarySortingExample(sampleDictionary)
You can do it by using list().    Output:-First Element:-  ('Key-3', 'Value-3')Last Element:-  ('Key-1', 'Value-1')


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict
