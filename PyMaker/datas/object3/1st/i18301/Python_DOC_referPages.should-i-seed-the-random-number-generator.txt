Natural Text
From the docs:random.seed(a=None, version=2) Initialize the random number generator.If a is omitted or None, the current system time is used. If  randomness sources are provided by the operating system, they are used  instead of the system time (see the os.urandom() function for details  on availability).But...if it's truly random...(and I thought I read it uses Mersenne, so it's VERY random)...what's the point in seeding it? Either way the outcome is unpredictable...right?
The default is probably best if you want different random numbers with each run. If for some reason you need repeatable random numbers, in testing for instance, use a seed.
But...if it's truly randomNo, it's pseudo random. If it uses Mersenne Twister, that too is a PRNG.It's basically an algorithm that generates the exact same sequence of pseudo random numbers out of a given seed. Generating truly random numbers requires special hardware support, it's not something you can do by a pure algorithm.You might not need to seed it since it seeds itself on first use, unless you have some other or better means of providing a seed than what is time based.  If you use the random numbers for things that are not security related, a time based seed is normally fine. If you use if for security/cryptography, note what the docs say: "and is completely unsuitable for cryptographic purposes"
If you want to reproduce your results, you seed the generator with a known value so you get the same sequence every time.
The module actually seeds the generator (with OS-provided random data from urandom if possible, otherwise with the current date and time) when you import the module, so there's no need to manually call seed().(This is mentioned in the Python 2.7 documentation but, for some reason, not the 3.x documentation. However, I confirmed in the 3.x source that it's still done.)If the automatic seeding weren't done, you'd get the same sequence of numbers every time you started your program, same as if you manually use the same seed every time.
A Mersenne twister, the random number generator, used by Python is seeded by the operating system served random numbers by default on those platforms where it is possible (Unixen, Windows); however on other platforms the seed defaults to the system time which means very repeatable values if the system time has a bad precision. On such systems seeding with known better random values is thus beneficial. Note that on Python 3 specifically, if version 2 is used, you can pass in any str, bytes, or bytearray to seed the generator; thus taking use of the Mersenne twister's large state better.Another reason to use a seed value is indeed to guarantee that you get the same sequence of random numbers again and again - by reusing the known seed. Quoting the docs: Sometimes it is useful to be able to reproduce the sequences given by  a pseudo random number generator. By re-using a seed value, the same  sequence should be reproducible from run to run as long as multiple  threads are not running.Most of the random module’s algorithms and seeding functions are  subject to change across Python versions, but two aspects are  guaranteed not to change:If a new seeding method is added, then a backward compatible seeder will be offered.The generator’s random() method will continue to produce the same sequence when the compatible seeder is given the same seed.For this however, you mostly want to use the random.Random instances instead of using module global methods (the multiple threads issue, etc).Finally also note that the random numbers produced by Mersenne twister are unsuitable for cryptographical use; whereas they appear very random, it is possible to fully recover the internal state of the random generator by observing only some hundreds of values from the generator. For cryptographical algorithms, you want to use the SystemRandom class.
In most cases I would say there is no need to care about. But if someone is really willing to do something wired and (s)he could roughly figure out your system time when your code was running, they might be able to brute force replay your random numbers and see which series fits. But I would say this is quite unlikely in most cases. 


Answer URL
