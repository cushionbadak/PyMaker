Natural Text
For a project in one of my classes we have to output numbers up to five decimal places.It is possible that the output will be a complex number and I am unable to figure out how to output a complex number with five decimal places. For floats I know it is just:print "%0.5f"%variable_nameIs there something similar for complex numbers?
For questions like this, the Python documentation should be your first stop. Specifically, have a look at the section on string formatting. It lists all the string format codes; there isn't one for complex numbers.What you can do is format the real and imaginary parts of the number separately, using x.real and x.imag, and print it out in a + bi form.
You could do it as is shown below using the str.format() method:To make it handle both positive and negative imaginary portions properly, you would need a (even more) complicated formatting operation:Update - Easier WayAlthough you cannot use f as a presentation type for complex numbers using the string formatting operator %:Output:You can however use it with complex numbers via the str.format() method. This isn't explicitly documented, but is implied by the Format Specification Mini-Language documentation which just says:'f'  Fixed point. Displays the number as a fixed-point number. The default precision is 6.. . .so it's easy to overlook.In concrete terms, the following works in both Python 2.7.14 and 3.4.6:Output:This doesn't give you quite the control the code in my original answer does, but it's certainly much more concise (and handles both positive and negative imaginary parts automatically).Update 2 - f-stringsFormatted string literals (aka f-strings) where added in Python 3.6, which means it could do also be done like this that version or later:

Neither String Formatting Operations - i.e. the modulo (%) operator) -nor the newer str.format() Format String Syntax support complex types.However it is possible to call the __format__ method of all built in numeric types directly.Here is an example:Note, that this works well with negative imaginary parts too.
As of Python 2.6 you can define how objects of your own classes respond to format strings.  So, you can define a subclass of complex that can be formatted.  Here's an example:Objects of this class behave exactly like complex numbers except they take more space and operate more slowly; reader beware.


Answer URL
https://docs.python.org/3/library/string.html?highlight=formatting#format-specification-mini-language
https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals
