Natural Text
I have a python program with multiple threads.  Each thread detects events, which I would like to store somewhere so that I can read them in again (for testing).  Right now, I'm using Pickle to output the events, and each thread outputs to a different file.  Ideally, I would only use one output file, and all the threads would write to it, but when I try this, it looks like the various threads try to write their output at the same time, and they don't get pickled properly.  Is there a way to do this?
seems like a good place to use a Queue.Have all your event detection threads put items on a shared Queue.Create another thread to get items from the queue, and write/pickle/whatever from this thread.from the Queue docs:"The Queue module implements multi-producer, multi-consumer queues. It  is especially useful in threaded programming when information must be  exchanged safely between multiple threads. The Queue class in this  module implements all the required locking semantics. It depends on  the availability of thread support in Python; see the threading  module."
Yes, with threading.Lock() objects.You create a lock before creating all your threads, you give it to the method that is responsible of saving/pickling items, and this method should acquire the lock before writing into the file and releasing it after.
You could create a lock and acquire/release it around every call to pickle.dump().
The logging module has a Rlock built into its Handlers. So you could logging as normal (just create a handler to log to a file.)
Here is an example using threading.Lock():


Answer URL
https://docs.python.org/3/library/threading.html#lock-objects
