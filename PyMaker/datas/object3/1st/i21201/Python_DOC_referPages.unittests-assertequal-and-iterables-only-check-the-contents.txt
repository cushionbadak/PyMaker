Natural Text
Is there a 'decent' way in unittest to check the equality of the contents of two iterable objects? I am using a lot of tuples, lists and numpy arrays and I usually only want to test for the contents and not for the type. Currently I am simply casting the type:I used this list comprehension a while ago:But this solution seems a bit inferior to the typecast because it only prints single values if it fails and also it does not fail for different lengths of reference and data (due to the zip-function).
Python 3If you don't care about the order of the content, you have the assertCountEqual(a,b) method If you care about the order of the content, you have the assertSequenceEqual(a,b) method Python >= 2.7If you don't care about the order of the content, you have the assertItemsEqual(a,b) method If you care about the order of the content, you have the assertSequenceEqual(a,b) method 
You can always add your own assertion methods to your TestCase class:or take a look at how 2.7 defined it: http://hg.python.org/cpython/file/14cafb8d1480/Lib/unittest/case.py#l621
It looks to me you care about the order of items in the sequences. Therefore, assertItemsEqual/assertCountEqual is not for you.In Python 2.7 and in Python 3, what you want is self.assertSequenceEqual. This is sensitive to the order of the items.


Answer URL
https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertCountEqual
https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertSequenceEqual
https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertSequenceEqual
