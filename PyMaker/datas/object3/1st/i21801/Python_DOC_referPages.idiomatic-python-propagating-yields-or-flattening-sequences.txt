Natural Text
I'm writing a breadth depth-first tree traversal function, and what I want to do is this:The idea is to end up with a (flat) sequence of nodes in the tree.Approach #1: (propagating yields)Approach #2: (flattening sequences)The first approach seems more clean, but I feel weird explicitly yielding each node in the subtree at each level.The second approach is terse and slightly dirty, but it matches what I would write in Haskell:So my question is: Which is better? Or am I missing a best 3rd option?
[UPDATE] See PEP-380, this yield all syntax is available starting from Python 3.3 as yield from:
I'd go with first. You'll get over propagating yields after a couple of times. :-)
This is an opinions question, so all the answers will just be value judgments. As far as I can think there's no elegant third way, though.My opinion is that the first way wins hands down. It's clearer and easier to read -- Python isn't Haskell, even though it can do some functional stuff, and often the functional approach just doesn't look as neat.
Traversing with node position:


Answer URL
https://docs.python.org/3/whatsnew/3.3.html
