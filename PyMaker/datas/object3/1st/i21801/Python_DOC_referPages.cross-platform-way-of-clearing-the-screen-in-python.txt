Natural Text
This question already has an answer here:How to clear the interpreter console?                    34 answers                Does any standard "comes with batteries" method exist to clear the terminal screen from a Python script, or do I have to go curses (the libraries, not the words)?
What about escape sequences?
A simple and cross-platform solution would be to use either the cls command on Windows, or clear on Unix systems. Used with os.system, this makes a nice one-liner:
Why hasn't anyone talked about just simply doing Ctrl+L in Windows or  Cmd+L in Mac.Surely the  simplest way of clearing screen.
If you are on a Linux/UNIX system then printing the ANSI escape sequence to clear the screen should do the job.  You will also want to move cursor to the top of the screen.  This will work on any terminal that supports ANSI.This will not work on Windows unless ANSI support has been enabled.  There may be an equivalent control sequence for Windows, but I do not know.
For Windows, Mac and Linux, you can use the following code:jamesnotjim tested print("\033c", end="") for Mac, and I tested it on Linux and Windows (it doesn't work for Windows, hence the other code that calls cls). I don't remember who it was I first saw use print("\033c") and/or the printf version: subprocess.Popen("printf '\033c'", shell=True).communicate().rolika pointed out that end="" will prevent it from printing a new line afterward.
As for me, the most elegant variant:
You could try to rely on clear but it might not be available on all Linux distributions. On windows use cls as you mentionned.Note: It could be considered bad form to take control of the terminal screen.  Are you considering using an option? It would probably be better to let the user decide if he want to clear the screen.
A Pure Python solution.Does not rely on either ANSI, or external commands.Only your terminal has to have the ability to tell you how many lines are in view.Python version >= 3.3.0
Came across this some time agoThen just use clearscreen()
So just thought I would throw my two cents in here...No one has provided a true answer to OP question it seems, everyone either responds with 'NO DONT USE os.system() it's evil!!!' without explanation or provides a solution that relies on printing new lines.For those that need to clear the terminal screen and scroll back, for whatever reason, you can use the following code:This has the OP's desired effect. It does use the os.system() command so if that's evil and someone knows a way of implementing this using subprocess.call() please comment as I would also prefer to use subprocess but am not familiar with it at all.
This will be work in Both version Python2 OR Python3
If you wish to clear your terminal when you are using a python shell. Then, you can do the following to clear the screen
You could tear through the terminfo database, but the functions for doing so are in curses anyway.
This function works in gnome-terminal because, by default, it recognizes ANSI escape sequences. It gives you a CLEAN PROMPT rows_max distance from the bottom of the terminal, but also precisely from where it was called. Gives you complete control over how much to clear.Implementation:Parameters: rows is the number of clear text rows to add between prompt and bottom of terminal, pushing everything up. rows_max is the height of the terminal (or max clearing height) in text rows, and only needs to be set once, but can be reset at any time. *, in the third parameter position means all following parameters are keyword only (e.g., clear(absolute=5)). calling_line=True (default) works better in Interactive mode. calling_line=False works better for text-based, terminal applications. absolute was added to try to fix glitchy gap problems in Interactive mode after reducing size of terminal, but can also be used for terminal applications. store_max is just for secret, "persistent" storage of rows_max value; don't explicitly use this parameter. (When an argument is not passed for store_max, changing the list contents of store_max changes this parameter's default value. Hence, persistent storage.)Portability: Sorry, this doesn't work in IDLE, but it works >> VERY COOL << in Interactive mode in a terminal (console) that recognizes ANSI escape sequences. I only tested this in Ubuntu 13.10 using Python 3.3 in gnome-terminal. So I can only assume portability is dependant upon Python 3.3 (for the shutil.get_terminal_size() function for BEST results) and ANSI recognition. The print(...) function is Python 3. I also tested this with a simple, text-based, terminal Tic Tac Toe game (application).For use in Interactive mode: First copy and paste the copy(...) function in Interactive mode and see if it works for you. If so, then put the above function into a file named clear.py . In the terminal start python, with 'python3'. Enter:Now drop the clear.py file into one of the path directories listed so that Python can find it (don't overwrite any existing files). To easily use from now on:For use in a terminal application: Put the copy(...) function into a file named clear.py in the same folder with your main.py file. Here is a working abstract (skeleton) example from a Tic Tac Toe game application (run from terminal prompt: python3 tictactoe.py):Explanation: do_print(...) on line 19 is a version of print(...) needed to keep track of how many new lines have been printed (self.rows). Otherwise, you would have to self.rows += 1 all over the place where print(...) is called throughout the entire program. So each time the board is redrawn by calling show_board() the previous board is cleared out and the new board is printed exactly where it should be. Notice self.clear(calling_line=False) on line 9 basically pushes everything up RELATIVE to the bottom of the terminal, but does not clear the original calling line. In contrast, self.clear(absolute=self.rows) on line 29 absolutely clears out everything self.rows distance upward, rather than just pushing everything upward relative to the bottom of the terminal.Ubuntu users with Python 3.3: Put #!/usr/bin/env python3 on the very first line of the tictactoe.py file. Right click on the tictactoe.py file => Properties => Permissions tab => Check Execute: Allow executing file as program. Double click on the file => Click Run in Terminal button. If an open terminal's current directory is that of the tictactoe.py file, you can also start the file with ./tictactoe.py.
You can use call() function to execute terminal's commands :
Just use:This will clear the terminal window.
you can make your own. this will not be dependent on your terminal, or OS type.
This will clear 25  new lines:I use eclipse with pydev. I like the newline solution better than the for num in range . The for loop throws warnings, while the print newline doesn't.If you want to specify the number of newlines in the clear statement try this variation.
python -c "from os import system; system('clear')"
If all you need is to clear the screen, this is probably good enough. The problem is there's not even a 100% cross platform way of doing this across linux versions. The problem is the implementations of the terminal all support slightly different things. I'm fairly sure that "clear" will work everywhere. But the more "complete" answer is to use the xterm control characters to move the cursor, but that requires xterm in and of itself.Without knowing more of your problem, your solution seems good enough.
A perhaps cheesy way to clear the screen, but one that will work on any platform I know of, is as follows:
I would do it in this way to make it look more like bash:Just create a file named .pythonstartup at Home directory and use poke's answer in a functionOn Linux:You can add export PYTHONSTARTUP=$HOME/.pythonstartup to your ./bashrc fileSince what I care about is space; a call to the function will not display the python interpreter description at startup, but you can remove clear() to retain it.Using it like a normal function should do the trick without printing the exit status:If you pass the argument 0 to the function it will clear the screen and exit successfully so you can continue using the shell in a clean screen
For Windows, on the interpreter command line only (not the GUI)! Simply type:(Remember to use proper indentation with python): Every time you type clear() on the shell (command line), it will clear the screen on your shell. If you exit the shell, then you must redo the above to do it again as you open a new Python (command line) shell.Note: Does not matter what version of Python you are using, explicitly (2.5, 2.7, 3.3 & 3.4).
The accepted answer is a good solution.  The problem with it is that so far it only works on Windows 10, Linux and Mac.  Yes Windows (known for it lack of ANSI support)!  This new feature was implemented on Windows 10 (and above) which includes ANSI support, although you have to enable it.  This will clear the screen in a cross platform manner:On anything below Windows 10 however it returns this:This is due to the lack of ANSI support on previous Windows builds.  This can however, be solved using the colorama module.  This adds support for ANSI characters on Windows:ANSI escape character sequences have long been used to produce colored terminal text and cursor positioning on Unix and Macs. Colorama makes this work on Windows, too, by wrapping stdout, stripping ANSI sequences it finds (which would appear as gobbledygook in the output), and converting them into the appropriate win32 calls to modify the state of the terminal. On other platforms, Colorama does nothing.So here is a cross platform method:Or print(chr(27) + "[2J") used instead of print("\x1B[2J").@poke answer is very insecure on Windows, yes it works but it is really a hack.  A file named cls.bat or cls.exe in the same dictionary as the script will conflict with the command and execute the file instead of the command, creating a huge security hazard.One method to minimise the risk could be to change the location of where the cls command is called:This will change the Currant Dictionary to C:\Window (backslash is important here) then execute.  C:\Windows is always present and needs administration permissions to write there making it a good for executing this command with minimal risk.  Another solution is to run the command through PowerShell instead of Command Prompt since it has been secured against such vulnerabilities. There are also other methods mentioned in this question: Clear screen in shell which may also be of use.
In Windows you can use:
By default, os.system("clear")/os.system("cls") will return an int type as 0.We can completely clear the screen by assigning it to a variable and deleting that.
This works on all platforms and it does work in both Python 2 and 3.Then to clear just type clear(numberhere).


Answer URL
