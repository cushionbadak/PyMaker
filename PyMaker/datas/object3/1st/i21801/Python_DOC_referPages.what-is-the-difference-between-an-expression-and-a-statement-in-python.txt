Natural Text
In Python, what is the difference between expressions and statements?
Expressions only contain identifiers, literals and operators, where operators include arithmetic and boolean operators, the function call operator () the subscription operator [] and similar, and can be reduced to some kind of "value", which can be any Python object.  Examples:Statements (see 1, 2), on the other hand, are everything that can make up a line (or several lines) of Python code.  Note that expressions are statements as well.  Examples:
Expression -- from my dictionary: expression: Mathematics a collection  of symbols that jointly express a  quantity : the expression for the  circumference of a circle is 2Ï€r.In gross general terms: Expressions produce at least one value.In Python, expressions are covered extensively in the Python Language Reference In general, expressions in Python are composed of a syntactically legal combination of Atoms, Primaries and Operators. Python expressions from WikipediaExamples of expressions: Literals and syntactically correct combinations with Operators and built-in functions or the call of a user-written functions:Statement from Wikipedia:In computer programming a statement  can be thought of as the smallest  standalone element of an imperative  programming language. A program is  formed by a sequence of one or more  statements. A statement will have  internal components (e.g.,  expressions).Python statements from WikipediaIn gross general terms: Statements Do Something and are often composed of expressions (or other statements)The Python Language Reference covers Simple Statements and Compound Statements extensively. The distinction of "Statements do something" and "expressions produce a value" distinction can become blurry however: List Comprehensions are considered "Expressions" but they have looping constructs and therfore also Do Something. The if is usually a statement, such as if x<0: x=0 but you can also have a conditional expression like x=0 if x<0 else 1 that are expressions. In other languages, like C, this form is called an operator like this x=x<0?0:1; You can write you own Expressions by writing a function. def func(a): return a*a is an expression when used but made up of statements when defined. An expression that returns None is a procedure in Python: def proc(): pass Syntactically, you can use proc() as an expression, but that is probably a bug...Python is a bit more strict than say C is on the differences between an Expression and Statement. In C, any expression is a legal statement. You can have func(x=2); Is that an Expression or Statement? (Answer: Expression used as a Statement with a side-effect.) The form func(x=2) is illegal in Python (or at least it has a different meaning func(a=3) sets the named argument a to 3)
Though this isn't related to Python:An expression evaluates to a value.A statement does something.
Statements represent an action or command e.g print statements, assignment statements. Expression is a combination of variables, operations and values that yields a result value.Lastly, expression statements
An expression is a statement that returns a value.  So if it can appear on the right side of an assignment, or as a parameter to a method call, it is an expression.Some code can be both an expression or a statement, depending on the context.  The language may have a means to differentiate between the two when they are ambiguous.
An expression is something that can be reduced to a value, for example "1+3" or "foo = 1+3".It's easy to check:If it doesn't work, it's a statement, if it does, it's an expression.Another statement could be:as it cannot be reduced to a value.
An expression is something, while a statement does something.An expression is a statement as well, but it must have a return.PS:The interpreter always prints out the values of all expressions.
A statement contains a keyword.An expression does not contain a keyword.print "hello" is statement, because print is a keyword."hello" is an expression, but list compression is against this.The following is an expression statement, and it is true without list comprehension:
Expressions:Expressions are formed by combining objects and operators.An expression has a value, which has a type.Syntax for a simple expression:<object><operator><object>2.0 + 3 is an expression which evaluates to 5.0 and has a type float associated with it.StatementsStatements are composed of expression(s). It can span multiple lines.
STATEMENT:A Statement is a action or a command that does something. Ex: If-Else,Loops..etcEXPRESSION:A Expression is a combination of values, operators and literals which yields something.
Python calls expressions "expression statements", so the question is perhaps not fully formed.A statement consists of pretty much anything you can do in Python: calculating a value, assigning a value, deleting a variable, printing a value, returning from a function, raising an exception, etc. The full list is here: http://docs.python.org/reference/simple_stmts.html# An expression statement is limited to calling functions (e.g., math.cos(theta)"), operators ( e.g., "2+3"), etc.  to produce a value. 
I think an expression contains operators + operands and the object that holds the result of the operation... e.g.but a statement is simply a line of a code (it may be an expression) or block of code... e.g.}
In simple words: a statement is made of one or more expressions, whereas an expression is made of one or more of Identifiers (names), Literals, and Operators.


Answer URL
https://docs.python.org/3/reference/expressions.html?highlight=subscriptions#calls
https://docs.python.org/3/reference/expressions.html?highlight=subscriptions#grammar-token-subscription
https://docs.python.org/3/reference/expressions.html?highlight=subscriptions#calls
https://docs.python.org/3/reference/expressions.html?highlight=subscriptions#grammar-token-subscription
