Natural Text
I want an efficient way to append one string to another in Python.Is there any good built-in method to use?
If you only have one reference to a string and you concatenate another string to the end, CPython now special cases this and tries to extend the string in place.The end result is that the operation is amortized O(n).e.g.used to be O(n^2), but now it is O(n).From the source (bytesobject.c):It's easy enough to verify empirically.It's important however to note that this optimisation isn't part of the Python spec. It's only in the cPython implementation as far as I know. The same empirical testing on pypy or jython for example might show the older O(n**2) performance .So far so good, but then,ouch even worse than quadratic. So pypy is doing something that works well with short strings, but performs poorly for larger strings.
Don't prematurely optimize. If you have no reason to believe there's a speed bottleneck caused by string concatenations then just stick with + and +=:That said, if you're aiming for something like Java's StringBuilder, the canonical Python idiom is to add items to a list and then use str.join to concatenate them all at the end:
Don't.That is, for most cases you are better off generating the whole string in one go rather then appending to an existing string.For example, don't do: obj1.name + ":" + str(obj1.count)Instead: use "%s:%d" % (obj1.name, obj1.count)That will be easier to read and more efficient.
That joins str1 and str2 with a space as separators. You can also do "".join(str1, str2, ...). str.join() takes an iterable, so you'd have to put the strings in a list or a tuple.That's about as efficient as it gets for a builtin method.
If you need to do many append operations to build a large string, you can use StringIO or cStringIO. The interface is like a file. ie: you write to append text to it.If you're just appending two strings then just use +.
it really depends on your application. If you're looping through hundreds of words and want to append them all into a list, .join() is better. But if you're putting together a long sentence, you're better off using +=.
Python 3.6 gives us f-strings, which are a delight:You can do most anything inside the curly braces

Basically, no difference. The only consistent trend is that Python seems to be getting slower with every version... :(ListPython 2.71 loop, best of 3: 7.34 s per loopPython 3.41 loop, best of 3: 7.99 s per loopPython 3.51 loop, best of 3: 8.48 s per loopPython 3.61 loop, best of 3: 9.93 s per loopStringPython 2.7: 1 loop, best of 3: 7.41 s per loopPython 3.41 loop, best of 3: 9.08 s per loopPython 3.51 loop, best of 3: 8.82 s per loopPython 3.61 loop, best of 3: 9.24 s per loop
append strings with __add__ functionOutput


Answer URL
https://docs.python.org/3/library/io.html#io.StringIO
https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498
