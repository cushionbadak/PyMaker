Natural Text
I have a list of dicts:How can I efficiently find the index position [0],[1], or [2] by matching on name = 'Tom'?If this were a one-dimensional list I could do list.index() but I'm not sure how to proceed by searching the values of the dicts within the list.
If you need to fetch repeatedly from name, you should index them by name (using a dictionary), this way get operations would be O(1) time. An idea:
A simple readable version is
It won't be efficient, as you need to walk the list checking every item in it (O(n)). If you want efficiency, you can use dict of dicts. On the question, here's one possible way to find it (though, if you want to stick to this data structure, it's actually more efficient to use a generator as Brent Newey has written in the comments; see also tokland's answer):
Here's a function that finds the dictionary's index position if it exists.
Seems most logical to use a filter/index combo:And if you think there could be multiple matches:
For a given iterable, more_itertools.locate yields positions of items that satisfy a predicate.more_itertools is a third-party library that implements itertools recipes among other useful tools.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
