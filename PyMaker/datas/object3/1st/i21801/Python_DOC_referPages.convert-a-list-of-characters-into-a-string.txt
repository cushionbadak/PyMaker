Natural Text
If I have a list of chars:How do I convert it into a single string?
Use the join method of the empty string to join all of the strings together with the empty string in between, like so:
This works in JavaScript or Ruby, why not in Python?But in Python the join method is on the str class:It is a little weird, isn't it? Why join is not a method in the list object like in JavaScript or other popular script languages? It is one example of how the Python community thinks. Since join is returning a string, it should be placed in the string class, not on the list class, so the str.join(list) method means: join the list into a new string using str as a separator (in this case str is an empty string). Somehow I got to love this way of thinking after a while. I can complain about a lot of things in Python design, but not about its coherence.
If your Python interpreter is old (1.5.2, for example, which is common on some older Linux distributions), you may not have join() available as a method on any old string object, and you will instead need to use the string module. Example:The string b will be 'abcd'.
This may be the fastest way:
The reduce function also works

use join with empty separatoror use reduce with add operator
If the list contains numbers, you can use map() with join().Eg:
You could also use operator.concat() like this:If you're using Python 3 you need to prepend:since the builtin reduce() has been removed from Python 3 and now lives in functools.reduce(). 
besides str.join which is the most natural way, a possibility is to use io.StringIO and abusing writelines to write all elements in one go:prints:When using this approach with a generator function or an iterable which isn't a tuple or a list, it saves the temporary list creation that join does to allocate the right size in one go (and a list of 1-character strings is very expensive memory-wise).If you're low in memory and you have a lazily-evaluated object as input, this approach is the best solution.




Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
