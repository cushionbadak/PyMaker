Natural Text
I have strings containing numbers with their units, e.g. 2GB, 17ft, etc.I would like to separate the number from the unit and create 2 different strings. Sometimes, there is a whitespace between them (e.g. 2 GB) and it's easy to do it using split(' ').When they are together (e.g. 2GB), I would test every character until I find a letter, instead of a number. Is there a better way to do it?Thanks

You can break out of the loop when you find the first non-digit characterIf you have negative and decimals:
You could use a regular expression to divide the string into groups:
tokenize can help:
You should use regular expressions, grouping together what you want to find out:Change the regex according to what you want to parse. If you're unfamiliar with regular expressions, here's a great tutorial site.

How about using a regular expressionhttp://python.org/doc/1.6/lib/module-regsub.html
For this task, I would definitely use a regular expression:In the RE pattern, \s means "whitespace", \d means "digit", \S means non-whitespace; * means "0 or more of the preceding", + means "1 or more of the preceding, and the parentheses enclose "capturing groups" which are then returned by the groups() call on the match-object.  (thematch is None if the given string doesn't correspond to the pattern: optional whitespace, then one or more digits, then optional whitespace, then one or more non-whitespace characters).
A regular expression.This will give you a number (integer or fixed point; too hard to disambiguate scientific notation's "e" from a unit prefix) with an optional sign, followed by the units, with optional whitespace.You can use re.compile() if you're going to be doing a lot of matches.
This uses an approach which should be a bit more forgiving than regexes. Note: this is not as performant as the other solutions posted.
SCIENTIFIC NOTATIONThis regex is working well for me to parse numbers that may be in scientific notation, and is based on the recent python documentation about scanf:https://docs.python.org/3/library/re.html#simulating-scanf
try the regex pattern below. the first group (the scanf() tokens for a number any which way) is lifted directly from the python docs for the re module.


Answer URL
https://docs.python.org/3/library/re.html#simulating-scanf
