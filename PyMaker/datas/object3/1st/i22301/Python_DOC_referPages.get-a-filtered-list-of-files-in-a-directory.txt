Natural Text
I am trying to get a list of files in a directory using Python, but I do not want a list of ALL the files.What I essentially want is the ability to do something like the following but using Python and not executing ls.If there is no built-in method for this, I am currently thinking of writing a for loop to iterate through the results of an os.listdir() and to append all the matching files to a new list.However, there are a lot of files in that directory and therefore I am hoping there is a more efficient method (or a built-in method).
glob.glob('145592*.jpg')
glob.glob() is definitely the way to do it (as per Ignacio). However, if you do need more complicated matching, you can do it with a list comprehension and re.match(), something like so:More flexible, but as you note, less efficient.
Keep it simple:I prefer this form of list comprehensions because it reads well in English.I read the fourth line as:  For each fn in os.listdir for my path, give me only the ones that match any one of my included extensions.It may be hard for novice python programmers to really get used to using list comprehensions for filtering, and it can have some memory overhead for very large data sets, but for listing a directory and other simple string filtering tasks, list comprehensions lead to more clean documentable code.The only thing about this design is that it doesn't protect you against making the mistake of passing a string instead of a list.  For example if you accidentally convert a string to a list and end up checking against all the characters of a string, you could end up getting a slew of false positives.But it's better to have a problem that's easy to fix than a solution that's hard to understand.
Another option:https://docs.python.org/3/library/fnmatch.html
use os.walk to  recursively list your files
Preliminary codeSolution 1 - use "glob"Solution 2 - use "os" + "fnmatch"Variant 2.1 - Lookup in current dirVariant 2.2 - Lookup recursiveResultSolution 3 - use "pathlib"Notes:Tested on the Python 3.4The module "pathlib" was added only in the Python 3.4The Python 3.5 added a feature for recursive lookup with glob.globhttps://docs.python.org/3.5/library/glob.html#glob.glob. Since my machine is installed with Python 3.4, I have not tested that.
you might also like a more high-level approach (I have implemented and packaged as findtools):can be installed with
This will give you a list of jpg files with their full path. You can replace x[0]+"/"+f with f for just filenames. You can also replace f.endswith(".jpg") with whatever string condition you wish.
Filenames with "jpg" and "png" extensions in "path/to/images":
You can use subprocess.check_ouput() asOf course, the string between quotes can be anything you want to execute in the shell, and store the output.
Filter with glob module:Import globWild Cards:Fiter extension .txt:A single characterNumber RangesAlphabet Ranges


Answer URL
https://docs.python.org/3/library/fnmatch.html
