Natural Text
In Python, what are the differences between the urllib, urllib2, and requests module? Why are there three? They seem to do the same thing...
I know its been said already, but I'd highly recommend the Requests python package:http://docs.python-requests.org/en/latest/index.htmlIf you've used languages other than python, you're probably thinking urllib and urllib2 are easy to use, not much code, and highly capable, that's how I used to think.  But the Requests package is so unbelievably useful and short that everyone should be using it.First, it supports a fully restful API, and is as easy as:Regardless of whether GET/POST you never have to encode parameters again, it simply takes a dictionary as an argument and is good to go.Plus it even has a built in json decoder (again, i know json.loads() isn't a lot more to write, but this sure is convenient):Or if your response data is just text, use:This is just the tip of the iceberg. This is the list of features from the requests site:International Domains and URLsKeep-Alive & Connection PoolingSessions with Cookie PersistenceBrowser-style SSL VerificationBasic/Digest AuthenticationElegant Key/Value CookiesAutomatic DecompressionUnicode Response BodiesMultipart File UploadsConnection Timeouts.netrc supportList itemPython 2.6—3.4Thread-safe.
urllib2 provides some extra functionality, namely the urlopen() function can allow you to specify headers (normally you'd have had to use httplib in the past, which is far more verbose.) More importantly though, urllib2 provides the Request class, which allows for a more declarative approach to doing a request:Note that urlencode() is only in urllib, not urllib2.There are also handlers for implementing more advanced URL support in urllib2.  The short answer is, unless you're working with legacy code, you probably want to use the URL opener from urllib2, but you still need to import into urllib for some of the utility functions.Bonus answerWith Google App Engine, you can use any of httplib, urllib or urllib2, but all of them are just wrappers for Google's URL Fetch API. That is, you are still subject to the same limitations such as ports, protocols, and the length of the response allowed. You can use the core of the libraries as you would expect for retrieving HTTP URLs, though.
urllib and urllib2 are both Python modules that do URL request related stuff but offer different functionalities.1) urllib2 can accept a Request object to set the headers for a URL request, urllib accepts only a URL.2) urllib provides the urlencode method which is used for the generation of GET query strings, urllib2 doesn't have such a function. This is one of the reasons why urllib is often used along with urllib2.Requests - Requests’ is a simple, easy-to-use HTTP library written in Python.1) Python Requests encodes the parameters automatically so you just pass them as simple arguments, unlike in the case of urllib, where you need to use the method urllib.encode() to encode the parameters before passing them.2) It automatically decoded the response into Unicode.3) Requests also has far more convenient error handling.If your authentication failed, urllib2 would raise a urllib2.URLError, while Requests would return a normal response object, as expected. All you have to see if the request was successful by boolean response.okFor example reference - https://dancallahan.info/journal/python-requests/
urllib2.urlopen accepts an instance of the Request class or a url, whereas urllib.urlopen only accepts a url.A similar discussion took place here:http://www.velocityreviews.com/forums/t326690-urllib-urllib2-what-is-the-difference.html
I like the urllib.urlencode function, and it doesn't appear to exist in urllib2. 
One considerable difference is about porting Python2 to Python3. urllib2 does not exist for python3 and its methods ported to urllib.So you are using that heavily and want to migrate to Python3 in future, consider using urllib.However 2to3 tool will automatically do most of the work for you.
Just to add to the existing answers, I don't see anyone mentioning that python requests is not a native library. If you are ok with adding dependencies, then requests is fine. However, if you are trying to avoid adding dependencies, urllib is a native python library that is already available to you.
You should generally use urllib2, since this makes things a bit easier at times by accepting Request objects and will also raise a URLException on protocol errors. With Google App Engine though, you can't use either. You have to use the URL Fetch API that Google provides in its sandboxed Python environment.
To get the content of a url:It's hard to write Python2 and Python3 and request dependencies code for the responses because they urlopen() functions and requests.get() function return different types:Python2 urllib.request.urlopen() returns a http.client.HTTPResponsePython3 urllib.urlopen(url) returns an instanceRequest request.get(url) returns a requests.models.Response
A key point that I find missing in the above answers is that urllib returns an object of type <class http.client.HTTPResponse> whereas requests returns <class 'requests.models.Response'>.Due to this, read() method can be used with urllib but not with requests.P.S. : requests is already rich with so many methods that it hardly needs one more as read() ;>


Answer URL
https://docs.python.org/3/library/urllib.request.html
