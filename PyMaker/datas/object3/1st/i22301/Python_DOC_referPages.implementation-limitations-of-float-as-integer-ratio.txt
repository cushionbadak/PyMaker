Natural Text
Recently, a correspondent mentioned float.as_integer_ratio(), new in Python 2.6, noting that typical floating point implementations are essentially rational approximations of real numbers. Intrigued, I had to try Ï€:I was mildly surprised not to see the more accurate result due to Arima,:For example, this code:produces this output:    Certainly, the result is correct given the precision afforded by 64-bit floating-point numbers, but it leads me to ask: How can I find out more about the implementation limitations of as_integer_ratio()? Thanks for any guidance.Additional links: Stern-Brocot tree and Python source.
The algorithm used by as_integer_ratio only considers powers of 2 in the denominator. Here is a (probably) better algorithm.
May I recommend gmpy's implementation of the Stern-Brocot tree:again, the result is "correct within the precision of 64-bit floats" (53-bit "so-called" mantissas;-), but:...gmpy's precision is obtained so much cheaper (in terms of sum of numerator and denominator values) than Arima's, much less Python 2.6's!-)
You get better approximations usingFractions are included since maybe version 3.0.However, math.pi doesn't have enough accuracy to return a 30 digit approximation.


Answer URL
https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-long-complex
