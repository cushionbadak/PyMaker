Natural Text
I have a python script, which is executing again 4-5 python scripts.For performance reasons i want to use same interpreter for executing all the script.How could I handle this issue?
The obvious solution (which may require a little tweaking) is to just call the main function of each script from a master script.  E.g., if script1.py contains:put in master.pyYou can continue this pattern for as many scripts as you want.
Maybe you're looking for the execfile function in Python 2.x.In Python 3 it was removed, but there are simple alternatives.
I wrote a package to execute multiple scripts from the same interpreter (sequentially not simultaneously).Installation:Usage:You can specify module paths or module names.You may be able to run scripts at the 'same time' on using the  runpy stdlib module (for python3) and threading stdlib module. Where you call runpy.run_path or runpy.run_module in separate threads, but you will only see performance benefits if the modules are IO bound and not CPU bound.Using multiprocessing or os.system will spawn separate interpreters for each script, so the modules wouldn't be running in the same interpreter.
The currently executing interpreter is available in sys.executable. You can just pass that explicitly to subprocess.Popen as the first argument, or pass it as the 'executable' argument.
I don't think this is recommended, but worst case scenario you could make the system 'run' each script from within another:


Answer URL
https://docs.python.org/3/library/runpy.html
https://docs.python.org/3/library/threading.html
