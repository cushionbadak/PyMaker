Natural Text
I wasn't aware of this, but apparently the and and or keywords aren't operators.  They don't appear in the list of python operators.  Just out of sheer curiosity, why is this?  And if they aren't operators, what exactly are they?
Because they're control flow constructs. Specifically:if the left argument to and evaluates to False, the right argument doesn't get evaluated at allif the left argument to or evaluates to True, the right argument doesn't get evaluated at allThus, it is not simply a matter of being reserved words. They don't behave like operators, since operators always evaluate all of their arguments.You can contrast this with bitwise binary operators which, as the name implies, are operators:As you see, the bitwise OR (|) evaluates both its arguments. The or keyword, however, doesn't evaluate its right argument at all when the left argument evaluates to True; that's why no ZeroDivisionError is raised in the second statement.
Python does not currently provide any 'xxx' special methods corresponding to the 'and', 'or' and 'not' boolean operators. In the case of 'and' and 'or', the most likely reason is that these operators have short-circuiting semantics, i.e. the second operand is not evaluated if the result can be determined from the first operand. The usual technique of providing special methods for these operators therefore would not work.Source: PEP 335PEP 335 talks about adding the ability to have overloadable operators, and discusses this issue a bit. 
They're classifying them as keywords earlier in the document.
They're keywords, because they're reserved identifiers, not special tokens of symbols.
They can't be redefined to support type-specific operations, so they don't fall under the scope of the other operators.
The list you're looking at is in the section of the docs describing Python's lexical structure: what kinds of tokens Python code is composed of. In terms of the lexical structure, all tokens with the structure of an identifier are classified as identifiers or keywords, regardless of their semantic role. That includes all tokens made of letters.and and or appear in the list of keyword tokens rather than the list of operator tokens because they are composed of letters:If they were spelled && and || instead of and and or, they would have appeared in the list of operator tokens.In sections of the docs that aren't talking about the lexical structure, and and or are considered operators. For example, they're listed under the Operator column in the operator precedence table.


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#keywords
https://docs.python.org/3/reference/expressions.html#operator-precedence
https://docs.python.org/3/reference/expressions.html#operator-precedence
