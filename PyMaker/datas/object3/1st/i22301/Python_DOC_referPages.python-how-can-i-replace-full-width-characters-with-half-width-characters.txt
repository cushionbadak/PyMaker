Natural Text
If this was PHP, I would probably do something like this:I have tried the .translate function in python and it indicates that the arrays are not of the same size.  I assume this is due to the fact that the individual characters are encoded in utf-8.  Any suggestions? 
The built-in unicodedata module can do it:The “NFKC” stands for “Normalization Form KC [Compatibility Decomposition, followed by Canonical Composition]”, and replaces full-width characters by half-width ones, which are Unicode equivalent.Note that it also normalizes all sorts of other things at the same time, like separate accent marks and Roman numeral symbols.
In Python3, you can use the following snippet. It made a map between all ascii characters and its corresponding fullwidth character. Best of all, this doesn't need you to hard type ascii sequence, which is quite error prone.Also, with same logic, you can convert halfwidth characters to fullwidth character, the following code shows the trick:Note: this two snippets only consider ascii characters, and does not convert any japanese/korean fullwidth character.For completeness, from wikepedia:Range U+FF01–FF5E reproduces the characters of ASCII 21 to 7E as  fullwidth forms, that is, a fixed width form used in CJK  computing. This is useful for typesetting Latin characters in a CJK  environment. U+FF00 does not correspond to a fullwidth ASCII 20  (space character), since that role is already fulfilled by U+3000  "ideographic space."Range U+FF65–FFDC encodes halfwidth forms of Katakana and Hangul  characters.Range U+FFE0–FFEE includes fullwidth and halfwidth symbols.And more, python2 solution can refer to gist/jcayzac
I don't think there's a built-in function to do multiple replacements in one pass, so you'll have to do it yourself.One way to do it:Or using a dictionary:Or finally, using regex (and this might actually be the fastest):
Using the unicode.translate method:It requires a mapping of code points as numbers, not characters. Also, using u'unicode literals' leaves the values unencoded.
Regex approach
In Python 3, cleanest is to use str.translate and str.maketrans:In Python 2, str.maketrans is instead string.maketrans and doesn’t work with Unicode characters, so you need to make a dictionary, as Josh Lee notes above.


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.translate
https://docs.python.org/3/library/stdtypes.html#str.maketrans
