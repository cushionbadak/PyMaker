Natural Text
Why does this datetime not have any timezone info given that it is explicitly a UTC datetime?I would expect that this would contain tzinfo.
That means it is timezone naive, so you can't use it with datetime.astimezoneyou can give it a timezone like thisnow you can change timezonesTo get the current time in a given timezone, you could pass tzinfo to datetime.now() directly:It works for any timezone including those that observe daylight saving time (DST) i.e., it works for timezones that may have different utc offsets at different times (non-fixed utc offset). Don't use tz.localize(datetime.now()) -- it may fail during end-of-DST transition when the local time is ambiguous.
Note that for Python 3.2 onwards, the datetime module contains datetime.timezone. The documentation for datetime.utcnow() says:An aware current UTC datetime can be obtained by calling datetime.now(timezone.utc).So you can do:
The standard Python libraries don't include any tzinfo classes (but see pep 431). I can only guess at the reasons. Personally I think it was a mistake not to include a tzinfo class for UTC, because that one is uncontroversial enough to have a standard implementation.Edit: Although there's no implementation in the library, there is one given as an example in the tzinfo documentation.To use it, to get the current time as an aware datetime object:There is datetime.timezone.utc in Python 3.2+:
The pytz module is one option, and there is another python-dateutil, which although is also third party package, may already be available depending on your other dependencies and operating system.I just wanted to include this methodology for reference- if you've already installed python-dateutil for other purposes, you can use its tzinfo instead of duplicating with pytzI tend to agree that calls to utcnow should include the UTC timezone information. I suspect that this is not included because the native datetime library defaults to naive datetimes for cross compatibility.  
Julien Danjou wrote a good article explaining why you should never deal with timezones. An excerpt:Indeed, Python datetime API always returns unaware datetime objects,  which is very unfortunate. Indeed, as soon as you get one of this  object, there is no way to know what the timezone is, therefore these  objects are pretty "useless" on their own.Alas, even though you may use utcnow(), you still won't see the timezone info, as you discovered.Recommendations:Always use aware datetime objects, i.e. with timezone information. That  makes sure you can compare them directly (aware and unaware datetime  objects are not comparable) and will return them correctly to users.  Leverage pytz to have timezone objects. Use ISO 8601 as the input and  output string format. Use datetime.datetime.isoformat() to return  timestamps as string formatted using that format, which includes the  timezone information.If you need to parse strings containing ISO 8601 formatted timestamps,  you can rely on iso8601, which returns timestamps with correct  timezone information. This makes timestamps directly comparable.
To add timezone information in Python 3.2+

UTC dates don't need any timezone info since they're UTC, which by definition means that they have no offset.


Answer URL
https://docs.python.org/3/library/datetime.html
https://docs.python.org/3/library/datetime.html#datetime.timezone
https://docs.python.org/3/library/datetime.html#datetime.datetime.utcnow
https://docs.python.org/3/library/datetime.html#datetime.datetime.now
https://docs.python.org/3/library/datetime.html#datetime.timezone.utc
