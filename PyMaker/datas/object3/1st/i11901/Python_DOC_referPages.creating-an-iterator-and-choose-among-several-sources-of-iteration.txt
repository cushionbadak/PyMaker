Natural Text
I want to create an Iterator that would have several "sources" of objects to iterate. I would like to be able to give its __next__() method an optional keyword argument that would offer the possibility to choose the source (no keyword argument would mean, just choose a source randomly).Using __next__() causes problems (see below), so as a workaround I've written this unsatisfying code:Problem is, if I want to write def __next__(self, **kwargs): to make infinite_iterator a real Iterator, then of course I want to write:but get an error (2d line):I thought this call next(S, choice=1) would use the __next__() function defined in the object. Because of this error, I think that on one hand it actually does not. This could be expectable because it's not exactly a redefinition, as infinite_iterator does not inherit from an "Iterator object" (as far as I understand, there's no such object). But on another hand, if I call only next(S) it works, and in this case, my __next__() method is really called (it chooses randomly a list to iterate over).Finally, is there a solution to realize such an Iterator?
Write a generator (technically a coroutine) and use send to pass in your choices:The way this works is every time you call send, that value gets passed in to the option variable which is used to make the selection for the next iteration of the while loop. You'll have to start it up by calling next at least once so it hits the first yield statement, but after that it'll work both ways (use next or send(None) for a full random choice, or send(option) for a specific source.


Answer URL
https://docs.python.org/3/reference/expressions.html#generator-iterator-methods
