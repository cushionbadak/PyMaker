Natural Text
GoalI'd like to make my curses Python application display its output on a Linux machine's first physical console (TTY1) by adding it to /etc/inittab, reloading init with telinit q and so on.I'd like to avoid a hacky way of using IO redirection when starting it from /etc/inittab with:What I'm after is doing it natively from within my app, similar to the way getty does it, i.e. you use a command line argument to tell it on which TTY to listen to:Example codeFor simplicity, let's say I've written this very complex app that when invoked, prints some content using ncurses routines.The code I already have does everything I need, except that it only shows its output on the terminal it's run from. When invoked from inittab without the hacky redirection I mentioned above, it works but there's no output on TTY1. I know that init doesn't redirect input and output by itself, so that's expected.How would I need to modify my existing code to send its output to the requested TTY instead of STDOUT?PS. I'm not asking how to add support for command line arguments, I already have this but removed it from the code sample for brevity.
This is rather simple. Just open the terminal device once for input and once for output; then duplicate the input descriptor to the active process' file descriptor 0, and output descriptor over file descriptors 1 and 2. Then close the other handles to the TTY:I tested this with the cmd module running on TTY6:Works perfectly. With curses it is apparent from their looks that something is missing: TERM environment variable:Execute all these statements before even importing curses and it should work.


Answer URL
https://docs.python.org/3/library/cmd.html
