Natural Text
I am trying to compare two strings and add one of the strings to a list if they are almost equal (differ by a single letter). What would be the fastest way to do this as my set of words is over 90k and doing this often takes too long?EDIT: one of the words (comparison_word in code below) does not change.EDIT2: the words must be of equal lengthThis is my current code:
The following searches my dictionary of 61K words in about 25 msec.  Presuming that the list of strings is in a file, one string per line, read it in as one long string and use a regular expression to search the string for matches.search() takes a word like 'what' and turns it into a regular expression like this:And then scans all the words and find all the near misses--at C-speed.
You might find zip is a more efficient than indexing:Demo:
The idea is to reduce the amount of work being done:Some notes:The value of len(comparison_word) needs to be computed only once (ever).The value of len(word) needs to computed once (per iteration of the loop).You know you can stop looking at a word when amount reaches the value 2 (or more - in any case that word can no longer be part of the result).It may be worth reading this part of the Python documentation regarding the continue and break statements which are both used in the code.
Haven't done exhaustive testing, but if comparison_word is not too long (fewer than 6 letters), and your set_of_words can change, then it might be worth it to compute all acceptable words, store those in a set, a simply iterate through set_of_words and test for word in acceptable_words. If not, here's my take on your code:Essentially: for every word, once you encounter an different letter, different_letter_exists is set to True. If you encounter it again, you break out of the loop. A new word is only added if i == length, which only happens if enumerate gets all the way to the end, which only happens if only one different letter exists. Good luck :)


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops
