Natural Text
I have 2 lists: a = ['5', '2', '3', '4'], and b = ['1', '6', '7', '5']. Using Python 2, how can I compare each list element in a to each element in b? (i.e. is a[0] == b[0], is a[0] == b[1], etc).I know that I could just write out numerous if statements, but I hope that there is a more elegant way to do this.After checking each list element, I want to know how many times a shared value was found (in my example lists above, it would be one time, '5').EDIT: This is not a duplicate, b/c i am comparing two different lists to each other, while the possible duplicate dealt with only 1 list.
The count() method of list may help:
Probably faster for big inputs than eugene y's, as it only needs to iterate over b once,instead of len(a) times:
If you are only concerned with shared values, and not with their positions or counts, convert them to set and use intersection:If you want to retain how often the elements appear in the intersection, you can also do an intersection of collections.Counter using &Note: This is different from the solution by @GingerPlusPlus in that it is symmetric, i.e. if 5 is present once in list a and twice in list b, then the shared count will be 1, not 2.
This function can compare as many lists you want with equal length. Just call cmp(list1, list2, list3)
This code will produce list of elements which is consist in both a and b listIt might be complex by memory in case if you use big arrays but if you plan to use this data than why not


Answer URL
https://docs.python.org/3/library/stdtypes.html#set.intersection
https://docs.python.org/3/library/collections.html#collections.Counter
