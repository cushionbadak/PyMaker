Natural Text
I am looking for the best way to combine a function with a dictionary that contains more items than the function's inputsbasic **kwarg unpacking fails in this case:After some research I came up with the following approach:My question is: is this a good way of dealing with this problem, or is there a better practice or is there a mechanism in the language that I'm missing perhaps?
How about making a decorator that would filter allowed keyword arguments only:What is nice about this decorator is that it is generic and reusable. And you would not need to change the way you call and use your target functions. 
All of these answers are wrong.It is not possible to do what you are asking, because the function might be declared like this:Now, why on earth would anyone write that?Because they don't know all of the arguments ahead of time.  Here's a more realistic case:And here is some real-world code which actually does this.You might ask why we need the last line.  Why pass arguments to a superclass that doesn't take any?  Cooperative multiple inheritance.  If my class gets an argument it does not recognize, it should not swallow that argument, nor should it error out.  It should pass the argument up the chain so that another class I might not know about can handle it.  And if nobody handles it, then object.__init__() will provide an appropriate error message.  Unfortunately, the other answers will not handle that gracefully.  They will see **kwargs and either pass no arguments or pass all of them, which are both incorrect.The bottom line: There is no general way to discover whether a function call is legal without actually making that function call.  inspect is a crude approximation, and entirely falls apart in the face of variadic functions.  Variadic does not mean "pass whatever you like"; it means "the rules are too complex to express in a signature."  As a result, while it may be possible in many cases to do what you're trying to do, there will always be situations where there is no correct answer.
Your problem lies with the way you defined your function, it should be defined like this - And then inside the function you can iterate over the number of arguments sent to the function like so - You can find more info about using **kwargs in this post - http://pythontips.com/2013/08/04/args-and-kwargs-in-python-explained/
You can also use a decorator function to filter out those keyword arguments that are not allowed in you function. Of you use the signature function new in 3.3 to return your function SignatureFrom Python 3.0 you can use getargspec which is deprecated since version 3.0To apply your decorate an existing function you need to pass your function as argument to your decorator:Demo:To apply your decorator to a newly function simply use @You can also define your function using  arbitrary keywords arguments **kwargs.
I would do something like this:Use:
This is still modifying the original function, but you can create a kwargs bitbucket at the end of the argument list:


Answer URL
https://docs.python.org/3/library/inspect.html#inspect.signature
https://docs.python.org/3/library/inspect.html#inspect.Signature
https://docs.python.org/3/library/inspect.html#inspect.getargspec
