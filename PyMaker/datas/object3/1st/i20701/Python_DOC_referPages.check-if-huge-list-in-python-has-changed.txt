Natural Text
In short: what's the fasted way to check if a huge list in python has changed? hashlib needs a buffer, and building a string representation of that list is unfeasible.In long: I've got a HUGE list of dictionaries representing data. I run a number of analyses on this data, but there are a few meta-data aspects that are required by all of the analyses, ie. the the set of subjects (each dict in the list has a subject key, and at times I just need a list of all subject who have data present in the data set.). So I'd like to implement the following:The question is how to implement the has_changed method, or more specifically, get_hash (each object already has a __hash__ method, but by default it just returns the object's id, which doesn't change when we e.g. append an element to a list).
A more sophisticated approach there would be to work with proxy data elements instead of native lists and dictionaries, which could flag any change to their attributes. To make it more flexible, you could even code a callback to be used in case of any changes.So, assuming you only have to deal with lists and dictionaries on your data structure - we can work with classes inheriting from dict and list with a callback when any data changing method on the object is accessed The full list of methods is in http://docs.python.org/reference/datamodel.html2017 updateOne does live and learn: native lists can be changed by native methods by calls that bypass the magic methods. The fool proof system is the same approach, but inheriting from collections.abc.MutableSequence instead, nd keeping a native list as an internal attribute of your proxy object.
You can easily get the string representation of any object using the pickle library, and then pass it to hashlib, as you said:So, that's a way, I don't know if it's the fastest way. It will work for arbitrary objects. But, as agf said, in your case it would certainly be more efficient if you could use a variable has_changed that you modify each time you actually modify data.
hashlib needs a buffer, and building a string representation of that  list is unfeasible.You can update hash in many steps:So, you don't need to convert all the list to a string representation. You just iterate over it, converting to string only one item and calling update.


Answer URL
https://docs.python.org/3/library/collections.abc.html
