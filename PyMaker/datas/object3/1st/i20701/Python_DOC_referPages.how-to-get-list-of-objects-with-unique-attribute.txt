Natural Text
BackgroundI have a list. This list has many objects. Each object has an id. Now the objects are of different types.where ProblemI want a list of unique objects based on the object.id. Something like this:(This does not work. But I want something like this)
This works because set.add returns None, so the expression in the list comprehension always yields obj, but only if obj.id has not already been added to seen. (The expression could only evaluate to None if obj is None; in that case, obj.id would raise an exception. In case mylist contains None values, change the test to if obj and (obj.id not in seen))Note that this will give you the first object in the list which has a given id. @Abhijit's answer will give you the last such object.Update:Alternatively, an ordereddict could be a good choice:
How about using dict (since its keys are unique)?Assuming we havethen list with Objects unique by id field can be generated using dict comprehension in Python 3in Python 2.7and in Python <2.7Finally we can write function (Python 3 version)where elements may be any iterable and key is some callable which returns hashable objects from elements (key quals to operator.attrgetter('id') in our particular case).Marcin's answer works fine but don't look Pythonic to me since list comprehension mutates seen object from outer scope, also there is some magic behind using set.add method and comparison its result (which is None) with obj.And final but not less important part:Benchmarkon my machine gives
Given your list of object somelist be something likeYou can do something like this
If you can change the class of the objects, you can add the appropriate methods which are used in set comparison:Output:
You can use the unique_everseen recipe available in the itertools docs. This is also available in 3rd party libraries, e.g. toolz.unique. Note this method will keep the first instance of an object for a given attribute.If a lazy iterator is sufficient, you can omit list conversion.
A fairly simple way to do this would beAnd this should add any id not seen. Time taken is linear on the size of the source list.


Answer URL
https://docs.python.org/3/library/operator.html#operator.attrgetter
https://docs.python.org/3/library/itertools.html#itertools-recipes
