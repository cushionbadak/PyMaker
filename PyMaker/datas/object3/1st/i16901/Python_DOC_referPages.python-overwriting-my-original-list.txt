Natural Text
I am trying to write a piece of code where I know that in my combination of 4 numbers, 3 are in the correct position. I would like to iterate over all 6 possible numbers and create all possible iterations.Essentially, if I have a combination [1,2,3,4] and I know 3 are in the correct position, I would like to generate:[2,2,3,4],[3,2,3,4],[4,2,3,4],[5,2,3,4],[6,2,3,4],[1,1,3,4],[1,3,3,4],[1,4,3,4],[1,5,3,4],[1,6,3,4],[1,2,1,4],etc...I have this piece of code which generates all possible iterations to be [6,6,6,6]I am assuming that every time I create a new combination, even though I am putting it in a temporary list, Python is overwriting it.How can I avoid this without creating a blank list each time and appending as I go?(or is this the only way?)
The easiest way to copy a list is to use a full slice. Change this lineTo thisIf you don't make a copy of the list, either by using a slice or some other way, then you've got two variables pointing to the same list.
You could use itertools.product to generate all possible combinations, and then filter those out where not enough numbers are matching:As for your solution, the problem with it is that you are modifying the original guess. At temp = guess you are only copying a reference to the guess list. So both variables guess and temp reference the same list object. Then later, when you do temp[i] = j, you are changing an item of that list object which both variables reference. So you are changing your original guess there (making all further inspections of guess incorrect). For the same reason, you also keep appending the same object to the guess_list list. To fix this, you have to create a copy of your guess list instead; you can do that using temp = guess[:].
temp = guess is assigning the content of guess to a variable called temp (both variables are pointing to the same object).In order to create an independent copy you should create a new list from guess like so:



Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
