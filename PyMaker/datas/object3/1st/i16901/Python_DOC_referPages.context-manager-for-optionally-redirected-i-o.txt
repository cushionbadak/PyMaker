Natural Text
I'm often faced with the situation that depending on some command line argument, input might either come from a file or standard input. The same goes for output. I really like how context managers in python 3 work, and therefore try to make all my open calls part of some with statement. But in this case, I'm having trouble.is already clumsy, and with both input and output I'd have to cater for four combinations. I would like something easier, e.g.Is there something like this DummyManager in the python standard libraries? Something which implements the context manager protocol, but only to return a fixed value from its __enter__ method? I guess the most likely location for such a class would be contextlib, and since I didn't find anything like this there, perhaps there is no such thing. Are there other elegant solutions you can suggest?
In your case, you could use fileinput module:If args.infile='-' then it uses sys.stdin. If inplace=True parameter then it redirects sys.stdout to the input file. You could pass several filenames. If there are no filenames it uses filenames given at the command-line or stdin.Or you could leave the file as is:It should be fine for most programs where stdout may be used to write the result.To avoid closing sys.stdin / sys.stdout, you could use ExitStack to enable the context managers conditionally:
It's trivial to create one with the @contextlib.contextmanager decorator:That's it; this creates a context manager that does nothing but hand you ob back, and the __exit__ handler does exactly nothing.I'd use it like this:
You don't need a dummy manager in your case.  sys.stdin, being file-like, can be used as a context manager.One thing to note is that when __exit__ing the block, sys.stdin gets closed (while you ordinarily don't need/want to close it yourself), but that shouldn't be a problem. 
Various ArgParse wrappers and replacements now exist which support this nicely.  I like click:This will handle sys.stdin if filename is - and otherwise fall back to the regular open with a close hidden in the context manager's finally part.


Answer URL
https://docs.python.org/3/library/contextlib.html
https://docs.python.org/3/library/fileinput.html
https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack
https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager
