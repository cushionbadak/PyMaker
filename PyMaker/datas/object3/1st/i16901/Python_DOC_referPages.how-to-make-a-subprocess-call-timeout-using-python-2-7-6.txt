Natural Text
This has probably been asked but I cannot find anything regarding a subprocess.call timeout when using python 2.7
A simple way I've always done timeouts with 2.7 is utilizing subprocess.poll() alongside time.sleep() with a delay. Here's a very basic example:If you set x = 600, then your timeout would amount to 10 minutes. While task.poll() will query whether or not the process has terminated. time.sleep(delay) will sleep for 1 second in this case, and then decrement the timeout by 1 second. You can play around with that part to your heart's content, but the basic concept is the same throughout.Hope this helps!subprocess.poll() https://docs.python.org/2/library/subprocess.html#popen-objects
You could install subprocess32 module mentioned by @gps -- the backport of the subprocess module from Python 3.2/3.3 for use on 2.x.  It works on Python 2.7 and it includes timeout support from Python 3.3.subprocess.call() is just Popen().wait() and therefore to interrupt a long running process in timeout seconds:If the child process may end sooner then a portable solution is to use Timer() as suggested in @sussudio's answer:On Unix, you could use SIGALRM as suggested in @Alex Martelli's answer:To avoid using threads and signals here, subprocess module on Python 3 uses a busy loop with waitpid(WNOHANG) calls on Unix and winapi.WaitForSingleObject() on Windows.
You can try to use "easyprocess":https://github.com/ponty/EasyProcessIt has many features that you need like "timeout".
In python 3.3 timeout argument was added.https://docs.python.org/3/library/subprocess.html#subprocess.call


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.call
