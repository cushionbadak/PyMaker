Natural Text
I was handed some code that looks like this:In "header.hpp":In "header_lib.pyx":Later in "header_lib.pyx":I was told this should have no problems, but that is not the case from my experience just now,and as evident in this post: Defining enums in Cython code that will be used in the C part of code. However, it doesn't recognize "val1" by itself either if I write "return val1". What's the correct way to do this?
You can declare a enum in Cython as:orAnd and example could be:When running main() you will see "OPT2" printed. You could pass the variable test to a C or C++ function in the same way as shown here for the cdef function.
After fighting this issue for several hours, I finally found a suitable solution! In fact, this is what I would have expected Cython to do for me.This solution is divided in two components:On one side we have a Cython enum. This enum can either be originated by wrapping C/C++ code in an extern block...... or directly in Cython.On the other we have Python. Since Python 3.4, there is a supported class Enum that emulates that functionality (link to official documentation). Here we should replicate the enum in pure Python:Now we have a fancy python class with the same functionality. In order to interact between the Python and Cython worlds we use:This solution translates Cython/C enums (which in Python are mere ints) into a proper Python Enum class with the same characteristics, and translates the value inside a Python Enum object into the original Cython class. The downside is that you still need to maintain two different pieces of code with the same structure... but you do that all the time with Cython!


Answer URL
https://docs.python.org/3/library/enum.html
