Natural Text
This question already has an answer here:How can I read a function's signature including default argument values?                    8 answers                To keep a couple modules I'm building in Python a bit consistent I want to do some automated code checking. For this I want to check the modules for their functions and the arguments the functions take. I can use hasattr() to check whether the module actually contains the expected functions. So far so good.I now want to see which arguments the functions take. It would be enough to simply see the variable names. I have no idea how I would be able to do this though. Does anybody know how I can get the names of the arguments a function takes?
You can use inspect.getargspec() to see what arguments are accepted, and any default values for keyword arguments.Demo:In Python 3, you want to use inspect.getfullargspec() as this method supports new Python 3 function argument features:inspect.getargspec() should be considered deprecated in Python 3. Python 3.4 adds the inspect.Signature() object:and many more interesting options to play with signatures.


Answer URL
https://docs.python.org/3/library/inspect.html#inspect.getfullargspec
https://docs.python.org/3/library/inspect.html#introspecting-callables-with-the-signature-object
https://docs.python.org/3/library/inspect.html#inspect.getargspec
https://docs.python.org/3/library/inspect.html#inspect.getfullargspec
