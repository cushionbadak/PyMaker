Natural Text
I'm looking to complete such job but have encountered difficulty:I have a huge file of texts. Each line is of the format "AGTCCCGGAT filename" where the first part is a DNA thing.The professor suggests that we break this huge file into many temporary files and use heapq.merge() to sort them. The goal is to have one file at the end which contains every line of the original file and is sorted.My first try was to break each line into a separate temporary file. The problem is that heapq.merge() reports there are too many files to sort. My second try was to break it into temporary files by 50000 lines. The problem is that it seems that it does not sort by line, but by file. for example, we have something like:where the first two lines are from one temp file and the last two lines are from the second file.My code to sort them is as follows: 
Your solution is almost correct. However, each partial file must be sorted before you write them to the disk. Here's a 2-pass algorithm that demonstrates it: First, iterate the file in 50k line chunks, sort the lines in a chunk and then write this sorted chunk into a file. In second pass, open all these files and merge to the output file.


Answer URL
https://docs.python.org/3/library/heapq.html#heapq.merge
