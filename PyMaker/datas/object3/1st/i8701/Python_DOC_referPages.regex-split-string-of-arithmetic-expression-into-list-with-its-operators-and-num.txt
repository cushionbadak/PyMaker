Natural Text
I have made this code, but i don't think it's the best way.The expected output is:m = ['41', '*', '(', '5.5', '+', '6', '-', '(', '8', '/', '2', '^', '3', ')', '-', '7', ')', '-', '1']I think this code has a kind of hardcoding, my doubt is how would you make it in a better way?
using regex findall, you can get your desired result! Regex:therefore,If you are specific about your symbols +\-*^/() then you can usewill give you the desired result!Hope it helps!
This is one way to do it with re.finditer, with this re expression:
Use re.findall with a regex designed to find either numbers or operators.  The number pattern is [0-9.]+ which gets all digits and decimal points.An single-character operator pattern is [*/+\-\^] which gets multiplication, division, addition, subtraction (escaped because - is a special regex character), and exponentation (also escaped because - is a special regex character).For example:The number pattern can be further refined to look for a maximum of a single decimal place. (?:[0-9]+\.[0-9]+)|(?:[0-9]+\.)|(?:\.?[0-9]+).  This can parse the numbers in 3.14 + 42. + .707 + 6.To handle multi-character operators, put them first in a chain (to prevent the single character from matching first).  For example, (?:\*\*|\*|/|\+|\-) would parse the operators in 2 ** 5 / 6 + 7 * 3 - 1.Hope this helps you working your lexer experiments :-)


Answer URL
https://docs.python.org/3/library/re.html#re.finditer
https://docs.python.org/3/library/re.html#re.findall
