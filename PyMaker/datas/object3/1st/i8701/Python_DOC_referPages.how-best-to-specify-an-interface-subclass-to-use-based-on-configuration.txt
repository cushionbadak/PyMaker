Natural Text
I would like to create a single "interface" class (in interface.py) through which I can access an underlying class's functionality, where the class accessed is dependent on a xml config_file setting. Taking connection via ssh, or ftp as an example.I'd have a variable set in my config file such as"INTERFACE": "ssh"Then I'd expect to have code that looks something like this:Then the SSH class would (override?) execute its code defined in its version of connect().If I then change the config setting to config.INTERFACE = "ftp", the same call would "find its way" to the ftp class to establish an ftp connection.Ideally I'd be able to flip between the different version of connect() with my code, simply by setting:I assume this isn't some unachievable thing? I don't even know what to google to find out how to do this! Is this overriding?Any advice would be gratefully received. Just a topic to google would be a starting point. :)
A standard pattern of doing this is something like this:Interface is the abstract base class defining the interface you want to use. Useless on its own, it needs concrete subclasses to implement it.Note that for this to be a useful abstraction and worth the effort, you want to make this more tailored to you applications and provide higher level APIs, such as upload() or get(), or else it's a bit pointless, and you may find it's hard to generalize to different protocols.SSH and FTP both override the upload() method of their superclass (Interface) and so you can call upload() on your Interface instance without worrying about which particular subclass it is.InterfaceForConfigurationValue is a factory function that gives you the correct interface subclass based on the configuration option.In general the most important thing is to ensure that nothing about Interface, SSH or FTP knows or cares what is in the config file, because you may wish to use them elsewhere with a different config system. They just know what they need to do. You add a factory function which is small and contains the knowledge of how to translate your config into a subclass. Note: your factory function doesn't have to be a global function. Often you'll find there are lots of similar bits of linking you need to do between your config system and your code, so you may want to use a class and have the factory as a method on the class. A subclass of ConfigParser is often a good option.


Answer URL
https://docs.python.org/3/library/configparser.html#configparser.ConfigParser
