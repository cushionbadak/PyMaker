Natural Text
When I run the program and put in the values 3, 1, 1 so convert one cup to tablespoons, it uses the TOtbsp function at the bottom. For troubleshooting purposes, I've made it print out four variables before the final result. These variables all print out the correct results,^That's the TOtbsp function, what comes out is this:Convert Cups to: tablespoonsThese are all correct, except the final one, calc. I've tried setting it up a few different ways:As far as I know, all of these, excapt maybe the bottom four, should get the correct answer because both convFactor, dictEnt, and dCallOne all get integers.The full code is below.
In Python 3, input() returns a string (even if the user enters a number), and so convFactor = input('How many?: ') will set the value of convFactor to a string.  Multiplying a string by a number (as happens in calc = convFactor * dictEnt) simply repeats the string that many times, and so you end up with sixteen 1's.  To fix this, use int() to convert convFactor to a number, ideally right after the call to input():
jwodder has answered your question: you need to convert input strings to numbers if you want to perform arithmetic with them. You can do the conversion with int(), but it's better to use float(): that lets the user input decimal numbers.However, your program has a lot of repetition. This is not good design. It makes the program longer than it needs to be, and it makes it harder to read and maintain. Readers have to figure out which bits are supposed to be identical, and which bits are supposed to be different. And when you want to make modifications you have to replicate the modifications to multiple places, which is tedious and error-prone. Please see the Wikipedia article Don't repeat yourself.Here's a more compact version of your program. The main change I made is to put all the separate conversion ratio dictionaries into a dictionary of dictionaries. I use a loop to display the menu of units, rather than printing each one individually. I also use loops to make sure we get a valid FROM unit, a valid amount to convert, and a valid TO unit. This code will run on all major operating systems. It's designed for Python3, but it's easy to modify for Python 2.


Answer URL
https://docs.python.org/3/library/functions.html#input
https://docs.python.org/3/library/functions.html#int
