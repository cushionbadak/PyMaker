Natural Text
As indicated in the documentation, the default value is returned if the iterator is exhausted. However, in the following program, the g(x) function is not exhausted, and I hope that the error from f(x) would not be processed in the next function. What I expect: What I encountered is that the program was running successfully. Can I use an alternating approach to achieve the goal? Or can it be fixed in Python? Edit: The program mentioned above may be modified like this in order to prevent ambiguation. 
next with a default parameter catches the StopIteration no matter the source.The behavior you're seeing is expected, and maybe better understood using this code:Moving to your code - even though the inner use is of next without a default argument, the StopIteration it raised is caught in the outer next with the default argument.If you have a meaningful exception to raise, you should raise a meaningful exception and not StopIteration which indicates the iteration ended (and not erroneously) - which is what next relies on.
g(x) is an iterator that always yields f(x), which yields Nothing, and raises a StopIteration (in f)You can check that next(f(some_value)) does throw an exception when called itself. As will But, you've added the default None, so that g(x) will run, but simply return back None since the iterator is exhausted. If you remove the None, then you see 


Answer URL
https://docs.python.org/3/library/functions.html#next
