Natural Text
I'm attempting to write some python code to detect a monitor changed event in Windows; I'm using pywin32, largely based around code from the pywin32 example. It appears that the placement of PumpWaitingMessages makes a difference; the code below does detect a monitor change (i.e. OnDeviceChange gets run) but the lp argument is 0, so I can't get any useful info from it (i.e. the monitor identifier).However, if I move the while True loop from the very end of the code to the end of the __init__ method, then the lp argument is populated, and I can get the info I want.Any ideas why the placement of the while loop would make a difference?
Although it's part of the borrowed code, I'm going to start with a recommendation of renaming variable filter to something else, because it's shadowing [Python]: filter(function, iterable) (didn't change myself when I edited the post since I couldn't post a comment specifying why I've done it). Also, you might want to add the missing pieces to have a working code snippet: imports, definitions (e.g. GUID_DEVINTERFACE_MONITOR, I browsed Ioevent.h, and I couldn't find neither USB nor display related GUIDs)I suspected 2 things that might be held accountable for this behavior:Mixing PyQt (which has its own windows handling) with plain WinAPI (as I wrote in my comment), and the possibility that one of the 2 might step on the other's toesPython scopes ([Python]:Execution model)I didn't want to install PyQt, so I started exploring the other possibility. I was able to reproduce the same behavior with the original code (that you started from). The problem was that at the end of TestDeviceNotifications, hdev (returned by RegisterDeviceNotification), was going out of scope.The same thing happens here: after exiting __init__, (when messages will start to be sent to the window) hdev will be an invalid handle. To correct this, make it global:declare it at module level (before Foo) like: hdev = Noneinstruct __init__ to operate on the global variable instead of creating a new local one with the same name. Somewhere in __init__, before hdev = win32gui.RegisterDeviceNotification add global hdev, and it will be persistentNote(s):Typically, all created resources should be freed when they're no longer needed. This is what you should do with wc and hwnd. Regarding hdev, [MSDN]: RegisterDeviceNotification function doesn't mention anything about calling CloseHandle (or smth similar) upon it, so I think, it's good


Answer URL
https://docs.python.org/3/library/functions.html#filter
https://docs.python.org/3/reference/executionmodel.html
