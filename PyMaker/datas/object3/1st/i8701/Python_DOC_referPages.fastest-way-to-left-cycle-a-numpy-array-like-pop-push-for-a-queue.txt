Natural Text
With numpy arrays, I want to perform this operation:move x[1],...,x[n-1] to x[0],...,x[n-2] (left shift),write a new value in the last index: x[n-1] = newvalue.This is similar to a pop(), push(newvalue) for a first-in last-out queue (only inverted).A naive implementation is: x[:-1] = x[1:]; x[-1] = newvalue.Another implementation, using np.concatenate, is slower: np.concatenate((x[1:], np.array(newvalue).reshape(1,)), axis=0).Is there a fastest way to do it?
After some experiments, it is clear that:copying is required,and the fastest and simplest way to do that, for nparray (numpy arrays) is a slicing and copying.So the solution is: x[:-1] = x[1:]; x[-1] = newvalue.Here is a small benchmark:But if you don't need to have a fast access to all values in the array, but only the first or last ones, using a deque is smarter.


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
