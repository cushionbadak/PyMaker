Natural Text
This question already has an answer here:OOP: getter/setter methods [duplicate]                    2 answers                If I have a python class that looks like this: I know I can change the path attribute in an instance of the object like this: However, I have seen some code where people use functions to set attributes like this: If I want the user of an instance of the class to be able to change an attribute, it is best practice to have a function for this like in the second example, or to just let them change it manually like the first example?
This depends on the modularity you need in the application.  For overall systems design, it's better to make the user access all of the class attributes through class methods.  This adds a lot of bloat: get/set methods for each attribute, with further methods for actual manipulation.In practical terms, you need to decide how much you can trust your user.  Python tends to code more directly: let the user make mistakes directly.  It's less code for you, and easier for most users.However, consider the volatility of your design.  Do you need to hide the class representation from the user?  Do you need to change it once in a while?  These are excellent reasons to place the internal representation behind the shield of a simple, unchanging interface: that way, you can change the internals without breaking all of your users' implementations.


Answer URL
https://docs.python.org/3/library/functions.html#property
