Natural Text
I have a class that I want to be able to use like this:The basic algorithm for the object creation (in __init__ and/or __new__, I'm not sure) should be something like this:Is there a definitively pythonic way to do this? I've read a few articles that suggest raising an exception instead, but that doesn't seem right, as this is expected behavior. I've seen others suggest using __new__, but how do I then check the database in __new__ to see if the record is valid without also checking in __init__ to set up the instance variables?
Raising an exception would be perfectly valid here. SQLAlchemy, a relatively popular Python ORM, raises a NoResultFound exception if a record was needed but couldn't be found (although this is from a function, not a class instantiation, so perhaps not directly comparable). I don't think it would be unusual at all to do thisâ€”it's not bad form to raise exceptions in __init__!The idea you want to express of "an absence of a value, but not an error" is similar to an Option type, but this isn't really a Pythonic construct. As stated in 'Is there a Python equivalent for Scala's Option or Either?', the Pythonic way is to throw an exception.You shouldn't think of an exception as meaning your program is broken, just that there is a disruption to the expected flow of events in some way. You might like to read 'When and how should I use exceptions?' which gives a few ideas about the common philosophy of exceptions in Python.As commented by idjaw, it's Easier to Ask for Forgiveness than Permission:This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of many try and except statements. The technique contrasts with the LBYL style common to many other languages such as C.You should  assume that the record exists, then handle the error if it doesn't. Python is designed around this, and you'll find that code ends up a lot cleaner if you follow EAFP.
I think that your best method would be to create a factory on top of your class and let the class raise an exception if it was unable to retrieve the correct database records, ie:Please do not use the default Exception class in the above code but instead create an exception for your specific class of module or use one of the builtin exceptions.
The Pythonic thing is not to do this. Doing MyClass(whatever) is instantiating an object; that will by definition always create an instance.One alternative might be to define a factory function, as a classmethod, which can either return an object or not.Now to potentially create your object you can call MyClass.create_maybe(arg1, arg2).


Answer URL
https://docs.python.org/3/glossary.html#term-eafp
https://docs.python.org/3/glossary.html#term-eafp
