Natural Text
I just started to look at using python for XML generation from a csv. I am trying to use ElementTree to do this. But, I am unable to get my desired format.Here is the sample csv data I am using. The original data has about 12 million rows and the full xml resulting from it would have about 38 million rows. Below is my code.I need a format like but am getting the format likeEssentially, I am trying to append to the file when I reach the end of each person's record (indicated by the time string 02:59:00) because if I wait till the entire root tree is constructed then I am running into the memory error problem. Interestingly, the memory usage never goes above 2 gb and the program fails with the memory error issue even when there is still 12 gb of ram left. I have tried to follow the advice here about serializing xml-stream using ElementTree(top).write(sys.stdout) but am unable to operationalize it. I know (kind of) that SAX parsers are better suited for large xml creation. But, I am a bit daunted by it at the moment. Any suggestions or advice will be useful for me.
You've got the right idea, but I think you need to tweek your tools. XML DOM documents like ElementTree aren't intended to be written iteratively. When you did print(prettify(root)), you wrote the entire tree that existed at that point, which was just <plans/>. Instead, you can manually write the xml declaration and an open tag, then you can use a DOM to generate and write each <plan> as a separate document.minidom includes the xml declaration for each tree you write into the document, so you need to switch to a different tool. lxml has a pretty print that works well. You want to write xml to a binary file because the DOM will handle any encoding. I found the sys.stdout needlessly problematic and just write the file directly.You didn't have the csv file mode quite right for python3, so I changed that while I was here.I also fiddled with how you create each  which I think is a bit more clear.
.toprettyxml prints what you give it as an XML document, so it includes the XML preamble.  You are printing a separate document for each "plan".  The first time, you print the empty plans node, so you get <plans/>.  On each iteration through the loop, you clear out the root, add one element to it, and then output the entire root.  So yes, you're outputting the plans element, in its entirety, repeatedly.  And each time it only has one plan in it.  When you use things like tostring and toprettyxml, you're outputting the entire element, not just the opening tag.As you've surmised, you should look at using a SAX approach.  As the name of the minidom library suggests, it is a DOM library.  As the docs for ElementTree say, it is "designed to store hierarchical data structures in memory."  If you don't want to store your data structure in memory all at once, it may not be the best choice.  (It has some facilities for incremental reading, but not writing.)  You could take a look at the xml.sax library.  But you should explore such solutions and ask a more specific question about how to use SAX if and when you have one.


Answer URL
https://docs.python.org/3/library/xml.sax.html
