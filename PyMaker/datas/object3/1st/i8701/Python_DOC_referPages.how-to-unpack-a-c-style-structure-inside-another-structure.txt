Natural Text
I am receiving data via socket interface from an application (server) written in C. The data being posted has the following structure. I am receiving data with a client written in Python.How do I unpack the received data to access my inner data buffer?
Using the struct library is the way to go.  However, you will have to know a bit more about the C program that is serializing the data.  Consider the hdr structure.  If the C program is sending it using the naive approach:Then your client cannot safely interpret the bytes that are sent to it because there is an indeterminate amount of padding inserted between the struct members.  In particular, I would expect three bytes of padding following the PktType member.The safest way to approach sending around binary data is to have the server and client serialize the bytes directly to ensure that there is no additional padding and to make the byte ordering of multibyte integers explicit.  For example:This will ensure that your client can safely decode it using the struct module:If you cannot modify the C code to fix the serialization indeterminacy, then you will have to read the data from the stream and figure out where the C compiler is inserting padding and manually build struct format strings to match using the padding byte format character to ignore padding values.I usually write a decoder class in Python that reads a complete value from the socket.  In your case it would look something like:Mind you that this is untested and probably contains syntax errors but that is how I would approach the problem.
The struct library has all you need to do this.


Answer URL
https://docs.python.org/3/library/struct.html#module-struct
https://docs.python.org/3/library/struct.html#module-struct
https://docs.python.org/3/library/struct.html#module-struct
https://docs.python.org/3/library/struct.html#format-characters
