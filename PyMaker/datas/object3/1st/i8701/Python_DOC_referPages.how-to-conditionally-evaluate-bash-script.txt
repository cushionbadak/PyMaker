Natural Text
To view the installed libraries on an environment I run this code within a Jupyter Python notebook cell : This works, but how to conditionally execute this code ?This is my attempt : But evaluating the cell throws error : To generate the checkbox I'm using ipywidgets : https://github.com/ipython/ipywidgetsUpdate : Running pip freeze within check_call returns 0 results : RunningReturns installed libraries so 0 is not correct.Is subprocess.check_call("pip freeze", shell=True) correct ?Update 2 : This works : 
You can just use the standard Python way:Then your function will work in any Python environment.
The short explanation is that the notebook has interactive commands which are handled by the notebook itself, before the Python interpreter even sees them.  %%bash is an example of such a command; you cannot put this in Python code, because it's not Python.Using bash doesn't actually add anything here per se; using the shell offers many interactive benefits, and of course, in an interactive notebook, offering the user access to the shell is a powerful mechanism for allowing users to execute external processes; but in this particular case, with noninteractive execution, there are no actual benefits from putting the shell between yourself and pip, so you might simply want(Notice the absence of shell=True because we don't need or want the shell here.)If you want the captured exit code or the output from pip freeze they are available as attributes of the returned object p.  See the subprocess.run documentation for details.  Briefly, p.returncode will be 0 if the command succeeded, and the output will be in p.stdout.Older versions of Python had a diverse collection of special-purpose wrappers around subprocess.Popen like check_call, check_output, etc. but these have all been subsumed by subprocess.run in recent versions.  If you need to support Python versions before 3.5, the legacy functions are still available, but they should arguably be avoided in new code.


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.run
