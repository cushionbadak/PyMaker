Natural Text
I am trying to convert the following code written in python 2 to python 3. This python code does TCP port forwarding. It is from this page: http://code.activestate.com/recipes/483730-port-forwarding/Here is what I have:The python 3 version does seem to work. But I am not fully certain if it is written correctly. I am unclear about the threads portion of the code. The python 2 version is using the thread module while the python 3 version is using the threading module. Looking at the python 2 version, it uses locks in the main function. Do I need to use locks in the python 3 version? Another question is, should I be joining the two threads (thread 1 and thread 2) in the server function in the python 3 code?Another question I have regardless of python version is the argument to the server function. I understand that the "settings" variable refers to a list. Why does there need to be a asterisk preceding the "settings" argument? I did take a look at the following page in python documentation https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-listsBut I don't understand why passing the settings list without the asterisk doesn't work.Another question I have is regarding the thread locks in the python 2 code. Why is the lock being acquired twice? I tried removing one of the locks and the program ends immediately after being started.
You could have saved yourself some work by using the commandline tool 2to3 to convert the code to Python 3, like this (from the bash or Windows command line):But let's answer your actual question: Why the star in the definition The function thread.start_new_thread will in effect launch your server() function like this:where arg1, arg2 etc. come from the second argument of start_new_thread. The declaration def server(*settings) collects these arguments back into a single list, settings, which your function goes on to use. If you write def server(settings) (no star), your function is declared to take one argument but will be called with several.
You can use the 2to3 tool that come with python 3 as a standard module.  It does most of the conversations for you.You can use the _thread module in python 3 which is identical to thread in python 2.
You can use the futurize script which convert your py2 code into py3 See : http://python-future.org/quickstart.html#quick-start-guide for installation and http://python-future.org/quickstart.html#to-convert-existing-python-2-code for example
As the author of the code that you referenced from the Python cookbook, it is my pleasure to rewrite the program for Python 3 and introduce you to another useful recipe. Port Forwarding is the older of the two recipes but was a complete program used as a college student at my first college. Module For Running Simple Proxies is a improved version of the original code and was designed for use in other programs rather than being a complete program by itself. The code that follows takes the idea of Port Forwarding and combines it with lessons learned in Module For Running Simple Proxies and lessons learned since then to provide a complete and hopefully easy-to-read program for your use and study:


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists
