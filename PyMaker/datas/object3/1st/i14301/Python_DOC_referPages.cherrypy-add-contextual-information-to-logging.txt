Natural Text
I'm using CherryPy 3.7.0 to build a small web app.My problem is that I can't figure out how to add contextual information to its logging output. Even though I've gone through its docs several times it's not clear how to achieve such thing. I am interested in adding a task attribute in the logger so that in one of my views I should be able to write:How should I do that?Thanks in advance
Reading docsHere is what docs of logging.debug say about extra keyword argument:The third optional keyword argument is extra which can be used to pass a dictionary which is used to populate the __dict__ of the LogRecord created for the logging event with user-defined attributes. These custom attributes can then be used as you like. For example, they could be incorporated into logged messages. For example:I.e. extra is not logged auto-magically -- you need to provide appropriate formatter.And here's CherryPy's routine, cherrypy._cplogging.LogManager.error , which effectively passes data to stdlib's logger: Also take a look at the docstring of cherrypy._cplogging. It explains the expected extension of CherryPy's logging.Writing codeFrom the section above we have consequences. Simple answer is that you can't do it directly. Also @AndrewKloos answer is not actually the answer, because you can't pass a dict in sequence to str.join. Also you can't even pass extra keyword argument, because there's no such formal argument in the signature. Even if you could, giving formatter extra placeholders would result in string interpolation errors in any CherryPy's normal logging (that obviously don't provide any extra keys).Thus the best compromise is just to do:Other options:Create own logger besides error and access logs,Invoke cherrypy.log.error_log.info directlyMonkeypatch cherrypy.log with your subclass of cherrypy._GlobalLogManagerUpdateIntrospect Python logging with logging_tree is nice article (and package) which explains logging hierarchy and message passing on example of CherryPy application.
Try this...Hope this helps!


Answer URL
https://docs.python.org/3/library/logging.html#logging.debug
