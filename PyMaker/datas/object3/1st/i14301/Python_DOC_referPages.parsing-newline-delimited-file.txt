Natural Text
I'm working on a project where I want to parse a text file using Python. The file consists of some data entry in formats of blocks that vary. A new entry is found when there is a new line. This is what I would like to accomplish:Skip the first few lines (first 16 lines)After the 16th line, there is a line break that starts the new data entryRead the following lines until a new line break is hit. Each individual line is appended to a list called data.The list will be passed to a function that handles further processing.Repeat step 3 and 4 until there is no more data in the fileHere is an example of the file:Here is some code I've worked on. It is able to read the first block and append it to a list:How do I make it so that it works for the full file? My assumption was that using "with open", it acted as a "while not end of file". I tried adding a "while True" after skipping the first 16 lines.I have little knowledge of Python's parsing capabilities.Thank you in advanced for any help.
Adding a while True after the initial skipping should definitely work. Of course you have to get all the details right.You could try to extend the approach you already have, with a nested while loop inside the outer loop. But it may be easier to think about it as a single loop. For each line, there's only three things you might have to do:If there is no line, because you're at EOF, break out of the loop, making sure to process the old data (the last block in the file) if there was one first.If it's a blank line, start a new data, making sure to process the old data if there was one first.Otherwise, append to the existing data.So:There are a couple ways you could simplify this further:Use a for line in f: instead of a while loop that repeatedly does f.readline() and checks it.Use groupby to transform the iterator of lines into an iterator of blank-line-separated groups of lines.
In case you are still struggling with this here is an implementation that reads your sample data using itertools.groupby() and a key function search():This will result in a data structure that is a nested list of blocks. Each sublist is separate by the \n grouping in your data file.
The pattern of blocks in your file is they consist of groups of lines terminated by either a blank line or the end of the file. This logic could be encapsulated in a generator function that yielded the blocks of lines from your file iteratively which would simplify the rest of the script. In the following, getlines() is the generator function. Also note that the first 17 lines of the file are skipped to get to the beginning of the first block.Output using your test file:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/library/itertools.html#itertools.groupby
