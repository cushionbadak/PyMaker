Natural Text
what is the correct way to mock os.name?I am trying to unittest some cross-platform code that uses os.name to build platform-appropriate strings. I am running on a Windows machine but want to test code that can run on either posix or windows.I've tried:production_code.pytest_code.pythis fails because os is not in the global scope for the test_code.py. If 'os' is imported in test_code.py then we will always get os.name=='nt'.I've also tried:in the test, but this seems not to work because os.name is an attribute not a method with a return value.EDIT:clarifications in response to commentsThe mock docs (1st paragraph) make it seem like directly monkey patching os.name could get messy if e.g. an assertion gets raisedWe really are only changing a path based on os.name. Whilst tests will be run on windows and posix machines I wanted something that gave full coverage without needing to resource a machine every time a small edit is made.
According to Where to patch you should patch os_name in production_code. By you are creating a os.name's reference in production_code module called os_name: after that (loaded at import time) change os.name have no effect os_name reference. 


Answer URL
https://docs.python.org/3/library/unittest.mock.html#where-to-patch
