Natural Text
Is there an option I can pass open() that will cause an IOerror when trying to write a nonexistent file? I am using python to read and write block devices via symlinks, and if the link is missing I want to raise an error rather than create a regular file. I know I could add a check to see if the file exists and manually raise the error, but would prefer to use something built-in if it exists.Current code looks like this:
Yes.    Specifying the "r" option means the file must exist and you can read.Specifying "+" means you can write and that you will be positioned at the end.https://docs.python.org/3/library/functions.html?#open
Use os.path.islink() or os.path.isfile() to check if the file exists.
Doing the check each time is a nuisance, but you can always wrap open():This is just quick and dirty, so it doesn't allow for usage as: with open_if_exists(...).UpdateThe lack of a context manager was bothering me, so here goes:
I am afraid  you can't perform the check of file existence and raise error using the open() function. Below is the signature of open() in python where name is the file_name, mode is the access mode and buffering to indicate if buffering is to be performed while accessing a file. open(name[, mode[, buffering]])Instead, you can check if the file exists or not.This will return True or False depending on if the file exists. To test a file specifically, you can use this.To test the existence of  both files and directories, you can use:


Answer URL
https://docs.python.org/3/library/functions.html?#open
