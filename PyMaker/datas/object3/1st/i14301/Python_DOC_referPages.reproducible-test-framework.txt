Natural Text
I am looking for a test or integration framework that supports long, costly tests for correctness. The tests should only be rerun if the code affecting the test has changed.Ideally the test framework wouldfind the code of the testproduce a hash of it,run the code and write to an output file with the hash as the nameor skip if that already exists.provide a simple overview what tests succeeded and which failed.It would be OK if the test has to specify the modules and files it depends on.Python would be ideal, but this problem may be high-level enough that other languages would work too.Perhaps there exists already a test or build integration framework I can adapt to fit this behaviour?
Basically you need to track what is the test doing so you can check whether it has changed.Python code can be traced with sys.settrace(tracefunc). There is a module trace that can help with it.But if it is not just Python code - if the tests execute other programs, test input files etc. and you need to watch it for changes too, then you would need tracing on operating system level, like strace, dtrace, dtruss.I've created a small demo/prototype of simple testing framework that runs only tests that changed from last run: https://gist.github.com/messa/3825eba3ad3975840400 It uses the trace module. It works this way:collect tests, each test is identified by nameload test fingerprints from JSON file (if present)for each test:if the fingerprint matches the current bytecode of functions listed in the fingerprint, the test is skippedrun test otherwisetrace it while running, record all functions being calledcreate test fingerprint with function names and bytecode MD5 hashes of each recorded functionsave updated test fingerprints to a JSON fileBut there is one problem: it's slow. Running code while tracing it with trace.Trace is about 40x slower than without tracing. So maybe you will be just better running all tests without tracing :) But if the tracer would be implemented in C like for example it is in the coverage module it should be faster. (Python trace module is not in C.)Maybe some other tricks could help with speed. Maybe you are interested just in some top-level function whether they changed or not, so you don't need to trace all function calls.Have you considered other ways how to speed up expensive tests? Like paralellization, ramdisk (tmpfs)... For example, if you test against a database, don't use the "system" or development one, but run a special instance of the database with lightweight configuration (no prealloc, no journal...) from tmpfs. If it is possible, of course - some tests need to be run on configuration similar to the production.Some test frameworks (or their plugins) can run only the tests that failed last time - that's different, but kind of similar functinality.
This may not be the most efficient way to do this, but this can be done with Python's pickle module.At the end of your file, have it save itself as a pickle.And then at the beginning of your script (after you have pickled it once already), add the code bit that checks it against the pickle.That should work.  It's a little long, but it's pure python and should do what you're looking for.


Answer URL
https://docs.python.org/3/library/sys.html#sys.settrace
https://docs.python.org/3/library/trace.html
