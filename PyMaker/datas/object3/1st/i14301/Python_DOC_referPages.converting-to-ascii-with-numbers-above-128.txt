Natural Text
Simple question, yet should be simple answer ^_^ Looked around and found nothing. I'm using python 3.4 and can convert numbers up to 128 with themethod without trouble. 104 gives me "h", and 73 gives me "I".  However, when I use numbers higher than 128, it gives me the wrong thing. I think it's converting to unicode or something like that? I.e. 193 gives me Á instead of the "bottom" sign (upside down T).
All text in Python 3 is Unicode. ASCII just happens to be a subset of the Unicode standard.So chr(codepoint) always converts to a Unicode character, where the first 128 codepoints also conform to the ASCII standard.I'm not sure what you were expecting for values > 127 as the ASCII standard only contains 128 codepoints. Most codecs in use today are extensions of the ASCII standard; if you expected a specific codec, you need to use bytes and decode from that codec; to use the Windows 1252 codepage you could use:as that codepage defines codepoint 128 as the Euro sign, while the Unicode standard puts that (hex) U+20AC.I think you were looking for Codepage 437 here; a codepage that includes box drawing characters; 193 indeed is an inverted T in that codepage:That's U+2534 BOX DRAWINGS LIGHT UP AND HORIZONTAL in the Unicode standard. To be absolutely clear: codepoints past 127 exist in codepage 437 but are not ASCII.You may want to read up on Unicode and Python in this context:The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) by Joel SpolskyPragmatic Unicode by Ned BatchelderThe Python Unicode HOWTO


Answer URL
