Natural Text
I have a dictionary with name dic in python, where the keys are strings and the corresponding values are integers. Note that 2+3+4+5=14. Now I need to impose an order to this dictionary, say the order is from 'a', to 'b', and then to 'c'.  Then, I randomly generate 3 numbers from the list of intergers from 1 to 14, say, 2, 9, and 10. Then, these 3 numbers would correspond to the keys 'a', 'c', and 'd'.All I can think of is to use dic.keys and dic.values to create two corresponding lists and then calculate the presums and do it in a very trivial way.Is there a default python function to do this?
Maybe you can consider using random.sample like so.From the docs, random.sample returns a k length list of unique elements chosen from the population sequence or set. It is used for random sampling without replacement. Therefore, the largest sample you can  get from a population of size 14 is size 14, and a sample of size 14 is guaranteed to be a permutation of p. Alternatively you can use your method of selecting an integer between 1 and 14 inclusive to make weighted random choices using p like this:or, if you don't need the "index" of the selected element:However, note that by using random.choice repeatedly, you will be sampling with replacement (unless you have some mechanism of removing selecting elements from the population). This may be what you want though.To construct your population p dynamically using your dictionary, you can do something like this:Note that the letters will not necessarily be in order as shown above! But anyways, you can sort them easily using Python's built in sorted function.


Answer URL
https://docs.python.org/3/library/random.html#random.sample
