Natural Text
I have a sorted list L and I have a binary search for determining where in the list to insert an element such that the resulting list will still be in order. However L.insert(index,object) needs O(N) time complexity.Is there another data structure for L that will serve the same purpose, but allows for a faster insertion?
Check out the blist module.https://pypi.python.org/pypi/blist/It claims O(log n) insertion.usage:
A shout out to sortedcontainers.SortedList. This will keep your list in order automatically, with a fast insert time.SortedList insertions are amortized O(sqrt n), or O(cbrt n) with different choices of parameters, but it scales better than blist, which is O(log n), because the constants are much better. There is a very in-depth look at performance on their website.Alternatively, you might be wanting a priority queue in which case you can get potentially-faster inserts with the heapq module.


Answer URL
https://docs.python.org/3/library/heapq.html
