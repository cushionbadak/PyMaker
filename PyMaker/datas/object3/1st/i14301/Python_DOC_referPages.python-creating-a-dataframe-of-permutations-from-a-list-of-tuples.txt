Natural Text
I am presently trying to create a massive table of permuted values.Within 'loc' values are permuted. Each value in a 'loc' is from a different population ('pop1', 'pop2', 'pop3'). So far I have have been able to form a massive list of tuples that combines every within 'loc' rearrangement with every between 'loc' rearrangement.I have been trying to get this into a Pandas DataFrame, but I am having trouble iterating through the list of tuples to get into a DataFrame. :(Ideal format:My problem is getting the list of tuples into a dataframe. I need to get every combination possible of 'loc'. E.g. all possible rearrangements of 'locA' with rearrangements of 'locB' with rearrangements of 'locC'. To put this into perspective, for any particular permutation for each population, I'll need to make calculations. For sake of argument, in the above, for 'perABC[0]' and 'permABC[215],' mean for 'pop1' would be 4 and 6 respectively.I'm just not sure how to do this on the fly and currently at my level of coding its easier to anchor things into a dataframe that I can manipulate. I have tried playing with using indexes to pull out population specific info for any given permutation in 'permABC', e.g.Which works, but using this method isn't feasible because you can't do any functions on them; returns TypeError "'int' object is not iterable".Cheers.        
If your trouble is related to performance or memory:I think the problem is that you take a generator itr.permutations and convert the whole thing to a list:Thereby destroying the whole point of a generator.You should process each permutation as it is generated, then throw it away. This will decrease your memory profile dramatically and also speed up your computation.In the above code, each pair does only exist for the duration of the iteration, after that the next pair is generated.


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists
