Natural Text
This question already has an answer here:Python `if x is not None` or `if not x is None`?                    10 answers                Out of these not None tests.Which one is preferable, and why?
is the Pythonic idiom for testing that a variable is not set to None. This idiom has particular uses in the case of declaring keyword functions with default parameters. is tests identity in Python. Because there is one and only one instance of None present in a running Python script/program, is is the optimal test for this. As Johnsyweb points out, this is discussed in PEP 8 under "Programming Recommendations".As for why this is preferred to this is simply part of the Zen of Python: "Readability counts." Good Python is often close to good pseudocode.
From, Programming Recommendations, PEP 8:Comparisons to singletons like None should always be done with  'is' or 'is not', never the equality operators.Also, beware of writing "if x" when you really mean "if x is not None"  -- e.g. when testing whether a variable or argument that defaults to  None was set to some other value.  The other value might have a type  (such as a container) that could be false in a boolean context!PEP 8 is essential reading for any Python programmer.
Either of the latter two, since val could potentially be of a type that defines __eq__() to return true when passed None.
The best bet with these types of questions is to see exactly what python does.  The dis module is incredibly informative:Note that the last two cases reduce to the same sequence of operations (python reads not (val is None) and uses the is not operator).  The first uses the != operator when comparing with None.As pointed out by other answers, using != when comparing with None is a bad idea


Answer URL
https://docs.python.org/3/library/dis.html
