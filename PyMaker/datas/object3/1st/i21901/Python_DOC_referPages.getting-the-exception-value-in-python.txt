Natural Text
If I have that code:How can I get this Exception value (string representation I mean)?Thanks
use strAlso, most exception classes will have an args attribute. Often, args[0] will be an error message.It should be noted that just using str will return an empty string if there's no error message whereas using repr as pyfunc recommends will at least display the class of the exception. My take is that if you're printing it out, it's for an end user that doesn't care what the class is and just wants an error message.It really depends on the class of exception that you are dealing with and how it is instantiated. Did you have something in particular in mind?
Use repr() and The difference between using repr and strUsing repr:Using str:
Another way hasn't been given yet:Output:args[0] might actually not be a message.str(e) might return the string with surrounding quotes and possibly with the leading u if unicode:repr(e) gives the full exception representation which is not probably what you want:editMy bad !!! It seems that BaseException.message has been deprecated from 2.6, finally, it definitely seems that there is still not a standardized way to display exception messages. So I guess the best is to do deal with e.args and str(e) depending on your needs (and possibly e.message if the lib you are using is relying on that mechanism).For instance, with pygraphviz, e.message is the only way to display correctly the exception, using str(e) will surround the message with u''.But with MySQLdb, the proper way to retrieve the message is e.args[1]: e.message is empty, and str(e) will display '(ERR_CODE, "ERR_MSG")'
Even though I realise this is an old question, I'd like to suggest using the traceback module to handle output of the exceptions.Use traceback.print_exc() to print the current exception to standard error, just like it would be printed if it remained uncaught, or traceback.format_exc() to get the same output as a string. You can pass various arguments to either of those functions if you want to limit the output, or redirect the printing to a file-like object.
For python2, It's better to use e.message to get the exception message, this will avoid possible UnicodeDecodeError. But yes e.message will be empty for some kind of exceptions like OSError, in which case we can add a exc_info=True to our logging function to not miss the error.For python3, I think it's safe to use str(e).
If you don't know the type/origin of the error, you can try:But be aware, you'll get pep8 warning:


Answer URL
