Natural Text
I have got an email multipart message object, and I want to convert the attachment in that email message into python file object. Is this possible? If it is possible, what method or class in Python I should look into to do such task?
I don't really understand what you mean by "email multipart message object". Do you mean an object belonging to the email.message.Message class?If that is what you mean, it's straightforward. On a multipart message, the get_payload method returns a list of message parts (each of which is itself a Message object). You can iterate over these parts and examine their properties: for example, the get_content_type method returns the part's MIME type, and the get_filename method returns the part's filename (if any is specified in the message). Then when you've found the correct message part, you can call get_payload(decode=True) to get the decoded contents.If you're programmatically extracting attachments from email messages you have received, you might want to take precautions against viruses and trojans. In particular, you probably ought only to extract attachments whose MIME types you know are safe, and you probably want to pick your own filename, or at least sanitize the output of get_filename.
Here is working solution, messages are form IMAP server
Actually using now-suggested email.EmailMessage API (don't confuse with old email.Message API) it is fairly easy to:Iterate over all message elements and select only attachments  Iterate over just attachmentsLet's assume that you have your message stored as byte content in envelope variable Solution no.1:Solution no.2: (preferable since you don't have to walk through other parts of your message object)Couple things to note:We explicitly tell to use new EmailMessage class in our byte read method through _class=EmailMessage parameterYou can read your email message (aka envelope) from sources such as bytes-like object, binary file object or string thanks to built-in methods in message.Parser API 


Answer URL
https://docs.python.org/3/library/email.message.html#email.message.EmailMessage
https://docs.python.org/3/library/email.compat32-message.html
https://docs.python.org/3/library/email.parser.html
