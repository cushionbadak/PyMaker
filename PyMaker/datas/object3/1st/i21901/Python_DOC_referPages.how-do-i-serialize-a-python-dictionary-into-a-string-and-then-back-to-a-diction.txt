Natural Text
How do I serialize a Python dictionary into a string, and then back to a dictionary? The dictionary will have lists and other dictionaries inside it.
It depends on what you're wanting to use it for. If you're just trying to save it, you should use pickle (or, if youâ€™re using CPython 2.x, cPickle, which is faster).If you want it to be readable, you could use json:json is, however, very limited in what it will support, while pickle can be used for arbitrary objects (if it doesn't work automatically, the class can define __getstate__ to specify precisely how it should be pickled).
Use Python's json module, or simplejson if you don't have python 2.6 or higher.
If you fully trust the string and don't care about python injection attacks then this is very simple solution:If you're more safety conscious then ast.literal_eval is a better bet.
Pickle is great but I think it's worth mentioning literal_eval from the ast module for an even lighter weight solution if you're only serializing basic python types. It's basically a "safe" version of the notorious eval function that only allows evaluation of basic python types as opposed to any valid python code.Example:One benefit is that the serialized data is just python code, so it's very human friendly. Compare it to what you would get with pickle.dumps:The downside is that as soon as the the data includes a type that is not supported by literal_ast you'll have to transition to something else like pickling.
One thing json cannot do is dict indexed with numerals. The following snippetwill throw Because keys are converted to strings. cPickle preserves the numeric type and the unpacked dict can be used right away.
While not strictly serialization, json may be reasonable approach here. That will handled nested dicts and lists, and data as long as your data is "simple": strings, and basic numeric types. 
pyyaml should also be mentioned here. It is both human readable and can serialize any python object.pyyaml is hosted here:https://bitbucket.org/xi/pyyaml
If you are trying to only serialize then pprint may also be a good option. It requires the object to be serialized and a file stream.Here's some code:I am not sure if we can deserialize easily. I was using json to serialize and deserialze earlier which works correctly in most cases.However, in one particular case, there were some errors writing non-unicode data to json.


Answer URL
https://docs.python.org/3/library/pickle.html
https://docs.python.org/3/library/json.html
