Natural Text
I'm trying to remove specific characters from a string using Python. This is the code I'm using right now. Unfortunately it appears to do nothing to the string.How do I do this properly?
Strings in Python are immutable (can't be changed).  Because of this, the effect of line.replace(...) is just to create a new string, rather than changing the old one.  You need to rebind (assign) it to line in order to have that variable take the new value, with those characters removed.Also, the way you are doing it is going to be kind of slow, relatively.  It's also likely to be a bit confusing to experienced pythonators, who will see a doubly-nested structure and think for a moment that something more complicated is going on.Starting in Python 2.6 and newer Python 2.x versions *, you can instead use str.translate, (but read on for Python 3 differences):or regular expression replacement with re.subThe characters enclosed in brackets constitute a character class.  Any characters in line which are in that class are replaced with the second parameter to sub: an empty string.In Python 3, strings are Unicode. You'll have to translate a little differently. kevpie mentions this in a comment on one of the answers, and it's noted in the documentation for str.translate.When calling the translate method of a Unicode string, you cannot pass the second parameter that we used above. You also can't pass None as the first parameter, or even a translation table from string.maketrans. Instead, you pass a dictionary as the only parameter. This dictionary maps the ordinal values of characters (i.e. the result of calling ord on them) to the ordinal values of the characters which should replace them, or—usefully to us—None to indicate that they should be deleted.So to do the above dance with a Unicode string you would call something likeHere dict.fromkeys and map are used to succinctly generate a dictionary containingEven simpler, as another answer puts it, create the dictionary in place:*   for compatibility with earlier Pythons, you can create a "null" translation table to pass in place of None:Here string.maketrans is used to create a translation table, which is just a string containing the characters with ordinal values 0 to 255.
Am I missing the point here, or is it just the following:Put it in a loop:

Easy peasy with re.sub in Python 3.5ExampleExplanationIn regular expressions (regex), | is a logical OR and \ escapes spaces and special characters that might be actual regex commands. sub stands for substitution.
The asker almost had it. Like most things in Python, the answer is simpler than you think.You don't have to do the nested if/for loop thing, but you DO need to check each character individually.
For the inverse requirement of only allowing certain characters in a string, you can use regular expressions with a set complement operator [^ABCabc]. For example, to remove everything except ascii letters, digits, and the hyphen:From the python regular expression documentation:Characters that are not within a range can be matched by complementing  the set. If the first character of the set is '^', all the characters  that are not in the set will be matched. For example, [^5] will match  any character except '5', and [^^] will match any character except  '^'. ^ has no special meaning if it’s not the first character in the  set.


Strings are immutable in Python. The replace method returns a new string after the replacement. Try:
Using filter, you'd just need one lineThis treats the string as an iterable and checks every character if the lambda returns True:
I was surprised that no one had yet recommended using the builtin filter function.Say we want to filter out everything that isn't a number. Using the filter builtin method "...is equivalent to the generator expression (item for item in iterable if function(item))" [Python 3 Builtins: Filter]In Python 3 this returns To get a printed string,I am not sure how filter ranks in terms of efficiency but it is a good thing to know how to use when doing list comprehensions and such.UPDATELogically, since filter works you could also use list comprehension and from what I have read it is supposed to be more efficient because lambdas are the wall street hedge fund managers of the programming function world. Another plus is that it is a one-liner that doesnt require any imports. For example, using the same string 's' defined above,That's it. The return will be a string of all the characters that are digits in the original string.If you have a specific list of acceptable/unacceptable characters you need only adjust the 'if' part of the list comprehension.or alternatively,
Here's my Python 2/3 compatible version. Since the translate api has changed. 

Here's some possible ways to achieve this task:PS: Instead using " ?.!/;:" the examples use the vowels... and yeah, "murcielago" is the Spanish word to say bat... funny word as it contains all the vowels :)PS2: If you're interested on performance you could measure these attempts with a simple code like:In my box you'd get:So it seems attempt4 is the fastest one for this particular input.

How about this:
You can also use a function in order to substitute different kind of regular expression or other pattern with the use of a list. With that, you can mixed regular expression, character class, and really basic text pattern. It's really useful when you need to substitute a lot of elements like HTML ones.*NB: works with Python 3.xIn the function string_cleanup, it takes your string x and your list notwanted as arguments. For each item in that list of elements or pattern, if a substitute is needed it will be done.The output:
My method I'd use probably wouldn't work as efficiently, but it is massively simple. I can remove multiple characters at different positions all at once, using slicing and formatting.Here's an example:This will result in 'removed' holding the word 'this'.Formatting can be very helpful for printing variables midway through a print string. It can insert any data type using a % followed by the variable's data type; all data types can use %s, and floats (aka decimals) and integers can use %d. Slicing can be used for intricate control over strings. When I put words[:3],  it allows me to select all the characters in the string from the beginning (the colon is before the number, this will mean 'from the beginning to') to the 4th character (it includes the 4th character). The reason 3 equals till the 4th position is because Python starts at 0. Then, when I put word[-1:], it means the 2nd last character to the end (the colon is behind the number). Putting -1 will make Python count from the last character, rather than the first. Again, Python will start at 0. So, word[-1:] basically means 'from the second last character to the end of the string.So, by cutting off the characters before the character I want to remove and the characters after and sandwiching them together, I can remove the unwanted character. Think of it like a sausage. In the middle it's dirty, so I want to get rid of it. I simply cut off the two ends I want then put them together without the unwanted part in the middle. If I want to remove multiple consecutive characters, I simply shift the numbers around in the [] (slicing part). Or if I want to remove multiple characters from different positions, I can simply sandwich together multiple slices at once.Examples:removed equals 'cool'.removed equals 'macs'.In this case, [3:5] means character at position 3 through character at position 5 (excluding the character at the final position). Remember, Python starts counting at 0, so you will need to as well.
You have to reassign your str variable:
Below one.. with out using regular expression concept.. 
In Python 3.5e.g.,To remove all the number from the string  
you can use set
Try this one:This method works well in python 3.5.2
Recursive split:s=string ; chars=chars to removeexample: 
Even the below approach worksoutput >> abcde


Answer URL
https://docs.python.org/3/library/functions.html#filter
