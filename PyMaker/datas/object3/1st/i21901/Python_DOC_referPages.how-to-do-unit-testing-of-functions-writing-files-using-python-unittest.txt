Natural Text
I have a Python function that writes an output file to disk.I want to write a unit test for it using Python unittest module.How should I assert equality of files? I would like to get an error if the file content differs from the expected one + list of differences. As in the output of unix diff command.Is there any official/recommended way of doing that?
The simplest thing is to write the output file, then read its contents, read the contents of the gold (expected) file, and compare them with simple string equality.  If they are the same, delete the output file.  If they are different, raise an assertion.This way, when the tests are done, every failed test will be represented with an output file, and you can use a 3rd-party tool to diff them against the gold files (Beyond Compare is wonderful for this).If you really want to provide your own diff output, remember that the Python stdlib has the difflib module.  The new unittest support in Python 3.1 includes an assertMultiLineEqual method that uses it to show diffs, similar to this:
I prefer to have output functions explicitly accept a file handle (or file-like object), rather than accept a file name and opening the file themselves. This way, I can pass a StringIO object to the output function in my unit test, then .read() the contents back from that StringIO object (after a .seek(0) call) and compare with my expected output.For example, we would transition code like thisto code like thisThis approach has the added benefit of making your output function more flexible if, for instance, you decide you don't want to write to a file, but some other buffer, since it will accept all file-like objects.Note that using StringIO assumes the contents of the test output can fit into main memory. For very large output, you can use a temporary file approach (e.g., tempfile.SpooledTemporaryFile).
Then
You could separate the content generation from the file handling. That way, you can test that the content is correct without having to mess around with temporary files and cleaning them up afterward.If you write a generator method that yields each line of content, then you can have a file handling method that opens a file and calls file.writelines() with the sequence of lines. The two methods could even be on the same class: test code would call the generator, and production code would call the file handler.Here's an example that shows all three ways to test. Usually, you would just pick one, depending on what methods are available on the class to test.
Based on suggestions I did the following.I created a subclass MyTestCase as I have lots of functions that need to read/write files so I really need to have re-usable assert method. Now in my tests, I would subclass MyTestCase instead of unittest.TestCase.What do you think about it?


Answer URL
https://docs.python.org/3/library/io.html#io.StringIO
