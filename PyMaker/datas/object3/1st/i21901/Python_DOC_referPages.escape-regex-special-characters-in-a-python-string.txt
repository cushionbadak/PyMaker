Natural Text
Does Python have a function that I can use to escape special characters in a regular expression?For example, I'm "stuck" :\ should become I\'m \"stuck\" :\\.
Use re.escapeRepeating it here:re.escape(string)Return string with all non-alphanumerics backslashed; this is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it.
I'm surprised no one has mentioned using regular expressions via re.sub():Important things to note:In the search pattern, include \ as well as the character(s) you're looking for.You're going to be using \ to escape your characters, so you need to escapethat as well.Put parentheses around the search pattern, e.g. ([\"]), so that the substitutionpattern can use the found character when it adds \ in front of it. (That's what\1 does: uses the value of the first parenthesized group.)The r in front of r'([\"])' means it's a raw string. Raw strings use differentrules for escaping backslashes. To write ([\"]) as a plain string, you'd need todouble all the backslashes and write '([\\"])'. Raw strings are friendlier whenyou're writing regular expressions.In the substitution pattern, you need to escape \ to distinguish it from abackslash that precedes a substitution group, e.g. \1, hence r'\\\1'. To writethat as a plain string, you'd need '\\\\\\1' â€” and nobody wants that.
Use repr()[1:-1]. In this case, the double quotes don't need to be escaped. The [-1:1] slice is to remove the single quote from the beginning and the end.Or maybe you just want to escape a phrase to paste into your program? If so, do this:
As it was mentioned above, the answer depends on your case. If you want to escape a string for a regular expression then you should use re.escape(). But if you want to escape a specific set of characters then use this lambda function:
It's not that hard:
If you only want to replace some characters you could use this:


Answer URL
https://docs.python.org/3/library/re.html#re.escape
