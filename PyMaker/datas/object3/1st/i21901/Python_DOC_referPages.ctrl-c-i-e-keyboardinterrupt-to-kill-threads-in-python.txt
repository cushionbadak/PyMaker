Natural Text
I read somewhere that KeyboardInterrupt exception is only raised in the main thread in Python. I also read that the main thread is blocked while the child thread executes. So, does this mean that CTRL+C can never reach to the child thread. I tried the following code:In this case there is no effect of CTRL+C on the execution. It is like it is not able to listen to the signal. Am I understanding this the wrong way? Is there any other way to kill the thread using CTRL+C?
The problem there is that you are using thread1.join(), which will cause your program to wait until that thread finishes to continue.The signals will always be caught by the main process, because it's the one that receives the signals, it's the process that has threads.Doing it as you show, you are basically running a 'normal' application, without thread features, as you start 1 thread and wait until it finishes to continue.
If you want to have main thread to receive the CTRL+C signal while joining, it can be done by adding timeout to join() call.The following seems to be working (don't forget to add daemon=True if you want main to actually end):
In Python, it is true that KeyboardInterrupt exceptions are raised only in the main thread of each process. But as other answers mentionned, it is also true that the method Thread.join blocks the calling thread, including KeyboardInterrupt exceptions. That is why Ctrl+C seems to have no effect: the execution in the main thread remains blocked at the line thread.join().So a simple solution to your question is to add a timeout argument to Thread.join and put it in an infinite loop in the main thread so that KeyboardInterrup exceptions can be raised after each timeout, and make the child thread daemonic, which means its parent (the main thread here) will kill it when it exits (only non-daemon threads are not killed but joined when their parent exits):But a better solution, if you control the child thread's code, is to inform the child thread to exit gracefully (instead of abruptly like with the first solution), for instance with a threading.Event:


Answer URL
https://docs.python.org/3/library/threading.html#threading.Thread.daemon
