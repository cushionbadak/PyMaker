Natural Text
Is there anyway to run a for loop with a range of over 13 characters?For example:I know this won't work but is there any way it could?
Using xrange can also give you Python int too large to convert to C long Error as the number has to fit into a C long. To overcome this use itertools.count to create you own range:If you wanted to use the same logic with python 3:Or a while loop:A long is 32bit on windows so you are going to hit the limit using xrange with  a number that large. See what-is-the-bit-size-of-long-on-64-bit-windows 
For python 2.7, use xrange (which uses a generator instead of initializing a large list) instead:
If the bounds and step are within the range [-sys.maxsize-1, sys.maxsize), and the total number of elements is <= sys.maxsize, then xrange has you covered.If not, itertools provides the parts you need to completely reimplement xrange (and efficiently too, pushing all the work to the C layer in CPython) for the purposes of generation (xrange is a real object can be generated over and over and supports a few other features; this only generates, and only once per call):The above is obviously slightly overkill to handle steps other than the default 1; it could be simplified dramatically if step support wasn't needed.In CPython (the reference interpreter) this should run more efficiently than using Python level code (which requires repeated byte code execution); once initialized, islice and count do all their work at the C layer, which can dramatically improve performance. For example, compared to the while based loop from the other answer, in ipython running on Python 2.7 on my machine:Even with the overhead of mimicking xranges non-standard argument prototype, the overhead for the count+islice code is only about 50% over xrange, which ain't half bad given that it actually handles scenarios xrange can't.
Remember that there is a limit of minumum and maximum value to store in processor register. It means that not all modules can receive big numbers as arguments.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.count
