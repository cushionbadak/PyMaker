Natural Text
I found this merge sort solutions online and I'm wondering if while loops is the way to go or if there is also a way of using 2 for loops and comparing those.merge([1,2,6,7], [1,3,5,9])
You can easily change while to for:
Python's builtin sorted would actually be pretty efficient at this (since the TimSort it uses takes advantage of existing ordering in subsets of a list). That said, there is a built-in that avoids the need to even construct a new list like sorted (or your solution) would: heapq.mergeIt's designed precisely for scenarios where you have existing lists that are each independently sorted. It's a generator function, so it doesn't require the creation of a new list at all. If you are trying to do this to learn, enjoy yourself, but if this is for "real" code, use the included batteries and avoid reinventing the wheel.
A solution using  using a generator:[1, 1, 2, 3, 5, 6, 7, 9]
If you have a sorted list you bisect.insort the other:


Answer URL
https://docs.python.org/3/library/heapq.html#heapq.merge
