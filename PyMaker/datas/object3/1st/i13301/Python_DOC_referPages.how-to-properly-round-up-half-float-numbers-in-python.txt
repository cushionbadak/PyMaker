Natural Text
I am facing a strange behavior of the round() function:This code prints:I expected the floating values to be always rounded up, but instead, it is rounded to the nearest even number.Why such behavior, and what is the best way to get the correct result?I tried to use the fractions but the result is the same.
The Numeric Types section documents this behaviour explicitly:round(x[, n])x rounded to n digits, rounding half to even. If n is omitted, it defaults to 0.    Note the rounding half to even. This is also called bankers rounding; instead of always rounding up or down (compounding rounding errors), by rounding to the nearest even number you average out rounding errors.If you need more control over the rounding behaviour, use the decimal module, which lets you specify exactly what rounding strategy should be used. For example, to round up from half:
For example:
round() will round either up or down, depending on if the number is even or odd. A simple way to only round up is:If you want this to work properly for negative numbers use:Note, this can mess up for large numbers or really precise numbers like 5000000000000001.0 and 0.49999999999999994.
You can use this:It will round number up or down properly.
The behavior you are seeing is typical IEEE 754 rounding behavior. If it has to choose between two numbers that are equally different from the input, it always picks the even one. The advantage of this behavior is that the average rounding effect is zero - equally many numbers round up and down. If you round the half way numbers in a consistent direction the rounding will affect the expected value.The behavior you are seeing is correct if the objective is fair rounding, but that is not always what is needed.One trick to get the type of rounding you want is to add 0.5 and then take the floor. For example, adding 0.5 to 2.5 gives 3, with floor 3.
Short version: use the decimal module. It can represent numbers like 2.675 precisely, unlike Python floats where 2.675 is really 2.67499999999999982236431605997495353221893310546875 (exactly). And you can specify the rounding you desire: ROUND_CEILING, ROUND_DOWN, ROUND_FLOOR, ROUND_HALF_DOWN, ROUND_HALF_EVEN, ROUND_HALF_UP, ROUND_UP, and ROUND_05UP are all options.
Rounding to the nearest even number has become common practice in numerical disciplines.  "Rounding up" produces a slight bias towards larger results.So, from the perspective of the scientific establishment, round has the correct behavior.
You can use:
Love the fedor2612 answer. I expanded it with an optional "decimals" argument for those who want to use this function to round any number of decimals (say for example if you want to round a currency $26.455 to $26.46).Output:26.4526.46
Here is another solution.It will work as normal rounding in excel.c_round(0.15, 1) -> 0.2, c_round(0.5, 0) -> 1
A classical mathematical rounding without any libraries
The following solution achieved "school fashion rounding" without using the decimal module (which turns out to be slow).e.g. 


Answer URL
https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex
https://docs.python.org/3/library/decimal.html
https://docs.python.org/3/library/decimal.html#rounding-modes
https://docs.python.org/3/library/decimal.html
