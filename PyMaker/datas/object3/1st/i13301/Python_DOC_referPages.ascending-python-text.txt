Natural Text
I have simple problem, i created game and in the end I append score to textfile. Now i have something like this in this file:i want give user possibility to read top 3 scores. Now i created this:I have this:It looks better but how can i show only three best results with place and highest first etc?Something like that:
You can edit your code a little bit to store the scores in a list, then sort them using the sorted function. Then you can just take the first three scores of your sorted list.
As in my answer to a very similar question, the answer could be just used sorted; slicing the result to get only three top scores is trivial.That said, you could also switch to using heapq.nlargest over sorted in this case; it takes a key function, just like sorted, and unlike sorted, it will only use memory to store the top X items (and has better theoretical performance when the set to extract from is large and the number of items to keep is small). Aside from not needing reverse=True (because choosing nlargest already does that), heapq.nlargest is a drop in replacement for sorted from that case.
Depending on what else you might want to do with the data I think pandas is a great option here.  You can load it into pandas like so:Then you can sort by score and show the top threeI recommend reading all of the pandas documentation to see everything it can doEDIT: For easier reading you can do something likeBut this would require you to put column headings in that file first
This will read every line, strip extra whitespace, and split the line, then append it to the scores list. Once all scores have been added, the list gets sorted using the key of the 2nd item in the (name, score) tuple, in reverse, so that the scores run from high-to-low. Then the top_three slices the first 3 items from the sorted scores.
This would work, and depending on your coding style, you could certainly consolidate some of these lines.  For the sake of the example, I simply have the contents of your score file in a string:Result:


Answer URL
https://docs.python.org/3/library/heapq.html#heapq.nlargest
