Natural Text
I was working with matrices in python, and after hours spent trying to debug a program, managed to trace the problem to essentially this code, where all non-zero entries of a matrix are uniformly increased.There's something fundamental I'm missing here. I thought by declaring list1=list2 a new list was created, which the rest of the code modified while keeping list2 unaltered.What's the problem, and how do I fix it?
This code:does not create a new list in list1, it simply binds the name list1 to the same object as list2. Therefore any changes made to the list via name list2 will also be visible via list1.You could use the copy module:list1 will now refer to a copy of list2 and changes to the list will be reflected only via list2.For lists containing more complicated objects such as other lists, copy.deepcopy() will make recursive copies of the nested objects.
The Problem; You are not copying the actual listBy doing list1 = list2 you are merely copying the handle to the list that list1 is referring to, in order to provide an actual copy you must say that this is what you want — explicitly.ExampleThe Solution; Copying all the way downThe problem you are experienced will show up in an additional place since you have lists within a list. In order to make a deep copy all at once it is recommended to use copy.deepcopy, as in the below example.Documentationdocs.python.org - 8.17. copy — Shallow and deep copy operationsFurther readingHow to clone or copy a list in Python?What is the best way to copy a list?Deep copy a list in Python


Answer URL
https://docs.python.org/3/library/copy.html#copy.deepcopy
https://docs.python.org/3/library/copy.html#copy.deepcopy
