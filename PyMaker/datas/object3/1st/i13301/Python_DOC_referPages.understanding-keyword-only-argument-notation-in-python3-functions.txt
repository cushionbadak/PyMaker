Natural Text
I am having some difficulty behaviour of keyword only arguments feature in python3 when used with partial. Other info on keyword only arguments. Here is my code:Here is my understanding of partial:What I understood is in the above example, partial makes the second argument to pow function as the only argument of two_pow.My question is why does the following work:But I get error in this:I know that I can call awesome_function directly by
As per the semantics of the function calls in Python, the rules for the arguments to be passed are as followsAs you see here, the positional arguments should always appear at the beginning of the function calls. They cannot appear anywhere else. When you doit violates the above rule, as you are passing two positional arguments (3 and 5) after a keyword argument (prefix). That is why you are getting a SyntaxError, as Python is not able to parse the function call expression.But, when you are using partial it works, because partial creates a new function object and it stores all the parameters to be passed to it. When you actually invoke the function object returned by partial, it applies all the positional arguments first and then the keyword arguments.
The error you get - SyntaxError: non-keyword arg after keyword arg - is because you tried to send positional arguments (like 3,5) after a keyword argument, that is not a valid syntax, and hence a syntax error. In the function call -It works when using functools.partial because functools.partial knows to put positional arguments before keyword arguments , hence when you call the partial function - g() - with positional arguments , it sends those positional arguments before the keyword argument . Hence, in your case g(3, 5) ==> awesome_function(3, 5, prefix='$') .A simple example to show this -In the above case, when we called ptfunc(20), 20 was passed as positional argument first, and then the keyword argument a=10 was passed, hence it complained that it got multiple values for the argument a. And also as given in the documentation -functools.partial is Roughly equivalent to:


Answer URL
https://docs.python.org/3/glossary.html#term-parameter
https://docs.python.org/3/reference/expressions.html#calls
