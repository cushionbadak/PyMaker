Natural Text
This question already has an answer here:What is the best way to compare floats for almost-equality in Python?                    13 answers                When comparing whether two float in Python, I see code always like this to compare for a small value epsilon, wondering what is the best practices to select the right epsilon value? And what is the scene behind it? Thanks.
The answer is quite complex since you need to know how single or double precision floats are saved (Wikipedia), as a rule of thumb you can use this Table on Wikipedia as reference for choosing epsilon. But there might be some exceptions specially if you don't exactly know if it is float32 or float64 (or for Linux/Mac there are also float96 and float128 around).But I guess best practise would be to use some predefined function like numpy_assert_array_almost_equal (numpy required).I guess everyone is handling it somehow different and as long as you can trust your results every method has its pros and cons. And always keep in mind that floats can go totally haywire with the wrong kind of arithmetic operations. i.e. where small differences of big values are being calculated. And in the end the value of epsilon depends on which precision you need and that should be tested there.
There is an assert function in numpy for this purpose, which uses seven decimal precision by default.
if you are looking for the best epsilon ever, to get best comparison you could use python's sys epsilon using: but if you are more looking to have this epsilon dynamically based on your a and b I would suggest go for: or 
what is the best practices to select the right epsilon value? It depends on the requirements of the application.If it is planning a Earth-bound trajectory for reentry of a spacecraft I am in, I would choose a very small value, like epsilon = (a+b) * 1e-15.If it is projecting the U.S. federal deficit (which inherently has great uncertainties), a much larger epsilon is likely suitable:  epsilon = (a+b) * 0.002.


Answer URL
https://docs.python.org/3/library/sys.html#sys.float_info
