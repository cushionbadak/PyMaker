Natural Text
How can I define a class with await in the constructor or class body?For example what I want:or example with class body attribute:My solution (But I would like to see a more elegant way)
Most magic methods aren't designed to work with async def/await - in general, you should only be using await inside the dedicated asynchronous magic methods - __aiter__, __anext__, __aenter__, and __aexit__. Using it inside other magic methods either won't work at all (as is the case with __init__), or will force you to always use whatever triggers the magic method call in an asynchronous context.Existing asyncio libraries tend to deal with this in one of two ways: First, I've seen the factory pattern used (asyncio-redis, for example):Other libraries use a top-level coroutine function that creates the object, rather than a factory method:The create_pool function from aiopg that you want to call in __init__ is actually using this exact pattern.This at least addresses the __init__ issue. I haven't seen class variables that make asynchronous calls in the wild that I can recall, so I don't know that any well-established patterns have emerged.
I would recommend a separate factory method. It's safe and straightforward. However, if you insist on a async version of __init__(), here's an example:Usage:Output:Explanation:Your class construction must return a coroutine object instead of its own instance. 
Another way to do this, for funsies:
If you're using Python3.7 or newer then you can use asyncio.run:Note, this won't work if you're instantiating Foo in an asynchronous function that's already running. See this blog post for a discussion on how to handle this scenario and a nice discussion of asynchronous programming in Python.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.run
