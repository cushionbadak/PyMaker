Natural Text
I'm quite new to python and programming in general - looking for advice on how to tighten up the below function and shave off some time. Some background information:The requirement is that I gather the Name and ID of every single sub-file/folder in a given Top level folder. The catch, is that the server I request the data from will only ever return the contents of a single folder and the response will always specify whether the returned object is a file or a folder.(pseudocode example, just trying to quickly demonstrate):I then have to iterate over each response and post back to the server to get the next set, in some cases a whole Top level folder may contain up to 15,000 folders and 30,000+ files distributed randomly with some folders containing 1 file and 15 folders and others containing 7 files and 2 more sub folders etc.The API itself responds quite quickly however I don't know how many concurrent connections it can handle so I need to be able to tune and find a sweet spot within the function, at a guess it will handle anywhere from 10-50. My function as it is now:Re-reading this was a good lesson in variable naming... isn't exactly the most concise.. The code itself works fine but as you can probably imagine by now, it takes a long time to churn through thousands of folders... Any advice/direction on how I can turn this into a multi-threaded/processing beast? Thanks for taking the time to read this! EDIT: For clarity, instead of processing the folders in a loop I would like to task them off in threads to have multiple folders and therefore post requests and responses occurring simultaneously so that the whole process takes less time. Right now it just loops through one folder at a time.. hope this clarifies.. EDIT:From Noctis Skytower's suggestion I've made a few small changes to support python 2.7 (Queue vs queue and .clock() instead of perf_counter()). It's SO CLOSE! The issue I'm running into is that when I change the running threads down to 1, it completes perfectly - when I increase it back to 25 for some reason (and randomly) the variable f_id in dfl_worker() is None. Given it works with 1 thread fine I'm guessing this isn't an issue with the suggestion but rather something else in my code so I'll mark it as accepted. Thanks!
May I recommend the following?The first drill_folder_loop is a rewrite of your function that should do the same thing, but the second version should utilize the ThreadPool class so that your folder lists can be processed by up to 25 threads concurrently. Please note that nothing of significance is returned from the threaded version, and it returns almost immediately upon executing if tp.join() is removed at the end.
Its a bit tricky to understand what you want to do with this code.As far as I could understand you would like to make this code multi-threaded; to achieve this you need to find out a routine/taskset which can be performed independent of each other and then you can take it out of the loop and create a independent function of it.Now you can create a set of worker threads and assign them the the work to run the task routine and get your work done.here how you can multi thread the task routine:thread.start_new_thread( task, (someparams, ) )


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy
