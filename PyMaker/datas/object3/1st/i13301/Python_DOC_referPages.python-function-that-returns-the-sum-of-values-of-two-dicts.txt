Natural Text
What function should I make that takes a country identifier from the dictionaries below and returns the sum the values of two dictonaries with unequal length. Also, the dicts should be weighed differently (find info below). In case one of the dicts has no info on a specific country (e.g. dict y does not have any info about the USA), then only one value should be used (e.g. dict x does have info about the USA, thus the output of the function should be 12.1).  For example:Dictionary one:x = {'USA':12.1, 'AUS':11.2, 'IND':10.3}Dictionary two:y = {'AUS': 9.4, 'IND': 8.3}Summing up the criteria for the function:Input = a country identifierOutput = sum of the values that belong to a countryThe values from each dict should have a different weight when calculating the sum. Dict Y gets weight 0.8. Dict X gets weight 0.2.The Function should be iterable as it will be  used in another function that sees into two -given- huge dictionaries.I tried the following code, but it doesn't work:def sum_dict_values(key):    temp1 = (d.get(key, 0) for d in (x))    temp2 = (d.get(key, 0) for d in (y))    return sum(0.8*temp1, 0.2*temp2)When runningsum_dict_values("USA")I get the error:TypeError: unsupported operand type(s) for *: 'float' and 'generator'
You can use sum to get the sum, and get to get a value from a dictionary or a default value if that value is not present.To put this in a function (sorry, I thought this would be obvious):Or make it a var-args function, so you can pass any number of dictionaries:Both versions can be called like this: sum_dict_values("AUS", x, y)Concerning your updated question: The problem is that temp1 = (d.get(key, 0) for d in (x)) is a generator (trying to call get on the keys from the dictionary), and you can not multiply a generator with a float. You do not need those generators at all, just call x.get and y.get directly. Also, if you always have just those two dicts, you do not need sum but can just use +:That's fine if you want to use that function with just those two dictionaries, and those exact weights, but you can also make it more general, like this, for an arbitrary number of dictionaries and according weights:And use it like this: sum_dict_values("USA", [x, y], [0.8, 0.2]))


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.get
