Natural Text
I haven't been able to find any examples of return values from the yield from expression. I have tried this simple code, without success:Which produces:But I was expecting:Because, as stated in the PEP:Furthermore, when the iterator is another generator, the subgenerator is allowed to execute a return statement with a value, and that value becomes the value of the yield from expression.Obviously, I am not getting this explanation. How does a return in a "subgenerator" work with regards to yield from?
Generators can return a value when they are exhausted:The returned value in a yield from statement will be this value. eg.By default this value is None. That is res = yield from range(4) will set res as None.
yield from generator is short for well it's a bit more commplicated than that: https://www.python.org/dev/peps/pep-0380/#formal-semantics .this will not work well if generator = 4. (your return4() is not a generator. it's a function.)in order to get what you wand you would just do this:
I'm posting a working example for your tests. return4 function is now a generator. To achieve that, a yield must be present anywhere in the function (there is a new related feature in Python 3.5, but that's not important now).As you quoted already:Furthermore, when the iterator is another generator, the subgenerator  is allowed to execute a return statement with a value, and that value  becomes the value of the yield from expressionSummary: you will get a value. You could print it, for example:But you want to yield it, not print. Here is the complete code:You are probably asking yourself, what is it good for. There is almost no advantage when you are only receivng values from a generator. But yield from is a great feature when you are sending values to a generator. Try to find a good explanation of python coroutines. It's amazing.


Answer URL
https://docs.python.org/3/library/asyncio-task.html
