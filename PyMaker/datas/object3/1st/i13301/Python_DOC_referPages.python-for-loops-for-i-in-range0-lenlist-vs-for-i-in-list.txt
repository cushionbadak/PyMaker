Natural Text
This is a really simple python mechanics question. Why can't I just say for i in range original_list instead of for i in range(0, len(original_list)). Do people usually use range over the former? Thanks!
In your case, since you don't need to use the index of the items in the list, you can just iterate over it using for in:If you want to iterate over the indexes of items in your list, use for in range(..):Alternatively, you might also want to use enumerate() if you need both item and index in loop's body:By this way, you also eliminate the use of original_list[i].
The construction range(len(my_sequence)) is usually not considered idiomatic Python. It focuses your code on lower level mechanics than what we usually try to write, and this makes it harder to read. Because of this, using range here is mostly seen as a holder from people used to coding in lower level languages like C.See, for example, Raymond Hettinger's talk Transforming Code into Beautiful Idiomatic Python - one of the first things he recommends is exactly changing for i in range(len(sequence)) into for item in sequence where ever it appears; he then goes on to mention enumerate and zip to cover situations where you might otherwise be tempted to revert to using range. He also mentions that the idiomatic way is faster. Aside from Python builtin types being (unsurprisingly) optimised to run idiomatic constructs quickly, it isn't hard to see why this could be true of certain other data structures - for example, a linked list can have much faster sequential than random access, meaning that loops relying on my_linked_list[i] could become a quadratic time operation rather than a linear one.You can see similar advice from time to time if you follow the [python] tag over at codereview.SE.
Don't use range to iterate over a list of values. Do for item in list. If you need the index use enumerate.OrYou were probably getting the exception using for item in original_list: because you were trying to do neg_list.append(original_list[item]) which would could lead to something like original_list[-3] or original_list[6] which would be out of range.
If you open up your interpreter and do the following:help(range)You will get this: As you can see from the description, it is the way the range works. It takes a starting position, and then a stopping position, and then an optional step to go up by x each time. editTo answer based off of your comment, the reason why you are getting an index out of range, is because when you do this: That won't work, because for i in arr will give you the values of each item in the array. So, what you are doing then is actually putting in a value in to arr as if it is the index. But it is not. When you do this: for i in range(0, len(arr))What is happening here is you are getting an incremental value that is based on the size of the array, so that way you can use that value as an index to your list. 
You can't do that. Because:TypeError: range() integer end argument expected, got list.What you can do is:Output:    1    2    3    4Or,Output:Actually, range is not idiomatic python. You can avoid it. If you need index, you can use enumerate like below:Hope it is clear to you now.
There is a recipe for partitioning in the itertools documentation:You can use it like:


Answer URL
https://docs.python.org/3/library/itertools.html
