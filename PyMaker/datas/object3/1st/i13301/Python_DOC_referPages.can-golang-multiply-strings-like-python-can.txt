Natural Text
Python can multiply strings like so:Can Golang do the equivalent somehow?
It has a function instead of an operator, strings.Repeat.  Here's a port of your Python example, which you can run here:Note that I've used utf8.RuneCountInString(x) instead of len(x); the former counts "runes" (Unicode code points), while the latter counts bytes. In the case of "my new text is this long", the difference doesn't matter since all the characters are only one byte, but it's good to get into the habit of specifying what you mean:(In Python 2, len counts bytes on plain strings and runes on Unicode strings (u'...'):In Python 3, plain strings are Unicode strings and len counts runes; if you want to count bytes, you have to encode the string into a bytearray first:In Go, there's only one kind of string. So you don't have to convert, but you do have to pick the function that matches the semantics you want.)
Yes, it can, although not with an operator but with a function in the standard library.It would be very easy with a simple loop, but the standard library provides you a highly optimized version of it: strings.Repeat().Your example:Try it on the Go Playground.Notes: len(x) is the "bytes" length (number of bytes) of the string (in UTF-8 encoding, this is how Go stores strings in memory). If you want the number of characters (runes), use utf8.RuneCountInString().
Yup. The strings package has a Repeat function.


Answer URL
https://docs.python.org/3/library/functions.html#len
https://docs.python.org/3/library/functions.html#func-bytearray
