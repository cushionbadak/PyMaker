Natural Text
I am looking for a nice way to zip several iterables raising an exception if the lengths of the iterables are not equal.In the case where the iterables are lists or have a len method this solution is clean and easy:However, if it1 and it2 are generators, the previous function fails because the length is not defined TypeError: object of type 'generator' has no len().I imagine the itertools module offers a simple way to implement that, but so far I have not been able to find it. I have come up with this home-made solution:The solution can be tested with the following code:Am I overlooking any alternative solution? Is there a simpler implementation of my zip_equal function?PS: I wrote the question thinking in Python 3, but a Python 2 solution is also welcome.Update:While Martin Peters' answer is simpler (and that is what I was looking for), if you need performance you may want to check cjerdonek's answer, as it is faster.
I can think of a simpler solution, use itertools.zip_longest() and raise an exception if the sentinel value used to pad out shorter iterables is present in the tuple produced:Unfortunately, we can't use zip() with yield from to avoid a Python-code loop with a test each iteration; once the shortest iterator runs out, zip() would advance all preceding iterators and thus swallow the evidence if there is but one extra item in those.
Here is an approach that doesn't require doing any extra checks with each loop of the iteration. This could be desirable especially for long iterables.The idea is to pad each iterable with a "value" at the end that raises an exception when reached, and then do the needed verification only at the very end.  The approach uses zip() and itertools.chain().The code below was written for Python 3.5.Below is what it looks like being used.
I came up with a solution using sentinel iterable FYI:


Answer URL
https://docs.python.org/3/library/itertools.html
