Natural Text
In some (mostly functional) languages you can do something like this:orSo that we can build things like this:Is there a way to do this in python? You could do it using classes, but python has quite some functional aspects so I was wondering if it could be done an easier way.
Python is dynamically typed.  While ≈Åukasz R.'s answer is correct for type hinting purposes (which can in turn be used for static analysis and linting), strictly speaking, you do not need to do anything to make this work.  Just construct your lists like this and assign them to variables:Type hints are genuinely useful, because they can help document how your code behaves, and they can be checked both statically and at runtime.  But there's nothing forcing you to do so if it is inconvenient.
Since Python 3.5 you may use typing module.Quoting docs,A type alias is defined by assigning the type to the alias:To learn more about enforcing types in Python you may want to get familiar with PEPs: PEP483 and PEP484.Python historically was using duck-typing instead of strong typing and hadn't built-in way of enforcing types before 3.5 release. 
How about something like row = lambda datum: list(datum)? No real type introspection support there, but it's a very simple way of "aliasing" types given Python's fondness for duck typing. And it's functional! Kinda.


Answer URL
https://docs.python.org/3/library/typing.html
