Natural Text
I'm trying to create an HTTP server with ZMQ_STREAM socket. When I do a simple POST request:Here is how I handle this with pyzmq:So that parts list comes out to be:So I understand that:'\x00\x80\x00\x00)', '' is the identity of the connection. This is set initially by ZMQ_STREAM socket. On subsequent requests it seems to be absent.\x00\x80\x00\x00) is the identity again, this is what we see on subsequent requests from the client from ZMQ_STREAM socket.Then the actual HTTP requestBut the last pair of magic numbers: ['\x00\x80\x00\x00*', ''] What the heck does that stand for?References:http://api.zeromq.org/4-0:zmq-socketHTTP 1.1 Spec: http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html
But the last pair of magic numbers: ['\x00\x80\x00\x00*', '']  What the heck does that stand for?That's a new connection, with a new connection ID. The connection id is an integer counter, and you can see using the Python builtin ord to see that ord(')') = 41 and ord('*') = 42, which is the next number in sequence.Writing an HTTP server with ZMQ_STREAM, you have to be careful because it's more complicated than just receiving one message after the connection is established.The issue is primarily that you aren't guaranteed that a request will be complete; the body could arrive in chunks in potentially several messages. You are going to have to read HTTP headers and handle receiving the body in pieces.Here is an example that handles POST requests coming from curl:The relevant logic for this case is in the recv_body method, which reads the headers and continues to recv chunks of the body until done.Frankly, I don't think it makes a lot of sense to write an HTTP server in Python using ZMQ_STREAM. You can integrate zmq sockets with existing Python eventloops and re-use already established HTTP libraries, so you don't have to deal with re-inventing this particular wheel. For instance, pyzmq plays especially nicely with the tornado eventloop, and you can use zmq sockets and tornado http handlers together in the same application.


Answer URL
https://docs.python.org/3/library/functions.html#ord
