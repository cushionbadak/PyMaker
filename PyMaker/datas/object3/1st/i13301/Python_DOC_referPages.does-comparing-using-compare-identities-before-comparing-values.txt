Natural Text
If I compare two variables using ==, does Python compare the identities, and, if they're not the same, then compare the values?For example, I have two strings which point to the same string object:Does this compare the values, or just the ids?:It would make sense to compare identity first, and I guess that is the case, but I haven't yet found anything in the documentation to support this. The closest I've got is this:x==y calls x.__eq__(y)which doesn't tell me whether anything is done before calling x.__eq__(y).
For user-defined class instances, is is used as a fallback - where the default __eq__ isn't overridden, a == b is evaluated as a is b. This ensures that the comparison will always have a result (except in the NotImplemented case, where comparison is explicitly forbidden).This is (somewhat obliquely - good spot Sven Marnach) referred to in the data model documentation (emphasis mine):User-defined classes have __eq__() and __hash__() methods by  default; with them, all objects compare unequal (except with  themselves) and x.__hash__() returns an appropriate value such  that x == y implies both that x is y and hash(x) == hash(y).You can demonstrate it as follows:so __eq__ must be called before id, but:so id must be invoked where __eq__ isn't defined.You can see this in the CPython implementation, which notes:The "sensible default" implemented is a C-level equality comparison of the pointers v and w, which will return whether or not they point to the same object.
In addition to the answer by @jonrsharpe: if the objects being compared implement __eq__, it would be wrong for Python to check for identity first. Look at the following example:NaN is a specific thing that should never compare equal to itself; however, even in this case x is x should return True, because of the semantics of is. 


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__hash__
