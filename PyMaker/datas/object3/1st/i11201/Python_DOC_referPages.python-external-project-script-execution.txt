Natural Text
After many researches on the web, on many different topics, I wasn't able to find the solution answering my problem. I am developing a tool (with graphic interface) allowing to process python scripts from different projects. To not have any problem of dependences, I ask the user to target the project directory  as well as the script to process. Thus to develop this tool I have in my IDE a project "benchmark_tool" which is the project integrating the GUI, and the project "test_project" which groups various testing scripts. Obviously, the final goal is the tool to be compiled and thus that the project "benchmark_tool" disappears from IDE. Here is the IDE architecture:How it works: The main.py shall call test_script.py. test_script.py calls imports.py at the first beggining of the script. UPDATEI tried some modifications in my main code:I got this errorNoteIt works with subprocess.Popen(['python','D:/project/python/test_project/module1/test_script.py])What's the main difference between both methods ? I'll also have to pass arguments to test_scripts.py, which one is the best to use to communicate with a python script (input and output datas are exchanged) ? Thanks by advance
There are 3 problems I see that you have to fix:In order to import from module2, you need to turn that directory into a package by placing an empty *__init__.py file in itWhen executing test_script.py, you need the full path to the file, not just file nameFixing up sys.path only work for your script. If you want to propagate that to test_script.py, set the PYTHONPATH environment variableTherefore, my solution is:
To run an "external project script", install it e.g.: pip install project (run it in a virtualenv if you'd like) and then run the script as you would with any other executable:If you don't want to install the project and it has no dependencies (or you assume they are already installed) then to run a script from a given path as a subprocess (assuming there is module1/__init__.py file):Using -m to run the script, avoids many import issues.The above assumes that test_project is not a Python package (no test_project/__init__.py). If test_project is itself a Python package then include it in the module name and start from the parent directory instead:You could pass the path to test_project directory as a command-line parameter (sys.argv) or read it from a config file (configparser,json). Avoid calculating it relative to the installation path of your parent script (if you have to then use pkgutil, setuptools' pkg_resources, to get the data). To find a place to store user data, you could use appdirs Python package.


Answer URL
https://docs.python.org/3/library/pkgutil.html#pkgutil.iter_modules
