Natural Text
Is it possible to print my environment variable memory address ?With gdb-peda i have a memory address looking like 0xbffffcd6 with searchmem and i know it's the right form. (0xbfff????) but gdb moved the stack with some other environment variable.I would like with my python script to get this address and then do my trick and include my shellcode.i tried (with Python):With Ruby :If anyone have an idea, with python or ruby.
The cpython built in function id() returns a unique id for any object, which is not exactly it's memory address but is as close as you can get to such.For example, we have variable x.  id(x) does not return the memory address of the variable x, rather it returns the memory address of the object that x points to.There's a strict separation between 'variables' and 'memory objects'.  In the standard implementation, python allocates a set of locals and a stack for the virtual machine to operate on. All local slots are disjoint, so if you load an object from local slot x onto the stack and modify that object, the "location" of the x slot doesn't change.http://docs.python.org/library/functions.html#id
This seems an impossible task at least in python.There are few things to take in consideration from this question:ASLR would make this completely impossibleEvery binary can have it's own overhead, different argv, so, the only reliable option is to execute the binary and trace it's memory until we found the environment variable we are looking for. Basically, even if we can find the environment address in the python process, it would be at a different position in the binary you are trying to exploit.Best fit to answer this question is to use http://python3-pwntools.readthedocs.io/en/latest/elf.html which is taking a coredump file where it's easy to find the address.
I suppose you could do that using the ctypes module to call the native getenv directly :
Please keep in mind that system environment variable is not an object you can access by its memory address. Each process, like Python or Ruby process running your script will receive its own copy of environment. Thats why results returned by Python and Ruby interpreters are so different.If you would like to modify system environment variable you should use API provided by your programming language.Please see this or that post for Python solution.
The getenv() function is inherently not reentrant because it returns a value pointing to static data.  In fact, for higher performance of getenv(), the implementation could also maintain a separate copy of the environment in a data structure that could be searched much more quickly (such as an indexed hash table, or a binary tree), and update both it and the linear list at environ when setenv() or unsetenv() is invoked.  So the address returned by getenv is not necessarily from the environment.Process memory layout;  http://static.duartes.org/img/blogPosts/linuxFlexibleAddressSpaceLayout.pnghttp://d1gjlxt8vb0knt.cloudfront.net//wp-content/uploads/Memory-Layout-300x255.gifMemory mapOutput;Environment is above the stack. So its address should be higher than the stack. But the address id shows is not in the stack, not in the heap and not above the stack. Is it really an address? or my calculation is wrong!Here's the code to check where an object lies in memory.Output;What's anonymous in the above output?It is also possible to create an anonymous memory mapping that does not correspond to any files, being used instead for program data. In Linux, if you request a large block of memory via malloc(), the C library will create such an anonymous mapping instead of using heap memory. ‘Large’ means larger than MMAP_THRESHOLD bytes, 128 kB by default and adjustable via mallopt().Anatomy of a Program in MemorySo the os.environ['PATH'] is in the malloced region.
Thanks for @mickael9, I have writen a function to calculate address of an environment variable in a program:For example:Note: This function only works in Linux system.
In ruby it's possible - this post covers the general case:Accessing objects memory address in ruby..? "You can get the actual pointer value of an object by taking the object id, and doing a bitwise shift to the left"


Answer URL
https://docs.python.org/3/library/functions.html#id
