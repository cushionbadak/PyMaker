Natural Text
I have two lists I want to check if there exists an element in list x that is None then remove that element and remove corresponding element in y too .like remove x[0] == None , so remove x[0] and y[0] from x and y the result should be:i tried a quite non-pythonic way which gave me a "list index out of range " error:
Using the zip method you can do this very nicely:Here you iterate over both lists at once, creating a new list with tuples containing the elements of x and y. These tuples are only added if the element from x e_x is not None.The outer zip converts the list of tuples back in two separate lists.Edit: As Donkey Kong pointed out in a comment, it is better to use is not None instead of != None. I updated the code accordingly.
Let's call your lists xs and ys.should do the trick. 
First go through and figure out what you need to remove:Now you can use it to filter x and y:Note that with your version, you'll end up skipping indices and probably having IndexErrors because if the initial length of the list is N and you remove a single item, then you'll still be looping N times, but the list is now N-1 items long.  Also with list.remove, you can't guarantee that you're removing the correct item if there are duplicates (which there are in your example)
Use zip to remove items that are None (in x) from matching pairs of x and y, then use another  zip(*...) to transpose the list of lists back to the references x and y:
I think the most performant way to achieve desired output would be dict comprehension. In that case you avoid avoid 2 list comprehension expressions:NOTE: You would miss order of elements but keep correspondence of items. If order matters you can use OrderedDict.


Answer URL
https://docs.python.org/3/library/functions.html#zip
