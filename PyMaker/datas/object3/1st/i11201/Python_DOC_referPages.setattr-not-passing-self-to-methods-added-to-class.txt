Natural Text
In Python, is there a way to bind an unbound method without calling it?I am writing a wxPython program, and for a certain class I decided it'd be nice to group the data of all of my buttons together as a class-level list of tuples, like so:The problem is, since all of the values of handler are unbound methods, my program explodes in a spectacular blaze and I weep.I was looking around online for a solution to what seems like should be a relatively straightforward, solvable problem. Unfortunately I couldn't find anything. Right now, I'm using functools.partial to work around this, but does anyone know if there's a clean-feeling, healthy, Pythonic way to bind an unbound method to an instance and continue passing it around without calling it?
All functions are also descriptors, so you can bind them by calling their __get__ method:Here's R. Hettinger's excellent guide to descriptors.As a self-contained example pulled from Keith's comment:
This can be done cleanly with types.MethodType. Example:
Creating a closure with self in it will not technically bind the function, but it is an alternative way of solving the same (or very similar) underlying problem. Here's a trivial example:
This will bind self to handler:This works by passing self as the first argument to the function. object.function() is just syntactic sugar for function(object). 
Late to the party, but I came here with a similar question: I have a class method and an instance, and want to apply the instance to the method.  At the risk of oversimplifying the OP's question, I ended up doing something less mysterious that may be useful to others who arrive here (caveat: I'm working in Python 3 -- YMMV).  Consider this simple class:Here's what you can do with it:


Answer URL
https://docs.python.org/3/howto/descriptor.html#functions-and-methods
