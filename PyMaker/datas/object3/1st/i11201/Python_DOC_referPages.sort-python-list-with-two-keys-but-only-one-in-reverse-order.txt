Natural Text
I was wondering what would be a Pythonic way of sorting a list of tuples by two keys whereby sorting with one (and only one) key would be in a reverse order and sorting with the the other would be case insensitive.More specifically, I have a list containing tuples like:I can use the following code to sort it with two keys:To sort in reverse order I can use but this would sort in a reverse order with two keys. Any hints greatly appreciated.
Two keys will be used when we need to sort a list with two constraints one in ascending order and other in descending in the same list or anyIn your example sortedList = sorted(myList, key = lambda y: (y[0].lower(), y[1])) can sort entire list only in one orderyou can try these and check whats happeninghope you will understand after this ;)
Sometimes there is little alternative but to use a comparator function. There was a cmp argument to sorted from its introduction to 2.4, but it was removed from Python 3 in favour of the more efficient key function. In 3.2, cmp_to_key was added to functools; it creates keys from the original objects by wrapping them in an object whose comparison function is based on the cmp function. (You can see a simple definition of cmp_to_key at the end of the Sorting How-ToIn your case, since lower-casing is relatively expensive, you might want to do a combination:
Method 1A simple solution, but might not be the most efficient is to sort twice: the first time using the second element, the second using the first element:Or break down:Method 2If your elements are numbers, you can cheat a little:Method 3Another approach is to swap the elements when comparing the elements:Or, using lambda to avoid writing function:I recommend against this approach as it is messy and the cmd keyword is not available in Python 3


Answer URL
https://docs.python.org/3/howto/sorting.html#the-old-way-using-the-cmp-parameter
