Natural Text
I'm fairly new to python and looking for the best (most preferred) way to handle imports in a project.I've been given the task to cleanup a python project and noticed there are the same includes in many modules throughout the project.  Here is an example of what I am seeing.File my_main_file.pyFile gvars.py (also calls Tkinter)File Common.py (also calls gvars and os)From Menus/config.py (also calls Common, gvars and Tkinter)And on and on it goes...  As you can see this is a mess I inherited. I know there are issue here (like "import blah" followed by "from blah import yuck").  I'm just looking for the most pythonic way to handle this.Do I only need the imports in my_main_file.py? I.e. will Common.py code be able to access os. methods if "import os" is removed from the module and i=is only in the main script.Is it best to have imports that are only referenced in a module imported in that module even though they are the similar?  I.e. "from Tkinter import Text" in one module and "from Tkinter import END" in another.Side question - which is better?or
According to the PEP8 styleguide (one of the most authoritative sources on what is pythonic) using wildcard imports (from ... import *) should be avoided unless you are republishing an interface, which is not your intent.My suggestion is to import TKinter as tk and refer to tk.WORD etc.One of the reasons for doing this is that some of the constants and classes from Tkinter are fairly generically named - N, Button, etc.By referring to tk.N, tk.Button, etc. it makes your intent in the code much clearer.
If one or two specific things are imported, then:If pretty much everything in that module is imported, then:If more than a bunch of functions and classes are imported, then:Or more pythonic:
I am not sure if we can have common file to import all common modules. I think, for all of the files which you mentioned in question, you need to have separate imports. About your side question, it is better to import specific function, method from class. You should import only those methods, functions which are being used in file. if you just do import Tkinter, then you have to use it like Tkinter.Menu, Tkinter.WORD etc in your code. Then it might be difficult to read if some library or module's functions have been used at lot of places in your file. So its better to import all required methods, functions from module and use them. You can import many functions from same library in one liner.
The way I've solved this in the past is to have an __init__.py file in each folder where the sources exist, then all your imports can go in thereThere are even better ways of organizing python files. For more information on how to organize modules, see the official documentationdocs.python.orgstackoverflowAlso checkout importanize
Agree that from Tkinter import * is best avoided.One way I found to deal with long imports on any given module.  Not totally clean, but less wordy than the 1 per line repeats you have.I would have done it with your TKinter import list, but I don't have it installed, so using sys instead.output:


Answer URL
https://docs.python.org/3/tutorial/modules.html#packages
https://docs.python.org/3/index.html
