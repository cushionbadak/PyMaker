Natural Text
I'm searching an elegant (an efficient) way to implement the following:I have a class storing a list of values as a string (with a separator, eg.: " - "). I use a property (getter and setter) to convert this string into a Python list.Getting / Setting the property is OK:But I'm looking for something (may be another kind of list) to automatically reflect the changes in the list.Currently, I implement my own list class inheriting collections.MutableSequence with a callback system.Is there a better way to do that?EDIT: my current solutionI use a list with a "on_change" handler, like this:Then I need to modify my C class to implement this handler to reflect the changes.The new version of the class is:That way, any change in the list in reflected in the values attribute:
Maybe I'm oversimplifying your problem because you've oversimplified your first example, but I'm going to agree with some of the commenters and propose that you change around the way you store this. Store the list, produce the string on demand.
I would approach this by overloading certain operators you want to support, for example the += operator by defining __iadd__. You would then be able to do something like:See the docs for more info on operator overloading.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__iadd__
https://docs.python.org/3/reference/datamodel.html#object.__iadd__
