Natural Text
I'm using argparse to parse the inputs to my python3 program.  I was recently asked to range check some of the numeric inputs, a seemingly good idea.  Argparse has a facility to do just that. The numeric inputs are port numbers, in the usual range 0-65535, so I altered my parse command line to :Now, however, when I request the help, I get flooded with all the possible values from argparse.   eg.It lists every single port in that range.   Is there a way to truncate this or make it realize its a range (0-65535) or for it to use ellipsis or something to make it a bit prettier?   Is my only option to explicitly range check my inputs with if statements?I've been googling this but I'm having trouble finding examples where people used argparse and specified choices.   I also checked the documentation on argparse but didn't see anything useful.    https://docs.python.org/2/library/argparse.html
Use custom action...An invalid port number will display the error message based on the raised ArgumentError. If you enter a value of 65536, the following line will be printed:The usage and help messages will be printed based on the metavar displayed
Just use int as type in add_argument, and manually verify it's in the permitted range. Or, use a type of your own, which has a constructor that does the checking for you, and a __int__ method for implicit conversion:
Supply an explicit metavar argument instead of letting argparse produce one for you.
There is a Python bug/issue regarding the formatting of large choices lists.  Currently choices in the help is formatted withand for errors with:So it expects choices to be an iterable, but does nothing to compress the list or make it pretty.  Note that the only test is that value not in action.choices.  choices is a very simple feature.I mentioned this issue in a previous SO question:   http://bugs.python.org/issue16468.  Proposed patches are involved, so don't expect any fix soon.I would recommend using your own type testing rather than choices.  Or do your own range testing after parsing.Another old (2012) SO question that addresses the range choices.  The answer suggests both a help-formatter fix and the custom typePython's argparse choices constrained printingandPython argparse choices from an infinite set============================Out of curiosity I defined a custom range class.  It behaves like a regular range (without the step) for the in test, but returns custom values when used as an iterator.When used with an argument asIt producesThe error message isn't quite what I'd want, but closeIt would be better if the choices formatting allowed the action.choices object to create its own str or repr string.Actually the iter could be as simple as (just one string):Another option is to use metavar to control the usage/help display, and this __iter__ to control the error display.One thing to watch out for when using metavar.  The usage formatter does not behave when there are special characters like space, '()' and '[]' in the metavar, especially when the usage line extends to 2 or more lines.  That's a known bug/issue.
Monkey patch the print_help to get the desired output


Answer URL
https://docs.python.org/3/library/argparse.html#type
