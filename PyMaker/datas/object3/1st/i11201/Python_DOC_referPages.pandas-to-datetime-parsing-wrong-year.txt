Natural Text
I'm coming across something that is almost certainly a stupid mistake on my part, but I can't seem to figure out what's going on. Essentially, I have a series of dates as strings in the format "%d-%b-%y", such as 26-Sep-05. When I go to convert them to datetime, the year is sometimes correct, but sometimes it is not. E.g.: The last two entries, which get returned as 2061 and 2055 for the years, are wrong. But this works fine for the 15-Jun-70 entry. What's going on here?
That seems to be the behavior of the Python library datetime, I did a test to see where the cutoff is 68 - 69:Two digits year ambiguitySo it seems that anything with the %y year below 69 will be attributed a century of 2000, and 69 upwards get 1900The %y two digits can only go from 00 to 99 which is going to be ambiguous if we start crossing centuries.If there is no overlap, you could manually process it and annotate the century (kill the ambiguity)I suggest you process your data manually and specify the century, e.g. you can decide that anything in your data that has the year between 17 and 68 is attributed to 1917 - 1968 (instead of 2017 - 2068).If you have overlap then you can't process with insufficient year information, unless e.g. you have some ordered data and a referenceIf you have overlap e.g. you have data from both 2016 and 1916 and both were logged as '16', that's ambiguous and there isn't sufficient information to parse this, unless the data is ordered by date in which case you can use heuristics to switch the century as you parse it.
from the docsYear 2000 (Y2K) issues: Python depends on the platform’s C library,  which generally doesn’t have year 2000 issues, since all dates and  times are represented internally as seconds since the epoch. Function  strptime() can parse 2-digit years when given %y format code. When  2-digit years are parsed, they are converted according to the POSIX  and ISO C standards: values 69–99 are mapped to 1969–1999, and values  0–68 are mapped to 2000–2068.
For anyone looking for a quick and dirty code snippet to fix these cases, this worked for me:You may need to tune the threshold date closer to the present depending on the earliest dates in your data.


Answer URL
https://docs.python.org/3/library/time.html
