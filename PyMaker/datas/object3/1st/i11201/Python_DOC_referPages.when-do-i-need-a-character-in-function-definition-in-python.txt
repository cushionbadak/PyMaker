Natural Text
I have the two functions I defined as below,I experimented a bit by changing the second line to return func(args) and I got an error. But why in the 4th line, it's sum(args) rather than sum(*args)? What caused this inconsistency?
To apply the function on each of its arguments, you need the * to unpack the arguments of the function. So func(*args) is synomnymous to func(arg1, arg2,...,argn)Have a look at unpacking in action:But with sum, the signature of the function requires that it take an iterable, therefore sum(arg) applies sum (a summation) directly on the tuple of arguments arg.
If you look at the documentation sum is defined as - which means it is taking an iterable object, which will traverse the arguments itself. So Out - Now as you can see args is a tuple whereas *args unwraps the elements... the tuple is what sum accepts where as your function is accepting a list which it is unpacking. What you could've done isNow you send the whole tuple to the function sumitt which you can unpack with *args..This is also work in the same way but now you can see what was happening..
*args in a function signature accepts an arbitrary list of of arguments and makes it available in the function's scope in a variable named argsfor exampleputting a * in front of a list or tuple in a function call unpacks the listso, the first function you defined:accepts a callable as the first positional argumentaccepts an arbitrary list of arguments for the 2nd argument on wardsmake these arguments available in a list named argsreturns the callable with the list args unpackedIn this function the 2nd line cannot be return func(args), unless the function passed accepts a list as the first positional parameter, and has no other required parameterthe function sum accepts a iterable (list or tuple) of numbers and adds them up.you can call sum like this but the sumitt function takes arguments and converts them to a list before passing it to the sum functionso, you can call sumitt(2, 3, 4) and it will return sum([2, 3, 4])Now, sumitt is further wrapped in sumit, so the function call calls sumitt(2, 3, 4), which in turn calls sum([2, 3, 4])It is also possible to call the sum function through sumit like this:The 2nd function sumitt changes the signature of the sum function. This is useful in cases where you'll be calling many different functions dynamically and you want their signatures to be the same. The first function lets you call an arbitrary function with arbitrarily passed parameters.for example, if I defined a mean function like this:Then, mean and sum have dissimilar signatures.At another place in my code I had to call either the mean function or the sum function, I could write it like this:
If your function is expecting individual arguments but you have a sequence (a list, for example), you must specify the character * so that the list gets expanded (unpacked) into the sequence (otherwise it would be treated as one parameter)On the other hand, because the function sum (a built-in function python) expects the sequence (only one parameter) you must not expand it before calling it.Imagine your args is:By using func(*args), when func is evaluated, it would be func(1, 2, 3, 4).However sum(args) would be evaluated as func([1, 2, 3, 4])


Answer URL
https://docs.python.org/3/library/functions.html#sum
