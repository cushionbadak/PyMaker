Natural Text
I have many 3*2 matrices(A1,A2,A3..), and each of the 3*2 is a draw. In the case two draws, we have a 3*4 ( we horizontally stack each draw of A1,A2). Clearly, it is easier for me to draw the 3*4 matrix (A) as a larger matrices once instead of draw a 3*2 over and over again.But I need to perform a matrix multiplication for each draw(each A1,A2...) to a matrix B. Say A1*B, and A2*B ...AN*B
You can reshape matrix A to 2 columns so that it is conformable to b, do the matrix multiplication, and then reshape it back:
If you are unsure about how to store/stack the incoming arrays, one way would be stacking those as a 3D array, such that the each of those incoming arrays are index-able by its first axis -Sample run -Then, to get the equivalent output of matrix-multiplications of each incoming array with b, we could use np.tensordot on the 3D stacked array a with b, thus losing the last axis from a and first from b in the sum-reduction, like so -Let's have a look at the output values and compare against each matrix-multiplication with A1, A2, etc. -Thus, essentially with this stacking operation and later on tensordot we have :Alternative to np.tensordot -We could use a simpler version with np.matmul, to get the same output as with tensordot -On Python 3.5, there's an even simpler version that replaces np.matmul, the @ operator -
Even if not needed for the calculation einsum can help us think through the problem:A is (3,4), which won't work with the (2,2) b.  Think of it as trying work with a doubled j dimension: 'i(2j),jk->i?k'.  But what if we inserted an axis?  'imk,jk->imk'?  Or added the extra dimension to i?The numbers are there, just the shape is (3,2,2).Or you could build A from the start so that mij,jk->mik works (@Divaker)@Psidom:`@piRSquared':
Shift you perspective.  You are locking yourself into 3 x 2 unnecessarily.You can think of A1 and A2 as 2x3 instead, then A would beThen take the transpose of b = b.TSo that you can do you operationLet your "draws" look like this


Answer URL
https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-465
