Natural Text
I'm looking for an efficient way to take a specific part of an object inside of a list in order to manipulate it.For example, if I haveprinting the index will result inI am wondering if there is a way in which I can grab only the first two things (eg 'a' and '1') from each object in the list in order to getand return/manipulate them? I realize that I could copy the index into another list, then print out/return the first two indices's of the copy, but when scaling up this will be a pain. Thanks in advance
very simple using slicing in a generator comprehension, converted to tuple:result:
You may slice the nested tuples with the generator comprehension as:If it is not mandatory to have a final value as tuple, you may simple write a list comprehension as:
Tuples are immutable in python. In a nutshell this means that the interior elements cannot be replaced / modified.However, if you're looking to access the first two you can do this:Sometimes you will find _ to indicate an unused (but still unpacked) value:
This is just a sample of what you can do with iterable unpacking and the little used keyword arguments to print. Please don't select this answer.This will not print the outer parentheses or allow you to manipulate the result directly, but you can always store the contents of the generator into a list.This is something that the other answers neglect to mention explicitly. The generator comprehension (x[:2] for x in l) can only be iterated through only once, but the list comprehension [x[:2] for x in l] is just a list and can be manipulated as many times as you wish.The example above can be rewritten as follows if you want to work with the filtered data after printing it: 
Another one:


Answer URL
https://docs.python.org/3/library/functions.html#print
