Natural Text
This question already has an answer here:What is the difference between class and instance attributes?                    6 answers                I am trying to create a class with various data which are read in from several files. The usual way is probably to define a constructor (__init__) and read data inside this routine, e.g.,But it also seems that I can write the same thing in a header part of the class without using __init__, e.g.,which looks more terse than the first code. So I am wondering whether this second code is a valid way for defining various fields of a Python class? Is it considered bad practice to do so, or is there any difference between the first and second approaches? I would appreciate any suggestions because I'm still new to Python. Thanks much!
Yes - they are very different - when you assign to  self.attribute inside a method you are making it an instance attribute- while when you assign to  attribute in the class body, you are creating a class attribute.Class attributes are shared among all instances. In some circumstances, but not always, you may want exactly that. WHht you have to keep in mind is that if yu change a class attribute, it will be changed for all instances of that class at once.Of course, there is a natural decurrence of the way Python deal with attribute retrieval and assignment that makes assignments in the class body quite handy. If there is a value that should be the default for all instances of a class - say, employee Payout - but that should be customized at some point in the life cycle of the object, that happens naturally:
In the first approach, N, data, foo and bar are easy members of the instances of Myclass. Each Myclass object has its own and changing one will have no effect on the other instances:In the second approach, they are members of the class. You can still access them through the instances, but they will be shared by all the instances.Both are valid code, but they serve different purposes
There are important differences between the two approaches.  In some use cases you can do it either way, but they are definitely not equivalent.  With the first method, the statements inside the __init__ method are not executed until you instantiate an instance of the class; i.e., until your code executes a statement of the form a = MyClass().With the second method, the statements inside the class definition block are executed the first time the interpreter reaches the code.  That's probably at (or near) the beginning of your program, and will occur when you import a module containing the class definition.  That may, or may not, be OK for your application.Also, read the link provided in a comment by juanpa.arrivilaga, or this one: Why do attribute references act like this with Python inheritance?


Answer URL
https://docs.python.org/3/tutorial/classes.html
https://docs.python.org/3/reference/datamodel.html
