Natural Text
I am writting a simple messaging program (for 2 users) that works on the terminal.For its implementation, I decided to create 2 processes, one for the server (waits for the message to arrive from the other user), and another one for the client (just sends the message to the server process of the other user)The fact is that when I run it, I get the following error:This is my Python codeNOTE 1: There can be some indentation errors due to cut and paste from my text editor to stackoverflow.NOTE 2: I am working on Windows 10
From the documentation:Beware of replacing sys.stdin with a “file like object”multiprocessing originally unconditionally called:in the multiprocessing.Process._bootstrap() method — this resulted in issues with processes-in-processes. This has been changed to:Which solves the fundamental issue of processes colliding with each other resulting in a bad file descriptor error, but introduces a potential danger to applications which replace sys.stdin() with a “file-like object” with output buffering. This danger is that if multiple processes call close() on this file-like object, it could result in the same data being flushed to the object multiple times, resulting in corruption.The bottom line is that your Processes are closing stdin unless you subclass them and avoid doing so.You might consider using one (capital-P) Process to handle communications, and then doing the input/output in your original (lowercase) process:
See this question.When you spawn a thread in Python, it closes stdin. You can't use a subprocess to collect standard input. Use the main thread to collect input instead and post them to the Queue from the main thread. It may be possible to pass the stdin to another thread, but you likely need to close it in your main thread.Maybe you can work around this by using fdopen() to reopen stdin in the subprocess. See this answer.Here is an example from your code:I tested it,and it worked.
The error you are receiving basically means your raw_input is receiving an empty input. That condition raises the EOFError you can read about it in the built-in-exceptions section of the documentation. I've never tried something like this with multiprocessing before but i would imagine that is where your problem lies. Perhaps make sure your logic is working as expected in a single process before moving to multiprocess, but i still feel like trying to start multiple processes to receive user input is gonna be a headache.  


Answer URL
https://docs.python.org/3/library/multiprocessing.html?highlight=sys.stdin.close#all-start-methods
https://docs.python.org/3/library/multiprocessing.html
