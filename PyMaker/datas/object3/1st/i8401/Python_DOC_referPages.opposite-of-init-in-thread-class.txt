Natural Text
I understand that __init__() is called automatically when you create a class like newThread = MyThread(property) and run() is triggered by newthread.start(). What I am looking for is something that is called automatically before a thread terminates, so I don't have to explicitly call self.cleanUp() before each return statement.
One way to do this is by making the Thread subclass also a context manager. This will effectively make __exit__() the special method you want triggered.The following shows what I'm proposing. Note: I renamed the property argument you were passing the constructor because property is the name of a Python built-in.Output:If you change TEST_THREAD_EXCEPTION to True, cleanup() won't be called since the thread didn't run successfullyâ€”although you could change that if you wished, but may also need to ensure that it doesn't get called twice. Here's what the code above does in that case:
If the problem you're trying to solve is that you don't want to add code to each of your run() methods to call your cleanup function, then I'd suggest making a custom subclass of Thread which does that for you. Something like this, perhaps:Of course, you're free to rename run2 to something that makes sense for you.Python does not offer a built-in equivalent of this, if that's what you're looking for.
As stated in the Python mailing list, __del__ shouldn't be considered the opposite, but you can use the with syntax, which is a context manageryou cannot be sure that an object's destructor (__del__() ) will ever  be called.  If you want to make sure that a particular object gets  processed, one approach is the with- syntax.Or you can also look into the try...finally clause, in which the finally statement will always get run.You can use the try...finally clause like so:


Answer URL
https://docs.python.org/3/library/stdtypes.html#typecontextmanager
https://docs.python.org/3/library/stdtypes.html#typecontextmanager
