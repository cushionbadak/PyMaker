Natural Text
I have a list of a few hundred amino acid sequences called aa_seq, it looks like this: ['AFYIVHPMFSELINFQNEGHECQCQCG', 'KVHSLPGMSDNGSPAVLPKTEFNKYKI', 'RAQVEDLMSLSPHVENASIPKGSTPIP', 'TSTNNYPMVQEQAILSCIEQTMVADAK',...].Each sequence is 27 letters long. I have to determine the most used amino acid for every position (1-27) and at what frequency that is.So far I have:It says KeyError: 'A', and it's pointing to the line count_dict[item]. So the item of the aa_list apparently can't be added as a key this way..? How do I do that? And it also gave an error "'int' object is not iterable" concerning the counter. How else can the counter be increased?
You could use the Counter classHowever i might be way to inefficient if you have large data sets.
Modified codeHere's a modified, working version of your code. It's not efficient but it should  output the correct result.A few notes :You need one counter for each index. So you should initialize your dict inside the first loop.range(0,26) only has 26 elements : from 0 to 25 (inclusive).defaultdict helps you define 0 for each start value.you need to increment the counter with count_dict[item] += 1At the end of each loop, you need to find the key (amino acid) with the highest value (occurences).It outputs :Alternative with CounterYou don't need that many loops, you just need to iterate once over every character of every sequence.Also, there's no need to reinvent the wheel: Counter and most_common are better alternatives than defaultdict and max.It outputs :[('K', 1), ('A', 1), ('Y', 1), ('N', 1), ('N', 1), ('Y', 1), ('P', 2),  ('M', 4), ('S', 2), ('Q', 1), ('E', 2), ('G', 1), ('H', 1), ('N', 1),  ('L', 1), ('N', 1), ('N', 1), ('I', 1), ('G', 1), ('H', 1), ('E', 2),  ('G', 1), ('N', 1), ('K', 1), ('Y', 1), ('K', 1), ('G', 1)]
to add an item to a dictionnary, you must initialize it to a value :you can use the setdefault function to perform this as a one-liner:
this is how you tally items in a dictionary quickly, just add that to whatever code you've created


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
