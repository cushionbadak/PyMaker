Natural Text
Being rather new to socket programming and threading in general, my issue might be stemming from a misunderstanding of how they work. I am trying to create something that acts as both a client and a server using threading.Following:https://docs.python.org/3/library/socketserver.html#asynchronous-mixinsI created a client class to go with the server and executed both from a main class. The server supposedly launches normally and doesn't give any errors but when I try to connect from the client, it fails on the following:the error I am getting is:Even when I modify the server from the code in the referenced python page (just to run on a specific port, 1234), and try to connect to that port with I get the same problemWhy is the server refusing connections? No firewall rules or iptables are in place, running the example that has the client and socket together as is from the site works but even removing the server.shutdown() line it still kills itself immediately.Am I missing something?The behaviour I am expecting is: --- input/output ---FROM CLIENT A:ON CLIENT B:Basically once the clients connect the first time they can communicate with each other by typing into a prompt which just creates another socket targeting the 'remote' IP and PORT to send off the message (instant messaging). The sockets are afterwords left to close because they aren't actually responsible for receiving anything back.I would appreciate any help I can get on this.
The reason why even removing server.shutdown() is not helping is because when the main thread exists, the server thread exists immediately because you probably have not removed server_thread.daemon=True. If you change it to server_thread.daemon=False then also even after main thread terminates, the program will not return to terminal immediately but it will not kill the server either even after last line of the main program gets executed.I am not sure if you can run a server completely in the background forever using simple python script but I do not think it is possible.You can call the script with '&' option: python3 <file>.py & which will run the python script in background(this works with Ubuntu at least)(https://askubuntu.com/questions/396654/how-to-run-the-python-program-in-the-background-in-ubuntu-machine) but it probably is not the answer you are looking for.
Incidentally, I've made something of a breakthrough. While I'm not entirely sure why it does it, threadedTCPServer (as it is on the python docs) is basically unusable for this purpose and won't act right while actually in a thread. Instead I opted to manually build a socket server like so:The code is pretty basic (and probably not the best) but I have just tested it and it is definitely working for now. I adapted this code based on a solution I saw in: Why am I getting the error "connection refused" in Python? (Sockets)I do have to readapt a large portion of code but I think it should definitely work, I'll report back after implementation.


Answer URL
https://docs.python.org/3/library/socketserver.html#asynchronous-mixins
