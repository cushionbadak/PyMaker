Natural Text
For example I have a txt file:On every line there are 4 numbers and there are 4 lines. At end of lines there's \n (except the last one). The code I have is:What I want is the text file to become [[3,2,7,4],[1,8,9,3],[6,5,4,1],[1,0,8,7]].I have tried everything, I know the answer is probably really simple, but I just really give up after an hour of attempts. Tried read(), readlines(), split(), splitlines(), strip() and whatever else I could find on the internet. So many can't even make a difference between them...
Once you opened the file, use this one-liner using split as you mentionned and nested list comprehension:the inner listcomp splits & converts each line to integers (making an array of integers)the outer listcomp just iterates on the lines of the filenote that it will fail if there are something else than integers in your file.(as a side note, file is a built-in in python 2, but not anymore in python 3, however I usually refrain from using it)
You can do like this,Line by line execution for more informationsplit with newline.Remove the unnecessary null string.split with spacesconvert the element to int
The following uses a list comprehension to create a list-of-lists. It reads each line from the file, splits it up using whitespace as a delimiter, uses the map function to create an iterator that returns the result of calling the int integer constructor on each of the string elements found in the line this way, and lastly creates a sub-list from that. This process is repeated for each line in the file, each time resulting is a sub-list of the final list container object.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
