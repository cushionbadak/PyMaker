Natural Text
As titled, several thread accessing one variable, and only one thread will change the variable, and all the others will just read its value. Like this:Thread 1:Thread 2, 3, 4,...:In this case, only Thread 1 is changing variable a. Will any serious problems happen?I found a similar C/C++ tagged question titled "in which cases do I need to lock a variable from simultaneous access?", and it seems from the answer, that the only thing I need to worry about is that the a acquired from the other thread might not be as updated.I'm asking, other than that I might not get the newest a value, is it possible something more serious will happen and crush the code if I don't lock the variable while accessing it?I don't think this is language related, but if it matters, I'm specifically interested in the case for Python.
Generally speaking, how catastrophic a problem it would be would depend on what the consequences were of one of the other threads obtaining the wrong value.The answer may indeed be computer-language related: See the Software section in the general Wikipedia article on Race condition.Related to that is the fact that, thanks to the "GIL", for the most part Python programs don't do real multithreading since the interpreter isn't thread-safe.
Irrespective of the language, updating a variable by two separate threads will affect the value.  But printing the values will not.  The only issue is all the threads (2 onwards) will print different values.Think this is happening in a database.  One person can update the dB, but many can read it.  


Answer URL
https://docs.python.org/3/c-api/init.html#thread-state-and-the-global-interpreter-lock
