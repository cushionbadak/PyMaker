Natural Text
I am writing a function that is taking some output and based on its contents populates a dictionary with objects.Objects can be of 2 groups and depending on which section of the text document the function is going thru, in the outputs I identify type1 or type 2 objects and populate them with relevant data. Type 1 objects usually sit in State1 document section. Type2 objects - in State2I am mostly relying on elif statements and process every line of the input text file (that goes into a function as a list) looking for its contents with regular expressions.However the code is becoming unmanageable - i am funneling every line into all the ifs.Is there a way to make this code better?
I think you should split your code into small logical pieces, each with 1 action. Something like that:So your code will be much cleaner and you can easy understand every little piece of your code :).
The python re module supports named groups using this syntax: (?P<name>...)This means you could create regexes like so:Then you could paste your regexes together as a giant alternation:Now you have a regex like this:If you match the one all-encompassing regex, you'll get a result if any of the patterns hit:You can access these with the m.groupdict() method, which returns a dictionary that contains all the named subgroups, and their matches. If a named subgroup key has a value of None, it didn't match.Here's a demo version:Once you have a states dictionary, you can confirm that it only has one key (only one state matches at a time). Or not - maybe it's possible for two states to match at once!Regardless, you can iterate through the keys and invoke state-specific code using attribute names or a function-lookup dict or whatever technique you like:


Answer URL
https://docs.python.org/3/library/re.html
