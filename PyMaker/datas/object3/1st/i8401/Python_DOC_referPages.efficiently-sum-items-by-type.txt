Natural Text
I have a list of items with properties "Type" and "Time" that I want to quickly sum the time for each "Type" and append to another list. The list looks like this:I want to do something that works like this:With Travel_Times finally looking like this:This seems like something that should be easy to do efficiently with either a list comprehension or something similar to collections.Counter, but I can't figure it out. The best way I have figured is to use a separate list comprehension for each "Type" but that requires iterating through the list repeatedly. I would appreciate any ideas on how to speed it up. Thanks
Note that case is very important in Python :For isn't a valid statementTravel_times isn't the same as Travel_Timesthere's no : after elifTravel_Times.append(... has a leading space, which confuses Pythonitems has one [ too manyA isn't definedHaving said that, a Counter works just fine for your example :To get a list of tuples :
You can use a dict to keep track of the total times. Using the .get() method, you can tally up the total times. If the key for the activity doesn't already exist, set its tally to zero and count up from there.
You could use Counter from collections along with chain and repeat from itertools:This small snippet results in a Counter instance containing the sums:It uses repeat to, obviously, repeat the d['Type'] for d['Time'] times and then feeds all these to Counter for the summation using chain.from_iterable.If your Items list has many entries, you can again use chain.from_iterable to chain these all together:This will get you a sum of all types in all the nested lists.
You can use reduce with collections.Counter:It simply builds up the Counter updating each Type using the corresponding Time value.
Here is a brief way of expressing what you'd like in one line. By the way, your list Items doesn't need to be double bracketed:Here I zipped your output labels to a generator that calculates the sum for each of the three transportation types you have listed. For your exact output you could just use:
If you're willing to abuse generators for their side effects:This works because Counter.update() returns None. if None will always evaluate False and throw out that element. So this generates a side effect empty list [] as the only memory overhead. if False would work equally well.
Just use a dictionary! Note that in python it is idomatic to use snake_case for variables and keys.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
