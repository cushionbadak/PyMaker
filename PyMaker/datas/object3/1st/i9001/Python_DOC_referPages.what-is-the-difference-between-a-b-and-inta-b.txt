Natural Text
They seem to be equal for small numbers but different for larger. For example:How come?
In Python 3 / performs float division, which has 53 bits of precision; // does floor division, which has no precision limit when both operands are integers (apart from limitations imposed by available RAM).You can get the Python 3 behaviour in Python 2 by using the true_division __future__ import. 
As @khelwood explained, in Python 3, a/b performs float division. Try typing 1/2 into an interpreter -- you'll get 0.5, not 0.So in your example, 1267650600228229401496703205376 / 10 in reality is equal to 126765060022822940149670320537.6 = 1.267650600228229401496703205376e+29 (floating point division), but due to the inaccuracy of floats, Python evaluates it as 1.2676506002282295e+29, so you've lost precision, which accounts for the difference.See PEP 238.
Complementing the existing answers it seems worthwile mentioning that you needn't go that far out to observe a difference:


Answer URL
https://docs.python.org/3/whatsnew/2.2.html#pep-238-changing-the-division-operator
