Natural Text
I'm trying to split a list into two lists. Here's the list:L = [3.5, 1 ,7, 2 ,4.5, 1, 6, 2, 4.8, 2  ,3.1,1, 9, 2]If I want to split the list based on the bold number (1 or 2), which are always the even number (2x) in the position, so the numbers before 1 go to one list, and the numbers before 2 go to another list:Also, the question may be extend when there are i+1 bold number and thus needs to be split to i+1 list.How should I use if-else statements for list?
Do that using ternary in a step 2 loop which dispatches the previous element in the relevant list (I took a shortcut: if value is 1, it's l1 else it's l2, so it's rather fragile):yields:General case: create a list of lists according to the maximum index, and dispatch the value according to the index in a loop (l[i]-1 is the 0-starting index and l[i] is the value to insert)result:more "pythonic" for the last part using itertools.islice instead of playing with indexes:
You can use a dictionary to hold the new lists, using the category number as the dictionary key. We use a defaultdict to simplify creating the lists in the dictionary.outputThis code copes with any number of categories.As Jean-Fran√ßois Fabre mentions in the comments there's a slightly more efficient way to do the printing in sorted order.outputThe heart of this algorithm isit = iter(lst) creates an iterator object from the list. We then pass two copies of that iterator to zip. Looping over zip yields tuples containing the successive items from each of the arguments you feed it. In other words, if you do zip(a, b, c) you get the first elements of each of a, b, c, then you get their 2nd elements, etc.  But here we've passed zip two references to the it iterator. So when zip reads the next items from each of the two its its really working its way through the pairs of items in lst. Thus on each loop of the for loop we get successive pairs of items from lst. 
not the cleanest attempt, but here you go


Answer URL
https://docs.python.org/3/library/functions.html#iter
https://docs.python.org/3/library/functions.html#zip
