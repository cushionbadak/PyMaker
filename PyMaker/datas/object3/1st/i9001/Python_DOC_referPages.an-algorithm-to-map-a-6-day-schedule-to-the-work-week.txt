Natural Text
What would be the most efficient way to map a 6 day schedule to a work week (excluding weekends)? Are there any existing algorithms that would suit this purpose? The use case would be to take the current date perform a function and output the corresponding Day.For example:  Today, 2/15/2017 would be a Day 1. day(2/15/2017) = "Day 1"    Tomorrow, 2/16 would be a Day 2. day(2/16/2017) = "Day 2"  Friday would be a Day 3. day(2/17/2017) = "Day 3"  Monday would be a Day 4. day(2/20/2017) = "Day 4"  etc.Ideally this would be executed in Python but any implementation would work
You can easily create a generator returning dates starting from today with timedelta. Then you could filter out the weekends with date.weekday and wrap the result in enumerate to get index for each day:Output:
Given a date that is a "day 1", this will return the schedule day number for any given date:
You can yous momentjs , its a good library that help you with calendars like this also the instalation is very easy bower install moment --save # bowernpm install moment --save   # npmInstall-Package Moment.js   # NuGetspm install moment --save   # spmmeteor add momentjs:moment  # meteor
Judging from what you said in your problem, you don't just want day of the week, you want how many weekdays since a beginning date. This would be my solution. This excludes extraneous exceptions such as holidays.
If I'm understanding you correctly, you can instantiate a date object, then use timedelta to add the corresponding days, filter out the weekends, using a list comprehension. Also, you can check if today is part of a weekend or not first:


Answer URL
https://docs.python.org/3/library/datetime.html#timedelta-objects
https://docs.python.org/3/library/datetime.html#datetime.date.weekday
https://docs.python.org/3/library/functions.html#enumerate
