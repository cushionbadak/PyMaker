Natural Text
I have a list of strings ['foo1', 'foo2', ...] that represent variables that I want to delete from self if they are part of self. What is a Pythonic and compact way to do this?My first attempt isbut this obviously isn't scalable for a large list. Can anyone help?
You can use a for loop and at the same time boost performance by using pop on the __dict__ of the object:pop basically does a check whether the element is in the dictionary and removes it if that is the case (it also returns the corresponding value, but that is not relevant here). We also use None here as a "default" return value such that if the key does not exists, pop will not error.
You can use delattr. It will raise an AttributeError if the attribute does not exist, so you can wrap it in a method if you want:or use a try/except block:This has the advantage of working with classes that define __slots__, as they don't expose a __dict__ attribute. 
You can do this quite easily, but I have to say it seems at first glance like a pretty bizarre requirement. Generally in Python anything that involves dynamic creation and/or deletion of variables is a code smell, so I'd be interested in how the requirement emerged (and whether your description might not be obscuring the real problem).But remembering that instance variables are stored in self.__dict__, and assuming that your list of strings is called los you can do what you want with something like this
something like this perhaps?
Run it in a loop?
There is delattr(), although I can't think of many cases where deleting an attribute of an object is useful.


Answer URL
https://docs.python.org/3/library/functions.html#delattr
