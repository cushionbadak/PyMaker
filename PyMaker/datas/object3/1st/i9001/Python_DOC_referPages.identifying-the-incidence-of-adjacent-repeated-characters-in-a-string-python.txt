Natural Text
I'm learning python these days; trying out various challenges to improve my concepts. One mini challenge I just tried is identifying the incidence of n adjacent, repeated characters in a given string. I attempted it as follows:This assumes n=4 and I'm now trying to generalize it. But on the side, it's also got me thinking: is there a more efficient way to accomplish this? My current solution makes me do 4 times the number of lookups than the length of the string (which means, for increasing values of n, this would increase toward O(n^2)). What could be a better way to tackle a challenge like this?
Bit of a wildcard entry:Advantage pretty fast: example with 4,000,000 characters is analysed instantlyDisadvantage relies on numpy; convolutedHere goes:How it works:encode string to fixed-width-per-character bytestringinterpret the buffer as numpy arraycompute the "derivative"find nonzero places = places where character changesthe distances between these are the repeat numberscompute maximumUPDATE:Here's a hybrid version that does some crude short-circuitting plus some rudimentary benchmarking to find best parameters:Sample runs:
In the following function, n is the number of characters you want to check for equality, and to keep your original function call the same, you can also set the default value of n to 4.Alternatively, you can also use a for loop:
You can use slices (some_list[start:stop]) and sets to solve your problem.Your code will also be a bit cleaner if you use a for loop, rather than a while loop. :)
You can use groupby to group the consecutive same characters and count the number of chars within the each group. If any of the counts is greater threshold the result is True:Output:Time complexity of above is O(n).
The answers posted so far miss one of Python's nicer iteration functions, enumerate:I'm not sure that's exactly what you asked for, but it might give you something to go on.  
If this is intended to tell you that every character is identical, you could do the following:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
