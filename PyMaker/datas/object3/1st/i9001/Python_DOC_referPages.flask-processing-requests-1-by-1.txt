Natural Text
I have a flask application which listens for some job to do.  The process is quite long (let us say 1 minute)  and I would like not allow to process two requests at the same time. I will be great if once I receive a request, I could close the port flask is listening to and open again when finish. Alternatively I could setup a semaphore but I am not sure about how flask is running concurrently.Any advice?
You could use a semaphore for this:The semaphore usage is to control the access to a common resource.You can see more info about semaphore in hereThis SO question can help you as well hereEDIT:As Georg Sch√∂lly wrote in comment, The above mentioned solution is problematic in a situation of multiple services.Although, you can use the wsgi in order to accomplish your goal.uWSGI supports a configurable number of locks you can use to synchronize worker processesFor more info, read here
You could try adding a threading.Lock to indicate that some work is already in progress:But Flask by default allows only one request to be processed at a time (more info here), so if you're fine with the fact that during the processing of a single request, all the other users' pages won't load until the process is finished (maybe even get a request timeout error), you don't have to change anything.If you want to make other users get a message, like in the above code, increase the amount of workers to 2, so that when one worker processes the request, the other one holds off the others.


Answer URL
https://docs.python.org/3/library/threading.html#threading.Lock
