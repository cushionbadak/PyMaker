Natural Text
It appears to me that each instance of a particular class has its own dictionary. This could waste a lot of space when there is a large number of identically structured class objects. Is this actually the case, or is the underlying mechanism more efficient, only creating an object's dictionary when it is explicitly asked for.I am considering an application where I may have a very large number, possibly into millions, of objects, should I avoid using a class and instead use a sequence with a named constant as the index?
If you want to reduce the overhead you have two options depending on what you actually need.If you need a class-like structure then you should consider using __slots__. This will avoid the __dict__ but still allows you to have methods, properties and so on. You'll lose the ability to dynamically add attributes (you're restricted to those listed as __slots__).If you just want a "storage" for objects and don't need methods and similar you can use collections.namedtuple. These provide a "class-like" interface to their items and should be pretty space-efficient.For example a class that just has two attributes "lastname" and "firstname" could be implemented as:or as namedtuple:
That depends on the data you want to store in each object, but in most cases lists should do.


Answer URL
https://docs.python.org/3/reference/datamodel.html#slots
https://docs.python.org/3/library/collections.html#collections.namedtuple
