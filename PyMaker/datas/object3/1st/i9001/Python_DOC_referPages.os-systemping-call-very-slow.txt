Natural Text
I have the following script:It is an NMap-like python script, that I was bored and decided to make.Anyway, when I run it, it is SUPER slow, but when I hold CTRL + C, it goes a lot faster... And it works!Is there a way that I can make this script a lot faster?
By default, ping waits 10s for the packet to arrive. Since many addresses will not be in use, or the computers who have these addresses will not answer to ICMP echo (ping) packets, you'll wait up to 2550s seconds, or a little bit less if some addresses elicit a response.When you type Ctrl+C, you send a SIGTERM signal, which aborts the waiting. If you abort ping before it receives the ICMP echo response, you'll get incorrect results. Since local networks are quite fast, you're unlikely to encounter this.To speed this up, you can modify your approach in two ways:Give up earlier when no response is coming. Pass in the -W parameter. For instance, by running ping -c 1 -W 1 ..., ping will wait just one second, so your whole program will take approximately 250s instead.Run the pings in parallel. You can do that manually, typically by using a Pool of threads/processes (or just one thread/process per ping). Note that your operating system may enforce limits on the number of pings per second. For instance, if you leave the timeout at 10s and manage to run all pings concurrently, your program will take just 10s.Proper code using a pool could look likeIf you're not toying around, you may also want to use a program instead of ping which does run in parallel. Any port scanner (such as nmap) should work fine.
Use scapy. There's no need to spawn ping commands in Python threads.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool
