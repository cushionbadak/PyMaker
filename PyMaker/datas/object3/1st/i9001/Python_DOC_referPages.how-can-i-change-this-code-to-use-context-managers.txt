Natural Text
I'm trying to log into a website simultaneously using multiple credentials with aiohttp and asyncio. In the create_tasks function, I generate a list of sessions to be used for each. The reason I cannot just create a sesssion within the login function is because the same session object will be used throughout the code. What I'm trying to do is devise a way that I can use a context manager to handle the closing of the session (to avoid the runtime errors of leaving it open).The following code works as intended (concurrent gathering of the login page and parsing of the token in a process pool), but it generates sessions separately from the tasks and requires me to close them at the end.I previously made create_tasks a coroutine, wrote a wrapper class to make async iterables, and trying usingBut as I feared, it said that the session was already closed by the time it was run.
Here's a structure that makes reasoning easier:Caveat programmator: aiohttp by default appears to store cookies, make sure it doesn't cross-pollinate your user flows.Bonus points for: correct use of asyncio.gather() in the last async function.
Use ExitStack.
You didn't really explain what kind of tasks do you need, a simple get? Something more complicated?Do you want it to be specific per username/password?Do you need to save all responses in the end?For this code, I assumed username/password doesn't matter, but it can change quickly.Instead of how you initiated the sessions separately I used consumer/producer pattern.Each consumer a session with context manager, also no need for Semaphore (because of the queue).


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack
