Natural Text
I have 2 nested dictionaries variable that have the similar keys, each defining different values :In my case, i need to sum both dictionaries values based on the same keys, so the answer will be like this:How can i do that?
Given the structure of the two dictionaries is the same, you can use dictionary comprehension for that:In the repl:The comprehension works as follows: in the outerloop, we iterate over the key,subdic of data1. So in your case, key is a year and subdic is the dictionary (of data1) for that year.Now for each of these years, we iterate over the items of the subdic and here key2 is 'A', 'B' and 'C'. val1 is the value that we find in data1 for these keys. We get the other value by querying data2[key][key2]. We sum these up and construct new dictionaries for that.
I hope this helps:This works for arbitrary lengths of the inner and outer dictionaries.
Another solution :)You can also use zip to get both data1 and data2 in the same for loop, and then use collections.Counter to add the value of each dicts.You will ended with Counter dict but since it is a subclass of dict you can still use the same method as a regular dict.
If you add dict() to Max Chrétiens' nice short solution from above, you will end up with regular dictionaries:This will, however, only work correctly if both dictionaries share exactly the same keys as already discussed above. Willem Van Onsem's solution will not work if there are any keys not shared by both dictionaries either (it will result in an error, whereas Max Chrétiens' solution will in this case merge items incorrectly). Now you mentioned you are using JSON data which always contains the same structure with similar keys, so this should not constitute a problem and Max Chrétien's solution should work nicely.In case you do want to make sure only keys shared by both dictionaries (and their subdictionaries) are used, the following will work. Notice how I added 'X': 111111 as a key value pair to the 2012 subdictionary and "1999": { 'Z': 999999 } as an entire subdictionary.I realize this is far from as concise and elegant as can be, but as I already wrote it anyways, I post it here in case someone is trying to achieve this particular functionality.Long and bloated version which retains unshared keys/values, just because I already wrote it...See Crystal's solution for what seems to be the most concise and functional solution posted thus far.


Answer URL
https://docs.python.org/3/library/stdtypes.html#mapping-types-dict
