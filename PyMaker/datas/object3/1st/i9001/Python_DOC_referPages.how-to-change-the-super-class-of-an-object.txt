Natural Text
I have a class containing methods and a constructor in Python. The return value of the constructor will be an object, but I need a return value of a class (constructor) such as numbers.Number type. Is it possible to change the return value of class by adding numbers.Number as super class of this class, and if so, could someone describe how to do it?Now I want Foo to return number.Number value whenever we call constructor of Foo.
I'm not sure what you're trying to accomplish by doing this, nor what you expect to happen as a result. However, since numbers.Number is an abc (abstract base class), it means you can make your own class be considered one of its subclasses simply by registering it with the abc. (There's no need to override __new__ as I first thought because I didn't realize that numbers.Number was an abc.) Here's what I mean:
Perhaps you have to inherit from int type:
This can be done through standard class inheritance.It should be noted that all classes of the numbers module are Abstract Base Classes (ABCs) and cannot be instantiated.  They are similar to interfaces in other languages (like Java) and are implemented in corresponding types, e.g. int implements numbers.Integral.By using numbers.Number as the base class, you will have all of the operations from that class in MyNumber, but if you instantiate it with a value like MyNumber(2) you will get TypeError: object() takes no parameters.


Answer URL
https://docs.python.org/3/tutorial/classes.html#inheritance
https://docs.python.org/3/library/numbers.html
https://docs.python.org/3/library/abc.html
