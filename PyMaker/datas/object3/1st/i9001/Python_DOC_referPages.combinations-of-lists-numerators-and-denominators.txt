Natural Text
This is something that I've managed to get working in R. Now it needs to be in python, for reasons. The translation is not straight forward. If I have two lists, one of numerators and one of denominators, how would one go about picking all sets of two ratios, such that the numerators of the two ratios in each set are not the same. Similarly, I don't want the denominators to be the same. I want to produce:and so on ... My initial attempt involved itertools.productThis gets me sets of 4 numerator/denominator pairs, I can't figure out how to combine those 4 pairs in such a way that the numerators aren't the same though. The above code produces a number of lines like: Out of this line, I'd want to produce
Edit: Corrected, thanks to comments from @Blckknght.Given your input data:You want to first create all permutations of numerator x denominator. That's available from itertools.product.You next want to find all combinations of 2 distinct items from the product. That's a 2-combination, and can be gotten via itertools.combinations.But you want to restrict the combinations to those where the two items don't share the same numerator, nor do they share the same denominator. That's a filtering list comprehension:Output:
I think you're very close. You're code works correct up until you create the final lists that you're printing. I think you want to create two lists for each item yielded from allSets:This won't exactly match the order you wanted, but it should produce all the desired combinations of pairs. If you need the results in leicographical order, put the results in a list and sort it.That assumes you don't care about the order of the pairs in the list. If you do, you'll want two more results with the pairs above swapped around ([(b, d), (a, c)] and [(b, c), (a, d)]).
You can use product method from itertools like this way in order to have your desired output:Output:


Answer URL
https://docs.python.org/3/library/itertools.html?highlight=itertools.combination#itertools.combinations
https://docs.python.org/3/library/itertools.html?highlight=itertools.combination#itertools.combinations
