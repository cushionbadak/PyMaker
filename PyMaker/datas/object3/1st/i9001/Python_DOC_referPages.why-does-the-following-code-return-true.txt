Natural Text
This question already has an answer here:Why does “not(True) in [False, True]” return False?                    8 answers                I am doing an assignment to compile a subset of Pascal and in the initial program there is a line of code like this:This makes me really confused as x.tp == y.tp returns a boolean value True or False and thus True/False in {Bool, Int} will always return False.The definition of Bool and Int is the following:Then, I set a breakpoint at that line, and play around in VSCode's debugger:Why does x.tp == y.tp in {Bool, Int} return True here?
Use parentheses to group the equality comparison:Your chained comparison gets evaluated by Python as:which yields True since y.tp is of class <class 'ST.Int'> and actually in that set.From the Reference Manual on Comparisons:Comparisons can be chained arbitrarily, e.g., x < y <= z is equivalent to x < y and y <= z, except that y is evaluated only once (but in both cases z is not evaluated at all when x < y is found to be False).
Naturally, we're of the assumption that this line of codeshould work (or parsed) like:But this is not the case. According to this article, the parsing and then the comparison is done like:There's something confusing going on because of not being explicit. Please try to avoid similar situations for the benefit of the code maintainer.Source: Python comparison operators chaining


Answer URL
https://docs.python.org/3/reference/expressions.html#comparisons
