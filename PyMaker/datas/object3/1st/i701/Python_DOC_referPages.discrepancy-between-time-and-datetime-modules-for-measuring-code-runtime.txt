Natural Text
I am measuring the response time on a function using the time module. The time module is supposed to output seconds as a float, so I am saving a start time value (time.clock()) and taking another reading at the end, and using the difference as a runtime. While watching the results, we noted the runtimes seemed high -- something that seemed to take less than 2 seconds, was printing as 3-and-change, for instance. Based on the perceived issue, I decided to double-check the results using the datetime module. Printing the two side-by-side shows the time module values are almost double the datetime values. Anyone know why that might be?Here is my code:Some of my results:I am assuming this sort of issue would have been noticed before, and I am just missing something basic in my implementation. Can someone clue me in?
Looks like time.clock() has been Deprecated since version 3.3Maybe this will help ?time.clock()  On Unix, return the current processor time as a floating point number  expressed in seconds. The precision, and in fact the very definition  of the meaning of “processor time”, depends on that of the C function  of the same name.On Windows, this function returns wall-clock seconds elapsed since the  first call to this function, as a floating point number, based on the  Win32 function QueryPerformanceCounter(). The resolution is typically  better than one microsecond.Deprecated since version 3.3: The behaviour of this function depends  on the platform: use perf_counter() or process_time() instead,  depending on your requirements, to have a well defined behaviour.
We found the issue. The test_func I am testing is using a multi-threaded process. I both did not know that, and did not know it was an issue. The time module uses processor time (https://docs.python.org/3.6/library/time.html), while the datetime module uses wall clock time (https://docs.python.org/3.6/library/datetime.html). Using the difference in the datetime timestamps told me how much actual time had elapsed, and for our purposes was the relevant information. I hope this helps someone else in the future!


Answer URL
https://docs.python.org/3/library/time.html#time.clock
