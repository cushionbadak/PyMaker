Natural Text
My company is using a database and I am writing a script that interacts with that database. There is already an script for putting the query on database and based on the query that script will return results from database.I am working on unix environment and I am using that script in my script for getting some data from database and I am redirecting the result from the query to a file. Now when I try to read this file then I am getting an error saying-I know that python is not able to read file because of the encoding of the file. The encoding of the file is not ascii that's why the error is coming. I tried checking the encoding of the file and tried reading the file with its own encoding.The code that I am using is-Where Query.pl is the perl script that is written to bring in the result of query from database.The encoding that I am getting for "patchlet.txt" (the file used for storing result from HSD) is:Even when I have provided the same encoding for reading the file, then also I am getting the error. Please help me in resolving this error. EDIT:I am using python3.6EDIT2:While outputting the result I am getting the error and there is one line in the file which is having some unknown character. The line looks like:Some failure because of which vtrace cannot be used along with some trace.I am using gvim and in gvim the "vtrace" looks like "~Vvtrace" . Then I checked on database manually for this character and the character is "â€“" which is according to my keyboard is neither hyphen nor underscore.These kinds of characters are creating the problem.Also I am working on linux environment.EDIT 3:I have added more code that can help in tracing the error. Also I have highlighted a "print" statement (print(str(i))) where I am getting the error. 
ProblemBased on the information in the question, the program is processing non-ASCII input data, but is unable to output non-ASCII data.Specifically, this code:Results in this exception:UnicodeEncodeError: 'ascii' codec can't encode character '\u2013'This behaviour was common in Python2, where calling str on a unicode object would cause Python to try to encode the object as ASCII, resulting in a UnicodeEncodeError if the object contained non-ASCII characters.In Python3, calling str on a str instance doesn't trigger any encoding.  However calling the print function on a str will encode the str to sys.stdout.encoding.  sys.stdout.encoding defaults to that returned by locale.getpreferredencoding.  This will generally be your linux user's LANG environment variable.SolutionIf we assume that your program is not overriding normal encoding behaviour, the problem should be fixed by ensuring that the code is being executed by a Python3 interpreter in a UTF-8 locale. be 100% certain that the code is being executed by a Python3 interpreter - print sys.version_info from within the program.try setting the PYTHONIOENCODING environment variable when running your script: PYTHONIOENCODING=UTF-8 python3 myscript.pycheck your locale using the locale command in the terminal (or echo $LANG).  If it doesn't end in UTF-8, consider changing it.  Consult your system administrators if you are on a corporate machine.if your code runs in a cron job, bear in mind that cron jobs often run with the 'C' or 'POSIX' locale - which could be using ASCII encoding - unless a locale is explicitly set.  Likewise if the script is run under a different user, check their locale settings.WorkaroundIf changing the environment is not feasible, you can workaround the problem in Python by encoding to ASCII with an error handler, then decoding back to str.There are four useful error handlers in your particular situation, their effects are demonstrated with this code:The ignore and replace handlers lose information - you can't tell what character has been replaced with an space or question mark.The xmlcharrefreplace and namereplace handlers do not lose information, but the replacement sequences may make the text less readable to humans.It's up to you to decide which tradeoff is acceptable for the consumers of your program's output.If you decided to use the replace handler, you would change your code like this:wherever you are printing data that might contain non-ASCII characters. 


Answer URL
https://docs.python.org/3/library/locale.html#locale.getpreferredencoding
https://docs.python.org/3/using/cmdline.html?highlight=pythonioencoding#envvar-PYTHONIOENCODING
https://docs.python.org/3/library/codecs.html#standard-encodings
