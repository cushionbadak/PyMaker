Natural Text
The line import re; print(re.findall("(.*) (.*)", "john smith")) outputs [("john", "smith")], which can be unpacked like [(first_name, last_name)] = re.findall(...). However, in the event of a non-match (findall returning []) this unpacking throws ValueError: not enough values to unpack (expected 1, got 0).What is the correct way to safely unpack this array of tuples, which would work in both match ([("john", "smith")]) and non-match ([]) scenarios?
The generic answer is to look before you leap:or to ask for forgiveness:but you are actually overcomplicating things by using re.findall() to find a single result. Use re.seach() and extract your matched groups:or
There isn't one; you have to explicitly check the return value to see if there is, in fact, anything to unpack.In Python 3.8, you'll be able to compact this slightly:
Since re.findall returns an empty list in the event of a non-match, you can use the or operator to assign default values to first_name and last_name instead:
This is terrible, so don't do it, but you could useto do what you want as a one-liner without using findall (which could return multiple hits, and so still fail, or ignore spaces depending on whether you limit the . to \S).Given your pattern current matches literally anything with a single space in it (capturing everything before the final space, and everything after it), avoid findall doesn't gain you much, but if you want to actually exclude stuff with more than one space, or things that match only partially, you could switch the . to \S, and possibly search to fullmatch:Either way, it abuses the fact that a non-match returns None, which has no groups method, so getattr can return a bound groups method on a match, or a lambda that returns the defaults otherwise. Regardless, you immediately call it, and get the result of groups or the lambda as appropriate.Again, don't do this. It's legal, it's just ugly (and likely slower than any reasonable method).


Answer URL
https://docs.python.org/3/library/re.html#re.search
https://docs.python.org/3/library/re.html#re.Match.groups
https://docs.python.org/3/library/re.html#re.Match.groups
