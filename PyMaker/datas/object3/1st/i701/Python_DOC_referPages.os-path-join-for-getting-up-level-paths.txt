Natural Text
Consider you have the following code:os.path.abspath(os.path.join('../../', __file__))I am quite puzzled because currently, it is returning me the same path such in  __file__ path.  Any idea why I don't get two levels up of the __file__ path?
__file__ is an absolute file path and so the join attempts something like the following:Since the second argument is already an absolute path, all previous ones are ineffective.Also note that __file__ contains the file name itself so if you want to go two directories up you'd need to split that off. The easiest solution is to use pathlib.Path:If you want to go n levels up you can use Path(__file__).parents[n].
From the documentation (emphasis mine):os.path.join(path, *paths)Join one or more path components  intelligently. The return value is the concatenation of path and any  members of *paths with exactly one directory separator (os.sep)  following each non-empty part except the last, meaning that the result  will only end in a separator if the last part is empty. If a component  is an absolute path, all previous components are thrown away and  joining continues from the absolute path component.__file__ is an absolute path, so join ignores the preceding ../../.
After some more trial and error I found the best solution I think:os.path.abspath(os.path.join(__file__, '../../'))Works like a charm


Answer URL
https://docs.python.org/3/library/pathlib.html
https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.parents
https://docs.python.org/3/library/os.path.html#os.path.normpath
