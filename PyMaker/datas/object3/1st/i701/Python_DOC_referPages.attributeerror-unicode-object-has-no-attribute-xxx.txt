Natural Text
I'm trying to use pipl. I want to get the info from a mail and save it into a Excel file.print(response.raw_json) returnsBut the following returns an errorThe error:For me response.raw_json is a JSON object, does anyone know why there is an AttributeError?
Your response.raw_json variable contains string not an object.So, you need to convert it to the python object which represent JSON:Now you can access your data via indexing. Remember that some data are referencesed by name (for dictionaries) and some by index (for lists):
response.raw_json is an encoded JSON document, a serialisation in a Unicode string, so text. It is not a Python data structure, you'd have to decode it from JSON into a Python data structure first, which will give you dictionaries and lists: The exception is telling you exactly that; response.raw_json is a unicode object, and unicode objects don't have a .person attribute.Because response_data is a dictionary, you have to use subscriptions, not attribute access.JSON is largely a subset of JavaScript, a language that has a common root with Python, so the structure may look like Python but very much is not. You can spot JSON more easily if you are aware of the differences:Python representation output for strings prefers single quotes (double quotes are used when the value contains single quotes), but JSON only supports double quotes. JSON strings are really UTF-16 based and codepoints outside of the Basic Multilingual Plane are represented as UTF-16 surrogate pairs with \udhhh\dhhh notation, where Python Unicode strings would use the \U0010hhhh escape notation for these.Python booleans use title-case (True, False), JSON notation uses lowercase (true, false).Python has a None singleton object often used to indicate the absence of a value, JSON has a null object instead.Using print() on a Python dictionary won't pretty-print the object with indentation either, you'd have to use the pprint library to produce similar output. There really is no need to manually decode the raw JSON document again here, as the pipl API library has already done this for you and parsed this out into container objects. There is no real advantage to loading the JSON document into Python dictionaries and lists here, when you could just use response.person.names.


Answer URL
https://docs.python.org/3/reference/expressions.html#subscriptions
