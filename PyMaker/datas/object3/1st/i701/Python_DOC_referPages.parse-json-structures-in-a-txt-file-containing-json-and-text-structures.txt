Natural Text
I have a txt file with json structures. the problem is the file does not only contain json structures but also raw text like log error:I read the .txt file but trying to patch the jason structures I have an error:IN : OUT : json.decoder.JSONDecodeError: Extra data: line 1 column 5 (char 4)I would like to parce json and save as csv file.
This solution will strip out the non-JSON structures, and wrap them in a containing JSON structure.This should do the job for you. I'm posting this as is for expediency, then I'll edit my answer for a more clear explanation. I'll edit this first bit when I've done that:Output:What's going on here?In the cleaned = ... line, we're using a list comprehension that creates a list of the lines in the file (f.readlines()) that do not contain the string |INFO| and adds the string -split_here- to the list whenever there's a blank line (where .strip() yields '').Then, we're converting that list of lines (''.join()) into a string.Finally we're converting that string (.split('-split_here-') into a list of lists, separating the JSON structures into their own lists, marked by blank lines in data.txt.In the json_data = ... line, we're appending a ', ' to each of the JSON structures using a list comprehension.Then, we convert that list back into a single string, stripping off the last ', ' (.join()[:-2]. [:-2]slices of the last two characters from the string.).We then wrap the string with '{"entries":[' and  ']}' to make the whole thing a valid JSON structure, and feed it to json.dumps and json.loads to clean any encoding and load your data a a python object.
You could do one of several things:On the Command Line, remove all lines where, say, "|INFO|Technical|" appears (assuming this appears in every line of raw text): sed -i '' -e '/\|INFO\|Technical/d' yourfilename (if on Mac), sed -i '/\|INFO\|Technical/d' yourfilename (if on Linux).Move these raw lines into their own JSON fields
A more general solution to parsing a file with JSON objects mixed with other content without any assumption of the non-JSON content would be to split the file content into fragments by the curly brackets, start with the first fragment that is an opening curly bracket, and then join the rest of fragments one by one until the joined string is parsable as JSON:This outputs:
Use the "text structures" as a delimiter between JSON objects. Iterate over the lines in the file, saving them to a buffer until you encounter a line that is a text line, at which point parse the lines you've saved as a JSON object.Repeating logic in the last two lines is a bit ugly, but you need to handle the case where the last line in your file is not a text line, so when you're done with the for loop you need parse the last object sitting in json_lines if there is one.I'm assuming there's never more than one JSON object between text lines and also my regex expression for a date will break in 8,000 years.
You could count curly brackets in your file to find beginning and ending of your jsons, and store them in list, here found_jsons.Output


Answer URL
https://docs.python.org/3/library/json.html#json.loads
