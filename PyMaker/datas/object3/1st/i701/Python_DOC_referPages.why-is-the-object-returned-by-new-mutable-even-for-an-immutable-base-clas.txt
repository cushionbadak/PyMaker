Natural Text
I defined a new float subclass as follows:When I instantiate a newfloat object, as follows, the newfloat object indeed has an attribute attribute. For example ...... this returns 2.So for some reason, the line r.attribute = attribute works, assigning the second argument value to the class attribute attribute. But this doesn't make sense to me, since objects of the base type, float, are immutable! Why does this work?
Actually, the object returned by super().__new__(cls, value) is a newfloat.  That's why you pass along the cls when you call super().__new__.When defining a new class, you'll get a namespace on instances by default (docs, ctrl+f for "custom class types"), unless you opt-out of that by declaring __slots__. You can also set new attributes on instances, for the same reason.As a developer, the responsibility lies with you to ensure that classes modeling immutable types are correctly behaving like an immutable type should.


Answer URL
https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy
https://docs.python.org/3/reference/datamodel.html#slots
