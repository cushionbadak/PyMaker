Natural Text
I would like to develop a python program that, starting from a moment of time, wait 60 seconds before performing an action. Another feature that must have the program, is that if I update the initial time, it must start to check the condition. I thought about doing it with threads, but I do not know how to stop the thread and get it started again with the new start time.Thanks!
Checking times in a loop is probably not necessary here and wasteful since you can put a thread to sleep and let the kernel wake it up if the time has come.The threading library provides threading.Timer for such use cases. The difficulty in your case is, that you cannot interrupt such a sleeping thread to adjust the interval after which the specified function should be executed.I'm using a custom manager-class TimeLord in my example below, to overcome this limitation. It adds a wrapping worker-function which sets a flag when the target-functionis starting execution. This flag will be checked by the parent-thread to decide if you still can adjust the execution or if it's too late. If it's not too late, a new timerwill be started with the new interval specified in the timelord.reset-method.This code runs with Python 2 and 3:Example Output:Note, with interval=1 the cancelation after two seconds had no effect, since the timer was already executing the target-function.
One option would be to do the check outside of the thread, so that the main loop executed a thread every 60 seconds that does X job:I swapped the code for a syntax that works in Python3 since I don't have Python2 installed. But the overall idea should work the same in both version.


Answer URL
https://docs.python.org/3/library/threading.html#timer-objects
