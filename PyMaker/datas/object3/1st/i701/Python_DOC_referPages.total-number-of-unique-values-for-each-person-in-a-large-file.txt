Natural Text
I have this unique list:I want to find how many of the elements occur exactly in my large text file. I just need the number, not the names. For example, if only 'apple' and 'banana' are found for a particular person, then it should return 2. For each person (name and family name), I need to get how many of these unique fruit does this person have. In a large file, this might be difficult. I need the fastest way to do it. Let's say I get names from the text file:The text file is as below:The output should look like this:I do not want to use any packages, just built-ins and basic libraries.
you can leverage python's basic library - collectionsOutputIn my example above, I passed a pd.Series as its argument, but in your case, you can pass df['name'] to it, which is a pd.Series object.
You don't specify what is the format of your source data, so let's say it's a list of lists:When you are looking for performance in the "vanilla" python, look at the standard library - in this case collections.Counter; we'll use it to count all unique combos of name-fruit:The argument is an iterator, that creates a tuple (name, fruit) out of the source data, and Counter does the counting of their occurrence.EDIT: And if you want to count only the ones where the fruit is in a specific set:, then just add this as a condition in the comprehension:We're almost there - what is left is to count the occurrences of the individual names:I see you have in your output a "harry barry" with 0 occurrences- they obviously did not appear in the source data, so just add them to the dict with value 0.
Just do it:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
