Natural Text
I want to remove the extra '\' from a list of strings in python.For example, if my list is this:it should be this:If I iterate through this list while printing each string separately, I am able to get the string "{word}\*".Meanwhile, when printing this as a whole list, it's showing up as:Program:Output:Expected Result:
You can convert the string to bytes and then use the bytes.decode method with unicode_escape as the encoding to un-escape a given string:
If you really are dealing with an assignment statement, you should know about raw strings in Python. A raw string literal uses the r prefix like this:The purpose of raw strings is to reduce the amount of escaping needed when using backslash characters; it is intended for use with other processing engines (like Windows paths, or regular expressions) where the processing engine is going to do its own backslash-handling. There are many fewer escape sequences in raw strings.Your example of 'word\\\\*' would normally be converted to word\\* by the string backslash-escape mechanism. If you want a string with exactly three backslashes, however, you could say r'word\\\*'.
I believe you're looking for str.rstrip() which removes the last instance of the character and returns a copy of the resulting stringhttps://docs.python.org/3.6/library/stdtypes.html#str.rstrip So looping through your list of strings one-by-oneShould remove the last '\' character from each of your strings in your list of strings.


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
