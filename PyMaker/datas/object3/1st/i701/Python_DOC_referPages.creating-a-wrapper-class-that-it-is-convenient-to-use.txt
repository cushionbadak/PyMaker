Natural Text
In order to keep track of both the current and the previous value of certain variables that are continually updated inside of a loop, I created a wrapper class that automatically stores the old value inside of it when it is updated:However, in order for it to work more like a normal variable, I want all the ordinary operators to work as expected (except assignment, which cannot be overloaded in Python), so I have defined many of the special methods that a class can have:While this may seem like a lot of special methods, it is still far from all special methods, and supporting all of them would mean even more boiler plate code than what I already have.Furthermore, defining these special methods doesn't allow me to use an instance as the second operand in a binary operation. For example, while the codeworks, the coderesults in the error TypeError: unsupported operand type(s) for +: 'int' and 'Updatable', which is undesirable if it is going to be convenient to use.Is there some other approach to creating a wrapper class that is (almost) as convenient to use as using the datatype it is wrapping directly (neglecting the fact that when using the naked datatype, you won't have access to the previous value unless you store it explicitly)?
Add this to your class defination:and thenOutput: With the original function defination __add__:Output:


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-names
https://docs.python.org/3/reference/datamodel.html#object.__radd__
