Natural Text
I want to have a class that represents a polynomial function. When calling an instance of the class, I want to see a string representation of that functione.g.This is fine, I just write a suitable __repr__ function - it would also be nice to be able to evaluate this function at a given value of ùë• - and so what I'd like to do is something like:So how do I do this? Do I write a second overloaded __repr__ function with the additional parameter, or do I alter the existing __repr__ so it has an optional argument?Sadly, I can't seem to get the first working, and using the second of these options, I get the error:Any ideas on having this dual behaviour so:andThe first is just the representation of f, and the second, it's evaluation at ùë•=3.
If you want to support calling your object, then just implement the __call__ method, and return a result that gives the desired representation.If, for a given value of x, the result is always an integer, just returning that integer suffices:which achieves the output you are looking for:Note that __repr__ is usually intended to produce debugging output. There is no configuration possible, an object has a specific state, and __repr__ should show that state, more or less.If you want to make string formatting configurable, then look at the __format__ hook, used by str.format() and format(). That's probably not that suitable for your uses if you want to enable your objects to be used in an interactive Python setting.You may also want to study how the SymPy project handles output formatting; that project explicitly avoids using __repr__. Instead, outside of IPython they set a custom sys.displayhook() function to use their own pretty-printing functions instead of repr() when a sympy-project object is being displayed. For details, see the sympy.interactive.printing module source code.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__call__
https://docs.python.org/3/reference/datamodel.html#object.__format__
https://docs.python.org/3/library/stdtypes.html#str.format
https://docs.python.org/3/library/functions.html#format
https://docs.python.org/3/library/sys.html#sys.displayhook
