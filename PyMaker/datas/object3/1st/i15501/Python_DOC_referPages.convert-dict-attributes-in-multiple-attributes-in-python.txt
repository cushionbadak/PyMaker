Natural Text
I have a class with a dict attribute, like this :When I want to get the values, I have to do this :What is the solution to get the values directly in attributes please :
You could add an additional function to the class that will be able to parse the dict and insert the relevant attributes:I'm using the built-in setattr() function here to set attributes with dynamic names/values:This is the counterpart of getattr(). The arguments are an object, a string and an arbitrary value. The string may name an existing attribute or a new attribute. The function assigns the value to the attribute, provided the object allows it.For example, setattr(x, 'foobar', 123) is equivalent to x.foobar = 123.You can call this function inside your constructor after the mydict variable is defined or even just place the loop in the constructor. 
Using setattr, you can set attribute dynamically:
Another solution is to implement __getattr__:
You can directly update the __dict__ attribute of your object I believe:
Another way would be to override __getattr__ and __setattr__ together, which avoids having two object references to the same attribute in the class instance object (one O.R. to value1 inside myobj.mydict['var1'], and another O.R. to value1 in myobj.__dict__['var1']):Note that doing it this way means you cannot add more key,value pairs to mydict unless you call the property directly, e.g.:Also note that getting and deleting the mydict members will be overridden by any existing attribute of the same name (not only that, but you can't delete mydict members at all unless you also override __delattr__ to enable this behavior): If you want to change this behavior, you have to override __getattribute__ (EDIT: which, as  bruno desthuilliers notes below, is usually not a good idea).


Answer URL
https://docs.python.org/3/library/functions.html#setattr
