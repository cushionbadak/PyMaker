Natural Text
I just ran these codes:Output:The last element of v's size is 102, and total size is 52? Also even without the last element, still sum of the first 3 elements of the list is bigger than total size, my question is why? Python doing a zip process in lists ?Another strange thing is, between this outputs; Output:It is really strange, can anyone explain what's going on?
From the documentation (my bold) (a):Only the memory consumption directly attributed to the object is accounted for, not the memory consumption of objects it refers to.So the size of v does not include the sizes of the elements it refers to.If you change kite into kites, you'll also see that its size increases but not the size of v (I've replaced your big number with 100...00 in the output to ease formatting):Think of it like this:(a) That page also has a link to a recipe for doing recursive size calculations if you need that information. The link is duplicated here for citation, and the code is duplicated below to make this answer more self-contained.Plugging your structure into that code gives:The code, with your structure, is shown below.
This happens because your "Total size" is actually the size of the list structure without the contents.  So you can store an object of any size there and it won't change your "Total size."  You need a "recursive" getsizeof(), and for that, see here: Python deep getsizeof list with contents? or here: Deep version of sys.getsizeof


Answer URL
https://docs.python.org/3/library/sys.html
