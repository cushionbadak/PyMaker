Natural Text
I have written some unit tests using unittest in Python. However, they do not simply test objects in the conventional way - rather, they invoke another Python script by calling it using Popen. This is by design - it's a command line utility, so I want to test it as a user would, which includes things such as command-line options, etc.). To be clear, both the unit tests and the script to be tested are written in Python (v3 to be precise).The script I am testing makes heavy use of datetime.now(), and ideally I would like to mock that value somehow so that I can keep it constant. All the examples I've seen of doing this, though (e.g. this one using mock) assume some form of white-box testing.Is there a way for me to do this?
Nothing prevents you from testing your CLI without using Popen. You just need to architect your code to make it possible:Instead of having this:Do this:Then, you can test the main function in isolation (just call main([...]) with a set of args you specify). Note that this should also work (with some adaptation) for other CLI frameworks.Also, note that if you're indeed using argparse, you'll need to patch ArgumentParser() so that it doesn't call sys.exit when parsing fails. An easy way to do is to declare a ParsingError exception, and patch ArgumentParser.error(self, message) with:You can then use assertRaises in your tests.


Answer URL
https://docs.python.org/3/library/unittest.html
https://docs.python.org/3/library/subprocess.html#popen-constructor
