Natural Text
I ran into some problems when using the range() function to create lists.Doing some experimenting, I get the following:Also, reading its documentation:I currently do have a workaround using list(range()), but the question still remains. What is a virtual sequence of numbers?
A range() object calculates numbers on demand, e.g. when iterated over or when you try to access specific indices:It is a sequence because the object supports membership testing, indexing, slicing and has a length, just like a list or a tuple. But, unlike a list or a tuple, it doesn't actually contain all integers in the sequence in memory, making it virtual.When you call list() on a range() object, you are creating a new sequence containing all the integers that are in the range, but you are now storing all those integers:That's a sequence too, but it takes more memory as all integers are now produced up front, wether you'll use them or not. So a list or a tuple is a concrete sequence.Using the sys.getsizeof() function, we can calculate how much memory each object uses:The list object uses 22 times the memory; that's because it contains 26 integer objects.And to address the comment on your question, range() objects are not iterators. Iterators produce values one by one on demand, but cannot be indexed, they produce all values just once and they do not have a length. You can produce an iterator from a range() object with the iter() function:but once exhausted, the iterator won't produce the same range again.All of the above applies mainly to Python 3; in Python 2 the type is called xrange(), where it is more limited in its abilities (it doesn't support slicing and can only handle integers < sys.maxint).


Answer URL
https://docs.python.org/3/library/sys.html#sys.getsizeof
https://docs.python.org/3/library/stdtypes.html#typeiter
https://docs.python.org/3/library/functions.html#iter
