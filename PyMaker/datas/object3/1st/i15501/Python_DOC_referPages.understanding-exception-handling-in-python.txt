Natural Text
I have two questions on exception handling.Q1) I am slightly unsure as to when exactly the operations within else will be carried out in exception handling. I am unsure when the else block would be executed, which doesn't occur in the code below:Q2) When I run the code below:I am unclear as to why the output is:
When Python encounters a return-statement inside a function, it immediately returns (exits) from the function.  This means that when you do:"Did we succeed?" will never be printed because you returned in the try: block, thereby skipping the execution of the else: block.Your second code piece is different however because you used a finally: block.  Code inside a finally: block is always executed, no matter if an exception is raised, you return from a function, etc.  This is to ensure that any cleanup code which is important (i.e. frees resources) is always executed and not accidentally skipped.You can read about this behavior in the docs both here:When return passes control out of a try statement with a finally  clause, that finally clause is executed before really leaving the  function.as well as here:When a return, break or continue statement is executed in the try  suite of a try...finally statement, the finally clause is also  executed "on the way out."As for why the output is:and not:the answer is that the print "Yasdsdsa" line is executed in the finally: block before Python is able to print 7.0 (the return value of attempt_float). Put simply, the execution path for Python is:Return float(SecPrice).Run the finally: block.Resume normal execution with the print attempt_float('7','3') line and print 7.0.
In the first case, you return within try, so you never hit the else statement.In the second one, the finally is executed regardless of how try is exited.  From the python docs:A finally clause is always executed before leaving the try statement, whether an exception has occurred or not. (...) The finally clause is also executed “on the way out” when any other clause of the try statement is left via a break, continue or return statement.Here is a good example of the order of execution:Be sure to read the docs on exceptions!


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#grammar-token-return_stmt
https://docs.python.org/3/reference/compound_stmts.html#finally
