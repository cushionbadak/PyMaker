Natural Text
How can I load a Python module in Python 3.4 given its full path? A similar question How to import a module given the full path? covers Python versions before 3.4, but the conclusion is that support in Python 3.4 is deprecated for the presented answers, so any solution for Python 3.4 is appreciated.Note that this question is not a duplicate of Import abitrary python source file. (Python 3.3+), since answers for this also use loader.load_module() which is deprecated in Python 3.4, as said in answer, with details in Consider leaving importlib.abc.Loader.load_module(), and documentation in importlib.So a supported solution for module import by full path in Python 3.4 is needed.
This should work for all python files, regardless of file extension:This method was mentioned in the deprecation message in the imp.load_module documentation.
The already-given answer works, but is unnecessarily clunky. An easier method:imported is the imported module; you can use it as normal, through imported.method(arg). The final line isn't strictly necessary, but it's cleaner not to leave unnecessary entries in sys.path (particularly if you're going to run the code multiple times). This works in 3.4, and doesn't use anything marked as deprecated.
The supported and non-deprecated method according to the 3.6 docs is like this:
The function below works in Python 3.4 - it is used to load and run specific functions in modules, but you need to add the folder to the sys path.Call it via 


Answer URL
https://docs.python.org/3/library/importlib.html?highlight=importlib#module-importlib
https://docs.python.org/3/library/imp.html#imp.load_module
https://docs.python.org/3/library/importlib.html?highlight=import_module#importing-a-source-file-directly
https://docs.python.org/3/library/importlib.html
