Natural Text
I have N different target functions which consume unequal non-trivial amount of time to execute. I am looking for a way to execute them in parallel such that M (1 < M < N) processes are running simultaneously. And as soon as a process is finished next process should start from the list, until all the processes in processList are completed.As I am not calling the same target function, I could not use Pool.I considered doing something like this:Since my target functions consume unequal time to execute, this method is not really efficient.Any suggestions? Thanks in advance.EDIT:Question title has been changed to 'Execute a list of process without multiprocessing pool map' from 'Execute a list of process without multiprocessing pool'.
Here is a way to do it in Python 3.4, which could be adapted for Python 2.7 :
You can use proccess Pool:Pool is created specifically for what you need to do - execute many tasks in limited number of processes.I also suggest you take a look at concurrent.futures library and it's backport to Python 2.7. It has a ProcessPoolExecutor, which has roughly same capabilities, but it's methods returns Future objects, and they has a nicer API.
I would use a Queue. adding processes to it from processList, and as soon as a process is finished i would remove it from the queue and add another one.a pseudo code will look like:
A simple solution would be to wrap the functions target{1,2,...N} into a single function forward_to_target that forwards to the appropriate target{1,2,...N} function according to the argument that is passed in. If you cannot infer the appropriate target function from the arguments you currently use, replace each argument with a tuple (argX, X), then in the forward_to_target function unpack the tuple and forward to the appropriate function indicated by the X.
You could have two lists of targets and arguments, zip the two together - and send them to a runner function (here it's run_target_on_args):


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor
https://docs.python.org/3/library/concurrent.futures.html#future-objects
