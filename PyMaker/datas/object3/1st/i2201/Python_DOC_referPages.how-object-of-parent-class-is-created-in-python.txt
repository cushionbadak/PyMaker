Natural Text
This question already has an answer here:Understanding Python super() with __init__() methods [duplicate]                    7 answers                I am not sure how object of a parent class is created in Python. Consider a following scenario.This does not print "Animal is created".Whereas this prints "Animal is created"But in both the cases I am able to access eat() method of Animal class from Dogs instance (my_dog). This means Animal is created in both the cases. Then why I don't see Animals constructor getting called in case#1?
You should be calling the parent class (Animal) __init__ method in the Dog __init__ method. To get a handle on the parent class you can use super. This is considered better practice than Dog.__init__ since it doesn't explicitly require the name of the parent class.


Answer URL
https://docs.python.org/3/library/functions.html#super
https://docs.python.org/3/reference/datamodel.html#object.__new__
