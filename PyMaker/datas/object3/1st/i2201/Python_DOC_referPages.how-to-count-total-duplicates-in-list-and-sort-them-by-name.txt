Natural Text
I am looking to count the total number of duplicates in a list. Then display in alpha/numeric order the name of the list item along with the number of duplicates.  For example:-- List lst = [blue, green, green, yellow, yellow, yellow, orange, orange, silver, silver, silver, silver] -- Count Number of Duplicates by X  -- Print List Item & Total Number of Occurrences for Output in Sorted list name Order Color: blue, Total: 1 Color: green, Total: 2 Color: orange, Total: 2 Color: sliver, Total: 4 Color: yellow, Total: 3 I am able to complete the above using dictionaries, along with converting the list to a set. My goal is to complete this task all within the list type using the built in functions of Python 3.   
You can use Counter with most_common:Now let's sort by name:UpdateWithout dictionaries or counter objects, a "manual" way to do this is to sort the list alphabetically first and then compute counts as you iterate. So something like the following:
Why donâ€™t you take a look at collections module? Counter function will help you to achieve your objective very simply.
You can use itertools.groupby to combine the entries for the same color.  It produces an iterator of pairs (key, values), where values is a generator for the elements matching key.I use a degenerate sum to compute the count of the values, as in this answer, but there are other options.
I would recommend you to use high performant counter. A counter is a container that stores elements as dictionary keys, and their counts are stored as dictionary values.import collectionsa = ["blue", "green", "green", "yellow", "yellow", "yellow", "orange", "orange", "silver", "silver", "silver", "silver"]counter = collections.Counter(a)colors = counter.keys()for color in colors:    print 'Color: %s, Total:  %d' % (color, counter[color])
As requested using no imports, only thing used here was str.count and list comprehension Honestly you don't need many tools to accomplish this, if anything I would have just used listb = set(lista) but you said no set, I threw in the .ljust(6) for fun and makes the output prettier


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
