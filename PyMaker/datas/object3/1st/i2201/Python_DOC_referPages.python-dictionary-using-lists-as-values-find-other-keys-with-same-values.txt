Natural Text
Say I have the following dictionary.>> sample_dict = {"1": ['a','b','c'], "2": ['d','e','f'], "3": ['g','h','a']}I would like to find a way that would look at the values of each of the keys and return whether or not the value lists have the a duplicate variable inside.For example it would output:I've looked at a few of the posts here and tried to use and/or change them to accomplish this, however none of what I have found has worked as intended. They would work if it was as follows:but not if only a single value within the list was the same.
You could use another dictionary to map the values to the lists of corresponding keys. Then just select the values that map to more than one key, e.g.:Output:
If the list elements are hashable, you can use .setdefault to build an inverse mapping like so:
Dictionaries map from keys to values, not from values to keys. But you can write a function for one-off calculations. This will incur O(n) time complexity and is not recommended for larger dictionaries:If you do this often, I recommend you "invert" your dictionary via collections.defaultdict:This costs O(n) for the inversion, as well as additional memory, but now allows you to access the keys associated with an input value in O(1) time, e.g. dd['a'] will return ['1', '3'].
You can use defaultdict from collections module to do thisfor example,d will return a dict, where the keys will be the values that are repeated and values will be the list in which they were repeated inThe output of above code is defaultdict(list,{'a': ['1', '3'],'b': ['1'],'c': ['1'],'d': ['2'],'e': ['2'],'f': ['2'],'g': ['3'],'h': ['3']})â€‹Although it IS possible to get form in which you desired the output to be in, but it is not generally recommended because we are trying to get what character get repeated in which list, that feels like a job of a dictionary


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
