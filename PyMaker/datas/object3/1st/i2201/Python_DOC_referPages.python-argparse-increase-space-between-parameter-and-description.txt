Natural Text
I'm using Python3 argparse for complicated command-line interface. Lots of arguments, some of them are "verbose" to avoid misunderstandings.When param name is long enough and destination variable long as well, it causes ugly formatting when you calling script with --helpI mean, parameter and value are on the one string, description is on other, even though there's plenty of space in console to the right so that put it in one line. Like the fisrt param --help does. When you have 30-40 params, command-line help readability is really worsen
argparse by default limits the maximum space taken for the option+metavar and will write the help message on a separate line, even if the terminal would be big enough to accomodate both.Consider this example script:Results in the following output:The simplest way to try to avoid this problem is specifying the metavar explicitly and use a short value, so instead ov THIS_IS_A_VERY_VERY_VERY_LONG_PARAMETER_NAME you can use, say, X. For example:Which results in:this is already way better, but as you can see with very long parameter names it still wont write all the text on one line.The only way to achieve what you want is to specify a formatter_class and use the max_help_position as described in this question. This however is not part of the public API of the module. I have no idea when they did not add at least a couple of useful parameters to the public API.You still probably want to specify a metavar:The output will be:You could probably try to determine the size of the terminal (most terminals provide a WIDTH or COLUMNS env variable that may be useful for that) to decide the value of max_help_position that would be best in that situation.To have all the parameters help on one line (assuming big enough terminal) you want:
The current HelpFormatter does check os.environ['COLUMNS'] for terminal width.  But that does not get updated dynamically, and might not even be set.There is a patchhttps://bugs.python.org/file24602/issue13041.patch argparse: terminal width is not detected properlythat apparently was recently put into 3.8, that looks at shutil.get_terminal_size().columns instead.As to why argparse doesn't provide more direct control of this width - the design philosophy has been allow a custom formatter_class specification, rather than a (potentially) large set of formatting parameters.  Most of the parameters to ArgumentParser have to do with parsing, not help formatting.  The goal is to allow complete customization without cluttering the inputs with a lot of rarely used parameters.The HelpFormatter class does take several keyword parameters:But the current method of creating a formatter just passes the prog parameter.Giacomo's answer shows how specify these other parameters:You could also subclass HelpFormatter to customize the formatting.  That's what the alternatives like RawTextHelpFormatter do.More on customizing the formatterFrom the argparse documentation:formatter_classArgumentParser objects allow the help formatting to be customized by specifying an alternate formatting class. Currently, there are four such classes:Providing and listing these 4 classes is not meant to be restrictive.  Other customization is allowed, even encouraged.In https://bugs.python.org/issue13023, Steven Bethard, the original author of argparse, advocates writing your own formatter class:Your solution is actually the current recommended solution - mix together both classes that you want to combine and pass your subclass as the parameter. This should probably be documented somewhere (and tested more).The mixing he's talking about is:I addressed the use of max_help_position 3 years ago:https://bugs.python.org/issue25297 max_help_position is not works in argparse libraryand a SO question:max_help_position is not works in python argparse libraryOther examples in argparse where you are allowed to provide custom classes or functions include:https://docs.python.org/3/library/argparse.html#action-classeshttps://docs.python.org/3/library/argparse.html#the-namespace-objecthttps://docs.python.org/3/library/argparse.html#customizing-file-parsinghttps://docs.python.org/3/library/argparse.html#typeI wouldn't worry about the max_help_position parameter disappearing or being disabled.  If I have any say in the matter, any proposed change like that will be rejected on the grounds that it could have backward compatibility issues.In practice it is easiest to change the documentation to match code, or to better illustrate vague points.  In  this case the lambda call to HelpFormatter could be documented.  I can also imagine defining a small function that does the same thing.  Adding features is easiest when there's no chance of harming existing users.


Answer URL
https://docs.python.org/3/library/argparse.html#action-classes
https://docs.python.org/3/library/argparse.html#the-namespace-object
https://docs.python.org/3/library/argparse.html#customizing-file-parsing
https://docs.python.org/3/library/argparse.html#type
