Natural Text
I'm trying to dynamically generate cells. Each cell has a name, defined as a key of a dictionary. The value is an instance of a class, containing three parameters (strength, intelligence, energy).My problem is with names. This code was good enough for the first generation of cells, but when I need to make more, the new cells can override old ones due a name conflict. Is there a way to generate random, but unique cell names to avoid such conflict? I tried to create new names starting with 'a' and the lowest number which doesn't already exist. However, cells die throughout my program. My approach would simply fill in the gaps, which would make it hard to determine which generation the cell is from.
You could use python's uuid library.Simple example (out of context):In your case:
You can try this function to generate random namesThis gives output like'AvkyCzlN9ggPr' and if you run again it may give 'FBPXy5a4Ib'Also you can add a version/generation field to your cell class in addition to energy, strength, intelligence. You can add a counter to get the current version and increment the version every time the cell is updated.Based on what your requirements are you can then use it to remove old cells, or keep them as a version history.To remove old cells, just override a dictionary value with random_string()For eg:- to override to not overwrite and keep track of generationthen you can do key.split("-") to get the key and the version from 'AvkyCzlN9ggPr-1'.Another alternative approach would be to use the dictionary values as a list of objects. So instead of replacing the dictionary value, you can append it to the list.And to access the latest generation just doIf this does not solve your problem leave a comment and I'll update accordingly :)


Answer URL
https://docs.python.org/3/library/uuid.html
