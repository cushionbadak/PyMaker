Natural Text
I have:I want:This code does this:Is there a more pythonic way to do this?
Use collections.defaultdict:
Using groupby.itertools we can create this dicitonaryor using dictionary comprehension
There is nothing wrong with a 2-pass O(n) solution if you are, as here, working with an in-memory object. The main issue with your code is you are misusing the list comprehension.A list comprehension should be used to construct a new list, not to process an in-place function or method in a loop. Taking your example, your logic will create a list which looks like:The side-effect of the comprehension means that organized values have items appended to them as required. Instead, you can rewrite using a simple for loop:Your logic can be made more efficient by not adding keys via an initial iteration. This common problem is resolved by collections.defaultdict, as in @Austin's solution. This solution gives an empty list for any key which does not exist:Since defaultdict is a subclass of dict, there's usually no need to convert this back to a regular dictionary.
Austin's answer is better, but here method just using dicts


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/collections.html#collections.defaultdict
