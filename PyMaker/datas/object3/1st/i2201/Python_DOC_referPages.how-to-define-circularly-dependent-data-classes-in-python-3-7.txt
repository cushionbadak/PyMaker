Natural Text
Suppose that class A has a member whose type is class B, and class B has a member whose type is class A.In Scala or Kotlin, you can define the classes in any order without worries in this case because the firstly-defined class can use the secondly-defined class as usual, even in case/data classes.However in Python, the following codethrows a compile error because class B is not defined when class A is being defined.You can work around this simple case, like in this answerHowever, this way does not work for data classes in Python because assigning members after the definition of data classes will not update the auto-generated methods of the data classes, which makes the usage of "data class" useless.How can I avoid this problem?
There are several ways to solve circular dependencies like this, see Type hints: solve circular dependencyYou can always apply the decorator manually (and update the annotations), like @Nearoo's answer shows.However, it might be easier to "forward declare" the class:Or simply use a forward reference:The cleanest is to import Python 4.0's behavior (if you can):
You can achieve your goal by applying the dataclass decorator only after we injected the field b into A. For that, we simply have to add the type annotation into A's __annotations__-fieldThe following code solves your problem:Concerning the safety and validity of this method, PEP 524 states that ..at the module or class level, if the item being annotated is a simple name, then it and the annotation will be stored in the __annotations__ attribute of that module or class.  [This attribute] is writable, so this is permitted:  __annotations__['s'] = strSo adding a type annotation later on by editing __annotations__ is identical to defining it at the class definition.
As python is script language - there is no way to do it with @dataclass. Because there is no "autowired" (dependency injection) mechanism in python.At this moment if you need circular dependency - you should use one of class as regular.Python compiler goes through each line, without jumping from class/function definition. And when compiler/interpreter see following line b: B and it didn't see B class before - it will throw an exception NameError: name 'B' is not definedI would like to believe that there is way to do that(circular dependency for @dataclass), but the truth is cruel. (There are many things that you can do in Java/other language and can't do in python. Another direction of this statement is truthful either.)


Answer URL
https://docs.python.org/3/whatsnew/3.7.html#pep-563-postponed-evaluation-of-annotations
