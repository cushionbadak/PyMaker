Natural Text
I'm supposed to create a recursive statement that if first calls triangle(n) it returns This above is called for triangle(6) and if I print(triangle(6)) it returns below.Then I must create another code recursive_triangle(x, n) that returns a string with the LAST x lines of a right triangle of base and height n. For example if I did recursive_triangle(3, 6) it returns and if i print it should returnsSo far my code isfor print(triangle(4)) this is what i got How do I modify the code to get the output above?
Your recursion case is ill-formed:First of all, this code returns after a single iteration: return ends your function instance, so i never gets to a value of 2.  You need to do something simple, and then recur on a simpler case to handle the rest.Next, triangle exists only to call recursive_triangle.  Then, recursive_triangle needs to call itself, not loop back to triangle.Finally, note that recursive_triangle utterly ignores the parameter k.  This value is critical to determine where in the line to place the asterisks.Each instance of recursive_triangle should produce a single line of the triangle -- you have that correct -- and then concatenate that line with the remainder of the triangle, returning that concatenated whole to the instance that called it.  You'll want something roughly like:Can you take it from there?  Among other things, remember to insert a few useful print commands to trace your execution flow and the values you generate.
First of all, there are better ways to achieve this.However, if you really want to go this way, the following code can fix the spacing issues.which gives you in Python 3.6.5.
You can count the row with r and use a secondary parameter to count the spaces, s
code.py:Notes:To make things simpler, you can look at recursive_triangle(k, n)'s argument meanings like:k: Recursion step, and also the number of "*" characters. Decrements with every recursive function calln: 1st (longest) triangle line length (the number of SPACEs + k). Remains constant inside recursionCurrent line contains n - k SPACEs followed by k "*" s (n characters in total). Lines are joined together via [Python 3]: str.join(iterable) (or "manually", in the  (next) commented line)The function calls itself until there are no more "*" characters (k becomes 0)Output:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.join
