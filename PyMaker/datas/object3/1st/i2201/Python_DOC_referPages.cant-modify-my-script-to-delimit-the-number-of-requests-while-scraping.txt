Natural Text
I've written a script in python using Thread to handl multiple requests at the same time and do the scraping process faster. The script is doing it's job accordingly.In short what the scraper does: It parses all the links from the landing page leading to its main page (where information are stored) and scrape happy hours and featured special from there. The scrapers keeps going on until all the 29 pages are crawled.As there may be numerous links to play with, I would like to limit the number of requests. However, as I don't have much idea on this I can't find any ideal way to modify my existing script to serve the purpose.Any help will be vastly appreciated.This is my attempt so far:
You should look at asyncio, it's great simple and can help you do things faster!Also multiprocessing.Pool can simplified your code (in case you don't want to use asyncio).multiprocessing.pool also have ThreadPool equivalent if you prefer to to use threads.About the requests limit, I recommend you to use threading.Semaphore (or any other semaphore in case you switch from threading)threading approach:multiprocessing approach:asyncio approch:for conducting http requests with asyncio you should use aiohttp, you can also use requests with loop.run_in_executor but then just don't use asyncio at all, because all your code is pretty much requests.output:run with 0run with 1run with 2run with 3run with 4(here there is a pause du to the semaphore and sleep)run with 5run with 6run with 7run with 8run with 9[0, 2, 4, 6, 8, 10, 12, 14, 16, 18]you can also check ThreadPoolExecutor 
As I'm very new to create any scraper using multiprocessing, I expected to have any real-life script in order to understand the logic very clearly. The site used within the script has some bot protection mechanism. However, i've found out a very similar webpage to apply multiprocessing within it.
Although I'm not sure I could implement the logic of ThreadPool within the following script which has already been described in SocketPlayer's answer, It seems to be working flawlessly. Feel free to rectify, If I went anywhere wrong.


Answer URL
https://docs.python.org/3/library/threading.html?highlight=semaphore#threading.Semaphore
https://docs.python.org/3/library/concurrent.futures.html?highlight=threadpoolexecutor
