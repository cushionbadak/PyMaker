Natural Text
This question already has an answer here:Python: Avoid short circuit evaluation                    2 answers                Most languages have a way to force 'fail early and often' through forcing all booleans in an if to be evaluate.  Suppose I have the following if statement in Python:The problem is I may have forgotten to set either boolean for 'patient_is_brain_dead or 'has_no_left_arm'. Since most alive people are under 100, tests 2 and 3 happen rarely since Python, seeing the 'or' coming ahead, stops evaluating if age<100 to save time.My code is heavily compute-bound, so the overhead of testing all three cases will not degrade performance, but would catch a lot of potential bugs that would happen potentially in one-in-500 cases.  Is there a way to force Python to evaluate them all?  Don't suggest reversing the order, because any case could be the rare one(s) depending on user input.  
In my opinion, you shouldn't want to do this in production code. If a couple of variables should be Boolean and you need to check if either of them are True, you should use short-circuiting logic.So what are your options if, as you say, you want to make sure your code doesn't fail on edge cases? You can use unit testing to test all viable scenarios. But this may be overkill for your use case. You can just use an assert statement:The benefit of such a solution is it's possible to turn off assert statements via command line -O for production code. While, for testing purposes, you can be sure your variables are of the correct type.
No, you will need to explicitly check for None. It is not a "roundabout" way, that is just how the language works.If you want the conditional to fail if any of the variables are not set, you can use all() to check that they aren't None:


Answer URL
https://docs.python.org/3/library/unittest.html
https://docs.python.org/3/reference/simple_stmts.html#assert
https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement
https://docs.python.org/3/library/unittest.html
