Natural Text
I have 2 hashes which i need to compare.1 is coming from an API, other i have calculated internally I am aware that 2 sha512 can be compared using where both inputs are sha512 hash.My problem here is that since i am getting 1 of them from an API, it is of string format and strings don't have digest :*** AttributeError: 'str' object has no attribute 'digest'I thought this would work :how hash is getting generated internally for one of the test cases:But since hash is new every-time, this is not working.How can i compare these 2 hashes under given scenario?EDIT :there was a dynamic timestamp in input because of which there was a difference in hash recieved vc hash generated from params recived.But, i am still getting the value as False on comparing hexdigest!! :\
Add the exact values of input1 and input2 to the question.The only way hash outputs can differ is if the input strings are different, and it seems to me you have a parameter whose value is erroneously being changed every time at runtime. If I were in your shoes, I would check for some timestamp or request randomnumber etc being fed into the SHA calculation every time, which is different for each request.Edit:As the OP mentions, this was an issue with a dynamic timestamp being present in the input string. As for using the bytes function, it is not really needed for strings and comparing direct sha512(input).hexdigest should work.
Since input1 is from an API and is a str, it needs to be fed into the actual hash function. Looking at the documentation (https://docs.python.org/3/library/hashlib.html) we can see that something likeWe need to convert input1 from strto bytes because the hash function expects an input that is bytes-like. However, depending on your Python version (2.X instead of 3.X) this conversion isn't necessary since strings are bytes by default.
secrets module in python provides a function, 'compare_digest', which can also be used to compare two 'sha' family hash functions' digests and hexdigests. Here is an example.
I suspect that you want:But it's difficult to say without seeing more of the code.
Please use type to check your object.Suppose you are sure that your objects are hash, the expression is definitely correct:If the object isn't <type '_hashlib.HASH'> but it is string, you first should hash the object, and then compare the objects.
What i think this should work:Because, digest will produce string. And you getting input1 from api that's string.Demo:May be you need to use hexdigest().


Answer URL
https://docs.python.org/3/library/hashlib.html
https://docs.python.org/3/library/secrets.html
