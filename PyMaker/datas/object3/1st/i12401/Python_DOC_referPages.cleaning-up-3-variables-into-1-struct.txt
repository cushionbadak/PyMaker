Natural Text
I'd like to create a struct that contains the data for stats_user, stats_password, and stats_ui together, instead of having to use them individually like this. How do I go about cleaning this?
It is a pretty bad idea to assign something to config inside a function named config.Python doesn't have anything called a "struct", but if I understand you correctly, you can put it in a dictionary, and unroll it in the call to .format:â€Œand
You could use a namedtuple. See here: https://docs.python.org/3/library/collections.html#collections.namedtupleSomething like:You can then create a Stats object with positional arguments, keyword arguments or a mix:Members may be accessed like any other object (e.g. s1.user)    In your code, you could use one of these objects as:
There are many ways to accomplish this. You could create a class, or you could use a dictionary, or you could use a named tuple.It's not entirely clear from your question how you intend to use them, but with all of these solutions (class, dictionary, named tuple) you can pass the objects around as a single entity. Custom classA class is the most expressive solution. You can define a class that has the attributes you want, but you can also attach methods that work with the data in the class. Classes can also inherit from or be composed of other classes.Named tupleA named tuple is very similar to a class, but is a bit simpler to set up. All you need to do is define the name, and a list of attributes. What you get back is a custom class.Another important distinction is that they are immutable. Once you create a named tuple, you can't change the values that it contains. Notice that in actual usage, classes and named tuples are identical. In both cases you use "dot notation" to access the elements of the object (eg: stats.username).DictionaryA dictionary has the least amount of overhead. It is just a mapping of names to values. A dictionary differs from classes and named tuples in that you reference the elements by giving the item name as a key (eg: stats["username"]).
You could use a dictionary:Then access each with the following:
You could create your own struct-like dict subclass which is its own __dict__. The basic concept is the same as that of the ActiveState AttrDict recipe, but the implementation is simpler. The result is mutable than you need since both an instance's attributes and their values are changeable. Although the attributes aren't ordered, you can iterate through the current ones and/or their values by using the base classes keys() and values() methods (and/or iterkeys() and itervalues() in Python 2).
I'm answering my question for reference, here is how my code looks like now (this works and acts as wanted):My struct is a dictionary and I initiated it as follows:I have an argument parser named args and this is how I am assigning values to my keys in my dict


Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
