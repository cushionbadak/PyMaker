Natural Text
I'm completely new to Python, thus the question. I'm trying to solve a standard interview question, which is finding a peak in an array. A peak is defined as a number which is greater than it's left and right neighbor. I'm trying to find the largest such peak.This is my code:The output of this program is None, where as the expected output is 24. Any help appreciated.
DataA one-liner:One line should be enough:In a loopMaybe easier to understand when you are new to Python:Output:All peaksYou can also use a one-liner to get all peaks:and get the greatest one with max() on the result.ExplanationLet's have a look at some of the components of the solution. I am working with Python 3 here, as everybody should. ;)You can slice lists.This gives you all of the list but the first element:Here its starts with element three:The zip() function zips multiple sequences together. To visualize what happens, you can convert the zip object into a list:Python supports tuple unpacking. This allows to assign individual names to all members of a tuple:Another nice feature is the comparison of more than two objects:This is equivalent to:Python offers list comprehensions:Generator expression work in a similar way but don't produce a list but an iterator and can be consumed without using lots of memory:
you are missing a return statement for your two elif cases
I think the 13 also is a peak (greater than 12 and 8).Try this approach:If you don’t understand anything, ask!
Another approach – using only one function:
I don't think you can find a peak in O(log N) time, because by definition the items cannot be in order, and there is no way to predict the peaky-ness of any item in a list given other items, except that comparing item N with item N+1 is presumably reflexive - it tells you that either N or N+1 might be a peak. That gets you to N/2 compares, which must then be followed by N/2 more compares to check the other side of the peak.Here's a local_maxima(iterable) function that you can use with max() to find peaks. It treats start/end elements as peaks if they are greater than their one neighbor.


Answer URL
https://docs.python.org/3/library/functions.html?highlight=zip#zip
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/glossary.html#term-generator-expression
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
