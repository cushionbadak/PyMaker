Natural Text
I have a strange problem with using mmap in python when writing to memory (/dev/mem).To be clear, reading is done in the same manner and it works OK.But when it comes to writing, it seems that every second byte is unwritable.ex.When I try to write byte by byte, the same happens.ex.Code:Example run (I prepared the memory with other memdump tool [bin] to be 0xEEEEEEEE):Example no 2 (I could not write even 2 bytes at 'first' byte place):Any thoughts on what could be the problem ?
I know what is wrong now.The answer is that it's fault as well of python as my specific hardware/driver.I looked through the implementation of mmap and it uses memcpy, which as we know copies byte by byte. In C implemention this did not happen, when we needed to write 4 bytes, 4 bytes were written.So here comes the limitation of my hardware/driver which is that every register must be written in full (I did not know this at the time of stating the question), thus when writing byte by byte I will get weird behaviour. Some registers are 16bit and some are 32bit.When I was writing 0xFFFF to 16bit register I ended up having 0x00FF. So memcpy was copying 0xFF twice. My driver got write(0xFF) then write(0xFF), so what I was actually doing (because of the python) was two writes to register of byte 0xFF :)Probably the same happened with 32bit registers, although it looked different (but also the driver may behave different).For it to work I would have to change the implementation of python mmap :(


Answer URL
https://docs.python.org/3/library/functions.html#bytes
