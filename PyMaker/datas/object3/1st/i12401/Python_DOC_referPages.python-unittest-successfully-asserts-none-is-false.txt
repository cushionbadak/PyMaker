Natural Text
Why does assertFalse succeed on None?Results:It seems as if this behaviour invites errors where a function does not always return a value. For example:The above test would pass even though it should fail. It is missing an error in the code that should be caught.How should we assert that the value is literally False and not merely false in a boolean context? e.g.
None is falsy, as well as 0, "", [], ...assertFalse does not check whether the given value is False by identity. This behavior is consistent with the if statement:Similarly, assertTrue does not check whether a value is True, and as such values like 1, "abc", [1, 2, 3] pass the test. See Truth Value Testing for more information.This behavior is also explicitly documented:Test that expr is true (or false).Note that this is equivalent to bool(expr) is True and not to expr is TrueIf you really want to be sure that a value is True or False, use assertIs.
Your case is actually pointed out in the documentation:Note that this is equivalent to bool(expr) is True and not to expr is  True (use assertIs(expr, True) for the latter).Source: https://docs.python.org/2/library/unittest.html#unittest.TestCase.assertFalse
Python default return value for functions is None.Python also implements Duck typing, so some values are threated as falsey, those areempty stringinteger zeroboolean Falseempty listempty tupleSo yes, you should implement it as self.assertEquals(False, None) if you want to explicitly check the False boolean value. This is not a good idea, in python you can just doYou could design your test cases using boundary-value analysis to check your corner cases.


Answer URL
https://docs.python.org/3/library/stdtypes.html#truth-value-testing
https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTrue
https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIs
