Natural Text
Suppose I have a empty string, it will be split:The result of the split is ['']. I use bool to check it whether or not it's empty. It will return True.How do I check the split result is empty?
With bool(['']) you're checking if the list [''] has any contents, which it does, the contents just happen to be the empty string ''. If you want to check whether all the elements in the list aren't 'empty' (so if the list contains the string '' it will return False) you can use the built-in function all():This takes every element v in list l and checks if it has a True value; if all elements do it returns True if at least one doesn't it returns False. As an example:You can substitute this with any() to perform a partial check and  see if any of the items in the list l have a value of True.A more comprehensive example* with both uses:*As @ShadowRanger pointed out in the comments, the same exact thing can be done with all(l) or any(l) since they both just accept an iterable in the end. 
If emptiness is the important result, probably best to test the original string first:The first test rules out empty initial strings, the second one using any rules out strings that were nothing but the split character, and therefore returned a whole bunch of empty strings, but no non-empty strings. As long as you got one non-empty string, it passes.Note: In case you're trying to parse CSV files, don't use .split(','); there is a csv module that handles this correctly (including escapes, quoting, etc.), and should ALWAYS be used for parsing CSV, never roll your own parser. Added bonus: csv will convert '' inputs to [] rows, which you can test for truthiness directly, not to [''] like str.split does. Example:vs. the same approach with str.split(',') which still doesn't handle quoting, escaping, etc.:
In your case it truly isnt emptyIf you want to check if the element within that list is empty you can do:
The split result isn't empty. The sense of "emptiness" you're looking for is best checked by looking at the original, unsplit string:But if you really want to look at the split result for this:
According to the str.split() documentation, "Splitting an empty string with a specified separator returns ['']."To check for this case, when you are using an explicit delimiter (like your use of split(",")), do something like this:


Answer URL
https://docs.python.org/3/library/functions.html#any
https://docs.python.org/3/library/csv.html
