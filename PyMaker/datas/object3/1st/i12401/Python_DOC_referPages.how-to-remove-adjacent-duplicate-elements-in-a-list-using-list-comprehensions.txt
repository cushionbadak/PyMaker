Natural Text
This question already has an answer here:Remove adjacent duplicate elements from a list                    17 answers                Is there a way to use list comprehensions in python to filter adjacent duplicates from a list?Here's an example of what I mean:A search through SE revealed an earlier inquiry asking a similar but slightly different question: whether all duplicates could be removed from a list, but not explicitly asking for solutions involving list comprehensions. The motivation for using list comprehensions specifically follows a recognition of their advantages over traditional for loops.  Users suggested the use of the set() function or standard looping as such:The set() suggestion fails to meet the task in that non-adjacent duplicates are removed, while the loop is effective but verbose.It seems a means for safely referencing the next element in a list comprehension as follows is needed.Any ideas?
You could use list comprehension and enumerate with solution suggested by @AChampion:That list comprehension return item if it's first or for the following if it's not equal to previous. It'll work due to lazy evaluations of if statement.
You can use itertools.groupby:itertools.groupby returns an iterator. By iterating it, you will get a key, group pairs. (key will be a item if no key function is specified, otherwise the return value of the key function). group is an iterator which will yields items grouped by applying key function (if not specified, same values will be grouped)Above solution, I used only key because the question does not care how many items are adjacent.
Using pairwise from the itertools recipes (with zip_longest) gives you an easy way of checking the next element:
You could use a less verbose loop solution:Or:
How about this:Apparently, above solution is more verbose than OP's, so here is an alternative to that using zip_longest from itertools module:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/library/functions.html#enumerate
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.zip_longest
