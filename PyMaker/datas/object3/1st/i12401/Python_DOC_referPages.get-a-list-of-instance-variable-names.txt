Natural Text
I want to get a list of all instance variables of a class without creating an instance of that class. I have a feeling that this is not possible in Python.Suppose I have this class:What I want to get from this is the list ['lastname', 'age', 'firstname'].The only way I've been able to get this is by using a temporary instance of Person:The problem here is that, because fullname.split() is called, if I try to make an empty instance with Person(None, None), an error will be raised. I'm not allowed to change __init__ to allow this.My first thought was to use vars(Person).keys(), but this gives all attributes of the Person type, not what an instance of Person would have:Is there a way, without modifying the class, to do this without using temp?
Python does not know what attributes will be defined until it executes the __init__ method.  In order to execute that method, you have to create an instance of the class.  Oh well :(
It depends on how badly you want to know. For example, you could fork/exec a new instance of your program, instantiate the class, analyze the instance, and return your result.You could create an object that used some of the __magic_methods__() to detect which, if any, of its methods were being called (such as .split()) and then try to guess an appropriate input type...But can you call something that knows what the starting list of instance data will be? No.


Answer URL
https://docs.python.org/3/reference/datamodel.html?highlight=__set__#object.__setattr__
