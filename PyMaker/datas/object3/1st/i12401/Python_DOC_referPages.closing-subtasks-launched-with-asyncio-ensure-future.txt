Natural Text
If I have the following:And baz() is called in a larger event loop, how can I make sure that foo() is cancelled?
A try/finally block would catch the CancelledError exception:Some task functions already handle the cancellation of subtasks:In both examples, foo() is wrapped in a task and would be canceled automatically if the parent task were to be canceled.EDITHere's a simple example of a coroutine controlling the execution of another one:Now, await control(foo(), 1.) should work exactly like await foo() (regarding cancellation, exception and result) except it prints The task is not finished yet every second until foo() is done.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.CancelledError
https://docs.python.org/3/library/asyncio-task.html#task-functions
