Natural Text
I expect this is really simple but I can't work this out.I am trying to write to a log file in real time the output from a DD imaging subprocess - I'm using DD v 8.25 from which you can get regular progress updates using the 'status=progress' option which writes to stderr.I can get it to log the full output real time by passing the file object to the stderr i.e...but I would prefer to intercept the string from stderr first so I can parse it before writing to file.I have tried threading but I can't seem to get it to write, or if it does, it only does it at the end of the process and not during.I'm a python noob so example code would be appreciated. Thanks!UPDATE - NOW WORKING (ISH)I had a look at the link J.F. Sebastian suggested and found posts about using threads, so after that I used the "kill -USR1" trick to get DD to post progress to stderr which I could then pick up:The only issue is I can't work out how to improve performance. I only need it to report status every 2 seconds or so but increasing the time delay increases the time of the imaging, which I don't want. That's a question for another post though...Thanks to both J.F. Sebastian and Ali.
With this example it's possible (with python 3) to stream from stderr to console:To stream to a file:
To display dd's progress report in a terminal and to save (parsed) output to a log file:Noteno shell=True: you don't need the shell here. Popen() can run dd directlyno threads, queues: you don't need them hereplease, please DO NOT USE while proc1.poll() == None You don't need it here (you'll see EOF on proc1.stderr if proc1.poll() is not None). You may lose data (there could be a buffered content even if the process has exited already). Unrelated: if you need to compare with None; use is None instead of == Noneio.TextIOWrapper(newline='') enables text mode(it uses locale.getpreferredencoding(False)) and ittreats '\r' as a newline toouse the default bufsize=-1 (see io.DEFAULT_BUFFER_SIZE)


Answer URL
https://docs.python.org/3/library/io.html#io.DEFAULT_BUFFER_SIZE
