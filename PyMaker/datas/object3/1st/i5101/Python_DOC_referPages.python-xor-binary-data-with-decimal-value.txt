Natural Text
I'm a little bit confused about the behavior of the bitwise xor operator. Why, if xor is possible only with binary data, am I able to use xor with decimal numbers?For example:ord(fs) gives me an ASCII code that is not binary.
According to the Python 3 documentation for built-in functions, ord() returns an integer:Given a string representing one Unicode character, return an integer representing the Unicode code point of that character. For example, ord('a') returns the integer 97 [...]This integer is represented by a sequence of bits, and so it is a valid operand to the bitwise XOR operator.EditPython interprets the value 97 as an integer. And, internally, the integer numeric type is represented as a sequence of bits. The integer type is described in Numeric Types. Another section of that same documentation explains Bitwise Operations on Integer Types, and it states thatBitwise operations only make sense for integers.That is, bitwise operations on any other type, including a string, are invalid in Python.So ord() returns an integer. Which is represented internally as a sequence of bits. Although its type is not explicitly "binary," Python still defines the bitwise XOR operator for integers.To be clear, all values are represented internally as a sequence of bits. It's just that Python only defines the bitwise XOR operator for integers.
It works exactly as designed, just that you need to assign it to a variable, and print them. You can convert them (=integers) back to a binary strings like this '{0:b}'.format(some_integer). The .zfill(8) in the below example is to "zero fill left to 8 chars" to align them up neatly.Example:output:


Answer URL
https://docs.python.org/3/library/functions.html#ord
https://docs.python.org/3/library/stdtypes.html#typesnumeric
https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types
