Natural Text
The output is:If variable 'b' which holds the function 'adder' remembers the scope of variable (x=3), shouldn't the output be '4' no matter how many times you call it.
Links below should provide more info:Python closuresPython nonlocal statementWhat this boils down to in the end in your example:You instantiate two separate function objects in variables a and bYou invoke a once, it increases the value onceYou invoke b three times which increases the value three timesSince the value that gets increased in the closure is defined in the method that increases it as nonlocal, the value is stored after each change that is done to it in the parent function, in the x variable.
The line x += 1 is modifying the nonlocal variable x. So, the next time the closure_add() is called, the value of x has been incremented.However, also note that each adder() function object (the function returned by closure_add()) "owns" a separate copy of x. Which explains why the first calls to a() and b() output 4.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#grammar-token-nonlocal_stmt
