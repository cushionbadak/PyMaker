Natural Text
I have a Debian system currently running with python 2.5.4. I got virtualenv properly installed, everything is working fine. Is there a possibility that I can use a virtualenv with a different version of Python?I compiled Python 2.6.2 and would like to use it with some virtualenv. Is it enough to overwrite the binary file? Or do I have to change something in respect to the libraries?
Just use the --python (or short -p) option when creating your virtualenv instance to specify the Python executable you want to use, e.g.:N.B. For Python 3.3 or later, refer to The Aelfinn's answer below.
UPDATE:  For Python3.6, the below pyvenv script is deprecated. Instead, the Python Docs suggest creating the virtual environment with the following command:For python3 (3.3+), use either the above method or the script pyvenv command.Please note that venv does not permit creating virtualenv with other versions of Python. For that, install and use the virtualenv package.
These are steps when you are on shared hosting environment and need to install & complie Python from source and then create venv from your Python version. For Python 2.7.9 you would do something along these lines:virtual envNaturally this can be applicable to any situation where you want to replicate the exact environment you work and deploy on. 

There is an easier way, Thanks to  a comment, this only works if you have python2.7 installed at the system level (e.g. /usr/bin/python2.7).Otherwise, if you are using homebrew you can use the path to give you what you want.You can find the path to your python installation with This will also work with python 3. Ultimately condensing to:
Under Windows for me this works:without the python.exe I got WindowsError: [Error 5] Access is denied I have Python2.7.1 installed with virtualenv 1.6.1, and I wanted python 2.5.2.
Mac OSX 10.6.8 (Snow Leopard):1) When you do pip install virtualenv, the pip command is associated with one of your python versions, and virtualenv gets installed into that version of python.  You can doto see what version of python that is.  If you see something like:then do:You can see the python version in the output.By default, that will be the version of python that is used for any new environment you create. However, you can specify any version of python installed on your computer to use inside a new environment with the -p flag:  virtualenv my_env will create a folder in the current directory which  will contain the Python executable files, and a copy of the pip  [command] which you can use to install other packages.http://docs.python-guide.org/en/latest/dev/virtualenvs/virtualenv just copies python from a location on your computer into the newly created my_env/bin/ directory. 2) The system python is in /usr/bin, while the various python versions I installed were, by default, installed into:3) The various pythons I installed have names like python2.7 or python3.2, and I can use those names rather than full paths. ========VIRTUALENVWRAPPER=========1) I had some problems getting virtualenvwrapper to work.  This is what I ended up putting in ~/.bash_profile:  2) The -p option works differently with virtualenvwrapper: I have to specify the full path to the python interpreter to be used in the new environment(when I do not want to use the default python version):  Unlike virtualenv, virtualenvwrapper will create the environment at the location specified by the $WORKON_HOME environment variable.  That keeps all your environments in one place.
Suppose you currently have python 2.7 installed in your virtualenv. But want to make use of python3.2, You would have to update this with:Then activate your virtualenv by:and then do: python --version in shell to check whether your version is now updated.
These two commands should work fine for a newbievirtualenv -p python2 myenv  (For python2)virtualenv -p python3 myenv  (For python3)
You can call virtualenv with python version you want. For example:Or alternatively directly point to your virtualenv path. e.g. for windows:And by running:you can see the python version installed in virtual environment
The -p approach works well, but you do have to remember to use it every time.  If your goal is to switch to a newer version of Python generally, that's a pain and can also lead to mistakes.Your other option is to set an environment variable that does the same thing as -p. Set this via your ~/.bashrc file or wherever you manage environment variables for your login sessions:Then virtualenv will use that any time you don't specify -p on the command line.
For Mac(High Sierra), install the virtualenv on python3 and create a virtualenv for python2:
On the mac I use pyenv and virtualenvwrapper. I had to create a new virtualenv. You need homebrew which I'll assume you've installed if you're on a mac, but just for fun:I also froze my requirements first so i could simply reinstall in the new virtualenv with:
Even easier, by using command substitution to find python2 for you:virtualenv -p $(which python2) <path/to/new/virtualenv/>Or when using virtualenvwrapper : mkvirtualenv -p $(which python2) <env_name>
In windows subsystem for linux:Create environment for python3:Activate it:
Yes, the above answers are correct and works fine on Unix based systems like Linux & MAC OS X.I tried to create virtualenv for Python2 & Python3 with the following commands.Here I have used venv2 & venv3 as their names for Python2 & Python3 respectively.Python2 »Python3 »Checking Python installation locations
It worked for me
On windows:or This uses the py launcher which will find the right python executable for you (assuming you have it installed).
Link to Creating virtualenv
For Debian (debian 9) Systems in 2019, I discovered a simple solution that may solve the problem from within the virtual environment.Suppose the virtual environment were created via:but only has versions of python2 and python2.7, and you need the recent features of python3.7. Then, simply running the command:will add python3.7 packages if they are already available on your system.
This was a bug with virtualenv.Just upgrading your pip should be the fix.pip install --upgrade virtualenv


Answer URL
https://docs.python.org/3/library/venv.html
https://docs.python.org/3/library/venv.html
https://docs.python.org/3/using/windows.html#launcher
https://docs.python.org/3/library/venv.html
