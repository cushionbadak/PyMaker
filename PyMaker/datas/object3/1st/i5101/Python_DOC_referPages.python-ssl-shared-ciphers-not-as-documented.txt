Natural Text
According to the Python 3 documentation:SSLSocket.shared_ciphers() Return the list of ciphers shared by the client during the handshake.I interpret that as meaning that the 'Cipher Suites' block from the TLS CLIENT_HELLO packet, the first packet of the handshake, will be returned.  Given the following openssl command:the packet on the wire, as displayed in wireshark, is shown with that single cipher (and the RENEGOTIATION faux-cipher):However, when my server code calls shared_ciphers() after the handshake, it is returned the server's entire cipher suite, not what the client sent in the handshake.  Here's what the server prints:Questions:Could I be mis-interpreting the documentation?Given the server code below, am I doing anything wrong that would give me this incorrect result?Is there an appropriate forum where I could report this as a potential bug?  (Github seems to be the authoritative source for the module, but I don't see a forum for reporting there.  My git-fu is terrible, though.)Here's the server code:
This is a bug.Looking at the C implementation for the ssl module one can see that both get_ciphers and shared_ciphers are implemented by using SSL_get_ciphers, albeit one using the context as base and the other the SSL object from the current connection. And SSL_get_ciphers accesses the cipher_list property from the SSL or context object which seems to be the list of originally configured ciphers.I think the proper function to get the shared ciphers is actually SSL_get_client_ciphers. This functions accesses ssl->session->ciphers, same as the more clearly named (but undocumented) SSL_get_shared_ciphers function. SSL_get_client_ciphers is only available since OpenSSL 1.1.0 so one would need to directly access ssl->session->ciphers for older versions.It looks like OpenSSL does not provide such functionality at all and thus Python cannot really provide this functionality too. The functions SSL_get_client_ciphers, SSL_get_shared_ciphers and access to ssl->session->ciphers all provide access to the ciphers offered by the client, i.e. exactly what the name SSL_get_client_ciphers suggests and contrary to what SSL_get_shared_ciphers suggests. This information gets combined with the server side cipher_list inside the internal ssl3_choose_cipher function where the common cipher gets chosen. Getting the actually shared ciphers (which are additionally restricted by what kind of certificate is used) would mean to reimplement major parts of this function. Funnily, it looks like the OpenSSL developers don't even know what ssl->session->ciphers really contains. Since the 0.9.8 days up to the latest version of OpenSSL one can find the following documentation for the ciphers member of the ssl_session_st structure:Based on this they seem to (wrongly) think that this structure contains the shared ciphers but they are not sure.Note that I've filed a bug for Python about this wrongly implemented functionality: https://bugs.python.org/issue32813. Based on what OpenSSL offers my guess is that the function should be removed entirely from Python instead of returning the wrong data. I've also filed a bug for OpenSSL about the misleading name of SSL_get_shared_ciphers: https://github.com/openssl/openssl/issues/5317. 


Answer URL
https://docs.python.org/3/library/ssl.html
