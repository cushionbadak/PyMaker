Natural Text
I recently came across this notationFirst I don't know how to search for the notation in creating c, is there a name for this type of structure?Also, I'm confident that c can be updated to not allow x to equal z. Please can you help me with this?I've tried various things on the lines ofbut so far I can't find anything that works, or is even valid syntax.What I'm trying to accomplish is to find every combination of (a,b,a) where a can only be used once in each line so the result would beThanks
It is known as list comprehension and you can use logical if within it to filter the results in the returned list as:Instead of using nested list comprehension, you may get the same behavior using itertools.product as well:
this is list comprehension and the correct syntax for the filtering condition is this:c = [(x,y,z) for x in a for y in b for z in a if x != z]List comprehensions
The syntax being used to create c is called a list comprehension. Almost your exact case is the fourth code example in those docs:A list comprehension consists of brackets containing an expression followed by a for clause, then zero or more for or if clauses. The result will be a new list resulting from evaluating the expression in the context of the for and if clauses which follow it. For example, this listcomp combines the elements of two lists if they are not equal:>>>[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y][(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]All you need to do is change your last for to an if:
Just for the sake of variety, I would like to add the following solution that is based on itertools.product and circumvents the if check.producing:I did some timings too to compare the different approaches using:and the results are:So it seems that the plain list comprehension is the fastest. This behavior persists with bigger a lists too.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/library/itertools.html#itertools.product
