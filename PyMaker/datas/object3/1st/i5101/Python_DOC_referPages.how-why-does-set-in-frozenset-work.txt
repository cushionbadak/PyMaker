Natural Text
Even though sets are unhashable, membership check in other set works:I expected TypeError: unhashable type: 'set', consistent with other behaviours in Python:So, how is set membership in other set implemented?
The last line of the documentation for sets discusses this:Note, the elem argument to the __contains__(), remove(), and discard()  methods may be a set. To support searching for an equivalent  frozenset, a temporary one is created from elem.
set_contains is implemented like this:So this will delegate directly to set_contains_key which will essentially hash the object and then look up the element using its hash.If the object is unhashable, set_contains_key returns -1, so we get inside that if. Here, we check explicitly whether the passed key object is a set (or an instance of a set subtype) and whether we previously got a type error. This would suggest that we tried a containment check with a set but that failed because it is unhashable.In that exact situation, we now create a new frozenset from that set and attempt the containment check using set_contains_key again. And since frozensets are properly hashable, we are able to find our result that way.This explains why the following examples will work properly even though the set itself is not hashable:


Answer URL
https://docs.python.org/3/library/stdtypes.html#frozenset.clear
https://docs.python.org/3/reference/datamodel.html#object.__contains__
https://docs.python.org/3/library/stdtypes.html#frozenset.remove
https://docs.python.org/3/library/stdtypes.html#frozenset.discard
