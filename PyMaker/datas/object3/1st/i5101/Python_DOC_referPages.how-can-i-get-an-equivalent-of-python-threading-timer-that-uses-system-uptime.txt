Natural Text
TL;DR threading.Timer uses system time but the time changes while I'm using it, how can I get it to use system uptime?I have a Python script that does a bunch of stuff one of which is set the system time. When this script starts up the time is wrong. This script also needs to have a global timeout of 30 seconds.I have been using the following timeout class:Which wraps my entire script:occasionally the script fails really quickly or never gets killed after the 30 seconds. I believe this is because threading.Timer uses the system time which gets changed while the script is running. Is there anyway I can get it to use system uptime?
It seem like your are using Python < 3.3. On Python 3.3 or newer, monotonic will be an alias of time.monotonic from the standard library. time.monotonic was then also used for the threading-libary. As said in the docs:Return the value (in fractional seconds) of a monotonic clock, i.e. a clock that cannot go backwards. The clock is not affected by system clock updates.So, with Python >=3.3 threading.Timer will be independent.trying to solve your problem:WindowsI see an option to get your desired system-uptime using gettickcount from the kernel32.dll using ctypes:with this you could create your own timer with something unperformant as this:I realy hope this approach helps with your problem - good luckEDIT:Linuxbased on monotonic: you can try this as alternative to getTickCount1:1:  Copyright 2014, 2015, 2016 Ori Livneh   Licensed under the Apache License, Version 2.0 (the "License");  you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software  distributed under the License is distributed on an "AS IS" BASIS,  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
I ended up extending threading.Timer to use system uptime.


Answer URL
https://docs.python.org/3/library/time.html#time.monotonic
