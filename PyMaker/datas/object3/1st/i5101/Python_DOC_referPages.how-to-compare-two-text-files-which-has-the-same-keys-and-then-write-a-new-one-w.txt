Natural Text
Input files:file1.txtfile2.txtDesired output:My current code:Edit:With this code here I managed to only print the one with similar keys. I managed to do a dictionary method where I assign the first column as key but I can only print the one with similar keys.
This seems to do what you want:Description:We create a tmp defaultdict first to store the various attributes (age, occupation, ...) that each person might have. The defaultdict creates an empty list for us whenever we access a key for the first time, this allows us to do tmp[name] += (a, b) without having to first check if name already exists (and if not, create a new list), improving readability.Have a look at the itertools.chain(l1, l2, ...) documentation for an explanation of that as the example provided there is pretty concise.Iterating through f1 and f2 will yield each line of the file, including any newlines, so we have to first use l = l.strip() to strip those off before continuing further.If your input file has blank lines, then if not l: continue is used to check if l is the blank string, '' (which evaluates to False), and if it is, skip it. We could have alternatively had:However this is slightly worse form, prefer to write your code assuming everything goes as planned and introducing if statements to handle the exceptional cases instead will improve its readability.We now split each line into their three components with l.split(',') and unpack the result into the variables name, a, b, assuming that the format of your input file will always be, the persons name, followed by two arbitrary attributes, delimited by commas. (If you're unsure on how tuple unpacking works, this seems to provide a good introduction to tuples in general (including unpacking)).Since we can extend lists like so:We then append our person's attribute a and b into tmp[name] by doing tmp[name] += (a, b).The last step now that the tmp dictionary has been constructed with everyone's names and attributes, is to write it into our out file.Here we use a list comprehension to format our output (if you're also unsure of this, have a look at the documentation linked), and if you're unfamiliar with the * operator, it is used here to unpack v (which is the list of attributes for person with name k), link to doc.And then ','.join(lst) will combine the strings in lst (in this case (k, *v)) into one string, each value separated by ','.Finally, we add on a newline onto the end since out.writelines(lines) doesn't include them for us, and we write our lines to the file with writelines().


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/itertools.html#itertools.chain
https://docs.python.org/3/library/stdtypes.html#str.strip
https://docs.python.org/3/library/stdtypes.html#str.split
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists
https://docs.python.org/3/library/stdtypes.html#str.join
https://docs.python.org/3/library/io.html#io.IOBase.writelines
