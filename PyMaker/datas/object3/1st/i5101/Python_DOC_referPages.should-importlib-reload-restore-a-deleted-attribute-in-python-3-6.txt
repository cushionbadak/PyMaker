Natural Text
I'm looking into these two related questions: here and here.I am seeing a behavior I do not expect in Python 3.6, which differs from behavior using plain reload in Python 2.7 (and 3.4). Namely, it seems that a module attribute that would be populated during module initialization or when re-exec-ing the module during a reload, is not restored after its local name is removed with del ... see below:For Python 3.6:For Python 2.7 (and Python 3.4):I have tried chasing the details of importlib from the source code down to the C-level module exec function, and I can't see any logic that would cause it to fail to write the re-initialized cos attribute back into the module's dict of module-scope globals.My suspicion is that it's some type of bug in the C-level re-execution logic that looks at the attribute names found in the module's dictionary (the one that exists from whenever it was previously imported, and may be mutated to have deleted an attribute, like in my example), and then when using exec to write the module's execution side-effects into that dictionary, it's skipping key names (like cos) that don't exist in the module's namespace, which is different from the Python 2.7 behavior.
I believe this is an (intended? unintended?) effect of PEP 489, an overhaul of extension module initialization. The PEP includes the following section:Module ReloadingReloading an extension module using importlib.reload() will continue to have no effect, except re-setting  import-related attributes.Due to limitations in shared library loading (both dlopen on POSIX and  LoadModuleEx on Windows), it is not generally possible to load a  modified library after it has changed on disk.Use cases for reloading other than trying out a new version of the  module are too rare to require all module authors to keep reloading in  mind. If reload-like functionality is needed, authors can export a  dedicated function for it.The code change that appears to be responsible for this behavior was introduced in the commit that implemented PEP 489.Even Python 3.4 didn't support truly reloading an extension module from a changed file; the closest it had was code to save a copy of the module's dict after initialization and copy the contents back into the module's actual dict on a reload. That code still exists, but it is no longer triggered for reloads, and I don't know if it was ever intended to be triggered for reloads. I believe that code is currently only used for subinterpreters.


Answer URL
https://docs.python.org/3/library/importlib.html#importlib.reload
https://docs.python.org/3/library/importlib.html#importlib.reload
