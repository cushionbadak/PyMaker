Natural Text
I have a list of of tuples that represent different times I want to return the max from the list, after some searching I realized I could use the key in max to search by the AM or PM first.print(max(timeList, key = operator.itemgetter(2)))When I run this however, I'm getting the wrong max ('4', '12', 'PM') I thought about it, and not only does it not make sense, given that 8:23 should be max, but I also realized that 12:48 would probably return max since it's a PM and also technically greater than 8 in my search.That being said, how might I get this max to find the latest possible time, given formatting of the list can not be changed. 
Just define an appropriate key-function. You want int(hour), int(minute) and 'PM' already sorts lexicographically higher than "AM", but it should be considered first, so. Also, you need to take the hours modulus 12, so that 12 sorts less than other numbers, within a pm/am:But what would make the most sense is to actually use datetime.time objects, instead of pretending a tuple of strings is a good way to store time.So something like:Note, now max "just works":And if you need a pretty string to print, just do the formatting at that point:
Why not add structure to your data?While you say "formatting of list should not be changed", that's exactly what all solutions are implicitly doing in order to perform comparisons.
key param with the max function is used to notify max on which value you want to perform max operation. itemgetter(2) fetches the value at 2nd index, and lexicographically "PM" is the highest value in the list at index 2 (lexicographically 'PM' > 'AM'). You may use a lambda function to calculate the maximum on tuple at index 0 and 1 as:OR, you perform the comparison on datetime.datetime object as:I think you should have created the list of datetime.datetime instead of time tuples initially.
Adding to the solutions you can also sort with datetime:Returns:
This is really elegantly implemented in pandas, which allows a MultiIndex, which we can then sort on and take the head:Notes:If you want to keep hr,min,meridiem as columns in your df, then use set_index(..., drop=False)as AntonvBR points out, if the timestamp also included a timezone, then we could no longer use a simple sort on multiple distinct (string) fields; we'd want to compute the underlying datetime then use that as sort key.
looks like you timeList are times.maybe it makes sense parsing it as such?


Answer URL
https://docs.python.org/3/library/datetime.html#datetime.datetime
https://docs.python.org/3/library/datetime.html#datetime.datetime
