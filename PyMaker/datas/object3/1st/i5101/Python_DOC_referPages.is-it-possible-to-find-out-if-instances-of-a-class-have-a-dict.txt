Natural Text
Given an arbitrary class X as input, is it possible to find out if instances of X will have a __dict__?I tried hasattr(X, '__dict__'), but that doesn't work because it checks whether the class object has a __dict__:The absence of __slots__ also isn't a guarantee that there's a __dict__:I also considered creating an instance of X with object.__new__(X) (to bypass X.__new__ and X.__init__, which could potentially have undesired side effects), but this fails for built-in types:Is it possible to do this without calling any unknown/untrusted code (like the constructor of X)?
dir() will list __dict__ in Python3, example:
You can use inspect module to get all attributes of an instance which are not methodsWill produce a long lists of all attributes of b and their small description.I have performed some tests to see how it works, Here are my findings


Answer URL
https://docs.python.org/3/library/inspect.html
