Natural Text
I want to get a list of k-sized tuples with the combinations of a list of elements (let's call it elements) similar to what itertools.combinations_with_replacement(elements, k) would do. The difference is that I want to add a maximum to the number of replacements per element. So for example if I run the following:I get:I would like to have something like the following:Which would printNotice that the max number of 'a' in each tuple is 2 so ('a', 'a', 'a') is not part of the result. I'd prefer to avoid looping through the results of itertools.combinations_with_replacement(elements, k) counting the elements in each tuple and filtering them out.Let me know if I can give any further info.Thanks for the help!UPDATEI tried:and get:I get the elements I need but I lose the order and seems kind of hacky
I know you don't want to loop through the results but maybe it's easier to filter the output in this way.
Pure Python Solution (i.e. without itertools)You can use recursion:and a test shows it works:note that we do loose the order but this is unavoidable if we are passing els as a dictionary as you requested.
I believe this recursive solution has the time complexity you desire.Rather than passing down a dict, we pass down a list of the item pairs. We also pass down start_idx, which tells the 'lower' recursive function calls to ignore earlier elements. This fixes the out-of-order problem of the other recursive answer.As an bonus, profiling shows it's more performant than the set(itertools.combinations(_)) solution as the input size grows.


Answer URL
https://docs.python.org/3/library/collections.html?highlight=ordereddict#collections.OrderedDict
