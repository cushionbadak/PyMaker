Natural Text
I'm working with a list that contains both strings and integers, and I want to create a function that concatenates new elements to these strings and integers based on different conditions. For instance if the element in the list is an integer I want to add 100 to it; if the element is a string I want to add "is the name". I tried working with a list comprehension but couldn't figure out how to account for strings and integers both being present in the list (so not sure if this is possible here). Here's a basic example of what I'm working with:the output would look like this:I tried using something like this:I also tried using basic for loops and wasn't sure if this was the right way to go about it instead:
You were close. instead of checking for equality with type, use 'is'. You can also do isinstance() as pointed out in the comments to check for inheritance and subclasses of str/int.
Plain LC:
A list comprehension is one way:
Just change the position of the if condition and add an 'else' condition to it. Just as this:
You can create a mapping dict with key as mappings and value as the value that needs to be concatenatedNext you can do simple list comprehension and use + operator on each list element and value from mapping dict. You would need to yield a two tuple of list element and its type. This can be achieved using zip and map


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
