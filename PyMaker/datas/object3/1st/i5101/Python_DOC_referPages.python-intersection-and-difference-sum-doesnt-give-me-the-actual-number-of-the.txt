Natural Text
I have two lists, one with old IDs and one with new IDs.I want to get items in common and items not common. The new_Items list has all new ones. The old_Items has the old ones.I suppose that when I calculate the ones in common plus the in new items list but not in old items list, I get the actual number of new items. Here is the code and the output.output
What you're looking for is called the "symmetric difference".Or,This gives you items that belong to either set, but not both. You are currently computing only those items that belong to new_Items, but not the other way round, hence the discrepancy.Refer to the set.symmetric_difference docs. 
A-B gives items of A which are not in B B-A gives items of B which are not in AEither of these is not what you are looking forFor items not common you need (A union B) minus (A intersection B)which is the symmetric difference of setsYou can also get by "(A-B) union (B-A)"
The list had some repeated items, that was the problem.So the set cuts these repeated items and that is why printing less numbers than I expect. 


Answer URL
https://docs.python.org/3/library/stdtypes.html#frozenset.symmetric_difference
