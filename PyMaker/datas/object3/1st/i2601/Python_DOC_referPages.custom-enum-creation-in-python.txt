Natural Text
This question already has an answer here:Overriding Enum __call__ method                    1 answer                I can easily create a class likeThen I can assign variables by enum value:a = MyEnum('bob')However -- I want to assign variables by things that could be the correct value.  I.e., I'd like to doand have them all work, and all map to the same enum value.Is there a way of doing this without making a factory method?  I've currently defined a create method, so a = MyEnum.create('Bob') works, but I'd like things to be seamless.
The thing you are looking for is called _missing_ and is available in the stdlib as of Python3.6, and in aenum1 as of 2.0.If _missing_ fails to return a MyEnum member then EnumMeta will raise an exception (so _missing_ doesn't have to worry about that part)2.1 Disclosure:  I am the author of the Python stdlib Enum, the enum34 backport, and the Advanced Enumeration (aenum)  library.2 Thanks, Aran-Fey, for bringing that up.
This can be achieved by subclassing EnumMeta, which is the metaclass responsible for defining the __call__ method that's invoked by MyEnum('Bob').(Keep in mind that all the enum values have to be lowercase; i.e. BOB = 'Bob' would not work.)Demonstration:


Answer URL
https://docs.python.org/3/library/enum.html
https://docs.python.org/3/library/enum.html#enum-classes
https://docs.python.org/3/reference/datamodel.html#object.__call__
