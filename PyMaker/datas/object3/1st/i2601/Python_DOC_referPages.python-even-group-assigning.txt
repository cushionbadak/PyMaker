Natural Text
I am a beginner to python and was working on a random team generator. The issue I've run into is that I am not sure of how to make it generate even teams. The code is below as well as a sample output.Sample output:
SolutionOutputCommentsI agree with all said solutions, but I think most of them deviate pretty far from what your original code was.I tried to remain true to your code while implementing the missing pieces needed to get it to function as you intended and preserving your original output.The main issue was that the random.randint value doesn't account for the availability of space in each group shrinking once a person is assigned a group.Step 1:This creates a lists group and person, which are the size of their respective amounts. Also, let's create group_size which will give us the amount of person's that can be in each group.Step 2:Here we address the problem if we have group's of unequal size. This will create all evenly sized group's with the last group being able to hold the left over personStep 3:Now the fun part! This loop will assign person[p] to a random group and then reduce the amount size of that group by 1.  Lets break it down:We are going to loop through person for the entire population we assigned.Then we select a random group to assign person to, but we want to make sure that group[r] has available space, while group[r] == 0: checks to make sure that there is space if not, a new r is generated until we find a random group that has space available.Finally we assign person[p] = r + 1 this gives person[p] a group number(using r + 1 is so we can eliminate a "group 0" since lists start at 0, and for presentation we would like to start at 1). After that the group[r]'s value is reduced by 1, accounting for the availability of space decreasing. In the print statement again the + 1 just is so again we don't refer to anyone as "Person 0."Hope this helped, I enjoyed working on this!
Using only the standard library, I would solve it like this:If your number of people is divisible by your number of groups, all groups will be the same size, otherwise the first n % g groups get one extra member.Example 1:Example 2:
The problem is randomly picking a team for each player. As random.randint produces equally distributed values, each player has the same chance of being assigned to any given team, so you can end up with everyone in the same team.Instead you should consider iterating over the teams and assigning a random player to it.A poor implementation of that idea would go likeIt will solve the problem, but it relies on calling remove to avoid repeating the team members. To avoid this you can shuffle the players list (making it random) and zip the results with the teams list.This clearly does not work. That is because zip will stop when the shortest iterator stops, in our case groups. What we want is to have it repeat while there are players. We can achieve such functionality with itertools.cycle:
Adjust the probability of each group according to the number of groups. Use a while loop that continually assigns groups and only returns once the groups have equal sum.
I would do this using numpy.random.choice, with replace set to false.See relevant numpy documentation hereTry playing with this code:Result:
You will have to use a set for each group and then select the random group for the person. Once each group maxed out, then repeat until all groups are filled in.The sample run of this program's output is given below:


Answer URL
https://docs.python.org/3/library/random.html#random.randint
https://docs.python.org/3/library/functions.html?highlight=zip#zip
https://docs.python.org/3/library/itertools.html#itertools.cycle
