Natural Text
Original post:If one has an executable mini_program.py that uses argparse with the following structure:How can one create a controller program parent_program.py that uses argparse (I think with subparser?) to have a similar usage to below:then using the subprogram:How could all of the parameters propagate up from mini_program.py to the parent_program.py? EDIT (More specific with error message):The programChecking to make sure the docs workTrying to run it:
The parent program could have code likeAs written, importing mini_program doesn't run its parser.  But calling its main will, but using the list it finds in sys.argv.The parent parser should be written in a way that it accepts arguments that it needs, and doesn't choke on inputs the mini wants, '-X' and '-y'.  It would then puts those 'extra' values in a modified sys.argv, which the mini parser can handle.parse_known_args is one way of accepting unknown arguments, https://docs.python.org/3/library/argparse.html#partial-parsingnargs=argparse.REMAINDER, https://docs.python.org/3/library/argparse.html#nargs, is another way of collecting remaining arguments for passing on.If mini main was written as:it could be called withthat is, with an explicit argv list, instead of working through sys.argv.Keeping the main parser from responding to a '-h' help could be tricky.  subparsers is probably the cleanest way of doing that.You could combine subparsers with the invocation of a the mini main.  I won't try to work out those details now.Another way to define the main is:And use it asin other words, use main to define the parser, but delay the parsing.
My actual solution was an adaptation to the above:


Answer URL
https://docs.python.org/3/library/argparse.html#partial-parsing
https://docs.python.org/3/library/argparse.html#nargs
