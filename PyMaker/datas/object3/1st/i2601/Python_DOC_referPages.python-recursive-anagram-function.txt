Natural Text
I am working on a homework assignment, and am a little stuck and could use some help please.I don't want the answer handed to me, but if I could get some help or tips I would greatly appreciate it.I have to create a anagram generator that makes only 1 recursive function call and no for loops.This is my results: ['abc', 'a', 'bc', 'b', 'c'] 5The answer should be: ['abc', 'acb', 'bac', 'bca', 'cab', 'cba'] 6
Let's think without code for a bit, starting with a general case. Say you already know the permutations of "bc", and they are ["bc", "cb"]. How do you add "a" to the mix? I'd take each of the elements generated so far, and inserted a in each position. So, take "bc", and inserting "a" in each position, you get ["abc", "bac", "bca"]. Then do the same with "cb". This leads us to the base case: since each recursion multiplies the number of results, the number of results in the base case must be 1, not 0, because when we iterate over solutions of the previous level, you would not be able to append anything, as nothing is there. So, anagrams("") must return [""] (so that inserting "c" later puts it into the only position it can).Unfortunately, that's already two loops we're talking about (even with general recursive nature of the algorithm): one that iterates over ["cb", "bc"], and one that iterates over the positions to insert "a". If you can use comprehensions, you can do this rather easily. If you can't, well... every loop can be rewritten into recursion, so... let me think a bit more.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.permutations
