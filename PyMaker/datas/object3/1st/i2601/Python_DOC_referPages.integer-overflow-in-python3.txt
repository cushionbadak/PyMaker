Natural Text
I'm new to Python, I was reading this page where I saw a weird statement:x equals to a number greater than it?! I sense a disturbance in the Force.I know that in Python 3, integers don't have fixed byte length. Thus, there's no integer overflow, like how C's int works. But of course the memory can't store infinite data.I think that's why the result of n+1 can be the same as n: Python can't allocate more memory to preform the summation, so it is skipped, and n == n is true. Is that correct?If so, this could lead to incorrect result of the program. Why don't Python raise an error when operations are not possible, just like C++'s std::bad_alloc?Even if n is not too large and the check evaluates to false, result - due to the multiplication - would need much more bytes. Could result *= factor fail for the same reason?I found it in the offical Python documentation. Is it really the correct way to check big integers / possible integer "overflow"?
Python3Only floats have a hard limit in python. Integers are are implemented as “long” integer objects of arbitrary size in python3 and do normally not overflow.You can test that behavior with the following codeYou may also want to take a look at sys.float_info and sys.maxsizePython2In python2 integers are automatically casted to long integers if too large as described in the documentation for numeric typesCould result *= factor fail for the same reason?Why not try it?Python has a special float value for infinity (and negative infinity too) as described in the docs for float
Integers don't work that way in Python.But float does. That is also why the comment says 1e300, which is a float in scientific notation.


Answer URL
https://docs.python.org/3/library/doctest.html#module-doctest
https://docs.python.org/3/c-api/long.html#integer-objects
https://docs.python.org/3/library/exceptions.html#OverflowError
