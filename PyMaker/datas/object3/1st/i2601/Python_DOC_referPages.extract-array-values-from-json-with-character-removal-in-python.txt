Natural Text
I have the following JSON string and I am trying to extract the values to a python list. I achieved getting the id_list string but I want to get every single value without the : in each of them.EDIT:Using python json library is not an option.My approach (never used a lot of regex before): https://regex101.com/r/qxYe9N/1I want to use the expression with re.filterall(EXPR, jsonstr) to receive a list like:result = ["B01M8QSY16", "B017XBDBI6", ...more ]EDIT:Raw string:
If you are sure that the attribute "id_list" will always be in one line in a similar single-space format after commas and colon, and the json module is not an option, then you can do the following:This is dense and mostly unreadable code; use as-is, or I can break down more readably the logic if you want.
just use pythons json library  Output:I had to remove the line "linkGetParameters : ... " because it seems to be not json conform.
Seeing as you can't use the JSON library, you can try this here expression (tested on Python3):result = [ id.strip('":') for id in re.search('"id_list": \[(.*)\],', jsonstr).group(1).split(", ") ](where jsonstr is a string containing all of the original JSON code).To make it easier to understand, the above code usesre.search (not re.filterall as you had suggested) to broadly locate and select the line,group to narrow down the selection,split to transform the string into a list, andstrip to trim off the unnecessary characters in each list itemleaving you with a list of IDs like the one you specify in your question.
First, as Florian H stated. You should claim valid JSON from your source in order to be able to use the json Python module. Someone who provides JSON should provide valid JSON...EDIT: The JSON seems valid, see belowTrying to use the json module anyway to address your need, I noted that the parsing problem comes from the escaped double-quote in linkGetParameters value.I assume the JSON string has been copied/pasted as is and this is probably the source of the JSON parsing problem. Simply pasting this JSON in a Python string makes Python use the anti-slash to escape the double quote instead of preserving the two characters.To test the JSON content, you have to copy it into a raw string (= prefixed by a r):Once the id_list retrieved, you can remove the last character of each id using the string slicing.When using JSON content from your original source instead of a litteral string, you should not encounter this kind of escaping problem.If it is really not possible, assuming an id is always 10 characters long, this should do the trick:


Answer URL
https://docs.python.org/3/library/json.html
https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
https://docs.python.org/3/tutorial/introduction.html#strings
https://docs.python.org/3/library/json.html
