Natural Text
I came across some codes while looking at someone else's solution on LeetCode: I found that it only works on Python 2 but not 3, so I did the following debugging:Python 2:Python 3:The above code return [[4, 5, 3], [2], [1]] in Python 2 (which is correct) and [[4, 5, 3], [1]] in Python 3 (which is wrong).*[d,e] is [[4,5], [2]] [[3]], in Python 2, when processing [[2]] it will auto assign None to r in the lambda expression. But in Python 3, it will skip the record.I also found that in Python 2, if I changed f to list(map(lambda l, r: (l or []) + (r or []), *itertools.zip_longest(d,e))) + [[1]], it will work. However, it will mess up the case for b and c.Can anyone explain what is the right way to fix the code? Also, the way I debug is very dumb (I always use print), any better way to debug codes? I am new to Python and using the Jupyter notebook to run my codes.
map in python 3 doesn't pad with None, you'll need to do that yourself. You might want to use zip_longest and maybe starmap.Python 2 docs for mapmap(function, iterable, ...) Apply function to every item of iterable  and return a list of the results. If additional iterable arguments are  passed, function must take that many arguments and is applied to the  items from all iterables in parallel. If one iterable is shorter than  another it is assumed to be extended with None items. If function is  None, the identity function is assumed; if there are multiple  arguments, map() returns a list consisting of tuples containing the  corresponding items from all iterables (a kind of transpose  operation). The iterable arguments may be a sequence or any iterable  object; the result is always a list.Python 3 docs for mapReturn an iterator that applies function to every item of iterable,  yielding the results. If additional iterable arguments are passed,  function must take that many arguments and is applied to the items  from all iterables in parallel. With multiple iterables, the iterator  stops when the shortest iterable is exhausted. For cases where the  function inputs are already arranged into argument tuples, see  itertools.starmap().


Answer URL
https://docs.python.org/3/library/functions.html#map
