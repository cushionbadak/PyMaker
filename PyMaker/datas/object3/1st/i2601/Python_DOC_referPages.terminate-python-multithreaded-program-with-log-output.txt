Natural Text
IssuesI currently have a simple Python multithreaded server program, which will run forever with out manual interruption. I want to achieve that it can be terminated gracefully at some point. Once it is terminated, I want the server to output some stats. Solutions I have triedTerminate the program by kill. The issue is that the server cannot output the stats because the HARD termination. Create a control thread in the program, which listens the key input. And if key is pressed, then terminate the program and get stats. The issue with this approach is I need to do every step manually. E.g, SSH to the device, start the program, and press key at some point. QuestionIs there a way that I can run some bash/or other program to stop the program gracefully with stats output?
Have you tried to use signal.signal() to register a handler for e.g. SIGTERM? There you could implement this part of code that throws out the statistics and then just terminate the program.
The standard approach is to eithermake threads sufficiently short-livedat the stop signal, stop spawning new ones and .join() the active ones.ormake threads periodically (e.g. after serving each request) check some shared stop flag and quit when it's setat the stop signal, set the stop flag, then .join() the threadsSome threads can be .setDaemon(True), but only if they can be safely killed off (there's no exception or anything raised in the thread, it's just stopped where it is).If a thread is in a blocking call, it may be possible to unblock it by shutting down the facility that it is waiting on (close the socket or the stream).


Answer URL
https://docs.python.org/3/library/signal.html#signal.signal
