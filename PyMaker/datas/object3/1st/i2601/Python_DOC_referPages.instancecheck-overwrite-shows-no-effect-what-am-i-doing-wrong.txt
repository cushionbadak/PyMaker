Natural Text
I'm trying to make my class appear as a different object to circumvent lazy type checking in a package I'm using. More specifically, I'm trying to make my object appear as an instance of another object (tuple in my case) when in reality it is not even a derivation of that.In order to achieve this, I plan to overwrite the __isinstance__ method which, according to the docs, should do exactly what I desire. However, it appears that I didn't understand how do to do that exactly, because my attempts have been unsuccessful.Here's an SSCCE that should make isinstance return False in all cases but doesn't.What am I doing wrong?
Aside from the issues with __metaclass__ and the fast-path for an exact type match, __instancecheck__ works in the opposite direction from what you're trying to do. A class's __instancecheck__ checks whether other objects are considered virtual instances of that class, not whether instances of that class are considered virtual instances of other classes.If you want your objects to lie about their type in isinstance checks (you really shouldn't), then the way to do that is to lie about __class__, not implement __instancecheck__.Incidentally, if you want to get the actual type of an object, use type rather than checking __class__ or isinstance.
If you add a print inside FalseInstance.__instancecheck__ you will see that it is not even invoked. However, if you call isinstance('str', Foo) then you'll see that FalseInstance.__instancecheck__ does get invoked. This is due to an optimization in isinstance's implementation that immediately returns True if type(obj) == given_class:From Python's source code


Answer URL
https://docs.python.org/3/reference/datamodel.html#class.__instancecheck__
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.__class__
https://docs.python.org/3/c-api/object.html#c.PyObject_IsInstance
