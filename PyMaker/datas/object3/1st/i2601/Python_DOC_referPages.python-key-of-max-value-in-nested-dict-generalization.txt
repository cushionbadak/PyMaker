Natural Text
I would like to know how we can return the key value of nested dicts. The case of dict of dict (case 1) has already been answer elsewhere, but I do not manage to generaliseCase 1: dict of dictIn order to get the key with the maximum 'subkey1' value I would do:Case 2:So my questions are:How can we generalise the formula of case1? if I want the 'key' of a maximum 'subsubkey'?In terms of performance, would another solution be more efficient than a 1-line formula?Thank you for your help and contribution
This answer assumes you know the path of the nested key. Then one possible view of case 2 is:You want to apply function get in a cumulative way, notice that get can be exchanged with the operator [], so the above line can also be seen this way:This is what the function reduce does, from the documentation:Apply function of two arguments cumulatively to the items of sequence,  from left to right, so as to reduce the sequence to a single value.  For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates  ((((1+2)+3)+4)+5). The left argument, x, is the accumulated value and  the right argument, y, is the update value from the sequence.So you can nest your calls in the following way:OutputThe generalization of key= comes from the value function. Basically the functions receives a the top level key, the dictionary and the paths of keys, then using reduce applies the call in a cumulative way.UPDATEIn a more generalized manner if you have different paths to the 'sub...subkey' for each of the top keys ['key1', 'key2', ...] you could use a dictionary of paths for each key in the following way:OutputNote that the value function remains the same only the path for each key is different. Also this solution gives you the added value of different path lengths for each top key.


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
