Natural Text
I want to have a dictionary in which the keys are tuples such as (1, 0). However, I want all keys of the form (n, 0) to identify with a similar output, and it'd be nice if I didn't have to have all the tuples from (1, 0) to (n, 0) as keys in my dictionary. Is there a simple way I can do this?
If you want to make a dict with a special rule for handling keys that aren't actually stored in the dict hash table, you want to create a subclass of dict that implements __missing__:Called by dict.__getitem__() to implement self[key] for dict subclasses when key is not in the dictionary.Like this:I don't really understand how your example is supposed to work, so here's a different example to demonstrate it:If you store a value for a (n, 0) key, it won't call __missing__ for that key, allowing you to override a single (n, 0) while leaving the rest with their special rule:
Just copy the value (1,0) to (n,0) and then delete the element (1,0) from dict. Like these: and so on, But for identifying for similar output you have to make the value into tuple by using set() and then take the difference with the key. Like these:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__missing__
