Natural Text
I'm a little confused over the difference between iterators and iterables. I've done a lot of reading and have got this much:Iterator: An object that has __next__ in itâ€™s class. You can call next() on it. All iterators are iterable.Iterable: An object that defines __iter__ or __getitem__ in it's class. Something is iterable if it can build an iterator using iter(). Not all iterables are iterators.Is some_dict.items() an iterator? I know that some_dict.iteritems() would be in Python2 right?I'm just checking because a course I'm doing says it is and I'm pretty sure it's just an iterable (not an iterator).Thanks for your help :)
No, it isn't. It is an iterable view of the items in the dict:It's __iter__ method returns a specialized iterator instance:
You can test this directly:
dict.items returns a dict view, according to the docs:Answering your question, dict.items is not an iterator. It is an iterable object which supports len, __contains__ and reflects changes made in the original dict:
Check it yourselves:This results in TypeError: 'dict_items' object is not an iterator.On the other hand, you can always iterate through d.items() as:Or:


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict-views
https://docs.python.org/3/library/stdtypes.html#dict.items
