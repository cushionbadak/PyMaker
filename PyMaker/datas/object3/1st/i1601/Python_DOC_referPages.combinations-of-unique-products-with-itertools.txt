Natural Text
I have a nested list and would like to make a product of two items.What I expect is something like this:That is to say, I would like to get the permutation across lists but only for unique items. I prefer to use itertools. Previously, I tried list(itertools.product(*test)) But I realized it would produce the product of the length of a nested list... My current code:My thought process is to get the unique items in the nested list first, so the nested list will be  [[('juice', 'NOUN'), ('orange', 'FLAVOR')], [('lemon', 'FLAVOR')], [('chip', 'NOUN')]] and then use the itertools.combinations to permute. Yet, it will permute within the list (i.e. juice and orange appear together), which I do not want in my results.
This does what you want without fixing the size of the original list to 3:Input:First, reformat input to remove duplicates (see note 1):Finally, get the product of the combinations.which produces:removes inner tuples if they were seen in any of the previous sublists. The magic here is done by the sum(test[:i], []) which "adds" all the previous sublists together to perform one membership check only.There is also a list-comprehension version of the above for compactness and style-points:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
https://docs.python.org/3/library/itertools.html#itertools.combinations
