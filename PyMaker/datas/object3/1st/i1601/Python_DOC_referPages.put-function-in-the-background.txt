Natural Text
I have the following function:I am looking to create a generic function that will run other functions in the background, such as the above. Here is what I have so far:And I would then call this passing :The problem is, I think that it will first run the update_contacts function and not really do anything async. How would I properly write and call the run_in_background function?Perhaps I would need to use something like partial to pass the function without actually calling it until it's executed?
As other pointed out, the expression run_in_background(update_contacts(data)) will evaluate update_contacts(data) before even calling run_in_background. Regardless of how run_in_background is implemented, you have to pass it a function.The run_in_background function you're looking for already exists, it's the submit method on the ThreadPoolExecutor:You can use methods such as done() or result() on the returned Future object to test whether the submitted task is done or to pick up the result of the function. This is preferable to starting a thread manually because the executor can support a large number of background tasks by maintaining a pool of threads. There is also an executor that uses multiprocessing to provide true parallelism.All this is completely independent of the asyncio library and its run_in_executor method, which serves to connect blocking code with code written specifically for asyncio, which you don't appear to have.
Not sure about asyncio. However, I believe you can use threading for the same, Your function can then be modified as follows: Sample call: 
If you call run_in_background (update_contacts(data)), it means you already called function update_contacts(data). But you should only pass function and its arguments like this:And change your run_in_background function accordingly


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.submit
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor
