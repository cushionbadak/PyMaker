Natural Text
I have the following dictionary: And for this dictionary I want write a function that returns the three key-value pairs that have the highest values (So in this case key 18, 19, 20).I came up with the following: This gives me a list of the max-values I want to lookup. But how do I proceed from here? Is there a way to do this without a reverse-lookup (Which is slow for dictionaries, right?) I have the feeling that I can do this task much more efficiently/pythonic.
You could also use collections.Counter with most_common (which internally uses a heap queue):
heapq.nlargestYou can avoid a full sort here by using a heap queue:
You can use this:It converts the dictionary a into a list of tuples, sort by tup[1], reverse it and get the first 3 hits.
You can do it like so:Break-down:sorted(dct.values(), reverse=True)[:3]:: Takes the 3 max dictionary values.next(k for k in dct if dct[k]==v):: returns the dictionary key, for which the value is one of the above 3 (iteratively).
in two simple steps :faster than nlargest and Counter.most_common on this example.
This returns what you want:
Returns : This is the easiest code I could get, but sorting the dictionary cost O(nlogn) and you should be able to do the same in O(n)
Are you looking for the most efficient way or just the optimal way in permormace/algorithm simplicity?If it's the latter may be you should consider sorting dictionary items as tuples (you can get them with cachedict.items()) like in this answer https://stackoverflow.com/a/613218/10453363Just sort tuples by the value and then get the last 3 tuples (which are key/value pairs)


Answer URL
https://docs.python.org/3/library/collections.html?highlight=counter#collections.Counter
