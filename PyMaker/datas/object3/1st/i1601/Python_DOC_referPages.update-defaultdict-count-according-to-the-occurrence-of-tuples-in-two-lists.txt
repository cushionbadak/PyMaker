Natural Text
I have two lists and would like to create a dictionary to record the occurrence of tuples.My current code:My result is:My desired result is:I do not know why the count of ('leaf', 'liquid') is 1. Isn't the default integer of defaultdict(int) zero? Why I got 1 for the ('leaf', 'liquid') tuple?
This line isn't doing what you think it is:Here you are iterating a list elementwise, in this case the elements of self_per_list_test. There's no filtering taking place. As your for loop iterates, tup_to_find_test successively represents ('leaf', 'liquid'), ('leaf', 'sweet'), etc. The fact the name is the same as a variable you've defined earlier only serves to confuse.Instead, you can use a ternary statement to differentiate operations:collections.Counter is more idiomatic with Python. It's good practice to use set for O(1) lookup within a dictionary comprehension.
Isn't the default integer of defaultdict(int) zero?Yes.Why I got 1 for the ('leaf', 'liquid') tuple?You wrote:That is, find the current value—which creates a new one set to zero—then add one to it and store the result back.  The resulting value is 1.
Without reinventing the wheel. You can use counter from the wonderful collections standard module library for this. Here we create a counter based on self_per_list_test and updates the counts to zero if it is not found in tup_to_find_test. Hope this is a more intuitive method in solving your problem.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
