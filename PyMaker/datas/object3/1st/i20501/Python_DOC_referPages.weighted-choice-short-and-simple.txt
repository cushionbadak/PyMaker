Natural Text
This question already has an answer here:A weighted version of random.choice                    20 answers                If I have a collection of items in a list. I want to choose from that list according to another list of weights. For example my collection is ['one', 'two', 'three'] and the weights are [0.2, 0.3, 0.5], the I would expect the method to give me 'three' in about half of all draws.What is the easiest way to do so ?
Since numpy version 1.7 you can use numpy.random.choice():
Since Python 3.6, you can do weighted random choice (with replacement) using random.choices.random.choices(population, weights=None, *, cum_weights=None, k=1)Example usage:
This function takes two arguments: A list of weights and a list containing the objects to choose from:It does not use any python loops.
You can use the multinomial distribution (from numpy) to do what you want. E.g.So the element in first position came up 20 times, the element in second position came up 32 times, and the element in third position came up 48 times, roughly what you would expect given the weights.If you're having a hard time wrapping your head around the multinomial distribution, I found the documentation really helpful.
If you did not want to use numpy, you can follow the same method with something like this:We use itertools.takewhile() to avoid checking values once we reach the point we want to stop, otherwise, this is essentially the same idea as Mischa Obrecht's answer, just without numpy.
How about just initializing your list to match your choices with the expected weights.Here I'm make a list of 100 values representing your desired "pull" percentage.It's not cumulative, but it looks like it might be what your looking for.
To build upon Maus' answer, which is great if you want to repeatedly get weighted random values, if you only wanted a single value, you can do this very simply by combining numpy.random.multinomial() and itertools.compress(): 


Answer URL
https://docs.python.org/3/library/random.html#random.choices
