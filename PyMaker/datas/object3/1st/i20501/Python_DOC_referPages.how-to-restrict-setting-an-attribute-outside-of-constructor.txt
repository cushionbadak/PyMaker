Natural Text
I want to forbid further assignments on some attributes of a class after it was initialized. For instance; no one can explicitly assign any value to 'ssn' (social security number) property after the Person instance 'p' has been initialized. _setattr_ is also being called while assigning the value inside _init_ method, thus it is not what I want. I'd like to restrict only further assignments. How can I achieve that?
The usual way is to use a "private" attribute starting with an underscore, and a read-only property for public access:Note that this does not really hinder anybody to change the attribute _ssn, but the leading _ documents that the attribute is private.  
You can bypass setattr by directly assigning to the instance dictionary in the constructor. Of course, this trick can always be used to spoof any other hoops you employ to make _ssn read-only (after an initial write)
Python does not support private or protected attributes. You need to implement the descriptor protocol instead. The standard library provides decorators to do that succinctly.Just declare the attribute with two underscores in front of it in the init method. It is called name mangling and prevents the attribute from being accessible via __ssn, although it can still be accessed and modified by _Person__ssn in this case. However, if you do not explicitly define a setter for it will raise an AttributeError.Of course if someone has an intention to misuse the API that person can if he is very intent. But it will not happen by accident. 
Just pointing out that we could still modify _ssn.Objects have the special attribute, __dict__ that is a dictionary that maps all instance attributes of the object with their corresponding values. We can add/update/delete instance attributes directly by modifying the __dict__ attribute of an object.We can still modify _snn like this:As we can see, we were still able to change the value of _ssn. By design, there isn't a straight forward way, if any, to circumvent attribute access in Python in all cases.I'll show a more common way to restrict attribute access using property() as a decorator:Hope this helps!


Answer URL
https://docs.python.org/3/library/functions.html#property
