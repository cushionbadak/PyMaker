Natural Text
What's the easiest way to create a naked object that I can assign attributes to?The specific use case is: I'm doing various operations on a Django object instance, but sometimes the instance is None (there is on instance). In this case I'd like to create the simplest possible fake object such that I can assign values to its attributes (eg. myobject.foo = 'bar').Basically I'm looking for the Python equivalent of this piece of Javascript:I know I can use a mock object/library for this, but I'm hoping for a very simple solution (as simple as the Javascript above). Is there a way to create a naked object instance? Something like:
You need to create a simple class first:You can make it a one-liner like this:The call to type functions identically to the previous class statement.If you want to be really minimal...The key is that the built-in types (such as list and object) don't support user-defined attributes, so you need to create a type using either a class statement or a call to the 3-parameter version of type.
Use the Bunch module:A bunch is a dictionary that allows to access its content via the dict.key syntax.And then like that:
If you're using Python >= 3.3 you could always use SimpleNamespace; which is included in the Python types module.SimpleNamespace is great because you also get a repr and equivalency testing for free; both of which might come in handy even for a minimalist object. Translating the JavaScript in the OP’s question would look like:You can also use keyword arguments when instantiating SimpleNamespace.  These arguments will become attributes on the instantiated SimpleNamespace: So a quick and easy way to turn a dictionary into a  SimpleNamespace object  —provided the dictionary keys are proper identifiers—  is as simple as:Python >= 3.7 has dataclasses which are basically “mutable named tuples”.   This could be something you may want to use if you have a lot of data objects.  
I'm coming here very late, but I'm surprised nobody has mentioned namedtuples, which accomplish this kind of thing:

You would need to subclass object first like this...
For Python 3,
Perhaps you are looking for something like this:then it can be called like:or you could use a class object for this:then you can use something like this:
You should probably just use a dict, as per @PsychicOak's answer.However, if you really want an object you can manipulate, try:You can then assign attributes on FooClass itself, or on instances, as you wish.
I usually prefer to create a null object for my class:Then I use it where I would use your naked object.
Functions can have attributes in Python 3. Compared to a naked class, you can save one whole line of code.


Answer URL
https://docs.python.org/3/library/types.html#types.SimpleNamespace
https://docs.python.org/3/library/types.html#types.SimpleNamespace
https://docs.python.org/3/library/types.html#types.SimpleNamespace
https://docs.python.org/3/library/types.html#types.SimpleNamespace
https://docs.python.org/3/library/types.html#types.SimpleNamespace
