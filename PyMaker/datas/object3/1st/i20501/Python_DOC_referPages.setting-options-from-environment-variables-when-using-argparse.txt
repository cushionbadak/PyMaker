Natural Text
I have a script which has certain options that can either be passed on the command line, or from environment variables. The CLI should take precedence if both are present, and an error occur if neither are set.I could check that the option is assigned after parsing, but I prefer to let argparse to do the heavy lifting and be responsible for displaying the usage statement if parsing fails.I have come up with a couple of alternative approaches to this (which I will post below as answers so they can be discussed separately) but they feel pretty kludgey to me and I think that I am missing something.Is there an accepted "best" way of doing this?(Edit to make the desired behaviour clear when both the CLI option and environment variable are unset)
I would just set the default variable when adding an argument to a get of os.environ with the Variable you want to grab. The 2nd Argument in the .get() call is the default value if .get() doesn't find an environment variable by that name.
I use this pattern frequently enough that I have packaged a simple action class to handle it:I can then call this from my code with:
ConfigArgParse adds support for environment variables to argparse, so you can do things like:
I usually have to do this for multiple arguments (authentication and API keys).. this is simple and straight forward.  Uses **kwargs.
The topic is quite old, but I had similar problem and I thought I would share my solution with you. Unfortunately custom action solution suggested by @Russell Heilling doesn't work for me for couple of reasons:It prevents me from using predefined actions (like store_true)I would rather like it to fallback to default when envvar is not in os.environ (that could be easily fixed)I would like to have this behaviour for all of my arguments without specifying action or envvar (which should always be action.dest.upper())Here's my solution (in Python 3):
One option is to check whether the environment variable is set, and to modify the calls to add_argument accordinglye.g.
There is an example use-case for ChainMap where you merge together defaults, environment variables and command line arguments.Came to me from a great talk about beautiful and idiomatic python.However, I'm not sure how to go about the difference of lower- and uppercase dictionary keys. In the case where both -u foobar is passed as an argument and environment is set to USER=bazbaz, the combined dictionary will look like {'user': 'foobar', 'USER': 'bazbaz'}.
Thought I'd post my solution as the original question/answer gave me a lot of help.My problem is a little different to Russell's. I'm using OptionParser and instead of an environmental variable for each argument I have just one which simulates the command line.i.e.MY_ENVIRONMENT_ARGS = --arg1 "Maltese" --arg2 "Falcon" -r "1930" -hSolution:Here I don't throw an error if an argument is not found. But if I wish to I could just do something like


Answer URL
https://docs.python.org/3/library/collections.html#chainmap-examples-and-recipes
