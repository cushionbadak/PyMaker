Natural Text
So I basically have to isolate 2 layers of the application from one another by exceptions.I have this WLST 12c script (python 2.2), that goes likeI'd like to be able to re-raise one of my own types of exception, that contains a message about what caused the previous exception (and no, i don't know what the a and b parameters are, but i'm guessing one of them should be the exception description).I'm a java guy myself, so i am looking forward to something like
I hope I got the question right.I'm not sure about Python 2.2 specifics, but this says you can handle exceptions the same way it's done in more recent versions:Or maybe the last line should be raise ExceptionToThrow(str(e)). That depends on how your exception is defined. Example:This raises ValueError('foo').Hope it helps :)
Although this is an old post, there is a much more simple answer to the original question. To rethrow an exception after catching it, just use "raise" with no arguments. The original stack trace will be preserved.
The idiommentioned by @normaldotcom rethrows the error that has been catched as-is, without any modification. It does not answer to the OP, "How do I create a new exception that contain information about an exception that has been catched".Indeed in some situations, one would like to create a new exception, typically to regroup many possible sources of internal errors into a single exception with a clearer message, while still keeping the traceback to the original error to enable debugging.A way to achieve this is via the with_traceback method of BaseException. For example,
You can extract information from the original exception, which here is bound to e, and then pass that on to your own exception when you raise it.


Answer URL
https://docs.python.org/3/library/exceptions.html#BaseException.with_traceback
