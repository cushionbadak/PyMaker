Natural Text
I wish to count the number of lines in a .txt file which looks something like this:Where there are blank lines used to separate blocks. The result I'm looking for, based on the above sample, is five (lines).How can I achieve this?As a bonus, it would be nice to know how many blocks/paragraphs there are. So, based on the above example, that would be two blocks.
UPDATE: Re-read the question, OP wants to count non-blank lines .. (sigh .. thanks @RanRag).(I need a break from the computer ...)
A short way to count the number of non-blank lines could be:

Considering the blank lines will only contain the new line character, it would be pretty faster to avoid calling str.strip which creates a new string but instead to check if the line contains only spaces using str.isspace and then skip it:Demo:You can further use str.isspace with itertools.groupby to count the number of contiguous lines/blocks in the file:
Not blank lines Counter:Blocks Counter:
This bit of Python code should solve your problem:
This is how I would've done it:readlines() will make a list of all the lines in the file and then you can just take those lines that have at least something in them.Looks pretty straightforward to me!
Pretty straight one! I believe
I am surprised to see that there isn't a clean pythonic answer yet (as of Jan 1, 2019). Many of the other answers create unnecessary lists, count in a non-pythonic way, loop over the lines of the file in a non-pythonic way, do not close the file properly, do unnecessary things, assume that the end of line character can only be '\n', or have other smaller issues.Here is my suggested solution:The question does not define what blank line is. My definition of blank line: line is a blank line if and only if line.strip() returns the empty string. This may or may not be your definition of blank line.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
