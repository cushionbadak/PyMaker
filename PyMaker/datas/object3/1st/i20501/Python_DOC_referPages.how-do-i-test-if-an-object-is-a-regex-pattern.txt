Natural Text
What is the type of the compiled regular expression in python?In particular, I want to evaluateto be true, for introspection purposes.One solution I had was, have some global constant REGEX_TYPE = type(re.compile('')), but it doesn't seem very elegant.EDIT: The reason I want to do this is because I have list of strings and compiled regex objects. I want to "match" a string against list, byfor each string in the list, try to check for string equality.for each regex in the list, try to check whether the string matches the given pattern.and the code that I came up with was:
When the type of something isn't well specified, there's nothing wrong with using the type builtin to discover the answer at runtime:Discovering the type at runtime protects you from having to access private attributes and against future changes to the return type.  There's nothing inelegant about using type here, though there may be something inelegant about wanting to know the type at all.
Python 3.5 introduced the typing module. Included therein is typing.Pattern, a _TypeAlias.Starting with Python 3.6, you can simply do:In 3.5, there used to be a bug requiring you to do this:Which isnâ€™t guaranteed to work according to the documentation and test suite.
It is possible to compare a compiled regular expression with 're._pattern_type'Gives True, at least in version 2.7
Disclaimer: This isn't intended as a direct answer for your specific needs, but rather something that may be useful as an alternative approachYou can keep with the ideals of duck typing, and use hasattr to determine if the object has certain properties that you want to utilize. For example, you could do something like:
Prevention is better than cure. Don't create such a heterogeneous list in the first place. Have a set of allowed strings and a list of compiled regex objects. This should make your checking code look better and run faster:If you can't avoid the creation of such a list, see if you have the opportunity to examine it once and build the two replacement objects.
As an illustration of polymorphism, an alternate solution is to create wrapper classes which implement a common method.Now your code can iterate over a list of alloweds containing objects instantiating either of these two classes completely transparently:Notice also how some code duplication goes away (though your original code could have been refactored to fix that separately).
FYI an example of such code is in BeautifulSoup:  http://www.crummy.com/software/BeautifulSoup and uses the 'hasattr' technique.In the spirit of the "alternative approach", you might also encapsulate your string search in a regexp by doing this:    regexp = re.compile(re.escape(your_string))therefore having a list of only regular expressions.
This is another not the answer to the question, but it solves the problem response. Unless your_string contains regular expression special characters,has the same effect asSo drop back one step and use uncompiled regular expression patterns in your list of allowed. This is undoubtedly slower than using compiled regular expressions, but it will work with only the occasional unexpected outcome, and that only if you allow users to supply the allowed items
Well - _sre is a C extension doing the pattern matching...you may look in the _sre C source. Why do you care?Or you try something like this (for whatever reason - I don't care):


Answer URL
https://docs.python.org/3/library/typing.html
https://docs.python.org/3/library/typing.html#typing.Pattern
