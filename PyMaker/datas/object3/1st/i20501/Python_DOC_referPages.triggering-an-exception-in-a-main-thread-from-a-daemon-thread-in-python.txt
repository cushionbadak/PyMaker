Natural Text
How do you trigger an exception in a main thread, running blocking code, from a daemon thread in Python?I have a daemon thread that periodically checks a database for a record indicating that its current process should terminate (i.e. the user has pressed the "cancel" button). In my main non-daemon thread, I'm running a blocking call to an external process that I can't easily modify to gracefully terminate. However, the main thread can gracefully handle a normal KeyboardInterrupt when I manually trigger one.So if my daemon thread receives the terminate command, how do I raise an exception in my main thread to terminate my process?
After digging through the thread docs, I finally found the solution to be interrupt_main().
You can get your subprocess returncode with the returncode attribute. Raise something if it's different from zero.Edit: I've mixed up the subprocess and multiprocessing modules. There is however an exitcode attribute in the multiprocessing module that seems similar to the subprocess returncode attribute.
It's typically done using a message queue. See Catch a thread's exception in the caller thread in PythonHowever it will not preempt your main thread, you will have to actively poll for it. Maybe with signals you'll be able to get what you need.


Answer URL
https://docs.python.org/3/library/_thread.html
