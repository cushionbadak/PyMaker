Natural Text
After reading this question, I have this PySpark code:Can I write this into a one-liner for loop? Or these loops are restricted in having only one line in their body?Note: I am not looking for code-only answers, I want to learn, so please, explain. :)Here is my tragic attempt:Edit:Yes, I know that I can write a regular for-loop, but I would like to understand one-liner for loops. This is for experimenting. You see, when reading others' people code, I see them often, and I am not comfortable with them... :/
A list comprehension version of what you did in that example would be:This is no different than:So for each i, it appends the returning value of that chained expression to the list. For this example, it happened to work because your three lines could be chained together. You are calling computeCost() method on the object you created with KMeansModel(model.Cs[0]) and the parameter for that is split_vecs.map(lambda x: x[0]).
You could wrap the three distinct functions you have (KMeansModel,split_vec.map, and computeCost) in another function, like so:Now that it looks nice, you can either use list comprehension:Or a for loop (on one or more lines -- it generally makes no difference, except in terms of readability. I say generally because I do get an error when I try to put another control structure on the same line, as in:However, for readability's sake, you probably wouldn't want something like the line above anyway)Probably the most important difference is that a for loop is just a control structure whereas list comprehension is a fancy kind of list over which you can define operations. That is why in an interactive interpreter such as ipython, you have to print the output (element and i in the examples above) of a for loop but not of list comprehension.
What you're calling "one-liner for loops" are actually called"list comprehensions", "dictionary comprehensions", or "generator expressions". They are more limited than for-loops, and work as follows:You can nest them, they aren't actually required to be one line. For a (probably-not-useful) example, list comprehensions could be used to get a list of all possible pairs of elements from a list listA and elements from lists in a dict dictB keyed by things from listA (the line break is not required, but helps readability):However, the main limitation of them is that you can't call arbitrary functions - the only places you can put expressions are when saying what iterables you're using and what to output into the result. Side-effects of any functions you call in that will happen, though! For your specific case, you can't do it in any of those simply, because you keep re-assigning model and you can't do that in the middle of a comprehension. It's probably possible to twist things around enough to get the same effect (by writing other functions that do the assignment as a side-effect before returning the correct value), but in this case not really worth it.
This is untested, but it looks like it could work for youWhat it does is create a list of results after performing computeCost() on the results of KMeansModel().  the xrange for loop just returns the values for i
Try it without the semi colon. Though honestly I wouldn't recommend using one line for statements outside of generator expressions


Answer URL
https://docs.python.org/3/tutorial/classes.html#generators
