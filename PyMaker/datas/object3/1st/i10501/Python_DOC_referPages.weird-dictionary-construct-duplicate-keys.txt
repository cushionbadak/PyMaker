Natural Text
I needed to write a function that 'maps' -1 to just '-', 1 to '' (yes, nothing) and every other value to a string representation of itself. Instead of using if statements i though i would do it with a dictionary like so:And then it hit me, this dictionary allows duplicate keys and behaves as follows:I did run it multiple times to make sure the print() was not "random" since dicts are not ordered but i consistently get this output.Now this is definitely not the behavior i was going for and in no way can such a construct be trusted but does anyone know why such a thing is even allowed since duplicate keys aren't? How is the calculation performed?
The dictionary you made doesn't have duplicate keys.  The "duplicates" overwrote each other. It's just as if you had done this:To demonstrate:BTW, you could write the function like this:
Quoting the Python docs:If a comma-separated sequence of key/datum pairs is given, they are evaluated from left to right to define the entries of the dictionary: each key object is used as a key into the dictionary to store the corresponding datum. This means that you can specify the same key multiple times in the key/datum list, and the final dictionaryâ€™s value for that key will be the last one given.It's not undefined behavior, it's as if you created an empty dictionary and set each key, one by one. You can fix your code by just shuffling the order around:Other people might find this approach hard to read, though, so you may want to use dict.get's default value, as the other answers have shown.Your question was recently asked on the Python mailing list (in an easier to read format here).
By doing {-1: '-', 1: '', my_value: str(my_value)}, you overwrite the -1 or 1 entries if my_value is -1 or 1 respectively. Instead, you can use dict.get with a default value:


Answer URL
https://docs.python.org/3/reference/expressions.html#dictionary-displays
https://docs.python.org/3/library/stdtypes.html#dict.get
