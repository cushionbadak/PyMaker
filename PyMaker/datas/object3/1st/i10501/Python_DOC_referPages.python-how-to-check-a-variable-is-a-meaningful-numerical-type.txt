Natural Text
In python, how can I check a variable is a numerical type and has a meaningful value? Here I mean by 'numerical type' those like int, float, and complex with all different bit length, and by 'meaningful value' that it is not nan or any other special values that can not be used for further computation. (I guess this is such a common issue and there must be a duplicate question, but I did not find one after a quick search. Please let me know if there is a duplicate.)
Python 2.x and 3.xReason for the distinction is because Python 3 merged the long and int types into just int.Edit: Added upon answer below using numbers.Number to exclude booleans.
Integers can never be NaNs.
It depends how thorough you want to be. Besides the builtin types (complex, float, and int) there are also other types that are considered numbers in python. For instance: fractions.Fraction, decimal.Decimal, and even bool can act as a number. Then you get external libraries that have their own numeric types. By far the biggest is numpy. With numpy some of its types will succeed isinstance checks, and other will not. For instance: isinstance(numpy.float64(10), float) is true, but isinstance(numpy.float32(10), float) is not.On top of all this you could even have a user defined class that acts like a number.Python does provide one way of getting around this -- the numbers module. It provides several abstract types that represent different types of numbers. Any class that implements numeric functionality can register itself as being compatible with the relevant types. numbers.Number is the most basic, and therefore the one you're looking for. All you have to do is use it  in your isinstance checks. eg.That still leaves us with the problem about whether the object is actually a number, rather than "not a number". The math.isnan function is good for this, but it requires that the number be convertible to a float (which not all numbers are). The big problem here is the complex type. There are a few ways around this: additional isinstance checks (but that comes with its own headaches), using abs, or testing for equality.abs can be used on every numeric type (that I can think of). For most numbers it returns the positive version of the number, but for complex numbers it returns its magnitude (a float). So now we can do  that isnan check. nan is also a special number in that it is the only number that is not equal to itself.This means your final check might look like:
I am answering to my own question. This is based on Seth Michael Larson's answerand DaveTheScientist's answer for another question. Considering that I need to be careful for float('inf') and float('-inf') as well as float('nan'), and that the passed argument x may be complex, I ended up writing the following function for the check.


Answer URL
https://docs.python.org/3/library/fractions.html
https://docs.python.org/3/library/decimal.html
https://docs.python.org/3/library/numbers.html
https://docs.python.org/3/library/math.html#math.isnan
https://docs.python.org/3/library/functions.html#abs
