Natural Text
Now check each of the values in t0 against each of its corresponding values in the b array. If any of the values from t0 are greater than 300, then t0 is discarded.If not, then multiply each t_ value by the each corresponding c array value, and after that determine the highest value and print it.For example: t1 has 50,100,150,200,250, all of which are equal to or below 300, so we take 0*c[0] + 1*c[1] + 0*c[2], which gives us 585. However, that isn't the highest value. The highest value is 1049, which is acquired by t5. It has 250,300,250,200,250. Taking 0*c[0] + 1*c[1] + 1*c[2] gives 1049I am stuck here.
I guess this does what you wantâ€”at least it produces sums  from the data similar to those you mentioned in your question. I found your sample code is very misleading since it doesn't produce the kind of t_ values you refer to in the written problem description below it.You can replace most of that with one (longish) generator expression similar to the one in linked code in one of  @Stefan Pochmann's comments, so this does exactly the same thing:


Answer URL
https://docs.python.org/3/howto/functional.html#generator-expressions-and-list-comprehensions
