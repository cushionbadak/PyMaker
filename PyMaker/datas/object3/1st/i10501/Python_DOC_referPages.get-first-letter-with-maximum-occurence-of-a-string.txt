Natural Text
I would like to get the first letter with the maximum occurence of a string.For instance:I already have a working code, using OrdererDict() to avoid automatic keys rearangement:but I'm looking for a possible one-liner or more elegant solution (if it's possible).Note: I already tried to use Counter() but it doesn't work, since dict in python don't remember the order that keys were inserted. e.gBonus question: Can someone explains why OrderedDict() are not the default dictionary behavior in python?
The documentation for collections.OrderedDict actually has a recipe for an OrderedCounter:
Probably not very fast, but one-liner!EditEven shorter, thanks to @Ohad Eytan's comment:BenchmarkFeeling bored tonight, so I benchmarked (using timeit) test @Joohwan's most_common_char() solution (mostcc), @Blender's OrderedCounter solution (odict) and my own one liner solution (onelin, using the min variant). The fastest solution was consistently mostcc: up to ~10x faster than onelin for long strings containing few different characters, and up to ~4x faster than odict for very short strings. For short strings or strings with little repeated chars, onelin beats odict (otherwise, it's the reverse). Here are the details (Length=length of the string, #chars=number of different unicode chars to randomly pick from for each char, mostcc=time to execute 10,000 times mostcc, odict=how much longer odict was compared to mostcc, onelin=how much longer oneline was compared to mostcc).
I am aware that you want a one-liner, but what if you had to repeat this task many times or handle really long sentences? I don't know the exact use case here but it could be worth your time considering the space and time complexity of the algorithm.In your solution, for example, you are iterating through the sentence many times more than necessary with sentence.count(), which takes O(n * number of unique characters). After that you iterate through the ordereddict once more to find the max (another O(number of unique characters) operation).In the accepted solution, we end up having to define a new class (which breaks your 1 liner requirement btw) and instantiate new objects with alot of boilerplate code and functionalities you probably won't need every time you want to execute your task.If you don't mind having a few more lines of code (again, I know this is not what the question is asking), we can build a reusable function which only has to iterate through the string once and use constant and minimal space:We keep track of the character with the max count as we go through the string and spit it out at the end of the iteration. Note that we iterate backwards since you want the letter that comes first (i.e. last updated wins).
You can use Counter() together with next() to find the first letter that meets the condition:
You can also fix the issue you describe at the end of your question about using Counter by having the resulting list sorted by various attributes: firstly count, secondly lexicographical order like this:Output:Just for fun:Golfed Version:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#ordereddict-examples-and-recipes
