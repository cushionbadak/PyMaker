Natural Text
suppose I have the module myscript.py; This module is production code, and is called often as %dir%>python myscript.py foo bar. I want to extend it to take keyword arguments. I know that I can take these arguments using the script below, but unfortunately one would have to call it using %dir%>python myscript.py main(foo, bar).I know that I can use the argparse module, but I'm not sure how to do it. 
If you want to pass in keyword arguments as you would in the main function, key=value, you can do it like so:Some examples:However, this assumes that the key and value do not have any whitespace between them, key = value will not work.If you are looking for --argument kinds of keyword arguments, you should use argparse.
@Moon beat me to it with a similar solution, but I'd suggest doing the parsing beforehand and passing in actual kwargs:
First, you won't be passing an arbitrary Python expression as an argument. It's brittle and unsafe.To set up the argument parser, you define the arguments you want, then parse them to produce a Namespace object that contains the information specified by the command line call.In your __main__ block, you'll parse the arguments, then pass a dictionary produced from the Namespace to main.Then you'll call your script with a line likeorThere's a lot more you can do with argparse, but this is a simple example for getting the value it produces into main.
With a bit of introspection, it's possible to set up ArgumentParser from a function's signature, thus mapping command-line parameters directly to function arguments:The result:


Answer URL
https://docs.python.org/3/library/argparse.html
