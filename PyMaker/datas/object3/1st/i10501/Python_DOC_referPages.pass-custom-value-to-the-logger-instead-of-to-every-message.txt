Natural Text
I want to log the user session. Currently the code is as follows (setting formatter and handlers is omitted):If there are several messages to be logged, it's annoying to send this extra information each time. What would be the best/cleanest/most pythonic way to achieve something like that:I could think of extending the logger and overriding logging methods.
Create a LoggerAdapter as @DhruvPathak specified. According to LoggerAdapters signature:you do that by providing your logger instance and the extra args during initialization:
Use function factories for instance like that
Such custom logging is feasible in python logging class, using logging.loggerAdapters which modify the logging behaviour.An easy way in which you can pass contextual information to be output  along with logging event information is to use the LoggerAdapter  class. This class is designed to look like a Logger, so that you can  call debug(), info(), warning(), error(), exception(), critical() and  log(). These methods have the same signatures as their counterparts in  Logger, so you can use the two types of instances interchangeably.
See the Python logging doc: Beside the LogAdapter, you can use also the LogFilter.I usually use MDC since in influences all loggers. Unfortunately, the Python logging does not have MDC. I have just found the mdaniel's MDC gist.


Answer URL
https://docs.python.org/3/library/logging.html#logging.LoggerAdapter
https://docs.python.org/3/howto/logging-cookbook.html#adding-contextual-information-to-your-logging-output
