Natural Text
I could not find a good way to do this. Suppose I have two lists (the lists have objects with given attributes). I need to create a new dictionary/list with merged atttributes.The result should be as follows (it should be merged based on "time" attribute)How do I do this in a python way?For example,
Using a list comprehensionSince you are searching for an alternative not using a for loop here is an implementation using list comprehensions, which results in a two liner. I am not sure though that this is more intuitive than a for loop:To me this is just a more convoluted way of for loops...Documentation for setdefault.Using classic for loopsUse listA and listB as given in your example:Output:
Another answer, that's perhaps cleaner in that it avoids conditional tests in favour of dict methods and uses only one level of indentation:d.setdefault(t, {}) creates d[t] as an empty dict if the key t is not yet present in d, and returns d[t]. Then.update(**e) updates the returned dict to contain all keys and values in e (replacing current values if they exist, which may be a bug or a feature - the example did not have any overlaps or say what should happen if there are overlaps)
This code might be a good start:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/library/stdtypes.html#dict.setdefault
