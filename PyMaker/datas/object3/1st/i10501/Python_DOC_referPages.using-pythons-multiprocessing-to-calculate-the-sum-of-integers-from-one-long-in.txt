Natural Text
I want to use Python's multiprocessing module for the following:Map an input line to a list of integers and calculate the sum of this list.The input line is initially a string where the items to be summed are separated by spaces.What I have tried is this:This takes about 600ms on my machine, but I would like to make it faster with multiprocessing.It seems that the bottleneck is in the mapping-part since the sum-method is pretty fast when applied to a ready list of integers:I tried to apply the instructions from this question but as I'm quite new to using multiprocessing, I couldn't fit the instructions to this problem.
So, this seems to roughly boil down to three steps:Make a poolMap int() across the list within that poolSum the results.So:It may be more efficient for time to use generators where possible:The regex will likely be slower than split, but using re.finditer should allow the Pool to start mapping as fast as individual splits are made, and using imap rather than map should do similarly for sum (allowing it to start adding numbers as they become available). Credit to this answer for the re.finditer idea.It may or may not be more efficient to multiprocess than doing it in a single process. You might end up losing more time making new processes and passing the results back from them than you gain in doing things all at once. The same goes for if you were to try putting the adding into the pool as well.On the system I'm testing this on, which has two CPUs, I get the one-process solution to run in about half a second, the non-generator multiprocess solution in about 1 second, and the generator solution in 12-13 seconds.
Using a feature of Unix systems called forking, you can read (not write) data from the parent process with zero overhead. Normally, you would have to copy the data over, but forking a process in Unix allows you to circumvent this.Using this, the job in the pool can access the whole input string and extract the part that it will work on. It can then split and parse this section of the string on its own and return the sum of the integers in its section. 


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool
