Natural Text
For example,how to convert [1, 5, 7] into [1,2,5,6,7,8] into python?[x, x+1 for x in [1,5,7]] can't work for sure...
Not sure if this is the best way, but I would do:Another way using itertools.chain.from_iterable:
And you can always overcomplicate the problem with operator, imap(), partial(), izip() and chain():What happens here:we make an iterator over l that applies an add function with 1 as an argumentwe zip the initial list with the iterator returned by imap() to produce pairs of x, x+1 valueswe flatten the list with chain() and convert it to the list to see the result
A simple way to think about the problem is to make a second list of incremented values and add it to the original list, then sort it:
Make a generator function that iterates over the list and yields, in turn, each element and that element plus one.  Iterate over your generator.
You can combine some ideas from alecxe's answer and what you already had:What I have done is :Define in b a generator expression which allows us to have (something that looks like) a tuple that would have looked like ((1, 2), (5, 6), (7, 8)) but without evaluating it right away. It would have also worked with a list comprehension.Unpack b in the argument list of itertools.chain(). It would be the equivalent of itertools.chain((1, 2), (5, 6), (7, 8)). That function concatenates its arguments.Use list() to create a list from the return value of the itertools.chain() function since it's an iterator.This could also have worked without any intermediate step:But "Simple is better than complex"I hope this helps.I would have put more links if I had more reputation, sorry.
You can do your list comprehension logic with tuples and then flatten the resulting list:[n for pair in [(x, x+1) for x in [1,5,7]] for n in pair]
If you just want to fill the list with the numbers between the min and max+1 values you can use [i for i in range (min(x),max(x)+2)] assuming x is your list.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
https://docs.python.org/3/tutorial/classes.html#generator-expressions
https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists
