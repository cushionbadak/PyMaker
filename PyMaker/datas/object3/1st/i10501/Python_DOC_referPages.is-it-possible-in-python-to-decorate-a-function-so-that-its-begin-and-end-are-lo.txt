Natural Text
For logging, I would like each function to log its own name at the start and end of the function.If I change the name of the function, I have to update these print messages as well. I am looking for a way to automate this.Is this possible in a simple way, maybe using decorators? How would this look like if my_function had parameters?
You are right, using a decorator is a perfect way to implement such behavior.What you need to know is how a decorator works: it simply takes a function as an argument, and returns another function. This other returned function is intended to wrap your argument function.Also, note that the answer of @≈ÅukaszRogalski using functools.wraps is usefull for preserving the function docstring.Finally, a good idea from @MartinBonner, is that you can also use it to log the errors in your function:Note that I re-throw the error because I think the control flow should be managed from the outside of the function.For more advanced logging, you should use the built-in module which provides many facilities.
Sure, it's really simple with star args and star kwargs. functools.wraps is used to rewrite any metadata (__name__, __doc__ etc.) from input function to wrapper. If function object string representation is too verbose to you, you may use print("Enter", f.__name__) instead.Output:


Answer URL
https://docs.python.org/3/library/functools.html#functools.wraps
