Natural Text
I am new to coding and made up a project for my self to start learning, but I could'nt get around this problem. i am trying to make a little tool which converts stuff from the clipboard(which for now I will simply use a string called spam) so that the sentences start with a capital letter, and in which ' i ' is also uppercase, so ' I '. So what I tried to do was, find a match where there is a ('. ', '? ' or ' i ') and go from there.This returns the error:"(lists(mo1.start()+2)).upper() TypeError: 'str' object is not  callable"What I try to do there is find where there is a mo, go 2 indecises to the right and change what is there to uppercase. Is there any way to do this? And offcourse the search() function only returns 1 mo, so my question is: is there a way to work around it when there are multiple matching objects and change them all? I know findall() exists but how can you use that here?Anyway, I would love some help from anybody, and I am sorry if this code hurts to watch.
There are several errors (or awkwardnesses) in your code.Here is a quick code review:According to the PEP8 conventions, variable should be written in snake case. So I replace dotRegex by dot_regex,Since you don't modify it in function, you can also use module-level variables (constant) for RegEx: for instance: DOT_REGEX.Put spaces around binary operators: mo1 = ....In Python, string indexing/slicing use [] operator, so replace lists(mo1.start() + 2) by lists[mo1.start() + 2]. The syntax lists(...) is a function call, here.Remember that in Python, strings are immutable: so you can't modify it, you must create a copy.To answer your question: No, you can't modify a string, but you can use a search/replace with RegEx to do what you want.Here is an detailed explanation for the dot_regex:You can continue with other RegEx...Note: to match a single "i", you can use r"\bi\b":You are doing a king of copy-editing, aren't you? ;-)You can combine the rules for dot and question mark (and exclamation mark too):TUTORIAL: Regular Expression HOWTO


Answer URL
https://docs.python.org/3/howto/regex.html
