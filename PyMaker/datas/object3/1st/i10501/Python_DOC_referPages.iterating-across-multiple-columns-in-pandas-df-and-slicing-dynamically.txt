Natural Text
TLDR: How to iterate across all options of multiple columns in a pandas dataframe without specifying the columns or their values explicitly?Long Version: I have a pandas dataframe that looks like this, only it has a lot more features or drug dose combinations than are listed here. Instead of just 3 types of features, it could have something like 70...:Along with my data frame, I also have a python dictionary with the relevant ranges for each feature. The keys are the feature names, and the different values which it can take are the keys:For my purposes, I need to generate a particular combination (say A_dose = 1, B_dose = 90, and C_dose = 700), and based on those settings take the relevant slice out of my dataframe, and do relevant calculations from that smaller subset, and save the results somewhere.I need to do this for ALL possible combinations of ALL of my features (far more than the 3 which are here, and which will be variable in the future). In this case, I could easily pop this into SkLearn's Parameter grid, generate the options:and get:This is where I run into problems:Problem #1) I can now iterate across all_options, but I'm not sure how to now SELECT out of my dosage_df from each of the dictionary options (i.e. {'A_dose': 1, 'B_dose': 40, 'C_dose': 130}) WITHOUT doing it explicitly. In the past, I could do something like:But now I'm not sure what to put inside the brackets to slice it dynamically...Problem #2) When I actually enter in my full dictionary of features with their respective ranges, I get an error because it deems it as having too many options... I tried a number of alternate approaches including using double while loops, a tree / recursion method from here, another recursion method from here, but it wasn't coming together.... Any help is much appreciated. 
You can use itertools.product to generate all possible dosage combinations, and DataFrame.query to do the selection:
What about using the underlying numpy array and some boolean logic to build an array containing only the lines you want ?


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
