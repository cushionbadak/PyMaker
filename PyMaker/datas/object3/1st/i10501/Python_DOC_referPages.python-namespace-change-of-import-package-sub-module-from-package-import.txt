Natural Text
The Python documentation saysConsider this code:In this example, the echo and surround modules are imported in the  current namespace because they are defined in the sound.effects  package when the from...import statement is executed. (This also works  when __all__ is defined.)I try the following codeWhen package/__init__.py is empty, the code works fine. However, when package/__init__.py contains __all__ = [], print(sub_module) will raise NameError.What is (This also works when all is defined.) from the documentation means?The codes:In main.py:When package/__init__.py is empty, executing python3 main.py gets     <module 'package.sub_module' from '/path/to/package/sub_module.py'When package/__init__.py contains __all__ = [], executing python3 main.py gets
If a module package defines __all__, it is the list of module names that are imported by from package import *So if you define __all__ as empty list, from package import * will import nothing.Try defining it like this:Also note that you don't have to do from package import * to use sub_moduleYou can also just do:
Solution: you have __all__ set to empty list i.e. from package import * basically imports nothingset it to __all__ = ['submodule'] in __init__.pyWhat exactly is __all__ ?In simplest words all help customizing the from package import * i.e. with all we can set what will be imported and what not.From the docs:The public names defined by a module are determined by checking the  module’s namespace for a variable named all; if defined, it must  be a sequence of strings which are names defined or imported by that  module. The names given in all are all considered public and are  required to exist. If all is not defined, the set of public names  includes all names found in the module’s namespace which do not begin  with an underscore character ('_'). all should contain the entire  public API. It is intended to avoid accidentally exporting items that  are not part of the API (such as library modules which were imported  and used within the module).One important thing to note here is - Imports without * are not affected by __all__ i.e. Members that are not mentioned in __all__ are accessible from outside the module using direct import - from <module> import <member>.An Example: the following code in a module.py explicitly exports the symbols foo and bar:These symbols can then be imported like so:
If you define __all__, then only the attributes mentioned there will be imported via *, while the excluded ones have to be imported explicitly. So either useor if you really want to use the (discouraged!) from package import *, declarein package. Note how tedious it will become to keep this up-to-date...


Answer URL
https://docs.python.org/3/tutorial/modules.html#importing-from-a-package
https://docs.python.org/3/reference/simple_stmts.html#the-import-statement
