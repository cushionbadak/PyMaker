Natural Text
I want to create a proxy class that wraps an int for thread-safe access. In contrast to the built-in type, the proxy class is mutable, so that it can be incremented in-place. Now, I want to use that class just as a normal integer from the outside. Usually, Python's __getattr__ makes it very easy to forward attribute access to the inner object:However, __getattr__ does not get triggered for magic methods like __add__, __rtruediv__, etc that I need for the proxy to behave like an integer. Is there a way to generate those methods automatically, or otherwise forward them to the wrapped integer object?
The blog post linked by @VPfB in the comments has a more generic and thorough solution to proxying dunder methods for builtin types, but here's a simplified and rather brutish example for the same. I hope it helps in understanding how to create such forwarding methods.


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-lookup
