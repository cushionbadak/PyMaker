Natural Text
I would like to subclass list and trigger an event (data checking) every time any change happens to the data. Here is an example subclass:Here, I am overriding methods __init__, __setitem__ and __append__ to perform the check if data changes. I think this approach is undesirable, so my question is: Is there a possibilty of triggering data checking automatically if any kind of mutation happens to the underlying data structure?
As you say, this is not the best way to go about it. To correctly implement this, you'd need to know about every method that can change the list.The way to go is to implement your own list (or rather a mutable sequence). The best way to do this is to use the abstract base classes from Python which you find in the collections.abc module. You have to implement only a minimum amount of methods and the module automatically implements the rest for you.For your specific example, this would be something like this:PerformanceSome methods are slow in their default implementation. For example __contains__ is defined in the Sequence class as follows:Depending on your class, you might be able to implement this faster. However, performance is often less important than writing code which is easy to understand. It can also make writing a class harder, because you're then responsible for implementing the methods correctly.


Answer URL
https://docs.python.org/3/library/shelve.html#shelve.open
