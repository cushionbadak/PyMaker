Natural Text
Two questions here. I have a set of files which are usually UTF-8 with BOM. I'd like to convert them (ideally in place) to UTF-8 with no BOM. It seems like codecs.StreamRecoder(stream, encode, decode, Reader, Writer, errors) would handle this. But I don't really see any good examples on usage. Would this be the best way to handle this?  Also, it would be ideal if we could handle different input encoding wihtout explicitly knowing (seen ASCII and UTF-16). It seems like this should all be feasible. Is there a solution that can take any known Python encoding and output as UTF-8 without BOM?edit 1  proposed sol'n from below (thanks!)This gives me the following error:  NewsflashI'm being told in comments that the mistake is I open the file with mode 'rw' instead of 'r+'/'r+b', so I should eventually re-edit my question and remove the solved part.
Simply use the "utf-8-sig" codec:That gives you a unicode string without the BOM. You can then useto get a normal UTF-8 encoded string back in s. If your files are big, then you should avoid reading them all into memory. The BOM is simply three bytes at the beginning of the file, so you can use this code to strip them out of the file:It opens the file, reads a chunk, and writes it out to the file 3 bytes earlier than where it read it. The file is rewritten in-place. As easier solution is to write the shorter file to a new file like newtover's answer. That would be simpler, but use twice the disk space for a short period.As for guessing the encoding, then you can just loop through the encoding from most to least specific:An UTF-16 encoded file wont decode as UTF-8, so we try with UTF-8 first. If that fails, then we try with UTF-16. Finally, we use Latin-1 â€” this will always work since all 256 bytes are legal values in Latin-1. You may want to return None instead in this case since it's really a fallback and your code might want to handle this more carefully (if it can).
In Python 3 it's quite easy: read the file and rewrite it with utf-8 encoding:

This is my implementation to convert any kind of encoding to UTF-8 without BOM and replacing windows enlines by universal format:
I found this question because having trouble with configparser.ConfigParser().read(fp) when opening files with UTF8 BOM header. For those who are looking for a solution to remove the header so that ConfigPhaser could open the config file instead of reporting an error of:File contains no section headers, please open the file like the following:This could save you tons of effort by making the remove of the BOM header of the file unnecessary.(I know this sounds unrelated, but hopefully this could help people struggling like me.)
You can use codecs.


Answer URL
https://docs.python.org/3/library/codecs.html#module-encodings.utf_8_sig
