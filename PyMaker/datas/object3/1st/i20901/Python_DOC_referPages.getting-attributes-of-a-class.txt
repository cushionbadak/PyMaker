Natural Text
I want to get the attributes of a class, say:using MyClass.__dict__ gives me a list of attributes and functions, and even functions like __module__ and __doc__. While MyClass().__dict__ gives me an empty dict unless I explicitly set an attribute value of that instance.I just want the attributes, in the example above those would be: a and b
Try the inspect module. getmembers and the various tests should be helpful.EDIT:For example,Now, the special methods and attributes get on my nerves- those can be dealt with in a number of ways, the easiest of which is just to filter based on name....and the more complicated of which can include special attribute name checks or even metaclasses ;)

myfunc is an attribute of MyClass. That's how it's found when you run:It looks for an attribute on myinstance named myfunc, doesn't find one, sees that myinstance is an instance of MyClass and looks it up there.So the complete list of attributes for MyClass is:(Note that I'm using dir just as a quick and easy way to list the members of the class: it should only be used in an exploratory fashion,  not in production code)If you only want particular attributes, you'll need to filter this list using some criteria, because __doc__, __module__, and myfunc aren't special in any way, they're attributes in exactly the same way that a and b are.I've never used the inspect module referred to by Matt and Borealid, but from a brief link it looks like it has tests to help you do this, but you'll need to write your own predicate function, since it seems what you want is roughly the attributes that don't pass the isroutine test and don't start and end with two underscores.Also note: by using class MyClass(): in Python 2.7 you're using the wildly out of date old-style classes. Unless you're doing so deliberately for compatibility with extremely old libraries, you should be instead defining your class as class MyClass(object):. In Python 3 there are no "old-style" classes, and this behaviour is the default. However, using newstyle classes will get you a lot more automatically defined attributes:
MyClass().__class__.__dict__However, the "right" was to do this is via the inspect module.
For an instance of MyClass, such asuse type(mc) in place of MyClass in the list comprehension.  However, if one dynamically adds an attribute to mc, such as mc.c = "42", the attribute won't show up when using type(mc) in this strategy.  It only gives the attributes of the original class.To get the complete dictionary for a class instance, you would need to COMBINE the dictionaries of type(mc).__dict__ and mc.__dict__.
I don't know if something similar has been made by now or not, but I made a nice attribute search function using vars(). vars() creates a dictionary of the attributes of a class you pass through it.I'm developing a pretty massive Text Adventure in Python, my Player class so far has over 100 attributes. I use this to search for specific attributes I need to see.
My solution to get all attributes (not methods) of a class (if the class has a properly written docstring that has the attributes clearly spelled out):This piece cls.__dict__['__doc__'] extracts the docstring of the class.
I recently needed to figure out something similar to this question, so I wanted to post some background info that might be helpful to others facing the same in future.Here's how it works in Python (from https://docs.python.org/3.5/reference/datamodel.html#the-standard-type-hierarchy):MyClass is a class object, MyClass() is an instance of the class object. An instance's __dict__ only hold attributes and methods specific to that instance (e.g. self.somethings). If an attribute or method is part of a class, it is in the class's __dict__. When you do MyClass().__dict__, an instance of MyClass is created with no attributes or methods besides the class attributes, thus the empty __dict__So if you say print(MyClass().b), Python first checks the new instance's dict MyClass().__dict__['b'] and fails to find b. It then checks the class MyClass.__dict__['b'] and finds b.That's why you need the inspect module, to emulate that same search process.
Getting only the instance attributes is easy.But getting also the class attributes without the functions is a bit more tricky.Instance attributes onlyIf you only have to list instance attributes just usefor attribute, value in my_instance.__dict__.items()Instance and class attributesTo get also the class attributes without the functions, the trick is to use callable(). But static methods are not always callable!Therefore, instead of using callable(value) usecallable(getattr(MyClass, attribute))ExampleNote: print_class_attributes() should be @staticmethod      but not in this stupid and simple example.Result for python2Same result for python3
You can use dir() in a list comprehension to get the attribute names:Use getattr() to get the attributes themselves:
This can be done without inspect, I guess.Take the following class:Looking at the members along with their types:... gives:So to output only the variables, you just have to filter the results by type, and names not starting with '__'. E.g.That's it.Note: if you're using Python 3, convert the iterators to lists.If you want a more robust way to do it, use inspect.
two function:use:
You can use MyClass.__attrs__.  It just gives all the attributes of that class. Nothing more.
There is a very simple answer, that should be obvious: getattrIt works dandy both in Python 2.7 and Python 3.x.If you want a list of these items, you will still need to use inspect.
I know this was three years ago, but for those who are to come by this question in the future, for me:works just fine.


Answer URL
https://docs.python.org/3/library/stdtypes.html#object.__dict__
https://docs.python.org/3/library/functions.html?highlight=staticmethod#callable
https://docs.python.org/3/library/functions.html?highlight=staticmethod#staticmethod
https://docs.python.org/3/library/functions.html?highlight=staticmethod#getattr
https://docs.python.org/3/library/functions.html?highlight=staticmethod#staticmethod
https://docs.python.org/3/library/inspect.html
