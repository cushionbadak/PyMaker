Natural Text
I'm messing around with file lookups in python on a large hard disk.  I've been looking at os.walk and glob.  I usually use os.walk as I find it much neater and seems to be quicker (for usual size directories).Has anyone got any experience with them both and could say which is more efficient?  As I say, glob seems to be slower, but you can use wildcards etc, were as with walk, you have to filter results.  Here is an example of looking up core dumps.Or
I made a research on a small cache of web pages in 1000 dirs. The task was to count a total number of files in dirs. The output is:As you see, os.listdir is quickest of three. And glog.glob is still quicker than os.walk for this task.The source:
Don't waste your time for optimization before measuring/profiling. Focus on making your code simple and easy to maintain. For example, in your code you precompile RE, which does not give you any speed boost, because re module has internal re._cache of precompiled REs.Keep it simpleif it's slow, then profileonce you know exactly what needs to be optimized do some tweaks and always document itNote, that some optimization done several years prior can make code run slower compared to "non-optimized" code. This applies especially for modern JIT based languages.
You can use os.walk and still use glob-style matching.Not sure about speed, but obviously since os.walk is recursive, they do different things.
*, ?, and character ranges expressed with [] will be correctly matched. This is done by using the os.listdir() and fnmatch.fnmatch() functionsI think even with glob you would still have to os.walk, unless you know directly how deep your subdirectory tree is.Btw. in the glob documentation it says:"*, ?, and character ranges expressed with [] will be correctly  matched. This is done by using the os.listdir() and fnmatch.fnmatch()  functions "I would simply go with a 


Answer URL
https://docs.python.org/3/library/glob.html#glob.iglob
