Natural Text
I am rather new to python.I have two datetime objects. I need to calculate the timedelta between them and then show the output in a spcific format.an example of this Turnaround_TimeObj  time delta is "2 days, 22:13:45".I want to format the output but am unable to do so.doesn't works.I know one way of doing this will be to convert it to seconds and then divmodding to get the required formatting.as in;but i was wondering if I can do it in a single line using any date time function like strftime.EDIT: actually converting to seconds doesn't works either.if I convert the time delta "1 day, 3:42:54" to seconds using totalSeconds value is shown as 13374 instead of 99774. ie. its ignoring the "day" value.
but i was wondering if I can do it in a single line using any date time function like strftime.As far as I can tell, there isn't a built-in method to timedelta that does that. If you're doing it often, you can create your own function, e.g.Usage:If you want to use a string format closer to the one used by strftime we can employ string.Template.Usage:totalSeconds value is shown as 13374 instead of 99774. ie. its ignoring the "day" value.Note in the example above that you can use timedelta.days to get the "day" value.Alternatively, from Python 2.7 onwards, timedelta has a total_seconds() method which return the total number of seconds contained in the duration.
In Python2.7 or newer, you could use the total_seconds method:yieldsIn Python2.6 or older, you could compute the total_seconds yourself:(for the more general formula, including microseconds, see the link above).
Shawn Chin's answer is a good one, but one problem with it is that if you skip a particular element in your format (as in his second example which only has hours and minutes .. not days or seconds) then that time vanishes from your result.  You can modify it to fix that issue and get more accurate results by only processing the keywords that actually appear in the format string.Usage:That's inflexible about formatting though, as you can't apply any conversion strings and wind up with ugly things like this:However, you can take the same approach and apply it to string.Formatter instead of string.Template and get something much better.Usage:
A slight variant on Shawn Chin's answer - that also addresses a subsequent issue raised by mpouncett - pads the hours, minutes and seconds with leading zeros to ensure that all 3 elements use 2 places (more consistent with the specification for these fields in strftime):Here are is a test for some sample values:And here is the output:
You could use the dateutil module which has the friendlier relativedelta object.this gives you an object delta that looks likeYou can then do )

The above answers don’t seem to handle negative timedelta values (as produced e.g. by pytz for timezones “left” of UTC). As per documentation, timedelta objects are normalized, and a negative timedelta is represented by a negative day instance attribute. From the documentation:Note that normalization of negative values may be surprising at first. and thatString representations of timedelta objects are normalized similarly to their internal representation. This leads to somewhat unusual results for negative timedeltas.For example:Given this example timedelta, both Shawn Chin’s accepted answer and gumption’s answer return '23:59:30', and mpounsett’s answer '-1:59:30'.I think in order to print both negative and positive timedeltas in a more readable manner, we need to handle the sign and absolute value of a timezone object explicitly:This function returns a more readable string representation:…or in the more practical context of timezones:


Answer URL
https://docs.python.org/3/library/datetime.html#timedelta-objects
