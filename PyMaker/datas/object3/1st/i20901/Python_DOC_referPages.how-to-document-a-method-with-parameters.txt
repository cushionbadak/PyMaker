Natural Text
How to document methods with parameters using Python's documentation strings?EDIT:PEP 257 gives this example:Is this the convention used by most Python developers ?I was expecting something a little bit more formal such as Environement: Python 2.7.1
Based on my experience, the numpy docstring conventions (PEP257 superset) are the most widely-spread followed conventions that are also supported by tools, such as Sphinx. One example:
Since docstrings are free-form, it really depends on what you use to parse code to generate API documentation.I would recommend getting familiar with the Sphinx markup, since it is widely used and is becoming the de-facto standard for documenting Python projects, in part because of the excellent readthedocs.org service. To paraphrase an example from the Sphinx documentation as a Python snippet:This markup supports cross-referencing between documents and more. Note that the Sphinx documentation uses (e.g.) :py:attr: whereas you can just use :attr: when documenting from the source code.Naturally, there are other tools to document APIs. There's the more classic Doxygen which uses \param commands but those are not specifically designed to document Python code like Sphinx is.Note that there is a similar question with a similar answer in here...
Conventions:PEP 257 Docstring ConventionsPEP 287 reStructuredText Docstring FormatTools:Epydoc: Automatic API Documentation Generation for Pythonsphinx.ext.autodoc – Include documentation from docstringsPyCharm has some nice support for docstringsUpdate: Since Python 3.5 you can use type hints which is a compact, machine-readable syntax:The main advantage of this syntax is that it is defined by the language and that it's unambiguous, so tools like PyCharm can easily take advantage from it.
python doc strings are free-form, you can document it in any way you like.Examples:Now, there are some conventions, but python doesn't enforce any of them. Some projects have their own conventions. Some tools to work with docstrings also follow specific conventions.
If you plan to use Sphinx to document your code, it is capable of producing nicely formatted HTML docs for your parameters with their 'signatures' feature.  http://sphinx-doc.org/domains.html#signatures
The mainstream is, as other answers here already pointed out, probably going with the Sphinx way so that you can use Sphinx to generate those fancy documents later.That being said, I personally go with inline comment style occasionally.One more example here, with some tiny details documented inline:The benefits (as @mark-horvath already pointed out in another comment) are:Most importantly, parameters and their doc always stay together, which brings the following benefits:Less typing (no need to repeat variable name)Easier maintenance upon changing/removing variable. There will never be some orphan parameter doc paragraph after you rename some parameter.and easier to find missing comment. Now, some may think this style looks "ugly". But I would say "ugly" is a subjective word. A more neutual way is to say, this style is not mainstream so it may look less familiar to you, thus less comfortable. Again, "comfortable" is also a subjective word. But the point is, all the benefits described above are objective. You can not achieve them if you follow the standard way.Hopefully some day in the future, there will be a doc generator tool which can also consume such inline style. That will drive the adoption.PS: This answer is derived from my own preference of using inline comments whenever I see fit. I use the same inline style to document a dictionary too.
Docstrings are only useful within interactive environments, e.g. the Python shell. When documenting objects that are not going to be used interactively (e.g. internal objects, framework callbacks), you might as well use regular comments. Here’s a style I use for hanging indented comments off items, each on their own line, so you know that the comment is applying to:You can’t do this sort of thing with docstrings.


Answer URL
https://docs.python.org/3/library/typing.html
