Natural Text
I am trying to plot weather data of a city during a whole year, such high_temp_f and low_temp_f, the data has been stored in a CSV file. I wrote a function to get the columns I need in order to plot them in a chart, but the function can only return the data for the first time I use it.The CSV file structure is as below:The code I wrote is as below:The output is as below:I got the result of high_temp_f_bj, which is [69, 59, 80], but for low_temp_f_bj, I've only got []. However, if I delete the code of high_temp_f_bj = data_to_list(1) and print(high_temp_f_bj), I can get the right output of low_temp_f_bj, which is [46, 46, 46]. I am so confused! Why can I only use the function once???
csv.reader returns a Reader object which is an iterator, and as such has a state of where in the data you are.This is why you can use next(data) to read the next (in this case first) line of the data. Calling next() not only gives you the line, but also advances the internal state so the next call would give you the following line. That’s why you do not have to skip the header line again in your data_to_list function.However, this has also the effect that you can only navigate through the file once. next() (or iterating over data which just does subsequent next() calls) will continuously move forward that internal line pointer until the end of the file is reached. But when the end is reached, you also cannot just read again.Some file based iterators allow you to seek back to the beginning of the file; a CSV reader does not (at least to my knowledge). So if you want to process the data multiple times, you will have to load the parsed CSV data into memory first:Alternatively, you should consider changing your data_to_list function to be able to process multiple columns at once, so you only need to move once through your file and do not have to store all the contents in memory.If you’re having difficulties understanding this iterable thing and that internal pointer, try with an easier iterator first. You can get one from any sequence by calling iter() on it:As you can see, calling next() on the iterator gives you the next element from the iterator. The calls move the internal pointer which is why you don’t get the same element from multiple next() calls. And when you iterate over the iterator using a for loop you also just get the remaining elements from the iterator. Once the iterator is exhausted (which causes the for loop to end), subsequent calls to next() will not yield any new results but just raise a StopIteration exception, which is the sign that the iterator is exhausted (this is also what causes the for loop to end).
Once you have read the file, and you are at the end, there is nothing more to read.  You could re-open it for each call to data_to_list, or (more efficiently) modify data_to_list to handle all of the columns at once.
This happens because the csv.reader returns a iterator, and your data_to_list function iterates it. So when you run the function a second time the iterator is finished.You can load the data to a list of dicts (if it's not too large) and do the processing on it.


Answer URL
https://docs.python.org/3/library/csv.html#reader-objects
