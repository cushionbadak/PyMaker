Natural Text
I need a tearDownClass(cls) method for the instance.I mean one where I can refer to self (the instance), not to cls (the class).A sort of tearDownTestCase(self).My intention is to cleanup the database after ALL the test cases have been run.tearDown(self) is executed at the end of every test and I don't want use it.tearDownClass(cls) is executed once when ALL the tests finished but it does not contain a reference to self, and I need to access to a property of self (more precisely to a function).There is a way to achieve this?Python 3.6Example of real scenario:Doing the cleanup in the tearDown() method it results in:setUp  .test 1cleanuptestcleanup (= redundant). . ..test Ncleanuptestcleanup  Instead I want this:(and it is possible if a tearDownX() method is executed after ALL the tests are finished)setUp  (test 1)cleauptest. . .(test N)cleauptest  tearDownX (self)cleanup (final)  This is more or less how I ended in the design of the tests in the last years.It try to be bullet proof against interrupted debug sessions (no cleanup) and dirty initial database state.As a temporary solution I have replicated the cleanup method in the tearDownClass(cls) method, but I'm not happy. Ideally I could simply call the self._cleanup_record but this is not possible because tearDownClass is a class method.  I hope all that makes sense.Thank you,Alessandro
Yes, there is a pair of instance methods setUp and tearDown under the unittest.TestCase, executed before and after each test respectively.From the docs:setUp()   Method called to prepare the test fixture. This is called  immediately before calling the test method; other than AssertionError  or SkipTest, any exception raised by this method will be considered an  error rather than a test failure. The default implementation does  nothing.tearDown()   Method called immediately after the test method has been  called and the result recorded. This is called even if the test method  raised an exception, so the implementation in subclasses may need to  be particularly careful about checking internal state. Any exception,  other than AssertionError or SkipTest, raised by this method will be  considered an additional error rather than a test failure (thus  increasing the total number of reported errors). This method will only  be called if the setUp() succeeds, regardless of the outcome of the  test method. The default implementation does nothing.UPDATE (after comments)Well, you probably have no choice but to re-design your code. You can make the db cleanup method a class method instead of instance method. Anyways, since you shouldl't count on the test execution order, nor have your tests dependent on each other, it would be still smart to create the db fixture for each test with the setUp method and clean it with tearDown method after each test.Another option would be using a mock for the db in your tests, so you won't need to worry about cleaning it up.


Answer URL
https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUp
https://docs.python.org/3/library/unittest.mock.html
