Natural Text
Consider the following code which creates a very simple table (without using SQLAlchemy), then adds an entry to it using SQLAlchemy ORM and retrieves it:One may expect that the code above will just print 'None', as 'c1' was not assigned a value. Instead of it, I'm getting the following error message:But if the following line will be removed/commented:the output will be as expected.In general, it looks like the iteration over Table.columns inside the class definition will cause the last column to be omitted from the class instances.Following this answer, I actually changed the code to use Inspector, and it worked fine. However, AFAIK, accessing Table.columns is completely legitimate, so I wanted to understand whether it's buggy behavior or something wrong on my side.P.S. tested with SQLAlchemy 1.1.9P.P.S. the issue doesn't appear to be related to a specific DB dialect - reproduced with MySQL, sqlite.
This is more of a Python version issue than an SQLAlchemy issue. The root cause is the leaking of the name c from the list-comprehension in Python 2. It becomes part of the namespace of the constructed class, and so SQLAlchemy sees it as if you were explicitly naming the last column in the list columns in your class definition. Your class definition is equivalent to:If you change your print statement to:you'll get None as you expected. If you must have your field_names, you could for example remove the name from the namespace:but this is unportable (and ugly) between Python 2 and 3, since the name would not actually exist in 3. You could also work around the issue with attrgetter():or use a generator expression:


Answer URL
https://docs.python.org/3/library/operator.html#operator.attrgetter
