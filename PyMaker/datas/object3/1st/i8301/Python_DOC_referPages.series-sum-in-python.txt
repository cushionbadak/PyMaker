Natural Text
Is there is a built-in function in python, numpy or one of its libraries can get sum of series like this one:where x and y are lists and L is the length of x or y.Lastly if there is no built-in function do that, I tried another code like :Sure, it doesn't work but I need something near that or near this one:Note : I can build my own function to do that but I am looking for a simple, fast or built-in one, so please don't give me your own function.Edit : I want general form to do that so I can use this form when there are as an example Log(n) or another kind of math in the series.
for build-in you can use zip to group together elements in the same index positionAbout the editA buil-in version would bea more generalized version would bewhere you can provide whatever function you like for any of its part, then the first one isand the second is could beor the point being that you calculate the second vector accordingly with numpy is more easywhich again boils down to calculate the parts accordingly you can also make such that instead of receiving 2 vectors/lists it only work with one and receive a function that work in the element and its index and use it asfrom the comments, if I get it right, then something like thisor with enumerate as beforeand use, for example as Note: this way it accept the serie/iterable/whatever and at most 3 positional argument with the same meaning as those from rangeNote 2: that is for PY3 which make fun a key-word only argument, in python 2 the same effect is accomplished with
That's literally just a dot product:Note that if you're using NumPy, you shouldn't be using lists to represent your matrices and vectors. NumPy arrays are much more efficient and convenient for that.
The mathematical operators with numpy arrays do element-wise operations, so you can use:or in the second case:as already mentioned np.sum(np.multiply()) is just a dotproduct, so you could also use @ (at least with python 3.5+, otherwise use np.dot):
These all do the same thingnp.einsum np.inner np.dot All yield 27For bigger arrays, np.einsum starts to see a performance boost
Use * operator and sum it along 0th axis.But, you should really be using the much cooler and ultra-fast np.inner()


Answer URL
https://docs.python.org/3/library/functions.html#zip
