Natural Text
For built-in Python types, list is mutable but tuple is not. For other sequences, is there a way to tell whether they are mutable or not? Like a mutable sequence usually has .pop(), .insert(), or .extend() member function? Do all mutable sequences and immutable sequences inherit from separate built-in types, which then can be used to differentiate them?
You can check whether the type is a subclass of the collections.abc.MutableSequence abstract base class (or collections.MutableSequence in Python 2):Note that unlike some ABCs (e.g., Collection and Iterable, which provide hooks for issubclass/isinstance) this one requires its subclasses to be explicitly registered, so this may not work out-of-the-box with all sequence-ish types.However, you can manually register a type as a subclass using MutableSequence.register(MyType), as long as the required abstract methods are implemented.
There is no simple solution until there is no understanding of what you are trying to achieve, so we need to understand what mutability is? Let's simply define mutable type as type for which instances we can set item in some position (by key in dictionaries, by index in lists), i. e. they implement __setitem__ method.Most preferred way of checking something in Python is to ask forgiveness, not permission, so something like this will helpbut it also can be replaced withboth work similar, depends on your taste.Examplegives us
If your sequence is named seq, the "duck typing" way to test immutability would be to try to assign a value to seq[0], and catch the exception if it doesn't work... 
An object is immutable if it contains only immutable-typed as sub-objects.A type is immutable if it is a built-in immutable type: str, int, bool, float, tuple. 


Answer URL
https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSequence
https://docs.python.org/3/library/abc.html#module-abc
https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSequence
