Natural Text
I am making a currency converter. How do I get python to accept both integer and float?This is how I did it:Simple example of how I did it:These two don't work.
I'm really hoping I'm not completely misunderstanding the question but here I go.It looks like you just want to make sure the value passed in can be operated upon like a float, regardless of whether the input is 3 or 4.79 for example, correct? If that's the case, then just cast the input as a float before operating on it. Here's your modified code:(I made a few changes as well for the sake of neatness, I hope you don't mind <3)
this is how you could check the given string and accept int or float (and also cast to it; nb will be an int or a float):but in your case just using float might do the trick (as also string representations of integers can be converted to floats: float('3') -> 3.0):if nb is None you got something that could not be converted to a float.
Use the isinstance function, which is built inAlso, you should refrain from using reserved keywords for variable names. The keyword from is a reserved keyword in PythonFinally, there is one other error I noticed:Should beLastly, to clean up the if statements you could theoretically use the list (if you have more currencies in the future, this might be better.
amount==int doesn't make sense.  input gives us a string.  int (and float) is a function.  A string never equals a function.float('12.23') returns a float object.  int('12.23') produces an error, because it isn't a valid integer string format.If the user might give either '12' or '12.23', it is safer to use float(x) to convert it to a number.  The result will be a float.  For many calculations you don't need to worry whether it is a float or integer.  The math is the same.You can convert between int and floats if needed:You can also do instance testsBut you probably don't need to do any those.


Answer URL
https://docs.python.org/3/glossary.html#term-eafp
https://docs.python.org/3/glossary.html#term-lbyl
