Natural Text
I'm trying to make a little blackjack game, and in a separate file I have called playing_cards.py, it contains "deck" which has the below in it. My question is, how can I do all this without having to have a bunch of if statements (which is still causing problems) and still produce the correct numbers. I'm still a beginner, so any help would be wonderful
Instead of teaching you about dictionaries (which probably comes in a different lesson), I'll teach you about str.index() (<-- link).You can use str.index, or str.find, to return an integer value that is the index of the beginning of a substring within a larger string.One use of that would be to replace all your various if statements, by arranging the card ranks in a single string:Notice that I have carefully built this string, on purpose, with letters where I want them. The first character of the string has index 0: I put a dot there, because I don't ever want a zero. Likewise, the second character of the string has index 1: not something I want. So I put the '2' at index 2, the 3 at index 3, etc. I put the 'T' at index 10, and the 'A' at index 11. After that, I put all the other stuff in no particular order.Now, let's print out some test data:From that, I get this:Which means we're on track, except for the JQK part. I think that's close enough:
First, I would change your definition of the deck to something like the following, not much more compact, but a lot easier to check that no cards or suits have been missed (and perhaps easier to modify):I'm not totally clear what you are trying to do next, but it seems you deal a card using a deal_one_card() method which you haven't included, and then trying to get the value of the card (10 for '10' or a picture-card, the number for a number-card, and 11 for an ace). I think the easiest way might be to define a dictionary of points:Then you can look up the points of a particular card, for example:Although obviously your own deal_one_card() method will need to track that a card has been dealt so is no longer in the pack.
Use a dictioanry, where you have the mapping of values of A, K, Q, J, T and digits. Something like this:You can get the mapping like this,
I would use something like this:This lets you call get_deck() to retrieve the deck of cards and each card has a values property (accessed as c.values assuming a card c) which returns all of the values the card can hold. This allows you to also handle the case where an Ace is 1-point, not 11 because it would a bust.


Answer URL
https://docs.python.org/3/library/stdtypes.html?highlight=str.index#str.index
