Natural Text
Or, perhaps a better title: how to avoid unwanted extra carriage return when passing binary file to text mode write clause. Python 3.6, Windows. Input file needs to undergo first a binary search/replace, and then a regex search/replace. I first open the input file in binary mode, do the work, and save it in binary mode in a temporary file. Then I open that in text mode, do the regex search/replace, and save it in text mode (with a name resembling that of the input file). It works but it's ugly. I'd rather pass outputs as files, like so:But then the output file (Windows) gets an unwanted extra carriage return. The symptoms are described here, but the cause is different: I'm not using os.linesep, in other words there is no os.linesep in my code. (there may be in the underlying libraries, I haven't checked.)What am I doing wrong? 
Python » Documentation :  open Default: newline=None, If newline is '' or '\n', no translation takes place.Try the following if it makes any different:  Question: ... there is no os.linesep in my code.  Python » Documentation :  open  When writing output to the stream, if newline is None, any '\n' characters written are translated to the system default line separator, os.linesep. If newline is '' or '\n', no translation takes place. If newline is any of the other legal values, any '\n' characters written are translated to the given string.  


Answer URL
https://docs.python.org/3/library/functions.html#open
https://docs.python.org/3/library/functions.html#open
