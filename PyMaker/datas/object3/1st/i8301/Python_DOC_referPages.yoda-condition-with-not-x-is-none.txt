Natural Text
The previous dev has left a really strange not x is None yoda condition in the code:After some testing, I seem the same output as x is not None.Is not x is None always equivalent to x is not None? To break down the condition, is it not (x is None) or (not x) is None? Or will the former always be equivalent to the latter?
Since is has higher precendence than not, then the expressions are equivalent:In case x = None:x is None evaluates to True, and not x is None evaluates to FalseIn case x = 1:x is None evaluates to False, and not x is None evaluates to TrueIn case x = None:x is not None evaluates to FalseIn case x = 1:x is not None evaluates to True.Therefore, even though the actions are not syntactically equivalent, the results are equivalent.This is the AST of not x is None:This is the AST of x is not None:As can be seen in the second diagram, the inner node is the compare node, and therefore x is None is evaluated before the not.Regarding actual evaluation of the expression, it seems that python creates the same bytecode for both. It can be seen in this example:As both generate:
is not is (I believe, the only) two-keyword operator in Python, and x is not y is entirely equivalent to not x is y. The same result will also be returned by id(x) != id(y). The canonical spelling for best reader comprehension would be x is not y.


Answer URL
https://docs.python.org/3/reference/expressions.html#operator-precedence
