Natural Text
I just discovered more or less by accident (answering this question) that one can copy at least some iterators using copy.copy()Q: Since this is not mentioned at all in the module documentation I was wondering whether this is an official feature or something that may be removed from the language without notice.Supplementary Q: Do the same caveats that exist for itertools.tee apply here? Viz. may consume a lot of memory, might be more efficient to create a list.Here is an example of why this seems a useful feature to me (try doing the same with tee):Update: My bad, I should have made clear that this also works for "proper" iterators (I tested itertools.product and itertools.combinations) not only for the "not-really-an-iterator" range. It also works with list iterators. It does not work with file (_io.TextIOWrapper) objects.
If it's not documented, it's probably true that you can't rely on it.  That said, this type of functionality seems more likely to later be documented than later removed.  However, your example is just copying one particular type of iterator, namely a range iterator, and you shouldn't in general expect to be able to copy arbitrary iterators.With the range iterator you used, there is not the kind of overhead as there is in tee, at least with the current implementation.  It appears copy is using the pickle __reduce_ex__ mechanism, which means that copying the range iterator essentially creates a new range iterator object, which should be just as iteration-efficient as the original one.  It's not storing the individual values.  (I can do copy.copy(iter(range(10**1000))) instantaneously and without any significant memory usage.)Each iterator type is different, and may or may not define a way to copy itself.  It appears that you're able to copy range iterators, but that doesn't mean you can assume you'll be able to copy any iterator you come across.  Indeed, in general it would be safer to assume you can't, because the iterator protocol is quite general and many iterators won't expose the internal state that would be needed to copy them.


Answer URL
https://docs.python.org/3/library/copy.html
