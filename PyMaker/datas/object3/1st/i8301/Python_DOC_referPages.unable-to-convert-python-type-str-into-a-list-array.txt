Natural Text
i'm new to python, and i am developing a tool/script for ssh and sftp.  i noticed some of the code i'm using creates what i thought was a string arrayto hold the console output from an ssh session. if i check "type" on channel_data it comes back as  class 'str' , but yet if i perform for loop to read each item in channel_data , and channel_data contains what appears to be 30 lines from an ssh consoleeach iteration of "line" shows a single character, as if the whole ssh console output of 30 lines of text is broken down into single character array. i do have \n within all the text.for example channel_data would contain "Cisco Nexus Operation System (NX-OS) Software\r\nCopyright (c) 2002-2016\r\n ..... etc. etc.. ", but again would read in my for loop and print out "C" then "i" then "s" etc..i'm trying to understand do i have a char array here or a string array here that is made up of single string characters and how to convert it into a string list based on \n within Python?
You can iterate a string just like a list in Python. So, yes, as expected, your string type channel_data will in fact give you every character.Python does not have a char array. You will have a list of strings, even as a single character as each item in the list:Also, just for the sake of adding some extra information for your own knowledge when it comes to usage of terminology, there is a difference between array and list in Python: Python List vs. Array - when to use?So, what you are actually looking to do here is take the channel_data string and make it a list by calling the split method on it.The split method will, by default, split on white space characters only. Check the documentation. So, you will want to make sure what you want to actually split on and provide that detail to the method.You can take a look at splitlines to see if that works for you.As specified in the documentation for splitlines:Line breaks are not included in the resulting list unless keepends is  given and true.Your result will then be a list of strings as you expect. So, as an example you can do: or
string_list = channel_data.splitlines()See docs at https://docs.python.org/3.6/library/stdtypes.html#str.splitlines


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.split
https://docs.python.org/3/library/stdtypes.html#str.splitlines
