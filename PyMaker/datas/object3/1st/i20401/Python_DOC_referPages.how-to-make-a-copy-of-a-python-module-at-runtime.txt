Natural Text
I need to make a copy of a socket module to be able to use it and to have one more socket module monkey-patched and use it differently.Is this possible?I mean to really copy a module, namely to get the same result at runtime as if I've copied socketmodule.c, changed the initsocket() function to initmy_socket(), and installed it as my_socket extension.
You can always do tricks like importing a module then deleting it from sys.modules or trying to copy a module. However, Python already provides what you want in its Standard Library.Python3.3+imp.load_module is deprecated in python3.3+, and recommends the use of importlibHere, we import the same module twice but as completely different module objects. If you check sys.modules, you can see two names you entered as first parameters to load_module calls. Take a look at the documentation for details.UPDATE:To make the main difference of this approach obvious, I want to make this clearer: When you import the same module this way, you will have both versions globally accessible for every other module you import in runtime, which is exactly what the questioner needs as I understood.Below is another example to emphasize this point.These two statements do exactly the same thing:On second line, we repeat 'my_socket_module' string twice and that is how import statement works; but these two strings are, in fact, used for two different reasons.Second occurrence as we passed it to find_module is used as the file name that will be found on the system. The first occurrence of the string as we passed it to load_module method is used as system-wide identifier of the loaded module.So, we can use different names for these which means we can make it work exactly like we copied the python source file for the module and loaded it.Then in my_sub_module, I can import 'socket_patched' which does not exist on system! Here we are in my_sub_module.py.
This is pretty disgusting, but this might suffice:
Here's some code that creates a new module with the functions and variables of the old:Note that this does a fairly shallow copy of the module. The dictionary is newly created, so basic monkey patching will work, but any mutables in the original module will be shared between the two.Edit: According to the comment, a deep copy is needed. I tried messing around with monkey-patching the copy module to support deep copies of modules, but that didn't work. Next I tried importing the module twice, but since modules are cached in sys.modules, that gave me the same module twice. Finally, the solution I hit upon was removing the modules from sys.modules after importing it the first time, then importing it again.
Physically copy the socket module to socket_monkey and go from there? I don't feel you need any "clever" work-around... but I might well be over simplifying!


Answer URL
https://docs.python.org/3/library/imp.html#imp.load_module
