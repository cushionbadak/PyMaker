Natural Text
How do I enclose a variable within single quotations in python? It's probably very simple but I can't seem to get it! I need to url-encode the variable term. Term is entered in a form by a user and is passed to a function where it is url-encoded term=urllib.quote(term). If the user entered "apple computer" as their term, after url-encoding it would be "apple%20comptuer". What I want to do is have the term surrounded by single-quotes before url encoding, so that it will be "'apple computer'" then after url-encoding "%23apple%20computer%23". I need to pass the term to a url and it won't work unless I use this syntax. Any suggestions?Sample Code:
There are three ways:string concatenationold-style string formattingnew-style string formatting
You can just use string interpolation:
Should be what you are looking for.
What's wrong with adding the single quotes after it being url encoded? Or, just adding them before hand in you encode function above?
For those that are coming here while googling something like "python surround string" and are time conscientious (or just looking for the "best" solution).I was going to add in that there are now f-strings which for Python 3.6+ environments are way easier to use and from what I read they say they are faster.I decided to do a timeit of each method of "surrounding" a string in python.Results:Oddly enough, I'm getting that concatenation is faster than f-string every time I run it, but you can copy and paste to see if your string/use works differently, there may also be a better way to put them into timeit than \ escaping all the quotes so let me know
I just stumbled upon some code doing it this way: (In this case join() uses term as a separator to combine all elements that were given in the iterable parameter into one string. Since there are only two elements, they are simply wrapped around one instance of term.)Although it is quite readable, I would still consider it a hack and less readable than other options. Therefore, I recommend the use of string formatting as mentioned by others:


Answer URL
https://docs.python.org/3/library/timeit.html
