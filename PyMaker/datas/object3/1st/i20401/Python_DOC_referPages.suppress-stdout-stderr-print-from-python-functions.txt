Natural Text
I have a Python script that is using some closed-box Python functions (i.e. I can't edit these functions) provided by my employer. When I call these functions, they are printing output to my linux terminal that I would like to suppress. I've tried redirecting stdout / stderr via;but this fails to catch the output. I think the functions I'm calling via-Python (rogue_function() from above) are really wrappers for compiled C-code, which are actually doing the printing. Does anyone know of a way I can do a "deep-capture" of any print handed to stdout / stderr by a function (and any sub-functions that function calls)? UPDATE:I ended up taking the method outlined in the selected answer below and writing a context manager to supress stdout and stderr:To use this you just:This works "pretty good". It does suppress the printout from the rogue functions that were cluttering up my script. I noticed in testing it that it lets through raised exceptions as well as some logger print, and I'm not entirely clear why. I think it has something to do with when these messages get sent to stdout / stderr (I think it happens after my context manager exits). If anyone can confirm this, I'd be interested in hearing the details ... 
This approach (found through the related sidebar) might work. It reassigns the file descriptors rather than just the wrappers to them in sys.stdout, etc.
My solution is similar to yours but uses contextlib and is a little shorter and easier to understand (IMHO).The context for why I created this is at this blog post. Similar to yours I think.I use it like this in a setup.py:
As of python 3.5 we can do this with minimal work using built-ins in contextlib, namely redirect_stdout and redirect_stderr. We only need to combine these two built-in context managers in a custom context manager of ours, which can be easily done using the nice pattern in Martijn's answer here. Redirecting both outputs to os.devnull should be safe and portable enough.Note that suppressing stderr will still give you full tracebacks when something breaks, which is a good thing:When run the above only printsto the terminal. Unhandled exceptions should never go unnoticed.
Did you try to redirect stderr too?e.g.Also using StringIO might use extra memory. You can use a dummy device instead (e.g. http://coreygoldberg.blogspot.com/2009/05/python-redirect-or-turn-off-stdout-and.html).
Not really requested by the OP, but I needed to hide and store the output, and did like follows:Usage:(tested only with Python 3)EDIT: now allows to select stderr, stdout or both, as in Hider([stdout, stderr])
python 3.6 working version, tested with million suppressions without any errors
I use a decorator for this. It saves sys.stdout and sys.stderr references and makes these variables point to null. Then, after the function execution the original references are retrieved. It is important to note the try/except block, that allows the retrieval of the original references even when an exception is raised on the function.To use:
If you are running this script on a linux based machine, you should be able to:


Answer URL
https://docs.python.org/3/library/contextlib.html
https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stdout
https://docs.python.org/3/library/contextlib.html#contextlib.redirect_stderr
https://docs.python.org/3/library/os.html#os.devnull
