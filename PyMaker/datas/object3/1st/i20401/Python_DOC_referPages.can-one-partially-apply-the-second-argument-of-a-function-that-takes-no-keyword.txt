Natural Text
Take for example the python built in pow() function.but how would I raise the xs to the power of 2?to get [1, 4, 9, 16, 25, 49, 64]I know list comprehensions would be easier.
NoAccording to the documentation, partial cannot do this (emphasis my own):partial.argsThe leftmost positional arguments that will be prepended to the positional argumentsYou could always just "fix" pow to have keyword args:
I think I'd just use this simple one-liner:Update:I also came up with a funnier than useful solution. It's a beautiful syntactic sugar, profiting from the fact that the ... literal means Ellipsis in Python3. It's a modified version of partial, allowing to omit some positional arguments between the leftmost and rightmost ones. The only drawback is that you can't pass anymore Ellipsis as argument.So the the solution for the original question would be with this version of partial list(map(partial(pow, ..., 2),xs))
Why not just create a quick lambda function which reorders the args and partial that
You could create a helper function for this:Disclaimer: I haven't tested this with keyword arguments so it might blow up because of them somehow. Also I'm not sure if this is what @wraps should be used for but it seemed right -ish.
you could use a closure
One way of doing it would be:but this involves re-defining the pow function.if the use of partial was not 'needed' then a simple lambda would do the trickAnd a specific way to map the pow of 2 would bebut none of these fully address the problem directly of partial applicaton in relation to keyword arguments
You can do this with lambda, which is more flexible than functools.partial():More generally:One down-side of lambda is that some libraries are not able to serialize it.
The very versatile funcy includes an rpartial function that exactly addresses this problem.It's just a lambda under the hood:
As already said that's a limitation of functools.partial if the function you want to partial doesn't accept keyword arguments.If you don't mind using an external library 1 you could use iteration_utilities.partial which has a partial that supports placeholders:1 Disclaimer: I'm the author of the iteration_utilities library (installation instructions can be found in the documentation in case you're interested).
If you can't use lambda functions, you can also write a simple wrapper function that reorders the arguments. and then call


Answer URL
https://docs.python.org/3/library/functools.html#functools.partial
