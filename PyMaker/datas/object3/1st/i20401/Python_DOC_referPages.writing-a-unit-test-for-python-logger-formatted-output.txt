Natural Text
How could you write a unittest in Python that would test that the output from a logger is indeed in the format you expect (i.e. set through a call to logging.basicConfig())? I'm thinking along the lines of a custom StreamHandler and use of the 're' library but it doesn't look like LogRecord passed to StreamHandler.emit() can give me the string that will be output.
From the documentation (http://packages.python.org/testfixtures/logging.html):To help with this, TestFixtures allows you to easily capture the output of calls to Pythonâ€™s logging framework and make sure they were as expected. There are three different techniques, depending on the type of test you are writing.The context managerThe decoratorThe manual usageThe examples are included in the documentation. The shortened version is below.The context managerAnd after that you can check the logs for equality:The decoratorSimilar to the previous, but applied to specific function:Manual usageAfter which you can also "check" the logs:EDIT: To access specific logs and analyze them in a custom way, you can just iterate through l.records (where l is just LogCapture's instance) and access some properties of each of them (eg. msg contains message sent to logger, levelname contains codename of the level, and there are plenty other properties).
If you want to use only standard libraries, this solution could help. It is based on unittest and mock libraries.For example if you have script.py with following content.You could write a test for it that will look like this.This is using the call_args_list from the mock library.To explain [0][0][0] at the end:The call_args_list is a list of call objects, which looks like this [call("something")]. So the first [0] is returning the first call object.The second [0] returns the tuple of arguments for the call object. It will look like this ("something",).Third [0] returns the first argument that was given to logger in our case. So the final string will be only "something".


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.call_args_list
