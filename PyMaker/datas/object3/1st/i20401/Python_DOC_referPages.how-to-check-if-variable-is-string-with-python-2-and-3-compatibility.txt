Natural Text
I'm aware that I can use: isinstance(x, str) in python-3.x but I need to check if something is a string in python-2.x as well. Will isinstance(x, str) work as expected in python-2.x? Or will I need to check the version and use isinstance(x, basestr)?Specifically, in python-2.x:and python-3.x does not have u"foo"
If you're writing 2.x-and-3.x-compatible code, you'll probably want to use six:
The most terse approach I've found without relying on packages like six, is:then, assuming you've been checking for strings in Python 2 in the most generic manner,will now also work for Python 3+.
What about this, works in all cases?
This is @Lev Levitsky's answer, re-written a bit.The try/except test is done once, and then defines a function that always works and is as fast as possible.EDIT: Actually, we don't even need to call isinstance(); we just need to evaluate basestring and see if we get a NameError:I think it is easier to follow with the call to isinstance(), though.
The future library adds (to Python 2) compatible names, so you can continue writing Python 3. You can simple do the following:To install it, just execute pip install future.As a caveat, it only support python>=2.6,>=3.3, but it is more modern than six, which is only recommended if using python 2.5
Maybe use a workaround like
You can get the class of an object by calling object.__class__, so in order to check if object is the default string type:And You can place the following in the top of Your code so that strings enclosed by quotes are in unicode in python 2:
You can try this at the beginning of your code:and later in the code:
type(string) == strreturns true if its a string, and false if not


Answer URL
https://docs.python.org/3/howto/pyporting.html#drop-support-for-python-2-6-and-older
