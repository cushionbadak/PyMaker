Natural Text
I am a beginner in Python. My task was to write an interactive text base program which has three functions to work with:Ask user to enter the name of the data/file (.text) they want to useThen ask them to input their command(s):i. sd yyyymmdd yyyymmdd --> command 1 Where sd = internet load of all servers during those day (in between) but Ihave 2 text files, note all values must be return/ print as a columnii. dl server1 server 2 --> command 2 Where dd = difference in the load between server 1 and server 2From the selected file, they can see the average server load using this command:iii. yearly YYYY yyyy ---> command 3 Shows general load/ average load for first_year (YYYY) to end_year (yyyy).When user input = (q) , the program exits, otherwise it will print (Bad/unknown).Problem #1: Should I use s.spilt(), tuple or what and how should it look?Problem #2:Would using the bool function (True, False, ) be OK or not?
The part you're trying to build is a command parser.If your command language is really simple, then yes, you can use split. This will work if and only if:A command line is always exactly one line.Commands and arguments are split by any whitespace (and the specific whitespace is not significant).There is no possibility of whitespace (not even quoted or escaped) within any command name or argument.If all of that is true, then your parser is as simple as:If the input is 'sd yyyymmdd yyyymmdd\n', then what you'll end up with is cmd = 'sd' and args = ['yyyymmdd', 'yyyymmdd'], which (I think) is what you want. Then, if you have, say, a dict mapping command names to functions that handle those commands, you can do something like:In this case, if your handlers was {'sd': handle_sd, 'q': handle_quit}, then this would call handle_sd('yyyymmdd', 'yyyymmdd'), which (again, I think) is what you want. (Of course in real life you'll want some error handling, in case the user types some command name that isn't in your dict, or gives the wrong number of arguments, but this is just meant as a simple example.)If you need something a little more complicated—e.g., a way to include quoted or escaped whitespace in arguments, similar to the way your bash or cmd.exe shell does—then you may be able to get away with the csv module (or maybe the shlex module).If you need something more complicated, you need to build your own parser, using something like pyparsing.You may also want to look at using the cmd module, instead of writing your own loop around input, looking up the cmd string in a map, etc. See the example at the bottom of the docs page. There are also a number of more powerful alternatives on PyPI you can search for.


Answer URL
https://docs.python.org/3/library/cmd.html
