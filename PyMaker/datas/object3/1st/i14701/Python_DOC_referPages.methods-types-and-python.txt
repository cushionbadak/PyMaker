Natural Text
This question already has an answer here:Should I force Python type checking?                    7 answers                In Python methods are a bit strange, at least compared to other languages. A function, say in C++, goes something like so:This ensures that the object passed into that function is in fact an integer. However in Python the same function looks like this:This function doesn't require i to be an integer, let alone a number. You could even pass in a string. So my question is: what is the general approach for handling this when writing code? Generally speaking, is it better to check the type and throw an error message if used incorrectly or is it preferred to no check at all and assume the correct type has been passed?
This is subjective. The easiest way to ensure that your arguments are of the proper type is with an assert statement -- in your example, something like assert isinstance(i, int), "foo expects an int!" But this isn't strictly necessary -- if it won't run with the erroneous arguments, it'll throw an error all the same.In short, do what helps you to debug best.
With Python, you want to handle this situation by verifying the input with:This is trying to convert the user input to an integer, and if it's unable to be converted, it throws a ValueError.


Answer URL
https://docs.python.org/3/glossary.html#term-duck-typing
