Natural Text
In C, I could read an "at most 16 characters" filename which is null-terminated, simply by reading it into a small buffer:But in my Python approach, I have resorted to actually stripping away the null characters and converting it to ASCII even though the characters might not actually be ASCII only, because it seems open() doesn't accept b'' strings, which might have been the result if I used decode("utf-8") in my code instead.Is there a more "standard" way of doing this?
You have binary data with embedded ASCII data, so your method is correct. Python strings are not C strings. That the data is NULL-terminated makes no difference in Python and the standard library has no methods to read such data, strip the NULL bytes and decode the data like you've done.The struct module does support writing null-terminated strings (16s in a struct.pack() call will pad the output string with nulls to make up the required length) but on reading the nulls are left in place.


Answer URL
https://docs.python.org/3/library/struct.html
