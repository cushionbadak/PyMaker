Natural Text
I have a dictionary, which contains:where key corresponds to a word and files are the set of files that contain that word.Suppose I have a dictionary:and my query is banana apple. How do I compare values in such a way that I return only file2.txt and file3.txt?
Iterate over the keys in the query and aggregate the result in a set:
You can use the set.intersection to create the common elements, like thisHere, we are creating a generator expression, which gets all the files corresponding to the word and converts that to a set. We then unpack the genereator expression over the set.intersection function, which finds the set intersection of all the sets.Edit: If your values of the dictionary are really sets, as you mentioned in the questionand files are the set of files that contain that wordthen, the solution can be even faster, since we don't have convert the lists to sets.  You can simply skip that and doImportant EditWhat if the dictionary had only banana and apple is not there and the input is banana apple? If you wanted to return an empty set in that case, then you just have to slightly modify the generator expression, like thisHere, we use dict.get method to return a default value if the key is not found in the dictionary. So, if apple is not there in the dictionary, then we return an empty set which makes the result an empty set (because when you intersect any set with an empty set, the result will be an empty set).
Here's a simple way, by constructing a mirror or reverse map of the given dict. The keys in this reverse dictionary, that have all the items in query, as their corresponding values would be what we want.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#sets
