Natural Text
They produce the same results.contrasted with:From what I understand, Python3's range creates a generator rather than storing the whole range in memory. reversed likewise generates its values one at a time, I think. Is there any reason to use one over the other?
The reversed() function in Python has a special case for when you pass it a range().  The only real difference between reversed(range(...)) and range(...) is that you can iterate over a range() more than once, but reversed() returns an iterator, so it can only be used once.You can see that in both cases, the iterator type is range_iterator.  So, the performance of the loop itself will be identical in both cases.Since the only overhead to reversed() is one extra function call, I always prefer reversed(range(10)) over range(9, -1, -1).
This is the results from using timeit on the two modulesAs you can see, the second way is slower that is because it has an additional call to the function reversed. 
reversed makes it an iterator so depending on how you  use it there are differences:
The only real difference between range(-n+1, -1, -1) and reversed(range(n)) is that range() returns a range object that can be further used/manipulated before iterating over it. Whereas reversed() returns an iterator -- all you can do is iterate over it.Examples of using a range object, which cannot be done with an iterator.Since range objects can be sliced this also opens up the possibility of reversing them in another way:However, unless additional functionality of a range object is needed, then reversed(range(n)) is vastly preferable as it is easier to understand.


Answer URL
https://docs.python.org/3/library/timeit.html
https://docs.python.org/3/library/functions.html?highlight=reversed#reversed
