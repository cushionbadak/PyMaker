Natural Text
I have a list of 256 functions as dicts, each with 4 pairs as in: [{'a':'b', 'b':'c', 'c':'c', 'd':'a'}, ... ]and would like to do the following...Apply function to each element in the domain from 1 to four times. For example for element 1 in the domain, 'a': [f[a], f[f[a]], ..., f[f[f[f[a]]]] ]This produces the following for the example dict/function in 1. view the matrix/list of lists as columns. 4.Then, I wish to count the number of elements 'a' in col1, 2, 3 and 4. and do this for each domain element. I am hoping to produce something of the form: [ [num a's in col 1, num of as in col 2, ...],             [num b's in col 1, num of b's in col 2, ...], etc ]for every single of the 256 function/dict elements.the final output should be something like: Here is the current code and the current output: the first bit of output from the above is as follows, the main problem is of course the resultant string of 0's instead of my desired list of lists counting occurrences: Out: desired out: 
This seems to do what you want. I also got rid of the global variable references in the functions and made them just return a result (global variables are bad). The only significant logic change was to the sigma() function.Output (line-breaks added for readability):UpdateThe following optimized version, which uses nested list comprehensions, produces exactly the same results with a lot less code, and so might also be of interest to you. It also eliminates the remaining references to global variables in each of the functions by passing the those needed as additional arguments to them. 


Answer URL
https://docs.python.org/3/tutorial/datastructures.html?highlight=list%20comprehension#list-comprehensions
