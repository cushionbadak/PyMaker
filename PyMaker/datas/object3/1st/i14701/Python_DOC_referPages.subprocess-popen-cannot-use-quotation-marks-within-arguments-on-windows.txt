Natural Text
I went through post after post on SO looking for a method to use quotation marks inside of arguments using subprocess.popen and I cannot seem to find a way. This works fine from the commandlinePythonrunme.batrunme.shI heard that subprocess.call() is a way around this but I'd like to be able to iterate line by line through the subprocess' output while the program is running.Edit:This seems to be a bug in Python because running runme.bat in cmd works correctly, running runme.py in linux works correctly, it's only when running runme.py on Windows where it doesn't work correctly. I created a ticket here.Edit2:It's not a python bug apparently lol. Look at chosen answer.
On Windows, a string is a native API. To avoid unnecessary conversions, pass the command as a string:stderr=subprocess.STDOUT merges stderr into stdout. If you set stderr=PIPE then you should read from process.stderr in parallel with reading from process.stdout otherwise your program may deadlock.Popen() passes the string to CreateProcess() Windows function. If the child process is actually a batch-file; you should probably pass shell=True explicitly to make it clear that the command is interpreted using cmd.exe rules (^, |, etc are meta-characters, for more details read the links in this answer).If you want to pass the argument using %1 instead of %* so that it includesthe whole --include="check|check2" (not only --include) then you could use additional quotes around the argument as @eryksun suggested in the comments:Notice: triple ^ to escape | here.
You should not use shell=True to run a bat file. Use it only if you have to run some built-in shell command. In other words the use your are making is useless and the only effect is to increase security vulnerability of your program.Also, note that the documentation clearly states that, when using shell=True it's recommended to pass the command line as a string:If shell is True, it is recommended to pass args as a string rather  than as a sequence.So you should do:The check_output function should be used if you only care for the output. It's way simper than creating a Popen object and then reading the output manually.See also my answer regarding how shell=True changes the meaning of the arguments.
Another way to get the output is subprocess.check_output():To view the process's output in real time, see: Getting realtime output using subprocess.Edit: here's code with Popen to handle double quotes:


Answer URL
https://docs.python.org/3/library/subprocess.html#frequently-used-arguments
https://docs.python.org/3/library/subprocess.html#subprocess.check_output
