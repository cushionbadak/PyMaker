Natural Text
I have a string variable res which I have derived from a pyodbc cursor as shown in the bottom.The table test has a single row with data ä whose unicode codepoint is u'\xe4'.The Result I get is Whereas the result I should have got is.I tried adding charset as utf-8 to my pyodbc connect string as shown below.The result was now correctly set as a unicode but the codepoint was for someother string ꓃ which could be due to a possible bug in the pyodbc driver.Actual codeAdditional detailsDatabase: Teradatapyodbc version: 2.7So How do I now either1) cast ('\xe4', <type 'str'>) to (u'\xe4', <type 'unicode'>) (is it possible to do this without unintentional side-effects?)2) resolve the pyodbc/unixodbc issue
This is something I think is best handled with Python, instead of fiddling with pyodbc.connect arguments and driver-specific connection string attributes.'\xe4' is a Latin-1 encoded string representing the unicode ä character.To explicitly decode the pyodbc result in Python 2.7:Python 3.x does this for you (the str type includes unicode characters):
For Python 3, try this:After conn = pyodbc.connect(DSN='datbase',ansi=True,autocommit=True) Place this:conn.setdecoding(pyodbc.SQL_CHAR, encoding='utf8')conn.setdecoding(pyodbc.SQL_WCHAR, encoding='utf8')conn.setencoding(encoding='utf8')orconn.setdecoding(pyodbc.SQL_CHAR, encoding='iso-8859-1')conn.setdecoding(pyodbc.SQL_WCHAR, encoding='iso-8859-1')conn.setencoding(encoding='iso-8859-1')etc...Python 2:cnxn.setdecoding(pyodbc.SQL_CHAR, encoding='utf-8')cnxn.setdecoding(pyodbc.SQL_WCHAR, encoding='utf-8')cnxn.setencoding(str, encoding='utf-8')cnxn.setencoding(unicode, encoding='utf-8')etc...cnxn.setdecoding(pyodbc.SQL_CHAR, encoding='encode-foo-bar')cnxn.setdecoding(pyodbc.SQL_WCHAR, encoding='encode-foo-bar')cnxn.setencoding(str, encoding='encode-foo-bar')cnxn.setencoding(unicode, encoding='encode-foo-bar')


Answer URL
https://docs.python.org/3/howto/unicode.html#the-string-type
