Natural Text
I have a dictionary in some code which maps a key to a word, the key is the result of an md5 hash.  I have code that essentially wants to get the key for a word, and when it doesn't already exist, add it to the dictionaryHere was my first implementation:After profiling my code I found this to be EXTREMELY slow.  So then I tried this, which is functionally equivalentThis turned out to be incredibly faster.  While I'm certainly happy about the performance improvement, I was wondering if someone could explain to me why.  Is it bad practice to check for something in a keys() function from a dictionary like that?  Is it generating copies of that every time (wasting a lot of computation)?
id_to_word.keys() creates a new list, which is linearly searched, which is much slower than a hash lookup. Remove the .keys().The fastest way would be:
key in some_dict is much faster than key in some_dict.keys() Dict Lookup key in some_dict is O(1) complexity so its very fastthat said its still (very marginally)slower in the case where the key is in the dict than just try/exceptthe real answer is there is no real measurable difference between these 2 methods and do whatever feels right to you
This is to be expected (in python2). The keys() method returns a list of keys. So using the in operator on the list takes linear time. Trying to access the item is constant time, which is much faster.Note: you can simply use key in dictionary instead of the try: ...except:.Note that dictionaries have a setdefault method that already does what you want. Moreover if you do that operation a lot of time you should consider using collections.defaultdict instead of a plain dictionary.
Elaborating on my comments above:as you can see, using d.keys() is about 100 times slower.
As mentioned setdefault() solves your problem without an if or try block.But "Easier to Ask for Forgiveness than Permission" [EAFP] and duck-typing is a common idiom in Python, compared to the more defensive "Look Before You Leap" [LBYL] idiom common in other languages, e.g. Java, C++.Jeff Knuth has an interesting blog post on it Write Clean Python: Use Exceptions


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.setdefault
https://docs.python.org/3/library/collections.html#collections.defaultdict
