Natural Text
I would like to listen in on some calls to 3rd party library methods. Notably, I'd like to attach some sort of feedback method on these methods I am listening to. For instance, whenever logging.info(msg, *args, **kwargs) is called, I'd like to have a separate method with same parameter list fired off as well.The closest I can find is the mock module's side_effect feature. But correct me if I am wrong, this feature will completely override the original behaviour of the function instead of tagging a function along.Is there a module out there that can suit my needs or do I have to unceremonously hijack the functions I need?Edit: Clarified title. 
Hijacking isn't too hard, using decorator style methods:With this, you can patch a class like (this would work for modules, etc. as well):You can hijack the A.f method like:Resulting in this:Producing:For logging:Produces:
Maybe “unceremonously”, but I think it does what you want…Unless you also want to listen to calls made by 3rd party libraries too, unfortunately.


Answer URL
https://docs.python.org/3/library/unittest.mock.html
