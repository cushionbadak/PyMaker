Natural Text
Consider example:And test function that tries to test func_a and mocks func_b:After func_a has executed I try to test if func_a made correct calls to func_b, but since in for loop I am mutating list in the end I get:
The following works (the importing mock from unittest is a Python 3 thing, and module is where func_a and func_b are):This inherits from MagicMock, and redefines the call behaviour to deepcopy the arguments and keyword arguments.You can pass the new class into patch using the new_callable parameter, however it cannot co-exist with autospec. Note that your function calls func_b with a list, so call(0), call(1) has to be changed to call([0]), call([1]). When run by calling test_a, this does nothing (passes).Now we cannot use both new_callable and autospec because new_callable is a generic factory but in our case is just a MagicMock override. But Autospeccing is a very cool mock's feature, we don't want lose it.What we need is replace MagicMock by ModifiedMagicMock just for our test: we want avoid to change MagicMock behavior for all tests... could be dangerous. We already have a tool to do it and it is patch, used with the new argument to replace the destination.In this case we use decorators to avoid too much indentation and make it more readable: Or:


Answer URL
https://docs.python.org/3/library/unittest.mock.html#autospeccing
