Natural Text
I have a key value pair that I want to export from the bash script which the following python is embedded in.Excerpt from bash script:Embedded python within above bash scriptI'm quite new to Python I will admit I've hashed this together after intense speed research, and it's all I am going to need it to do in my scripts. Send name value pairs to a socket as a json array. Also, will the name I give the JSON object in the python, sd in the example above, become the name of the JSON array? - I will want to give it a meaningful name in the final version.The error I'm getting is string not defined, which I think it means the string bash_output
I agree with @achampion, output_test seems to be mixed up with bash_output. A quick fix would probably be:You may also consider just not using environment variable this way:
You get NameError: name 'string' is not defined because, well, string is not defined. There's no Python builtin called string. os.environ["whatever"] already has type str, so you don't need any conversion.Of course that's not the only problem. You assigned the env var to bash_output but later try to use the variable name output_test. Presumably that's a typo, so you also have to change that.Everything corrected:Then I don't really know what your socket does (unless you provide more info), so you have to make sure that part is correct.
This is the final code I have which is working, using @user1556814 solution:My question, forgive me, is it safe? It's going to be sending packets of data, perhaps up to 30, between programmes on a local machine. They will almost identical as the above, so very small, simple json objects, likely every 10 seconds. Just the one bash script running each time and outputting the above from the command it has run (with some awk in there too).As I don't know the language very well, I hope I haven't missed any gotchas? This code really simplifies what I want to do, and if it works, well, I can deepen my python knowledge later, when I have more time and less panic :)


Answer URL
https://docs.python.org/3/library/functions.html
