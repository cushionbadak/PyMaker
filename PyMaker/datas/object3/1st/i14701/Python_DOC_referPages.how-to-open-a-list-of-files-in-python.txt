Natural Text
I'm reading  data file (text), and generating a number of reports, each one is written to a different output file (also text).  I'm opening them the long way:fP = open('file1','w')invP = open('inventory','w')orderP = open('orders','w')... and so on, with a corresponding group of close() lines at the end.If I could open them with a for loop, using a list of fP names and file names, I could guarantee closing the same files.I tried using a dictionary of fp:filename, but that [obviously] didn't work, because either the fP variable is undefined, or a string 'fP' isn't a good file object name.Since these are output files, I probably don't need to check for open errors - if I can't open one or more, I can't go on anyway.Is there any way to open a group of files (not more than 10 or so) from a list of names, in a loop?
Yes, you can use a list comprehension:Now, all of the opened instances are saved in filedata, assigned to the name of the file.To close them:
Good news! Python 3.3 brings in a standard safe way to do this: contextlib.ExitStackFrom the docs:Each instance maintains a stack of registered callbacks that are called in reverse order when the instance is closed.  (...)  Since registered callbacks are invoked in the reverse order of registration, this ends up behaving as if multiple nested with statements had been used with the registered set of callbacks.Here's an example how to use it:When the code leaves the with statement, all files that have already been opened will be closed.This way you also know that if 2 files get opened and then third file fails to open, the two already-opened files will be closed correctly. Also if an exception is raised anytime inside the with block, you'll see correct cleanup.
Since you are saying there are many data files.Instead of entering filenames manually into a list.You can get the filenames into a list with this.Now you can 
Use the with keyword to guarantee that opened files (and other similar resources, known as "context managers") are closed:Upon exiting the with block, the file will be properly closed -- even if an exception occurs.You could easily loop over a list of paths to the desired files:
You can open as many files as you want and keep them in a list to close them later:Or you could use a dictionary for better readability:
Both answers above are good if you know or define ahead of time the list of files you will want to create. But, in case you want a more generic solution, you can build that list just in time, use your OS to create empty files on disk (this is done different ways depending on the OS you are), then create the list of files interactively this way:It is ok to use "with"; as some suggest, if you work with only one file at the time (from start to finish), but if you want to work with all the files at the same time, it is better a list or dictionary of file descriptors.


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack
