Natural Text
I've been searching for hours, and I can't seem to find an answer that goes deep enough; Everyone stops at, eg, a list inside a list.  When I try to extrapolate what I think I need, I get an error that says "TypeError: 'int' object is not subscriptable".  I'm very much a noob, so if you could explain what I'm doing wrong, and how to fix it I would very much appreciate it.So...  I have 5 items I want to place on a grid, without them overlapping.  For each item I create a list of tuples that represent the coordinates the item will cover.  For each of those lists, I want to compare all the coordinates to the coordinates of all the other items I have placed.  If any coordinate is duplicated, I toss out the list and generate a new one.  Otherwise I add the new list to the "master" list.  So, I end up with a list of lists of tuples, like so:I then generate another list, like this:The question is, how do I compare the two and make sure none of the tuples match?  This is where I'm at, but it doesn't seem to be working. (check() is the function that creates the list of tuples)
Your checkC is a list of tuples—not a list of lists of tuples, as you claim: So, when you do for i in checkC:, each i is just a tuple, like (15, 12).So, i[1] is perfectly valid—it's the second element of (15, 12), which is 12. But i[1][1] is not—it's be the second element of the second element of (15, 12), which is the second element of 12, which is meaningless, because 12 is an int and has no elements. Hence the error.But I don't know why you're trying to index i at all. You want to look up the tuple (15, 12), as a single value; you don't want to look up 15 and 12 separately. So just use i, not i[anything].That will get rid of your actual error, because if i in userCoords is legal—but it's still useless. There's no way that a tuple like (15, 12) can be in usedCoords, because usedCoords only holds lists of tuples, not tuples.What you want to ask is whether i is in any of the sublists that are in usedCoords:If you don't understand the any function and generator expressions or other comprehensions, you should read through the official tutorial, starting with Iterators; it explains it much nicer than any spur-of-the-moment StackOverflow answer can. But until then, you can always write the loop and check explicitly instead:Meanwhile, your loop has a problem as well. For each member of checkC, you set tf to True if it's found, False if it's not. So, at the end of the loop, tf will only tell you whether the last member was found. If you want to know whether any of the members are found, you can't keep resetting tf = False; once it's True, it has to stay True forever. So, the whole thing becomes:Which can be simplified to:And, even further, to:
Just check if any of your coords exist in the other list, like this:True here means that at least one match. In your sample data, the last list in usedCoords contains tuples from checkC.
Didn't get what you are trying to achieve.I think thisshould become this 


Answer URL
https://docs.python.org/3/tutorial/classes.html#iterators
