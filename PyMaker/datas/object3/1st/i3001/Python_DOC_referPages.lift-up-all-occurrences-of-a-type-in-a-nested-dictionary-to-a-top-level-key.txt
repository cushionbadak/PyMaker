Natural Text
I have a need in a project to find all of a given type in a nested dictionary and move them all to a top level key in the same dictionary. So far I have the below code, which seems to work. In the example I'm looking for all the items that are integers and moving them to a 'numbers' key.I'd prefer it if the lift_numbers_to_top function made and returned a copy of the dictionary rather than editing it in place, but I haven't been able to work out a nice way to pass the copy and the numbers back from the recursive function to itself, if that makes sense. Result:
Use a match function to determine what to lift, and pass along the target object where you move key-value pairs to to recursive calls. If that target is missing, you know the current call is for the top-level. The match function should return the new key for the new dictionary.To produce a new dictionary, just produce a new dictionary and put recursion results into that object.I prefer to use @singledispatch() to handle different types when recursing:I included a dispatch function for lists; your sample doesn't use lists, but these are common in JSON data structures so I anticipate you probably want it anyway.The match function must accept two arguments, the path to the object this key-value pair was found in, and the value. It should return a new key to use or None if not to lift the value. For your case, the match function would be:Demo on your sample input dictionary:Personally, I'd use the full path as the key in the lifted dictionary to avoid name clashes; either by joining the full path into a new string key with some unique delimiter, or just by making the path tuple itself the new key:
You can use walk through the dict recursively and pop all elements with values as an int to create a new dict


Answer URL
https://docs.python.org/3/library/functools.html#functools.singledispatch
