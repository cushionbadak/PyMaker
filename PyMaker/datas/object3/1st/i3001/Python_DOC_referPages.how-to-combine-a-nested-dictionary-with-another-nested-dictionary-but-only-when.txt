Natural Text
The best way I can describe what I'd like to achieve is by referring to how the SQL function INNER JOIN works for displaying data from two tables, determined by a matching column name.I'd like to achieve a similar function, though by using Python (preferably 3.x), and instead of tables with a matching column name, I'd like to combine the entirety of two dictionaries together, based on a matching {k: v} pair.For example...I'd like to find a way to merge the dictionaries from each list, but only where a matching {Key: Value} pair is found. The result would look like this...I've managed to find a way to merge the dictionaries using dict.update and zip(), though that's only when dealing with two independent dictionaries and it still wasn't quite right. I appreciate any advice and thank you in advance.
In Python 3.5+ we can get away with the following, ignoring problems from additional key clashes.The {**a, **b} is a neat way to unpack the two dictionaries being considered into a combined dictionary (I believe on a clash it uses the value from b instead of a). This is the only step that requires 3.5+. In Python 2.x with string keys a similar construct is dict(a, **b), though Guido frowns on it heavily. Other options are more verbose.Python list comprehensions allow you to easily iterate through what is effectively the cartesian product of lst_1 and lst_2 by using for twice.We only care about dictionaries with the same 'Name', hence the a[k]==b[k] bit.If you are allowed to clobber any of the dictionaries in lst_1 or lst_2, approaches involving dict.update() are probably faster. They might be anyway, though the syntax isn't as nice I don't think.
you can do something like this:
You can create a function to filter one list on the duplicate names, transfer the dicts over in a result list and update them there:Function:Output:
This is similar to left join in RDMS like MySQL and the $lookup(aggregation) function of MongoDB. You can look into them for further clarification.


Answer URL
https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset
