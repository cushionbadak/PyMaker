Natural Text
I'm pretty new to django and came across something that confuses me in this views.py file I've created. I just played around with it a little and came up with something that works, but I don't get why it does.The class Draft_Order (which I have in another file) requests the NBA stats page, performs some calculations on the backend, and spits out draft lottery odds (for the new draft). The methods initialize, sim draft, and get standings all do things on the backend (which works perfectly).Now, my question is that I don't get why I can create an instance "f" of the class DraftOrder outside all of the functions, but yet still be able to reference it within most of my functions as they are getting called from my urls.py file, so it doesnt seem like they should be working at all. Also, for some reason, the update function can only reference "f" if I don't have an assignment to f in the function-e.g. if I add the line Then all of a sudden it gives me an "unboundlocalerror", and says that f is referenced before assignment.I'd appreciate any help on this. Thanks.
UnboundLocalError happens because presence of an assignment to f inside a function shadows the global f for the whole function. You need to explicitly state that f refers to the global variable:But really, you shouldn't rely on global values stored in RAM, because in production environment you'll have several processes with probably different fs and you won't be able to control time of life of the said processes. Better to rely on a persistent memory here (DBs, key-value stores, files, etc).
You need to look into python namespaces and scopeBut here is how i like to think of it to avoid going crazy(everything in python is an object).In simple terms python those .py files are modules, when python is running those modules are converted into objects, so you have a urls object, a views object ,etc.so any variable you define on module level turns into an attribute and any function defined turns into a method.I believe you do something like this on your url.pyorwhich basically means get the views object which represent the views.py file.From the views object you are able to access your methods like update.Your update method is able to access the f because here's an excerpt from python namespaces and scopethe global scope of a function defined in a module is that moduleâ€™s namespace, no matter from where or by what alias the function is called. Basically your f is an attribute of the views object meaning any methods within views object can access it. Reason why it works when on urls.py its because methods can access the attributes of objects the are defined in, so since update method is define inside views its able to access views attributes.Please read more on python namespaces and scope this a very simplified explanation.


Answer URL
https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces
https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces
https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces
