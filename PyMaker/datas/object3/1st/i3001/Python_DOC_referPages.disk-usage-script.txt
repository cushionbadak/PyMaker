Natural Text
Somewhere things stopped working.  The intent was to show current disk usage if no argument given, show the directory's usage if provided as an argument, and show all subdirectories' disk usage if an argument called --all was given.  Here is what I got so far. For some reason it fails now when supplying the "-d" for directory.
I see a couple of problems with your usage of getopt. One (which sounds like you've figured-out for yourself) is that you're giving the wrong thing to get_size() by passing it start_path=sys.argv[1:] which assign start_path to a list of all the command arguments after the first.The second issue is you're not defining the second and third arguments passed to getopt() properly. Quoting from the PyMOTW3:The second argument is the option definition string for single character options. If one of the options requires an argument, its letter is followed by a colon. (emphasis mine)This means that in order to accept a value along with the -d option, you'd need to use "ad:hnv" instead of the "adhnv" you've got. Similarly, for the --directory option in the list of long-style options:The third argument, if used, should be a sequence of the long-style option names. Long style options can be more than a single character, such as --noarg or --witharg. The option names in the sequence should not include the “--” prefix. If any long option requires an argument, its name should have a suffix of “=”.To support it there too requires you to pass ["all", "directory=", "help", "ncdu", "version"].Unfortunately getopt doesn't support having an optional option argument. The reason is likely because it makes parsing ambiguous: For example, if -a takes an optional argument and -b is another option entirely, it unclear how interpret -ab.If you can live with that limitation, the following incorporates changes to address the above issues:
I think I got it now.  Line 42 included sys.argv[1:] which returned a list.  It should actually be sys.argv[2] to reference the directory after supplying the -d option.
There are two problems here.The first problem is that you're using getopt wrong:This returns a list of options opts, and a list of args with the options filtered out. But you're continuing to use sys.argv instead of args:In an invocation like myprogram -d spam, sys.argv[1:] is going to be ['-d', 'spam']. But you don't want the -d. That's the whole reason you called getopts in the first place. So, use args here, not sys.argv.The second problem is that you're taking a slice, sys.argv[1:], but treating it as if it were a single value, rather than a list of values.If you want to allow multiple directories to be passed with -d and to work on all of them, you need a for arg in …: loop over the slice.If you want just a single directory, then you need to just index the list, like [1], not [1:]. Although, if you want that, you probably don't want -d to be a boolean flag and the directory to be an arg; you want -d to be a flag with the directory as its value.More generally, you probably shouldn't be using getopt here in the first place. As the docs say:Note The getopt module is a parser for command line options whose API is designed to be familiar to users of the C getopt() function. Users who are unfamiliar with the C getopt() function or who would like to write less code and get better help and error messages should consider using the argparse module instead.If you're a getopt wizard, then sure, use getopt for simple projects instead of learning something new, even if it's better. But for anyone else, there is really no good reason to learn getopt in the first place, much less to learn how to debug all the funky corners of it. argparse is just plain better in every way. And if you don't like argparse, there are half a dozen alternatives on PyPI.


Answer URL
https://docs.python.org/3/library/getopt.html
https://docs.python.org/3/library/argparse.html#module-argparse
