Natural Text
Currently we have a Python library that looks something like:Ganymede.py in turn contains functions Foo(), Bar(), and so forth. Our existing scripts use these functions via I would like to reorganize things so that the directory looks more likewithout breaking or modifying any existing scripts that use Jupiter. If Ganymede/__init__.py uses the import syntax described in "The import system" documentation:then Foo() and Bar() end up in Ganymede's namespace, but the help() for Ganymede doesn't mention them.I would really, really like help(Ganymede) to automatically list all the available functions and classes.I suppose I could execfile("functions.py") from Ganymede/__init__.py but I feel like there must be some cleaner way to do this. Or is there not?I need something that works in both Python 2.7.15 and 3.5.3. 
Create an __all__ in __init__.py.If you've already got an __all__ in functions.py, you can just import it:If you're merging multiple modules together, you have to get a bit more verboseOr, of course, you can always be explicit:Or, if you want to build it dynamically:… or (pretty hacky—but sometimes useful if you have a __init__.py that gathers names from a lot of submodules and does nothing else) …… or you can get really clever and do things the way, e.g., multiprocessing does:1Keep in mind that __all__ will also affect what happens when someone does a from Ganymede import * (in fact, that's the main purpose of __all__), and what inspect and other tools report as the public members of your package.I'm not sure the behavior of help in the absence of __all__ is documented anywhere (interactive help works is only lightly documented in general…), and it's not quite the same as what import considers public.1. Well, multiprocessing is actually a lot more clever/hacky; it's pulling the attributes not out of a submodule, but out of a dynamic singleton attribute of that submodule that gets set differently on the main vs. child processes, and changes some of the top-level functions of the package accordingly…


Answer URL
https://docs.python.org/3/reference/import.html#submodules
https://docs.python.org/3/tutorial/modules.html?highlight=__all__#importing-from-a-package
