Natural Text
In my Python application, I have a function that consumes message from Amazon SQS FIFO queue.In order to scale up, I am using multi threading to process messages. The application runs as service. If I need to deploy new release, it has to be restarted. Is there a way have the threads exist gracefully when main process is being terminated? In stead of killing the threads abruptly, they finish with current message first and stop receiving the next messages. 
Since your threads keep looping, you cannot just join them, but you need to signal them it's time to break out of the loop too in order to be able to do that. This docs hint might be useful:Daemon threads are abruptly stopped at shutdown. Their resources (such as open files, database transactions, etc.) may not be released properly. If you want your threads to stop gracefully, make them non-daemonic and use a suitable signalling mechanism such as an Event.With that, I've put the following example together, which can hopefully help a bit:A single event instance is passed to fce which would just keep running endlessly, but when done with each iteration, before going back to the top check, if the event has been set to True. And before exiting from the script, we set this event to True from the controlling thread. Since the threads are no longer marked as daemon threads, we do not have to explicitly join them.Depending on how exactly you want to shutdown your script, you will need to handle the incoming signal (SIGTERM perhaps) or KeyboardInterrupt exception for SIGINT. And perform your clean-up before exiting, the mechanics of which remain the same. Apart from not letting python just stop execution right away, you need to let your threads know they should not re-enter the loop and wait for them to be joined.The SIGINT is a bit simpler, because it's exposed as a python exception and you could do for instance this for the "main" bit:You can of course send SIGINT to a process with kill and not only from the controlling terminal.


Answer URL
https://docs.python.org/3/library/threading.html#thread-objects
https://docs.python.org/3/library/threading.html#threading.Event
