Natural Text
Usually super works like the following in Python:But recently I found something like the following also works? No crash, behaviors as expected:How come? What does the second case mean?
super(MyParentClass, self).__init__() Will call grandparent class  (If it has one)
Actually, the behaviour it's not the same.From the documentation of super() (docs here):Return a proxy object that delegates method calls to a parent or  sibling class of type.So if you have:The call:has no effect, because MyParentClass has no parents but object.If you call:It will print:Because SubClass has one parent, MyParentClass.
The documentation for super says (in part):super([type[, object-or-type]])Return a proxy object that delegates method calls to a parent or  sibling class of type. This is useful for accessing inherited methods  that have been overridden in a class. The search order is same as that  used by getattr() except that the type itself is skipped. So super(MyParentClass, self) resolves to a proxy object that will pass method calls through to the parents and siblings of MyParentClass.  It shouldn't be surprising that this works.  If your parent class is Then when you make a SubClass object, the self in the MyParentClass super call is a SubClass instance.


Answer URL
https://docs.python.org/3/library/functions.html#super
https://docs.python.org/3/library/functions.html#super
