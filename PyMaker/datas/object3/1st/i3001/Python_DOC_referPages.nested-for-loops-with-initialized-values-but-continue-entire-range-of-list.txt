Natural Text
I am trying to continue my nested for loop at some value after the process has begun. But after starting run the entire range of values for the remainder of the state space. Let's look at my example:I tried setting values prior to for loops, however the for loop just rewrites them. I also tried the range() below, however that prevents it for everything. Is there any method to initialize nested loops at a certain iteration but maintain the range of the space??My eternal gratitude, show me your genius...
If I understand what you're looking for, you could modify your code like this:That's pretty ugly, but it will work: the inner loop will cover only part of the list2 the first time, but all of list2 from then on.You could wrap things up as a function that takes four lists and four start values, or a function that takes N lists and N start values, or, better, a function that takes N lists and a single overall start value and does the divmod to calculate the N start values.However, it seems like there' a much simpler solution. Instead of doing the divmod arithmetic, just combine the whole iteration into a single loop with itertools.product:… or maybe:… or, better, loop over the lists themselves rather than their indices:That last change doesn't work for your existing code, because you seem to want to print out the indices rather than the list members… but usually if you're using a list for iteration you want the actual list members.Either way, you can skip over the first 500 just by islice:
Since you already have a counter to keep track of your iterations, you can just use it to skip the same number of iterations until the counter reaches the previous state, while maintaining the same ranges:
I introduced some tasteful style edits along the way...Basically if I understand your question correctly...you just need the start of the range to be a variable that you can set....I'm not sure how you are executing this...but you can populate those start_ variables to kick off your run.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
https://docs.python.org/3/library/itertools.html#itertools.islice
