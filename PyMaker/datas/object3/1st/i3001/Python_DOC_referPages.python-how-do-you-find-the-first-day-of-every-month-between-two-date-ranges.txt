Natural Text
I wrote some code to create a list of the first day of the month for every day between two date ranges. Can you think of a better way to do this? 
The calendar module provides you with the monthrange method, which makes it easy and efficient to do this with timedelta objectsWhich gives you the following list of firsts:
It would be easier to use dateutil modules rrule submodule for any kind of recurrence of date/time. You can install it by doing pip install python-dateutil
It's much easier to reason about month-arithmetic if you convert the year and month to a single number, with years * 12 + (month - 1); this can be converted back to a year and month pair by a floor division and modulus operation. For example, 2017-10 (October) is 24213 months since the year zero:You can trivially add to or remove a number of months from that figure. You can get the year out again by floor division, and the month is found with % modulus and adding back 1:With this in mind, you can then use a range() to generate any number of months:The above is a generator function that yields consecutive months; call list() on it if you need to have the complete sequence:Note that at no point do you need to convert dates to strings! You can trivially get the month value from the instance by using the .month attribute.To make a comparison, I've converted the other two solutions to be generators too:That way their performance can be compared fairly, and we can use a deque(..., maxlen=0) trick to quickly consume their output without requiring huge amounts of memory. We can then run each of the functions over the range date.min through to date.max, the maximum possible range of dates; that's nearly 120 thousand date objects to produce:These are the results:As you can see, my approach is orders of magnitude faster.Andray's approach wastes a huge amount of time creating every date in the calendar, adding one day at a time. The rrule approach Sunitha picked is nice and concise, but the function has to account for much more complex date arithmetic, and so this very simple case is not optimised. This makes rrule() slow!Matthew is a lot more efficient, but the calculations that calendar.monthrange() executes are still overkill for a simple plus-one operation on a year-month combination. We don't need to know if the current month has 31, 30, 29 or 28 days to make this calculation!
The datetime class support arithmetic operations (you can do +, -, etc.). If you combine it with timedelta, you can get all days between start_date and end_date. Then searching for first day of month is easy:Prints:


Answer URL
https://docs.python.org/3/library/datetime.html#timedelta-objects
