Natural Text
It is probably the wrong title, but here is my problem.I have a system comprised of a microcontroller (MCU), a serial interface (SPI), a DAC (Digital / Analog converter), an electrode (E). Each element is defined as a class in my python modelization.As a first step, I want to monitor the output on the electrode as I input something in the microcontroller.Let's consider the following:Input: 2 mA on the electrode during 1 ms.MCU send the new DAC value via the SPI: 30 usDAC updates its register and output: 400 usMCU send a switch on command to the electrode: 1 usThe electrode is now outputting.1 ms later, send a switch off command to the electrode: 1usThe electrode doesn't output anymore.My 2 biggest issues are 1. How to take into account this time component and 2. How to monitor the SPI line to determine if something has to be done.My system actually has 16 DACs and electrodes and a field-programmable gate array which are all listening to the same SPI. What I described above is a fairly simplified version.Question is: How to have the components check the value in SPI.msg regularly and act accordingly?In reality, each component is doing its life. Thus actions are performed in parallel. Since I'm trying to simulate the timeline and the action performed, I do not mind doing everything serially with a timeline variable (attribute) for each element. I just have issues to figure out how to have my classes interact together.i.e. I can't do the following in python or I will get stuck:Maybe an event triggering could be used... But I don't know how.Maybe with multithreading, defining one thread / element? EDIT: Current state:
I'm assuming you want to keep it single-threaded and you don't use asyncio. In this case, you might want to employ observer or pub/sub pattern when implementing the SPI:So you can use it like this:I haven't done anything to be able to send SPI messages from Device objects, but you can update the abstraction accordingly.
You could move the while loop simply outside:As stated in your comment you want more a timeline view on what is happening. You can have an explicit timeline with which your components interact. External input (state changes) can be set beforehand in the same manner. To order the timemline I'll just run sort each time but it would probably be more performant to use something like a priority queue.This mainly differs from Vovanrock2002 answer by not recursing in each timestep and having an explicit timeline. This way you have an explicit timeline (which you could also "record", just add each popped event to some list) and you can have arbitrarily connected components (e.g. if you want to have multiple SPIs).


Answer URL
https://docs.python.org/3/library/heapq.html#priority-queue-implementation-notes
