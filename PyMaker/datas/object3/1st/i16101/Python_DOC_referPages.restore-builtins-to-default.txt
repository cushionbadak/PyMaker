Natural Text
If I code a mistake and I do something like this:and before I didn't code import builtins is there a way to restore __builtins__ to its default value?
Congratulations, you managed to muck up your namespace good and proper! There is no easy escape from this mess, no. You can grab the name from any Python module you perhaps have imported, or from an imported Python function:orThe function has to be one you imported from elsewhere, so that the __globals__ reference points to a different namespace that still has a reference to the __builtins__ mapping.One name that I found will almost always work is the __loader__ reference in modules; it is an object with methods that will still give you access a module globals object:Otherwise, restart your Python session, and start again.
Let's assume even a worse case than the described situation: you completely ruin, nuke, destroy, annihilate and wipe out __builtins__:@Matrtijn's method will fail since every module will have the very same builtins instance. First, we will have to restore the basic types:According to python docs, __mro__ attribute: is a tuple of classes that are considered when looking for base classes during method resolution. Since every python modern class extends object, it allows us to gain instance of the object type.Second, We will implement a class lookup. Given a class name we will return the class' type. For that we will use type.__subclasses__() recursively (See this question for more information about that):Third, We'll extract the already loaded modules using BuiltinImporter:We take advantage of the fact that BuiltinImporter imports sys module and then we use sys.modules: a dictionary that maps module names to modules which have already been loaded.Then, We will patch __builtins__ with the required methods and classes for the next step:And now, for the magic to happen!We generate the __spec__ to the builtins module using builtinImporter.load_module. Then, we load the module from the generated spec. AND IT WORKS! (I don't really know why, but it indeed works)However, the freshly generated builtins module misses the method open and all of the exceptions. We will have to add them manually to get import working again:


Answer URL
https://docs.python.org/3/library/stdtypes.html#class.__mro__
https://docs.python.org/3/library/stdtypes.html#class.__subclasses__
https://docs.python.org/3/library/importlib.html#importlib.machinery.BuiltinImporter
https://docs.python.org/3/library/sys.html#sys.modules
https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module
