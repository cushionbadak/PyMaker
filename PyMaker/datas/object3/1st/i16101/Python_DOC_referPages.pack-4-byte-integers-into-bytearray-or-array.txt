Natural Text
I can't seem to find out how to do this, so it may not be that simple after all. I looked this post, this one, and many others, but I can't get the type of answer I'm looking for. Most of the posts I read use the struct.pack or struct.pack_into, but the problem is that I don't really know a priory the size of the array I need, and I wouldn't like to create one to store temporarily the integer values. So I thought that I could use the bytearray instead, but I don't know how to add 4-byte integers to it.So the byte array doesn't contain 4-byte integers (which is what I need). So then I would have to use some sort of padding with zeros in order to get 4-byte integers? Is there a function that I can use to convert the integer passed to append to the type of integer I want?
Use the array type to store fixed-sized binary data, where the number of values is variable:What C type you pick depends on your system architecture; you may have to pick one based on the array.itemsize attribute; on my 64-bit Mac I uses 4 bytes to store an unsigned integer:The byte order is also machine dependent; if you need to have big-endian bytes, but your machine uses a little-endian architecture, use array.byteswap() to swap the order before converting to bytes:
Is this what you want?For more info on the struct packing codes, see https://docs.python.org/3.4/library/struct.html. My code uses i for int, and < for little-endian.


Answer URL
https://docs.python.org/3/library/array.html
https://docs.python.org/3/library/array.html#array.array.byteswap
