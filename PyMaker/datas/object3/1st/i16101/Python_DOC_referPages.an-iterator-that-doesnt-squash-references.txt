Natural Text
I want a for loop in Python that can modify variables in the iterator, not just handle the value of the variables. As a trivial example, the following clearly does not do what I want because b is still a string at the end.(Result is "b is a <class 'str'>")What is a good design pattern for "make changes to each variable in a long list of variables"?
Short answer: you can't do that.Variables in Python are only tags that references values. Theres is not such thing as "tags on tags". When you write x = int(x) if the above code, you only change what x points to. Not the pointed value.What is a good design pattern for "make changes to each variable in a long list of variables"?I'm not sure to really understand, but if you want to do things like that, maybe you should store your values not as individual variables, but as value in a dictionary, or as instance variables of an object.Now if you're in the hackish mood:As your variables are globals they are in fact stored as entries in a dictionary (accessible through the globals() function). So you could change them:But, as of myself, I wouldn't call that "good design pattern"...
As mentioned in another answer, there's no way to update a variable indirectly. The best you can do is assign it explicitly with unpacking:
If you have an actual list of variables (as opposed to a number of individual variables you want to modify), then a list comprehension will do what you want:If you want to do more complicated processing, you can define a function and use that in the list comprehension:


Answer URL
https://docs.python.org/3/library/functions.html#locals
