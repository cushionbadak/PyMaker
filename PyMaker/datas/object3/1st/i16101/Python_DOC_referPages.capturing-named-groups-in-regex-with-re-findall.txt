Natural Text
When I was trying to answer this question: regex to split %ages and values in python I noticed that I had to re-order the groups from the result of findall. For example:Here the result of the findall is:Is there a way to change/specify the order of the groups that makes re.findall return:Just to clarify, the question is: Is it possible to specfic the order or re-order the groups for the return of the re.findall function? I used the example above to create a dictionary to provide a reason/use case for when you would want to change the order (making key as value and value as key)Further clarification:In order to handle groups in larger more complicated regexes, you can name groups, but those names are only accessible when you do a re.search pr re.match. From what I have read, findall has a fixed indices for groups returned in the tuple, The question is anyone know how those indices could be modified. This would help make handling of groups easier and intuitive.
Take 3, based on a further clarification of the OP's intent in this comment.Ashwin is correct that findall does not preserve named capture groups (e.g. (?P<name>regex)). finditer to the rescue! It returns the individual match objects one-by-one. Simple example:
Per the OP's comment on my first answer: If you are simply trying to reorder a list of 2-tuples like this:... to look like this, with individual elements reversed:There's an easy solution: use a list comprehension with the slicing syntax sequence[::-1] to reverse the order of the elements of the individual tuples:
As you've identified in your second example, re.findall returns the groups in the original order.The problem is that the standard Python dict type does not preserve the order of keys in any way. Here's the manual for Python 2.x, which makes it explicit, but it's still true in Python 3.x: https://docs.python.org/2/library/stdtypes.html#dict.itemsWhat you should use instead is collections.OrderedDict:Notice that you must use the pairwise constructor form (dict((k,v) for k,v in ...) rather than the dict comprehension constructor ({k:v for k,v in ...}). That's because the latter constructs instances of dicttype, which cannot be converted to OrderedDict without losing the order of the keys... which is of course what you are trying to preserve in the first place.


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
