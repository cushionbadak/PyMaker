Natural Text
Implementation of bytes.join method, implemented here includes code that protects from size changes during iteration:How is it possible to modify an iterable sequence inside bytes.join call and why the above code is necessary? Or maybe it's not necessary and redundant?
If you pass in a list object to bytes.join(), you could potentially add elements to the the list in another thread while the bytes.join() call is iterating.The bytes.join() method has to make two passes over the sequence; once to calculate the total length of the bytes objects contained, a second time to then build the actual output bytes object. Changing the number of items while iterating over it would put a spanner in that calculation.You normally couldn't do this to the list as the GIL is not released, but if any of the objects in the list are not bytes objects the buffer protocol is used instead. As the a comment on the original patch states:The problem with your approach is that the sequence could be mutated while another thread is running (_getbuffer() may release the GIL). Then the pre-computed size gets wrong.


Answer URL
https://docs.python.org/3/c-api/buffer.html
