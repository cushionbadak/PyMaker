Natural Text
This question already has an answer here:Breadth-first version of itertools.chain()                    2 answers                If I do:I get a ordered list from 0 to 19.Without change the input of the range functions, is there an easy way to specify that I want a list that goes: 0,10,1,11,2,12...Basically I first want the first element of every generator. Than I want the second element of every generator and then the third and so on.Bonus points:Is there a way to change it so that when the generators produce an unequal amount of results, the second generator yields the rest of it's results after the first one is finished?
You are trying to zip() your iterators; do so explicitly:The use of itertools.chain.from_iterable() lets you continue to use yield from here, flattening out the tuples zip() produces.Demo:If you have generators of different lengths, you could use itertools.zip_longest():I used a different flattening technique here with a double loop in a generator expression.This all does get tedious, and since you are not using yield from with another generator (so you don't need support for generator.send() and generator.throw() to be propagated), you may as well just make this a proper loop:You can also use the roundrobin() recipe listed in the itertools documentation recipies section:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
