Natural Text
For unit testing, I want to mock a variable inside a function, such as:I my unit test, I don't want to be dependent on what get_complex_data_structure() would return, and therefore want to set the value of foo manually.How do I accomplish this? Is this the place for @patch.object?
Just use @patch() to mock out get_complex_data_structure():When the test function then calls get_complex_data_structure() a mock object is returned and stored in the local name foo; the very same object that mocked_function.return_value references in the above test; you can use that value to test if do_work() got passed the right object, for example.
Assuming that get_complex_data_structure is a function1, you can just patch it using any of the various mock.patch utilities:they can be used as decorators or context managers or explicitly started and stopped using the start and stop methods.21If it's not a function, you can always factor that code out into a simple utility function which returns the complex data-structure2There are a million ways to use mocks -- It pays to read the docs to figure out all the ways that you can set the return value, etc.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#patch
https://docs.python.org/3/library/unittest.mock.html#the-patchers
