Natural Text
Given the following test:With Python 2.7 and 3.4 (Debian 8/testing/jessie) I get the following numbers:Map improved significantly with Python 3, the list comprehension suffered badly.Question: When porting code from Python 2 to Python 3, is it recommended to change list comprehensions to map()?
You are not testing correctly. In Python 3, map() returns an iterator, not a list. You are not actually iterating in your test, only testing the creation of the iterator.You'll need to include iteration to see which approach is faster; you could use collections.deque() with a length of 0, this will iterate without producing a new list object:By applying the deque() to both you even out the score again.Now list comprehensions win on both platforms:You should really use far larger input lists to properly test the differences; too much oThe reason list comprehensions slowed down on Python 3 is because they got their own proper scope, just like generator expressions and dict and set comprehensions do on both Python 2 and 3.If your map function is entirely implemented in C (as opposed to a lambda, which pushes back to Python, map() could win:Here the methodcaller() object avoids calling back into Python code by calling the str.__add__ method for each object used.


Answer URL
https://docs.python.org/3/library/operator.html#operator.methodcaller
