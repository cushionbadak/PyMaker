Natural Text
This works:This sort of works:However:How do you make .format() to print "True" or "False" for bool?
Well, first:How do you make .format() to print "True" or "False" for bool?Just don't specify anything. The default formatting for bool values already gives you 'True' or 'False'. And the same is true for %-formatting:The __format__, __str__, and __repr__ for bool all return the same thing—in 2.x, the __unicode__ returns a Unicode version of the same thing too, of course. Which also means:But more generally, if you did need the %r, how would you do that with format?Well, there is no such format spec code (the thing that comes after the :) as r, but there's a conversion modifier flag r (the thing that after the ! separator, and before the :, if present). So:The docs for Format String Syntax explain in more detail:The conversion field causes a type coercion before formatting. Normally, the job of formatting a value is done by the __format__() method of the value itself. However, in some cases it is desirable to force a type to be formatted as a string, overriding its own definition of formatting. By converting the value to a string before calling __format__(), the normal formatting logic is bypassed.Three conversion flags are currently supported: '!s' which calls str() on the value, '!r' which calls repr() and '!a' which calls ascii().Note that this also means that the basic '{0}'.format(1==2) is not actually doing the same thing as '%s' % (1=2,), because it's calling __format__ rather than __str__.More generally, while many of the format spec codes match format conversion type codes for %-formatting, it's not an exact match. Besides splitting the idea of "conversion type" into two separate things, there are also codes that do subtly or radically different things—most obviously, '%%' means "This isn't a format code, it's a literal %", while ':%' means "Print this as a percentage". When it isn't obvious, the docs are always clear.
Like this (python2.7+):Or, if you want to specify the position (or are forced to be compatible with python2.6):You can even use keywords as normal:


Answer URL
https://docs.python.org/3/library/string.html#format-string-syntax
