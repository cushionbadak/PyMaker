Natural Text
I am writing a program that should log the offset of the machine's local time from UTC at regular intervals, if it has changed.I am aware that it is possible to find the offset at the time the program was started. This can be done by oror other methods.The problem is that the time returned by datetime.datetime.now() seems to always be in the timezone at which datetime was first imported, rather than the current timezone. That is, changing the local time on my machine is not reflected by the same change in the time given by datetime.datetime.now() .As an example, reports '2014-09-11 12:35:45.415104'.I now change my timezone to UTC+4 on the machine.still reports '2014-09-11 12:35:50.407779'.How can I obtain the current time on my machine using python (preferably without external libraries and in a platform-agnostic manner)?I am using Python 3.4.1 on Windows 8.
Try using time.tzname (import time first of course).If that doesn't work, you will need to call this Windows API function: GetTimeZoneInformation().  It's exposed by Python for Windows Extensions, or perhaps you can invoke it via ctypes.
The problem is that the time returned by datetime.datetime.now() seems  to always be in the timezone at which datetime was first imported,  rather than the current timezone.Technically, the time is undefined since tzinfo is None. Or as the python documentation calls it, "naive":An object of type time or datetime may be naive or aware. A datetime  object d is aware if d.tzinfo is not None and d.tzinfo.utcoffset(d)  does not return None. If d.tzinfo is None, or if d.tzinfo is not None  but d.tzinfo.utcoffset(d) returns None, d is naive.Naturally, if you want now to reflect a timezone, you need to pass a timezone to it.The local timezone information can be retrieved from time.localtime, time.timezone, and time.altzone. altzone is the Daylight Saving version of the local time zone, and you can determine whether this is currently being used when the tm_isdst attribute of the local time is 1:The value returned is the UTC offset in seconds. So, to get a current datetime, you can build a timedelta from this and subtract it from utcnow:However, for your purposes, it seems all you need to do is monitor the result of local_timezone above.update: Apparently, on Windows, python still does not reflect timezone changes during execution, even with localtime(). On Unix you can call tzset to ensure it is up to date (although it usually happens automatically), but this function isn't available on Windows. See this question for more.


Answer URL
https://docs.python.org/3/library/time.html#time.tzset
