Natural Text
First of all, I ask this question by pure curiosity to see some great one-liners skills. The sum() function remains the best function to sum objects in a list.But as said, I ask by pure curiosity: Is there a way to sum objects from a list (obviously, without using sum()) in one line? Let's say the list would be range(0, 100)I have absolutely no idea how this could be achieved, but as Python is really great and flexible, so I have no doubt it is possible.
Just for fun, here's a solution that needs no no built-in functions at all. It's basically a reimplentation of reduce, using a bit of lambda magic.
You can take a functional approach, using reduce and an addition function (e.g. a lamdba expression or operator.add):(Note that in 3.x you need to from functools import reduce first.)Per the documentation, reduce(function, iterable) willApply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value.
Python may not be the best language for recursive approaches because (1) it doesn't support tail-recursion (2) function calls are really expensive (3) the recursion limit prevents deep recursions and (4) slicing sequences scales with O(n) (where n is the number of elements in the slice).However you can use them for one-liners! One approach would be just to successivly pop and add the first element until the sequence is exhausted:The first part is triggered as long as if x (that is to say x is not empty). This approach shows all the shortcomings of using recusion in Python: It hits the recursion limit for sequences of length ~300, it scales with O(n**2) and it's really slow compared to the built-in sum and reduce approach.One can mitigate one of the disadvantages by using a divide-and-conquer recursion approach:This time it recurses on both halfs of the list, thereby reducing the recusion depth from n to log2(n), so it can handle even longer sequences. However it's not faster than the one above.And of course there's always the cheat option:In case you really want it really fast :-)


Answer URL
https://docs.python.org/3/whatsnew/3.0.html#builtins
