Natural Text
I've got a Python program where two variables are set to the value 'public'. In a conditional expression I have the comparison var1 is var2 which fails, but if I change it to var1 == var2 it returns True.Now if I open my Python interpreter and do the same "is" comparison, it succeeds.What am I missing here?
is is identity testing, == is equality testing. what happens in your code would be emulated in the interpreter like this:so, no wonder they're not the same, right?In other words: is is the id(a) == id(b)
Other answers here are correct: is is used for identity comparison, while == is used for equality comparison. Since what you care about is equality (the two strings should contain the same characters), in this case the is operator is simply wrong and you should be using == instead.The reason is works interactively is that (most) string literals are interned by default. From Wikipedia:Interned strings speed up string  comparisons, which are sometimes a  performance bottleneck in applications  (such as compilers and dynamic  programming language runtimes) that  rely heavily on hash tables with  string keys. Without interning,  checking that two different strings  are equal involves examining every  character of both strings. This is  slow for several reasons: it is  inherently O(n) in the length of the  strings; it typically requires reads  from several regions of memory, which  take time; and the reads fills up the  processor cache, meaning there is less  cache available for other needs. With  interned strings, a simple object  identity test suffices after the  original intern operation; this is  typically implemented as a pointer  equality test, normally just a single  machine instruction with no memory  reference at all.So, when you have two string literals (words that are literally typed into your program source code, surrounded by quotation marks) in your program that have the same value, the Python compiler will automatically intern the strings, making them both stored at the same memory location.  (Note that this doesn't always happen, and the rules for when this happens are quite convoluted, so please don't rely on this behavior in production code!)Since in your interactive session both strings are actually stored in the same memory location, they have the same identity, so the is operator works as expected.  But if you construct a string by some other method (even if that string contains exactly the same characters), then the string may be equal, but it is not the same string -- that is, it has a different identity, because it is stored in a different place in memory.
The is keyword is a test for object identity while == is a value comparison.If you use is, the result will be true if and only if the object is the same object. However, == will be true any time the values of the object are the same.
One last thing to note, you may use the intern function to ensure that you're getting a reference to the same string:As pointed out above, you should probably not be doing is to determine equality on strings.  But this may be helpful to know if you have some kind of weird requirement to use is.Note that the intern function got moved from being a built in function to being in the module sys for Python 3.
is is identity testing, == is equality testing. What this means is that is is a way to check whether two things are the same things, or just equivalent. Say you've got a simple person object. If it is named 'Jack' and is '23' years old, it's equivalent to another 23yr old Jack, but its not the same person.They're the same age, but they're not the same instance of person. A string might be equivalent to another, but it's not the same object.
This is a side note, but in idiomatic python, you will often see things like:This is safe, because there is guaranteed to be one instance of the Null Object (i.e., None).
If you're not sure what you're doing, use the '=='.If you have a little more knowledge about it you can use 'is' for known objects like 'None'.Otherwise you'll end up wondering why things doesn't work and why this happens:I'm not even sure if some things are guaranteed to stay the same between different python versions/implementations.
From my limited experience with python, is is used to compare two objects to see if they are the same object as opposed to two different objects with the same value.  == is used to determine if the values are identical. Here is a good example:s1 is a unicode string, and s2 is a normal string.  They are not the same type, but are the same value.
I think it has to do with the fact that, when the 'is' comparison evaluates to false, two distinct objects are used. If it evaluates to true, that means internally it's using the same exact object and not creating a new one, possibly because you created them within a fraction of 2 or so seconds and because there isn't a large time gap in between it's optimized and uses the same object.This is why you should be using the equality operator ==, not is, to compare the value of a string object.In this example, I made s2, which was a different string object previously equal to 'one' but it is not the same object as s, because the interpreter did not use the same object as I did not initially assign it to 'one', if I had it would have made them the same object.
I believe that this is known as "interned" strings. Python does this, so does Java, and so do C and C++ when compiling in optimized modes.If you use two identical strings, instead of wasting memory by creating two string objects, all interned strings with the same contents point to the same memory.This results in the Python "is" operator returning True because two strings with the same contents are pointing at the same string object. This will also happen in Java and in C.This is only useful for memory savings though. You cannot rely on it to test for string equality, because the various interpreters and compilers and JIT engines cannot always do it.
I am answering the question even though the question is to old because no answers above quotes the language referenceActually the is operator checks for identity and == operator checks for equality,From Language Reference:Types affect almost all aspects of object behavior. Even the importance of object identity is affected in some sense: for immutable types, operations that compute new values may actually return a reference to any existing object with the same type and value, while for mutable objects this is not allowed. E.g., after a = 1; b = 1, a and b may or may not refer to the same object with the value one, depending on the implementation, but after c = []; d = [], c and d are guaranteed to refer to two different, unique, newly created empty lists. (Note that c = d = [] assigns the same object to both c and d.)so from above statement we can infer that the strings which is an immutable type may fail when checked with "is" and may checked succeed when checked with "is"The same applies for int,tuple which are also immutable types
The == operator test value equivalence. The is operator tests object identity, Python tests whether the two are really the same object(i.e., live at the same address in memory).In this example, Python only created one string object, and both a and b refers to it. The reason is that Python internally caches and reuses some strings as an optimization, there really is just a string 'banana' in memory, shared by a and b; To trigger the normal behavior, you need to use longer strings:When you create two lists, you get two objects:In this case we would say that the two lists are equivalent, because they have the same elements, but not identical, because they are not the same object. If two objects are identical, they are also equivalent, but if they are equivalent, they are not necessarily identical.If a refers to an object and you assign b = a, then both variables refer to the same object: 
is is identity testing, == is equality testing (see Python Documentation). In most cases, if a is b, then a == b. But there are exceptions, for example: So, you can only use is for identity tests, never equality tests.
is will compare the memory location. It is used for object-level comparison.== will compare the variables in the program. It is used for checking at value level. is checks for address level equivalence== checks for value level equivalence


Answer URL
https://docs.python.org/3/library/stdtypes.html#comparisons
