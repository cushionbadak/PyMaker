Natural Text
Let exp = [1,2,3,4,5]If I then execute x in exp, it will give me False. But if I execute :Then execute x in exp, it returns True. What's happening here? I didn't assign anything to x.  Did I?   I am really confused.**EDIT:**Sorry if I didn't say this before: x is not defined before.AnswerThank you everyone. I understand it now. the elements of exp is assigned to x as exp is iterated over. And x in exp equals True in the last line of code because the last element has been assigned to x.
Seems like you stumbled about in being somewhat overloaded in Python.with x in exp, you are asking "Is x in exp?"with for x in exp: ..., you tell Python "For each element in exp, call it x and do ..."The latter will assign each of the values in exp to x, one after the other, and execute the body of the loop with that value, so in the first iteration x is assigned 1, in the second 2, and in the last 5. Also, x keeps this value after the loop!Thus, before the loop, assuming that the variable x is defined but has some other value, x in exp will return False, and after the loop, it returns True, because x is still assigned the last value from exp.
for x in ... inherently assigns values to x, because x is the loop variable in a for loop.Each iteration of the loop assigns a value into x; Python doesn't create a new variable scope for loops.is the equivalent of...
The syntax is similar, but they mean two different things.x in exp is a conditional expression; it searches to see if the valueof x appears in the list exp. If it's there, the expressionevaluates to True, otherwise, False. You can also use not in.for x in exp introduces a loop where x iterates over the elements ofexp. The loop body will be called once for each element, and withinthe body, x will be set to each element successively.
That's how looping works in Python. 'For var in sequence' will assign to var as you iterate through the sequence.If you were to simply print x for example:You would see the following:Perhaps what you were looking for was just the index of the value? If so, there are a couple of things you could do.To iterate explicitly with the index, use enumerate(sequence) as such:Where the first value (index in this case) will always be the index of the current iteration.You can also iterate over the length of the object using range(len(sequence)) which is sometimes useful if you're potentially modifying the list as you iterate. Here you're actually creating a separate list using range, with length equal to the len of the list. This will not assign from the list you're targeting -- rather it will assign from the list created by range() -- so you'd have to access it using your for x in... as the index of the list.As for your second line and point of confusion - 'x in exp' - you will indeed see that x remains assigned after the fact, and so using x in exp will return True because the last assigned value to x is, in fact, in exp.
When you run your first loop, a variable x is assigned to each value of the list as you iterate over it.Let's say you start with x=0.0 is not in [1,2,3,4,5], therefore x in exp = False.However, when you run the loop, you now have a new x. When the loop is complete, x is initialized to the final element in the list, meaning x=5.5 is in [1,2,3,4,5], therefore x in exp = True. 


Answer URL
https://docs.python.org/3/reference/expressions.html#not-in
https://docs.python.org/3/reference/compound_stmts.html#the-for-statement
https://docs.python.org/3/reference/expressions.html#conditional-expressions
