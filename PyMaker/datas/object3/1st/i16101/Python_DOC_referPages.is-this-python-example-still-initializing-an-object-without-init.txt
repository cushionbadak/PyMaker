Natural Text
I am still learning the concepts of OOP so please forgive me if this is a poor question:If __init__ is needed to instantiate an object in Python, why does the following work with no call to __init__?:
From python documentation:The instantiation operation (“calling” a class object) creates an  empty object. Many classes like to create objects with instances  customized to a specific initial state. Therefore a class may define a  special method named init(), like this...So __init__ isn't needed, it is the mechanism python provides to allow you to set an initial state of your object when it is initialized.
There is no need to create an __init__ function if you do not need to do any initialization other than that provided by the parent class. Note that __init__ functions of any parent class do get called automatically:In modern Python, any class implicitly derives from the object class, which supposedly takes care of basic things like allocating memory space, even if you do not add any other properties.
__init__ is a Constructor, this is simple put a function that is called when you create an object. It is normally used to set up the object so that it is ready to be used. If no __init__ exist the object will still be created. It simply means that the object doesn't get anything done when constructed.


Answer URL
https://docs.python.org/3/tutorial/classes.html
https://docs.python.org/3/reference/datamodel.html?highlight=__init__#object.__init__
