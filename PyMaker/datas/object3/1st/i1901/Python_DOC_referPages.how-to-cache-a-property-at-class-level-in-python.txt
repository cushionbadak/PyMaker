Natural Text
So I am working on a Customer class that is supposed to be wrapper for some other classes that retrieve information about a specific customer from a server and from online, as below. The online and server calls have to be @property decorated. The problem I am facing is when trying to cache the online_info and server_info calls. The cache would somehow have to be at a class level so that even if a news customer is instantiated, the lru_cache wold remember previous calls from other instantiations for the same name call. Note my print statements. This is the behavious I am trying to achieve:Can someone explain how I achieve this behaviour? Is this possible?
Instead of caching the property values on the class, I would recommend re-using the same Customer instance for each "John", so thatThis would make Customer a singleton of sorts. Singleton implementations can be found aplenty in this question: Creating a singleton in Python. Borrowing one of those implementations gives us a pseudo-singleton metaclass like this:Use this as the metaclass for Customer and you're done:Demo:


Answer URL
https://docs.python.org/3/library/threading.html#threading.Lock
