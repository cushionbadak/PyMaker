Natural Text
I have created a class foo as below:This program returns the required result as 6. However, I needed to get the clarity of a few concepts:Is using this methodology or design of OOP correct or is there a better way to do it? I want the class to return a value or any other object(not it's own class instance)Regardless of the structure above, if sum and subtract are instance methods, how can they be called without instantiating an object as in the above example i.e., print(...)?I have observed many python APIs and frameworks returning an object or a value through class instantiation.I am trying to understand the core concepts of OOPs in python please help.
The way you have it now, sum and subtract are indeed instance methods.But that's just because when you access them through an instance, Python dynamically creates a method (Basically just binds the first argument to the object, usually self)But, you can access the wrapped function through the class:So in your __new__ function, it won't bind the first argument, and they call the underlying function instead of making them an instance method.To fix the warnings, you can make them classmethods or staticmethods. But it is generally bad practice to not return an object that is an instance of the class from the __new__. If you really wanted to use OOP, either subclass int or make a wrapper, so you can have:or


Answer URL
https://docs.python.org/3/library/functions.html#classmethod
https://docs.python.org/3/library/functions.html#staticmethod
