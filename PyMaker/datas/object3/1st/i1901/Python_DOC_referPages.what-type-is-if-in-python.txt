Natural Text
How can I redefine the symbol I use for if? What if I would like to use a unicode character -- is this allowable in python? e.g. â‰¸ in the place of the string "if".Is there any way to operate on this syntax? Can I say something like type(if) or perhaps type(__if__)?I know that python permits variables to have unicode names but what if I especially want to make my code unreadable. Or, is this something done by the parser that cannot be influenced? 
That is correct: "[if is ..] something done by the parser that cannot be influenced".For clarification, if is a reserved keyword for a specific grammar construct, as defined by the Python language. In general, reserved words cannot be used as identifiers and have special parsing rules and behavior.As such, type(if) is not even syntactically valid and will fail to parse: the program is invalid / illegal / made-up Python and the presented question of "does if have a type?" is not applicable.We cannot use a keyword as variable name, function name or any other identifier. They are used to define the syntax and structure of the Python language.There is no special "if protocol" and __if__ is an undeclared identifier.
In cpython (other implementations may vary, but I doubt in this regard), the if keyword is specified literally in the grammar (for example).  Everything else (including the parser) is built from this file.You could rebuild a cpython interpreter from scratch after changing if to something else... but I'm not sure of the usefulness of it.
See the help at first (unrelated):So anything that that does SyntaxError to you for doing type, means no good type for it, (so basically no-typed)So See the color of those functions in your interpreter, then remember not to get type out of those :-)
The built-in keyword for the conditional operator "if" must be used as-implemented according to the docs: https://docs.python.org/3.7/reference/lexical_analysis.html#keywords


Answer URL
https://docs.python.org/3/reference/grammar.html
