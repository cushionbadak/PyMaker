Natural Text
Is it possible to combine async context managers in python? Something similar to asyncio.gather, but able to be used with context managers. Something like this:Is this currently possible?
Something close to gather_cm can be achieved with AsyncExitStack, introduced in Python 3.7:Unfortunately, __aexit__s will still be run sequentially. This is because AsyncExitStack simulates nested context managers, which have a well-defined order and cannot overlap. The outer context manager's __aexit__ is given information on whether the inner one raised an exception. (A database handle's __aexit__ might use this to roll back the transaction in case of exception and commit it otherwise.) Running __aexit__s in parallel would make the context managers overlap and the exception information unavailable or unreliable. So although gather(...) runs __aenter__s in parallel, AsyncExitStack records which one came first and runs the __aexit__s in reverse order.With async context managers an alternative like gather_cm would make perfect sense. One could drop the nesting semantics and provide an aggregate context manager that worked like an "exit pool" rather than a stack. The exit pool takes a number of context manager that are independent of each other, which allows their __aenter__ and __aexit__ methods to be run in parallel.The tricky part is handling exceptions correctly: If any __aenter__ raises, the exception must be propagated to prevent the with block from being run. To ensure correctness, the pool must guarantee that __aexit__ will be invoked on all the context managers whose __aenter__ has completed.Here is an example implementation:This test program shows how it works:


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.AsyncExitStack
