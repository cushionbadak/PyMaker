Natural Text
This question already has an answer here:Scope of caught exception instance in Python 2 and 3                    1 answer                Given the following code:Can somebody explain why this causes the following output in Python 3?
msg in the except clause is in the same scope as msg on the first line.But in Python 3 we have this new behavior too:When an exception has been assigned using as target, it is cleared at  the end of the except clause. This is as ifwas translated toThis means the exception must be assigned to a different name to be  able to refer to it after the except clause. Exceptions are cleared  because with the traceback attached to them, they form a reference  cycle with the stack frame, keeping all locals in that frame alive  until the next garbage collection occurs.so, you "overwrite msg" in the exception handler, and exiting the handler will delete the variable to clear the traceback reference cycle.
Yes, as soon as the exception is raised and msg is assigned with the new exception object, the original object has no more reference and is therefore deleted. The new exception object is also deleted as soon as it leaves the except block.You can verify it by overriding the __del__ method of the object and the exception assigned to msg:This outputs:
Exception blocks delete the caught variable at the end of the block, but they do not have their own scopes. So the sequence of events goes:1) msg is set to some string in the local scope2) msg is set to an IndexError object in the same local scope as 13) msg is deleted from the local scope when the Exception block ends4) msg is no longer defined in the local scope, so the attempt to access it fails


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#except
