Natural Text
Why is this code wrong :And why is this code right:
Look at the case parrot_trouble(False, 21):It should return False, but it returns True in the first version.And that's because first version of code is treated as:First condition (in parenthesis) is not met here, but it doesn't matter as the second is met, and between them you use or. This won't happen in the second version, as when the parrot is not talking, we have no trouble.
The first function is not necesarally wrong, it is just ambiguous. You have to know if the and or the or statement is evaluated first to know the result.The second function is very clear in how the condition is evaluated and therefore easier to read than the first.It is also part of the ZEN of Python (https://www.python.org/dev/peps/pep-0020/):"In the face of ambiguity, refuse the temptation to guess."
Parenthesis execute their code first, but that isn't something that you want here. Not is first, but isn't applicable here. And is second and or is last. Parenthesis don't work so as expected. But it is not wrong.
Operator precedence to your rescue. Look there for more details.In your case, the first one translates to  "(if this and this) or that" because and has higher precedence. And the second one is self explanatory.
Although you are not specifying what correct means, the difference between the 2 implementations is that the and operator or operators have a different precedence. This means that with out paranthesis the and is evaluated first.See operator precedence in:https://docs.python.org/3/reference/expressions.html
The precedence order of the and is greater as compare to or.In the first block of code, the talking == True and hour < 7 expression is evaluated first & its subsequent result will be or with hour > 20 expression.In the second block of code, the hour < 7 or hour > 20 expression is evaluated first due to inner-round brackets & its subsequent result will be and with talking == True expression.
As is the case in most programming languages as well as Boolean algebra, the and operator has a higher precedence than the or operator in Python. So if you want the or operation to be evaluated before the and operation within the same expression, you would need to put parentheses around the or operation.You can refer to the Operator precedence section of Python's documentation for details.


Answer URL
https://docs.python.org/3/reference/expressions.html
https://docs.python.org/3/reference/expressions.html#operator-precedence
