Natural Text
I'm trying to implement the apriori algorithm. In one of the final steps I have two arrays of tuples generated from a list of products.The think is that I need to check which of arr1 are subtuples of arr2, i.e. (2421, ) is a subtuple of (2421, 30690).I tried and I get No. I also tried using .issubset but I get AtributeError.I would like to know how can I do this without going the hardcore way, I'm using a Jupyter notebook with Python 2. Only using numpy, pandas and itertools. The desired output should be of the form; if I have products 1,2,3 but I only consider the tuples (1,) and (2,) then I need (1,2) but not (1,3) from all the 2-combinations of products.
If you are implementing the Apriori algorithm, you want to uses actual sets instead of tuples. Python has two set types, set and frozenset, where the latter is immutable and thus can be stored in dictionaries or other sets. You probably want to use the latter so you can associate such sets with support scores.That's certainly the approach that the apyori project implementation uses; apyory is a pure-Python library of the Apriori algorithm. You can do subset tests with tuples, but this is a slow O(NM) operation for tuples of sizes N and M:That's a full loop over N items in ta, and each tav in tb test takes M = len(tb) steps. You can convert the tuples to sets but that too takes O(N) + O(M) time, after which the subset test takes O(N) time. That makes the whole take linear time, but for small tuples, I suspect that the constant costs of creating new objects will outweigh the theoretical more costly O(NM) all() test above.To use sets, you can use:where set.issubset() accepts any non-set iterable, the code creates a temporary set object for the test.
Welcome 2pac,InitilizationSo if you try to ask (2421,) is it a subset of arr2will return True only if arr2 contain a tuple of size 1 and contain the value 2421 . As it is not your expected behaviour you have to iterate over each i items of arr1 and check if all i[j]  items are part of arr2[k]Quick overviewThis could give this functionBut I will advice to use set if you build your collection step by step of frozenset if it is an immutable collection (i.e set and frozenset)Edit:Martijn Pieters answer go in the same way


Answer URL
https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset
https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset
