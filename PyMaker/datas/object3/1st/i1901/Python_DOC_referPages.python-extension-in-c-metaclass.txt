Natural Text
I have the following python code:Meta is used only to require that Child defines certain attributes. This class structure must remain as is because this is how my project is structured. Parent is actually called DefaultConfig and Child is actually a user-defined class derived from DefaultConfig.I'm working on translating Meta and Parent into a C extension. This is the module:This is the python code used to test module custom:Unfortunately, there is no .tp_meta member in the PyTypeObject struct, so how do I specify Meta as the metaclass of Parent?EDIT:Modified C code:
The metaclass is nothing but a type that is used as the type (ob_type!) of the class (type)... (clear, isn't it)... ParentType does not inherit from MetaType but is an instance of `MetaType.Hence, the place where &MetaType should go if it works as it should, is ParentType.ob_type:PyType_Ready checks the ob_type field - if it is NULL, it takes the ob_type of the .tp_base; but if ob_type is set already, it is left as is. Actually you can set it in the ParentType initializer:The first argument goes to the ob_type field.
There is no direct way to do this. According to the py docs, there is no members or flags to directly indicate a class is a meta class of another. The attribute responsible for indicating a meta class is inside the class dictionary. You could implement something that modifies the .tp_dict member, but this is actually deemed unsafe if done through the dictionary C-API.Warning It is not safe to use PyDict_SetItem() on or otherwise modify tp_dict with the dictionary C-API.EDIT:From the python source code, it seems meta class is accessed as an id via the C dictionary API, but the methods to do so are prefixed with an _, and don't appear in any documentation.These methods are apart of the "limited api", and can be used by defining the Py_LIMITED_API macro


Answer URL
https://docs.python.org/3/c-api/typeobj.html
https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_dict
https://docs.python.org/3/c-api/stable.html
https://docs.python.org/3/extending/newtypes_tutorial.html#subclassing-other-types
https://docs.python.org/3/c-api/structures.html#c.PyObject
