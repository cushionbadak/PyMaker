Natural Text
I want to print all the lines in which a string occurs in the input file, along with the line numbers . So far I wrote the code shown below. It is working, but not in the way I wanted:Output is as follows: So far so good, But when I enter a keyword like "Sog" it also finds the Sogan but I don't want that, I only want to check tokens between whitespaces. I think I need to write regex for this and I got one but I couldn't now how can i add that regex to this code. 
You will probably want to use the word boundary marker \b. This is an empty match for transitions between \w and \W. If you want your keywords to be literal strings, you will have to escape them first. You can combine everything into one regular expression using |:ORComputing the matches is a bit easier now, since you can use finditer instead of making your own comprehension:Since each match is enclosed in a group, printing is not much more difficult:OROf course, don't forget toCorner CaseIf you have keywords that are subsets of each other with the same prefix, make sure the longer ones come first. For example, if you haveThe regex will beWhen you encounter a line with foobar in it, foo will match successfully against it and then fail against \b'. This is documented behavior of|`. The solution is to pre-sort all your keywords by decreasing length before constructing the expression:Or, if non-list inputs are possible:If you don't like this order, you can always print them in some other order after you match.
You could use the following regex:OutputExplanationThe pattern '(\w+)\+' any group of letters followed by a + character, + is special character so you need to escape it, in order to match. Then use group to extract the matching group, (i.e. the group of letters).FurtherRegular expression syntax
Question:  a keyword like "Sog" it also finds the Sogan ... I only want tokens between whitespaces. ... how can i add that regex to this code. Build a regex with your keywords, use the or | separator for multiple keywords.For example:  Output:Tested with Python: 3.5


Answer URL
https://docs.python.org/3/library/re.html#re.escape
https://docs.python.org/3/library/re.html#re.Pattern.finditer
https://docs.python.org/3/library/re.html#regular-expression-syntax
