Natural Text
I'm trying to call ~ 300 API calls at the same time, so that I would get the results in a couple of seconds max.My pseudo-code looks like this:Doing this I get getting color printed out every second or so and the code takes forever, so I'm pretty sure they don't run simultaneously. What am I doing wrong?
aiohttp with Native Coroutines (async/await)Here is a typical pattern that accomplishes what you're trying to do.  (Python 3.7+.)One major change is that you will need to move from requests, which is built for synchronous IO, to a package such as aiohttp that is built specifically to work with async/await (native coroutines):There are two distinct elements to this, one being the asynchronous aspect of the coroutines and one being the concurrency introduced on top of that when you specify a container of tasks (futures):You create one coroutine get that uses await with two awaitables: the first being .request and the second being .json.  This is the async aspect.  The purpose of awaiting these IO-bound responses is to tell the event loop that other get() calls can take turns running through that same routine.The concurrent aspect is encapsulated in await asyncio.gather(*tasks).  This maps the awaitable get() call to each of your colors.  The result is an aggregate list of returned values.  Note that this wrapper will wait until all of your responses come in and call .json().  If, alternatively, you want to process them greedily as they are ready, you can loop over asyncio.as_completed: each Future object returned represents the earliest result from the set of the remaining awaitables.Lastly, take note that asyncio.run() is a high-level "porcelain" function introduced in Python 3.7.  In earlier versions, you can mimic it (roughly) like:Limiting RequestsThere are a number of ways to limit the rate of concurrency.  For instance, see asyncio.semaphore in async-await function or large numbers of tasks with limited concurrency.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.as_completed
