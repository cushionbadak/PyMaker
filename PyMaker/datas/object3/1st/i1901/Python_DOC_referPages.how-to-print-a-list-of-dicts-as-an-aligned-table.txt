Natural Text
So after going through multiple questions regarding the alignment using format specifiers I still can't figure out why the numerical data gets printed to stdout in a wavy fashion.I tried using f-strings with the formatting specifiers but still it prints the data in the following way, can someone please help me figure this out.I have read most of the questions regarding this, I would like to know if there is a raw method rather than using a library like tabulate which does an excellent job. But I also want to learn how to do this without any library.
As already mentioned, you calculated lengths of strings incorrectly.Instead of hardcoding them, delegate this task to your program.  Here is a general approach:  Examples: See docs for more. There are examples with alignment as well.
You get a misaligned result because you did not count the length of the titles correct. You only reserved 11 characters, where the first is already 34 characters long.Easiest is to have your program count for you:with the much better result(Additional only)Here is a more generalized approach that uses a list of to-print key names and is able to generate all other required variables on the fly. It does not need hardcoding the names of the variables nor fixating their order â€“ the order is taken from that list. Adjustments of the items to show all go in one place: that same list, get_items. The output separator can be changed in the fmtstring line, for example using a tab or more spaces between the items.It works as follows:The lengths list is filled with the maximum length of each named key taken from the get_items list.This returns a list; the fmtstring repeats the format instruction {:d} for each of these items and fills in the number. The outer {{: and }} gets translated by format into {: and } so the end result will be {:number} for each length. These separate format strings are joined into a single longer format string.Finally, the loop over the actual data prints the items from get_items. The list comprehension looks them up; the * notation forces the list to be 'written out' as separate values, instead of returning the entire list as one.Thanks to @Georgy for suggesting to look for a less hardcoded variety.


Answer URL
https://docs.python.org/3/whatsnew/3.6.html#pep-498-formatted-string-literals
