Natural Text
I wrote this code to remove duplicate elements and tried to use remove when finding duplicates while adding elements to dictionary. Can anyone please explain how this remove works in this context because I am unclear at times how remove functions with a dictionary. Small part of code is below. output is [1, 3, 4, 5, 6, 121, 45]
The answer is remove doesn't work, because dicts don't have a remove method. So you'd always get an AttributeError, but by catching and ignoring all exceptions, you never see it, making:equivalent to a slower version of:(except if you're unlucky, it might also silence critical exceptions like KeyboardInterrupts too).This whole function is kind of ridiculous mind you. The same behavior could be achieved with:Traditionally, it would be return list(set(a)), but since 3.6 and higher provide ordered dicts, using dict.fromkeys means you preserve the order in which values were first observed, while still discarding duplicates (on 3.5 and earlier, set vs dict.fromkeys won't matter; dict.fromkeys might be a little slower or use a little more memory, but the behavior will be roughly the same).
If you want to remove duplicates from a list and don't care about order, a simple way is to use set.Where my_list is the list you want to de-dedupe. A side-effect of this is that you'll lose order, but that may not matter for you.This is basically what you are doing, except you are constructing a map from each element to itself, which is equivalent to a set.


Answer URL
https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-compactdict
https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-compactdict
https://docs.python.org/3/whatsnew/3.7.html#summary-release-highlights
