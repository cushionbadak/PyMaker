Natural Text
I was trying to understand how to create a Singleton class in Python. Below is how i attemptedIdeally __new__() calls __init__() with the object instance, but in the above case when I am trying to create second object b, __new__ won't be called because an instance of MyClass already exits then why does the print statement printing num_of_instances print 2?
__new__ is called for every MyClass(...) call. If it didn't get called, it would not be able to return the singleton instance.And when the __new__ method returns an object and that object is an instance of the cls argument passed to __new__ (or a subclass), then the __init__ method is also called.So, for each MyClass(...) call, __new__ is called. The __new__ method always returns an instance of the current class, so __init__ is called, every time. It doesn't matter here that it is the same instance each time.From the __new__ method documentation:If __new__() returns an instance of cls, then the new instanceâ€™s __init__() method will be invoked like __init__(self[, ...]), where self is the new instance and the remaining arguments are the same as were passed to __new__().You can see this happen if you add some print() calls in the methods:You can't prevent the automatic __init__ call, at least not without overriding something else. If you want to avoid __init__ being called each time, you have some options:You don't have to use an __init__ method on the subclass. You could invent your own mechanism, __new__ could look for a __singleton_init__ method and call that:or your __init__ method could check if there are already attributes set in vars(self) (or self.__dict__) and just not set attributes again:The __new__ and __init__ logic is implemented in type.__call__; you could create a metaclass that overrides that logic. While you could simply call __new__ only (and leave everything as is), it makes sense to make the metaclass responsible for handling the Singleton pattern:then use this not as a base class but with metaclass=.... You can create an empty base class if that's easier:The above will call __new__ on the class, optionally followed by __init__ on the resulting instance, just once. The SingletonMeta.__call__ implementation then, forever after, returns the singleton instance without further calls:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__new__
https://docs.python.org/3/reference/datamodel.html#metaclasses
