Natural Text
Suppose I am having a list (L1) like this:If I use len(L1), it return 18, which is the total number of lists for the given input.What if I need to compute the total number of tokens for the input list? How to achieve this?As each list is having 4 tokens separated by comma delimiter. Then for this the list is having a total of 72 tokens? Does there exist any way to achieve this in Python 3? Any help is deeply appreciated!
For your simple example, just sum the lengths of the nested lists:This works because all you have is a single level of nesting; the outer list contains nothing but nested lists, each of which contains only strings. sum() with map() is a very fast method of getting the total lengths; everything is handled in C code, the Python evaluation loop doesn't have to step through a for loop here.If you know that the inner lists only ever contain 4 elements each, you could also just calculate the total:This is faster still; no iteration needed at all to ask for each nested list object for their length. However, we are talking about .76 vs .07 microseconds here, hardly an issue in any Python program. The for loop approach as posted by Frame takes about twice as long, at 1.33 microseconds. Not exactly an eternity.If your input is not regular (so a mix of lists at different levels of nesting), but otherwise only consists of lists of objects, you'd need to iterate and decide for each element what to do. Here is a stack-based function that'll count all the non-list elements in such a structure:The above can be extended to cover tuples, etc, by adding to the isinstance() test as needed.Demo:
Try something like:You can iterate over lists of lists and sum up all the occurrences.


Answer URL
https://docs.python.org/3/library/functions.html#sum
https://docs.python.org/3/library/functions.html#map
