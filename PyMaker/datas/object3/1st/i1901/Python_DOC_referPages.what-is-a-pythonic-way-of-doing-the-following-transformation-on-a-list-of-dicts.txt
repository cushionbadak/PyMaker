Natural Text
I have a list of dicts like this:and I would like to obtain an output of this form:But short of for-looping and appending I don't see a solution. Is there a smarter way than doing this?
Use generator expression:Output:
I would use a list comprehension (much like eyllanesc's) if I was writing this code for public consumption. But just for fun, here's a one-liner that doesn't use any fors.(Note that this only reliably works if dictionaries preserve insertion order, which is not the case in all versions of Python. CPython 3.6 does it as an implementation detail, but it is only guaranteed behavior as of 3.7.)Quick breakdown of the process:dict.values returns a dict_values object, which is an iterable containing all the values of the dict.map takes each dictionary in l and calls dict.values on it, returning an iterable of dict_values objects.zip(*thing) is a classic "transposition" recipe, which takes an iterable-of-iterables and effectively flips it diagonally. E.g. [[a,b],[c,d]] becomes [[a,c], [b,d]]. This puts all the names into one tuple, and all the values into another.list converts the zip object into a list.
You can use operator.itemgetter to guarantee ordering of values:If, assuming Python 3.6+, you cannot guarantee appropriate insertion-ordering of dictionaries within your input list, you will need to explicitly define an order as above.PerformanceWhile a list of "tuple comprehensions" works, it becomes unreadable and inefficient when querying more than a couple of fields:
This may not be exactly what you had in mind, but for tabular data like this I find that pandas is usually the best solution in the long run:Usually you use the data frame directly for anything you would need to do, but you can also convert it to a list-based data structure:
Not sure about performance, but here's another take using zip() and unpacking:Edit: As @DeepSpace pointed out, it can be further reduced down to:Here's a longer, but more explicit answer if you want to define the orders yourself:
use map for this
First : your code is fine, readable and efficient, which sounds Pythonic to me.Note that you probably don't want a list of tuples, though. Tuples are immutable, so you wouldn't be able to append another name to names.With a single dictIf names are unique, you could convert your list of dicts to a large dict:You can get the desired information directly:If you really want a list of lists:With pandasIf you're working with a large list of dicts, you might want to consider pandas.You could initialize a DataFrame directly:If you need the names as an iterable, you can get the corresponding column:If you really need a list of names:To get the names and values together:
Here's a recursive way of doing it:
Just like this:Result:


Answer URL
https://docs.python.org/3/library/operator.html#operator.itemgetter
