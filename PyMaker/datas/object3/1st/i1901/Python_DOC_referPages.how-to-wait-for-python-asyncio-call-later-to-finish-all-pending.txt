Natural Text
I want to write a program that utilizes call_later to signal something (or things) to happen later, which themselves might add more routines to be invoked, and then signal to the program to run until there's nothing remaining to be run. For an example, I can do the following:But you'll notice that call_later is a bespoke coroutine.Is it possible to use the event loop's call_later, but somehow inspect the event loop or otherwise await the completion of all pending callbacks?
You may introspect using asyncio.all_tasks() but it's probably the wrong way to do it.The right way would be to create futures and allow call_later to mark them as done:Keep in mind call_later is used for normal functions and not coroutines. If say_hi needs to be a coroutine, you should add ensure_future or loop.create_task into the mix.Adding them does come with more complications -  you'll need to add a few more functions to take ensure_future's resulting future, and chain it with your waiter in a similar way to futures._chain_future.I highly suggest using your own coroutine in that case, as you have already done.


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.call_later
https://docs.python.org/3/library/asyncio-task.html#asyncio.all_tasks
