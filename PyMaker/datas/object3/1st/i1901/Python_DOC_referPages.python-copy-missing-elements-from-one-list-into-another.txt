Natural Text
I am looking for the most efficient way to update a list.I have a variable self.myGlobalList = []I also have a recursive function that on each one of its calls is going to generate a new list with coordinates. Say in the first iteration, I obtain the following list:Since self.myGlobalList does not contain any of those coordinates, I will append them to it:Then, on the second iteration I obtain a new generated list:Now my code will again go through each element of the newly generated list and check if any are missing from self.myGlobalList, and if yes, append them.  The result should contain the new elements:So far so good, everything works fine. However, my lists can contain more than 500 000+ coordinates. In terms of efficiency, will this method be sufficient, and are there any suggestions you could offer in order to optimise it?
Make each generated_list into a set, and then just keep performing union on the set.  The repeated code should go into a loop.Output:
For instance you could do something like this (toy example):OutputExplanation The expression if pair not in global_set is O(1) (that is it takes constant time to check if an element is present), in the other hand if pair not in global_list would take O(n) to check if an element is present.FurtherPython set.List vs Set


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#sets
