Natural Text
as Im new to python,I needed some help with the following:I am writings a script to count the number of occurance of "|" in a csv file. So I usually get large csv files with text qualifiers and pipe delimiters. Sometimes it happens that few lines gets shifted to a new line. For example:In the above example the second line got shifted to new line. So my plan was to write a prog to count the number of times the "|" is occuring in a line and if there is a mismatch in the count then display that line and copy it to another file. Please note as this is a text qualifier file, i need to consider the pipe as well as the double quotes ; I could have counted the number of pipes but then the third line in the above example would also be counted in. The script is:If you notice k is the count but my output is coming to:So as you can see the "|" is not getting counted properly. I tried '"'+|+'"' but that did not work. So if I am able to store the value "|" in the l variable i think Ill be able to get my job done. Any suggestions?If someone can point out the way to store "|" as a whole in a variable that also would be of great help. I don't want a proper fix of the file. Please note the above example is 3 lines which got converted to 4 lines due to the new line thing.
you could use the csv module directly:that prints:this assumes that the first row in your input file hast the correct length.you should the replace the StringIO parts with your real input and output files.
To count occurrences of a substring in a string, you don't need to manually loop over 'words' or any other item. In addition, the split function, without any arguments, splits on whitespace only, so that line does nothing useful.The linedoes nothing useful either, because i is a string and so this line feeds each separate character into letter. A single character cannot ever be equal to your multi-character string l, which is why your k never increases.Use the built-in string function count:str.count(sub[, start[, end]])  Return the number of non-overlapping occurrences of substring sub in the range [start, end]. Optional arguments start and end are interpreted as in slice notation.  (https://docs.python.org/3.7/library/stdtypes.html#str.count)Now you get the expected output(original answer, obsolete after clarification)split() only splits on whitespace, so you don't get "words". (Also, splitting on something else is not useful, as it throws away the split-on string.)You can count right away how many times a substring occurs in a certain string (line.count('"|"')) but your split lines end with "| so you only have to test for that:Result:


Answer URL
https://docs.python.org/3/library/csv.html?highlight=csv#module-csv
