Natural Text
I've got a bunch of Django template inclusion tags, which take as an argument either a specific instance of a database object or a string/int, which is interpreted as the primary key of that database object. For example......all work fine and do the obvious: they render a template fragment with a particular Product instance, fetching it by primary key from the database, if needed. This is how Product and similar classes are defined:Here's what usually happens in such an inclusion tag:Since I've got the same pattern happening in dozens of inclusion tags, I'm trying to refactor it out, so that I've got something like:Here's the fetch_object code:My problem is: I have no idea how to specify the return type of that function. Basically it should be something like "instance of any class, which is derived from Model or None". But if I try something like......then PyCharm complains about "unresolved attribute reference" if I access a method on the fetched object, which is Product-specific, not Model-specific.I'm trying to use more and more type-hinting in my Python code, because it has already saved my butt a few times, but this is one of those cases, where I have no idea what the correct way of doing it would be and my google-fu is failing me.What is the correct type-hinting for fetch_object?
What you want to do here is make your fetch_object function a generic function.That is, rather then just saying that your function accepts any Type[Model], capture exactly which kind of model you accept using a type variable, and specify that exact kind is the output. For example:One minor note on stylistic conventions: I chose to name the typevar T here for brevity. The other common convention is to name your typevar something like  _TModel or _ModelT. That is, the underscore to make the variable private, and a longer name for readability.


Answer URL
https://docs.python.org/3/library/typing.html#typing.TypeVar
