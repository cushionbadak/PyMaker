Natural Text
I have a method that take a list and return an objectI want to get a list that contains all the mapped elements that isn't None.Like this:But it seems not good to call the map_to_obj method twice in the list comprehension. Is there a way to have local variables in list comprehension so that it can have better performance? Or does the compiler optimize it automatically?Here is what I want:
Use nested list comprehension:[x for x in [map_to_obj(v) for v in v_list] if x]or better still, a list comprehension around a generator expression:[x for x in (map_to_obj(v) for v in v_list) if x]
You can avoid re-calculation by using python built-in filter:
A variable assignment is just a singular binding: This is a more general answer and also closer to what you proposed. So for your problem you can write:
A local variable can be set within a comprehension by cheating a bit and using an extra 'for' which "iterates" through a 1-element tuple containing the desired value for the local variable. Here's a solution to the OP's problem using this approach:Here, o is the local variable being set equal to map_to_obj(v) for each v.In my tests this is slightly faster than Lying Dog's nested generator expression (and also faster than the OP's double-call to map_to_obj(v), which, surprisingly, can be faster than the nested generator expression if the map_to_obj function isn't too slow).
List comprehensions are fine for the simple cases, but sometimes a plain old for loop is the simplest solution:Now if you really want a list comp and dont want to build an tmp list, you can use the iterator versions of filter and map:or more simply :The iterator versions don't build a temporary list, they use lazy evaluation.
I have figured out a way of using reduce:How about the performance of this?


Answer URL
https://docs.python.org/3/library/functions.html#filter
