Natural Text
I'm looking to differentiate between a number like2.0 or 2 and an actual fractional number such as 2.4. What would be the best way to do this? Currently I'm doing:
That operation is built-in:Documentation is here.ADDENDUMThe initial solution only works for float. Here's a more complete answer, with tests:
If some of your numbers are decimal.Decimals, they might have range issues where conversion to float fails, or drops the fractional part that actually exists, depending on their precision:The str method will generally work (modulo problem cases like the one illustrated above), so you could stick with that, but it might be better to attempt to use is_integer and use a fallback if that fails:(as others note, you'll need to check for int and long here as well, if those are allowed types, since they are integers by definition but lack an is_integer attribute).At this point, it's worth considering all of the other answers, but here's a specific decimal.Decimal handler:
Why do not check if the difference between the truncation to integer and the exact value is not zero?
If you are dealing with decimal module or with a float object, you can do this easily:
Here is one way to do it (assuming e.g. 2/2 is not "fractional" in the sense you have in mind):This will only work if n is an int or a float or decimal.Decimal. But you could extend it to handle other numeric types such as numpy.float64 or numpy.int32 by just including them in numeric_types.


Answer URL
https://docs.python.org/3/library/stdtypes.html#additional-methods-on-float
