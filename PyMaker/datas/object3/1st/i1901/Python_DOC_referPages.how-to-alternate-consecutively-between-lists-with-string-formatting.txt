Natural Text
In Python, is there a good way to interleave two lists of the same length?Say I'm given [1,2,3] and [10,20,30]. I'd like to transform those into [1,10,2,20,3,30].
Having posted the question, I've realised that I can simply do the following:where l1 and l2 are the two lists.If there are N lists to interleave, thenFor more recipes, follow Best way to interleave a list with its suffix values. Some of the methods demonstrated there can be generalised to two or more lists of equal length. 
For python>=2.3, there's extended slice syntax:The line c = a + b is used as a simple way to create a new list of the exactly the right length (at this stage, its contents are not important). The next two lines do the actual work of interleaving a and b: the first one assigns the elements of a to all the even-numbered indexes of c; the second one assigns the elements of b to all the odd-numbered indexes of c.
GivenCodeAssuming lists of equal length, you can get an interleaved list with itertools.chain and zip:Alternativesitertools.zip_longestMore generally with unequal lists, use zip_longest (recommended):Many lists can safely be interleaved:more_itertools+A library that ships with the roundrobin itertools recipe, interleave and interleave_longest.yield fromFinally, for something interesting in Python 3 (though not recommended):+Install using pip install more_itertools
Alternative:This works because map works on lists in parallel. It works the same under 2.2. By itself, with None as the called functions, map produces a list of tuples:Then just flatten the list of tuples. The advantage, of course, is map  will work for any number of lists and will work even if they are different lengths:
I needed a way to do this with lists of different sizes which the accepted answer doesn't address.My solution uses a generator and its usage looks a bit nicer because of it:And its usage:
I like aix's solution best. here is another way I think should work in 2.2:and one more way:and:
As long as you don't have None that you want to keep


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
https://docs.python.org/3/library/itertools.html#itertools-recipes
