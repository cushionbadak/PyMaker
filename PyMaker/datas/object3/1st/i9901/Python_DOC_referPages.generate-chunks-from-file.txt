Natural Text
I have a JSON file and would like to write a function to return a list of the next 10 objects in the file.  I've started with a class, FileProcessor, and the method get_row() which returns a generator that yields a single JSON object from the file.  Another method, get_chunk(), should return the next 10 objects. Here is what I have so far: I've tried like this, but it only returns the first 10 rows every time.So what is the correct way to write get_chunk()?
Here's a simple generator that gets values from another generator and puts them into a list. It should work with your FileProcessor.get_row method.outputNote that this only yields complete chunks. If that's a problem, you can do this:which will printafter the previous output.A better way to do this is to use itertools.islice, which will handle a partial final chunk:Thanks to Antti Haapala for reminding me about islice. :)
(note: PM 2Ring beat me to it!)Your get_row method doesn't return a row - it returns a generator that will produce rows as you iterate through it. You can see that in the get_chunk method that does for i in self.get_row.... The annoying thing is that every time you call get_row it will open the file again and return the first object. The problem with get_chunk is that you don't pass in the number of rows you want and you don't limit the for loop to that number. get_chunk gets all of the rows in the file.How about a rethink? All you really need is a generator that reads lines and deserializes the json. The map function is already built to do that. You can get a single row with python's next function and multiple rows with itertools.islice. Your class is just a thin wrapper around stuff that's already implemented so just use the native tools and skip writing your own class completely.Fist I generate a test file... Now I can create an iterator that can be used to get a row or list of rows. In cpython, you can open the file in the map function safely, but you can also do your work in a with clause.I can get all of the objects in a loopOr put some of them in a listor combine operationsThe point is, the simple map based iterator can do what you want, without having to update a wrapper class every time you think of a new use case.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.islice
