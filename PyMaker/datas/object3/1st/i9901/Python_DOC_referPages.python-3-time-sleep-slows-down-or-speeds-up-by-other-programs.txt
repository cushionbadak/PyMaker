Natural Text
Hi I have a question regarding to the time.sleep() function in python 3. What I am trying to do is looping a list of value periodically with the rate of 0.001 second/ point. It works fine with 0.01 or higher rate. But at 0.001 or smaller, the rate is heavily affected by opening or turning off other programs. For example, I have a list of 100 points and run with 0.001 second per point. Then it would take approximately 100*0.001 = 0.1 second to finish it. However, when I run the code, it takes way longer about 1 second to finish. Then I turn on Google Chrome and open stack overflow or quora websites, then it runs at the right speed about 0.11 second.I am wondering if there is any solution to fix this issue or an alternative of time.sleep() that won't be affected by the other programs. Here is my code for testing time.sleep().
The manual entry for time.sleeptime.sleep(secs)Suspend execution of the calling thread for the given number of seconds. The argument may be a floating point number to indicate a more precise sleep time. The actual suspension time may be less than that requested because any caught signal will terminate the sleep() following execution of that signalâ€™s catching routine. Also, the suspension time may be longer than requested by an arbitrary amount because of the scheduling of other activity in the system.Changed in version 3.5: The function now sleeps at least secs even if the sleep is interrupted by a signal, except if the signal handler raises an exception (see PEP 475 for the rationale).makes it pretty clear that the actual sleep time will only approximate the requested time.  I have separately read that the resolution on Windows is 1/60 s, though I don't know if that is still true.  You can do much better using the tkinter root.after function.  When I run the following in IDLEthe output is repeatably just under 1.05 seconds, very close to the target 1.00.  If I uncomment the tick print statement, the time is 4.2 seconds.  In IDLE, the print goes through a socket to a separate process, which is a bit slow.  Running in Windows Command Prompt, the 1000 print time is 1.3 seconds.  I expect that this is about what you would get outputting to a serial post as long as the recipient can keep up with the flow.EDIT One could do something similar with the relatively new asyncio module, and with a bit more effort, even use the newer async for syntax.  But I do not have the needed knowledge memorized. 
In general sleep functions in POSIX, and presumably Windows as well, are guaranteed to sleep for at least the duration specified (unless interrupted earlier by a signal), but they may sleep arbitrarily long after the specified duration depending on when the OS thread scheduler decides to wake the thread.You could try running your program with a realtime scheduling policy, e.g. in case you're using Linux see https://docs.python.org/3/library/os.html#os.sched_setscheduler and http://man7.org/linux/man-pages/man2/sched_setscheduler.2.html .


Answer URL
https://docs.python.org/3/library/time.html#time.sleep
https://docs.python.org/3/library/os.html#os.sched_setscheduler
