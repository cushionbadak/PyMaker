Natural Text
I'm writing a class that emulates a mapping object.  It has the following functions.I would think that a call to obj[missing_key] would also call __missing__. But since I've overridden __getitem__ I have to do thisIt seems that the __missing__ hook is not wrapped into calls to __getitem__ but instead built inside __getitem__.  This makes the __missing__ hook only useful for classes that extend dict.  In my case it makes no sense and I should just implement the missing functionality inside the try/except.Is there a way to make __getitem__ automatically call __missing__ on a KeyError?
Per the docs:object.__missing__(self, key)Called by dict.__getitem__() to implement self[key] for dict subclasses when key is not in the dictionary.Basically, if you're not a dict subclass, or you are, but you overloaded __getitem__ without delegating up the inheritance chain to dict.__getitem__, then __missing__ means nothing, because nothing checks for it. You can't make it call __missing__ implicitly unless you're a dict subclass.If you're writing your own mapping class, and you want it to do something like __missing__, you don't really need to have a __missing__ at all, just put the handling code in your __getitem__:That behaves the way you expected (note: It does not update self.var). You could use dict.get to shorten it to just:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__missing__
