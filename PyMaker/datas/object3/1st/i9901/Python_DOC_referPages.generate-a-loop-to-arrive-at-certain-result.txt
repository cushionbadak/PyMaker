Natural Text
I have kind of a brain fog trying to solve the following structure and maybe someone can assist in solving this issue.How would an algorithm/set of loops look like that generates this table? The order of appearance is not important. Just all bundles of four pairs should pop up. The pairs need actually to be individual digits, i.e. a 10 is a 1 and a 0, not a ten!EDIT: there is certainly a pattern in the numbers. But I did not manage to create an appropriate loop to 'catch' the pattern.one pattern in first row is (if only this can be solved would help already): 
This code generates the desired data as a 3D list of strings.outputIf these pairs are actually supposed to be pairs of integers we need a slightly different strategy:outputHere's a variation of the 2nd solution that uses "traditional" for loops instead of nested list comprehensions. Hopefully, it's a little easier to read. :)The built-in divmod function performs division and modulus on its arguments, so when a and b are integers divmod(a, b) is equivalent to a // b, a % b. If x is a two digit integer `divmod(x, 10) returns a tuple containing those 2 digits.    
I have come up with an efficient algorithm for this problem :)Think of it like a table, you want to work through row by row, then column by column. I used the column and the row in the algorithm to determine what the numbers should beAdd a comment if there's anything you don't understand :)


Answer URL
https://docs.python.org/3/library/functions.html#divmod
