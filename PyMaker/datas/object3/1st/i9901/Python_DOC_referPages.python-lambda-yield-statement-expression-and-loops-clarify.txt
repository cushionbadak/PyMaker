Natural Text
TLDR:  Can we implement yield or generator statement (with a loop) within a lambda? My question is to clarify:Whether the following simple loop function can be implemented with yieldResults in error:Which looks like, it was expecting something as right operand for unwritten return statement but found the yeild and getting confused.Is there a proper legit way to achieve this in a loop? Side note: yield can be statement/expression depending on who you ask : yield - statement or expression?Final Answer : yield can be used with lambda but the limitation(single-line) makes it useless.  for/while not possible in lambda because they are not expressions.  -user2357112 implicit for loop is possible with list comprehension, and yield is valid within the list comprehension. -wimVerdict- Explicit loops not possible because lambdas in python can only contain expressions, and to write an explicit loop you will need to use statements. -wim
The one-liner you seem to be trying to create is actually technically possible with a lambda, you just need to help the parser a bit more:This uses a for loop implicitly in a list comprehension.  It is not possible with an explicit while loop or for loop outside of a comprehension.  That's because lambdas in python can only contain expressions, and to write an explicit loop you will need to use statements.Note:  this syntax is deprecated in Python 3.7, and will raise SyntaxError in Python 3.8
Is it any necessity for using yeild inside of lambda if you can rewrite it with generator such that?
You actually can loop through a lambda in useful ways, it's just that the example you provided isn't a great use case.One instance where you might want to use yield inside a lambda might be to lazily execute expensive functions only when needed. Like so:* Note that this syntax will still work in Python 3.8, since it is not using the yield inside of a comprehension.


Answer URL
https://docs.python.org/3/reference/expressions.html
https://docs.python.org/3/reference/compound_stmts.html
