Natural Text
I'm writing a script that reads a subnet in binary form and converts it into decimal. The script needs to output the decimal result separated with periods (i.e. an output would look like this: 255.255.255.0).I'm trying to use sep ="." to separate the print with periods, however, this does not seem to work. I suspect this may be because it is printing individual outputs each time rather than one full statement to be joined together. I've attempted end= ".", but that is not an option as it adds an additional period to the end of the output.Here is a snippet of the script:How can I make the printed output separate with periods? 
Replace all spaces once, split the string on '.' to create the list and then use .join to reconstruct the string after converting the octets:
First convert your octets to decimal, convert them back into strings, and then join the the string using '.'.join()
If you have an IPv4 address given as dot/space-separated binary digits in a "01"-string:then you could easily get the ip as an object in Python:To get only 255.255.255.0, just print it. This code will assert that the input is valid.If you don't need to validate the input or to do anything with it other than to print it then simple string manipulations could be enough:
Your question explicitly asks how to separate the prints ....The issue is that you are calling print several times on a single 'object' and hence not getting the behaviour you want. The print function separators will work as you wanted when operating on a list/tuple of values.My suggestion would be to convert your input value into a list of the required strings, then use print() and sep= as you intended, ie. don't use print in your conversion loopAs other contributors have shown, there are alternative methods of doing the conversion that are more "idiomatic" to Python.My observation would be to get the values as close as possible to what you require - in a string or tuple etc - but without any textual formatting.Then apply formatting as your last step - in this case using the print function's sep feature.


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.join
