Natural Text
Suppose we have the following mod.py:and the following use of it:I get an error:According to the documentation the documentation the with statement should execute as follows (I believe it fails at step 2 and therefore truncate the list):The context expression (the expression given in the with_item) is evaluated to obtain a context manager.The context manager’s __exit__() is loaded for later use.The context manager’s __enter__() method is invoked.etc...As I've understood it there is no reason why __exit__ could not be found. Is there something I've missed that makes a module not able to work as a context manager?
__exit__ is a special method, so Python looks it up on the type. The module type has no such method, which is why this fails.See the Special method lookup section of the Python datamodel documentation:For custom classes, implicit invocations of special methods are only guaranteed to work correctly if defined on an object’s type, not in the object’s instance dictionary. Note that this applies to all special methods. For example, if you added a __str__ or __repr__ function to a module it'll not be called when printing the module, either.Python does this to make sure type objects are hashable and representable too; if Python didn't do this then trying to put a class object into a dictionary would fail when a __hash__ method was defined for that class (as that method would expect an instance to be passed in for self).
You can't do it easily for the reasons stated in @Martijn Pieters answer. However with a little extra work it is possible, because the values in sys.modules don't have to be instances of the built-in module class, they can be instances of your own custom class with the special methods a context manager requires. Here's applying that to what you want to do. Given the following mod.py:And the following use of it:Will produces this output:See this question for information about why the _ref is needed.


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-lookup
