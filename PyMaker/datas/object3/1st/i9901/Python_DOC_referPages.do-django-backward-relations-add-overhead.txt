Natural Text
In Django, you create models and can optionally specify a foreign key on a fieldYou can then query each Dog for its respective owner or get all dogs for a ManIf you want to not create a backward relation as specified by the docs, you can doNow you no longer have access to all_dogs = some_man.dog_set.all().However, does this additional "building" of a backward relation add overhead?If I just never ever used all_dogs = some_man.dog_set.all() would it matter whether or notI had specified related_name='+' in Dog? Would it slow things down potentially?And is this functionality purely implemented in application side Django, or would related_name='+' also change the database schema itself?
However, does this additional "building" of a backward relation add overhead?NoIf I just never ever used all_dogs = some_man.dog_set.all() would it matter whether or not I had specified related_name='+' in Dog? Would it slow things down potentially?No, and no.And is this functionality purely implemented in application side Django, or would related_name='+' also change the database schema itself?It's implemented with Python descriptors.  In the case of ForeignKey, that's a ReverseManyToOneDescriptor.There is no change in the database schema, and the presence or absence of a related name does not generate a migration.  If you haven't disabled the relation, you should actually see the descriptor objects there as attributes on the model classes.  Something like this:These are the objects which make Django's ORM magic work.  


Answer URL
https://docs.python.org/3/howto/descriptor.html
