Natural Text
I'm looking at a 3rd party API and they have the following piece of code:I understand that '\0' means NULL, does '\0\0' have any special meaning or does it just mean 2 NULLs?
It just assures that two bytes are provided n times so the size of the array will be equal to n. If '\0' was provided, the resulting array would have a size == n//2 (due to the type-code 'H' requiring 2 bytes); that is obviously counter intuitive:Note that, in Python 3, if you need the same snippet to work you must provide a bytes object as the initializer argument to array:As you also can't provide a u'' string in Python 2. Other than that, the behavior stays exactly the same.So '\0\0' is for convenience reasons, nothing more. No semantics are attached to '\0\0'. No semantics are really attached to '\0' either (as they do in, for example, C) '\0' is just another string in Python.As a further example for this behavior, take the initialization of an array with a type-code of 'I' for unsigned ints  with a minimum of 2 bytes but 4 on 64bit builds of Python. In the spirit of the snippet you've provided, you'd initialize the array by doing something like this:Yes, four times the b'\0' string to get 10 elements.As a final note -- the following timings are performed on Python 3 but 2 is the same -- you might be wondering why he used '\0\0\' * n instead of the more intuitive-looking [0] * n to initialize the array. Well, it's quite faster:Of course, you can do better (for type-codes other than 'b') by feeding a bytearray to array. One way to initialize a bytearray is by providing an int as the number of items to initialize with null bytes:but, if I remember correctly, the bytearray(int) way of initializing a bytearray might get deprecated in 3.7+ :-).
The array class accepts a format character (called a typecode) followed by an initializer. H means an unsigned short, with a minimum size of 2 bytes so, '\0\0' satisfies that. The * n part is to initialize the entire array to NULL bytes.
It looks like this function returns an array made of 16-bits; thus \0\0 probably stands for creating two bytes (which is 16 bits) of data. In other words, it returns n words of two bytes.


Answer URL
https://docs.python.org/3/library/array.html#array.array
https://docs.python.org/3/library/functions.html#bytearray
