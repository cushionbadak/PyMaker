Natural Text
Python's typing module defines a number of duck types, e.g., typing.SupportsAbs to represent any type that implements the __abs__ special method.Is it possible to define custom duck types in a way such that I can use them as valid type annotations?For example, I would like to be able to annotate that an argument should be a duck-type equivalent of a threading.Lock, i.e., any object that implements acquire and release methods. Ideally, I could annotate such an argument as SupportsAcquireAndRequire or DuckLock, rather than object.
You can define an abstract base class (ABC) to specify the interface:This is basically how the protocols (like typing.SupportsAbs) are implemented, albeit without directly using ABCMeta.By giving the ABC a __subclasshook__ method, you can use it in isinstance() and issubclass() tests, which is more than good enough for tools like mypy:


Answer URL
https://docs.python.org/3/library/abc.html
https://docs.python.org/3/library/abc.html#abc.ABCMeta.__subclasshook__
