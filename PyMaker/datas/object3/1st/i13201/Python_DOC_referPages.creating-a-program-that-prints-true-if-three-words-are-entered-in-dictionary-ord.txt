Natural Text
I am trying to create a program that asks the user for three words and prints 'True' if the words are entered in dictionary order. E.G:Here is my code so far:
If you work on a list of arbitrary length, I believe using sorted() as other answers indicate is good for small lists (with small strings) , when it comes to larger lists and larger strings and cases (and cases where the list can be randomly ordered), a faster way would be to use all() built-in function and a generator expression (This should be faster than the sorted() approach). Example -Please note, above would end up calling str.lower() on every string (except for first and last) twice. Unless your strings are very large, this should be fine. If your strings are really very large compared to the length of the list, you can create another temporary list before doing the all() that stores all the strings in lowercase. And then run same logic on that list.You can create your list (by taking inputs from the user) using a list comprehension, Example -Timing results of the above method vs sorted() (modified code of sorted() to work case-insensitively) -Result -For cases that should return True (that is already sorted lists) the using sorted() is quite faster than all() , since sorted() works well for mostly-sorted lists.For cases that are random, all() works better than sorted() because of the short-circuiting nature of the all() (it would short-circuit when it sees the first False ).Also, there is the fact that sorted() would create a temporary (sorted list) in memory (for comparison), whereas all() would not require that (and this fact does attribute to the timings we see above).Earlier answer that directly (and only applies to this question) you can simply directly compare the strings as such, you do not need another string/list for alphabets. Example -Or if you want to compare only the first characters (though I highly doubt that) -To compare the strings case-insensitively, you can convert all the string to lowercase, before comparison. Example -Or the simpler -
Yes, lists do not have the find method. Though you don't even have to use lists. The <= (as well as >=) operator compare sequences lexicographically. In addition, Python supports chained comparisons. Here's how I'd write it:If there're more than 3 words, you'd gather them into a list, sort it and compare it against the source list. Example:Both of these approaches will work reasonably well for small number of words. If the number of words is big, you should consider using a short-circuiting solution using the built-in all function and a generator expression:which is an efficient generalization of the first solution.If you want to perform case-insensitive comparison, use str.lower (or str.casefold, in Python 3.3+).Example for the first code snippet:Example for the list-based approaches:
Store the words in a list and then check it with sorted(). You can make it ignore case by specifying a key that looks at the lowercase version of each word for comparison:


Answer URL
https://docs.python.org/3/library/functions.html#all
https://docs.python.org/3/library/stdtypes.html#str.lower
https://docs.python.org/3/library/stdtypes.html#str.casefold
