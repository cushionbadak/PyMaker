Natural Text
I understand that given an iterable such asI can turn it into a list and slice off the ends at arbitrary points with, for exampleor reverse it withor combine the two withHowever, trying to accomplish this in a single operation produces in some results that puzzle me:Only after much trial and error, do I get what I'm looking for:This makes my head hurt (and can't help readers of my code):How can I make sense of this? Should I even be pondering such things?FWYW, my code does a lot of truncating, reversing, and listifying of iterables, and I was looking for something that was faster and clearer (yes, don't laugh) than list(reversed(it[1:-2])).
This is because in a slice like - start is inclusive, resultant list starts at index start.stop is exclusive, that is the resultant list only contains elements till stop - 1 (and not the element at stop).So for your caseit[1:-2] - the 1 is inclusive , that means the slice result starts at index 1 , whereas the -2 is exclusive , hence the last element of the slice index would be from index -3.Hence, if you want the reversed of that, you would have to do it[-3:0:-1] - only then -3 would be included in the sliced result, and the sliced result would go upto 1 index.
The important things to understand in your slices areStart will be included in the sliceStop will NOT be included in the sliceIf you want to slice backwards, the step value should be a negative value.Basically the range which you specify is a half-open (half-closed) range.When you say it[-3:0:-1] you are actually starting from the third element from the back, till we reach 0 (not including zero), step one element at a time backwards.Instead, you can realize the start value like this
I think the other two answers disambiguate the usage of slicing and give a clearer image of how its parameters work. But, since your question also involves readability -- which, let's not forget, is a big factor especially in Python -- I'd like to point out how you can improve it slightly by assigning slice() objects to variables thus removing all those hardcoded : separated numbers. Your truncate and reverse slice object could, alternatively, be coded with a usage implying name :In some other config-like file. You could then use it in its named glory within slicing operations to make this a bit more easy on the eyes :This might be a trivial thing to mention, but I think it's probably worth it.
Why not create a function for readability:
A good way to intuitively understand the Python slicing syntax is to see how it maps to the corresponding C for loop.A slice likegives you the same elements asThe special cases are just default values:a defaults to 0b defaults to len(x)c defaults to 1Plus one more special case:if c is negative, then a and b are swapped and the < is inverted to a >


Answer URL
https://docs.python.org/3/library/functions.html#slice
