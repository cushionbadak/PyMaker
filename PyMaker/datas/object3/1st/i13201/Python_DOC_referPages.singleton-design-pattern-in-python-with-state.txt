Natural Text
I'm trying to implement a singleton in Python, and after reading this post I find myself even more confused than before. There are way too many answers, and many of them have received their fair number of votes. Now the problem may not be that I have a singleton, but the fact that the state has to be initialized only once. I tried a couple of implementations SingletonA and SingletonB but I can't manage this to work. For my real problem, the __init__ function is quite heavy so I have to do it only once. This is what I have so far:Now this is printing:Pointing to the fact that indeed I have a singleton class, but I want to avoid the creation of state. 
This cannot work, because __init__ method is called after object creation through __new__. Extract from Python Language ReferenceIf __new__() returns an instance of cls, then the new instanceâ€™s __init__() method will be invoked like __init__(self[, ...]), where self is the new instance and the remaining arguments are the same as were passed to __new__().You should instead have a special initialization method distinct from __init__ and called at _instance creation.Code could be (no need for a parent class, so I omitted it):But in fact, you can simply build the instance at declaration time:Both ways would cause following output (for SingletonA part):Completely removing the __init__ method would cause one single initialization.The annotation version could be:simply storing the singleton instance in the class itself 
If I understand you correctly, this is all what you need:All instances will share the same data and this data will be computed only once.Please note that you can refer to the shared data as self._shared_dict when reading, but must use the full name of a class attribute self.__class__._shared_dict when writing to it.


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-names
