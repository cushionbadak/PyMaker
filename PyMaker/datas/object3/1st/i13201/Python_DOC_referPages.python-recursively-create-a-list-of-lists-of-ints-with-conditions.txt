Natural Text
I want to create all possible distributions of n items. This refers to the commonly known pigeonhole principle.The following values are the result of Microsoft Excel:I already have some code, but there are some issues with deleting the temporary lists.With this I get good results printed out after "end: ", but some values like [1, 2] (calling with n = 3) are missing. Additionally to this the values are not appended to my all_distributions.I'm interested in the way I tried to solve this problem. Is this a good approach or am I absolutely wrong?
The main problem with your code is that the list all_distributions ends up containing many references to the same input list distribution. When you call all_distributions.append(distribution), the list distribution is not copied into the list all_distributions, but merely a reference to the list is appended. You can fix this by explicitly inserting a copy: all_distributions.append(list(distribution))A minimal fix to your code is to insert copies, remove distribution.clear() in the base case, and adding distribution.pop() after the recursive call:Outputs: [[1, 1, 1], [1, 2], [2, 1], [3]]A better way is to avoid using distribution.append, and instead using the plus operator on lists, like so:The plus operator on lists creates a new list by concatenating the two given lists. In this case, we are concatenating a single element i on the right side of distribution to get a new copy containing the elements in distribution followed by i.Another improvement is to avoid the global variable all_distributions, and instead return the list of distributions:Outputs: [[1, 1, 1, 1], [1, 1, 2], [1, 2, 1], [1, 3], [2, 1, 1], [2, 2], [3, 1], [4]]


Answer URL
https://docs.python.org/3/tutorial/datastructures.html
