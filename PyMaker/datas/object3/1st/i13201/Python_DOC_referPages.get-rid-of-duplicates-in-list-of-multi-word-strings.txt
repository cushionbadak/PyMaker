Natural Text
I have a parallel corpus in the format And I have a list of bilingual terms extracted from the parallel corpus, in this format What I want is to fistly create bigrams for translation pair for every line in the terms list, and then calculate the statistics for every pairs. To create the pairs I tried thisThsi gives the following outputThe following step is to calculate la frequency of every pair of the above pairs. For doing this I have to separate for every pair the source language and the target language, i.e, for the pair I have to separate 'expression liberty' from 'libertà di espression'To do this I used this codeThis will giveFor every item in the bilingual pairs I have to know their statistics in the parallel corpus, i.e, for the ('expression liberty', 'libertà di espression') I will know for every line in the parallel corpus how many times  'expression liberty' and 'libertà di espression' co occur, how many times only 'expression liberty' occurs,how many times only 'libertà di espression' occurs and how many times neither of them occurs. This is my try
You really didn't have to go through all that complex code with conversions to strings and lists. using python gives you much more power than that.now english_words is now an unordered set of unique words extracted from bigrams (saying unordered because you don't guarantee that they come in the order they were stored at)now printing english_words will produce:Edit: Second part of your questionThe code you wrote to extract the frequencies should work, however it is unnecessary complicated. You already made bigrams from the parallel corpus, that means you already have everything from the parallel corpus into a friendly format; a list of tuples.as a general practice for making count statistics, you create a dictionary (hashMap) with a key being the thing you want to count, and the value being the count itself. then iterate over the list of bigrams and if the item is not in the dictionary you add it once, if it is in the dictionary you just increment it's counter. this goes like this:now by iterating over each dictionary you know the frequency of each term. and of course you can deduce the frequency of non-term by subtraction (I am not sure why in the first place are you counting the frequency where a term does not appear)


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
