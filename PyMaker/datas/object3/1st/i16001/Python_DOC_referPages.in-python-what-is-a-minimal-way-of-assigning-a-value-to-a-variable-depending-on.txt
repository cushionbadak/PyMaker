Natural Text
I want to access a few values in a dictionary in a way something like the following:However, it may be that some of these keys may not exist in the dictionary -- let's say "--files" might not be in it. If the key does not exist in the dictionary, I want the value of the variable to be set to None, i.e. self.files = None. At present, I am doing something like the following:Would there be some way of doing this that would be a bit more minimal, efficient or Pythonic? I would prefer this to be done in a one-liner for clarity. Thanks!
Use get and an empty string as default and substitute with None in case of empty string or empty list:This way split is always called on a valid object, and you get None if the object is empty.EDITActually the tests I made used split() which uses a different algorithm than split(",") So to work, it should beAnother way to do it using set operations:but then self.files is a set and not a list.AFTERTHOUGHT:what I would do is define a small helper classand then simply:See with that class defined:
use get:
The Pythonic way to get a dictionary key with default value if the key isn't present is get, e.g.As for the files option, you could use the same approach and do the split afterwards:or use a try/except block:or, if you really want it on one line, use a conditional expression:I'm guessing opinions on which way to handle "--files" is most Pythonic will differ. I would go with the first case above (use get and check do the split afterwards) because it's consistent with using get which is definitely the Pythonic way to handle the general case of a not-found dictionary value, and I find this way of handling the split logic most obvious and easy to understand.Note that since you ask about being Pythonic, I used underscore_case instead of camelCase. That's the Python way for variable naming.
I would take a step back and ask "Why am I storing a comma-delimited string in self.options['--files'] instead of a list in the first place?". If you did that, then your code would simply beWhatever populates self.options should split the list first.
In general, the Pythonic way is to use a try-except block, especially when you expect the operation to succeed most of the time. See EAFP.If you expect it to succeed most of the time, you can check first as you have done (see LBYL). In general, this isn't really a big deal, use whatever method makes more sense in your application.


Answer URL
https://docs.python.org/3/glossary.html#term-eafp
https://docs.python.org/3/glossary.html#term-lbyl
