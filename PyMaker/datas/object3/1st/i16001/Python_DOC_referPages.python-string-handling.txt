Natural Text
I have started coding in python again, and I stumbled upon a strange behaviour: I have two strings which are exactly the same (see code below), but one of these strings is stored in a file, the other one is hardcoded. Now my program is running, but the string from the file looks completely different in the output compared to the hardcoded string. Why?Output:My file looks like:Edit: Solution to my problem was: Either remove '\r' in the hardcoded message or add them in my file. But after I need them for further processing, I simply added them in my file which solved my problem.
When Python reads a text file, line separators are translated from the platform default to \n. On Windows lines are separated with \r\n, but in Python your lines will end with \n.Your hardcoded string, however, contains \r carriage return characters, the lines read from the file won't. And if the last line doesn't have a line separator, you'll end up removing the last character anyway, unconditionally. Use line.rstrip('\n') to remove newlines, but only if present.Whenever you think you have the same string but Python tells you something different, take a look at the output of the repr() function for those strings (use ascii() on Python 3). You can also use the difflib.ndiff() function to get a quick indication of what might be different.In your case, it appears that you are not removing (enough) newline characters, and your test message contains \r characters instead. That means the message2 text will replace itself line by line as it won't advance to the next line. Use \n instead; you could even use a triple-quoted string to preserve newlines:
Try reading the file properly, not via stdin, to avoid control-characters messing with it:


Answer URL
https://docs.python.org/3/library/functions.html#ascii
