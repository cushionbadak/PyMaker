Natural Text
I want to provide automatic string formatting in an API such that:can be replaced with the values of attributes called out in the formatting string.How do I extract the keyword arguments from a Python format string:
You can use the string.Formatter() class to parse out the fields in a string, with the Formatter.parse() method:Demo:You can parse those field names further; for that you can use the str._formatter_field_name_split() method (Python 2) / _string.formatter_field_name_split() function (Python 3) (this internal implementation detail is not otherwise exposed; Formatter.get_field() uses it internally). This function returns the first part of the name, the one that'd be looked up on in the arguments passed to str.format(), plus a generator for the rest of the field.The generator yields (is_attribute, name) tuples; is_attribute is true if the next name is to be treated as an attribute, false if it is an item to look up with obj[name]:Demo:Take into account that this function is part of the internal implementation details of the Formatter() class and can be changed or removed from Python without notice, and may not even be available in other Python implementations.
If all placeholders are named, a special dictionary could be used to intercept which keys are tried to be accessed and logged to an array.Note that if there are unnamed placeholders, an IndexError will be raised by .format() (tuple index out of range).
Building off Martijn's answer, an easier format for the comprehensive list that I've used is:It's functionally exactly the same, just much easier to digest.
You can do "path/to/{self.category}/{self.name}".format(self=self). You could thus work with those kwargs in __getattr__.


Answer URL
https://docs.python.org/3/library/string.html#string.Formatter
https://docs.python.org/3/library/string.html#string.Formatter.parse
https://docs.python.org/3/library/string.html#string.Formatter.get_field
