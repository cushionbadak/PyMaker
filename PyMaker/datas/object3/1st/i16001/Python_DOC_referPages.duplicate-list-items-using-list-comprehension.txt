Natural Text
I would like to duplicate the items of a list into a new list, for examplegives [[1, 1], [2, 2]], whereas I would like to have [1, 1, 2, 2].I also found that I could use:but it seemed like overkill to use two for loops. Is it possible to do this using a single for loop? 
You want itertools.chain.from_iterable(), which takes an iterable of iterables and returns a single iterable with all the elements of the sub-iterables (flattening by one level):Combined with a generator expression, you get the result you want. Obviously, if you need a list, just call list() on the iterator, but in most cases that isn't needed (and is less efficient).If, as Ashwini suggests, you want each item len(a) times, it's simple to do that as well:Note that any of these solutions do not copy i, they give you multiple references to the same element. Most of the time, that should be fine.
Your two-loop code does not actually do what you want, because the inner loop is evaluated for every step of the outer loop. Here is an easy solution:
You could use xrange and using a generator expression or a list comprehension
if you do not mind the order:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
