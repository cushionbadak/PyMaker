Natural Text
I have a homework assignment, and I have to make four different turtles move like they are planets around the sun. I have it all written, its just a matter of making the turtles draw at the same time. I was wondering if there was a relatively easy way to make them start around the same time (within reason)? Anyway, here's the code:Thanks in advance!
In general, if you want to do multiple things at the same time, there are two options:Preemptive multithreading, where you just create a thread for each thing and they all try to work at full speed and the computer figures out how to interleave that work.Cooperative scheduling: you do a small piece of work for one thing, then a small piece for the next, and so on, then come back to the first one.In this case, it's the second one that you want. (Well, you might want the first, but you can't have it; tkinter, and therefore turtle, can only run on the main thread.) Draw, say, the first 1° of each circle, then the next 1° of each circle, and so on.So, how do you do that? The circle method has an optional extent parameter, which is an angle (in degrees) to draw. So, you can do this:Of course the smaller you make that extent value, the more "steps" each turtle is taking, so the slower they will take to orbit.Also, I'm not sure you really want to use speed the way you're using it. That causes each move to animate more slowly. It doesn't affect how quickly they orbit around the sun, it just affects how long each step takes to draw. So I think what you really want to do here is leave all the speeds at 0 (no animation delay), but move the faster planets by a larger extent each step:Of course this means Mercury will end up orbiting the sun 7.5 times, while Mars will only orbit once… but that's exactly what you want, right?
Since none of the previous answers mention turtle's own ontimer() for running the simulation, I decided to do an implementation that uses it and makes the whole problem more data-oriented:OUTPUT SNAPSHOT IN TIME
In my other answer, I said that you have to do some kind of cooperative scheduling, because tkinter isn't thread-safe. But that isn't quite true. tkinter is thread-safe, it just doesn't have any kind of dispatching mechanism to post events on the main loop from a background thread, so you have to add a queue or some other way to do it.I'd definitely not recommend using threads here, but it's worth seeing how it would work.Allen B. Taylor's clever mtTkinter library wraps all of the magic up for you. It doesn't work with Python 3, but I've ported it, and you can get it as mttkinter on GitHub. The module have any installer; you'll have to copy it into the same directory as planets.py. But then you can do this:
turtle.py ends with two test demos. The second one ends with one turtle 'tri' chasing another 'turtle'. It does what abarnet suggests in the first post -- increments within a loop.The turtledemo package has multiple examples to learn from. python -m turtledemo is the easy way to start the viewer.  There are a couple of bugs that have been fixed for future releases.
Methods posted by other users work well. However, I did a similar model of a solar system with object oriented design and what I did was create a class called System where I create a system with a desired height and width and created a stepAll function which has a list of agents and advances all agents in that list one 'step':Then, I created a Planet class, and made the planets agents, and defined what their step would be in a Step function.Then in my main() function I initialized all the planets with their respective values and said:This accomplishes your goal and also makes it easier to add another planet later with the specific parameters you want it to contain by just calling the Planet Class, instead of drawing a completely new planet and trying to individually move it along with the others. Hope this helps someone!


Answer URL
https://docs.python.org/3/library/turtle.html#turtle.circle
