Natural Text
Is there a way (preferably using the ast module) to know if a function has a required number of arguments? For example, if a user interface allows a user to insert a python expression for example "sum(x)" but the user has mistakenly typed "sum()" is there a way to validate that expression before runtime?I have called ast.dump on every node in the symbol tree but the information on these symbols seems insufficient for this kind of analysis? For example:yields:Which doesn't really differ from a function like print() which does not require a specific number of arguments.
You cannot see from a call expression what arguments the callable expects. Python leaves this entirely to the callable at runtime.For static code analysis your only option is to resolve the callable (hoping that it is not too dynamic in nature, e.g. will change at the runtime), and for C-defined objects have your own database of signatures. This is the route the Komodo CodeIntel library takes (OSS, used in other projects such as SublimeCodeIntel). C-based extensions are supported with CIX files, which essentially contain callable signatures.At runtime, you can use inspect.signature() to introspect call signatures. C functions are only partially supported at the moment, only those that use the Argument Clinic have signature info stored, see What are __signature__ and __text_signature__ used for in Python 3.4


Answer URL
https://docs.python.org/3/library/ast.html
https://docs.python.org/3/library/inspect.html
