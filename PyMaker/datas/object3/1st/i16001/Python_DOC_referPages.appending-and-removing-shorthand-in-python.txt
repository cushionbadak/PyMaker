Natural Text
I notice that in python you can append to a list with += do this:Which is the same as doing s.append('d'). But there is not an equivalent for s.remove('a'):So what is happening when you use +=?
+= on a list is not the same as doing s.append. It's the same as doing s.extend. It only happens to look the same in this case because a string is a sequence of characters, so a one-character string is a sequence of itself. In general, it's very different. Try it with numbers, or 3-character strings.Anyway, "what is happening when you use +=" goes like this:First, the statement a += b looks up the method a.__iadd__. If it exists (as it usually does on objects that can be mutated in-place, like list), it's transformed into this code:Otherwise (as with immutable objects, like int), it's transformed (loosely speaking) into:list.__iadd__ exists. In CPython, of course, it's implemented in C, but the equivalent Python code is pretty trivial:That extend method is equivalent to this:So, your s += 'd' effectively does this:Obviously under the covers a lot of things are optimized; extend doesn't have to look up the append method dynamically or call it in a loop (possibly expanding the list's storage multiple times), it just has to have the same visible effect as if it had done so.For more on how this works, see the following sections of the documentation:Emulating numeric types explains exactly how a += b is interpreted.Emulating container types explains how this specifically applies to containers.Sequence Types â€” list, tuple, range explains what list.__iadd__, list.extend, and list.append all do.collections.abc.MutableSequence shows what operations mutable sequences in general are expected to support.Augmented assignment statements explains the details on how += is parsed (note that it's not an operator in Python, unlike many other languages, but rather a special kind of thing that can only appear in statements, not expressions).


Answer URL
https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types
https://docs.python.org/3/reference/datamodel.html#emulating-container-types
https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range
https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes
https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements
