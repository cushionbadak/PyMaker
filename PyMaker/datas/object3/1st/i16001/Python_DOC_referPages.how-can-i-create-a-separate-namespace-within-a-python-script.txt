Natural Text
I would like to store a bunch of variables under a Python namespace without creating a separate module. I notice that the result of ArgumentParser's parse_args() is a argparse.Namespace object. You can access the arguments through dot-syntax.How can I create the equivalent of an argparse.Namespace? I know I can do something similar with a dict but I would like to use dot-syntax. Is there any built-in class that just lets you assign arbitrary attributes?
Starting with python3.3 you can use types.SimpleNamespace.However an alternative is simply:The full code for SimpleNamespace isn't much longer.Note that you cannot simply use an object instance:This is because instances of object do not have a __dict__ attribute:Which means you cannot set the attributes of an instance of object. Any object subclass that does not have the __slots__ attribute set does have the __dict__ which is used (by default) to store/retrieve attributes:For further information about attribute setting/lookup you should learn about descriptors.
It sounds like you want a python class. See the docs.Depending on what you want exactly, you can define a bunch of variables as attributes of a class (either a variable of an instance or of the class itself) and access them that way.
If you want "the equivalent of an argparse.Namespace", use argparse.Namespace:
A class can be used as a namespace, where the variables are class members:To prevent callers from trying to instantiate, you can use a baseclass like:And use it like:
If I'm understanding correctly, you want to dynamically add attributes to it.  For example, a class parses command-line flags you access them directly like args.verbose, right?  If so, you may be thinking of setattr() that lets you add arbitrary attributes.  


Answer URL
https://docs.python.org/3/library/types.html#types.SimpleNamespace
