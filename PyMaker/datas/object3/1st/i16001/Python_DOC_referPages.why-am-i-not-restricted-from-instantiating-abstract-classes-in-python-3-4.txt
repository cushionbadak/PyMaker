Natural Text
I have written a Python script and just found out that Python 3.4 does not restrict an abstract class from being instantiated while Python 2.7.8 did.  Here is my abstract class in the file named Shape.py.  Now I created another class that inherits from the abstract class Shape:Filename: Circle.py Now in my Main.py:This Main.py gives errors on commented areas in Python2.7.8 but works fine on Python3.4.Output on Python3.4:  Why is this happening? This is not what abstraction is! Is it?  Or has there been any new way introduced for abstraction in Python 3.4?  Can any one give me the link of official documentation for python 3.4?
In Python 3, you declare a metaclass differently:See the Customizing class creation documentation:The class creation process can be customised by passing the metaclass keyword argument in the class definition line, or by inheriting from an existing class that included such an argument.All examples in the abc module documentation for Python 3 also use the correct notation.This was changed to give metaclasses a chance to get involved with class creation earlier than was possible in Python 2; see PEP 3115.The __metaclass__ attribute has no special meaning anymore, so you didn't actually create a proper abstract class.Demo with Python 3.4:


Answer URL
https://docs.python.org/3/reference/datamodel.html#metaclasses
https://docs.python.org/3/library/abc.html
