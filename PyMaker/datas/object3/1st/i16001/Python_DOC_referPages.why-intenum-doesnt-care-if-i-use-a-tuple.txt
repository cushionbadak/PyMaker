Natural Text
Have noticed someone write an enum like this:And I thought it was a mistake which would make a runtime error because dog's value was actually a tuple.  To my surprise it works, and Animal.dog.value == 1.  This works:with the empty tuple being converted to integer 0 somehow (possibly argument splatting to a call to int?).  This doesn't work though:We get TypeError: int() argument must be a string or a number, not 'list'.  I see this on both python3 and the enum34 backport to python 2.  How/why IntEnum or his metaclass implicitly converts tuples to integers? 
I had to look into enum.py to understand what happens. In fact, when you enter a value that is not a tuple, it is converted to (value,), and if a tuple it is left unchanged. Then for a IntEnum the actual value is computed with int(*args).Ok, now what happens :if you give a simple int : int(10) = 10, all is fineif you give a tuple containing a single int : conversion leads to same caseif you give a list : int([...]) gives an errorif you give a tuple (string_value, base) example ('1f', 16) : you correctly get 31 !But I could not find any trace of it in module documentation, and I thing it must be considered as an implementation detail ...
To support __new__ and __init__ methods, your values are converted to tuples and passed as arguments to the __init__ or __new__ method to produce the values of the enum. To support multiple arguments, any existing tuples are not converted.In Allowed members and attributes of enumerations it states:Note: if your enumeration defines __new__() and/or __init__() then whatever value(s) were given to the enum member will be passed into those methods. See Planet for an example.And in the Planet example:If __new__() or __init__() is defined the value of the enum member will be passed to those methods.For your case then, this happens:Single non-tuple values are converted to a tuple, so 2 becomes (2,)Tuple values are left untouched, so 1, or () stay tuples.after which the int.__new__ method is called as int.__new__(*args).Now what happens:int(1,) is 1.int(2,) is 2.int() is 0.You can extend this to support arbitrary base integers:As an interesting side note, to make matters just a little more complicated, if you mix in tuple with Enum, the tuple value is wrapped in another tuple so you can still pass it to tuple.__new__ as a single argument.


Answer URL
https://docs.python.org/3/library/enum.html#allowed-members-and-attributes-of-enumerations
https://docs.python.org/3/library/enum.html#planet
