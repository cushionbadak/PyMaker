Natural Text
For example, i have these files with classes that i want to use (only example, maybe not working).And i have a file which creates Threads If i create logging instance like in my example, all log are written in a single file.How can I, for every thread, create its own logging instance with logging to its own file ? Regards, Alex.
The logger name (the string passed to the getLogger function) can be anything you want. As the docs explain:The name is potentially a period-separated hierarchical value, like foo.bar.baz (though it could also be just plain foo, for example). Loggers that are further down in the hierarchical list are children of loggers higher up in the list. For example, given a logger with a name of foo, loggers with names of foo.bar, foo.bar.baz, and foo.bam are all descendants of foo. The logger name hierarchy is analogous to the Python package hierarchy, and identical to it if you organise your loggers on a per-module basis using the recommended construction logging.getLogger(__name__). That’s because in a module, __name__ is the module’s name in the Python package namespace.So, using __name__ as the name is recommended, but not required. And in fact you're already explicitly violating it:So, you could just use a separate name per thread, by putting a thread ID or name into the logger name. For example:Or, in your case, since you seem to have a unique task_id for each thread, you can just use that instead of the thread ID.Of course this means you have to actually use the logger; you can't just call logging.debug. And you can't rely on the basicConfig; you're going to need to explicitly configure the logger in each thread. Since each thread creates its own independent ControllerOne instance, the obvious place to do that is in ControllerOne.__init__; in that function, you can call getLogger with a logger name that incorporates the thread or task ID, create and set a FileHandler that also incorporates the thread or task ID in the name, and store it as self.logger. Then, whenever you need to log something, you just do self.logger.debug(…).If that all sounds like gobbledegook to you because you have no idea what a FileHandler is, you probably need to read at least the basic tutorial in the HOWTOs, but the advanced tutorial and cookbook are also very useful.


Answer URL
https://docs.python.org/3/library/logging.html#logger-objects
https://docs.python.org/3/howto/logging.html#logging-basic-tutorial
https://docs.python.org/3/howto/logging.html#logging-advanced-tutorial
https://docs.python.org/3/howto/logging-cookbook.html#logging-cookbook
