Natural Text
I was wondering what is the correct way to check a key:value pair of a dict. Lets say I have this dictI can check a condition like thisbut I feel like there is a more elegant way that takes advantage of the dict data structure.
What you're doing already does take advantage of the data structure, which is why it's "the one obvious way" to do what you want to do. (You can find examples like this all over the tutorial, the reference docs, and the stdlib implementation.)However, I can see what you're thinking: the dict is in some sense a container of key-value pairs (even if it's only a collections.Container of keys…), so… shouldn't there be some way to just check whether a key-value pair exists?Up to Python 2.6, there really isn't.* But in 3.0, the items() method returns a special set-like view of the key-value pairs. And 2.7 backported that functionality, under the name viewitems. So:But I don't think that's really clearer or cleaner; "items" feels like a lower-level way to think of dictionaries than "mappings", which is what both your original code and smci's answer rely on.It's also less concise, it doesn't work in 2.6 or earlier, and many dict-like mapping objects don't support it,** and it's and slightly slower on 2.7 to boot, but these are probably less important, and not what you asked about.* Well, there is, but only by iterating over all of the items with iteritems, or using items to effectively do the same exhaustive search behind your back, neither of which is what you want. ** In fact, in 2.7, it's not actually possible to support it with a pure-Python class…
If you want to avoid throwing KeyError if dict doesn't even contain 'key1':(However, throwing an exception for missing key is perfectly fine Python idiom.)Otherwise, @Cyber is correct that it's already fine! (What exactly is the problem?)
There is a has_key functionThis returns a boolean true or false.Alternatively, you can have you get function return a default value when the key is not present.Modified typo* 


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.items
https://docs.python.org/3/library/stdtypes.html#dict-views
