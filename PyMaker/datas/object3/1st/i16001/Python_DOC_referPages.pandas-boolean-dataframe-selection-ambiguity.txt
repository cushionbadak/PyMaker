Natural Text
EDIT: Fixed values in tables.Let's say I have a pandas dataframe df:So now I try to do some Boolean indexing:So now I try to do the logical OR of thos to conditions as the indexing condition:I've researched this a bit, its a basic feature that the developers of numpy decided certain conditions may be ambiguous depending in the any or all case.  What I don't get is why checking if the value is > 0.5 is valid and checking if its < 0 is valid, but checking if its > 0.5 or < 0 is INVALID.  I've also tried mixing up the boolean syntax, but this error is in escable.  Can some one explain why doing the OR creates an ambiguous case?
It is not possible for custom types to override the behavior of and and or in Python.  That is, it is not possible for Numpy to say that it wants [0, 1, 1] and [1, 1, 0] to be [0, 1, 0].  This is because of how the and operation short-circuits (see the documentation); in essence, the short-circuiting behavior of and and or means that these operations must work as two separate truth values on the two arguments; they cannot combine their two operands in some way that makes use of data in both operands at once (for instance, to compare the elements componentwise, as would be natural for Numpy).The solution is to use the bitwise operators & and |.  However, you do have to be careful with this, since the precedence is not what you might expect.
Since the logical operators are not overridable in python, numpy and pandas override the bitwise operators.This means you need to use the bitwise-or operator:
You need to use the bitwise or and put the conditions in parentheses:The reason is because it is ambiguous to compare arrays when maybe some of the values in the array satisfy the condition, that is why it becomes ambiguous.If you called the attribute any then it would evaluate to True.The parentheses is required due to operator precedence.Example:


Answer URL
https://docs.python.org/3/reference/expressions.html#boolean-operations
