Natural Text
I am confused as to how this code actually works:If I were to just run the print statement without the for loop, but leaving everything else, m isn't defined. How can I run a for loop after the m.start() method is called, and create the variable in the for loop? If anybody could just break down this code and explain what is actually happening I would be really appreciative.
Here's the same code, written without the use of a generator expression (that one-liner for loop)That's pretty straight forward, so let's get into how we're representing that in your code snippet.re.finditer('p', word) returns an iterable we're going to loop over.m.start() for m in re.finditer('p', word) is the generator expression. Think of it as saying "The value returned by m.start() for each of the items m in the iterable returned by re.finditer('p', word)". Don't get caught up on the fact we use m before reading it - that's just Python's syntax being natural language inspired rather than operation-oriented.[m.start() for m in re.finditer('p', word)] iterates the generator we defined, putting the values into a list. A common mistake is assuming that we can treat the generator as a list - it can't be indexed and can only be iterated once.Hope that helps!


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
