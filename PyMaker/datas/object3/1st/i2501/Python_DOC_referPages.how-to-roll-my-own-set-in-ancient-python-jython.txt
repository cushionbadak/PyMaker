Natural Text
Geeks/Nerds/Fellow Pythonists lend me your ears!I wrote a script in Python 2.7 that uses the set() function. This is a built in data structure for only storing unique values. However I am running the script in a different environment. I know I should of coded in the same environment as the production environment. So in the production environment there is an ancient version of python running. From what I understand this is Python 2.2. Also, this Python interpreter is running on a Java Virtual Machine (JVM) which makes this Jython. Very cool. :) Anyway for whatever reason the set() data structure is not included in this version of Python. Is there anyway I can create my own set using a list and then looking for only unique values? This type of algorithm writing is currently over my head. Could someone point me in a helpful direction? When running this code I see that the version is Python 2.2. This code returns: (2, 2, 1, 'final', 0)My code that throws the error is: The error I receive is as follows: 
First, you may not be stuck on Jython 2.2. It looks like 2.2.1 is what comes with your WLST, but Google suggests that you may be able to use WLST with Jython 2.7. If you can use 2.7, that's likely to be a much nicer environment than 2.2. (It's still pretty dated by non-Jython standards, but it beats the heck out of 2.2.)If that's not viable, still, don't use a list. Back when set didn't exist, the way to do sets was with a dict you'd ignore the values of. Same time complexity as a set, unlike what you'd get if you tried to use list for the job. The old sets module that came before the built-in set type was actually implemented as a wrapper around dicts, and if you were on 2.3, I'd recommend sets.Set, but you're on 2.2.
I would recommend using a dict's keys for your set. Just set the values to something lightweight, like 1.
Python 2.3-2.7 have a sets module (which is deprecated in 2.6+, because the new builtins set and frozenset do the same thing but better).You don't have this in 2.2, but the module is implemented in pure Python. So—assuming you respect the Python license—you can just copy it from the 2.3 source into your project. In fact, I have some code in an ancient project that starts with this:… which implies that just copying 2.3's sets.py into your project as sets23.py works for 2.2. But I don't have a 2.2 to test on, so… I won't promise that it works without any porting, but I think it does.Alternatively, those historical pre-2.3 set classes mentioned in the sets docs are still available in the ActiveState recipes collection. Not everything has been migrated to the GitHub repo (or, if it has, the new search isn't complete), but I can see 106469_Yet_another_Set_class_for_Python, which is a minor fork of the original Greg Wilson implementation that sets is also a fork of.


Answer URL
https://docs.python.org/3/license.html
