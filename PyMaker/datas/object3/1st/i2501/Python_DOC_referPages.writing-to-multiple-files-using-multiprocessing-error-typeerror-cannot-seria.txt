Natural Text
I'm trying to write to file the result from multiprocessing (4 cores/processes). Since the CPU cores work simultaneously, I thought of making 4 files, 0.txt, 1.txt, 2.txt and 3.txt and keep it in a multiprocessing.Manager().list(). But I'm getting error, TypeError: cannot serialize '_io.TextIOWrapper' object.I've tried to populate the list with file handle inside the function too, like below.Both doesn't work and I understood there's something related to not able to serialize or unpickleable. But I don't know how to resolve this. Can someone suggest a solution?
Open the files in each process. Do not open them in the manager, you can't send open files from the manager process to the executor processes.If you are sharing filenames between processes, you want to prevent race conditions when writing to those files, you really want to use a lock per file too:Because the files are opened with with they are closed automatically each time, and they are opened in append mode so different processes don't clobber one another. You do need to remember to flush the write buffer before unlocking again.As an aside, you probably want to look at the process pools rather than do your own manual pooling.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool
