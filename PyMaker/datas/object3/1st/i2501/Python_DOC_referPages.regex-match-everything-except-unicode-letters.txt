Natural Text
I have already asked a regex question regarding replacing specific patterns (Regex: Match a specific pattern, exclude if match is in a specific context). This is all done for preprocessing text data for training.Now I would like to use regex to replace anything except unicode letters in a pandas data frame. I have usedhttps://regex101.com/https://regexr.com/to get the regex expression which seems to solve my problem \p{^L}+. I realised later that I have found the expression which would work in Perl (Perl Compatible Regular Expressions [PCRE]) not necessarily in Python. I have found the regex package which supports this expression too. However, pandas doesn't seem to support regex yet or I have used it the wrong way:Therefore I have tried to find ways to use the re package. I have found an answer here. So I have used it this way:It does replace a lot of special characters. It doesn't replace the expression with m to the power of 2 or the expression where we have a fraction. Both characters which I wouldn't see as letters but rather numerics or special characters in unicode. So how can I deal with those special characters? Is it possible with the re package? I wouldn't like to use specific unicodes to match those cases. If possible a general solution would be appreciated. 
The [\W\d_] is a regex that matches any non-word char (any char not matched with \w), it matches digits with \d and a _. Note that \d in a Unicode aware Python 3 regex only matches \p{Nd} (Number, decimal):Matches any Unicode decimal digit (that is, any character in Unicode character category [Nd]).The chars this pattern does not remove in your string belong to the \p{No} Unicode category (numbers, other).So, if you plan to also remove all those chars from \p{No}, you need to add them to the pattern:See the regex demo.You may see the chars listed on this page page.Also, be aware of a Number, letter category, see the \p{Nl} char list here.
This should work for you:Output:


Answer URL
https://docs.python.org/3/library/re.html
