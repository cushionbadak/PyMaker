Natural Text
I have a list aI want to get a list of strings like ["247400015203223811, DPF", "247400015203223813, ZPF"]combining every 2 strings to 1 stringI tried likeis this even possible?
You almost had it, you can use this list comprehension:Make sure you don't use the keyword list as a variable name, because it masks the python built-in type (I changed it to mylist instead)
I think slicing and zip can work nicely here:Can't test but this gets the idea across.
Of course is possible, and you almost got the answer:you simply have to add 1 to the index of the second word:  but you maybe want also to have a dot between the 2 words:
One common pattern to pair items in a list is to get an iterator over the list, then zip that iterator with itself.  From there, joining the pairs with ", " is as easy as calling str.join
You can slice the list, zip the slices and map them to join:This outputs:
Using list comprehension output:
Let's give you the one-line style solution, easily readable:  Note that:  list_[0::2] is the list of elements of list_ with even indexlist_[1::2] is the list of elements of list_ with odd index
zip the Iterator over the list together with itself in order to get pairs of two.Demo of the principle:Applying the principle in a list comprehension:No extra memory for slices or intermediary lists needed. No fiddling around with indexes.
You can use the grouper function from an itertools recipe. If you have an odd number of strings in your list, you can specify a fillvalue.


Answer URL
https://docs.python.org/3/library/itertools.html
