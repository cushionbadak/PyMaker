Natural Text
When I import a Python 3 package I created, the tab-completion for the package includes some packages that are imported by my package from other packages like pandas.The package has this basic structure:My __init__.py containsThe problem is that baz.py looks like thisThus, when I import foo, I get tab-completion options like foo.pd, which is not really a valid anything. For all foo.X I want X to be a function or class defined by me, not imported from another package.What is the best way around this? Should I add import pandas as pd to __init__.py? I know I could import pandas as pd inside of every single function, but that seems like overkill for anything more than a trivial example like this one.Is it just a problem with Jupyter's tab-completion?
Set __all__ in your __init__.py to define what should be exposed when you import * from your module:The only solution is for the package author to provide an explicit index of the package. The import statement uses the following convention: if a packageâ€™s __init__.py code defines a list named __all__, it is taken to be the list of module names that should be imported when from package import * is encountered. It is up to the package author to keep this list up-to-date when a new version of the package is released.For example:Alternatively, you can import pandas as _pd since names starting with _ won't be imported by default.


Answer URL
https://docs.python.org/3/tutorial/modules.html#importing-from-a-package
https://docs.python.org/3/reference/simple_stmts.html#import
https://docs.python.org/3/tutorial/modules.html#more-on-modules
