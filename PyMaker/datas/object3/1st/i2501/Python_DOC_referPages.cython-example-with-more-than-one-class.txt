Natural Text
I ask your help, because I'm trying to run a cython example a bit more complex than the one with one class that is possible to find in many tutorials (e.g. this guide ). I haven't found any "more advanced" tutorial, so I hope this question will be useful also for people that are trying to learn it a bit more in depth.I will write here the steps I took, hoping that someone will tell me where is my mistake.I have a Rectangle c++ class (I put here just the .h file to make it shorter):and a Group2 class. A very simple example class, whose constructor take as input 2 Rectangles:Then I create a grp2.pyx file with the definition of both Rectangle and Group2 class:Then I compile those two class in a static c++ library with command line:andTo finish i create the cython setup.py file that i call from command line:At this point I have the error in the _cinint_ of PyGroup2:Cannot convert Python object argument to type 'Rectangle'I suppose there is some mistake in my pyx file, but I cannot tell what, since I'm defining there the Rectangle for python.
You should use PyRectangle in the signatures of def-functions and PyRectangle.c_rect when passing rectangles to C++-functions.That means your code should be:Read on for a more detailed explanation why.All arguments passed to def-functions are Python-objects (i.e. of type object in Cython-parlance), after all those functions will be called from pure Python, which only knows Python-objects.However, you can add some syntactic sugar and use "late-binding" in the signature of a def-function, for example, instead ofuseUnder the hood, Cython will transform this code to something like:This automatic conversion is possible for builtin-types like int or double, because there is functionality in Python-C-API for these conversions (i.e. PyLong_AsLong, PyFloat_AsDouble). Cython also handles the error checking, so you should not undertake these conversion manually.However, for user-defined types/classes like your Rectangle-class such automatic conversion is not possible - Cython can only automatically convert to cdef-classes/extensions, i.e. PyRectangle, thus PyRectangle should be used in the signature:After Cython took care of conversion from object to PyRectangle, the last step from PyRectangle to Rectangle must be taken manually by utilizing the c_rect - pointer:The rules are similar for cpdef-function, because they can be called from pure Python. The "early binding" works only for types which Cython can automatically coverted from/to Python objects.Unsurprisingly, the only function which can habe C++-classes in their signatures are the cdef-functions.


Answer URL
https://docs.python.org/3/c-api/long.html#c.PyLong_AsLong
https://docs.python.org/3/c-api/float.html#c.PyFloat_AsDouble
