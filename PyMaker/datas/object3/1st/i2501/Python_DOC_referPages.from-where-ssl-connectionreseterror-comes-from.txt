Natural Text
TL;DRMy question is simple - where is the code responsible to raise ConnectionResetError on cpython3 following a call to self._sslobj.read(len, buffer) on ssl.py?BackgroundI'm getting sometimes ConnectionResetError when trying to connect to S3 with ssl. this error occurs rarely so its tricky to reproduce it.What i've triedlooking at ssl.py:631 gives me no further clues - we have to go deeper!:i've tried searching it on CPython repo but AFAICS nothing seems to raise it, i suspect its hidden in SSL implementation or on some mapping between OSError to ConnectionError subclasses.my final goal is to write py2 & py3 compatible code for handling this exceptions (ConnectionError is new on py3) by comparing the module's py2 & py3 versions that raises this error.Update - py2 & py3 catch for ConnectionError subclassesmy question origins was to find a way to catch ConnectionError and its subclasses on python2 & python3, so here it is:
ConnectionResetError is raised when errno is ECONNRESET. errno is how libc indicates whether or not an error occurred in a system call.You could search ConnectionResetError in Objects/exceptions.c to find out how this exception type get initialized and added to errnomap dict.In the case of self._sslobj.read raised ConnectionResetError, _sslobj.read is implemented with _ssl__SSLSocket_read_impl, the actual ssl read is done with openssl's SSL_read:as the error occurred, _PySSL_UPDATE_ERRNO_IF will set (sock)->ssl_errno = SSL_ERROR_SYSCALL and (sock)->c_errno = ECONNRESET.later, in PySSL_SetError:PyErr_SetFromErrno(PyExc_OSError) equals with:when OSError constructs with an errno, it will lookup a more specified subclass, by lookup errno value in the aforementioned errnomap dict:it actually returns and raises out a ConnectionResetError exception.


Answer URL
https://docs.python.org/3/library/exceptions.html#ConnectionResetError
