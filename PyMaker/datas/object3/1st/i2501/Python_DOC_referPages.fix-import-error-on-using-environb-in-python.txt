Natural Text
On typing the above command in Windows Anaconda python 3.6 installation, I get this error: ImportError: cannot import name 'environb'. This seems to be because, environb is only available if supports_bytes_environ is True.and supports_bytes_environ is False on Windows. Is there a way to get around this?ref: https://docs.python.org/3/library/os.html#os.environbSpecifically, I found this error in the GRASS GIS Python scripting library.
First of all: you probably don't need os.environb, at all.I'll cover why not when you are developing Python software, and at the end, also cover GRASS GIS and how to fix that project properly.Why you won't need this objectOn non-Windows systems, the os.environb mapping is only needed if you ever need to access the raw binary data from an environment, without it having being decoded to Unicode according to the current locale. You could want to have that access because the locale could be wrong, or you wanted to pass in binary data from an environment variable to your program without having to re-encode it with the locale and the surrogateescape error handler, or to pass data in a different encoding to another program, again without having to forcefully create a surrogateescape decoded string first. (I'm glossing over the fact that in POSIX you can't use nulls in environment variables but that's not relevant). On Windows, you don't need this because on that OS the environment variables are already passed to Python as Unicode data. This also means that the Windows environment can't readily be used to pass binary data; you can't pass in data with a different encoding for child processes and you can't accept binary data from the environment without first bundling that data in some kind of binary-to-text encoding such as Base64. os.environb would not serve any purpose on Windows!So, if you creating cross-platform software, you should use os.environ and require that the locale is correctly configured, and not worry about os.environb.Code defensively insteadSometimes need binary environment data access?  Then next option could be to defensively code for the attribute missing with an ImportError guard, and just accept that it is missing:Full os.environb replacementA last option, for that case where some third party expects os.environb to be available anyway and you can't change that, or where you have a large codebase that is going to be hard to update, is to create the os.environb object just for Windows.This is not that hard; just encode the data from the original os.environ as needed, and decode it again on setting new keys or values. The os.environ object for POSIX already does the same thing, except in the other direction, so we can re-use the same infrastructure:This creates the same type of mapping object, which fully supports getting and setting environment variables, and the changes to that object will be visible in os.environ, and vice versa:GRASS GIS specificallyIn the comments you mention you are trying to get GRASS GIS to work. That project is simply made an incorrect choice to set an environment variable as bytes on both Python 2 and Python 3, and has issues not just for Windows but for all platforms that need addressing.They try to use os.environb as a replacement for os.environ, and then use a naive quoting method to generate the value from sys.argv. At the same time, the same module uses os.environ for all other environment variable needs.At the top of the lib/python/script/core.py they useand then store a single variable in that mapping (in the def parser(): function definition):The b'"' + encode(arg) + b'"' is a naive method for quoting values to avoid problems with subshells, but this won't handle embedded quotes. There is no reason for this to be a bytes value. sys.argv is a list of Unicode strings on Python 3, bytestrings on Python 2. This follows the os.environ data types on either Python version, so the data should just be handled as str types, on either Python version.For quoting values against shell interpretation, Python has the shlex.quote() function, which happens to be available as pipes.quotes() on both Python 2 and Python 3 as well.So the issue can be avoided entirely with a few changes to that file (the traceback you have for the os.environb import error will tell you where it is located on your computer):I'm reporting this to the GRASS GIS project so that they can fix this for a future release.
On Windows, the os module does not have the attribute environb, so you will not be able to load it. However, you can add it manually:First, load os into the global namespace:Overload it into the os module. This will modify the module that is already loaded:Now, if you run from os import environb as environ, python will see that os is already imported and will not attempt to load it again.If you also need to be able to set environment variables, you can provide a two-way mapping by using the following:


Answer URL
https://docs.python.org/3/library/os.html#os.environb
https://docs.python.org/3/library/os.html#os.environb
