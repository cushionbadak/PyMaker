Natural Text
I'm trying to make changes to an existing python module, and then test it locally. What's the best way to do this?I cloned the github module and made changes, but I'm not sure how to import the local package instead of the already installed one.
The easiest way to do such testing would be to create a virtual environment, and then installing the package in development mode.Assuming you are on Linux it would look something like this.This workflow would not overwrite the already installed package on your system. Other maybe even simpler alternatives would to just use a IDE like PyCharm that handles most of this for you.
One way consists in using sys.path().For example:In this way, you give priority to a specific path when looking for a module.This means that the module you want to import will be searched first in path/to/module and after in the other directories already in sys.path.The advantage of this approach is that this new order will hold only inside your script without changing the import order of the other ones. Note: For development purposes you should use a virtualenv as suggested by @eandersson.
You should probably be doing most of your development work in a virtual environment.  Your workflow for this could look like:pip install -e does some magic so that, whenever you import the module in the library, it gets routed directly to the checked-out source tree, so if you make edits in forkedlib and then re-run myapp, you'll see those changes directly.When you're done, you can pip uninstall forkedlib and then re-run pip install -e . to reinstall your application's (declared) dependencies.  (Or delete and recreate the virtual environment, if that's easier.)
The approach of the answer by abc adding the module path to the system path is fine for local, instant testing, but it's not the full solution, for example when C code needs to be compiled or command line hooks must be set. For a full test you might want to install the package instead.A typical Python has a setup.py and can be packaged into a distribution file (wheel, ...) which can then be installed locally from a local file.The workflow would be:create a package distributable (may include a command like python setup.py bdist_wheel)create a new virtual environment for testing (or de-install any previously installed, non-modified version of the package)installe the package from the locally created distributable (may be as simple as pip install --no-index --find-links=..)run the testsThis results in exactly the same situation every future user of the package will find itself in and is a complete test (including the installing process), but it's also a lot of effort, that's why I usually only us the system path method during development, but the full installation way only directly before a release.


Answer URL
https://docs.python.org/3/library/sys.html#sys.path
