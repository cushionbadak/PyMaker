Natural Text
This question was previously asked here with an egregious typo: Counting "unique pairs" of numbers into a python dictionary?This is an algorithmic problem, and I don't know of the most efficient solution. My idea would be to somehow cache values in a list and enumerate pairs...but that would be so slow. I'm guessing there's something useful from itertools. Let's say I have a list of integers whereby are never repeats:In this case, there is a unique pair 2-3 and 3-2, so the dictionary should be:That is, there is 1 pair of 2-3 and 1 pair of 3-2. For larger lists, the pairing is the same, e.g.has the dicitonary(1) Once the size of the lists become far larger, how would one algorithmically find the "unique pairs" in this format using python data structures?(2) I mentioned that the lists cannot have repeat integers, e.g. is impossible, as there are two 2s. However, one may have a list of lists:whereby the dictionary must be as there are two pairs of 2-3 and 3-2. How would one "update" the dictionary given multiple lists within a list? EDIT: My ultimate use case is, I want to iterate through hundreds of lists of integers, and create a single dictionary with the "counts" of pairs. Does this make sense? There might be another data structure which is more useful.
For the nested list example, you can do the following, making use of itertools.permutations and dict.setdefault:For flat lists l, use only the inner loop and omit the outer one
For this example I'll just use a list with straight numbers and no nested list:This creates a dict with each number as a key. Now in each key, make the value a nested dict who's contents are num: 1 for each number in the original values list if it isn't the name of the key that we're in 
use defaultdict with permutationsoutput is for inherit list of lists https://stackoverflow.com/a/52206554/8060120


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/collections.html#collections.defaultdict
