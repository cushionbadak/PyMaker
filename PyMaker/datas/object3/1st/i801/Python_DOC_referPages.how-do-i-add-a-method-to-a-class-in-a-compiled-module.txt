Natural Text
The file scheduling.py currently contains nothing. What does it need to contain, so the last statement, cursor.chronology(), prints Hello World? I do want this method to be available to anything that might be defined by means of sqlite.connect().
Both the sqlite3.connect() and sqlite3.onnection.cursor() methods allow you to specify factory argument to replace the normal connection or cursor class with your own subclass. You can use these paths to provide your own cursor.chronology() method.So you'd subclass the sqlite3.Cursor class to add your custom method:You can then use that class as the factory argument to the cursor() call:You can also use a connection factory (subclassing sqlite3.connection()) to always use your cursor class:then use db = sqlite3.connect(':memory:', factory=ChronologyConnection) to use the new connection class:I strongly recommend against patching the sqlite3.connect() function to make the above factory the default, but if you must have this be transparent, you can put your own connect() function on the sqlite3 module. The base package is pure Python so you can monkey-patch an alternative connect() function into it.So in your scheduling module, you'd place the above classes, then use:Now importing scheduling is enough to make calls to sqlite3.connect() use your alternate connection factory:The reason you would not want to do the above is that it makes sqlite3.connect() calls deviate from the norm, act in ways that clash with what the documenation states. That makes your code harder to maintain in the long run. I'd stick with explicit sqlite3.connect(...., factory=ChronologyConnection) calls instead.


Answer URL
https://docs.python.org/3/library/sqlite3.html#sqlite3.connect
https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.cursor
