Natural Text
I have a list of lists in Python and I want to (as fastly as possible : very important...) append to each sublist the number of time it appear into the nested list.I have done that with some pandas data-frame, but this seems to be very slow and I need to run this lines on very very large scale. I am completely willing to sacrifice nice-reading code to efficient one. So for instance my nested list is here:I need to have:EDITOrder in res does not matter at all.
If order does not matter you could use collections.Counter with extended iterable unpacking, as a variant of @Chris_Rands solution:Output
This is quite an odd output to want but it is of course possible. I suggest using collections.Counter(), no doubt others will make different suggestions and a timeit style comparison would reveal the fastest of course for particular data sets:Note to preserve the insertion order prior to CPython 3.6 / Python 3.7, use the OrderedCounter recipe.
If numpy is an option, you could use np.unique setting axis to 0 and return_counts to True, and concatenate the unique rows and counts using np.vstack:
Since your items are mutable objects and you have to convert them to an immutable object to be used as a mapping key, an optimized approach is to use defaultdict() as following:This will give you a dictionary of your sub-lists as the key and their counts as the value.Another way is to create your own dictionary object:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#ordereddict-examples-and-recipes
