Natural Text
I have a recursion function where it produces a list of paths from a set of edges. However, sometimes due to the nature of the graph it goes into a loop and produces a dictionary that contains the infinite loop symbol [...] in the list, for example: Naturally, when my program loops over this output dictionary and encounters "[...]" it raises  the following errorBecause I am not sure what to call "[...]". My search on Google did not yield any useful result.I would like to know is there any way to a remove the [...] from the list, for example to produce the following dictionary from the previous example:I would appreciate any feedback. 
This is not what you think, [...] means that the same list has been appended to the original list like this:So the problem is there that you create your list, you should fix your logic there. I mean that is better to do that. but try this, it might help:you can replace .remove(your_dict[('a','b')]) with that cyclic element if you find which is.
Python doesn't have an option like "print-circle" of common lisp that allows serialization and deserialization of circular data structures; if you need that there is the pickle module.If you only need a custom serialization and not de-serialization that will rebuild the full data structure you can just keep a set of already found members:in the code above I'm outputting [-1] where a back-reference would have been present.If you also want to be able to rebuild the original structure (including loops) in your custom serialization the code is slightly more complex. Basically youAssign a unique number to each new list you findWhen you see an already known list you store in the stream the list reference number instead of recurseYou never remove elements from the known dictionary mapping lists to reference numbersDuring de-serializiation you need to build the same reference number map and when a reference is met you just pick the list from the map (it's guaranteed that if you find a reference number that list has already been met). The only tricky part to pay attention to is that both when serializing and de-serializing you need to put the list in the map BEFORE recursing.


Answer URL
https://docs.python.org/3/library/pickle.html
