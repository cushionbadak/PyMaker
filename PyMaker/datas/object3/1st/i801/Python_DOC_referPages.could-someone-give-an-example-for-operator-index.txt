Natural Text
I understand the operation as converting sth., which is not an integer, to integer. do I understand it correctly?my attempt to implement the function "operator.index ()":I have expected:actual output:
The __index__ can only be used to losslessly interpret an object as an integer index value. From the documentation for the hook:Called to implement operator.index(), and whenever Python needs to losslessly convert the numeric object to an integer object (such as in slicing, or in the built-in bin(), hex() and oct() functions). Presence of this method indicates that the numeric object is an integer type. Must return an integer.A float is not an integer type, even if a subset of float values are whole numbers.In the standard library, only the int and bool types currently implement that hook. The hook exists for custom classes in your own code or defined in 3rd-party libraries to be useable when indexing sequences.It is distinct from __int__ because that hook does allow for lossy conversion; int(3.9) gives you 3, but you would not expect listobject[3.9] to work (what should that return, the element at index 3 or 4?). You can't use int() to coerce floats into integers when indexing, or only accept whole floats (that'd be inconsistent and confusing).You'd only use operator.index() if you need to support arbitrary int-like types in your own Python code:The __index__ special method was added to Python with PEP 357, so you can use the numpy project integers (which are a different type) in slicing and indexing, so this works:and __index__ to allow your class to be used in indexing:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__index__
