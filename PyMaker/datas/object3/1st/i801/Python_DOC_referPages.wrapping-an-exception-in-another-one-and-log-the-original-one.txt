Natural Text
How can I wrap an exception in another exception and log the traceback of the original exception in Python?
The from clause of the raise statement does exactly that. It wraps the original exception in the __cause__ attribute of the wrapping exception. This is called exception chaining and it is an application of the decorator design pattern. Then the exc_info parameter of the logging functions allows to log the original exception:Use caseThis exception chaining mechanism can come in handy in some situations. For instance when a user is supposed to implement an abstract method of an interface using other helper methods of the interface that have default implementations. If those helper methods can raise exceptions, it is likely that some of those exceptions overlap (are of the same type). So the implemented abstract method's caller will not be able to discriminate which helper method raised the exception. Wrapping the original exceptions in distinct exception classes' instances can solve this issue.In this sample code, we have a BaseServer interface for handling requests and a user's Server class implementing the _handle abstract method with the _parse, _format and _send helper methods. We use the exception chaining mechanism to log different messages in the _callback method (that delegates to the _handle method) according to the point of failure in the _handle method's implementation: request parsing, request processing, response formatting or response sending.Developper's code:User's code:


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement
