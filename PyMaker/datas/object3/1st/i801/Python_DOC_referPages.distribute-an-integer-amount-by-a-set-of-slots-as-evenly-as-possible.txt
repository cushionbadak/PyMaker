Natural Text
I am trying to figure an elegant way of implementing the distribution of an amount into a given set of slots in python.For example:7 oranges distributed onto 4 plates would return:10 oranges across 4 plates would be:
Conceptually, what you want to do is compute 7 // 4 = 1 and 7 % 4 = 3. This means that all the plates get 1 whole orange. The remainder of 3 tells you that three of the plates get an extra orange.The divmod builtin is a shortcut for getting both quantities simultaneously:With your example:For completeness, you'd probably want to check that oranges is non-negative and plates is positive. Given those conditions, here are some additional test cases:
You want to look at Bresenham's algorithm for drawing lines (i.e. distributing X pixels on a Y range as "straightly" as possible; the application of this to the distribution problem is straightforward).This is an implementation I found here:
See also more_itertools.distribute, a third-party tool and its source code.CodeHere we distributes m items into n bins, one-by-one, and count each bin.DemoExampleThis idea is akin to distributing a deck of cards among players.  Here is an initial game of Slapjackwhere the cards are distributed "as equally as possible between all [8] players":
Mad Physicist answer is perfect. But if you want to distribute the oranges uniformley on the plates (eg. 2 3 2 3 vs 2 2 3 3 in the 7 oranges and 4 plates example), here's an simple idea.Easy caseTake an example with 31 oranges and 7 plates for example.Step 1: You begin like Mad Physicist with an euclidian division: 31 = 4*7 + 3. Put 4 oranges in each plate and keep the remaining 3. Step 2: Now, you have more plates than oranges, and that's quite different: you have to distribute plates among oranges. You have 7 plates and 3 oranges left: 7 = 2*3 + 1. You will have 2 plates per orange (you have a plate left, but it doesn't matter). Let's call this 2 the leap. Start at leap/2 will be pretty :Not so easy caseThat was the easy case. What happens with 34 oranges and 7 plates? Step 1: You still begin like Mad Physicist with an euclidian division: 34 = 4*7 + 6. Put 4 oranges in each plate and keep the remaining 6. Step 2: Now, you have 7 plates and 6 oranges left: 7 = 1*6 + 1. You will have one plate per orange. But wait.. I don't have 7 oranges! Don't be afraid, I lend you an apple:But if you want some uniformity, you have to place that apple elsewhere! Why not try distribute apples like oranges in the first case? 7 plates, 1 apple : 7 = 1*7 + 0. The leap is 7, start at leap/2, that is 3:Step 3. You owe me an apple. Please give me back my apple :To summarize : if you have few oranges left, you distribute the peaks, else you distribute the valleys. (Disclaimer: I'm the author of this "algorithm" and I hope it is correct, but please correct me if I'm wrong !)The codeEnough talk, the code:Some tests:
Not sure how this works. But it returns the exact same results 


Answer URL
https://docs.python.org/3/library/functions.html#divmod
