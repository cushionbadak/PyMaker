Natural Text
In python 2 I used:In python 3 I use:This new syntax gives me the feeling I'm iterating over something (the dict) and modifying it, which is bad. But in truth I'm only iterating over the keys, so this should not bring any trouble, right?
Iterating over a dictionary and modifying values is perfectly fine. Each time you call dict.__getitem__ / dict.__setitem__, or respectively its syntactic sugar dict[] / dict[] = ..., the value for a key is retrieved. You can overwrite values for keys as you iterate items, as changing values does not change key hashes and therefore does not impact the iterator.What's not fine is adding or removing keys as you iterate over a view of a dictionary. The reason why this is problematic is given in the docs:The objects returned by dict.keys(), dict.values() and dict.items()  are view objects. They provide a dynamic view on the dictionaryâ€™s  entries, which means that when the dictionary changes, the view  reflects these changes.
I don't see a reason why it should be bad practice if you do not change the set of keys of the dictionary.  Your examples do not do that, so they are just fine.The things starts getting messy if your changing involves adding or removing elements:This will raise an exception:And your example can probably be improved a little by iterating over the items instead of the keys alone:or in the special case of your "just doubling":But I guess your real use case is probably more complex.EDIT: Be aware that if you are still using Python2, you should use .iteritems() and .iterkeys() instead of .items() and .keys().


Answer URL
https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
