Natural Text
I understand that __add__ can be used to define the use of + for a new class. What is the equivalent for defining the use of []?I would like to create a class Parent that contains a dictionary codes, and I would like Parent[key] to return Parent.codes[key]I understand that I could probably just use Parent.codes[key], but this seems needlessly verbose if methods can be used to avoid similar issues with things like + and ==.
You have a number of options. If you what your class to quack like a dict, your best The best bet is probably just to extend dict instead of referencing one and attempting to redirect all the methods:This will allow you to index right into Parent, list the keys, iterate over the values, etc. At the same time, you can add whatever additional attributes, properties and methods your heart desires.The literal answer to your question is __getitem__, __setitem__ and __delitem__. You can implement the three use-cases of the indexing operator with these methods:The methods are invoked on an instance of Parent in exactly the same way that Parent redirects them to dict.For future reference, the methods shown here (including your example of __add__) are called magic, special or dunder methods. All dunder (double underscore) attributes are reserved by the interpreter. They serve many purposes, including operator overloading in custom objects. The (nearly) complete spec of existing names is available in the documentation of the Python Data Model.
What you are looking for is:edit:more specifically, what you want is:edit2: delete some irrelevant text on __iter__ and __next__ (see comments)


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getitem__
https://docs.python.org/3/reference/datamodel.html#object.__setitem__
https://docs.python.org/3/reference/datamodel.html#object.__delitem__
https://docs.python.org/3/reference/datamodel.html
https://docs.python.org/3/reference/datamodel.html#special-method-names
