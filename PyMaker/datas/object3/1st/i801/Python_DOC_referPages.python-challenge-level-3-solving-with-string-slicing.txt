Natural Text
apologies to posting the question, as has been answered in other questions as well. However, couldn't figure out what's wrong with this solution. The question requires to find the lower-cased characters bordered by 3 upper-cased characters on each side.  The code i've writting:The string i'm getting is 'lgvcaaginbkvsoezhtlnldslyitlooqfgiksudtm'   vs 'linkedlist'Thanks for the help. Edit: for some reason the following code seems to work:
What you are trying to do is match a pattern : Not Upper, Upper, Upper, Upper, Not Upper, Upper, Upper, Upper, Not Upper. This is easier to catch if you use a signature for your string:You are looking for the lUUUlUUUl substrings in the sig string. Python has no builtin for findall, but you can to iterate over the results of find:You may also use re.finditer with a regex pattern, but is more complicated.
This would be a slicing solution:It slices the text into parts of 9 characters (you need 9 to assure not to have XXXXyXXXX - you need exactly three uppers around your lowers.It checks the sliced text for notupper on positions 0,8 and 4:by pulling this function from the terms-dictionary. All indexes of part that have no matching key in terms are tested with str.isupper using the default param of terms.get(index,str.isupper)all() makes sure all tests need to evaluate to true to enter the if-condition.Spaces evaluate to False for isupper and islower().Readup:all()dict.get(key,default) and Why dict.get(key) instead of dict[key]?enumerate(iterable)You can replace the dict/all part by:if that is too complicated for your current level of python.


Answer URL
https://docs.python.org/3/library/functions.html#all
https://docs.python.org/3/library/stdtypes.html#dict.get
https://docs.python.org/3/library/functions.html#enumerate
