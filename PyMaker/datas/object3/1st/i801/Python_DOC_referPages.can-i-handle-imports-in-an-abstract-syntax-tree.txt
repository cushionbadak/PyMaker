Natural Text
I want to parse and check config.py for admissible nodes.config.py can import other config files, which also must be checked.Is there any functionality in the ast module to parse ast.Import and ast.ImportFrom objects to ast.Module objects?Here is a code example, I am checking a configuration file (path_to_config), but I want to also check any files that it imports:
This is a little more complex than you think. from foo import name is a valid way of importing both an object defined in the foo module, and the foo.name module, so you may have to try both forms to see if they resolve to a file. Python also allows for aliases, where code can import foo.bar, but the actual module is really defined as foo._bar_implementation and made available as an attribute of the foo package. You can't detect all of these cases purely by looking at Import and ImportFrom nodes.If you ignore those cases and only look at the from name, then you'll still have to turn the module name into a filename, then parse the source from the file, for each import.In Python 2 you can use imp.find_module to get an open file object for the module (*). You want to keep the full module name around when parsing each module, because you'll need it to help you figure out package-relative imports later on. imp.find_module() can't handle package imports so I created a wrapper function:I'd also track what module names you already imported so you don't process them twice; use the name from the spec object to make sure you track their canonical names.Use a stack to process all the modules:In case of from foo import bar imports, if foo is a package then foo/__init__.py  is skipped and it is assumed that bar will be a module.(*) imp.find_module() is deprecated for Python 3 code. On Python 3 you would use importlib.util.find_spec() to get the module loader spec, and then use the ModuleSpec.origin attribute to get the filename. importlib.util.find_spec() knows how to handle packages.


Answer URL
https://docs.python.org/3/library/importlib.html#importlib.util.find_spec
https://docs.python.org/3/library/importlib.html#importlib.machinery.ModuleSpec.origin
https://docs.python.org/3/library/ast.html#ast.NodeTransformer
