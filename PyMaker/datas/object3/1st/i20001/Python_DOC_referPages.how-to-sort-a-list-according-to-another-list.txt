Natural Text
There is a list:another list: I want to sort a according to b:How to do this?
This sorts a in-place using the the index in b of the first element of each tuple from a as the values it sorts on.Another, possibly cleaner, way of writing it would be:If you had large numbers of items, it might be more efficient to do things a bit differently, because .index() can be an expensive operation on a long list, and you don't actually need to do a full sorting since you already know the order:Note that this will only work for a list of 2-tuples. If you want it to work for arbitrary-length tuples, you'd need to modify it slightly:
Another posibility is to sort a, sort the indices of b according to b and than sort the a according to the indicessince every sorting takes n*log(n) this is still scalable for bigger lists
Traditional sorting may not be needed.
There's actually a way to do this in linear O(n) time, because this isn't really a sorting operation. The existence of the list b means that the sorting is already done; all we really need to do is to rearrange the elements of a to be in the same order. This can be done efficiently thanks to dictionaries.Usage:Notes:This is a stable sort; if two list items have the same key, their order will be preserved. Example:If any list elements are mapped to keys that don't exist in desired_order, those elements are silently discarded. For example:See also:defaultdict


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
