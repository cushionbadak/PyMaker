Natural Text
Please be kind with me, I'm a Python beginner :-)Now, I see that the 'best practice' for writing Python programs would be to wrap the main code inside a 'main' function, and do the if "__main__" == __name__: test to invoke the 'main' function.This of course results in the necessity of using a series of global statements in the 'main' function to access the global variables.I wonder if it is more proper (or 'Pythonic', if you will) to gather the global variables into a custom class, say _v, and refer to the variables using _v. prefix instead?Also, as a corollary question, would that have any negative impact to, let's say, performance or exception handling?EDIT : The following is the general structure of the program:
There are enough pieces missing from the example code that  reaching any firm conclusions is difficult.Event-driven approachThe usual approach for this type of problem would be to make it entirely event-driven.  As it stands, the code is largely polling.  For example, sighup_handler sets reset_requested = True and the while loop in main processes that request.  An event-driven approach would handle the reset, meaning the call to stage_cleanup, directly:Class with shared variablesIn the sample code, the purpose of all those process_stages and cycling through the stages is not clear.  Can it all be put in an event-driven context?  I don't know.  If it can't and it does require shared variables, then your suggestion of a class would be a natural choice.  The beginnings of such a class might look like:Again, because the true purpose of the polling loop is not clear to me, I didn't try to reproduce its functionality in the class above.
Generally, it is best practice to avoid global variables, and instead just pass variables to classes/methods that need them through method calls. Example: if you are making a calculator, make an addition method that takes 2 ints and returns an int. This is in contrast to making 2 input ints and 1 output int as global variables, and having the add method work on those.


Answer URL
https://docs.python.org/3/library/signal.html#signal.pthread_sigmask
https://docs.python.org/3/library/signal.html#signal.sigpending
https://docs.python.org/3/library/signal.html
