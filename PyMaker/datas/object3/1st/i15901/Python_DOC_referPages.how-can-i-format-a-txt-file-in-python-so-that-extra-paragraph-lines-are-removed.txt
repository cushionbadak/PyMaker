Natural Text
I'm trying to format a file similar to this: (random.txt)This is how it should look below: (randomoutput.txt)So far the code I've managed to make has only removed the spaces, but I'm having trouble making it recognize where a new paragraph starts so that it doesn't remove the blank lines between paragraphs. This is what I have so far.Edit:I've also found a way to create spaces between paragraphs, but right now it just takes every line break and creates a space between the old line and new line using:
You should process the input line-by line.  Not only will this make your program simpler but also more easy on the system's memory.The logic for normalizing horizontal white space in a line stays the same (split words and join with a single space).What you'll need to do for the paragraphs is test whether line.strip() is empty (just use it as a boolean expression) and keep a flag whether the previous line was empty too.  You simply throw away the empty lines but if you encounter a non-empty line and the flag is set, print a single empty line before it.If you want to suppress blank lines at the top of the file, you'll need an extra flag that you set only after encountering the first non-blank line.If you want to go more fancy, have a look at the textwrap module but be aware that is has (or, at least, used to have, from what I can say) some bad worst-case performance issues.
The trick here is that you want to turn any sequence of 2 or more \n into exactly 2 \n characters. This is hard to write with just split and joinâ€”but it's dead simple to write with re.sub:If you want lines with nothing but spaces to be treated as blank lines, do this after stripping spaces; if you want them to be treated as non-blank, do it before.You probably also want to change your space-stripping code to use split(' ') rather than just split(), so it doesn't screw up newlines. (You could also use re.sub for that as well, but it isn't really necessary, because turning 1 or more spaces into exactly 1 isn't hard to write with split and join.)Alternatively, you could just go line by line, and keep track of the last line (either with an explicit variable inside the loop, or by writing a simple adjacent_pairs iterator, like i1, i2 = tee(ivar); next(i2); return zip_longest(i1, i2, fillvalue='')) and if the current line and the previous line are both blank, don't write the current line.
split without Argument will cut your string at each occurence if a whitespace ( space, tab, new line,...). Write    n.split(" ")and it will only split at spaces.Instead of writing the output to a file, put it Ingo a New variable, and repeat the step again, this time with
Firstly, let's see, what exactly is the problem...You cannot have 1+ consecutive spaces or 2+ consecutive newlines.You know how to handle 1+ spaces. That approach won't work on 2+ newlines as there are 3 possible situations:  - 1 newline  - 2 newlines  - 2+ newlinesGreat so.. How do you solve this then?There are many solutions. I'll list 3 of them.Regex based.This problem is very easy to solve iff1 you know how to use regex...So, here's the code:If you have memory constraints, this is not the best way as we read the entire file into the momory.While loop based.This code is really self-explainatory, but I wrote this line anyway...Again, you have memory constraints, we still read the entire file into the momory.State based.Another way to approach this problem is line-by-line. By keeping track whether the last line we encountered was blank, we can decide what to do.Now, 2 of them need you to load the entire file into memory, the other one is fairly more complicated. My point is: All these work but since there is a small difference in ow they work, what they need on the system varies...1 The "iff" is intentional.
Basically, you want to take lines that are non-empty (so line.strip() returns empty string, which is a False in boolean context). You can do this using list/generator comprehension on result of str.splitlines(), with if clause to filterout empty lines.Then for each line you want to ensure, that all words are separated by single space - for this you can use ' '.join() on result of str.split().So this should do the job for you:or you can use filter and map with helper function to make it maybe more readable:
To fix the paragraph issue:


Answer URL
https://docs.python.org/3/library/textwrap.html
https://docs.python.org/3/library/re.html#re.sub
