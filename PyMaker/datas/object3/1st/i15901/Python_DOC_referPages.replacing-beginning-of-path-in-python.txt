Natural Text
I have a file that contains a lot of paths, and all of them contains a directory called "work".examples:I want to replace all the sub-path prior to work directory with a specific path, let's say "c:\idan". meaning that the outcome will be:how do I do that in Python?I tried to use re.sub function but didn't have any success.
You can use str.find to get the index of the \work\ part in each file path. Then you can use that index to slice the string into a substring that begins with \work\…. And then you just need to add your common prefix to it.For more sophisticated path manipulations, you should take a look at the os.path module, which specializes on that. For example, you could use os.path.join to automatically join two path components using the correct path separator for the current operating system:But since you are doing just basic path manipulations in a restricted environment (you have the paths as strings, you know they contain \work\ and you just want to add a different prefix), using basic string manipulation as shown above is a lot simpler and also produce the correct result on non-Windows systems.My main issue is that I don’t know how to retrieve the paths, because they appear in the file in random places, sometimes more than once in a line. I used open(file).read() to get the text of the file as string, but now I need a way to substitute all occurrences. I tried to create a regex that will fit but with no success so far.Identifying file paths is not that simple since there can be some difficult special cases which we would have to check too. If we can narrow our specification for interesting paths however, we could come up with something simple. So let’s assume that all paths we are interested in begin with a drive letter (so no network paths etc.), are Windows paths with the backslash as path separator, contain no spaces in folder names, and end with trailing whitespace.The regular expression looks for a drive letter followed by a colon, and any number of path segments. Then it expects \work\ at some point and captures everything that’s not whitespace that comes afterwards. In the replacement that is the text that is prefixed by c:\idan\.


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.find
https://docs.python.org/3/library/stdtypes.html#typesseq-common
https://docs.python.org/3/library/os.path.html
https://docs.python.org/3/library/os.path.html#os.path.join
