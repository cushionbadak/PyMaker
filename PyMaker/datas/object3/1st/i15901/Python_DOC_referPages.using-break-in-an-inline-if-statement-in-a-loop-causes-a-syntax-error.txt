Natural Text
I was trying thisThis causes a syntax errorI know there are other ways of doing this but I was wondering why this didn't work.Thanks!
This is called conditional expression and the Grammer for that is defined like thisAnd or_test is defined like thisAnd and_test is defined like thisand not_test is defined like thisand comparison is defined like thisand comp_operator is defined like thisand or_expr is defined like  thisand xor_expr is defined like thisand and_expr is defined like thisand shift_expr is defined like thisand a_expr is defined like thisand m_expr is defined like thisand u_expr is defined like thisand power is defined like thisand primary is defined like thisAnd no where break statement is allowed in the grammar, that is why it is failing with compile time error.Quoting from the docs,The expression x if C else y first evaluates the condition, C rather than x. If C is true, x is evaluated and its value is returned; otherwise, y is evaluated and its value is returned.So, x and y should be something which can be evaluated, but break is a control flow statement which cannot be evaluated.
That syntax cannot be used like that. The whole <something> if <condition> else <other thing> thing is an expression that evaluates to some particular value, that is, is something assignable to a variable. The idea is not to put logic in <something> and <other thing>. You will have to stick with something more traditional:
Conditional expression should be used with expressions, not with statements.And, the code calls input twice for non-q input. Is that what you meant?
The inline if statement - also called conditional assignment - is python's equivalent to the tenary operator in other languages. As such it is used to assign a value to a variable based on the boolean value of an expression e.g.:Clearly both possible values must actually be values. This is true for all literals (1, 'string', ...), variables and function calls, but not for statements like break.I hope this explains the WHY this is an syntax error.
If you want to keep taking input until a user enters "q" you could use iter:Or just:


Answer URL
https://docs.python.org/3/reference/expressions.html#conditional-expressions
https://docs.python.org/3/reference/expressions.html#conditional-expressions
https://docs.python.org/3/reference/expressions.html#conditional-expressions
