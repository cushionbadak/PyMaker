Natural Text
This question already has an answer here:How do I pass a variable by reference?                    24 answers                I wonder if any python folks can fill me in on how/why the following happens:As a rubyist I find it really strange that a locally defined variable (nums) in the foo function can be changed by an action performed in the bar function! Is this kind of entanglement normal? Is there a name for it?The two functions don't even use the same name to refer to the list. It's very peculiar. I kind of like it though.
A list is an object, and calling a method on an object - such as pop() - affects its state.To be more precise, let's walk through your code and see what's happening:Okay, so that's pretty clear. What happens in bar is what's concerning to you:So what happens when you call numbrs.pop()? Presumably, in the definition of list, you'll find a method definition:which modifies the state of the self object by removing one of its members, and returns the removed member. What is self in that case? It's a reference to a list. Specifically, it's the reference that was called numbrs when you did the pop() operation, which is the same reference that you stored as nums when you created it. I hope this helps - it's a lot of indirection, but if you follow the reference around you'll see how it all goes. 
The behavior is exactly same with Ruby:DEMOYou can not change the reference of the local variable to reference other variable. But you can call the method that change the state in-place. list.pop is one of such methods. (Same for Array#pop in Ruby)
this is kinda strange, and im not sure if this is an answer to the question, but if you run this:output:


Answer URL
https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types
