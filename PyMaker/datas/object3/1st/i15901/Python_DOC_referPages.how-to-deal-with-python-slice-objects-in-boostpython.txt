Natural Text
Suppose there is a class MyArray in C++. It implements an array of SomeType In order to make a __getitem__ function for it in Python, I do something like thisIt is possible to get indices in slice by using these functions. However, "Boost::Python is designed with the idea in mind that users never touch a PyObject*".Is there a better 'boost way' to do this?
Boost.Python is designed to minimize the need to interact with PyObject, and it often accomplishes this by:Providing higher-level type wrappers.Allowing access to the Python object's interface through the associated boost::python::object.For example, one can access the Python object's interface through C++ in a similar manner as  one would do in Python.  The following demonstrates accessing the start attribute of a boost::python::object that refers to a Python slice instance:While this approach works, it tends to result in much boilerplate code: creating defaults when None is provided, handling zero-length slices, and converting negative indexes to positive index.  In this case, Boost.Python provides a higher-level type wrapper boost::python::slice that has a get_indices() member-function that will remove much of the boilerplate code.  Here is a complete minimal example:Interactive usage:


Answer URL
https://docs.python.org/3/c-api/slice.html
