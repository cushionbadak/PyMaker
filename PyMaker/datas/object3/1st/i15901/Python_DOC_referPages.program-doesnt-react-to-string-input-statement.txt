Natural Text
This question already has an answer here:How to test multiple variables against a value?                    21 answers                I am writing a security system that denies access to unauthorized users.It grants access to authorized users as expected, but it also lets in unauthorized users!Why does this occur? I've plainly stated to only grant access when name equals Kevin, Jon, or Inbar. I have also tried the opposite logic, if "Kevin" or "Jon" or "Inbar" == name, but the result is the same.
In many cases, Python looks and behaves like natural English, but this is one case where that abstraction fails. People can use context clues to determine that "Jon" and "Inbar" are objects joined to the verb "equals", but the Python interpreter is more literal minded.is logically equivalent to:  Which, for user Bob, is equivalent to:The or operator chooses the first argument with a positive truth value:  And since "Jon" has a positive truth value, the if block executes. That is what causes "Access granted" to be printed regardless of the name given.All of this reasoning also applies to the expression if "Kevin" or "Jon" or "Inbar" == name. the first value, "Kevin", is true, so the if block executes.There are two common ways to properly construct this conditional.  Use multiple == operators to explicitly check against each value:if name == "Kevin" or name == "Jon" or name == "Inbar": Compose a sequence of valid values, and use the in operator to test for membership:if name in ("Kevin", "Jon", "Inbar"):In general of the two the second should be preferred as it's easier to read and also faster:


Answer URL
