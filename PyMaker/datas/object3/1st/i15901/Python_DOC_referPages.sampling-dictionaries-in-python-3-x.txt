Natural Text
In Python 3, dict_values, dict_keys and dict_items do not support indexingAll of the queries below fail:for that reason. Sometimes I just want to get a random sample of what's in my dictionary. I know I can convert them their output to lists. Do they have any other getter methods that do not require creating another data structure? (I would also imagine that converting them to a list would create a copy, which may not work well for huge dictionaries).
Sometimes I just want to get a random sample of what's in my dictionary. I know I can convert them their output to lists. Do they have any other getter methods that do not require creating another data structure? (I would also imagine that converting them to a list would create a copy, which may not work well for huge dictionaries).The key types are explained under Dictionary view objects, and also guaranteed to be subclasses of collections.abc.KeysView and friends. Basically, this means you can only count on them having __contains__, __iter__, and __len__.They don't directly support indexing because their ordering can be invalidated.* But practically, in any implementation of Python, they're only actually invalidated if you mutate the dictionary. Which means you can safely do things like this:Basically, the same way you'd index a set, or any other non-iterator iterable.* The actual rules as to what behavior is documented have changed a few times. The current version actually says "They provide a dynamic view on the dictionaryâ€™s entries, which means that when the dictionary changes, the view reflects these changes," which implies the practical rule can now be relied on. But even if you're using an older version that, e.g., explicitly only guarantees consistency between adjacent calls to keys, values, items, and related functions, unless you're worried about someone writing a new implementation of Python 2.6 or 3.1 or something, there's no reason to worry about that.Of course you probably want to wrap that up in a function that's more readable. In fact, I'd do it in two steps. First, use the nth function from the itertools recipes:Then wrap up the key indexing:What if you want a random sample? Well, dictionary views are Sized, as are dictionaries themselves, so you can always use randrange:
If you just want a key, value or item, use next() and iter():


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict-views
https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes
https://docs.python.org/3/library/itertools.html#itertools-recipes
