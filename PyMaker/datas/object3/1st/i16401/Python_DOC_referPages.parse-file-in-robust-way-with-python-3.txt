Natural Text
I have a log file that I need to go through line by line, and apparently it contains some "bad bytes".  I get an error message along the following lines:UnicodeDecodeError: 'utf-8' codec can't decode byte 0xb0 in position 9: invalid start byteI have been able to strip down the problem to a file "log.test" containing the following line:(At least this is how it shows up in my Emacs.)I have a file "demo_error.py" which looks like this:I then run, from the command line:$ python3 demo_error.py log.testThe full traceback is:My hunch is that I have to somehow specify a more general codec ("raw ascii" for instance) - but I'm not quite sure how to do this.Note that this is not really a problem in Python 2.7.And just to make my point clear: I don't mind getting an exception for the line in question - then I can simply discard the line.  The problem is that the exception seems to happen on the "for" loop itself, which makes special handling of that particular line impossible.
You can also use the codecs module. When you use the codecs.open() function, you can specify how it handles errors using the errors argument:The errors argument can be one of several different keywords that specify how you want Python to behave when it attempts to decode a character that is invalid for the current encoding. You'll probably be most interested in codecs.ignore_errors or codecs.replace_errors, which cause invalid characters to be either ignored or replaced with a default character, respectively.This method can be a good alternative when you know you have corrupt data that will cause the UnicodeDecodeError to be raised even when you specify the correct encoding.Example:
So apparently your file does not contain valid UTF-8 (which is the default encoding).If you know, what encoding is used (e.g. iso-8859-1 which was afaik the python2 default), you can specify it when opening by usingIf the encoding is unknown or not valid as all, you can open the file as binary.This will make the content accessible as bytes rather than trying to interpret them as characters.
In python <=2.7, strings (str) are arrays of 8 bits characters. So when reading a file composed of 8 bits characters or bytes, you get the bytes without problem, no matter what the actual encoding is. Simply, you may read them with a wrong representation, but it will never throw any exception.In python >=3,strings are unicode strings (16 bits per character). So when reading a file python has to decode the file, and by default it uses system encoding - not necessarily UTF-8. In your case, it seems to assume UTF-8 encoding, when your log file is not UTF-8 encoding so the exception.If not sure of the encoding you may reasonably try to use ISO-8859-1 with


Answer URL
https://docs.python.org/3/library/functions.html#open
