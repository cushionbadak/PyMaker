Natural Text
Could someone, please, explain in plain English what exactly and why is going on in this little snippet:I understand that via some magic globals() takes the value of var and creates a function with the same name as the value. I also do understand that this may be quite a nice workaround if we don't know the value of var (e.g., it may be set by a user) and we have some functions, one of which we'd like to call depending on that value (e.g. according to the user's preferences).However, the whole process still looks to me a bit like miracle :). What exactly globals() does here? Where do these powers are coming from? :)Thank you.
Actually...Here you make a function called 'foo' which prints a stringHere you assign the string 'foo' to a variable 'var'The globals() return a dict of global definitions which you can access trough a key, in this case 'foo' returning to fun_var the address of the foo functionThen you can see foo function attributesThen you call foo function putting ()This is the same as:
It's not really that magical. globals() is a dictionary containing all global variable and function declarations, in the style of { key: value }, where the name of the function or variable is the key, and the actual function or variable value is the value. Whenever you have a dictionary, you can ask for the value of a key with dict["key"]. So when you ask for the value of the thing that has key (read: name) foo, you get back the function named foo, as that's what the name is bound to in globals().That said, only mess with globals() if you absolutely have to. Messing with Python builtins is a dangerous game.
globals() returns a dictionary of all the objects in your global namespace.globals()['key'] gives you the object mapped to the key in the dictionary.You are passing in the key for function foo and the dictionary gives you back a reference to the function, which you are then binding to a variable.No magic involved.
globals() is a dictionary of all the globally accessible objects. You're accessing your function by passing its name as the key to that dictionary.


Answer URL
https://docs.python.org/3/library/functions.html?highlight=globals#globals
