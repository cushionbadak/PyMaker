Natural Text
I need to perform a check for the existence of a file in a dir and all its subdirs.Since this check, in turn, has to be performed a large number of times during program execution, I'd like to find a fast way to do it.I know how to use os.walk(), but I believe that it will walk all the subtree each time. Since I want to use it as an existence test, there is a way to bail out from os.walk as soon as it finds the file I'm looking for?
How about using break statement?For example:
You can simply break out of the loop.If the filesystem is static or almost static however may be a better choice would be to build a dictionary in advanceIf the filesystem is not static you can spawn another thread that computes a new version of the map while the main thread answers the questions using the map.After all the question "Does this file exist?" is approximative and its real meaning is "Was this file listed when I asked to check?" because after either a negative or positive finding things may change immediately (even before the answer gets to the caller). It's very possible that someone asks if a file exists, gets a positive answer with a location but then gets an error when trying to open the file because it doesn't exist any more.Using OS-specific extensions is also probably possible to just install a "watcher" that will be informed of every file creation/deletion thus allowing to keep the map updated without having to continuously rescan the full tree.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#the-break-statement
