Natural Text
How would I convert this stringintokeeping in mind I would also like to do this for '\t' and all other escaped characters.The code for the reverse way iswould I possibly need to look at the actual numeric values for the characters and check the next character say if I find a ('\',92) character followed by a ('n',110)? 
Don't reinvent the wheel here. Python has your back. Besides, handling escape syntax correctly, is harder than it looks.The correct way to handle thisIn Python 2, use the str-to-str string_escape codec:This interprets any Python-recognized string escape sequences for you, including \n and \t.Demo:In Python 3, you'd have to use the codecs.decode() and the unicode_escape codec:as there is no str.decode() method and this is not a str -> bytes conversion.Demo:Why straightforward str.replace() won't cut itYou could try to do this yourself with str.replace(), but then you also need to implement proper escape parsing; take \\\\n for example; this is \\n, escaped. If you naively apply str.replace() in sequence, you end up with \n or \\\n instead:The \\ pair should be replaced by just one \ characters, leaving the n uninterpreted. But the replace option either will end up replacing the trailing \ together with the n with a newline character, or you end up with \\ replaced by \, and then the \ and the n are replaced by a newline. Either way, you end up with the wrong output.The slow way to handle this, manuallyYou'll have to process the characters one by one instead, pulling in more characters as needed:This now can handle the \xhh and the standard 1-letter escapes, but not the \0.. octal escape sequences, or \uhhhh Unicode code points, or \N{name} unicode name references, nor does it handle malformed escapes in quite the same way as Python would.But it does handle the escaped escape properly:Do know this is far slower than using the built-in codec.
the simplest solution to this is just to use a str.replace() calloutput
output:


Answer URL
https://docs.python.org/3/library/codecs.html#codecs.decode
