Natural Text
In Mathematica, I can do thisthat returns square root of 20. I'm trying to hack python to do the same. Like this:How? Overriding operators in crazy class. But it's postfix. And according to this http://rgruet.free.fr/PQR26/PQR2.6.html#SpecialMethodsWhen I try to override any operator it's alwyas self <operator> other so in mentioned case I would have to do it for classes like int,string and ton of other - bad.Is there a way around this? I would like to swap the order and redefine operator in other  class. (edit for clarification: other  is passed as argument to self class like this: self.__ operator __(...,other))
maybe what might serve your needs is forbiddenfruit  ($ easy_install forbiddenfruit)
You can hack this into Python (see "Hacking Python without Hacking Python") or into IPython (see "Custom Input Transformations").To allow 10 + 10 ?? func, you need ?? to be a low-precedence operator. But all of Python's low-precedence operators are either important (like and) or have meaning for ints (like |).(See Operator Precedence)Options:Hack it in as |, which would look like a pipe. This would be an Abstract Syntax Tree (AST) hack, and can possibly break an imported library that uses |.Hack in a new operator (but don't use //, because that's important). You need to hack this in at the string level, before the AST.For you, it might be enough to take advantage of Python's and IPython's various commands, and skip the bothersome hacking altogether.First, instead of using sqrt, you can use Python's power operator.Next, in Python/IPython, the underscore "_" represents "the last result". You can type this:(IPython also allows _14 or Out[14] to mean "the result of the 14th input", and __ and ___ to mean "second-to-last result" and "third-to-last result", respectively.)Finally, with IPython, you can use functions without parentheses or commas if the line begins with a slash. (Enter ? in IPython to see more information about this, or go here.)


Answer URL
https://docs.python.org/3/reference/expressions.html#operator-precedence
