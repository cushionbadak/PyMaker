Natural Text
I am trying to write a memoization library that uses shelve to store the return values persistently. If I have memoized functions calling other memoized functions, I am wondering about how to correctly open the shelf file.Except this doesn't workWhat you recommend for a solution to this sort of problem.
Rather than trying to nest calls to open (which as you have discovered, does not work), you could make your decorator maintain a reference to the handle returned by shelve.open, and then if it exists and is still open, re-use that for subsequent calls:Output:Edit:You could also implement the decorator using a WeakValueDictionary, which looks a bit more readable:As soon as there are no other references to a handle, it will be deleted from the dictionary. Since our handle only goes out of scope when the outer-most call to a decorated function ends, we'll always have an entry in the dict while a handle is open, and no entry right after it closes.
No, you may not have nested shelve instances with the same filename. The shelve module does not support concurrent read/write access to shelved objects. (Multiple simultaneous read accesses are safe.) When a program has a shelf open for writing, no other program should have it open for reading or writing. Unix file locking can be used to solve this, but this differs across Unix versions and requires knowledge about the database implementation used.https://docs.python.org/3/library/shelve.html#restrictions
You are opening the file twice but never actually closing it to update the file for whatever use. Use f.close () at the end.


Answer URL
https://docs.python.org/3/library/shelve.html
https://docs.python.org/3/library/shelve.html#restrictions
