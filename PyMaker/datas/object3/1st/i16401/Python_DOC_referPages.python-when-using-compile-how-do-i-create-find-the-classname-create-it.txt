Natural Text
I have an issue where I need to instantiate a class, but I'm not sure what the most optimal way to go about this is.Imagine the following code:I think the code (and thus the question) speaks mostly for itself, how do I return and instantiate a new class with compile(..) so that I can call its methods?
There is no need to manually compile. Use importlib.import_module() to dynamically import the module.You can then use inspect.getmembers() together with the inspect.isclass() predicate to find all classes, including any that might match the module name:This returns an instance of the first class that has the same name as the module, titlecased.
The fundamental problem is that the code object (the thing you've used compile() to produce) can contain any Python code â€” e.g. it could define multiple classes.  As a result, you're going to have to specify how the file you're loading is supposed to indicate which class to use.One option, for instance, would be to require it to define a class with a well-known name.  For instance:You could simplify this quite a bit by using execfile() instead of compile() and exec():It's quite easy to come up with more complex schemes as well.FWIW, the reason to do this rather than use imp, importlib or __import__ is that the import-based options use the module system.  If this is for loading a plug-in, you probably don't want that, so execfile() et al are more appropriate.


Answer URL
https://docs.python.org/3/library/importlib.html#importlib.import_module
https://docs.python.org/3/library/inspect.html#inspect.getmembers
https://docs.python.org/3/library/inspect.html#inspect.isclass
