Natural Text
With PEP 557 data classes are introduced into python standard library. They make use of the @dataclass decorator and they are supposed to be "mutable namedtuples with default" but I'm not really sure I understand what this actually means and how they are different from common classes.What exactly are python data classes and when is it best to use them?
Data classes are just regular classes that are geared towards storing state, more than contain a lot of logic. Every time you create a class that mostly consists of attributes you made a data class.What the dataclasses module does is make it easier to create data classes. It takes care of a lot of boiler plate for you.This is especially important when your data class must be hashable; this requires a __hash__ method as well as an __eq__ method. If you add a custom __repr__ method for ease of debugging, that can become quite verbose:With dataclasses you can reduce it to:The same class decorator can also generate comparison methods (__lt__, __gt__, etc.) and handle immutability.namedtuple classes are also data classes, but are immutable by default (as well as being sequences). dataclasses are much more flexible in this regard, and can easily be structured such that they can fill the same role as a namedtuple class.The PEP was inspired by the attrs project, which can do even more (including slots, validators, converters, metadata, etc.).If you want to see some examples, I recently used dataclasses for several of my Advent of Code solutions, see the solutions for day 7, day 8, day 11 and day 20.If you want to use dataclasses module in Python versions < 3.7, then you could install the backported module (requires 3.6) or use the attrs project mentioned above.
Btw. Raymond Hettinger (Python core developer) had a great talk at PyCon 2018:https://www.youtube.com/watch?v=T-TwcmT6Rcw&t=1390The slides are here: https://twitter.com/raymondh/status/995693882812915712
OverviewThe question has been addressed.  However, this answer adds some practical examples to aid in the basic understanding of dataclasses.What exactly are python data classes and when is it best to use them?code generators: generate boilerplate code; you can choose to implement special methods in a regular class or have a dataclass implement them automatically. data containers: structures that hold data (e.g. tuples and dicts), often with dotted, attribute access such as classes, namedtuple and others."mutable namedtuples with default[s]"Here is what the latter phrase means:mutable: by default, dataclass attributes can be reassigned.  You can optionally make them immutable (see Examples below).namedtuple: you have dotted, attribute access like a namedtuple or a regular class.default: you can assign default values to attributesCompared to common classes, you primarily save on typing boilerplate code.FeaturesHere is an overview of dataclass features (see examples in the Summary Table).What you getHere are features you get by default from dataclasses.Attributes + Representation + ComparisonThe following defaults are automatically set to True:What you can turn onAdditional features are available if the appropriate keywords are set to True.OrderThe ordering methods are now implemented (overloading operators: < > <= >=), similarly to functools.total_ordering with stronger equality tests.Hashable, MutableAlthough the object is potentially mutable (possibly undesired), a hash is implemented.Hashable, ImmutableA hash is now implemented and changing the object or assigning to attributes is disallowed.Overall, the object is hashable if either unsafe_hash=True or frozen=True. See also the original hashing logic table with more details.What you don't getTo get the following features, special methods must be manually implemented:UnpackableOptimizationThe object size is now reduced:In some circumstances, __slots__ also improves the speed of creating instances and accessing attributes.  Also, slots do not allow default assignments; otherwise, a ValueError is raised.  See more on slots in this blog post. Summary Table+These methods are not automatically generated and require manual implementation in a dataclass.* __ne__ is not implemented.Additional featuresPost-initializationInheritanceConversionsConvert a dataclass to a tuple or a dict, recursively:LimitationsLacks mechanisms to handle starred argumentsReferencesR. Hettinger's talk on Dataclasses: The code generator to end all code generatorsT. Hunner's talk on Easier Classes: Python Classes Without All the CruftPython's documentation on hashing detailsReal Python's guide on The Ultimate Guide to Data Classes in Python 3.7A. Shaw's blog post on A brief tour of Python 3.7 data classesE. Smith's github repository on dataclasses
From the PEP specification:A class decorator is provided which inspects a class definition for  variables with type annotations as defined in PEP 526, "Syntax for  Variable Annotations". In this document, such variables are called  fields. Using these fields, the decorator adds generated method  definitions to the class to support instance initialization, a repr,  comparison methods, and optionally other methods as described in the  Specification section. Such a class is called a Data Class, but  there's really nothing special about the class: the decorator adds  generated methods to the class and returns the same class it was  given.The @dataclass generator adds methods to the class that you'd otherwise define yourself like __repr__, __init__, __lt__, and __gt__.


Answer URL
https://docs.python.org/3/library/functools.html#functools.total_ordering
https://docs.python.org/3/library/dataclasses.html#module-level-decorators-classes-and-functions
