Natural Text
Is there a way in python to get the technical information for a given character like it's displayed in the Unicode table? (cf.https://unicode-table.com/en/)Example:for the letter "Ȅ"Name > Latin Capital Letter E with Double GraveUnicode number > U+0204HTML-code > Ȅ Bloc > Latin Extended-B Lowercase > ȅWhat I actually need is to get for any Unicode number (like here U+0204) the corresponding name (Latin Capital Letter E with Double Grave) and the lowercase version (here "ȅ").Roughly:input = a Unicode numberoutput = corresponding informationThe closest thing I've been able to find is the fontTools library but I can't seem to find any tutorial/documentation on how to use it to do that.Thank you.
The standard module unicodedata defines a lot of properties, but not everything. A quick peek at its source confirms this.Fortunately unicodedata.txt, the data file where this comes from, is not hard to parse. Each line consists of exactly 15 elements, ; separated, which makes it ideal for parsing. Using the description of the elements on ftp://ftp.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.html, you can create a few classes to encapsulate the data. I've taken the names of the class elements from that list; the meaning of each of the elements is explained on that same page.Make sure to download ftp://ftp.unicode.org/Public/UNIDATA/UnicodeData.txt and ftp://ftp.unicode.org/Public/UNIDATA/Blocks.txt first, and put them inside the same folder as this program.Code (tested with Python 2.7 and 3.6):When loaded, you can now look up a character code withwhich by default is shown as the name of a character (Unicode calls this a 'code point'), but you can retrieve other properties as well:and (as long as you don't get a None) even chain them:It does not rely on your particular build of Python; you can always download an updated list from unicode.org and be assured to get the most recent information:(As tested with Python 3.5.3.)There are currently two lookup functions defined:find_code(int) looks up character information by codepoint as an integer.find_char(string) looks up character information for the character(s) in string. If there is only one character, it returns a UnicodeCharacter object; if there are more, it returns a list of objects.After import unicodelist (assuming you saved this as unicodelist.py), you can useto look up the hex code for any character, and a list comprehension such asfor longer strings. Note that you don't actually need all of this if all you want is a hex representation of a string! This suffices:The purpose of this module is to give easy access to other Unicode properties. A longer example:and showing a list of properties for a character per your example:(I left out HTML; these names are not defined in the Unicode standard.)
The unicodedata documentation shows how to do most of this.The Unicode block name is apparently not available but another Stack Overflow question has a solution of sorts and another has some additional approaches using regex.The uppercase/lowercase mapping and character number information is not particularly Unicode-specific; just use the regular Python string functions.So in summaryThe U+%04X formatting is sort-of correct, in that it simply avoids padding and prints the whole hex number for code points with a value higher than 65,535.  Note that some other formats require the use of %08X padding in this scenario (notably \U00010000 format in Python).
You can do this in some ways :1- create an API yourself ( I can't find anything that do this )2- create table in database or excel file3- load and parse a website to do thatI think the 3rd way is very easy. take a look as This Page. you can find some information there Unicodes.Get your Unicode number and then, find it in web page using parse tools like LXML , Scrapy , Selenium , etc


Answer URL
https://docs.python.org/3/library/unicodedata.html?#module-unicodedata
https://docs.python.org/3/library/unicodedata.html?#module-unicodedata
https://docs.python.org/3/library/unicodedata.html?#module-unicodedata
