Natural Text
Below is the basic logic for function foo:The logic in the loop can be very complex, in order to make the code more clear, I want to split the logic with a separate function.With inner function:With outer function:The inner function version val_in_foo_scope can be used directly -- goodwe can easily know that the some_logic is relevant with foo, actually only be used in function foo -- goodeach time function foo is called, a new inner function will be created -- not so goodThe outer function versionval_in_foo_scope can not be used directly -- not so goodwe can not see the relevance between some_logic and foo directly -- not so goodsome_logic will be created one time -- goodthere will be so many functions in the global namespace -- not so goodSo, which solution is better or is there any other solutions?Factors below or any other factors you come up with can be consideredï¼šval_in_foo_scope is used or notwhether the time cost to create inner function each time can be ignored
Use lambda if it's a simple function.Use an inner function if it is complex and you don't want to make it "public".Use a "private" method if you want to mark it hidden and uses members of the instance.Use a method if you want to make it "public" and uses members of the instance.Use a class method if it uses class members.And lastly use a global function if it's general enough to be used by other classes/functions.
You forgot one point in your pro/cons list: testability. Keeping some_logic out of foo makes it testable in isolation, which is important if it's indeed a "complex" (hence very probably critical) function. As a general rule, only use inner functions when you have both of those conditions: it's trivial stuff  and  passing the required context (the 'outer' function's context) would be a pain. (nb: I'm of course not talking about using inner functions for closures - like in a decorator - here).


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions
https://docs.python.org/3/tutorial/classes.html#private-variables
