Natural Text
I have an array. It contains values of different types. For instance, The task is to move all of the zeros to the end of the array. In fact, it should look like this My question is how to distinguish the boolean value False from 0? I'm trying to analyze the values one by one comparing them with 0. However, Python does not see any difference between 0 and False and in the end I have something like this below
In Python, due to historic and not breaking compatibility reasons, bool is a subclass of "int" and False and true just evaluate to 0 and 1. You can use a custom key function that checks, besides equality to zero, the type of the element. And then, since you want only 0s at the end, use the "0 and 1" equivalence of bool on your favor - elements that fail the boolean expression in the function are evaluated to "0" and placed before all the rest. Order on the remaining elements, for which the key is "False" is guarranteed to be preserved: https://docs.python.org/3/howto/sorting.html#sort-stability-and-complex-sorts (Thanks to Patrick Haugh)
You can filter the list from zeroes and add a list with the number of zeroes found to the end of the filtered list:Output:
Python has a built-in function type() which returns the "type" object of the parameter.You can simply do:
For this problem, type checking is a good idea. You could check if the current element is 0 and its not of type bool, and remove that element and add it to end of the list:Which Outputs what you want:Or you could make two lists, one with zeroes, and one with non-zeroes, and add them together. For the list of non-zeroes, the elements must not be 0, but can be of type bool, since False does not get moved to the end. However, for the list of zeroes, the elements must be 0, but not of type bool, since we don't want to move False to the end. Here are some examples below:1. Using list comprehensions2. Using filter():Note: For the type checking, we can use type() or isinstance() here. You can choose either. 
You can do something like this in just single loop :first collect all int values which are non-zero in one list and all zero in second list , at last extend the list:output:


Answer URL
https://docs.python.org/3/howto/sorting.html#sort-stability-and-complex-sorts
https://docs.python.org/3/library/functions.html#filter
https://docs.python.org/3/library/functions.html#type
https://docs.python.org/3/library/functions.html#isinstance
https://docs.python.org/3/howto/sorting.html#sort-stability-and-complex-sorts
