Natural Text
I'd like to apply a function with multiple returns to a pandas DataFrame and put the results in separate new columns in that DataFrame.So given something like this:The goal is a single command that calls add_subtract on a and b to create two new columns in df: sum and difference.I thought something like this might work:But it yields this error:----> 9     lambda row: add_subtract(row['a'], row['b']), axis=1)ValueError: too many values to unpack (expected 2)EDIT: In addition to the below answers, pandas apply function that returns multiple values to rows in pandas dataframe shows that the function can be modified to return a list or Series, i.e.:or both work (the latter being equivalent to Wen's accepted answer).
Adding pd.Seriesyields
One way to do this would be to use pd.DataFrame.assign as follows:Should yield:Clarifications:zip is a builtin function that returns an iterator of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables. For instance, list(zip(['sum', 'difference'], [df.a + df.b], df.a - df.b)) should return [('sum', df.a + df.b), ('difference', df.a - df.b)].** in front of a dictionary object serves as an operator that unpacks the combination of key and value pairs. In essence, the unpacking could be represented as something like this: sum=df.a + df.b, difference=df.a - df.b.In sum, when combined, you get something like the following:Follow the provided links to both zip and the ** operator in front of a dictionary object to get a better idea of how these useful tools work beyond this particular example.


Answer URL
https://docs.python.org/3/library/functions.html#zip
