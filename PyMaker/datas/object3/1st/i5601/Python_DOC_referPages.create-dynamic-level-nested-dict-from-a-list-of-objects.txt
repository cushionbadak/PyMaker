Natural Text
I am trying to turn a list of objects into a nested dict which could be accessed by indexes.The following code works for a two-level nested dictionary. I would like to extend it to work flexibly for any number of levels.Outputs:
You could try sth along the following lines. Just iterate the list of attribtes specified by the indexes and keep following down the thus created nested dict:This produces the following outputs:
One of the best ways I've ever seen to implement nested dictionaries is Aaron Hall's answer to the question What is the best way to implement nested dictionaries?. This is an example of implementing a type that does something called "Autovivification" in the Perl programming language.Anyway, using one here would be useful because it means you only need to call setdefault() for the "leaves" of your tree-like data structure (which are lists, not sub-dictionaries).So here's an answer to your question that makes use of it:Output:
Your code was actually a good attempt, the small addition I've made was maintaining the current map that the last index introduced and let the next index create a map in there. So for each index (and thus each iteration in the loop) you actually go a level deeper. At the last level a list is created instead of a dictionary, and after the loop the item is simply appended to the current level.
This question might be more suitable for CodeReview.Since your code is working, here are a few hints:namedtuple returns a class. holding should be written Holding.lst is too generic. It's a list of Holding instances, it could be called holdings.index0 is not a list index but a dict key.You could use nested defaultdicts instead of calling setdefault repeatedly.Here's an example:
I started using QueryList instead of nested dict's and it has made my life so much easier.for example:ql.filter(ticker="MSFT')  will return a list of all MSFT records.


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
