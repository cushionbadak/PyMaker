Natural Text
I am not sure what would be an appropriate heading for this question and this can be a repeated question as well. So please guide accordingly.I am new to python programming. I have this simple code to generate Fibonacci series.If I execute the above code as-is the result I get is as followsIf uncomment #6 and comment lines #7 and #8 the result I get is the actual fibo series.I would like to know what is the difference betweenand Programming IDE used: PyCharm Community 2017.3
is actually:what you want is:When you doa, b = b, a + bit really is doing:which is what you want
In line 7, you've already assigned the value in b to a, so in line 8, new value for b is actually double the old b's value. While in line 6, the values on the right side of = will be using the old values, that's why you could get Fibo series.
Assignment Statements assigns reference of source variable to target variable. Let walk through an example to understand moreIn this example b is source variable and a is the target variable. Now memory address for both of these variables are same. We can confirm this as wellAnother test to confirm this is to use is operatorNow coming back to your example. First statementAssignes b to a and (a+b) to b. This happens as a single operation so both variables are different. We can apply above tests to confirm thisThe second statementAssignes b to a and then (a+b) to b. These are two different statements, so at first step a and b are already identical. Thus the second statement is equivalent to b = b + b.  
Thought make it simple so anyone can understand it if you use this kind of syntax after initially assigning a = 10 it will be assigning a = 20 since python is dynamically typed language it will change the value of variable a from 10 to 20so the result will be like but if we use this will be assigning the values in a single line so the values of a and b will be exactly used from what it is initialised above it and the result will be like which is the correct solution
I think the # line is pythonic solution. But if you got confused,you can you use a variable which is temporary. you can assign the value temp before, then you can change the values


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#assignment-statements
