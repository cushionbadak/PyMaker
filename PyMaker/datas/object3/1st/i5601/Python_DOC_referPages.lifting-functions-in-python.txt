Natural Text
Say you have a function f:integers -> integers, one should be able to lift this function to act on sets of integers. I.e. f:sets of integers -> sets of integers, by f({a,b,...}) = {f(a),f(b),...}How can one do this succinctly in python? That is, not involving iterables (loops), potentially something more native and order-independent.I would expect f({a,b,...}) to be the syntax, but it's not. Maybe something like act(f,{a,b,...})?
Python 2.7.10What you described is mapping; it does involve loops in the background, but it achieves your succinctness. Here's an example.map applies the function f to every element of l.map also works on sets; however, map returns back a list of values e.g. f({x1,x2,x3}) = [f(x1),f(x2),f(x3)], in an arbitrary order. You can turn the returned list back into a set by wrapping it as a set. Python 3.6In Python 3.6, map returns back a map object, and you will need to convert it to your desired typed. This example shows the map object converted to a list. Alternatively, you can reduce the amount of code further using lambda functions, making it more succinct. Where the lambda expression has the functionality f but used only there and non-existent afterwards. 
The tools you want are map, and in itertools.For example, to apply f on a collection c of elements, you can useNote that the application is lazy in Python 3, and eager in Python 2.7. Alternatively, you can also use a lazy comprehension:
You can pass multiple arguments as well , like this:It'll return like:
In Python currying is not a native feature but you can emulate it using functools.partial. For instance, you can use partial to lift a function f: A -> B to a function f': [A] -> [B].


Answer URL
https://docs.python.org/3/library/functions.html#map
https://docs.python.org/3/library/itertools.html
