Natural Text
I want to make a list of elements where each element starts with 4 numbers and ends with 4 letters with every possible combination. This is my codeThis runs fine but when I use a bigger range of characters, such as (a-z)  the program hogs the CPU and memory, and the PC becomes unresponsive. So how can I do this in a more efficient way?
The documentation of itertools says that "it is roughly equivalent to nested for-loops in a generator expression". So itertools.product is never an enemy of memory, but if you store its results in a list, that list is. Therefore:is okay, butor the equivalent loop ofis not! So you want itertools to generate results for you, but you don't want to store them, rather use them as they are generated. Think about this line of your code:Given that nums and chars can be huge lists, building another gigantic list of all combinations on top of them is definitely going to choke your system.Now, as mentioned in the comments, if you replace all the lists that are too fat to fit into the memory with generators (functions that just yield), memory is not going to be a concern anymore.Here is my full code. I basically changed your lists of chars and nums to generators, and got rid of the final list of c.Now let's ask what every combination of ['a','b'] and range(2) is:Produces this:Which is the exact result you are looking for. Each element of this result is generated on the fly, hence never creates a memory problem. You can now try and see that much bigger operations such as final(['a','z'],10) are CPU-friendly.


Answer URL
https://docs.python.org/3/library/itertools.html
