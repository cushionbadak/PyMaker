Natural Text
I have loaded a black and white image as a numpy array. The array shape is equal to the pixels in the image. I want to extract certain ranges of pixel values, for instance, etc etc, but I don't want to hardcode the index numbers. Rather, I want to load the index values from a list of values. For instance, I have a list of index values like:So effectively I want something like:which would take the place of:I've tried a variety of things which haven't worked like:and trying to pass that like so:but that doesn't work because I can't concatenate those values. Is there any way to accomplish this?
Slicing is syntax, not a string. See the Slicings expressions reference documentation:The semantics for a slicing are as follows. The primary is indexed (using the same __getitem__() method as normal subscription) with a key that is constructed from the slice list, as follows. If the slice list contains at least one comma, the key is a tuple containing the conversion of the slice items; otherwise, the conversion of the lone slice item is the key. The conversion of a slice item that is an expression is that expression. The conversion of a proper slice is a slice object (see section The standard type hierarchy) whose start, stop and step attributes are the values of the expressions given as lower bound, upper bound and stride, respectively, substituting None for missing expressions.Bold emphasis mine.You can bypass this conversion (from slice syntax to slice() objects) by creating slice() objects directly; you can put them in tuples if need be.Sois equivalent toI've omitted the step argument; it defaults to None when omitted.Extending this to your list would be:
You should use a list of slice instances (or tuples thereof), not strings.Here's an example.a[listofindexvalues[0]] is equivalent to a[1:6, 3:4] in this case.


Answer URL
https://docs.python.org/3/reference/expressions.html#slicings
https://docs.python.org/3/reference/datamodel.html#types
