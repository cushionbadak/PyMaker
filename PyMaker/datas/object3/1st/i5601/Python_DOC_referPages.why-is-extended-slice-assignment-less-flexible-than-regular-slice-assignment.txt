Natural Text
According to the Python documentation on extended slices:If you have a mutable sequence such as a list or an array you can  assign to or delete an extended slice, but there are some differences  between assignment to extended and regular slices. Assignment to a  regular slice can be used to change the length of the sequence:Extended slices aren't this flexible. When assigning to an extended  slice, the list on the right hand side of the statement must contain  the same number of items as the slice it is replacing:I do not understand why the "ordinary" slice method works but the "extended" slice method doesn't work. What differentiates an "ordinary" slice from an "extended" slice, and why does the "extended" slice method fail?
It's a little easier to see the problem if you try to imagine howwould work with a 4-item list:We're trying to replace every third value, but our list isn't long enough, so if we went ahead anyway we'd end up with some kind of weird frankenstein list where some of the items don't actually exist. If someone then tried to access a[5] and got an IndexError (even though a[6] works normally), they'd get really confused.Although you could technically get away with the a[::2] case by extending a by one, for the sake of consistency, Python bans all extended slicing assignments are unless there's already a place for the value to go.A regular slice always has a stride of one, so there's no chance of any gaps occurring, and so the assignment can safely be allowed.


Answer URL
https://docs.python.org/3/whatsnew/2.3.html#extended-slices
