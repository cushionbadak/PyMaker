Natural Text
Consider the following CSV:The following looks for some characters I've defined, removes them, then adds a string at the end of each line (row). It "works", but I'm not sure I'm going about it the right way....which...in my opinion, should open, edit, and save the original file. I'll be running this against thousands of CSV files so it can get quite cluttered. 
You only need to open the file once to read, and once to write, and you don't need to use two separate files. The less file reading and writing you do, the faster your script will run.A few incidental points:use with open(...) as f consistentlya more readable method of replacing characters is to use str.replace().you might like to check out str.splitlines()Also, it doesn't look from this example like you're actually using the csv module at all in your code.Here's what I would suggest:
you're overcomplicating it.First, read the lines, applying strip on the lines to remove all the chars at start or end of the string (including newline or it wouldn't work). Using a loop with replace is highly inefficient and unneccesary here since strip does exactly what you want in one go.Then, write back the lines to the same file, appending the domain & linefeed


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.replace
https://docs.python.org/3/library/stdtypes.html#str.splitlines
