Natural Text
I have a list:I want to write a function which will take any number (no) from this list and return the next and previous element.So, for example, if I pass 2, I should get [1,3] (1 being the previous and 3 the next elements).But there is a catch: If no = 1 the previous element should be 6 and similarly for no = 6 next should be 1I would like something like:I tried:But this seems like a very naive and basic approach.. Is there a better way to do this?FYI List of days not required, that was just for understanding the total no.
@juanpa.arrivillaga's answer covers the specifics of this question quite well (which is a question on how to use modulo arithmetic).  However, in the general case of accessing the previous and next elements of any list, this is how I'd do it - The first expression l[i - 1] takes advantage python's ability to access elements using negative indices. The second expression, l[(i + 1) % len(l)], is a common circular list access idiom. To return a tuple instead of a list, drop the enclosing square brackets in the return statement - Note that this does not handle the possibility of no not being in the list. In that case, you'd use something like exception handling to catch any ValueErrors raised - 
If you are working with "days" encoded 1-6, use the following:
You can just use slicing (and optionally, for elegance, mod) like so:Examples:
I would say the following works:Depending on whether or not you also only accept 1 <= no <= 6, you could add a condition to this function like so:
try this function or you can use circular linked-list in this function i have mimicked that behaviour
Are you sure you need a list of days?
I think the trick you mentioned is famous as circular linked list. Please correct me if I'm wrong about it.
For the previous, you can take advantage of the fact that when indexing a list, negative indexes mean "negative starting on the last element". It helps me thinking about the [-1] as "overflowing", which means going to the first element (index 0) and start counting from the last element.For the next, you can use the modulo (%) operator, to make sure you keep your indexes between 0 and len(days_list). This is only critical in the case the index of the number you want to calculate the next is the last element of the list (index 5, value 6 in the day_list). Just adding +1 to the index 5 would put you in 6, which is not a valid index. But then you get the module of 6 % 6 and "becomes" 0.Outputs:


Answer URL
https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations
