Natural Text
I wrote a program to list all the prime numbers less than a number the user inputs. When I run the program in PyCharm, the output is very nice: each number is properly situated on the line and no numbers are spread across two lines. However, when I run the program from the command line, the formatting gets weird, with numbers at the end of a row sometimes getting cut off. Here is my code:The list_primes function simply checks whether each odd number from three to the user's number is prime and returns a list of all the primes it finds.What I would like to do ideally is print a small slice of the primes list on each line (say, five elements per line), but I can't think of how to do that without abandoning the generality of the program and using a bunch of for-loops. Are there any Python tricks out there that will help me?
Try something like this:OutputExplanationAfter you gather the list of primes, group the entire list into slices of (in this example) 5 elements each. Change the per_line variable to change the number of primes printed on each line.This code snippet will not handle the case when per_line is sufficiently large that the printed primes cause the console line to wrap.I also shortened the printing step to one line by using join() on each group of primes.You were concerned about "abandoning the generality of the program and using a bunch of for-loops," but this code snippet avoids a loss of generality and only uses one for-loop.
You could keep track of the index you are at and print in accordance to how many you want on a single line. Using your code for example to print five on a line like requested:The modulus operator(%) will determine if count is a multiple of 5 and if it is then the print will add a new line to the end of the prime number. The output of primes = [1, 3, 5, 7, 11, 13, 17] will be:
Here's another way to do it, using fixed width formatting and only one iteration through your list:The output will be:The %2d in the string formatting says print my numbers using 2 spaces. The logic here is that you build a list of strings for printing. Every N digits, you add a newline (\n) to your string. Finally join the strings together with an empty string ('').Note: enumerate returns a tuple of (index, value), so x[0] refers to the index in the list and x[1] refers to the value at that index.
Here are a bunch of methods that print the list, nothing really stands out. I remember that at some point I've read something very nice on tabular I/O formatting, but I can't remember now.code.py:Output (truncated lines to look exaclty as in my (140 chars wide) cmd console):


Answer URL
https://docs.python.org/3/library/pprint.html#pprint.pprint
