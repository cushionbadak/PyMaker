Natural Text
I have tried using several different similar solutions that I have found online, but none seem to quite do what I am aiming for.  I want to call an external script (helloworld.py) into my tkinter gui.  I want this called script (helloworld.py) to execute all the functions that are contained in it upon a button press in the gui and print the resulting outputs into the gui, not the console.  I have found some solutions which will print the output to the console, but I am unable to get it to display in the gui.  Any solutions that I have found that print to the gui do not work when I try to get the output to come from a called external script.  I appreciate any help.  I am definitely a novice, so I apologize for what is probably a basic question and the inability to connect the dots for myself on similar questions asked on here.  Below is one of the versions of code that I am currently working with.  Thank you in advance for your help!EDITI also started having some success with trying to import the called script as a module.  The problem with this is I can only get one function to print out from the called script even though there are multiple functions that I want to try and call (I just want the entire called script to print out all the results of its functions).Here is an example of a script that I want to call helloworld.py:And here is an example of the tkinter gui script that is trying to import helloworld.py:This results in only the first function printing ('hello worldz!').  Any thoughts on why it only will return one line and not the entire helloworld.py script?  
You can use subprocess.check_output() to get output and assign to LabelYou can also import script and execute function from script. But first you will have to redirect sys.stdout using class with write() and then it will catch all printed text.You can redirect sys.stdout to variable (see StdoutRedirector) and then you can edit it (ie. strip \n at the end) or you can redirect directly to Label (see StdoutRedirectorLabel)test.py
In a method when a line with return ... is run, nothing else will be seen that comes after that line, as in your 2nd line of return ... is effectively useless as return  cooz() is run unconditionally. You could simply replace your main with:and accordingly your printSomething:Returning all methods/functions from a script without explicitly passing method names:Well, I stand corrected, based on this answer you can do it fairly simply. For calling all methods or functions this answer helped a lot.Let's say there's a script named hello_world.py:is in the same directory as GUI script below:which returns console output of all methods and functions in hello_world.py as a string. Based on this suggestion it then puts that string in a Text field.


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.check_output
