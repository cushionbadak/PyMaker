Natural Text
So I need to call an async function for all items in a list. This could be a list of URLs and an async function using aiohttp that gets a response back from every URL. Now obviously I cannot do the following:I can use a normal for loop but then my code will act synchronously and I lose the benefits and speed of having an async response fetching function.Is there any way I can convert a list such that the above works? I just need to change the list's __iter__() to a __aiter__() method right? Can this be achieved by subclassing a list? Maybe encapsulating it in a class?
Use asyncio.as_completed:Or asyncio.gather:EDIT: If you don't mind having an external dependency, you can use aiostream.stream.map:You can control the amount of fetch coroutine running concurrently using the task_limit argument, and choose whether to get the results in order, or as soon as possible.See more examples in this demonstration and the documentation.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.as_completed
https://docs.python.org/3/library/asyncio-task.html#asyncio.gather
