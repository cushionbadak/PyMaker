Natural Text
I was reading this: Combining two lists and removing duplicates, without removing duplicates in original list but my need goes beyond. I have at least 30 lists and I need the union without duplicates of all the lists. Right now my first try was just to use + to just append all the member in one great list and then use set to remove duplicates, but I'm not sure if this is the best solution:Edit - Adding samples:My real question is if this the best way to go with this combination?
If I understand correctly what you are trying to do, you can use the set.update method with an arbitrary number of iterable arguments.edit: with your sample data:
Use set.union(set1, set2, set3, ..).More compact (works for both Py2 and Py3, Thanks @Lynn!): 
One approach using set.union has already been mentioned, although applied onto each list after first mapping the lists to set instances.As an alternative, the explicit set mapping can be omitted, as set.union, much like set.update (the latter approach covered in the accepted answer) also takes arbitrary number of iterable arguments, allowing directly invoking set.union over an empty set and the provided lists.
What you could do is create a function that accepts any number of lists, flattens them and returns the union:The benefit of the above function is that it preserves the order of the list items as they are inserted, unlike a set(), which is unordered. It however uses a set() for checking if items have been added, which is O(1), but inserts them into a list instead, since lists are ordered. It also flattens the list with itertools.chain.from_iterable, which is O(n). Then you can simply run this function on as many lists as you want:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
