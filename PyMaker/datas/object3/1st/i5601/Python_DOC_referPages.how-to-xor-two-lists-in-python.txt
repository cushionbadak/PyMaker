Natural Text
I've got two lists, for example:If I want to create a third list that only contains elements NOT in both:How do I do this if the order of the elements IS important? I know I can use sets but they keep throwing out the order of my lists. I could use ' '.join(list) to convert them to strings but not sure how to do this operation in that format either.
You can concatenate the lists and use list comprehension:Output:
Option 1: set method (recommended)Sets have a symmetric_difference method that exclusively return elements from either a or b.  Order can be preserved with a list comprehension for a concatenated list a + b.Option 2: pathlib methodFor reference, another way to diff two lists might be with pathlib.Path.relative_to method:  Note: b is the longer list.  This option is potentially less efficient than a simple list comprehension. 
Add two lists together and minus the intersection part if it shows in the new list. Order is preserved.
This code print elements that are only in one of the tables.Look here:https://learnpython.org/en/Sets
You could also just create a function that filters elements from l1 that don't exist in l2, and call it twice with the arguments flipped:If you don't wish to use filter(), a simple list comprehension like this also works:
The question is not very clear, indeed, and probably you're good with @Ajax1234 's answer, but here's another "take" on it.If you wanna compare positions (kind of what a bit-wise XOR would do) you can do something like getting the shortest list, iterate checking position by position with the longest list (check the same position in the longest list matches the word in the shortest list) and then add the remainder (the "unwalked" part of the longest list). Something like the following:However, then you have the problem of what to do if the same positions don't match. I mean... What to do in that case? In the code above, I just added both entries to the results list, which means for the following inputs:would output:(notice both foo from list a and world from list b have been added)
Using standard for loop to check for items not in one or the other list (may be more understandable than list comprehension):Output:
I recommend, using ^ operator with sets, like set(a) ^ set(b), Example (demo):https://docs.python.org/2/library/stdtypes.html#frozenset.symmetric_difference


Answer URL
https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.relative_to
https://docs.python.org/3/library/functions.html#filter
