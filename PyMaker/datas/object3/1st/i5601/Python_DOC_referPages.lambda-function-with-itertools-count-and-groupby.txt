Natural Text
Can someone please explain the groupby operation and the lambda function being used on this SO post? key=lambda k, line=count(): next(line) // chunkEdit: It took me a while to wrap my head around the lambda function used with groupby. I don't think I understood either of them very well. Martijn explained it really well, however I have a follow up question. Why is line=count() passed as an argument to the lambda function every time? I tried assigning the variable line to count() just once, outside the function.and it resulted in TypeError: <lambda>() missing 1 required positional argument: 'line'Also, calling next on count() directly within the lambda expression, resulted in all the lines in the input file getting bunched together i.e a single key was generated by the groupby function.I'm learning Python on my own, so any help or pointers to reference materials /PyCon talks are much appreciated. Anything really!
itertools.count() is an infinite iterator of increasing integer numbers.The lambda stores an instance as a keyword argument, so every time the lambda is called the local variable line references that object. next() advances an iterator, retrieving the next value:So next(line) retrieves the next count in the sequence, and divides that value by chunk (taking only the integer portion of the division). The k argument is ignored.Because integer division is used, the result of the lambda is going to be chunk repeats of an increasing integer; if chunk is 3, then you get 0 three times, then 1 three times, then 2 three times, etc:It is this resulting value that groupby() groups the datafile iterable by, producing groups of chunk lines.When looping over the groupby() results with for k, group in groups:, k is the number that the lambda produced and the results are grouped by; the for loop in the code ignores this. group is an iterable of lines from datafile, and will always contain chunk lines.
In response to the updated OP...The itertools.groupby iterator offers ways to group items together, giving more control when a key function is defined.  See more on how itertools.groupby() works.The lambda function, is a functional, shorthand way of writing a regular function.  For example:Is equivalent to this regular function:Keywords: iterator, functional programming, anonymous functionsDetailsWhy is line=count() passed as an argument to the lambda function every time?The reason is the same for normal functions.  The line parameter by itself is a positional argument.  When a value is assigned, it becomes a default keyword argument.  See more on positional vs. keyword arguments.You can still define line=count() outside the function by assigning the result to a keyword argument:... calling next on count() directly within the lambda expression, resulted in all the lines in the input file getting bunched together i.e a single key was generated by the groupby function ...Try the following experiment with count():As expected, you will notice next() is yielding the next item from the count() iterator.  (A similar function is called iterating an iterator with a for loop).  What is unique here is that generators do not reset - next() simply gives the next item in the line (as seen in the former example).  @Martijn Pieters pointed out next(line) // chunk computes a floored integer that is used by groupby to identify each line (bunching similar lines with similar ids together), which is also expected.  See the references for more on how groupby works.References Docs for itertools.countDocs for itertools.groupby()Beazley, D. and Jones, B.  "7.7 Capturing Variables in Anonymous Functions," Python Cookbook, 3rd ed. O'Reilly. 2013.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.count
https://docs.python.org/3/library/itertools.html#itertools.groupby
