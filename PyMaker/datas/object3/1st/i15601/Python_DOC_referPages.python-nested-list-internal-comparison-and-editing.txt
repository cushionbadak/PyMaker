Natural Text
I've been trying to figure something out, easiest way to explain is using an example:This is the kind of list I start from.I need to end up with a list that contains lists of all the lists in a that contain overlapping elements added together.How would I go about this?Kind regards,Daquicker
This will go one-by-one through the list and create a set from the current sublist (s). Then it will check in the results, if there is another set t that has a non-empty intersection with it. If thatâ€™s the case, the items from s are added to that set t. If there is no t with a non-empty intersection, then s is a new independent result and can be appended to the result list.A problem like this is also a good example for a fixed-point iteration. In this case, you would look at the list and continue to merge sublists as long as you could still find lists that overlap. You could implement this using itertools.combinations to look at pairs of sublists:
One way I can think of doing this is through recursion. Start with one item, then loop until you find every number it's connected to. For each of these numbers, you must do the same. Hence the recursion. To make it more efficient, store numbers you've visited in a list and check it at the beginning of each recursive sequence to make sure you don't repeat any explorations.
A two liner:
I have left the last step for you:
Simple answer:its more simple than first one:Result:[1, 2, 4, 2, 5, 0, 3, 7, 8, 12, 3, 6, 18, 14]And with this, you can compare the numbers:Result: 12425037812361814Also you can make it more cute:Result: 1 2 4 2 5 0 3 7 8 1 2 3 6 1 8 1 4


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
