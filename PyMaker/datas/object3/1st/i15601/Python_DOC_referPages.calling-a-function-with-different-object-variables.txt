Natural Text
In Python, I have a list of objects, each of which has two variables:I would like to be able to call a function with this list, and the function would have an argument that would determine whether to act on data1 or data2.Ex:I could just make the variable_name argument an integer, and have a version of the function code contained in an if statement for each integer value, but that is much less general.
I would like to be able to call a function with this list, and the function would have an argument that would determine whether to act on data1 or data2.In that case, you do not want attributes named data1 and data2, you want a single attribute named data, which is a list or other collection of two values.Attributes are for things that you reference statically, using names hardcoded into your code. You can tell that you used elements when you should have used attributes, because you end up having to write spam['eggs'] instead of spam.eggs all over the place, which is ugly.Elements are for things that you reference dynamically, using names (or indices) passed in variables. You can tell that you used attributes when you should have used elements, because you end up having to write getattr(spam, 'eggs') instead of spam['eggs'] all over the place, which is even uglier. (Or, for novices, you end up not even knowing how to write the code in the first placeâ€”but iCodez's answer explains how.)For example:If you want to use names instead of indexes, use a dict instead of a list. For example:Or maybe use indexes, but name them:(Or, even better, use an enum.IntEnum.)See Keep data out of your variable names and Why you don't want to dynamically create variables for further explanation.
You can use getattr and pass the attribute names as strings:Or, a little more concisely:Below is a demonstration:


Answer URL
https://docs.python.org/3/library/functions.html#getattr
