Natural Text
Consider the following sample code:There is nothing syntactically wrong (using Python2.7) with the code except that if you run python with  warnings turned on, you would see a DeprecationWarning:FYI, this is because .message was deprecated since python2.6 and removed in python3.Now, I'd like to find all places in the project where .message is called on any exception instance by using static code analysis tools. As an end goal, I'm planning to have this check running as a part of a daily build&test&code quality check task and raise an error if the syntax is still used.Is it possible? Is it something that pylint, pyflakes or other code analysis tools are capable of?I found that pep8 tool has several similar checks implemented, for instance, has_key() usage check:As an alternative solution, I can treat all warnings as errors (like suggested here) and make my tests fail but this has its disadvantages:there are other deprecation warnings coming from third-party packages that I cannot fixstrictly speaking, this requires 100% coverage, which is difficult to maintain 
Since you want to do this statically, you can use the ast module to parse the code and then scan it for any occurrence of the deprecated code with a subclass of the NodeVisitor class.  Like so:This works by using python parse the source file into an AST and then uses the visitor pattern to walk through the entire file and find any instances of the deprecated attribute.  For more information on how this works, see the python documentation on the ast module.Note that this won't work if you use something clever to refer to the exception object.  It simply takes the variable name that the exception object was bound to and checks if a message attribute is ever accessed from a variable of the same name inside the body of the exception handler.


Answer URL
https://docs.python.org/3/library/ast.html
