Natural Text
I have a list with keys and I wish to get the key values from a dict as they occur. Momentarily I have a function which takes a list with keys, but it only returns one occurrence for the same key although the same key occurs numerous of times in the list.For instance [1,2,3] instead of [1,2,2,2,1,1,3,3]Here is my code:And here is my expected output:
Your list comprehension should be indexing dict_ with each value in key_list:Your current code is incorrect because it is doing something different: it is getting all the values in dict_ that have keys which are in key_list.  In other words, it is filtering the values by key_list.
This is already built in to the standard library—it's what itemgetter does when you give it multiple keys:If you need a list instead of a tuple, just convert it:From the docs:Return a callable object that fetches item from its operand using the operand’s __getitem__() method. If multiple items are specified, returns a tuple of lookup values.The cool thing about this is that you can store itemgetter(key_list) and repeatedly apply it to different dictionaries, or pass it as a key function to a sort call, etc. But if you don't need any of that, you can call it directly, as I did above.The docs also show you how to write the same thing yourself:And here, if you want a list, just use a list comprehension instead of a generator expression and the tuple function:
What you want is a one-to-one mapping of your input to output, using the dictionary to do the translation/mapping. Hence, you should iterate on your input list not on the dict items. Code below. 


Answer URL
https://docs.python.org/3/library/operator.html#operator.itemgetter
