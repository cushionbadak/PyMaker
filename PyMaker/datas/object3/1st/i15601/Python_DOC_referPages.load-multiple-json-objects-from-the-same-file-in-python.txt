Natural Text
I have a multi-gigabyte JSON file. The file is made up of JSON objects that are no more than a few thousand characters each, but there are no line breaks between the records.Using Python 3 and the json module, how can I read one JSON object at a time from the file into memory?The data is in a plain text file. Here is an example of a similar record.  The actual records contains many nested dictionaries and lists.Record in readable format:Actual format. New records start one after the other without any breaks.
Generally speaking, putting more than one JSON object into a file makes that file invalid, broken JSON. That said, you can still parse data in chunks using the JSONDecoder.raw_decode() method.The following will yield complete objects as the parser finds them:This function will read chunks from the given file object in buffersize chunks, and have the decoder object parse whole JSON objects from the buffer. Each parsed object is yielded to the caller.Use it like this:Use this only if your JSON objects are written to a file back-to-back, with no newlines in between. If you do have newlines, and each JSON object is limited to a single line, you have a JSON Lines document, in which case you can use Loading and parsing a JSON file with multiple JSON objects in Python instead.
If your JSON documents contains a list of objects, and you want to read one object one-at-a-time, you can use the iterative JSON parser ijson for the job. It will only read more content from the file when it needs to decode the next object.Note that you should use it with the YAJL library, otherwise you will likely not see any performance increase.That being said, unless your file is really big, reading it completely into memory and then parsing it with the normal JSON module will probably still be the best option.
Here is a slight modification of Martijn Pieters' solution, which will handle JSON strings separated with whitespace.For example, if data.txt contains JSON strings separated by a space:then


Answer URL
