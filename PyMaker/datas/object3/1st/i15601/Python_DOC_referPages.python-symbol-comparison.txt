Natural Text
I have  st = 'aaaabb—Åaa'. My task is if in the string characters repeat then I must write the character plus a number counting the repeats.My code (but it doesn't work):Sample Input 1: aaaabbcaaSample Output 1: a4b2c1a2Sample Input 2: abcSample Output 2: a1b1c1
You've got three problems with your code.First, as gnibbler points out, all of your if/elif conditions are the same. And you don't need a separate condition for each letter, you just need to print the variable (like st[i]) instead of a literal (like "a").Second, you're trying to print out the current run length for each character in the run, instead of after the entire run. So, if you get this working, instead of a4b2c1a2 you're going to get a1a2a3a4b1b2c1a1a2. You need to keep track of the current run length for each character in the run, but then only print it out when you get to a different character.Finally, you've got two off-by-one errors. First, when i starts at 0, st[i - 1] is st[-1], which is the last character; you don't want to compare with that. Second, when i finally gets to j-1 at the end, you've got a leftover run that you need to deal with.So, the smallest change to your code is:As a side note, one really easy way to improve this: range(len(st)) gives you all the numbers from 0 up to but not including len(st), so you can get rid of j and the manual i loop and just use for i in range(len(st)):.But you can improve this even further by looping over an iterable of st[i], st[i-1] pairs; then you don't need the indexes at all. This is pretty easy with zip and slicing. And then you don't need the special handling for the edges either either:I think Matthias's groupby solution is more pythonic, and simpler (there's still a lot of things you could get wrong with this, like starting with cnt = 0), but this should be mostly understandable to a novice out of the box. (If you don't understand the zip(st[1:]+" ", st), try printing out st[1:], list(zip(st[1:], st)), and list(zip(st[1:]+" ", st) and it should be clearer.)
This looks like a task for itertools.groupby.ResultThis might help to understand what's happening here.Result
This is kind of a silly way to go about it, but:Example


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/tutorial/introduction.html#strings
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/tutorial/classes.html
