Natural Text
This is more or less how I would track the number of class instances, since __new__ is called every time one is made:Is there a magic method that is called when a new reference to a specific instance of a class is made? If not, is there a straight forward way to implement one? For example: So now:Edit:Here's the problem I thought I would try to solve using reference tracking. My idea is to have an object A instance that contains multiple (weak) references to object Bs. There is a separate list containing all valid Bs. There is a list of all the As as well (thousands). The desired behavior is that when any one B is removed from the B list, for any object A to become None if it contained a reference to that particular B removed from the B list. 
As far as I know there is no magic method that does this, but maybe you could use sys.getrefcount():Return the reference count of the object. The count returned is generally one higher than you might expect, because it includes the (temporary) reference as an argument to getrefcount().Using your example:
I just thought of a simple way to almost accomplish this, and it's probably good enough for my situation. All I have to do is be sure to call the object every time it is referenced. This isn't quite as neat and tidy as I was hoping for, but it does allow tracking of the number of references that I'm interested in (though it does not track all references). Here's a code sample to illustrate:Now I can do this:I just have to remember to call my special object every time I add or delete it. Alternatively, I could subclass a special container class for the special objects that calls the object with the appropriate argument when it is added or removed. Not sure if it's worth the effort to do this though. 


Answer URL
https://docs.python.org/3/library/sys.html#sys.getrefcount
