Natural Text
If I want to implement this, how can I do that?I know that every time when we call for i in object:First go def __iter__(self) then go def __next__(self), but I don't see iter transferany argument to next. So, how?Expected Output:
Another example for a custom iteration:Which prints the keys in data sorted by value:As gist: https://gist.github.com/miku/01d50434b232367f8bfd#file-ex-py
The point of creating an iterator class, with __iter__ and __next__ special methods, is that it's a class, which means it can store state explicitly, in instance attributes.For example:If you don't want to create an iterator, but just an iterableâ€”that is, something whose __iter__ method doesn't return self, but instead returns some other object with a __next__ (and within an __iter__ that returns itself), you can return anything you want in __iter__.Or you can even make __iter__ itself a generator function, in which case it returns a generator:Or, if you prefer:This way, the state is now inside the __iter__ method and/or the thing it returns.
You can have the __iter__ special method filter out "special" with a generator expression:
I don't like my own implementation.I want make something just iterate the dict keys one time.But this method took all keys out, convert to set, and discard special and iter on the set.It's too complicate. Any better idea?


Answer URL
https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression
