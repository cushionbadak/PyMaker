Natural Text
Please consider the following short Python 2.x script:The output of which, when run in Python 2.7.6, is:I was expecting a different output here. Something more along the lines of:In particular I expected to see the same qualified name that I have to give to instantiate A.B and A.B.C classes respectively.Could anyone shed any light on why those new type classes identify themselves as rooted in __main__ instead of how they were nested in the code?Also: is there a way to fix this by naming the nested classes explicitly, such that they will identify themselves as A.B and A.B.C respectively (or possibly in the type representation as __main__.A.B and __main__.A.B.C respectively)?
Qualified names for classes were introduced in Python 3.3 (see PEP 3155) and AFAIK there's no non-hacky way to do this on Python 2.
In order to allow me to get the name of a class I introduced the following functions to introduce the PEP 3155 attribute __qualname__:Just call it as fixup_module_class_names() or by passing the module name whose class type members you want to have with __qualname___ attributes.In order to account for the missing __qualname__ attributes on other class types I am then using typename(x) instead of type(x).__name__ where typename is defined as:Note: If you, distinguished reader, find anything wrong with this approach for Python 2.x, please leave a comment or simply edit and fix the code as appropriate.


Answer URL
https://docs.python.org/3/glossary.html#term-qualified-name
