Natural Text
I have two list objects and I want only those elements in list1 with attribute tuples that match a tuple attribute in list2:is there a faster way??
Your original code takes O(N**2) steps (quadratic time) to find the matching elements due to the nested for loops.It also uses range(len(...)) and numeric indices, which can be cleaned up by just iterating over the elements! (see the first example here for an explanation)Also, for "logical and" you need to use the and operator, not & (as Kasra said it is for "bitwise AND").So, to make this cleaner and more efficient (O(N), linear time), I would do the following:loop over the two listsmake a tuple of the attributes you care to match onuse a dictionary to keep track of all the objects with matching tuplesHere is the code:Output:
First of all & is bit-wise and for a logical and you need to use and.Then you don't need to use len and and extra indexing in a for loop to loop over the items of an iterable you can simply do:But here as a more efficient way you can use itertools.product to get all pairs between your list items and check the condition.
If list 2 and list 1 both have size n, then this would take O(n) on average and O(n^2) worst case.Output:[item(a=1, b=2), item(a=1, b=2), item(a=2, b=2)]See https://wiki.python.org/moin/TimeComplexity for time complexity of checking if an item is in a set.
One way to improve the runtime is by optimizing match ops of attributes.Iterate list1 and store its attribute in a hash as a key. Iterate list2 and lookup the attribute key in the earlier hash and do your thing. 


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
