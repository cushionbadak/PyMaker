Natural Text
This question is very much related to this one, which doesn't have a solution, but it is not exactly the same.I would like to ask if there is a way of launching a background task in PyQt, and be able to kill it by pressing a button. My problem is that I have an user interface and some external (3rd party) functions that take a while to compute. In order to not frozen the user interface while the task are computing, I run them on the background using QThread and synchronize the UI when they finish using signals. However, I would like to add the option for the external user to press a button and cancel the current task (because the task is not needed/desired anymore).Something that to me looks as simple as a kill -9 *task* in linux, is quite hard/ofuscated to obtain in Qt.Right now I'm using custom Qthreads of the form of:Where Mythread inherits QThread overriding the run method.In the user interface, there is one button that tries to kill that thread by either using:None of them works... I'm aware that the documentation states that the terminate method does have weird behaviours...So the question is.. I'm facing this problem wrong? How to kill a QThread? If is not possible, is there any alternative to this?Thanks!
It is a very common mistake to try to kill a thread in the way you are suggesting.For some reason, many people fail to realise that it's the long-running task that needs to be stopped - not the thread. You put the task in the thread because it was blocking the GUI. But that situation doesn't magically change because you moved it to a different thread. It will block that thread in exactly the same way unless you do something to stop it. Once you've stopped it, the thread can just finish normally (i.e. its run() method will exit).A common way to control a long-running task is via a simple flag:


Answer URL
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool
