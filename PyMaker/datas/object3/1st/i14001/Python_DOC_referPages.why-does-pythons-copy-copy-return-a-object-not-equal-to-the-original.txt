Natural Text
In Python, if I copy a list or a dictionary, the copied instance is equal to the original:But if I copy an object, the result is not equal to the original:Why?
Equality in Python for objects is checked by calling the __eq__() function.Example:That is because list equality is dependent on the elements and not the actual memory location (reference) where the list is stored, that is, they can be two different list references, but if they have the same elements in the same order, the lists are equal.Example:But custom class, you have not overwritten __eq__(), hence it would call the __eq__() of the parent class, which is object, and that checks equality based on the reference.And when you do copy.copy() it does shallow copying, that is, it creates a new instance the object with all its members (attributes, etc.) remaining the same. Hence, they are unequal (as they are different references/different instances).If you want your MyClass to check equality based on self._name, you will have to overwrite the __eq__() function for that.You can find more information about comparisons here.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__lt__
