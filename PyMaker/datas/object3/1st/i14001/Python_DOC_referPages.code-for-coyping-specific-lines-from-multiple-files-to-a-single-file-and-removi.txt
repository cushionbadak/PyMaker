Natural Text
First of all, I am really new to this. I've been reading up on some tutorials over the past days, but now I've hit a wall with what I want to achieve.To give you the long version: I have multiple files in a directory, all of which contain information in certain lines (23-26). Now, the code would have to find and open all files (naming pattern: *.tag) and then copy lines 23-26 to a new single file. (And add a new line after each new entry...). Optionally it would also remove a specific part from each line that I do not need:
Without importing anything but os:What it doesIt does exactly as you describe, it: collects a defined region of lines from all files (that is: of a defined extension) in a directorypastes the sections into a new file, separated by a new lineExplanationlists all files of the specific extension in your directory,reads the selected lines of the filewrites to the output file, creates it if it does not exist.How to useCopy the script into an empty file, save it as collect_lines.pyset in the head section the directory with your files, the path to the new file and the extensionrun it with the command:The verbose version, with explanationIf we "decompress" the code above, this is what happens:
You can look at the glob module , it gives a list of filenames that match the pattern you provide it , please note this pattern is not regex , it is shell-style pattern (using shell-style wildcards).Example of glob - You can then iterate over each of the file returned by the glob.glob() function.For each file you can do that same thing you are doing right now.Then when writing files, you can use str.find() to find the first instance of the string C12b2 and then use slicing to remove of the part you do not want.As an example -You can do something similar for each of your lines , please note if the usecase if that only some lines would have C12b2 , then you need to first check whether that string is present in the line, before doing the above slicing. Example -You can do above before writing the line into the output file.Also, would be good to look into the with statement , you can use it for openning files, so that it will automatically handle closing the file, when you are done with the processing.
You can realines and writelines using a and b as line bounds for the slice of lines to write:
Using the glob package you can get a list of all *.tag files:If you open your file using the with statement, it is being closed automatically afterwards:Use readlines() to read your entire file into a list of lines, which can then be sliced:If you need to skip everything before a specific pattern, use str.split() to separate the string at the pattern and take the last part:Take a look at this example:


Answer URL
https://docs.python.org/3/library/io.html#io.IOBase.writelines
