Natural Text
I have this code in a boolean context:  Output: 2The type check for this expression resulted in int.Next, I modified the code to:Output : TrueAnd the type check for this expression resulted in boolWhy is the output in the 1st code 2?  Shouldn't the expression evaluate to a boolean value ?If not so, Why?
In Python, when using 'and' and 'or', the expression evaluates using the objects involved, instead of using Booleans as in many other languages.So: ... and so onIf you want the Boolean, just surround the whole expression with bool(..)Further reading:http://www.diveintopython.net/power_of_introspection/and_or.htmlhttps://docs.python.org/2/reference/expressions.html#boolean-operations
All you need to know here is the definition of OR operand.Based on python documentation :The expression x or y first evaluates x; if x is true, its value is returned; otherwise, y is evaluated and the resulting value is returned. So since the precedence of or is lower than and your expression evaluated as following :Which is equal to following :Thus based on preceding documentation the result would be the value of right object which is 2.
When you said True and False it is evaluate to False.Then you have False or 2 which will evaluate to 2Now True and False or True will evaluate to True but the last True in your expression. This is due to operator precedenceThe output is 2 not True because True and False or 2 is likewhich yieldsbecause True and False will always evaluate to False
I think you are clear with the operator precedence between and and or.According to Python documentation, the object is returned.will return 2 according to the shorcut evaluation.and so on.


Answer URL
https://docs.python.org/3/reference/expressions.html#or
https://docs.python.org/3/reference/expressions.html#operator-precedence
https://docs.python.org/3/reference/expressions.html#operator-precedence
