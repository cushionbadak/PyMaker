Natural Text
Given a list of floats spendList, I want to apply round() to each item, and either update the list in place with the rounded values, or create a new list.I'm imagining this employing list comprehension to create the new list (if the original can't be overwritten), but what about the passing of each item to the round()?I discovered sequence unpacking here so tried:and got:So surmising that round was trying to round each item in the list, I tried:and got:Can sequence unpacking even be used here? If not, how can this be achieved?
You have your list comprehension the wrong way around:should be:You want to iterate over spendList, and apply round to each item in it. There's no need for * ("splat") unpacking here; that's generally only needed for functions that take an arbitrary number of positional arguments (and, per the error message, round only takes two).
You can use map() function for this -For Python 3.x , you need to use list(map(...)) as in Python 3.x map returns an iterator not a list.
you could still use the list comprehension you talked aobut, just this way:new_list will be:[1.12, 4.56, 6.76, 8.45]


Answer URL
https://docs.python.org/3/whatsnew/3.0.html#views-and-iterators-instead-of-lists
