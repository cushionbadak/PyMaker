Natural Text
I have a bit of confusion about parameters' rules in funcion header and arguments' rules in function calls.Here is my confusing point:According to the documentation: If the syntax *expression appears in the function call, expression must evaluate to an iterable. Elements from this iterable are treated as if they were additional positional arguments; if there are positional arguments x1, ..., xN, and expression evaluates to a sequence y1, ..., yM, this is equivalent to a call with M+N positional arguments x1, ..., xN, y1, ..., yM.So if there is a function like this:why can't I do something like this:Isn't this equivalent to x1, ..., xN, y1, ..., yN, w1, ..., wN? Why doesn't this work?
First off, don't get confused by the fact that *args can be used both in function declarations and in function calls. Though the two are loosely related, they're not the same thing. You can call a function with foo(*args) without it being declared with a variable number of parameters and a function defined with def foo(*args) need not be called with an unpacked iterable.The real issue you're seeing though is that only one *args unpacking is allowed in a function call. That's simply how Python's syntax has been specified. This may change in the future though, as PEP 448 seeks generalize the unpacking syntax so it can be used in more situations. If the PEP gets approved and implemented, function calls like foo(*args, *args2) will become legal.
First of al, it doesn't matter what the function signature is. The call syntax and the function definition are two separate concepts that happen to use * to mean related things. The definition of f() doesn't matter here.It is the very grammar defined in the Calls expressions documentation that doesn't allow multiple *expression* parts:Each | is an alternative part, each [...] is optional. None of these allow for *expression to appear more than once.Note that there is a bug in the Python 2 rendering of the documentation, wherehas been replaced by the incorrectSee issue #22288.
Because the syntax doesn't allow it. You can use the following instead to achieve the same effect:


Answer URL
https://docs.python.org/3/reference/expressions.html#calls
