Natural Text
So I know from Redirecting stdout to "nothing" in python that you can suppress print statements. But is it possible to undo that command later on, so that after a certain points, print statements will indeed be printed again?For example, let's say I want to print "b" but not "a".I would do:Could someone enlighten me as to what "SOME COMMAND" would be?

The original sys.stdout is always preserved in sys.__stdout__:However, the documentation does note that explictly saving the original sys.stdout is preferred:It can also be used to restore the actual files to known working file  objects in case they have been overwritten with a broken object.  However, the preferred way to do this is to explicitly save the  previous stream before replacing it, and restore the saved object.
starting from python 3.4 you can do this (see contextlib.redirect_stdout)stdout is suppressed within the with statement. outside the with context your stdout is restored.and by the way: there is no need to f = open(os.devnull, 'w') in your original version - sys.stdout = None is enough as i recently learned: why does sys.stdout = None work? .


Answer URL
https://docs.python.org/3/library/contextlib.html?highlight=context#contextlib.redirect_stdout
