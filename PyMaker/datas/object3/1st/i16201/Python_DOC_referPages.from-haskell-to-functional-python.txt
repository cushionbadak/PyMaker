Natural Text
I want to translate some Haskell code into Python.The Haskell classes/instances look like:Is there a way in Python to approximate the Haskell class/instance construct?What is the least offensive way to translate this into Python?
This doesn't really have an analogue in Python, but you can fake it:All you have to do is add new values to Example for each type combination you want to have.  You could even throw in some extra error handling in doSomething and doSomethingElse, or some other methods to make it easier.  Another way would be to make an object that keeps track of all of these and lets you add new types to the map in a more managed way, but it's just more bookkeeping on top of what I've already shown.Keep in mind that this is essentially how Haskell does it, too, except the checks are performed at compile time.  Typeclasses are really nothing more than a dictionary lookup on the type to pick the appropriate functions to insert into the computation.  Haskell just does this automatically for you at compile time instead of you having to manage it yourself like you do in Python.To add that bookkeeping, you could do something like the following, keeping it in its own module and then it'll only (by default) export the symbols in __all__.  This keeps things looking more like the Haskell version:Then you can make instances likeWhich looks almost like Haskell.
You don't have parametric types in Python, as it's dynamically typed. Also the distinction between classes and instances is clear in Python, but as classes are themselves "live objects", the distinction of usage might be a little bit blurred sometimes...For your case, a classical implementation might go as:but I personally dislike that convoluted style, so you might just go with something more lightweight, like:And of course, rely on duck typing and usually "let it crash". The lack of type safety should be made up with extensive unit testing.


Answer URL
https://docs.python.org/3/library/functools.html
