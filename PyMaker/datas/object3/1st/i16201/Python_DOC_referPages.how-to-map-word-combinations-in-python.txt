Natural Text
Lets say I have a 2 word combination:I want to map possible combinations of these words programatically.  I have the following pseudocode combinations:What is the best way in python to build up a shorthand notation like above, what data structure should it be stored in, and finally how would one map:I'm sorry this is kind of an open ended question. I'm pretty new to python and not sure how to approach this problem, so any advice would be appreciated. I put square brackets around the structures even though lists may not be the best data structure to use here.
What you've described is already built into Python (unless you're somehow on a version before 2.6):or equivalently(The ** here takes a dict and uses it to set a function's keyword arguments.)  See the standard library documentation for more.To iterate over a number of formats, you can use a standard for loop, or to be slick a list comprehension:Update: upon rereading your question it sounds like you might prefer the positional version of the above, which looks like this:The * is a lot like the **: instead of using a dict to set keyword arguments, it is using a list (or tuple) to set positional arguments.
The first thing that comes to mind is a dictionary of tuples.To get there, you could just regex out the space between. If it's only two words, and there should be only one space, it shouldn't be difficult to do.
Maybe you can try something like this:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.format
