Natural Text
I want to use Python's built-in min() and max() functions on a collection of my Point objects. However, I want the distance attribute to be the compared value. How can I specify this in the class definition?
You can use a key function:The operator.attrgetter() function produces a callable that returns the named attribute for each object passed to it. You could achieve the same with a lambda callable:Alternatively, you can add special methods to the class to define how they should be compared; the __eq__ method defines how two instances are equal, and methods like __lt__ and friends are used when comparing two instances to see how they order. max() will then make use of these methods to find a 'largest' item, without a key function.With the @functools.total_ordering() decorator you only have to implement two of those; __eq__ and one of the comparison methods:For Point objects this should probably be thought out more; what happens if distance is not equal but x and y are, for example?
When using min and max without a special key function, the functions will use the order of the objects to determine its result. So you will have to implement an order for your Point class, making e.g. a > b work.To do that, you will need to implement a number of special methods. That way you enable comparison between those objects. Since you likely want a proper order where a < b implies b > a etc., you can use functools.total_ordering to implement a total order by just defining the equality and a single lower-than comparison:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__lt__
https://docs.python.org/3/library/functools.html#functools.total_ordering
