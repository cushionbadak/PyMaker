Natural Text
I've been googling and seaching and I just cant find an answer.I have a dictionary which holds the people in the group, and the score the group has, groups = {"john,alfred,willis":5, "james,connor":5}, .... People can be in 2 groups at once, however. What I want to do with this dictionary is sort it by the amount of people AND their score. For example:I need to sort it by the score, then by the amount of people, and then by alphabetical order as a final tie breaker. There are no duplicates of groups, however one group may own "a,b,c,d" and another may own "a,b,c,e". Higher score trumps lower score, more people trumps less people, and alphabetical order is ... alphabetical order.The output format doesn't have to be like that, but it is preferred that it is formatted in the way of a dictionary.I have attempted a few different ways, including splitting the key by ,'s because the names can be of any length, but because Python isn't my first language, I'm finding it difficult.How do you sort dictionaries by value and then key size?EDIT: I have added another part to the question which I thought I could go without. Turns out it's needed though...
use -max(map(ord,x[0]))) to sort by the  letter that comes latest  in the alphabet, i.e a,b,c,y beats a,b,c,z.We use the lambda x: (x[1],len(x[0]),-max(map(ord,x[0].split(",")))) to sort the output above.In that x[1],len(x[0]) means we sort first on the values x[1] then on the  length of each key len(x[0]).If we are tied on both of those, we go to -max(map(ord,x[0].split(",")), the following is an example of how that works:If we take  "a,b,c,z" and "a,b,c,y" as an example and put them in a list keys =["a,b,c,z","a,b,c,y"]:First get the ords of each char:We are sorting  from highest to lowest so we use reverse = True.So we use -max(x) to reverse that output:x in the lambda is each subitem in groups.items() which looks like:So if we take ('a,b,c', 5) x[0] = "a,b,c" and x[1] = 5.
Using sorted: (Return value of the key function is used for comparison)UPDATEkey function should be changed as follow to correctly count people.
To sort by "amount of people" you rather needAs a side note, comma-separated strings is not the best way to represent groups of things. Consider making your dict tuple-indexed instead:and thenIf your groups are going to be mutated and should be lists, not tuples, you cannot use them as dict keys. Consider a different data structure, for example, a list of dicts:


Answer URL
https://docs.python.org/3/library/functions.html#sorted
