Natural Text
My current understanding is that, when one writes from foo import bar, foo which is a package and has __init__.py, will have its __init__.py automatically processed after which its resource bar will be imported. If from the command prompt, I write python manage.py, and in that module call from foo import bar, in the __init__.py which belongs to foo package, is the variable __name__ then equal to the package name? foo in this case?
In the __init__ module of a package, __name__ is set to the name of the package; e.g. what the module is stored under in sys.modules.For a package foo, __name__ is set to 'foo':Note that each Python module has such a __name__ variable; even the initial script. If you run python manage.py the initial script is loaded as the __main__ module, so *in manage.py the name is set to '__main__'; this name does not change with what is imported by the script.
__name__ belongs to the local scope (attribute) of the module that you call with python, ie: in this case manage.py.


Answer URL
https://docs.python.org/3/reference/import.html#regular-packages
https://docs.python.org/3/reference/import.html#__name__
