Natural Text
I'm writing tests for the class OnlineService which instantiates a class of type api.API, which in turn instantiates a class of type api.Resource. The method I'm testing in this example is initialize which tests connectivity with the remote service, by issuing a GET request to a Ping resource in the remote API.I'm currently patching these objects to be mocks using the following code, but it still looks a bit verbose to me.Do I really have to assign a Resource mock instance to the property of another mock instance manually? Perhaps there is some feature in the mock package that can do this for me?UPDATEI've split up the test in two and also attached the relevant code from the OnlineService that is under test. Here is the OnlineService class:And here is the test code:Currently the test passes if I run it. Commenting out the line we're discussing gives me the following failure in test_can_connect_to_api:
The line:assigns a new empty MagicMock instance to api_instance.Ping. However, accessing Ping without that assignment already does this because api_instance is itself a MagicMock object; the line is entirely redundant:As such, the following would suffice:Of course, if the code-under-test is not using api.API().Ping.get to obtain the resource, then the above code would not achieve its goal; but then you won't need to alter api_instance.Ping either.The thing to remember here is that you replaced api.API; what that class original does is no longer of concern to you. All you need to do is manage the expectation of the code using api.API; if it uses api.API() and uses attributes or methods on that object, mock those out. If api.Resource is not directly used by the code-under-test, leave it out of your tests too.Your added code shows that you are mocking the wrong object however. You mocked api.Resource correctly, but theh API() object in the CUT is not a mock. See the Where to patch section of the unittest.mock documentation. Your CUT uses a global name API; it does not reference api.API. Mock that global:or you could just have mocked out just the Ping resource; evidently that is what your unmocked API() class uses, after all:


Answer URL
https://docs.python.org/3/library/unittest.mock.html#where-to-patch
