Natural Text
I am trying to write a python script to convert a hex string into ASCII and save the result into a file in .der cert format.  I can do this in Notepad++ using the conversion plugin, but I would like to find a way to do this conversion in a python script from command line, either by invoking the notepad++ NppConverter plugin or using python modules.I am part way there, but my conversion is not identical to the ASCII ouptut seen in notepad++, below is a snippet of the output in Notepad++ But my python conversion is displaying a slightly different output belowAs you can see my script causes missing characters in the output, and if i'm honest I don't know why certain blocks are outlined in black.  But these missing blocks are needed in the same format to the first picture.  Here's my basic code, I am working in Python 3, I am using the backslashreplace error control as this is the only way I can get the problematic hex to appear in the output fileAny guidance would be greatly appreciated.
MikG, I would say that python did exactly what you requested.You told to convert the bytes to string, and replace bytes with most significant bit set with escape sequence (except for \xFF char).Characters \x04 (ETB) and \x1F (US) are perfectly legal ASCII chars (though non-printable), and they are encoded using their literal value.Characters \xd6 and \xd0 are illegal in ASCII - they are 8-bit long. They are encoded using 4-letter long escape sequence, as you asked: "\" (backslash char) and "xd6" / "xd0" stringsI'm not good with DER, but suppose that you expect to have raw 8-bit sequences. Here is how this could be accomplished:Please note "wb" specifier to open -- it tells python to do binary IO.I also used with statement to ensure that text_file is closed whatever happens with write.


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#with
