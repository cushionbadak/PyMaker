Natural Text
I've a class CustomArray similar to numpy.ndarray. It overloads a bunch of arithmetic operators like __add__, __mul__ etc. Since people will most likely use it in conjunction with numpy I'm afraid that from time to time numpy.ndarray operators will be called instead of CustomArray. Worst thing is that they actually work and produce some unwanted result.Is there a way to prevent that? So interpreter will either raise an error or will always prefer CustomArray operator overloads.
In NumPy 1.13, there's the new __array_ufunc__ API. This API is provisional, and backward compatibility is not yet guaranteed.numpy.ndarray delegates to NumPy ufuncs for its operators, and NumPy ufuncs will delegate to __array_ufunc__ to implement ufunc behavior, if they find it. The rules for this skip numpy.ndarray.__array_ufunc__, so if you implement your own __array_ufunc__, it will always take priority when using your instances with NumPy arrays.If you want to disable all ufuncs on your objects, you can set __array_ufunc__ = None on your class:Alternatively, if you want to implement it, the signature iswhere for the case you're interested in,ufunc is the ufunc object (for example, numpy.add for +),method is "__call__",inputs is the tuple (left operand, right operand), andkwargs is empty.For more advanced cases, method, inputs, and kwargs may be different, so return NotImplemented if you don't want to deal with those cases.As an example, if you want to overload + with NumPy arrays, you could writeYou will also still need to implement __add__.


Answer URL
https://docs.python.org/3/library/constants.html#NotImplemented
