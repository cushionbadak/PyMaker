Natural Text
I’m a student who is (trying) to write a python implementation the A* Algorithm. I know this question has been asked 100 times before, but there are some specifics of my situation I’m not fully understanding. I have a weighted, non-directed graph with 10 nodes. My actual graph will have many more nodes. The graph is sorted as a 3 dimensional list. I’m pasting in some output of the program we wrote to generate the graph. In less readable format, the graph is stored as a 3 dimensional list. So for example, at index 0, there are connections to node 8,9,2,3 and 7. And the weight between node 8 and 0 is 3. The weight between node 0 and 9 and 11. I think you get the idea. So the challenge is finding a python implementation of A* that will accept a list as input, and output the optimal route. It seems like most graphs are built around a dictionary data type, but that isn’t my situation. I’ve started to try to write my own version of A*, using the 3D list, but not had luck, as it’s a bit complex for me. 
Here is untested pseudo-code to add detail to what @Luai Ghunim said.First you can find a priority queue implementation already in the Python standard library as https://docs.python.org/3/library/heapq.html.  That will store your todo list.Second, the things that go into that queue need to sort nicely.  A trick for that is to use tuples with the first field being what you want the sorted on.  Like this:You can make them look nice using https://docs.python.org/3/library/collections.html#collections.namedtuple to give the fields those names.  Let's assume that you haven't, but that's a personal choice.Third you need to have a function to estimate from any node how far it will be to the end.  Let's call that estimator(node).And last we'll want a dictionary named something like from_node of how we got to a particular node.  It's entries will look like:With that in mind, it should work something like this:


Answer URL
https://docs.python.org/3/library/heapq.html
https://docs.python.org/3/library/collections.html#collections.namedtuple
