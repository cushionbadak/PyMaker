Natural Text
I am giving the user the ability to check a specific key in a multi-level dictionary. My idea is that they will pass the path to the key like this:This can be of arbitrary length and depth. Once I have the string (above) from the user, I'll split it and get a list of each individual component:All of this I can do. The next part is where I am stuck. How can I query the dictionary key, specified by the above when it's arbitrary length?My initial thought was to do something like my_dict[elements[0]][elements[1]]...but that doesn't scale or work when my user doesn't pass exactly the length I expect.How can I get the data at an arbitrary key depth, in this case?A couple examples:User passes country.US.NewYork => I query `my_dict['country']['US']['NewYork']User passes department.accounting => I query my_dict['department']['accounting']User passes id => I query my_dict['id']User passes district.District15.HenryBristow.principal => I query my_dict['district']['District15']['HenryBristow']['principal']
you could do that using reduce which will query the keys in the nested dictionaries:result:If you want to avoid to catch KeyError in case the data doesn't exist with this path, you could use get with a default value as empty dictionary:Trying to get an unknown value returns an empty dictionary. The only drawback is that you don't know from where exactly the path got lost, so maybe leaving the KeyError be raised wouldn't be so bad:
Use recursion. Ex:
u can do this like belowbut your question is very challenging:u say if user send country.us then go to my-dict.country.usbut what happen if one of this path in my_dict be a list code will results error u can handle this by check typeeditif user address maybe wrong you should check my_dict have this field or not sample code is below but will be many if i don't like that!    if key not in tmpDict:        print("Bad Path")        return 
from a python 2.x perspective, you can do this with reduce.But in general, you'll want to do this with a recursive or iterative function if you want to do error handling beyond throwing a KeyError.
You can transverse the dictionary using a for loop:Output:


Answer URL
https://docs.python.org/3/library/functools.html
