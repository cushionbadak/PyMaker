Natural Text
I'm reading Raymond Hettinger's Pythonâ€™s super() considered super!  About a page in, there's this example:Why is it necessary to call super() in Shape here?  My understanding is that this calls object.__init__(**kwds) since Shape implicitly inherits from object.  Even without that statement, we've alreadyestablished shapename already in the parent's __init__,established the child class's color in an explicit method override,then invoked the parent's __init__ with super() in ColoredShape.As far as I can tell, dropping this line produces the same behavior & functionality:What is the purpose of super() within Shape here?
I see that @user2357112 has already provided a correct answer. I was working on an example that I'd though I'd leave here because it's pretty much what user2357112 is describing.  Consider a mixin class like this:Let's say you apply that to your ColoredShape class:If Shape doesn't call super.__init__, then when you do this:You get:The call to super.__init__ in shape is necessary to call the __init__ method on PositionMixin.
The point is cooperative multiple inheritance. The point of the whole entire article is cooperative multiple inheritance, really.You look at Shape and you don't see any parents besides object. Sure, but that doesn't mean there aren't any siblings, or anything else on the MRO after Shape. super() isn't just for superclasses; it searches for the next implementation of the method in the method resolution order. For example, one of the later classes in the article isIn this case, Shape.__init__ needs to call super().__init__, or MoveableAdapter.__init__ and all further __init__ calls will be skipped.


Answer URL
https://docs.python.org/3/whatsnew/2.2.html#multiple-inheritance-the-diamond-rule
