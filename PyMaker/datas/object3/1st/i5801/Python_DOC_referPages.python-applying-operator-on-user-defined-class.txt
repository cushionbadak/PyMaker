Natural Text
I have created a custom class, and I want to use the ** operator on a instance for passing it to a function. I have already defined __getitem__ and __iter__, but when I try f(**my_object), I'm getting What are the minimum required methods so that the custom class qualifies as a mapping?
** is not an operator, it is part of the call syntax:If the syntax **expression appears in the function call, expression must evaluate to a mapping, the contents of which are treated as additional keyword arguments.So if your class implements the Mapping methods, then you should be good to go. You'll need more than just __getitem__ and __iter__ here. A Mapping is a Collection, so must define at least __getitem__, __iter__, and __len__; in addition most of __contains__, keys, items, values, get, __eq__, and __ne__ would be expected. If your custom class directly inherits from collections.abc.Mapping, you only need to implement the first three.Demo:If you run this under a debugger, you'll see that Python calls the .keys() method, which returns a dictionary view, which then delegates to the custom class __iter__ method when the view is iterated over. The values are then retrieved with a series of __getitem__ calls. So for your specific case, what was missing was the .keys() method.In addition, note that Python may enforce that the keys are strings!
Emulating container typesThe first set of methods is used [...] to emulate a mapping...It is also recommended that mappings provide the methods keys(), values(), items(), get(), clear(), setdefault(), pop(), popitem(), copy(), and update() behaving similar to those for Pythonâ€™s standard dictionary objects.It is recommended that [...] mappings [...] implement the __contains__() method to allow efficient use of the in operator...It is further recommended that [...] mappings [...] implement the __iter__() method to allow efficient iteration through the container


Answer URL
https://docs.python.org/3/reference/expressions.html#calls
https://docs.python.org/3/glossary.html#term-mapping
https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
https://docs.python.org/3/reference/datamodel.html#emulating-container-types
