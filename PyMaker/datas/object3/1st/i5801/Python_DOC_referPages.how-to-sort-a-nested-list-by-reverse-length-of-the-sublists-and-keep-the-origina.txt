Natural Text
Example:What I want to do is to sort the nested list by reversed length of the sublistsbut to keep the original order if the length of sublists is the same.   Expected result:  I know I can use this to sort the list by reverse length but it will not keep the original order:(it reverses the sublists 'Delete' and 'Columns')How can I sort the list by reverse length of the sublists and keep the original order?
TimSort is a stable sort, so it normally preserves the order of equal items. So your code should work correctly.Alternatively, get rid of the reverse=True and use a key function that returns the negative of the sublist length.outputIf I use I get the same output as above. If you don't get that output too, something very weird is going on. Note that this version is more efficient than the version above, since it calls len directly (which is implemented in C and it does a fast attribute lookup to determine the object's length), and Python function calls are relatively slow, whether they are def functions or lambdas.BTW, when you want to sort a list in-place you should always call its .sort method. The built-in sorted function actually creates a new list, copies the original data to that list, and then calls .sort on it, and then binds the new list to the destination. So it's much more efficient to avoid creating that copy and call .sort yourself on the original list.


Answer URL
https://docs.python.org/3/howto/sorting.html#sortinghowto
