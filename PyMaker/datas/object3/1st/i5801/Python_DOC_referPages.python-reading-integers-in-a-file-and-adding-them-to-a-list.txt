Natural Text
I am trying to create a function that takes an open file as an argument, reads the integers in the file which are all on their own line, then creates a list of those integers. The function should stop reading the file when there is an empty line. This is what I am stuck on.the file I am testing it with looks like this:is not working,it currently gives me a ValueError: invalid literal for int() with base 10: 'Should'
You need to put a break after the x = 2Otherwise, the for loop will keep iterating over the file. It has read the blank line, executed the else condition, then carried on processing lines. So it tries to process the 'Should...' line, and fails because 'Should...' is not an integer.Also, I don't see why you have the while statement. The for loop should be enough to iterate over the file and process each line, and the break I've suggested will exit the loop when you hit the blank line.
Other answers already point out the issue: you have to stop parsing the integers when encoutering the blank line.Here's a one-liner using itertools.takewhile, stopping when stripping the line yields an empty line & converting to integer:result:So itertools.takewhile iterates on the file lines, and applies strip on each line. If the result is an empty string, it stops the iteration. Otherwise it continues so the line is converted to integer and added to the list comprehension.The less lines you're writing in those cases, the less bugs you'll create with auxiliary variables & states.
I think it is not necessary the while.
When you read a file you get a generator. Instead of reading it all to memory we could use the while loop to feed us with 1 row at a time and break when condition is met (row is blank). This should be the most efficient solution.Returns:If you want a compact solution we could use takewhile from itertools. But this won't handle any error.
If you want to stop reading the file when the line is empty, you have to break the for loop :
You can also use re module:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.takewhile
