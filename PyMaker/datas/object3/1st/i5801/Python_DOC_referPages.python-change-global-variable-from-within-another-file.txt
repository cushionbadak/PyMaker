Natural Text
In my main class I use a global variable ADDRESS that is defined in another file called config.py.I want to change the value of ADDRESS from within my main class, by calling a function in config.py.In my main class I have:In my config file I have the following:The print statement in my config file correctly prints the new address of 192.168.10.100.However, the print statement in my main class prints 0.0.0.0.What am I missing here?
All that from config import ADDRESS, change_address does is take ADDRESS and change_address from your config module's namespace and dumps it into your current module's name-space. Now, if you reassign the value of ADDRESS in config's namespace, it won't be seen by the current module - that's how name-spaces work. It is like doing the following:The simplest solution? Don't clobber name-spaces:
I would recommend that you try not to change the global state in a module. Instead, I would re-write the code such that ADDRESS in config.py doesn't change. If the configuration for your application can change from invocation to invocation I would change config to be something like:Then in main I would do:As a general rule it isn't a good idea to change the value of variables/constants in other modules.NOTE: You could also create a config class as well, so that you could access configuration values like config.address.I recommend that you read the stackexchange post Why is Global State so Evil?


Answer URL
https://docs.python.org/3/faq/programming.html#how-do-i-share-global-variables-across-modules
