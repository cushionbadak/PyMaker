Natural Text
Let me explain what I mean by "dummy/placeholder defintions" with the following simple example. Don't know how to call them properly.The eval function in the base class that just throws an exception has no real function. Without the dummy eval in the base class, if a derived class "forgets" to implement its own eval, an exception will be thrown anyway, just a different type. No reminder necessary.The self.inputs is a similar case. Each derived class simply must define its input(s) to be usable at all.So what is the primary purpose of defining self.inputs and self.eval() in the base class? Documentation of API? Pylint? Pythonic style? Or is it an idea taken from the ABC (abstract base classes)?
The main purpose of using "dummies", as your called, is the principle of polymorphism:Wikipedia - Polymorphism (computer_science)This principle is general for all object oriented languages. The main idea of the principle is to fix the identical interface in base class for each derived class. This is why you should use abstract methods in the base class to ensure their presence and implementation in derived classes.


Answer URL
https://docs.python.org/3/library/exceptions.html#NotImplementedError
