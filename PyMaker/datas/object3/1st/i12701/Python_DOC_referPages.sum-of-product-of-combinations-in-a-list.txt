Natural Text
What is the Pythonic way of summing the product of all combinations in a given list, such as:(For this example I have taken all the two-element combinations, but it could have been different.)
Use itertools.combinations
itertools.combinations(a, 2) returns:And itertools.starmap() does:Make an iterator that computes the function using arguments obtained from the iterable. Used instead of map() when argument parameters are already grouped in tuples from a single iterable (the data has been “pre-zipped”). Finally, use sum()  with a generator comprehension to get the final results. 
I'm not sure about the pythonic way, but you could resolve this problem into a simpler one.E.g. For a list [a, b, c] => result can also be written as So, it can be written as difference of square of sum of list and sum of squares of list, divided by 2.You can achieve the same as follows in python:P.S. I know the problem can be solved using itertools and question specifically asks for pythonic way to solve it. I think it would be much easy to do it without trying out all combinations.
This is also the sum of the upper triangle of the outer vector product of the array with itself:Step by step it works like this:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
https://docs.python.org/3/library/itertools.html#itertools.starmap
https://docs.python.org/3/library/functions.html#sum
