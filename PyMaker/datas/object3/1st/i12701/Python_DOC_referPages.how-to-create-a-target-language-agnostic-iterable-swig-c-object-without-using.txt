Natural Text
I'm somewhat new to SWIG and C++, so this may be obvious, but I cannot seem to figure it out. I have a C++ collection object (in the MWE, a Pantry), that in C++ is indexed by a std::string, but iterates over the objects. This works in C++ using a ranged-based for loop with the implementations of begin() and end().Here's a MWE:pantry.ipantry.cppI've also put together a short Python script:Then, depending on whether the -builtin flag is passed to SWIG, I get the error:without -builtin: TypeError: in method 'Pantry___getitem__', argument 2 of type 'std::string' -- which makes sense because I've chosen to index by stringswith -builtin: TypeError: 'my_collection.Pantry' object is not iterable -- I think this is caused by SWIG not implicitly creating methods I haven't declared, which is seems correct in this instance.How can I iterate over the collection contents without explicitly calling a method? I realize I could just make the _food_vec public and iterate over that, but my actual code is more complicated and I'd prefer not to do that. Likewise, I could implement some other .iterate() method, but I've already done the work with begin() and end().Edit: What would be a target-language agnostic method that I could implement similar to the macros I made for TO_STRING() and SUBSCRIPT, and what would be the correct template to add to the interface file (something like %template(FoodIterator) std::vector<Food>::iterator;?
You have two options to implement iterable interface:Implement __iter__() which returns an object instance having next().Implement __getitem__() which accepts integers or slice objects.I guess this should explain both errors as well as give a clue of how to fix.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getitem__
