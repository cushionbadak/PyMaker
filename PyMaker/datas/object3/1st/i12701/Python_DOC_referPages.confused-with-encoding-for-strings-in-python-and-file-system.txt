Natural Text
I'm studying the learning python. It has a nice chapter for dealing with unicode strings in python.I only need to clarify whether I have understood it correctly or not. So here's what I've understood.I found out that python 2.x has str which supports normal text and bytes and it has u'...' literal or unicode() for special text like unicode characters.On the other hand python 3.x has str which supports unicode text because all the normal text are unicode.By keeping that in mind if you write like s = 'something' then the s is both normal text and combination of bytes in python 2.x and unicode text in python 3.x.Now I also read that the files are too encoded as to save something in disk we need numbers and to store wide range of characters we need some encoding technique.From that here's what we haveIn python 3.x all the string literals with single, double and triple quoted strings are encoded to and decoded from with specific transformation format to store in memory(for python interpreter).On the other hand to store file contents on disk, the operating system follows some encoding technique to store different range of characters. So when we write something on file that are encoded to get a specific code point so that it can save that code point in memory and when we extract information from file that are stored in memory, that are decoded form those code points to characters by using the exact same encoding technique that we have used earlier.The file content are stored in disk in the form of code points but when we open a file in text editor we see the decoded format of those code points in character form.That's pretty much it. Are these all correct what I have understood ?Also I would like to accept any other informative information about unicode if you have.
You can read the Unicode howtos:Python 2Python 3In short:Both Python versions have a data type for bytes and a data type for text:There are no things as normal text and Unicode text. Just text. You should always use the Unicode strings for text, and bytes for binary data.Files store bytesA file is always a sequence of bytes. Python 3 will do the decoding if you open the file as text. Because of that you normally have to specify which encoding to use: open('file.txt', encoding='utf-8'). It is a good idea to do the same in Python 2 with for instance io.open.Python source files contain Unicode textFor Python 3 this is part of the specification: See 2. Lexical analysis:Python reads program text as Unicode code points.But on disk files are just bytes. Again, Python will decode these bytes to Unicode text. To make sure Python uses the correct encoding, you must declare what encoding is used if it is different than the default encoding (ASCII for Python 2, and UTF-8 for Python 3).This also tells you how Python handles Unicode string literals. The source code is a sequence of Unicode code points, so your string consists of the code points between the quotes.Byte literals on the other hand should only contain ASCII characters, those characters are mapped on the bytes 0–127. Use \x escapes for other bytes. Using other characters may raise a SyntaxError.Python 2 only specifies that string literals (and comments) may use another encoding than ASCII. But if you follow the conventions above you will get the expected bytes and code points in your byte and unicode strings.…but doesn't a file store bytes?Yes of course. The concept of a file containing a sequence of Unicode characters is an abstraction. A way this abstraction is leaky is the need to declare an encoding, which specifies the mapping between Unicode characters and byte sequences on disk. Your text editor must use the same encoding to save the source code.Another thing is the Python specification doesn't exactly define a Python source file as consisting of encoded Unicode text. But it is specified in a way that in practice the source file almost always will be such a text file. A consequence of this is that unlike eg. JSON, you can't encode Python source files as UTF-16.But other than that this abstraction works very well. You can type (or paste) an Unicode character in your text editor, and your string in Python will contain the right character. test.pyoutput:(printing the characters directly only works if Python knows how to print Unicode to the console on your platform. On Linux you have a good chance it will work)Internally, your text editor converts the snowman to bytes, eg. 0xe2, 0x9b, 0x84 and the Python interpreter will decode those bytes again. But once you set up your editor with the right encoding, this process is hidden and you can just work with Unicode characters.


Answer URL
https://docs.python.org/3/howto/unicode.html
https://docs.python.org/3/reference/lexical_analysis.html
https://docs.python.org/3/library/tokenize.html#tokenize.open
