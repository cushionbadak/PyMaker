Natural Text
I want my code to cycle through each item of the list and convert it from str to int but it only converts half of the list and in an irregular order.My code:For example if list is ['5', '6', '3', '5', '6', '2', '6', '8', '5', '4', '2', '8']The final would be ['6', '8', '5', '4', '2', '8', 3, 6, 2, 6, 5, 5]Which is only half converted and not in order.I could do it another way but that is a lot longer so would like to fix this and add to my knowledge about for loops.My knowledge and experience with Python is tiny, so I most probably won't understand unless it's really basic and jargon is explained.
Using list comprehension:If you don't understand list comprehension you could use simple for loop:
Both answers above are good but why your code didn't work also should be adressed.First , you are changing the list while you are iterating on it. This is something you should not do. It will probably cause problems, like in your question.Second, remove method removes the first element in the list that it encounters which fits the given argument, it also should be used with care.Third, you should not use list as an variable name. As it is a built-in class.As you see, not working as expected
Why don't you use something like this:It simply calls function int on each item from l.Here's doc.
While the other two answers give you better ways of converting your list of strings to integers, they really don't answer your question. Your main problem is that you are mutating (altering) the list structure while your for loop operates on it. You should not mutate the list structure (remove elements or append) because the loop iteration variable item gets out of sync. There's no way to re-sync item to the new list structure. BTW: It's not a random order. It's every other item.You could write your conversion loop like so, because you're not mutating the structure of the list, only the individual elements:Don't write it like this:It doesn't mutate the individual list elements, even though you would think that it does. It has to do with how Python iterators work.
Try this:Explanation: Here we are iterating over a clone of the list but doing operations on the original list.PS: list is a keyword in python. Its usage as a variable name should be avoided.


Answer URL
https://docs.python.org/3/library/functions.html#map
