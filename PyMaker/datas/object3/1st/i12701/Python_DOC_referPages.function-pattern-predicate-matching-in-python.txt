Natural Text
I'd like to be able to dispatch different implementations of a function, based not only on the type of the first parameter, but based on arbitrary predicates. Currently I have to do it like so:Here's something in the spirit of what I'd like to be able to do:It is similar to Python 3's singledispatch, however singledispatch only supports dispatch on types, not on arbitrary predicates.TL;DR: Is there a library that allows a predicate-based dispatch of a function based on arbitrary predicates (not only the parameter's type)?
Thanks to the repliers. After asking this question it seemed there was no existing module that does exactly this. So I wrote my own :) It is inspired by @Elazar's suggestion.Please feel free to check it out. It's on PyPI and you can install it using:It's also hosted on GitHub and I plan to continue development and add features while trying to keep the API simple. Contributions are welcome.
Here's a solution adjusted from @Yam's to fit your syntax, and to be used as a library. The decision (which is a common one) is that the first predicate wins:User code:Trying it, we get something like:
I don't know of a library, but here's a basic implementation skeleton. The real problem which prevents this from being a practical solution, in my opinion, is that I have no idea how to make specialized resolution work here1. When that's the case, it will probably lead to a lot of maintenance hardships.[1]: The problem with resolution is that it's not easy to get right. Here are some alternatives to consider, all of which are severely lacking good reasons to implement and use.Specializing predicates which apply can be complex, and will probably be best laid at the hands of the user so as to manually define ranks/weights for each. This is clumsy, and generally a maintenance/boilerplate headache that's not worth the initial charm of this mechanism.The user can always add more overloads as the program is being run (Python being interpreted), and this can cause surprising temporal behavior. Spreading this around in your codebase is complacent. When it's not spread around, why not just if/else and be done?You can somehow restrict the usage, and enforce it so that only one predicate must return True for a given call. This is both weird, inefficient, and useless in many ways, e.g. what if you want to catch all instances of A or its subclasses, but treat subclass C in a special way? Or if you want to further specialize a predicate with an extra condition. How are you going to classify this kind of model?
you can use isintance and combined it with a ABC to check the characteristic of the input like this:The ABC tell you to what kind of interface the param has, so you can use the appropriate one depending of what you do if you don't care if it is a particular type or not, so defined like that param may be a set, list or tuple of strings and always will past the second check so you can processed it accordingly. There is also and ABC for numbers is you want to be general in that case too.


Answer URL
https://docs.python.org/3/library/collections.abc.html#module-collections.abc
https://docs.python.org/3/library/numbers.html
