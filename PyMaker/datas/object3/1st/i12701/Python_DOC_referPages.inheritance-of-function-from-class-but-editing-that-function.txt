Natural Text
I'm using Python and I have two classes. I want to import a function for a class but with the ability of adding things to that function.
Basic principlesYou cannot access local variables from one function (or method) in another function. This is by design. This class Main(self): is wrong. In Python 3 do class Main:. While using self as the name of the first argument in method is a strong convention, self is just an ordinary name not a reserved keyword or built-in.There are several problems here:a. The method name needs to __init__() not __init.b. Don't hardwire the name of the parent class with Main.__init__(self) use super().__init__().c. If you don't do anything extra in the __init__() of Main2, than you don't need to implement the __init__() at all.Possible solutionFor your problem, using a dictionary with the key press names as keys and the functions for the actions as values seems useful.First define a few small helper functions: Now your main class:Names are important, therefore I use KeyAction instead of Main.This line self.key_actions = {'Escape': dosomething} is the core of this solution. Here self.key_actions is a dictionary that maps names of key press events to functions. Note dosomething without the () because I put the function object into the dictionary rather than calling this function.Calling this function is a bit different:I use the get() method of the dictionary. This returns the value for the key if the key is in it and None if not. Now func holds either a reference to the function dosomething if the key was Escape or None. If it is a function I call it with func().An alternative here could be a try-except: Now, in your child class, you only need to add another key-value pair to self.key_actions to extend its functionality:Make two instances and test your code:prints:


Answer URL
https://docs.python.org/3/library/functions.html#super
