Natural Text
I have lists of numbers that I'd like to group by similarity. The order of the numbers in the list is fixed and important to preserve.As an example, here's a visualisation of what I'm trying to achieve:The black line represents the list of numbers I have. The green lines represent the groupings I would like to identify in this example list.The order of numbers in the list is important and cannot be changed (e.g. cannot sort ascending or descending). The numbers in the list are not contiguous (i.e. there isn't likely to be a list of 6, 6, 6, 6, but probably would be something like 5.85, 6.1, 5.96, 5.88).Is there a method to do this?Edit: example values, and desired groupings:[4.1, 4.05, 4.14, 4.01, 3.97, 4.52, 4.97, 5.02, 5.05, 5.2, 5.18, 3.66, 3.77, 3.59, 3.72]would result in an approximate grouping of[(4.1, 4.05, 4.14, 4.01, 3.97, 4.52), (4.97, 5.02, 5.05, 5.2, 5.18), (3.66, 3.77, 3.59, 3.72)]In the grouping above, you could argue that 4.52 could belong to the first or second group. If visualised as I did in the example above, the groupings would be represented by the green lines. My lists are actually several hundred to several thousand values in length.
Output :This ensures that each item from a group does not exceed max_diff to the mean of the group. If it does, a new group is started.
You may use itertools.groupby - it combines consecutive elements with same result of given key function (round in this case):
You can use itertools.groupby to categorize your data based on a specific difference (2 in this case) with those preceding item.Here I used OrderedDict.fromkeys in order to preserver the unique items in a specific order.Demo :
A numpy version:Or:
https://en.wikipedia.org/wiki/K-means_clusteringk-means clustering is a method of vector quantization, originally from signal processing, that is popular for cluster analysis in data mining. k-means clustering aims to partition n observations into k clusters in which each observation belongs to the cluster with the nearest mean, serving as a prototype of the cluster. This results in a partitioning of the data space into Voronoi cells.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/library/functions.html#round
