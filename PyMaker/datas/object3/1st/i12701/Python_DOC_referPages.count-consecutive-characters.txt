Natural Text
EDITEDHow would I count consecutive characters in Python to see the number of times each unique digit repeats before the next unique digit? I'm very new to this language so I am looking for something simple.At first I thought I could do something like:So that in this manner I could see the number of times each unique digit repeats. But this of course falls out of range when i reaches the last value.In the example above, I would want Python to tell me that 1 repeats 1, and that 0 repeats 3 times. The code above fails, however, because of my while statement.I know you can do this with just built-in functions, and would prefer a solution that way. Anyone have any insights?
A solution "that way", with only basic statements:    else:        i=0        length += ("and "+word[i]+" repeats "+str(count))   print (length)display :#'1 repeats 1'
Consecutive counts:Ooh nobody's posted itertools.groupby yet!After which, result looks like:And you could format with something like:Total counts:Someone in the comments is concerned that you want a total count of numbers so "11100111" -> {"1":6, "0":2}. In that case you want to use a collections.Counter:Your method:As many have pointed out, your method fails because you're looping through range(len(s)) but addressing s[i+1]. This leads to an off-by-one error when i is pointing at the last index of s, so i+1 raises an IndexError. One way to fix this would be to loop through range(len(s)-1), but it's more pythonic to generate something to iterate over.For string that's not absolutely huge, zip(s, s[1:]) isn't a a performance issue, so you could do:The only problem being that you'll have to special-case the last character if it's unique. That can be fixed with itertools.zip_longestIf you do have a truly huge string and can't stand to hold two of them in memory at a time, you can use the itertools recipe pairwise.
Totals (without sub-groupings)I'll provide a brief explanation for the interesting lines.The line above is a dictionary comprehension, and it basically iterates over the characters in charseq and creates a key/value pair for a dictionary where the key is the character and the value is the number of times it has been encountered so far.Then comes the loop:We go from 0 to length - 1 to avoid going out of bounds with the c+1 indexing in the loop's body.At this point, every match we encounter we know is consecutive, so we simply add 1 to the character key. For example, if we take a snapshot of one iteration, the code could look like this (using direct values instead of variables, for illustrative purposes):You can see the program output below with the correct counts:
You only need to change len(word) to len(word) - 1. That said, you could also use the fact that False's value is 0 and True's value is 1 with sum:This produces the sum of (False, True, True, False) where False is 0 and True is 1 - which is what you're after.If you want this to be safe you need to guard empty words (index -1 access):And this can be improved with zip:
This is my simple code for finding maximum number of consecutive 1's in binaray string in python 3:
Unique method:- In case if you are just looking for counting consecutive 1'sUsing Bit Magic: The idea is based on the concept that if we AND a bit sequence with a shifted version of itself, weâ€™re effectively removing the trailing 1 from every sequence of consecutive 1s.trailing 1 removedSo the operation x = (x & (x << 1)) reduces length of every sequence of 1s by one in binary representation of x. If we keep doing this operation in a loop, we end up with x = 0. The number of iterations required to reach 0 is actually length of the longest consecutive sequence of 1s.
If we want to count consecutive characters without looping, we can make use of pandas:The key is to find the first elements that are different from their previous values and then make proper groupings in pandas:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
https://docs.python.org/3/library/itertools.html#itertools-recipes
