Natural Text
I am running a code that has always worked for me. This time I ran it on 2 .csv files: "data" (24 MB) and "data1" (475 MB). "data" has 3 columns of about 680000 elements each, whereas "data1" has 3 columns of 33000000 elements each. When I run the code, I get just "Killed: 9" after some 5 minutes of processing. If this is a memory problem, how to solve it?. Any suggestion is welcome !This is the code:The header of "data" is:The header of "data1" is:
Most likely kernel kills it because your script consumes too much of memory.You need to take different approach and try to minimize size of data in memory. You may also find this question useful: Very large matrices using Python and NumPyIn the following code snippet I tried to avoid loading huge data1.csv into memory by processing it line-by-line. Give it a try.
First off, create a python script and run the following code to find all Python processes.After you have run it, paste the output, here in the questions section, where I will see a notification.*EDITList all process and post them in your answer, use the following:
How much memory does your computer have?You can add a couple of optimizations that will save some memory, and if that's not enough, you can trade-off some CPU and IO for better memory efficiency.If you're only comparing the keys and don't really do anything with the values, you can extract only the keys:Then instead of OrderedDict, you can try using ordered set either from this answer -- Does python has ordered set or using ordered-set module from pypi.Once you got all the intersecting keys, you can write another program that looks up all the matching values from source csv.If these optimizations aren't enough, you can extract all the keys from the bigger set, save them into a file, then load keys one-by-one from the file using generators so the program you will only keep one set of keys plus one key instead of two sets.Also I'd suggest using python pickle module for storing intermediate results.


Answer URL
https://docs.python.org/3/library/pickle.html
