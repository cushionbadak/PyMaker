Natural Text
Is there any easy way to test whether a regex matches an entire string in Python? I thought that putting $ at the end would do this, but it turns out that $ doesn't work in the case of trailing newlines.For example, the following returns a match, even though that's not what I want.
You can use \Z:\ZMatches only at the end of the string.
You can use a negative lookahead assertion to require that the $ is not followed by a trailing newline:re.MULTILINE is not relevant here; OP has it turned off and the regex is still matching.  The problem is that $ always matches right before the trailing newline:When [re.MULTILINE is] specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline). By default, '^' matches only at the beginning of the string, and '$' only at the end of the string and immediately before the newline (if any) at the end of the string.I have experimentally verified that this works correctly with re.X enabled.
To test whether you matched the entire string, just check if the matched string is as long as the entire string:Note: This is independent of the question (which you didn't ask) of how to match a trailing newline. 
Based on @alexis answer:A method to check for a fullMatch could look like this:Where the fullString is the String on which you apply the regex and the matchObject is the result of matchObject = re.match(yourRegex, fullString)


Answer URL
https://docs.python.org/3/library/re.html#re.M
https://docs.python.org/3/library/re.html#re.X
https://docs.python.org/3/library/re.html#regular-expression-syntax
