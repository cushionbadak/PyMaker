Natural Text
Given that you don't care about the actual output, what is a way to deplete a generator?The function I use in a map will print on itself, so all I have to do is to get the map to evaluate.For now, I use list() to do this, but I'm looking for a shorter way.Arbitrary example:
In 3.5, you can abuse the additional unpacking generalizations and replace:with:saving four characters (it produces a tuple of Nones).With 3.4 and earlier, you can (assuming a one character long literal exists which won't exist in the output) do:which saves two characters while also avoiding storing any intermediate lists.If the outputs aren't controlled at all, and you're below 3.5, as others have noted, saving a single character is easy (e.g. just replace list with any, if only "falsy" values possible, all if only "truthy" values possible, or set() for all values, at the expense of storing the set), but the above save a bit more if you have version or generator output guarantees.Obviously, if you don't need to print, this can shorten even more, since *somegen, will do the work with no pointless prints, requiring only two characters more than referencing the generator in the first place.
Set is one character shorter than list.A list comprehension may be better in some cases:
If you know that your generator will not contain one of the single-digit integers (for example 2) you can deplete it with 2 in ... which is one character less than list(...).


Answer URL
https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-448
