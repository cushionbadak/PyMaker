Natural Text
I'm using a Flask web server to provide an interface to a time-consuming calculation. To increase performance, I want tostart the calculation as a new subprocess to be able to use multiple CPU cores for multiple concurrent calculationslet the calculations run asynchronously using asyncioTo call asyncio coroutines from Flask I started using flask-aiohttp, which is working nicely for simple delay tasks as shown in the examples.However, I fail to call the asynchronous subprocess from inside Flask:The process is being created, but never returns:What am I doing wrong?
Reason: running asyncio subprocesses from sub-threads has limits, see asyncio docs Subprocess and threads.Detail: with debug=True, Flask-aiohttp handle requests in a sub-thread started by Werkzeug's run_with_reloader. Turn debug off and your code runs correctly.Alternatively according to the docs above, Flask-aiohttp should add a call to asyncio.get_child_watcher() right before calling run_with_reloader. With this call, your code runs even with debug=True.


Answer URL
https://docs.python.org/3/library/asyncio-subprocess.html#subprocess-and-threads
