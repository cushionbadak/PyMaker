Natural Text
I have a simple Python server that uses http.server. The goal is not to show the video in a html page, or to download the video file, but to display the video in the browser directly. This is what I have so far:The problem that I have is that the response doesn't contain the full video. file.mp4 is 50MB, but when I look in the network tab of either Chrome or Firefox, it says that the response is only 1MB. Is there a reason why the full file isn't transferred? Do I need to add some sort of HTTP header to make this work?EDIT:This is my code now:I am now using the default SimpleHTTPRequestHandler's do_GET, but it's still not working (although the response is now 40MB/30MB instead of 1MB).When I request file.mp4 on Chrome, the socket connexion is closed after ~7 seconds (~5 seconds on Firefox), which makes the script throw a BrokenPipeError: [Errno 32] Broken pipe, because the server is still trying to write the rest of the video file on a closed socket.So my question is: how can I make the browser download the full response before it closes the socket?Additional infoHTTP Response headers sent to the client:
To stream videos you should support at least range requests and transfer-encoding: chunkedAs far as I can see http.server does not support that directly. You can of course implement that on top.Alternatively use a simple framework, e.g. bottle (one file, already supports both) or cherrypy (more solid, multi-threaded, etc)You can also get by without any Python code, e.g. if you use nginx
Fundamentally, @qarma is right. To stream videos, you need to use a library or framework that supports, at the very least, Range: headers.But, you are not /trying/ to stream video. The browser is doing it for you. When you return the video/mp4 content type, the browser, which knows how to stream video itself, immediately switches to a streaming mode. It stops the file download it had going (the source of your pipe errors), and restarts with a Range: header. It leverages existing media player code within the browser to do so. Since the SimpleHTTPServer class doesn't support the Range: header, it doesn't handle the response properly.If you want to prevent this streaming behavior and force the browser to download the file without playing it, then return the Content-Disposition header forcing it to treat the video file as a downloaded file rather than as a piece of content to be rendered.Here's some code based on your initial question that does what you want:Theoretically, you also send back Accept-Ranges: none, but Chrome, at least, seems to ignore that.
It turns out that the video file I was using was corrupted (maybe it had some dropped frames or something like that). I tested with multiple other .mp4 and it worked like a charm.All you really need to play a video file (or more accurately stream a video file as pointed by @hrunting) as far as http headers for the response are concerned is:I think even the Server, Date and Last-Modified headers aren't mandatory (they are sent automatically by SimpleHTTPRequestHandler).As pointed by @qarma and @hrunting, if you want to enable the user to jump to a specific time in video, you should support the Range header. It's simply a good idea to support the Range header as it is sent by default by Chrome.


Answer URL
https://docs.python.org/3/library/http.server.html#module-http.server
https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler
