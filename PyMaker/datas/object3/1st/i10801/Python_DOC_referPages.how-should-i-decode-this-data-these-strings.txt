Natural Text
I am currently trying to work through an OLD python CTF challenge, the script of the server is provided, and the idea is to send the correct data to this server,EDITI understand, what is going on to the point that a validate_password function is created by using a CodeType and FunctionType objects. I also understand that if validate_password(user_input) evaluates as True, the flag will be sent. meaning that the return type must be boolean. The documentation for CodeType along with the server script also reveals that validate_password has only one argument.My Actual QuestionThe source contains compiled python bytecode. b'd\x01\x00d\x02\x00d\x03\x00d\x04\x00d\x05\x00d\x06\x00d\x05\x00d\x07'for example. I have tried numerous ways to decode/encode these strings to get some meaningful data, the only data i have managed to extract is hexadecimal. How do i convert this data into actual code, therefore being able to reconstruct the validate_password function.What I have TriedSO - Python: convert string to packed hex ( '01020304' -> '\x01\x02\x03\x04' ) - I have attempted to basically do what this answer suggests but in reverse, i have either not understood it correctly, or this doesn't workbinascii.b2a_hex() - This is how I managed to convert the strings into hex, like i stated earlier however, i cannot yield utf-8 data from this hex.struct.unpack() - Had some success with this method, yet am at a loss of what the data would mean in the context of the validate_password function, I can only get integers with this method. (Unless i have misunderstood)
Riffing off of das-g's answer, this code works. Sorta. What's missing here is that this code is really wrapped inside a function that takes an "a" parameter. I won't spoil the fun giving the answer. Instead:Run the above program.Wrap the output in something like:def drm(a):    # Output from run above.
Start an interactive Python 3 session. If you use the plain python interpreter, typeIf you're using IPython, you might instead writeYou'll learn that types.CodeType is there toCreate a code object.  Not for the faint of heart.Uh hu. What are code objects? Let's have a look at the Python documentation.The type for code objects such as returned by compile().So the bytestring arguments might, at least partially be binary data (or binary instructions), rather than (text) string encoded somehow.The help or ? invocation also told us the signature of this type's initializer:With that, we can write the construction more self-descriptively:(This is just for illustration. It isn't actually executable like this, because types.CodeType() expects all arguments to be passed positionally rather than as keyword arguments.)Now what does all that mean?You can disassemble the code object to get closer to that question:(output:)See the dis documentation for the meaning of the bytecode operations (LOAD_CONST, BUILD_LIST, etc.).To get an even better grasp of what the function is doing, one would then try to decompile it back to Python code. I didn't manage to do that, though. (Tried with uncompyle6.)


Answer URL
https://docs.python.org/3/library/types.html#types.CodeType
https://docs.python.org/3/library/functions.html#compile
https://docs.python.org/3/library/dis.html#python-bytecode-instructions
