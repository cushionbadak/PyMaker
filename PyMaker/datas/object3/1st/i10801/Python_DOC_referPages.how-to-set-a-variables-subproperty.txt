Natural Text
I am a newbie to Python. I got some Python sample code from a software vendor who extended their software API with boost.python so we can call them in Python. I am confused with some of the segments, such as:All the variable names are replaced to be these funny things anyway, just for explanation of the general idea. So here the problem is in the 3rd line. How can we set the variable settings.Type with its sub property settings.Type.enum.Bird, where enum.Bird I suppose is some kind of enum of different kind of animals, which is a sub-property of settings.Type?I tried doing some test to add one line following the above 5 lines to see if enum.Bird is still there:and it works ok. So for this instance settings, it's sub property Type is not overwritten by its sub property of enum.Bird, it still knows enum.Bird is its sub-property. Can you advise if I need to implement this line in Python, how can I do that?I suppose it would be a quite interesting knowledge for people learning Python, so I raised this question here for discussing. I am trying to think in a C++ way, but I didn't figure it out.
I don't really see what's the issue. Consider an Enum defined in python:The Type.Bird and Type.Cat are instances of the Type class:As such they have access to their own class, which is Type:Now you can just add a property to the Type class and obtain that behaviour:and now you have:Note that while the above allows you to write Bird.enum doesn't allow you to access as in Type.enum because this would return the property object.To obtain the exact behaviour you see in that code you could:Set the settings.Type attribute to be an instance of Type (possibly an Invalid one) and be done:Replace the use of property with a custom made descriptor that will handle the access via the class too.  In this case read the documentation about property which also provides its python code equivalent. The case you have to change is __get__ when obj is None:Use this as:And now you have:so that Type.enum.Bird works.


Answer URL
https://docs.python.org/3/howto/descriptor.html#properties
