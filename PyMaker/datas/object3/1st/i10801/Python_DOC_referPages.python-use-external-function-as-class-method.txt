Natural Text
Say I have some very long function module.my_function that's something like this:With a large number of args and keyword args. I want this function to be usable both as a part of module module and as a class method for myClass. The code for the function will remain exactly the same, but in myClass a few keyword args may take different default values. What's the best way of doing this? Previously I was doing something like:It seems a little silly to write all these arguments that many times, especially with a very large number of arguments. I also considered doing something like module.my_function(**locals()) inside the class method, but I'm not sure how to handle the self argument and I don't know if this would lead to other issues. I could just copy paste the entire code for the function, but that doesn't really seem very efficient, when all that's changing is a few default values and the code for my_function is very long. Any ideas?
You can convert the function to bound method by calling its __get__ method (since all function as descriptors as well, thus have this method)For exampleNote that the instance is also passed as an positional argument. That is if you want you function to be instance method, the function should have been written in such a way that first argument behaves as instance of the class. Else, you can bind the function to None instance and the class, which will be like staticmethod.Furthermore, to make it a classmethod (first argument is class):


Answer URL
https://docs.python.org/3/howto/descriptor.html
