Natural Text
This question already has an answer here:How to test multiple variables against a value?                    21 answers                Below is my code. I am trying to parse a DataFrame and store company matches. However, the if statement always returns true and everything is saved in the dataframe current_customers even though about 10 out of my 150 rows has a value > 97. Below my code is a sample of my data. Sample of my dataEDIT:Additionally, if there is a more efficient way to do this, I would love to hear. 
IIUC you can just do :What you tried short circuits because any non-zero value will evaluate to True as it's not comparing all the terms against the last numerical value as you expected:So this is equivalent to:so here if some_val is non-zero or another_val is non_zero then the entire statement evaluates to TrueYou can see this in a simplified case:this outputs:With just a single comparison:outputs:but with each value compared with the target value:this now prints:but the real point here is to not loop at all, you can sub-select from your df by passing a list of the cols of interest, you can then compare the entire df against your scalar value and use any(axis=1) to generate a boolean mask and use this to mask the df to return you the current customers, you then invert the comparison and use all(axis=1) to find the rows where none of the cols satisfy your previous comparison to filter the df for the potential customers
Your problem is the if statement, as you suspected:You're asking if the expression "combined_data['match token sort'].iloc[i]" is true, which it is a number > 0, so it is a truthey value according to Python. Thus, the entire expression returns True.I'll add parenthesis to make it more clear how Python is interpreting this line of code:Python is evaluating the statements in the parenthesis separately, and Python considers any non-zero number to be a "truthey" value, and thus used as a conditional it returns True. Here's a corrected expression:Now Python will each operation as a comparison operation as you intended.


Answer URL
https://docs.python.org/3/reference/expressions.html#boolean-operations
