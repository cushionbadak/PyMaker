Natural Text
I have two problems with concurrent.futures:How to break time.sleep() in a python concurrent.futures?Conclusion: time.sleep() cannot be interrupted. One solution is: You can write a loop around it and do short sleeps.See How to break time.sleep() in a python concurrent.futuresIndividual timeouts for concurrent.futures?Conclusion: individual timeouts need to implemented by the user. For example: for each timeout you  can call to wait().See  Individual timeouts for concurrent.futuresQuestionDoes asyncio solve theses problems?
In the asyncio model, execution is scheduled and coordinated by an event loop. To cancel execution of a currently suspended task, you essentially simply have to not resume it. While this works a little different in practice, it should be obvious that this makes cancelling a suspended task simple in theory.Individual timeouts are certainly possible the same way: whenever you suspend a coroutine to wait for a result, you want to supply a timeout value. The event loop will ensure to cancel the waiting task when that timeout is reached and the task hasn't completed yet.Some concrete samples:In practice, this might be implemented using something like this:While this method is asleep, somebody else can call foo.task.cancel() to wake up the coroutine and let it handle the cancellation. Alternatively whoever calls sleeper() can cancel it directly without giving it a chance to clean up.Setting timeouts is similarly easy:Particularly in the context of HTTP request timeouts, see aiohttp:Obviously each call to fetch_page can decide on its own aiohttp.Timeout value, and each individual instance will throw its own exception when that timeout is reached.
You could raise immediately in its exception (with asyncio.CancelledError).I'm using this catch to overcome it:


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.wait
https://docs.python.org/3/library/asyncio.html
https://docs.python.org/3/library/asyncio-subprocess.html
