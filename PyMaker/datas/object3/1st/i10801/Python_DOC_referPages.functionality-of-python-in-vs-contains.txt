Natural Text
I implemented the __contains__ method on a class for the first time the other day, and the behavior wasn't what I expected. I suspect there's some subtlety to the in operator that I don't understand and I was hoping someone could enlighten me.It appears to me that the in operator doesn't simply wrap an object's __contains__ method, but it also attempts to coerce the output of __contains__ to boolean. For example, consider the classThe in operator and a direct call to the __contains__ method return very different output:Again, it looks like in is calling __contains__ but then coercing the result to bool. I can't find this behavior documented anywhere except for the fact that the __contains__ documentation says __contains__ should only ever return True or False.I'm happy following the convention, but can someone tell me the precise relationship between in and __contains__?EpilogueI decided to choose @eli-korvigo answer, but everyone should look at @ashwini-chaudhary comment about the bug, below.
Use the source, Luke!Let's trace down the in operator implementationAs you can see, the in operator becomes the COMPARE_OP virtual machine instruction. You can find that in ceval.cTake a look at one of the switches in cmp_outcome()Here we have the PySequence_Contains callThat always returns an int (a boolean). P.S.Thanks to Martijn Pieters for providing the way to find the implementation of the in operator.
In Python reference for __contains__ it's written that __contains__ should return True or False.If the return value is not boolean it's converted to boolean. Here is proof:Now write in shell:And bool() of nonempty list returns True.Edit:It's only documentation for __contains__, if you really want to see precise relation you should consider looking into source code although I'm not sure where exactly, but it's already answered. In documentation for comparison it's written:However, these methods can return any value, so if the comparison operator is used in a Boolean context (e.g., in the condition of an if statement), Python will call bool() on the value to determine if the result is true or false.So you can guess that it's similar with __contains__.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__contains__
https://docs.python.org/3/reference/datamodel.html#object.__lt__
https://docs.python.org/3/library/functions.html#bool
