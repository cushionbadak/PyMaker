Natural Text
I have been trying to make my first attempt at a threaded script. Its going to eventually be a web scraper that hopefully works a little faster then the original linear scraping script I previously made.After hours of reading and playing with some example code. Im still not sure what is considered correct as far as an implementation goes.Currently I have the following code that I have been playing with:The idea is that I have a list of URLs in the test.txt file. I open the file and put all of the URLs in the queue. From there I get 10 threads running that pull from the queue and scrape a webpage, or in this example simply print out the line that was pulled.Once the function is done I remove a 'worker thread' and then a new one replaces it until the queue is empty.In my real world implementation at some point I will have to take the data from my function scrapes and write it to a .csv file. But, right now Im just trying to understand how to implement the threads correctly. I have seen similar examples like the above that use 'Thread'...and I have also seen 'threading' examples that utilize an inherited class. I'd just like to know what I should be using and the proper way to manage it.Go easy on me here, Im just an beginner trying to understand threads....and yes I know it can get very complicated. However, I think this should be easy enough for a first try...
On Python 2.x multiprocessing.dummy (which uses threads) is a good choice as it is easy to use (also possible in Python 3.x)If you find out scraping is CPU-limited and you have multiple CPU cores, this way you can quite simply switch to real multiprocessing possibly gaining a big speedup.(Python often does not profit from multiple CPUs with threading as much as with multiple processes because of a performance optimization - you have to find out yourself what is faster in your case)With mutliprocessing.dummy you could doOn Python 3.x, concurrent.futures might be a better choice.


Answer URL
https://docs.python.org/3/glossary.html#term-global-interpreter-lock
https://docs.python.org/3/library/concurrent.futures.html
