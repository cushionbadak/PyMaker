Natural Text
I am trying to search a list (DB) for possible matches of fragments of text. For instance, I have a DB with text "evilman". I want to use user inputs to search for any possible matches in the DB and give the answer with a confidence. If the user inputs "hello", then there are no possible matches. If the user inputs "evil", then the possible match is evilman with a confidence of 57% (4 out of 7 alphabets match) and so on.However, I also want a way to match input text such as "evxxman". 5 out of 7 characters of evxxman match the text "evilman" in the DB. But a simple check in python will say no match since it only outputs text that matches consecutively. I hope it makes sense. ThanksFollowing is my code:
This first version seems to comply with your exemples. It make the strings "slide" against each other, and count the number of identical characters.The ratio is made by dividing the character count by the reference string length. Add a max and voila.Call it for each string in your DB.This second version produces the same results, but using the difflib mentioned in other answers.It computes matching blocks, sum their lengths, and computes the ratio against the reference length.As shown by the calls above, the behavior is slightly different. "holes" between matching blocks are ignored, and do not change the final ratio.
For finding matches with a quality-estimation, have a look at difflib.SequenceMatcher.ratio and friends - these functions might not be the fastest match-checkers but they are easy to use.Example copied from difflib docs
Based on your description and examples, it seems to me that you're actually looking for something like the Levenshtein (or edit) distance. Note that it does not quite give the scores you specify, but I think it gives the scores you actually want.There are several packages implementing this efficiently, e.g., distance:Note that the library contains several measures of similarity, e.g., jaccard and sorensen return a normalized value per default:
Create a while loop and track two iterators, one for your key word ("evil") and one for your query word ("evilman"). Here is some pseudocode:


Answer URL
https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher.ratio
