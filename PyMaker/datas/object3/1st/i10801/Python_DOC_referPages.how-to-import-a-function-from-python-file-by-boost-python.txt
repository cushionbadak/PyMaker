Natural Text
I am totally new to boost.python. I reviewed a lot of recommending of using boost.python to apply with python, however still not easy to understand and find a solution for me.What I want is to import a function or class that directly from a python "SourceFile"Example File:Main.cppMyPythonClass.pyLet's says if there is a "Dog" class in "MyPythonClass.py" with "bark()" function, how do I get callback and send argument in cpp?  I have no idea what I should do!Please help me!
When one needs to call Python from C++, and C++ owns the main function, then one must embed the Python interrupter within the C++ program.  The Boost.Python API is not a complete wrapper around the Python/C API, so one may find the need to directly invoke parts of the Python/C API.  Nevertheless, Boost.Python's API can make interoperability easier.  Consider reading the official Boost.Python embedding tutorial for more information.Here is a basic skeleton for a C++ program that embeds Python:When embedding Python, it may be necessary to augment the module search path via PYTHONPATH so that modules can be imported from custom locations.Often times, the Boost.Python API provides a way to write C++ code in a Python-ish manner.  The following example demonstrates embedding a Python interpreter in C++, and having C++ import a MyPythonClass Python module from disk, instantiate an instance of MyPythonClass.Dog, and then invoking bark() on the Dog instance:Given a MyPythonClass module that contains:The above program outputs:
Boost python is used to call cplusplus functions from a python source. Pretty much like the Perl xs module.If you have a function say bark() in main.cpp, you can use boost python to convert this main.cpp into a python callable module.Then from python script(assuming link output file is main.so):


Answer URL
https://docs.python.org/3/extending/embedding.html
