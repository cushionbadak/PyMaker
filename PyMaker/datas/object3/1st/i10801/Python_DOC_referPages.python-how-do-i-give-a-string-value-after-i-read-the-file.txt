Natural Text
I'm new to this community and this computer language. Recently I'm working on some practice and a question has bugged me for several days. Here is the question:Read file test.txt(index: "CDEF","ABC","FIJK") in python, and re-align it into "ABC","CDEF","FIJK" , and given each character a value based on alphabet order(eg, "ABC" = 1+2+3=6), at last print the value of the index(eg, A+B+C=6,"ABC"at first place represents 1, so the value of"ABC"is 6, the value of "CDEF" is 18*2=36(2 represents second place of the list) "FIJK" is 36*3=108)print out 150(6+36+108)  I don't have code right now. I'm thinking of if I do it with dictionary key. But is there any brilliant way to do it or if the file today isn't the index above. Should I do it in loop? 
First, let's assume that you have a file called sample.txt containing the following:SCRIPTHere is the script to accomplish what (I think) you are after:OUTPUTThe output of the above code:EXPLANATION(1) Open so.txt as a read-only file, and store it as a variable: file.(2) Take each line in file and remove any linebreaks and turn it into a list.(3) Sort the list.(4) This one is a little tricky as it is doing a few things.So, let's break it up into two components:That code is called a list comprehension. It is creating a new list with each element of the lines list, and doing something. It is roughly equivalent to:So, having the line variable (which would be a string), we can treat that also as a list and iterate over it in another list comprehension:For each letter in the line string, it converts it to lower case, makes it an ASCII ordinal, and subtracts 96 to get it to start with a == 1. You can see a list of all ASCII numbers here.Finally, having a list that is now character strings converted into numbers, we apply sum() to that list.We now have:(5) We take that list of the sums and provide another list comprehension. This time, the goal is to take each number, and multiply it by its index. You can get the index of an element by calling list.index(element). As follows:(6) Finally, all we have to do is sum that last list we made using the sum() method again.I hope I answered the question you were after.
You could use a nested comprehension:If you want to use a regular for loop with an accumulator:ord("A") gives you the ascii value of a character. For "A" it is 65. This is why I'm subtracting 64 in the example. So (ord(letter) - 64 for letter in item) generates a number for each character in the string "ABC", for example, and then sum adds them up. This value is then accumulated into total_sum, which will contain 6 after the first iteration of the for loop.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
