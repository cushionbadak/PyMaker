Natural Text
I want to populate three lists: A, B and CI have a function that based on a singular input returns N objects that should append to each list. That is, f returns stuff_for_A, stuff_for_B, stuff_for_C where each stuff is a list containing N items. I want to join each of those to their respective lists as I loop over the iterable that sends input to f.How can I write a super fast list comprehension to create these 3 lists?Note: I can restructure the output of f (such as zipping the items together) if that makes things easier.EDIT: Here's some pseudo-code with the bottom list comprehension being incorrect.
If A, B, and C exist, the following will update them with the returned values from f:list(map(lambda x: x[0].extend(x[1]), zip([A,B,C], f())))list is called, cause map is lazy in python 3.
It appears that you want the same result asbut with only one pass over iterable. With an explicit for loop, you would useWith a single list comprehension, you can get a list of triples:which you could then transpose into a triple of lists:Your original f function returns a triple, so you can use use that in place of the triple in the preceding:
To create the lists from the returned tuples, you can use that multiple assignment with zip and unpacking on a generator expression:This will return the respective items for each list grouped in 3 tuples.Trial:To return them as lists instead, you can use a list comprehension with the previous operation:In the event the function returns a tuple of 3 iterables, then you can use itertools.chain to flatten the results from zip:
Extend A, B, C directly, without returning things?https://repl.it/Chl6(I use .extend() with lists inside because your functions return lists, otherwise use A.add(thing) to add individual things. I also renamed input to item because input() is a built-in function in Python)


Answer URL
https://docs.python.org/3/library/functions.html#zip
