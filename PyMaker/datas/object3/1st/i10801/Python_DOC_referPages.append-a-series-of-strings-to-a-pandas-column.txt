Natural Text
I'm a Pandas newbie and have written some code that should append a dictionary to the last column in a row.The last column is named "Holder"Part of my code, which offends the pandas engine is shown belowI get the error messageWhen I run my code replacing the "+=" with "=" the code runs just fine although I only get part of the data I want.What am I doing wrong? I've tried removing the str() cast and it still works as an assignment, not an append.Further clarification:My original dataset contains over 300 columns of data, but I've created an example that captures the spirit of what I'm trying to do. Imagine a college with 300 departments each offering 1(or more) courses. The above data is a micro-sample of that data. So for each student, next to their name or admission number, there is a "-1" indicating that they took a certain course. And in addition, the next column USUALLY contains notes from that department about that student.Looking at the 1st row of the data above, we have a student who took Math & Spanish and each department added some comments about the student. For each row, I want to add a dict that summarises the data for each student. Basically a JSON summary of each departments entry. Assuming a string of the general formI intend my code to read my csv, form a dict for each department and APPEND it to Holder column. Thus for the above student(1st row), there will be 2 dicts namelyand the final contents of Holder for row 1 will bewhen I can successfully append the data, I will probably add a comma or '|' in between the seperate dicts. The line of code that I have written is whether or not I cast the above line as str(), writing the assignment instead of the append operator appears to overwrite all the previous values and only write the last value into Holder, something likewhile I wantFor anyone interested in reproducing what I have done, the main part of my code is shown below
is that what you want?NOTE: it will be really painful to work / parse your Holder column in future, because it's not standard - you won't be able to parse it back without additional preprocessing (for example splitting using complex RegEx'es, etc.)So i would strongly recommend you to convert a list of dicts to JSON - you'll be able to read it back using json.loads() method:parse it back:


Answer URL
https://docs.python.org/3/library/json.html
