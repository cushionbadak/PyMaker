Natural Text
As far as I understand from the python docs, from package import x statement should bind only x, but not package, into the current namespace.But in practice, if package is a relative name, it is also bound sometimes!Let me provide an example. Consider the following file hierarchy:subpackage/__init__.py:package/__init__.py:Now let's run python (either v2 or v3) interpreter from the root directory and executeThe first three output lines are predictable:But the last one is <module 'package.subpackage' ...> rather than None, and this confuses me somewhat.Have I missed something? Is it expected behavior? What is the reason?The situation seems even more weird to me in this case:another_package/__init__.py:package/__init__.py:Now I run this outside the root:Why did another_package appear in dir(root)?
It's important to realize modules are loaded once at most (unless they are explicitly reloaded). If a module is imported in multiple modules, the same module object is referenced by them all. E.g.:Module M.pyModule A.pyModule B.pySo:Now, when the statement from ..another_package import bar is executed it is basically equivalent to executing from root.another_package import bar. Since another_package is indeed a module inside the root package, the statement succeeds which results with the following effects (there may be more, but for this purposes let's focus on these 3):root is loaded if not previously loaded (its' __init__.py is run)bar is imported into the current namespaceanother_package is added as an attribute to root module objectSome developers are not completely aware of items 1 and 3.Back to your question: Let's see what happens when import root.package is executed, in this order:root's __init__.py is run (because root wasn't loaded yet)package's __init__.py is run (because package wasn't loaded yet)from ..another_package import bar is executed which has the side effects mentioned above, most notably, the (Yes. THE object. There is only one per each module, remember?) module object of root has the attribute another_package added to it.This explains why another_package appears in root's dir. 


Answer URL
https://docs.python.org/3/reference/import.html#submodules
