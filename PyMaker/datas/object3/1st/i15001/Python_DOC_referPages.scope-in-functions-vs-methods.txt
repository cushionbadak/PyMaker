Natural Text
This question already has an answer here:Short description of the scoping rules?                    7 answers                I am wondering why a method of a class doesn't look into its enclosing scope, if a name is not defined.I would expect TestScopeClass.print_var() to print 5 since it can read classvar in the TestScopeClass body.Why this behavior? And what should i read in the docs to get to know about it.
Scopes are searched as follows:the innermost scope, which is searched first, contains the local namesthe scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contains non-local, but also non-global namesthe next-to-last scope contains the current moduleâ€™s global namesthe outermost scope (searched last) is the namespace containing built-in names(emphasis added).  Enclosing classes are not searched, because they are not listed.  This behavior is deliberate, because otherwise the descriptor protocol, which among other things provides the self argument to methods, would not have a chance to fire.
Per the Python documentation (emphasis mine):The scope of names defined in a class block is limited to the class block; it does not extend to the code blocks of methods


Answer URL
https://docs.python.org/3/reference/executionmodel.html#naming-and-binding
