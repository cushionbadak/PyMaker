Natural Text
My general workflow is using 2 screens; 1 for the script, 1 for the interactive buffer. I then evaluate parts of the script code in the interactive buffer. This is really nice when working with a small project (I just reevaluate the code I changed at that moment, everything else equal). It allows for (I'm convinced) the fastest iterations in writing a script.However, I'm now working on a project where I try to be neat and organize my project with a single class per file (or close to it). Now here lies the issue: While it is easy to evaluate parts of code, in Python it is difficult to import modules once they have already been imported. Mind that I most of the time have useful objects in the interactive buffer / global scope (perhaps some objects took 10 minutes to be built). This means that I can't just close & reopen everything.Are others struggling with this as well? How to conveniently work with multiple files and a Python REPL?
Using the brilliant elpy package allows this from the latest release (available on MELPA).You can assign a dedicated REPL to each script as you like. It helps to rename the REPL sessions using M-x rename-buffer.Here is a snippet from the relevant documentation:M-x elpy-shell-toggle-dedicated-shellBy default, python buffers are all attached to a same python shell (that lies in the Python buffer), meaning that all buffers and code  fragments will be send to this shell.  elpy-shell-toggle-dedicated-shell attaches a dedicated python shell  (not shared with the other python buffers) to the current python  buffer. To make this the default behavior (like the deprecated option  elpy-dedicated-shells did), use the following snippet:M-x elpy-shell-set-local-shellAttach the current python buffer to a specific python shell (whose name is asked with completion). You can use this function to have one  python shell per project, with:Here is the relevant GitHub issue, which was merged into the master branch on 16th Feb 2018.


Answer URL
https://docs.python.org/3/library/importlib.html#importlib.reload
