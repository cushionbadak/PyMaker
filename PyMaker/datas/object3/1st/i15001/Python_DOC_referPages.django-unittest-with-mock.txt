Natural Text
I am writing an Unit-Test for a Django class-based view.The key issue is that call_external_API() in get_data().When I am writing Unit-test, I don't really want to call external API to get data. First, that will cost my money; second, I can easily test that API in another test file.I also can easily test this get_data() method by having an unit-test only for it and mock the output of call_external_API().However, when I test this whole class-based view, I simply will doand check the status code and context data to verify it.In this case, how do I mock this call_external_API() when I am testing the whole class-based view?
What your are looking for is patch from unittest.mock. You can patch call_external_api() by a MagicMock() object. Maybe you want to patch call_external_api() for all your tests in class. patch give to you essentialy two way to do itdecorate the test classuse start() and stop() in setUp() and tearDown() respectivelyDecorate a class by patch decorator is like decorate all test methods (see documentation for details) and the implementation will be very neat. Follow example assume that your view is in my_view module.More sophisticate examples can be build and you can check how you call mock_call_external_api and set return value or side effects for your API.I don't give any example about start and stop way to do it (I don't really like it) but I would like to spend some time on two details:I assumed that in your my_view module you define call_external_api or you import it by from my_API_module import call_external_api otherwise you should pay some attention on Where to patchI used autospec=True: IMHO it should be used in every patch call and documentation explain why very well
You can mock the call_external_api() method when testing the classed based view with something like this:


Answer URL
https://docs.python.org/3/library/unittest.mock.html#patch
https://docs.python.org/3/library/unittest.mock.html#where-to-patch
https://docs.python.org/3/library/unittest.mock.html#autospeccing
