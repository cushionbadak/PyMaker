Natural Text
Command framed to identify if Xcode is running on Mac: cmd = "ps -ax | grep -v grep | grep Xcode"If Xcode is not running, then above command works well with Popen method of subprocess module, but raises a CalledProcessError with check_output method. I tried to inspect the stderr through the following code, but failed to get appropriate information to understand the reason.Exception message is as follows:Error: Command 'ps -ax | grep -v grep | grep Xcode' returned non-zero exit status 1 NoneQuestion: Why the above command works with Popen, but fails with check_output ?Note: Command works well with both approach, if Xcode is running.
check_output() works as expected. Here's its simplified implementation in terms of Popen():grep returns 1 if it hasn't found anything i.e., you should expect the exception if Xcode is not running.Note: as the implementation shows, you can get the output even if the exception occurs:You could probably use pgrep -a Xcode command instead (note: starts with p) or use psutil module for a portable code:
From the Python docs: "If the return code was non-zero it raises a CalledProcessError.". That's what happens to you when Xcode isn't running; the final grep Xcode exits with a non-zero status because grep couldn't find the string Xcode that you're looking for. Hence, check_output() will raise the exception.BTW, I found this on the Python subprocess documentation.
If your grep command grep Xcode returns no result then the returncode of the command will be non-zero, that's why check_output is calling CalledProcessError, which is what you are seeing in the output of print commandTo get the output of your command be it error or success use following piece of code:-check_output will only show you the output of the command if it's return code is 0 else it calls an exception.
The purpose of check_output is to make sure that the command you ran completed successfully.  It's supposed to fail if grep Xcode does not return success.What you want would be a lot simpler with the searching in Python, anyway.This has the additional (very minor) benefit over the shell version that it actually fails if ps fails for some reason.  The shell would simply ignore the exit code of ps when it's not at the end of a pipeline.


Answer URL
https://docs.python.org/3/library/subprocess.html
