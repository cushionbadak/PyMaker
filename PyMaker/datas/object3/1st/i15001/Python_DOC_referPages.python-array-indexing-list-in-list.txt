Natural Text
I want to do array indexing. I would have expected the result to be [0,1,1,0], however I just get an error. How can I do this type of indexing? Up top, i actually meant to say [False,True,True,False] not [0,1,1,0] as I want the bools so i can do indexing
First of all you cannot use [0,1,1,0] for indexing here, so you're using the wrong term.If I understood this correctly you're simply trying to check whether items of a_np_array exist in ['b', 'c'],  for that use numpy.in1d, but as it returns boolean array we just need to convert it integer array.Coming to why a_np_array in ['b', 'c'] didn't work?Here the in operator will call the __contains__ method of the list object(['b', 'c']) and then for each object in list Python will use the method PyObject_RichCompareBool to compare each item to a_np_array. PyObject_RichCompareBool first of all simply checks if the items to be compared are the same object, i.e same id(), if yes return 1 right away otherwise call PyObject_RichCompare on them. Hence this will work:But this won't:Now Python will check whether the object returned by PyObject_RichCompare is already a boolean type, i.e True or False(This is done using PyBool_Check and Py_True), if it is then return the result immediately otherwise call PyObject_IsTrue to check whether the object can be considered a truthy object, this is done by calling __nonzero__ method of the object. For a NumPy array this will end up calling bool() on the returned object which is going to raise an error you're getting. Here NumPy expects you to call either all() or any() to check whether all items are True or at least one.Links to source code:list_containsPyObject_RichCompareBoolPyObject_IsTrue
Try this list comprehension:Utilizing the fact that int(True) == 1 and int(False) == 0


Answer URL
https://docs.python.org/3/c-api/object.html#c.PyObject_RichCompareBool
https://docs.python.org/3/c-api/object.html#c.PyObject_RichCompare
