Natural Text
I have a list of lists that looks like this, that was pulled in from a poorly formatted csv file:I would like to end up with a new structure like this:after which I can further split, strip, etc.So, I used the facts that:the customer number always starts with Customer Numberthe Notes are always longerthe number of Notes never exceeds 5to code up what is clearly an absurd solution, even though it works.Would anyone mind recommending a more stable and intelligent solution to this kind of problem? 
Just keep track of when we find a new customer:Output:If the customer can repeat again later and you want them grouped together use a dict:Output:Based on your comment and error you seem to have lines coming before an actual customer so we can add them to the first customer in the list:Which outputs:I presumed you would consider lines that come before any customer to actually belong to that first customer. 
Your basic objective is to group the notes and associate it with the customer. And since the list is already sorted, you can simply use itertools.groupby, like thisHere, we flatten the actual list of lists to a sequence of strings, with chain.from_iterable. And then we group the lines which have Customer in it and the lines which don't. If the line has Customer, then item will be True otherwise False. If item is True, then we get the customer information and when the item is False, we iterate over the grouped notes and return one string at a time by concatenating the customer information with the notes.So, when you run the code,you get

You can also use OrderedDict, where keys are customers and values is a list of notes:Results in:Putting values in a dict like this, can be useful if you want to calculate how many notes are for a given customer, count the notes, or just select notes for a given customer.Alternative, without getting calling list(DF_dict.keys())[-1] in each iteration :And new shorter version, using defaultdict:
As long as the format is the same as your example, this should work.
As long as you can count on the first element being a customer, you can do it like this.Simply loop through each item. If the item is a customer, set the current customer as that string. Else, it is a note, so you append the customer and the note to the list of results.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
