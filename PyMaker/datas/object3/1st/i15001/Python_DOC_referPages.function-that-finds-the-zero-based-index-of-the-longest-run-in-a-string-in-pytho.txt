Natural Text
I'm trying to write a function that finds the zero-based index of the longest run in a string. If there is more than one run with the same length, the code should return the index of the first one.I did some research and found this code which I think could be used to find the longest run in my list, but I don't know how to use this to find the index of the first letter in the longest run. Can anyone help me or give me some advice on how to do this? Overall, the output when the program is run should produce the number 6 as the first 'd' is at index 6, and is the longest run.Please note I am a beginner so it would be appreciated if answers were kept as simple as possible, and explained.
This should be fine:
You can use itertools.groupby() with max() and enumerate() for this:How this works?We first make groups of similar items using itertools.groupby and enumerate(a). But as enumerate(a) will return both index as well the item((index, item) tuples) from the list a we need to tell groupby to use the item to group stuff, for that I have used operator.itemgetter(1) in groupby().Now groupby() return two items, the item key item we have used for grouping and the groups in form of iterator. Now we can use this iterator(group) to get the first item as well the index by calling next on the iterator, and then to get the total count of all items present in this group use sum() with a generator expression: sum(1 for _ in g)+1. +1 was done to compensate the item we already fetched from this group using next() earlier on.Using the index, key and the count we now have generator that will yield ((index, key), length) on iteration.Now we can simply use the built-in function  max() with itemgetter again to specify which item to use for comparison(length here) and find the required index.
If you want the starting index of the longest string:I stored all the keys and lengths in case you want to actually also know all the info. Without imports:Some timings show the simple loops are actually the most efficient:
You can get a list of runs using itertools.groupby, then you just have to find the max run and sum the length of all the previous runs:
Use defaultdict to create a dictionary with a count of each item then find the key with the highest value, then find the first occurrence of that item.The benefit of using modules is for simplicity and efficiency of development; plus the "standing on the shoulders of giants" effect from reusing well-maintained and well-tested code. That's not to say you shouldn't be careful when using modules to check that they are well maintained and come with unit tests. 


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
