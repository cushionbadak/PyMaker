Natural Text
I have the following code:I have just gotten to lambda functions and I get how they work, at at least, I can comprehend the baleful rites behind their malignant dark magic.But even with the Python code driving me insane I still don't get WHY that piece of code works? pair is not defined in any way so why is there an access index and worse still, why does that index matter (fyi pair[2] is out of scope and pair[0] gives a normal ordered pairs).How the hell do we access nothingness that exists only within the impure confinements of the dreaded lambda function? Furthermore how does accessing the nothingness returns anything being the void which stares into us as we stare into it?
This works exactly as it should, because you specified the first index as the key, the tuples will be sorted according to the strings, sorted in alphabetical order. The index zero is actually the first element where as the index one is the second element because indices start counting at zero. Thus when you supply your lambda you are telling the sort method, sort the tuples by their second elements, which are all strings. 

I don't know what you think a lambda function is, but it's nothing more than a simple one-line function. Your code could just as easily be written like this:As you can see, nothing is being conjured out of thin air; pair is simply the parameter of the function.It has an index because sort passes the key function each element of the list to be sorted; so in the first call, pair will be (1, 'one'), and so on.


Answer URL
https://docs.python.org/3/library/functools.html#functools.cmp_to_key
