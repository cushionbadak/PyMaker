Natural Text
I just discovered the existence of an Enum base class in python and I'm trying to imagine how it could be useful to me.Let's say I define a traffic light status:Let's say I receive information from some subsystem in my program, in the form of a string representing a colour name, for instance brain_detected_colour = "red".How do I compare this string to my traffic light signals?Obviously, brain_detected_colour is Signal.red is False, because Signal.red is not a string.Signal(brain_detected_colour) is Signal.red fails with ValueError: 'red' is not a valid Signal.
One does not create an instance of an Enum.The Signal(foo) syntax is used to access Enum members by value, which are not intended to be used when they are auto().However one can use a string to access Enum members like one would access a value in a dict, using square brackets:Another possibility would be to compare the string to the name of an Enum member:But here, we are not testing identity between Enum members, but comparing strings, so it is better practice to use an equality test:(The identity comparison between strings worked thanks to string interning, which is better not to be relied upon. Thanks @mwchase and @Chris_Rands for making me aware of that.)Yet another possibility would be to explicitly set the member values as their names when creating the Enum:(See this answer for a method to have this automated.) Then, Signal(brain_detected_colour) is Signal.red would be valid.
It is possible to have auto() return the name of the enum member as its value (which is in the auto section of the docs1:1 This requires version Python 3.6, or aenum 2.02 (aenum works with Pythons as old as 2.7).2 Disclosure:  I am the author of the Python stdlib Enum, the enum34 backport, and the Advanced Enumeration (aenum)  library.


Answer URL
https://docs.python.org/3/library/enum.html
https://docs.python.org/3/library/enum.html#enum-members-aka-instances
https://docs.python.org/3/library/enum.html#programmatic-access-to-enumeration-members-and-their-attributes
https://docs.python.org/3/library/enum.html#using-automatic-values
https://docs.python.org/3/library/enum.html
