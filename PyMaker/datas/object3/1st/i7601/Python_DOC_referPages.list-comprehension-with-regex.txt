Natural Text
I am learning from Jacob Perkins's book.I do not understand this exampleNow we haveWhat does this list comprehension serve for?What does repl stands for?
repl stands for replacement. It is just a variable name; repl has no special meaning.The (incomplete) code you have provided is presumably going to make a bunch of replacements on a given string. It will replace won't with will not; can't with cannot; i'm with i am; etc.The more complex replacements, such as (\w+)'d --> \g<1> would are using back-references to capture part of the matched pattern, for use in the replacement.The code: (re.compile(regex), repl) for (regex, repl) in patterns is using list-comprehension to compile the regular expressions.
repl is just a variable referring to the 2nd part of the tuple so lets say you have a list with [(1, 2), (3, 4)] and you want to create a list-comprehension to make a new list by adding 1 to the 2nd number in each tuple, you would do something like: 
I qoute:Python supports a concept called "list comprehensions". It can be used to construct lists in a very natural, easy way, like a mathematician is used to do. A list comprehension can be with a condition. List comprehensions can have multiple conditions.The general format for a list comprehension with a if condition is this,You can also have an if..else in the comprehensionNOTE: Your iterable can be list,tuple,set,string,...etcTo make things clear consider this simple example,v and x are two lists.Now suddenly you decide I want a list new_list which has items from v but not in x. Hmmm... How to do that? Take a look below.Notice how I've used item. I just created that inside the list comprehension. Similarly repl just a variable name. Meaning **Replacement_string**Why I told all that? You'll get that in a moment.And now we come to re But re.compile()You see here we compile the regex pattern and then find a match. In the former we are just giving it as a parameter to re.match().Note:replacement_patterns --> patterns(Now patterns and replacement_patters both are aliases to your list of tuples)Both does the same however the, So coming to your confusion,This list comprehension gets all tuples from your list of tuples known as ? patternsInitially:and so on  for every tuple items. And  this is converted to:So basically your list comprehension converts the tuple(pattern,replacement_string) to tuple(compiled_re,replacement_string)
Reference:https://www.python.org/dev/peps/pep-0202/https://docs.python.org/2/tutorial/datastructures.html#list-comprehensionsTo help understand:


Answer URL
https://docs.python.org/3/library/re.html#match-objects
https://docs.python.org/3/library/re.html#re-objects
