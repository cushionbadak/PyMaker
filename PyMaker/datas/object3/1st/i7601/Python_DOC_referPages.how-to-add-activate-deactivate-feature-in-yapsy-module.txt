Natural Text
Goals:I want to add the activate/deactivate feature in my yapsy module based application and what is the right way to implement it.DescriptionI have a python application that fetches the users from different apis like Jira, Slack and many more. I have made it work as a pluginable using yapsy module.How have I implemented for now ?For now I have added the Activate/Deactivate Feature using the config file. In the config file as you can see an option called status. Reading the config if it is enable than call the run() functions else not.This is how The plugin runsInside all the plugins there are run() which get calls and the plugin runs. The plugin checks the plugin is active or not from from the config.What is the way to employ ACTIVATE/DEACTIVATE feature from the yapsy  plugin itself ,rather than the way I have implemented reading the  config and deciding to run the function or notSome description:simplePluginManager.collectPlugins() is used to collect all the plugins we have is there any way to collect the plugins that are only activated . I have gone through the yapsy documentation but could not find the right way or not clear from the documentationWith few research I found ConfigurablePluginManager can be used for this purpose but could not find some good example to start. At least an example would be great for me to start
tldr: getAllPlugins method return PlugInfo object which have _PluInfo_details attribute which is configparser.Configparser object (doc). All info from yapsy info file can be accesed there.first here is the folder structureplugin info file:here is example from this answer https://stackoverflow.com/a/5344300/1766261 modified for this question (see class method name):here is content of script.py to run the plugin based on value of status on file infowhen everything is correct, it will print This is plugin 1Note:ensure yapsy file info have correct extension. the default is yapsy-pluginensure info file contain core section which contain Name and Module. Value on Module have to match the module's name of your pluginfor easier debugging your plugin, enable logging, i.e. put following line import logging logging.basicConfig(level=logging.DEBUG) 


Answer URL
https://docs.python.org/3/library/configparser.html#configparser.ConfigParser
