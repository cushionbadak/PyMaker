Natural Text
I wrote a python script to retrieve data from a website in json format using the requests library, and then I dump it into a json file. I have written a lot of code utilizing this data and have tested it in Windows only. Recently I shifted to a Linux system, and when the same python script is executed, the order of the keys in the json file is completely different.This is the code I'm using:A lot of my other scripts depends on the ordering of the keys in this json file, so is there any way to maintain the same ordering that is used in Windows to be used in Linux as well?For example in Windows the order is "id":, "src":, "dest":, whereas in Linux its completely different. If I directly go to the Web link on my browser, it has the same ordering as the one saved in Windows. How do I retain this ordering?
Can you use collections.OrderedDict when loading json?e.gshould works, because json() method implemented on requests take the same optional arguments as json.loadsjson(**kwargs)Returns the json-encoded content of a response, if any.  Parameters **kwargs – Optional arguments that json.loads takes. Raises  ValueError – If the response body does not contain valid json.And the doc of json.loads specify:object_hook, if specified, will be called with the result of every  JSON object decoded and its return value will be used in place of the  given dict. This can be used to provide custom deserializations (e.g.  to support JSON-RPC class hinting).object_pairs_hook, if specified will be called with the result of  every JSON object decoded with an ordered list of pairs. The return  value of object_pairs_hook will be used instead of the dict. This  feature can be used to implement custom decoders that rely on the  order that the key and value pairs are decoded (for example,  collections.OrderedDict() will remember the order of insertion). If  object_hook is also defined, the object_pairs_hook takes priority.


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
https://docs.python.org/3/library/json.html#json.loads
