Natural Text
I have a large .csv that I'm trying to import into a MySQL database for a Django project. I'm using the django.db library to write raw sql statements such as:However, I keep getting the following error:After grepping the .csv for the line, I realised that the error is being caused by this character: ðŸ˜œ; though I'm sure there will be other characters throwing that error after I fix this.Running:from a terminal, returns:Since the rest of my db is in UTF-8, I tried writing a python script to re-encode it, using .encode('utf-8', 'ignore') hoping that the 'ignore' would remove any symbols that gave it trouble, but it threw:The thing is, I don't actually care about inserting 100% of the file into my db. I would rather just insert only the 'safe' lines that don't contain strange characters. So ideally, I'm looking for a way to modify my LOAD DATA LOCAL INFILE sql statement so it just skips inserting any lines that give it trouble. This is optimal, since I don't want to spend time preprocessing the data. If that isn't feasible, the next best thing is to remove any troublesome character/lines with a Python script that I could later run from my django app whenever I update my db. If all else fails, information on how to grep out any characters that aren't UTF-8 friendly that I could write a shell script around would be useful.
For ðŸ˜œ, MySQL must use CHARACTER SET utf8mb4 on the column where you will be storing it, the LOAD DATA, and on the connection.More Python notes: http://mysql.rjweb.org/doc.php/charcoll#pythonE9 does not make sense.  The hex for the UTF-8 encoding for ðŸ˜œ is F09F989C.The link on converting between character is irrelevant; only UTF-8 can be used for Emoji.
Not 100% sure if this will help but this is what I'd try:Since open() is used to open a CSV file for reading, the file will by default be decoded into unicode using the system default encoding (see locale.getpreferredencoding()). To decode a file using a different encoding, use the encoding argument of open:That's an example gathered from official docs. Have in mind that you might need to replace utf-8 with the actual file encoding, as docs say. Then you can either continue using python to push your data into DB or write a new file with a new encoding.Alternatively, this could could be another approach.


Answer URL
https://docs.python.org/3/library/csv.html#examples
https://docs.python.org/3/library/csv.html
