Natural Text
I am trying to write a function where if there's a punctuation before an alphabetical character, the function will put a space before and if the punctuation is after an alphabetical character there should be a space after it. However it should not happen so in the case of integers. EgMy following code works fine when there is one punctuation but not when the same punctuation repeats itself see my code below:The output I want is:i.e. without the space between time, the issue is because of the colon ":" being repeated I believe, can someone fix this?.The error seems to be in the below line:which replaces the whole punctuation wherever it matches, however I don't know how to rectify in this regard! 
Your problem is that replace function does the replacement for each occurrence of punctuation character. You can iterate through each character in utterance instead and construct a new target string with a proper replacement:
You can use regex:This function finds one of the characters ,.?:;!()' that's preceded or followed by a letter a-zA-Z, then inserts a space inbetween.
Check out the docs for index(), and then for find(). find():Return the lowest index in s where the substring sub is found such that sub is wholly contained in s[start:end]. Return -1 on failure. Defaults for start and end and interpretation of negative values is the same as for slices.I suspect because you're using index() to set up char_before and char_after, you're only doing that for the first instance of punctuation, leaving any other instances that exist in utterance. You never loop back through and look for more than this first instance.
This should do:utterance = utterance.replace(punctuation, "" + punctuation)EditAs I mentioned, you should go through every char in your sentence instead of every punctuation. I have included some other fixes but you will still have to deal with doubling spaces from what I have done.You would have something like this:


Answer URL
https://docs.python.org/3/howto/regex.html
