Natural Text
I have the following list of tuples in Python3.x, whereby each tuple consists of two integers in the format (start, end):This of the tuples as intervals along a real line, e.g. (1,10) is an interval from 1 to 10. There are three ways I could sort this tuple, either by the first element alone, by the second element alone, or by the first and second element. Sorting by the first element alone:which outputsand for sorting based on the second element:which outputsand for both:which outputsNotice that each of these sorted outputs are in different order. Those tuples that differ in ordering are "overlapping intervals", e.g. should (227, 234) be placed before or after (230, 231), as these interval overlap. My aim is to create a function which (1) searches the sorted output for the "overlapping intervals" and (2) then randomly permutes them amongst themselves. I can think of a function that outputs all tuples which overlap a given tuple, e.g.which works as followsHowever, in order to achieve goal (1), I need to write a function which finds all overlapping tuples in list_tuple.What I've tried: I originally thought I could search the original tuple with itself, e.g. This is obviously wrong, as the output is the original tuple itself. The bigger problem with is that I cannot see how to execute goal (2). I must only shuffle/re-order tuples which overlap with one another. Let's say I had a list of overlapping tuples found from (1):The following list comprehension failsgivingIt's also important I do not shuffle (6491, 7000) with (211, 233), as these are not related. How do I find the overlapping intervals in the list of tuples, and then individually shuffle these tuples which overlap with one another. 
Note quite sure I understand what you are asking for regarding the shuffle. But you can use the itertools recipe pairwise to pair up the elements and then use itertools.groupby(), to group up the sequential overlaps, i.e. split (211, 233) from (6491, 7000):You could unpairwise these lists with:So:
Extending the answer from @AChampion, it should be easy to shuffle your list of lists of overlapping tuples to get what you want:Note that random.shuffle is in place.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
