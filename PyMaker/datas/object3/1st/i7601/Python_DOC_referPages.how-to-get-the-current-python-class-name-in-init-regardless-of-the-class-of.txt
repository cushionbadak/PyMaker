Natural Text
I have a number of classes with code like this. Each __init__ starts a thread and a logger with the name of the class. How do I get the name of the current class in its own definition, as a string, inside __init__? Note that self may not be an instance of the current class, so the following is not quite foolproof.Update:To clarify:I want the name of the class being defined, not the class of theobject passed in. I don't want to hard code the name of the class.I want to make it easy to copy/paste an example from one script toanother, and the fewer mentions of the unique class name, the better.(Inheritance isn't really efficient, as there are enough customdifferences to make it awkward. But accidentally leaving in the nameof the wrong class is a hard bug to find.)
In Python 3 this is pretty straight forward, we can use the __class__ cell variable to get the current class.In Python 2 we can achieve something similar by injecting class's name in functions globals scope using a metaclass and later cleaning it up.Output:To get the __class__ variable as the class object itself we can make few changes:Now output would be:
You can retrieve the name of the class of an an object thus:Example:Result:


Answer URL
https://docs.python.org/3/reference/datamodel.html#creating-the-class-object
