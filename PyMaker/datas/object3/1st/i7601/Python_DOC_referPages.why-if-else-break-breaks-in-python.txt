Natural Text
I am trying to use if-else expression which is supposed to break the loop if the if condition fails, but getting an invalid syntax error.Sample code:Of course, if I write in the traditional way (not using the one liner) it works.Please let me know what is wrong in using the break command after the else keyword.
If I run this, I get the following error:This is becauseis a ternary operator. Ternary operators are no if statements. These work with syntax:It is equivalent to a "virtual function":So that means the part next to the else should be an expression. break is not an expression, it is a statement. So Python does not expect that. You can not return a break.In python-2.x, print was not a function either. So this would error with the print statement. In python-2.x print was a keyword.You can rewrite your code to:You can read more about this in the documentation and PEP-308.
If is an expression, break similar to return is a statement. You can't use two statements in a single sentence (unless you use a semicolon which is ugly). I know it would have been really cool if we can do that, but alas that's the way it is.
To put it in slightly simpler terms, you're misusing the 'one-line if statement' (ternary operator). It always evaluates to an expression (i.e., a value). That is,evaluates to <expr1> if <condition> is True, and to <expr2> if <condition> is False. This resulting value can then be used like any Python value, for example:Of course, the parentheses are completely unnecessary (even discouraged), but hopefully are useful for understanding the meaning of that line.Therefore,tries to evaluate print(a) (which, by the definition of print() in Python 3, always returns None â€“ perfectly valid, but probably not what you usually want) and then break, which does not evaluate to anything because it is a statement (action), not an expression (value), hence the invalid syntax error.Hence, if you want to execute one of two statements depending on a condition, you really need the multi-line solution proposed by Willem Van Onsem. There may be hacky ways to do it in one line, but multiple lines is the usual solution for something like this in Python.


Answer URL
https://docs.python.org/3/reference/expressions.html#conditional-expressions
https://docs.python.org/3/reference/expressions.html#conditional-expressions
