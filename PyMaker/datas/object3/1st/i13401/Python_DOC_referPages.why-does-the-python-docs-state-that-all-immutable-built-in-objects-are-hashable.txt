Natural Text
On the Glossary-Page under the section "hashable" of the official Python Documentation visitors can read thatAn object is hashable if it has a hash value which never changes during its lifetime ... All of Python’s immutable built-in objects are hashable, while no mutable containers (such as lists or dictionaries) are not...This means that passing an object of theint, float, long, complex,str,bytes,tuple orfrozensetclass to the build-in hash() method must return the supposed hash-value.The problem is that tuples can contain unhashable objects (such as lists) and therefor some tuples are not hashable:Create (valid) tuple consisting of hashable (ints and string) and unhashable (list) data types.Hashing this tuple fails ...... although the object to hash is an immutable built-in type So, why does the Python Docs state now that "all immutable built-in objects are hashable", although especially the tuple type can contain unhashable types?
I don't know too much about Python's hashing, but to me it looks like you're just nitpicking the text.All of Python’s immutable built-in objects are hashableThat's what they stated and that's true: you can hash a tuple such as (3, 3, 2) just fine, tuples are hashable.However, if you put an unhashable list into a tuple, it can no longer be hashed because it contains an unhashable object. This doesn't mean that tuples are unhashable, but lists are, and thus the tuple which contains a list can no longer be hashed.Placing non-compostable garbage into a compostable garbage bag doesn't make the bag non-compostable.


Answer URL
https://docs.python.org/3/glossary.html
https://docs.python.org/3/glossary.html#term-hashable
