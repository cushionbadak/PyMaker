Natural Text
I have a boiler platey class that delegates some actions to a reference class. It looks like this:This is the refClass:I'd like to use Python Metaprogramming to make this more elegant and readable, but I'm not sure how. I've heard of setattr and getattr, and I think I could do something likeAnd then I know I need to do this from somewhere, I guess:I just can't totally grasp this concept. I understand the basics about not repeating code, and generating the methods with a for loop with functional programming, but then I don't know how to call this methods from elsewhere. Heeeelp!
Python already includes support for generalized delegation to a contained class. Just change the definition of MyClass to:When defined, __getattr__ is called on the instance with the name of the accessed attribute any time an attribute is not found on the instance itself. You then delegate to the contained object by calling getattr to look up the attribute on the contained object and return it. This costs a little each time to do the dynamic lookup, so if you want to avoid it, you can lazily cache attributes when they're first requested by __getattr__, so subsequent access is direct:
Personally, for delegating things I usually do something like that:This will create all delegate methods you need :)For some explanations, the delegate function here just create a "proxy" function which will act as a class method (see the self argument?) and will pass all arguments given to it to the referenced object's method with the args and kwargs arguments (see *args and **kwargs? for more informations about these arguments)You can create this with a list too, but I prefer the first because it's more explicit for me :)


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getattr__
https://docs.python.org/3/library/functions.html#getattr
https://docs.python.org/3/whatsnew/3.4.html#pep-442-safe-object-finalization
