Natural Text
I am trying to parse a large sample of text files with regular expressions (RE). I am trying to extract from these files the part of the text which contains 'vu' and ends with a newline '\n'. Patterns differ from one file to another, so I tried to look for combinations of RE in my files using the OR operator. However, I did not find a way to automate my code so that the re.findall() function looks for a combination of RE.Here is an example of how I tried to tackle this issue, but apparently I still can not evaluate both my regular expressions and the OR operator in re.findall():Note : I circumvented this problem by looking for each pattern in a for loop but my code would run  faster if I could just use re.findall() once.
Python regular expressions uses the | operator for alternation.More information: https://docs.python.org/3/library/re.htmlThe individual patterns look really messy, so I don't know what is a mistake, and what is intentional. I am guessing you are looking for the word "vu" in a few different contexts.Always use Python raw strings for regular expressions, prefixed with r (r'pattern here'). It allows you to use \ in a pattern without python trying to interpret it as a string escape. It is passed directly to the regex engine. (ref)Use \s to match white-space (spaces and line-breaks).Since you already have several alternative patterns, don't make ( and ) optional. It can result in catastrophic backtracking, which can make matching large strings really slow.\(? → \(\)? → \){1} doesn't do anything. It just repeats the previous sub-pattern once, which is the same as not specifying anything.\br is invalid. It is interpreted as \b (ASCII bell-character) + the letter r.You have a quote character (') at the beginning of your text-string. Either you intend ^ to match the start of any line, or the ' is a copy/paste error.Some errors when combining the patterns:
Thank you for your tips. My regular expressions were a little clumsy in my first post (I changed them hoping the question would be more understandable). I managed to capture the OR operator '|' thanks to 're.compile' and the code works fine!


Answer URL
https://docs.python.org/3/library/re.html
https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
