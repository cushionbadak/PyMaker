Natural Text
This came up in the context of answering another question today.Assume the following files, where the comments denote the filenames:With this code, python -c "import level1" works fine (in both 2.7 and 3.4) as-is.  But change the answer to anything besides 42, and it fails with AttributeError: 'module' object has no attribute 'level2' at the designated location.It appears that from/import can import a sub-module of a package and pull variables out of its namespace before all the parent namespaces are set up, but (obviously) the parent namespaces must be set up before the attributes of sub-namespaces can be traversed via normal attribute accesses.Sometimes, though, the namespace is set up "well enough" for the import to work.  For example, the code below, with the top level stripped off, always works with python -c "import level2", even though we still haven't finished initializing the level2 namespace when we import level2.a from level2.b.EDITIt appears that import x.y.z will insert a reference to z into y, but will not insert a reference to y into x.  For example, when I change level1/level2/b.py from my first example:I get the following results before the traceback:However, if, right after the second call to dump(), I add the line:then it will not fail, because I have bound level2 into level1 before accessing it via attribute lookup.  However, it seems that if the interpreter can bind a into level1 on that import, it might also be able to do the binding of level2 into level in exactly the same fashion.Is there a good reason for why only the lowest-level package is updated during the import statement, or is it a bug (or perhaps, rather, a feature that was added for a single package that should be extended to nested packages)?NOTE According to the Python documentation, When a submodule is loaded using any mechanism ... a binding is placed in the parent moduleâ€™s namespace to the submodule object..I believe this happens.  But not soon enough in all cases.  Also, the documentation for it may be relatively new.
I have filed an issue against Python.  The text of this issue is reproduced below:PEP 8 recommends absolute imports over relative imports, and section 5.4.2 of the import documentation says that an import will cause a binding to be placed in the imported module's parent's namespace.However, since (with all current Python versions) this binding is not made until after the module body has been executed, there are cases where relative imports will work fine but absolute imports will fail.  Consider the simple case of these five files:This will fail in a fashion that may be very surprising to the uninitiated.  It will not fail on any of the import statements; rather it will fail with an AttributeError on the assignment statement in x.y.a, because the import of y has not yet finished, so y has not yet been bound into x.This could conceivably be fixed in the import machinery by performing the binding before performing the exec.  Whether it can be done cleanly, so as not to cause compatibility issues with existing loaders, is a question for core maintainers.But if it is decided that the current behavior is acceptable, then at a minimum both the PEP 8 and the import documentation should have an explanation of this corner case and how it can be solved with relative imports.


Answer URL
https://docs.python.org/3/reference/import.html#submodules
