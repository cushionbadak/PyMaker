Natural Text
I'm trying to find all *.txt files in a directory with glob(). In some cases, glob.glob('some\path\*.txt') gives an empty string, despite existing files in the given directories. This is especially true, if path is all lower-case or numeric. As a minimal example I have two folders a and A on my C: drive both holding one Test.txt file.yields If this is by design, is there any other directory name, that leads to such unexpected behaviour?(I'm working on win 7, with Python 2.7.10 (32bit))
The problem is that \a has a special meaning in string literals (bell char).Just double backslashes when inserting paths in string literals (i.e. use "C:\\a\\*.txt").Python is different from C because when you use backslash with a character that doesn't have a special meaning (e.g. "\s") Python keeps both the backslash and the letter (in C instead you would get just the "s").This sometimes hides the issue because things just work anyway even with a single backslash (depending on what is the first letter of the directory name) ...
I personally avoid using double-backslashes in Windows and just use Python's handy raw-string format. Just change your code to the following and you won't have to escape the backslashes:Notice the r at the beginning of the string.As already mentioned, the \a is a special character in Python. Here's a link to a list of Python's string literals:https://docs.python.org/2/reference/lexical_analysis.html#string-literals


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
