Natural Text
Despite the many related questions, I can't find any that match my problem.  I'd like to change a binary string (for example, "0110100001101001") into a byte array (same example, b"hi").I tried this:  but I got:What's the correct way to do this in Python 3?
Here's an example of doing it the first way that Patrick mentioned: convert the bitstring to an int and take 8 bits at a time. The natural way to do that generates the bytes in reverse order. To get the bytes back into the proper order I use extended slice notation on the bytearray with a step of -1: b[::-1].Clearly, Patrick's second way is more compact. :)However, there's a better way to do this in Python 3: use the int.to_bytes method:
It returns bytes object that is an immutable sequence of bytes. If you want to get a bytearray -- a mutable sequence of bytes -- then just call bytearray(b'hi').
You have to either convert it to an int and take 8 bits at a time, or chop it into 8 byte long strings and then convert each of them into ints.  In Python 3, as PM 2Ring and J.F Sebastian's answers show, the to_bytes() method of int allows you to do the first method very efficiently.  This is not available in Python 2, so for people stuck with that, the second method may be more efficient.  Here is an example:To break this down, the range statement starts at index 0, and gives us indices into the source string, but advances 8 indices at a time.  Since s is 16 characters long, it will give us two indices:(We use list() here to show the values that will be retrieved from the range iterator in Python 3.)We can then build on this to break the string apart by taking slices of it that are 8 characters long:Then we can convert each of those into integers, base 2:And finally, we wrap the whole thing in bytes() to get the answer:


Answer URL
https://docs.python.org/3/library/stdtypes.html#int.to_bytes
