Natural Text
I can check if python list or dictionary are empty or not like thisIf I try to do this with my class object, i.e checking if my object attributes are non-empty by typing if my_object: this always evaluate to TrueI can write a function specifically to check if my object attributes are non-empty and then call if obj1.is_attributes_empty():, but I am more interested in knowing how if evaluates the standard data-types like list and dict to True or False depending on the items they contain or are empty. If I want to achieve this functionality with my class object, what methods do I need to override or make changes to?
You need to implement the __nonzero__ method (or __bool__ for Python3)https://docs.python.org/2/reference/datamodel.html#object.nonzeroPython also checks the __len__ method for truthiness, but that doesn't seem to make sense for your example.If you have a lot of attributes to check you may prefer to
It is given in the documentation of Truth value testing for Python 2.x - instances of user-defined classes, if the class defines a __nonzero__() or __len__() method, when that method returns the integer zero or bool value False.For Python 3.x -instances of user-defined classes, if the class defines a __bool__() or __len__() method, when that method returns the integer zero or bool value False.According to the definition of your class, if maybe meaningful to define __len__() method, which returns the sum of length of the list as well as the dict.Then this method would be called to determine whether to interpret the object as True or False in boolean context. Example -Demo -
If your class defines (on Py2) __nonzero__, (on Py3) __bool__ or (on either) __len__, then that will be used to evaluate the "truthiness" of objects of that class (if only __len__ is defined, an instance is truthy when it returns non-zero, and falsy when it returns zero). So, for example, to make your class simply report if it's attributes are non-empty in either Py2 or Py3, you'd add:Alternatively, if your class instances have meaningful lengths, you define:and get boolean behavior by side-effect of supporting len(myobject).
Combining the answers for using any() and __bool__(self), the following code will allow you to check for all of the attributes using list comprehension.This code snippet will print nothing as expected.
As many answers and duplicate votes suggest, you need to override the __nonzero__ method. However, from your comment, you also want to avoid enumerating the attributes explicitly. This can be done with a trick like this:This handles all public attributes that are assigned or modified later on:Attribute deletion is not handled properly, for that you need to override __delattr__.


Answer URL
https://docs.python.org/3/library/stdtypes.html#truth-value-testing
https://docs.python.org/3/reference/datamodel.html#object.__bool__
https://docs.python.org/3/reference/datamodel.html#object.__len__
