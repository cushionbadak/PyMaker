Natural Text
I am writting some tests for our application and am not sure I am testing the correct thing here. This is my test.I want to be sure that a reservation extension cannot be created if it is of a different resource, so this line should fail in the try block:Does this:Assert that the reservation creation resulted in a False value? Or am I understanding the assert matchers incorrectly. I have tried going over the documentation but I could not see any analogous example of something like this in a try catch block that was obvious to me.Help is appreciated.
Function signature from python docsCheck if given expr is True. In case that expr is False, it will raise an error using the provided message (msg)So within your try block, if any exception is not raised, self.assertTrue(False, "Should not create reservation") will throw an error because False is not TrueIf an exception is raised, then your code will enter into Except block and self.assertTrue(True, "Not authorized") will not raise any error, because True is True. So, if you want to throw an exception, if any exception occurs, move self.assertTrue(False, "Should not create reservation") to Except block
Though not a direct answer to the title, this should answer your actual problem.You should never catch Exception (unless you re-reraise it after).When you handle exceptions, you must specify the exact error you want to catch. For instance, the code that calls create_reservation might catch a ReservationError exception, that you defined.If you want this code to work, you must then test and make sure that create_reservation raises the correct error. So even in the test, you still must use the correct error.If you need to test some code raises an exception, use the appropriate assertion, which is assertRaises. It can be used in two ways. Either as a call:or you may use it as a context manager, using the with keyword (requires python 2.7 or python 3.1 or newer):Both example will run create_reservation, check that it raises an exception, pass if it does and it is of the correct type, fail otherwise.
I probably wouldn't set up my test like that. What you want to do is determine what exactly is the behaviour of your method and test accordingly.So, if you are testing a failure case, and let us say for example, your method returns something like "reservation failed" if it fails, then you should do something like this instead:


Answer URL
https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises
