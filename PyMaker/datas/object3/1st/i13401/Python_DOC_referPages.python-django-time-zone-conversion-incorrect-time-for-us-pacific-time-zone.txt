Natural Text
While I read just about every post related to timezone conversions I'm still having some issues and my converted time is incorrectsettings.pyviews.pytemplate.htmlFor some reason, the converted time is wrong and 15 hours ahead of the Pacific Time and 8 hours ahead of the UTC time.
timezone.localize() should be used for naive datetime objects (objects with no timezone of their own). The timezone is attached to that datetime as if the date and time are correct for that timezone. So in your case you 'localised' UTC as if it is your local time without DST, shifting it 8 hours in the wrong direction.You used a UTC timestamp however, so you need to attach the UTC timezone to that, then move the timestamp to the desired timezone:Note that the utc value is now a datetime object with timezone, so you can then use the datetime.astimezone() method to produce a value in the desired target timezone from it.Demo:Now the produced datetime is properly 5 hours removed from UTC.If you are outputting these values into a Django template, however, note that Django will also transform the timezone. See the Django timezone documentation, specifically the section on using aware datetime objects in templates:When you enable time zone support, Django converts aware datetime objects to the current time zone when they’re rendered in templates. This behaves very much like format localization.and from the current time zone section:You should set the current time zone to the end user’s actual time zone with activate(). Otherwise, the default time zone is used.It then doesn't matter what timezone you moved the datetime object to; it'll use whatever is the current timezone to display the value. You generally want to use aware datetime objects in the UTC timezone, then use activate() to switch what timezone everything is displayed in.So in Django, just use timezone.now() everywhere, and let the templating system worry about converting that to a given timezone.
To get the current time in django, use timezone.now():If instance.timezone refers to the same timezone as timezone.get_current_timezone() (default is TIME_ZONE) then it is all you need (timezone.now() returns an aware datetime object in UTC (if USE_TZ=True) that is converted during rendering to the current time zone).Otherwise, you could call timezone.activate(instance.timezone) to set the current time zone.If you want (you don't need to) you can convert the timezones explicitly:Outside django code, you could get the current time in a given timezone by passing the tzinfo explicitly:It works even during ambiguous local times.To convert an existing naive datetime object that represents time in a given pytz timezone:This code raises an exception for ambiguous/non-existing times in instance time zone (e.g. during DST transitions). If it is ok to return an imprecise result in some cases instead of an exception then don't pass is_dst=None:For more details about is_dst, see "Can I just always set is_dst=True?" section.


Answer URL
https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone
