Natural Text
The assignment is about how to deal with duplicates in a dictionary.They ask to return a list of keys that maps the values that are unique in a dictionary and sort them in increasing order.This is my code:This gives me wrong key values:This is correct:What is wrong? I have used several tools online to visualize what's going on, but I still don't get it.
The problem with your function is that you put a key in the unique set as soon as its value is different from one other value. You have to check against all others! For the same reason, you put the keys into unique multiple times, hence the need for s.You can fix your method like this:But you can also make it way shorter using a list comprehension and the all builtin function.But this still has quadratic complexity, as you have to compare each value with each other. If your values are hashable (and only then), you can use a Counter, making the whole thing a lot more efficient, as you just have to look up the value in another dictionary.
This should give you a sorted list of keys, for which values in the dictionary appear only once
Use a Counter dict to count the occurrences and keep values that have only appear once:The Counter dict counts the frequency of each subelement in your dict values, if v == 1 is True the value was only seen once.Output:If you want the keys associated with the unique values and not the actual values:
If you could count to establish that a value occurs once and only once in the entire dictionary, that is, it is unique, you can then easily collect the associated key in a list, as follows:
Since we're giving answers away...This method avoids having to use any ifs.Which could be made to a one liner:


Answer URL
https://docs.python.org/3/glossary.html
https://docs.python.org/3/library/collections.html#collections.Counter
