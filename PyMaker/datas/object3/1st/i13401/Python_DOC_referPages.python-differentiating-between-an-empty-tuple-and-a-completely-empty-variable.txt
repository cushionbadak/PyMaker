Natural Text
I'm attempting to use __getattr__ to handle undefined method calls on an object.  I want the end result to act much like the AUTOLOAD function in Perl.This can be done with the following code.test.py:Object.py:output:The problem is,  I only want this to work for method calls.  If it attempts to access an attribute that doesn't exist I want the script to throw an exception.This means that when I try and access the "thing" attribute I want this to fail, but it should work in the other two situations.What I think could work:If I could find a way for Python to differentiate an empty tuple () and a completely empty variable this might be doable.  As you can see, the object.thing call did not print anything because the args variable did not contain anything.Is there a way to trap on this in Python and raise an exception if the args variable is COMPLETELY empty and is not just an empty tuple?
As a hacky AUTOLOAD proxy, you can do something like:Then use like:First define a default function:Then:
Use len(args) to count the number of arguments:
If args is completely empty, then So you just need to compare It will return true if args is an empty tuple, false if args is None, since 


Answer URL
https://docs.python.org/3/library/stdtypes.html#truth
