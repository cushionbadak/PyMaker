Natural Text
In Python, I need to format numbers so they align on the decimal point, like so:Is there a straighforward way to do this?
I don't think there's a straight-forward way to do it, since you need to know the position of the decimal point in all the numbers before you start printing them. (I just had a look at Caramiriel's link, and some of the links from that page, but I couldn't find anything particularly applicable to this case). So it looks like you have to do some string-based inspection & manipulation of the numbers in the list. Eg,outputIf you want to handle a list of floats with some plain ints mixed in, then this approach gets a bit messier.outputupdateAs Mark Ransom notes in the comments, we can simplify handling ints by using .split:
If you know the precision (digits after the decimal point) that you need, and you don't mind having some trailing zeros when whole numbers are used, you could use the new f-string in Python 3.6 (PEP498):Prints:
Fix for decimal placesCorrected to take width into account on request:EDIT: If you want to include integers
If you can accept some leading zero you can use this:If you prefer without leading zero you could use regular expression this way:Decimal alignment formatting in PythonHowever the best solution should be to format separately the string before and after the decimal point (the numstring assignment):Then we can split the string at the decimal point as the whole and decimal part. If the the decimal part is missing we assign it to 0.Note: with this solution there is need to convert the number to string before the format operation.This is the output:EDIT: I think the solution of FeebleOldMan is better than mine, you should choose that.
Using the recipe in Python documentation: https://docs.python.org/2/library/decimal.html#recipesYou'll obtain:
Here's how I did it!I like the other solutions, but needed something specific and thought why not share!
You may use the Python [decimal][1] type.There is a recipe used to format monetary values.Why decimal type: avoid rounding problems, handle signifiant digits correctly...
I'm terribly late to this, but you can also use math, specifically the properties of logarithms, to figure out the amount of spaces you need to pad all numbers to the proper decimal position.The result is:
Yes there are many direct ways by which you can align floating point figures about decimal point. Below given 2 line code is one example`In [20]: floating=([.022,12.645,544.5645,.54646,-554.56,-.2215,-546.5446])In [21]: for xxx in floating: print "{0: 10.4f}".format(xxx)`Here in {0: 10.4f} 0 is the dimension of each floating point entries. After colon the space is for the optional minus sign. 10 is for number of places before decimal and 4 is for number of places after decimal.Here is my out put as a JPG result


Answer URL
https://docs.python.org/3/library/decimal.html#recipes
