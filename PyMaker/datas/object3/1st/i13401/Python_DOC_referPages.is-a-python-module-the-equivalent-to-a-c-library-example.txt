Natural Text
Im New to Python coming form a C++  background, Im getting used to it by writing some programs, and this question came to my mind after reading this itertools python module Along the help of some other users in this page, we ended up using the permutations and combinations function in this program As far as i understand Im calling the functions permutations and combinations from the library (module) itertoolsWhere bot functions are described as the 2 following blocks of code, citing from the itertools page combinations can be described as The code for permutations() can be also expressed as a subsequence of product(), filtered to exclude entries with repeated elements (those from the same position in the input pool):So is its possible for me to just take out both functions and apply them to my code without having the need to import them from itertools?Are the modules actually libraries?Can i do a product fuction (Used in the permutations fuction) without a math module?How can i actually implement those lines in my main code (without using the itertools module, an example might be useful ) ?
Are the modules actually libraries?Yes, you can think of them that way. There isn't a 1:1 correspondence between the C notion of library (which is a linking and loading construct) and Python modules and packages (which are directly supported by the language, not just the runtime environment). That said, they serve similar purposes of separating code bases along functional lines, allowing some components to be compiled (and tested, distributed, etc.) independent of the others. Packages (which are "modules plus") also allow a hierarchical structure, such as os.path, whereas C tends to have a much flatter namespace for its libraries.Interesting side-note: All Python programs are usable as modules. That is why you often see if __name__ == '__main__': towards the bottom, specifying what to run if and when the code is run like a main program. That section will not run when the code is imported by some other program.Can i do a product fuction (Used in the permutations fuction) without a math module?Yes, the product from itertools is a combinatorial concept (the "Cartesian product") and not a math concept. from itertools import product is sufficient; no math functions are required. How can i actually implement those lines in my main code (without using the itertools module, an example might be useful ) ?Not clear what you want to do there. In general, you'd have a line like:In your code (your main module, or whatever module uses those functions). Or, if you wish to copy and paste the definition of those functions into your code, you may do so and only import the product function they depend on. There is no great advantage to this cut and paste, however. If you want just the combinations and permutations functions from itertools, feel free to import them directly, without cut and paste.
Yes, you could write the equivalent in your own code, but note that 'product' is the itertools version, not anything from the math module.But also note that the reason they say "equivalent" is that the itertools module is written in C.  So in this particular instance, you would take a big performance hit if you used the equivalent Python.Some of the standard library and many add-on packages are pure Python, and you can cut and paste from there, as well.To use the equivalent example code in your own code, just cut and paste.  For example, here I took the product() code and just executed it in the interpreter:The interpreter (or an IDE) is great for simply trying stuff like this out.
While the implementation of python modules is very different from a C library, they largely play the same role.A c include directive replaces the include with source code of the included file, which is then compiled into the source. A python module on the other hand, is dynamically loaded at run time, and can actually be accessed as an object (like a variable with global scope). One big upside of this difference is that function and classes imported from a module are name spaced, meaning there is little risk of name collisions.Most of the time, you use modules much like libraries.Yes, you could just copy paste library functions into your source, but there is really no reason to. It won't meaningfully improve performance, and will make your code less portable, maintainable, and readable. We use modules for a reason.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.permutations
