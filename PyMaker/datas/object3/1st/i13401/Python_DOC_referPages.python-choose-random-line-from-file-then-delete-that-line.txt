Natural Text
I'm new to Python (in that I learned it through a CodeAcademy course) and could use some help with figuring this out.I have a file, 'TestingDeleteLines.txt', that's about 300 lines of text. Right now, I'm trying to get it to print me 10 random lines from that file, then delete those lines. So if my file has 10 lines:CarrotBananaStrawberryCanteloupeBlueberrySnacksAppleRaspberryPapayaWatermelonI need it to randomly pick out from those lines, tell me it's randomly picked blueberry, carrot, watermelon, and banana, and then delete those lines.The issue is, when Python reads a file, it reads that file and once it gets to the end, it won't go back and delete the lines. My current thinking was that I could write the lines to a list, then reopen the file, match the list to the text file, and if it finds a match, delete the lines. My current problem is twofold:It's duplicating the random elements. If it picks a line, I need it to not pick that same line again. However, using random.sample doesn't seem to work, as I need those lines separated out when I later use each line to append to a URL.I don't feel like my logic (write to array->find matches in text file->delete) is the most ideal logic. Is there a better way to write this?
I have a file, 'TestingDeleteLines.txt', that's about 300 lines of text. Right now, I'm trying to get it to print me 10 random lines from that file, then delete those lines.It is O(n**2) algorithm that can be improved if necessary (you don't need it for a tiny file such as your input)
Point is: you dont "delete" from a file, but rewrite the whole file (or another one) with new content. The canonical way is to read the original file line by line, write back the lines you want to keep to a temporary file, then replace the old file with the new one.
What about list.pop - it gives you the item and update the list in one step.
To choose a random line from a file, you could use a space efficient single-pass reservoir-sampling algorithm. To delete that line, you could print everything except the chosen line:where select_random_it() implements the reservoir-sampling algorithm:To print k random lines from a file and delete them:where reservoir_sample() uses the same algorithm as select_random_it() but allows to choose k items instead of one:and delete_lines() utility function deletes chosen random lines from the file:reservoir_sample(), delete_lines() funciton do not load the whole file into memory and therefore they can work for arbitrary large files.
Lets assume you have a list of lines from your file stored in itemsFrom here you would overwrite your previous text file with the contents of items joining with your preferred line ending \r\n or \n. readlines() does not strip line endings so if you use that method, you do not need to add your own line endings.
Maybe you could try generating 10 random numbers from 0 to 300 using and then delete from the lines array by making a copy with list comprehensions:And then writing lines back to 'TestingDeleteLines.txt'.To see why the copy code above works, this post might be helpful:Remove items from a list while iteratingEDIT: To get the lines at the randomly generated indices, simply do:Then actualLines contians the actual line text of the randomly generated line indices.EDIT: Or even better, use a list comrehension:


Answer URL
https://docs.python.org/3/library/io.html#io.TextIOBase.seek
