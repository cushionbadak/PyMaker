Natural Text
I'm trying to use Python like one would do in Matlab. Basically I have some Python code for which I have run and it has generated some global variables. Say, a = 5b = 3I would like to save these to a .mat file , that will be openable by Matlab. The goal is to be able to see the global variables in Matlab, just as one would when saving to a .mat file in Matlab. I've seen examples where savemat is used to save dictionaries/arrays, but not where it saves the global variables. How may I do so? Is this something that scipy just cannot do? Thanks. 
You most probably don't want to save globals, but locals (though the variables are local to the interpreter). You can access and update them through the locals() and globals() functions.From there you can use your preferred method of storage, such as pickle, marshal, json or others, depending on which level of security you want and which object types you have at hand. However, be wary that messing with those functions may get you into some trouble, since they also report functions and some internal variables.However, if you intend to (like Matlab) just load and store variables through the GUI, you may want to check the Spyder IDE (GitHub project). It is a very nice IDE, geared toward scientific usage and very similar (in appearance) to Matlab's old interface. Most importantly, it offers a tab/pane named "Variable explorer" which tracks what you want to store, and have both a "Save data as..." and "Import data" buttons and the "Save data as..." dialog supports saving to Spyder data files (.spydata), Matlab files (.mat) and HDF5 (*.h5).If you want to do this programatically, you may check how Spyder does it.
The problem with saving all global variables is that you're saving all global variables. You're going to be saving things like imported modules and everything else in the global namespace.  Many of those things cannot be converted to a format matlab can handle.  For example, how should the module scipy.io be saved to a .mat file?  It's a global variable too!That having been said, you can retrieve a dict of the global variables by calling globals() and the local variables by calling locals().In rare cases, you could pass that directly to scipy.io.savemat.  Normally, you'd need to filter it down to the variables you want to save.That having been said, there are cases where scipy.io.savemat('filename.mat', locals()) might make sense.  It's still far better to be explicit about what you're saving, but there are cases where dumping all local variables could be handy.For example:
In Python I can save variables, integers and arrays, by name:And get them in a Octave session When I try the same with io.savemat('test.mat', locals()) I get an error about the impossibility of saving a class definition.  The Python environment (globals) contains all kinds of things that are not compatible with a MATLAB/Octave session - things like classes, functions, modules.  When working across languages you want to focus on the variables that are compatible.


Answer URL
https://docs.python.org/3/library/pickle.html
https://docs.python.org/3/library/marshal.html
https://docs.python.org/3/library/json.html
