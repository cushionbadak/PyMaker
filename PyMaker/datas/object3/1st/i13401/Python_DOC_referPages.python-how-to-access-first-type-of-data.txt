Natural Text
In this dictionary, I can access the number 1000000000000 by using NumberTextSet3["trillion"] .But how would I access the the last word in the dictionary, maybe like: NumberTextSet3[-1] and have it return "trillion"?
There is no last word in a dictionary.To check it, try,You will get different ordered result in different time.You can slightly modify your data structure to [("ten",10),("hundred",100),...]Now, you can use it with index.For example,Output: You can use an OrderedDict too
I would use a OrderedDict like this:
A dictionary is not ordered so it has no such thing as "first" or "last" entry. You can access a specific key as follows:or:If you want to access the list of keys you can do:which return on my computer: ['billion', 'trillion', 'ten', 'thousand', 'million', 'hundred']and as you can see - there is no "order" here.
You would need to extract all of the entries and then sort them:Giving:If you wanted to do the reverse lookup, then you could create the inverse mapping as follows, and use that:Giving: 
This can work although it's not guaranteed since dictionaries are not ordered.Edit: You may want to use a list of tuples (below) instead; in which case the same technique would work since items() gives the dict in key/value pairs [tuple].
Python dictionaries have no ordering guarantee. Implementation-wise this stems from the fact that the dictionary is a hash map and the hashmap has its key ordering determined by the hash function (which is supposed to be pseudo-random).So, while you can access the first and last items in your dictionary (NumberTextSet3.items()[0] and NumberTextSet3.items()[-1], respectively) these probably do not correspond the order in which you created the dictionary.However, the standard library provides collections.OrderedDict, which preserves insertion order, henceBe aware of the fact that I change the dictionary literal to a tuple list. Using a dictionary literal would not work, since this would create a temporary, unordered dictionary and than pass that to OrderedDict, which would freeze the (quasi-random) order.


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
