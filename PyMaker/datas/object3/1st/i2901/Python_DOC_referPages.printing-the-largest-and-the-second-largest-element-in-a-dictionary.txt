Natural Text
I've written a function that takes a string as an input and hands over a dictionary that indicates the most occurring elements/characters. Part 1 - Just finding the most occurring characterBut then I got more curious, and I wanted to print the most occurring and second most occurring element in the dictionary. Thus, I've written something like this:Part 2 - Alright, now let's find the second most occurring characterBig OI've written the Big O of each operation next to it, and when I look at it, I really don't like what I've written. I mean, O(N^2) sounds too expensive and inefficient. Would you be willing to illuminate me on better ways of writing this? Please bear in mind that I'm not looking for a method that utilizes  any libraries.
Here is a simple algorithm that does it in O(n):This prints {'second-most-occurring': 'b', 'most-occurring': 'd'}Note that I added an extra 'b' to string in order to make that the second most frequent letter
Use heapq.nlargest, like this:And using no libraries, assuming your function returns the same thing as Counter:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter.most_common
