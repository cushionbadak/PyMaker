Natural Text
Say if there's a class attribute that is calculated depending on another class attribute:And then in a child class I want to update the first class attribute to cause a change in the second one, without re-defining the second. e.g:What I would like to happen is:However this isn't the case since attr2 gets calculated before attr1 is re-defined. Is there a way to obtain this behaviour without redefining the second attribute?(My particular use case is defining WTForms with Field attributes (format, choices, etc) that are derived from the Form class attributes, so I can subclass a base Form and change these attributes without having to re-define the entire Field.)
There's no way to do this directly.For instance attributes, rather than class attributes, you can simulate it pretty easily by using @property. Either calculate attr2 on the fly every time you ask for it:(possibly adding a cache if calculation is expensive), or recalculate attr2 whenever anyone modifies attr1:That only works because property creates a descriptor that you store in the class object, rather than the instance, so when someone looks up twoa (in the first example) or a (in the second) on a Spam instance, it falls back to finding the descriptor on the class.If you want the first one for a class attribute, it works as-is when looking up values on instances, but not on the class itself (which, unfortunately, is what you're doing in your examples).And if you need the second one, it won't work at all.For example:If that's not a problem, great. But if it is, you need to put the descriptor on the class's classâ€”that is, a metaclass:For a simple case like twoa (or your attr2), dragging in a metaclass is horrible overkill.But for a case where there's a good chance you're already dragging in custom metaclasses, like a complex forms-and-fields system, it might be appropriate.
You can use a @classproperty descriptor (similar to @property) if you don't want to use metaclasses.Here's a simple implementation of a classproperty decoratorAnd some sample usage:And usage of that:
Well, you can do those calculations in metaclass' __new__ method:The output will be:


Answer URL
https://docs.python.org/3/library/functions.html#property
