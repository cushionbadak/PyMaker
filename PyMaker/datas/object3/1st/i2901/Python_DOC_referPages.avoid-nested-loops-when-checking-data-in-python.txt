Natural Text
I have two lists of dictionaries:And now for each dict_x in dict_list1, I want to know if there is a dict_y on dict_list2 that contains every key,value from dict_x.I cannot think of another way of doing this other then:
dict views can perform quick "is subset" testing via the inequality operators. So:will only return true if every key/value pair in dict_x also appears in dict_y.This won't change anything in terms of big-O performance, but it does make the code somewhat cleaner:Note that creating the views costs something (it's just a fixed cost, not dependent on dict size), so if performance matters, it may be worth caching the views; doing so for dict_list1 is free:but some eager conversions would be needed to cache both:You could also collapse the loop using any (which removes the need to break since any short-circuits), so the first (simplest) check could become:This could be further collapsed to a single list comprehension that results in the various matches, but at that point the code is going to be pretty cramped/ugly:though without knowing what you'd really do (as opposed to just printing YAY) that's getting a little pointless.
Below, I use the fact that the dict.items view implements set operations to check for each d1.items() if there exists a d2.items(), such that d1.items() is a subset of d2.items()
You can use any and all:Output:


Answer URL
https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
