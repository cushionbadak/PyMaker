Natural Text
I am getting an UnboundLocalError despite the variable being declared in the global scope. It seems as if the variable is assumed/forced to be a local variable for this specific statement.I can't figure out why variables within if statement conditions would be treated differently. Could someone explain what's going on?The following snippet is a simplified example of what I was trying to do:This throws an UnboundLocalError, despite the global bool declared right above the function declaration.However, this snippet runs as expected:Similarly, this snippet with the variable in the body of an if statement also runs as expected:I found the following article on scopes and namespaces in the docs (https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces) but I feel that it should work as expected based on the following,Although scopes are determined statically, they are used dynamically. At any time during execution, there are at least three nested scopes whose namespaces are directly accessible:the innermost scope, which is searched first, contains the local namesthe scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contains non-local, but also non-global namesthe next-to-last scope contains the current moduleâ€™s global namesthe outermost scope (searched last) is the namespace containing built-in namesI was using Jupyter 4.4.0 with Python 3.6.6 and IPython 6.5.0 within Conda on Windows 10, but I am able to reproduce this behaviour with console IPython, and IDLE 3.6.0 GUI running Python 3.6.0.Edit: Somehow the following snippet isn't affected? It seems like this is tied to updating the variable within the same. I feel like I must be missing something trivial at this point.
variables are function scoped. because there's an assignment within the function to the name mock, all references to mock are attempted as "local" (they actually get compiled to a different opcode!)you can change this by using global mock in the function (so the assignment and reference are forced to global)Note that in your first example you wrote global mock at the module scope -- this does nothing :)It may make more sense to look at the disassembly directly:


Answer URL
https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces
