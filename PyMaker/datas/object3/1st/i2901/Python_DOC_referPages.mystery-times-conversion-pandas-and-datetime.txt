Natural Text
Can anyone explain this?returns Timestamp('2018-07-23 07:00:36.726000')returns 1532329236726000.0.So, is 1532329236726000 2018-07-23 07:00:36 or 2018-07-23 08:00:36 ?
This will depend on the timezone info of the datetime object you create. YOu are in fact creating a naive timezone object in both cases which does not have a specific timezone setdatetime.datetime() objects may assume a local timezone as opposed to UTC which your pd.to_datetime() assumesdatetime.datetime(2018, 7, 23, 7, 0, 36, 726000).replace(tzinfo=pytz.utc).timestamp() * 10**6 returns the same epoch time you put into your original questionFrom the python docs"A naive object does not contain enough information to unambiguously locate itself relative to other date/time objects. Whether a naive object represents Coordinated Universal Time (UTC), local time, or time in some other timezone is purely up to the program, just like it is up to the program whether a particular number represents metres, miles, or mass. Naive objects are easy to understand and to work with, at the cost of ignoring some aspects of reality."https://docs.python.org/3/library/datetime.htmlYou can explicitly tell both functions in your answer to use UTC with a kwarg to the constructors (and without using pytz as below)datetime.datetime(2018, 7, 23, 7, 0, 36, 726000, tzinfo=datetime.timezone.utc)pd.to_datetime(1532329236726000, unit="us", utc=True)


Answer URL
https://docs.python.org/3/library/datetime.html
