Natural Text
I was reading about the getattr() function. The problem is that I still can't grasp the idea of its usage. The only thing I understand about getattr() is that getattr(li, "pop") is the same as calling li.pop.I didn't understand when the book mentioned how you use it to get a reference to a function without knowing its name until run-time. Maybe this is me being a noob in programming, in general. Could anyone shed some light to the subject? When and how do I use this exactly?
You can view a full example here:https://linux.die.net/diveintopython/html/power_of_introspection/index.htmlIntrospection can be used for different purpose, the one presented in 'Dive Into Python' is simply a way to add functionality (plug-in) dynamically in your application.By dynamically I mean without doing modification in the core application to add a new feature.Taking the 'Dive Into Python' example - a simple app to extract attribute from file of different file - you can add the handling of a new file format without doing modification to the original application.I recommend that you finish the book.  As you read, everything will become increasingly clear.
Objects in Python can have attributes -- data attributes and functions to work with those (methods). Actually, every object has built-in attributes.For example you have an object person, that has several attributes: name, gender, etc.You access these attributes (be it methods or data objects) usually writing: person.name, person.gender, person.the_method(), etc.But what if you don't know the attribute's name at the time you write the program? For example you have attribute's name stored in a variable called attr_name.ifthen, instead of writingyou can writeSome practice:getattr will raise AttributeError if attribute with the given name does not exist in the object:But you can pass a default value as the third argument, which will be returned if such attribute does not exist:You can use getattr along with dir to iterate over all attribute names and get their values:A practical use for this would be to find all methods whose names start with test and call them.Similar to getattr there is setattr which allows you to set an attribute of an object having its name:
For me, getattr is easiest to explain this way:It allows you to call methods based on the contents of a string instead of typing the method name.For example, you cannot do this:because x is not of the type "builtin", but "str". However, you CAN do this:It allows you to dynamically connect with objects based on your input. I've found it useful when dealing with custom objects and modules.
A pretty common use case for getattr is mapping data to functions.  For instance, in a web framework like Django or Pylons, getattr makes it straightforward to map a web request's URL to the function that's going to handle it.  If you look under the hood of Pylons's routing, for instance, you'll see that (by default, at least) it chops up a request's URL, like:into "customers" and "list".  Then it searches for a controller class named CustomerController.  Assuming it finds the class, it creates an instance of the class and then uses getattr to get its list method.  It then calls that method, passing it the request as an argument.Once you grasp this idea, it becomes really easy to extend the functionality of a web application:  just add new methods to the controller classes, and then create links in your pages that use the appropriate URLs for those methods.  All of this is made possible by getattr.
Here's a quick and dirty example of how a class could fire different versions of a save method depending on which operating system it's being executed on using getattr().Now let's use this class in an example:
Other than all the amazing answers here, there is a way to use getattr to save copious lines of code and keeping it snug. This thought came following the dreadful representation of code that sometimes might be a necessity.ScenarioSuppose your directory structure is as follows:And, you have functions for getting information about Thor, Iron Man, Doctor Strange in superheroes.py. You very smartly write down the properties of all of them in properties.py in a compact dict and then access them.properties.pyNow, let's say you want to return capabilities of each of them on demand in superheroes.py. So, there are functions like...and more functions returning different values based on the keys and superhero.With the help of getattr, you could do something like:You considerably reduced the number of lines of code, functions and repetition!Oh and of course, if you have bad names like properties_of_thor for variables , they can be made and accessed by simply doingNOTE: For this particular problem, there can be smarter ways to deal with the situation, but the idea is to give an insight about using getattr in right places to write cleaner code.
I sometimes use getattr(..) to lazily initialise attributes of secondary importance just before they are used in the code. Compare the following:To this:The advantage of the second way is that n_calls_to_plot only appears around the place in the code where it is used. This is good for readability, because (1) you can immediately see what value it starts with when reading how it's used, (2) it doesn't introduce a distraction into the __init__(..) method, which ideally should be about the conceptual state of the class, rather than some utility counter that is only used by one of the function's methods for technical reasons, such as optimisation, and has nothing to do with the meaning of the object.
Quite frequently when I am creating an XML file from data stored in a class I would frequently receive errors if the attribute didn't exist or was of type None.  In this case, my issue wasn't not knowing what the attribute name was, as stated in your question, but rather was data ever stored in that attribute.If I used hasattr to do this, it would return True even if the attribute value was of type None and this would cause my ElementTree set command to fail.If the attribute value was of type None, getattr would also return it which would cause my ElementTree set command to fail.  I use the following method to take care of these cases now:This is when and how I use getattr.

Another use of getattr() in implementing a switch statement in Python. It uses both reflection to get the case type.
It is also clarifying from https://www.programiz.com/python-programming/methods/built-in/getattr The age is: 23The age is: 23The sex is: MaleAttributeError: 'Person' object has no attribute 'sex'


Answer URL
https://docs.python.org/3/library/functions.html#getattr
https://docs.python.org/3/library/functions.html#dir
https://docs.python.org/3/library/unittest.html#organizing-test-code
https://docs.python.org/3/library/functions.html#getattr
https://docs.python.org/3/library/functions.html#setattr
