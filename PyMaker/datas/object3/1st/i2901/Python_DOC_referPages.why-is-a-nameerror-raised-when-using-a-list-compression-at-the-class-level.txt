Natural Text
This question already has an answer here:Accessing class variables from a list comprehension in the class definition                    5 answers                I get interesting for me trouble in my code.ATMOSPHERE_GASES_MOLAR_MASS give error NameError("name 'ATMOSPHERE_GASES' is not defined",) I check indented block, tabs and some other reasons, try to rewrite this part, but nothing. But without class it works!
This is a scoping issue. Class level variables in Python can always be a little strange, but it is important to understand how it works if you use them heavily.The actual issue is with the list comprehension, which tries to access ATMOSPHERE_GASES as a global variable. To see why, you need to understand more about classes are built by the interpreter. To find the issue, we will first need to use the ast. This will allow to get the abstract syntax tree, which is a data structure. Then we will be able to convert it into a byte code object using the builtin compile function.Then we will need to use the Python disassembly module dis. The function dis.dis will let you see what the code compiles to. It prints out a lot of code, but I will limit it to the code associated with the list comprehension (list comprehensions and generator expressions have their own code objects like functions and modules).If you pay attention to the instruction at index 10, you will notice that it says LOAD_GLOBAL 1 (ATMOSPHERE_GASES). This means it is looking for ATMOSPHERE_GASES in the global scope, not the class-level scope.The reason the ATMOSPHERE_GASES_MOLAR_MASS = sum(sum(tup) for tup in ATMOSPHERE_GASES.values()) / 100 solution works is because then you can avoid the ATMOSPHERE_GASES[x] logic, which is what is causing the problem.TL;DR: Class level variables are complicated because of how classes scope variables. The list comprehension considers ATMOSPHERE_GASES a global variable, and then can't find it in the module's global scope. It would most likely be best to move this computation outside of the class's definition into the global scope.
You can define __init__ in your class, and then do self, like below:See also: Python __init__ and self what do they do?


Answer URL
https://docs.python.org/3/library/ast.html
https://docs.python.org/3/library/dis.html
