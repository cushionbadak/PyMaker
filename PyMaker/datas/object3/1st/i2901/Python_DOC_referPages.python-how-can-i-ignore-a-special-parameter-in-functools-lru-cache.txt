Natural Text
The function that I want to cache is something like:I have deterministic behaviour for every a(x,y), except when y=='last'. So when a(x, 'last') is called, I would like to call the "real thing" and an lru_cached function for everything else.I imagine this could be possible with my own decorator:Am I completely wrong? How could this be done?
Wrap the function in lru_cache(), then add your decorator on top and access the original uncached function via the __wrapped__ attribute, or better still, use the inspect.unwrap() function to strip the function of an arbitrary number of decorators:and use this asThe functools.wraps() decorator passes the ability to unwrap the decorator again forward, as it sets the __wrapped__ attribute on the wrapper.Or make your decorator apply the lru_cache() decorator itself and retain your own copy of the original function when decorating:use this as
You can call lru_cache() directly to get a 'wrapped' version of func using lru_cache(<args>)(func). Then you can return it from your wrapper:


Answer URL
https://docs.python.org/3/library/inspect.html#inspect.unwrap
