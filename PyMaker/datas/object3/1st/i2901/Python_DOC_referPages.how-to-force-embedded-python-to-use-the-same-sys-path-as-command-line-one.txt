Natural Text
I use python as embedded scripting language in Ubuntu 16 C++ application. I use pip to install additional modules (mysql, regex, etc). These modules work nice in command line python. However, embedded python can not load them. The reason is that sys.path of embedded python differs from command line one. Command line python sys.path follows:Here /usr/lib/python2.7/dist-packages is path where pip installs modules.Embedded python sys.path follows:Of course, it is possible to hardcode pip directory in C++ application and call PySys_SetPath with hardcoded arguments. However, this way looks badly for me; this will make application not portable (I compile the same code for Ubuntu, CentOS and Windows).Command line python somehow "knows" where pip stores modules. So, there are any configuration file that contains these additional pathes. I run printenv, but no environment variable contains /usr/lib/python2.7/dist-packages string. One way is to run diagnostics script via command line python and send its output to PySys_SetPath. However, are there any official, documented way to get all pathes where python installation searches for modules by calling API and not by running external process?
If data, scripts, and or executable(s) are included in a package, they're installed in  (their default) separate directories rather than with the Python files.This command should work just fine but fails to include the other files of a package (if it has any). To include any data, scripts, or executable(s) utilize --prefix, --install-data, and --install-scripts also known as alternate installation.To permanently change the path, edit the ~/.pip/pip.conf file to include:I highly recommend pip wheel. It provides more control over package installment with areas such as: setup requirements, building, installation order, etc; documentation points of interests: examples, controlling setup_requires, and using environment variables which is probably the easiest.One thing to note with pip wheel is:You have to use the POSIX format for variable names including brackets  around the uppercase name as shown in this example: ${API_TOKEN}. pip  will attempt to find the corresponding environment variable defined on  the host system at runtime.


Answer URL
https://docs.python.org/3/install/index.html#alternate-installation
