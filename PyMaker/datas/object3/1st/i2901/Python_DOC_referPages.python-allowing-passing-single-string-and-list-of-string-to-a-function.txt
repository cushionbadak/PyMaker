Natural Text
I have a function that makes a call to a REST API. One of the parameter is a comma-separated list of names. To generate it, I do this:However, I also want to allow the user to provide a single name. The problem is that if names = ERII, for instance, it results in ['E', 'R', 'I', 'I'], but I need it to be ['ERII'] instead. Now, I could force the user to enter a list with only one value (names=['ERRI'] or names=('ERII',). I would prefer to allow the user to provide a single String. Is there a clever way to do that without a if else statement checking if the provided value is an Iterable?Alos, I am uncertain as what would be the best practice here, force to provide a list, or allow a single string?
Parameters that can be either a thing or an iterable or things are a code smell. It’s even worse when the thing is a string, because a string is an iterable, and even a sequence (so your test for isinstance(names, Iterable) would do the wrong thing).The Python stdlib does have a few such cases—most infamously, str.__mod__—but most of those err in the other direction, explicitly requiring a tuple rather than any iterable, and most of them are considered to be mistakes, or at least things that wouldn’t be added to the language today. Sometimes it is still the best answer, but the smell should make you think before doing it.I don’t know exactly what your use case is, but I suspect this will be a lot nicer:Now the user can call it like this:Or, if they happen to have a list, it’s still easy:If that’s not appropriate, another option is keywords, maybe even keyword-only params:But if the best design really is a string or a (non-string) iterable of strings, or a string or a tuple of strings, the standard way to do that is type switching. It may look a bit ugly, but it calls attention to the fact that you’re doing exactly what you’re doing, and it does it in the most idiomatic way.
I'd allow both list and single strings as arguments. Also, I don't think there's anything wrong with the if/else solution, except that you could directly check if the argument is an instance of the str class (rather then checking if the argument is iterable):Be careful if checking whether the argument is iterable - both strings and lists are iterable.
Using isinstance() to identify the type of input may provide a solution:This will allow you to input list, string of a single name, as well as string containing several names(separated by space):Apply this function:Get:['Eric']['Alice,John']['Alice,Elsa,George']


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#function-definitions
https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions
