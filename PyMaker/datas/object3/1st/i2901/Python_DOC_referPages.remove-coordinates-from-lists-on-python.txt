Natural Text
This is a follow-up question from my last question:Python3 Numpy np.where Error.I have 2 lists like these:I want to remove the x values lower than 30 and y values that correspond to the removed x values. (For example, (x,y) = (1,12) in x[1] and y[1])In order to do that, I got the corrected x list:I also got the coordinates of the remaining x values:Now I want to use these coordinates to remove items from y.How can I implement this?
To get the corrected y values, I would recommend bypassing the coordinates entirely as a first approach. The reason is that you may end up with empty lists along the way, which will throw off the shape of the output of you don't keep special track of them. Also, removing elements is generally much more awkward than not including them in the first place.It would be much easier to make a corrected version of y in the same way you corrected x:Here we just used zip to step along both sets of lists in the same way you did with one.If you absolutely insist on using the coordinates, I would recommend just copying y entirely and removing the elements from the corrected copy. You have to go backwards in each row to avoid shifting the meaning of the coordinates (e.g. with reversed). You could use itertools.groupby to do the actual iteration for each row:Instead of reversing coord, you can reverse each group individually, e.g. with map(itemgetter(1), reversed(group)).A better approach might be to compute the coordinates of the retained values instead of the discarded ones. I would recommend pre-allocating the output list, to help keep track of the empty lists and preserve the shape:If you don't care about preserving the empty rows, you can skip the loop and use a one-liner instead:
where BadList is 
You can get it using zip withThis is the equivalent ofWhereand


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/functions.html#reversed
https://docs.python.org/3/library/itertools.html#itertools.groupby
