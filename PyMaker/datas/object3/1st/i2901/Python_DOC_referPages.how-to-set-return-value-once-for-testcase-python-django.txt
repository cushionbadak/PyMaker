Natural Text
Here is example test:Queston:How I can avoid of duplicate code for setting "return_value" in each test in TestCase?I expect something in "setUp" method or something similar.Is it possible?PS: mock version mock==1.3.0, django version Django==1.8.4
You can set the return_value right there in the @mock.patch.object() decorators:(Note: when decorating with @mock.patch the decorators are applied from the bottom on up, so for mock_method_a to be passed in as the first argument you need to put the decorator closest to the class definition).The return_value keyword argument to mock.patch.object() is passed to the MagicMock() constructor. See the mock.patch.object() documentation:Like patch(), patch.object() takes arbitrary keyword arguments for configuring the mock object it creates.and the mock.Mock documentation:Mock takes several optional arguments that specify the behaviour of the Mock object:[...]return_value: The value returned when the mock is called. By default this is a new Mock (created on first access). See the return_value attribute.If you also want to avoid setting the mocks outside of your test case or don't like the additional arguments to each test function, then you you can also can create patchers in the setUp method, which then are removed again when the test ends by registering a callback via the unittest.TestCase.addCleanup() method.The patchers are applied for each test, by calling the patcher.start() methods, which returns the new mock object:Note that the mock.patch.stopall() method will stop all mock patchers that have started. You can also pass the .stop attributes of each of the patchers:If you have to create a lot of such setups, you could create a helper function that'll take care of the repeated parts:and perhaps use this in a loop over a mapping:The patcher.start() approach in a TestCase.setUp() method makes it easier to use inheritance, where a base testcase case is used as the basis for several test cases that all use the same shared mocking setup.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#patch-object
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock
https://docs.python.org/3/library/unittest.html#unittest.TestCase.addCleanup
https://docs.python.org/3/library/unittest.mock.html#patch-methods-start-and-stop
