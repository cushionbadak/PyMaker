Natural Text
I am creating a nested dictionary that describes several cases ('1ql' and '2ql'), each with a different number of variations ('var0', 'var1', ...). I use dict comprehension in the following manner:This works great, but I have been struggling with the how to handle the dictionary for saving to file(s). I would like to iterate over each variation of '1ql', and then iterate simultaneously over each iteration of '2ql'. This can easily be accomplished like this:which, for 2 variations of '1ql' and 3 variation '2ql', produces 6 total permutations:However, I would like to get this automatically for any number of cases, for any number of variations per case, without having to specify these by hand. I have tried different iteration schemes and even by inverting the inner and outer keys, but to no avail.I would really like the to learn the most pythonic way to accomplish this. Thanks!
First, transform the data to remove the parts we don't need:Now x is something like:Finally, use itertools.product() to get the result:Probably in your real code you'll iterate over the results and use print() on each one to get the format you need, but wrapping with list() as above gives you an idea:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
