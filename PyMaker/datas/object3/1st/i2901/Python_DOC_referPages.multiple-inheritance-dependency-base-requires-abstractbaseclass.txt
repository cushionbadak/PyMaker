Natural Text
The gist of the question: if inheriting multiple classes how can I guarantee that if one class is inherited, a compliment Abstract Base Class (abc) is also used by the child object.I've been messing around with pythons inheritance trying to see what kind of cool stuff I can do and I came up with this pattern, which is kind of interesting.  I've been trying to use this make implementing and testing objects that interface with my cache easier.  I've got three modules:ICachable.py Cacheable.py SomeClass.pyICacheable.pyCacheable.pySomeClass.pySo this example works, but the scary thing is that there is no gurantee that a class inherriting Cacheable also inherits ICacheable.  Which seems like a design flaw, as Cacheable is useless on its own.  However the ability to abstract things from my subclass/child class with this is powerful.  Is there a way to guarantee Cacheable's dependency on ICacheable?
If you explicitly do not want inheritance, you can register classes as virtual subclasses of an ABC.That means every subclass of Cacheable is automatically treated as subclass of ICacheable as well. This is mostly useful if you have an efficient implementation that would be slowed down by having non-functional Abstract Base Classes to traverse, e.g. for super calls.However, ABCs are not just Interfaces and it is fine to inherit from them. In fact, part of the benefit of ABC is that it enforces subclasses to implement all abstract methods. An intermediate helper class, such as Cacheable, is fine not to implement all methods when it is never instantiated. However, any non-virtual subclass that is instantiated must be concrete.Note that if youalways subclass as class AnyClass(Cacheable, ICacheable):never instantiate Cacheablethat is functionally equivalent to Cacheable inheriting from ICacheable. The Method Resolution Order (i.e. the inheritance diamond) is the same.


Answer URL
https://docs.python.org/3/tutorial/classes.html#private-variables
