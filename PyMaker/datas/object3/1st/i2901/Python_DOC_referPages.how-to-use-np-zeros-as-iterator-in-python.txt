Natural Text
I'm trying to make a matrix with numpy, and then print it (I'm doing this because later I want to make math operations with more matrices), the error I get is :I tried to use the np.zeros array in for loop, but it didn't work (I got a similar error).Note: I tried using the np.matrix function (assigning it the np.zeros array for columns and rows, but it also didn't work, and then I tried a variant (is what you can see is commented, the np.ndarray)).Code:
There's some confusion in your code as to how your matrix should be constructed.  The reason you're getting that specific IndexError is because i and j inside your loop are actually arrays, which you can see if you insert print statements.  There are a couple of other issues with your code as is, but I'm going to offer a solution and let you debug the rest as needed.  Here's the basic framework you can use to get the workflow you're looking for.  I'm inserting arbitrary values instead of input() statements to make the example reproducible, but it should be straightforward to replace them with input() as needed:Now populate the array with your nested loop:
The most common option to construct a Numpy array is (of course) np.array,that is described like thisnumpy.array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0)Create an array.You may want to study the whole of the description, but what is most relevant is the object argument â€” again from the reference descriptionParameters:  object : array_likeAn array, any object exposing the array interface, an object whose  __array__ method returns an array, or any (nested) sequence.and in particular "any (nested) sequence", that, you know, can be built using list comprehension, e.g., you can construct a list of lists like thisand pass said list to the array constructor (after noting that we need to convert from strings to floats, that is...)Having these foundations, we can write this codeIt is worth mentioning that, doing it this way, you produce a possibly(no, it's not your case...) large list of lists that is going to begarbage collected, so that, if efficiency would be a main concern,creating an empty matrix using np.empty((nrows, ncols)) and thendoing a loop to fill it with your values may be preferable:As a side note, it may be preferable to wrap the input calls in boththe inner loops into a function that asks repeatedly  for your input untilit is provided with a valid numberso that you have not to restart the whole input procedure if you makea mistake.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
