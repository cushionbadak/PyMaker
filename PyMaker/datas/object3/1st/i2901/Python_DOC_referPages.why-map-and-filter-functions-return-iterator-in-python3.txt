Natural Text
Why map and filter functions return iterator in python3 whereas reduce returns fold operation itself? What all performance/memory gains we get with returning iterator?Map returns "map" object:Reduce returns me directly the result of fold operation itselfWhereas filter again returns "filter: object:
The reason map and filter operations return a (lazy) iterable is that sometimes there is no need for the list to be allocated. Generating a list requires calculating all results, as well as allocating memory which may be useless.Useless allocation of memory:Because sum is effectively a partial reduce(operator.add, iterator, 0) there is no need to hold the entire data. In this example, if map would create a list it would allocate memory needlessly. Also, if the list doesn't fit in memory it wouldn't work (unlike the lazy version). See this example which would blow up in python2 but works in python3 because of laziness:Useless calculation of results:In this example, if filter would calculate all results, it would then throw away almost the entire list since only the first odd number (1) is interesting. In this case only 0 % 2 and 1 % 2 are actually calculated. This saves CPU in this case, but can reduce IO and memory consumption in many real-life examples.When you need the results, it is up to you to collect them in any way you want. The collection is separate from the calculations, which are implemented lazily via iterators since python3.
filter and map return iterators. You can convert them to lists by wrapping in listWhy is there no consistency with reduce? Because reduce returns a single value. It would make no sense for it to return an iterator. Why do map and filter not return a list? Well, they used to, but then it was changed for python 3, and for good reason. Lazy iterators are useful because we aren't creating a new list of N values every time we use one. This means they can be used in sequence likewithout the creation of unnecessary large blocks of data. To answer the question in the comments:No, map is not only applied after filter has completed in the example above. Proof:As you can see I can get outputs of a filter -> map sequence when I haven't passed all the values in (I even passed an infinite generator that will never complete).


Answer URL
https://docs.python.org/3/whatsnew/3.0.html#views-and-iterators-instead-of-lists
