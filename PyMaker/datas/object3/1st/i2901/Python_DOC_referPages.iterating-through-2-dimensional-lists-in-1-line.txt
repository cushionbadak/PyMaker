Natural Text
For a 2D list [["bacon", "banana"], ["ham", "salami", "cheese"]] I want to iterate through as "bacon", then "banana", then "ham" etc.In the sandwiches array, there are 2 sandwiches, bacon+banana and ham+salami+cheese. I want to know the score for each sandwich by doing something like this (doesn't work but shows what I'd like to do):But of course for j in i in sandwiches doesn't work. I've tried messing around with the order of the fors and ins but haven't gotten anywhere. How could this be done?For instance, the output I want here would be:Since the ingredients have a combined score of 5 in the first sandwich and -1 in the second. The ingredients that aren't in the preferences get ignored.
Here is a one-liner that does what you want; I converted your preferences list into a dictionary because that is a much more suitable data structure when you are storing key/value pairs:Output:The solution uses sum to add up the values of the sandwich ingredients, which are filtered by whether or not the ingredient appears in prefs.You can change the output format to remove the list of ingredients and just output the score by altering the [ ", ".join(i), sum( prefs[j] for j in i if j in prefs) ] part. I would have assumed it was important to know which sandwich got which score, but who knows!
I think this is the logic you want to use, unpacked into a nested for loop:As i alarmed alien says, the logic is much simpler if you use a dictionary for the scores:
Here's one liner using groupby:Prints:For sandwich ['bacon', 'banana']: Bacon has 5, banana has 1000, sandwich score is 1005For sandwich ['ham', 'salami', 'cheese']: Ham has -2, salami has 999, sanwich score is 997
I would use a dictionary for the score lookup - it is the designated datastructure for lookups. You can go from your representation of preferences to a dictionary with a dict-comprehension:This uses zip() to join every 2nd element starting at 0 ["bacon","ham","salami"] to every 2nd element starting at 1 [5,-2,1] resulting in a zip-generator of (("bacon,5),("ham",-2),("salami",1)). The zip-generator-result is then decomposed into key:value pairs that create the dict.With that out of the way, you can calculate your sums like so:The score sums up each ingredients score for each sandwinch you defined. If an ingredient is not found, 0 is added instead.The output is a tuple of the sandwich and its score: 
Here is another way in which you can do it, although I changed the structure of preferences to dictionary, which is more practical and easier to utilize:Output:


Answer URL
https://docs.python.org/3/library/stdtypes.html#mapping-types-dict
https://docs.python.org/3/library/stdtypes.html#mapping-types-dict
https://docs.python.org/3/library/functions.html#sum
https://docs.python.org/3/tutorial/datastructures.html#dictionaries
https://docs.python.org/3/library/functions.html#zip
