Natural Text
I'm passing a socket file descriptor using a UNIX domain socket to a Python 3 program. I would like to query the socket and determine its address family.In this answer the getsockname system call is used to achieve the same result in C. However, Python's socket.getsockname function doesn't return the address family, instead assuming the caller already knows it. Furthermore, it only works on sockets, not on file descriptors, and creating a socket object from a file descriptor requires passing the address family as well.Is there a way to query the address family from Python?EDIT: I want to emphasize that I am looking for the address family of an already open socket, for which I have the file descriptor.
You just pass the file descriptor to socket.socket, giving it as the fileno= keyword attribute. The socket class figures out the type of socket corresponding to the file descriptor. You can then find the family as @klaus suggested: with s.family.Here I'm creating a socket in python, but then extracting the file descriptor from the socket object (producing an ordinary int containing the descriptor number) so as to demonstrate putting it back into a new socket object. Running the above produces:EDITHmm... the above method does not seem to work with AF_INET6 sockets, at least in my python 3.5.2 version.That seems like a clear bug to me. The documentation says:If fileno is specified, the values for family, type, and proto are auto-detected from the specified file descriptor.You may need to examine new_s.laddr and heuristically determine the family. (For AF_INET6, laddr will be a 4-tuple, whereas AF_INET uses a 2-tuple). If you expect AF_UNIX or other families, you might need to extend that.
You can query a socket's address family in python checking the .family attribute. There are other attributes saved in the sock object alsoThe output is
If you just want information about the socket, I would suggest socket.getaddrinfo.Documentation: The function returns a list of 5-tuples with the following structure:(family, type, proto, canonname, sockaddr)
Here's a solution based on ctypes I wrote so I could use older versions of Python:


Answer URL
https://docs.python.org/3/library/socket.html#socket.getaddrinfo
