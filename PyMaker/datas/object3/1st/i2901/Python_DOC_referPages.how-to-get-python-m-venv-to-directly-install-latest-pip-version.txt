Natural Text
As part of the compilation step for a new python version, I fetch and run get-pip.py, to have the latest pip installed next to the python executable:I have 25 such versions under /opt/python, although I mostly use the five latest versions of each major.minor version that is not EOL. To setup an invorment I used to run virtualenv or my virtualenvutils with the -p /opt/python/X.Y.Z/bin/python option to get a virtual environment with a specific version.With Python 3.7 this gives the imp module deprecation warning:I have little hope this will be solved in virtualenv, as this has had a PendingDeprecationWarning at least since 2014 (as can be seen from the output in this question)While investigating replacing virtualenv with python -m venv in virtualenvutils, I first created a new venv based virtual environment by hand:That has an old pip version! If you use it, you'll get:You are using pip version 10.0.1, however version 18.0 is available.  You should consider upgrading via the 'pip install --upgrade pip' commandIn the virtual environment created with virtualenv you immediately get the latest version:I can run a post-creation step:which will take extra time. And if there was a some security update for pip, this would imply running the non-secure version to get a secure version, an ideal point of attack.From virtualenvutils it is trivial to do the multiple steps to create a pip-less virtualenv and then add pip using get-pip.py. From the command-line this is not so simple:pip 18.0 from /opt/python/3.7.0/lib/python3.7/site-packages/pip (python 3.7)What is causing /opt/python/3.7.0/bin/python -m venv to take that old pip version? Is that the version available when 3.7.0 was released? How can I update my install under /opt/python/3.7.0 in some way so that using /opt/python/3.7.0/bin/python -m venv creates a virtualenv with the latest pip version without reverting to scripts, aliases or using multiple commands? Having the latest pip installed under /opt/python/3.7.0 obviously is not enough.There are two bundled wheels:I suspect I need to update those. Is there a better way than updating those by hand? Some option for /some/python -m venv would be nice.(And running /some/python -m ensurepip --upgrade doesn't do the trick)Running the deprecated /opt/python/3.7.0/bin/pyvenv has the same old pip version problem. 
It is an expected behavior. python -m venv calls python -m ensurepip to install pip and This answer shows that ensurepip would only install the bundled version even with --upgrade option. There isn't any official option to update the bundled pip and setuptools.Well I have also no good idea to fix this problem as it just is the designed behavior. I would like to give two suggestions:Use pipenv. It is really good! And it will be the next-generation official package manager in the future(Although there is a big problem related to current Pypi's structure. In short, a package manager can only decide the dependencies with downloading the whole package. This gives a huge difficulty to building dependencies graph.).Implement your custom EnvBuilder, actually there is an official example about this. And in the example, it also use get-pip.py to install the latest pip.


Answer URL
https://docs.python.org/3/library/venv.html#an-example-of-extending-envbuilder
