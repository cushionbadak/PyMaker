Natural Text
I am writing a GUI in wxPython, and am creating a custom control for displaying a terminal window, as I have not been able to find one currently in existence.My control TerminalCtrl extends upon wx.Control, and my init definition starts as follows:I would like to enforce the following style:That is, no borders will ever be allowed on this window. However, I would still like to allow other styles to be applied, at programmers discretion.For reference, the __init__ function for wx.Control is defined as followsWhat I would like to achieve is that I may filter the style parameter to enforce the wx.BORDER_NONE style. It is my understanding that this could be in either *args or **kwargs, depending on whether the parameters are passed by position or by specifically referencing the parameter name such as (style=wx.BORDER_NONE).Is there a standard/recommended/pythonic way that I may enforce such a filter upon a parameter before passing it on to wx.Control.__init__ and if so how may I achieve that?
The cleanest way is probably to just copy the base class's signature:This can get a bit ugly if you're doing this for a whole bunch of classes whose construction signatures all have a whole bunch of positional-or-keyword parameters. Or if you're doing it for an API that changes regularly.For those cases, you can always do it dynamically, with inspect:If you were doing dozens of these, you'd probably want to write a decorator to help out. And you might also want to apply functools.wraps or do the equivalent manually to make your signature introspectable. (And if you weren't doing dozens of these, you'd probably want to just be explicit, as in the example at the top of the answer.)If you have something which is just a bit too repetitive and annoying to do explicitly, but not worth going crazy with the introspection, the only thing in between is something decidedly hacky, like this:For Python 2.x (or 3.0-3.2), where you don't have signature, only getargspec and friends, this might be tempting. But for 3.3+, the only reason to avoid signature would optimizing out a few nanoseconds. and when the function in question is the constructor for a widget that involves talking to the system window manager, that would be pretty silly to worry about.


Answer URL
https://docs.python.org/3/library/inspect.html#introspecting-callables-with-the-signature-object
