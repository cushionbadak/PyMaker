Natural Text
I have two threads that receive asynchronous data and want to process this data in the main thread.  the first process the main thread call (ProcessA) runs but the second is never executed. For ease of space and explanation I've simplified the threads.The first thread is:The second thread is similar:The main calling thread is as follows:  When I run the program only the ProcessA runs (as I see in the log file).I get the same result whether I run the code native in a Windows 7 terminal or in Spyder with 'Run>Configuration ..> Execute in external terminal' setWhat can I do to get the ProcessB and the remainer of the main thread to run ? UPDATEMoving the classes from external files to internal functions works, however using external functions doesn't work. That is this code works: However moving the code into external functions still doesn't work either.
It's hard to tell exactly what is wrong here.. I see some small errors with importing and assigning your classes... To put you on the right path: ProcessA and B classes could just be functions, which have Queue as an argument, if you would like to do it that way. Otherwise, it should inherit Process (not q) and take queue in on initialization. Here's a good walkthrough (Queues and Pipes are about halfway down): https://www.geeksforgeeks.org/multiprocessing-python-set-2/You might also try using a manager to share this state as well. See https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes
The problem was the way in which I was importing the external functions.  I didn't need the '.py' extension.  I found this out from this post: Call a function from another file in PythonThe following code works:with a function in the file called ProcessAF.py in the same directory as follows:  


Answer URL
https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes
