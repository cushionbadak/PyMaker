Natural Text
About the example found herebecomes:How to expand it to a 3-process pipeline?Also, I could not find, what the p1.stdout.close() does exactly? What if p1 runs for a long time? will it wait for p1 to finish before applying the close() ?Must close() come before communicate() ?Do I understand correctly that before I call communicate(), the pipeline is set up, but "on hold"? Or rather, each process is started parallel right away, but the ones requiring input from the stdin are blocking until communicate() is called?Consider:Maybe something like this:(the one above crashes with ValueError: I/O operation on closed file in the current form)This one does not throw an error, but since I don't understand the close(), it may be a setup for doom sometime later:Or this:
According to python documentation item 17.1.4.2 of https://docs.python.org/2/library/subprocess.html, calling p1.stdout.close()  after starting p2 is important in order for p1 to receive a SIGPIPE if p2 exits before p1.Likewise, the p2.stdout.close() should be called after starting the p3 too.How to handle a broken pipe (SIGPIPE) in python? explains how to handle a broken pipe (SIGPIPE).


Answer URL
https://docs.python.org/3/library/subprocess.html#replacing-shell-pipeline
