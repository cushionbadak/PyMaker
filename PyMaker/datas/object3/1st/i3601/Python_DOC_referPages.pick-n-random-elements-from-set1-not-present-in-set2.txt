Natural Text
I would like to pick n random elements from set1 that are not present in set2, if there are n such elements. If there are not, only those that are different should be returned or an empty set in the worst case.Example 1:input: n=2, set1={0,1,2,3,4,5,6,7}, set2={0,2,4,6}example possible output: {1,5} (other possible outputs: {1,3}, {1,7}, {3,5}, {3,7}, {5,7})Example 2:input: n=5, set1={0,1,2,3,4,5,6,7}, set2={0,2,4,6}single possible output: {1,3,5,7} since there are only 4 choices and number of elements to choose is 5
Create a set of unique values and return either n random elements from it, or if n is larger than the population return all elements:In action:
In two lines (we could make it one, but it's a little ugly), using sets and random.sample:Original solution (preserving duplicates in list1, as well as order, which doesn't really matter for random samples):If you don't care about preserving duplicates, then set difference is indeed the way to go. Checking the timing between the two implementations with the following:we get:set difference: 1.15 ms ± 58 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)list comprehension: 1.13 s ± 44.7 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)list comprehension with set pre-defined: 1.47 ms ± 24.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)That's a factor of 1000 faster for sets! Not much of a difference between set.difference and the list comprehension though if we have already built the set, but what difference is there appears to be significant (those standard deviations are tiny!).


Answer URL
https://docs.python.org/3/library/random.html#random.sample
