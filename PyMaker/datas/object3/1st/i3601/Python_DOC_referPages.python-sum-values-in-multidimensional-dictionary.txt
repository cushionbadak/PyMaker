Natural Text
Normally I would use sum(dict['A'].values()) in order to sum all the values in a dictionary with the key "A". However in this case it is not all the  values of the "main" key I want to sum, but rather all the values where the "secondary/sub-key" has a specific name. Let me show a simplified example below:The example above is fairly easy since it's only a 2*2 dimension, and thus I can fairly easily add the values directly. But this method is not practical when the dictionary gets larger. So I wonder what is the most efficient solution.Thanks in advance
To sum values for a single subkey you could use sum() with a generator expression:To sum values for all subkeys you can use collections.Counter:
You can iterate through the keys of your dict and retrieve the values to add them to a variable.So you would start by declaring the sum variables where you will store the sums, and iterate through every key in your dict to add the corresponding values to the sum variables. You could also easily add more values in the future by adding val3 and sum3, val4 and sum4, etc. Here is an example:This prints:Also, as @jpp mentioned, never name a variable after a class, so don't name your dictionnary dict e.g. you can name it my_dict
You can store sum of the every element inside the dict in a new dictionary
Use collections.Counter:Also note that you shouldn't name your dictionary as dict. It shadows the built-in dict function.
I suggest you this easily readable and understandable solution, which iterates over each key/value pair to update a new dictionary with the sum of values, whatever the size of input dictionaries. I also renamed the input dictionary into d instead of dict because dict is the name of the Python built-in class:  
You can find the union of relevant keys. Then use a dictionary comprehension to construct a dictionary mapping these keys to their sums:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
