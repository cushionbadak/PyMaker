Natural Text
I've got a class that has replaced __iter__ to hide extra unneeded data. I've made the rest of my code backwards compatible by setting iteritems to either dict.iteritems or dict.items depending on the python version, and I can then call iteritems(class_object), but it doesn't seem to work well with my class.It'll be easier to explain with an example:If I do Test(test_dict).__iter__(), then it correctly returns {'a': 'what', 'b': 'test'}If I add iteritems = __iter__ to the class, then it also works when doing Test(test_dict).iteritems()However, no matter what I try, doing dict.iteritems(Test(test_dict)) defaults to the standard dict iterating, and returns {'a': {'hidden': 123, 'value': 'what'}, 'b': {'value': 'test'}}I've tried a couple of trace functions but they don't go deep enough to figure out what's going on.
The dict.iteritems() method reaches straight into the internal data structures of the dict implementation. You passed in a subclass of dict so those same data structures are there for it to access. You can't override this behaviour.  Not that dict.iteritems() would ever use __iter__; the latter produces keys only, not key-value pairs!You should instead define iteritems differently; given a PY3 boolean variable that is False for Python 2, True otherwise:Now iteritems(object) is translated to object.iteritems() or object.items(), as needed, and the correct method is always called.Next, to extend dictionary behaviour, instead of subclassing dict, I'd subclass collections.MutableMapping (*):This implements all the same methods that dict provides, except for copy and the dict.fromkeys() class method.You could instead inherit from collections.UserDict(), which adds those two remaining methods:Only an alternate __iter__ implementation is needed in that case.In either case, you still can't use dict.iteritems on these objects, because that method can only work with actual dict objects.(*) collections.MutableMapping is the Python 2 location of that class, the official Python 3 location is collections.abc.MutableMapping but there are aliases in place to support Python 2-compatible code.


Answer URL
https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes
https://docs.python.org/3/library/collections.html#collections.UserDict
