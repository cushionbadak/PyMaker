Natural Text
For example, let's say I have to dictionaries:andWhat's the cleverest way to check whether the two dictionaries contain the same set of keys? In the example above it should return False because d_2 contains the 'alan' key, which d_1 doesn't. Please note that I am not interested in checking that the associated values for each and every key are the same, just that the set of keys are the same.
You can get the keys for a dictionary with dict.keys().You can turn this into a set with set(dict.keys())You can compare sets with ==To sum up:will give you what you want.
In Python2,In Python3, you can do this which may be a tiny bit more efficient than creating setsalthough the Python2 way would work too
In Python 3, dict.keys() returns a "view object" that can be used like a set.  This is much more efficient than constructing a separate set.In Python 2.7, dict.viewkeys() does the same thing.In Python 2.6 and below, you have to construct a set of the keys of each dict.Or you can iterate over the keys yourself for greater memory efficiency.

One way is to check for symmetric difference (new set with elements in either s or t but not both):But a shorter way it to just compare the sets:
A quick option (not sure if its the most optimal)


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.keys
https://docs.python.org/3/library/stdtypes.html#dict-views
