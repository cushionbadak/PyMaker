Natural Text
Given a numpy array, how can I find the sequence of indices into it such that the result is sorted?For example, given x=[4,2,6], the result would be [1,0,2], since [x[1],x[0],x[2]] is sorted.I know there are many Python functions available like argsort() which can do the job but I need to implement this sorting function myself.  Any suggestions?
First, you can use enumerate to turn any iterable of values into an iterable of (index, value) pairs.But if you just sort those, it'll sort by index which isn't very useful. You want to sort by the value in each (index, value) pair. Normally, in Python, you do that by passing a key function to sorted. As shown in the examples in that documentation, itemgetter makes for a perfect key function here. And you can easily modify your custom sorting function to use a key function the same way sorted does, although it's a bit hard to show you how to do that without seeing your custom sorting function.1But in this case, you can use the Decorate-Sort-Undecorate idiom. You just want to sort by the values in each (index, value) pair, so all you have to do to "decorate" is reverse the pairs. And, if you only want the indexes, not the values, to "undecorate", you just drop the values.So:… or, putting it all together:(Of course you can make it a one-liner, but I think two lines is the best readability balance here.)If you're not allowed to use even enumerate, this is one of the easiest builtin functions to replace with your own function. In fact, the docs even show you how to do it:Or, since you don't need a custom start value:But now, can you do the same thing while still taking (at least some) advantage of numpy, keeping everything as arrays instead of using iterables?Sure. We can do the same thing as enumerate, and even put the values on the bottom so we don't need the whole flipping step:… then sort it. I'm assuming your custom sorting function sorts columns. Maybe you need to pass in an axis argument, or sort decorated.T, or whatever; you should know the API to your own function.And now, we just take the index row:1. For an initial implementation, just change every x < y to key(x) < key(y), and get it working. Then you can figure out how to optimize it by caching the key values so you only call key once per element instead of log(N) times per element.
As an example, let's take bubble sort (from https://en.wikibooks.org/wiki/Algorithm_Implementation/Sorting/Bubble_sort#Python) and add index tracking:
If I understood your question well, you can do using list-comprehension, with sorted function.


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
https://docs.python.org/3/howto/sorting.html#key-functions
https://docs.python.org/3/library/functions.html#sorted
https://docs.python.org/3/library/operator.html#operator.itemgetter
https://docs.python.org/3/howto/sorting.html#the-old-way-using-decorate-sort-undecorate
