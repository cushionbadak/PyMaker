Natural Text
I am trying to pass a dictionary as an argument, and see 2 approaches as seen below, what's makes it keep the dictionary value unchanged when passed with **Output:
It is simply that (**d) creates a new dict, while (d) keeps a reference to the old one:
To understand what's going on, consider this case:Where did that {'spam': 10} come from? Simple: **d just packs up all keyword arguments that don't match any named parameters, no matter where they came from, into a new dict, and gives you that dict as d.Now look at ** on the argument side instead:So Python is expanding **d into a bunch of separate keyword arguments, which match up with parameters exactly the same way as actual separate keyword arguments.Finally, on both sides:So Python is expanding the **d argument out into two separate keyword arguments, putting them together with the normal keyword argument eggs=30, matching them to the parameters spam and eggs, and storing any leftovers in a new dict in the **d parameter.This is all explained loosely in the tutorial, and more rigorously in the reference.There's really nothing special about the fact that you had a **d parameter on the definition and a **d argument on the call; they don't have to correspond to each other in any way.Some people consider it unfortunate that Python uses the same syntax for variable-argument parameters in the definition and argument unpacking in the call, and likewise the same syntax for default parameter values in the definition and keyword arguments in the call. But, while this is confusing the first time you run into it, once you understand, it's very easy to remember, and to read. And other languages that distinguish the two with syntax like ...args vs. seq... don't seem to be any less initially confusing.


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#more-on-defining-functions
https://docs.python.org/3/reference/expressions.html#calls
