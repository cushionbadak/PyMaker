Natural Text
I am trying to use keys and certificate generated using java keytool in python server and java client. I have created key & keystore, exported certificate, added certificate to truststore, converted keystore to standard pkcs format and then extracted key and certificate from pkcs to use in python server. (first three steps from here and last three steps from here). This question is somewhat follow up of this question and detailed steps for generating key and certificate can be found in that question.My SSL server looks like thisserver.pySSL Client looks like this:Client4Py.javaThe output on server's console after first running server and then the client is as follows:You can see on line 20, there is TypeError: Cannot serialize socket object. Code starts working after removing all SSL stuffs When I comment call to wrap_socket(), replace ssl_socket.accept() with socketObject.accept() and comment ssl_socket.shutdown() and close(), the code starts working. It creates new process from worker() as desired and ends printing Inside worker on console. Here is the modified non SSL server:
I dont know whether I understood the exact reason, but I am stating it here.Looking at following stacktrace lines:it seems that multiprocessing module's Process.start() method serializes the parameters passed to it for passing them to new process. And it further seems that SSLSocket objects cannot be serialized. However, it seems that Socket objects can be serialized. This issue states the same and thats why the Socket based server works. However, I dont get why is this so (SSLSocket is not serializable but Socket objects can be serialized). I mean is there any method that is implemented by Socket objects which are not implemented by SSLSocket. Also note that the error occurs at socket.py, line 185, in __getstate__, that is in Socket class, but not in SSLSocket class. I will like if someone confirms above reason (that is SSLSocket objects are not serializable and Socket objects are serializable), explains exactly why  is this the case and provides solution for using SSLSocket with multiprocessing module.WorkaroundI ended up forking new process using os.fork. (Examples of os.fork can be found here). Its supported on linux only. So, I installed python on cygwin and then used it.


Answer URL
https://docs.python.org/3/library/ssl.html#ssl-sockets
https://docs.python.org/3/library/socket.html#socket-objects
https://docs.python.org/3/library/os.html#os.fork
