Natural Text
This question already has an answer here:What are the rules for comparing numpy arrays using ==?                    2 answers                Understanding == applied to a NumPy array                    2 answers                Following statement passes in my tests. One type is numpy.float64 other is numpy.ndarray and my assumption was that this test will fail but it passes.Following statement prints [ True]Debugging further shows that assertEquals ends up invoking unittest.case.TestCase#_baseAssertEqual which checks equality using ==:Can someone explain why and how test self.assertEqual(3.3, np.asarray([3.3])) passes?Edit: How == works in case you compare an array of one value with a variable and where is this behaviour documented?
As explained in the numpy docs about ndarrays:Arithmetic and comparison operations on ndarrays are defined as  element-wise operations, and generally yield ndarray objects as  results. The == operation on ndarrays returns another ndarray, not a single boolean True or False. This is useful for data processing, but it's different from almost every other python object, is which A == B would return a simple boolean.
In Python one can add several __eq__ methods on a specific type, to make it comparable with another. Probably some kind of that is done with numpy.ndarray.In that case when a == b is checked then it translates to a.__eq__(b). And if type for a has implemented __eq__ method comparison for b's type they can be compared with ==.Source: https://docs.python.org/3/reference/datamodel.html#object.eq


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__eq__
https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsInstance
