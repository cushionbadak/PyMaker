Natural Text
In perl I usually implement polymorphic input like so: Which says approximately: "The passed value must have length regardless of type, run the respective type handler based on the detected type, return nothing if we are passed nothing or if we are passed a type we don't recognize."   I'm trying to do something similar a in python object that can recieve None, string, integer, float, and decimal types. Is there a python method for universally detecting the existence of any data in a value with unknown type? If not, is there a cononical way of dispatching based on primitive types  in python, and can you refer me to an example?python 3.5.3Thanks in advance!
It's even simpler in python."The passed value must have length regardless of type, run the respective type handler based on the detected type, return nothing if we are passed nothing or if we are passed a type we don't recognize."If I understood correctly you want to recognize "regardless of type": empty strings, arrays, hashmaps, everything. You already can do:It will work for almost all builtin- and library-defined- types.How does it works and how you can extend it for your types?Read https://docs.python.org/3/reference/datamodel.html#object.boolYes. It's that simple. Just define __bool__ method for your type.( Rejoice! Python is correct choice after perl! I know it myself ) 


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__bool__
https://docs.python.org/3/library/functools.html#functools.singledispatch
