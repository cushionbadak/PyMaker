Natural Text
I am looking for a way to create a Python function from a string containing the source code at runtime, in such a way that the source code is available by inspection.My current method looks like:Which works perfectly fine, but the function has no source code/file associated with it. This makes debugging difficult (note the line the error occurs on in foo() isn't shown):If I define a function in the IPython interpreter, I can get the source using inspect.getsource and it will be printed in tracebacks. inspect.getsourcefile returns something like '<ipython-input-19-8efed6025c6f>' for these types of functions, which of course isn't a real file. Is there a way to do something similar in a non-interactive environment?
So I was able to partially figure this out by digging into the IPython source code. It makes use of the builtin module linecache, which contains functions for reading source code from files and caching the results. The inspect and traceback modules both use this module to get the source of a function.The solution is to create the function the same way as in the question, but using compile with a made-up and unique file name:linecache contains a variable cache which is a dictionary mapping file names to (size, mtime, lines, fullname) tuples. You can simply add an entry for the fake file name:The function will then work with inspect.getsource(), IPython's ?/?? syntax, and in IPython tracebacks. However, it still doesn't seem to work in built-in tracebacks. This is mostly sufficient for me because I almost always work in IPython.EDIT: see user2357112's comment below for how to get this working with traceback printing in the builtin interpreter.


Answer URL
https://docs.python.org/3/library/linecache.html
