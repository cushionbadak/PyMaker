Natural Text
I have a program using argparse. It takes 1 required positional argument, 1 optional positional argument, and 1 flag argument. Something like:So, I tried using this:Which works fine for test.py B C -a A and test.py -a A B C.But when I do test.py B -a A C, it throws an error:So, how can I get it to accept the optional positional argument to be accepted even if there is a flag in between?Note that this works if I remove the nargs='?', default=None, but then it's not optional. The problem also happens with nargs='*', but this doesn't happen for nargs=N (e.g. nargs=1, nargs=2) and doesn't happen for nargs='+'. nargs=argparse.REMAINDER makes it parse the flags as part of c (c = ['-a', 'A', 'C'], a = None)
This is a known issue, both here on SO and Python bug/issues, and doesn't have an easy fix.   https://bugs.python.org/issue15112It's the result of the basic parsing algorithm.  This trys to parse positionals up to the next optional's flag.  Then parse the flagged option (and however many arguments it needs).  Then parse the next batch of positions, etc.When the parser handles b, it can also handle c, even if there is just one string.  c requires nothing.  That means c gets 'used up' the first time it processes positionals.With c used up (even though it just gets the default), there's nothing to consume the last string.  It is an 'extra'.parse_intermixed_argsPython 3.7 has added a parsing method that solves this issue, parse_intermixed_args.  https://docs.python.org/3/library/argparse.html#intermixed-parsingIt was added as a way of allowing a flagged Action in the middle of a '*' positional. But ends up working in this case with '?' Actions.  Note the caution in the docs; it may not handle all argparse features.In effect it deactivates the positionals, does a parse_known_args to get all optionals, and then parses the extras with just the positonals.  See the code of parse_known_intermixed_args for details.


Answer URL
https://docs.python.org/3/library/argparse.html#intermixed-parsing
