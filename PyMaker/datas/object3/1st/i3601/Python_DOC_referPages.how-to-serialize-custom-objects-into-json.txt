Natural Text
I am trying to create a JSON string representation of a class instance and having difficulty. Let's say the class is built like this:A call to the json.dumps is made like this:It is failing and telling me that the testclass is not JSON serializable.I have also tried using the pickle module :And it gives class instance information but not a serialized content of the class instance.What am I doing wrong?
The basic problem is that the JSON encoder json.dumps() only knows how to serialize a limited set of object types by default, all built-in types.  List here: https://docs.python.org/3.3/library/json.html#encoders-and-decodersOne good solution would be to make your class inherit from JSONEncoder and then implement the JSONEncoder.default() function, and make that function emit the correct JSON for your class.A simple solution would be to call json.dumps() on the .__dict__ member of that instance.  That is a standard Python dict and if your class is simple it will be JSON serializable.The above approach is discussed in this blog posting:    Serializing arbitrary Python objects to JSON using __dict__
There's one way that works great for me that you can try out:json.dumps() can take an optional parameter default where you can specify a custom serializer function for unknown types, which in my case looks like First two ifs are for date and time serializationand then there is a obj.__dict__ returned for any other object.the final call looks like:It's especially good when you are serializing a collection and you don't want to call __dict__ explicitly for every object. Here it's done for you automatically.So far worked so good for me, looking forward for your thoughts.
You can specify the default named parameter in the json.dumps() function:Explanation:Form the docs (2.7, 3.6):(Works on Python 2.7 and Python 3.x)Note: In this case you need instance variables and not class variables, as the example in the question tries to do. (I am assuming the asker meant class instance to be an object of a class)I learned this first from @phihag's answer here. Found it to be the simplest and cleanest way to do the job.
I just do:This is not the full answer, and if you have some sort of complicated object class you certainly will not get everything. However I use this for some of my simple objects. One that it works really well on is the "options" class that you get from the OptionParser module. Here it is along with the JSON request itself. 
Using jsonpickle
Here are two simple functions for serialization of any non-sophisticated classes, nothing fancy as explained before.I use this for configuration type stuff because I can add new members to the classes with no code adjustments.
JSON is not really meant for serializing arbitrary Python objects.  It's great for serializing dict objects, but the pickle module is really what you should be using in general.  Output from pickle is not really human-readable, but it should unpickle just fine.  If you insist on using JSON, you could check out the jsonpickle module, which is an interesting hybrid approach.https://github.com/jsonpickle/jsonpickle
I believe instead of inheritance as suggested in accepted answer, it's better to use polymorphism. Otherwise you have to have a big if else statement to customize encoding of every object. That means create a generic default encoder for JSON as:and then have a jsonEnc() function in each class you want to serialize. e.g.Then you call json.dumps(classInstance,default=jsonDefEncoder)
Python3.xThe best aproach I could reach with my knowledge was this.Note that this code treat set() too.This approach is generic just needing the extension of class (in the second example).Note that I'm just doing it to files, but it's easy to modify the behavior to your taste.However this is a CoDec.With a little more work you can construct your class in other ways.I assume a default constructor to instance it, then I update the class dict.EditWith some more of research I found a way to generalize without the need of the SUPERCLASS register method call, using a metaclass
There are some good answers on how to get started on doing this. But there are some things to keep in mind:What if the instance is nested inside a large data structure?What if also want the class name?What if you want to deserialize the instance?What if you're using __slots__ instead of __dict__?What if you just don't want to do it yourself?json-tricks is a library (that I made and others contributed to) which has been able to do this for quite a while. For example:You'll get your instance back. Here the json looks like this:If you like to make your own solution, you might look at the source of json-tricks so as not to forget some special cases (like __slots__).It also does other types like numpy arrays, datetimes, complex numbers; it also allows for comments.


Answer URL
https://docs.python.org/3/library/json.html#basic-usage
