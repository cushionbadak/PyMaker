Natural Text
I am trying to run a particular test multiple times in ipython using the%timeit magic function. For demonstration purposes, I will just use -n1 instead of-n3 here, and use a simple print(1) function. The %%timeit and the %timeit help says the following: However, if I do the following:orit actually prints 1 7 times in a row as followsI was expecting that because of the definition of %%timeit/%timeit it wouldrun the cell or code just once.I have read this post: https://stackoverflow.com/a/45375047/4752883which gives some examples of how %%timeit runs and the actual source code of ipython magic function %%timeithere: https://github.com/ipython/ipython/blob/ec3d1a11bf26a0962cb2cf55ba263b12ac023183/IPython/core/magics/execution.py#L944where they define 2 types of loops: 1) -n<N> and 2) -r<R>. If I just use -n1, it seems that it also assumes that I have used -r7, i.e.-n1 defaults to -n1 -r7. This means that even though I want it to run forexactly 1 run, it will still run the code_block 7 times as perhttps://github.com/ipython/ipython/blob/ec3d1a11bf26a0962cb2cf55ba263b12ac023183/IPython/core/magics/execution.py#L1021unless I also specify -n1 -r1.Questions:Why are there 2 different ways to running the code_block using -n<N> and-r<R>?What is the difference between -n<N> and -r<R> and why is thisnecessary?
These parameters are also in the timeit module.-n determines how many times you run the function (or block, or whatever) inside the timing window.  So the stopwatch starts, the code is run n times, then the stopwatch ends.  You should run it enough times that the results are meaningful (timeit defaults to powers of 10 until 0.2 seconds have elapsed).-r determines how many of these repetitions (where repetition is "start timer, run n times, stop timer") you should do.  There is always some error due to your CPU scheduling other processes, etc., so usually you want to run it a few times and the best value of these r times is taken.  (timeit defaults to 3, and the comments in the source you link indicate that ipython does the same -- but the actual code may disagree).In pseudo-python, you can see how n and r affect the timing process:


Answer URL
https://docs.python.org/3/library/timeit.html
