Natural Text
So, in Python 2 it was clear. But in Python 3 I'm a little bit confused.True, False and None are present in both the builtins module and the keywords module. Then how should I treat them? As a builtin classes or as a keywords?
They are reserved words and built-in values. From the Python 3 What's New:True, False, and None are reserved words. (2.6 partially enforced the restrictions on None already.)This means you cannot use them as names, assigning a different value to them. This prevents accidentally masking the built-in singleton values:Also see Guido van Rossum's history lesson on None, True and False:I still forgot to answer whether None/True/False are literals or keywords. My answer is that they are both. They are keywords because that's how the parser recognizes them. They are literals because that's their role in expressions and because they stand for constant values.With True, False and None classified as keywords, the Python compiler can actually optimize their use, since you cannot (directly) rebind these names  Python can look them up as constants instead of globals, which is faster. Until Python 3.4 there were still some corner cases where the compiler would issue a global lookup for these objects, see issue 16619. From Python 3.4 onwards the Python parser has been extended to produce a new AST node NameConstant to ensure that they are treated as constants everywhere. 


Answer URL
https://docs.python.org/3/whatsnew/3.0.html#changed-syntax
