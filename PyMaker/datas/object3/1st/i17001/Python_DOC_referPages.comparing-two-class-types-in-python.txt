Natural Text
I have two classes defined in a module classes.py:And in another module I am getting the attributes of the module:Both type comparison are returning True and that's not what I was expecting.How can I compare class types using python's native type values?
ExplanationThis is why your comparison doesn't work as expectedBut why do ClassA and ClassB have the same type type? Quoting the docs:By default, classes are constructed using type(). The class body is  executed in a new namespace and the class name is bound locally to the  result of type(name, bases, namespace).Example:Getting the type of ClassB is exactly the same as getting the type of type('ClassB', (), {}), which is type.SolutionsCompare them directly (w/out using the type() function):or initialize them and compare the types of their objects:FWIW you can also use is in place of == (for classes).
You're comparing the type of the class object, which are all of type 'type'.If you just want to compare the classes, compare them directly:
If you want to check if types are equal then you should use is operator.Example: we can create next stupid metaclassand then class based on it:in Python 2in Python 3then simple checkreturns False, while next check returns expected True valueSo as we can see == operator can be overridden while there is no simple way to change is operator's behavior.
In addition to the other answers : Python uses the concept of metaclasses, which are basically "classes of classes". That means, even a Class is an object in Python, which has its own class - accessible using the type in-build function.Because ClassA and ClassB are by default instances of the same metaclass, the comparisons return True.If you'd like to know more about metaclasses, this SO post is a good start.


Answer URL
https://docs.python.org/3/reference/datamodel.html#customizing-class-creation
