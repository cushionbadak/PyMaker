Natural Text
I have a list of 6 elements L = ['a', 'b', 'c', 'd', 'e', 'f'] and would like to generate all possible 4 letter combinations - including duplicate values.i.e ['a', 'b', 'c', 'd'] as well as ['a', 'a', 'a', 'a'] and ['a', 'a', 'b', 'b'], etc.So far I have been using import itertools: p = list(itertools.permutations(L, 4)). (Python 2.7.6)However, this is only giving me the 360 unique combinations, rather than the 1296 that I want.Thanks!!
This is a cartesian product of 4 copies of the list. You want itertools.product:
One can solve this in at least 3 ways.Using nested loopUsing list comprehensions Using itertools.product()Let's see how to use these and deep into the time performance of these:Output:So, comparing the ways we see that itertools.product() is simpler and effective than the others.N.B.: The code is run in https://codepad.remoteinterview.io/. Performance may vary.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/library/itertools.html#itertools.product
