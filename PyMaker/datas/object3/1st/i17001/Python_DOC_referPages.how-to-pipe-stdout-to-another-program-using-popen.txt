Natural Text
Apologies if this question has been asked before, I've googled a bunch and haven't found an answer to it.I have a sequence of system calls that a script I'm writing makes, one of which is of the following form:In essence, outing a file to standard out which is piped to some program, which then runs on it and puts the output to some other file. The usage of /some/program in this case is pretty inflexible, I have to cat a file into it and use the argument o > some_out_file in order to use it.Passing the shlex.split() of that line to the args of popen() just prints file, the binary of /some/program, and output.txt if it exists, which is obviously not what I'm looking for.I'm fairly new to using this part of python in general so sorry if the answer is obvious, and if there's some other way of making this system call rather than trying to used subprocess.popen() or the like I'm open to this as well, and any help is appreciated!Alternatively I could just call os.system(...) for this but for consistency's sake with the rest of the script I'd rather not use a specific exception in this case.
Is this what you are looking for?Popen.communicateInteract with process: Send data to stdin. Read data from stdout and stderr, until end-of-file is reached. Wait for process to terminate. The optional input argument should be a string to be sent to the child process, or None, if no data should be sent to the child.This is similar to calling cat file | head -n 10 > out.txt 
To emulate < file /some/program o > output.txt shell command in Python:To answer the question in the title, you could use "Replacing shell pipeline" example from the docs:If the shell command comes from a trusted input, you could use shell=True to create a pipeline:


Answer URL
https://docs.python.org/3/library/subprocess.html#replacing-shell-pipeline
