Natural Text
I'm trying to do a matching using python.I have a list of string (len~3000), and a file, and I want to check if for each line in the file, it has at least one of the strings in the list.The most straight forward way is to check one by one, but it takes time (not that long though).Is there a way that I can search that faster?For example:
You can use any and a generator expression:The above code will test if any items in lst can be found in line.  If so, # Do stuff will be run.See a demonstration below:
This is actually a good use case for using regular expression engine with an automatically-created regular expression.Try:Regular expression will be faster than simple linear scan of every string to match for every line. This is for two reasons: regular expressions are implemented in C, and regular expressions are compiled into a state machine that examines each of the input characters just once, instead of several times as in a naïve solution.See comparison in an IPython notebook: http://nbviewer.ipython.org/gist/liori/10170227. Test data consists of 3000 strings to match over a list of 1 million lines. Naïve approach took 1min 46s on my machine whereas this solution was just 9.97 s.
You could use itertools.groupby:If your patterns are all single character strings, you can optimize this further using a set:Which will result in an iterable similar to(Except it will be a generator, not a list.) That's the major logic of it. What follows is one way of iterating over that preprocessed generator to product output.
More involved but much faster: pre-process your list of strings into a prefix trie.Then, for each file line, starting at each character position, see how far you can walk into the trie.If you kept a queue of all active tries, you only have to look at each character-position once as you scan through the line. You could also include a "minimum terminal depth" counter at each trie-node to allow you to truncate comparison early once you get near the end of the string.A simpler half-step would be to reduce your big list of strings to a dict of lists of strings, indexed by the first three chars of each string you are looking for.


Answer URL
https://docs.python.org/3/library/functions.html#any
