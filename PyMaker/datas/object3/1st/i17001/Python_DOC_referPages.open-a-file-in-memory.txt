Natural Text
(I'm working on a Python 3.4 project.)There's a way to open a (sqlite3) database in memory :Does such a trick exist for the open() function ? Something like :The idea is to speed up some test functions opening/reading/writing some short files on disk; is there a way to be sure that these operations occur in memory ?
There is something similar for file-like input/output to or from a string in io.StringIO.There is no clean way to add url-based processing to normal file open, but being Python dynamic you could monkey-patch standard file open procedure to handle this case.For example:after that you can writeNote that this example is very minimal and doesn't handle all real file modes (e.g. append mode, or raising the proper exception on opening in read mode an in-memory file that doesn't exist) but it may work for simple cases.Note also that all in-memory files will remain in memory forever (unless you also patch unlink).PS: I'm not saying that monkey-patching standard open or StringIO instances is a good idea, just that you can :-DPS2: This kind of problem is solved better at OS level by creating an in-ram disk. With that you can even call external programs redirecting their output or input from those files and you also get all the full support including concurrent access, directory listings and so on.
How about StringIO:python3: io.StringIO
io.StringIO provides a memory file implementation you can use to simulate a real file. Example from documentation:In Python 2, this class is available instead as StringIO.StringIO.


Answer URL
https://docs.python.org/3/library/io.html
