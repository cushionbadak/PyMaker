Natural Text
so this is a collection of questions that are more to clarify things and help better understand rather than an issue I am having.I apologise now if I got things wrong or if these questions have been answered before. I wasn't able to find them.First clarification I want to ask is:Let us assume:First,  I have noticed that you cannot in general access a module in a package by doing import package and then trying to access package.module.For example scipy.ioYou often have to do import package.module or even import astropy.io.fits, or you can do from package import module.My question is why is this the case, and why is it so random -dependent on the package? I can't seem to identify any stable pattern.Is it due to the fact that some of these libraries (packages) are very big and in order to not have memory problems it only imports the core attributes/modules?The second question:It relates to actually checking the size of these packages. Is there any way to see how big they are when imported? Any way of knowing what will work and what won't other than trying it? I guess I could check with sys.modules and try to obtain it from there?The third and final question:In the scenario that I am not running my code on a Raspberry Pi and I don't necessarily have to worry about the memory issue (if that is the reason why they don't allow direct access), is there any way of actually importing package, such that it also loads all the sub packages?I am just being lazy and wondering if it is possible. I am aware that it isn't good practice, but curiosity killed the cat.Just to update and make it accessible to people to see related questions I have looked at:This answer gives good advice on good general practice:What are good rules of thumb for Python imports?Why can't I use the scipy.io? just like the documentation explains why the subpackage isn't necessarily importedThen there is obviously the documentation:https://docs.python.org/3/reference/import.html#packagesSection 5.2.1 is the reason why import scipy doesn't also import scipy.io, but I was wondering why would developers not make it an automated process.This question is actually similar to part of my question but doesn`t seem to have a clear answer Python complex subpackage importingStatus of Questions:Question 1: Good reason in answersQuestion 2: PendingQuestion 3: Pending
Answer Q1When you import a package, especially large ones like SciPy, it uses the init.py module intialisation module which prevents all subpackages/modules from being imported automatically to save space. I won't go into this further as this is already mentioned in this question, documented here, and talked about in other answers.Additionally, if you have questions about scripts vs. modules, this post is incredibly descriptive.Answer Q2To find the size of a package I would point you towards this post about finding package directories, and then this post about reporting the size of a particular directory. You could create some combined code to do both for you.Answer Q3Update: Unsure on how to do this as the normal from package import * works as explained in the documentation (similar to Q1):if a packageâ€™s __init__.py code defines a list named __all__, it is taken to be the list of module names that should be imported when from package import * is encountered
A package is represented by the file __init__.py. Therefore, the packge scipy is represented by scipy/__init__.py. Inside this file you see a lot of imports like this:This is the reason why scipy.__version__ works, even though __version__ actually lives in scipy.version. Not all packages do this. There is no rule when such kind of behavior can be expected. It is totally up to the package author(s). 
The key difference between these import calls is the namespace the module is imported into. Given the following example:The first example imports everything exposed by __init__.py into the package's namespace. I.E. its elements can be accessed as mypackage.myclass(). The second example imports only mypackage.myclass and still imports it into that package's namespace, so it is still accessed as mypackage.myclass(). The third example imports mypackage.myclass into the current namespace, so it is accessed explicitly as myclass(), as if you had defined it yourself in the same script. This may hide things that you have named elsewhere.One other important use case looks like this:This lets you set the namespace that you want that package to be imported into, perhaps making it a shorthand or something more convenient.In the case of  your question about why scipy doesn't import everything when you call import scipy, what it comes back to is that that import call only imports whatever the developers tell it to in the __init__.py. For scipy specifically, if you do: You will see that it imports a bunch of classes and functions that are used throughout the package. I suspect that they intentionally don't import the submodules so as not to litter your runtime space with things that you aren't using. Perhaps there is a way to import everything automatically, but you probably shouldn't.


Answer URL
https://docs.python.org/3/reference/import.html#packages
https://docs.python.org/3/tutorial/modules.html#packages
https://docs.python.org/3/reference/import.html#packages
