Natural Text
I want to implement in python a simple model for optical propagation. The rule is that if I chain three elements m0 -> m1-> m2 what I would get as system is:tau = tau0 * tau1 * tau2B = B2 + B1*tau2 + B0*tau2*tau1(tau is transmission, B is background).I wanted to implement overloading the __gt__ operator such that I can declare:So far I wrote this:However this code seems only to get the transmission and background of the rightmost elements:Returns 0.56, while I am expecting 0.504.Background behaves the same, I am getting 19.7 instead of 25.3 (first element ignored).Do you guys have any idea on how to implement several chained elements using the operator overloading? (putting parenthesis works, but I wanted to have cleaner code).Thanks!Andreu
m0 > m1 > m2 is equivalent to (m0 > m1) and (m1 > m2).As m0 > m1 will be considered True, and will test m1 > m2 and return its value, which is the 0.56 you get.You could use the multiplication operator, which will work as expected:
The way chained comparisons work is that m0 > m1 > m2 is evaluated as (m0 > m1) and (m1 > m2), which results in m1 > m2, as x and yreturns y if x is truish.So this is the reason why your code seems only to get the rightmost comparison.Instead, you can dox = (m0 > m1) > m2.which evaluates both > operators in the given order.This results in 


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__rshift__
