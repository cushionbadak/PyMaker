Natural Text
EDIT: The reason that the :root: was appearing was because I typed logging.error(...) instead of logger.error. This caused the program to default to handler root. This changed the general formatting which includes the handler name. Correcting to logger and just adding the error name to the message seems to create the correct output.OLD TEXTWith the logging package I am trying log a custom error. When doing so the error message shows up, but the custom error exception appears to show up as root. For example a simple case is shown below running on python 3.6.6 Input looks like:Output looks like:What I am trying to understand is why it shows up with :root:, and if there is any way to have it show up instead with :FailedToDoSimpleTaskError: ?
As you stated in your edit, if you correct logging.error(err) with logger.error(err) you get the correct output __main__ - ERROR - It was a good attempt though.The reason for root appearing in your message is explained under logging documentation. In that documentation you can find out about changing the format of displayed messages.Since you did use logging.error(err) you were not invoking logger which had specified the format you wanted. Hence the root word appeared. You should have also noticed that when using logging.error(err) you would get the message on the console and not added to your log file. And if you try to use logging.info no message would have been written to the console, as the defaul log level is WARNING and the level you had set as INFO was for the HANDLER named logger. So if you try for example logging.info("Info test") nothing would appear in the log console nor in your log file. However using logger.info("Info test") you would get the message "Info test" written in your log file.


Answer URL
https://docs.python.org/3/howto/logging.html
https://docs.python.org/3/howto/logging.html#changing-the-format-of-displayed-messages
