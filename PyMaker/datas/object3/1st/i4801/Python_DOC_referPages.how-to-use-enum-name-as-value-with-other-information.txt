Natural Text
I've researched this and found similar answers, but they don't work in this case because auto() is resolved earlier than __new__ is called and only if the whole value is _auto_null.Basically, what I want is the following:However, the name isn't passed into __new__ so there's nothing to fill in <NEED NAME HERE> with.Then, I tried to use auto() in the following way:This doesn't work because auto() is only resolved when used as the sole value when defining a member, as in one = auto().  So it seems it's not even possible to do one = auto(), '1 data' and then take both of those parameters in the __new__ function.  It seems my only option is to hardcode the name:and define the __new__ function to take two params:Am I missing something? Is there a better way to do this? A better way to structure this information? 
This is definitely advanced behavior, so to use it you'll need the aenum1 library instead.That code will look like:The init setting says what the given values should be used for; in this case:the value for each memberthe data attribute for each memberAutoValue instructs aenum to create a value if one is missing -- since each member is only being provided with one piece of information, and init says there should be two, AutoValue will attempt to provide the missing piece._generate_next_value_ is (one of) the mechanism(s) used to do so, which in this case adds the name to the given data, which is then passed into __new__.__new__ uses the name as it's value and ignores the rest__init__ is automatically generated to handle the non-value items, so it sets the data attributeFor those still using Python 2.7, or need their code to work for 2.7 as well 3.x, the above class should look like this (all changes are in the first block):1 Disclosure:  I am the author of the Python stdlib Enum, the enum34 backport, and the Advanced Enumeration (aenum)  library.


Answer URL
https://docs.python.org/3/library/enum.html
