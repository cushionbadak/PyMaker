Natural Text
The following question is on python 3.6. Suppose I have lists of sets, for example     I need to find all the intersection sets between each element of L1, L2, and L3. E.g.:      ...............................   If we keep doing like this, we end up with the following set:      {{empty},{2},{3},{6},{7},{2,3},{2,5},{2,6},{2,8},{3,7},{4,7},{6,7}}Suppose:        - I have many lists L1, L2, L3,...Ln. And I do not know how many lists I have.        - Each list L1, L2, L3..Ln are big, so I can not load all of them into the memory.My question is: Is there any way to calculate that set sequentially, e.g., calculate between L1 and L2, then using result to calculate with L3, and so on...
You can first calculate all possible intersections between L1 and L2, then calculate the intersections between that set and L3 and so on.Output looks like {frozenset({7}), frozenset({3, 7}), frozenset({3}), frozenset({6}), frozenset({2, 6}), frozenset({6, 7}), frozenset(), frozenset({8, 2}), frozenset({2, 3}), frozenset({1, 7}), frozenset({4, 7}), frozenset({2, 5}), frozenset({2})}, which matches what you have except for the {1,7} set you missed.
You can use functools.reduce(set.intersection, sets) to handle variable inputs. And itertools.product(nested_list_of_sets) to generate combinations with one element from each of several sequences.By using generator functions (yield) and lazy iterators such as itertools.product, you can reduce memory usage by orders of magnitude.Output is Online demo on repl.it
This may be what you are looking for:Explanationfrozenset is required because set is not hashable. Dictionary keys must be hashable.Cycle through every length-3 combination of items in L1, L2, L3.Calculate intersection via & operation, equivalent to set.intersection.


Answer URL
https://docs.python.org/3/library/functools.html?highlight=functools#functools.reduce
https://docs.python.org/3/library/itertools.html#itertools.product
