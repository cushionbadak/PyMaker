Natural Text
I have this code, that will print all the permutations of a list : Now I want to return this result instead of printing it, and the best way I found to do this is to store what's printed in a file, and then to read the file, extract the data and put it back in a list that I return : The problem is : this makes the code a lot longer, and at least 3 times slower, since I store all the permutations in the file, and then I have to go again through each permutation to store it back in a list.I tried to solve this problem by using global variables, or by passing the result list as parameter in the function, but it doesn't work (because of the recursion).The following codes aren't working :list as parameterglobal variablesFirstSecondThese three bad codes pretty much all do the same thing : they returns a list containing n! times the first permutation.Is there a way to solve this problem, or do I have to go with the code with the file ?EDIT : After the comments of @DavidKemp and @uwain12345, I tried using a Class.However I still get the exact same result as the codes above that were not working (n! times the first permutation).
Your problem is that mutating the list iterable is a bad strategy.  Changes made to iterbale will always be reflected, because they are all the same object.  If we use tuples instead, we can avoid this.  Here's the recursive permutation code I came up with:
Unless this is an exercise, I recommend you follow Patrick Haugh's advice and use itertools.permutations. However, if you still insist on rolling your own then instead of print, use the yield keyword:Output:NotesThe yield statement will "return" one item at a time, but does not exit the function. This function returns a generator, so please read up on Python generators to learn more about it.Consider the following block:if you are using Python 3, you can replace that block with 


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.permutations
