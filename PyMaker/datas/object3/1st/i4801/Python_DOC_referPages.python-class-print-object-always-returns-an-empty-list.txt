Natural Text
I have the following code:Intuitively, this code should print [1,2,3] or maybe [3]? but definitely not []. I am wondering why is this happening? Although when I use m.lst instead of just m, then it prints [1,2,3]. 
As MyList inherits from list, it already contains internal storage for items that append (and extend) would normally add to. When you print(m) it is this internal storage that is shown.In your case you have then overridden append to redirect items to be added to a separate attribute (lst), meaning that internal storage remains empty.Note that you have not overridden extend.  Thus:
Mylist doesn't in any way utilize the fact that it's subclassing list. Your code would work if list actually had a lst attribute that itself was a list, but this is not the case. You need to use the exposed interface of the list object that you inherited from if you want your overridden methods to do things that are picked up by the underlying list object:
If you just want to use a list, you don't need to inherit from list, and shouldn't:This works. Of course printing out m will just get you something like <__main__.MyList at 0x12345678>, because you haven't told it how you want to be printed. You need to add another method like this:And now you'll print out MyList([1, 2, 3]).If you want to look like a list, you still don't inherit from list for that. In most cases, in Python, "looking like a list" is just a matter of duck-typing: you implement all the right methods, and everything just works.However, you might want to consider inheriting from MutableSequence. Then, you just implement about 7 or 8 methods, and you get the whole rest of the list's behavior for free. And you're also providing a way that code that, for whatever reason, needs to explicitly check whether you "act like a list" can do so.So, when should you inherit from list? When you want to use the list's internal storage and implementation as your own.Here's a silly example. To the extent that it has any reason to exist at all, it's reasonable that it should be a list subclass:


Answer URL
https://docs.python.org/3/library/collections.abc.html
