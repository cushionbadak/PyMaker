Natural Text
I looked through the internet and couldn't really get an answer, if I have a process that is heavy on CPU usage, and I would like to present a progress bar while it's running (so the program will not get in the state of "not responding") on another thread probably, how do I do that?
The solution should be something like:You have at least 2 threads, threadA and threadB.ThreadA is the thread that calls mainloop() and where the progress bar lives.ThreadB is the thread where your heavy process do his stuff.When every thing starts:ThreadB put a message in a shared queue.(this way ThreadB tells ThreadA it is not in "not responding" state)ThreadA get the message from the shared queue and updates the progress bar(this way ThreadA tells the user that ThreadB is not in "not responding" state)This is a very general solution pattern.If you try to write down some code that implements this pattern, post it and I will try to help.Here some reference: for the threads: https://docs.python.org/3/tutorial/stdlib2.html#multi-threadingfor the shared queue: https://docs.python.org/3/library/queue.html#module-queueEDITHere a complete example of the general solution.I hope this helps.
This is a primitive progress bar implementation with an indefinite mode of operation. It does not run in a thread as it really should. If you integrate this in a thread that is NOT doing the heavy lifting, and send a stop message to this thread, then the process will stop. This example uses a timer to stop the progress bar, but you can use any event just as well.


Answer URL
https://docs.python.org/3/tutorial/stdlib2.html#multi-threading
https://docs.python.org/3/library/queue.html#module-queue
