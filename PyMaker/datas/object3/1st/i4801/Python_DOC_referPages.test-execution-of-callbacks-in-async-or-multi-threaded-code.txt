Natural Text
I need to check that certain operations have occurred in a particular order in threaded/asynchronous code. Something along the lines of:I can provide test callbacks that will be invoked by the operation, but I cannot place py.test assertions inside them because I need to test the overall order of their execution, not the state of any individual callback. Also, some of the callbacks are executed in separate threads which are not under the control of py.test.To test such code, I came up with the following pattern:Is there an idiomatic way to express this in py.test? For example, a callable fixture that automatically logs its invocations, so that I can query the invocations in my tests.If concrete examples are needed, this file is an example, as are other files in the same directory.
It might not be necessary for pytest to have a specific functionality as I think, the standard Python unittest module would suffice.You can make use of Mock objects that track calls to themselves as well as to methods and attributes, reference. You can combine it with assert_has_calls() by building the list of calls you expect and want to test. It also allows to test for the specific order of the calls by default through the any_order=False param.So by patching your module adequately and passing Mock objects instead of callbacks in your tests you will mostly be able to create your tests.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.method_calls
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_has_calls
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.call
