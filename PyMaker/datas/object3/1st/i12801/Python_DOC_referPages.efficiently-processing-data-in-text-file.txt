Natural Text
Lets assume I have a (text) file with the following structure (name, score):And so on. My aim is to sum the scores for every name and order them from highest score to lowest score. So in this case, I want the following output:In advance I do not know what names will be in the file.I was wondering if there is an efficient way to do this. My text file can contain up to 50,000 entries.The only way I can think of is just start at line 1, remember that name and then go over the whole file to look for that name and sum. This looks horribly inefficient, so I was wondering if there is a better way to do this.
Read all data into a dictionary:and the sorting:prints:PerformanceTo check the performance of this answer vs. the one from @SvenMarnach, I put both approaches into a function.  Here fobj is a file opened for reading.I use io.StringIO so IO delays should, hopefully, not be measured:Results for collections.Counter:Results for collections.defaultdict:Looks like defaultdictis four times faster. I would not have guessed this. But when it comes to performance you need to measure. 
This is a good use case for collections.Counter:
Pandas can do this fairly easily:


Answer URL
https://docs.python.org/3/library/collections.html#defaultdict-examples
