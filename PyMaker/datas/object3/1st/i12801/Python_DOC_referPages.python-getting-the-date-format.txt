Natural Text
This question already has an answer here:How to determine appropriate strftime format from a date string?                    3 answers                I'm getting a date as a string, then I'm parsing it to datetime object.Is there any way to check what's is the date format of the object?Let's say that this is the object that I'm creating:How can i print or get the exact date format of this object, i need this in order to verify that it's in the correct format, so I'll be able to to make a diff of today's date and the given date.
I had a look in the source code and, unfortunately, python dateutil doesn't expose the format.  In fact it doesn't even generate a guess for the format at all, it just goes ahead and parses - the code is like a big nested spaghetti of conditionals.  You could have a look at dateinfer which looks to be what you're searching for, but these are unrelated libraries so there is no guarantee at all that python-util will parse with the same format that dateinfer suggests.  Look at that .601.  Close but not cigar.  I think it has probably also mixed up the month and the day.  You might get better results by giving it more than one date string to base the guess upon.
i need this in order to verify that it's in the correct formatIf you know the expected time format (or a set of valid time formats) then you could just parse the input using it: if it succeeds then the time format is valid (the usual EAFP approach in Python):Here's a complete code example (in Russian -- ignore the text, look at the code).If there are many valid date formats then to improve time performance you might want to combine them into a single regular expression  or convert the regex to a deterministic or non-deterministic finite-state automaton (DFA or NFA).In general, if you need to extract dates from a larger text that is too varied to create parsing rules manually; consider machine learning solutions e.g., a NER system such as webstruct (for html input).


Answer URL
https://docs.python.org/3/glossary.html#term-eafp
