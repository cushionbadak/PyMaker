Natural Text
I am wondering if there is a more elegant/pythonic way to do the following. Suppose I have a nested dictionary:and I want to obtain a list containing the unique 'food' items for each person, I.e. ['pizza', 'taco']is this the easiest way to do it?
Use a set comprehension. If the values for food are a list or a tuple you can use a nested loop in the set comprehension. You can even use operator.itemgetter as mentioned by Padraic. Similarly if the values for food are a list, you can use chain. 
If you get a list of food instead of a single food:
If the values you're collecting are "immutable", you can use a set comprehension to collect the different ones. @BhargavRao already suggested this, but here's a cleaner solution:You also ask (in a comment) about what to do if the values are lists. If a value is ["pizza", "taco"], I assume you want "pizza" and "taco" in the set, not ["pizza", "taco"] as an element. It's a bit tricky if some elements are lists and some are strings (poor design; it's better to have lists everywhere, even if it's just one element), so I'd do it stepwise, like this:
You can use defaultdict- It addresses the list value.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#sets
https://docs.python.org/3/library/operator.html#operator.itemgetter
https://docs.python.org/3/library/itertools.html#itertools.chain
