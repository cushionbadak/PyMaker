Natural Text
Assume we have a function f(x,y) and another functionWe want to write a Unit test that checks whether f is called the number of times and with the right parameters.There isbut this only refers to the last call. So assuming g calls f(1,2) and then f(2,3), function.assert_called_with(1,2) is False.Furthermore, there iswhich yields a list of call objects with the right parameters. Comparing this list to call object that we create in the unit test feels like a very nasty thing to do. call seems like an internal class of the mock library.Is there a better way to do this? I use this set-up to test parallel execution of an apply function.
Even @MartinPieters's answer is correct I think that is not the best way to do it. Mock provide assert_has_calls to do this kind of duties.Your test could be:Where mock.call is a helper class do to these kind of jobs.Pay attention that is a has call and means the call list should be in the list of call and not equal. To solve it I usually define my own helper assert_is_calls() as followThat a resume example
Test if the Mock().mock_calls list is equal to a list of mock.call() objects you provide:This gives you precise control, requiring both the order and the number of calls to match.The mock.call() class is not internal, it is meant to be used for assertions like these.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_has_calls
https://docs.python.org/3/library/unittest.mock.html#call
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.mock_calls
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.call
