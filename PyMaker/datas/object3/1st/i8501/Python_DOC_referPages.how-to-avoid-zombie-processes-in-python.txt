Natural Text
In Python3, I have essentially the following code:server.py:client.py:When I start the server and then the client, each time the client finishes a zombie process remains. How to change the code so that no zombie process remains?
The usual technique is to track all the child pids so that they can be killed when the main process exits or whenever you want the children to be cleaned-up.  You can periodically poll and reap processes as needed or wait until you're about to exit.For an example of how to do this, look at the collect_children() code in the ForkingMixin for the SocketServer module.The os module has a number of tools for managing the subprocesses like os.wait() and os.kill.I don't know whether it fits your problem or not, but a multiprocessing.Pool() may be of some help.  It automatically manages a pool of subprocesses and reuses them for future tasks.  It is mainly helpful when there is only limited data exchange between the processes and whether the work is relatively homogenous (all the child processes are doing the same kind of work).
When a process exits, it remains in the process table until something reads its return code. Assuming this is linux, you could make it a daemon and have the init process deal with it. But you could also just call os.waitpid yourself. Here is an example of a class that waits for pids in the background. Its nice becaue it keeps your program from exiting until its fully tidied itself up. You could expand it to do things like sending kill signals to child processes, logging results, and etc.


Answer URL
https://docs.python.org/3/library/subprocess.html
