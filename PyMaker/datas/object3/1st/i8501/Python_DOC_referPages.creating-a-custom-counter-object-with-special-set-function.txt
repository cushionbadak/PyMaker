Natural Text
From Adding a single character to add keys in Counter , @AshwiniChaudhary gave an excellent answer to create a new Counter object with a different set() function: To allow user-defined char/str to append to the key, I've tried:But it's returning an empty Counter:That's because I'm missing the iter in the __init__():[out]:But the value for 'bar' is wrong, it should be 2 instead of 1. Is using iter to the __init__() the right way to initialize the Counter?
As pointed out inFelix's comment,collections.Counterdoes not document how its __init__ method adds keys or sets values, only that it does.Since it is not explicitly designed for subclassing, the wisest thing to do is not subclass it.Thecollections.abcmodule exists to provide easily-subclassed abstract classes of Python's builtin types, including dict(MutableMapping, in ABC terms).So, if all you need is "a Counter-like class"(as opposed to "a subclass of Counter that will satisfy builtins like isinstance and issubclass),you can create your own MutableMapping that has-a Counter, and then "middleman" the initializer and the three methods that Counter adds to the typical dict:Output (line-wrapped, for ease of reading):I added a keyword-only argument to the initializer, mutator, to store the function that converts real-world whatevers to the "mutant" counted versions.Note that this likely means that CustomCounter no longer stores "hashable objects", but "hashable objects that don't make the mutator barf".Also, if the standard library's Counter ever gets new methods, you'll have to update CustomCounter to "override" them.(You could maybe work around that by using__getattr__to pass any unknown attributes to self._counter, but any keys in the arguments will be handed to the Counter in their raw, "un-mutated" form.Finally, as I noted before, it's not actually a subclass of collections.Counter, if other code is specifically looking for one.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.abc.html
https://docs.python.org/3/reference/datamodel.html#object.__getattr__
