Natural Text
Today itself I ran the code given below in Python 2.7.13 and found that the list size isn't 0 when it is empty:Output on my Machine:I want to know why is this happening?It seems that Python is reserving memory for something.  What is that something??
Because the size of the list, as returned from sys.getsizeof, doesn't include only the elements that list contains. Every object in Python is represented by a C-struct; this struct contains pointers to all the things that make the list a list (its methods, mainly). It's also taken into consideration when sys.getsizeof is invoked. You can always take a look at the implementation of list.__sizeof__ in the master branch of the CPython repository on GitHub:(Trimmed off unrelated arg clinic output.)The sizeof function for 2.x does the same thing.The return value res also includes the size of the list object type _PyObject_SIZE(Py_Type(self)).Since everything in Python is an object, this behavior can be observed everywhere, e.x, integer 0:while you wouldn't normally expect this, it makes perfect sense when you realize everything in Python has "additional baggage" which allows behavior we take for granted.
Python is implemented in C, and as such will be storing data in a C struct.Remember that all things are 'objects' - objects must have a type and an object size, even if they don't store anything.Below are the PyObject_VAR_HEAD and PyListObject C datatypes.Remember that sys.getsizeof() will return the underlying memory usage, not something that you really need to consider or worry about from Python:Return the size of an object in bytes.Only the memory consumption directly attributed to the object is accounted for, not the memory consumption of objects it refers to.Additionally, as your test shows, there is an amount of pre-allocation going on. New memory is not associated with the list on every call to append().


Answer URL
https://docs.python.org/3/library/sys.html#sys.getsizeof
