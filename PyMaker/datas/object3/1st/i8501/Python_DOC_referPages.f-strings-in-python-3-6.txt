Natural Text
I really like to delve into code style and it's interesting to know whether from now on in all cases it would be better to use the new style.I'm using a lot the .format() in my Python 3.5 projects, and I'm afraid that it will be deprecated during the next Python versions because of this new kind of string literals. Does the formatted string feature come to fully replace the old format() ?I understand that it based on the idea that: Simple is better than complex.However, what about performance issues, does any difference exist between them? Or it's just an simple look of the same feature?
I'm afraid that it will be deprecated during the next Python versionsDon't be, str.format does not appear (nor has a reason) to be leaving any time soon, the PEP that introduced fprefixed-strings even states in its Abstract:This PEP does not propose to remove or deprecate any of the existing string formatting mechanisms.Formatted strings were introduced to address some of the shortcomings other methods for formatting strings had; not to throw the old methods away and force god-knows how many projects to use f-string's if they want their code to work for Python 3.6+.As for the performance of these, it seems my initial suspicion that they might be slower is wrong, f-strings seem to easily outperform their .format counterparts:These were done against the master branch of the CPython repository as of this writing; they are definitely subject to change:f-strings, as a new feature, might have possible optimizations Optimizations to CPython might make .format faster (e.g Speedup method calls 1.2x) But really, don't worry about speed so much, worry about what is more readable to you and to others.In many cases, that's going to be f-strings, but there's some cases where format is better. 
To build on Jim's answer and address your performance concern, I used python's dis module to compare the bytecode instructions for two syntactically different, but functionally equivalent functions.The result of which is:One can see that the f-string handles the formatting without attribute or function calls, which can impose type checking and memory overhead. According to timeit this results in a roughly 3x performance gain (for my specific functions)
One thing not mentioned (which makes deprecation of the old techniques impossible) is that interpolation is for string literals only.  Meaning, the string is rendered once at runtime.  The template can not be used again with updated variables, for example:Another case is i18n, where string.Template is used.  Many use cases would be impossible without the older techniques.  Enjoy string interpolation, but don't use it where it is not appropriate, i.e. places where you need a reusable template.
If you want to keep supporting python 3.5 you could use fstringpip install fstring


Answer URL
https://docs.python.org/3/library/dis.html
