Natural Text
I needed to create an enum to represent the ISO country codes. The country code data comes from a json file which can be obtained from: https://github.com/lukes/ISO-3166-Countries-with-Regional-CodesSo what I've done is:This code snippet is frankly ugly. I looked at alternative ways to define the enum class but couldn't piece together a solution. Is there a way to define the enum in the following form:Any suggestions on how to do this?
How about this?Replaced [...data[i]... for i in range(len(data))] with [...x... for x in data]; You can itearte sequence (list, data in the code) without using indexes.Used CountryCode.attr = ... consistently; instead of mixing CountryCode.attr = ... and setattr(CountryCode, 'attr', ...).
Update  For a general json-to-Enum solution check out When should I subclass EnumMeta instead of Enum?.It looks like you are trying to keep track of three pieces of data:country namecountry codecountry 2-letter abbreviatonYou should consider using a technique inspired by a namedtuple mixin as illustrated in this answer:The stdlib wayWe'll need a base class to hold the behavior:Then we can use that to create the actual Country class:The aenum way 1 2While I included the choices method, you may not need it:1 Disclosure:  I am the author of the Python stdlib Enum, the enum34 backport, and the Advanced Enumeration (aenum)  library.2 This requires aenum 2.0.5+.
Yes, there is a way to define the enum using the alternate declaration syntax you want. It works by hiding the "ugly" code in a metaclass derived from enum.EnumMeta. If you wished, it would also be possible to define the choices() class method there, too.


Answer URL
https://docs.python.org/3/library/enum.html
