Natural Text
I am looking for a way to render a variable that will be available in the context of the the page where the cms page will be rendered.Ex:I have in the context the logged in user and I also have the last transaction he made on the website.I would like the text in the rich text field in Wagtail to be like this so that the marketing team can tweak the copy.Hello ||firstname|| thanks for your purchase. ||productname|| will be  shipped to you soon. The expected delivery date is  ||expected_delivery_date||To be less confusing I replace the double brackets by double pipes to show that the templating system does not need to be django templates for those ones. Simple templating is enough maybe using https://docs.python.org/3.4/library/string.html#template-stringsI think I can achieve this by doing:A stream field that would have blocks of rich text field and a custom block with the possible context variable they can useA custom render function that would regex and replace the merge tags in the rich text block with the context valuesCreate a new filter for simple templating. ex: {{ page.body|richtext|simpletemplate }}Is there any more obvious way or out of the box way to do templating from within a rich text field?
It would be clunky with a separate streamfield block for each inserted context variable. You'd have to override the default rendering which wraps elements in div tags. However I like that it is more foolproof for the editors.I've done something like the custom rendering before, but with simple TextFields for formatting special offer code messages. Wagtail editors were given the following help_text to illustrate:This rendered as Valid placeholder values are: offer_code, month_price. Write as {{offer_code}}.Then in the view:â€¦and continued rendering from there. Remember to validate the field appropriately using the above Formatter().parse() function too.I used Django's template formatting rather than Python's string.format() because it fails silently, but you could go with string.format() if cleaned adequately.The custom template filter would feel easiest to me, so I'd start with that approach and switch to a custom render function if I ran into hurdles.
I found an easier way to do this. I wanted my editors to be able to create pages with dynamic customization to the individual user. With this, my editors are actually able to put template variables into any type of content block as {{ var }} which works just like the Django templating language. For my use case, I am allowing my editors to create email content in the CMS, then pulling that to send the emails:This is the function to call:Then I call it like so:


Answer URL
https://docs.python.org/3/library/string.html#template-strings
