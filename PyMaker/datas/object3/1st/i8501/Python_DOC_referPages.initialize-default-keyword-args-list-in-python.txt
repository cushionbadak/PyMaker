Natural Text
How can one define the initial contents of the keyword arguments dictionary? Here's an ugly solution:Expected behaviour:Yet, I would like to do something a little bit more in the lines of:Or even:Ideas?
First to address the issues with your current solution:This creates a new dictionary and then has to take the time to update it with all the values from kwargs.  If kwargs is large that can be fairly inefficient and as you pointed out is a bit ugly.Obviously your second isn't valid.As for the third option, an implementation of that was already given by Austin Hastings If you are using kwargs and not keyword arguments for default values there's probably a reason (or at least there should be; for example an interface that defines c without explicitly requiring a and b might not be desired even though the implementation may require a value for c).A simple implementation would take advantage of dict.setdefault to update the values of kwargs if and only if the key is not already present:Now as mentioned by the OP in a previous comment, the list of default values may be quite long, in that case you can have a loop set the default values:A couple of performance issues here as well. First the defaults dict literal gets created on every call of the function.  This can be improved upon by moving the defaults outside of the function like so:Secondly in Python 2, dict.items returns a copy of the (key, value) pairs so instead dict.iteritems or dict.viewitems allows you to iterate over the contents and thus is more efficient.  In Python 3, 'dict.items` is a view so there's no issue there.If efficiency and compatibility are both concerns, you can use the six library for compatibility as follows:Additionally, on every iteration of the for loop, a lookup of the setdefault method of kwargs needs to be performed.  If you truly have a really large number of default values a micro-optimization is to assign the method to a variable to avoid repeated lookup:Lastly if the number of default values is instead expected to be larger than the number of kwargs, it would likely be more efficient to update the default with the kwargs.  To do this, you can't use the global default or it would update the defaults with every run of the function, so the defaults need to be moved back into the function. This would leave us with the following:Enjoy :D
A variation possible on your first approach on Python 3.5+ is to define the default and expand the provided arguments on a single line, which also lets you replace kwargs on the same line, e.g.:Another approach (that won't produce an identical string) that creates a mapping that behaves the same way using collections.ChainMap (3.3+):Like I said, that won't produce the same string output, but unlike the other solutions, it won't become more and more costly as the number of passed keyword arguments increases (it doesn't have to copy them at all).
Have you tried:UpdateBarring that, you can use inspect to access the code object, and get the keyword-only args from that, or even all the args:


Answer URL
https://docs.python.org/3/library/collections.html#collections.ChainMap
