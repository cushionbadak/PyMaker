Natural Text
I was trying thisBut it was showing an errorI used to do the same in C language but it works. So, how to this in python?
You haven't declared ar yet. In Python, you don't have to perform separate declaration and initialization; nevertheless, you can't perform operations on names willy-nilly. Start off with something like this:
You can initialize matrix in nested loop like this:
You should know that ar is not defined when you are trying to perform an assignment like ar[i][j] = int(input()), there are many ways to fix that.In C/C++In C/C++, I presume you would do such work like this:Before you get inputs by scanf in C/C++, you should allocate storage by calling new or malloc, then you can perform your scanf, or it will crash.How to do like that in PythonIt's very similar to what you had done in C/C++, according to your code, when you are trying to perform assignment to ar[i][j], Python has no idea what ar it is! So you have to let it know first. A NOT-pythonic wayA NOT-Pythonic way is do something like you did in C/C++:You initialize the list by ar = [] like you did int **ar = new int*[m]; in C/C++. For each row in the 2-d list, initialize the row by using ar.append([]) like you did ar[i] = new int[n]; in C/C++. Then, get your data by using input and append it to ar[i].A pythonic wayThe way to perform such a job like above it's not very pythonic, instead, you can get it done by using a feature called List Comprehensions, then the code can be simplified into this:Note that the core ar = [[0 for j in range(n)] for i in range(m)] is a list comprehension that it creates a list which has m lists and for each list of these m lists it has n 0s.
Actually, you don't need the column count. Just enter the number of rows and give your input space separated.
Since you haven't declared ar before, you cannot assign elements  at specific indexes. You can decalre a two dimensional list in this manner initialized to a certain value.where r and c are desired number of rows and columns respectively



Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
