Natural Text
I have noticed some strange behaviour with list extension return values. I have read this thread Why does += behave unexpectedly on lists?but it still does not make sense. This is what I did: I understand that extend does not return the extended object, but None. Not helpful, but I get it. Now __iadd__ behaves differently, which is weird, since I read that this basically calls extend for a list. But the third one baffles me. I thought += was shorthand for __iadd__, so why do I get a SyntaxError here? Especially since __iadd__ returns the modified list, which would make sense to pass on as a return value. But it seems I can't use += (or *= for that matter, e.g. with integers) in function calls. Is that by design? 
l.__iadd__(val) is a function call, that is, an expression.l += [1] is an assignment, that is, a statement.Argument values (the ones you have supplied to print in this case) are not allowed to be statements, only expressions, simple as that.
__iadd__ is used to implement +=, but the two are not identical. l += [1] is still a statement, while l.__iadd__([1]) is an expression.


Answer URL
https://docs.python.org/3/reference/index.html
