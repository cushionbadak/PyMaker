Natural Text
This question already has an answer here:Python convert tuple to string                    3 answers                if Then I have stripped a string list such that looks like this (string --> tuple):I want to get rid of the comma inside the parentheses. That is, I want to make these tuples to be string back again. What I did was:But it didn't get any better. Then I wanted to pass this to a different command, which is Counter. However, that actually included Counter{(blabla)}, which I didn't really like. What I wished to get a result as a dictionary, looking like this: Which eventually counts the frequency of each product name.
Try this:
That's a set rather than a list.Please don't use list as a variable name, as there's already a very useful builtin function by that name. I'm going to pretend you named it list1.It sounds like you want to hoist the elements out of the 1-tuples:Then you could join it with ', '.join(list2) as you wish.
I don't know how you are converting your string to the set of tuple you are having. And, why are you even creating it when you don't need it?You may use re module to get the desired list using the re.findall(pattern, string):Then, you may use collection.Counter to get the count. For example:
Your original variable has a comma after it which makes it a tuple. If you want it to be a string, remove the trailing comma.You haven't shown how you generated the list variable. (Sidenote: don't name variables list or str, it shadows the built-in types.) But you can split this string into separate pieces like so:Your list variable is actually a set. The syntax for sets is {item1, item2, item3} while the syntax for lists is [item1, item2, item3].If you want to turn every tuple in this set into its first element:Finally, if you want to count the instances of each item in this list, you can pass it to collections.Counter.
You may have a typo, or you doing something different from what you've described. Your list is actually a set of tuples. If that's what you meant to create then you can't use indexing as you've shown in your for loop. Given the desired output you're showing, it is also not really clear what you're going for as this is not valid syntax with the parenthesis after the curly brace.The answer from @Moses-koledoye is the correct one given what you seem to want.


Answer URL
https://docs.python.org/3/library/re.html
https://docs.python.org/3/library/re.html#re.findall
https://docs.python.org/3/library/collections.html#collections.Counter
