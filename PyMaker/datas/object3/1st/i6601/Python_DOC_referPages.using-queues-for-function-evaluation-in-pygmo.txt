Natural Text
I'm attempting to use pygmo 2.5 optimization libraries installed via Anaconda3 with some existing code which wraps the asynchronous and distributed evaluation of parameter vectors via an executable which does trajectory optimization (it's POST2 if anyone is interested). To facilitate this I use multiprocessing.SyncManager and multiprocessing.Queues across the network to pass inputs and receive output and logging messages. So in this context, pygmo would be selecting vectors to try, and the supporting code would pass this into an input queue which some distributed worker would grab, evaluate via the executable, and pass the result back, which would ultimately be handed back to whatever pygmo.algorithm is in use for evaluationMy issue is that when pygmo initializes a problem it does a deep copy of the supplied class, which in my case and in the supplied example code below, contains several queues. Upon performing the deepcopy I get the errorIs there a way around this? I need to keep the execution style asynchronous and distributed for the other methods this code employs. I've also tried queue.Queue and a multiprocessing.Manager.Queue (both of which wouldn't work with other existing code) for completeness but it always comes down to the deepcopy.Thanks everyone!
For anyone who finds this and needs an answer - collections.deque supports deepcopyPer https://docs.python.org/3/library/collections.html#collections.dequeIn addition to the above, deques support ... copy.copy(d), copy.deepcopy(d),However collections.deque is not process-aware, so it cannot be used for distribution 


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
