Natural Text
What is the most efficient way to find the indexes of strings in a list that occur only once?I already know about sets, dictionaries and list comprehensions.  The problem I'm trying to solve here is in my production code I have parallel data lists where the index of one is the index of many which can't be changed for historical reasons.
With collections.Counter subclass:The output:
You will get what you want. Dictionaries are faster in pythonYou can also use set(foo)
You can try something like this, especially if the size of your foo list is bigger than in your example above and have lots of duplicates.
It depends on the kind of efficiency you would like to get. You could do this directly in a list comprehension, straightforward and readable:bar = [index for index,el in enumerate(foo) if foo.count(el)==1]Please see this for info if you would like to use Counter


Answer URL
https://docs.python.org/3/library/collections.html#counter-objects
