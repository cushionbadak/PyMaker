Natural Text
Consider a large list of 4 character strings. For example: ['P0BH', 'LF3J', 'MA1Y', 'STSM', '8Y74', 'JWBD']I want to add a new string in the following precise manner:If the new string already exists in the given list, delete the old value from the list and prepend the new string to the front of the list. For example, if the string 'MA1Y' was added, then the output list would look like this:['MA1Y', 'P0BH', 'LF3J', 'STSM', '8Y74', 'JWBD']. If the new string does not exist in the list, then just prepend the new string to the front. For example, if the string 'FSH7' was added, then the output list would look like this: ['FSH7', 'P0BH', 'LF3J', 'MA1Y', 'STSM', '8Y74', 'JWBD']. There is one other caveat: the algorithm must run in constant time complexity. I don't care about space complexity. Naturally, I have already implemented a solution, which is given below. I believe it runs in constant time complexity, but I would like that we improve it or redesign something better. My understanding is that a map has constant time deletion, membership testing and assignment. **Does the addTicker method in my tickerMap class run in constant time?
You're missing a log N detail in there.Also, OrderedDict seems to be a close match to your needs.The assignment is O(1) after we've allocated N entries, as long as N never grows after that. However, it is amortized O(log N) for each assignment that creates a new entry. Python doubles the allocation each time it's exceeded. If you were to keep adding and deleting without growing N, then assignment would be O(1).addTicker() could conditionally del, and then unconditionally do those last two statements, as they're the same in either case.The O(N) comment should be O(N log N), as that's how long the sort takes, and there's no reason to believe all the entries are already in sorted order.


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
