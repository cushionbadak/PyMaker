Natural Text
This question already has an answer here:How do I sort a dictionary by value?                    42 answers                I am trying to remove duplicate items from a sorted linked list, eg.[1,2,3,3,4,4,5,6,6,6] -> [1,2,5]. Can someone walk through the code and tell me what will be the final value of a is for the linked list 2->1->None. It should be {2:1, 1:1} but answer comes out to be {1:1, 2:1}...why?
dict object doesn't remember the order of elements which are added to the dictionary. If you want to preserve the ordering of the elements you can use OrderedDict.
O(N) option using groupby
Try the following:This preserves the order of items in l.
Here's an approach in O(n) time (in Python 3), regardless of whether the list is sorted.The statement for item in lst: ... is O(n).The expression item in unique is O(1).The statement unique[item] = 1 is O(1), and so is unique[item] += 1.The expression [k for k, v in unique.items() if v == 1] is O(n).So, calculating the time complexity of the for statement:O(n) * (O(1) + max(O(1), O(1)))O(n) * (O(1) + O(1))O(n) * O(1)O(n)Add that to the time complexity of the list comprehension, and you have O(n) + O(n), which is O(2n). Drop the constant, and you have O(n).
This answer assumes that all you want to do is to create another list, only keeping the values that occur once.One way of doing it would be to use groupby from itertools and then filter based on the length of each group.EDIT Reading your question again, it seems this solution might not work, unless the linked list type you're using conforms to the iterator protocol. At any rate, it certainly won't produce a list as output, although you could replace the list comprehension with a generator expression and build a linked list from that.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
