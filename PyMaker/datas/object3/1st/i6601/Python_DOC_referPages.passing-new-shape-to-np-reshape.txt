Natural Text
Within numpy.ndarray.reshape, the shape parameter is an int or tuple of ints, and The new shape should be compatible with the original shape. If an  integer, then the result will be a 1-D array of that length.The documentation signature is just:In practice the specification doesn't seem to be this strict.  From the description above I would expect to need to use:But instead I can get away with just:How is it that I can do this?  I know that if I just simply enter 2, 3 into a Python shell, it is technically a tuple whether I use parentheses or not.  But the comparison above seems to violate basic laws of how positional parameters are passed to the dict of keyword args.  I.e.:...and there are no star operators in reshape.  (Something akin to def f(*a, order='c') above.)
With the way that parameters are bound with normal Python methods, it should not work, but the method is not a Python method at all. Numpy is an extension module for CPython, and numpy.ndarray.reshape is actually implemented in C.If you look at the implementation, the order parameter is only ever read as a keyword argument. A positional argument will never be bound to it, unlike with a normal Python method where the second positional argument would be bound to order.  The C code tries to build the value for newshape from all of the positional arguments.
There's nothing magic going on. The function's signature just doesn't match the documentation. It's documented asbut it's written in C, and instead of doing the C-api equivalent ofit does the C-api equivalent of manual *args and **kwargs handling. You can take a look in numpy/core/src/multiarray/methods.c. (Note that the C-api equivalent of def reshape(self, shape, order='C'): would have the same C-level signature as what the current code is doing, but it would immediately use something like PyArg_ParseTupleAndKeywords to parse the arguments instead of doing manual handling.)


Answer URL
https://docs.python.org/3/c-api/arg.html
