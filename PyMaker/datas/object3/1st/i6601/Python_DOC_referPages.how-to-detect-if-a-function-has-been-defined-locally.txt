Natural Text
In Python, I have a decorator that has to skip any real work if a function is defined locally in the one that calls it. I made a simple testing script:It prints this:As I see, Python sees that the function is defined in a local space (<locals> in the printed text), but I can't see how I can find that bit of data. I walked through the inspect module, and don't see anything similar.I can't rely on whether the function is in globals or not.What do I use?
First off, the direct approach is to check if the CO_NESTED flag is set on the function's code object:That said, there is another approach if what you care about is whether you've actually closed over anything. A function that doesn't use anything from the enclosing scope is nested, but not a closure, and that distinction is often important. So for example:is not making a closure because bar makes use of no variables from the scope of the foo call. By contrast, even though it's a garbage reference, this is making a closure simply by reading the value of x from the enclosing scope:You can tell the difference between bar and baz by testing the __closure__ attribute (which is None if no nested variables have been closed over) or by checking the co_freevars attribute of the __code__ object (which is a tuple of names closed on, so if it's empty, then it's not a closure, though it may still be a nested function):
Well, here's a hacky approach:It seems brittle to me, though.Another approach is to play with the Frame, but I like that even less, I think:


Answer URL
https://docs.python.org/3/library/inspect.html#code-objects-bit-flags
