Natural Text
For these two ways of calculating a sha1 hash, regards with time efficiency, are they the same?(1) Split the string to small chunks and update the hash multiple times(2) Pass the complete string to the hash function and compute the hash only once
There is additional overhead for each chunk:you must split the stringThere are python calls into hashlib for each chunkthe hash library must set up to handle each chunkSo, there is overhead that scales with the number of chunks.  If you have a constant number of chunks, it probably doesn't matter.However if you were to split a significant string into one-character chunks and update using each of those one-character chunks, the chunked approach would be significantly slower than  the whole string approach.That said, there's overhead in combining chunks into a single string or bytes object.  If what you have are chunks, and the only reason you're combining them is for the hash performance, that probably will not save time.


Answer URL
https://docs.python.org/3/library/hashlib.html
