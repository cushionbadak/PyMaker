Natural Text
After many days I have a working celery and celery beat task list, and the results are stored using django_celery_results. However when I look at the table record, it hasn't got any useful information in there.is it possible to set the task id to something human readable?one example would be using the demo task, it returns the no, but an unreadable task idtasks.pyscheduler in app.settings
The easy answer is No. The task_id attribute is generated automatically. If you follow the code backwards the core function that generates ID's is in kombu.utils.uuid.uuid(..), which interestingly is just a thin wrapper around the builtin uuid.uuid4(..).However, if you look at the function signature:..it appears like it would be possible to supply your own function that generates the ID, and as long as they're unique they should work. Fundamentally you'd have to patch: celery.__init__.uuid, celery.utils.__init__.uuid, and celery.utils.__init__.gen_unique_id.I don't think that you'd be able to apply worthwhile names since this function is called with no parameters to simply return something unique.BUTIf you look at Task.apply and Task.apply_async there's an undocumented parameter task_id!This would allow you to manually specify the task_id before the Task is called/created, and as long as they're globally unique you'll still get all of the reporting and metrics. Unfortunately I don't see any easy way to change the task_id from a Result, to make it more useful after the fact...kinda making your UI's textbox a little silly.If your project is set up for it, you can use Task Inheritance and modify task behavior that way. In theory you should be able to overwrite apply and apply_async to inject a task's ID.Should make your Task ID look like: project.tasks.add-15073315189870
Implement a custom result backend that overwrites _store_result to decide what is saved as result to the database.Depending on which backend you're using find the related class in celery.backends.This example extends the result for an amqp backend.When initializing Celery pass your result backend class.
Try:This may help to find the task status in the UI, but Celery always needs a unique id for each task execution.


Answer URL
https://docs.python.org/3/library/uuid.html#uuid.uuid4
