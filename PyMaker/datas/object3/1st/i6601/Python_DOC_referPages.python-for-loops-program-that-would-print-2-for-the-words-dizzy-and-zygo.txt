Natural Text
I'm confused as to how the words relate to each other, and how that number is calculated in the algorithm. Here's the full problem (I'm supposed to use for loops primarily.  I think I'm supposed to avoid built-in functions.)  "For this task, we are providing you several examples of how this program should behave. We are not going to tell you exactly what the program code should contain: but your program should work as follows:The user enters two strings (on two separate lines) "dizzy" and "zygote". Your program prints out: 2.The user enters two strings (on two separate lines) "essentialness" and "essence". Your program prints out: 3.The user enters two strings (on two separate lines) "platypus" and "saltwater crocodile". Your program prints out: 1.The user enters two strings (on two separate lines) "bar" and "battery". Your program prints out: 0.The above are examples: your program should behave similarly for any string input. Here are some more example runs:RESTART:       type something, then press return/enter: definite      now type something else, then press return/enter again: finite      the calculated output is 6RESTART:       type something, then press return/enter: make      now type something else, then press return/enter again: matt      the calculated output is 0RESTART:       type something, then press return/enter: bassline      now type something else, then press return/enter again: linebass      the calculated output is 4RESTART:       type something, then press return/enter: cringing      now type something else, then press return/enter again: ingenious      the calculated output is 3RESTART:       type something, then press return/enter: banana      now type something else, then press return/enter again: nanaimo      the calculated output is 4RESTART:       type something, then press return/enter: superfluous      now type something else, then press return/enter again: tossup      the calculated output is 0"Here's what I tried (it's not complete + doesn't give the answer):print(count)
I would do it like this:The idea is to:define an index i which start from the maximum length of the two common string and ends at 0 (in range the stop extreme is excluded, hence you have to use -1 as second argument) in -1 steps.check if the last i characters of the first string match the first i characters of the second string: if they do, we can exit the loopthe value of i at the end of the loop will tell us how chars are in common.Notes:I used a function to better separate the code actually doing the computation from the input/output part.I provided you with a decent docstring (enclosed in """) in Google style (it is good practice to always have one).The code in the Examples section can be tested automatically.


Answer URL
https://docs.python.org/3/library/stdtypes.html?highlight=range#range
https://docs.python.org/3/library/doctest.html
