Natural Text
I'm integrating MicroPython into a microcontroller and I want to add a debug step-by-step execution mode to my product (via a connection to a PC).Thankfully, MicroPython includes a REPL aka Python shell functionality: I can feed it one line at a time and execute.I want to use this feature to single-step on the PC-side and send in the lines in the Python script one-by-one. Is there ANY difference, besides possibly timing, between running a Python script one line at a time vs python my_script.py?
Passing one line of code at a time on stdin is a completely unacceptable alternative to a proper debugger.Let's say that you want to debug the following:...in a proper step-by-step debugger, the user could use it like so:Now, how are you going to do that? If you enter the function in a REPL, the function is defined as one operation, and it runs as one operation. It doesn't stop at line 6. It doesn't let you proceed line-by-line. The same is true of the for loop: Entering the text of the for loop one line at a time doesn't let you step it before the exception is thrown.If you eliminate the function, and eliminate the loop (generating the code _something = iter(range(10)); i=_something.next(), maybe?), then you need to emulate the effects of scoping. It means you have a hugely different language than the one you're purportedly "debugging".
I don't know whether MicroPython has compile() and exec() built-in.But when embeded Python has them and when MCU has enough RAM, then I do the following:Send a line to embeded shell to start a creation of variable with multiline string.'_code = """\'Send the code I wish executed (line by line or however)Close the multiline string with """Send exec command to run the transfered code stored in the variable on MCU and pick up the output.If your RAM is small and you cannot transfer whole code at once, you should transfer it in blocks that would be executed. Like functions, loops, etc.If you can compile bytecode for MicroPython on a PC, then you should be able to transfer it and prepare it for execution. This would use a lot less of RAM.But whether you can inject the raw bytecode into shell and run it depends on how much MicroPython resembles CPython.And yep, there are differences. As explained in another answer line by line execution can be tricky. So blocks of code is your best bet.
Is there ANY difference ...Yes.The code below, for example, works in .py file, but is a SyntaxError in the interactive interpreter:There are many other differences, but this alone should be enough to scare you away from the idea.  


Answer URL
https://docs.python.org/3/library/sys.html#sys.settrace
