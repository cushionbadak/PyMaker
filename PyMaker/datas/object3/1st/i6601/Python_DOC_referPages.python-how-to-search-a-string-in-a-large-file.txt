Natural Text
I have a large file that can have strings like file_+0.txt, file_[]1.txt, file_~8.txt etc.I want to find the missing files_*.txt until a certain number. For example if I give the below file and a number 5, it should tell that the missing ones are 1 and 4I wrote a Python script to which I can give the file path and a number and it will give me all file names that are missing until that number.My program works for small files. But when I give a large file (12MB) that can have file numbers until 10000, it just hangs.Here is my current Python codeOutput hangs when I give a 12MB file which can have files from 0 to 9999Output for a small file (same as the above example)How can I make this work for big files?Is there a better way I can get these results instead of a Python script?Thanks in advance!
first collect the existing ones in a set and then look for the missing ones.The reason yours hangs because you are going through the entire file for each number. i.e 12MB * 10000 = 120GB The script is going through 120GB and so it hangs even if you have it in mmap.
I would suggest that you simply read through the input file line by line and parse each of the lines for its file number. Then use that file number as an index into a boolean array set False initially. You don't do any processing that requires the file to be in memory. This approach will work for very large files.This produces the following result from which your filesPresent and filesMissing are easily recovered.
Let's take a look at what you are actually doing here:Memory map the file.For each number  a. Compile a regular expression for that number.b. Search for the regular expression in the entire file.This is very inefficient for large numbers. While memory mapping gives you a string-like interface to the file, it is not magic. You still have load chunks of the file to move around within it. At the same time, you are making a pass, potentially over the entire file, for each regex. And regex matching is expensive as well.The solution here would be to make a single pass through the file, line by line. You should pre-compile the regular expression instead of compiling it once per number if you have a large number to search for. To get all the numbers in a single pass, you could make a set of all the numbers up to the one you want, called "missing", and an empty set called "found". Whenever you encounter a line with a number, you would move the number from "missing" to "found".Here is a sample implementation:Notice that the regular expression uses the reluctant quantifier .*? after file_. This will match as few characters as possible before looking for a digit. If you have the default greedy quantifier of .*, multiple numbers on one line would match only the last one.


Answer URL
https://docs.python.org/3/library/re.html#regular-expression-syntax
