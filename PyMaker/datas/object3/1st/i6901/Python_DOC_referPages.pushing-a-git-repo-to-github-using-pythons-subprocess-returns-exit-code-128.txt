Natural Text
I'm currently trying to write a module of my own for using git. For this reason I would like to avoid using GitPython. My code for pushing at the moment is as follows:This tries to push to git by executing the command git push --repo https://username:password@github.com/repo.git to avoid having to work with stdin to pass the username and password to git. This works on the command line, but whenever I try running this code, I get the following output:Git seems to react this way whenever the push command is involved, even for something like git push. Using something like subprocess.Popen and setting stdin=PIPE,stdout=PIPE,stderr=PIPE, process.poll() still gives 128 and process.stdout.read() gives nothing.Can anyone explain why this is happening, and provide a solution to my problem?---EDIT---Following some advice from here, I've run a bunch of git commands with GIT_TRACE=1. I've seen that git push is the only command that I am using so far that has a trace: run_command line.This makes me suspect the cause may lie in something else from the link above.I cannot run git push origin master from subprocess, even with the environment. I think it has to do with a race condition created by the lfs pre-push hook. Subprocess calls git push, git push calls git lfs, git push ends before lfs or lfs kills the stdout/return code. Git push works normally in the command line, so one would think that invoking it through suprocess would work the same, since the module literally sends the same commands to a shell environment.While the issue does not lie in lfs for me, perhaps it lies in that call to git-remote-https? 
When I've had problems with running git using subprocess I've had to add shell=True to my subprocess function call.In your case:subprocess.check_output(...other args, shell=True)You may want to read the security considerations found in the subprocess docs before you do that though.Subprocess Security Considerations


Answer URL
https://docs.python.org/3/library/subprocess.html#security-considerations
