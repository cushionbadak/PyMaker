Natural Text
This question already has an answer here:Convert IP address string to binary in Python                    6 answers                IP address 00000011100000001111111111111111 will be converted into dotted decimal format as: 3.128.255.255. This is because the 1st 8 bits 00000011 will be converted to 3, the 2nd 8 bits 10000000 will be converted to 128, the 3rd 8 bits 11111111 will be converted to 255 and the last 8 bits 11111111 will be converted to 255.How to write a function ip_format() that accepts an IP address in binary format and converts it into its dotted decimal format ?
You could use the ipaddress module from the standard library:Otherwise, it's pretty easy to do it manually:As far as the logic: you convert the binary string to an integer, split that to individual bytes, convert those to strings, and join with ".".
When you convert to int you can also specify a second argument that is the base (in this case 2 for binary). Then you can stride through your string 8 elements at a time, and lastly join with '.' characters

The string can be converted using standard Python libraries as follows:Which displays:How does it work?First convert the binary string into a corresponding integer using int(x, 2). Next use struct.pack() to convert the number into a four character packed string. This can then be passed to socket.inet_ntoa(packed_ip) to convert it into a dot separated IP address.


Answer URL
