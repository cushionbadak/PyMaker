Natural Text
I have 2 threads that are listening for data on 2 different UART lines that can come in any time. I also have a 3rd thread that is just a timer. In my main thread I would like to wait for any of these three threads to signal in order to trigger a parse data and update type function.Is using 1 event with a separate flag that each thread would set before setting the event to indicate which one of them triggered the event an acceptable solution or is there a better way to do this that I'm missing?Using python 2.7For example:    
This will explode.All you need are two close events, and your global evetn_flag will be overwritten in a race-condition. You should be using queues for that.https://docs.python.org/3/library/queue.htmlQueues will preserve the order, and warrant your main thread will process all events that arrived. You can post an arbitrary data structure to the Queue - so, since yu alredy have an event-type "quasi-enumeration", you can post a tuple with this event_type as first element, and whatever data you have to comunicate across threads as second element. Just create a queue.Queue object before spawning your threads, you can even set it as a global variable, and use the queue's get method instead of event.wait().


Answer URL
https://docs.python.org/3/library/queue.html
