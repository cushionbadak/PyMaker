Natural Text
Here is my prime factorization program,i added a callback function in pool.apply_async(findK, args=(N,begin,end)),a message prompt out prime factorization is over when factorization is over,it works fine.Now i want to change the callback function in apply_async,to change prompt into a shutdown function to kill all other process.The pool instance is not defined in prompt scope or passed into prompt.pool.terminate()  can't work in prompt function.How to pass  multiprocessing.Pool instance to  apply_async'callback function ?(I have made it done in class format,just to add a class method and call self.pool.terminate can kill all other process,how to do the job in function format?)    if not set pool as global variable, can pool be passed into callback function?
Passing extra arguments to the callback function is not supported. Yet you have plenty of elegant ways to workaround that. You can encapsulate your pool logic into an object:Or you can use the concurrent.futures.Executor implementation which returns a Future object. You just append the pool to the Future object before setting the callback.
You can simply define a local close function as a callback:You can also use a partial function from functool, with 
You need to have pool end up in prompt's environment. One possibility is to move pool into the global scope (though this isn't really best-practice). This appears to work:


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor
