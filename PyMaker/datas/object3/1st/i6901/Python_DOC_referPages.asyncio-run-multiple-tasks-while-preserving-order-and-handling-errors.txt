Natural Text
my function run_tasks(all_tasks, window_size) that takes a generator of asyncio tasks and returns their value while:run each window (of size window_size) from the all_tasks concurrentlypreserve the order of returned results (all_tasks[i] result is results[i])handle exceptions for each runMy current implementation:The ProblemThe problem with my implementation is that I cannot find a way to sort the tasks in without accessing f._coro which is internal property of asyncio.Task object.I can use asyncio.gather(*tasks) but this will not handle errors.I am open to suggestions on how to implement this three properties for run_tasks() without access to f._coro.
asyncio.gather can return you errors if you specify it's keyword param return_exceptions. To distinguish real exceptions from exception objects return as result of coroutine, you can wrap your window_tasks with tasks using ensure_future:


Answer URL
https://docs.python.org/3/library/asyncio.html
https://docs.python.org/3/library/asyncio-task.html#asyncio.gather
