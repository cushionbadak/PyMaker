Natural Text
The goalI am trying to iterate two dicts at the same time knowing that they have some keys in common (for sure), but some of them are not (possibly). What is more the same keys could (rarely, but still) be ordered differently. Another issue is that dicts can have different lenght. In my case the keys are all numerical.Atempted solutionsExample dicts:After reading some answers to iterating multiple dicts I tried zip()ing the two dicts:but this 'cuts' the longer dict, also this iterates over keys of each dict seperately instead of keeping them consistent (always i == j, even if i in di1 and j in di2 would return False)Given that in my case all keys are numerical I tried the following:which works (I can pass i as dict key), but:Doesn't iterate dicts per se, just generates numbers to try to match to given dicts.Iterates over values even if they are non existent keys in both dicts (i in di1 or i in di2 is False).This works only if keys are numerical.Doesn't seem very pythonic.The quesstionHow do I iterate two (or more) dicts (keys) given that it is enough for the key to exist in at least one of them?ConditionsSolutions using standard libraries are preferable.You can assume dict keys are numerical but a more general solution is preferable.Iteration order is of no importance but additional information on the matter is a bonus.I'm iterating two dicts.Both dicts should remain unaltered.I'm using python 3.6.1
You can iterate over common keys:Or union of keys:You choose. Use dict.viewkeys() in Python 2.
I would extract keys from both dicts (.keys()), join the lists of the keys, remove duplicates (make it set), then iterate over the dicts using this new set of keys.
You can use itertools.izip_longest, to iterate till the longer collection, where zip iterates till the smaller collection. The thing to look at here is the use of dict.get(key),  because using dict[key] will cause KeyError for unique keys. You can however, add an optional default value as second parameter inside dict.get(key, default_value).Hope this helps.
Assuming that the values are consistent between the various dictionaries you can use collections.ChainMap to iterate over multiple dictionaries:Output:Or more simply:As mentioned above, this is fine if the values for duplicated keys are the same. Where there is variation the value from the first chained dictionary will be returned.


Answer URL
https://docs.python.org/3/library/collections.html#collections.ChainMap
