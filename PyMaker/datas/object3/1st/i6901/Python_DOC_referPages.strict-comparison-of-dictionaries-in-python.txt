Natural Text
I'm having a little bit of trouble comparing two similar dictionaries. I would like stricter comparison of the values (and probably keys).Here's the really basic problem:Similarly (and somewhat confusingly):This makes sense because True == 1. What I'm looking for is something that behaves more like is, but compares two possibly nested dictionaries. Obviously you can't use use is on the two dictionaries, because that will always return False, even if all of the elements are identical.My current solution is to just use json.dumps to get a string representation of both and compare that.But this only works if everything is JSON-serializable.I also tried comparing all of the keys and values manually:But this fails if the dictionaries have some nested structure. I figured I could write a recursive version of this to handle the nested case, but it seemed unnecessarily ugly and un-pythonic.Is there a "standard" or simple way of doing this?Thanks!
You were pretty close with JSON: Use Python's pprint module instead. This is documented to sort dictionaries in Python 2.5+ and 3:Dictionaries are sorted by key before the display is computed.Let's confirm this. Here's a session in Python 3.6 (which conveniently preserves insertion order even for regular dict objects):And let's quickly confirm that pretty-printing sorts nested dictionaries:So, instead of serializing to JSON, serialize using pprint.pformat(). I imagine there may be some corner cases where two objects that you want to consider unequal nevertheless create the same pretty-printed representation. But those cases should be rare, and you wanted something simple and Pythonic, which this is.
You can use isinstance() to delineate between a regular dictionary entry and a nested dictionary entry. This way you can iterate through using is to compare strictly, but also check when you need to dive down a level into the nested dictionary.https://docs.python.org/3/library/functions.html#isinstance
You can test identity of all (key, value) pairs element-wise:This should work with float, int, str and bool, but not other sequences or more complex objects.Anyway, that's a start if you need it.
I think you are looking for something like this. However since you didn't provide example data I won't go into guessing what it could be


Answer URL
https://docs.python.org/3/library/pprint.html
https://docs.python.org/3/library/functions.html#isinstance
