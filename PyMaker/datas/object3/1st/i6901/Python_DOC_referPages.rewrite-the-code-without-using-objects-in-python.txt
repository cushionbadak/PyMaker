Natural Text
When not using objects i am finding it difficult to store and parse through the data. Looking for ways where i can shorten the code using generator comprehension.for a problem where input to the program code is as below Expected OutputI managed to solve it using objects but is there any other way to write the code without using objects?
Code:Output (I'm placing it before the Notes, since I'm going to refer to it from there):Notes:This is a "slightly" modified version of your code, that only uses stuff from Python standard libraryCode explanation:read_input_from_file (since it's only a helper function, I'm not going to insist much on it):I saved the input (copy/paste) in a file (called it input.txt), and every time the program runs, it loads the data from there (the reason is obvious)It (populates and) returns 3 lists (curses, students and grades from your code)convert_names:Converts every student name entry (as given in input) into a dictionary*: {id: name} (e.g. "SLY2301~Hannah Abbott" -> {"SLY2301": "Hannah Abbott"}) - the key will be id*Since in a regular Python dictionary ([Python]: Mapping Types â€” dict) the keys are ordered by their hash (the hash function can change between Python versions), there's almost 100% chance that the dictionary elements won't be stored in the order they were inserted (as an example you could type in the Python console {1:2, 0:1} and you'll see that it will output {0: 1, 1: 2}), I'm using [Python]: class collections.OrderedDict([items]) which ensures the key orderThe return value can be seen in program output (SECTION 0)convert_grades:This is where (most of) the magic takes placeConverts every grade entry (as given in input) in a dictionary: {student_id : {course_id: grade_id}} (the last 2 values are aggregated in an inner dictionary; e.g. "TRAN~1~2011-2012~SLY2301~AB" -> {"SLY2301": {"TRAN~1~2011-2012": "AB"}}). For that, I'm using [Python]: str.rsplit(sep=None, maxsplit=-1) with a maxsplit value of 2, as I don't care about the ~s in TRAN~1~2011-2012If a student_id is present more than once (was to more than 1 course exam), I am just adding the course_id and grade_id in the inner dictionary (this is where [Python]: setdefault(key[, default]) comes into play)The return value can be seen in program output (SECTION 1)main:The program main function. Here, I'm making use of the other functions and display the final data in a proper manner to the user (SECTION 2)If there was a student that wasn't at any exam, like Bertram Aubrey (the id is not present in the exam statistics dictionary), I just print the id, name and 0.0Otherwise, I calculate the arithmetic average from the grades in the inner dictionary (I am using [Python]: list Comprehensions to convert the grades into actual numbers, [Python]: sum(iterable[, start]) to sum the grades, then I divide the total by the number of inner dictionary keys) and display it, together with the id and nameThe code runs with Python3 and Python2@EDIT0:Adding read_input function (read_input_from_file with minimum and trivial modifications) to read input from keyboard:Notes:In order for this function to work with Python2, this code should be added at the beginning of the file:You can also use the input.txt file to test the code with large datasets (like provided in the question, without having to manually type all the data) like this:
@CristiFati using your code i managed to tweak to solve my problem as below.


Answer URL
https://docs.python.org/3/library/stdtypes.html#typesmapping
https://docs.python.org/3/library/collections.html#collections.OrderedDict
https://docs.python.org/3/library/stdtypes.html#str.rsplit
https://docs.python.org/3/library/stdtypes.html#dict.setdefault
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/library/functions.html#sum
