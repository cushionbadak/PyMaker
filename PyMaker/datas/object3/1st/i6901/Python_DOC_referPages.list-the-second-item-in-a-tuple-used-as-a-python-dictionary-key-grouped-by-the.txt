Natural Text
I have a dict of tuples: (port , freq).I want to collect all tuples with the same port number, the frequencies for these are unique. I then want to list these frequencies.If I can do this without having a value that would be great as it isn't needed, however port, freq must be unique and making them keys allowed me to achieve this.I managed to list all the frequencies but this is not what I want.Can someone show me an efficient pythonic way to do this please?
This is exactly the kind of problem collections.defaultdict was created for. This is how you would create a defaultdict that creates a new list when a missing key is accessed:Now you can just populate your default dictionary with the second item from all your tuples:Done. This works because each time a missing key with the value of port is accessed, a new list is created, and then you just append to that list. If the key is already there, you just append to the existing list. Now you can access all the frequencies for any given port:Note: if your goal for your first data structure is to have a collection of unique tuples, instead of using a dictionary to hold your tuples I suggest using a set instead. A set is just that- a set of unique items, with no associated values to consider: 
ziping is not an inefficient way of doing what you need.A simple list comprehension would be sufficient:Or:
the None valued dictionary seems awkward, a set works tooitertools groupby is the tool if standard libs are allowedwhat I came up with for pulling apart the groupby structure seems ugly
A simple solution.Let's make a dictionary where each key is the port and each value is a list of the frequencies, this allows you to sum them or operate on them as you like and gives you O(1) access to them!note that this doesnt give you a sorted structure, but you can save a sockets list and use it for the from_keys method and have a sorted way of accessing sockets. e.g.This however, makes it really easy to access all the different frequencies for a given socket, just like this:Interpreter copy paste demo:Note that this converts form the current format that you have (or edit your post and ping me :D). You can adapt whatever code you may have to get similar results and have equivalent level of happiness to access things. Keeping a sorted list of the keys makes life really easy. Python3 is supposed to keep dictionaries sorted by default now so don't take my word on it but if you use my_dict.keys() it should return them in a sorted way but I could be wrong about how that operates.TakeAwayA dict of socket-> frequencies will be the easiest to deal with. An optional sorted list of sockets might help also


Answer URL
https://docs.python.org/3/library/collections.html#defaultdict-objects
