Natural Text
I am new to python and just created 3 classes in a module i.e global scope, inside a function and if block. while running the module, all statement of all the classes are running. I am surprised why all classes are got executed without any object created.
From the Python doc:A class definition is an executable statement.and...The class’s suite is then executed in a new execution frame (see  Naming and binding), using a newly created local namespace and the  original global namespace. (Usually, the suite contains mostly  function definitions.) When the class’s suite finishes execution, its  execution frame is discarded but its local namespace is saved. [4] A  class object is then created using the inheritance list for the base  classes and the saved local namespace for the attribute dictionary.  The class name is bound to this class object in the original local  namespace.
When you write a block of code of this form:Python always runs the <statements>, right then and there. The main difference is that, if any of those statements define variables, the variables are not set in the global namespace; instead they are "scooped up" and saved in a dictionary, which is associated with an object called (in this case) Name.For example, you know how this works:You can stick that inside a class definition and it still does the same thing:but after the class definition ends, the variable a is "scooped up" and no longer has the value it had inside the class definition.You might be mixing this up with a function definition. When you start a function definition block using the def keyword, the statements inside the block are not executed at that time.They're saved until later, when you call the function. But classes are not like functions in this way.
It's hard to tell what you're asking, but defining a class is not the same as creating an object. You need to call the class to create an instance (the object you're looking for).


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#class-definitions
https://docs.python.org/3/tutorial/classes.html#a-first-look-at-classes
