Natural Text
I'm following a tutorial on python 3 and there is a simple example I'm struggling with.Why is the attribute x in __init__ defined as public but is accessed like a private attribute with self.__x in the functions decorated with @property and @x.setter?
This isn't that straightforward because it heavily relies on Pythons descriptor protocol see also Descriptor HOW-TO which refers to property as well. But I will try to explain it in easy terms.You have a class that has (besides what is inherited by the implicit superclass object and some automatically included stuff) 2 attributes:I removed the automatically added attributes for the sake of this discussion. You can always add or replace attributes as much as you want:But when you create an instance the instance will have only one attribute _P__x (the _P is inserted because variables starting with __ and not ending in __ are name-mangled):You can also add almost (only almost because the descriptor protocol intercepts certain operations - see below) any attribute for the instance:That's where the descriptor protocol comes into play. If you access an attribute on the instance, it starts by looking if the instance has that attribute. If the instance doesn't have that attribute it will look at the class - but through the descriptor protocol! So when you access self.x this is roughly equivalent to: type(self).x.__get__(self):Likewise setting the attribute with self.x = 200 will call type(self).x.__set__(self, 200):The @property will intercept though the descriptor protocol any access to x on self. So you can't use the name x to store the actual value on the instance because it would always go into the @property and @x.setter (and also x.deleter but you haven't implemented that one) functions of the class. So you have to use another name to store the variable.It's typically stored with the same name but one leading underscore (also eases maintainability). It's actually not good practice to use two leading underscores because that makes it hard to subclass your class and modify the x property - without name-mangling the variable name yourself.


Answer URL
https://docs.python.org/3/reference/datamodel.html#implementing-descriptors
