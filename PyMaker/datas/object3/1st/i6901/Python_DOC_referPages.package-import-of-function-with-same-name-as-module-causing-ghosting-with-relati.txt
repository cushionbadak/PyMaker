Natural Text
I have a package foo_package organized like this:The module bar.py defines one 'public' function also named bar, and both the module and the function benefit hugely from being named exactly bar. bar.py also defines some 'private' helper functions.Inside of __init__.py I make a top-level import of bar.bar so that foo_package.bar will be the API of the overall package.But now I am getting bitten by relative imports.First, if I am debugging or working in an interactive prompt like IPython,  naively pasting from .bar import bar doesn't work. I can get around this by launching IPython inside foo_package and using from foo_package import bar instead.But then how can I import the bar module and not the exported bar function? E.g. variants of etc., all import the function bar, meanwhile any time that bar.py also contains a relative import to another module, such as then the plainwon't work either.The package-level 'ghosting' of bar the module with bar the function is the correct behavior. How can I maintain this while also being able to import bar the module in local development (especially in an interactive environment like IPython)?
If you really do have a compelling reason to keep the shadowing, you can access the module object through sys.modules:There's also importlib.import_module:


Answer URL
https://docs.python.org/3/library/sys.html#sys.modules
https://docs.python.org/3/library/importlib.html#importlib.import_module
