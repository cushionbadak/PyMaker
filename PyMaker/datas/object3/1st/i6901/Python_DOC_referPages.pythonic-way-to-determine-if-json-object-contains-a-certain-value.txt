Natural Text
I have a json object I get returned from a call, similar to this:Is there a more Pythonic way of simply determining whether or not the Key ecs_scaling exists, other than the standard:The Key could be the first item, it could be the 40th item -- ideally I'd like to be able to do something like if 'ecs_scaling' in theKeys: ... ?
You can use the builtin any.Return True if any element of the iterable is true. If the iterable is empty, return False.
The complexity is already linear, so the only faster thing that you could hope for is a hash search.However, constructing a hash set or a hash table would require a linear complexity.So unless the functions you call from the json module already build such a hash set, an iteration is the best thing you can do, for a linear complexity, ie O(n).In this regard, I think the most Pythonic approach is using the any built-in, already mentioned by the other.For the sake of completeness, although it would be less performant, you could go with a list comprehension as well, which is often considered as "highly Pythonic":This is not as good, because an additional list has to be constructed, which requires an iteration over the whole data.

I was thinking if there could be another way of doing that. Though it's little funny ;) but it will work and reduce calling any build-in methods for this. However I doubt if I am fulfilling the criteria of doing it in pythonic way. However I am definitely considering the fact that the Key and its value ecs_scaling will exist in the desired data section i.e Tags. Along with that the patterns should be fixed otherwise the solution wont work i.e "Key": "ecs_scaling" that I think will be if it was a dict before came here as string.Simply use the str.find but you may need to call this twice to ensure desirable result.if data.find("'Key': 'ecs_scaling'") != -1 or data.find('"Key": "ecs_scaling"') != -1But yes any is one of the best solutions if we ignore shortfalls of not checking if-exist prior to checking entire dataset.


Answer URL
https://docs.python.org/3/library/functions.html#any
https://docs.python.org/3/library/functions.html#any
