Natural Text
I was trying to implement singleton classes for my project and an interesting post in StackOverflow on the sameCreating a singleton in PythonI decided to go with the metaclasses approach mentioned..Now.. I tried to add a method to get and clear the instances (in case the user wants to get rid of the current instance and create a new one..):I am able to create objects successfully..But when I do dir(someClass) the 2 methods are not displayed:Nevertheless I am able to call the methods..In all the examples on metaclass I see online I see __new__, __init__ and __call__ methods implemented but I don't see any additional methods added. Is it correct to add methods to the metaclass?I also tried a small variation of the above metaclass code:Marked the 2 methods as class method..Now when I attempt to call them:As you can see the class is print says its Singleton when I decorate it as classmethod. Otherwise it shows the correct class. I don't understand this behavior, can someone explain?
Can python metaclasses have methods?Yes.But when I do dir(someClass) the 2 methods are not displayedContrary to what you might have believed, dir doesn't show everything:Because dir() is supplied primarily as a convenience for use at an interactive prompt, it tries to supply an interesting set of names more than it tries to supply a rigorously or consistently defined set of names, and its detailed behavior may change across releases. For example, metaclass attributes are not in the result list when the argument is a class.As you can see the class is print says its Singleton when I decorate it as classmethod.Don't decorate it with classmethod! That specifically says you want the method to operate on Singleton itself or subclasses of Singleton, rather than instances of Singleton. Classes with Singleton as their metaclass are instances of singleton; the fact that they are classes is not a reason to put classmethod on Singleton's methods.
Classes are instances of their metaclasses. Just as instances of classes don't have the methods of the class as attributes but nonetheless can have them called, classes do not have the methods of the metaclass as attributes.
Can python metaclasses have methods?Yes, as your first example shows they can have methods and they can be called on classes that implement your metaclass.For example in python-3.x the metaclass type implements the mro attribute:But you can't access them on instances:But when I do dir(someClass) the 2 methods are not displayed.dir calls type.__dir__ and that just shows a limited amount of the methods:If the object is a type or class object, the list contains the names of its attributes, and recursively of the attributes of its bases.No mention about methods of the metaclass here. That's because these are hidden by default.That's why you don't see the mro method either:However dir allows to customize what you see, so you can simply override it. Because __dir__ is called on the "class of the instance" and your "metaclass is the type of your class" you have to implement it on your metaclass:Now these methods of your class are visible when you call dir.Is it correct to add methods to the metaclass?That depends a bit on the context. I would say it's fine to add the methods to the metaclass. However, these should be used rarely.As you can see the class is print says its Singleton when I decorate it as classmethod. Otherwise it shows the correct class. I don't understand this behavior, can someone explain?It's obvious if you think about it. Singleton is the class of your someClass and when you make it a classmethod the cls argument will be Singleton. However the class that has been added to the _instances is someClass. I can see where that comes from though. All your methods take a cls argument. That probably made you believe they are "like" classmethods (and they are in some way, but not of the metaclass but of the class that implements the metaclass!).But it's just a convention because, like self is the typical argument name for an instance of a class, so is cls the typical argument name for an instance of a metaclass. When you have classmethods on your metaclass the first argument should probably be called metacls. Also fixing a small problem with the str.format (which is the reason it throws a KeyError instead of a LookupError):So you add the "class" to the dict but then you check if the metaclass is in the dict (which it isn't).Generally custom classmethods (besides those that should/could be classmethods e.g. __prepare__) on a metaclass don't make much sense because you seldom need the type of the class of your instance.


Answer URL
https://docs.python.org/3/library/functions.html#dir
https://docs.python.org/3/library/functions.html#dir
