Natural Text
I know of two approaches to it. The first one: documentation is hereand the second traditional approach of using sortedThe documentation mentions that these two are equivalent. However, I just wanted to know if the complexity of both are the same or if the first approach was implemented with lesser time complexity. I remember from my algorithms course that obtaining top K elements from a list can be done in lesser order of operations compared to sorting the entire list and then going with picking the top K.Correct me if I am wrongEdit: What standard python libs can perform this task in O(N) operations or what's the best complexity we can get from python?
I'm not a great mathematician, but I guess it should depend mostly on two things: relation between K and length of an iterable  relation between amount of python and cpython code executed.Generally you're right, and quick tests show the difference in numbers:
There is more fast algorithm QuickSelect that does not perform full sorting - just makes partition, and has average complexity about O(N). Thanks to @Violet Red comment:  numpy.partitionComplexity of heap approach is O(NlogK), of sort approach is O(NlogN). C++ STL contains method partial_sort that might execute faster that full sorting.
Finding top K elements, can be done with complexities less than O(N * logN) with  heap based solution in O(N * logK)Median of Median solution in O(N)


Answer URL
https://docs.python.org/3/library/heapq.html#heapq.nlargest
