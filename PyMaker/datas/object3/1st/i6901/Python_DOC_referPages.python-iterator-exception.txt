Natural Text
I learnt in the past that Exception should be fired when there is somthing in the program which is not normal. For example an error when reading a file.If you look this python code you will see that a StopIteration Exception is fired. But this is not an anormal behaviour of the program. So my question is: Should we raise an exception in this case ? Thanks
Yes. You not only should raise an exception here, you must raise an exception here. This is what the iterator protocol calls for:iterator.__next__()Return the next item from the container. If there are no further items, raise the StopIteration exception. [...]You're correct in that exceptions should be raised when the program is in an exceptional state (yes, I know that sounds redundant). However, exceptions in Python are different than in most languages. Exceptions in Python are used for core language features such as iteration, and they are preferred over conditional statements. The common idiom in Python is that "It's easier to ask for foreignness instead of permission":Easier to ask for forgiveness than permission. This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of many try and except statements. The technique contrasts with the LBYL style common to many other languages such as C. The try statement is also fined-tuned to allow for the user to have control over how exceptions are handled. It allows else, finally, and multiple except clasues to be used in conjugation with it.
Yes, absolutely. The StopIteration exception needs to be raised to signal iterator when the self.count equals to self.max which means there are no more elements. Look at Python's Iterator documentationIf there are no more elements in the stream, next() must raise the  StopIteration exception.


Answer URL
https://docs.python.org/3/glossary.html#term-eafp
https://docs.python.org/3/reference/compound_stmts.html#the-try-statement
https://docs.python.org/3/howto/functional.html#iterators
https://docs.python.org/3/library/stdtypes.html#typeiter
https://docs.python.org/3/glossary.html#term-eafp
https://docs.python.org/3/howto/functional.html#iterators
