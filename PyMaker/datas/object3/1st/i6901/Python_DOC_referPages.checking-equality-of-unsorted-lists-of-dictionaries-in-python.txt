Natural Text
I want to make sure 2 unsorted lists of dictionaries are equal, i.e., they have the same content, even though the order may be different.An in check isn't good enough because duplicate dictionaries are possible. (e.g. list1 = [dict1, dict1, dict2] and list2 = [dict1, dict2, dict2])If it were lists of lists, I'd just sort them:sorted(list_of_lists1) == sorted(list_of_lists2)But sorting dictionaries is unstable.I can get around this by converting all the dicts to tuples but that seems inefficient and lame.Is there a more direct solution?
I don't think you need to hash anything - you can change each dictionary to a sorted list of tuples of key-value pairs, and sort that.Output, as expected:
If you were looking to make sure that the exact same objects are in each list the same number of times you can rely on the id (https://docs.python.org/3/library/functions.html#id) of the dictionaries, and do the sorting you mentioned:If you are looking for dicts that might be equal but are not the same python object then this wont work.


Answer URL
https://docs.python.org/3/library/functions.html#id
