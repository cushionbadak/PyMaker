Natural Text
I have a list made up of 1's and 0's e.g.I want to output another list of the same length where each entry represents the number of consecutive 0's that have just gone i.e. the output for the above example will be:Note that the first entry of the output list will always be 0 and it doesn't matter what the last entry of the input list is.What I've tried so far:It works for the example, but there might be a more efficient way that covers more edge cases.
Instead of a function that appends everything to a list you could write a generator function and then just cast that to a list. In general that's shorter and in most cases even faster (while doing the same thing)!
You stated that you're really interested in a very fast solution. In case performance is critical you could use a C extension type, for example with Cython.I'm using IPython so I simply use the cythonmagic:And let Cython compile this iterator class:It's basically the same as the generator function mentioned in the other answer but it's much faster:Giving me this result:At least on my computer it seems like this can beat the other approaches by a factor of 2-3.
Here's a vectorized solution -Sample run -Runtime testTiming against @MSeifert's solution, which seems to be competing enough from the lot of loopy solutions -
This works:
Here's a way to do it using itertools.groupby to detect runs of zeroes:This groups by using the lambda expression x == 0 as the key so that non-zero values are treated equivalently. This means that the function will work for lists that contains values other than 0 and 1, e.g.:
Another solution using numpy and scipy, for funAnd the function if you want it.EDIT: Improved versionBetter performance.
How about this list comprehension one-liner.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
