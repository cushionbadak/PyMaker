Natural Text
I tried to write a while  loop that let a user insert a number. And Python will summarize n+0.5 util it will get to the user's number.I wrote:I inserted the number 2.6 and received:what is wrong? Why don't I get
You are flooring the input:int(2.6) is 2, not 3, so the last number that's lower is 1.5; 2.0 < 2 is false and the loop ends.I'm not sure why you are converting to an integer at all; removing the int() call produces your desired output:albeit with 2.5 printed twice (once by print() in the while loop, then again by the final print() outside the loop).If you expected to round the number, then your expected output is incorrect. Looping until 3 would not only print 2.5, but 3.0 too. You round floating point numbers with the round() function. If you wanted to get the ceiling (always round up) you'd need to use math.ceil().If you wanted to list all numbers in 0.5 steps that are lower or equal to your end number, you need to alter your code to only print those numbers that are still lower:Note that we print num_a before adding 0.5 to it (and we started at 0.5).If swapping the print() statement and incrementing are not an option for you, you need to alter your test to add 0.5 first:
2.5 < 2.6, hence num_a = 2.5 is allowed to run through the while loop. Because of this, when 2.5 is passed into:You get 3 which it then prints, where as you wish to have the reverse, i.e., printing 2.5 and then adding 0.5.To solve the problem, use the following:This way, when num_a = 2.5 it will print the statement before it adds 0.5. The loop will then terminate without printing 3.0.As a final precaution, make sure you don't get confused by your final print statement which is outside of the while loop. This will still give out 3, making it seem like the loop is erroneous.
As said in the commentary, you shouldn't use int(). Moreover, you should place the print before the iteration. You'll get this :
There is no real way to round to 0.5 to my knowledge if that is indeed the plan to get it rounded on halfs and then compared this seems to work:EDIT: Some output:
It is because you are casting the float to an integer.Converting a float to an integer using the int() cuts the numbers behind the point.So for example:int(2.6) is 2int(9.8) is 9You have to make sure, it will keep the floating point number.float(2.6) is 2.6float(9.8) is 9.8You are able to use the function without casting the given number, because you casted it once the user entered it.The correct code is


Answer URL
https://docs.python.org/3/library/functions.html#round
https://docs.python.org/3/library/math.html#math.ceil
