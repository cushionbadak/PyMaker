Natural Text
This question already has an answer here:Inheritance of private and protected methods in Python                    6 answers                I've read all the similar posts regarding this topic but none that I found related to my problem in a way that helped me figure out what was happening.The error I am getting is AttributeError: 'C' object has no attribute '_B__conn'Shouldn't class C inherit the variable from B which inherited it from A?
Do not use leading double-underscore names if you want to use those names in subclasses. The __name is explicitly designed to make the name class private, that is, only useful for the exact class. The idea is that you can use such names in a framework without then limiting what names subclasses can use.Such names are mangled at compile time; they have _ClassName prefixed (with the current class name). Simply use single underscore names if you want to signal that a name is internal (Python has no actual privacy model, names are always accessible):See Reserved classes of identifiers in the lexical analysis documentation:__*  Class-private names. Names in this category, when used within the context of a class definition, are re-written to use a mangled form to help avoid name clashes between “private” attributes of base and derived classes.and the referenced documentation on names:Private name mangling: When an identifier that textually occurs in a class definition begins with two or more underscore characters and does not end in two or more underscores, it is considered a private name of that class. Private names are transformed to a longer form before code is generated for them. The transformation inserts the class name, with leading underscores removed and a single underscore inserted, in front of the name. For example, the identifier __spam occurring in a class named Ham will be transformed to _Ham__spam. This transformation is independent of the syntactical context in which the identifier is used.


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers
https://docs.python.org/3/tutorial/classes.html#private-variables
