Natural Text
I want to threads has some local variable, with thread.Thread it can be done like this elegantly:As you can see that _lines _sock _sts _cts these variable will be independent in every thread.But with concurrent.future.ThreadPoolExecutor, it seems that it's not that easy. With ThreadPoolExecutor, how can I make things elegantly?(no more global variables)New Edited
Using a layout very similar to what you have now would be the easiest thing. Instead of a Thread, have a normal object, and instead of run, implement your logic in __call__:Adding a __call__ method to a class makes it possible to invoke instances as if they were regular functions. In fact, normal functions are objects with such a method. You can now pass a bunch of TTT instances to either map or submit.Alternatively, you could absorb the initialization into your task function:Now you can call submit with the correct parameter list or map with an iterable of values for each parameter.I would prefer the former approach for this example because it opens the port outside the executor. Error reporting in executor tasks can be tricky sometimes, and I would prefer to make the error prone operation of opening a port as transparent as possible.EDITBased on your related question, I believe that the real question you are asking is about function-local variables (which are automatically thread-local as well), not being shared between function calls on the same thread. However, you can always pass references between function calls.


Answer URL
https://docs.python.org/3/reference/datamodel.html#emulating-callable-objects
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.map
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.submit
