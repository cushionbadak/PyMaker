Natural Text
Consider if you will, a world where you have a default nmap XML output.I am specifically trying to parse out the IP Address (no problem here), and OS Vendor (here is the problem).The issue is because the xml tag has several instances, as well as attributes and I can't figure out how to use the untangle syntax to pull and attribute from a tag that also needs indices.The xml looks like this:Lets just assume that I want to pull the attributes from the first instance of port.In my python, I would assume it would look something like this:The problem here, is that instance of port[0, 'attribute']) because it wants and needs that 0 index, but there are also attributes that I want to pull. Here is the python error:If I try to just use the attribute name, without the index, I get this:And if I provide just the index, I get a string with all of the attributes, but I only need to one.What am I doing wrong or is there a way?
Instead of blindly guessing, I've downloaded the module (it's a single .py file) and started to play with it. What I've learned:The xml tree is indeed converted into a tree like structure of Python objects (untangle.Element), based on xml node tags (which will become object attributes)Element supports indexing ([Python]: object.__getitem__(self, key)) and returns an xml node attribute with the name matching the given keyWhen an xml node has several nodes with the same tag, the corresponding converted object will be a list of Element objectsElement supports iteration ([Python]: object.__iter__(self)) and it yields itself when iterated overFrom bullets 3. and 4. results that it' best to always iterate over an element which can appear once or more Side note *.Here's some code that demonstrates that:Notes:Every for loop in the code is an example of iteration (that I talked above), and I got it from the provided xml sample (the complete version), looking where are there more than one node with the same tagOf course there's the alternative to iteration of always checking the type of an object, but that's neither nice nor scalableThe port handling was not required in the question, but I placed it there since there was an example that didn't work involving the portsSince the nmap scan can identify more than one OS (does happen in our case) that come from different vendors (doesn't happen in our case) which can happen especially between Ux(Unix) flavors, I added some logic for the OS vendor part to only display it once (you can manually modify the xml file, and specify a vendor other than Linux for one of the osclass nodes and see that it appears in the output)Code runs with Python3 and Python2Output:Side note *: I talked about an element that can appear once or more, but this approach (I'm talking about the untangle module approach) is not very error proof if the xml is incomplete. Take the following line of code (which is no longer used, but I kept it there only to make a point):If any of the nodes nmaprun, runstats, hosts is missing from the xml, the line will spit AttributeError. The same line, but with error proofing would look like:but that's ugly, and it gets even messier when advancing the xml tree depth.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getitem__
https://docs.python.org/3/reference/datamodel.html#object.__iter__
