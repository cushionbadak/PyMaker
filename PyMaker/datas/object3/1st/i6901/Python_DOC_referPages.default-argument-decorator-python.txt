Natural Text
Python 3.6I'm attempting to create a decorator that automatically assigns the string of the argument as the default value. such as:would be equivalent to:Here is my attempt (doesn't work.. yet..) DefaultArguments:The staticmethod default_signature creates the desired signature for the function, but I'm having difficulty assigning the new signature to the function. I'm trying to use Signature.bind I've read the docs but i'm missing something.EDIT Incorporating Ashwini Chaudhary's answer:
After binding the args and keywords with the signature you need to call apply_defaults on the BoundArguments instance to set the default values for missing arguments.Also the function call will be invoked using BoundArguments's args and kwargs properties.Demo:A functional version of your code that also updates the signature of the decorated function:Demo:
This seems to work:It relies on the fact that you can pass positional arguments by keyword in python.  e.g. if you have a function:You're completely in your rights to call it as:My solution figures out how many positional arguments you've passed and uses that to figure out which positional arguments weren't passed.  I then add those positional argument names to the kwargs dict instead.And the cool thing here is that if someone needs this for python2.x, they only need to change getfullargspec to getargspec and it should work OK.A note on speed:Comparing my solution with Ashwini's excellent explanation shows that the simple decorator is approximately 10x faster than messing around with Signature objects:His solution actually updates the __signature__ of the function (which is really nice).  In principle, you could take the Signature creation logic and add that to my solution to update the __signature__ but keep the argspec style logic for the actual computation...


Answer URL
https://docs.python.org/3/library/inspect.html
https://docs.python.org/3/library/inspect.html#inspect.BoundArguments.apply_defaults
https://docs.python.org/3/library/inspect.html#inspect.BoundArguments
https://docs.python.org/3/library/inspect.html#inspect.Signature
