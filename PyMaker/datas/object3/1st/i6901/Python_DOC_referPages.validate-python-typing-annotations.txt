Natural Text
I'd like to use typing to validate data structures at runtime outside of function invocations. But, I'm not sure how to check if two typing types are compatible. It seems that typing types don't play nicely with isinstance.The goal is to define class attributes which use descriptors to perform type checking on assignment.Here's an example:Now, it's clear to me how to write the descriptors and metaclasses required to make this work. But, I'm not sure how to validate that the value being assigned to an attribute conforms to the typing definition.
I'm standing by what I said in the comments - it shouldn't be possible to implement this for everything in the typing module. I can't think of any way to reliably implement this for an untrusted callable or consumable iterator (what if it expects you to send something? How will you know what to send?). However, for nested lists of primitive types I came up with this recursive solution:I've tested it with the following:which on my machine behaves correctly. This will throw a TypeError if you were to do eg:
The typing module does not validate your types; it simply provides more abstract types (such as List, Set, Optional, etc.) on top of what is already available in the builtins module.In order to validate your code you should use a linter which can understand Python typehints, such as MyPy.For example, if you save your code into a file /tmp/test.py:Running python -m pypy test.py gives the following error:


Answer URL
https://docs.python.org/3/library/typing.html
https://docs.python.org/3/library/functions.html
