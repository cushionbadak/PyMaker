Natural Text
The Proper way to strip(not remove) specified tags from an HTML string using Python. The questions explain it all.I am to write a python function that takes HTML string as input, and list of tags to be stripped,  (mimicking Django template's removetags functionality as it's deprecated )What's the simplest way of doing this?The following approaches didn't work for me for the listed reasons:Using regular expressions (for obvious reasons)Clean() method by Bleach library. Surprisingly such a robust library is useless for this requirement, as it followsa whitelist-first approach, while the problem is blacklist-first.     Bleach will only be useful to 'keep' certain tags but not forremoving certain (unless you are ready to maintain a huge list of allpossible ALLOWED_TAGS) lxml.html.Cleaner() combined with remove_tags or kill_tags      This is somewhat closer to what I was looking for, but it goesahead and does(removes) more than what it is supposed to, And thereis no way to control the behaviour at the finest, like requesting theCleaner() to keep the evil <script> tag.BeautifulSoup. This has a method called clear() to remove the specified tags, but it removes the content of the tags while I onlyneed to strip the tags but to keep the content.
Beautiful soup has unwrap():It replaces a tag with whateverâ€™s inside that tag.You will have to manually iterate over all tags you want to replace.
You can extend Python's HTMLParser and create your own parser to skip specified tags.Using the example provided in the given link, I will modify it to strip <h1></h1> tags but keep their data:That will return:You can now maintain a NOT_ALLOWED_TAG list to use for stripping those tags.


Answer URL
https://docs.python.org/3/library/html.parser.html
https://docs.python.org/3/library/html.parser.html#example-html-parser-application
