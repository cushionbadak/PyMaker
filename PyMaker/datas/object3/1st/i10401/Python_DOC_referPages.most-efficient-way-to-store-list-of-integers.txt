Natural Text
I have recently been doing a project in which one of the aims is to use as little memory as possible to store a series of files using Python 3. Almost all of the files take up very little space, apart from one list of integers that is roughly 333,000 integers long and has integers up to about 8000 in size. I'm currently using pickle to store the list, which takes up around 7mb, but I feel like there must be a more memory efficient way to do this.I have tried storing it as a text file and csv, bur both of these used in excess of 10mb of space.
One stdlib solution you could use is arrays from array, from the docs:This module defines an object type which can compactly represent an array of basic values: characters, integers, floating point numbers. Arrays are sequence types and behave very much like lists, except that the type of objects stored in them is constrained. This generally sheds a bit of memory of large lists, for example, with a 10 million element a list, the array trims up 11mb:Sizes:    
Here is a small demo, which uses Pandas module:DataFrame info:Results (speed):Results (size):Conclusion: pay attention at HDF5 (+ blosc or lzo compression) if you need both speed and a reasonable size or at Feather-format if you only care of speed - it's 4 times faster compared to Pickle!
I like Jim's suggestion of using the array module. If your numeric values are small enough to fit into the machine's native int type, then this is a fine solution. (I'd prefer to serialize the array with the array.tofile method instead of using pickle, though.) If an int is 32 bits, then this uses 4 bytes per number.I would like to question how you did your text file, though. If I create a file with 333 000 integers in the range [0, 8 000] with one number per line,it comes out to a size of only 1.6 MiB which isn't all that bad compared to the 1.3 MiB that the binary representation would use. And if you do happen to have a value outside the range of the native int type one day, the text file will handle it happily without overflow.Furthermore, if I compress the file using gzip, the file size shrinks down to 686 KiB. That's better than gzipping the binary data! When using bzip2, the file size is only 562 KiB. Python's standard library has support for both gzip and bz2 so you might want to give the plain-text format plus compression another try.


Answer URL
https://docs.python.org/3/library/array.html
https://docs.python.org/3/library/array.html
https://docs.python.org/3/library/gzip.html
https://docs.python.org/3/library/bz2.html
