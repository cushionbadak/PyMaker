Natural Text
I'm trying to find the intersection between the curves $ y= x^2+3x+2 $ and $ y=x^2+2x+1$. For this, I have written the following python program:The console displays:I have three questions. 1) Why must I include y_1=x**2+3*x+2 and y_2=x**2+2*x+1 in the for statement? Why can I not simply include them after the line from numpy import*?2) Why is the output to 12 decimal places when I have specified the step in np.arange to be 4 decimal places?3) Why is -1.0000 not outputted?Please go easy on me, I'm just starting to use python and thought I would try and solve some simultaneous equations with it.Thanks,Jack
Because the y_1 and y_2 lines are computing specific values, not defining functions.  Plain Python does not have a built-in concept of symbolic equations.  (Although you can implement symbolic equations various ways.)Because binary floating-point, as used in Python, cannot exactly represent 0.0001 (base 10).  Therefore, the step is rounded, so your steps are not exactly ten-thousandths.  The Python print statement does not round, absent specific instructions to do so, so you get exactly the value the system is using, even though that's not quite the value you asked for.Same reason: Since the steps are not exactly ten-thousandths, the point at which the functions are close enough to test as equal under rounding is not exactly at -1.
1) First you have (probably) redundant import statements:The first statement imports the __all__ variable from the package the second statement imports the numpy package then aliases it as np. The normal convention is to import numpy as np, so I would delete your first line and keep the second. Now to more clearly answer your question, you need to include your equations in the for loop because x is representing each element in the np.array using the for loop.2 and 3) The value is probably being interpreted as a float in your equations. The rounding error is inherent to how python (and most programing languages) interpret fractions. See more here.  


Answer URL
https://docs.python.org/3/tutorial/floatingpoint.html
