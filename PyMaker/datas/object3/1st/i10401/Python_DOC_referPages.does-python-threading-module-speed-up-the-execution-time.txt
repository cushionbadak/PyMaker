Natural Text
I have a database containing employee information. I have 4000 employees. Each employee has an unique identification number.I try to fetch employee information for each employee from the database using a python script. For 1 employee, the execution time for fetching info is 1 seconds. For 4000 employees, it makes 4000 seconds (67 minutes, who would like to wait that long?). The employee infos should be stored in a dictionary, in the following format:I'm thinking of doing the following to reduce the execution time:Get employee id numbersDivide the id numbers into 10 groupsStart 10 threads simultaneouslyMake each thread use 1 of 10 employee id groups and fetch those employees' infofrom database into separate dictionariesIn the end, combine those 10 dictionariesIs it possible? Would this method reduce the execution time 10 times?
I think you're confusing threading with concurrency.Threading is the act of simply using multiple threads of execution at the same time. This doesn't mean multiple actions are done simultaneously though... your processor still has to switch between the threads. This technique is useful when you're expecting to wait a long time for an operation to complete (like reading a large file) and you want other stuff to happen in the meantime (printing a progress bar, for example).Concurrency is when you create multiple threads, and different threads get assigned to different cores in the processor. This is, of course, dependent on the hardware (you need a multicore processor to accomplish it).Python's threading module allows for multiple threads to be created, sure; and in an ideal world it would automatically handle concurrency. But the default Python interpreter, CPython, does not allow for native concurrency due to the "Global Interpreter Lock". (See this page just above the section 17.1.3 heading and this SO post for more information about GIL.) In fact, using threading like you suggest may even make your execution slower (see here).I've not done concurrency in Python, but I would advise you to check out the multiprocessing module as a possible solution.


Answer URL
https://docs.python.org/3/library/threading.html
https://docs.python.org/3/library/multiprocessing.html
