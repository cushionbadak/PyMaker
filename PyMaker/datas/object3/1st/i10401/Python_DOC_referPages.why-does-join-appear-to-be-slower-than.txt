Natural Text
Despite this question Why is ''.join() faster than += in Python? and it's answers and this great explanation of the code behind the curtain: https://paolobernardi.wordpress.com/2012/11/06/python-string-concatenation-vs-list-join/My tests suggest otherwise and I am baffled.Am I doing something simple, incorrectly? I'll admit that I'm fudging the creation of x a bit but I don't see how that would affect the outcome.   (1473524757.681939, 1473524757.68521, '=', 0.0032711029052734375)(1473524814.544177, 1473524814.547544, '=', 0.0033669471740722656)(1473524861.949515, 1473524861.978755, '=', 0.029239892959594727)As can be seen the "".join() is much slower and yet we're told that it's meant to be quicker.These values are very similar in both python2.7 and python3.4Edit:Ok fair enough.The "one huge string" thing is the kicker.(1473526344.55748, 1473526344.558409, '=', 0.0009288787841796875)An order of magnitude quicker.Mea Culpa!
You called ''.join() on one huge string, not a list (multiplying a string produces a larger string). This forces str.join() to iterate over that huge string, joining 74k individual 'x' characters. In other words, your second test does 74 times more work than your first.To conduct a fair trial, you need to start with the same inputs for both, and use the timeit module to reduce the influence of garbage collection and other processes on your system.That means both approaches need to work from a list of strings (your assignment examples rely on repeatedly adding a string literal, stored as a constant):On my Macbook Pro, on Python 3.5, this produces:On 2.7, I get:str.join() is still the winner here.
You are not comparing the same operation because your first operation added the long string every iteration while join added every item of the string seperatly. (See also @MartijnPieters answer)If I run a comparison I get completly different timings suggesting that str.join is much faster:


Answer URL
https://docs.python.org/3/library/timeit.html
