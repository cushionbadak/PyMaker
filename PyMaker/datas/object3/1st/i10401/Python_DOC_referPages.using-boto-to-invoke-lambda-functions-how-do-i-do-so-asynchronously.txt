Natural Text
SO I'm using boto to invoke my lambda functions and test my backend. I want to invoke them asynchronously. I have noted that "invoke_async" is deprecated  and should not be used. Instead you should use "invoke" with an InvocationType of "Event" to do the function asynchronously.  I can't seem to figure out how to get the responses from the functions when they return though. I have tried the following: Even though I tell the code to sleep for 15 seconds, the response variable is still empty when I try and print it. If I change the invokation InvokationType to "RequestResponse" it all works fine and response variable prints, but this is synchronous. Am I missing something easy? How do i execute some code, for example print out the result, when the async invokation returns??Thanks.
An asynchronously executed AWS Lambda function doesn't return the result of execution. If an asynchronous invocation request is successful (i.e. there were no errors due to permissions, etc), AWS Lambda immediately returns the HTTP status code 202 ACCEPTED and bears no further responsibility for communicating any information about the outcome of this asynchronous invocation.From the documentation of AWS Lambda Invoke action:Response SyntaxResponse ElementsIf the action is successful, the service sends back the following HTTP  response.StatusCodeThe HTTP status code will be in the 200 range for successful request.  For the RequestResponse invocation type this status code will be 200.  For the Event invocation type this status code will be 202. For the DryRun invocation type the status code will be 204.[...]The response returns the following as the HTTP body.PayloadIt is the JSON representation of the object returned by the Lambda  function. This is present only if the invocation type is  RequestResponse.
There is a difference between an 'async AWS lambda invocation' and 'async python code'. When you set the InvocationType to 'Event', by definition, it does not ever send back a response.In your example, invoke() immediately returns None, and does not implicitly start up anything in the background to change that value at a later time (thank goodness!). So, when you look at the value of response 15 seconds later, it's still None.It seems what you really want is the RequestResponse invocation type, with asynchronous Python code. You have a bunch of options to choose from, but my favorite is concurrent.futures. Another is threading.Here's an example using concurrent.futures:(If you're using Python2 you'll need to pip install futures)Another pattern you might want to look into is to use the Event invocation type, and have your Lambda function push messages to SNS, which are then consumed by another Lambda function. You can check out a tutorial for SNS-triggered lambda functions here.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
https://docs.python.org/3/library/threading.html
