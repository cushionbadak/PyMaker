Natural Text
I am writing a program that must accept input from the user.This works as expected if the user enters sensible data. But if they make a mistake, then it crashes:Instead of crashing, I would like it to try getting the input again. Like this:How can I accomplish this? What if I also wanted to reject values like -1, which is a valid int, but nonsensical in this context?
The simplest way to accomplish this would be to put the input method in a while loop. Use continue when you get bad input, and break out of the loop when you're satisfied.When Your Input Might Raise an ExceptionUse try and catch to detect when the user enters data that can't be parsed.Implementing Your Own Validation RulesIf you want to reject values that Python can successfully parse, you can add your own validation logic.Combining Exception Handling and Custom ValidationBoth of the above techniques can be combined into one loop.Encapsulating it All in a FunctionIf you need to ask your user for a lot of different values, it might be useful to put this code in a function, so you don't have to retype it every time.Putting It All TogetherYou can extend this idea to make a very generic input function:With usage such as:Common Pitfalls, and Why you Should Avoid ThemThe Redundant Use of Redundant input StatementsThis method works but is generally considered poor style:It might look attractive initially because it's shorter than the while True method, but it violates the Don't Repeat Yourself principle of software development. This increases the likelihood of bugs in your system. What if you want to backport to 2.7 by changing input to raw_input, but accidentally change only the first input above? It's a SyntaxError just waiting to happen.Recursion Will Blow Your StackIf you've just learned about recursion, you might be tempted to use it in get_non_negative_int so you can dispose of the while loop.This appears to work fine most of the time, but if the user enters invalid data enough times, the script will terminate with a RuntimeError: maximum recursion depth exceeded. You may think "no fool would make 1000 mistakes in a row", but you're underestimating the ingenuity of fools!
Why would you do a while True and then break out of this loop while you can also just put your requirements in the while statement since all you want is to stop once you have the age?This would result in the following:this will work since age will never have a value that will not make sense and the code follows the logic of your "business process"
Though the accepted answer is amazing. I would also like to share a quick hack for this problem. (This takes care of the negative age problem as well.) P.S. This code is for python 3.x.
So, I was messing around with something similar to this recently, and I came up with the following solution, which uses a way of getting input that rejects junk, before it's even checked in any logical way.read_single_keypress() courtesy https://stackoverflow.com/a/6599441/4532996You can find the complete module here.Example:Note that the nature of this implementation is it closes stdin as soon as something that isn't a digit is read. I didn't hit enter after a, but I needed to after the numbers.You could merge this with the thismany() function in the same module to only allow, say, three digits.

Try this one:- 
To edit your code and fix the error:
You can write more general logic to allow user to enter only specific number of times, as the same use-case arises in many real-world applications.
Use "while" statement till user enter a true value and if the input value is not a number or it's a null value skip it and try to ask again and so on. In example I tried to answer truly your question. If we suppose that our age is between 1 and 150 then input value accepted, else it's a wrong value.For terminating program, the user can use 0 key and enter it as a value.Note: Read comments top of code.
Building upon Daniel Q's and Patrick Artner's excellent suggestions,here is an even more generalized solution.I opted for explicit if and raise statements instead of an assert,because assertion checking may be turned off,whereas validation should always be on to provide robustness.This may be used to get different kinds of input,with different validation conditions.For example:Or, to answer the original question:
While a try/except block will work, a much faster and cleaner way to accomplish this task would be to use str.isdigit().
You can make the input statement a while True loop so it repeatedly asks for the users input and then break that loop if the user enters the response you would like. And you can use try and except blocks to handle invalid responses.The var variable is just so that if the user enters a string instead of a integer the program wont return "You are not able to vote in the United States."
Use try catch with never ending while loop. To check for blank string use IF statement to check if string is empty.
This will continue ask user to input the number until they input a valid number:
One more solution for using input validation using a customized ValidationError and a (optional) range validation for integer inputs:Usage:Output:
Here's a cleaner, more generalized solution that avoids repetitive if/else blocks: write a function that takes (Error, error prompt) pairs in a dictionary and do all your value-checking with assertions.Usage:
Good question! You can try the following code for this. =)This code uses ast.literal_eval() to find the data type of the input (age). Then it follows the following algorithm:Ask user to input her/his age.1.1. If age is float or int data type:Check if age>=18. If age>=18, print appropriate output and exit.Check if 0<age<18. If 0<age<18, print appropriate output and exit.If age<=0, ask the user to input a valid number for age again, (i.e. go back to step 1.) 1.2. If age is not float or int data type, then ask user to input her/his age again (i.e. go back to step 1.) Here is the code.


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops
https://docs.python.org/3/tutorial/errors.html#handling-exceptions
https://docs.python.org/3/library/ast.html
