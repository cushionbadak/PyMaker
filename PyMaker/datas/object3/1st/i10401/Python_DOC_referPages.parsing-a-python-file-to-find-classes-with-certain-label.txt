Natural Text
I have a python file with many classes in it. The file looks something like that:What I want to do is to make a list of all the classes that has the @label before their declaration, i.e in this example: [B,C]. (That will happen in another file, if it matters)What I tried so far is parsing the file like it was a regular text file (with read() and stuff), but what I get is a list of the classes name and not the classes themselves, i.e  (['B','C']) and I don't know what to do next. I would really hope there's a more elegant way. My next step, after I get that classes list, is to activate for each of the classes a certain function they all have. That's why the name of the class isn't enough for me. 
You have two options:use the tokenize module to look out for token.OP tokens with the value @, followed by token.NAME tokens for label and, after a newline token, class. This is the most light-weight.use the ast module to parse the source into a tree, then use the ast.walk() function, looking for ast.ClassDef objects. If the object has a ast.Name object with id == 'label' in the decorator_list attribute, you can record the name attribute.The latter is probably easiest:Demo:


Answer URL
https://docs.python.org/3/library/tokenize.html
https://docs.python.org/3/library/ast.html
