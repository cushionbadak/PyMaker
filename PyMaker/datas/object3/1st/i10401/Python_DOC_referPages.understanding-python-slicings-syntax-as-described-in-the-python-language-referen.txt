Natural Text
The following is the slicings syntax that I copied from The Python Language Reference:Per my understanding, this syntax equates to SomeMappingObj[slice_item,slice_item etc...] which again equates to something like a[0:2:1,4:7:1] and a =[i for i in range(20)]. But, I can't test this in IPython and I did not find any questions about multiple slicings. Is my interpretation about multiple slicing in python correct? What am I doing incorrectly?
A slice_list should contain as many "dimensions" as the object being indexed. The multi-dimensional capability is not used by any Python library object that I am aware of, but you can test it easily with numpy:There are a number of such features in the Python language that are not used directly in the main library. The __matmul__ magic method (@ operator) is another example.
That's valid syntax, so you didn't get a SyntaxError. It's just not a meaningful or supported operation on Python lists. Similarly, "5" + fish isn't a SyntaxError, 1/0 isn't a SyntaxError, and I.am.a.monkey isn't a SyntaxError.You can't just expect all syntactically valid expressions to be meaningful.
Note that the grammar is structured this way to allow two things:A family of slice literals:x:y:z == slice(x, y, z)x:y == slice(x, y, None)x: == slice(x, None, None)x::z == slice(x, None, z)::z == slice(None, None, z):y:z == slice(None, y, z):: == slice(None, None, None):y: == slice(None, y, None)There are a few other patterns possible (x:y:, :y, etc), but eachis a variation on one of the above.Slice literals may only be used inside [...], not in any arbitrary expression.Otherwise, the comma-separate list is treated like any other tuple. When you write an expression like f[1, 2:3, 5::7], then f.__getitem__ receives a tuple (1, slice(2, 3, None), slice(5, None, 7) as its argument. What f.__getitem__ does with that argument is entirely up to type(f)'s implementation of __getitem__. For instance, lists and strings only accept int and slice values as arguments, and dicts only accept hashable values.
This isn't a syntax issue hence no SyntaxError, this syntax is totally supported. list's just don't know what to do with your slices. Take for example a dummy class that does nothing but define __getitem__ that receives the contents of subscriptions []:It just prints its arg. We can supply slices, as permitted by the grammar, but, it's up to the implementing object to decide if these are an operation that's supported and act on them (like nparrays do) or not (and raise a TypeError):Heck:By reading further on in the reference for slicings you should see that:The semantics for a slicing are as follows. The primary is indexed (using the same __getitem__() method as normal subscription) with a key that is constructed from the slice list, as follows. If the slice list contains at least one comma, the key is a tuple containing the conversion of the slice items; otherwise, the conversion of the lone slice item is the key. (emphasis mine)


Answer URL
https://docs.python.org/3/reference/expressions.html#slicings
https://docs.python.org/3/reference/expressions.html#slicings
