Natural Text
I'm using Python to split a string of 2 bytes b'\x01\x00'. The string of bytes is stored in a variable called flags.Why when I say flags[0] do I get b'\x00' but when I say flags[0:1] I get the expected answer of b'\x01'.Should both of these operations not be exactly the same?What I did:
In Python 3, bytes is a sequence type containing integers (each in the range 0 - 255) so indexing to a specific index gives you an integer.And just like slicing a list produces a new list object for the slice, so does slicing a bytes object produce a new bytes instance. And the representation of a bytes instance tries to show you a b'...' literal syntax with the integers represented as either printable ASCII characters or an applicable escape sequence when the byte isn't printable. All this is great for developing but may hide the fact that bytes are really a sequence of integers.However, you will still get the same piece of information; flags[0:1] is a one-byte long bytes value with the \x01 byte in it, and flags[0] will give you the integer 1:What you really did was not use flags[0], you used bytes(flags[0]) instead. Passing in a single integer to the bytes() type creates a new bytes object of the specified length, pre-filled with \x00 bytes:Since flags[0] produces the integer 1, you told bytes() to return a new bytes value of length 1, filled with \x00 bytes.From the bytes documentation:Bytes objects are immutable sequences of single bytes.[...]While bytes literals and representations are based on ASCII text, bytes objects actually behave like immutable sequences of integers, with each value in the sequence restricted such that 0 <= x < 256.[...]In addition to the literal forms, bytes objects can be created in a number of other ways:A zero-filled bytes object of a specified length: bytes(10)Bold emphasis mine.If you wanted to create a new bytes object with that one byte in it, you'll need to put the integer value in a list first:
Yes, you should get the same thing. In both cases b'\x01'. flags is probably not what you think it is.


Answer URL
https://docs.python.org/3/library/stdtypes.html#bytes
