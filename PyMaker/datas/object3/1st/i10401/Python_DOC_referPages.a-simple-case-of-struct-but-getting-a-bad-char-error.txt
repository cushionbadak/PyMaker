Natural Text
I'm attempting to read a section of a binary file, and decode it as a string of characters using the struct. module. It's a simple enough case. Here is the bytes argument:and here is the function I am attempting to use: The output should be twelve characters, no?:It returns "struct.error bad char in struct format" for some reason. What's going on? I tried a lot of resources but nobody had an example of this happening. I've tried other formats besides 'utf-8', such as 'ascii'.edit - there seems to be confusion; maybe i should have given my problem in less general terms: I am attempting to write a command that will decode a bytes object created using f.read, in a variable format, and I tried to do it this way: Value = struct.unpack(Format, Bytes)[0]whereBytes = f.read(Length)andFormat = 'i' or 'd' or whatever it needs to be. What I tried worked great for the case of an integer ('i') but did not work for the case of a string of characters - I got the error instead, and I'm trying to figure out why. Thanks for any help!edit2 - for anyone coming after me, it looks like this is simply not possible to handle in python with a single function, because the struct.unpack function doesn't handle unicode strings and the decode. function doesn't handle encoded numbers. The only way to do what I need to do appears to be to use an if: to apply the proper function for the format
EDITno "i" is not a valid encoding to use str.decodesee https://docs.python.org/2/library/codecs.html#standard-encodingsno "utf-8" is not a valid format string to pass to struct.unpacksee https://docs.python.org/3/library/struct.html#format-charactersold anser ...struct.unpack is not the right tool to use hereyou simply want to decode the bytes to a unicode string I believeif you want to struct.unpack a string you can ... but its just unpacking a bytestring
The struct module does a completely different job from what you're trying to do. It's for deserializing data that looks like serialized C structs (hence the name). ints, doubles, fixed-size char arrays, things like that, packed together in a rigid layout with fixed alignment and padding. If you look at the docs, you'll see nothing related to Unicode codecs, and the format string argument format looks nothing like a codec name.You want the built-in bytestring decode method, which does Unicode decoding:though that \x00 will still be a Unicode NUL, not a space, because Unicode doesn't work like that.


Answer URL
https://docs.python.org/3/library/struct.html#format-characters
