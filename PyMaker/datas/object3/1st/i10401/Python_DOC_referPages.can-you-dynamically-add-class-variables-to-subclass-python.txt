Natural Text
I have a large amount of auto-generated classes in python that essentially represent enums for part of a communication protocol, they look like soDefining things this way makes it easy for the auto-generator and also for humans to modify. The ParamEnum class provides all the functionality, get/setting, comparison, conversion and creation from the incoming network data and etc.However, these classes require some extra meta-data. I do not want to add this into the source definition of each class though, as it makes it less readable and will break the autogeneratorAt the moment I am doing it like thishowever that strikes me as somewhat inefficient, since this will happen every time we instantiate one of these Enums (which happens often), not just on definition (the metadata does not change, so it only needs to be set once)I tried added this to the bottom of the definition file, but ran into problems there too.Is there a way in python of overriding/adding functionality to when the class is defined, that can be inherited to subclasses? Ideally I'd like something like
Use a class decoratorWhat you want to do is in fact the very motivation to have decorators: The modification of a class or function after it has been created.If you are unfamiliar with decorators, please read this (although it's a bit lengthy).You could also use metaclasses, but they introduce more complexity than a decorator. If you want to avoid the additional decoration line @add_metadata and you think it is redundant with respect to the specified subclass ParamEnum, you could also make _metadata a descriptor with lazy evaluation within the base class ParamEnum.


Answer URL
https://docs.python.org/3/howto/descriptor.html#descriptor-protocol
