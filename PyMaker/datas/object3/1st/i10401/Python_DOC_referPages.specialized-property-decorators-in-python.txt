Natural Text
I have a few classes each of which has a number of attributes. What all of the attributes have in common is that they should be numeric properties. This seems to be an ideal place to use python's decorators, but I can't seem to wrap my mind around what the correct implementation would be. Here is a simple example:It seems to me that it should be possible to write a decorator that does everything so that the above can be transformed into:That way the new numeric_property decorator can be used in many classes.
A @property is just a special case of Python's descriptor protocol, so you can certainly build your own custom versions. For your case:In use:
Option 1: inherit from propertyproperty is a descriptor. See Descriptor HowTo on python.org.So, can inherit from property and override the relevant methods.For example, to enforce int on setter:And now you have integers enforced:Option 2: Create a better descriptorOn the other hand, it may be even better to implement a brand new descriptor which does not inherit from property, which would enable you to define the property in one go.It would be nicer to have this kind of interface:For that you would implement a descriptor which takes the attribute name:Disclaimer :)I would rather not enforce strict typing in Pyhon, because Python is much more powerful without it.
You may just create a function that does it for you . As simple as it can get, no need to create a custom descriptor:


Answer URL
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/howto/descriptor.html
