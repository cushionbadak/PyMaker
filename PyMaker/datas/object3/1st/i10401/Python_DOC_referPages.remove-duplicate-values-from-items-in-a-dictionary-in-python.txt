Natural Text
How can I check and remove duplicate values from items in a dictionary?I have a large data set so I'm looking for an efficient method. The following is an example of values in a dictionary that contains a duplicate:needs to become 
This problem essentially boils down to removing duplicates from a list of unhashable types, for which converting to a set does not possible.One possible method is to check for membership in the current value while building up a new list value.Alternatively, use groupby() for a more concise answer, although potentially slower (the list must be sorted first, if it is, then it is faster than doing a membership check).Output -> {'word': [('769817', [6]), ('769819', [4, 10])]}
You have a list, not a dictionary.  Python dictionaries may have only one value for each key.  Tryresult:a Python dictionary.  For more information https://docs.python.org/3/tutorial/datastructures.html#dictionaries
How about this:I am just focusing on the list part:
Strikethrough applied to original question before edits, left for posterity:You're not using a dict at all, just a list of two-tuples, where the second element in each tuple is itself a list. If you actually want a dict, will convert it, and uniquify by key (so you'd end up with {'769817': [6], '769819': [4, 10]}, though it loses order, and doesn't pay attention to whether the values (the sub-lists) are unique or not (it just keeps the last pairing for a given key).

You can uniqify the items based on the hash they generate. Hash could be anything, a sorted json.dumps, or cPickle.dumps.This one liner can uniqify your dict as required.
How about that?


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#dictionaries
