Natural Text
This question already has an answer here:How to find the cumulative sum of numbers in a list?                    18 answers                I have an old list and I want to sum up every single element to a new list:Is there an elegant way to implement that in Python 3 with short and fast code? Apart from sum() which only prints last element I couldn't find a proper solution for my problem.
You can use itertools.accumulate, eg:
itertools.accumulate as mentioned by Jon Clements is the best way to do. However, in case you want an explicit way to do it, here goes:Main advantage of this is, you can wrap it in a function and if there is any transform or validation need to be performed, can be added.For example, lets say you want to stop the function keep going after a limit, the following will help:The flexibility will be limitless if there is any transformation or operation need to be done here. Have a pre-condition that need to be set? Go ahead. Have a post-condition that need to be tested? Go ahead. Pretty huge list and wanted a generator based solution just like the itertools.accumulate? Go ahead. Need to add a validation or exception handling? Go ahead.However, no transformation and simply accumulate? The previous answer is the best. Using sum with list indices is pretty slow as the order of complexity sky rockets.
You can take the sum of a slice of a list using listname[start:end], with both start and end as optional arguments (defaulting to the beginning and end of the list):


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.accumulate
