Natural Text
I am trying to extract data out of a byte object. For example:From b'\x93\x4c\x00' my integer hides from bit 8 to 21.I tried to do bytes >> 3 but that isn't possible with more than one byte.I also tried to solve this with struct but the byte object must have a specific length.How can I shift the bits to the right?
Don't use bytes to represent integer values; if you need bits, convert to an int:where the 0x1fffff mask could also be calculated with:Demo:You can then move back to bytes with the int.to_bytes() method:
As you have a bytes string and you want to strip the right-most eight bits (i.e. one byte), you can simply it from the bytes string:If you want to convert that then to an integer, you can use Python’s struct to unpack it. As you correctly said, you need a fixed size to use structs, so you can just pad the bytes string to add as many zeros as you need:Of course, you can also convert it first, and then shift off the 8 bits from the resulting integer:If you want to make sure that you don’t actually interpret more than those 13 bits (bits 8 to 21), you have to apply the bit mask 0x1FFF of course:(If you need big-endianness instead, just use <L or <Q respectively.)If you are really counting the bits from left to right (which would be unusual but okay), then you can use that padding technique too:Note that we’re adding the padding to the other side, and are shifting it by 43 bits (your 3 bits plus 5 bytes for the padded data we won’t need to look at)
Another approach that works for arbitrarily long byte sequences is to use the bitstring library which allows for bitwise operations on bitstrings e.g.
You could convert your bytes to an integer then multiply or divide by powers of two to accomplish the shifting


Answer URL
