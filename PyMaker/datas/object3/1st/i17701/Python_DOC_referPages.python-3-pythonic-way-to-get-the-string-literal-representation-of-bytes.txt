Natural Text
There is similiar question, but the solution doesn't seem to work.Say I've encoded a string:What I want is something like this:str(a) doesn't work:I've tried redirect stdout to a variable, but still, I got "b'dada\\xe5\\xa4\\xa7\\xe5\\xa4\\xa7'".  I can deal with it using regular expression and get what I want, but I'm searching for a more pythonic way to do this. Any suggestions?
As you were so nice to mention your actual problem in a comment, I’ll update my answer once more to respond to that actually. The original answer can be seen below.It's the string I post to Github Markdown API. This is the only way that unicode character can be accepted. I got the rendered html with the orignal character dada大大The GitHub Markdown API requires you to send the data as JSON. JSON itself borrows the string escaping from JavaScript, which would be \u5927 for this character. When using the json module however, you don’t need to worry about that at all:As you can see, the API accepts the encoded text without problems and correctly produces the correct output, without having to worry about the encoding.Or when using the raw API with the requests library:Original answerWhen you just do str(a) you will get the string representation of the bytes string. Of course, when you just use it like that in the interpreter, the interpreter will actually call repr on it to display it. And a string that contains backslashes will have them escaped as \\. That’s where those came from.And finally, you have to strip of the b' and the trailing ' to get just the content of the string representation of the bytes string.Side note: str() and repr() will produce the same result when used on bytes objects.According to Poke's answer, what I need is preventing autoescaping of repr.No, you don’t. There are no double backslashes in the final string. They only appear because when you enter stuff in your REPL, it will output the return values of things to the console after calling repr on them. But that does not mean, that the actual string suddenly got changed:As you can see, there are not double backslashes in the string. Yes, you can see them again, but that’s again only because the return value of list(s) is being printed by the REPL. Each item of the list is a single character though, including the backslashes. They are just escaped again because '\' wouldn’t be a valid string.
bytes is really an array of integers:You can get the hex values of each of these usingAnd therefore
OK, finally I found the solution, it's from Python Replace \\ with \Maybe I should have explained what I want clearer.Edit - My test result


Answer URL
