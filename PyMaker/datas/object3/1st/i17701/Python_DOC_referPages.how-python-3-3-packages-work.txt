Natural Text
I'm using Python 3.3, testing this on Windows. I don't understand something. Why when I do:I'm getting errorandThere is no request, so it looks solid. However when importing submodule request:It seems to workAnd now automagically dir(urllib) shows:Why I don't see after import urllib all submodules? According to http://docs.python.org/3.3/library/urllib.html#urllib.urlopen it should be request, error, parse, parserobots. Does it differ in other OSes?
When you arewhat you are really doing is looking for name something defined in package/__init__.py. So if someone explicitly put some names there you can use it. Otherwise you can't.Look at the Python web.py library for example (github). You canIt's here because in web/__init__.py there is an explicit import httpserver or similar statement.It's not a Python 3 issue actually. You run into it in Python 3 because it uses packages for standard library not just a plain modules like Python 2. And urllib/__init__.py is currently empty for some reason so you need to explicitly import exact modules like request to use them. For some standard packages Python 3 import some of the "submodules" in corresponding __init__.py files. Maybe it's just for backward compatibility though.Another question is why after just import urllib.request your dir(urllib) shows other modules like response. Looks like all the modules from the same package used internally by urllib.request become available after import. If you just import urllib.error you don't get request because error not uses it. All of this become more understandable if you check the source code of Python importing system - it's full of side effects (e.g. "caching" imported modules using global sys.modules dictionary).
urllib is a package. Importing a package won't automatically import the modules the package contains; you need to explicitly import the urllib.request module.
Lets have a look at dir(). As stated in documentation, it lists names defined in module - and packages module is its __init__.py. request is not defined in urllibs __init__, so it won't be listed.And now, for "how packages work" - package is some kind of directory-based module. It is loaded from its __init__.py, but allows for submodules and subpackages (being files and directories in the same directory as __init__). Now, when you load package (e.g. urllib) you don't load ("load" meaning "execute its code") all files and directories in it, but only it's "initializer" (think of __init__.py as __init__ method of the class, but for module - in the end module and class are both objects, right?).Comparison to class is quite good - when you create object, you call only it's __init__, method, not all of its attributes (methods are attributes too). Also, attributes can be functions or fields. Fields can also have attributes. To clarify:__init__.py is for package what __init__ is for objectsubmodule is for package what method (function attribute) is for objectsubpackage is for package what field (non-function attribute) is for object.Why? __init__ takes care of setting objects up, submodules/methods are ways of storing logic in one place, and subpackages/fields are ways of organizing other submodules/methods or sub-subpackages/fields.To be frank: it doesn't work like this in CPython implementation, but it is quite good model for understanding how it will behave.


Answer URL
