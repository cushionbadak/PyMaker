Natural Text
I have a text file that I need to parse.In this text file, words, numbers, spaces, etc is in this file in no particular order.Some point in this .txt file will come the string: I need to parse the entire line into a separate file when I see this.example inputfile.txtmy script should create:outputfile.txtwhich should contain:The program that I have so far that does not seem to be working:
You haven't told us what your code is doing wrong, so it's hard to explain why it's doing whatever-it-is-that-may-be wrong… but I can see four immediate problems. You will have to fix all of these problems, and possibly others that I haven't seen, before your code will actually work.Zeroth, your code won't even run because of a simple SyntaxError. If you look at the traceback that Python prints out, it will tell you pretty clearly:Why doesn't it like an if after an else like this? Because else must be followed immediately by a colon, and if isn't a colon.You probably wanted elif:I assume this is just the same kind of silly typo we all make all the time—but just in case you don't actually understand elif, see the tutorial.First, you use outputfile.txt in some places, output.txt in others. Presumably you wanted all of these lines to go to the same file, but some of them are going to a completely different file, and you probably aren't looking for them there.Second, you use 'w' mode for opening the file each time. That truncates the file at position 0—in other words, it erases anything that was previously there. So, at the end of the program, only the very last match will be in the file, rather than all of them.If you want to append to an existing file, you can open it in 'a' mode for append, or open it in 'r+' mode for read/write and then seek to the end of the file.But I think what you actually want may to be create a new file at the start of the program, erasing anything that might have been there before you started, then write all of the lines to that file. For that, the simplest solution is to just open the file once, at the very top. Like this:Third:You've left the % operator out. Which means you're just trying to call the string "Line #%d has string: %s" as if it were a function, passing it index and line as arguments. That's obviously not legal, and it's why you get a TypeError telling you that a str is not callable.Python gives you these errors for a reason: so you can tell where the problem is in your code, and fix it. Don't just run your code, see that "it didn't work", and throw your hands up in the air. If you're not willing to debug, don't bother writing code in the first place, because nobody can write code that just works, or fix code without knowing what it's doing wrong.
Regular expressions would really help:


Answer URL
