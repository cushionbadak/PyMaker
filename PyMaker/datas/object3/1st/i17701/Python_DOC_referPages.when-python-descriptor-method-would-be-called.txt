Natural Text
I simulate some data using python descriptor.  the output:It seems successfully call the method __get__ and __set__, but i don't know why there's no output message is getting number or is setting number.I'm not sure whether python call the descriptor method or not.my question is when descriptor method would be called?I summary my origin guess:getWhen use obj.prop to get property and the prop is another object which is setting descriptorwhen calculate some expression should get value such as a + 5. If a is have descriptor and will call __get__If a object simulate a function will call __get__ to get function body first, and then call __call__ to run the function.setWhen the object appear in the left side of assignment statement such as obj = 5But I must be wrong, i need someone to tell me the right concept.
Your descriptors are not being called, and there is no way to write a descriptor or anything else to do what you seem to want.When you do num = 2, you have thrown away your Number object and set the variable num to the ordinary number 2.  When you then add 7 to it, it equals 9, because it's just a regular number.  Your Number class is not involved in any way.Descriptors allow you to hook into what happens when you do obj.foo or obj.foo = blah.  In these cases it is foo that is the descriptor, not obj, and the descriptor only works when it is an attribute.  There is no way to change what happens when you do obj = blah, where obj is a bare name (i.e., no dots or []).  In relation to your guess:getWhen use obj.prop to get property and the prop is another object which is setting descriptorYes, basically.  When you do obj.prop and prop is a descriptor, then its __get__ is called.  Note that prop is the descriptor, not obj.when calculate some expression should get value such as a + 5. If a is have descriptor and will call __get__No.  You can override such behavior with the __add__ magic method, or similar methods for other operatorsIf a object simulate a function will call __get__ to get function body first, and then call __call__ to run the function.I don't understand what this means, but I think no.  If the object defines __call__, then obj() calls its __call__ without involving any descriptor.setWhen the object appear in the left side of assignment statement such as obj = 5No.  Only when the descriptor is accessed as an attribute on the left side, as in obj.prop = 5, where prop is a descriptor.The bottom line is that descriptors only work when they are attributes of classes.  Just creating a "bare" descriptor as you're trying to do (i.e., doing obj = SomeDescriptorClass()) won't do anything.Also, as a side note, descriptors only work when set on new-style classes.  If you're using Python 2, this means that the class holding the descriptor has to inherit from object.
num = 2 makes num an int but not Number anymore.Descriptor needs to be an attribute of instance and inherited from object.


Answer URL
