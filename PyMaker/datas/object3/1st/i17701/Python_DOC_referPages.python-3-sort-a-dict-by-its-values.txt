Natural Text
The only methods I found work for python2 or return only list of tuples.Is it possible to sort dictionary, e.g. {"aa": 3, "bb": 4, "cc": 2, "dd": 1}, by its values?Order of sorted dictionary I want to achieve is from largest to smallest. I want results to look like this:And after sorting I want to store it into a text file.
itemgetter (see other answers) is (as I know) more efficient for large dictionaries but for the common case, I believe that d.get wins. And it does not require an extra import.Note that alternatively you can set d.__getitem__ as key function which may provide a small performance boost over d.get.
printsThough from your last sentence, it appears that a list of tuples would work just fine, e.g.which prints
To sort dictionary, we could make use of operator module. Here is the operator module documentation. Output sequence will be a sorted list :If we want to sort with respect to keys, we can make use of Output sequence will be :
A simpler (and ~10% faster) way is to use a lambda expressionTimings%%timeit on CPython 3.7 with print(k, v) substituted for pass to keep IO out of the picture.Accepted answer using d.get():Lambda expression:
To sort a dictionary and keep it functioning as a dictionary afterwards, you could use OrderedDict from the standard library.If that's not what you need, then I encourage you to reconsider the sort functions that leave you with a list of tuples.  What output did you want, if not an ordered list of key-value pairs (tuples)?
If you want to sort by values in reverse order (largest to smallest)If you want to sort by values in regular order (smallest to largest)If you want to sort by the keys in regular orderThis works on CPython 3.6+ and any implementation of Python 3.7+ because dictionaries keep insertion order.


Answer URL
https://docs.python.org/3/whatsnew/3.6.html
