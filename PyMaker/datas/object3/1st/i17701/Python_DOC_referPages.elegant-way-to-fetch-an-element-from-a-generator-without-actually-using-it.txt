Natural Text
I'm using a lot of generator in Python, often I need to get one and only one object from my generator but I don't want this to skip this object, just to be able to look at it (to view its keys if it's a dictionary for example).Please do not explain workarounds in your answer (like testing for first element within the loop), I'm looking for a "clean" way to do this.
It is not possible to get an element from a generator without advancing the generator.  That's how generators work.  You can use tricks to store the element to use it again later (which you seem to already know about).  You could also write a class providing that behavior that wraps a generator with a peek method.  But you have to do all that external to the generator mechanism.  There isn't any way to make the generator itself not go forward when you get an element.
I believe this can be done using itertools.tee():http://docs.python.org/3/library/itertools.html#itertools.teeHowever the storage requirements may become large.itertools.tee() allows you to create two iterators from one.
You can create a wrapper generator that allows you to 'peek' at the next value:This allows you to use the .peek() method to look at the next value; note calling .peek() can raise StopIteration if there is no next value to look at.
There is no clean way to do this, in general. This contradicts the whole concept of generators. The optimistic case is when you have some specific knowledge about generated items, and can you tell how many possible items are there, without explicitly enumerating them (for example, number of even numbers in range 0-100). In such case you can easily implement a special case class-generator with additional property.But in general case (i.e. you don't know anything specific about generated items) if you want to know how many items are there up front, then you must really generate them all. So in fact you don't want a generator.Note that some generators can be infinite - in such case the notion "number of generated elements" doesn't really make any sense at all.


Answer URL
