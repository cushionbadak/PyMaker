Natural Text
I have a proprietary repository format and I'm trying to develop a Python module to process these repositories. Repo format goes as:Here, X is a project. alpha and beta are folders inside this project and they represent groups in this project. A group is a container in this repo and what it represents is really not relevant for this question. The repo X also has files in its root level; project.conf is an example of such a file.I have a class called Project that abstracts projects such as X. The Project class has a method load() that builds an in-memory representation.To unit test the load() method by mocking the file system, I have:This does mock os.listdir successfully. But I can't trick Python to treat mocked_listdir.return_value as consisting of files and directories.How do I mock either os.listdir or os.path.isdir, in the same test, such that the test will see alpha and beta as directories and project.conf as a file?
You could use pyfakefs, it is a very handy lib to test operates on a fake file system.if you use pytest, it has a plugin, all file system functions already got patched, you just need to use its fs fixture:or if you prefer unittest:
I managed to achieve the desired behavior by passing an iterable to the side_effect attribute of the mocked isdir object.The key is the mocked_isdir.side_effect = [True, True, False] line. The boolean values in the iterable should match the order of directory and file entries passed to the mocked_listdir.return_value attribute.
It will depend, of course, on exactly which os functions you use, but it looks like mock.patch.multiple on os is just what you need.  (Note that you may not need to patch path; many of its functions are lexical-only and do not care about the actual filesytem.)


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch.multiple
