Natural Text
Given a custom class that needs to support addition, are there any reasons not to delegate the __add__ method to __iadd__ such that:I cannot come up with anything besides the fact that copy.deepcopy might be an issue for memory but since addition is supposed to return a new object and leave self unchanged, I am not sure it can be avoided. An alternative would be to instantiate a new object with the constructor, which isn't really a neat option if the class has many mutable variables. In my case here it's a stochastic model that's generated from a whole chunk of training data, so it was easier to get a copy.All in all the above definitions do comply with the requirements, but I have not seen this type of dependency between the two methods in any tutorial which makes me a bit suspicious. Is this in any way dangerous or bad practice?
It is certainly very much the natural and recommended way of doing things in C++.  On the other hand, if you have immutable objects (like the basic integer or string types) you won't have an __iadd__ and will have to implement __add__ directly.From the docs if you don't have an __iadd__, x += y will invoke either x.__add__(y) or y.__radd__(x) and then assign the result to x.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__iadd__
