Natural Text
SummaryI've recently become aware of the types.SimpleNamespace class, which is nifty as heck.It would be useful to create types using this class, but allow them to utilize a signature defining positional arguments instead of keyword only arguments. Allowing positional arguments would give some additional flexibility for instance creation. My attempts at doing this are not working so I'm looking for suggestions.  DetailsIf you subclass types.SimpleNamespace utilizing positional arguments, you'll get an error:However, you can fix this problem by simply assigning a name to the arguments when calling super:Great. But now let's say I want a method to create types like the one above without having to repeat the named arguments in the call to super().__init__, using the exact same code as shown to fail above. How can I do it?EDIT: It turns out my problem was being caused by a simple typo. Everything works with the code shown in the answer below.Since using SimpleNamespacewith positional arguments is something others might be interested in understanding how to do, I think it would be a good idea to keep this question instead of closing it.
To more easily create a positional class signature for a child class when the parent class is utilizing a named argument signature, we will create a base class that takes the positional arguments and feeds them into the constructor methods as named arguments.In order to do this we will need to use inspect.getargspec. This will allow us to match up the signature names for __init__ with the positional values that have been pass into it.Now:It works!If one wishes to dynamically create types like this, one way to do that would be using methods similar to those used in the builtin collections module for namedtuple. One would create a template that subclasses from PositionalSimpleNamespaceBase, and then execute the template using the exec function.A simplified version is below (the provided field names are not being sanitized here, so this is not safe to use as shown!):Use like so:


Answer URL
https://docs.python.org/3/library/types.html#additional-utility-classes-and-functions
