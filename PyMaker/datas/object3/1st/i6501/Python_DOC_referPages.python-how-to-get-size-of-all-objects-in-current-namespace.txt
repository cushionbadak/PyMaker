Natural Text
I have some code that I am running from my own package and the program is using a lot more memory (60GB) than it should be. How can I print the size of all objects (in bytes) in the current namespace in order to attempt to work out where this memory is being used?I attempted something like But it doesn't work as it just prints the size of the string containing the name of the object in the namespace. Is there a way to get an object reference to everything in the namespace in order to use this method or is there a better method for working out what is using the memory?
dir() returns only the names present in the local scope. Use the locals() function to get the local scope as a dictionary:Note that outside of functions, locals() is the same mapping as globals().If asizeof() is in the dictionary, you want to filter it out:dir() without arguments is functionally equivalent to sorted(locals()) (a sorted list of the keys of the local namespace).
You can use gc.get_objects() to just fetch all objects tracked by the collector, not just those in a specific namespace. I'd start by using it to count the number of instances of each type as that might give you some clues in itself.Then you might drill down to find the size of any likely suspects.


Answer URL
https://docs.python.org/3/library/functions.html#locals
https://docs.python.org/3/library/functions.html#globals
