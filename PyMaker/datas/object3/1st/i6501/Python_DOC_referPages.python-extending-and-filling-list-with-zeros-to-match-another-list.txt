Natural Text
I have a list a with a few elements. I have another list b with more elements. I need to extend a to match b in size, using zeros to fill. In the new list that will come out, the original a sits in a position determined by b, as explained by example in the following.Small example of my situation:I need The first non-zero element is in third position here, to match where b becomes equal or greater than 3, and similarly the last non-zero element is in fifth position as a result of the comparison with b.The final output is always len(b); if there are too many zeros at the start to fit all of a, then elements from a are dropped.

Use bisection to find the first position in b greater or equal to a[0], with the bisect moduleBisection lets you find the point in O(logN) time.An alternative is to use a generator function; loop over b and yield 0s until an equal or larger value to a[0] is found, then yield a until exhausted and go back to zeros:Demo:and for edge cases; b too short, dropping values from a:First value of b matching:
Try this
You could try this with list comprehensions


Answer URL
https://docs.python.org/3/library/bisect.html
