Natural Text
As we know in Python 3 print() is a function, is it possible to create a decorated version of it wrapped under json.dumps(indent=4)for ex.Calling print(mydict) should produce the same result as print(json.dumps(mydict, indent=4))
You don't need a decorator per se to do that.  Just define a new function and call it print:You can use the builtins module as shown to access the original print function.The thing is that doing this doesn't really gain anything over calling your new function something besides print, except it will confuse people.If you want to really confuse people you could store old_print = builtins.print, define your new function as my_print (accessing the original as old_print) and then do builtins.print = my_print.  Then your modified print will actually replace the regular print, even in other modules that know nothing about your shenanigans.  But that is an even worse idea.
Alternatively, take a look at pprint.https://docs.python.org/3/library/pprint.html
Thanks to @Adam Smith for this gist, posting it here for a reference. 
No, it's not possible since print is a builtin function and it's not even a builtin C-level class. This answer provides a way to subclass a builtin object like a str and apply a decorator to one of it's methods.


Answer URL
https://docs.python.org/3/library/pprint.html
