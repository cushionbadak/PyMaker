Natural Text
I want to write a program that prints the longest substring in alphabetical order.And in case of ties, it prints the first substring.Here is what I wroteHowever, it does not work and I do not know how to do the second part.Can you help me, please?
Here is what your code should look like to achieve what you want:You were returning right out of the function on the first alphabetically ordered substring you found. In my code, we add them to a list then print out the longest one.
Assume that substring contains 2 or more characters in alphabetical order. So that you should not only return the first occurrence but collect all and find longest. I try to keep your idea the same, but this is not the most efficient way:
You re-write a version of itertools.takewhile to take a binary compare function instead of the unary one.Then you can lowercase the word (since "Za" isn't in alphabetical order, but any [A-Z] compares lexicographically before any [a-z]) and get all the substrings.Then just find the longest substring in substrings.
Instead of building a list of all possible substring slices and then checking which one exists in the string, you can build a list of all consecutive substrings, and then take the one with the maximum length. This is easily done by grouping the characters using the difference between the ord of that character and an increasing counter; successive characters will have a constant difference. itertools.groupby is used to perform the grouping:As @AdamSmith commented, the above assumes the characters are always in alphabetical order. In the case they may not be, one can enforce the order by checking that items in the group are alphabetical:
back up and look at this problem again.1. you are looking for a maximum and should basically (pseudo code):find the sequences you can be more efficient if you only step though the input characters once.Here is a version of this:



Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
