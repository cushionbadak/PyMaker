Natural Text
I can achieve what I need using sys.argv, but am unable to find the argparse equivalents to allowing this functionality.Currently with sys.argv I am conveniently able to allow the program to run commands in such a manner:  ls--keyword argument that doesn't change--it reaches into a dictionary and lists its keys.del input--del is a keyword which specifies that the user's input is the key that should be deleted from a dictionary.arg--can be any one of a multitude of keys within a dict.input input2--is a completely new key and value that is added to the dictionary.  The dict-related information is provided only to illustrate what the arguments do.  In addition to being dashless, multiple arguments are allowed to be in the first position. Furthermore, two of the first-position arguments(input, del) can take a completely new and unspecified second-position argument up to the user.   
At a first glance this looks like a subparsers case, with 'ls','del', etc as commands.  I just sketched out an example where the subparsers are defined in a classHow to design object oriented subparsers for argparse?But these inputs complicate that:It's not clear whether the key values come from a programmer defined dictionary, or are just arbitrary values from the user.Keys from a programmer defined dictionary could be added as subparsers, as shown in my example.But arbitrary 'key value' entries require a different definition.  There have been a lot of questions were people ask to input some sort of key:value or key=value pairs.  argparse does not handle this gracefully.  It is better for cases where the programmer wants full control over the inputs.Perhaps the simplest argparse approach isand you do your own testing of the args.cmd and args.value strings.  That doesn't add much to evaluating sys.argv[1] and sys.argv[2:].cmd with choices behaves a lot like a subparser cmd, restricting the value to a defined set of strings.optparse handles the flagged (--) arguments, and passes all positional back as a list.  argparse seeks to enhance that by providing the nargs parameter and the ability to define some positionals.  But it is still better for handling lots of flagged arguments.  Content testing for positionals is limited.In sum, porting to argparse might not buy you anything.  You are working against its standards rather than with them.Script comparing argparse and sys.argv parsingHere I'm putting all strings except the first in a list.  Use '?' to optionally just accept one string.Sample runs:argparse adds error checking (i.e. the missing first string), and a help.Deciding what to do with the args.key value is up to you, as is deciding whether it requires/accepts a value list.  As best I can tell your handling of ls is the same as 'arg', and 'del' is like 'input'.


Answer URL
https://docs.python.org/3/library/argparse.html#partial-parsing
