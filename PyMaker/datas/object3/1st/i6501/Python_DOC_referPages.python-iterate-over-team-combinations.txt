Natural Text
I have a list of 10 players, each with a respective skill score. I'm trying to organise them into 2 teams of 5, where the total skill score of each team is as close as possible.Iterating over every combination is obviously not very efficient as identical teams will occur.Is there a python library or function that can either efficiently solve this problem or at least just iterate over the correct combinations?Iterating over 10! combinations isn't so bad if that is the easiest answer.
While not a perfect solution, could you take the average player skill and rank the n players based on this average.Then based on these values, use some heuristic to try and "balance" out these players across the two teams. Simple example would be to assign teams like so (highest ranked = 10, lowest ranked = 1)Team 1 = 10 7 6 3 1 Team 2 = 9 8 5 4 2 Again, not perfect, but much less expensive than 10! search. 
As you said finding the perfect solution is very complex for this problem set, but you can try using greedy approach. Say each player 'P' has these skills score bowling(bw) batting(b) & fielding(f) now you can come up with an equation for aggregated skill(K) with sample equation K = 2*bw+2*b+fNow all you have to do is split the 10 players into 2 teams with each k/2+k/2 approximately, which is straightforward if you use greedy approach. Greedy algorithm:Sort all the player in descending order by their aggregated skill score(K). Maintain two sides A & BAdd the highest scorer to team AAdd the second highest scorer to team BKeep adding the next scorer to the lowest total's teamYou can find the implementation here in WikipediaUpdate:The above code doesn't consider the quality of team size, Regarding that here might be useful discussionhttps://cs.stackexchange.com/questions/33697/partition-partition-with-constraint-of-equal-size
I solved this problem with itertools.combinations and sets, by going through each combination of the first team and using the remaining players as the second team, the search space was reduced to only 252 combinations.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
