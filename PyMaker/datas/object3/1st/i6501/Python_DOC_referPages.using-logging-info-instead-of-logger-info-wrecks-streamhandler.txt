Natural Text
I am using two logging handlers. One to a file for level DEBUG and above, and the other to the console for WARNING and above.I'm using many modules, some of them external (installed using pip). When there is a call to logging.info() (as opposed to logger.info()), this wrecks the settings for the console logger:Where demo_module.py is:As you can see, inside demo_module.something_else() there is a call to logging.info instead of logger.info.The output to the console looks like this:As you can see, the last two lines lose all the settings I originally set to the console handler, like the level, and the formatter.If it was only my code, I could find this offending logging.info() statement and replace it, but some of the code is not mine but third party and as such is beyond my control.Any idea how to make those settings stick?
By default module level logging functions will calling logging.basicConfig() to try to configure the root logger.  Docs:... module-level convenience functions, which delegate to the root logger, call basicConfig() to ensure that at least one handler is available. logging.basicConfig's docs state:This function does nothing if the root logger already has handlers configured for it.So the solution is to configure the handlers on the root logger before any of the module level log functions get called, while also instructing your logger not to propagate messages up the logger hierarchy, to avoid duplicate output.Console output:File output:


Answer URL
https://docs.python.org/3/library/logging.html#logging.log
https://docs.python.org/3/library/logging.html#logging.basicConfig
