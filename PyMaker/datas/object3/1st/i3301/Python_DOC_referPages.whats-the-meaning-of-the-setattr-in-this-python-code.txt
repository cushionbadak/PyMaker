Natural Text
I want to know the difference between __setattr__ magic function and self.__xxx__ = {}.Now I put more code here.In the constructor,it's object.setattr.So does the overwritten have some influence to it ?
Like almost all __...__ classes, __setattr__ is basically designed to be overridden in inheriting classes to change how a Python class works. If changing the semantics of x.foo wasn't needed, __setattr__ might not exist. x.foo is defined as __setattr__ on self; so it could do anything (e.g. set up DB fields like in Django).But notice that the code in the question calls object.__setattr__, not the one on self. Thus, even if the current class overrides __setattr__ to do something completely different, you can still use object's definition of the original attribute-setting behaviour to... set an attribute.


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers
