Natural Text
EDIT: I've gotten a lot of useful feedback on how not to do this and how to find alternatives, but making that useful depends on idiosyncrasies of my use case that would make this question less useful to others. At this point, I'm not looking for alternatives to using data structured like this. I'm looking for why it seems to be impossible to do this in numpy (or how to do it if it's not impossible)I have a numpy array, which looks likeI want to append a list likeTo get a result likeHowever, every method I've tried has produced:I've tried vstack, concatenate, and append, as well as wrapping things in lists or ndarrays.Why am I doing this? Basically, I have a lot of data in an ndarray that's going to get fed into sklearn. I want to have a 3d ndarray (data sets x data points x features) but incoming data is bad and certain things have different lengths, so the innermost dimension has to be lists. I'm trying to append a derived feature, which keeps failing. I've managed to reorder the operations to avoid needing to do this appending, but I still want to know how to do it. This seems like an odd failure for numpy.edit: In short, the outer array must be an ndarray because it's actually 2d, and complex slicing is frequently used, while the append operation occurs very few times.
Appending to an array in the first place is an expensive and generally smelly operation. The thing is that the contents of the array may be mutable, but the address of the underlying buffer is not. Every time you append an element, the whole thing gets reallocated and copied. As far as I'm aware, there isn't even  an attempt at amortization, as with list.If you are up for a slightly different approach, I would recommend maintaining your data in a list as you have now. You just transform your list into an array whenever you actually need the array. Remember that this is cheaper than reallocating to a new array every time, and you probably won't have to do it often compared to the number of appends:Update Now that I Understand Your QuestionIf your goal is just to figure out how to append an element to an object array without having the fact that it is a list get in your way, you have to first create an array or element that is empty. Rather than trying to coerce the type with fake elements as some of the comments suggest, I recommend just creating empty elements and setting them to your list explicitly. You can wrap the operation in a function if you want to have a clean interface.Here is an example:OROf course this is not as clean as np.array([b], dtype=np.object), but that's just an artifact of how numpy processes arrays. The reason you pretty much have to do it like this is that numpy treats anything that is a list or tuple as a special item that you want to convert into an array at the outer level.
If you really must have an np.ndarray with dtype=object, you can do this:(Or of course remove np. in your case where you fully imported numpy.)But I recommend not using np.ndarrays of dtype=object. Instead use lists with:Now if you really want to have a as an np.ndarray, you can then do the following:


Answer URL
https://docs.python.org/3/library/stdtypes.html#list
