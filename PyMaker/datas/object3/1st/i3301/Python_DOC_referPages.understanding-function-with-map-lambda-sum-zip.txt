Natural Text
I have the following code:where a and b are lists.I need help with understanding above code. Also, how can we write above code in a simpler way?
Your function takes 2 iterables and counts the number of times, by index, the number from one iterable is greater than the other. It then does the same operation with lists in the opposite order.It's far easier to show an example:sum with boolres[0] = 1 because 1 < 4, 2 < 5, 3 > 1, 1 < 5.res[1] = 3 because 4 > 1, 5 > 2, 1 < 3, 5 > 1.Note that sum with an iterable of Boolean values consider True as 1 and False as 0. This is natural because bool is implemented as a subclass of int. The bold values above are considered True and therefore a count of such instances will be the result of a sum over those values.list comprehensionA list comprehension is easier to comprehend:generator expressionIn fact, since map returns a lazy iterator, solve more closely resembles a generator expression, which should perform better than the map variant:You can then iterate the generator expression:Or exhaust the generator via a function such as list:


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions
https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists
