Natural Text
I am building an API client in python for some api which provides the following layout of data, when it comes in multiple pages:I want to have an iterator which a client can call like this: In which the iterator silently requests new page data as it reaches the end of its current page. I have developed something which yields pages, but on subsequent calls, I want to not have to re-fetch the data. Here is what I have: What's happening right now is i can successfully iterate over it once, but upon second iteration, the iterator is empty. I would like it to cache the results upon first search, and allow subsequent iterations. Am I going about this the entirely wrong way? I feel like there should be an established pattern for this, but can't really find anything.
I'm not sure whether you're talking about the Page type or the Iterator type here, because they're both iterators, and both have the same issues, and you've only given us a vague description of what you're doing with whichever one you're doing it with. But all of the following will apply just as well to either of them (except for one note), so I'll talk about Page, because it's the simpler one.An iterator can only be used once. That's inherent in what it means to be an iterator.You can use tee to split off a second iterator, which caches the values from the first one.But if your goal is to iterate over the same values over and over, there's a much simpler solution: just copy the iterator into a sequence, like a list or tuple Then you can iterate that as many times as you want.While we're at it, your Iterator is not a valid iterator:An iterator must return self from __iter__, the way your Page does. Python doesn't enforce that rule, so if you get this wrong, you often end up with something that seems to work in one test, but then does the wrong thing somewhere else.Alternatively… are you sure you want Page to be an iterator, rather than a reusable, non-iterator iterable?Now, you don't need to copy the data into a list unless you want to do list-y things like indexing it in random order:As a side note, this is repetitive:That (datum for datum in json_data["data"]) is just the same things as json_data["data"], wrapped in a generator expression. Since a generator expression is already an iterator, you can just return it:Or, even simpler, you can just return an iterator over the data:And if you actually want list-y sequence behavior, you can even make it a full-fledged Sequence pretty easily:And now:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.tee
https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence
