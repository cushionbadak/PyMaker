Natural Text
I have some working code to track the 'changes' between elements of a list - such that any two consecutive elements that are not identical constitute a change. The code is probably just as easy to understand here.The first red to red would trigger no change, however the next red to blue would. I also want to tally up the changes to each color.This works and outputs {'black': 2, 'blue': 2, 'key': 40006, 'red': 1, 'yellow': 2} correctly.When the number of unique elements grows (only 4 unique colors in this example) to 10 the if/elif becomes very verbose.My two questions are:Is there a more concise way to accomplish this?Is there a faster way to execute this task?
First, since your goal is to build a dict, just build the dict on the fly, instead of building a bunch of separate variables and then putting them in a dict at the end.You can also use a Counter instead of a plain dict so you don't need to worry about checking whether the color is already there.While we're at it, there's no need to call str on something that's already a string, and you've got a bunch of unnecessary parens all over the place.So:It's a little hacky to store a value for 'key' that really isn't a count, so you might want to consider using a defaultdict, or setdefault on a normal dict, instead. But I don't think it's too bad.Of course if 'key' could be one of the elements in testlist, this is going to increment the key. But then if that's possible, it's not clear what should happen in that case, so it's not clear how you'd want to fix it.Meanwhile, you can make things a little concise by iterating over adjacent pairs. See the pairwise recipe in the itertools docs. But of course this adds the definition of pairwise to your code (or you can import it from a third-party lib like more-itertools or toolz).So:You can abstract things further by using either groupby, or the unique_justseen recipe from itertools. I think this will obscure rather than clarify where you print the outputsâ€”but, assuming you understand the pairwise version, it's worth reading up on both of them, and trying to write both alternatives, at least as an exercise.
My take on the problem:Output:
My take uses zip to walk through the list by pairs, and is fairly terse. Like the others, it uses Counter, which I agree is the right tool for the job.Output:It's unclear what the correct behavior should be if "key" appears in the testlist, but it would be straightforward to modify this code to handle that.


Answer URL
https://docs.python.org/3/library/collections.html
https://docs.python.org/3/library/itertools.html
https://docs.python.org/3/library/itertools.html#itertools-recipes
