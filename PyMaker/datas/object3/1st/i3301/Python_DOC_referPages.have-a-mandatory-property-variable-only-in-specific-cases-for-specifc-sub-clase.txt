Natural Text
I have an abstract class with a 'mandatory' property:It is possible to have a mandatory property only in specific cases, and not for all sub-clases.I use multiple inheritance, so if class Ainherits also from B not to be mandatory, otherwise to be mandatory.A inherits all from PMixin if is not a subclass of B.If it inherits also from B, progressbar_step is not necessary. I can declare: progressbar_step=None, in the PMixinand overwrite only if is not inheriting from B, and solve the issue, likebut I want to get a warning, where is the case to have a value, in example A;It is just a coding 'safety' mechanism
Here's a solution using __init__subclass__, made available in Python 3.6.  This is called whenever PMixin is subclassed, and we can use it to remove the abstractmethod from subclasses that meet our criteria.If you want the warning when you subclass PMixin, rather than when you try to instantiate an object of that subclass, you can check cls.progressbar_step.__isabstractmethod__ in __init_subclass__ and raise warnings appropriately. 
for python versions that are < 3.6 you can define a custom meta class to PMixin:however since ABC also uses a custom meta class, you will get a metaclass conflict if you define PMixinMeta as the meta of PMixin and inherit from ABC.so you need to create an intermediate metaclass to resolve the conflict.and then define PMixinAbcMeta as the metaclass of PMixinNote: you will only get an exception once you initiate (use __init__) an instance of a subclass of PMixin.If you want to receive an exception during build time, PMixinMeta should look like this:meaning that now this:will raise an exception, and not only this:


Answer URL
https://docs.python.org/3/reference/datamodel.html#customizing-class-creation
