Natural Text
Originally, I have been opening and simultaneously reading through two files with something like this:But now the input file names may sometimes be gzipped. So, I thought to split up the with statement and use an if statement to handle the two scenarios with something like this:Does the second code function like the first? Or is there even a better way to do this?
What you're doing mostly makes sense, but it has one problem.File objects are context managers that close themselves on __exit__. As the gzip docs make clear, that includes the GzipFile objects returned by gzip.open:GzipFile supports the io.BufferedIOBase interface, including iteration and the with statement. So, if you write with f: on an opened regular file or GzipFile, that guarantees that close will be called after the with statement.In Python 2.7, the details are slightly different, but it works the same way. In Python 2.6, a GzipFile was not a context manager. But there's a very easy solution (that's worth knowing about for other types, even if you don't care about Python 2.6): you can wrap anything with a close method in closing to get a context manager that calls that close on __exit__. So, you could write:â€¦ and it would work on R1 whether it's a file object, or some other kind of thing (like a 2.6 GzipFile) that doesn't know how to be a context manager.However, what happens if R1 opens successfully, but R2 fails? Then you haven't even gotten into the with R1: when the exception is raised, so you never close R1.You could fix this by doing the with R1 before opening R2:Or you could use an ExitStack.But there's a much simpler solution here: Both gzip.open and open are callable objects, so you can store them in a variable, and call it later. Since they have the same signature, and you want to call them with the exact same arguments, using that variable is trivial:And notice that you can make this a lot more concise without making it any less readable:
You can do it your original way by creating a function that checks what kind of file it is.You can open both files on one line:    ~                                  
The second code does work like the first, as long as zipped is False.One important thing to note, though, is that you don't have to nest your with statements. Instead you can do something like:(Also, the function open has the 'r' parameter by default, so you don't have to include it.)


Answer URL
https://docs.python.org/3/library/gzip.html#gzip.GzipFile
https://docs.python.org/3/library/io.html#io.BufferedIOBase
https://docs.python.org/3/library/contextlib.html#contextlib.closing
https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack
