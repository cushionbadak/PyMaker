Natural Text
what I have :now I want to transform this is into x 32 bit integer by combining 4 elements of the list togetherEx : DataArray[0:4] would become a 32 bit integer, and then iterate to the next 4 elements and do the same. In the end, I would have a 32-bit array with all my results in it.How can I do this in python whitout iterating over the whole string. Is there a simple way to do this?
Using numpy:Use '<i4' or similar as dtype for endianness that's portable between machines.I'm assuming that you can keep your initial data as bytes rather than unicode, because you really should try hard to do that.
As long as your string is an integer multiple of 4, you can use NumPy in a very efficient way:'>u4' means 'big-endian unsigned 4-byte integer'.Edit: If you use NumPy >= 1.14, then np.fromstring is deprecated, and the right way to process your text is by calling np.frombuffer(textdata.encode(), dtype='>u4').
You could use something like the following, which uses bit manipulation (big-endian):Produces:If you're using characters with 1 <= ord(c) <= 255 in your input text, this will work.  If there are null bytes in your string, the int2chunk method may terminate early, in which case you'd have to pad the chunks.There's also the struct module, which may be worth looking into, and where you can change the endianness much more simply.
You can use the struct built-in python module:Result:You won't need to iterate over the string and you can find other Format Characters if you want to use unsigned integers for example. 


Answer URL
https://docs.python.org/3/library/struct.html
https://docs.python.org/3/library/struct.html
