Natural Text
i was looking into properties and could not understand the use of getter.Code :so,i did the followingi got the following output:10So, i thought, @p.getter is called and the value of _q is returned.But, i tried without @p.getter as belowAnd did the followingand even then i got the following output:10So, i was wondering, what is the actual use of @p.getter here, when @property it self was able to give us the value of _q
The @property decorator on a function creates a new property object and sets the decorated function as the getter. So within the same class, the @p.getter decorator is not very useful, no.However, the decorator is very useful if you wanted to override the getter in a subclass, or a reuse just the setter of the property on, but on a different class altogether:or by copying the property object across to a different class:Now Bar()and NotASubclass have a different getter for their property p, but both reuse the setter defined on the property for Foo().In both cases the @p.getter decorator creates a new property instance to store as an attribute of the class object, but their fset attributes all point to the same, single function object that acts as the setter.  This is why it is enough to just reference @Foo.p.getter in either case; you only need the single property instance in the class namespace.Also see How does the @property decorator work? and Python overriding getter without setter
The @property.getter decorator can be useful if you want to override a getter from a parent class in a subclass. It allows you to easily "copy" a property from the parent class and override only the getter, keeping the setter and deleter intact.Example:
As you've noticed, in this case, it's totally useless since you already passed the getter here but it might be useful for a couple corner cases at least, like dynamically redefining the getter for an existing property. I have to say I never had such a use case actually but well... 


Answer URL
https://docs.python.org/3/howto/descriptor.html
