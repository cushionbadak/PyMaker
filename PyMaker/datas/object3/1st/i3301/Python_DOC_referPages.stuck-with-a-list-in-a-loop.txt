Natural Text
So for a while now i've been trying to complete this exercise. The idea is to store inputs of numbers in a list, until the word 'done' is entered. Then print the minimal and maximal values of integers. And it seems i can't get it to work however many solutions i've tried, and it raised some stupid questions i would love to get answers for. So here's my best try i guess:And unsurprisingly it doesn't work, and i've no idea why, and i've exhausted  all of my ideas to get it to work. But i have i stupid question. If i declare a list in a loop like i did it here, will the declaration make it empty again while it loops a second time? If it does, then how do i declare list and use it in a loop when Python doesn't want me to use global variables? Also i might have used 'break' here incorrectly, but it doesn't really matter, since the code doesn't go  that far, it's just reading inputs.
store inputs of numbers in a list, until the word 'done' is entered. 1) Create an empty list before the loop. Otherwise, you are clearing the list every iteration.2) Stop the loop when you see "done" (use break). Don't append to the list unless you have some other input. It would also help to add try-except around the int(x)Then print the minimal and maximal values of integersOutside the loop (or before the break), you can print the values. You don't need any list slicing to check mins and maxes
If i declare a list in a loop like i did it here, will the declaration make it empty again while it loops a second time? Yes. The line mylist=[] creates a new empty list, and makes mylist into a name for that new empty list (forgetting whatever it used to be a name for), every time it gets executed.If it does, then how do i declare list and use it in a loop…Just do it outside the loop:… when Python doesn't want me to use global variables?The distinction is between local variables, defined inside a function body, and global variables, defined outside of any function body. Since you haven't written any function definitions at all, all of your variables are global variables anyway.And, if you moved all of this inside a function, all of your variables would be local variables, whether they're inside the loop or not.Anyway, this still isn't going to fix your code, because of a number of other problems:mylist.append(…) modifies the list in-place, and returns None.mylist=[mylist.append(…)] throws away the existing list and replaces it with the useless list [None].mylist is (supposed to be) a list of strings, not a string, so mylist[:len(mylist)-4] isn't throwing away the final 4-character string, it's throwing away the last 4 strings, whatever they are.min on a list of strings will compare them as strings, in dictionary order, not as numbers. You have to convert them to numbers if you want to compare them as numbers. But you can do this on the fly, using key=float. (See the Sorting HOWTO for more.)While we're at it, you can simplify a few things:x[:len(x)-4] does the same thing as x[:-4].But, instead of adding the new string to the list and then checking whether 'done' is anywhere in the list, and then looping over the whole list except for the done, why not just check the new string?So, here's some code that does what you want:


Answer URL
https://docs.python.org/3/howto/sorting.html
https://docs.python.org/3/library/functions.html#max
