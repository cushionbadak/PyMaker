Natural Text
I'm looking to run over a list of ids and return a list of any ids that occurred more than once. This was what I set up that is working:But the ids list is likely to get quite long, and I realistically don't want a while loop predicated on an expensive len call if I can avoid it. (I could go the inelegant route and call len once, then just decrement it every iteration but I'd rather avoid that if I could).
The smart way to do this is to use a data structure that makes it easy and efficient, like Counter:Building the Counter takes O(N) time, as opposed to O(N log N) time for sorting, or O(N^2) for counting each element from scratch every time.As a side note:But the ids list is likely to get quite long, and I realistically don't want a while loop predicated on an expensive len call if I can avoid it.len is not expensive. It's constant time, and (at least on builtin types list list) it's about as fast as a function can possibly get in Python short of doing nothing at all.The part of your code that's expensive is calling elem in singles inside the loopâ€”that means for every element, you have to compare it against potentially every other element, meaning quadratic time.
You could do like this,
I presume this will work faster:
Or use itertools.groupby:Just check if the group (in loop) is bigger than one, if it is keep it, otherwise don't.Or use pandas:It's very fast, because pandas is super fast.Documentation:https://pandas.pydata.org/pandas-docs/stable/10min.htmlPut cursor on the yellow part to view links. https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.duplicated.html#pandas.Series.duplicated, and https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.unique.html#pandas.Series.unique
If you don't care about the order in which these ids are retrieved, an efficient approach would consist in a sorting step (which is O(N log(N))) followed by keeping ids that are followed by themselves (which is O(N)). So this approach is overall O(N log(N)).


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
