Natural Text
I am a fan of the outmoded game Age of Empires II(AoE). I want to write a parser of AoE game record(.mgx files) using Python.I did some searching on GitHub and found little projects on this, the most useful one is aoc-mgx-format which provide some details of .mgx game record files.Here is the problem:according to the reference, structure of a .mgx file is like:| header_len(4byte int) | next_pos(4byte int) | header_data | ... ... |The hex data's byte order in mgx format is little endian.header_len stores data length of the Header part(header_len + next_post + header_data) header_data stores useful imformation i need, but its compressed with zlibi tried to decompress data in header_data with zlib module like this:but i got this after running the program:Error -3 while decompressing data: incorrect header checkps: sample .mgx files can be found here: https://github.com/stefan-kolb/aoc-mgx-format/tree/master/parser/recs
Your first problem is that you shouldn't be reversing the data; just get rid of the [::-1].But if you do that, instead of getting that error -3, you get a different error -3, usually about an unknown compression method.The problem is that this is headerless zlib data, much like what gzip uses. In theory, this means the information about the compression method, window, start dict, etc. has to be supplied somewhere else in the file (in gzip's case, by information in the gzip header). But in practice, everyone uses deflate with the max window size and no start dict, so if I were designing a compact format for a game back in the days when every byte counted, I'd just hardcode them. (In modern times, exactly that has been standardized in an RFC as "DEFLATE Compressed Data Format", but most 90s PC games weren't following RFCs by design...)So:So, it not only decompressed, that looks like a version and… well, I guess anything looks like an unknown constant, but it's the same unknown constant in the spec, so I think we're good.As the decompress docs explain, MAX_WBITS is the default/most common window size (and the only size used by what's usually called "zlib deflate" as opposed to "zlib"), and passing a negative value means that the header is suppressed; the other arguments we can leave to defaults.See also this answer, the Advanced Functions section in the zlib docs, and RFC 1951. (Thanks to the OP for finding the links.)
Old but here is a sample of what I did :Hope it helps future programmer :)By the wway I am planning on writting such a library.


Answer URL
https://docs.python.org/3/library/zlib.html#zlib.decompress
