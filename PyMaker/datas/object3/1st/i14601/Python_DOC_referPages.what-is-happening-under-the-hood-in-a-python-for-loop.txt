Natural Text
Lets take a standard Java for-loopI can see exactly what's happening in this for loop. i is initialized to 0. The condition is checked and the increment takes place, every iteration.Here's the Python versionWhat's happening in detail during this loop?
Taking a look at the documentation for the range() built-in function, it is possible to see that this function "create lists containing arithmetic progressions". This list is the iterated over as if it was passed directly to the loop:This code is essentially the same as The in keyword is basically saying for each element in the supplied iteratable object - in this case, a list. "For each item in the list". The loop knows when to stop because the range function generates a finite list - this list has it's length and that is the stop condition. Internally, when the loop attempts to read an index that is out of range, a StopIteration exception is generated and will trigger the termination condition.
The misconception is that these two loops are not similar.Java's form is starting from some initial value, printing it out, and so long as the value is less than some terminal value, it will continue the loop.Python is actually taking each element contained in whatever iterable you give it, and printing out the contents of it without any incrementation whatsoever.Since in this case, the iterable is the result of range, the behavior of how you get the elements changes between versions.If you're using Python < 3, range is a function that eagerly generates a list of elements for you to use.  The lazy, generated variant of this is xrange, in which the values are generated as needed.  In this scenario, since you're looping to completion over the entire collection, and the memory constraints aren't that high, you won't notice any difference between the two.In Python >= 3, range behaves similar to xrange in that it's another sequence type, which also generates the values that it requires on the fly.The key difference here is that the variable in a Python loop represents the actual value contained in the iterable, whereas Java is generating the value with a standard for loop.If you were to use an enhanced-for loop instead, then you'd get closer to how Python's loops work:
range(0,10) returns a list of the numbers from 0 to 9.The loop loops over this list, each iteration assigning the next number in the list to i


Answer URL
https://docs.python.org/3/library/stdtypes.html#range
