Natural Text
Is it possible to modify your iterator in for loops?My code isn't running as expected (printing 0-9). I can do it with a while loop but looking for a for loop solution.
Doing:will not work as expected because r is assigned to the value just returned by the iterator, not the iterator itself.  To advance the iterator, you need to call next on it.  You can do this by first saving the iterator in a variable and looping over that:This will allow you to then call next on it inside the loop:Note however that, as @StevenRumbalski said, calling next on an empty iterator will raise a StopIteration exception.  Sometimes this behavior  is desirable, but if not, you can specify a default value to return:This will effectively make the line a no-op.
Assigning to the loop variable will simply be overwritten by the next iteration of the loop.  The loop variable is an assignment like anything else.  This PyCon 2015 talk might help explain the details:  Python Names and Values.
I guess... assuming i understood ...[edit] Oh i finally figured out what you meant ... the answer is not really r is reasigned each loopyou could however affect the iterator
for r in range(0, 10) assigns to r each iteration.  This means that assignments to the loop variable will not persist to the next iteration.Your for-loop is equivalent to:That r = next(it) clobbers any assignment you made to the name r in previous iterations.  The same thing happens implicitly in your for-loop.If your end goal is to advance your iterator by a certain number of steps, call next(it) the number of times you wish to advance it (as per iCodez's answer).  


Answer URL
https://docs.python.org/3/library/functions.html#next
