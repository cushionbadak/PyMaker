Natural Text
I'm learning a little bit of Tkinter in Python, creating interactive windows.     The window I'm currently making is one that, given a dict of contacts and their respective contact info, creates a button for each contact which, when pressed, displays their contact info. The two sample contacts I have are named 'Marvin' and 'Minsky', and their info is stored in a dict named book:Here's the important part. Instead of the buttons simply using command = showinfo(name) to call showinfo(), as I first tried, a lambda expression is used:And the rest of the code is just the labels that showinfo() modifies:When run, this program does exactly what I want it to do, modifying the labels correctly when each button is clicked. If command = showinfo(name) is used in place of the lambda, however, NameError: global name 'mobile' is not defined is thrown because (I think) it tries to execute the button's command when the button is created instead of when it is pressed. Why would the use of a lambda expression in the button's command keep the command from executing until the button is clicked? What functional purpose is it serving?
Like you guessed, when you use command = showinfo(name) you are asking python to immediately call showinfo(name), and then assign the result of that to the command attribute. The command attribute must be given a reference to a function. lambda is a convenient way to create an anonymous function and return the reference, which gets assigned to the attribute. Inside that anonymous function you can call any other function you want, and that inner code isn't executed until the anonymous function is executed.The functional purpose of lambda is to create a temporary, unnamed function that can be passed to other functions or stored as an attribute. It is a convenient way (but not the only way1) to create a wrapper around a callback that requires an argument. 1Another way to accomplish the same thing is with functools.partial. Another method would be to write your own decorator.  
A callback is simply a function that you pass around to other functions so those functions can call it. showinfo(name) is not a callback because the function is called immediately before the Button is constructed and the return value of showinfo seems to be None (if a function doesn't return anything it returns None by default in Python). showinfo by itself, could be a callback because it's a function, however the problem is that it requires a positional argument. In Python, positional arguments are required:The way your code solves this is with a lambda expression that takes a default parameter that we define on-the-fly to be name. So what we are saying is, here is a function that by has a keyword argument arg that by default is  set to name, when this function is called, call showinfo with that default argument:But why do we need to use default arguments? Isn't that a complicated way of doing things? Yes, yes it is. You can simply do this instead:This is a lambda that takes no arguments and is a perfectly valid equivalent to what you're doing. This is because showinfo and name are part of the closure of the lambda you're creating, so they can be accessed by the lambda itself even after the lambda function has been passed to another function.


Answer URL
https://docs.python.org/3/library/functools.html#functools.partial
