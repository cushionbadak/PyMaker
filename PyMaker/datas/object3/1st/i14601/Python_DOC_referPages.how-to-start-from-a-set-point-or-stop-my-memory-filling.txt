Natural Text
So I have been using Itertools in python to make a brute forcing application of sorts. I have managed to get the code working fine and it works perfectly returning all the incorrect answers untill it get's the correct answer..But I keep reaching a point in my application when it say's there is not enough memory?:sMy code is simple, it imports ascii - lowercase and uppercase from the strings module and it imports product from Itertools and uses 3 for loops, looping through all the chars definedBut it keeps saying there is not enough memory.. if I was to hazard a guess it is due to the amount of RAM I have (4GB) and it not being able to store enough to the Memory, but once it has looped one result why does it not remove that from the memory?The code is:the first loop is just for the amount of characters in each string it teststhe second loop uses product to loop through characters and iterate through everything so it goes a, b - aa, ab - aaa, aab and so forth and the third loop is because the answers are returned in a tuple and i use that to convert it to a stringThe state variable is so that it does not continue looping after it has found a result and you can probably understand the rest.Except the Try/Except statements, they are just so you don't have to restart every time there is an error giving you a chance to fix it.My question now is:Is there any way to use itertools product to start from a point eg it usually starting at a but i want it to start at cB1o or what ever elseOrIs there any way to stop my memory filling up (remove the used values from the memory)?Editemail is the user's input
Memory ProblemAs shown, the code doesn't contain accumulate any values in memory.  So, the source of OP's memory issues lies elsewhere.Exploration CodeThe posted code can be cleaned-up and sped-up by using using str.join() instead of +=.  Also, it can benefit by using itertools.imap() to apply the join operation: Arbitrary start point for any Python versionIn essence, the algorithm for itertools.product() essentially "rotates wheels like an odometer".  Accordingly, you can select an arbitrary start point just by "pre-rotating the wheels" to the desired start position:Note, the iterator will now "wrap-around" the original start point of ('a', 'a', 'a', 'a'); however, this is easy remedied by truncating the sequence with itertools.islice():Alternative Approach Specific to Python 3In Python 3, itertools.product() has a __setstate__() method that sets the pool indices to arbitrary values. The product iterator can be started at cB1o by setting indices corresponding to the immediately preceding value, cB1n.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
