Natural Text
I'll try to clarify:For example, I make a function that locally creates a list, and return it. How does Python create the returned list that exist outside the function body ? Does it use "deepcopy" (or something similar) ?Here, the returned list l still contains the sublists. And l[0] and l[1] still reference the same sublist (which is normal Python behavior). So the list and its structure were copied.And if I call once again create_list() :A new list l2 has been created, but l is unaffected, which means it does exist outside the function, and its sublists are its own, not references to sublists that would still exist in the function body.So my question : does Python used deepcopy or something similar to make l ?Not matter what kind of object I return with a function, it will be unaffected by subsequent call to this function ?(as long as the object was created locally in the function)Do not hesitate to tell me if I'm not clear enough.Thanks,
When you run the function the second time, the entire function is rerun - it has no memory along the lines of "last time, sublist1 was [1, 2, 3]".You haven't copied the list [1, 2, 3]. You've created it twice.Note that if you use a caching decorator like @functools.lru_cache, you'll get surprising results:Because in this case, python does have a memory of the previous result, and returns the same object
This might not directly answer this question but should help clarify related concept. If you create a nested object inside a function and return it, the object will continue to exist. It would not go out of scope even though the function ended. Example Code Output A dict, dict_x, is assigned to prop_x variable of a Class object obj1. The dict is not created again in memory but a soft copy takes place. prop_x points to the memory location of dict_x. When you return object obj1 at the end of this function, dict_x goes out of scope but the memory address used by it, 0xdfaae0, is still pointed by prop_x in the returned object recv_obj. So, the dict values { "k1" : "v1" } are preserved in memory. 
Variables in Python are pointers to objects. So a function would return a pointer to an object created in the function, obviating the need for copying return values.


Answer URL
https://docs.python.org/3/library/functools.html#functools.lru_cache
