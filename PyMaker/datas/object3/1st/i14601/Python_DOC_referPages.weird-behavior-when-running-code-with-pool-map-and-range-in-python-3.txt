Natural Text
I have come across some strange behavior when using multiprocessing and the range() generator, and I can't figure out what's going on.Here is the code:When this code is executed (with only 1 thread), the output is as expected:However, when I raise the thread count to, let's say, 2, the output becomes unexplained:And so on, and this behavior appears for higher thread counts. Since list(range(0,100)) generates a list of numbers from 0 to 99 in ascending order, why doesn't map() scan the list in the order it's in?
You're seeing the printed items appear in an unexpected order because multiprocessing.Pool.map divides the input into chunks that are worked on by each worker process. This is documented (italics added to emphasise the important bits):map(func, iterable[, chunksize])A parallel equivalent of the map() built-in function (it supports only one iterable argument though). It blocks until the result is ready.This method chops the iterable into a number of chunks which it submits to the process pool as separate tasks. The (approximate) size of these chunks can be specified by setting chunksize to a positive integer.In the example output you show, it looks like Python has chosen a chunksize of 13, since you didn't specify a size of your own. Try passing 1 as the chunksize and I think you'll get the output you expected (perhaps at the cost of slower performance, though).


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.map
