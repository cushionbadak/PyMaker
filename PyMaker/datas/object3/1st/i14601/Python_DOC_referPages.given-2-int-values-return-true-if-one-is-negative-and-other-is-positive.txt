Natural Text
Could someone explain what is happening? I'm trying to make a one liner:
All comparison operators in Python have the same precedence. In addition, Python does chained comparisons. Thus, breaks down as:If any one of these is false, the total result of the expression will be False. What you want to do is evaluate each condition separately, like so:Other variants, from comments:
Your code doesn't work as intended because != takes higher precedence than a < 0 and b < 0. As itzmeontv suggests in his answer, you can simply decide the precedence yourself by surrounding logical components with parentheses:Your code attempts to evaluate a < (0 != b) < 0
You can use thisComparisons can be chained arbitrarily, e.g., x < y <= z is equivalent to x < y and y <= z, except that y is evaluated only once (but in both cases z is not evaluated at all when x < y is found to be false).So it becomesSee https://docs.python.org/3/reference/expressions.html#not-in
In Python, comparison operators are of the same precedence, and they are non-associative. There is a separate rule for sequences of comparison operators, the chaining rule. Python documentation states about that:if a, b, c, ..., y, z are expressions and op1, op2, ..., opN are comparison operators, then a op1 b op2 c ... y opN z is equivalent to a op1 b and b op2 c and ... y opN z, except that each expression is evaluated at most once.  Further, a op1 b and b op2 c and ... y opN z evaluates left to right.  a < 0 will evaluated to False, and the further evaluation will be stopped due to short-circuit evaluation. So, the whole expression will be evaluated as False.


Answer URL
https://docs.python.org/3/reference/expressions.html#not-in
https://docs.python.org/3/reference/expressions.html#not-in
https://docs.python.org/3/reference/expressions.html#not-in
