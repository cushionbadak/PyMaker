Natural Text
I want to efficiently find the intersection of two lists , keeping duplicates from both, e.g. A=[1,1,2,3], B=[1,1,2,4] should return [1,1,1,1,2]I know a similar question was asked previously (Python intersection of two lists keeping duplicates)however this does not help me because only the duplicates from one list are retained.The following workshowever it isn't efficient enough for what I'm doing! To speed things up I tried sorting the listshowever this only keeps the duplicates from list B. Any suggestions?
Here is the answer to your question as asked:Here is the answer to the question as originally interpreted by myself and two others:You can find the collections.Counter() documentation here. collections is a great module and I highly recommend giving the documentation on the whole module a read.I realized you don't actually need to find the intersection of the sets, because the "count of a missing element is zero" according to the documentation:
How about this:Two list comprehensions concatenated.  A bit of extra time and memory is used to create sets of A and B, but that will be more than offset by the efficiency of checking membership of items in a set vs list.You could also spruce it up a bit:Coerce both lists to sets, take their intersection, then use a list comprehension to add all elements from both lists A and B if they appear in the set intersection.
I'm having a hard time speeding your code since I don't know what are you running it on. It makes a lot of difference whether you run it on small or large lists and how many distinct elements are there. Anyway, here are some suggestions:1.2.This returns an iterator, you can use list(iterator) to turn it into a list3.Very similar to your way but without changing the size of the list which takes time.I'm not sure this gives any improvement to your original way, it really depends on the inputs, but your way is O(n*m) and mine is O(n+m).You can use the module timeit to check how fast it runs on your input:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
