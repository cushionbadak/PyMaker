Natural Text
I have two lists:I want to make a dictionary where items in blist are keys and items in alist are values with lists corresponding to indices in the two lists:the outcome should be:I have tried this:which gives the outcome:Why does it not append to the pre-existing letter in the dictionary instead of adding to it when it is already in the dictionary? 
First, you loop over both lists. For every item in alist, it loops through blist. So the inner loop runs 25 times. Instead, you want it to run 5 times, so you want only one loop.Second, you correctly initialize the list if it does not yet exist, but in that case the number is not added to the list. The number should always be added to the list, even if it is a new list.I changed your code to take these two things into account, and it works a little better:Output:
Use a defaultdict for ease:This creates:defaultdict is a subclass of dict so it'll still work just like any other dict.Without defaultdict you'll have to test if the key is already present with setdefault():resulting in:The real trick here is using zip() to combine your key and value lists instead of your double loops.
This way preserves order
Here is a one-line solution:The only problem is that the time complexity is O(n^2) in worst case, inadequate for large lists. 
This is the shortest expression I can come up with currently:The relevant (and not yet mentioned) part is the call to groupby, also described in the following similar question: Python group by


Answer URL
