Natural Text
I'm working on improving Python 3.X support for PyFilesystem. It's an abstraction for filesystems. Each filesystem object has an open method that returns a file-like object.The problem I'm facing is that the open method works open on Python 2.X, but I would like it to work like io.open which returns one of a number of binary or text mode streams.What I could use, is a way of taking a Python 2.X file-like object, and returning an appropriate io stream object that reads/writes to the underlaying file-like object (but handles buffering/unicode etc if required).I was thinking something like the following:I can't see any straight forward way of doing that with the stdlib. But it strikes me as something the io module must be doing under the hood, since its a software layer that provides the buffering/unicode functionality.
Python 2 includes the same io library too.Use from io import open to work the same across Python versions.Your API should then offer a open() equivalent (called open() or make_stream()) that uses the io class library to provide the same functionality.All that you need to do is create a class that implements the io.RawIOBase ABC, then use the other classes provided by the library to add buffering and text handling as needed:The above code is mostly adapted from the Modules/_io/_iomodule.c io_open function, but with the raw file object replaced by the MyFileObjectWrapper subclass of the io.RawIOBase ABC.


Answer URL
