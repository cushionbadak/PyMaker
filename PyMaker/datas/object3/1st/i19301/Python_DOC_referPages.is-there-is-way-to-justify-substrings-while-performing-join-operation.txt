Natural Text
I have to replace a word in a multiline  text at specific location specified by a line numberand word number in this line. All words all aligned in columns. I'm using an algorithm where I'm finding word by it's coordinates.I'm fetching a line at specified line number, splitting it in separate substrins and replacing a word at specified location with another word.Then I do join (" ".join() ) and writing the modified line back into a file.My problem is i'm loosing words alignment in modified line.How can I justify and join at the same time? (Other words in a line also losealignment, not just modified word)I think I could do it if I have used a little bit different approach by splitting a linejust at the location of the word to be modified, but I did not realized that I will losealignment after splitting a line at word boundaries.
You can apply formatting (with format() or str.format()) inside a list comprehension before joining:Demo:< left-aligns, > right-aligns and ^ centers the text in the given width (10 in the above example). For more detail on how formatting works, see the format specification documentation.Demo with right-adjustment to 4 spaces:
this will produce the following result:                                                   this is a sample statement  50 blank spaces followed by your statementyou can try  to force sentences to be right justified.
You could try splitting with re.split instead. If you use /(?<= )\w/ as Regex, it'll split before each word, while preserving the whitespace. You can then join them with ''.join(...) after replacing the word. You can append the new word with as much spaces as needed, just ask the length of the old word.Note that this will bug if the new word is longer then the column is wide.If I write this out in code:


Answer URL
