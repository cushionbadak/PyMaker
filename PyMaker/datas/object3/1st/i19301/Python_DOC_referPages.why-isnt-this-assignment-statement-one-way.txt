Natural Text
This problem is very simple to appreciate, here is the program - When I run it ohisc gets the 5. Why does ohisc change? How can I stop it from changing?Apologies if this is something obvious.
Python variables are references.  As such, the assignment copies the reference rather than the content of the variable.In order to avoid this, all you have to do is create a new object:This is using the list constructor which creates a new list from a given iterable.Alternatively you can also assign from a slice (which creates a new object):[] is the general slice operator which is used to extract a subset from a given collection. We simply leave out the start and end position (they default to the begin and end of the collection, respectively).
You definitely need to understand everything in Konrad Rudolph's answer. And I think in your specific case, that's what you want, too. But often there's a better way: If you avoid mutating objects (that is, changing them in-place), it never matters whether two names are referring to the same object or not. For example, you can change this:to this:That doesn't change hisc in-place; it creates a new list, with the 5 added on to the end of it, and then assigns that to hisc. So, the fact that ohisc was pointing to the same list as hisc doesn't matterâ€”that list is still there, unchanged, for ohisc to point to.Let's say you wanted to replace all the negative values of the list with 0. That's pretty easy with mutation:But even easier without:Now, what if you wanted to remove every negative list element? You can't change the shape of a sequence while looping over it, so you have to either make a copy of the list (so you can loop over one copy while you change the other), or come up with a more complicated algorithm (e.g., swap each 0 backward and then remove all the 0's at the end). But it's easy to do immutably:So, when would you ever want to mutate? Well, often you want two references to the same object, so when you update one, the other one sees the changes. In that case, you obviously have to have actual changes for the other one to see.
Here's a good explanation of what is happening: Python: copying a list the right way Basically, you're making a pointer to the list but what you want to do is make a copy of the list.Try this instead:


Answer URL
