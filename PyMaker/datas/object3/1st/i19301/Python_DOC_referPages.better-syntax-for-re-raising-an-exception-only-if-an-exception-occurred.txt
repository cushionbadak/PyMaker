Natural Text
I find myself doing this when I want to catch an exception, always run some specific code, then re-raise the original exception:I am using the flag because calling raise without a previous exception raises a TypeError. Is there a more Pythonic way to do with without the flag?
Raise the exception in the except handler:The finally suite is always going to be executed wether or not you re-raised the exception.From the documentation:If finally is present, it specifies a ‘cleanup’ handler. The try clause is executed, including any except and else clauses. If an exception occurs in any of the clauses and is not handled, the exception is temporarily saved. The finally clause is executed. If there is a saved exception it is re-raised at the end of the finally clause.Note that if the finally suite uses a break or return statement, the saved exception is discarded:If the finally clause executes a return or break statement, the saved exception is discarded:but if you issue a break, continue or return in the try suite, the finally suite is executed still:When a return, break or continue statement is executed in the try suite of a try...finally statement, the finally clause is also executed ‘on the way out.’Note that before Python 2.5, you could not even combine except and finally suites in the same try statement; see PEP 341: Unified try/except/finally. Instead, you were expected to nest try statements:
finally will always execute, no matter what happens in the try or except block, or whether the except block is even present.Both of these will work: 


Answer URL
