Natural Text
The following is syntactically invalid:The following is valid:Why are these different?  More generally, why is #2 okay but #1 somehow dangerous/ambiguous?  I can't see how the first statement is or generalizes to an ambiguous statement.
Brackets imply line continuation until they are closed.PEP-8 talks about this:The preferred way of wrapping long lines is by using Python's implied  line continuation inside parentheses, brackets and braces. Long lines  can be broken over multiple lines by wrapping expressions in  parentheses. These should be used in preference to using a backslash  for line continuation.Or, it is discussed more formally in the language reference:Two or more physical lines may be joined into logical lines using  backslash characters (\)Expressions in parentheses, square brackets or curly braces can be  split over more than one physical line without using backslashes.
Without the braces, it is definitely ambiguous in the presence of unary operators.Consider the line:Here you have a simple addition followed by the unary positive operator.You may argue that a line with a trailing operator is not ambiguous (and I can't currently think of a counter example), so I'll fall back on the "special cases aren't special enough to break the rules" portion of the zen of python.Also note that the way it is now, you can join strings across multiple lines without an operator:
Another valid, lose parenthesis (not recommended by PEP 8) :From PEP 8 :The preferred way of wrapping long lines is by using Python's implied line continuation inside parentheses, brackets and braces. Long lines can be broken over multiple lines by wrapping expressions in parentheses. These should be used in preference to using a backslash for line continuation. Make sure to indent the continued line appropriately. I suggest you to read PEP 8.
All parentheses come with line continuations built-in. I'm not sure about and in particular, but the reason that line continuations are discouraged (\-style) is that trailing whitespace can invalidate the the command, and they're difficult to see. Trailing whitespace within parens will never break it, though.
Of course you can use functions to make it more understandable. Instead of:You could do:Or, if you have a bunch of conditions:The design of Python is meant to encourage long lines and blocks to be broken up into smaller more readable bits.  You are running into that encouragement.I try and hold lines to 70 characters.  The hard ones for me are restring the length of nested comprehensions. I break those so that the break actually aids readability.


Answer URL
