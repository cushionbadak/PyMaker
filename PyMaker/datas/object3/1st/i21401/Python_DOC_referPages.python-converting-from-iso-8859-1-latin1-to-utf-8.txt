Natural Text
I have this string that has been decoded from Quoted-printable to ISO-8859-1 with the email module. This gives me strings like "\xC4pple" which would correspond to "Äpple" (Apple in Swedish).However, I can't convert those strings to UTF-8.What should I do?
Try decoding it first, then encoding:
This is a common problem, so here's a relatively thorough illustration.For non-unicode strings (i.e. those without u prefix like u'\xc4pple'), one must decode from the native encoding (iso8859-1/latin1, unless modified with the enigmatic sys.setdefaultencoding function) to unicode, then encode to a character set that can display the characters you wish, in this case I'd recommend UTF-8.First, here is a handy utility function that'll help illuminate the patterns of Python 2.7 string and unicode:A plain stringDecoding a iso8859-1 string - convert plain string to unicodeA little more illustration — with “Ä”Encoding to UTFRelationship between unicode and UTF and latin1Unicode ExceptionsOne would get around these by converting from the specific encoding (latin-1, utf8, utf16) to unicode e.g. u8.decode('utf8').encode('latin1').So perhaps one could draw the following principles and generalizations:a type str is a set of bytes, which may have one of a number of encodings such as Latin-1, UTF-8, and UTF-16a type unicode is a set of bytes that can be converted to any number of encodings, most commonly UTF-8 and latin-1 (iso8859-1)the print command has its own logic for encoding, set to sys.stdout.encoding and defaulting to UTF-8One must decode a str to unicode before converting to another encoding.Of course, all of this changes in Python 3.x.Hope that is illuminating.Further readingCharacters vs. Bytes, by Tim Bray.And the very illustrative rants by Armin Ronacher:The Updated Guide to Unicode on Python (July 2, 2013)More About Unicode in Python 2 and 3 (January 5, 2014)UCS vs UTF-8 as Internal String Encoding (January 9, 2014)Everything you did not want to know about Unicode in Python 3 (May 12, 2014)
For Python 3:I used this for a text incorrectly encoded as iso-8859-1 (showing words like VeÅ\x99ejnÃ©) instead of utf-8. This code produces correct version Veřejné.
Decode to Unicode, encode the results to UTF8. 
I do this, I am not sure if that is a good approach but it works everytime !!


Answer URL
https://docs.python.org/3/library/functions.html#bytes
https://docs.python.org/3/library/stdtypes.html#bytes.decode
