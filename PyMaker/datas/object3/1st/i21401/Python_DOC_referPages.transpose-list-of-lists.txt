Natural Text
Let's take:The result I'm looking for isand notMuch appreciated
How aboutFor python 3.x users can use
One way to do it is with the NumPy transpose. For a list, a:Or another one without zip:
Equivalently to Jena's solution:
just for fun, valid rectangles and assuming that m[0] exists
These methods all work in Python 2 or 3. And they work on "ragged" rectangular 2D lists. That is, the inner lists don't need to have the same lengths.the setupmethod 1six.moves.zip_longest() becomesitertools.izip_longest() in Python 2itertools.zip_longest() in Python 3The default fillvalue is None. Thanks to @jena's answer, where map() is changing the inner tuples to lists. Here it's turning iterators into lists. Thanks to @Oregano's and @badp's comments.  method 2The @inspectorG4dget alternative.method 3This extraordinarily compact @SiggyF second alternative works with ragged 2D lists, unlike his first code which uses numpy transpose and passes through ragged lists. But None has to be the fill value. (No, the None passed to the inner map() is not the fill value. It means there's no function to pass the rows through.)
Three options to choose from:1. Map with Zip2. List Comprehension3. For Loop AppendingAnd to view the results:
Maybe not the most elegant solution, but here's a solution using nested while loops:

Here is a solution for transposing a list of lists that is not necessarily square:



Answer URL
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
