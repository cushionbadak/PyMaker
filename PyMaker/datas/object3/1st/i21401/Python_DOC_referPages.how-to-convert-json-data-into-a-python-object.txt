Natural Text
I want to use Python to convert JSON data into a Python object.I receive JSON data objects from the Facebook API, which I want to store in my database.  My current View in Django (Python) (request.POST contains the JSON):This works fine, but how do I handle complex JSON data objects?   Wouldn't it be much better if I could somehow convert this JSON object into a Python object for easy use?
You can do it in one line, using namedtuple and object_hook:or, to reuse this easily:If you want it to handle keys that aren't good attribute names, check out namedtuple's rename parameter.
Check out the section titled Specializing JSON object decoding in the json module documentation. You can use that to decode a JSON object into a specific Python type.Here's an example:UpdateIf you want to access data in a dictionary via the json module do this:Just like a regular dictionary.
This is not code golf, but here is my shortest trick, using types.SimpleNamespace as the container for JSON objects.Compared to the leading namedtuple solution, it is:probably faster/smaller as it does not create a class for each objectshorterno rename option, and probably the same limitation on keys that are not valid identifiers (uses setattr under the covers)Example:
You could try this:Just create a new Object, and pass the parameters as a map.
Here's a quick and dirty json pickle alternative
For complex objects, you can use JSON PicklePython library for serializing any arbitrary object graph into JSON.  It can take almost any Python object and turn the object into JSON.  Additionally, it can reconstitute the object back into Python.
I have written a small (de)serialization framework called any2any that helps doing complex transformations between two Python types.In your case, I guess you want to transform from a dictionary (obtained with json.loads) to an complex object response.education ; response.name, with a nested structure response.education.id, etc ...So that's exactly what this framework is made for. The documentation is not great yet, but by using any2any.simple.MappingToObject, you should be able to do that very easily. Please ask if you need help.
If you're using Python 3.5+, you can use jsons to serialize and deserialize to plain old Python objects:You could also make FbApiUser inherit from jsons.JsonSerializable for more elegance:These examples will work if your class consists of Python default types, like strings, integers, lists, datetimes, etc. The jsons lib will require type hints for custom types though.
Modifying @DS response a bit, to load from a file:One thing: this cannot load items with numbers ahead. Like this:Because "1_first_item" is not a valid python field name.
Python3.xThe best aproach I could reach with my knowledge was this.Note that this code treat set() too.This approach is generic just needing the extension of class (in the second example).Note that I'm just doing it to files, but it's easy to modify the behavior to your taste.However this is a CoDec.With a little more work you can construct your class in other ways.I assume a default constructor to instance it, then I update the class dict.EditWith some more of research I found a way to generalize without the need of the SUPERCLASS register method call, using a metaclass
While searching for a solution, I've stumbled upon this blog post:  https://blog.mosthege.net/2016/11/12/json-deserialization-of-nested-objects/It uses the same technique as stated in previous answers but with a usage of decorators. Another thing I found useful is the fact that it returns a typed object at the end of deserialisation Usage:
Expanding on DS's answer a bit, if you need the object to be mutable (which namedtuple is not), you can use the recordclass library instead of namedtuple:The modified object can then be converted back to json very easily using simplejson:
Since noone provided an answer quite like mine, I am going to post it here.It is a robust class that can easily convert back and forth between json str and dict that I have copied from my answer to another question:
If you are using python 3.6+, you can use marshmallow-dataclass. Contrarily to all the solutions listed above, it is both simple, and type safe:
Use the json module (new in Python 2.6) or the simplejson module which is almost always installed.


Answer URL
https://docs.python.org/3/library/types.html#types.SimpleNamespace
