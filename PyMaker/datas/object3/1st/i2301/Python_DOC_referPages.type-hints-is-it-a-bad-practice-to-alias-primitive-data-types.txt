Natural Text
In Python documentation for typing & type hints we have the below example:Vector type alias clearly shows that type aliases are useful for simplifying complex type signatures.However, what about aliasing primitive data types?Let's contrast two basic examples of function signatures:vs. Version with type alias URL for primitive type str is:self-documenting (among others, now I can skip documenting returned value, as it should be clearly an url),resistant to type implementation change (I can switch URL to be Dict or namedtuple later on without changing functions signatures).The problem is I cannot find anyone else following such practice. I am simply afraid that I am unintentionally abusing type hints to implement my own ideas instead of following their intended purpose.
Using an alias to mark the meaning of a value can be misleading and dangerous. A NewType should be used instead.Recall that the use of a type alias declares two types to be equivalent to one another. Doing Alias = Original will make the static type checker treat Alias as being exactly equivalent to Original in all cases. This is useful when you want to simplify complex type signatures.Simple aliasing works both ways. A List[float] is a vector, and a str is a URL â€“ except that it is not. A URL is a special kind of str and not any can take its place. An alias is a too strong statement of equality, as it cannot express this distinction. In fact, any inspection that does not look at the source code does not see the distinction:Consider that you alias Celsius = float in one module, and Fahrenheit = float in another. This signals that it is valid to use Celsius as Fahrenheit, which is wrong.Unless your types do cary separative meaning, you should just take a url: str. The name signifies the meaning, the type the valid values. That means that your type should be suitable to separate valid and invalid values!Use aliases to shorten your hints, but use NewType to refine them.
I am not sure if this question is opinion based, but I have a feeling the general agreement would be this is a good idea, in general. You state the benefits yourself, not to mention the ability to generalize code etc.I would venture this is not common practice in Python as the language itself is not very restrictive. In addition, the variable is already called url - that is pretty self explanatory. You could argue you might have something called json_response or the like, and you expect it to be a url, and your method would certainly make it clear, but since Python encourages duck typing, the code usage often gives this hint anyway, and using type aliasing will be just extra safety for an inconsiderate user. It really goes down just to common practices, with no good "do that!" explanation.Final point - type aliasing, in a sense, is the most primitive version of object oriented programming. You are making it clear what properties you are expecting of this object, in this case the string should be a valid URL.
I guess the question one could ask oneself is "the purpose".I strongly believe in Python's readability is all that matters. With this in mind type hinting, even for primitives is quite OK. Even better if type is masked by virtual "enum"-like type that does some self documenting. That being said - personally I'd go with the first:URL = strdef process_url(url: URL) -> URL:    pass


Answer URL
https://docs.python.org/3/library/typing.html#type-aliases
https://docs.python.org/3/library/typing.html#newtype
