Natural Text
I have a directory containing thousands of images from three different domainslet's say the file names are xxx_A.png and yyy_B.png and zzz_C.pngthere are thousands from each domainos.listdir() will return a list for all image names inside the directoryI then want to filter this list based on some percentagesExample:I specify that I want to have out of these thousands of images, only 100 shuffled images where 30% of them will be from domainA, 30% from domainB and 40% of domainCSo simply given a certain number, I have these percentages, and I choose x number of random images (based on the image name for sure, because they are already specified), and this will be the new listExample:Input:I want 12 images, 30% from domain A, 30% from domain B and 40% from domain COutput:How can I make this ?
Below is a function I defined. As Martin stated, math.ceil is probably the best function to use to get the number of files (so you don't get less than your desired amount). Also, you will want to sample without replacement (meaning you don't want to repeat file names), so you should not use random.choice like Rakesh did (as random.choice samples with replacement). The random.shuffle avoids this problem.Input:Output:You can also call random.shuffle(shuffled_list) before the return statement to shuffle the output list.
This is one approach. I am using a dictionary to separate the image from different domains then calculate the number of images required from each domain.  Demo:Output:
Here is one possible approach:First split all of the filenames into domains based on the letter using a defaultdict(list). e.g. a dictionary looking like:For each domain, use random.sample() to randomly take the required number of files from the domain into an output list.  math.ceil() is used to be ensure enough files are always present by always rounding upwards.Finally, shuffle the combined output list (if required) and ensure that the correct overall number of files are present.This will result in an output with the exact distribution of random elements from each domain.Giving a possible output of:    Tested on Python 3.6.6


Answer URL
https://docs.python.org/3/library/collections.html?highlight=defaultdict#collections.defaultdict
https://docs.python.org/3/library/random.html?highlight=random%20sample#random.sample
https://docs.python.org/3/library/math.html?highlight=maths%20ceil#math.ceil
https://docs.python.org/3/library/random.html#functions-for-integers
