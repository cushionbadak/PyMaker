Natural Text
This question already has an answer here:How can I represent an 'Enum' in Python?                    43 answers                I know, I know, there are already similar questions in here and there. But their questions and answers are not exactly what I am looking for. Besides, they are locked question so I can not add a new answer to them. SMH.Firstly, let's clarify the question to understand its scope. When using enum in other static languages like this:we want it to help us in:Guard against typo when referencing a value. For example, var foo = Size.SMALL is valid, var bar = Size.SMAL should generate a lousy error.Enum values can support strings, Such as HTTP404 = "Not Found", HTTP200 = "OK", .... (Therefore those implementations based on range(N) is unacceptable.)When defining a parameter as a specific Enum type, it serves as a regulation to accept only that kind of values. For example, public void Foo(Size size) {...}I also want the values to be first-class citizen in my Enum solution. Meaning, my functions def parser(value_from_the_wire): ... would like to consume some native values (such as an integer or a string etc.), rather than to consume an Enum member. This is the tricky part in standard Enum in Python 3:assert 2 == MY_ENUM.MY_VALUE would only work when MY_ENUM was derived from IntEnum (and there is no default StrEnum although it is not difficult to subclass one by yourself)assert 2 in MY_ENUM wouldn't work, even if MY_ENUM was derived from IntEnum.
TL;DR: Use venumSo my Python solution to satisfy the 3 criterias in the question, is based on namedtuple and the implementation seems more straightforward than the new built-in Enum in Python 3.Usage is now simple.EDIT 1: I was actually aware that there is a standard Enum module in Python 3 which is, feature-wise speaking, largely a superset to my one-liner implementation below. However there is one scenario that the standard Enum won't suit my need. I want the values to be a first-class citizen in my enum; I want my t_shirt_size(...) function to accept a real value, not just an enum member. The standard enum approach would NOT allow these 2 usages: assert SIZE.MEDIUM == 1 nor assert 1 in SIZE.EDIT 2: Given that people tend to stereotype this topic as a duplicate, I planned to actually implement my approach as a standalone module with plenty of documentation. I even came up a cool name for it, venum, V stands for Value. It was at that time that I checked the name in pypi and found out there is already a package with that same name, using the same approach as mine, and documented well. So that settles it. I'll simply pip install venum instead. :-)
Implementing with Python 3's Enum:and using:


Answer URL
https://docs.python.org/3/library/enum.html
https://docs.python.org/3/library/enum.html
