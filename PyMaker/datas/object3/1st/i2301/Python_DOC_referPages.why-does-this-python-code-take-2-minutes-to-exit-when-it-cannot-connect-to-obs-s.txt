Natural Text
I am new to Python and i don't know much about asyncio.  I want to run this script and if the OBS software it is trying to connect to on 10.11.0.124 is not running to exit the code.  The code does this, but it take 2 minutes before it exits.  I cannot figure out why it does not exit immediately when it cannot connect to the OBS software that is not running on 10.11.0.124.
The OBSWS function has a timeout of two minutes, because it uses the websockets module internally and that has a default timeout of two minutes.Detailed breakdown:async with OBSWS(...): calls OBSWS.__init__ and then awaits OBSWS.__aenter__.OBSWS.__init__ does nothing interesting, but OBSWS.__aenter__ awaits OBSWS.connectOBSWS.connect awaits websocket.connect.websockets.connect has several different timeouts defined via keyword arguments. It also waits for multiple things. These are:self._creating_connection, defined hereThis uses loop.create_connection which has a 60 second timeout by default.It then calls factory which calls create_protocol which defaults to klass which defaults to WebSocketClientProtocol, which subclasses WebSocketCommonProtocol which probably isn't adding any further delays.protocol.handshake(...)protocol.fail_connection() in the case of any exception being raised, which does occur.I don't understand asyncio so I just stopped here; there's probably another 60 second delay somewhere but if not... perhaps the computer was just slow.
Thanks for the help user4815162342 and wizzwizz4!  Here is my final solution.  I ended up going with wizzwizz4's suggestion of breaking down the connection string so i could use asyncio.wait_for on it.If anyone cares the code itself is to watch OBS and when streaming is started go change the asset on Screenly OSE to display the RTMP stream.  When the streaming is stopped switch back to a different asset on Screenly OSE.


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_connection
https://docs.python.org/3/library/asyncio-task.html#asyncio.wait_for
