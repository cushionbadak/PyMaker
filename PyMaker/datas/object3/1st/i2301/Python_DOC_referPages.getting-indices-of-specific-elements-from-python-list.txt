Natural Text
I have a list with small and big numbers like this:The "big numbers" are at least 10 times bigger than the smaller numbers. In total, there are 4 "big numbers" in the list: 123444, 122234, 123231 and 1231231.I want to find the indices of the 3rd and 4th "big numbers":values: 234 454 123444 123 234 122234 234 354 654 123231 234 342 1231231indices: 0   1   2      3   4   5      6   7   8   9      10  11  12As you can see, the 3rd "big number" has the index 9, and the 4th "big number" has the index 12. Therefore the output should be 9 and 12.
Sorting is no good here since if a larger value long appears before a smaller value long, then the order is destroyed, as it does in this example(123444 > 123231). Instead using enumerate find items that are greater that 10x of the value of other items  and append their index to a new list in the order of their appearance and then grab the 3rd and 4th items of the new list containing indexes Or list comprehension
One way to achieve this would be to find the inflection point in the values in the list. This can be done by using a threshold factor for the same. For example:More sophisticated methods include finding where the concavity of a curve changes according to the derivative. You can find out more about that here, here and here
You could achieve it by sorting the list and then using reverse slice of index to find the index of largest values:Result:

You can sort the elements first. Then for each of the largest elements find its index in the original list.Your should look like this:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#more-on-lists
