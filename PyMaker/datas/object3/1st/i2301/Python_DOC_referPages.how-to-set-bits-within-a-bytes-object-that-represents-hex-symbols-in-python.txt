Natural Text
I want to replace individual symbols within an object of type bytes that represents hex-symbols.Starting with a = b'2900BC' I want to end up with something like a = b'29F0BC' by calling some function similar to in my caseMeaning to set symbol number 2 in object a to the value of F (as f_hex = 1111_bin)As far as I understand, one problem is that the object of type bytes is not mutable. Even with turning it into a bytearray I can not seem to get this done. Is there already a good way in python to achieve such manipulations or has somebody a clever trick how to replace parts within that object full of hex-symbols?
bytes objects generally have the same methods as strings; both are immutable but that doesn't stop you from creating new objects based on the old value.For example, you can create a new bytes value with all 2 ASCII characters replaced with the F ASCII character with the bytes.replace() method:See the Bytes and Bytearray Operations section of the Python standard types documentation for a list of methods that are supported. Note that the arguments to bytes.replace() must themselves by bytes values!In terms of your replace_hex_symbol() function:Next, bytearray objects are basically a mutable subclass of bytes; they have the same methods, but you can also directly address indices and update those. See the Mutable Sequence Types documentation.Both bytes and bytearray objects are sequences of integers in the range 0-255, and indexing reflects this. When assigning to a single index of a bytearray you must use integers:but you could also index using slices (including in assignments), at which point you get the same sequence object again when getting, and any sequence of bytes is acceptable (including a bytes object or list of integers).However, indexed access to update a bytesarray in place is going to be more cumbersome when you want to replace hexadecimal characters.In fact, there is nothing about hexadecimal character sequences that states that they must be bytes values! You can just as well use a str object, or a list of individual hex digit characters if you must have a mutable type:If you were instead dealing with binary data encoded as hexadecimal digits, then convert that encoded data to a bytes value with the bytes.fromhex() factory method, and go back with bytes.hex(); bytearray objects support the same conversions.At that point, hex digits are converted to 4 bit nibbles each, and you need an even length of hexadecimal digits:and you'd have to use bit shifting and masking to set individual nibbles. For example, the 2 in your input hexadecimal is the most-significant nibble in the first byte, so F hex, or 15 decimal, would need to be shifted by 4 bits, and then combined with the lower 4 bits of that first byte:See the bit manipulation page on the Python wiki. However, if you need this level of manipulation at a larger scale, consider a 3rd-party library like bitstring to make this easier for you.


Answer URL
https://docs.python.org/3/library/stdtypes.html#bytes.replace
https://docs.python.org/3/library/stdtypes.html#bytes-and-bytearray-operations
https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types
https://docs.python.org/3/library/stdtypes.html#bytes.fromhex
https://docs.python.org/3/library/stdtypes.html#bytes.hex
