Natural Text
This question already has an answer here:Calling a Python function with *args,**kwargs and optional / default arguments                    2 answers                I'm trying to wrap my head around using args and kwargs in Python 3 (Python 3.7.0) but I'm running into some issues with my understanding.Here is a simple function I have:And test it to see what is returned:What I don't understand is, what happened to y=10 in the first print statement? I can see it is being overridden by the 1 in args but I'm unsure why.How can I rewrite this function so the default value is not overridden, or am I missing something with how the parameters are passed from the function signature to the return statement? I tried looking here and here but did not find the answers I was looking for. As I thought putting the default values before the args and kwargs would prevent the overwriting. 
*args only captures any positional arguments not otherwise defined; y=10 does not mean y can't be used as a positional argument. So y is assigned the first positional argument.You can prevent y being used as a positional argument by making it a keyword-only argument. You do this by placing the argument after the *args var-positional catch-all parameter, or if you don't have a *name parameter, after a * single asterisk:orNow y won't capture positional arguments any more:You don't have to have a **kwargs keyword catch-all either:but if it is present, it needs to be listed last.Keyword-only arguments do not have to have a default value, the =10 can be omitted, but then the parameter becomes mandatory, and can only be specified in a call by using y=value:
Hmm, y is the first positional argument in your function definition, so naturally it binds to the first actual positional argument at callsite, which is 1.


Answer URL
https://docs.python.org/3/glossary.html#keyword-only-parameter
