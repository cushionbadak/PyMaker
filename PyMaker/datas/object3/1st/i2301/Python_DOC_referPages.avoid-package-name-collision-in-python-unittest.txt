Natural Text
Here is my project layout:test_module_1.py starts with:test_module_2.py starts with:Running python -m unittest discover tests from the project directory gives errors:Adding import sys; print(sys.modules['package_1']) at the beginning of test_module_1.py and import sys; print(sys.modules['package_2']) at the beginning of test_module_2.py to see what is in the sys.modules cache shows that package_1 and package_2 from the tests directory have been already imported during the test discovery:Importing a previously imported package reuse the same cached package from sys.modules, even if sys.path have since been updated. So when import package_1.module_1 and import package_2.module_2 are executed, first package_1 and package_2 from the tests directory (which contain test_module_1 and test_module_2) are reimported instead of package_1 and package_2 from the project directory (which contain module_1 and module_2), then module_1 and module_2 are imported, raising a ModuleNotFoundError.Is there a workaround to avoid that the packages from the tests directory shadow those of the project directory, besides renaming?Update (post answer)An alternative solution to Laurent Laporte's below (his avoids having 'package_1' and 'package_2' already in sys.modules when executing import package_1.module_1 and import package_2.module_2, by having 'tests.package_1' and 'tests.package_2' instead, thanks to a change of the top-level directory) is to update sys.path and reload the packages in test_module_1.py:and test_module_2.py:The only advantage of this solution is that the tests directory does not need to be a regular package (that is having an __init__.py file). So there won't be any advantage when Unittest allows recursive namespace package discovery (for the moment the ticket is still open: https://bugs.python.org/issue23882).Laurent Laporte's solution should be preferred, as package qualification is better to distinguish packages with the same names than package reloading. Another good solution is package renaming (for instance renaming package_1 and package_2 from the tests directory to test_package_1 and test_package_2).
You can solve your problem by using the flag -t, --top-level-directory directory to set the top level directory of your project (defaults to start directory)For instance:But, in order for discover to import your test modules you need to turn your tests directory into a package by inserting a __init__.py in it.See the documentation about tests discovery.NOTES:I encounter the same problem with PyTest. See my study on GitHub.In other open source projects, there is only one root package (only package_1 for instance), and there is no tests/package_1 directory, only tests with all the test_*.py modules (and possibly with sub-packages). So, the problem doesn't appear.


Answer URL
https://docs.python.org/3/reference/import.html#the-module-cache
https://docs.python.org/3/library/unittest.html#test-discovery
