Natural Text
This question already has an answer here:Can I combine two decorators into a single one in Python?                    6 answers                I'm using two different decorators from two different libraries. Lets say: @decorator1(param1, param2) and @decorator2(param3, param4). That I often use in many functions as:Since it happens every time, I would like to create a custom decorator that handle both of them. Something like:How do I achieve that?
I would argue that you shouldn't - using the original names for the decorators gives much better readability.However, if you really want to, you can do it like this:Based on comments though, here's an alternative method:To some, this might look simpler. However, people experienced with Python are used to decorators being applied with an @ - and even for that reason alone, I like my first option better. I know I'd take three times as long to read this code for the first time and understand what it does. It's simple really - just write a decorator that returns another decorator which will have it's inner function decorated with the other two decorators ;)It might also be a good idea to use functools.wraps, for the sake of good habits. It's standard library and helps a lot with debugging and interactive console use: https://docs.python.org/3.7/library/functools.htmlIn general though, I'd say the one extra line of code is more than worth the clarity of using the decorators separately. You'll thank yourself when you read your own code in 3 more months.
This is just simple function composition, where decorator1 and decorator2 are returning the functions you want to compose. The real work can be abstracted out into a function compose.
Decorator is nothing more than a syntax sugar to the syntax like func = decorator(func). So, you can easily make your own decorator that does whatever you want with the following syntax:After that, you should be able to use @mycustomdecorator with no hassle. Let me know if this works, I didn't test it but theoretically it should.What's the magic there: first, we need to retrieve parameters for our decorators. This way, we are able to pass them on into nested function. Then, we are accepting our function as an argument, and the last, we are getting parameters for our function. We can nest our def-s as much as we need.


Answer URL
https://docs.python.org/3/library/functools.html#functools.wraps
