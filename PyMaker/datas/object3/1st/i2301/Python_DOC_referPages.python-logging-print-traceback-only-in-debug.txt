Natural Text
I am currently loading the python logger like this:and using it e. g. like this:However, this will always print the traceback along with the error message:I do not want the traceback in the normal error output. Instead it should only print my error message and the exception info ("No such file...").What is the recommended way of showing the traceback only when the loglevel is set to logging.DEBUG?
I'd use a combination of exc_info and .getEffectiveLevel:This way, the exception itself (FileNotFoundError) is always logged, but the stacktrace will only be logged if log level is debug.
Log the exception at DEBUG level instead and set exc_info=True. logger.exception() is essentially a logger.error(..., exc_info=True) call, but you can log exception tracebacks at any level:It's the exc_info option that's important; from the documentation:If exc_info does not evaluate as false, it causes exception information to be added to the logging message. If an exception tuple (in the format returned by sys.exc_info()) or an exception instance is provided, it is used; otherwise, sys.exc_info() is called to get the exception information.You perhaps want to use printing (to stdout or stderr) to communicate with the end-user:I included the system error message in the print output without the FileNotFoundError(...) representation.If you use a command-line argument parser like argparse or click, then do use their user feedback API (which usually includes exiting too).You can make the logging module produce user-level messages too, but if you want a single logger call to produce debug-friendly tracebacks in a file and user-friendly output on a console, you'd have to configure separate handlers for these use-cases with the console handler using a custom Formatter() class to override the formatException() method to alter how exceptions are shown. It's just much easier and clearer to separate logging and end-user communication.


Answer URL
https://docs.python.org/3/library/logging.html#logging.Logger.getEffectiveLevel
https://docs.python.org/3/library/logging.html#logging.Logger.debug
https://docs.python.org/3/library/exceptions.html#OSError.strerror
https://docs.python.org/3/library/logging.html#formatter-objects
https://docs.python.org/3/library/logging.html#logging.Formatter.formatException
