Natural Text
I was looking at the python documentation about set(), but I'm still trying to understand why does this function deletes repeated characters in a string, for example:returns {"a","p","l","e"}.Is it a special property of sets?
Per the first sentence of the set docs (emphasis added):A set object is an unordered collection of distinct hashable objects."distinct" can be interpreted here to mean "unique" or "non-repeating" objects; as the example use cases note:Common uses include membership testing, removing duplicates from a sequence, and computing mathematical operations such as intersection, union, difference, and symmetric difference.Because str are iterables of their own letters, set("apple") is essentially a faster equivalent to set(["a", "p", "p", "l", "e"]), which causes the duplicated letters to be removed. If you'd wanted a set with an initial entry of "apple", you'd use {"apple"} (set literal) or set(("apple",))/set(["apple"]) (set constructor applied to tuple or list of values to include). This is a general property of str, not specific to set cases; list("apple") would produce ["a", "p", "p", "l", "e"] for the same reason.
Yes sets contain unique elements and are much faster for comparisons like checking if an item exists than lists for example. As well as having lots of other nice properties.so another example would be returnsthe unique items.One thing to note is that sets are not ordered like lists, which has both positives and negatives
set() accepts an iterable in this case apple is treated as one, yielding 'a', 'p', 'p', 'l', 'e' which are then added to the set and because sets only contain unique elements you end up with {"a","p","l","e"}.
If an optional iterable parameter is supplied to set(), it updates the set with elements obtained from iteration. That is from the docs.A set only contains unique elements. When you pass it an iterable, ie. string, tuple, list - It creates a set, iterating over the passed in object.


Answer URL
https://docs.python.org/3/library/stdtypes.html#types-set
