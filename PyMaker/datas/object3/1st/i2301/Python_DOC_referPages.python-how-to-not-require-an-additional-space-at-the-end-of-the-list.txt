Natural Text
I've written a program which can compress a sequence of characters.The program outputs:So, it finds that there's '4' entries of 'a' so it writes 'a4', then 'b3' for three entries of b.The issue is that it forgets about the 'f1' at the end of the string. I know this  is because of the line:Since string[element-1] refers to the position in the string before the current element, thus, it will never reach the final position which is where 'f' is. The program doesn't work without the '-1' since it doesn't write the correct letter.How can I get around this problem and make it able to include f?The correct output should be a4b3c1h2t7f1.Thanks :)Edit: I forgot to mention that the program works if I include an additional character after the 'f', such as just a blank space. But that's of course because the final character in my string is just a space rather than a letter.
You could do this all with itertools.groupby and sum and avoid all counting and keeping track of indexes:
You could make it simpler and add a character at the end:
Also note that you need to start counting form 1 not 0 and get rid of firstLoop
Try changing the loop to for element in range(0, len(string) + 1) and adding an extra if condition:
In the spirit of fixing your code you just needed to simply add the element first to output before adding the counter on change. You can use a neat treat called else with for loops that will run at the end, which will add the final counter to f. No need to buffer or import anything special, you were fairly close:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/library/functions.html#sum
