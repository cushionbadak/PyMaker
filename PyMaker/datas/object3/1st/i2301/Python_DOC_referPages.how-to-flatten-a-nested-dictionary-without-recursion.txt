Natural Text
I came across this function that can flatten a dictionary:to test it I created a dictionnay that is nested n times like so:the function works while n is less than 999, otherwise it hit recursion limit:so after a little bit of searching it seems that any recursive function can rewritten to iteration but I cant see how it could be done for the function I have to produce the same results.Another weird problem I came across while playing with this is if I try the code below for n >= 998:I get recursion error:which is weird since I dont see any recursion here.
Instead of saving the dict in the stack, you should save the item's iterator in stack.This way, you can resume the iterator on command.Also because you're pausing and resuming the execution of iterators in order, the result will always be according to the order of the dict.By the way, @iBug, dicts are ordered as per Python's specification from 3.7
Logically, nested dictionaries (and lists) is a kind of recursion, so if you want to avoid logical recursion, that's impossible.But, since recursion is just recursion, you can keep a stack of your own and simulate that in a loop:This function well emulates the behavior of function recursion, with a custom stack.There's one potential downside: Theoretically, a dictionary likeshould be flattened as [1, 2, 3, 4, 5], while this method would give [1, 2, 5, 3, 4]. This is much like a DFS search vs a BFS search on a graph.But, since dictionary is unordered, this shouldn't be a big matter (unless you're using collections.OrderedDict), and that's why I say this is a potential downside.
If you want to do it without recursion, it is impossible.So Here the solution for the RecursionError.Based on the doc of python.You could use sys.getrecursionlimit() to see the limit of recursion. You could also use sys.setrecursionlimit() to make the limit upper.


Answer URL
https://docs.python.org/3/library/exceptions.html
