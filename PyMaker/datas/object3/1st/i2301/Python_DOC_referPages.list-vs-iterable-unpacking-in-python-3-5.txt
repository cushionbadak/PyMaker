Natural Text
Is there any practical difference between list(iterable) and [*iterable] in versions of Python that support the latter?
list(x) is a function, [*x] is an expression. You can reassign list, and make it do something else (but you shouldn't). Talking about cPython, b = list(a) translates to this sequence of bytecodes:Instead, c = [*a] becomes:so you can argue that [*a] might be slightly more efficient, but marginally so.
You can use the standard library module dis to investigate the byte code generated by a function. In this case:So there is a difference and it is not only the loading of the globally defined name list, which does not need to happen with the unpacking. So it boils down to how the built-in list function is defined and what exactly BUILD_LIST_UNPACK does.Note that both are actually a lot less code than writing a standard list comprehension for this:
Since [*iterable] is unpacking, it accepts assignment-like syntax, unlike list(iterable):You can read more about this here (not useful though).You can also use list(sequence=iterable), i.e. with a key-word argument:Again not useful.
There's always going to be some differences between two constructs that do the same thing. Thing is, I wouldn't say the differences in this case are actually practical. Both are expressions that take the iterable, iterate through it and then create a list out of it. The contract is the same: input is an iterable output is a list populated by the iterables elements. Yes, list can be rebound to a different name; list(it) is a function call while [*it] is a list display; [*it] is faster with smaller iterables but generally performs the same with larger ones. Heck, one could even throw in the fact that [*it] is three less keystrokes.Are these practical though? Would I think of them when trying to get a list out of an iterable? Well, maybe the keystrokes in order to stay under 79 characters and get the linter to shut it up.


Answer URL
https://docs.python.org/3/library/dis.html
