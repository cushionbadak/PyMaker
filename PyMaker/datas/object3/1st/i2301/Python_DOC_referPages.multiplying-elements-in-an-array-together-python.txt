Natural Text
I'm attempting a question where I need to find the largest product of 2 digits contained within a long number:However, what I am attempting above gives the result 56, how do I multiply 7*3, then 3*1, and so on...EDIT for H
You can iterate over a zip the list and a slice of it with the start differing by 1:This returns: 54 (because of 9 and 6 in the number)
You are currently multiplying the number i times i + 1. You could use range to do what you want like this:
itertools has a recipe for this called pairwise.
Number = 73167176531330624919225119674426574742355349194934lst = [int(i) for i in str(Number)]print(lst)new_lst = []for i in xrange(len(lst)-1):    new_lst.append(lst[i]*lst[i+1])    print new_lst
You want something like this perhaps:         Answer will be 54 (9*6)
You don't need to create a list to calculate the maximum of an iterable. This will be inefficient. Here is a functional solution using max, map and mul:
a version strictly using integer arithmetic (as opposed to strings):update to show how this would work for your current question (where you look for the maximum product of 13 adjacent digits):


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
