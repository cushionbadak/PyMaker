Natural Text
I'm looking for a way to get (using Python) the maximum and minimum values of C types integers (ie uint8, int8, uint16, int16, uint32, int32, uint64, int64...) from Python.I was expecting to find this in ctypes modulebut I couldn't find it.Julia have great feature for this:I'm pretty sure Python have something quite similar.Ideally I'm even looking for a way to ensure that a given Python integer (which is said to be unbounded) can be converted safely in a C type integer of a given size.When number is not in expected interval, it should raise an exception.Currently overflow doesn't raise exception:I saw this SO post Maximum and Minimum values for ints but it's a bit different as author is looking for min/max value of a Python integer... not a C integer (from Python)I also noticed Detecting C types limits ("limits.h") in python? but, even if it's quite related, it doesn't really answer my question.
According to: [Python 3]: Numeric Types - int, float, complex:Integers have unlimited precision.Translated to code:On the other hand, each C type has a fixed size (depending on platform / architecture), as clearly shown in [CppReference]: Fundamental types.Since [Python 3]: ctypes - A foreign function library for Python doesn't mention anything about types limits (note that there is some stuff that is not documented here), let's find that out manually.code.py:Notes:Code relies on the fact that for a certain integral type, its interval (and limits are interval's endpoints) is:signed (2's complement): [-(2 bit_size - 1), 2 bit_size - 1 - 1]unsigned: [0, 2 bit_size - 1]To check the a type's signum, use -1 (which will automatically be converted to the upper limit (due to wrap around arithmetic) by unsigned types)There are lots of duplicates the output (below), because some types are simply "aliases" to othersThe rest of your task (creationg a function that compares an Python int to the ctypes type limits, and raises an exception if it isn't) is trivial, so I didn't implement itThis is for demonstrating purpose only, so I didn't do any argument checkOutput:


Answer URL
https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex
https://docs.python.org/3/library/ctypes.html#module-ctypes
