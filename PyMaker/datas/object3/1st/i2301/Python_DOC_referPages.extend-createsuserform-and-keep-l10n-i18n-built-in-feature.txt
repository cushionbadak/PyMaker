Natural Text
I am discovering Django (v2.1.1) and want to set up a signin page in which I have 2 emails fields, if the 2 fields are identical, I call form.is_valid().The project tree : Internationalization config in project/settings.py :With a basic django signin view it works well: project/views.py :I have a nice French translated HTML form (except for the submit button) :Let's add an email field in the form, email is a built-in user fields (as first_name & last_name) so I just add a new class SignInForm inheriting from UserCreationForm : project/forms.py :I update project/views.py :It works : a nice French translated field is added but it do not have a help_text attribute :Now I'm stuck…If I want to set the attribute 'required': True to the email field (it is required and I want to show a translated help_text). The only way I found is overriding the built-in email field, but I loose translation and it do not shows the help_text :If I add a second email2 field, I was hoping copy the original User.email with something like email2 = User.email, but it looks like this is not the good place were email is stored. I can use forms.EmailField() as above, but I'd really like to take benefit of the built-in translation.Then here is my questions :How to use an email field with build in attributes (name, required, help_text, …) and get translations ? (When I have an answer I assume that I will found the way to do the same with the submit, first_name & last_name) Can I duplicate the email field with this constraint? (I do not want to store this second field, just checking before calling form.is_valid())_
There are a few things at play here.The UserCreationForm is a ModelForm, which derives its field from a model. In this case, the model is your current AUTH_USER_MODEL setting. When the email form field is created, it inspects the corresponding email field from the model, where it will find the help_text which is wrapped in a gettext (or gettext_lazy) call to allow for i18n to work, as well as any other attribute.If I understand your question correctly, you want to duplicate the email form field to override some (if any) attributes and to allow you to validate it against the original one. While Django makes it a little harder than what you tried because it is using metaclasses to generate the form class, there has been a public API for doing just that since version 1.8: get_field Here is an example of what you can do:A few of remarks:Using settings.AUTH_USER_MODEL instead of just User will save you from changing the reference to User in your entire codebase should you switch to a custom user model.get_field also has a plural form (see docs) to retrieve multiple fields at the same time. In general, any runtime modifications of forms (overriding field attributes, etc.) happens in the __init__ method, since it's where you first get the 'real' form after Django does its black magic with metaclasses, see the required attribute override.If you want to override a translatable text, you will have to go through gettext and learn about this mechanism if you want to do it properly. You could of course just hardcode it in French. ;)Edit: Form validation happens in the validate and validate_{field} form methods, triggered by is_valid. You don't have to have this logic inside the view.I hope that helps.


Answer URL
https://docs.python.org/3/reference/datamodel.html#metaclasses
