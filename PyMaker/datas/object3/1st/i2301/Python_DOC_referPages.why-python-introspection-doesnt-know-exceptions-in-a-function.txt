Natural Text
When I handle some code exception code, I wander why python didn't include what exception will the function raise in its introspect system.For example,when I have to use a function refer to many other function that will raise different exceptions,I have to consider all that happen in my business logic.Like this:I have to keep digging in the function calls between them that I can know what maybe raise in this code block.And introspect system does not have information of exception.And as I know, Java will explicitly annotated 'Throw' in function definition,and IDE and programmer can easily know what kinds of exception should I handle.It will be better if I can know all the exception with object itself,for example:So,my question is,why python not include exception introspect in function object.Who can explain python's design?
Python is a dynamic language, and you can't know, up front, what exceptions a function could throw.Take this example:What exception will that function raise? I can use throw(ValueError) or throw(TypeError('foobar')), and both would work and are valid Python:Exceptions are just classes and instances. Current versions of Python require that the exception class must derive from BaseException, but in old Python versions you could even use strings for exceptions (raise "Your mother was a hamster").And because they are looked up as globals and are not reserved names, you can assign different exceptions to names. The following is legal Python syntax too:That's why Python functions can't expose what exceptions they raise.Note that there is never a good reason to use plain Exception. Use one of the standard exceptions where they make sense (ValueError, TypeError, IndexError, KeyError, etc.) or create your own API-specific exceptions by subclassing from Exception or a more specific exception subclass.Then document your API properly. State what exceptions a developer should expect, where needed. The standard exceptions don't need to be spelled out; it is reasonably obvious that a function that only works on strings will throw TypeError if you pass in a file object instead.You can use a exception class hierarchy in your business application if you need to catch multiple types:then raise the subclassed exceptions and catch BusinessException to handle all, or catch only specific subclasses to customise handling.If you must figure out what exceptions code raise and accept the risks involved with a dynamic language being able to change the names, then you could use abstract syntax tree (AST) analysis to at least find some information on exceptions. For straight raise Name and raise Name(args..) statements, extracting those names or calls by walking the AST is at least relatively straightforward:


Answer URL
https://docs.python.org/3/library/ast.html
