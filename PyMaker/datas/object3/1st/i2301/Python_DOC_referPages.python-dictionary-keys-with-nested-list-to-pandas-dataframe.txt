Natural Text
I have a dictionary as follows:How do I convert it to a dataframe such that The columns from the lists for a key are paired up; the nested lists are time values, temperatures and damage values, respectively, and the dataframe needs to have these in separate columns. S for [[a1, a1, a1], [a2, a2, a2], [a3, a3, a3]], you'd get a row with a1, a2, a3 (first column), followed by a row for the 2nd column, etc.The dataframe rows are grouped by combining keys with the next key, d1 combined with d2 make 6 rows (3 from d1 and 3 from d2), then d2 is combined with d3 to make 6 more rows, etc. So for the 4 keys with 3 rows each, you get 3 combinations of 6 rows == 18 rows.I tried converting to a dataframe before concatenating:but I am still stuck with concatenating part.Sample expected output:
You want to zip() together each sublist for a given key, to form new rows with values from each sublist combined:then apply this to every value in the dictionary to produce a flattened sequence of rows, where you pick your pairings.I'm assuming you want to pair up dN with dN+1 here, regardless of the number of keys. Note that dictionaries are actually unordered (although Python 3.6 and up insertion order is preserved), so you may want to apply some sorting first:after which we can pair them up with zip(sorted_keys, sorted_keys[1:]):Use this sequence to pair up the rows and flatten the resulting key sequence, then the zipped rows:This produces:
Using enumerateUsing pseudo values


Answer URL
https://docs.python.org/3/library/functions.html#zip
