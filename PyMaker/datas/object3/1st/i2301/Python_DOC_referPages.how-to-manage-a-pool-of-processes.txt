Natural Text
I'm trying to set up a multiprocessing pool on Windows 10.Basically some cpus (12 in my case) should read from a Qinand write results to Qout. When writing 'end' in Qin the process should stop.For some reason the process hangs.I developed a simple version:
You need to understand how correctly asynchronous programming works in python. When you call apply_async you get Future object. The Queue implementation in python relies on a system pipe to transmit the data from one process to another and some semaphores to protect the read and write on this pipe.
I think the reason your code hangs is because all the worker tasks end up waiting for something to appear on the input queue with the item = Qin.get() line at the same time because get() "blocks" waiting for something to be placed in the queue. One way to avoid that is to use the non-blocking get_nowait() method instead. Doing so requires code to handle any Empty exception it may raise, but it avoids having any further execution in that process effectively halted at that point.Also for things to work, you need to create and use a multiprocessing.Manager which creates a server process which holds Python objects and allows other processes to manipulate them via proxies. See the "Server process" part of the Sharing state between processes section of the documentation.Also, when using multiprocessing on Windows, it's very important to make sure the main process' code is executed conditionally by putting it inside an if __name__ == '__main__': statement. This is because of how the module has been  implemented on that platformâ€”otherwise that code will be executed again each time another concurrent task is started (which involves it being imported by them).Below is your code with the modification needed so it uses a multiprocessing.Manager. Note I changed the name of your manager() function to avoid confusion with the multiprocessing.Manager which it uses to create the shared objects.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes
https://docs.python.org/3/library/multiprocessing.html?highlight=process#the-spawn-and-forkserver-start-methods
