Natural Text
This problem has been intriguing, even though it's not necessarily neat.I have the following code:This will print the returned value of d(6) and multiply that by 3. What I would like to have is to define a set of symbols so I can set that 3*d(6) will instead return: d(6) + d(6) + d(6). Alternatively is it possible to set the expression '3d6' to return what I want in a general case for XdY?Is this solvable with wrappers / addition of symbols or do I have to go deeper and change stuff in the interpreter?I'm trying to make the program read more naturally for the gaming genre.  In tabletop gaming, people say "2d6", which means 'throw two 6-sided dice'.  This has a different probability density function compared to 2*d(6).
You cannot have 3*d(6) produce the effect of d(6)+d(6)+d(6) and have d(6) return an int. If you were creating objects representing probability distributions or something like that, you could overload __rmul__ the way you want, but not with ints.You can't have 3d6 evaluate to what you want either. 3d6 is not a valid Python token. You would have to alter and recompile the Python source code to produce your own Python variant with altered syntax, and it'd be a lot of work with little benefit.
You're asking to redefine language elements, which would require altering the parser and action rules.  Yes, you can define a class and override the basic operations, but I fear that you'll get yourself into some untenable language situations.  3d6 requires re-engineering Python; 3*d(6) allows your class to take over, if carefully designed, but is still fraught with traps for you.  Since you had to ask this question in the first place ...Instead, you should be thinking about how to program simple routines to do what you want with the given input.  For instance, you might want a functionwhich could take string input such as "3d6", "d20 + 1", and "2d8 + d10".  It would then perform the requested random generation and return the result of the roll as a simple integer.
You can't do this with a function call that returns an integer, but you could manage something similar with a class. The class can define a __mul__ method that implements multiplication in any way it wants.Here's a possible way to do it, where the d class is an object representing the abstract die roll (not a specific result), and you can roll the die by calling the instance:Use:
You can create a custom class and overload the * and + operations.Then you can do various arithmetic with D objects with this behaviour.If you want to roll a single die, you must either use the roll() method or multiply by 1.Note that since __mul__ and __rmul__ are different, there's a different behaviour, depending on whether the D object is on the right or left side of the operator.To get closer to the syntax you want, you can create D objects and call them d4, d6 etc. A new random number will be generated each time you use a + or * operation on the name die.See the python docs on Emulating numeric types for further explanation of these special operator methods.


Answer URL
https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types
