Natural Text
I found that in Python both collections.Iterable and typing.Iterable can be used in type annotation and checking for whether an object is iterable, i.e., both isinstance(obj, collections.Iterable) and isinstance(obj, typing.Iterable) works. My question is, what are the differences among them? And which one is preferred in which situations? 
The typing.Iterable is generic, so you can say what it's an iterable of in your type annotations, e.g. Iterable[int] for an iterable of ints.The collections iterable is an abstract base class. These can include extra mixin methods to make the interface easier to implement when you create your own subclasses.Now it so happens that Iterable doesn't include any of these mixins, but it is part of the interface of other abstract base classes that do.So in short, you should use the typing iterable in type annotations, but the collections iterable as a superclass.


Answer URL
https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes
