Natural Text
It's not hard to code argparse so it sets up a basicConfig with a lower level if the user supplies, say, a --verbose flag. Numerous StackOverflow questions address this.But it seems like a lot of coding, for what seems like a pretty everyday use case. I would've thought somebody would've written a nice library that can set up an ArgParser to allow users to specify all sorts of logging options from the command line, with just a couple of lines of code.I've also recently started using PyCharm, and was surprised that, out of the box, messages sent to logger.debug and even logger.info don't appear in the console. I imagined there'd be some PyCharm-related library I could import, to set up logging in some easily configurable, PyCharm-friendly way, when my program is being run within PyCharm.Am I expecting too much, am I overlooking a Python feature, or am I just having a bad Google day? Do standard libraries exist for these things?(A note for the off-topic police: I've asked whether standard libraries exist, and not for 'recommendations'.)
I've found a couple of standard ways to configure logging from files. Hopefully PyCharm will eventually have plug-ins with nice GUIs for creating these files.fileConfig()—The Simplest WayUse a FileType argument for ArgParse, for use as the logger's fileConfig().It does come with this caveat, though:Note: The fileConfig() API is older than the dictConfig() API and does not provide functionality to cover certain aspects of logging. For example, you cannot configure Filter objects, which provide for filtering of messages beyond simple integer levels, using fileConfig(). If you need to have instances of Filter in your logging configuration, you will need to use dictConfig(). Note that future enhancements to configuration functionality will be added to dictConfig(), so it’s worth considering transitioning to this newer API when it’s convenient to do so.But here's an example of a logging.conf file, which follows the logging configuration file format (which is where the caveat is noted):dictConfig()—The Complete WayThis uses the dictConfig() recommended in the caveat above. Since my program already uses YAML files for configuration, I read the dict using PyYAMLAnd here's an example of a logging.yaml file, which follows the logging configuration dictionary schema:


Answer URL
https://docs.python.org/3/library/argparse.html
https://docs.python.org/3/library/logging.html#logging.basicConfig
https://docs.python.org/3/library/logging.html
https://docs.python.org/3/library/argparse.html#filetype-objects
https://docs.python.org/3/library/logging.config.html#logging.config.fileConfig
https://docs.python.org/3/library/logging.config.html#logging.config.fileConfig
https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig
https://docs.python.org/3/library/logging.html#logging.Filter
https://docs.python.org/3/library/logging.config.html#logging.config.fileConfig
https://docs.python.org/3/library/logging.html#logging.Filter
https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig
https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig
https://docs.python.org/3/howto/logging.html#configuring-logging
https://docs.python.org/3/library/logging.config.html#logging-config-fileformat
https://docs.python.org/3/library/logging.config.html#logging-config-dictschema
