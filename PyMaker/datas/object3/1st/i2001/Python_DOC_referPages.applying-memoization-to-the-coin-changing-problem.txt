Natural Text
I'm trying to solve the following problem (from CodeRust 3.0):I thought I'd make use of the following recursive relation: in this example, the number of ways to make 7 with denominations (1, 2, 5) is the sum of the number of ways to make 0, 1, ..., 7 with denominations (2, 5) (that is, one recursive call on a smaller set of denominations for each choice of the number of the first coin, 1).In order to apply memoization, I thought I'd use functools.lru_cache(). Here is my solution so far (including pytest unit tests):The problem is that the lru_cache does not seem to be helping at all to make the implementation fast. For an input of 1000, the program still takes ~10s to run:If I consider the function calls, however, I would expect there to be 'saving' due to the memoization. For example, a call with arguments (1, 2, 5), 5, would lead to (2, 5), 5, (2, 5), 4, (2, 5), 3, (2, 5), 2, (2, 5), 1, and (2, 5), 0. The first and third of these should in turn at some point both lead to (5,), 3, which point one of these could use the cached result.In short, why is this application of memoization not working?
lru_cache is an LRU cache. As in, it evicts the Least Recently Used element when the cache is full and a new element needs to be inserted. The default cache size is 128. Your memoized results are getting evicted.Set maxsize=None to use an unbounded, non-LRU cache:


Answer URL
https://docs.python.org/3/library/functools.html#functools.lru_cache
