Natural Text
Does it make sense to move operations that can be awaited to the top of a method to be able to do work while they are being awaited?Examplein logical orderHere afaiu Python will calculate the hash, then create the coroutine for the db handle, then the coroutine for the write operation and then give control to the event loop that will schedule both operations.In that case, assuming this is our only method call, we "wasted" time hashing the password, and the following would be faster.synchronous as late as possibleHere while the db_handle is awaited the password would be hashed, so we would use the "down time" to do something useful.So should I aspire to always put not-awaitable statements as late as possible so that they can be executed while awaitable statements are awaited?
... while the db_handle is awaited the password would be hashed, so we would use the "down time" to do something useful.I don't think this is correct. The effect of await is to prevent the next line from executing until the db_handle is returned. It makes the calling code behave like synchronous code, so the normal ordering considerations apply.If you want to do some work while getting the handle you could use a Task.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#awaitables
