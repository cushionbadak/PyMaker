Natural Text
I'm serialising __dict__ to mongo, but I want to intercept settingladen t. How can I do that without having to rename the attribute to_laden in order to use a property with a setter? I know that I could replace my existing laden attribute with a property, and use a setter this way:But that means that serialising __dict__ would store the name _laden in the database, not laden, breaking my existing stored data.I would really like it to be:But in the latter case the setter calls itself - generally it doesn't work.Is this achievable? Any thoughts?
It appears that your real question is this:I'm serialising __dict__ to mongo, but I want to intercept setting laden. How can I do that without having to rename the attribute to _laden in order to use a property with a setter?You can't just assign no the same name on the instance, no. self.laden is and always will be handled by the property object. If you are interested in the technical nitty gritty, then read the descriptor howto; a property object is a data descriptor which means that all access to instance.name is handled exclusively by the  type(instance).name property object. No exceptions.You can do any of the following:Access the same name in self.__dict__:This bypasses the normal object.attribute paths and goes straight to the source.Not use a property; you can intercept attribute setting on instances with the __setattr__() hook:This would intercept all instance.some_name access, but only if some_name is 'laden' will you actually do something with that value.Define a custom method on a base class that can handle serialisation for you, and add configuration to your class to the method looks for to help it decide what attributes to serialise, or let the method autodetect property objects. That'd let you include a _name to name translation.Use a MongoDB ORM library to handle your object serialisation. I'm sure some of those allow for custom setters for their fields, or at least allow for defining your own custom field types that let you alter values on setting.


Answer URL
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/reference/datamodel.html#object.__setattr__
