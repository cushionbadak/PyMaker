Natural Text
I am implementing an Evolution Strategy algorithm in Python 3. I have created a class called Individual that reads the configuration from a file (YAML format) which looks like the following:The idea is that the individual would read this file to get its configuration. I know I can save my lambda expression as a string and then call eval on it.However, is there a more Pythonic solution for this problem? I do not feel much comfortable with OO in Python, but I am open for suggestions.
I would adhere to the Zen ofPython in particular"Explicit is better than implicit" and "Readability counts".So having your functions as readable strings defining lambda's is agood idea, although, for security reasons, calling eval on the loaded stringrepresentation of the lambda might not be. Thisagain depends on who has modification access to the file and on whichsystem they run.In general you should not care too much if someone can(non-inadvertedly) inject something resulting in recursive removal ofall files on a system, if they have login access rights with whichthey can do so anyway.  However if e.g. the software runs on a remotesystem and these files can be edited via some web interface, or if thefile changes can be made by someone else than the person using thefiles, this is something you should take into account.If the lambdas come from a fixed set, you can just usetheir string representation as a lookup:You can then use the string loaded from your configuration YAML to getthe actual lambda and that string cannot be tampered with, as it hasto match the available set of lambdas you provided. You can of courseload the actual lambda strings from a file that only you can change,instead of hard-coding them in the source code. This is IMO moreexplicit than dumping the actual lambda resulting in YAML looking like:, something which requires unsafe loading of the YAML document anyway.If you need to be more flexible, than using pre-defined lambdas, butdon't want the insecurity of using eval, then another possibility isto use Python's ASTmodule. That moduleallows for safe evaluation of unary and binary operators, but can beextended to handle only those function (e.g. some mathematicalfunctions) that you want to allow in your lambda. I have done similarextension in my Python Object Notation module(PON) adding datetime anddedentingcapabilities to the AST evaluated input.Something else is that you should IMO improve on your YAML. Instead ofusing  gene1, gene2 as keys in  mapping, use a sequence and tag the items:or, alternatively tag the sequence:Your lambdas have the same "problem" and I would do something like:where the object implementing the from_yaml classmethod for thetag !Lambda transparently does the eval or AST evaluation.
With cloudpickle you can dump a lambda to bytes. Then you need to convert bytes to str to be written to a file. Note that what base64 does is to avoid things like \n in the encoded string which will poison the file structure. decode() is simply converting bytes to str so that it can be written to a file.This is not a concise representation but a safe one. If your working environment is safe, feel free to use your readable version!


Answer URL
https://docs.python.org/3/library/ast.html
