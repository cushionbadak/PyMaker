Natural Text
The Python Language Reference states:To indicate to the import machinery that the spec represents a  namespace portion. the path entry finder sets “loader” on the spec to  None and “submodule_search_locations” to a list containing the  portion.The Python Library Reference states:The loader to use for loading. For namespace packages this should be  set to None.Yet creating a namespace package whose portions are located in two different paths a/ and b/ on the file system:then adding these paths to the PYTHONPATH environment variable:and finally importing the namespace package and printing its __spec__.loader and __loader__ attributes with the CPython 3.7 interpreter:shows that they are not None:<_frozen_importlib_external._NamespaceLoader object at 0x104b04128>  <_frozen_importlib_external._NamespaceLoader object at 0x104b04128>Is it a documentation error, an implementation error or my misinterpretation?
Looks like it was right but has been changed.Opened an issue to track it: https://bugs.python.org/issue35181
I would guess that it was once None, but is no longer, due to changes in Python. Is it causing you a problem? If so, then I would raise an issue, but the resolution might well be to have the documentation updated. Can you check what results you get with Python 3.6 and/or 3.5? Also might be worth checking the Python release notes to see what updates there have been in this area.  
In this case, mod.__spec__.loader is not the same thing as mod.__loader__.  The spec's loader should still be None.  The module's loader is set by the import machinery to an instance of the internal _NamespaceLoader, partly for the sake of reloading.  Perhaps the docs aren't clear enough on this.


Answer URL
https://docs.python.org/3/reference/import.html#path-entry-finder-protocol
https://docs.python.org/3/library/importlib.html#importlib.machinery.ModuleSpec.loader
https://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packages
