Natural Text
Is there a built-in function that could compare the values of a dictionary, like the built-in all() function can compare a list or tuple for example and return True or False + the dictionary key that it was from?What I want to achieve, is to give the all() function a dictionary rather than a list. The default behaviour for all() would be to return True if there is an element missing or that is falsey:With the vanilla all() function, it only returns the True of False value, which is fine for comparison if I want to check these booleans. However, I cannot then know which of the values were  falsey, in order to tell the user why there was a problem.I have created a function which will just that. In addition to a boolean, it returns the element's key for which the value was falsey:I want it to exit early, we don't need to test all values.Is there a built-in function that does this? If not, why not? It seems like it would be useful in all sorts of instances.I'm using this for a function where each of the keyword arguments have a default value of None, to supply a default for when the user does not set a value. I use  dict_all() function provide an error message when False, key is returned.For example:Expected outcome is return False, 'comp_type'Also for those refuting the usefulness of the True and False being returned as a Tuple, I give you this example:
All you need to do is to iterate over the key-value pairs so you can test the value without having to refer back to the original mapping again, and return the key when the value is falsey. You also need to be consistent in your return type, and return a tuple in both cases:Note the change on the last line, you really don't want to return a tuple for the false case, and a single boolean for the true case, because then you also have to test the return type before you can actually know what was missing.There is no 'built-in' function for this because all() (and any()) are designed purely to produce a yes or no answer to the question: do all elements of an iterable pass a test.You are asking something different; your code needs to know what the first key is that fails to pass the test. For that question, I'd use the next() function, with a generator expression and a default value:There is no need to return True or False here; we detect that there was no key that failed the test when the default case was picked, we replaced the True or False value with a test for empty is not None.Any unique sentinel will do; None is the usual choice, but you could use object() if your input dictionary used None as a valid key:
edit: This answer was written in the context of your original dict_all function before you edited it.I have three remarks.First, I'm not sure whether you are aware of it, so I'll point it out: your dict_all looks for falsy values, while a dictionary is an iterable over its keys.Second, the enumerate in your function seems pointless. Consider the following generator expression.Third, wouldn't be getting the actual falsy value be more useful than just getting False? In that case use (value, key) instead of (False, key) in the expression above.edit: since you asked for a library function, you could use itertools.dropwhile to drop dictionary items with truthy values.This will give you a (key, value) pair with a falsy value or None.


Answer URL
https://docs.python.org/3/library/functions.html#next
