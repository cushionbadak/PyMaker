Natural Text
im trying to create a function that takes a word (capital letters and lowercase letters) and map each character to a new character. the pattern is each vowel (AEIOU) becomes the next vowel in order (A -> E, E - > I). For constant letters becomes the thirds letter (B -> F, C -> G) I know that i would have to create two lists:and uses the index() function, to check the current index and add 3 to it, but im stuck after that.Letters loop back around for cases that extend beyond the list. (x-z, and u)
To compute the maps you can use enumerate (to get the index of the current) together with modulo (for the indices greater than the list length), something like this:OutputNote that dictionaries have no order, that being said you could use them in the following way:Output (from using replace_from_dict)
We can use itertools.cycle. First check which category i belongs to either vowel or consonants (not constant). Then create a cycle from that respective list, use while and next until we are at the corresponding letter. If its a vowel we simply append the next value, if its a consonant we advance 2 positions and then append the next value. After use .join() to convert back to string.Works for words that include edge letters, zumba produces daqfe
I have defined two dictionaries for edge cases, vowel_dictionary, and a dictionary for letters x/y/z to achieve wrapping. I iterated through the string and if the character is a special character, I use the appropriate dictionary to find the word. However if the character is below 'w' and not a vowel, I just add 4 to its ord value (ASCII value) and convert it char. I have ran a few tests with the code above:Tests


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
