Natural Text
Suppose that you create a Python package called app, and it contains a module called foo, which has a function called say_hello that prints out Hello! to the console.Suppose that you also create a second Python package called boss_app that has a module main. The app and boss_app are in the same directory, and the directory is on the Python path. Also, the __init__ files are all blank. The structure is:I want to import app into boss_app.main so that I can call app.foo.say_hello.I use this command:and I expect to see in the console:Instead, the behavior I get is that app is imported but it does not have access to foo.The solution I came up with was to modify app.__init__ so that it contained the following command:Now I get the expected behavior.Is it always necessary to make a custom __init__ for a package if that package is going to be imported from an outside package?
Saying only runs app/__init__.py and makes everything it initializes available to be used as app.SOMENAME.  If you want app.foo module to be available, you need to say import app.foo.  This will load the module.  A common example of this distinction is probably import os vs import os.path.  Just because you say import os, you won't have the contents of os.path package available.You don't have to break modules into packages, but it helps to avoid module-name collision.  It may also help to keep concepts clear in the mind of a user of these modules.


Answer URL
https://docs.python.org/3/tutorial/modules.html
