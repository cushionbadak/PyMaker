Natural Text
I'm getting into Python, and though of writing my own script which allows me to check arguments provided when a program is run. An example below of what I'm trying to achieve:python file.py -v -h anotherfile.pyor./file.py -v -h anotherfile.pyIn these two cases, the -v and -h arguments, print out the module version, and a basic help file. I already have the code to differentiate between arguments and files, except I want to create a generalised module on the matter.The following code written in Java--will run the Lambda Expressions (atleast that's what I read they were when researching the topic) successfully. I have no idea how Lambda Expressions work however, and have only basic knowledge of using them.The point of this question, is how can I implement something like the Java example, in Python, storing any type of code inside of an array?The thing is with the Java example though, if I have int i = 0; defined in the class which executes addArgument and uses i somehow or rather, the class containing addArgument knows to use i from the one that invoked it. I'm worried that this may not be the same case for Python...I want to be able to store them in dictionaries, or some other sort of key-based array, so I can store them in the following manner:EDIT: Example of what I want: (not working as is) (please ignore the ;'s)
EDIT: to correct your most recent code, iterating over a dictionary yields its keys not its values, so you need:For the example you give, a dictionary of functions, although possible, isn't really the natural way to go about things in Python. The standard library has a module, argparse specifically for dealing with all things commmand-line argument related, and rather than using keys to a dictionary you can parse the command line arguments and refer to their stored constants.(In fact outputting a version string is also handled natively by argparse: see here).To print out the contents of a text file, myfile.txt when the -p switch is given:Use with e.g.
In Python, you can simply use the reference to a function as a value in a data structure. E.g., consider the following code:This would call three instances of the function spam.The lambda expressions you are referring to are simply another way to define functions, without explicitly having to bind them to a name. Consider the following:This gets much more powerful when you're using arguments, though:Once you have a reference to a function, you can then pass that to another function.In your scenario, however, you could simply pass lambda : print("version 1.0").
Since in Python functions are first-class objects, you may create dictionary of {string: callable} pairs.After definition like that usage would be following:It'll work for your custom solution with problem defined like that.For standardized way of creating command line interfaces you may want to get familiar with argparse module.
Python has a function called eval() that takes strings and tries to evaluate them as code.Then you can store your code as multi-line strings using 3 quotation marksIf you want to store the functions themselves, no reason why they can't also be placed in a dictionary.  Even without lambdas.The value of the tuple is (1,1).  Otherwise I don't know what you are asking for.


Answer URL
https://docs.python.org/3/library/argparse.html
https://docs.python.org/3/library/argparse.html#action
https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions
https://docs.python.org/3/library/argparse.html
