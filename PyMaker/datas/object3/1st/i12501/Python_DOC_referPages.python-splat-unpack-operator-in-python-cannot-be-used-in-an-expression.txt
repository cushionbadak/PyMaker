Natural Text
Does anybody know the reasoning as to why the unary (*) operator cannot be used in an expression involving iterators/lists/tuples?Why is it only limited to function unpacking? or am I wrong in thinking that?For example:Why doesn't the * operator:whereas when the * operator is used with a function call it does expand:There is a similarity between the + and the * when using lists but not when extending a list with another type.For example:
Unpacking in list, dict, set, and tuple literals has been added in Python 3.5, as described in PEP 448:Here are some explanations for the rationale behind this change. Note that this does not make *[1, 2, 3] equivalent to 1, 2, 3 in all contexts. Python's syntax is not intended to work that way.
Asterix * isn't simply unary operator, it's  argument-unpacking operator for functions definitions and functions calls.So * supposed to be used only to work with function params and not with lists, tuples etc.NOTE: starting from python3.5,  * could be used not only with functions params, @B. M's answer greatly describes that change in python.If you need to concat lists use concatenation instead list1 + list2 to get desired result.To concatenate list and generator simply pass generator to list type object, prior concatenating with another list:
This is not supported. Python 3 gives a better message (though Python 2 does not support * in the left part of an assignment, afaik):f(*[4,5,6]) is equivalent to f(4,5,6)Function argument unfolding is a special case.


Answer URL
https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-448
