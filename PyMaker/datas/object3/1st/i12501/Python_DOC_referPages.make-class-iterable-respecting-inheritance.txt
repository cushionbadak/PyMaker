Natural Text
Well simply making a class iterable is easy enough using meta classes (so some other answers here). However I wish to make a class iterable, and also enabling one to "iterate a subgroup based on inheritance". An example of my use:The first loop works - it iterates over all instances and childs of "A". However the second loop should only run over the specific subgroup of "A" - those that are instances of the child "B" (or children further down the line).(How) can this be achieved easiest? In such a way adding more subclasses require least amount of work/change?
You can use isinstance to insure that you are getting only class instancesIn your code its a one line change:
You could let each class maintain its own list of instances by giving eachits own _registry class attribute. Then, instead of checking if eachinstance is of a particular class, you could instead iterate over all the values in the _registrys for each subclass of cls. To find those subclasses you could use the cls.__subclasses__() method:yields


Answer URL
https://docs.python.org/3/library/stdtypes.html#class.__subclasses__
