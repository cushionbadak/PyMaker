Natural Text
I have a vector class:which works fine, i.e. I can write:However if the order of operation is reversed, then it fails:I understand the error: the addition of an int object to an Vector object is undefined because I haven't defined it in the int class. Is there a way to work around this without defining it in the int (or parent of int) class?
You need to also define __radd__Some operations do not necessarily evaluate like this a + b == b + a and that's why Python defines the add and radd methods.Explaining myself better: it supports the fact that "int" does not define a + operation with class Vector instances as part of the operation. Therefore vector + 1 is not the same as 1 + vector.When Python tries to see what the 1.__add__ method can do, an exception is raised. And Python goes and looks for Vector.__radd__ operation to try to complete it.In the OP's case the evaluation is true and suffices with __radd__ = __add__Which outputs:The same applies to all number-like operations.
When you say x + y, Python calls x.__add__(y). If x does not implement __add__ (or that method returns NotImplemented), Python tries to call y.__radd__(x) as a fallback.Thus all you have to do is to define the __radd__() method in your Vector class and 1 + y will work as you would expect.Note: you would have to do similar for other operations too, e.g. implement __mul__() and __rmul__() pair, etc.You might also want to look at this question, it explains the same principle in more details.Update:Depending on your use case, you might also want to implement the __iadd__() method (and its cousins) to override the += operator.For example, if you say y += 1 (y being an instance of Vector here), you might want to modify the y instance itself, and not return a new Vector instance as a result, which what your __add__() method currently does.


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-names
