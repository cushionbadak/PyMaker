Natural Text
I know you can use *args in Python to allow a tuple or arguments. But how could one have two of these. Like *args and *args1?Is this possible?
You can't have multiple variadic parameters of the same type in a function definition (e.g. def func(*args, *args1), but, in Python 3.5, you can pass arguments in that form when calling a function.Python 3.4:Python 3.5:
I assume you mean in terms of function arguments, then no it isn't possible. The reason why is a tuple *args can be of any length of 0 or more arguments. If you had another one, *args2, how would you determined which arguments belong to *args and which to *args2? You can however include a **kwargs which is a dictionary object of keyword arguments. For example:You can figure out what the args of *args are. However, inYou cannot determine which arguments go into args1 and which go into *args2. However, forIt's possible to differentiate the arguments that belong to *args and those that belong to **kwargs because the arguments that belong to the **kwargs take the form of arg = val.
It is not possible to pass *args twice when calling a function (up until in Python 3.5)However, what you can do is concatenate two args (list or tuple) as you pass them using +. For example: The function definition can only have a single *args definition, and all passed position arguments will end up in the args variable in the order they were passed.


Answer URL
https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-448
https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-448
