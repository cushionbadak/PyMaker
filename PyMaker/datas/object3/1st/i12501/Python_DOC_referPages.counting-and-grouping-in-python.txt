Natural Text
I was working on a problem in which I had to write a program that will count the number of each item needed for the chefs to prepare. The items that a customer can order are: salad, hamburger, and water. salad:[# salad] hamburger:[# hamburger] water:[# water] for example If order = "hamburger water hamburger" then the function returns "salad:0 hamburger:2 water:1"My code is :but when we give the input item_order('water water water'), my program prints instead of It works fine if there are no two consecutive words. How can I correct this?
SolutionYou can use collections.Counter: test it:prints:ExplanationThe items are given as default parameter:This make the function more flexible because you can hand in other items if desired:The use of a tuple is intentional here because mutable default parameters such as a list may cause unintentional side effects. No problem here but could be the vase in general.After splitting the input string at white spaces into a list, Counter will create a new counter instance:For example:Finally, a list comprehension helps to create anew string:The ' '.join makes a new string form a list of strings, where the list elements are separated by white space. For example:The method get() of the Python dictionary returns the value for the key if the key is in it, otherwise the default value. For example:Setting this default to 0, gives a zero count for items not contained in the order: Finally, the format() method helps to put the value for the count in a string. For example:
You shouldn't doRemove that line and it will solve your problem.Reason why it wouldn't work for back to back duplicate elements is, in Python, iterating over a sequence does not implicitly make a copy of the list. The list will be modified. You can make the duplicate copy by v[:],
You shouldn't use t.remove() while iterating on it. But why?I tried to simulate your problem This exception is handled by "for" loop silently, so "for" loop won't iterate on 3rd element. 
Altering a list while iterating over it is generally a bad idea - i.e. have you removed an item python has already iterated over or not?The list object has a count method that may help!https://docs.python.org/2/tutorial/datastructures.html


Answer URL
https://docs.python.org/3/library/collections.html?highlight=counter#collections.Counter
