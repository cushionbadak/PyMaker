Natural Text
I have a program with a function that takes a class initializer and list of objects. Each object consists of 3 variables id, value, and tag.I'm trying to implement argparse in main() so I can run the program by doing something like: python foo.py "int0 [(int1, float1, int2), (int3, float2, int4) ....]".  The number of objects in the list is variable and depends on the user input.  
You can make a custom argument type and use ast.literal_eval() to parse the value.Working sample:Now if you would run the script, you would get a list of Package class instances printed:
I would prefer to be a bit more explicit and use a custom action:The usage here would look something like:One benefit is that you get slightly better default error handling ... e.g.:Of course, you can modify to suit your purposes -- specifically it would probably be good to provide a little extra error handling to __call__.  e.g. you could do something likeif the user passed bad strings.  You could also provide better variable names :-)
Here's my nomination; it uses a plain parser, and puts the customization in the Package class.It would be called with something like:where -p or --package is followed by 3 values, and may be repeated (action is 'append').  nargs=3 ensures that each -p is followed by 3 values (otherwise the parser raises an error).  Converting those values to numbers (and raising errors) is the responsibility of the Package class.  The class already has a check on non-negative value.A sample run of the test cases is:Note how the metavar affects the help display.  The Package __repr__ method produces a nice list display.Example of a run with non-numeric tag:A special type function does not work well here.  It would be applied to each of the 3 strings, individually, not as a group.  A custom Action class could handle the 3 values, converting each to int,float,int.  But even there I'd prefer to pass them to Package, e.g. But since packages = [Package(*v) for v in args.package] is so simple, I don't see much point in customizing the parser or its actions.


Answer URL
https://docs.python.org/3/library/argparse.html#exiting-methods
