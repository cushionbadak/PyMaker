Natural Text
I have a client-server script using python socket, where the client reads a file and sends it over the socket. It works until I try to send something from server to client after the file has been transferred. i.e. after the server receives the file it sends a message that "File Received"The Server is also using Threading (to accommodate concurrent clients) Here's the server script: And client script: They both apparently stuck in recevfrom() waiting on the other end to send data. EDIT:As suggested by Pynchia, setting a timeout fixed it, here's the working snippet. ....worked like a charm. Of course the above handling of timeout exception needs a bit more tuning (at least I know where to look for now). 
Sockets by default are created as blocking (see this note in the official docs).Therefore in the server the lineblocks indefinitely when the client has finished sending file chunks.And since the client then goes on to receive something back from the server, the two end up in a deadlock.In the server code, one solution is to set the socket to non-blocking usingsocket.setblocking(flag)or set a timeout usingsocket.settimeout(value)Please also see this SO Q&A


Answer URL
https://docs.python.org/3/library/socket.html#notes-on-socket-timeouts
https://docs.python.org/3/library/socket.html#socket.socket.setblocking
https://docs.python.org/3/library/socket.html#socket.socket.settimeout
