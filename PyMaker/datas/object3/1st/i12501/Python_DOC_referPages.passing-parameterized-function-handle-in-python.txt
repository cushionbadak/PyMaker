Natural Text
I have a general function that defines a form of an ODE that I plan to integrate using scipy.integrate.odeint, for example:I have several objects in my code that all have dynamics of the form defined in my_ode, but with unique parameters K and tau. I would love to be able to just pass a unique handle to my_ode with those parameters already set when I initialize my objects, so that when I update my objects, all I have to do is something like soln = odeint(my_ode, t, y, u) for some simulation time t.For example, if I define a class:Can I do something with Lambdas when I initialize instances of MyThing to basically assign parameters K and tau at initialization and never need to pass them again? I am a bit stuck.
If you have:you could define something like:and should be able to initialize MyThing with:then you could call this helper with only y and u parameters:
Solution with lambdasIt looks like I can make this work using lambdas to generate unique function handles when I initialize my objects. For compatibility with odeint, I need to define my functions so that the first two arguments are time and initial state:Next I can initialize objects of MyThing using lambdas to set K and tau as:The function handle that gets assigned to thing1.ode is now the function handle returned by the lambda (this may not be the right way to say this) with values for K and tau set. Now in thing1.update, I need to make some changes to get it to work with odeint:One thing that tripped me up a bit is that any extra arguments to your ODE need to be passed as a tuple to odeint. This seems to work pretty well for what I want. There is also the more object-oriented approach using scipy.integrate.ode, which allows for step-wise integration of the function and is great for my simulation purposes. For this, I set the object's ODE and update it with something like:


Answer URL
https://docs.python.org/3/library/functools.html#functools.partial
