Natural Text
I'm playing a bit with python's asyncio library, in the wake of this example, I wrote the following scripts:and:When executing this code, I get the following:I have many questions about all this:Apparently the data the child sends trigger the pipe_data_received event only once and after the child has terminated. Is there a way to spawn a child process and have the pipe_data_received event triggered at every write on stdout?If I remove the line transp, proto = yield from subprocess the whole thing just hangs on creating process..., so it looks like the child is not started until the parent does transp, proto = yield from subprocess. Is that correct? Why is that?What if I wanted my process to spawn a child which runs forever and periodically triggers the pipe_data_received, while the lauching process keeps its execution flow, and does other stuff? Is this the right tool for such a need?
1.print writes data to stdout buffers, by default they are flushed only once.  You can add explicit flush.or on ptyhon3.3 and aboveMore info How to flush output of Python print?.2.The subprocess_exec returns coroutine. Every coroutine that you want to run  must be scheduled on the loop. yield from just schedules it and wait until it's done (for subprocess_exec done means process is executed). 3.To run task in background, you have to as well schedule it on loop, but do not wait for results. You can use ensure_future`.editAnd here simple example of running loop forever. I have removed all exit_future related stuff, as it is not needed.


Answer URL
https://docs.python.org/3/library/asyncio-subprocess.html#subprocess-using-transport-and-protocol
https://docs.python.org/3/library/asyncio-task.html#asyncio.ensure_future
