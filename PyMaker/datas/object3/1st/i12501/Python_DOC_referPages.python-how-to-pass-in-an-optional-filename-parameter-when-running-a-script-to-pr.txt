Natural Text
I have a python script that processes an XML file each day (it is transferred via SFTP to a remote directory, then temporarily copied to a local directory) and stores its information in a MySQL database.One of my parameters for the file is set to "date=today" so that the correct file is processed each day. This works fine and each day I successfully store new file information into the database. What I need help on is passing a Linux command line argument to run a file for a specific day (in case a previous day's file needs to be rerun). I can manually edit my code to make this work but this will not be an option once the project is in production.In addition, I need to be able to pass in a command line argument for "date=*" and have the script run every file in my remote directory. Currently, this parameter will successfully process only a single file based on alphabetic priority. If my two questions should be asked separately, my mistake, and I'll edit this question to just cover one of them. Example of my code below:In another module:So the SFTP module reads the file, transfers it to the local directory, and returns the file name to be used in the parsing module. The parsing module passes in the parameters and does the rest of the work.What I need to be able to do, on certain occasions, is override the parameter that says "date=today" and instead say "date=20151225", for example, but I must do this through a Linux command line argument.In addition, if I currently enter the parameter of "date=*" it only runs the script for the first file that matches that parameter. I need the script to run for ALL files that match that parameter. Any help is much appreciated. Happy to answer any questions to improve clarity.
You can use sys module and pass the filename as command line argument.That would be :If the name is given as first argument, then today variable will be filename given from command line otherwise if no argument is given it will be what you specified as datetime.For second question,You are only accessing the first element, but glob might return serveral files when you use * wildcard. You must iterate over remote_file variable and copy all of them.
You can use argsparse to consume command line arguments. You will have to check if specific date is passed and use it instead of the current dateFor the second part of your question you can use something like https://docs.python.org/2/library/fnmatch.html to match multiple files based on a pattern.


Answer URL
https://docs.python.org/3/library/argparse.html
