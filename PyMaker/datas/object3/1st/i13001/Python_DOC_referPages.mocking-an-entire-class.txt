Natural Text
Long story short, I'm perfectly able to mock class method, when it's just that method that's replaced by mock object, but I'm unable to mock that method when I'm trying to replace the whole class by the mock objectThe @mock.patch.object successfully mocks the scan method but @mock.patch fails to do so. I've followed the example at https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patchbut apparently I'm doing something wrong. I'm mocking the lexicon module in the same namespace in both cases (it's imported by import lexicon in the sentence_parser) but the mock_lexicon is lexicon.lexicon check failsOutput :EDIT :To clarify, the Parser is defined as follows 
What is real relevant here is how categorize_words_in_sentence Parser's method use lexicon. But first of all we should remove the noise:Is what can lead us to the wrong direction: try to replace it byand you will understand that you are printing False because mock_lexicon is not lexicon.lexicon + "\n" but just lexicon.lexicon.Now I cannot tell you why the first test doesn't work because the answer is in categorize_words_in_sentence method or more probably in sentence_parser module where I can guess you can have something like In both case take a look to Where to Patch documentation that can enlighten you on what can be the cause and what you really need to patch in your case.The second version works just because you are patching the object and not the reference (that should be different).Finally the more concise and general version can be:One more thing: remove unittest2 at least you're not using python 2.4 and you are interested on backported unittest features.[EDIT]Now I can stop to guess and point to you why the first version doesn't work and will never work:Parser.my_lexicon attribute is evaluated at the load time. That means when you import sentence_parser a lexicon is created and the reference associated to Parser.my_lexicon. When you patch lexicon.lexicon you leave this reference untouched and your parser object still use the original reference created when is imported.What you can do is to patch the reference in Parser class byYou can use create_autospect if you want give to your mock the same lexicon's signature.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch
https://docs.python.org/3/library/unittest.mock.html#where-to-patch
https://docs.python.org/3/library/unittest.mock.html#create-autospec
