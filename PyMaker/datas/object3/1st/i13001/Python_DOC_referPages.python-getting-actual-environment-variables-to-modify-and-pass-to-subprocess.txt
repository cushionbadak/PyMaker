Natural Text
Well, it seems situation with environment variables is not consistent in python.It's not a secret that reading environment variables using os.environ or os.getenv returns the state of env at the moment os module was imported. It's still possible to update environment using assignment to os.environ keys.But once I used os.putenv or run any ctypes code that has modified the environment I get inconsistency between actual process environment and os.environ. Nuff said, this actual environment will be preserved for subprocess, no matter created with os.system or subprocess library. In my case it's desired behavior.Now I want to review and change the environment passed to subprocesses. Usually it's suggested to get copy of os.environ, modify it and pass as a parameter to subprocess.Popen call. But in this case updates made to environment made by ctypes code will be lost.Is there any way to overcome this issue? Strictly speaking is there a way to reload os.environ or get a copy with actual environment using other facilities?
os.putenv() does not update os.environ as its docs say explicitly. C putenv() (in a CPython extension module) does not update os.environ too (as documented: changes in the environment after os import are not reflected in os.environ).os.getenv(var) is just os.environ.get(var). There is related Python issue as @ShadowRanger has mentioned.If you need it; you could access C environ from Python using ctypes e.g. (tested on Ubuntu, it might work on OS X (you might need to call _NSGetEnviron() there), it is unlikely to work on Windows (use _wenviron there)):environ is a pointer to an array of C (NUL-terminated) strings (char*) where the last item is NULL. To enumerate values in Python 2:OutputTo get it as a dictionary that you could modify and pass to a child process:To synchronize with os.environ:Here're several convenience functions:It works on CPython 2, CPython 3, pypy. It doesn't work on Jython.
This is a known issue with Python, as yet unfixed. os.getenv reads from os.environ, and setting an item on os.environ implicitly does an os.putenv, deleting implicitly calls os.unsetenv, etc.But even though os.getenv reads from os.environ, os.putenv doesn't write to it (and this behavior is documented). And there doesn't appear to be a way to make it reread the os.environ. Basically, if you want a consistent environment, you have to update os.environ only, not use os.putenv; if ctypes calls are updating the C level environ directly, you're going to need another ctypes call to read the C level environ and update os.environ to match.


Answer URL
https://docs.python.org/3/library/os.html#os.environ
https://docs.python.org/3/library/os.html#os.putenv
