Natural Text
So I have recently been learning about the mutable properties of lists, and how variables function in Python, and from what I understand the following piece of code should work:However for some reason the list that I pass to history,Still links the variables, meaning when I change something in lst, I also change history1. I have also tried using list() instead of [:] but that yields the same results. What am I missing here?
What you are missing is that lst[:] is only a shallow copy.  The new list thatis returned can have elements added and removed without affecting the originallist, but the references contained in the list are still shared.  So modifyingan element, say original_list[1].fooBar(), will affect both the referencecontained in the original list and the new list, since they are the samereference.You need to look at using deepcopy() (see the copy modules's Pythondocs)--however, that come withit's own set of issues (objects that don't support it, copying too much, etc.).In your case, it probably means history('add', lst[:]) should really besomething like: history('add', copy.deepcopy(lst)).It looks like there are some other issues with your example too.  You probablydon't want to be creating copies all the time, but rather once when it entersthis history, and probably again when it leaves?  I'm not sure I understand thereal problem, so this could be poor advice, but I'd expect the code to be morelike:I left some notes inline above where I think you should be concerned aboutthings.  I would also consider simplifying this code a little more:Using a deque will help keep cap the size at 5 entries, without needing to doall the shuffling yourself.


Answer URL
https://docs.python.org/3/library/copy.html
