Natural Text
I am wondering about how Python handles the user-defined objects. So here is the scenario:I have created my own class called MyClass:So the question, is python's remove function able to distinguish different object instances of the same class? Is there any corner case that will not uniquely identify the object instance I wanted to delete?A possible scenario is this one:Which object instance will be removed? I guess the one with 3 passed, but is there a rule that says, python uniquely identify object instances of the same class?
list.remove() removes the first object that tests equal. From the documentation:s.remove(x)   remove the first item from s where s[i] == x Instances of a custom class by default only test equal if they are the exact same object; if s[i] is x returns true then s[i] == x also returns true.It is not the variable name that defines the instance; in your second example, it'll be the MyClass(3) instance that is removed from the list, because it is a unique object, distinct from the MyClass(5) instance you created and added before. You can check this with the id() function, which on CPython basically returns the current memory address:Note that the default representation of your custom classes include the id() value in hexadecimal!You can alter this behaviour by overriding the object.__eq__() method; have it return True or False based on your own criteria, or return the NotImplemented singleton if the other object is not a type your class supports being compared with (so Python can delegate to the other object).For example, if your instances should be considered equal when their number attribute is equal, you'd implement it like this:With that change, you can do this:and that would remove the instance with number set to 42.


Answer URL
https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types
https://docs.python.org/3/library/functions.html#id
https://docs.python.org/3/reference/datamodel.html#object.__eq__
