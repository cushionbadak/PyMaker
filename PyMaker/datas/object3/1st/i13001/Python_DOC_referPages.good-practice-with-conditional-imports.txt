Natural Text
I have a module for configuration, projectConfig, to parse a sample sheet for a project:I had been using the first class in other modules like this:The thing is I had developed my software using the reference to ssFields quite a lot. At some point new specifications said that the software should also use sample sheets with different field names. The quickest way I found to achieve that, without messing too much with the code, was to add the class SampleSheetFieldsOld in the projectConfig and to make a conditional import in my modules:Note that the mandatory fields which are used have the same name so there is no  conflicting or missing field. The program works as expected.My questions are:How bad is this practice, if it is bad; and How can I circumvent it to make a better and more sustainable code?
It's probably not the worst thing, but what I do find kind of problematic is the fact that you're now locked into two configuration options, old and new. What if you need to add a third or fourth etc. set someday? You won't be able to use a simple boolean test anymore.Besides, it looks like your configuration options are all just simple string values, accessible via string keys. You don't need a class for that.My suggestion is to forget about doing your configuration with the source code and use a configuration file. In your projectConfig you can have a dict which you initialize from a file, whose path/name can be provided on the command line or in whatever way is convenient. So projectConfig.py might go something like this:Then everywhere you need to get a field name, just access projectConfig.config_options['field_key'], e.g.Or use dict.get(key, default) if there is a reasonable default value. This way, each time you need to switch to a different set of field names, you just create a new configuration file, and you don't have to touch the code.Python's standard library includes a configparser module which can handle the loading for you.
If you only need the class attributes, you could create a class factory, using type to create new classes, like:This can easily be extended to further sets of field specifications, and doesn't require a conditional import:You could also use a namedtuple, rather than a class, which would be a little more lightweight. Note edits for compliance with the style guide.


Answer URL
https://docs.python.org/3/library/configparser.html
https://docs.python.org/3/library/functions.html#type
https://docs.python.org/3/library/collections.html#collections.namedtuple
