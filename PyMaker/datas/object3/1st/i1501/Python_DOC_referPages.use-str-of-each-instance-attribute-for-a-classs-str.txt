Natural Text
Is there a way in Python 3 to recursively call private member variables unique __str__ functions programmatically? Something like:When calling the individual private members, it works fine. Would like a method to do it dynamically however.Thanks so much.
The vars function returns a dictionary where the keys are the variable names (as strings) and the values are the values of the variable. So iterating over the values should work.You can add some kind of separator (like a \n) between the values if you want. Just replace str(var) with str(var) + "\n".
You can also use the dictionary keys; vars() is self.__dict__:vars(self) is effectively self.  In turn, self.__dict__ is a dict used to store an objectâ€™s (writable) attributes.The signature is '\n'.join(iterable), and when you iterate over a dictionary, you iterate over its keys, which suffices in this case.Note on DataclassesI'm not totally sure if (Python 3.7+) dataclasses are an easier solution here.  That's because they automatically implement a __repr__() but not a __str__() as far as I can tell:In other words, you'd need to replace A.__str__ with A.__repr__ (same for B, which is maybe not something you want to do in the first place with regards to those two classes.)
Are you sure you shouldn't be using __repr__?Anyway, here's an example using attrs, beacuse I'm stuck on Python 3.5. With dataclasses it will work in a similar manner.


Answer URL
https://docs.python.org/3/library/functions.html#vars
https://docs.python.org/3/library/functions.html#vars
https://docs.python.org/3/library/stdtypes.html#object.__dict__
https://docs.python.org/3/library/dataclasses.html
