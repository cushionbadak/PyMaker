Natural Text
There's not a lot of detailed information online about making type annotations work with __round__. I have implemented this but I still get an error on line 16 (calling round without an ndigits argument) when I run mypy: error: Incompatible types in assignment (expression has type "int", variable has type "MyClass")The test passes, i.e. in both calls to round I get back an object of type MyClass. But the MyPy check fails only when I call round without an argument.Version numbers: Python 3.6.5, mypy 0.641.
I believe the problem here has less to do with your use of SupportsRound and more to do with the definition of the round function. The round function is defined in typeshed, the repository of type hints for the standard library, to have the following signature:Note that when only one argument is provided or ndigits is None, the output is always int. This is consistent with the documented behavior of the round function in the standard library: https://docs.python.org/3/library/functions.html#roundUnfortunately, I don't see a really clean way of working around this: I don't think the implementation of SupportsRound is really consistent with this behavior.Specifically, SupportsRound probably ought to have been defined to be something like so:Basically, force the user to handle these two cases.Actually changing the definition would probably be complicated though: there isn't really a clean way of updating any older versions of Python that come bundled with older versions of the typing module.I would recommend filing an issue about this on the typeshed issue tracker. I personally think you've discovered a genuine inconsistency/bug here, but there's possibly some nuance here that I'm missing, so I think it would be good to escalate this.


Answer URL
https://docs.python.org/3/library/functions.html#round
