Natural Text
I want to use regex to match with all substrings that are completely capitalized, included the spaces.Right now I am using regexp: \w*[A-Z]\s]HERE IS Test WHAT ARE WE SAYING Which returns:However, I would like it to match with all substrings that are allcaps, so that it returns:
You can use word boundaries \b and [^\s] to prevent starting and ending spaces. Put together it might look a little like:
You could use findall:OutputThe pattern [\sA-Z]+(?![a-z]) matches any space or capitalized letter, that is not followed by a non-capitalized letter. The notation (?![a-z]) is known as a negative lookahead (see Regular Expression Syntax).
One option is to use re.split with the pattern \s*(?:\w*[^A-Z\s]\w*\s*)+:The idea here is to split on any sequential cluster of words which contains one or more letter which is not uppercase.
You can use [A-Z ]+ to match capital letters and spaces, and use negative lookahead (?! ) and negative lookbehind (?<! ) to forbid the first and last character from being a space.Finally, surrounding the pattern with \b to match word boundaries will make it only match full words.
You can also use the following method:OUTPUT:
Using findall() without matching leading and trailing spaces:


Answer URL
https://docs.python.org/3/library/re.html#re.findall
https://docs.python.org/3/library/re.html#regular-expression-syntax
