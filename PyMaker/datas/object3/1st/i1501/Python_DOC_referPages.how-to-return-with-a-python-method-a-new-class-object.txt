Natural Text
I have some questions with respect to the not working code below:How to make a method search return a New Database object? Can __init__ take as an argument a schema and a list (which is a list of dictionaries - where I do my search)?How to avoid writing similar function in search method again and again, cause there are a lot of field names in the database.Thanks in advance for your help. 
It isn't really clear what you are trying to do, and it is hard to interpret without an example of the inputs and the desired result but this might be close.You might even want to simplify the comparisons in the search. you could define helper functions for the (two) different types of comparisons; choose which comparison to use based on the arguments; then use the chosen function in the search.For some reason that appeals to me because it separates the logic of the type  of comparison from the actual search.It doesn't account for search_results being empty - no movies found.
To return a DataBase object call DataBase(movies, schema), where movies and schema are the parameters of the __init__() method of the class.__init__() can take as many positional parameters as you want, but remember to assign their object to appropriate names inside the __init__() body, so that you can use them later (see the __init__() method on my class).To avoid repeating the search pattern all over the search() method, just use the field parameter as a key for matching each record on the database, and split the problem in two cases: one for the range search, the other for the plain search (see search() method below). Remember to address the no-match case: in my implementation I just return an empty DataBase object. You should also address the case of invalid search key: in my implementation I return None.The test() function below provides a database and three searches, both simple and within a range.You should consider collections.namedtuple as an alternative representation for database records.


Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
https://docs.python.org/3/tutorial/classes.html#classes
