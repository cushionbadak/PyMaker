Natural Text
argparse replaces dashes in optional arguments by underscores to determine their destination:However the user has to remember whether the option is --use-unicorns or --use_unicorns; using the wrong variant raises an error.This can cause some frustration as the variable args.use_unicorns in the code does not make it clear which variant was defined.How can I make argparse accept both --use-unicorns and --use_unicorns as valid ways to define this optional argument?
argparse translates the '-' to '_' because the use of '-' in flags is well established POSIX practice.  But args.use-unicones is not acceptable Python.  In other words, it does the translation so the dest will be a valid Python variable or attribute name.Note that argparse does not perform this translation with positionals.  In that case the programmer has full control over the dest parameter, and can choose anything that's convenient.  Since the argparse only uses getattr and setattr when accessing the Namespace, the constraints on a valid dest are minimal.There are two users.  There's you, the programmer, and there's your end user.  What's convenient for you might not be optimal for the other.You can also specify a dest with defining an optional.  And metavar gives you further control over the help display.It's parser._get_optional_kwargs that performs the '-' replace:
parser.add_argument accepts more than one flag for an argument (link to documentation). One easy way to make the parser accept both variants is to declare the argument asHowever both options will show up in the help, and it is not very elegant as it forces one to write the variants manually.An alternative is to subclass argparse.ArgumentParser to make the matching invariant to replacing dashes by underscore. This requires a little bit of fiddling, as both argparse_ActionsContainer._parse_optional and argparse_ActionsContainer._get_option_tuples have to be modified to handle this matching and abbrevations, e.g. --use_unic.I ended up with the following subclassed method, where the matching to abbrevations is delegated from _parse_optional to _get_option_tuples:A lot of this code is directly derived from the corresponding methods in argparse (from the CPython implementation here). Using this subclass should make the matching of optional arguments invariant to using dashes - or underscores _.


Answer URL
https://docs.python.org/3/library/argparse.html#name-or-flags
