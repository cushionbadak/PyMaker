Natural Text
I'm trying to extract numbers that are mixed in sentences. I am doing this by splitting the sentence into elements of a list, and then I will iterate through each character of each element to find the numbers. For example:This can give me the result I want, which is ['2', '1', '4', '3']. Now I want to write this in list comprehension. After reading the List comprehension on a nested list? post I understood that the right code shall be:My original code for the list comprehension approach was wrong, but I'm trying to wrap my heads around the result I get from it.My original incorrect code, which reversed the order:The result I get from that is:Could anyone explain the process that leads to this result please?
Just reverse the same process you found in the other post. Nest the loops in the same order:The code requires both e and LP to be set beforehand, so the outcome you see depends entirely on other code run before your list comprehension.If we presume that e was set to '3a' (the last element in LP from your code that ran full loopss), then for i in e will run twice, first with i set to '3'. We then get a nested loop, for e in LP, and given your output, LP is 4 elements long. So that iterates 4 times, and each iteration, i == '3' so the if test passes and '3' is added to the output. The next iteration of for i in e: sets i = 'a', the inner loop runs 4 times again, but not the if test fails.However, we can't know for certain, because we don't know what code was run last in your environment that set e and LP to begin with.I'm not sure why your original code uses str.split(), then iterates over all the characters of each word. Whitespace would never pass your if filter anyway, so you could just loop directly over the full String value. The if test can be replaced with a str.isdigit() test:or a even a regular expression:and finally, if this is a reordering puzzle, you'd want to split out your strings into a number (for ordering) and the remainder (for joining); sort the words on the extracted number, and extract the remainder after sorting:
From the question you asked in a comment ("how would you proceed to reorder the words using the list that we got as index?"):We can use custom sorting to accomplish this. (Note that regex is not required, but makes it slightly simpler. Use any method to extract the number out of the string.)To remove the numbers:Final output is:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.isdigit
https://docs.python.org/3/howto/regex.html
