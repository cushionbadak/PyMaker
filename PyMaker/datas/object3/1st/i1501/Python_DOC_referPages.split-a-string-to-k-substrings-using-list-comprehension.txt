Natural Text
I have a long string with me like thiss = 'abcdabcdabcdabcdabcdefghi'I want to split it to K substrings, where each substring must be at least of length  1 ie non-empty. I want all such possible combinations.The output I am expecting must be like following if K is 3I wanted to do this with list comprehension but I am stuck. Is it possible to implement.? Are there any other faster alternatives.?
Using itertools.combinations, you can get separation index pairs:using that index pair to get string slices(1, 2) -> (s[:1], s[1:2], s[2:])(1, 3) -> (s[:1], s[1:3], s[3:])...(4, 5) -> (s[:4], s[4:5], s[5:])s[:1] == s[0:1] == s[None:1]s[2:] == s[2:len(s)] == s[2:None]
You could find all slices of your list so that none of sliced parts will be empty without any extended libraries like so:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
