Natural Text
I want to find the shortest unique combination of characters for each element in a list of strings. Each combination should consist of the string's first character and its two rarest characters at least (more if necessary) and order matters. If a character appears more than once in one string, it should get more weight.Consider the following example:for apple, both p and e appear 4 times overall, but since p appears twice in apple, it should be used in the combination.What is the most efficient way to write this logic in python?
You could do something like this:OutputThe idea is to create a tuple of the priority criterias representing each unique letter. So elements is a list containing tuples represeting:counts[c]: The overall count (as you want the rarest multiply by -1)word_count[c]: The specific count of the letter in the wordi: represents the firs position of the letterc: the letter itself.Once you create the list elements with:Note that as the characters must be unique we use a set (seen) to guarantee uniqueness. Finally you use heapq.nlargest to get the top n elements according to the above criterias.


Answer URL
https://docs.python.org/3/library/heapq.html#heapq.nlargest
