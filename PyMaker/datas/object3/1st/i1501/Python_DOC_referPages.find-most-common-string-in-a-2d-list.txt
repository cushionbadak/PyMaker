Natural Text
I have a 2D list:I want to find the most frequent element in the 2D list. In the above example, the most common string is 'Mohit'.I know I can use brute force using two for loops and a dictionary to do this, but is there a more efficient way using numpy or any other library? The nested lists could be of different lengthsCan someone also add the time of their methods? To find the fasted method. Also the caveats at which it might not be very efficient.EditThese are the timings of different methods on my system:Mayank Porwal's method runs the fastest on my system.
Flatten the list with itertools.chain.from_iterableApply a Counter.Demo:Details:Some timings:(Note that Kevin Fang's second solution is a bit slower than the first one, but more memory efficient.)
I'd suggest flatten out the 2D Array and then use a counter to find out the most frequent element.Not sure if it is the fastest approach though.Edit:@timgeb's answer has a faster way to flatten the list using itertools.chainA more space efficient way suggested by @schwobaseggl:
One way to do it this way,Time taken: 0.00016713142395 secondsDEMO:  http://tpcg.io/NH3zjm 
Something like this:Timings:
Or why not:Code example:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
https://docs.python.org/3/library/collections.html?highlight=collections#collections.Counter
