Natural Text
When I run this code in python 2.7, I get this error:code is:
This error comes when you append this line os.path.join(os.path.dirname(__file__)) in python interactive shell. Python Shell doesn't detect current file path in __file__ and it's related to your filepath in which you added this lineSo you should write this line os.path.join(os.path.dirname(__file__)) in file.py. and then run python file.py, It works because it takes your filepath.
I had the same problem with PyInstaller and Py2exe so I came across the resolution on the FAQ from cx-freeze.When using your script from the console or as an application, the functions hereunder will deliver you the "execution path", not the "actual file path":Source:http://cx-freeze.readthedocs.org/en/latest/faq.htmlYour old line (initial question):Substitute your line of code with the following snippet.With the above code you could add your application to the path of your os, you could execute it anywhere without the problem that your app is unable to find it's data/configuration files.Tested with python:3.3.42.7.13
I solved it by treating file as a string, i.e. put "__file__" (together with the quotes!) instead of __file__This works fine for me:
Are you using the interactive interpreter? You can useYou should read: How do I get the path of the current executed file in Python?
If all you are looking for is to get your current working directory os.getcwd() will give you the same thing as os.path.dirname(__file__) as long as you have not changed the working directory elsewhere in your code.  os.getcwd() also works in interactive mode.So    os.path.join(os.path.dirname(__file__))becomes    os.path.join(os.getcwd())
I've run into cases where file doesn't work as expected. But the following hasn't failed me so far:
You will get this if you are running the commands from the python shell:You need to execute the file directly, by passing it in as an argument to the python command:In your case, it should really be python setup.py install
What you can do is to use the followingNote here that using the string '__file__' does indeed refer to the actual variable __file__. You can test this out yourself of course..The added bonus of this solution is the flexibilty when you are running a script partly interactively (e.g. to test/develop it), and can run it via the commandline 
I'm having exacty the same problem and using probably the same tutorial. The function definition:is buggy, since os.path.dirname(__file__) will not return what you need. Try replacing os.path.dirname(__file__) with os.path.dirname(os.path.abspath(__file__)):I've just posted Andrew that the code snippet in current docs don't work, hopefully, it'll be corrected.
change your codes as follows! it works for me.`os.path.dirname(os.path.abspath("__file__"))
If you're exec'ing a file via command line, you can use this hackThis worked for me in the UnrealEnginePython console, calling py.exec myfile.py


Answer URL
https://docs.python.org/3/library/os.path.html#os.path.abspath
