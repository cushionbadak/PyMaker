Natural Text
I currently have a recursive function that takes a class as its parameter and returns a list of all base classes.  This works fine, but it has many duplicate classes in the list.  I want to return a set instead of a list and was wondering how I could go about changing the code to do so.
Python has a builtin set type that eliminates duplicates:This code already avoids adding many duplicates in the first place. However, the set still eliminates duplicates in case of multiple inheritance.Python being Python, there is already something that does this:If you just care about the bases, use __mro__. Its order also expresses how lookup is performed with multiple bases.A slightly different approach for such searches is to use a set to track duplicates, but a list to store elements:This uses a _dupes: set to check whether you already visited a class. Instead of eliminating classes you added twice, it only adds them once in the first place. A set is faster for this check than a list, given many elements. However, you need the list to preserve order.
Your function is redundant in that it can be replaced with cls.__mro__:Your biggest issue is that your implementation adds classes to the list twice, once in the recursive call, then again in the current call. Only add the current class to the list. Checking for the __bases__ list as empty is redundant too, as the for loop already not do anything if the sequence is empty.So this is enough:But this will still repeat base classes that have been included in the hierarchy more than once:Note that Base and object appear twice, due to multiple inheritance. You could use a set to avoid this:at which point we lose ordering, but that may be sufficient for your needs:However, then you could just use set(cls.__mro__) and be done with it:


Answer URL
https://docs.python.org/3/library/stdtypes.html#class.__mro__
