Natural Text
I understand the concepts of recursion to a certain level but I am unable to understand all the steps that happen in a recursive call.For example:While I understand that it repeats the task until it reaches the base where n == 0, but how does Python store the previous 5 * 4 * 3 ... and calculates when based is reached, I am finding it a bit difficult to visualize the whole process. Another example would be when say I pass an iterable.The list seems to be reduced from each recursion to piece[n-1:] and again ultimately all the values returned are summed. Is there anywhere I can refer to on how Python explicitly manages recursion? 
but then does Python automatically sum the amounts and does this for all cases?Python doesn't have to do anything special here. Recursive function calls are just function calls. There is nothing magical about a function call.All that happens is that the return value of a function call is used in a multiplication:Python executed the fact(n-1) function call, the function returns, and Python completes the expression by multiplying n with the returned value.Compare this to any other function you could call. Would n * math.sin(n-1) be easier to follow? You don't have to know what is inside of math.sin(), just that it returns a value, that then is used in a multiplication.That that fact() function call was the exact same function here doesn't actually matter. Python doesn't care. Python specifically can't care because Python is so dynamic. From one moment to the next the name fact could be bound to something different, so Python just looks up fact in the table of names, and calls it with the result of n-1. No special consideration is made here for fact pointing to the same function as the one currently executing.It may help with understanding to just create separate functions for each step:Then call fact5(5) and getNote that I didn't bother with defining a fact_minus1() function, we know it'll not be called when you start with fact5(5).You could also add more information to your visualisation. You don't log the return values from functions, and you could add indentation to visualise how deep into the call structure you are:which produces:The indentation here shows that the functions are each separate namespaces on a stack. When one function calls another, the current function is 'paused', put on hold, the data it contains put on top of a stack until it can be resumed. Multiple function calls so all pile up until something finally starts to return results to their caller, at which point the previous function can resume where they left off, etc.
There's no magic. Let's step through.I assume you understand what happens for fact(0), so I won't go through it. Let's look at fact(2).Now we step into fact(1):Of course, fact(0) returns 1, so fact(1) returns (1 * 1) = 1. Now that we have the return value, we step back out to the last call of fact(2):As we said, fact(n-1) is 1, so we are returning 2 * 1 = 2.If you learn to use your debugger, you will be able to step through this and see explicitly what happens yourself. If you are using an IDE such as PyCharm, it will probably have a debugger built in that makes everything easy to visualize.
Hopefully this illustrates it better:You have this output:We start with fact(5) = 5 * fact(4)fact(4) is actually 4 * fact(3) (and so on until n==0)If we were to actually write the entire recursion line out of fact(5) it would be:5 * fact(4) * fact(3) * fact(2) * fact(1) * fact(0) #which is 1, base caseWhich is actually...5 * (4*fact(3)) * (3*fact(2)) * (2*fact(1)) * (1*fact(0)) # 1*fact(0) == 1*1Which simplified is...5 * 4 * 3 * 2 * 1 = 120
Recursive function is basic programming concept and is available in almost all the programming and scripting language. Recursive function is a loop which creates series of functions with yield on return. It's a like a Stack data structure Last In First OutSo, In Example 1, the stack is So, at last 4 * fact(3) will return 24 which will be the return value of fact(4) and,Hence 5 * return fact(4) = 120.Hope this helps!


Answer URL
https://docs.python.org/3/library/pdb.html
