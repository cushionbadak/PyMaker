Natural Text
What I would like is to define some way of calling any attribute on Qux and have it return getattr(Qux.item, <attributename>). In other words, to have b.superpower work without explicitly defining:I don't want to lose access to any properties defined on Qux itself as well, but rather to expose properties defined on Foo if they are not also on Qux.
Define a __getattr__:__getattr__ gets called whenever someone tries to look up an attribute of the object, but fails through normal means.It has an evil twin called __getattribute__, which always gets called and must be used with extreme caution.
You do that by defining __getattr__, not with a property. For any attribute that cannot be found with the standard protocol, Python will call the __getattr__ method of a class.Moreover, to store the item, you have to assign it to self.item, otherwise it is thrown at the end of Qux.__init__.Finally, inheriting from Foo seems unecessary in that case.ExampleInheritanceAlthough, it seems you half-tried to implement this with inheritance. If your intent was to extend Qux behaviour with Foo, then inheritance would be the way to go.Example


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getattr__
https://docs.python.org/3/reference/datamodel.html#object.__getattr__
