Natural Text
In this question, he actually asked something like what I want. Except that the answer was to remove the parentheses. However if I remove the parentheses, then I'll not be able to pass arguments for my functions.How can I do the following simple code without waiting:Desired output would be All printed at the same time
From the documentation, target should be a callable:target is the callable object to be invoked by the run() methodYou are not passing your function to target, you are passing the return value of your function, so the function runs as soon as you pass it to threading.Thread, not when you call t.start().You should be using the args parameter to specify arguments to your callable.Simply change this line:to
you seem to not realize what this line does: t = threading.Thread(target=whatever(i)) , removing the parenthesis is not simply to not wait for the thread to finish its so you can actually start the function in a seperate thread: target should be the function object itself, but when you do t = threading.Thread(target=whatever(1)) , the target will be the return value of whatever that you already ran in your original thread, you need to give threading the function itself then specify the parameters seperately and it will call it for you like this:
You have to consider one thing though.In Python we have something called GIL - Global Interpreter Lock. It's something that, in short, makes it possible for only one thread of your python application, to execute in a given interpreter at once. What does it mean?That it's not quite that easy do achieve true concurrency in Python - while it may seem like the instructions are being executed simultaneously because of the super quick CPUs we have today, they are, in fact, not.
Just wrap it into a lambda.


Answer URL
https://docs.python.org/3/library/threading.html#threading.Thread
