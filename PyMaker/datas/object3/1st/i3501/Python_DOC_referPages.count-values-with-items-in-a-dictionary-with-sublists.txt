Natural Text
I'n being warned that this question has been frequently downvoted, but I haven't seen a solution for my particular problem. I have a dictionary that looks like this:I would like for the output to be a dictionary with the original keys and then a dictionary containing a value that indicates the count for each of the words (e.g., {'a':{'I':2, 'said':2, 'that':1} and so on with b.  If the values were in a list instead of a sublist, I could get what I wanted just by using Counter: However, I'm getting TypeError: unhashable type: 'list' because the lists containing the values I want to count are sublists and the list that contains them isn't hashable.  I also know that if I just had sublists, I could get what I want with something like: But I just can't figure out how to combine these ideas to solve my problem (and I guess it lies in combining these two). I did try thisBut that only gives me the counts for the second list (because the flat_list itself only returns the value for the second key. 
To combine the two solutions, just replace Counter(v) from your first solution with the second solution.Output:
You can merge your sublists to get your d2: d2 = {k: reduce(list.__add__, d[k], []) for k in d}.In python3, you will need to from functools import reduce
Use both itertools and collections modules for this. Flatten the nested lists with itertools.chain and count with collections.CounterOutput:


Answer URL
