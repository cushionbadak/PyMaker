Natural Text
Really struggling with something that should be pretty basic. I'm looking to identify instances where \n does not have a reciprocal \r (i.e. \r\n is good x\n is bad and would ). I appreciate this is because python 2 managed 'rb' differently but can't work out the equivalent function or way of identifying \r in python 3.
Python 3 makes a clear distinction between raw byte strings, and utf-8 string. content[line-1] is returning a number, probably 0-255 - the byte, and you are trying to match it to a string, '\r'. I agree possibly the conversion could be made, but Python is strongly typed, so this will always fail, regardless of what character the integer represents. To get the byte number corresponding to \r use:and similarly use a bytes string for your iterator generation:
If you want to find the location of line feed / newline (\n) characters not preceded by a carriage return (\r) you can use a negative lookbehind assertion regular expression.There are a couple of things to note.content is a bytes instance; when you read from a file in 'rb' mode you'll get bytes.pattern needs to be a bytes instance, because the sequence being searched is a bytes instance.The pattern (?<!\r)\n matches if the character following the parentheses (\n) is not preceded by the \r.  See the re documentation for a full description. 


Answer URL
https://docs.python.org/3/library/re.html#regular-expression-syntax
