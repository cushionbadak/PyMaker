Natural Text
I am trying to pack a char to bytes with python using the struct package but my code won't return 4 bytes when packing the char using this code:Can anyone explain to me why this won't work? I am just trying to convert the unicode char to 4 bytes and unpack it but it won't even pack correct.
The c format is char in the C sense of a single byte, not the Python sense of a Unicode code point.Meanwhile, the whole point of UTF-8 is that it's variable width. A character may encode to anything from 1 to 4 bytes. So you can't pack that into a c. You could pad it out to 4 bytes and then pack it into a 4c or an I or something, but that's a pretty silly thing to do.If you want to use exactly 4 bytes for each character, much simpler to just use UTF-32. Or, since the UTF-32 encoding of a single character is just the Unicode code point as a 4-byte int, and that's exactly the same thing that ord returns, you can just skip the encode step. For a single-char bytes, it does make sense to pack as a câ€”but then it makes no sense to unpack that as an i.In fact, it's not clear what you're even using struct for here. If all you're trying to do is pack a number and unpack the same number, just use the number as-is.Meanwhile, 02x doesn't make much sense as a format for a 4-byte integer, because a 4-byte integer takes 8 hex digits, not 2.So, what you probably wanted was something like this:


Answer URL
https://docs.python.org/3/library/struct.html#format-characters
https://docs.python.org/3/library/struct.html#format-characters
