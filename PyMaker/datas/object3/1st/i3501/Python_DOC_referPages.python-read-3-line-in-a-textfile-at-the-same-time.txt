Natural Text
i have a file.txt that look like this. and printsSo it´s a simpel code i have, it opens the file, uses readlines() and looks for the keywords testings ,response and time then appends the string to 3 seperat lists. As shown in the file.txt some testings x are either *blank* or has an error instead off a response. My problem is that i need the lists to always have the same lenght. Like this:So i was thinking if it´s posbile to "read for 3 lines at the same time" and have a if-statment where all the 3 lines need to have the right keywords ("be True") or else insert *error* in the response and time list to keep the lenght right. Or is there even a better way to keep 3 list at the same lenght? 
This snippet does what you are seeking. You can use next(txt_file, '') to retrieve the next line without having to load the file into memory first. Then, you look only for lines that contain "testing", and when you do, you compare the next two lines. it will always add one string to each list, any time it finds "testing", however, if it doesn't find "response" or "time" then it will insert errors where appropriate. Here is the code, using the input you gave above.And the Output:
Text file are iterables, meaning you can loop over them directly, or you can use the next() function to get another line from them. The file object will always produce the next line in the file whatever method you are using, even when mixing techniques.You can use this to pull in more lines in a for loop:So when a line starting with testings is found, the code pulls in the next line. If that line starts with response, another line is pulled in. If that line starts with time, then all three lines are appended to your data structures. If neither of those two conditions are met, the the outer for loop is continued and reading the file continues until another testings line is found.The added bonus is that the file is never read into memory in one go. File buffering keeps this efficient, but otherwise you never need more memory than is needed for the final set of lists (valid data), and the three lines currently being tested.Side note: I'd strongly recommend you do not use three separate lists of equal length. You could just use a single list with tuples:and then use that single list to keep each triplet of information together. You can even use a named tuple:at which point each entry in the test_data list is an object with test, response and time attributes:
From the answer hereThis assumes there will always be the lines in the same order, and that the file is always organised in batches of three lines, even if that is just a blank line. Since it actually looks like your input file has a blank line between each group of 3 you may need to change grouper to read batches of 4. 
A quick working solution that is just reading the file as one string, and then operating on the string to get the desired output.It is fairly simple, and it takes into account every scenario you proposed.Output:


Answer URL
https://docs.python.org/3/glossary.html#term-iterator
https://docs.python.org/3/library/functions.html#next
https://docs.python.org/3/library/collections.html#collections.namedtuple
