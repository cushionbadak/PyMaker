Natural Text
I have a package for python 3.5 and 3.6 that has optional dependencies for which I want tests (pytest) that run on either version. I made a reduced example below consisting of two files, a simple __init__.py where the optional package "requests" (just an example) is imported and a flag is set to indicate the availability of requests.The __init__.py file content:The test_init.py file content:The test_requests_missing test works on Python 3.6.5:But not on Python 3.5.4:I have two questions:Why do I see this difference? Relevant packages seem to be of the same version on both 3.5 and 3.6.Is there a better way to do what I want? The code I have now is stitched together from examples found online. I have tried to patch the import mechanism in an attempt to avoid "reload", but I have not managed.
I would mock the __import__ function (the one invoked behind the import modname statement). Example:The fixture no_requests is responsible for replacing the __import__ function with one that will raise on import requests attempt, doing fine on the rest of imports (we can't raise on any import or pytest itself will break). cleanup_imports is just to ensure that mypackage will be reimported in each test.
If a test tests optional functionality, it should be skipped rather than passed if that functionality is missing.test.support.import_module() is the function used in the Python autotest suite to skip a test or a test file if a module is missing:Then, when running:


Answer URL
https://docs.python.org/3/library/functions.html#__import__
