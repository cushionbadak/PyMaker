Natural Text
I have a large dataset that is stored in a file on Linux.  I would like to write a python script that will take this file and write it to 3 files based on the first occurrence of 3 specific strings.My dataset looks like this:I want the first file to have all of the entries that start with "Handle" and stop before the entries that start with OrgID".  The second file with entries that start with "OrgID" and the third file that starts with "NetHandle".  The tricky part is that OrigID is in all three.  I have tried a few ways from examples on stack and other sites but I have not been able to accomplish this yet.  Any help would be greatly appreciated.
Assuming what you've posted is the literal file format, the simplest thing to do is read chunks of 4 lines at a time and switch on the first line.1We can use the grouper recipe from the itertools docs, which can chunk anything into groups of any fixed size. But I'll show you how to do it without the recipe, because it's worth understanding how it works:Now, how do we switch on the groups? The simplest thing to do here is make a dictionary mapping labels to output files:… then just extract the label from each chunk and look up the output file:You might want some error handling here. But if you're pretty sure the file doesn't have any chunks that don't match exactly one of these three formats, this is probably good enough.2Putting it together:Or, if you use the grouper recipe (which you should):If the file doesn't actually end in a newline, the last chunk is going to fail. But you can fix that easily by specifying '' as a fillvalue:1. You could make things a tiny bit more efficient—although not quite as simple—if you can assume that all the Handle chunks come first, then all the OrgID chunks, then all the NetHandle chunks. But when I asked whether that was true, you just answered "They are all in chunks", which does nothing to resolve the ambiguity. So, I'll write it to handle the possibility that they're intermixed.2. If you're wrong, and one of the chunks starts with 'Spam:', you'll get a KeyError: 'Spam'. Or, if one of the chunks isn't 4 lines long, so you end up getting out of sync and reading the Street: as the first line, you'll get KeyError: 'Street'. So, any unexpected input should be pretty easy to debug.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
