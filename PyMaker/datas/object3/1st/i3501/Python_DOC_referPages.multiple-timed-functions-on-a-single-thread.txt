Natural Text
I am reading the docs on python threading and the timer subclass and I do not quite understand how it would work if I want to run two (or more) timed class methods at different rates on the same thread. For example, I have an I/O serial device that I want to periodically read (if any data), write any input messages from outside modules, and periodically write a predefined device specific heartbeat message. This is all wrapped in a custom class. I/O messages are stored in two separate class queue objects.Do I need to create three threading.Timer objects for each function, or can I somehow use one thread that switches?
Timer is dead-simple; there's nothing more to it than you see. It runs a single timer, one time, taking up a whole thread to do it.In fact, it's really there more as sample code than anything else. The second sentence in its documentation is "Timer is a subclass of Thread and as such also functions as an example of creating custom threads." And the threading docs link to the source, and you can see how simple it is.It's not that hard to build something more complicated out of that sample code. There used to be some good examples in the ActiveState recipe collection. I don't know how to search their new repo, but you can start off with a tag lookup.Alternatively, there are a bunch of more powerful schedulers ready to use on PyPI.Or you can rewrite your code around a tick method. If you tick every 20ms, read and write run on every tick, and heartbeat runs every 50 ticks, right?However, at this point, it's almost as simple to just write a function that loops every 20ms instead of using a timer. And that's much easier to extend if, e.g., you need to worry about not accumulating lag. For example:Now you can just run self.ticker in a thread.Or you can just use multiple Timer objects. You're talking about a handful of objects and three timers per object, right? It may not seem the most elegant solution, but it's not like it's going to overburden the scheduler.


Answer URL
https://docs.python.org/3/library/threading.html#timer-objects
