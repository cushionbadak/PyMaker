Natural Text
I use the following method to read binary data from any given offset in the binary file. The binary file I have is huge 10GB, so I usually read portion of it when needed by specifying from which offset I should start_read and how many bytes to read num_to_read. I use Python 3.6.4 :: Anaconda, Inc., platform Darwin-17.6.0-x86_64-i386-64bit and os module:This method works very well when the chunk of data to be read is about less than 2GB. When num_to_read > 2GG, I get this error:I am not sure why this issue appears and how to fix it. Any help is highly appreciated.
The os.read function is just a thin wrapper around the platform's read function. On some platforms, this is an unsigned or signed 32-bit int,1 which means the largest you can read in a single go on these platforms is, respectively, 4GB or 2GB.So, if you want to read more than that, and you want to be cross-platform, you have to write code to handle this, and to buffer up multiple reads.This may be a bit of a pain, but you are intentionally using the lowest-level directly-mapping-to-the-OS-APIs function here. If you don't like that:Use io module objects (Python 3.x) or file objects (2.7) that you get back from open instead. Just let NumPy read the filesâ€”which will have the added advantage that NumPy is smart enough to not try to read the whole thing into memory at once in the first place.Or, for files this large, you may want to go lower level and use mmap (assuming you're on a 64-bit platform).The right thing to do here is almost certainly a combination of the first two. In Python 3, it would look like this:1. For Windows, the POSIX-emulation library's _read function uses int for the count argument, which is signed 32-bit. For every other modern platform, see POSIX read, and then look up the definitions of size_t, ssize_t, and off_t, on your platform. Notice that many POSIX platforms have separate 64-bit types, and corresponding functions, instead of changing the meaning of the existing types to 64-bit. Python will use the standard types, not the special 64-bit types.


Answer URL
https://docs.python.org/3/library/os.html
