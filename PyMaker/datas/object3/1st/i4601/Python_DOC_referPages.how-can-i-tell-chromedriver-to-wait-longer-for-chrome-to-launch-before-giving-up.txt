Natural Text
BackgroundI'm using Selenium and Python to automate display and navigation of a website in Chromium on Ubuntu MATE 16.04 on a Raspberry Pi 3.  (Think unattended digital signage.)  This combination was working great until today when the newest version of Chromium (with matching ChromeDriver) installed via automatic updates.Because Chromium needed to perform some upgrade housekeeping tasks the next time it started up, it took a little longer than usual.  Keep in mind that this is on a Raspberry Pi, so I/O is severely bottlenecked by the SD card.  Unfortunately, it took long enough that my Python script failed because the ChromeDriver gave up on Chromium ever starting:Of course, when the script dies after throwing this exception, the Chromium instance is killed before it can finish its housekeeping, which means that next time it has to start over, so it takes just as long as the last time and fails just as hard.If I then manually intervene and run Chromium as a normal user, I just... wait... a minute... or two, for Chromium to finish its upgrade housekeeping, then it opens its browser window, and then I cleanly quit the application.  Now that the housekeeping is done, Chromium starts up the next time at a more normal speed, so all of the sudden my Python script runs without any error because the ChromeDriver sees Chromium finish launching within its accepted timeout window.Everything will likely be fine until the next automatic update comes down, and then this same problem will happen all over again.  I don't want to have to manually intervene after every update, nor do I want to disable automatic updates.The root of the questionHow can I tell ChromeDriver not to give up so quickly on launching Chromium?I looked for some sort of timeout value that I could set, but I couldn't find any in the ChromeDriver or Selenium for Python documentation.Interestingly, there is a timeout argument that can be passed to the Firefox WebDriver, as shown in the Selenium for Python API documentation:timeout â€“ Time to wait for Firefox to launch when using the extension connection.This parameter is also listed for the Internet Explorer WebDriver, but it's notably absent in the Chrome WebDriver API documentation.I also wouldn't mind passing something directly to ChromeDriver via service_args, but I couldn't find any relevant options in the ChromeDriver docs.Update: found root cause of post-upgrade slownessAfter struggling with finding a way to reproduce this problem in order to test solutions, I was able to pinpoint the reason Chromium takes forever to launch after an upgrade.It seems that, as part of its post-upgrade housekeeping, Chromium rebuilds the user's font cache.  This is a CPU & I/O intensive process that is especially hard on a Raspberry Pi and its SD card, hence the extreme 2.5 minute launch time whenever the font cache has to be rebuilt.The problem can be reproduced by purposely deleting the font cache, which forces a rebuild:
You are right, there is no option to explicitly set the timeout of the initial driver creation. I would recommend visiting their git page HERE and creating a new issue. It also has the links for the direct ChromeDriver site in case you want to create a bug there. Currently, there is no option to set timeout that I could find.You could try something like this in the meantime though:Here is the documentation on webbrowser:https://docs.python.org/3/library/webbrowser.html
As per your question without your code trial it would be tough to analyze the reason behind the error which you are seeing as :Perhaps a more details about the version info of the binaries you are using would have helped us in someway. Factually, asking ChromeDriver to wait longer for Chrome to launch before giving up won't help us as the default configuration of ChromeDriver takes care of the optimum needs.However WebDriverException: Message: chrome not reachable is pretty common issue when the binary versions are incompatible. You can find a detailed discussion about this issue at org.openqa.selenium.WebDriverException: chrome not reachable - when attempting to start a new session
The bad newsIt turns out that not only is there no timeout option for Selenium to pass to ChromeDriver, but short of recompiling your own custom ChromeDriver, there is currently no way to change this value programmatically whatsoever.  Sadly, looking at the source code shows that Google has hard-coded a timeout value of 60 seconds!from chromium /src/chrome/test/chromedriver/chrome_launcher.cc@208:Until this code is changed to allow custom deadlines, the only option is a workaround.The workaroundI ended up taking an approach that "primed" Chromium before having Selenium call ChromeDriver.  This gets that one-time, post-upgrade slow start out of the way before ChromeDriver ever begins its countdown.  The answer @PixelEinstein gave helped lead me down the right path, but this solution differs in two ways:The call to open standalone Chromium here is blocking, while webbrowser.open_new() is not.Standalone Chromium is always launched before ChromeDriver whether it is needed or not.  I did this because waiting one minute for ChromeDriver to timeout, then waiting another 2.5 minutes for Chromium to start, then trying ChromeDriver again created a total delay of just over 3.5 minutes.  Launching Chromium as the first action brings the total wait time down to about 2.5 minutes, as you skip the initial ChromeDriver timeout.  On occasions when the long startup time doesn't occur, then this "double loading" of Chromium is negligible, as the whole process finishes in a matter of seconds.Here's the code snippet:Before instantiating a webdriver.Chrome() object, this waits for Chromium to finish its post-upgrade housekeeping no matter how long it takes.  Chromium is launched in headless mode where --dump-dom is a one-shot operation that writes the requested web page (in this case about:blank) to stdout, which is ignored.  Chromium self-terminates after completing the operation, which then returns from the subprocess.run() call, unblocking program flow.  After that, it's safe to let ChromeDriver start its countdown, as Chromium will launch in a matter of seconds.


Answer URL
https://docs.python.org/3/library/webbrowser.html
