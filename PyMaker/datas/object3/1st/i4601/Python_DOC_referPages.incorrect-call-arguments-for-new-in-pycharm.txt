Natural Text
Pycharm suggests me to remove the generator which is in the return. Why?It said: This inspection reports discrepancies between declared parameters and actual arguments, as well as incorrect arguments (e.g. duplicate named arguments) and incorrect argument order. Decorators are analyzed, too.But its output was what I expected.Example:I'm new to Python, so I think this may lack of standardization.How should I improve it?
This is not specific to tuple, calling most builtin type's special method leads PyCharm to get confused with type signatures.PyCharm resolves tuple.__new__ as being inherited from builtins.object.__new__. This is not the real method used to create a tuple, but it fails to find the correct one (which is not in a .py file since it is written in C).This is most likely a bug and, unfortunately, this is not something you can fix through settings, except by disabling Incorrect call arguments inspection which I do not recommend.The bottom line is that PyCharm inspection sometimes gives false positives due to having to inspect a dynamically typed language. This is not a surprise and you will sometimes have to ignore inspection errors it raises.A word on your codeOn another note, I want to point out that you might want to cover the case where you create an empty IntTuple in the same way it can be done with tuple.For this you could have a default iterable.
It is saying this because tuple's __new__ method accepts parameters __new__(*args, **kwargs).You probably found documentation that you could construct a tuple instance using tuple(iterable) to pre-fill the tuple with initial values. This iterable is an argument to the __init__ method of the tuple class, not the __new__ method.I think what you meant to use was __init__ instead of __new__. In Python, the __new__ method is used mostly for metaprogramming. The __init__ method can be seen as the constructor like you would use it in other languages. The __new__ method is used to create an instance of the class, so you'd need to construct an object and return that. You could use __new__ to implement the singleton pattern for instance, by always returning the same static object. The __init__ method just initialises the instance after it's been created, like a normal constructor does.So you'd be using something like:
I'm not expert, but as pointed in the documentation:ClassesClasses are callable. These objects normally act as factories for new instances of themselves, but variations are possible for class types that override new(). The arguments of the call are passed to new() and, in the typical case, to init() to initialize the new instance.Classes: Types that overrides __new__()In the instatiation of your IntTuple you are passing a list, but since you are inheriting from tuple it might be conflicting there, because a tuple expects a sequence in the type (x,) instead of [x] at its instatiation.Correction:I meant conflicting with PyCharm only. Sometimes PyCharm makes very unecessary inpections that really bother us. You have the choice of disabling them. And for the sake of clearification, tuple can be generated from any iterable, so your code is really fine. Also, just a note, you could simply use pass self to your method, it works fine as well. PyCharm might get confused about all this.And what if you want to expand the scope of your code a little bit? Your code works fine and it's short, but here's an alternative, if you want more flexibility in the future (not really necessary though and you might find better approches):output(1, 2, 3, 8, 16, 32, 128)


Answer URL
https://docs.python.org/3/reference/datamodel.html
