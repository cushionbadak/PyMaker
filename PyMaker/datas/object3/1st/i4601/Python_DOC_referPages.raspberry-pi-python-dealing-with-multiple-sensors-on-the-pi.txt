Natural Text
I have a personal project using Raspberry Pi and two condenser mics. I am using the following listeners on each mic:When a sound is detected (I'm using digital trigger on the mics), the event sends in the pin number to the callback. I use the pin number to run a function. While that function is running, for approximately 10 seconds, I want both events to stop triggering completely until the function hands back control. Currently, the listeners keep sending in events and those events seem to be stacking above the function and then all run serially once the function has finished.I have tried using global variables with timestamps and various other methods to stop the event listeners to no avail. If I try to turn off the listeners and turn them back on I get Segmentation fault errors. Any help on this appreciated,cheers,Wittner
From the docs on SOURCEFORGE (just above the section: Switch Debounce):"Note that in this case, the callback functions are run sequentially, not concurrently. This is because there is only one thread used for callbacks, in which every callback is run, in the order in which they have been defined."I would try to sidestep this behavior by wrapping your callback in a function that creates a new thread to handle each event thereby letting the callback itself return immediately. I would then use a threading.Lock so that any events triggered during the evaluation of the first event are immediately thrown out instead of trying to unbind and re-bind the callback.**EDIT for clarityI made the callback_dispatcher function a little more complex than it needed to be for your situation in favor of making it more general purpose. A simpler version could call your soundHeard function directly with a thread without creating a closure (function defined within a function).


Answer URL
https://docs.python.org/3/library/threading.html#lock-objects
