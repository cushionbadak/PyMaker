Natural Text
I need to create a class whose instances can't have same values. If you create instance with value that have already been used you'll get old same instance.I did it using special class method:Is there a way to do it more elegant, without using .new method?
This can be done by overriding the __new__ method, which is responsible for creating new instances of a class. Whenever you create a new instance you store it in a dict, and if the dict contains a matching instance then you return it instead of creating a new one:One downside of this solution is that the __init__ method will be called regardless of whether the instance is a newly created one or one that's been stored in the dict. This can cause problems if your constructor has undesired side effects:Notice how a's foo attribute changed from "bar" to "foo" when b was created.Another option is to use a metaclass and override its __call__ method:This bypasses the problem with __init__ being called on existing instances:
You could try functools.lru_cache.For example:Sample usage:Alternatively you could try building a custom caching class, as pointed out by Raymond Hettinger in this tweet: https://twitter.com/raymondh/status/977613745634471937.
If you really want to make it more elegant, implement the duplicate check in __new__, so it will be performed when you call A(something).Just do it in __new__:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__new__
https://docs.python.org/3/reference/datamodel.html#object.__call__
https://docs.python.org/3/library/functools.html#functools.lru_cache
