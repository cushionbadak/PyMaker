Natural Text
In my Python Shell, deleting __name__ makes it become 'builtins'. Although, checking with globals confirms that I am not refering to __name__ from some global variable.My guess is that we are using it from some closure. How is this behaviour taking place?
All names are looked up first from local variables, then global variables, then __builtins__, which is available everywhere. It's where all the built in functions are.
As you can probably guess from the __name__, you're accessing the name of the builtins module.Whenever you access a variable and that variable isn't found in any closure, the local scope or the global scope, the lookup falls back to the builtins. This is why you can access things like min or max or type even though they're not global variables:The same thing happens with __name__. Initially, there's a __name__ variable defined in the global scope:But once that name is deleted with del __name__, the lookup in the globals fails and falls back to the builtins - so you end up with the name of the builtins module.


Answer URL
https://docs.python.org/3/library/builtins.html
