Natural Text
As you can see, I have two asymmetrical list and I want to mix them like above. The problem is it ignore the last item.Expected:['1', 'a', '2', 'b', '3', 'c', '4', 'd', '5', 'e', 'f']Actual:['1', 'a', '2', 'b', '3', 'c', '4', 'd', '5', 'e']
Since you're using itertools in the first place, I assume you want this to work on any iterables, not just lists, and ideally without eagerly listifying them first. Otherwise, just do this:The zip_longest function almost does what you want out of the box, but it inserts a fillvalue (default None) for each slot once the shorter iterable runs out. If your values are all truthy, you can just filter those out with if i as in Ajax1234's answer, or filter with None as the predicate, but if your values can be anything in Python, even None, the only way to do it gets pretty clunky:But you can look at how zip_longest works and do the same thing yourself, only generating "incomplete" tuples instead of "filled-in" tuples, and then call it like this:Although making a variant of the zip_longest code from the docs that's easy enough to explain in an SO answer is a bit challenging, so maybe it's better to use an explicit loop:I think this version is a lot easier to understand (although it was actually a bit harder to writeâ€¦)Of course if the only thing you're ever going to use zip_longest_nofill for is to implement your flattened_zip_nofill, it's even easier to just inline it into the flattening part, at which point you end up with basically the two-liner in the last section.
Instead of chain, use zip_longest:Output:
Just manually append the remaining:One liner:
This should work but it's not very elegant
You can try itertools zip_longest:output:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
