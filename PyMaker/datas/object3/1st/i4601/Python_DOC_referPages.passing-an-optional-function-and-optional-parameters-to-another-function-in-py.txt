Natural Text
I'm new to learning Python and have enough under my belt to start attempting a beginner's Tic-Tac-Toe program.My issue is thus: I want to have a generic input function called getInput() which will get input from the user, strip trailing white space from that input, and THEN, if a function was passed to it via the optional parameter "specialTest", getInput() will run the input through this provided function and return the output which the specialTest function spat out.Sometimes this specialTest function will need additional arguments besides the user input. Assume for my purposes that the user input will always be the first argument and is required, and that any additional args will come afterwards.I tried to implement this situation via *args, and I got it working if the specialTest function had no additional arguments. But the first time I try to feed it additional arguments, it fails.So for example, getInput("Age?", specialTest=int) works. It prompts for user input and feeds it through the int() function, finally returning the output as an integer. But when I try to pass getInput() a function which has an additional argument - an ordered dictionary which contains strings as keys and dictionaries as values - the program fails with TypeTypeError: getInput() got multiple values for argument 'specialTest'. What needs to be adjusted to get this working as intended?Code:
In order to support supplying the same parameter via a positional or keyword argument, Python converts any keyword arguments that can be into positional arguments.  That creates the conflict in your example.  Syntactically, what you want can be achieved by simply omitting the argument:Or you can resolve the ambiguity with a “keyword-only” argument:Then the keyword argument cannot be converted, so there is no collision.  (This can be emulated in Python 2 by using **kw to accept arbitrary keyword arguments and then checking that only the expected one is actually provided.)But the question you should be asking is “How can I preset some arguments to a function used as a callback?”, to which the answer is either a lambda:or functools.partial:With either of these, you don’t need TestArgs at all.  The partial approach doesn’t support supplying trailing positional arguments (like varargs), but your nametoMove doesn’t actually want those anyway (as established in the comments).  So in all the approaches above you omit the *.


Answer URL
https://docs.python.org/3/reference/expressions.html#calls
