Natural Text
I have the following directed graph and every node has one or more attributes. I try to modify bfs algorithm to find all possible paths from a starting node until the given attributes are covered. I also want the path that i found to not be a part of a cycle. For this graph if i start from node 1 and i want to cover attr 4 the paths that my algorithm will find are:If i add the edge 3-1 then the paths 1-2-3 and 1-2-5-3 i want not to be accepted because are part of a cycle. So in my algorithm i try to check the neighbors of the last visited node and if the neighbor has already visited then i try to discard this path but my algorithm doesnt work in this case. If i add the edge 3-1 it returns the same paths. How can i fix this?Here is my code:
I'll assume that you don't care if nodes are part of a bigger cycle. E.g. if 4 is connected to 1 and 3 is in a cycle 1-2-3-4. If you want to handle this, you may start a dfs from each matching node, with the current path set as visited.First, you should use snake case in Python Second, you should use sets to compare the attributes covered to the attributes to be covered. For a path, compute the set of covered attributes and compare the sets:Third, some remarks on the bfs function:A test if b == True: is equivalent to if b:, because for a boolean b == (b == True) (try with True and False to convince yourself)The way you append a path to q may be shortened to q.put(v+ [node])You probably do not need a synchonized queue: use a listUse return instead of print or even better, create a generator that yields paths when they are found.Four: what is the problem? Look at the for i in G.neighbors(v[-1]): loop. Whether you break or not, you go to the line paths.append(v). That's why you do not exclude the paths with cycles. You want to distinguish the normal end of the loop from the break. That's a perfect case for confidential loop syntax in Python: the for...else loop.I quote the doc: "a loopâ€™s else clause runs when no break occurs". This gives the following code:But you can also use any for a more natural expression:This gives the following code:Try it with:


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops
