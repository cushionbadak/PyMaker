Natural Text
I have the following basic class involving a circle.  My question is, when I directly update the diameter with c.diameter(10), how come the radius is updated to 5?  As the output shows, it is still at 4:Output:
You have two things named diameter:An attribute on the instance, set with self.diameter in __init__ and with c.diameter = 10 later on.A method on the class named diameter. This method is never accessed. You can't access it on the instance, because there the diameter attribute masks the method.On Python classes, methods are still just attributes. c.area returns the method object, and only c.area() actually calls the method.So, just referencing c.diameter will not actually give you the method, it gives you the attribute on the instance, which is just an integer object.You have two options:Rename the method, to set_diameter() for example.Make the diameter attribute a property object. Properties are used as you would an attribute, but getting or setting the attribute on an instance triggers methods to be called.The latter option is the 'pythonic' option, the method experienced Python developers would use:The @property / @diameter.setter pair of decorators define the getter and setter for the property; the first def diameter is called whenever you want to read (get) the value of the attribute, and the second is used when writing called when you try to assign a new value (the setter):Note that we never set an attribute named diameter in the setter! The value is instead always calculated when you access c.diameter for reading.You'll also notice that when you assign an integer to the diameter attribute, that the radius becomes a float value; that's because the / operator always produces a float value, even for integer inputs. Use // (floor division), if you always must have an integer.
One way is to use properties with according setters to make sure you update your internal data: Something like this:


Answer URL
https://docs.python.org/3/library/functions.html#property
