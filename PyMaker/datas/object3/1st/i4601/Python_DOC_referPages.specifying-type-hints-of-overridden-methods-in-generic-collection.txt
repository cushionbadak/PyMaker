Natural Text
I have defined an abstract base class BaseRepository that acts as a collection of items with specified supertype Foo. The convenience classmethods in BaseRepository are annotated/type hinted to work with objects of type Foo. Here is a minimal example:Now there are multiple static implementations (e.g. SubRepository) which are each supposed to work with their own type of items (like Bar), being subclasses of the original generic type Foo.The repositories are static, meaning that they are not instantiated but rather function as namespaces for proper access to items that I load from YAML configuration files. The main perk is that I can create one of these SubRepositories and simply override the deserialization method _load_items, and the resulting repository will have all convenience methods from the base class. As I need to ensure that all of these SubRepositories work with items Foo that have a specific interface in order for the BaseRepository methods function properly, the SubRepositories must work with items that inherit from Foo.Strongly-typed languages like Java or C# have the concept of Generic Collections, where the elements in the subclassed collections all assume a specific type. Is the same possible with type hinting in Python?In particular, I would like the inherited get_item method in SubRepository to be hinted as Bar with minimal effort (not override it just for the sake of type hints). Optimally, the correct return value should be linted by PyCharm.Currently, even though SubRepository holds Bar items, my autocompletion in PyCharm only shows me members of Foo. I read about typing.Generic and TypeVar, but I'm unsure how to use them in this case.
You're programming to an interface, so only Foo members are exposed.Output:A generic collection will expose the generic type's members.Return typePasses the buckAutocompletion will now show members of Bar.


Answer URL
https://docs.python.org/3/library/typing.html
