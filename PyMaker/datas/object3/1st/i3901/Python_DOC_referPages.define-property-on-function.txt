Natural Text
In JavaScript, we can do the following to any object or functionThis will allow for a @property like syntax by defining a getter function for the property property.Is there anything similar for functions in Python?I know we can't use property since it's not a new-style class, and assigning a lambda with setattr will not work since it'll be a function.Basically what I want to achieve is that whenever my_fn.property is to return a new instance of another class on each call.What I currently have with setattr is thisMy hopes are to design an API that looks like this my_fn.property.some_other_function().I would prefer using a function as my_fn and not an instance of a class, even though I realize that it might be easier to implement.Below is the gist of what I'm trying to achieve
It's not possible to do exactly what you want. The descriptor protocol that powers the property built-in is only invoked when:The descriptor is defined on a classThe descriptor's name is accessed on an instance of said classProblem is, the class behind functions defined in Python (aptly named function, exposed directly as types.FunctionType or indirectly by calling type() on any function defined at the Python layer) is a single shared, immutable class, so you can't add descriptors to it (and even if you could, they'd become attributes of every Python level function, not just one particular function).The closest you can get to what you're attempting would be to define a callable class (defining __call__) that defines the descriptor you're interested in as well. Make a single instance of that class (you can throw away the class itself at this point) and it will behave as you expect. Make __call__ a staticmethod, and you'll avoid changing the signature to boot.For example, the behavior you want could be achieved with:Now you can call the "function" (really a functor, to use C++ parlance):or access the property, getting a brand new OtherClass each time:No, this isn't what you asked for (you seem set on having a plain function do this for you), but you're asking for a very JavaScript specific thing which doesn't exist in Python.
What you want is not currently possible, because the property would have to be set on the function type to be invoked correctly.  And you are not allowed to monkeypatch the function type:The solution: use a callable class instead.Note: What you want may become possible in Python 3.8 if PEP 575 is accepted.


Answer URL
https://docs.python.org/3/library/functions.html#property
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/library/functions.html#property
https://docs.python.org/3/library/types.html#types.FunctionType
