Natural Text
Typically when using rubygems in the ruby ecosystem or npm/yarn in the JavaScript ecosystem packages are installed somewhere on the $PATH or at least you are instructed to add the package install location to your path $PATH.It seems like with pip in the python ecosystem there is never an emphasis on this. Instead, you are encouraged to run modules via python -m <name>, etc.Seems a bit odd to me, was this just a design decision? Is it good practice to put site-packages or whatever location pip is using into $PATH? Sometimes a binary is added to /usr/local/bin (and sometimes with a different name than the package itself e.g django-admin instead of django with pip install Django whereas the binary is usually the same as the package name in ruby/JavaScript ecosystems), for example, I see, but is that all of the time?
You're confusing $PATH and $PYTHONPATH. site-packages is for libraries,  $PATH is for programs (binaries and scripts). pip installs libraries into its site-packages and scripts to the corresponding bin/ directory; e.g. if site-packages is /usr/local/lib/pythonX.Y/site-packages scripts are installed into /usr/local/bin/.pip doesn't check if /usr/local/bin/is in $PATH. Well, I agree with you â€” it should check and remind user to add bin/ directory to $PATH if it's not already there.
The site-packages directory for a particular python installation is automatically added to sys.path when you run the binary for the installation.  When that binary executes import modname, it looks in the directories on sys.path.  So when you run pip install with a particular python binary, pip, by default, puts the package in the site-packages for that binary so that binary can import the package.  Advanced used can do more complicated things.


Answer URL
https://docs.python.org/3/install/index.html#how-installation-works
