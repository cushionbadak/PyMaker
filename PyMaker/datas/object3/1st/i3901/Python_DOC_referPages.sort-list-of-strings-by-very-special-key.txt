Natural Text
I must implement sorting the list of strings in a way which is much similar to sorted function, but with one important distinction. As you know, the sorted function accounts space character prior digits character, so sorted(['1 ', ' 9']) will give us [' 9', '1 ']. I need sorted that accounts digit character prior space chars, so in our example the result will be ['1 ', ' 9'].UpdateAs I understand, by default the sorted behaviour relies on the order of chars in ascii 'alphabet' (i.e. ''.join([chr(i) for i in range(59, 127)])), so I decided to implement my own ascii 'alphabet' in the my_ord function. I planned to use this function in junction with simple my_sort function as a key for sorted,like this: sorted([' 1 ', 'abc', ' zz zz', '9 '], key=my_sort).What I'm expecting in this case, is ['9 ', ' 1 ', ' zz zz', 'abc']. Unfortunately, the result not only doesn't match the expected - moreover, it differs from time to time.
Try this
You can use lstrip as the key function to ignore the whitespace on the left, front of the string.key specifies a function of one argument that is used to extract a comparison key from each list element, doc.
You want a combination of lexical and numerical sorting. You can do that by chopping up the string into a tuple and converting the digits to int.  Now the tuple compare will consider each element by its own comparison rules.I've used regex to split the string into (beginning text, white space, the digits, everything else) created an int and used that for the key. if the string didn't match the pattern, it just returns the original string in a tuple so that it can be used for comparison also.I moved the whitespace before the digit (group(2)) after the digit  but it may make more sense to leave it out of the comparison completely.
For completeness and maybe efficiency in extreme cases, here is a solution using numpy argsort:Overall, I think that using sorted(..., key=...) is generally superior and this solution makes more sense if the input is already a numpy array. On the other hand, it uses strip() only once per item and makes use of numpy, so it is possible that for large enough lists, it could be faster. Additionally, it produces order, whitch shows where each sorted element was in the original list.As a last comment, from the code you provide, but not the example you give, I am not sure if you just want to strip the leading white spaces, or do more, e.g. best-way-to-strip-punctuation-from-a-string-in-python, or first order on the string without punctuatation and then if they are equal, order on the rest (solution by tdelaney) In any case it might not be a bad idea to compile a pattern, e.g.or:


Answer URL
https://docs.python.org/3/library/functions.html#sorted
