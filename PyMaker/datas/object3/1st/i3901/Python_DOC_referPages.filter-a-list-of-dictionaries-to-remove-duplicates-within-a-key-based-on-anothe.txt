Natural Text
I have a list of dictionaries in Python 3.5.2 that I am attempting to "deduplicate". All of the dictionaries are unique, but there is a specific key I would like to deduplicate on, keeping the dictionary with the most non-null values.For example, I have the following list of dictionaries:I would like to filter l to just dictionaries with unique id keys, keeping the dictionary that has the fewest nulls. In this case the function should keep d1 and d4.What I attempted was to create a new key,val pair for "value count" like so:now what I am stuck on is how to go about filtering my list of dicts for unique ids where the val_count key is the greater value.I am open to other approaches, but I am unable to use pandas for this project due to resource constraints.Expected output:
I would use groupby and just pick the first one from each group:1) First sort your list by key (to create the groups) and descending count of nulls (your stated goal):2) Then group by id and take the first element of each iterator presented as d in the groupby on the sorted list:If you want a 'tie breaker' to select the first dict if otherwise they have the same null count, you can add an enumerate decorator:I doubt that additional step is actually necessary though since Python's sort (and sorted) is a stable sort and the sequence will only change from list order based on the key and void counts. So use the first version unless you are sure you need to use the second. 
If you are open to using a 3rd party library, you can sort by number of None values and then feed into toolz.unique:If you cannot use toolz, the source code is small enough to implement yourself.Performance benchmarkingI have only included solutions which give exactly one result per id. Many solutions do not cater for a duplicate dictionary.
You can use max:Output:
Here's one way using a list comprehension which uses the 'val_count' values which you've already calculated:Giving:This works by comparing the current dictionary's 'val_count' to the maximum 'val_count' of all dictionaries with the same 'id'. Note that in the case of ties, all dictionaries which have the max 'val_count' are kept. The following line should handle ties, keeping the first instance of a certain 'id' only:There will almost certainly be more efficient ways to solve this problem, but this should at least work and may be suitable for your needs depending on the size of your dataset. 
@cdc200, you can try the below code. Here I have used the concept of dictionary.NoteÂ» Dictionary is defined as an unordered collection of data items with unique keys.I have used OrderedDict () in place of dict() to preserve the order of keys. Check this nice little article   OrderedDict in Python - GeeksforGeeks.Thanks.
I would do like this:Then keep as many values as you want from the sorted list (ls).For example, in order to keep only those dictionaries with the highest number non-None values (all dictionaries with the same number of non-Nones), you can do this:EDIT: Based on @jpp's comment, I have updated my code to take care of duplicate id keys. Here is the updated code:Let's also add timing comparison using the same definitions and setup as in @jpp's answer:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
