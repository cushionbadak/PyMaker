Natural Text
I'm trying to speed up a simple Python program using multiprocessing's Pool. Specifically: the imap_unordered function. In my case I'm searching for a specific object with specific properties, and checking this property takes a long time, hence the reason I want to spread the load over my CPU cores. I created the following code:Unfortunately, after calling break, there is still a lot of activity in the threads (as can be observed in my computers activity monitor). How should I keep searching for results till I find a favourable one, or how can I stop iterating over all items using the imap_unordered iterator? 
For starters, your example code is not using a multiprocessing ThreadPool because your import statement is wrong (it's just effectively renames the regular Pool class to that).Regardless, you can just use the Pool/ThreadPool as a context manager since Python 3.3 and put the loop inside it. This will cause its terminate() method to be called automatically when the context is exited (due to the break statement in the example below).If you're using an older version of Python, you can just explicitly call pool.terminate() immediately before the break statement (and not use a with statement).
Pool.terminate() will immediately stop the working processes, while Pool.close() will stop submitting tasks and the processes will close once their current task is done.Pool.terminate() will also be called if the Pool instance is garbage-collected, or by using it with with, so the following is a solution:A single thread would find item 10 in 22 seconds.  On my 8-core system it finds it in ~4 seconds:


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.terminate
