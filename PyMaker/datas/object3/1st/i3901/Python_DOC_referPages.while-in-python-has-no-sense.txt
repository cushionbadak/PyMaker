Natural Text
I have no idea what's happening there.It's something so simple, but I've been experimenting for long and it's have no sense.Here is the code:If I answer the input with 1, it works, as is suposed to do. But when i answer 2, it enter in the loop.And the strangest part is that when i Write 0 it don't enter in the loop!Someone has and idea of what can be happening. Maybe is an  interpreter problem...It's only a reduction of my problem, but I can't use the while loop by this way!!
& and and are not the same operator in Python.and means logical (aka boolean) and, the one you want—it's truthy if both of its arguments are truthy.& means bitwise and—it returns a new number with 1 for every bit that was 1 in both arguments (e.g., 5 & 3, aka 0b101 & 0b011, is 1, aka 0b001, and 6 & 1 is 0—which is false, even though both arguments are true, because they don't share any bits in common). That's not what you want.On top of that, they have different operator precedence (notice that and comes above != in the table, but & comes below it), so what you're actually doing is var != (1 & var) != 2. Since 1 != 2, this is true no matter what 1 & var happens to be.There are two more differences that aren't relevant here, but worth learning: x and y short-circuits: if x is false, Python doesn't evaluate y. This means you can do things like if x and x.spam(), and know it won't call None.spam() and raise an exception if x is None. But & is just a normal operator, like +, that always evaluates both arguments.x and y always compares the values as boolean truthy-or-falsey; it can't be overriden by custom classes to do custom things, but x & y can—e.g., it means set intersection if the values are sets, or elementwise bitwise and if they're numpy arrays, etc.


Answer URL
https://docs.python.org/3/reference/expressions.html#boolean-operations
https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations
https://docs.python.org/3/reference/expressions.html#operator-precedence
