Natural Text
When line 2 in the text file has 'nope' then it will ignore the line and continue the next one. Is there another way to write this without using try and except? Can I use if else statement to do this?Example of text file:Code:    
Yes, you can use str.endswith() method to check the trailing of the lines.Note that when you use a with statement to open a file you don't need to close the file explicitly the file will be closed automatically at the end of the block.Another but more optimized approach to solve this is to use a list comprehension in order to refuse appending to the list at each iteration and benefit from its performance compare to a regular loop.Note that still, since your code is exception prone because of converting strings to integer and splitting the lines, etc. It's better to use a try-except in order to prevent your code from possible exceptions and handle them properly.Another and yet Pythonic approach is to use csv module for reading the file. In that case you don't need to split the lines and/or use str.endswith().

If nope can be not only at the end of the line you can use this
Can I use if else statement to do this?You should use if-else statements, not exceptions, to control the flow in case of ordinary “events” which you expect. This is common “rule” in many languages, I think Python doesn't raise an exception here, Python is an exception here, but hopefully not in cases like this.Following your code but without calling line.split() each time, removing the try-except and using a proper condition in the if:And of course you can negate the condition and avoid the continue:Which shows (another) weakness in case when you have less than 2 elements. Here you could use try: the exception in this case tells you that the input format is wrong (because you expect at least 2 elements, it seems), so you have to reject the input and warn the user. Also, you could intercept ValueError if those 2 elements aren't integers.Moreover, if your input is allowed to contain extra spaces, you can use something like splitted[2].strip().Readings on SO/SE about the try-except matter.Using try vs if in python, whence I like to quote: “It's perfectly OK (and "pythonic") to use try/except for flow control, but it makes sense most when Exceptions are actually exceptional.”Is it a good practice to use try-except-else in Python?Cost of exception handlers in PythonAre exceptions for flow control best practice in Python?Python using exceptions for control flow considered bad?



Answer URL
https://docs.python.org/3/library/stdtypes.html#str.endswith
