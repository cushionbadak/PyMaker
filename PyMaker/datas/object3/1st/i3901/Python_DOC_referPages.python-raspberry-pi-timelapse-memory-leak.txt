Natural Text
I am using my raspberry Pi3 to create timelapse videos. I have a cron that runs a python script every minute that decides how many photos to take and then imports a function from another python script that takes the actual photos. The problem is that after running for about 4 hours the camera stops taking photos- if I try and take one manually it says it is out of memory, and top confirms this. If I watch top while the timelapse is running the memory usage steadily climbs.I think I have narrowed the problem down to the python script that takes the photos. I can run this on its own, and if I start up the pi and run it a few times I see that the memory used climbs by about 10MB the first run and about 1MB every subsequent run (screenshot at the bottom of the post). This is the scriptI'm not a good coder, I basically cobble stuff together from bits I find on the internet so I'm hoping this is something really simple that I've missed. The with is the raspberry pi recommended way of calling the camera. I know this should close the camera instance on exit but I'm guessing something is hanging around in memory? I tried adding close.cam() at the end of the function and it made no difference (didn't think it would). I've tried del on all the variables at the end of the function and it made no difference. I think the return at the end of the function is redundant but adding it made no difference.This website https://www.linuxatemyram.com/ suggests that top showing the memory climbing is normal and free -m is a better gauge, and that shows plenty available- but the fact remains the camera stops working, saying it is out of memory. Any clues would be much appreciated!This is the cron script (some other imports cropped)Screenshot of memory use
I suppose you have a wrapping python script which import the script you provide in the question and call ShutterTS in a loop. This function does not return any output to main script (just return).If you can observe a memory leak it probably is located in the picamera module.A workaround it to call this script as a sub-process, not as a function call in the main process. It can be done in a shell script or in the python script using subprocess module.Thus the memory will be released after each capture.


Answer URL
https://docs.python.org/3/library/subprocess.html
