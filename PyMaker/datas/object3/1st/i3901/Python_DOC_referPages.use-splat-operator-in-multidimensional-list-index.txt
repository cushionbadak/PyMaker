Natural Text
Say I have the listand I have an index that I want to use to access an element of this list.I want to use something like to mean a[index[0]][index[1]] = 9, but this doesn't work and neither does a[**index] = 9. Is there a similar way to do this without having a chain of index calls?I would like a method to do this without using any libraries that must be imported.
You can use reduce(), which is part of the standard library:Or, you can write your own class that supports that kind of multi-dimensional indexing:Otherwise, this is not possible using just lists and without loops or other functions.
First of all a[c, d, e] is equivalent to a[(c, d, e)] which is equivalent to a.__getitem__((c, d, e)). Note the double parentheses. Any __getitem__ implementation that wants to play nice with the Python data model always expects exactly one (explicit) argument.That's why unpacking values from index inside the [] does not make much sense. a[*index] will give you a SyntaxError and a.__getitem__(*index) gives you a TypeError (because you are providing too many arguments).Standard Python lists expect integer arguments to __getitem__, but numpy supports indexing with tuples (a numpy array still only takes exactly one argument for __getitem__, but it's allowed to be a tuple).Demo:Of course, you can omit the parentheses, because is exactly equivalent.


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
https://docs.python.org/3/library/functools.html#functools.reduce
