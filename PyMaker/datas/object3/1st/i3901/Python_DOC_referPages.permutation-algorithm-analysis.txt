Natural Text
I've been studying algorithms like crazy for a big interview. This particular algorithm is driving me crazy I've added comments to some lines that don't understand.Is it correct to say that the time complexity of this algorithm is O(n!)?
Initially out is defined inside the context of the permute method, so each call will have its own out vector. So when redefining out = [s] you just overriding the out=[] inside the method context.If the input is bigger than one char this is what happens:
Just for fun, here's a generator version of that algorithm. It's a bit nicer because it doesn't require those out lists.outputOf course, it's almost always better to avoid recursion (especially in Python) unless the problem needs recursion (eg processing recursive data structure, like trees). And of course a real Python program would normally use itertools.permutations, unless it needs to correctly handle repeating items in the base sequence. In that case, I recommend the iterative algorithm of Narayana Pandita, as shown in this answer.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.permutations
