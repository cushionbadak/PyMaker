Natural Text
I have the following script that counts the occurrence of values from one array to anotherits ok when dealing with small array size, but struggles when the array size increases (1 million for array_1 and 1 million array_2). Is there a better to approach this?sorry for the confusion, i updated the question a little bit.
Note: The answer by @Netwave is five time faster.You can use collections.Counter. It is be faster, because it only iterates ones of the list.
Use a set instead of a list:
If there are a lot of repeated numbers in array 1, you'll save time by caching  them (building a dict in the form {number: count}). A typical caching function would look like this:This behavior is packaged into the functools.lru_cache decorator, so that function can be simplified as:This would be a pretty efficient approach if you have a small number of distinct values in array 1â€”say, a random shuffle of the integers 1 through 10. This is sometimes referred to as array_1 having a low cardinality (a cardinality of 10).If you have a high cardinality (say 900k distinct values in an array of 1M values), a better optimization would be precomputing all the counts before you even start, so that you only have to make one pass over array_2. Dict lookups are much, much faster than counting through the whole array.Python has a built-in for this, too! The above code can be simplified using collections.Counter:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/functools.html#functools.lru_cache
https://docs.python.org/3/library/collections.html#collections.Counter
