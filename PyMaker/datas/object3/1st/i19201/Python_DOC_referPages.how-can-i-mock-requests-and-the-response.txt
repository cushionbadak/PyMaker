Natural Text
I am trying to use Pythons mock package to mock Pythons requests module. What are the basic calls to get me working in below scenario?In my views.py, I have a function that makes variety of requests.get() calls with different response each timeIn my test class I want to do something like this but cannot figure out exact method callsStep 1:Step 2:Call my viewStep 3: verify response contains 'a response', 'b response' , 'c response'How can I complete Step 1 (mocking the requests module)?
This is how you can do it (you can run this file as-is):Important Note: If your MyGreatClass class lives in a different package, say my.great.package, you have to mock my.great.package.requests.get instead of just 'request.get'. In that case your test case would look like this:Enjoy!
Try using the responses library:provides quite a nice convenience over setting up all the mocking yourselfThere's also HTTPretty:it's not specific to requests library, more powerful in some ways though I found it doesn't lend itself so well to inspecting the requests that it intercepted, which responses does quite easilyand httmock:
Here is what worked for me:
I used requests-mock for writing tests for separate module:And the tests:
this is how you mock requests.post, change it to your http method
If you want to mock a fake response, another way to do it is to simply instantiate an instance of the base HttpResponse class, like so:
One possible way to work around requests is using the library betamax, it records all requests and after that if you make a request in the same url with the same parameters the betamax will use the recorded request, I have been using it to test web crawler and it save me a lot time.https://betamax.readthedocs.io/en/latest/
Just a helpful hint to those that are still struggling, converting from urllib or urllib2/urllib3 to requests AND trying to mock a response- I was getting a slightly confusing error when implementing my mock:with requests.get(path, auth=HTTPBasicAuth('user', 'pass'), verify=False) as url:AttributeError: __enter__Well, of course, if I knew anything about how with works (I didn't), I'd know it was a vestigial, unnecessary context (from PEP 343). Unnecessary when using the requests library because it does basically the same thing for you under the hood. Just remove the with and use bare requests.get(...) and Bob's your uncle.


Answer URL
https://docs.python.org/3/library/unittest.mock.html
