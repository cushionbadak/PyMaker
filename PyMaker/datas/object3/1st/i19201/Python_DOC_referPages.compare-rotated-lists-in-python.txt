Natural Text
I'm trying to compare two lists to determine if one is a rotation (cyclic permutation) of the other, e.g.:are all matches, whereas:To do this I've got the following code:This builds a list of all possible rotations of b and then compares each one.  Is it possible to do this without building the intermediate list?  Performance isn't important since the lists will typically only be four items long.  My primary concern is clarity of code.The lists will always have the same length.Best answer (keeping the list of matching rotations) seems to be:
You don't need the function _matching_lists, as you can just use ==:I suggest using any() to return as soon a match is found, and using a generator expression to avoid constructing a list of rotations in memory:You might consider checking that the lists are the same length, to reject the easy case quickly.As discussed in comments, if you know that the elements of a and b are hashable, you can do the initial comparison using collections.Counter:and if you know that the elements of a and b are comparable, you can do the initial comparison using sorted:
If I understood correctly, you want to find if b is a permutation of a, but not a reversed? There's a very simple, readable, and general solution:
How about:No need to generate all rotations just to find out if two lists are rotation of each other.
I tested this code with a few examples, and it worked well.I tried:They returned True,True,FalseThis only works with lists of size 3. If you want more, within the if statement, add a thirdInA and thirdInB, and you will always need to have one less than the length of the list, because if you know all but one is in place, then there is only on spot left for the last to be.


Answer URL
