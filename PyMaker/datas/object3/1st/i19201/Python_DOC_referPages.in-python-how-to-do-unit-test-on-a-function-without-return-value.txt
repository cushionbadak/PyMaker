Natural Text
I am a pythoner. At these days I am driving myself to do a more complete unit test on some core module in my project.Since we always do unit test with methods 'assertEqual', 'assertTrue' and so on, these methods all require a return value from the function being tested, I am wondering how to do a plain unit test on some function without a return value.I would like to show a tiny example here, how to test function def foo(self, msg) in HelloTest?
In this particular case, I would mock print, then then use the mock in my assertion.In Python, you will use the Mock package to mock.
As another answer mentioned, you can use the Python mock library to make assertions about calls to functions/methodsThis patches out the bar method on HelloTest and replaces it with a mock object that records calls against it. Mocking is a bit of a rabbit hole. Only do it when you absolutely have to because it does make your tests brittle. You'll never notice an API change for a mocked object for instance. 
I don't quite understand why everybody wants to check that foo calls bar.Foo has some functionality and this functionality needs to be tested. If foo is using bar to do this should not be of my concern.The desired result is that after foo(msg) is called, is that msg.upper() is sent to stdout.You can redirect stdout to a string buffer and check if the content of this string buffer matches what you expect.Example:You can also do that for stdin (and write to stdin to mock some input) and you can subclass TestIOWrapper if you need anything special to be done, like allowing non-unicode text to be sent to sys.stdout without using sys.stdout.buffer (Python 2 vs. Python 3).There is an example for that in this SO answer.When you (still) use Python 2 only, then using StringIO might be better than using the io module.
your code can be as given below which does same task as above:Unit test is :
In Python 3, you can tell print where to print to:print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)So add an optional argument:In normal usage, it will print to stdout, but for unit tests you can pass your own file.In Python 2 it's a bit messier, but you can redirect stdout to a StringIO buffer:
Thanks to @Jordan 's introduction, I code this and think it is a workable unit test for HelloTest.foo


Answer URL
