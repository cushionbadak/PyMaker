Natural Text
Using the sorted built-in function without providing any optional arguments, how does python sort a list of dictionaries?
Python 2 does attempt to provide an ordering (it does so for all types), first based on length (shorted dicts first), if the lengths are equal then by keys (a smaller key goes first), then if all keys are equal then on values (smaller values go first); see the characterize and dict_compare functions in the dictobject.c source code.Short demo:In Python 3, it doesn't sort them at all; sorting dicts really makes no sense:See the Ordering Comparisons section of the What's New in Python 3 document.
It doesn't (at least for python3):There isn't a reasonable default for specifying an ordering of dicts, so dicts are unorderable.This behaviour has changed from python2, because comparisions have been reworked in python3. Before it was possible to compare almost anything using cmp(), which reflects in the ordering of lists. python3 fixes this, cmp() doesn't exist and comparisions are done using rich comparision methods, wich make only things comparable that really are, or how much sense does something like cmp(Exception(), 42) make?


Answer URL
