Natural Text
I am trying to pass a list as an argument to a command line program. Is there an argparse option to pass a list as option?Script is called like below
TL;DRUse the nargs option or the 'append' setting of the action option (depending on how you want the user interface to behave).nargsnargs='+' takes 1 or more arguments, nargs='*' takes zero or more.appendWith append you provide the option multiple times to build up the list.Don't use type=list!!! - There is probably no situation where you would want to use type=list with argparse. Ever.Let's take a look in more detail at some of the different ways one might try to do this, and the end result.Here is the output you can expect:Takeaways:Use nargs or action='append'nargs can be more straightforward from a user perspective, but it can be unintuitive if there are positional arguments because argparse can't tell what should be a positional argument and what belongs to the nargs; if you have positional arguments then action='append' may end up being a better choice.The above is only true if nargs is given '*', '+', or '?'. If you provide an integer number (such as 4) then there will be no problem mixing options with nargs and positional arguments because argparse will know exactly how many values to expect for the option.Don't use quotes on the command line1Don't use type=list, as it will return a list of listsThis happens because under the hood argparse uses the value of type to coerce each individual given argument you your chosen type, not the aggregate of all arguments.You can use type=int (or whatever) to get a list of ints (or whatever)1: I don't mean in general.. I mean using quotes to pass a list to argparse is not what you want. 
I prefer passing a delimited string which I parse later in the script. The reasons for this are; the list can be of any type int or str, and sometimes using nargs I run into problems if there are multiple optional arguments and positional arguments.Then,or,will work fine. The delimiter can be a space, too, which would though enforce quotes around the argument value like in the example in the question.
Additionally to nargs, you might want to use choices if you know the list in advance:
If you are intending to make a single switch take multiple parameters, then you use nargs='+'. If your example '-l' is actually taking integers:ProducesIf you specify the same argument multiple times, the default action ('store') replaces the existing data.The alternative is to use the append action:Which producesOr you can write a custom handler/action to parse comma-separated values so that you could do
In add_argument(), type is just a callable object that receives string and returns option value.This will allow to:
Using nargs parameter in argparse's add_argument methodI use nargs='' as an add_argument parameter. I specifically used nargs='' to the option to pick defaults if I am not passing any explicit argumentsIncluding a code snippet as example:Example: temp_args1.pyPlease Note: The below sample code is written in python3. By changing the print statement format, can run in python2Note: I am collecting multiple string arguments that gets stored in the list - opts.alistIf you want list of integers, change the type parameter on parser.add_argument to intExecution Result:
Maybe the simplest answer


Answer URL
https://docs.python.org/3/library/argparse.html
