Natural Text
Numpy tentative tutorial suggests that a[ : :-1] is a reversed a. Can someone explain me how we got there? I understand that a[:] means for each element of a (with axis=0). Next : should denote the number of elements to skip (or period) from my understanding.
As others have noted, this is a python slicing technique, and numpy just follows suit.  Hopefully this helps explain how it works:The last bit is the stepsize.  The 1 indicates to step by one element at a time, the - does that in reverse.Blanks indicate the first and last, unless you have a negative stepsize, in which case they indicate last and first:Line 5 gives an empty array since it tries to step backwards from the 0th element to the 5th.The slice doesn't include the 'endpoint' (named last element) so line 6 misses 0 when going backwards.
It isn't numpy, it's Python.In Python, there are slices for sequence/iterable, which come in the following syntaxAll the arguments are optional, but a : has to be there for Python to recognize this as a slice.Negative values, for step, also work to make a copy of the same sequence/iterable in reverse order:And numpy follows that "rule" like any good 3rd party library..See this link
This isn't specific to numpy, the slice a[::-1] is equivalent to slice(None, None, -1), where the first argument is the start index, the second argument is the end index, and the third argument is the step.  None for start or stop will have the same behavior as using the beginning or end of the sequence, and -1 for step will iterate over the sequence in reverse order.
You can use the reversed Python built-in:


Answer URL
https://docs.python.org/3/tutorial/introduction.html#lists
