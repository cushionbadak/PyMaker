Natural Text
I get an error when  trying to bind a class method to a function. Why?Also, if I am unable  to modify foo, can I do this adaptation from within the class definition?
A simple way to do it is to wrap the function in a staticmethod inside A:
A class method in python always takes at least one argument, usually called self. This example is taken from the official Python tutorial:Note that both methods, regardless of whether they are defined outside or inside of the class, take self as an argument.Edit: If you really can't change your foo function, then you can do something like this:
When you call a class method this way you pass the class instance as the first parameter.When you call test.bar what in fact happens is more like bar(test). You pass an argument to the method.
Class methods all have a first argument of the instance of the class.  So add a parameter to your function and it would work.
The initial def creates a function object named foo. Since it's outside any class, it's just a function that takes no arguments. The assignment bar = foo just gives the new name test.bar to that same function object. The call test.bar(), however, assumes that bar is a class method, and passes the object test as the first argument to the method (the one that you would normally call self). You could call it as a static method with something.bar() and not get the error. 
Remember that when a python class calls one of it's methods it will pass in a self argument. You need to account for that in your code:You can read all about classes in the Python DocumentationThe easiest workaround to not passing in a self that I can think of is:


Answer URL
