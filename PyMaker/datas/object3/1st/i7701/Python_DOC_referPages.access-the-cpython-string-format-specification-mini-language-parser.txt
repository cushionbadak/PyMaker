Natural Text
EDIT: I have created a module (as a part of my pypi parmatter package) to provide this functionality. It has not been pushed to the package yet but can be obtained here. Original QuestionI need to be able to parse format strings (as specified by the string format specification mini language). A project I'm working on makes heavy use of the parse module for "unformatting" of strings. The module allows for creating customized format codes/formulas. My intent is to automatically parse certain kinds of format strings in a manner somewhat consistent with the existing string format specification mini language. To clarify: by "format strings", I mean those strings that are used when using the format function and format method of str objects, e.g.: I have taken a look at the cpython string module and line # 166 looks to me like it is saying that parsing of the format string is handled in the _string module.  This occurs at this line (# 278):I am pretty unfamiliar with the cPython code base and am not much of a C programmer, and I could not find the _string module. I am wondering if it is implemented at the C language level...? Main question: is the format specification parsing implementation exposed somewhere for use? How can I get to it so I don't have to write my own? I am looking to get output something like this: EDITNote that the comments say that, despite its name, _string.formatter_parser does not do what I am after. 
The format specification is specific to each object; it is parsed by the __format__() method of an object. For example, for string objects, that method is implemented in C as the unicode__format__ function.A lot of the format is shared between object types, and so is the code to handle it. The formatter_unicode.c file handles most format-string parsing. Within this file, the parse_internal_render_format_spec() function does most of the parsing.Unfortunately, this function is not exposed to Python code. Moreover, it is declared as static, so you can't access it externally (for instance, via a ctypes wrapper), either. Your only options are to either re-implement it, or to re-compile your Python source code with the static keyword removed from the function, and then access it via the shared library.
For anyone else who comes upon this question needing to do this, here is a regex I came up with to match what I'm calling a format string (this PyCon 2017 talk was invaluable in my being able to come up with this so quickly!): That should match any valid string as specified by the string format specification mini language. I have done some limited testing and it seems to work. Now I need to take this and figure out how to parse out all the pieces of data I need. Will update when I figure out how to do that. EDIT: I've almost got it. The trick is to add group markers to the regex (i.e., parentheses) so you can access them later. This seems to work well: This results in:I'd like to figure out how to access the fill and align characters separately, and to get rid of the decimal marker in the precision portion, but this is a good start. EDIT: Nested groups are created and accessed by just adding the additional parentheses; they are assigned a group number in the order they are encountered:Results in this, which is exactly what I'm after:EDIT: It seems to actually be better to include the decimal character in the FormatSpec tuple (separately) because the format specification can then be reconstructed directly: Additionally, I have changed to the r.fullmatch method (rather than search or match) so that the pattern has to be matched exactly. Now we can do this to reconstruct the provided format spec: 


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__format__
https://docs.python.org/3/library/ctypes.html
