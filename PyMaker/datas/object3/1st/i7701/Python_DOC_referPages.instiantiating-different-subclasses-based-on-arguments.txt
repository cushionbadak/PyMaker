Natural Text
I have a RoundRobinChecker and a PlayoffChecker class, both inheriting from ViolationChecker, which checks whether a given round-robin or playoff match passes the rules or not.The constructor has one argument, the match: ViolationChecker(match). Now, if the match is a playoff match (match.playoff), a PlayoffChecker should be instantiated, otherwise it should be a RoundRobinChecker. I could just do this:But this is kind of an unclean way of doing it. Would it be possible to just call the parent class constructor, ViolationChecker(match), and this would create the instance of the corresponding subclass?What design could I use here to choose the appropriate class in a transparent way?
In order to make ViolationChecker(match) work, you can override the __new__ method in your parent class like this:However, it's not obvious to someone who reads your code that ViolationChecker(match) returns an instance of a subclass. I recommend adding a staticmethod with a clear name to ViolationChecker, something like this:Now you can do ViolationChecker.new_for_match(match), which conveys the intention of creating a ViolationChecker specifically for this match instance more clearly.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__new__
