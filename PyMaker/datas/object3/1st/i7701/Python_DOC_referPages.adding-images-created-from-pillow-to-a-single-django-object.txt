Natural Text
I have an wrote a small app that takes a single .gif as an upload and it splits the gif into frames using Pillow. I'm saving the .gif through a Document model and the frames through DocumentImage model. Currently, the app saves the .gif object and creates one object for each frame. What I want is all the frames be saved into a single object and that object be linked to the gif object. Here's what I have so far:views.pymodels.py I'm new to Django and not sure if what I'm asking is even possible but it seems like a fundamental function. I've read the Django documentation on many-to-one relationships, but didn't quite understand how the foreign keys are linked. Thank you for your time.
What I want is all the frames be saved into a single objectI assume you mean "each frame be saved into a distinct object" ? and that object be linked to the gif object. A bit OT but using proper naming really helps. Here you mention a "gif object" but your model name (the one with the uploaded gif file) is "Document", and the model for individual frames is "DocumentImage" - but those are created by a function named "create_gif" that neither create a gif not a Document but splits the gif into frames and creates DocumentImage instances... It can only leads to confusion. Now back to your problem - which, from what I understand, is that DocumentImage instances are not linked to the matching Document instance. Actually you're almost there, all you need is to pass the Document instance to your DocumentImage instances. The simplest way is to pass it to your (very ill-named) create_gif() function and then to the DocumentImage constructor.Now there are quite a few other problems with your code - not necessarily "blocking" problems (your code might work) but it's really not making the best use of Python and Django's feature -, and some comments are misleading at best (like "# create a folder if it doesn't exist" when you're actually opening an image file).The first obvious issue is with using a form (which you didn't post) but doing extra validation in the view - validation is your form's first duty really. The second issue is with relying on the file's extension for file-type validation - this is unreliable and unsafe. You may want to use something like imghdr instead.The third issue is with creating your Document instance manually when you could use a ModelForm instead. Then you have the files names / extensions / path handling code which is neither reliable nor portable, a bare except clause that not only hides usefull debugging stuff but also fails to properly handle the exception,  this "manual" while loop in create_gif() when you should be using a for loop and enumerate to get the index, and a function call within the loop that doesn't depend on the loop's variable (IOW: that will yield the same results on each iteration).Here's a revised version of your code. It's totally untested (which means very certainly buggy), but it should help you both solve your problem and improve your code's quality. modelsformsviewsEDIT : you state in your comment that:I want to have multiple images under one single object. If you mean having all frames images as distinct fields of a same model instance, then no, you can't. Well, you could add thousands of ImageField to your model, but 1/ you'd still hit a limit someday no matter how many ImageField you add (there's AFAIK no theoretical limit on the number of frames in a gif, and if there's a technical one it's probably way too high for a rdbms to support it), 2/ it would be an awfull kludge to handle and 3/ you'd take a very severe perfomance hit due to the number of fields in the db table.To make a long story short, what you did (a "master" Document model with 0-N related DocumentImage slave models) is the proper way to model your use case. Note that once you properly set the Document foreignkey in DocumentImage instances, gettings the frames for a given Document instance is as simple as mydoc.images.all() (nb using my corrected models), and a DocumentImage is garanteed to belong to one single Document (here again with my correct models code), so you are technically as close to "multiple images under one single object" as you can get. FWIW in plain Python (without rdbms and Django models) you'd still model this as one Document object having a collection (a list would be an obvious candidate) of image (frames) objects so it doesn't make that much difference.


Answer URL
https://docs.python.org/3/library/imghdr.html
