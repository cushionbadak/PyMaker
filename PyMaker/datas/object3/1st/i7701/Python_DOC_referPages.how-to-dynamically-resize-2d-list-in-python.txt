Natural Text
I am creating a large array of elements in python that I will print to an Excel spreadsheet. The order and the final dimensions are somewhat predictable, but hard-coding them in is inherently fragile. I want to find a way to dynamically resize the array if it's not big enough.The order that elements will be added may not be sequential, so append doesn't work directly. I need to be able to assign any element in a 2D array, and have the array resized to handle it, like the following:Is there in-built functionality that will allow this behaviour? If not, can you recommend a good way to implement it?
You could create a custom DefaultList class, similar to collections.defaultdict in that it takes a default_factory argument:And to use it in your case, you create a two-dimensional instance, where the default_factory just creates another DefaultList(int):Although I prefer to use a defaultdict with 2D tuples as keys:This takes way less memory than the DefaultList, and should be faster too, since it only creates the elements we actually access (as opposed to everything between index 0 and the one we're accessing). You just need to create a custom __str__ method if you need to print it out as a 2D map, but I'll leave that to you.Another upside of this approach is that you can have a point P = (x, y) and you don't have to do L[P[1]][P[0]] to access an element, but you can just do d[P] since the keys are the points. Oh, and because of this you access them in the natural order with x before y, so that:Where x=1 and y=2
To add to the excellent answer of @MarkusMeskanen, it is fairly easy to convert from a default dict to a list of lists:For example,The advantages that he lists for default dicts outweigh the disadvantage of needing to use the above function when you are done loading the data, especially since you might need to do some conversion given the other approach since potentially some of the rows might be empty and need to be expanded.
You want to send data to a 2-dimensional sink. But that does not mean your program needs to use a 2-dimensional data structure. You have already discovered that a list of lists is unwieldy for what you want to do.Abandon the 2-dimensional data structure and store your data internally as a dict with (x,y) tuples for keys.At the point where you want to populate your Excel spreadsheet, loop through the dict This will work just as well in the other direction.


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
