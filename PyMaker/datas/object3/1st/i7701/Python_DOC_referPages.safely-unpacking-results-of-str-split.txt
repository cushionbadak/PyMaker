Natural Text
This question already has an answer here:How do I reliably split a string in Python, when it may not contain the pattern, or all n elements?                    5 answers                I've often been frustrated by the lack of flexibility in Python's iterable unpacking. Take the following example:Works fine. a contains "This" and b contains "is a string", just as expected. Now let's try this:Now, we get a ValueError:Not ideal, when the desired result was "Thisisastring" in a, and None or, better yet, "" in b.There are a number of hacks to get around this. The most elegant I've seen is this:Not pretty, and very confusing to Python newcomers.So what's the most Pythonic way to do this? Store the return value in a variable and use an if block? The *varname hack? Something else?
This looks perfect for str.partition:
How about adding the default(s) at the end and throwing away the unused ones?Similar (works in Python 2 as well):
The *varname hack seems very pythonic to me:Similar to how function parameters are handledLets you use a one-liner or if block or nothing to correct type of the element if desiredYou could also try something like the following if you don't find that clear enough for new usersThen you can do something likeThen you should be able to depend on b[0] being a string.I fully admit that the definition of default is obscure, but if you like the effect, you can refine until it meets your aesthetic.  In general this is all about what feels right for your style.


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.partition
