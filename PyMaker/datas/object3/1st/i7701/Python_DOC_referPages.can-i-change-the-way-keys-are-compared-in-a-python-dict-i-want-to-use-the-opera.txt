Natural Text
Let's say I have two objects of a same class: objA and objB. Their relationship is the following:If I use both objects as keys in a Python dict, then they will be considered as the same key, and overwrite each other. Is there a way to override the dict comparator to use the is comparison instead of == so that the two objects will be seen as different keys in the dict?Maybe I can override the equals method in the class or something? To be more specific, I am talking about two Tag objects from the BeautifulSoup4 library.Here's a more specific example of what I am talking about:
first_h1 and second_h1 are Tag class instances. When you do my_dict[first_h1] or my_dict[second_h1], string representations of the tags are used for hashing. The problem is, both of these Tag instances have the same string representations:This is because Tag class have __hash__() magic method defined as follows:One of the workarounds could be to use the id() values as hashes, but the there is a problem of redefining the Tag classes inside BeautifulSoup itself. You can workaround that problem by making your own custom "tag wrapper":Then, you'll be able to do:It is, though, not pretty and not quite convenient to use. I would reiterate over your initial problem and check if you actually need to put tags into a dictionary.You can also monkey-patch bs4 using Python's introspection powers, like it was done here, but this is going to be entering a rather dangerous territory.
It seems you want to override the operator ==, you can choose the option of building a new class and implement the operator ==:


Answer URL
https://docs.python.org/3/library/functions.html#id
