Natural Text
I would like to make date comparisons between dates given by the Wikidata API.At first I though to use Python's datetime module, but I bumped into two problems:Wikidata handles dates that span over billions of years in the past or the future in the Julian and Gregorian calendars, datetime only works for Gregorian dates between years 1 and 9999.When the precision is (9) year or lower, the months and day are rendered as "00-00", which datetime.strptime doesn't manage.For example in this sample query about Paris, this date can be converted to datetime:This one can't:Not to mention "-0300-00-00T00:00:00Z" (300 BCE)I cannot simply use years comparison because for items about things that happened before the common era, there can be several dates in the same negative year.I'm not too sure about the best way to deal with this. Is there another lib I can use?
tl;dr : datetime can't handle that kind of things, so don't even try. You have strings, keep them and treat them as such.You could simply sort them as strings, provided they're of consistent length (otherwise pad as needed) and format. This will allow for sorting of "extended" ISO8601:2004 timestamps (as by standard 00 for months and days is not allowed).Assuming Python3, this code :yields this resultset :Additionally, you'll want to separate your list into two :items starting with a - signitems starting with a + signThen sort the first list by month-date-time ascending, then by unsigned integer value of the year represented by a string (as sort() and sorted() are guaranteed "stable"), plainly sort the second, and concatenate them back again. This will allow for proper sorting of signed ISO8601 timestamps.As for the padding, should it be needed, it's trivial enough using string.rjust() (although you'll have to somewhat alter the sorting to reflect the "new" timestamps' length ; string.zfill() is not the right tool for that job, as the string you're altering isn't numeric, having 'T', 'Z', '-', and ':') :As an aside, you may want to "Decorate-Sort-Undecorate" (perform a Schwartzian transform), for readability.Finally, if you're worried about Julian vs Gregorian calendars, you'll have to convert the Julian dates into Gregorian dates based on country and year by adding the corresponding number of days, and apply the above method. But keep in mind a Julian date (YYYY)-(MM)-(DD) predates a Gregorian date "that seems one day ahead", so it really shouldn't be too much of a worry.


Answer URL
https://docs.python.org/3/library/stdtypes.html#lists
