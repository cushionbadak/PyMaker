Natural Text
I have written a sample code of my problem. The input message are split into fixed chunks and mixed using an intentional random delay. However, sleep() is blocking and won't run the next task. Is this possible on a single thread or do I have to resort to multi-threading?
sleep will indeed block its running thread.It is possible to make it non-blocking by using libraries like gevent. Gevent can also patch time.sleep and make it non-blocking and also has its own non-blocking sleep. It can also patch the entire python standard library to make it non-blocking - socket, time, threading etc, see documentation.The above example can be made co-operatively concurrent with gevent like so:The constraint is that CPU bound tasks cannot be run in greenlets as they would block the event loop and all other greenlets. As long as what is run in greenlets is I/O bound, like passing messages in sockets or generators, other greenlets et al, greenlets are appropriate. For CPU bound tasks, use native threads or multiple processes.There are other alternatives like asyncio (Py3 only). Gevent is compatible with Py2 and 3 and has very high performance, backed by native code extensions.


Answer URL
https://docs.python.org/3/library/asyncio.html
