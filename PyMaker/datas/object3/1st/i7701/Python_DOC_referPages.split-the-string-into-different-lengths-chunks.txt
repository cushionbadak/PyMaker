Natural Text
In order to format the string properly, I was required to split it into different lengths of chunks. As an example, This is a string - 25c319f75e3fbed5a9f0497750ea12992b30d565, For splitting it in fixed length chunks, I would simply use steps and slicing:However, What could i do if n was list of numbers to be split, As example:Only solution i made was this:Which is not pythonic and more necessarily not reliable length of string is large.The output from the last example of code:So can this be done in more pythonic one liner way? If not what are other more automatic ways for this to be done?
Output
Create an iterator from the string and slice incrementally using itertools.islice:Note that the trailing part of the string is lost if the total size of the slice(s) does not equal the length of the string; iterator is not completely exhausted.You may append the trailing part (if needed) in a final preprocessing stage:Here's another approach that uses a for loop, slicing the string incrementally by increasing the start index:

Not a one-linear I'm afraid, but from the top of my head:The output is an array with the respective strings that can be manipulated accordingly:
If we start from the listed data:We can use a scan to find the beginnings or ends of each part:It appears accumulate is specific to Python 3, so we might need a workaround to do the scan in Python 2 (this one's slow at O(nÂ²)):And then we can use the combination to extract parts:The advantage of all this length/index manipulation is that it doesn't create copies of the string, only its individual parts. Otherwise Sean's solution is very neat. 


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.islice
