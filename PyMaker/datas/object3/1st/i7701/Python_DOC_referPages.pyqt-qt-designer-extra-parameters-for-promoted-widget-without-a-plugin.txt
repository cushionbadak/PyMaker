Natural Text
Let's say I have a custom PyQt widget that I want to use in Qt Designer, such as for a matplotlib canvas:plot_widget.py:In the Qt Designer, I can easily promote a QWidget for this, with the header file set to "my_module/plot_widget.h" and its name set to PlotWidget. Then, I can construct a widget from my ui file by loading it dynamically such as this:example.py:This works fine, except for the fact that I don't see a straightforward way of modifying the default init parameters that I have (toolbar, figsize and dpi in this case).I know that there is the possibility of creating custom plugins for this, but I would like to avoid it, as I think it would be adding an unnecessary complexity to my simple needs. In addition, I want my code to be as compatible with PySide / PyQt4 / PyQt5 as possible (to that end, I am actually using QtPy instead of PyQt5 directly, although this is a bit off-topic), and I am not fully convinced I could achieve that if I start using plugins.Hence, I thought of the following two approaches:Approach 1: Calling setupUi() programmaticallyBasically, I can simplify my constructor so that setupUi() is not called there, and do that call after loading the ui file:plot_widget.py:example.py:Approach 2: Using dynamic propertiesInstead of passing extra arguments to setupUi(), I can add any dynamic property that I need in the Qt Designer, and then use them such as this:If they are not defined, they will just be None. The problem is that the init constructor is called before those dynamic properties are added to the object (which seems logic), and hence figsize would always be None in this code:plot_widget.py:Which means that I would still need an explicit call to setupUi() in my example.py file, unless I can figure out something else.ConclusionI like much more the idea of Approach 2, as it allows me to modify all the ui parameters directly from the Qt Designer. However, I would like to avoid that explicit call to setupUi(). Hence, is there any QWidget method that always gets called after the dynamic properties have been assigned to the object (and hence I could override this to make the call to setupUi() there)?Also, do you see any other flaw in this approach or do you know of any other alternative method of achieving what I am trying to achieve? Note that I have used a matplotlib canvas as an example (for which there might be some specific approaches already), but I would like to use this for any custom widget that I might need.
Original answer:I found out that I may be able to use resizeEvent for this, but I don't know if it will work in any situation (i.e. whether the ui loader will always trigger the resizeEvent under all circumstances):Hence, unless I detect issues with this approach or I can figure out something more clever (or somebody else can), I will consider this the answer to my question.Edit: Just be aware that, if the widget is never visible, the resizeEvent will never be called. This is normally not a problem, but on certain occasions (such as during unit tests or doing heavy initialization before showing a widget) it may happen.Alternative approach:Lazy initialization can also be used for this as follows:The uic module does not have any reason to access these properties while loading the .ui file, and hence only the programmer can do so at his convenience. Nevertheless, this can also have a few inconveniences, such as:You will need to access at least one of the properties at some point to make the content available. For example, the plot might not be drawn until the user presses a button, and until then it will just look like an empty widgetUnless using some clever descriptor, you will probably need to generate one Python property per lazy attribute being used, which can end up being quite verbose
I know some months have passed since your own answer, maybe you've already found a solution that satisfies your needs and maybe I've not completely understood your situation.From what I can understand, I'd set dynamic properties for the widget in Designer, and then overload QObject.setProperty() or, better, use pyqtProperty in the custom widget, then use the @property.setter to setup the layout.The only issue would be that the properties have to be declared in the right order. You could circumvent with different approaches.use a single QStringList dynamic property to set all the parameters as a fake dictionary of (key, value) tuples.use resizeEvent (or showEvent) as you mentioned, setting a class flag, to avoid multiple calls to setupUi:add each widget to the layout according to their position using insertWidget whenever their property is set (this only works for QBoxLayout and if you know the widgets will have a fixed layout structure)Alternatively, you could just use another ui for the custom widget, add all possible promoted plotlib widgets and then use setVisible() in the @property.setter decorator; then you decide wether to hide them on the init and show them only when their property is set, or remember to always set the dynamic properties.


Answer URL
https://docs.python.org/3/howto/descriptor.html
