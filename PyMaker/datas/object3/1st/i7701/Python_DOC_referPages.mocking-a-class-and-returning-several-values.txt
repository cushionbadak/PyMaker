Natural Text
I have the following configuration class:Which is instantiated multiple times in the following class and the properties accessed:To test it I created the following test class where I mock ConfigB for the FileRunner class:I am trying to to get the mock for cfgB to return multiple values for both 'Id' and 'fileName'. If I use cfgB().fileName = 'File1', I can get the mock for cfgB to return 'File1' twice, but I would prefer if I could iterate through multiple return values. Is something that can be done?    *Edit: I would like to make clear that the above test does not work for returning specific values and instead I get the following output:
The problem here is that you are not actually using side_effect the way it is intended to be used. Per the documentation here, the side_effect attribute states:A function to be called whenever the Mock is called. See the  side_effect attribute. Useful for raising exceptions or dynamically  changing return values. The function is called with the same arguments  as the mock, and unless it returns DEFAULT, the return value of this  function is used as the return value.The key thing to realize here is function. The expectation here is something that is actually called. You are actually testing attributes, and attributes are not being called like a function, so you are not actually configuring your test properly with how you are using those side_effect calls. Based on what you are looking to test, you should take a slightly different approach. Looking at your code, you are looking to create a ConfigB object inside your loop as you iterate over cfgA.listFiles. So, this indicates that you are actually looking to control the side_effect of what happens when you call ConfigB(file) which you have mock patched as cfgB in your test. Furthermore, you are passing what seems like the filenames from iterating over cfgA.listFiles to configB. Therefore, you can just set listFiles as a list of arbitrary filenames as: Then, all you need to do, is then set your cfgB mock's side_effect to now return a Mock object containing the attributes of interest to properly proceed with your testing, as such:Running with those modifications, will then yield the following results from your print statements you have in your code: So, as you can see, now we have successfully set up your iterable to hold the filenames you want to set up for your tests. Furthermore, the side_effect is now properly used on your mock of ConfigB, in order to now return the proper mocked config object holding the attributes that you can test with in each iteration.Here is what the final test method looks like all put together:


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock
