Natural Text
How do I import other files in Python?How exactly can I import a specific python file like import file.py?How can I import a folder instead of a specific file?I want to load a Python file dynamically at runtime, based on userinput.I want to know how to load just one specific part from the file.For example, in main.py I have:Although this gives me all the definitions in extra.py, when maybe all I want is a single definition:What do I add to the import statement to just get gap from extra.py?
importlib is recent addition in Python to programmatically import a module. It just a wrapper around __import__ See https://docs.python.org/3/library/importlib.html#module-importlibUpdate: Answer below is outdated. Use the more recent alternative above.Just import file without the '.py' extension.You can mark a folder as a package, by adding an empty file named __init__.py.You can use the __import__ function. It takes the module name as a string. (Again: module name without the '.py' extension.)Type help(__import__) for more details.
There are many ways to import a python file, all with their pros and cons.Don't just hastily pick the first import strategy that works for you or else you'll have to rewrite the codebase later on when you find it doesn't meet your needs.  I'll start out explaining the easiest example #1, then I'll move toward the most professional and robust example #7Example 1, Import a python module with python interpreter:Put this in /home/el/foo/fox.py:Get into the python interpreter: You imported fox through the python interpreter, invoked the python function what_does_the_fox_say() from within fox.py.  Example 2, Use execfile or (exec in Python 3) in a script to execute the other python file in place:Put this in /home/el/foo2/mylib.py:Put this in /home/el/foo2/main.py:run the file:The function moobar was imported from mylib.py and made available in main.pyExample 3, Use from ... import ... functionality:Put this in /home/el/foo3/chekov.py:Put this in /home/el/foo3/main.py:Run it like this:If you defined other functions in chekov.py, they would not be available unless you import *Example 4, Import riaa.py if it's in a different file location from where it is importedPut this in /home/el/foo4/stuff/riaa.py:Put this in /home/el/foo4/main.py:Run it:That imports everything in the foreign file from a different directory.Example 5, use os.system("python yourfile.py")Example 6, import your file via piggybacking the python startuphook:See: https://docs.python.org/3/library/user.htmlPut this code into your home directory in ~/.pythonrc.pyPut this code into your main.py (can be anywhere):Run it: Credit for this jist goes to: https://github.com/docwhat/homedir-examples/blob/master/python-commandline/.pythonrc.py  Send along your up-boats.Example 7, Most Robust: Import files in python with the bare import command:Make a new directory /home/el/foo5/Make a new directory /home/el/foo5/herpMake an empty file named __init__.py under herp:Make a new directory /home/el/foo5/herp/derpUnder derp, make another __init__.py file:Under /home/el/foo5/herp/derp make a new file called yolo.py Put this in there:The moment of truth, Make the new file /home/el/foo5/main.py, put this in there;Run it:The empty __init__.py file communicates to the python interpreter that the developer intends this directory to be an importable package.If you want to see my post on how to include ALL .py files under a directory see here: https://stackoverflow.com/a/20753073/445131Bonus protipwhether you are using Mac, Linux or Windows, you need to be using python's idle editor as described here.  It will unlock your python world.  http://www.youtube.com/watch?v=DkW5CSZ_VII
To import a specific Python file at 'runtime' with a known name:...
You do not have many complex methods to import a python file from one folder to another. Just create a __init__.py file to declare this folder is a python package and then go to your host file where you want to import just type from root.parent.folder.file import variable, class, whatever
Import doc .. -- Link for reference The __init__.py files are required to make Python treat the directories as containing packages, this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path.__init__.py can just be an empty file, but it can also execute initialization code for the package or set the __all__ variable.
and Here are the two simple ways I have understood by now and make sure your "file.py" file which you want to import as a library is present in your current directory only.
the best way to import .py files is by way of __init__.py. the simplest thing to do, is to create an empty file named __init__.py in the same directory that your.py file is located.this post by Mike Grouchy is a great explanation of __init__.py and its use for making, importing, and setting up python packages.
How I import is import the file and use shorthand of it's name.Don't forget that your importing file MUST BE named with .py extension
I'd like to add this note I don't very clearly elsewhere; inside a module/package, when loading from files, the module/package name must be prefixed with the mymodule. Imagine mymodule being layout like this:When loading somefile.py/otherstuff.py from __init__.py the contents should look like:
In case the module you want to import is not in a sub-directory, then try the following and run app.py from the deepest common parent directory:Directory Structure:In app.py, append path of client to sys.path:Optional (If you load e.g. configs) (Inspect seems to be the most robust one for my use cases)RunThis solution works for me in cli, as well as PyCharm.
Just to import python file in another python filelets say I have helper.py python file which has a display function like,Now in app.py, you can use the display function,The output,I'm working sundar gsvNOTE: No need to specify the .py extension.
This may sound crazy but you can just create a symbolic link to the file you want to import if you're just creating a wrapper script to it.
There are many ways, as listed above, but I find that I just want to import he contents of a file, and don't want to have to write lines and lines and have to import other modules. So, I came up with a way to get the contents of a file, even with the dot syntax (file.property) as opposed to merging the imported file with yours.First of all, here is my file which I'll import, data.py Note: You could use the .txt extension instead.In mainfile.py, start by opening and getting the contents.Now you have the contents as a string, but trying to access data.testString will cause an error, as data is an instance of the str class, and even if it does have a property testString it will not do what you expected.Next, create a class. For instance (pun intended), ImportedFileAnd put this into it (with the appropriate indentation):And finally, re-assign data like so:And that's it! Just access like you would for any-other module, typing print(data.testString) will print to the console A string literal to import and test with.If, however, you want the equivalent of from mod import * just drop the class, instance assignment, and de-dent the exec.Hope this helps:)-Benji
You can also do this: from filename import somethingexample: from client import ClientNote that you do not need the .py .pyw .pyui extension.


Answer URL
https://docs.python.org/3/library/importlib.html#module-importlib
https://docs.python.org/3/library/user.html
