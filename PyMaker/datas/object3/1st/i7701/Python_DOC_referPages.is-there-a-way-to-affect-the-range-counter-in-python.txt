Natural Text
I'm trying to run a python program with a for loop which has a variable i increased by 1 every time from 1 to the length of my list. In java, my code that I'm going for might look something like this:This actually affects my counter the way intended and allows me to effectively skip numbers in my for loop and I want to try to run a similar program but in python. Is there any way to do this with python's built in functionality or do I have to just use a while loop and a counter to simulate this myself if I want python to work this way?
You'll need a while loop for this:
(Disclaimer: never use this code for any remotely serious purpose)The problem with modifying the value of i in your code is this: normally, assignments (including augmented assignment, +=) made to local immutable values are only visible in the local scope. The inside of range is not in the local scope. When you reassign i, the range implementation has no way of knowing this.Normally.But Python has a built-in module named inspect that exposes all sorts of information about your program that you normally wouldn't be privy to at run-time. This includes the values of variables in frames which would otherwise be completely inaccessible.In violation of good programming principles and the laws of nature, we can write a range-like function which pierces the veil of ignorance, and steals the value of i from the calling context, much like how Prometheus stole fire from the peak of Mount Olympus. (Note: recall what happens to Prometheus at the end of that story.)Result:(Disclaimer: author is not responsible for use of code and subsequent punishment of your hubris by eagles feeding on your liver for all eternity)
You can't modify the step mid count, but if the stepping through is constant, you can specify it at the start:You can also step backwards:If your case is, sadly, not one where the step is constant throughout iterations, you'll certainly need a while loop as you rightly surmised.
In python it is very similar with Java. You can dynamic increase your counter based on different conditions as :
In Python, you can create one-way iterators with the built-in iter function. With that, you can call next to effectively skip a step.To do this with multiple steps, the itertools recipies defines a consume function:In this case, we can do:This also works directly iterating over lists:These are super efficient as they use built-in types and functions.
You'll be happier with the while loop.You can do something likeand modify l during the loop.  But getting that right is hard.You could also create an iteration  object with a skip method, and call that during the loop.  Untested and entirely off the top of bmy head; debugging is left as an exercise to anyone annoyed at while loops enough to go that route.  I think it's more illustrative of what's going on under the covers.But the while loop is more readable and in most cases easier.


Answer URL
https://docs.python.org/3/library/functions.html#iter
https://docs.python.org/3/library/functions.html#next
https://docs.python.org/3/library/itertools.html#itertools-recipes
