Natural Text
Does the following code thread-safe?Will only one/first thread set the variable, set_this_var_only_once?  
Absolutely not.It is quite possible that two threads execute this line before executing the next one:After that, both threads will execute the next line:You can use locks to prevent that:Only one thread will be able to acquire the lock. If another thread tries to acquire it while it is locked, the call to lock.acquire() will block and wait until the lock is released by the first thread. Then the lock will be acquired by the other thread.That way it is ensured that the code between lock.acquire() and lock.release() is executed in one thread at a time.EDITAs Gerhard pointed in the other answer, you can use the context management protocol with locks:That will also make sure the lock is correctly released in case of an exception within the locked block.
You need to lock the variable like this:
No it's not. If another thread gets control after the current thread has fetched  the variable, it may fetch the variable, increment it, and write it  back, before the current thread does the same thing. And since theyâ€™re  both seeing the same original value, only one item will be accounted  for.Here's this good article about it. P.S. Also the following line is needed in the worker(): 


Answer URL
https://docs.python.org/3/library/threading.html#threading.Lock
https://docs.python.org/3/library/threading.html#with-locks
