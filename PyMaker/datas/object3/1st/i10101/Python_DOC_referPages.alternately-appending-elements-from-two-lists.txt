Natural Text
I have three lists with elements :I want to append elements from a and b into c to get:
Another very simple approach using string slicing (and most performance efficient) as:Below is the comparison of results with timeit for the answers mentioned here (Python version: 2.7):Using string slicing: 0.586 usec per loopUsing itertools.chain(): 1.89 usec per loop Using reduce(): 0.829 usec per loopUsing list.extend(): 0.824 usec per loopUsing list.append() twice: 1.04 usec per loop
Basic approach:This breaks if the lengths aren't equal. But you can deal with that case as an exercise.
You could zip the two lists and then reduce them to a flat list:
Assuming the two lists are the same length, the most compact way to do this uses itertools.chain and zip.outputAs juanpa.arrivillaga mentions in the comments, that syntax will not work on older versions of Python. Instead, you can doHere's another option, which doesn't use imports or the * splat operator:If you need to handle input lists of unequal length, take a look at the roundrobin function in Itertools Recipes. Eg,
Consider:Unless you have very stringent performance requirements, the simplest approach is the right approach.
Using more_itertools which implements the itertools roundrobin recipe
Assuming len(a) == len(b) and you're adding them one by one in turn:However, I would recommend to use c = deque(). Since deques are much quicker if you are making a lot of appends.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
