Natural Text
I saw this, and this questions and I'd like to have the same effect, only efficiently done with itertool.izip.From itertool.izip's documentation:Like zip() except that it returns an iterator instead of a listI need an iterator because I can't fit all values to memory so instead I'm using a generator and iterating over the values.More specifically, I have a generator that generates a three values tuple, and instead of iterating it I'd like to feed three lists of values to three functions, each list represents a single position in the tuple.Out of those three-tuple-values, only one is has big items (memory consumption wise) in it (lets call it data) while the other two contain only values that require only little amount of memory to hold, so iterating over the data value's "list of values" first should work for me by consuming the data values one by one, and caching the small ones.I can't think of a smart way to generate one "list of values" at a time, because I might decide to remove instances of a three-value-tuple occasionally, depending on the big value of the tuple.  Using the widely suggested zip solution, similar to:Results in the "unpacking argument list" part (*[...]) of this to trigger a full iteration over the entire iterator and (I assume) cache all results in memory, which is as I said, an issue for me.I can build a mask list (True/False for small values to keep), but I'm looking for a cleaner more pythonic way. If all else fails, I'll do that.
What's wrong with a traditional loop?


Answer URL
https://docs.python.org/3/library/functions.html#filter
