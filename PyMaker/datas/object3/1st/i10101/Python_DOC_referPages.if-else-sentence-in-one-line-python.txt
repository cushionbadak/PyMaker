Natural Text
I have some code:And I rewrote this to be more Pythonic:I found that in the first snippet I can't leave out else 0 while the second example can't contain else 0.What is the difference else 0 makes between these examples?
You have two very different things here.In the first you have an expression, and are using a conditional expression to produce the value; that requires an else because an expression always needs to produce something.For example, if you wrote:then what would be added to the sum if the test was false?In the second you have a generator expression, and the if is part of the possible parts (called comp_if in the grammar), next to (nested) for loops. Like an if ...: statement, it filters what elements in the sequence are used, and that doesn't need to produce a value in the false case; you would not be filtering otherwise.To bring that back to your example:when the if test is false, that x is just omitted from the loop and not summed. You'd do the same thing in the first example with:
This is not the same syntax at all.  The first one is a ternary operator (like (a ? b : c) in C). It wouldn't make any sense not to have the else clause here. The second one is a list comprehension and the purpose of the if clause is to filter the elements of the iterable.
This is an inline-if expression which returns a value. It must always return a value, it cannot not return a value, hence it must contain an else clause.This is a list comprehension. The if here acts as a filter for the loop. It's equivalent to for x in y: if z: ....To have an else in there, you put the inline-if expression in place of x:


Answer URL
https://docs.python.org/3/reference/expressions.html#conditional-expressions
https://docs.python.org/3/reference/expressions.html#generator-expressions
https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries
