Natural Text
I am using Python 3.0, and I have to create the following:1) Implement an ADT called Setplus as an ordered doubly-linked list, where the items are ordered from smallest item to the largest item in the listSo First I created a module called Double_NodeThen I create a class called Setplus:I am having trouble creating creating a contains method, count, which counts the number of values and add, which adds the node in the correct nondecreasing order. Thanks in Advance
The first major issue in your code is typos and incorrect names.There's one clear typo, slef instead of self in one of your functions.There are also a bunch of places where you're using two different names for what is supposed to be the same attribute (_head and head or next and next_node, for instance).You also have defined getter and setter functions in your Double_Node class, but the only time you try to use them in Setplus you only reference the method without calling it. The line current = current.get_next should almost certainly be current = current.get_next().A brief diversion on getter and setter functions: They're usually not needed in Python classes. Just use attributes directly. If you later find you need more fancy behavior (e.g. validation of newly set values or generation of requested values on the fly), you can change the class use a property to turn attribute access syntax into method calls. In other programming languages you usually can't change away from attribute access that way, so getter and setter methods are encouraged in order to have an extensible API from the start.(Note that if you're a student, your instructors may be less familiar with Python than other languages, so they may want you to write getters and setters even though they're generally bad style in Python code. Consider learning how to use a property instead and you might blow their mind later on!)I'd get rid of the getter and setter functions in Double_Node, simply as a matter of style. But, if you are going to keep them (perhaps because they're required for your assignment), you should then actually use them in your code!And finally, to get to the actual question you wanted help with, inserting into the linked list in sorted order, you probably want to do something like this:After you've made add insert in sorted order, your other methods can take advantage of that fact. For instance, __contains__ can stop searching if it sees a value that's greater than the one it's looking for, and count will find all the matching values in one contiguous group.
If you'd like to use existing Python classes for this, you may find these useful.Doubly-linked list:deque, from the collections module:https://docs.python.org/3/library/collections.html#collections.dequeOrdered data structure from smallest to largest:The heapq module, which implements a min heap.https://docs.python.org/3/library/heapq.html


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
https://docs.python.org/3/library/heapq.html
