Natural Text
This question already has an answer here:Python: Exporting environment variables in subprocess.Popen(..)                    3 answers                Why does subprocess.Popen() with shell=True work differently on Linux vs Windows?                    3 answers                I am wracking my brain over here trying to do a simple function with python without using shell=true and am not getting the results I need. I am using python 2.7 on Linux. I have tried multiple methods of doing this. It works fine if I use shell=true like so:and both return /home/myhost ... like it should but everything else I tried fails. In most cases it seems that it is passing my variable as a string instead of a command. These are the results I have received with the various methods:returnsThen I tried this:returnsThen this:returnsand thisreturnsfound some doc that said to use os... which also failed, which isn't surprising after finding out this had been deprecated in 2.6.returnsThen my final attempt (actually there were more... but we will just leave it at this)returns:Can someone please point me in the right direction? I have spent an entire day fiddling with this and I need help please. Thank you in advance for any help given. 
Lets start with the answerNow onto your attempts and results. Your main problem (besides a few random bugs) is that $HOME is replaced with the value of the environment variable by the shell. Without the shell argument expansion $HOME is just a string and that is what you get.
It sounds like you really just want to get the value of an environment variable. os.getenv('HOME') should do that for you.
The answer mentioning os.environ['HOME'] is correct, but it's probably not what you want for portability. There is no guarantee that HOME is set (it's by convention, not required; users could delete it, shells could choose not to set it, etc.). And if you eventually want portability to Windows, that's not its name. If you want the user's home directory, don't check the environment directly, instead, use os.path.expanduser to use smarter home directory lookup logic:This will work even if HOME is not defined, and generalizes to looking up other user's home directories (os.path.expanduser('~someotheruser')).In Python 3.5+, you could also use pathlib.Path.home() to get a Path object representing the home directory.Also, tangentially, if you need to expand a string with a bunch of environment variable replacements in general, you might want to look at os.path.expandvars, which does the environment lookup and string formatting as a single operation.


Answer URL
https://docs.python.org/3/library/os.path.html#os.path.expanduser
https://docs.python.org/3/library/pathlib.html#pathlib.Path.home
https://docs.python.org/3/library/os.path.html#os.path.expandvars
