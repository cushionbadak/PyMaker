Natural Text
So I have these models: Let's say I have few lifts at different dates for admin and few lifts at different for xx user. I want multiple lifts matching one date that's why I've made foreign key. (eg. 3 lifts to 2016-10-10 and 2 lifts to 2016-10-11).Here is a view for showing it:And template: The problem is that I dont know how to separate it by dates AND by user.This is how it looks like How do i keep this pattern date - lifts_to_that_date but for separate users? I dont want to see admin's entries while I am on test user
Have a look at the regroup template tag, it does exactly what you need.You can do something like this in your view:And replace the for date in dates loop in your template with something like:I've used a ul here so that it's easier to compare to the example in the docs, but obviously you can change the markup to whatever you need. It's important to know that regroup doesn't order its input, so you need to order by created_date in your view.If you're using Django's dev version you can use this instead:Which I think is a little clearer.As an aside, none of this relies on having dates stored as a foreign key, but that's up to you.Questions from comments:order_by('-created_date__created_date') is joining Lifts to Dates through the Lifts.created_date foreign key and ordering by the Dates.created_date field. Have a look at https://docs.djangoproject.com/en/dev/topics/db/queries/#lookups-that-span-relationships for details.for day, lifts in lift_list is using tuple unpacking.As a quick example:{% regroup lifts_by_user by created_date.created_date as lifts_list %} produces a list of namedtuples (again, only in the dev version, if you're using 1.10 or earlier it's a list of dicts so you can't use this trick) so as you're iterating through lift_list you can unpack the date and list of lifts into separate variables.If you have a Lift instance called lift, you can get the pk for its date by using lift.created_date_id. Accessing it where you have the date URL in your example template is a little trickier because you have to get a lift out of the regrouped date's list. Something like this:


Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
