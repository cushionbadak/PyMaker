Natural Text
In Python 2.x, I could pass custom function to sorted and .sort functionsBecause, in My language, consonents are comes with this orderBut In Python 3.x, looks like I could not pass cmp keywordIs there any alternatives or should I write my own sorted function too?Note: I simplified by using "k", "kh", etc. Actual characters are Unicodes and even more complicated, sometimes there is vowels comes before and after consonents, I've done custom comparison function, So that part is ok. Only the problem is I could not pass my custom comparison function to sorted or .sort
Use the key argument (and follow the recipe on how to convert your old cmp function to a key function).functools has a function cmp_to_key mentioned at docs.python.org/3.6/library/functools.html#functools.cmp_to_key
Use the key keyword and functools.cmp_to_key to transform your comparison function:
Instead of a customsort(), you need a function that translates each word into something that Python already knows how to sort.  For example, you could translate each word into a list of numbers where each number represents where each letter occurs in your alphabet.  Something like this:Since your language includes multi-character letters, your custom_key function will obviously need to be more complicated.  That should give you the general idea though.
I don't know if this will help, but you may check out the locale module.  It looks like you can set the locale to your language and use locale.strcoll to compare strings using your language's sorting rules.
Use the key argument instead. It takes a function that takes the value being processed and returns a single value giving the key to use to sort by.


Answer URL
https://docs.python.org/3/library/functools.html#functools.cmp_to_key
