Natural Text
Doing everything in Microsoft shell and using 2.7.12PreludeActionsAre not the three lists pointing to the same elements in the memory location? and are therefore liable to change if one is changed?Part I understand:Part I don't understand:
Python can decide to share immutable objects storage (strings, integers, ...)Since they are immutable, it is transparent to the user. It just saves memory.could be True or False. On the other handis always True because a is c. (and modifying a changes c)But since list type is mutable, a cannot be b (Python doesn't allow itself to optimize storage in that case). Those are independent objects. Modifying a cannot change b.note about my "can be true or false" remark. Consider this in python 3.4Python did not bother to make the link between b and a[0]. Also happens with long strings (I assume that would be a performance issue vs low probability to find an exact big number 2 times in a row? whereas 1 has better chance to be repeated throughout the program)However if you do this you get a different result:(I wouldn't say for sure why as it can vary depending whether it is stored as a long int or mere int, value or address, etc... , but Python has definitely more information about the value being duplicated here!)Conclusion is: don't rely on that for immutable objects. Use == at all times.
ints are immutable. This means that when you reassign a[0], you're not changing whatever 1 is. Rather, you're changing whatever a[0] holds. You don't change what it means to be 1 - you change what it means to be a[0].If on the other hand you did this:you'd see the change reflected in b as well
Assignment in Python is by reference - it creates a new reference, or alias for an object, not copies the object - and since event int is an object in Python - at least (in my version - up to 256), this rule mostly works works.The following example wit function id - which shows object reference - illustrates the pointHowever, this will not work on floats - which is logical, since quantity of floats, and integers is infiniteAs you may see, new object is created for each new float, though value is the same


Answer URL
https://docs.python.org/3/reference/datamodel.html#objects-values-and-types
