Natural Text
I have an exercise that I have to complete for school and I'm kinda stuck. I have to program a function that tells you if there's a face on the photo, by photo we can imagine a 2D list, so a list that consists of more lists to create a 2 dimensional object. The face is represented by 2x2 square with the word face in it these letters can be in a random order.  As shown below in picture I. and II.:Also there can be more faces, as long as the word face is shown at least once in the whole 2Dlist it should return True.The problem is that the letters can't be in a row or in a column as shown in picture III.. I really can't figure out how to make a condition that would eliminate this. So far I know how to find out out if all of the letters are in that 2Dlist and I eliminated the possibility of having just a single row or a single column as shown in the picture IV. and V..Here's what I have so far:I'm new to python so I would appreciate any help I can get :) thanks a lot
Search element by element through each row, then the next row, and so on, left to right, and down, until you find an F, A, C, or E.When you do, since you're checking left to right and top to bottom, you can assume you've found the top left corner of a potential "FACE". So check if the letter to the right, the one below, and the one to the lower right satisfy the rest of the FACE.If so, you're done. If not, keep going.Edit: Here's a somewhat wordy version. I haven't tested it, but it's the idea.
Using a method somewhat similar to that described in the other answer, here is an implementation that should work. It will go through each cell and, if that cell includes a letter in 'face', it will proceed to check the three cells to the right, the three below, and the square of which it is the top-right member.Note that this is not the most efficient way of doing this: information from previous tries (which could prevent most of these attempts) is not preserved. 
Here's one way to scan your 2D lists. We use the built-in zip function to get pairs of adjacent rows from the photo, and use zip again to get pairs of adjacent cells from the current pair of rows. This gives us the 4 cells in a 2x2 square. We also use the built-in enumerate function to give us the x,y indices of the top-left corner of the current 2x2 square. We put the letters from the square into a set so we can quickly test if it is equal to the set containing the letters of 'face'. But we also need to make sure that any face we find doesn't overlap a face we've already found. To do that, we maintain a set found that keeps track of the x,y indices of each face we find. UpdateHere's a better version of this code; the previous version didn't handle photos that contain both overlapping faces and non-overlapping faces. This version maintains another set bad that keeps track of faces that overlap other faces.output


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/functions.html#enumerate
