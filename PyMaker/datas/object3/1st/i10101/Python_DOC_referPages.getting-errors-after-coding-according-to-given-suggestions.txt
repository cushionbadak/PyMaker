Natural Text
My code is:The button doesn't work, it prints 'hey' and 'het' once without my command, and then, when I press the button nothing happens.
The command option takes a reference to a function, which is a fancy way of saying you need to pass it the name of the function. When you do command=button('hey') you are calling the function button, and the result of that is being given to the command option. To pass a reference you must use the name only, without using parenthesis or arguments. For example:If you want to pass a parameter such as "hey" you must use a little extra code:You can create an intermediate function that can be called without your argument and which then calls your button function, You can use lambda to create what is referred to as an anonymous function. In every way it's a function except it doesn't have a name. When you call the lambda command it returns a reference to the created function, which means it can be used for the value of the command option to the button.You can use functools.partialFor me, lambda is the simplest since it doesn't require any additional imports like functools.partial does, though some people think that functools.partial is easier to understand.To create a lambda function that calls your button function with an argument you would do something like this:You end up with a function that is functionally equivalent to:As I said earlier, lambda returns a reference to this nameless function. Since a reference is what the command option expects you can use lambda directly in the creation of the button:There's a question on this site that has a lot of interesting comments about lambda, in general. See the question Why Python lambdas are useful?. That same discussion has an answer that shows how to use lambdas in a loop when you need to pass in a variable to the callback. Finally, see the section titled Tkinter Callbacks on effbot.org for a nice tutorial. The coverage of lambda is pretty lean but the information there might still be useful.
You need to create a function without parameters that you can use as the command:See the "Passing Argument to Callbacks" section of this document.
Example GUI:Let's say I have the GUI:What Happens When a Button Is PressedSee that when btn is pressed it calls its own function which is very similar to button_press_handle in the following example:with:You can simply think that command option should be set as, the reference to the method we want to be called, similar to callback in button_press_handle.Calling a Method(Callback) When the Button is PressedWithout arguments So if I wanted to print something when the button is pressed I would need to set:Pay close attention to the lack of () with the print method which is omitted in the meaning that: "This is the method's name which I want you to call when pressed but don't call it just this very instant." However, I didn't pass any arguments for the print so it printed whatever it prints when called without arguments.With Argument(s)Now If I wanted to also pass arguments to the method I want to be called when the button is pressed I could make use of the anonymous functions, which can be created with lambda statement, in this case for print built-in method, like the following:Calling Multiple Methods when the Button Is PressedWithout ArgumentsYou can also achieve that using lambda statement but it is considered bad practice and thus I won't include it here. The good practice is to define a separate method, multiple_methods, that calls the methods wanted and then set it as the callback to the button press:With Argument(s)In order to pass argument(s) to method that calls other methods, again make use of lambda statement, but first:and then set:Returning Object(s) From the CallbackAlso further note that callback can't really return because it's only called inside button_press_handle with callback() as opposed to return callback(). It does return but not anywhere outside that function. Thus you should rather modify object(s) that are accessible in the current scope.Complete Example with global Object Modification(s)Below example will call a method that changes btn's text each time the button is pressed:Mirror
The engine evaluates the result of the function when it is assigning the value at the line "... command = ..."The "command" expects a function to be returned, that's why using a lambda can do the job because it is creating an anomymous function that is returned to the "command" during evaluation. You can also code your own function, it will do the job also.this is an example with lambda and without lambda:
button('hey') invokes the function, rather than setting it as a callback.
This is my solution:Basically what we are doing is we are defining function with parameter, then calling it inside a function without parameters. 
Don't use any keyword or argument as input or parenthesis for your function.That's  a  very easy solution.  


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions
https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python
