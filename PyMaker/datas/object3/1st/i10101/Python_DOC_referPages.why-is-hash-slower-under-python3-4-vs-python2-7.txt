Natural Text
I was doing some performance evaluation using timeit and discovered a performance degredation between python 2.7.10 and python 3.4.3. I narrowed it down to the hash() function:python 2.7.10:python 3.4.3:That's an approx. 40% degradation! It doesn't seem to matter if integers, floats, strings(unicodes or bytearrays), etc, are being hashed; the degradation is about the same. In both cases the hash is returning a 64-bit integer. The above was run on my Mac, and got a smaller degradation (20%) on an Ubuntu box.I've also used PYTHONHASHSEED=random for the python2.7 tests and in some cases, restarting python for each "case", I saw the hash() performance get a bit worse, but never as slow as python3.4Anyone know what's going on here? Was a more-secure, but slower, hash function chosen for python3 ?
There are two changes in hash() function between Python 2.7 and Python 3.4Adoptions of SipHashDefault enabling of Hash randomizationReferences:Since from Python 3.4, it uses SipHash for it's hashing function. Read: Python adopts SipHashSince Python 3.3 Hash randomization is enabled by default. Reference: object.__hash__ (last line of this section). Specifying PYTHONHASHSEED the value 0 will disable hash randomization.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__hash__
https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED
