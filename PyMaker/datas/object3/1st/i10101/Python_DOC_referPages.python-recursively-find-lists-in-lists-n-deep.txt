Natural Text
I'm trying to use ipaddress (https://docs.python.org/3/library/ipaddress.html) to solve the following issue:I have a BGP aggregate-address of 10.76.32.0/20from which I would like to subtract all the network commands on the same router to figure out if the aggregate-address is larger than the defined networks and there is free network space left over.The networks in this case are:10.76.32.0/2410.76.33.0/2410.76.34.0/2410.76.35.0/2410.76.36.0/2410.76.37.0/2410.76.38.0/2410.76.39.0/2410.76.40.0/2410.76.41.0/2410.76.42.0/2410.76.43.0/2410.76.44.0/2510.76.44.128/2510.76.45.0/2410.76.46.0/2410.76.47.240/3010.96.208.219/32Using ipaddress.address_exclude(network) I can subtract a network from the aggregate-address and the operation returns an iterable object.I could then make a for loop on this iterable object and see if it contains any of the other networks but in case it does, I will get yet another iterable object as the result. This process could hypothetically return lists within lists to an unspecified depth.My question would be if anyone knows of a way to find all elements in such a structure of lists within lists that go to an arbitrary depth.HunorEdit: Thanks for the answer Андрей Беньковский. I didn't have time to check it out yet but I did manage to find a way to do it without using recursion with the .issubset method from netaddr:this would take the aggregate-address and networks in list format and return the difference as a new list (per each aggregate-address).for the example above:['10.76.47.0/25', ' 10.76.47.128/26', ' 10.76.47.192/27', ' 10.76.47.224/28', ' 10.76.47.244/30', ' 10.76.47.248/29']
You didn't indicate the version of python (2 or 3) you are using so I assumed it's python3 based on the fact that the link you posted is to the python3 documentation. You didn't post any code, but based on your description of the issue I assume you need something like this:This code doesn't include range checking so if the networks overlap or go outside the super_network you'll get a no very useful error from summarize_address_range but the range checking can be added with just a few tweaks.


Answer URL
https://docs.python.org/3/library/ipaddress.html
