Natural Text
Currently I am working on a python project that contains sub modules and uses numpy/scipy. Ipython is used as interactive console. Unfortunately I am not very happy with workflow that I am using right now, I would appreciate some advice.In IPython, the framework is loaded by a simple import command. However, it is often necessary to change code in one of the submodules of the framework. At this point a model is already loaded and I use IPython to interact with it. Now, the framework contains many modules that depend on each other, i.e. when the framework is initially loaded the main module is importing and configuring the submodules.  The changes to the code are only executed if the module is reloaded using reload(main_mod.sub_mod). This is cumbersome as I need to reload all changed modules individually using the full path. It would be very convenient if reload(main_module) would also reload all sub modules, but without reloading numpy/scipy..
IPython comes with some automatic reloading magic:It will reload all changed modules every time before executing a new line. The way this works is slightly different than dreload. Some caveats apply, type %autoreload? to see what can go wrong.If you want to always enable this settings, modify your IPython configuration file ~/.ipython/profile_default/ipython_config.py[1] and appending:Credit to @Kos via a comment below.[1]If you don't have the file ~/.ipython/profile_default/ipython_config.py, you need to call ipython profile create first. Or the file may be located at $IPYTHONDIR.
In IPython 0.12 (and possibly earlier), you can use this:This is essentially the same as the answer by pv., except that the extension has been renamed and is now loaded using %load_ext.
IPython offers dreload() to recursively reload all submodules.  Personally, I prefer to use the %run() magic command (though it does not perform a deep reload, as pointed out by John Salvatier in the comments).
For some reason, neither %autoreload, nor dreload seem to work for the situation when you import code from one notebook to another. Only plain Python reload works:Based on [1].
How about this:This should effectively reload the entire tree of modules and submodules you give it. You can also put this function in your .ipythonrc (I think) so it is loaded every time you start the interpreter.
http://shawnleezx.github.io/blog/2015/08/03/some-notes-on-ipython-startup-script/To avoid typing those magic function again and again, they could be put in the ipython startup script(Name it with .py suffix under .ipython/profile_default/startup. All python scripts under that folder will be loaded according to lexical order), which looks like the following:
Another option:Verified on ipython and ipython3 v5.1.0 on Ubuntu 14.04.
My standard practice for reloading is to combine both methods following first opening of IPython:Loading modules before doing this will cause them not to be reloaded, even with a manual reload(module_name). I still, very rarely, get inexplicable problems with class methods not reloading that I've not yet looked into.
Module named importlib allow to access to import internals. Especially, it provide function importlib.reload():In contrary of %autoreload, importlib.reload() also reset global variables set in module. In most cases, it is what you want.importlib is only available since Python 3.1. For older version, you have to use module imp.
On Jupyter Notebooks on Anaconda, doing this:produced the message:The autoreload extension is already loaded. To reload it, use:    %reload_ext autoreloadIt looks like it's preferable to do:Version information: The version of the notebook server is 5.0.0 and is running on:  Python 3.6.2 |Anaconda, Inc.| (default, Sep 20 2017, 13:35:58) [MSC v.1900 32 bit (Intel)]


Answer URL
https://docs.python.org/3/library/importlib.html
https://docs.python.org/3/library/importlib.html#importlib.reload
https://docs.python.org/3/library/imp.html
