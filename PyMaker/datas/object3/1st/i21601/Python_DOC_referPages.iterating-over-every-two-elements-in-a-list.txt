Natural Text
How do I make a for loop or a list comprehension so that every iteration gives me two elements?Output:
You need a pairwise() (or grouped()) implementation.For Python 2:Or, more generally:In Python 3, you can replace izip with the built-in zip() function, and drop the import.All credit to martineau for his answer to my question, I have found this to be very efficient as it only iterates once over the list and does not create any unnecessary lists in the process. N.B: This should not be confused with the pairwise recipe in Python's own itertools documentation, which yields s -> (s0, s1), (s1, s2), (s2, s3), ..., as pointed out by @lazyr in the comments.
Well you need tuple of 2 elements, soWhere:data[0::2] means create subset collection of elements that (index % 2 == 0)zip(x,y) creates a tuple collection from x and y collections same index elements.

A simple solution.
While all the answers using zip are correct, I find that implementing the functionality yourself leads to more readable code:The it = iter(it) part ensures that it is actually an iterator, not just an iterable. If it already is an iterator, this line is a no-op.Usage:
Apologies for being late.I hope this will be even more elegant way of doing it.
In case you're interested in the performance, I did a small benchmark to compare the performance of the solutions and I included a function from one of my packages: iteration_utilities.grouperWindows 10 64 bit Anaconda Python 3.6So if you want the fastest solution without external dependencies you probably should just use the approach given by Johnysweb (at the time of writing it's the most upvoted and accepted answer).If you don't mind the additional dependency then the grouper from iteration_utilities will probably be a bit faster.Additional thoughtsSome of the approaches have some restrictions, that haven't been discussed here.For example a few solutions only work for sequences (that is lists, strings, etc.), for example Margus/pyanon/taskinoor solutions which uses indexing while other solutions work on any iterable (that is sequences and generators, iterators) like Johnysweb/mic_e/my solutions.Then Johnysweb also provided a solution that works for other sizes than 2 while the other answers don't (okay, the iteration_utilities.grouper also allows setting the number of elements to "group").Then there is also the question about what should happen if there is an odd number of elements in the list. Should the remaining item be dismissed? Should the list be padded to make it even sized? Should the remaining item be returned as single? The other answer don't address this point directly, however if I haven't overlooked anything they all follow the approach that the remaining item should be dismissed (except for taskinoors answer - that will actually raise an Exception).With grouper you can decide what you want to do:
zip(*iterable) returns a tuple with the next element of each iterable.l[::2] returns the 1st, the 3rd, the 5th, etc. element of the list: the first colon indicates that the slice starts at the beginning because there's no number behind it, the second colon is only needed if you want a 'step in the slice' (in this case 2).l[1::2] does the same thing but starts in the second element of the lists so it returns the 2nd, the 4th, 6th, etc. element of the original list.
Use the zip and iter commands together:I find this solution using iter to be quite elegant:Which I found in the Python 3 zip documentation.To generalise to N elements at a time:
For anyone it might help, here is a solution to a similar problem but with overlapping pairs (instead of mutually exclusive pairs).From the Python itertools documentation:Or, more generally:
you can use more_itertools package.
I need to divide a list by a number and fixed like this. 
The title of this question is misleading, you seem to be looking for consecutive pairs, but if you want to iterate over the set of all possible pairs than this will work :
Using typing so you can verify data using mypy static analysis tool:
A simplistic approach:this is useful if your array is a and you want to iterate on it by pairs. To iterate on triplets or more just change the "range" step command, for example:(you have to deal with excess values if your array length and the step do not fit) 
Thought that this is a good place to share my generalization of this for n>2, which is just a sliding window over an iterable:
Here we can have alt_elem method which can fit in your for loop.Output:Note: Above solution might not be efficient considering operations performed in func.



Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/itertools.html
https://docs.python.org/3/library/functions.html#zip
