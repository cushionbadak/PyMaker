Natural Text
Can someone share the best practices for creating a nonce for an OAuth request in Python?
Here's how python-oauth2 does it:They also have:Additionally there is this issue entitled: "make_nonce is not random enough", which proposes:And also references CVE-2013-4347. TL;DR version, use os.urandom or the abstracted interface to it (SystemRandom).I like my lambdas—and didn't want non-alphanumeric characters—so I used this:
Nonce should be both used only once and hard to predict:uuid4() uses os.urandom() which is best random you can get in python. Note that uuid4() is harder to predict than uuid1() whereas later is more globally unique. You can concatenate the two to achieve both goals:
Here's what rauth does. There's not really hard and fast rules here. The spec doesn't seem too opinionated. Your constraints are that the value, being a nonce, should be unique. Other than that, assuming the provider doesn't complain, you can use whatever method you like.
Here are a few ideas I got for emailage. The generate_nonce comes from their code, but I use generate_nonce_timestamp which I used uuid for. It gives me a random alpha-numeric string and a time stamp in seconds:I like using uuid1, since it generates the uuid based on current host and time and has the time property that you can extract if you need both. For emailage, you need both the timestamp and the nonce.Here is what you get:If you want to remove the -, use nonce.get_hex().uuid1 - Generate a UUID from a host ID, sequence number, and the current time.More on uuid.
While this probably does not exist at the time of this question creation, Python 3.6 introduced the secrets module which is meant for generating cryptographically strong random numbers suitable for managing data such as passwords, account authentication, security tokens, and related secrets.In this case, generating a nonce can be generated easily (here a base64 encoded string):Alternatives are token_bytes to get a binary token or token_hex to get an hexadecimal string.


Answer URL
https://docs.python.org/3/library/secrets.html
https://docs.python.org/3/library/secrets.html#secrets.token_bytes
https://docs.python.org/3/library/secrets.html#secrets.token_hex
