Natural Text
I have a large list like:I want to build a multi-level dict like:I know that if I use recursive defaultdict I can write table[A][B1][C1]=1, table[A][B2]=2, but this works only if I hardcode those insert statement. While parsing the list, I don't how many []'s I need beforehand to call table[key1][key2][...].
You can do it without even defining a class:
Your example says that at any level there can be a value, and also a dictionary of sub-elements. That is called a tree, and there are many implementations available for them. This is one:Outputs:You could do something similar by writing the input in JSON and using json.load to read it as a structure of nested dictionaries. 
I'd do it with a subclass of dict that defines __missing__:You can't do it directly with defaultdict because defaultdict expects the factory function at initialization time, but at initialization time, there's no way to describe the same defaultdict. The above construct does the same thing that default dict does, but since it's a named class (NestedDict), it can reference itself as missing keys are encountered. It is also possible to subclass defaultdict and override __init__.
I think the simplest implementation of a recursive dictionary is this. Only leaf nodes can contain values.Usage:Output:
This is equivalent to the above, but avoiding lambda notation. Perhaps easier to read ?Also -- from the comments -- if you'd like to update from an existing dict, you can simply callIn order to add values to the dict.
Dan O'Huiginn posted a very nice solution on his journal in 2010:http://ohuiginn.net/mt/2010/07/nested_dictionaries_in_python.html
A slightly different possibility that allows regular dictionary initialization:   Example:
To add to @Hugo To have a max depth:
You may achieve this with a recursive defaultdict.It is important to protect the default factory name, the_tree here, in a closure ("private" local function scope).  Avoid using a one-liner lambda version, which is bugged due to Python's late binding closures, and implement this with a def instead.The accepted answer, using a lambda, has a flaw where instances must rely on the nested_dict name existing in an outer scope. If for whatever reason the factory name can not be resolved (e.g. it was rebound or deleted) then pre-existing instances will also become subtly broken:
Have table['A']=defaultdict().


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
