Natural Text
For example, I have two lists  Is there a built-in function in python to do this?
If the order is not important, you should use set.difference. However, if you want to retain order, a simple list comprehension is all it takes.EDIT: As delnan says, performance will be substantially improved if subset_of_A is an actual set, since checking for membership in a set is O(1) as compared to O(n) for a list.
Yes, the filter function:
set(A)-set(subset_of_A) gives your the intended result set, but it won't retain the original order. The following is order preserving:
No, there is no build in function in python to do this, because simply:  will provide you the answer.
tuple(set([6, 7, 8, 9, 10, 11, 12]).difference([6, 9, 12]))
This was just asked a couple of days ago (but I cannot find it):It might be better to use sets from the beginning, depending on the context. Then you can use set operations like other answers show. However, converting lists to sets and back only for these operations is slower than list comprehension.
How about
Use the Set type:




Answer URL
https://docs.python.org/3/library/functions.html#filter
