Natural Text
There are several ways to write to stderr:That seems to contradict zen of Python #13 †, so what's the difference here and are there any advantages or disadvantages to one way or the other? Which way should be used?† There should be one — and preferably only one — obvious way to do it.
I found this to be the only one short + flexible + portable + readable:The function eprint can be used in the same way as the standard print function:
Is my choice, just more readable and saying exactly what you intend to do and portable across versions.  Edit: being 'pythonic' is a third thought to me over readability and performance... with these two things in mind, with python 80% of your code will be pythonic. list comprehension being the 'big thing' that isn't used as often (readability).
For Python 2 my choice is:print >> sys.stderr, 'spam'Because you can simply print lists/dicts etc. without convert it to string. print >> sys.stderr, {'spam': 'spam'}instead of:sys.stderr.write(str({'spam': 'spam'}))
print >> sys.stderr is gone in Python3.http://docs.python.org/3.0/whatsnew/3.0.html says:Unfortunately, this is quite ugly. Alternatively, usebut note that write is not a 1:1 replacement for print.
Nobody's mentioned logging yet, but logging was created specifically to communicate error messages. By default it is set up to write to stderr. This script:has the following result when run on the command line:(and bar.txt contains the 'hello world')(Note, logging.warn has been deprecated, use logging.warning instead)
I would say that your first approach:is the "One . . . obvious way to do it"  The others don't satisfy rule #1 ("Beautiful is better than ugly.")
I did the following using Python 3:So now I'm able to add keyword arguments, for example, to avoid carriage return:
This will mimic the standard print function but output on stderr
EDIT In hind-sight, I think the potential confusion with changing sys.stderr and not seeing the behaviour updated makes this answer not as good as just using a simple function as others have pointed out.Using partial only saves you 1 line of code. The potential confusion is not worth saving 1 line of code.originalTo make it even easier, here's a version that uses 'partial', which is a big help in wrapping functions.You then use it like soYou can check that it's printing to stderr and not stdout by doing the following (over-riding code from http://coreygoldberg.blogspot.com.au/2009/05/python-redirect-or-turn-off-stdout-and.html):The downside to this is partial assigns the value of sys.stderr to the wrapped function at the time of creation. Which means, if you redirect stderr later it won't affect this function.If you plan to redirect stderr, then use the **kwargs method mentioned by aaguirre on this page.
The same applies to stdout:As stated in the other answers, print offers a pretty interface that is often more convenient (e.g. for printing debug information), while write is faster and can also be more convenient when you have to format the output exactly in certain way. I would consider maintainability as well:You may later decide to switch between stdout/stderr and a regular file.print() syntax has changed in Python 3, so if you need to support both versions, write() might be better.
I am working in python 3.4.3.  I am cutting out a little typing that shows how I got here:Did it work?  Try redirecting stderr to a file and see what happens:Well, aside from the fact that the little introduction that python gives you has been slurped into stderr (where else would it go?), it works.
If you do a simple test:You will find that sys.stderr.write() is consistently 1.81 times faster!
Try: 
Answer to the question is : There are different way to print stderr in python but that depends on  1.) which python version we are using  2.) what exact output we want.The differnce between print and stderr's write function:stderr : stderr (standard error) is pipe that is built into every UNIX/Linux system, when your program crashes and prints out debugging information (like a traceback in Python), it goes to the stderr pipe.print: print is a wrapper that formats the inputs (the input is the space between argument and the newline at the end) and it then calls the write function of a given object, the given object by default is sys.stdout, but we can pass a file i.e we can print the input in a file also.Python2:If we are using python2 thenPython2 trailing comma has in Python3 become a parameter, so if we use  trailing commas to avoid the newline after a print, this will in  Python3 look like print('Text to print', end=' ') which is a syntax  error under Python2.http://python3porting.com/noconv.htmlIf we check same above sceario in python3:Under Python 2.6 there is a future import to make print into a  function. So to avoid any syntax errors and other differences we  should start any file where we use print() with from future import  print_function. The future import only works under Python 2.6 and  later, so for Python 2.5 and earlier you have two options. You can  either convert the more complex print to something simpler, or you can  use a separate print function that works under both Python2 and  Python3.Case: Point to be noted that sys.stderr.write() or sys.stdout.write()  ( stdout (standard output) is a pipe that is built into every  UNIX/Linux system) is not a replacement for print, but yes we can use  it as a alternative in some case. Print is a wrapper which wraps the  input with space and newline at the end and uses the write function to  write. This is the reason  sys.stderr.write() is faster.Note: we can also trace and debugg using Logginghttps://docs.python.org/2/library/logging.html#logger-objects
In Python 3, one can just use print():almost out of the box:or:This is straightforward and does not need to include anything besides sys.stderr.
pydoc logging


Answer URL
https://docs.python.org/3/library/logging.html#logging.warning
https://docs.python.org/3/library/functions.html#print
