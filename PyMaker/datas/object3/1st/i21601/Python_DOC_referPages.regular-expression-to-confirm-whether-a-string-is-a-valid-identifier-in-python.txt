Natural Text
I have the following definition for an Identifier:Basically I have an identifier function  that  gets a string from a file and tests it to make sure that it's a valid identifier as defined above.I've tried this:but when I run my  program every time it meets an integer it  thinks that  it's a valid identifier.For example it  prints c as a valid identifier which is fine, but it also prints 0 as a valid identifer.What  am I doing  wrong here?
From official reference: identifier ::=  (letter|"_") (letter | digit | "_")*So the regular expression is:Example (for Python 2 just omit re.UNICODE):Result:
For Python 3, you need to handle Unicode letters and digits. So if that's a concern, you should get along with this: [^\d\W] matches a character that is not a digit and not "not alphanumeric" which translates to "a character that is a letter or underscore".
\w matches digits and characters. Try ^[_a-zA-Z]\w*$
str.isidentifier() works. The regex answers incorrectly fail to match some valid python identifiers and incorrectly match some invalid ones.str.isidentifier() Return true if the string is a valid identifier  according to the language definition, section Identifiers and  keywords.Use keyword.iskeyword() to test for reserved identifiers such as def  and class.@martineau's comment gives the example of '℘᧚' where the regex solutions fail.Why does this happen?Lets define the sets of code points that match the given regular expression, and the set that match str.isidentifier.How many regex matches are not identifiers?How many identifiers are not regex matches?Interesting -- which ones?What's different about these two sets?They have different Unicode "General Category" values.From wikipedia, that's Letter, modifier; Letter, other; Number, other. This is consistent with the re docs, since \d is only decimal digits:\d Matches any Unicode decimal digit (that is, any character in Unicode character category [Nd])What about the other way?That's Mark, nonspacing; Symbol, math; Symbol, other.Where is this all documented?In the Python Language ReferenceIn PEP 3131 - Supporting non-ascii identifiers Where is it implemented?https://github.com/python/cpython/commit/47383403a0a11259acb640406a8efc38981d2255I still want a regular expressionLook at the regex module on PyPI.This regex implementation is backwards-compatible with the standard ‘re’ module, but offers additional functionality.It includes filters for "General Category".
Works like a charm: r'[^\d\W][\w\d]+'


Answer URL
https://docs.python.org/3/library/re.html
https://docs.python.org/3/reference/lexical_analysis.html#identifiers
