Natural Text
I'm trying to take user input that is separated by a comma and create a list from the entered data. For example, the user inputs 1,2,3,4,5.6,7 and I build a list [1,2,3,4,5.6,7]. I also want to make sure that there will not be any letters, but allow spaces, single dots, and numbers. If the user inputs 1,2,3,4.4.3,a, for example, it should  return a blank [] list. So far I have createdI'm stuck on how I can check if entered numbers would meet these requirements. Thanks for any help!By the way, this was a problem I received from a teacher who was giving out practice problems before a quiz but I cannot figure out and he will go over the problems the same day of the quiz which is really too late for me to learn it. This isn't for a grade.
The simple way to do this is to walk the string character by character. But if you're teacher suggested splitting on dots, I think he wanted something like this pseudocode:If you know the strip, split, all, and isdigit functions, this should be even shorter and more readable in Python than in pseudocode. The documentation for Built-In Functions and String Methods should fill in the gaps if you don't know everything.Now, to see if the input as a whole is valid, you need to split on commas and check each part, so:If those comprehensions are beyond your knowledge, you can write the same thing more verbosely as:Here's the entire thing:And here's a transcript:It's worth testing out some of the expressions in the interactive interpreter to see what they do. And adding some print statements in the middle of the code to show you intermediate values, if you're not sure what they are. For example, if you don't know what gets fed to is_numeric, have it print(s). If you want to know what .split('.', 1) returns for different strings, try it: '1.2.3'.split('.', 1), '1.2'.split('.', 1), '1'.split('.', 1). And so on.
I'd solve this with regex. 
First I'd normalize the input so I know what to expect. Spaces are slightly easier to deal with than commas, so separate everything by a space.Now input is something like '2 3 4.5   6' with some nonzero number of spaces between each value to be parsed. split can deal with that nicely.Now we have a list, and we just need to know if we need to throw it away.So, what is is_numeric? It's a function that, given an element, determines if it is an int or a float or not. If it's not one of those, we toss it. mgilson suggested something likewhich would be great, but if you don't want to do try/except, you can still use the second argument to split your teacher suggested.


Answer URL
