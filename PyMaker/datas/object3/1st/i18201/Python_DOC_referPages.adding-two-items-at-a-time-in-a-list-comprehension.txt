Natural Text
I want to add two items at a time to a list comprehension. One item is constant. How can this be achieved using only one for loop inside of a list comprehension, and no additional functions. Answers that do not use any import will be favored.Take a look at at the following:I am trying to make a list with the character ^ prepended before each letter in lower case. In this example, you need to use sum to flatten the list. However, my question is, if it is possible to make a flat list in the first place. The output above is the desired output.As in, append something constantly before a variable that changes with each iteration of the for loop. One cannot use two for loops here, as that would be too simple, for example:If one does something like this:You get lists within lists. Thus, is there a way that you can append two items at a time in a list comprehension without have to use an addition for loop or an additional function like sum? I ask this, because its something quite simple, yet I can't find a way to do it. If one tries to do the following:The attempt gives a SyntaxError. So, is what I'm asking impossible to do in Python? Using () gives me a list of tuples.I've also tried using the splat/unpacking operator:But as above, this too is a syntax error. Sorry for this late edit, but I have tried the following:But the above still required an import.
You can start with this:which gives:So this would give the desired output:And another way:which gives:
You can use itertools.chain.from_iterable, this is equivalent to that nested list comprehension version but slightly efficient(for large lists):In Python 3.3+ you can also use yield from in a generator function:


Answer URL
