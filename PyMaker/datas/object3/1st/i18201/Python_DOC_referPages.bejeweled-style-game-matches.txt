Natural Text
I am working on designing a bejeweled style game with a twist.  Rather than trying to match all the blocks of the same shape, you are trying to match a pair of letters.  The board will always have roughly 10 letters on the board and you are trying to get them together.  There are three different color blocks.  Each color has 1 blank block and then 5 blocks with different letters.  The goal is to get say a red "T" block next to a red "A" block.  This is where I am running into problems.Right now, the code will clear from the board three or more of the same color and letter.  So, if I can get three red "T" blocks next to each other they will clear.  The code basically scans each line looking for a group of three (or more).  I have tried to modify the code so it will clear even just the same color (regardless of letter combo) but I can't even get that working.  I think it has to do with how I load the images.  I have posted most of the code (without any of my crazy modifications to try and get this working since it just broke it) that deals with loading the images and finding matches.  Can anybody help me modify the code so it can at least find one correct match.  When a red "T" block is next to a red "A" block and a blank red block, it should be classified as a match and be removed from the board.  It doesn't need to be anything that complex as long as it works.  Thanks for any help!Find matches code:Image loading:EDIT:Since this post, a lot has changed and been updated with the game.  It has sound and background music, the groundwork for a new scoring system, a new timer system, and I can specify which rare shape I want to appear in a specific spot on the grid when the game first starts.  However, I am still having issues with the core gameplay.  I hate to drag up and older post, but I am at a loss as to how to get this to work.  I have messed around with the code dealing with matches with no luck.  Basically, the rareshapes are assigned numbers.  So, a red A is 0, a red T is 3, all the way up to a yellow T which is 14.  For the gameplay to work the way we intend, the user will need to get a red A (0), a red T(3), and 2 blank red squares next to each other for it to be a valid match and clear from the board.  This is the ONLY correct way you can clear squares from the board.  Getting 4 blank squares of the same color next to each other DOES NOT remove them.However, the code needs to detect if they get an invalid pair as well.  For example, if they get a red A(0), a red C(1), and two blank red squares, it will disappear but count as a strike against them.  The goal of the game is to remove all the letter blocks before time runs out without getting three strikes.  Since we can specify how many and where letter blocks appear now, it just comes down to the matching.  Does anybody have any idea how to make this work?  
I was reading the code you posted, and I said to myself, that looks pretty good — one-dimensional board representation, well-named variables, use of itertools.groupby — that's pretty much how I would have written it myself. And then I remembered that I had written it myself. Still, I'm glad to see someone's making use of my code!(Having said that, I notice that you removed the docstring. Why did you do that? Put it back right away!)Anyway, this match finder uses itertools.groupby to find runs of identical items in a sequence. Or rather, since a key function is given, runs of items where the key function returns identical results.You can see that the key function as written just returns the image at the board location. This means that board locations match so long as they contain identical images. But you want to relax that: you want board locations to match so long as they contain images of the same colour.So you need to revise the key function so that it returns the colour of the image at the board location. For example, when you loaded the images you could create a dictionary mapping images to their colour:and then in the key function you could look up the image to find its colour:


Answer URL
