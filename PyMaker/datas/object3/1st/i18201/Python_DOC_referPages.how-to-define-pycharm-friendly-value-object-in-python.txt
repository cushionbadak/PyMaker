Natural Text
I'm curious about good way to define value object in Python. Per Wikipedia: "value object is a small object that represents a simple entity whose equality isn't based on identity: i.e. two value objects are equal when they have the same value, not necessarily being the same object". In Python that essentially means redefined __eq__ and __hash__ methods, as well as immutability.Standard namedtuple seems like almost perfect solution with exception that they don't play well with modern Python IDE like PyCharm. I mean that IDE will not really provide any helpful insights about class defined as namedtuple. While it's possible to attach docstring to such class using trick like this:there's simply no place where to put description of constructor arguments and specify their types. PyCharm is smart enough to guess arguments for Point2D "constructor", but type-wise it's blind.This code have some type information pushed in, but it's not very useful:PyCharm will see types when constructing new objects, but will not grasp that point.x and point.y are floats, so would not not help to detect their misuse. And I also dislike the idea of redefining "magic" methods on routine basis.So I'm looking for something that will be:just as easy to define as normal Python class or namedtupleprovide value semantics (equality, hashes, immutability)easy to document in a way that will play nicely with IDEIdeal solution could look like this:Or that:I tried to find something like this but without success. I thought that it will be wise to ask for help before implementing it by myself.UPDATE:With help of user4815162342 I managed to come up with something that works. Here's the code:It's very far from an ideal solution. Class declaration looks like this:It's total FOUR times to list all attributes: in __slots__, in ctor arguments, in docstring and in ctor body. So far I have no idea how to make it less awkward.
Your requirements, although carefully expressed, are not quite clear to me, partly because I don't use the PyCharm GUI. But here is an attempt:Usage is like this:This gets you a concrete value class with two read-only slots and an autogenerated constructor, __eq__, and __hash__. For example:If you want, you can define your own __init__ with the docstring that (presumably) provides your IDE with type annotation hints.
New in version 3.5: The typing module and NamedTupleIn version 3.5, the typing module has been added, in it, you will find a class that perfectly fits your needs.The new NamedTupleIt works just as you'd expect:Simple type definition:Recognized in PyCharm:Note:As of today, the API is still in a provisional stage. It means it isn't guaranteed to be backwards compatible when new version is released. Changes to the interface though are not expected. My personal take on it is: given the simplicity of the design, if change there is, I am sure it will be an easy refactor ;)


Answer URL
https://docs.python.org/3/library/typing.html
https://docs.python.org/3/library/typing.html#typing.NamedTuple
https://docs.python.org/3/glossary.html#term-provisional-api
