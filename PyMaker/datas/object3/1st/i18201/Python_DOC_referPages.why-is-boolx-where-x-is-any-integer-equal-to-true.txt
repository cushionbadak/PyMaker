Natural Text
I expected bool(1) to equate to True using Python - it does - then I expected other integers to error when converted to bool but that doesn't seem to be the case:What is happening? Am I misunderstanding bool(x) - does this not convert x to a Boolean data type?A lot of comments about why I find this counter-intuitive. If I write the above like the below then, on first sight with no knowledge of the language, it would seem counter-intuitive:
From 5.1 Truth Value Testing:The following values are considered false:NoneFalsezero of any numeric type, for example, 0, 0L, 0.0, 0j.any empty sequence, for example, '', (), [].any empty mapping, for example, {}.instances of user-defined classes, if the class defines a __nonzero__() or __len__() method, when that method returns the integer zero or bool value False.All other values are considered true â€” so objects of many types are  always true.
bool's purpose is not to convert a value to the bool data type, per se. Rather, it returns whether the value is truthy, i.e. it behaves in the same manner that this function does:From the docs:bool([x])Convert a value to a Boolean, using the standard truth testing procedure [see Rohit's answer]. If x is false or omitted, this returns False; otherwise it returns True. bool is also a class, which is a subclass of int. Class bool cannot be subclassed further. Its only instances are False and True.In the case of ints, the only non-truthy integer is 0.
bool(x) converts its argument to Bool by using the standard truth testing procedure. Anything that would return true on an if test, for example, will return True when passed as the argument to bool.Check Truth Value Testing to see which values are treated as True or False in Python
As other posters have mentioned, its giving true on any non-zero integer. Its kind of similar to other things in python, like mentioned here:Python 'If not' syntax(Rohit quotes a good paragraph about truth testing)


Answer URL
