Natural Text
IntroductionDisclaimer: I'm very new to python packaging with distutils. So far I've just stashed everything into modules, and packages manually and developed on top of that. I never wrote a setup.py file before.I have a Fortran module that I want to use in my python code with numpy. I figured the best way to do that would be f2py, since it is included in numpy. To automate the build process I want to use distutils and the corresponding numpy enhancement, which includes convenience functions for f2py wrappers.I do not understand how I should organize my files, and how to include my test suite.What I want is the possibility to use ./setup.py for building, installing, and testing, and developing.My directory structure looks as follows:And the setup.py file contains this:After running ./setup.py build I get.Which includes neither the __init__.py file, nor the tests.QuestionsIs it really necessary to add the path to every single source file of the extension? (I.e. volterra/integral.f90) Can't I give a parameter which says, look for stuff in volterra/? The top_path, and package_dir parameters didn't do the trick.Currently, the __init__.py file is not included in the build. Why is that?How can I run my tests in this setup?What's the best workflow for doing development in such an environment? I don't want to install my package for every single change I do. How do you do development in the source directory when you need to compile some extension modules?
Here is a setup.py that works for me:To install, at the command line I use:The only issue I seem to have is a minor one.  when I look in site-packages for my package it is installed inside the egg folder C:\Python27\Lib\site-packages\pkg-0.1.0-py2.7-win32.egg\pkg.  Most other packages I see there have a C:\Python27\Lib\site-packages\pkg folder separate to the egg folder.  Does anyone know how to get that separation?As for testing, after installing,  I type the following at the command line:Try investigating python setup.py develop (Python setup.py develop vs install) for not having to install the package after every change.As I commented in the code I found the following useful:numpy setup.py: https://github.com/numpy/numpy/blob/master/setup.py 2013-11-07winpython setup.py: http://code.google.com/p/winpython/source/browse/setup.py 2013-11-07needing to use     import setuptools; from numpy.distutils.core import setup, Extension:     http://comments.gmane.org/gmane.comp.python.f2py.user/707 2013-11-07wrapping FORTRAN code with f2py: http://www2-pcmdi.llnl.gov/cdat/tutorials/f2py-wrapping-fortran-code 2013-11-07numpy disutils: http://docs.scipy.org/doc/numpy/reference/distutils.html 2013-11-07manifest files in disutils:     'distutils doesn't properly update MANIFEST. when the contents of directories change.'    https://github.com/numpy/numpy/blob/master/setup.py if things are not woring try deleting build, sdist, egg directories  and try again:     https://stackoverflow.com/a/9982133/2530083 2013-11-07getting fortran extensions to be installed in their appropriate sub package    i.e. "my_ext = Extension(name = 'my_pack._fortran', sources = ['my_pack/code.f90'])"     Note that sources is a list even if one file:     http://numpy-discussion.10968.n7.nabble.com/f2py-and-setup-py-how-can-I-specify-where-the-so-file-goes-tp34490p34497.html 2013-11-07install fortran source files into their appropriate sub-package     i.e. "package_data={'': ['.f95','.f90']}# Note it's a dict and list":    https://stackoverflow.com/a/19373744/2530083 2013-11-07Chapter 9 Fortran Programming with NumPy Arrays:     Langtangen, Hans Petter. 2013. Python Scripting for Computational Science. 3rd edition. Springer.Hitchhikers guide to packaging :    http://guide.python-distribute.org/Python Packaging: Hate, hate, hate everywhere :     http://lucumr.pocoo.org/2012/6/22/hate-hate-hate-everywhere/How To Package Your Python Code:     http://www.scotttorborg.com/python-packaging/install testing requirements:     https://stackoverflow.com/a/7747140/2530083 2013-11-07'python setup.py develop' :     https://stackoverflow.com/a/19048754/2530083
Here is setup.py from a project I made. I have found figuring out setup.py / packaging to be frustrating with no solid answers and definitely not pythonic in the sense of having one and only one obvious way to do something. Hopefully this will help a little.The points you may find useful are:find_packages which removes the drudgery of including lots of files or messing around with generating manifest.package_data which allows you to easily specify non .py files to be includedinstall_requires / tests_requireYou'll need to find the source for distribute_setup.py if you don't have it already.Is it really necessary to add the path to every single source file of  the extension? (I.e. volterra/integral.f90) Can't I give a parameter  which says, look for stuff in volterra/? The top_path, and package_dir  parameters didn't do the trick.Currently, the init.py file is not  included in the build. Why is that?Hopefully find_packages() will solve both of those. I don't have much experience packaging but I haven't had to go back to manual inclusion yet.How can I run my tests in this  setup?I think this is probably a different question with many answers depending on how you are doing tests. Maybe you can ask it separately?As a side note, I am under the impression that the standard is to put your tests directory at the top level. I.e. volterra/volterra and volterra/tests.What's the best workflow for doing development in such an  environment? I don't want to install my package for every single  change I do. How do you do development in the source directory when  you need to compile some extension modules?This might be worth another question as well. I don't see why you would need to install your package for every single change. If you are uploading the package, just don't install it on your dev system (except to test installation) and work directly from your development copy. Maybe I'm missing something though since I don't work with compiled extensions.Here is the example 


Answer URL
