Natural Text
I've been exposed to C/C++/Java like syntax over the years, and the way that Python variables are defined just sort of confuses me. Can anyone describe what the differences are among the three mentioned in the q?
self works just like the this from C++ and Java. You get a reference to an object that you can then access with the . operator  (-> in C++).In Python the only way of accessing instance variables is explicitely through self. Instance variables are not placed in the same "normal" scope as local or global variables are.
A global variable is just that -- a variable that is accessible globally. A local variable is one that is only accessible to the current scope, such as temporary variables used in a single function definition. An instance variable (e.g.: when using the self. prefix) is data that is associated with a specific instance of an object. Of course, you can also reference instance objects outside of the object by using object.x where object is a reference to that object. If a variable is prefixed with self, it is neither local nor global. It is part of the makeup of a specific instance of an object. Roughly speaking, an instance variable represents a property of a specific object. In the following example, lx is a local variable, local to the method greet. gx is a global variable accessible anywhere in the module, ix is an instance variable that could have a unique value for each instance of the object. When referenced inside of the object definition you would refer to ix with the prefix self, and when outside the object with a prefix of the object reference.
Sometimes it is really useful to return to first principles:When we talk about a variable being local or global we are referring to its 'scope' (or context). Variables inside a function are considered local to the function. Here are illustrations from Swaroop's excellent guide, 'A Byte of Python':output:x is 50Changed local x to 2x is still 50Next is an illustration of how a global variable traverses context between the inside and outside of a function:output:x is 50Changed global x to 2Value of x is 2That is all there is to it.When we utilize the Object Oriented programming aspects of Python, then the notion of 'self' becomes relevant. Class instances and instances are considered to be 'objects' and the 'self.' prefix allows our code to differentiate between whether we are referring to a local/global variable or to attributes of an object. Once again, the concept is explained with zen-like simplicity by Swaroop.


Answer URL
https://docs.python.org/3/tutorial/introduction.html
