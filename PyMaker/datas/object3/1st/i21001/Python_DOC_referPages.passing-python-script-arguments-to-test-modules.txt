Natural Text
I have several test modules that are all invoked together via a driver script that can take a variety of arguments.  The tests themselves are written using the python unittest module.  My issue is that, within these test modules, I have certain tests I'd like to skip based on different parameters passed to the driver. I'm aware that unittest provides a family of decorators meant to do this, but I don't know the best way to pass this information on to the individual modules.  If I had a --skip-slow argument, for example, how could I then annotate tests as slow, and have them skipped?Thank you for your time.
I had in fact been wondering this myself, and finally found the solution.main file...And in your test modules, just do:I tested this out, and it worked rather nicely. Nice thing is how simple it is, and it's not too much of a hack at all.
You can use nose test runner with the attrib plugin that lets you select test cases based on attributes. In particular, the example in the plugin documentation uses @attr(slow) to mark slow test cases.After that, from the command line:To select all the test cases marked as slow:$ nosetests -a slowTo select all the test cases not marked as slow:$ nosetests -a '!slow'
Here's how I solved this problem. At the bottom of my module, I put this code to set a global variable based on the presence of a --slow argument in argv:Then at the beginning of test functions which would be slow to run, I put this statement. It raises the unittest.SkipTest() exception if the flag isn't set to include slow tests.Then when I invoke the module normally, the slow tests are skipped. And when I add the --slow, the slow tests in that module run:Unfortunately, this doesn't work with Unittest's test discovery. It also didn't work to use the @unittest.SkipUnless() decorator. I suspect this is because the decorator evaluates its arguments at module definition time, but the argument isn't set to the correct value until module run time, which is later.It isn't perfect, but it lets me work within the Python standard library. A requirement like this is a good reason to adopt a better framework, such as nose tests. For my current project, I prefer to avoid installing any outside modules. 


Answer URL
https://docs.python.org/3/library/unittest.html#skipping-tests-and-expected-failures
https://docs.python.org/3/library/unittest.html#test-discovery
