Natural Text
I am using Python 3.5.1. I read the document and the package section here: https://docs.python.org/3/tutorial/modules.html#packagesNow, I have the following structure:module.py:Now, while in /home/wujek/Playground:Similarly, now in home, superfolder of Playground:Actually, I can do all kinds of stuff:Why does this work? I though there needed to be __init__.py files (empty ones would work) in both a and b for module.py to be importable when the Python path points to the Playground folder?This seems to have changed from Python 2.7:With __init__.py in both ~/Playground/a and ~/Playground/a/b it works fine.
Python 3.3+ has Implicit Namespace Packages that allow it to create a packages without an __init__.py file.Allowing implicit namespace packages means that the requirement to provide an __init__.py file can be dropped completely, and affected ... . The old way with __init__.py files still works as in Python 2.
IMPORTANT@Mike's answer is correct but too imprecise. It is true that Python 3.3+ supports Implicit Namespace Packages that allows it to create a package without an __init__.py file.This however, ONLY applies to EMPTY __init__.py files. So EMPTY __init__.py files are no longer necessary and can be omitted. If you want to run a particular initialization script when the package or any of its modules or sub-packages are imported, you still require an __init__.py file. This is a great Stack Overflow answer for why you would want to use an __init__.py file to do some further initialization in case you wondering why this is in any way useful.Directory Structure Example:parent_package/child_package/__init__.py:EXAMPLESThe below examples demonstrate how the initialization script is executed when the child_package or one of its modules is imported.Example 1:Example 2:
I would say that one should omit the __init__.py only if one wants to have the implicit namespace package. If you don't know what it means, you probably don't want it and therefore you should continue to use the __init__.py even in Python 3.


Answer URL
https://docs.python.org/3/tutorial/modules.html#packages
