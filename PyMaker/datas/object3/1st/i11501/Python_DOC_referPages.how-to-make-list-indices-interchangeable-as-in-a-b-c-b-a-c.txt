Natural Text
Since ['a', 'b', 'c'] and ['b', 'a', 'c'] have the same elements, but ['a', 'b', 'c'] == ['b', 'a', 'c'] test in python returns False.I understand that this is due to index sequence. But how to make python recognise that actually the elements in the list are the same?Here is an example I did that failed the test:
There's no way to create a regular list that will be equal to both ['a', 'b', 'c'] and ['b', 'a', 'c']. If you need special semantics for == comparisons, you probably need to write your own type:
Not sure if this really qualifies as an answer, but if you're simply trying to check for equality between the two lists you can do a couple of things.For lists list1 and list2:Use setUse sorted, won't work for multiple recurring elementsUse allUse any
If you want to check if two lists have the same elements and the same number of occurrences I suggest you use a collections.Counter https://docs.python.org/2/library/collections.html#collections.CounterYou could also use set like some people suggest but you'll lose all duplicates in the list, so set(['a', 'b', 'b']) == set(['b', 'a']) will actually return True
If you want to keep your lists in their original orders but compare them without regard to order then you can use sorted(). This will check if your lists have the same number of elements and the same number of occurrences.For lists, if you don't care about the order of the list you can do:https://docs.python.org/3/howto/sorting.html for list sorting particulars


Answer URL
https://docs.python.org/3/howto/sorting.html
