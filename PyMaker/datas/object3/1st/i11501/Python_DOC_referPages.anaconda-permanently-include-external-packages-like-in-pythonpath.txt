Natural Text
I know how to install packages in Anaconda using conda install and also how to install packages that are on PyPi which is described in the manual.But how can I permanently include packages/folders into the PYTHONPATH of an Anaconda environment so that code that I am currently working on can be imported and is still available after a reboot?My current approach is to use sys:which is not really convenient.Any hints?Thanks in advance!
I found two answers to my question in the Anaconda forum:1.) Put the modules into into site-packages, i.e. the directory $HOME/path/to/anaconda/lib/pythonX.X/site-packages which is always on sys.path. This should also work by creating a symbolic link.2.) Add a .pth file to the directory $HOME/path/to/anaconda/lib/pythonX.X/site-packages. This can be named anything (it just must end with .pth). A .pth file is just a newline-separated listing of the full path-names of directories that will be added to your path on Python startup.  Alternatively, if you only want to link to a particular conda environment then add the .pth file to ~/anaconda3/envs/{NAME_OF_ENVIRONMENT}/lib/pythonX.X/site-packages/Both work straightforward and I went for the second option as it is more flexible.*** UPDATE:3.) Use conda develop i. e. conda-develop /path/to/module/ to add the module which creates a .pth file as described under option 2.).4.) Create a setup.py in the folder of your package and install it using pip install -e /path/to/package which is the cleanest option from my point of view because you can also see all installations using pip list.Thanks anyway!
The preferred solution would be to build your own conda package (information here).Another solution would be to create a link between your package directory and any directory in sys.path. In this way, when you ask python to import your package, anaconda will search through its various sys.path directories and it will read the link to your package as if that package were in one of the sys.path directories.Linking a directory can be performed easily with the ln (link_name) command. As an example:The above link will allow you to import your package in the default environment of anaconda from any directory. This will not affect any of the other environments. If you want to add the package to a specific environment (e.g. - "myenv") within anaconda, you can link the package to one of that particular environment's sys paths:Note the following:Linking your package directory to a sys path, rather than actually moving the package directory to a sys path, allows you to keep your package in your directory of choice.The -s flag generates a soft link (much like a shortcut). If you move your package directory, the link will fail to work. Running ln without the -s flag generates a hard link (like a mirror copy) that will not be affected by moving (or even deleting..) the package directory. The pros and cons of soft links and hard links are debated hereWindows users should utilize mklink. For information, look here.
Just to add to Cord Kaldemeyer's answer above, for the 2nd option.  If you only want to link to a particular conda environment then add the .pth file to ~/anaconda3/envs/{NAME_OF_ENVIRONMENT}/lib/pythonX.X/site-packages/
I'm able to include local modules using the following: I hope it helps.
The way I use to do this, which I believe is the most native to conda, is by creating env_vars.sh files in my environment, as per the official documentation here.For macOS and Linux users, the steps are as follows:Go to your environment folder (e.g. /miniconda1/env/env_name). $CONDA_PREFIX is the environemnt variable for your environment path.Create the activate.d and deactivate.d directories.Inside the each respective directory, create one env_vars.sh file. The one in the activate.d directory will set (or export) your environment variables when you conda activate your environment. The file in the deactivate.d directory will serve to unset the environment variables when you conda deactivate your environment.First edit the $CONDA_PREFIX/etc/conda/activate.d/env_vars.sh to export the desired environment variables.Afterwards, open to edit the $CONDA_PREFIX/etc/conda/deactivate/env_vars.sh, in order to unset the env variables when you conda deactivate like so:Again, the source of my description comes straight from the conda docs here.


Answer URL
https://docs.python.org/3/distutils/setupscript.html
