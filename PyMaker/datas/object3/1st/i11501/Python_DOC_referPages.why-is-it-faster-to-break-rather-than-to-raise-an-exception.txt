Natural Text
After checking a few simple tests, it seems as if it might be faster to break from a loop to end a generator rather than to raise a StopIteration exception. Why is this the case if the standard and accepted method of stopping a generator is using the exception. source
Why is this the case if the standard and accepted method of stopping a generator is using the exception.The exception StopIteration is raised only when the generator has nothing to produce any more. And, it is not a standard way of stopping a generator midway.Here are two statements from the documentation on generators about how to stop them properly:PEP 479 -- Change StopIteration handling inside generators:... the proposal also clears up the confusion about how to terminate a       generator: the proper way is return , not raise StopIteration.PEP 255 -- Simple GeneratorsQ. Why allow "return" at all?  Why not force termination to be spelled       "raise StopIteration"?A. The mechanics of StopIteration are low-level details, much like the         mechanics of IndexError in Python 2.1:  the implementation needs to         do something well-defined under the covers, and Python exposes         these mechanisms for advanced users.  That's not an argument for         forcing everyone to work at that level, though.  "return" means "I'm         done" in any kind of function, and that's easy to explain and to use.         Note that "return" isn't always equivalent to "raise StopIteration"         in try/except construct, either (see the "Specification: Return"         section).So the correct way would be to use a return statement instead of using break or raise StopIteration.it seems as if it might be faster to break from a loop to end a generator rather than to raise a StopIteration exception.Indeed it is because when raising the exception there is more job to do. You can use the dis module to get a look at the bytecode:You can see that almost everything is same but for raising the exception, it has to execute some extra instructions:
If you do a break then it just exits the loop and in your case there is nothing more to do, so it also exits the function.If you raise an exception, then it still has to handle all the exception stuff that is going on in the background.The reason StopIteration may be used (I have never used that one, so don't quote me on that) is to catch it later, or to simply exit a nested loop.I just had a quick look at the source you gave and it seems to me that StopIteration was only used to illustrate how generators work, but it was not used with a generator.I hope that answers your question.


Answer URL
https://docs.python.org/3/library/exceptions.html#StopIteration
