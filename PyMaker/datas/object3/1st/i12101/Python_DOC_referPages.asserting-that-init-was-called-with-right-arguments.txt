Natural Text
I'm using python mocks to assert that a particular object was created with the right arguments. This is how my code looks:Now, I want to assert that installer was created with the right arguments. This is the code I have so far:This is the error I get:Here is the fixed code (Call it test.py). Thanks, all!
So, the error message you are getting is actually because you are not checking your mock properly. What you have to understand here is that in your decorator you are ultimately saying that, the call to Installer will relturn a Mock object instead.Therefore, for any call to Installer() with respect to where you are patching, the return value of that will call Mock() instead. So, the assertion you actually want to check is simply at the mock_installer, and not the mock_installer.__init__.:Here is the modification made to your code:A little extra information to provide some more explanation, if you were testing now if install was called within your context manager, you have to realize here that you actually have to check inside your __enter__, so a structure would be like this: For clarity sake create a mock_obj in your test method and: Now, within your context manager, you will need to look inside the call to __enter__(). In case you don't know why this is, read up on context managers.So, with that in mind, you simply perform your check as: 
The problem is that Installer(...) doesn't call Installer.__init__ directly; rather, because Installer is an instance of type, and type.__call__ is defined, you get Installer() being equivalent to which results in a call to Installer.__new__(Installer, ...), whose return value x is passed to Installer.__init__ along with the original arguments.All of which is to say that since the mock object you bind to Installer isn't an instance of type, none of the preceding applies. Installer(...) is simply a call to a mock object, so you check that that directly:


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called_once_with
