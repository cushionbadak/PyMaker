Natural Text
I have a console program written in Python. It asks the user questions using the command:How would I test a function containing a call to input using pytest? I wouldn't want to force a tester to input text many many times only to finish one test run.
You should probably mock the built-in input function, you can use the teardown functionality provided by pytest to revert back to the original input function after each test.A more elegant solution would be to use the mock module together with a with statement. This way you don't need to use teardown and the patched method will only live within the with scope.
As The Compiler suggested, pytest has a new monkeypatch fixture for this.  A monkeypatch object can alter an attribute in a class or a value in a dictionary, and then restore its original value at the end of the test.In this case, the built-in input function is a value of python's __builtins__ dictionary, so we can alter it like so:Edit: Changed lambda: "Mark" to lambda x: "Mark"
You can replace sys.stdin with some custom Text IO, like input from a file or an in-memory StringIO buffer:this is more robust than only patching input(), as that won't be sufficient if the module uses any other methods of consuming text from stdin.This can also be done quite elegantly with a custom context managerAnd then just use it like this for example:
You can do it with mock.patch as follows.First, in your code, create a dummy function for the calls to input:In your test functions:For example if you have a loop checking that the only valid answers are in ['y', 'Y', 'n', 'N'] you can test that nothing happens when entering a different value instead.In this case we assume a SystemExit is raised when answering 'N':
This can be done with mock.patch and with blocks in python3.The line to note is mock.patch.object(builtins, 'input', lambda _: '19'):, which overrides the input with the lambda function. Our lambda function takes in a throw-away variable _ because input takes in an argument.Here's how you could test the fail case, where user_input calls sys.exit. The trick here is to get pytest to look for that exception with pytest.raises(SystemExit).You should be able to get this test running by copy and pasting the above code into a file tests/test_.py and running pytest from the parent dir.


Answer URL
https://docs.python.org/3/library/sys.html?highlight=stdin#sys.stdin
