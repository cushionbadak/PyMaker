Natural Text
I'd like to build a parser.add_argument(...) to map given argument with constant defined in my code.Suppose I have the followingWhat can I put in lieu of ...?The best I could do with const was:Note that the constants are saved into tw odifferent attributes a and b, witch suits me not :(
The simplest way is to take advantage of the type= option in add_argument like @hpaulj did although it can be generalized with a factory function:then in lieu of ... just use type=argconv(A=CONST_A, B=CONST_B):And then everything will work as you want it to in your example.The following is the first answer I posted, it is still valid but isn't nearly as simple as the above solution.An alternate method is to make a class that inherits from argparse.ArgumentParser and override parse_args to modify the result as it is generated:this way the rest of your (example) program would look like this:Add extra options like this:or extra arguments like this:as well any added arguments that are not specified in def_mapping are left alone so it is very easy to implement.
This is an interesting question. To the best of my knowledge, argparse does not support this directly.If you find this pattern occurs often, you can write a small utility class that does this for you, by transforming args into a dictionary via vars:You can use it as follows. Say your parser is defined by:Then you can define a Switcher via:and use it like so:
This would be a good case for a custom type parameter:It will produce a namespace likeand error message (if given --foo C) like:I tried adding choices but the help message isn't right.  Use metavar and help to instruct your users.
I wouldn't create a new action or object: just use a dict to store the constants, limit the values of --foo with choices and use parsed_args.foo to index the dict:The combination of choices and the keys to the dict essentially fixes your results of foo.And if you like to make things a bit clearer or easier, you can do reassign foo to your dict value after you parse the arguments:and now args.foo equates directly to 'something'.


Answer URL
https://docs.python.org/3/library/argparse.html
