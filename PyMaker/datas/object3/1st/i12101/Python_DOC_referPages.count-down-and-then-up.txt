Natural Text
I need to write a code that counts down, decreasing with 2 steps until it reaches zero, where it then counts up again with 1 step between each integer.As an example , if I define a function updown(n) and write updown(7), it should give:Here is my attempt:It takes m steps down, in my case m=2. When I run the code I getAs you can see, a negative integer appear and that is wrong. Also, I have n<=7 in the code, which I know is wrong. It should be valid for any n I insert and use that value as an upper limit.I'm stuck and don't know what to do. It should be a recursive code and no built-in functions shall be used. The reason is that I want to understand the basics and continue from there, without any shortcuts.
I think that by using n-1, you will make things more complicated than they should be.Simply first calculate the largest even number that is smaller than the given number:or more general (for m):Next use range:and finally print all number from 0 and including n:or putting it all together:From my own experience, it is rather un-pythonic to modify variables. Python aims to be a bit declarative: you use for loops if a variable can have different values to iterate over it.
You dont need any while loop,You can use range like this,Function:Output:range(start, stop[, step])This is a versatile function to create lists containing arithmetic  progressions. It is most often used in for loops. The arguments must  be plain integers. If the step argument is omitted, it defaults to 1.  If the start argument is omitted, it defaults to 0. The full form  returns a list of plain integers [start, start + step, start + 2 *  step, ...]. If step is positive, the last element is the largest start  + i * step less than stop; if step is negative, the last element is the smallest start + i * step greater than stop. step must not be zero  (or else ValueError is raised).
A recursive way to do the same 
I'm not sure why the first printed value should be 6 so the solution might be wrong but if you want your output try:The problem with your solution was that you printed before you subtracted so the value was actually smaller than the one printed, so you printed a negative value in the second while loop. You need to reconsider the termination condition if you print and then change the value (what I have done). Or change the order of print and operation.
That hardcoded 7 in your example is the same parameter n, so you should be using that instead. And you can "reset" or begin the second loop from 0 (hardcoded).But, for that specific task is more common to use the range function and the for loop instead of the while loop and the using of manual counter. To give you an idea (and let you redefine your function as "homework"),...Here is a for loop using the range function to print the numbers from 0 to 7 one by one:And here is a for loop using the range function to print the numbers from 6 to 2 two by two:Finally, you could use the chain method from itertools to do the same action for each iteration of many loops, as your case, where you want to simply print a number in each loop. This way, you have not to repeat that print statement (or in a future, repeat that processing block).Here is an example chaining the two for loops exposed:
First of all you call updown(7, 2) it decreases to 1: 7, 5, 3, 1 then it runs again because statement while 1 >= 1 is True so it decreases one more time.The second problem it that when you decrease it output print(n - 1) not print(n)I believe your solution is that.However if you want to start with even number the solution is that:


Answer URL
https://docs.python.org/3/library/functions.html#func-range
https://docs.python.org/3/tutorial/controlflow.html#for-statements
https://docs.python.org/3/library/itertools.html#itertools.chain
