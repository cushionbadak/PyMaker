Natural Text
This is a basic example of what I'm talking about:Count from 0 to 10000000Now with a sort of "status" of the computation (displays percentage every 1 second):The first example takes 3.67188 seconds, the second example takes 12.62541 seconds. I guess that's because the scripts has to continuously check if 1 second has elapsed. Is there a way to solve this issue? I've found something about threads and multiprocess but i can't figure out how to implement it. Thanks
BenchmarkingI wrote different solutions and compare them. I needed to multiply your value by 10 to get measurable results. First without any progress measurement to see how fast it runs on my machine.I get a duration of 13.8 seconds.Let's start with your implementation:If I run this, i get a duration of 30.31 seconds and around 3 percents up per second. The problem is that it has to compare time every loop rund and do a arithmetic operation. You can reduce the time by changing the loop to:Instead of subtracting the timestamps every loop I calculate the next timestamp only once and compare to it. This is of course not really fast, but faster than before. It gets me to 22.0 seconds, so saving 8 seconds only with removing this one operation.With a timer object as thread you get a much better result and it is the preferable way:Running this I get a output of 7 percent more every second and it is done after 13.8 seconds. As you can see, no difference. There are only few more calls to make and these are done in nearly no time.How to use timer classThe constructor of Timer expects a time duration in seconds and a method to call after time elapsed. You can use class method, a function or a lambda expression. After construction you need to start the timer with start().The first timer is started by the process itself. After this with each timer call a new timer is started to get a interval of one second. When the process finishes remember to call cancel() on timer. Otherwise it will run endless because it will restart itself every second.How to run the examplesPlease notice that the above methods are class methods so watch indentation.To run them you only need to create a instance of ProgressMeter and call the method you want.
If you're on a Unix-like system you can use signal.alarm from the signal module.The following code is a little messy, but you could make it neater by encapsulating things in a class.typical output on my 2GHz machine. 


Answer URL
https://docs.python.org/3/library/signal.html
