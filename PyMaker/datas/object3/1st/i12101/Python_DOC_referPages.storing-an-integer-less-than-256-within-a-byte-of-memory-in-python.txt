Natural Text
I have a huge array (of arrays) of integers in the range 0-255. Since I know the range of the integers, hence I want to optimize the space occupied by them by storing each integer within a single byte.In C++, I would simply use char to store the integers, but I am not able to find a way out in Python.I have searched for data types available in Python, but I am not able to get any data type which can give me sys.getsizeof() equal to 1.I want to know whether there exists a spatially optimal way of storing such integers.
If you are dealing with huge arrays then you will probably be best off using numpy which includes a lot of array tools for you.There is some overhead but it is minimal:
sys.getsizeof(c[0]) doesn't report the actual amount of memory used to store the first element of c. Accessing c[0] makes Python construct an integer object (or fetch one from the small integer cache) to represent the value, but the bytearray does store the value as one byte.This is more obvious with a larger bytearray:You can see that this bytearray couldn't possibly be using more than 1 byte per element, or it would be at least 2000 bytes in size. (The excess space is due to overallocation to accommodate additional elements, and some object overhead.)
You can use numpy arrays for that. E.g.:See other numpy array constructors for more details.
There is a bytes class for the purpose of storing a packed sequence of bytes.  I don't think there's an easy way of storing just a single number using one byte of memory.Documentation for bytes


Answer URL
https://docs.python.org/3/library/stdtypes.html#binaryseq
