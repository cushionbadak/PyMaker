Natural Text
I am trying to match a character and all its possible diacritic variations (aka accent-insensitive) with a regular expression. What I could do of course is:but that is not a general solution. If I use unicode categories like \pL I can't reduce the match to a specific character, in this case e.
A workaround to achieve the desired goal would be to use unidecode to get rid of all diacritics first, and then just match agains the regular eOr in this simplified caseAnother solution which doesn't depend on the unidecode-library, preserves unicode and gives more control is manually removing the diacritics as follows:Use unicodedata.normalize() to turn your input string into normal form D (for decomposed), making sure composite characters like Ã© get turned into the decomposite form e\u301 (e + COMBINING ACUTE ACCENT)Then, remove all codepoints which fall into the category Mark, Nonspacing (short Mn). Those are all characters that have no width themselves and just decorate the previous character.Use unicodedata.category() to determine the category. The result can be used as a source for regex-matching, just as in the unidecode-example above.Here's the whole thing as a function:


Answer URL
https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize
https://docs.python.org/3/library/unicodedata.html#unicodedata.category
