Natural Text
I have an object that is a list of lists of dictionaries:I want to sort the list by the sum of play values in the dictionaries of each nested list. The object would then be sorted like this:If it were just a list of dicts then: sorted(myObject, key=sum(map(itemgetter(play))), reverse=True)would work. I can't figure out how to do this without looping over the list, calculating the sum, then sorting. That is what I am doing now, but I'm trying to increase the efficiency of this code by removing loops because my list has 100's of millions of lists in it.
Your idea is already very good, to use a custom key function when sorting and using sum, map and an itemgetter on the play key:You do have a problem there though: The key argument expects a function that takes an item of your list you are sorting. But neither sum nor map return a function, so you cannot use it as a key function. Instead, you could make a lambda function that executes this combination for each item.The other problems are that play should be a string 'play' instead, and that map should take the sublist as an argument. So your key function would look like this:This is btw. functionally equivalent to the following generator comprehension which might be more readable:Using this with sorted should work but you should consider sorting your list directly using list.sort instead:(Btw. myObject is kind of a bad name for a list of things.)As far as the efficiency or complexity of your problem goes, you really cannot avoid having to loop through every sublist eventually. Itâ€™s impossible to determine the sum of those values without looking at the values, so obviously you cannot possibly avoid this.However, you should ensure that every sum is only ever calculated once, to avoid having to look at the items in the sublists more than once. Luckily, the default sorting using list.sort does exactly guarantee that:The key corresponding to each item in the list is calculated once and then used for the entire sorting process.So you will have a very efficient solution for this sorting problem.


Answer URL
https://docs.python.org/3/library/stdtypes.html#list.sort
