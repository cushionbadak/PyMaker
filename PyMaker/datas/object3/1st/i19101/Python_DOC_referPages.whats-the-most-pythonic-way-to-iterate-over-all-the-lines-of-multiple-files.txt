Natural Text
I want to treat many files as if they were all one file.  What's the proper pythonic way to take [filenames] => [file objects] => [lines] with generators/not reading an entire file into memory?We all know the proper way to open a file:And we know the correct way to link several iterators/generators into one long one:but how do I link multiple files together and preserve the context managers?I could ignore the context managers and do something like this, but it doesn't feel right:Or is this kind of what Async IO - PEP 3156 is for and I'll just have to wait for the elegant syntax later?
There's always fileinput.Reading the source however, it appears that fileinput.FileInput can't be used as a context manager1.  To fix that, you could use contextlib.closing since FileInput instances have a sanely implemented close method:An alternative with the context manager, is to write a simple function looping over the files and yielding lines as you go:No real need for itertools.chain here IMHO ... The magic here is in the yield statement which is used to transform an ordinary function into a fantastically lazy generator.1As an aside, starting with python3.2, fileinput.FileInput is implemented as a context manager which does exactly what we did before with contextlib.  Now our example becomes:although the other example will work on python3.2+ as well.


Answer URL
