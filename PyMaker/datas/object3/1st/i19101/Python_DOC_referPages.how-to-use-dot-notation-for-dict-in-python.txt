Natural Text
I'm very new to python and I wish I could do . notation to access values of a dict. Lets say I have test like this:But I wish I could do test.name to get value. Infact I did it by overriding the __getattr__ method in my class like this:and this works! when I do:But the problem is when I just print test alone I get the error as:Why is this happening?
This functionality already exists in the standard libraries, so I recommend you just use their class.  Adding, modifying and removing values is achieved with regular attribute access, i.e. you can use statements  like n.key = val and del n.key.  To go back to a dict again:The keys in your dict should be string identifiers for attribute access to work properly. Simple namespace was added in Python 3.3.  For older versions of the language, argparse.Namespace has similar behaviour.  
I assume that you are comfortable in Javascript and want to borrow that kind of syntax... I can tell you by personal experience that this is not a great idea.It sure does look less verbose and neat; but in the long run it is just obscure. Dicts are dicts, and trying to make them behave like objects with attributes will probably lead to (bad) surprises.If you need to manipulate the fields of an object as if they were a dictionary, you can always resort to use the internal __dict__ attribute when you need it, and then it is explicitly clear what you are doing. Or use getattr(obj, 'key') to have into account the inheritance structure and class attributes too.But by reading your example it seems that you are trying something different... As the dot operator will already look in the __dict__ attribute without any extra code.
__getattr__ is used as a fallback when all other attribute lookup rules have failed. When you try to "print" your object, Python look for a __repr__ method, and since you don't implement it in your class it ends up calling __getattr__ (yes, in Python methods are attributes too). You shouldn't assume which key getattr will be called with, and, most important, __getattr__ must raise an AttributeError if it cannot resolve key.As a side note: don't use self.__dict__ for ordinary attribute access, just use the plain attribute notation: Now if your class has no other responsability (and your Python version is >= 2.6 and you don't need to support older versions), you may just use a namedtuple : http://docs.python.org/2/library/collections.html#collections.namedtuple
Could you use a named tuple?
You have to be careful when using __getattr__, because it's used for a lot of builtin Python functionality.Try something like this...
Add a __repr__() method to the class so that you can customize the text to be shown on Learn more here: http://www.diveintopython.net/object_oriented_framework/special_class_methods2.html
In addition to this answer, one can add support for nested dicts as well:


Answer URL
https://docs.python.org/3/library/types.html#types.SimpleNamespace
https://docs.python.org/3/reference/lexical_analysis.html#identifiers
https://docs.python.org/3/library/argparse.html#argparse.Namespace
