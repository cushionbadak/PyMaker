Natural Text
Please consider the below algorithm:    As you can see, some relevant points about the algo snippet above:   I have listed an algorithm with a variable number of for loops.    The result that i calculate at each innermost loop is appended to a list. This list will grow to dimension of 'count'.        Is this problem a suitable candidate for recursion? If yes, i am really not sure how to break the problem up. I am trying to code this up in python, and i do not expect any code from you guys. Just some pointers or examples in the right direction. Thank you.    Here is an initial try for a sample case http://pastebin.com/PiLNTWED
Your algorithm is finding all the m-tuples (m being the max subscript of j from your pseudocode) of non-negative integers that add up to n or less. In Python, the most natural way of expressing that would be with a recursive generator:Example output:
You could also consider using permutations, combinations or product from the itertools module.If you want all the possible combinations of i, j, k, ... (i.e. nested for loops)you can use:But beware, the number of iterations in the loop grows exponentially!
the toy example will translate into a kind of tail recursion so, personally, i wouldn't expect  a recursive version to be more insightful for code review and maintenance.however, to get acquainted to the principle, attempt to factor out the invariant parts / common terms from the individual loop and try to identify a pattern (and best prove it afterwards!). you should be able to fix a signature of the recursive procedure to be written. flesh it out with the parts inherent to the loop body/ies (and don't forget the termination condition).
Typically, if you want to transform for loops into recursive calls, you will need to replace the for statements with if statements. For nested loops, you will transform these into function calls.For practice, start with a dumb translation of the code that works and then attempt to see where you can optimize later.To give you an idea to try to apply to your situation, I would translate something like this:to something like this:there are different ways to handle returning the results list, but you can adapt to your needs.
-- As a response to the excellent listing by Blckgnht -- Consider here the case of n = 2 and max = 3    The output of this code (and it is correct).   


Answer URL
