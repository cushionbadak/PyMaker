Natural Text
In Python, f.readline() returns the next line from the file f. That is, it starts at the current position of f, reads till it encounters a line break, returns everything in between and updates the position of f.Now I want to do the exactly the same, but for whitespace separated files (not only newlines). For example, consider a file f with the contentSo I'm looking for some function readtoken() such that after opening f, the first call of f.readtoken() returns token1, the second call retuns token2 etc.For efficiency and to avoid problems with very long lines or very large files, there should be no buffering.I was almost sure that this should be possible "out of the box" with the standard library. However, I didn't find any suitable function or a way to redefine the delimiters for readline().
You'd need to create a wrapper function; this is easy enough:Note that .readline() doesn't just read a file character by character until a newline is encountered; the file is read in blocks (a buffer) to improve performance.The above method reads the file by lines but yields the result split on whitespace. Use it like:Because read_by_tokens() is a generator, you either need to loop directly over the function result, or use the next() function to get tokens one by one:


Answer URL
