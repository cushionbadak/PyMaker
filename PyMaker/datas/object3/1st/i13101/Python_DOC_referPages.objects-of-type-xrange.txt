Natural Text
When I'm reading xrange reference, it says like this..Objects of type xrange are similar to buffers in that there is no specific syntax to create them, but they are created using the xrange() function. They donâ€™t support slicing, concatenation or repetition, and using in, not in, min() or max() on them is inefficient.However, as long as I have ever seen, all the xrange() that I have used is with in. Like for x in xrange(10): do somethings..So why it says this way is inefficient? So what is supposed to be the right way to use xrange?
Quoting Perfomance Tips:xrange is a generator object, basically equivalent to the following  Python 2.3 code:Except that it is implemented in pure C.They say that in is inefficient on xrange objects because in tries to iterate over object if the __contains__ approach failed. From Membership test details:For classes which do not define __contains__() but do define  __iter__(), x in y is true if some value z with x == z is  produced while iterating over y.xrange does not implement __contains__ and in order to "find" element N in xrange(N + 1) in operator has to perform N iterations sois logically equivalent toand it's not efficient.not in is inefficient because in is inefficient.Note that performance of in operator for containment tests doesn't affect the performance of the for loop. These are 2 different things.In fact, the "in" in the grammar rule for the for loop (shown below)is fixed and is not an operator.
No, what they've actually meant iswhich is a test for "contains". It is inefficient since it has to travel through all elements in the worst case.It is not about for loop which is correct and efficient. I suppose that the doc is a bit misleading.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__contains__
https://docs.python.org/3/reference/expressions.html#membership-test-details
https://docs.python.org/3/reference/compound_stmts.html#the-for-statement
