Natural Text
I am using Python's logging module and I want to disable the console logging for some time but it doesn't work.The above code displays the bla bla on stdout and I don't know how can I safely disable the console handler. How can I be sure that I temporarily remove the console StreamHandler and not another one?
I found a solution for this:This will prevent logging from being send to the upper logger that includes the console logging.
I use:
You can use:where your_level is one of those:So, if you set your_level to logging.CRITICAL, you will get only critical messages sent by: Setting your_level to logging.DEBUG will show all levels of logging.For more details, please take a look at logging examples.In the same manner to change level for each Handler use Handler.setLevel() function.
(long dead question, but for future searchers)Closer to the original poster's code/intent, this works for me under python 2.6The gotcha I had to work out was to remove the stdout handler after adding a new one; the logger code appears to automatically re-add the stdout if no handlers are present.
Context managerExample of use:
There are some really nice answers here, but apparently the simplest is not taken too much in consideration (only from infinito).This disables the root logger, and thus all the other loggers.I haven't really tested but it should be also the fastest.From the logging code in python 2.7 I see thisWhich means that when it's disabled no handler is called, and it should be more efficient that filtering to a very high value or setting a no-op handler for example.
To fully disable logging:To enable logging:Other answers provide work arounds which don't fully solve the problem, such asand, for some n greater than 50,The problem with the first solution is that it only works for the root logger. Other loggers created using, say, logging.getLogger(__name__) are not disabled by this method.The second solution does affect all logs. But it limits output to levels above that given, so one could override it by logging with a level greater than 50. That can be prevented bywhich as far as I can tell (after reviewing the source) is the only way to fully disable logging.
No need to divert stdout. Here is better way to do it:An even simpler way is:
I don't know the logging module very well, but I'm using it in the way that I usually want to disable only debug (or info) messages. You can use Handler.setLevel() to set the logging level to CRITICAL or higher.Also, you could replace sys.stderr and sys.stdout by a file open for writing. See http://docs.python.org/library/sys.html#sys.stdout. But I wouldn't recommend that.
You could also:
Console output:test.log file content:
subclass the handler you want to be able to disable temporarily:finding the handler by name is quite easy:once found:


Answer URL
https://docs.python.org/3/library/logging.html#logging.basicConfig
https://docs.python.org/3/library/logging.html#logging.basicConfig
