Natural Text
I read about the built in iteration methods of objects from the Python documentation:https://docs.python.org/2/library/stdtypes.html#iterator-typesWhat it says about __iter__ method is as follows: Return an iterator object. The object is required to support the  iterator protocol described below.However, in my opinion this seems not to be the case, if I make __iter__ method return a string like 'abc' I get a type error: TypeError: iter() returned non-iterator of type 'str' but as we know, strings are iterable objects, how is it possible that python treats it like it is not an iteration object?I can work around this problem like this:but I don't understand why I have to do it this way instead of just returning the 'abc' object.I also noticed that the Python Documentation is not very helpful for beginners, it sure as hell is not making this learning progress easy. With what logic one could come to the conclusion that return 'abc'.__iter__() is the way to go by reading the documentation?If you have any suggestions on where I could learn more about built in methods and the like in depth, I would be more than happy if you would share. 
Pragmatic answer: An iterator needs to support next().A string does not:Just to be iterable is not enough.
It's a bit of a fine point, but the key is that an iterator (e.g., iter("abc") or the equivalent "abc".__iter__()) and iterable (e.g, "abc") are two slightly different things, and __iter__ is required to return an iterator.
A string is an object which can be iterated on, but itself is not an iterator. They are two separate classes in the object hierarchy. 
From the python Documentation:An iterable isan object capable of returning its members one at a time.This means all sequence types (list, str, and tuple objects) and some non-sequence types like dict and file and objects of any classes you define with an __iter__() or __getitem__() methoda are iterables.Iterables can be used in a for loop and in many other places where a sequence is needed (zip(), map(), ...). When an iterable object is passed as an argument to the built-in function iter(), it returns an iterator for the object.On the other hand an iterator isan object representing a stream of data.Repeated calls to the iteratorâ€™s next() method return successive items in the stream. When no more data are available a StopIteration exception is raised instead.


Answer URL
https://docs.python.org/3/glossary.html#term-iterable
