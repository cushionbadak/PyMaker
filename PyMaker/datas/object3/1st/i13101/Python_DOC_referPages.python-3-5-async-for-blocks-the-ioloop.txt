Natural Text
I have a simple aiohttp-server with two handlers.First one does some computations in the async for loop. Second one just returns text response. not_so_long_operation returns 30-th fibonacci number with the slowest recursive implementation, which takes something about one second.When I'm trying to fetch / and then /lol/, it gives me response for the second one only when the first one gets finished.What am I doing wrong and how to make index handler release the ioloop on each iteration?
Your example has no yield points (await statements) for switching between tasks.Asynchronous iterator allows to use await inside __aiter__/__anext__ but don't insert it automatically into your code.Say,should work as you expected.In real application most likely you don't need await asyncio.sleep(0) calls because you will wait on database access and similar activities.
Since, fib(30) is CPU bound and sharing little data, you should probably use a ProcessPoolExecutor (as opposed to a ThreadPoolExecutor):Setup executor when you create the app:
An asynchronous iterator is not really needed here. Instead you can simply give the control back to the event loop inside your loop. In python 3.4, this is done by using a simple yield:In python 3.5, you can define an Empty object that basically does the same thing:Then use it with the await syntax:Or simply use asyncio.sleep(0) that has been recently optimized:You could also run the not_so_long_operation in a thread using the default executor:


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor
https://docs.python.org/3/library/asyncio-eventloop.html#executor
