Natural Text
I understand the basic examples shown with using python 3.5 and its new async/await functionality (which is super cool).One of the things I am exploring is how I might be able to start some async work, and once some blocking work is started, serialize (pickle?) the state of the coroutine, and then at some deferred point in time (possibly on a different machine), restart the same program, reload the state, and attempt to make progress, and repeat until the async work is done.Specifically in the diagram at https://docs.python.org/3/library/asyncio-task.html#example-chain-coroutines ... I am wondering if I can replace event loop to accomplish this. How might I go about doing such a thing?I am hoping someone with more expertise in python's coroutines, asyncio and new async/await functionality maybe able to shed light on how to do this either using the approach I am trying by sharing some pointers, or quite possibly suggest something better.
asyncio library itself has only sockets, pipes and processes.For complex interprocess communications you need something built on top of asyncio.Your example describes typical message queue usage, e.g. RabbitMQ with asynqp library.Or you may build something from scratch, say, using aiozmq.You question is too broad for making strict answer.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#example-chain-coroutines
