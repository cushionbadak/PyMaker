Natural Text
I have just moved on to python3 as a result of its concurrent futures module. I was wondering if I could get it to detect errors. I want to use concurrent futures to parallel program, if there are more efficent modules please let me know. I do not like multiprocessing as it is too complicated and not much documentation is out. It would be great however if someone could write a Hello World without classes only functions using multiprocessing to parallel compute so that it is easy to understand.Here is a simple script:The above code was just a demo, of how CTRL+C will not work to print the satement. What I want is to be able to call a function is an error is present. This error detection must be from the function itself.Another example
Here's a solution. I'm not sure you like it, but I can't think of any other. I've modified your code to make it work.Here are the points:When you use with ThreadPoolExecutor(max_workers=3) as exe, it waits until all tasks have been done. Have a look at DocIf wait is True then this method will not return until all the pending futures are done executing and the resources associated with the executor have been freed. If wait is False then this method will return immediately and the resources associated with the executor will be freed when all pending futures are done executing. Regardless of the value of wait, the entire Python program will not exit until all pending futures are done executing.You can avoid having to call this method explicitly if you use the with statement, which will shutdown the Executor (waiting as if Executor.shutdown() were called with wait set to True)It's like calling join() on a thread.That's why I replaced it with:  Main thread must be doing "work" to be able to catch a Ctrl+C. So you can't just leave main thread there and exit, the simplest way is to run an infinite loopNow that you have a loop running in main thread, when you hit CTRL+C, program will enter the except KeyboardInterrupt block and set quit=True. Then your worker thread can exit.Strictly speaking, this is only a workaround. It seems to me it's impossible to have another way for this.EditI'm not sure what's bothering you, but you can catch exception in another thread without problem:Output


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.shutdown
