Natural Text
I was given this question to write the code for this magic square.A two dimensional integer matrix s is a magic square if The dimensions of s is nxnEvery integer in [1,2,...,n*n] appears in s, exactly once.The sum of all rows in s is the same as the sum of all columns in s, is the same as the sum of the diagonal elements in s.Example: s=[[8, 3, 4], [1, 5, 9], [6, 7, 2]] represents the  following integer matrix:Note that s above is a two dimensional integer arrays is a 3x3 square All numbers in [1,2,...,9] appear in s exactly once.The sum of all rows is the same as the sum of all columns is the same as the sums along both diagonals.Row  sums: 8+3+4 == 1+5+9 == 6+7+2 == 15Col  sums: 8+1+6 == 3+5+7 == 4+9+2 == 15Diag sums: 8+5+2 == 6+5+4 == 15Example: The following are also magic: [[8, 1, 6], [3, 5, 7], [4, 9,  2]], [[6, 7, 2], [1, 5, 9], [8, 3, 4]]I understand how to program and write this code but my question is how to write a type contract for this. I know how to write a program to execute this but when it comes to type contracts for any program, how do you know how many parameters there are going to be, and how do you know how to write examples of what you want it to do for a program like this. Is there a general method to follow when writing a type contract and making examples for a program?
If what you mean is how you can solve this generically, then there is no silver bullet to all problems.  However, In this specific problem, your input is a single list.  The user can give you any such list eg.As long as you can determine that it is a "syntactically valid" list according to some rules, you can process whether it is magical or not.You could force the user to enter data individually to guarantee it is nxn and unique integers [1..9] like this:This would make magic checking easier later on as conditions #1, #2 are already satisfied.But it is really up to you how you implement it.  You could take the entire list at once etc. but this is a decision agreed upon by the user and you.
In terms of checking whether array is what your docstring says it should be, I wouldn't actually bother. Use duck typing; assume that it's the right kind of thing, and leave the caller to deal with any errors that result if they don't pass in what you asked them to. Your function can't continue if the input is invalid, so there's no point handling the errors at that level, and trying to explicitly use e.g. isinstance only narrows down what the users can pass in further than is necessary (e.g. why shouldn't your function continue to work if the user passes in a tuple of tuples, rather than a list of lists? They're both sequences...).If your question is really about including examples, as your comment suggests, here's where I'd start:The docstring documents the function, and can be used by e.g. IDEs and the help function to tell the user what the function does. Note the use of doctest examples, which both show the user how to call the function and what to expect back, and act as tests for your code.Of course, when you first run it, it'll fail...


Answer URL
https://docs.python.org/3/glossary.html#term-duck-typing
https://docs.python.org/3/library/doctest.html
https://docs.python.org/3/library/doctest.html
https://docs.python.org/3/glossary.html#term-duck-typing
