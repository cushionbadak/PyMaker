Natural Text
I have a set of 15 dicts with both int and float values. The keys are of course not sorted. I would like to:Fill a 2D numpy array which size is 50x15, so that the values of dict1 align under column 0, those of dict2 align under column 1, and so forth.Before doing this, however, I need to have the dict keys sorted smallest to largest.This is how the 2D array should look like:Can I do it in a single for loop? Or should I use 3 nested for loops, similar to the next code block? If so, how can I advance to the next dict?
If you collect the dictionaries into a list like:then you can do:I'm using enumerate to get the index number, because it is more Pythonic and cleaner.  However it would have problems if dataarray isn't big enough.[i,j] is the correct way to index an element of a 2d array.The clip I modified did nothing with the keys, so I'm ignoring those (so far).Reading your question again, I see you want to sort the keys.  In that case we need to use:I haven't tested this code, so there might be some bugs.  But the outline is correct - I think.If you need to match up keys across rows of dataarray, we'll have to do more work.I would use an expression liketo find the maximum size of the dictionaries, and to define dataarray accordingly.It just occured to me that I don't need to iterate to add the dictionary values to the array.  I'll illustrate with one simple dictionary:Get the values out of this list of tuples.  Actually this is an iteration too.fill in the data column.  To be extra safe I should use values[:data.shape[0] (in case data isn't big enough for this dictionary).    But if all the dictionaries have the same size, and dataarray is the right size, all these cross-checks can be left out.
Assuming you have your dicts in a list called dicts and you have imported zip_longest or izip_longest (depending on python versions) from itertools. You can do this with a 1 liner:


Answer URL
https://docs.python.org/3/library/csv.html
