Natural Text
I have a list a = ["c","o","m","p","a","r","e"]. I have two lists b = ["c","l","o","m","p","a","r","e"] and c=["c","o","m","p","a","e","r"]now i want to compare list 'b' and 'c' with 'a' to see whether the order of elements of 'b' are closer to 'a' or  order of elements of 'c' are closer to and return the list. What I would like to achieve is list 'b' is to be returned when comparing 'b' and 'c' with 'a'. Is there a function to do that?
difflib.SequenceMatcher will findthe longest contiguous matching subsequence  that contains no "junk" elementsSequenceMatcher.ratio returns the measure of the sequences' similarity. It's a float in the range [0, 1]. Higher ratio indicates higher similarity (the ratio is 1 if given sequences are identical).The below helper function uses the max function to compare the first argument to the rest of positional arguments:Example:
The traditional way of solving this problem is by using Levenshtein distance. This basically tallies up all of the additions, deletions and insertions required to move from one string to another.You can think of each of those operations as "breaking" the pattern of a just a bit.It's a pretty simple function to implement, but there's a package that has already done it for you here. Sample code is below:


Answer URL
https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher
https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher.ratio
https://docs.python.org/3/library/functions.html#max
