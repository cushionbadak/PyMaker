Natural Text
I have been learning Python in my spare time for a small amount of time now and I set myself a challenge to build a password cracker for a very specific task, it was to test how effective the security on my ADSL Router was (not very) - using Wireshark I could quite clearly see how it was hashing the password over http and I developed some code to perform a wordlist attack. (I apologise if you think my code is badly written - you would probably be correct!).This works well enough but has left me wanting more, so I thought I could add some Multiprocessing power to it to speed things up - using various different instructions and guides I have failed to end up with a successful result! (although feeling like i was very close)Please could someone either point me towards "An idiots guide to multicore python password cracking" or help my modify my code to suit.P.S. my original plan was to use opencl or cuda...but I quickly learned how out of my depth I was!
I have made an example for you that should be relatively easy to add into your code.  Here is how it works; First, we need to brake up the wordlist into manageable chunks that we can throw into the multiprocessor module.  I do this by making a list with a dictionary of 'starting' and 'stopping' points.  Next, I pass those arguments into apply_async which will in turn run the pwd_find function.  This is the function you want to add your for word in wordlist: loop, but with a starting and stopping point (see code below).If your code finds a match, add p.terminate followed by p.join to kill the processors.If you would like to lean more about the multiprocessor module, go here to learn more.I hope this helps you out, or at the very least, gives you a better insight into multiprocessing!


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.apply_async
