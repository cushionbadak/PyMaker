Natural Text
I'd like to use Python f-string for its syntactical simplicity, compared to string.Template() or other approach. However, in my application, the string is loaded from file, and the values of the variable can only be provided later.If there a way to invoke fstring functionality separate from the string definition? Hopefully code below will better explain what I hope to achieve.
Use str.format().Preferably, be explicit about passing arguments to it. But as a stopgap measure, you can use locals() to pass a dict of local (function-defined) variables to the formatting function:You can of course copy globals() to a local dict, and merge locals() to it, and use it to more closely emulate the f-string approach.
you can format it this way. pass in a dictionary of possible values for a and map it to your string. print:
Here's what you were looking for:pip install fstring
Here you go:
You could use re.sub like this:The function runs a regex replace that replaces all bracketed strings after running them through eval. Using inspect.currentframe() we get the outside (caller's) scope.Note: This can easily be extended to handle format flags like !r.


Answer URL
https://docs.python.org/3/library/functions.html#eval
https://docs.python.org/3/library/inspect.html#inspect.currentframe
