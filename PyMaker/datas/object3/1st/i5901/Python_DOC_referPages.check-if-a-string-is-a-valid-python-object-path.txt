Natural Text
Sometimes you need to dynamically import Python objects, for example with importlib:I would like to know if there is a standard way to check if the string fed to importlib.import_module is valid, i.e. could specify the location of a Python object.If I had to implement a validation method myself, I would try to match the string against a regular expression like ([a-zA-Z_][a-zA-Z0-9_]\.?)+ (names starting with letters or underscore, composed of letters, underscores and numbers, and separated by dots).Is there a method in standard or third libraries to check this? If not, is there a PEP describing valid Python paths? If not, is my regex sufficient?
The import statement requires that names are valid Python identifiers. From the import statement documentation:Identifiers are basically anything that starts with a letter or underscore, followed by 0 or more letters, underscores or digits. The definition of letters and digits is broad, see the Identifiers and keywords section; basically the NFKC normalised forms of specific Unicode character classes are all included.However, note that by using importlib(), anything goes. You can import modules that do not have valid Python identifier names, because the whole process is highly flexible. If you want to import a module that only consists of digits, then that is still possible, just not with the import statement.As such, there is no cut and dry answer to this question. In principle, any string is valid.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#the-import-statement
https://docs.python.org/3/reference/lexical_analysis.html#identifiers
