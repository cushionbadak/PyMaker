Natural Text
I have code that makes unique combinations of elements. There are 6 types, and there are about 100 of each. So there are 100^6 combinations. Each combination has to be calculated, checked for relevance and then either be discarded or saved. The relevant bit of the code looks like this:Now this takes a long time and that is fine, but now I realize this process (making the configurations and then calculations for later use) is only using 1 of my 8 processor cores at a time. I've been reading up about multithreading and multiprocessing, but I only see examples of different processes, not how to multithread one process. In my code I call two functions: 'dosomethingwith()' and 'saveforlateruse_if_useful()'. I could make those into separate processes and have those run concurrently to the for-loops, right?But what about the for-loops themselves? Can I speed up that one process? Because that is where the time consumption is. (<-- This is my main question)Is there a cheat? for instance compiling to C and then the os multithreads automatically?
I only see examples of different processes, not how to multithread one process There is multithreading in Python, but it is very ineffective because of GIL (Global Interpreter Lock). So if you want to use all of your processor cores, if you want concurrency, you have no other choice than use multiple processes, which can be done with multiprocessing module (well, you also could use another language without such problems)Approximate example of multiprocessing usage for your case:You can adjust WORKERS_NUMBER to your needs.Same with multiprocessing.Pool:You probably would like to use .map_async instead of .mapBoth snippets do the same, but I would say in the first one you have more control over the program. I suppose the second one is the easiest, though :) But the first one should give you the idea of what is happening in the second onemultiprocessing docs: https://docs.python.org/3/library/multiprocessing.html
you can run your function in this way:https://docs.python.org/2/library/multiprocessing.html#using-a-pool-of-workers


Answer URL
https://docs.python.org/3/library/multiprocessing.html
