Natural Text
Function call will always yield some overhead. But why the code below shows that non-function call is slower.Code:Output:
You might be thinking that since the loop only does 1 + 1, there shouldn't be much difference. But, there's a 'hidden' assignment here that's commonly forgotten: to the loop variable i in your for loop. This is the cause of the slowdown.In functions, this is done with STORE_FAST. In the top level, it's done with STORE_NAME. The first is faster than the other and, in a loop that runs 1000000000 times, this difference is shown quite clearly.Remember that the function invocation only happens once. So its overhead doesn't really contribute in this specific scenario.Besides that, all other steps happen once and are pretty much the same. A range is created and its iterator grabbed and the constant 2 is loaded for every iteration.You can always use the dis module to examine the CPython bytecode that is produced for each of these, as @Moses indicated in a comment. For the function s, you have:While for the top-level version of the loop:The main difference between these is in the storing of the iteration value i. In functions, it's simply more efficient.To address @Reblochon Masque (now deleted) answer that seems to show no discrepancy between these two when timed with timeit in IPython cells.timeit times things by creating a little-function (named inner) that stores the statements you pass and executes them for a given number of executions. You can see this if you create a Timer object and peek at its src attribute (this isn't documented so don't expect it to always be there :-):This contains the little function that is essentially timed. The previous print call prints:So, in effect, by using timeit you have altered the way the look-up for i is performed, since it is inside a function it's also done with STORE_FAST. Easy pitfall! (and if you don't believe me, see dis.dis(compile(t.src, '', 'exec').co_consts[0]))


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#the-for-statement
https://docs.python.org/3/library/dis.html#opcode-STORE_FAST
https://docs.python.org/3/library/dis.html#opcode-STORE_NAME
https://docs.python.org/3/library/dis.html
