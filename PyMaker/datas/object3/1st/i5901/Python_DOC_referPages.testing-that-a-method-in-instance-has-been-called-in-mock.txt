Natural Text
I have this sort of setup where I'm testing a class which is using another class, and I want to mock the latter so I'm only testing the first class itself.nuclear_reactor.py:nuclear_manager.py:test_nuclear_manager.py:What I'd like to test is that NuclearReactor.start is called,but when I run this I get:Which I totally understand since start is an attribute of the instance and not of the class, and I could parse the mock_calls, but isn't there a better way to check that the call of an instantiated mocked class is made?I could use dependency injection in NuclearManager to pass a mock NuclearReactor, but I'm thinking there would be an alternative way using just mock.
You are indeed testing if start has been called directly on the class, which your code does not. You can test the method on the instance directly; remember that an instance is produced by calling the class:The Mock.return_value attribute is the result of the call to the mocked class, so the instance.You can also just call the mock. Mocks by default always return the exact same object when called, a new mock representing that return value:The result of calling a mock instance, and the mock instance return_value attribute, are one and the same.You were already on the right path by printing out the calls to the NuclearReactor mock, you just missed the detail that start() was invoked on the called mock, so call().start(), not start() was recorded.You may want to use mock.patch() to handle the patching, rather than by direct assignment; this makes sure that the patch is removed again so that other tests can make their own decisions on what is mocked:I used it as a decorator here; when the test() function is called, the mock is put in place, and when the function exits, it is removed again. You can also use patch() as a context manager to limit the scope of the patch even more finely.Also, for unit testing like this, do use the unittest library:This lets you fit your tests into a larger test suite, enable and disable tests, and integrate with other testing tools.
The way I use mocks is like this: (Code is Python 3)Output:


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.return_value
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch
https://docs.python.org/3/library/unittest.html
