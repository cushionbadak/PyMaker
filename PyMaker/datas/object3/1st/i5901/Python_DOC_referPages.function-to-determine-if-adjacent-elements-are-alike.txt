Natural Text
I've been stuck on this for a while and I keep running into problems, I'm trying to create a function that returns true if at least one pair of adjacent elements in a list are equal.Test cases:[1, 2, 3] -> False[1, 2, 2, 3] -> True[2, 6, 3, 6] -> False['a', 'b', 'c', 'd', 'd'] -> TrueThe problems I run into are assertion errors and I believe it's because of my loop. Once I find a pair that is equal the returned value won't stay the same because my loops will evaluate the next values in the list. So I just need to find at least one pair, I don't know how I would do that though.
You can zip the list with itself offest by 1 and use any to short-cut the find-one pattern:
I made few changes. It should work now.or, shorter one using any,
There are two problems here:the indices can run into overflow here;you immediately return False from the moment there are two consecutive elements that are not equal, you should return False after the for loop.The index problem here is that x ranges from 0 to (excluding) len(l). So that means x-1 ranges from -1 (which is the last element of the list) to len(l)-1 and x+1 from 1 to len(l) (including). But the list is not that long, so you get an index out of the list bounds, which is an error.A more Pythonic approach however is to use a zip(..) over the list l, and the "tail" of the list (the list omitting the first element). So zip(l, l[1:]).We can iterate over every pair x,y of l and l[1:]. In case x == y, then we have such element and return True.In case we fail to find such pair, we eventually return `False.So a correct implementation is:Python however has a builtin any, that will return True from the moment the iterable we give it contains at least one True; and False if no element has truthiness True.So we can convert the above code to something using the any builtin:
I'm kinda new to python but anyways hoped this is easy enough


Answer URL
https://docs.python.org/3/library/functions.html#any
