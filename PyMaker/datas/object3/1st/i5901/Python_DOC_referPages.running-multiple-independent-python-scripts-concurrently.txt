Natural Text
My goal is create one main python script that executes multiple independent python scripts in windows server 2012 at the same time. One of the benefits in my mind is that I can point taskscheduler to one main.py script as opposed to multiple .py scripts. My server has 1 cpu. I have read on multiprocessing,thread & subprocess which only added to my confusion a bit. I am basically running multiple trading scripts for different stock symbols all at the same time after market open at 9:30 EST. Following is my attempt but I have no idea whether this is right. Any direction/feedback is highly appreciated!
I think I'd try to do this like that:(Modified example from multiprocessing introduction: https://docs.python.org/3/library/multiprocessing.html#introduction)Consider using a constant pool size if you deal with a lot of stock symbols, because every python process will use some amount of memory.Also, please note that using threads might be a lot better if you are dealing with an I/O bound workload (calling an API, writing and reading from disk). Processes really become necessary with python when dealing with compute bound workloads (because of the global interpreter lock).An example using threads and the concurrent futures library would be:(Modified example from: https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example)Note that threads will still use some memory, but less than processes.You could use asyncio or green threads if you want to reduce memory consumption per stock symbol to a minimum, but at some point you will run into network bandwidth problems because of all the concurrent API calls :)
While what you're asking might not be the best way to handle what you're doing, I've wanted to do similar things in the past and it took a while to find what I needed so to answer your question:I'm not promising this to be the "best" way to do it, but it worked in my use case.I created a class I wanted to use to extend threading.thread.pyI needed some work done that was part of another packagework_module.pyThen the main script I wanted to runmain.pyThe threads die when the run() is returned. Being this extends a Thread from threading there are several options available in the docs here: https://docs.python.org/3/library/threading.html
If all you're looking to do is automate the startup, creating a .bat file is a great and simple alternative to trying to do it with another python script.the example linked in the comments shows how to do it with bash on unix based machines, but batch files can do a very similar thing with the START command:start_py.bat:the full syntax for START can be found here.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#introduction
https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example
https://docs.python.org/3/library/threading.html
