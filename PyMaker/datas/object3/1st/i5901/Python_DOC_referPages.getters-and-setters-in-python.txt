Natural Text
I'm totally new to Python and I'm trying to write a class, which will store only two attributes, one of which is intended to be a number and another a datetime object. Though I'd also like, while storing date as a datetime, to initialize and output it using a string like "dd.mm.yyyy". So I go: But at runtime @property points at self.date and says: Expected type 'datetime', got 'str' instead. How can it ever get a string, when it's meant to be converted to date while setting. Why is this happening? Confused.For example:
You can't use date for both the property object and an instance attribute. Only the property is available (because it is a data descriptor), and self.date references that property object. The expression self.date = params['date'] is passing the param['date'] value to the setter, it is not setting an instance attribute.Because param['date'] is evidently a datetime object in your case, that means that in the setter datetime.datetime.strptime(<datetime instance>, '%d.%m.%Y') is called, which fails. Even if that succeeded, you'd then try to assign that result back to self.date, which would call the setter again, ad infinitum. And it is a datetime instance either because you passed in a datetime value originally, or you passed in a string, and the first .strptime() call succeeded and now self.date is being assigned that datetime instance that was just created.Rename the instance attribute; giving it a leading single underscore is usually the most helpful naming scheme here:I also changed datetime.datetime.strftime(self._date, '%d.%m.%Y') (a call to an unbound method) to a method call on self._date.


Answer URL
https://docs.python.org/3/howto/descriptor.html
