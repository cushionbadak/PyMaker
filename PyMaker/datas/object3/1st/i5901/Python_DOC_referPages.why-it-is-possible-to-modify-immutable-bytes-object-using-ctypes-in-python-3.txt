Natural Text
bytes object is immutable. It doesn't support item assignment:str object is also immutable:It is possible to modify bytes object with ctypes while it is not possible to do the same with str object. Could you explain why? Please have a look at the following examples.c codec code compilationbytes attemptpython codepython code outputstr attemptstr object is also immutable in Python 3 but unlike bytes object it's not possible to modify it with ctypes.python codepython code output
str in Python 3 is abstracted as Unicode and can be stored as 1-, 2-, or 4-byte per character strings depending on the highest Unicode character used in the string.  To pass the string to a C function it must be converted to a specific representation.  ctypes in this case is passing the converted temporary buffer to C and not the original.  ctypes can crash and corrupt Python if you prototype functions incorrectly or send immutable objects to functions that mutate the contents and it is up to the user to be careful in these cases.In the bytes case ctypes passes along a pointer to its internal buffer of the bytes, but doesn't expect it to be modified.  Consider:Since bytes are immutable, Python is free to store the same reference in both a and b.  If you pass b to a ctypes-wrapped function and it modifies it, it could corrupt a as well.Straight from the ctypes documentation:You should be careful, however, not to pass [immutable objects] to functions expecting pointers to mutable memory. If you need mutable memory blocks, ctypes has a create_string_buffer() function which creates these in various ways....


Answer URL
https://docs.python.org/3/library/stdtypes.html#bytes
https://docs.python.org/3/library/ctypes.html#fundamental-data-types
