Natural Text
In Python 3, I should be able to use super() in a class method as a substitute for the parent class:The above behaves as expected when I instantiate a demodict() and add values to it. But if I use it as the data type for a ConfigParser object, something goes wrong:If I replace OrderedDict with plain dict as the parent class, the error gets even weirder:If instead of super() I write OrderedDict or dict explicitly, I can use demodict as the dict_type with no problems. Can someone explain what is going on? (Since there is an easy work-around, I'm more curious about the cause than about the solution...)
Method attribute access on a super() proxy object, like ordinary method binding, just passes the object implicitly as the first positional argument.  Change this:To this:Note that OrderedDict doesn't use cooperative inheritance, i.e. it just calls dict.__setitem__ directly.  Ideally, every object in the inheritance chain should be using super.  Please proceed with caution if you plan to use OrderedDict with a multiple-inheritance structure.  


Answer URL
https://docs.python.org/3/library/functions.html#super
