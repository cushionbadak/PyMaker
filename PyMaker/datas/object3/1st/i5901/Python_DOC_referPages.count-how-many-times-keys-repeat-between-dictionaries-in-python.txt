Natural Text
How do I check to see how many times the keys in one dict1 exist in dict2. If the keys of dict1 exist in dict2 a variable, val, with an initial value of 4 should be subtracted based on how many times the keys are found. For example dict1 looks like this and dict2 looks like this Since there are two repeat keys between the dicts,val should be equal to 2.if dict2 looks identical to dict1, then val should be 0. Also, dict1 will always be the same size, but dict2 can get quite large, so a fast lookup method would be ideal. Lastly, the values of dicts here don't really mean anything. 
Using set intersection:Edit:Because key views are already set-like, so you can do d1.keys() & d2.keys() directly. Note that .keys() is a very cheap call because it simply provides an alternative interface to the existing dict structure (Credits to @PM2RING in the comments).
Since dict_keys are already set-like, you can simply useThat is for Python 3. In Python 2, the equivalent view object is dict.viewkeys(), which you'd use similarly. 
Make sets out of the list of keys in each dict.Find the intersection and union of those sets.union - intersection gives you the set of differences.If that's 0, then you return 0;otherwise, return the size of the intersection.
This will work in Python 2 and 3: len(set(dict1).intersection(dict2)) 


Answer URL
https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes
