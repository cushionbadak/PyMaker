Natural Text
Propose s = [1, 2, 3, 4]If you zip(s, s[1:]) which returns [(1, 2), (2, 3), (3, 4)]. Is it possible to rewrite zip(s, s[1:]) to return [(1, 2), (2, 3), (3, 4), (4, 1)]? Or for generality sake, is it possible to zip a list with itself for the last touple to be (list[-1], list[0]).
Yes, you can use itertools for handy iterators to accomplish this rather elegantly:Note, itertools.cycle works like this:cycle('ABCD') --> A B C D A B C D ...It is an infinite iterator, so be careful. zip here stops at the shortest, so it works fine.Also, itertools.islice:islice('ABCDEFG', 2, None) --> C D E F GWhich works just like slice or sequence slicing, i.e. my_list[1:] == my_list[1:None] == my_list[slice(1, None)] except it works on any iterable, not just sequences.Anyway, note this approach is generalizable:


a pure python cyclic zip answer can be made with a parameterized slice indexing, adding the slices


Answer URL
https://docs.python.org/3/library/itertools.html
