Natural Text
I am currently working on a python's String and List.When I assign string in variable str="string" and try to access it first character by str[0] it works perfectly and give "s".But, when I try to find character str[0][0][0][0][0][0] it again gives  "s". But when I give str[0][1] it gives an error: Its Correct. My Question is Why Simple String Character has So many array Dimensions? and it did not given any error and print 0 character of string when str[0][0][0][0][0][0]. What is Data Structure of String?My Code is My Output is:
Why shouldn't it work?Indexing a string returns a one element string which is again indexable and returns the same value:since it consists of one element, you can continue indexing the zero-element [0] as much as you want.This is explained in the standard type hierarchy section of the Python Reference manual:StringsA string is a sequence of values that represent Unicode code points. All the code points in the range U+0000 - U+10FFFF can be represented in a string. Python doesnâ€™t have a char type; instead, every code point in the string is represented as a string object with length 1.(Emphasis mine)Side-note: Don't use names such as str, you mask the built-in str.
In Python a string is a sequence of characters, but characters are 1-char strings.So if you access 'foobar'[0], you obtain 'f'. Since f is however a string, we can access the first character of that string. Since 'f'[0] is 'f'. As a result if you access a strings s with s[i][0][0][0], you thus keep accessing the first character of the string s.If you write s[i][1] however, this will error, since s[i] is a one-character string, and thus you can not obtain the second character, since there is no such character.The string itself is not multidimensional, you simply obtain a new string and call the index of that new string. You can add as many [0]s as you like.
The problem is not in Python, it is due to the fact that you assume there is a char type in Python (based on the title of this question).A string in Python is an array of essentially single element strings. s[0] simply returns the string 's', not a character. s[0]...[0] can be thought of as an infinite recursion that keeps getting the same single element string, infinitely many times.You can go as deep as you want: (in this case, in order to do it more than 997 times you will need to modify Python`s default allowed recursion depth)


Answer URL
https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy
https://docs.python.org/3/library/functions.html#func-str
