Natural Text
I want to lock part of the method (the part after "Waiting to acquire lock" should only run after the first thread has released the lock). What happens is that both threads run independently regardless of lock.acquire(). I cant figure out why this doesn't work. The examples here in stackoverflow are similar but not quite like this one. Just a glimpse on why I need this: I don't have an explicit shared resource, I just want to prevent 2 python threads from running the same code since, in the system i'm working on, they could potentially put the system in an unstable state.
The lock object you create, is local to your function so it is not shared : Define your lock as global, and it will be shared
Your threads each create and lock their own independent lock:That won't provide mutual exclusion. Two threads can lock different locks at the same time without conflict; locks only do anything when two threads try to lock the same lock.Create one lock and provide it to both threads. While you're at it, a with statement is usually a cleaner way to ensure cleanup than a finally block. That'll lock the lock when execution enters the with and unlock it when execution leaves:


Answer URL
https://docs.python.org/3/library/threading.html#with-locks
