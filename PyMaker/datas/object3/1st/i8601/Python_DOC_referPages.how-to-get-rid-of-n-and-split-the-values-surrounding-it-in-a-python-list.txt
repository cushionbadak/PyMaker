Natural Text
So I'm new to Python and I'm having difficulty understanding how to manipulate files and such. Currently I've been trying to assign the lines in my file into a list by splitting it at commas. I'm using this code:The problem I have now is the output is this: my question is, how do I remove the \n from my output and also how would i go about splitting the values separated by the \n (for example, 49\n23232323, i would like it to be split like '49','23232323').It is my understanding(which is not a lot) that you can't split a list nor can you assign 2 variables for splitting a file, so how would I split the file by commas and '\n'? The ideal output would be:The grades.txt file consists of:Also, is it possible to split only certain lines/words in a file into a list? (i.e. a file containing (1,2,3,4,a,b,c,d,5,4,3,d,r) and splitting the numbers into one list and the letters into another?)
i'd do something like this:thus replacing every \n with commasif you want to have numbers in one list and words in another just create two list and sort them using the function .isdigit() like this:another way to do it is using try and except:
As someone mentioned in the comments, perhaps the better approach would be to use the csv module.  But that requires you to learn/understand Python dictionaries - however dictionaries are a great data structure and very useful in many cases.The result is a list of dictionaries.  Each line in the list corresponds to a row in the initial file.  But instead of the data just being some object without specific identity - assuming you have column headings id, name and age in your original file the results would look likethe column_headings object is a list of the original column headings from the file if you wanted to manipulate/explore those.  Of course the next question is how to save your data as a CSV file.  There are a number of Q&A here on how to use the DictWriter method.
You can do it in this way as welloutput would be
You could use Python's chain() function as follows:This would display data as:This uses readlines() to first read each of your lines in. This has the benefit of removing the newlines, giving you a list of lines. For each line, it use split() to create a list of entries, and then flattens all of the lists into a single list to give you the required results using the chain() function.
I suspect those newlines are there separating rows and you would be better off:If you want to have a single, long tuple, you can do that instead by concatenating the results of the operation


Answer URL
https://docs.python.org/3/library/itertools.html?highlight=chain#itertools.chain.from_iterable
