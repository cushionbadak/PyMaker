Natural Text
I see lot of examples of generator functions, but I want to know how to write generators for classes. Lets say, I wanted to write Fibonacci series as a class. Output:Why is the value self.a not getting printed?  Also, how do I write unittest for generators?   
How to write a generator class?You're almost there, writing an Iterator class (I show a Generator at the end of the answer), but __next__ gets called every time you call the object with next, returning a generator object. Instead, use __iter__:To make the class itself an iterator:And now:Why is the value self.a not getting printed?Here's your original code with my comments:So every time you called next(f) you got the generator object that __next__ returns:Also, how do I write unittest for generators?You still need to implement a send and throw method for a GeneratorAnd now:    So let's implement a generator object, and leverage the Generator abstract base class from the collections module (see the source for its implementation), which means we only need to implement send and throw - giving us close, __iter__ (returns self), and __next__ (same as .send(None)) for free (see the Python data model on coroutines):and using the same tests above:Python 2The ABC Generator is only in Python 3. To do this without Generator, we need to write at least close, __iter__, and __next__ in addition to the methods we defined above.Note that I copied close directly from the Python 3 standard library, without modification. 
__next__ should return an item, not yield it. You can either write the following, in which Fib.__iter__ returns a suitable iterator:or make each instance itself an iterator by defining __next__.
Do not use yield in __next__ function and implement next also for compatibility with python2.7+Code
If you give the class an __iter__() method implemented as a generator, it will automatically return a generator object when called, so that object's __iter__ and __next__ methods will be the ones used.Here's what I mean:Output:


Answer URL
https://docs.python.org/3/reference/datamodel.html#coroutine-objects
https://docs.python.org/3/library/stdtypes.html#generator-types
