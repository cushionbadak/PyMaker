Natural Text
I have to implement a binary tree in Python. One node of a tree have several attributes. One of my requirements is a minimum of memory usage, specifically the overhead of the data structures.So my question is, how much overhead is produced by different ways of the implementation. I think about using a dictionary where one key is "left" and another is "right" for the child nodes. Another way would be by using a class with the attributes "left" and "right" for the children. Are there any noticable advantages or disadvantages for these two options? Or are there any better options? I'll have to use Pythons standard library and I'm using Python 3.5.
I think you can use class, dictionary, and namedtuple to implement it.if you want to use class:This will return 56 on my PC with python 3.5.2.If we want to optimize it, we add __slot__ atrribute.This will also return 56 on my PC.If you want to use dictionary:this will return 288 on my PC.There is another option: using namedtuplethis will return 76 on my PC.According to the code above, I think we should use __slot__ with class to implement your code for considerating memeory limitation.
Python dicts are heavy, memory-wise. A class that doesn't require dynamic attributes can be comparitively light-weight if you take advantages of __slots__:By default, instances of classes have a dictionary for attribute  storage. This wastes space for objects having very few instance  variables. The space consumption can become acute when creating large  numbers of instances.The default can be overridden by defining __slots__ in a class  definition. The __slots__ declaration takes a sequence of instance  variables and reserves just enough space in each instance to hold a  value for each variable. Space is saved because __dict__ is not  created for each instance.Consider:


Answer URL
https://docs.python.org/3/reference/datamodel.html#slots
https://docs.python.org/3/reference/datamodel.html?highlight=slot#object.__slots__
