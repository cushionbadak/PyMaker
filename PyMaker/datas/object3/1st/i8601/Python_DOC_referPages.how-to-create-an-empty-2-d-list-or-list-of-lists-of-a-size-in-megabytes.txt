Natural Text
how to create an empty 2 d list or list of lists of a size in megabytes. main purpose is it can store data in Mbs but while iterating it should not process empty sub sub lists. 
It sounds like you want a data structure like this: [[], [], []], ultimately. Let's call that final data structure master. There are two ways to interpret your question, then:1) the "size" of just master itself (and not the objects to which it refers) should be n megabytes.2) the size of master plus the size of every object contained within should be n megabytes.These are two slightly different problems. If you just wanted to add empty lists to master until the size of master reached n MB, then you could do something like this.sys.getsizeof returns the size of an object in bytes, so that's why we convert the passed mb (megabytes) parameter to bytes. Then we create an empty, "master" list and grab its size (which is 64 bytes in Python). After that, we just append to master empty lists until we reach the desired size. You could really just initiate size as 64 and then add 8 for each additional list, instead of using sys.getsizeof.Notice, however, that the ultimate size of master likely will not correspond with the size you would expect from appending k lists to master. That's because sys.getsizeof only measures the size of master itself, and not the lists contained therein. Consider this:Well, look at that. The size, in bytes, of [] (an empty list) is 64 bytes. If we nest an empty list inside of a formerly-empty list, call the outer list arr, then the size of arr becomes 72. Each additional object (str, list, set, etc.) added to arr adds 8 bytes to the size of arr. But there's still technically an empty list inside of [[]], right? It's up to you whether you want to account for the size (64 bytes) of each empty list inside your master list. To get both the size of master and the objects contained within, you can try something like this:We add 64 bytes for the additional list, and 8 for the additional size added to master from that list. Please note that, depending on how many megabytes you pass (e.g. 2.53 versus 2.0), your final master list may or may not be exactly the size of mb that you pass (that's because we can't append a fraction of a list; it's either 64 bytes or nothing).Depending on whether mb is a strict upper or lower limit, you can adjust where master's size falls (i.e. add some modular arithmetic in there to find the maximum or minimum number of lists for a given number of megabytes).And, suppose you wanted to fill a list with whatever until its size reached n MB. You could use the recursive memory footprint function here to measure the size of everything in that list (whether the objects within are str, set, list, dict, or tuple, or any combination of those classes).As you can see, there's lots of room above for your own interpretation and tweaking, but this should give you a good start.


Answer URL
https://docs.python.org/3/library/sys.html#sys.getsizeof
