Natural Text
I have the following code:The output is:... etc. Why do the Nones appear? If I instead have:Then I get what I would expect:... etc. Further, is there a way to write it as the generator expression to get the same result as the latter?
yield is an expression, and its value is whatever is sent into the generator with send.  If nothing is sent in, the value of yield is None.  In your example yield from yields the values from the list, but the value of the yield from expression itself is None, which is yielded at each iteration of the enclosing generator expression (i.e., every value of range(10)).Your example is equivalent to:Note the extra yield.You will always have this issue if you try to use yield in a generator expression, because the generator expression already yields its target values, so if you add an explicit yield, you are adding an extra expression (the yield expression) whose value will also be output in the generator.  In other words, something like (x for x in range(5)) already yields the numbers in range(5); if you do something like ((yield x) for x in range(5)), you're going to get the values of the yield expression in addition to the numbers.As far as I know, there is no way to get the simple yield from behavior (without extra Nones) using a generator comprehension.  For your case, I think you can achieve what you want by using itertools.chain.from_iterable:(Edit: I realized you can get the yield from behavior in a generator comprehension by using nested for clauses: x for n in range(10) for x in bin(n)[2:].  However, I don't think this is any more readable than using itertools.chain.)


Answer URL
https://docs.python.org/3/whatsnew/3.3.html
