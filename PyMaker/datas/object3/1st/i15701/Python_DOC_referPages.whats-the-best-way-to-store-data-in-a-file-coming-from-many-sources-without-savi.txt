Natural Text
Let me explain this question a bit. I have multiple users which generate data. The data is basically as follows:Now every time this data is generated i want to store it to a file, but only if under the name there is not yet an entry in the file. If there is an entry I need to check if the values have changed and update them. There could be a cuple of thousand entries. Please let me know I you guys need additional infos to guide me in the right direction.Thank you
A couple thousand entries is nothing, so you can just do this in the simplest possible way: Build up a dictionary in memory, mapping names to entries, then write it out at the end:If your data grow by a few orders of magnitude and you can't afford to keep everything in memory, you can just replace d with a shelve with almost no change to your code, or a sqlite3 or other more powerful database with a bit more changes. (In fact, if you don't need a specific output format, or haven't chosen one yet, you should probably consider using a database as that output format, and just skipping the second half.)From your comment:There is basically no end. The script runs forever and new data sets are generated from time to time. When generated they have be stored or update the exiting data. I might also be possible, that there are several instances of the script which all generate data and try to access the same file. so i guess a database would be a good idea.If you're talking about key-accessible values that can be concurrently accessed and updated from other programs, yeah, that pretty much is a database. You can build (a simple) one yourself, or use an existing one.A key-value or tuple database is still the obvious choice, but shelve itself (or anything based on dbm) isn't going to cut it, because it doesn't provide concurrency. For something this small, you can just use the same trick mail agents have used for decades: store each entry in a separate file, using the key to generate the filename, and file locks for atomicity. But really, there are so many easy-to-use, efficient, and reliable key-value stores out there (see nosqldatabase for a nice list) that you might as well pick one of them.A SQL database will make things a little more complex (you've got to either write SQL, or use some kind of front end like SQLAlchemy), and quite possibly slower. On the other hand, the SQL database that Python comes with, sqlite3, supports concurrency. (See the timeout and isolation_level settings in the docs for info on how to use it.) Not in the most beautiful or efficient way possible, but for a few thousand entries, it's more than good enough. So, if you want to stick with the stdlib, it might be worth considering.


Answer URL
https://docs.python.org/3/library/shelve.html
https://docs.python.org/3/library/sqlite3.html
https://docs.python.org/3/library/sqlite3.html#sqlite3.connect
