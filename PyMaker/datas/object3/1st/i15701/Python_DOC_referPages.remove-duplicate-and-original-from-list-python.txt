Natural Text
given a list of string (i am not aware of list), i want to remove the duplicate and original word.for example:the output should should remove the duplicates so something like this ['a', 'b', 'd']I do not need to preserve the order.
Use a collections.Counter() object, then keep only those values with a count of 1:This is a O(N) algorithm; you just need to loop through the list of N items once, then a second loop over fewer items (< N) to extract those values that appear just once.If order is important and you are using Python < 3.6, separate the steps:Demo:That the order is the same for both approaches is a coincidence; for Python versions before Python 3.6, other inputs may result in a different order.In Python 3.6 the implementation for dictionaries changed and input order is now retained. 

collections.Counter will count the occurrences of each element, we keep the elements whose count/value is == 1 with if v == 1 
@Padraic:If your list is:thenwould return the following:which is not the thing adhankar wants..Filtering all duplicates completely can be easily done with a list comprehension:The output of this would be:item stands for every item in the list lst, but it is only appended to the new list if lst.count(item) equals 1, which ensures, that the item only exists once in the original list lst.Look up List Comprehension for more information: Python list comprehension documentation
You could make a secondary empty list and only append items that aren't already in it.I don't have an interpreter with me, but the logic seems sound.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
