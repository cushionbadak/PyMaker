Natural Text
What is the appropriate exception to raise in a function to signal that a precondition was not met?Examples:
You should use both TypeError and ValueError.The first three exceptions should be TypeErrors because we are signaling that the arguments are of an incorrect type.  From the docs:exception TypeErrorRaised when an operation or function is applied to an object of  inappropriate type. The associated value is a string giving details  about the type mismatch.The last exception however should be a ValueError because age is the correct type but has an incorrect value (it is negative).  From the docs:exception ValueErrorRaised when a built-in operation or function receives an argument that  has the right type but an inappropriate value, and the situation is  not described by a more precise exception such as IndexError.
I also think you should use TypeError and ValueError but you can also improve the way you apply your preconditions.Some time ago I was playing with postconditions and preconditions. Python allows you to write a much more elegant solution using decorators instead those if statements inside the function.For instance:The condition, the exception you want to raise if the condition is not fulfilled and the message you want to show.This part check if the condition is fulfilled.If everething is ok, just return the result of the original funcion.If not, raise the exception you pass with your message.Now you can write your function like this:This way is much more easier to read what can and can't be done. And actualy, you can use this precondition decorator in any function you want to.
I would go with ValueError: Raised when a built-in operation or function receives an argument that  has the right type but an inappropriate value, and the situation is  not described by a more precise exception such as IndexError.Source: https://docs.python.org/2/library/exceptions.html
I like Raydel Miranda's answer using decorator pre-conditions for the function. Here is an somewhat similar approach that, instead of decorators, uses introspection and eval. It would be less efficient, but arguably slightly more concise and expressive.This will raise exceptions such as:Also nice: If you don't specify any message, it still gives reasonable output. For example:Yields:This will work under either Python 2 or 3.


Answer URL
https://docs.python.org/3/library/exceptions.html#TypeError
https://docs.python.org/3/library/exceptions.html#ValueError
