Natural Text
I'm trying to make my first advanced python project but I'm struggling long time with imports.Can someone describe me the usage of imports in python? Docs found about python imports in the official page is not so suffucient for me...Here is an example:I have the following source structure:and the content of the files:When I start a.py it says: ImportError: No module named 'c'.When I start b.py only it says everything's fine.Another solution when in b.py i'm modifying the import to "import b.c" -> in this case when I call a.py it will work, but when I call only b.py it is not going to work as b.py doesn't know b package.Why do I need to start a.py and b.py also? a.py should be an executor for UTs, and b.py should be a UT.That's why it can happen that I would like to call all of the UTs and start a.py, and also it can happen that I'm just starting a specific UT (b.py).
In your a.py, instead of just having import b, try from b import b because you want to import b.py from the b module.Alternatively, in your b/init.py, have from b import * But this is a question of preference (Look at this thread for more information on this topic)This is a good tutorial to get started with modules and packages. (For Python 2)If you are using Python 3, then it's a little bit different. Python 3 no longer supports implicit package name imports. This link explains this well. So you are required to explicitly mention where the package actually is from by using relative import - from . import c instead of import c (in your b.py) and in a.py: from b import b instead of import b.We avoid using relative importing in a.py, because we want to run it as a script. In Python 3, simply running a module that uses relative import, as a script will throw the Error: SystemError: Parent module '' not loaded, cannot perform relative import. This link explains this issue and provides a solution. If you want to execute a module like a stand alone script you can use the -m flag: check the docs.So, in your case:a.py:b.py:c.py: no changeIts good to explicitly cite only the modules/classes/functions you really need to import instead of importing a whole module, for lookup efficiency. But if you really wanted to just import the whole "b" package by using import b instead of just importing the b.py module from the b package using from b import b, you need to include all the modules that you mean to ship out in the all variable in your b/init.py like so:As explained very well in this post. Hope this was useful.


Answer URL
https://docs.python.org/3/using/cmdline.html#cmdoption-m
