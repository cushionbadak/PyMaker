Natural Text
I use a "keep alive" processes model (who communicates with Pipes with main process) in my software, and I'm trying to share read-only objects between them and the main process. An example to show my problem:Output is:If I create simple processes (start_in_oneshot_processes), obj have the same memory address in subprocess and in main process: 0xb7266dc8.But when my process receive objects with a Pipe (start_in_keepedalive_processes), objects memory address are not the same as the main process: example: 0xb7266488 instead of 0xb7266dc8.These objects are read-only by sub processes. How can I share them between main process and subprocess (and save memory copy time) ?
You can't achieve what you want using Pipe.  When data is sent through a pipe to another process, that process has to store a copy of the data in its own address space --- a new object, in Python.  Most other methods of shipping data between processes are the same.It's only coincidence that you saw the same memory address from the start_in_oneshot_process function, likely due to your choice of operating system.  In general, two processes won't share the same RAM at all.  (Check the Process docs section on Contexts and Start Methods for the differences between Windows spawn and Unix fork.)If it's really important that two processes can inspect the same chunk of memory, you can try either shared memory or an object manager process.  Note that those same docs tell you that this rarely a good idea.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods
https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes
