Natural Text
I can't find an __iter__() method defined in rpy2.robjects.DataFrame, nor in any of its base classes*Yet, I can use this code to convert a DataFrame into a dict:Why doesn't list(dataframe) in the above code trigger a TypeError: 'DataFrame' object is not iterable?* Determined by running the following code:
The list method works in terms of the iter method.* And, as the docs say:Without a second argument, object must be a collection object which supports the iteration protocol (the __iter__() method), or it must support the sequence protocol (the __getitem__() method with integer arguments starting at 0).Here's an example of a class that's iterable** without defining __iter__:The output will be [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].If you're curious, this "sequence protocol" if effectively how for loops worked in early Python, but the modern definition was created for backward compatibility back when iterators were added in Python 2.2.*** It could have been removed in 3.0, but there were good arguments for why it was useful, so it stayed.***** Actually, at least in CPython, that's not how it actually works, but it's documented to work as if it were calling iter.** But notice that it's not an Iterable, even though that's one of the few "automatic ABCs" that you don't have to inherit from/register with. The documentation explicitly doesn't say that Iterable means iterable; it says "See also the definition of iterable".*** For example, third party libraries like numeric, the predecessor to today's numpy, provided collection classes that worked in for loops in Python 2.1, and they wanted them to keep working even though for loops were now implemented in terms of iterators.**** I don't remember what exactly the arguments were, but it must have had something to do with certain classes being more readable/easier to understand by thinking in terms of the sequence protocol instead of manually reproducing the same thing in terms of the iteration protocol. You'd have to hunt through the python-3000 list archives for details.
I think every robject implements rinterfaceyou can see the __iter__ method inhttps://bitbucket.org/lgautier/rpy2/src/08ec0c15bd5ef8170ad8a49c2dc2b4a8dea36d64/rpy/rinterface/_rinterface.c?at=default#cl-2446at least I think ... it gets pretty tangled pretty quick 


Answer URL
https://docs.python.org/3/library/functions.html#iter
https://docs.python.org/3/glossary.html#term-iterable
https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable
