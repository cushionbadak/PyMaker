Natural Text
The phrase "keyword only args" in Python is a bit ambiguous - usually I take it to mean args passed in to a **kwarg parameter.  However, the inspect module seems to make a distinction between **kwarg and something called "keyword only arguments".From the docs:inspect.getfullargspec(func)Get the names and default values of a Python functionâ€™s arguments. A  named tuple is returned:FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults,            annotations)args is a list of the argument names. varargs and varkw are the names  of the * and ** arguments or None. defaults is an n-tuple of the  default values of the last n arguments, or None if there are no  default arguments. kwonlyargs is a list of keyword-only argument  names. kwonlydefaults is a dictionary mapping names from kwonlyargs to  defaults. annotations is a dictionary mapping argument names to  annotations.So the inspect module has something called kwonlyargs and kwonlydefaults.  What does this mean in an actual function signature?  If you have a function signature that accept a **kwarg argument, you can't really know the names of the keyword arguments until runtime, because the caller can basically just pass any arbitrary dictionary.  So, what meaning does kwonlyargs have in the context of a function signature - which is what the inspect.getfullargspec provides.
TL;DR:  Keyword-only arguments are not the same as normal keyword arguments.Keyword-only arguments are arguments that come after *args and before **kwargs in a function call.  As an example, consider this generic function header:In the above, kwonly takes a keyword-only argument.  This means that you must supply its name when giving it a value.  In other words, you must explicitly write:instead of just passing a value:To explain better, consider this sample call of the function given above:When Python interprets this call, it will:Assign arg to 1 because its position in the function signature matches the position of 1 in the call.Place 2 in *args because *args collects any extra positional arguments and 2 is extra.Assign kwonly to 3 because we have (as is necessary) explicitly told it to.  Note that if we had done this instead:3 would also be placed in *args and a TypeError would be raised for not supplying an argument to kwonly (since we did not give it a default value in this case).Place kw=4 in **kwargs because it is an extra keyword argument, which are collected by **kwargs.Below is a demonstration of what I said above:Basically, you can look at keyword-only arguments as keyword arguments where you must supply the name of the parameter when giving them a value.  A positional value will not suffice, as with normal keyword arguments.Finally, I know that some people are thinking "Why have keyword-only arguments anyways?"  The answer is simply that they make things more readable in some cases (especially with functions that take a variable number of arguments).As an example, consider the built-in max function and its keyword-only key argument.  What is more readable to you?  Doing something like this:and having people remember that the first argument to max is always the key function or doing this:and making it clear to everyone that lambda x: -x is your key function.  Plus, making key a keyword-only argument allows you to simply omit the key function if you do not need one:instead of doing:For more information, you can check out these sources:https://docs.python.org/3/reference/compound_stmts.html#functionhttps://docs.python.org/3/reference/expressions.html#callshttps://docs.python.org/3/glossary.html#term-parameter


Answer URL
https://docs.python.org/3/glossary.html#term-key-function
https://docs.python.org/3/reference/compound_stmts.html#function
https://docs.python.org/3/reference/expressions.html#calls
https://docs.python.org/3/glossary.html#term-parameter
