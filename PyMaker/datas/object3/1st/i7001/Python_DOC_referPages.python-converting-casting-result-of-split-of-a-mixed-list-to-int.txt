Natural Text
I wonder if there is a more elegant/pythonic way to get the same result as the following code:num1, num2, string = input().split()    num1 = int(num1)    num2 = int(num2)where num1 (1 <= num1 <= 15) and num2 (5 <= num2 <= 100) are integer and string is a string consisting of only uppercase letters.
You could pre-define the sequence of the respective types and directly cast them using zip (in python 3).
With map() and str.isdigit() functions, assuming that input expects only integer and text values in strict order:The output (for input "10 55 hello"):

I don't think this has been said yet - it may be an option to use argparse. For your specific case, this may be a little over the top, and I would recommend using another answer, but for someone with a larger use case this may be useful as it can easily handle many different types and names. It is also shorter if you need to use it many times. This could probably also be extended to some more types - argparse supports file types, for example.This has the output:Here, build_parser takes a list of tuples of the name and type of each variable, and builds a parser, returning a closure that can parse a string into a Namespace object. Namespace object can be used by just using the attribute syntax (like result.num2). You can see also that as I've used shlex.split, it can handle an input like "500 39 'the quick brown fox'"Note that the only way to stop an exception, to my knowledge is to useThis is slightly dubious as SystemExit may have been for some other, good, reason.


Answer URL
https://docs.python.org/3/library/argparse.html
