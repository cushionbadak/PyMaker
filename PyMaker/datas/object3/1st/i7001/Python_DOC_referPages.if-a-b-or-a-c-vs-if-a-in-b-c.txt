Natural Text
In my code I used to have comparisons like if a == b or a == c or a == d: fairly frequently. At some point I discovered that these could easily be shortened to if a in {b, c, d}: or if a in (b, c, d): if the values aren't hashable. However, I have never seen such a construction in anyone else's code. This is probably because either:The == way is slower.The == way is more pythonic.They actually do subtly different things.I have, by chance, not looked at any code which required either.I have seen it and just ignored or forgotten it.One shouldn't need to have comparisons like this because one's code sould be better elsewhere.Nobody has thought of the in way except me.Which reason, if any, is it?
For simple values (i.e. not expressions or NaNs), if a == b or a == c and if a in <iterable of b and c> are equivalent. If the values are hashable, it's better to use in with a set literal instead of tuple or list literals:CPython's peephole optimiser is often able to replace that with a cached frozenset() object, and membership tests against sets are O(1) operations.
Performancewise : "in" is betterAlso "in" ensures code is not repeating a == 1 or a == 2 is repetition.And bad to read. "in" just makes it much more easy to understand. This is one of the cases which is simple yet elegant code practice. In short we(should) use "in" more often if we are not already using it.
I was curious to know what the timing difference was between straight comparison vs checking in the array. Conclusion: The cost of constructing the array is not free and must be taken into account when considering the speed differences.If the array is being constructed at the time of comparison, it is technically slower than the simple comparison.  So the simple comparison would be faster in or out of a loop.That said if the array is already constructed then it would be faster to check in the array in a large loop than doing a simple comparison.This doesn't quite answer your question as to the reason why you don't often see the comparison using in.  I would be speculating but it's likely a mix of 1,2,4, and the situation where the author needed to write that particular bit of code.I've personally used both methods depending on the situation.  The choice usually came down to speed or simplicity.edit:@bracco23 is right, there are slight differences whereby using tuples vs array vs list will change the timing.


Answer URL
https://docs.python.org/3/library/stdtypes.html#frozenset
