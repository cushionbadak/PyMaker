Natural Text
I hope this question is sufficiently question-worthy and that I haven't missed the point. I understand that there are likely multiple answers - I will mark the best one I get correct, but if this is not an OK question to ask then please say and I will delete as appropriate.If I am using python scripts where there's lots of (more than one) random numbers required, e.g....then is randrange the best way to do it? Specifically, how random actually is it? I feel like I notice that it has a sort of... bias?Like, repeatedly seems to get the same values.I might be imagining it.But obviously I know computers don't do random well (at all), and I was wondering how this module is even seeded or whatever...Is there a better way to generate my random numbers? Like a module that's "more random" or a way to give it a "more random" seed?
Better to use SystemRandom for better unpredictability. randrange is a pseudorandom number generator which uses Mersenne Twister.
This is heavily dependent on what degree of randomness you're looking for. Python provides os.urandom with the intent of cryptographic use; but that reads from /dev/urandom, not /dev/random, so it might not be random enough for some extreme cases (discussion on unix & linux stack exchange). The secrets module was developed for a clearer choice, while the random module is clearly pseudo-random. That pseudo-randomness is usually enough, provided the seed is not repeated (doing that is helpful for things like repeatable tests or regenerating identical procedurally generated games, which is why we have getstate and setstate). In general, our ability to find patterns in randomness far exceeds our ability to recognize randomness. 
I don't know much about the differences of random or pseudo-random but if you run the same randrange command for 10 million times you can see that the percentages of repeats are very close. So I don't think you can spot any non-random behavior just by printing the generated numbers and looking at them (not in this case at least).


Answer URL
https://docs.python.org/3/library/os.html#os.urandom
https://docs.python.org/3/library/secrets.html#module-secrets
https://docs.python.org/3/library/random.html#module-random
https://docs.python.org/3/library/random.html#
