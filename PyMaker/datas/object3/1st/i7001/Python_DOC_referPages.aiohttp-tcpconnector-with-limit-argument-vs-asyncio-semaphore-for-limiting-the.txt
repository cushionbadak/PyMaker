Natural Text
I thought I'd like to learn the new python async await syntax and more specifically the asyncio module by making a simple script that allows you to download multiple resources at one.But now I'm stuck.While researching I came across two options to limit the number of concurrent requests:Passing a aiohttp.TCPConnector (with limit argument) to a aiohttp.ClientSession orUsing a asyncio.Semaphore.Is there a preferred option or can they be used interchangeably if all you want is to limit the number of concurrent connections?Are the (roughly) equal in terms of performance?Also both seem to have a default value of 100 concurrent connections/operations. If I use only a Semaphore with a limit of lets say 500 will the aiohttp internals lock me down to 100 concurrent connections implicitly?This is all very new and unclear to me. Please feel free to point out any misunderstandings on my part or flaws in my code.Here is my code currently containing both options (which should I remove?):Bonus Questions:How do I handle (preferably retry x times) coros that threw an error?What is the best way to save the returned data (inform my DataHandler) as soon as a coro is finished? I don't want it all to be saved at the end because I could start working with the results as soon as possible.s
Is there a preferred option?Yes, see below:will the aiohttp internals lock me down to 100 concurrent connections implicitly?Yes, the default value of 100 will lock you down, unless you specify another limit.You can see it in the source here: https://github.com/aio-libs/aiohttp/blob/master/aiohttp/connector.py#L1084Are they (roughly) equal in terms of performance?No (but the difference in performance should be negligible), since aiohttp.TCPConnector checks for available connections anyway, wether or not it is surrounded by a Semaphore, using a Semaphore here would be just unnecessary overhead.How do I handle (preferably retry x times) coros that threw an error?I don't believe there is a standard way to do so, but one solution would be to wrap your calls in a method like this:


Answer URL
https://docs.python.org/3/library/asyncio-sync.html#asyncio.Semaphore
