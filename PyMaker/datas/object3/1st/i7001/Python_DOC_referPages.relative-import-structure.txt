Natural Text
My program has a structure like so:All programs are started with mod1.py which chooses which subsequent script (mod3/mod4.py) to run based off supplied system arguments. So the top level directory at import is scripts/. Say I run my program such that >mod1.py 3 executes sub1.mod3. Within mod3 I need a function defined in mod2 (this module holds reused code blocks for mod3/mod4). When I try from .. import mod2 I get the ValueError that I attempted a relative import beyond the top-level directory. I was referencing the docs on the syntax, and if we compare them to my situation, mod3.py would be the current module (after mod1.py) called it. What is wrong with how I am trying to do relative imports?mod1.py:mod3.py
You say:All programs are started with mod1.py which chooses which subsequent script (mod3/mod4.py) to run based off supplied system arguments. So the top level directory at import is scripts/. From the docs (6.4.2 Intra-package Referencing):Note that relative imports are based on the name of the current module. Since the name of the main module is always "__main__", modules intended for use as the main module of a Python application must always use absolute imports.hence you must use absolute imports in your files.So your code should readorAdditionally, I'm not sure why you want to do this.It would be simpler to keep both modules in separate packages, and load them with an if condition, while keeping the files all in the same directory, sans the __init__.py:If you must keep them in separate folders, use this strcture:With this structure your relative imports should work. Importing would then be:It is worthy to note that, regardless of what part of a library or package you import, the entire package gets imported anyway - it's just not all available in the scope.


Answer URL
https://docs.python.org/3/tutorial/modules.html
