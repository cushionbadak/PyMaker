Natural Text
Given a function with a parameter a and two other parameters (pickle_from, pickle_to), I'd like to:Load and return the pickled object located at pickle_from, if pickle_from is not None.  If it is None, compute some function of a and return it.Dump the result of the above to pickle_to if pickle_to is not None.With a single function this is straightforward.  If pickle_from isn't null, the function just loads the pickled result and returns it.  Otherwise, it performs some time-intensive calculation with a, dumps that to pickle_to, and returns the calculation result.My question is regarding how to build a decorator so that this process can form a shell around multiple functions similar to somefunc, cutting down on source code in the process.I'd like to be able to write something like:Is this possible?  Something about decorators makes my head explode, so I will politely decline to post here "what I have tried."
This decorator requires a little bit of introspection. Specifically, I've made use of inspect.Signature to extract the pickle_from and pickle_to parameters.Other than that, it's a very straightforward decorator: It keeps a reference to the decorated function, and calls it if necessary.
Given your use case, I think it would be clearer to use just a generic wrapper:Then you'd use it like:This avoids having to add a decorator everywhere you want to use this feature, and in fact works with any callable (not just functions), from your code or else.


Answer URL
https://docs.python.org/3/library/inspect.html#inspect.Signature
