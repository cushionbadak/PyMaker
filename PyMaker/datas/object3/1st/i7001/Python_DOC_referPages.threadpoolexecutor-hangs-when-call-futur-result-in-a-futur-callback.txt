Natural Text
I am using "requests-futures" package and call asynchronous get/post in asynchronous get/post result callback (add_done_callback on futur result). Sometimes, my code hangs. After many investigation hours, I can reproduce the lock with a minimal code: If I run this peace of code in a bash loop:The program hangs every times with the "trace": If I break it with ctrl^c, I have the following stack trace:Somebody could explain me what is happening ? I check the possible deadlocks in the concurrent.futures module, but I do not think it matches.Thank you.
tasks submitted to a fixed-sized thread pool may not call blocking operations like Future.result(). This leads to a specific kind of deadlock, called "thread starvation". Using time.sleep() also switches a thread off the service and increases probability of thread starvation.
I answer to my own question. After investigation, it's simple. I do not shutdown the TheadPoolExecutor and do not use with, then sometimes the main function completes and the finalize the main thread, the ThreadPoolExecutor state becomes "shutdown" whereas callback is not completed. 


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor
