Natural Text
The code i have so far is I need it to print out like  But my output looks like:
Try this:
If you're using python 3, which it appears you are, you could very simply print like that printing "you rolled" and then the numbers one at a time with the print argument 'end' set to a blank string
You want a comma-separated list of numbers, but you are only generating one number at a time.You say:I need it to print out likeFirst, let's try working with what you already have. Python's built-in print() function can do a lot of cool things - please do read the documentation.First, you can use a "keyword argument" to override what print() outputs when it finishes printing. Normally, at the end print() emits a newline, but you can suppress that, or replace it:Or, since you want a space between the words and the numbers, you could use the space as the end-of-line marker:In either of the above cases, there will not be a newline printed, so whatever you put in your next call to print() will pick up at the end of the text.Now, in your loop you generate a random number and print it. You can do that just fine. It's worth pointing out that randint returns an integer. It actually has the word "int" as part of the name. So you really don't need to call int(randint. Now, that's not going to do what you want, because it will jam all the numbers together like "you rolled 123456". So there's a tricky problem of how to separate the numbers with commas:That won't quite work, because print() puts a space between every two things it prints. You can override that with the sep= named argument.Even this won't quite work, since it always puts a comma in front of the number. That is fine, except for the very first number, but you wind up with something like "you rolled ,1,2,3,4,5,6".Instead, you need some logic to suppress the comma. Or you need to handle one case outside the loop:In general, suppressing the comma with an if statement is "cleaner" but pulling that outside the loop will be faster, since the if statement gets executed every time. This won't matter for 6 items, but it does matter if you have, say, 6 billion items. Finally, it's worth pointing out that in this scenario, you are forgetting the numbers rolled as soon as you roll them. Frequently, that won't work. You might consider just "unrolling the loop" and storing 6 values in 6 variables. (I don't know if this is useful, since I don't know what problem you are trying to solve.)In role-playing games, the dice used are frequently described as letter 'd' plus a number indicating the number of sides. A die capable of returning a number from 1-6 is a six-sided die (#sides ranges from 4 to 100). Thus, you are rolling a "d6", pronounced "dee six". Your for loop causes six such rolls, which is expressed as 6d6, "six dee six". Let's write a little function to avoid having to type so much, called d6 because that meets the requirements for Python identifiers:With that written, you can just say:


Answer URL
https://docs.python.org/3/library/functions.html#print
