Natural Text
The ApplicationI'm trying to build a python shell for my PyQt5 application using the stdlib InteractiveConsole so I can let users script live plots. I'm using a QTextEdit to display the stdout from the shell.The ProblemWhen I do for loops in the shell, the application freezes because the insertPlainText() to the QTextEdit is too fast. So I wrote a buffer that would delay the inserts by a few milliseconds. However, I noticed that as soon as I ran any blocking functions like time.sleep() in the for loops, it would freeze. So the prints inside the for loops will only be displayed after the loop is done. This does not happen if the buffer is disabled.For eg, if i do this in the shell:This will only print after 10 seconds.CodeThis is the most minimal version I could write according to MVCE guidelines.Here is the main.ui file:Here is themain.py file:The class BaseSignals is needed for communication between the main thread and the interpreter. Here is a transcript as to why this was implemented.What I knowThis line is responsible for inserting the plain text self.output.signal_str.emit(data). This emit() happens inside a QThread. So until the multiple self.buffer.write() is finished the emit() won't be processed. I thought adding a QApplication.processEvents() in DelayedBuffer.process() would help. It doesn't. I admit I could however be wrong about this.Any help appreciated.Thanks in advance.
Your interpreter thread is blocking on the InteractiveConsole.runcode() call.  It will not be able to process any signals until this call completes.  That is why you see the delayed output.You can get the effect you're after by changing toFor some old school debugging, disconnect you're stderr handling and sprinkle some print statements around like...


Answer URL
https://docs.python.org/3/library/code.html#interactive-interpreter-objects
