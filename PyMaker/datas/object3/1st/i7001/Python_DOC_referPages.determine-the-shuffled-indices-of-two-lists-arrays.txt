Natural Text
As a challenge, I've given myself this problem:Given 2 lists, A, and B, where B is a shuffled version of A, the idea is to figure out the shuffled indices.For example:Note that ties for identical elements can be resolved arbitrarily. I've come up with a solution that involves the use of a dictionary to store indices. What other possible solutions does this problem have? A solution using a library also works. Numpy, pandas, anything is fine.
As an improvement over your current solution, you could use collections.defaultdict and avoid dict.setdefault:Here are the timings for the two methods using the sample input given:Script used for testingResultsSo it appears that using defaultdict actually yields a slight speed increase. This actually makes since though since defaultdict is implemented in C rather than Python. Not to mention that the attribute lookup of the original solution - idx.setdefault1 - is costly.
We can make use of np.searchsorted with its optional sorter argument -Sample run -
LOL
As mentioned in my question, I was able to solve this using a dictionary. I store the indices in a dict and then use a list comprehension to pop them out:Output:This is better than the obvious [A.index(x) for x in B] because it is linearhandles duplicates gracefully 
The numpy_indexed package has an efficient and general solution to this:Note that it has a kwarg to set a mode for dealing with missing values; and it works with nd-arrays of any type just the same, as it does with 1d integer arrays.
Since several very nice solutions were posted, I've taken the liberty of assembling some crude timings to compare each method.Script used for testingResult/Output (run on Jupyter notebook server. 1000 loops)Here are some timings where the size of A is 100,000 random numbers. And B is its shuffled equivalent. The program was just too time and memory consuming. Also I had to reduce the number of loops to 100. Otherwise, everything is the same as above:


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/stdtypes.html#dict.setdefault
