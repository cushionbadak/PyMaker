Natural Text
This question already has an answer here:Difference between __str__ and __repr__?                    21 answers                I wondered why list.__str__() stringifies each element by __repr__() in follow case:First, I tried running above code in other python interpreter and get same result.Then I googled whether this behavior has been defined in the spec or not, however I couldn't find any document about list.__str__()'s procedure. I found this document, but it's not enough. It doesn't defined any procedure.Do any specifications for list.__str__ exist or not?
This might not be explicitly specified, but there is certainly logic to it. You're looking at the per type methods for repr and str in the list type. If you read the documentation for __str__, it shows that the default implementation is to fall back on __repr__. The core difference between the two is that __str__ is not expected to produce a valid Python expression, while __repr__ is. Lists, being a Python standard type, are naturally expected to show as valid expressions, thus should have repr, and repr will rely on calling repr for the contained items as well, or the expression might break. We end up with one question: How should lists be shown differently for str than for repr? This is where for instance a type for a deck of cards might produce "queen of hearts" instead of Card(1,12). There's no obvious choice for a list, so it just has no __str__. We can even verify that this is the case:The __str__ is inherited from object, and not specialized for list. 
In the absence of __str__ any container will default to __repr__ if passed to str. As it happens the containers in CPython (list, etc.) generally don't have a __str__ method and thus they will delegate to __repr__. For the __repr__ it makes sense to call the __repr__ of the elements.So it's no formal specification. It's just because these containers have no __str__ method.
I think that this behavior can be considered as specified. https://docs.python.org/3/library/stdtypes.html#list states that lists implement all of the common and mutable sequence operations (none of them include __str__ or __repr__) plus sort. So, according to the specification, there's no list.__str__ or list.__repr__ (despite that in CPython you can see them). Therefore str(a_list) is resolved as str(a_list) -> repr(a_list) -> list.__repr__ -> object.__repr__ (since list is a subclass of object). And according to https://docs.python.org/3/reference/datamodel.html#object.repr, object.__repr__ returns "the “official” string representation of an object". It's obvious from the docs that the official string representation for lists looks like [...] (where each element is repr-ed), that's what you observed.


Answer URL
https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range
https://docs.python.org/3/reference/datamodel.html#object.__repr__
https://docs.python.org/3/reference/datamodel.html#object.__str__
https://docs.python.org/3/library/stdtypes.html#list
https://docs.python.org/3/library/stdtypes.html#list
https://docs.python.org/3/reference/datamodel.html#object.__repr__
https://docs.python.org/3/reference/expressions.html#list-displays
https://docs.python.org/3/reference/datamodel.html#object.__repr__
