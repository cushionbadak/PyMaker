Natural Text
Is it possible to create a python for-loop with a modulo operation? I have a ringbuffer in Python and I want to iterate the elements between the startPos and endPos indexes, where startPos can have a bigger value than endPos. In other programming languages, I would intuitively implement this with a modulo operator:Is there a way to do this easily in Python? I only found theSyntax but nothing which provides an equivalent solution to my problem.My next approach would be to create the list in advance before iterate the indexes which are stored in the list. But is there a way to do this as a one-liner like in other programming languages by using the modulo operation directly in the for loop?
You  have some ways of doing that:As you do in "other programing languages" (i.e. C derived syntaxes), just that you basically have to write their for loop in a while form - and then you realize that C's for is just a while nonetheless:Now, for the  for statement, Python only has what is called "for each" - which always walks an iterable or sequence. So you can create an iterable that will yield your values - Note that while this second form is "bigger", it does abstract away your circular buffer logic, avoiding that hard code values get mixed with their meaning where you don't need to look at them - that is, inside the for body itself.Note that the actual idea of for in Python is to iterate over the buffer contents itself, not and index that will lead to its contents.So, the Python standard library includes a ready made circular buffer object already that always have its indexes normalized to 0 and (len - 1) - just import deque from the collections module.If you want a circular buffer with changing start and end indexes taht will wrap around and work automatically in forstatements, that is also relatively easy to do - if you don  need the full functionality, just subclass  list, add the start and end indexes, and make a custom implementation of its __iter__ method: And now you can use this custom container in your code:
For loops can take any iterable. As such you can create your own to do the work and drop it into the for loop. For example:Or, to create an iterable directly:See the docs for more information about when you might want to create an iterator directly for this purpose.
use range
I believe you should be able to use while instead of a for loop. This should work as long as you just want to increment i by 1 each time, then calculate the mod.Try: 


Answer URL
https://docs.python.org/3/glossary.html#term-iterator
