Natural Text
This question already has an answer here:Boolean operators vs Bitwise operators                    8 answers                I'm reading through a tutorial for a Python based trading platform, and it is recommending the use of bitwise (~, &, |) rather than boolean (not, and, or) operators for combining boolean expressions.Like factors, filters can be combined. Combining filters is done using  the & (and) and | (or) operators.Is there a good reason for this? I've never seen it before. I am not entirely sure about all the properties of booleans in Python but I do believe that in C and C++ booleans are represented by an integer 1 or 0 and can be operated on as such. Is Python similar? I can see how an & and an | at least could work in that case.What could be the purpose for using these bitwise operators instead of boolean? Is it faster?
Bitwise operators are usually the very wrong tool for the job. Bitwise operators are not faster (they have to do more work actually), and have a different precedence, so are bound to different parts of a larger expression compared to boolean operators.However, in some specific frameworks, bitwise operators replace boolean operators because they can be hooked into. There are __or__ and __and__ specal methods that let you control the return value for | and &, but there are no such hooks for the boolean operators (as the latter short-circuit; evaluating both expressions to pass to a hook would defeat that).So if the article is talking about numpy (or numpy-derived frameworks such as Pandas or Scipy), or an ORM framework like SQLAlchemy, Peewee or Django, then there is a good reason to use bitwise operators.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__or__
https://docs.python.org/3/reference/datamodel.html#object.__and__
