Natural Text
The Python manual states: The special sequence \w for 8-bit (bytes) patterns matches characters   considered alphanumeric in the ASCII character set; this is equivalent to   [a-zA-Z0-9_].Compare now:with:The first statement outputs the whole city name München, the second only the first letter M. The letter ü is a single byte with code point 0xFC = 252 (Latin-1). My question is: assuming that the Python manual is correct, how can I reconcile the difference in output between [\w]+ and [a-zA-Z0-9_]+  with the statement in the Python-3 manual? I use IDLE v. 3.6.2.
You referenced wrong manual (manual for python 3.1).The correct one is at https://docs.python.org/3/library/re.htmlIf you want \w work like [a-zA-Z0-9_], you should use the flag re.ASCII:
I'm not sure what source you're quoting from, but your link says:For Unicode (str) patterns:Matches Unicode word characters; this includes most characters that can be part of a word in any language, as well as numbers and the underscore. If the ASCII flag is used, only [a-zA-Z0-9_] is matched (but the flag affects the entire regular expression, so in such cases using an explicit [a-zA-Z0-9_] may be a better choice).For 8-bit (bytes) patterns:Matches characters considered alphanumeric in the ASCII character set; this is equivalent to [a-zA-Z0-9_].I'm still primarily using Python 2, but one of the big changes in Python 3 is that all strings are Unicode by default. Python will convert text to Unicode upon reading it.


Answer URL
https://docs.python.org/3/library/re.html
