Natural Text
I'm trying to create a python class for defining 2D geometry - mostly for 3D printing toolpath creation work, based on the work of Christopher Olah. I'm having an issue with my union() function.What I'm trying to do is pass it two functions, for example a circle-generating implicit function and a square-generating implicit function. These functions generate a surface that defines a geometric shape. For example, circle generates a surface that crosses Z=0 at a radius r. I'd like to union shapes - so pass in two shape-functions, and then return a function that can be evaluated at an x,y ordered pair. My union() function doesn't seem to be working, and I think the issue is comes from trying to generate a lambda function which takes two lambda functions as arguments, and returns a result based on what those two lambda functions would return.Is there a way to do this? I don't want to discretize my geometry - I'd like to be able to plug in ANY x,y point and get a value - where I plot, I generate an X,Y meshgrid and solve over that to plot, but I'd like continous boundaries for when it's time to create a toolpath.
The union should be a function on x and y, not A and B, which are already local variables (parameters). So presumably union should look more likes this:Also, I'm not sure what the geometer class is actually for. It doesn't look like you're using the fact that everything is a method much - you have a bunch of instance methods taking a self argument, but I can't see any of them using the self, and __init__ assigns nothing. You could probably get away quite easily with just bringing everything out of the class and into a global function. You could also consider implementing some of them as static methods, using @staticmethod - see the documentation


Answer URL
https://docs.python.org/3/library/functions.html#staticmethod
