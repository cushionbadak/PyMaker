Natural Text
I have found this problem in Python but I was also able to reproduce it with a basic C program.I am in CentOS 6 (tested also on 7), I have not tested on other Linux distributions.I have an application on 2 VMs. One has IP address 10.0.13.30 and the other is 10.0.13.56. They have a shared FQDN to allow load-balancing (and high availability) DNS based using gethostbyname or getaddrinfo (it is what is suggested in Python doc).If my client application is on a different sub-net (10.0.12.x for example), I have no problem: the socket.gethostbyname(FQDN) is returning randomly 10.0.13.30 and 10.0.13.56.But if my client application is on the same sub-network, it returns always the same entry. And it seems to be always the "closest": I have depoyed it on 10.0.13.31 and it returns always 10.0.13.30 and on 10.0.13.59 it returns always 10.0.13.56.On these servers CLI commands such as ping and dig are returning the result in different orders almost each timeI have searched many subjects and I concluded that it seems to be a kind of "prioritization to improve the success chances done by glibc" but I have not found any way to disable it. Because clearly in my case the 2 clients and the 2 servers VMs  are on the VMware connected to a single router, so I do not see how the fact that the last byte of the IP of the server is closest to the last byte of the IP of the client is taken into account.This is a replication of a problem that I have at customer side so it is not an option for me to just move the VMs to a different sub-net :-( ....Anybody has an idea to have correct load-balancing in the same sub-network? I can partially control the VM config so if a settings has to be changed I can do it.
Instead of hoping that the standard library will do load balancing for you, use socket.getaddrinfo() and choose one of the resulting hosts at random explicitly.  This will also make it easy to fail over to a different host if the first one you try is not available.


Answer URL
https://docs.python.org/3/library/socket.html#socket.getaddrinfo
