Natural Text
I want to write my own small mailserver application in python with aiosmtpd a) for educational purpose to better understand mailserversb) to realize my own features  So my question is, what is missing (besides aiosmtpd) for an Mail-Transfer-Agent, that can send and receive emails to/from other full MTAs (gmail.com, yahoo.com ...)?I'm guessing: 1.) Of course a domain and static ip2.) Valid certificate for this domain...should be doable with Lets Encrypt3.) Encryption...should be doable with SSL/Context/Starttls... with aiosmtpd itself4.) Resolving MX DNS entries for outgoing emails!?...should be doable with python library dnspython5.) Error handling for SMTP communication errors, error replies from other MTAs, bouncing!?6.) Queue for handling inbound and pending outbund emails!?  Are there any other "essential" features missing?Of course i know, there are a lot more "advanced" features for a mailserver like spam checking, malware checking, certificate validation, blacklisting, rules, mailboxes and more...Thanks for all hints!EDIT:  Let me clarify what is in my mind:I want to write a mailserver for a club. Its main purpose will be a mailing-list-server. There will be different lists for different groups of the club.Lets say my domain is myclub.org then there will be for example youth@myclub.org, trainer@myclub.org and so on.Only members will be allowed to use this mailserver and only the members will receive emails from this mailserver. No one else will be allowed to send emails to this mailserver nor will receive emails from it. The members email-addresses and their group(s) are stored in a database.  In the future i want to integrate some other useful features, for example:  Auto-reminders  A chatbot, where members can control services and request informations by email  What i don't need:  User Mailboxes   POP/IMAP access   Webinterface   Open relay issue:  I want to reject any [FROM] email address that is not in the members database during SMTP negotiation.  I want to check the sending mailservers for a valid certificate.  The number of emails/member/day will be limited.  I'm not sure, if i really need spam detection for the incoming emails?  Losing emails issue:  I think i will need a "lightweight" retry mechanism. However if an outgoing email can't be delivered after some retries, it will be dropped and only the administrator will be notified, not the sender. The members should not be bothered by email delivery issues. Is there any Python Library that can generate RFC3464 compliant error reply emails?Reboot issue:  I'm not sure if i really need persistent storage for emails, that are not yet sent? In my use case, all the outgoing emails should be delivered usually within a few seconds (if no delivery problem occurs). Before a (planned) reboot i can check for an empty send queue.
aiosmtpd is an excellent tool for writing custom routing and header rewriting rules for email. However, aiosmtpd is not an MTA, since it does not do message queuing or DSN generation. One popular choice of MTA is postfix, and since postfix can be configured to relay all emails for a domain to another local SMTP server (such as aiosmtpd), a natural choice is to use postfix as the internet-facing frontend and aiosmtpd as the business-logic backend.Advantages of using postfix as the middle-man instead of letting aiosmtpd face the public internet:No need to handle DNS MX lookups in aiosmtpd -- just relay through postfix (localhost:25)No worry about non-compliant SMTP clients in aiosmtpdNo worry about STARTTLS in aiosmtpd -- configure this in postfix instead (simpler and more battle-hardened)No worry about retrying failed email deliveries and sending delivery status notificationsaiosmtpd can be configured to respond with "transient failure" (SMTP 4xx code) upon programming errors, so no email is lost as long as the programming error is fixed within 4 daysHere's how you might configure postfix to work with a local SMTP server powered by e.g. aiosmtpd.We're going to run postfix on port 25 and aiosmtpd on port 20381.To specify that postfix should relay emails for example.com to an SMTP server running on port 20381, add the following to /etc/postfix/main.cf:And create /etc/postfix/smtp_transport with the contents:Run postmap /etc/postfix/smtp_transport after creating that file (and every time you modify it).On the aiosmtpd side, there are a few things to consider.The most important is how you handle bounce emails. The short story is that you should set the envelope sender to an email address you control that is dedicated to receiving bounces, e.g. bounce@example.com. When email arrives at this address, it should be stored somewhere so you can process bounces, e.g. by removing member email addresses from your database.Another important thing to consider is how you tell your members' email providers that you are doing mailing list forwarding. You might want to add the following headers when forwarding emails to GROUP@example.com:Here, I used postmaster@example.com as the recipient for list unsubscribe requests. This should be an address that forwards to the email administrator (that is, you).Below is a skeleton (untested) that does the above. It stores bounce emails in a directory named bounces and forwards emails with a valid From:-header (one that appears in MEMBERS) according to the list of groups (in GROUPS).
You may consider the following features:Message threading Support for Delivery statusSupport for POP and IMAP protocols Supports for protocols such as RFC 2821 SMTP and RFC 2033 LMTP email message transport Support Multiple message tagging Support for PGP/MIME (RFC2015)Support list-replyLets each user manage their own mail lists SupportsControl of message headers during composition Support for address groups Prevention of mailing list loops Junk mail control
The most important thing about running your own SMTP server is that you must not be an open relay. That means you must not accept messages from strangers and relay them to any destination on the internet, since that would enable spammers to send spam through your SMTP server -- which would quickly get you blocked.Thus, your server shouldrelay from authenticated users/senders to remote destinations, orrelay from strangers to your own domains.Since your question talks about resolving MX records for outgoing email, I'm assuming you want your server to accept emails from authenticated users. Thus you need to consider how your users will authenticate themselves to the server. aiosmtpd currently has an open pull request providing a basic SMTP AUTH implementation; you may use that, or you may implement your own (by subclassing aiosmtpd.smtp.SMTP and implementing the smtp_AUTH() method).The second-most important thing about running your own SMTP server is that you must not lose emails without notifying the sender. When you accept an email from an authenticated user to be relayed to an external destination, you should let the user know (by sending an RFC 3464 Delivery Status Notification via email) if the message is delayed or if it is not delivered at all.You should not drop the email immediately if the remote destination fails to receive it; you should try again later and repeatedly try until you deem that you have tried for long enough. Postfix, for instance, waits 10 minutes before trying to deliver the email after the first delivery attempt fails, and then it waits 20 minutes if the second attempt fails, and so on until the message has been attempted delivered for a couple days.You should also take care to allow the host running your mail server to be rebooted, meaning you should store queued messages on disk. For this you might be able to use the mailbox module.Of course, I haven't covered every little detail, but I think the above two points are the most important, and you didn't seem to cover them in your question.


Answer URL
https://docs.python.org/3/library/mailbox.html
