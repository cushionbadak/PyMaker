Natural Text
I have a list of strings I want a list of unique characters across all strings in the given list. For ll, output should be is there a clean way to do this ?
You want to produce a set of the letters:You can always convert that back to a list:Demo:You can also use itertools.chain.from_iterable() to provide a single iterator over all the characters:If you must have a list that reflects the order of the first occurrence of the characters, you can use a collections.OrderedDict() object instead of a set, then extract the keys with list():Demo:
Here's an inefficient way that preserves the order. It's ok when the total number of chars is small, otherwise, you should use Martijn's OrderedDict approach.outputHere's an alternative way to preserve the order which is less compact, but more efficient than the previous approach.outputUsing s.index as the key function is inefficient because it has to perform a linear scan on the s string for each character that it sorts, whereas my d dict can get the index of each character in O(1). I use the reversed iterator because we want earlier chars to overwrite later duplicates of the same char, and using reversed is a little more efficient than building a new string with [::-1].Creating the d dict is only slightly slower than creating set(s), and it may be a little faster than using OrderedDict, it certainly uses less RAM. 
I do not know the simplest way to do this, but I know one way:This is an easy way for a beginner because it doesn't need any modules which you probably don't know how to use yet.
You can use itertools for that:
output:
Just another one...Wrap list(...) around it if needed, though why would you.
Consider using a set()Now s should have all the unique letters. You can convert s to a list using list(s).
This is a function you can call and give it the list and it will return all unique letters and I added it to print at the endTo get a variable with the unique variables call the function like so:And you can replace lst with your list name.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
https://docs.python.org/3/library/collections.html#collections.OrderedDict
https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-compactdict
