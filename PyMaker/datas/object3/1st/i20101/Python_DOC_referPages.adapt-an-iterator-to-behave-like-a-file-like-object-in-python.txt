Natural Text
I have a generator producing a list of strings. Is there a utility/adapter in Python that could make it look like a file?For example,Because data may be big and needs to be streamable (each fragment is a few kilobytes, the entire stream is tens of megabytes), I do not want to eagerly evaluate the whole generator before passing it to stream adaptor.
Here's a solution that should read from your iterator in chunks.
The "correct" way to do this is inherit from a standard Python io abstract base class. However it doesn't appear that Python allows you to provide a raw text class, and wrap this with a buffered reader of any kind.The best class to inherit from is TextIOBase. Here's such an implementation, handling readline, and read while being mindful of performance. (gist)
The problem with StringIO is that you have to load everything into the buffer up front. This can be a problem if the generator is infinite :)
There is one called werkzeug.contrib.iterio.IterIO but note that it stores the entire iterator in its memory (up to the point you have read it as a file) so it might not be suitable.http://werkzeug.pocoo.org/docs/contrib/iterio/Source: https://github.com/mitsuhiko/werkzeug/blob/master/werkzeug/contrib/iterio.pyAn open bug on readline/iter: https://github.com/mitsuhiko/werkzeug/pull/500
Here's a modified version of John and Matt's answer that can read a list/generator of strings and output bytearraysusage:alternate usage:
Looking at Matt's answer, I can see that it's not always necessary to implement all the read methods. read1 may be sufficient, which is described as:Read and return up to size bytes, with at most one call to the underlying raw streamâ€™s read()...Then it can be wrapped with io.TextIOWrapper which, for instance, has implementation of readline. As an example here's streaming of CSV-file from S3's (Amazon Simple Storage Service) boto.s3.key.Key which implements iterator for reading.UpdateHere's an answer to related question which looks a little better. It inherits io.RawIOBase and overrides readinto. In Python 3 it's sufficient, so instead of wrapping IterStream in io.BufferedReader one can wrap it in io.TextIOWrapper. In Python 2 read1 is needed but it can be simply expressed though readinto.      
this is exactly what stringIO is for ..Or if you wanna do what it sounds like then you can simply
First of all, your generator will have to yield byte objects. While there isn't anything built-in, you can use a combination of http://docs.python.org/library/stringio.html and itertools.chain.


Answer URL
https://docs.python.org/3/library/io.html?highlight=io.textiowrapper#io.BufferedIOBase.read1
https://docs.python.org/3/library/io.html?highlight=io.textiowrapper#io.TextIOWrapper
