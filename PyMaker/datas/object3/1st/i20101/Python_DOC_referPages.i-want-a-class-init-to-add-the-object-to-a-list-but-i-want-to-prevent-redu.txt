Natural Text
I'm writing a script that checks multiple sources for weather data, then parses them for an some scripts on Scripting Layer for Android. The google API stopped working, so this is a hacked together replacement for the old weather module. I made a class called "weatherdata", and I want to have all instances of the class add themselves to a list called "weatherobjects", for shenanigans like this:Here's the catch: each time the function that fetches the weather is called, it causes the objects to run their __init__ method (I think this is technically called a constructor method?) without destroying the objects, or clearing the list. This is intentional. The problem comes when the function is called more than once in the lifetime of the module, and and the objects get redundantly added to the list. This seems like a potential source of a memory leak.Here's the __init__ method:And the troublesome function:Here's some shell output for context:As you can see, there's a lot of redundancy in the list. Is it possible to do this in the __init__ method? Or do I need to have a main function do something like weatherobjects.append(foo)?
Your custom classes do not define what it means to be equal. If you were to add a __eq__ method that tells python how to compare two instances, the in test would be able to find duplicates:To complement the method, you should add a __ne__ method as well:If your weatherdata objects don't change (are not mutable) after creation, you can add a __hash__ method and store your instances in a set instead of a list. Using a set would speed up the in test. An example __hash__ method would be:
Instead of adding the sources to a list, you could consider a dictionary.If the weatherdata class could then identify itself (def __repr__(): perhaps) uniquely, you can add the it to a dictionary..
So two years later, I have found the answer while working on something else, and come back to this. Putting aside other issues with my code, I think I should have defined the list in the class (before instantiation), rather than as a global.My desired behavior was like this example, taken from the Python Docs:This is inappropriate because dogs don't have a hivemind, but the behavior is not explicitly disapproved of in the docs, so I'm going to roll with it. I WANT my weatherobjects to have a hivemind. So instead of something like this,My desired behavior is produced by this:Now, I can check weathersource.weathersourcelist for a list of all my objects. To put this more generically, here's an example with the same behavior, and some output:


Answer URL
https://docs.python.org/3/tutorial/classes.html
