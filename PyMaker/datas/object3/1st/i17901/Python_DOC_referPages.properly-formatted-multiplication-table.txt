Natural Text
How would I make a multiplication table that's organized into a neat table? My current code is:This correctly multiplies everything but has it in list form. I know I need to nest it and space properly, but I'm not sure where that goes?
Quick way (Probably too much horizontal space though):Better way:And using f-strings (Python3.6+)
Gnibbler's approach is quite elegant. I went for the approach of constructing a list of list of integers first, using the range function and taking advantage of the step argument.for n = 12Now that we have a list of list of integers that is in the form that we want,we should convert them into strings that are right justified with a width of one larger than the largest integer in the list of lists (the last integer), using the default argument of ' ' for the fillchar.and demonstrate the elasticity of the spacing with a different size, e.g. n = 9
Or you could just do this (not as simplistic as the others but it works):
this one looks pretty neat:
Here's my take for organizing the output:
Creating Arithmetic table is much simpler but i thought i should post my answer despite the fact there are so many answers to this question because no one talked about limit of table.Taking input from user as an integerSet limit of table, to which extent we wish to calculate table for desired numberIterative Calculation starting from index 1In this, i've make use of slicing with format to adjust whitespace between number i.e., {:2} for two space adjust.Final CODE:OUTPUT:
For this print as followingIt will print as 2 X 3.
You can accomplish the effect you're looking for much more easily by putting one of the loops inside the print call.This creates a generator that yields the string values of row*1, row*2, ... row*n, joins each of those values with a tab character, and passes the resulting string to print().
Your problem is that print adds a newline, and you don't want all those newlines.One way to do it is to build a string for each line, and then print out the whole line in one print statement.The magic is in the '{:3} '.format bit. It's tricky, so here's a tutorial: http://ebeab.com/2012/10/10/python-string-format/Here's the code in action:

This works pretty well for a standard multiplication table that is easy to explain in terms of coding for beginners:
The code above will produce this result:
There is plenty of answer to the multiplication table. Here I did by calling the function. Feel free to improve.
Also: 


Answer URL
