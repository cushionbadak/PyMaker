Natural Text
I am trying to combine two dictionaries to yield a result like this:So that if they have the same keys, the values will be added, if one key is present in one dictionary but not the other, it will add it to the new dictionary with its corresponding value.These two dictionaries are also both nested in separate dictionaries as well such that:The keys are the same in both main dictionaries.I have been trying to combine the two dictionaries:All this gives me is a dictionary with values belonging to the same keys in a list. I can't figure out how to iterate through the two lists for a key and add the values together to create one joint dictionary. Can anyone help me?End result should be something like:The 'c' and 'e' keys I will have to iterate through and perform a different calculation based on the results from 'a'.I hope I explained my problem clearly enough.
My attempt would be:Explanation:The newdict function first iterates through the first dictionary (x). For every key in x, it creates a new entry in the new dictionary, setting the value to the sum of x[key] and y[key]. The dict.get function supplies an optional second argument that it returns when key isn't in dict.If x[key] is a dict, it sets ret[key] to a merged dictionary of x[key] and y[key].It then does the same for y and returns.Note: This doesn't work for functions. Try figuring something out yourself there.
Using collections.Counter and isinstance:Now based on the value of 'a' you can calculate the values for keys 'a' and 'e', but this time use: if not isinstance(v, dict)Update: Solution using no imports:
To do it easily, you can use collections.Counter:So, in your case, it would be something like:If you for some reason don't want it to be a Counter, you just pass the result to dict().Edit:If you're not allowed imports, you'll have to do the addition manually, but this should be simple enough.Since this sounds like homework, I'll give you a few hints instead of a full answer:create a collection of all keys, or loop over each dict(you can use a set to make sure the keys are unique, but duplicates shouldn't be a problem, since they'll be overwritten)for each key, add the sum of values in the old dicts to the new dict(you can use dict.get() to get a 0 if the key is not present)



Answer URL
