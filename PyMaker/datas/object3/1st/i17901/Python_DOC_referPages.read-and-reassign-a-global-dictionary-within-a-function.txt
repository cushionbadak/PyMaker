Natural Text
I have run into a bug in my Python code that seems very strange to me, and I now feel confused about how global dictionaries work. My sample code:Provides the output I expect: {'two': 2, 'three': 3}However, if I change the code with one single line:then I get My questions:If I can print the global myDict in function f, why can't I reassign it?How can the line myDict={} break the print command, despite that it is executed later?I'm using Python 2.7. Thank you for your help!
1. If I can print the global myDict in function f, why can't I reassign it?To assign to a global variable from a function you need to use a global directive. Otherwise Python will create a local variable with the same name instead.Add that to the top of the function.2. How can the line myDict={} break the print command, despite that it is executed later?Before it is ever executed, Python analyzes the entire function body to figure out what variables are local and which are global. Adding the assignment changes Python's analysis. It changes myDict from a global to a local variable.This affects the print statement. Instead of printing the global myDict it prints a local variable. And at the point of printing the variable doesn't yet exist, thus the error.
When Python compiles your function, any variables you assign to anywhere are local variables, any variables you never assign to are global variables. The best description of this is What are the rules for local and global variables in Python in the FAQ.If you want to force a variable to be global even though you assign to it, you need a global statement:In fact, any time it's not obvious to you whether Python will make the variable global or not, if you want it to be global, you should use a global statement.(And of course you should use global variables as sparingly as possible, which means you shouldn't run into this too often.)


Answer URL
