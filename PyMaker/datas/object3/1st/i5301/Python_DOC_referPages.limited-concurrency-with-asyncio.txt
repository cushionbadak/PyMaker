Natural Text
Let's assume we have a bunch of links to download and each of the link may take a different amount of time to download. And I'm allowed to download using utmost 3 connections only. Now, I want to ensure that I do this efficiently using asyncio.Here's what I'm trying to achieve: At any point in time, try to ensure that I have atleast 3 downloads running.The numbers represent the download links, while hyphens represent Waiting for download.Here is the code that I'm using right nowAnd the output is as expected:But here are my questions:At the moment, I'm simply waiting for 9 seconds to keep the main function running till the downloads are complete. Is there an efficient way of waiting for the last download to complete before exiting the main function? (I know there's asyncio.wait, but I'll need to store all the task references for it to work)What's a good library that does this kind of task? I know javascript has a lot of async libraries, but what about Python?Edit:2. What's a good library that takes care of common async patterns? (Something like https://www.npmjs.com/package/async)
You basically need a fixed-size pool of download tasks. asyncio doesn't come with such functionality out of the box, but it is easy to create one: simply keep a set of tasks and don't allow it to grow past the limit. Although the question states your reluctance to go down that route, the code ends up much more elegant:An alternative is to create a fixed number of coroutines doing the downloading, much like a fixed-size thread pool, and feed them work using an asyncio.Queue. This removes the need to manually limit the number of downloads, which will be automatically limited by the number of coroutines invoking download():As for your other question, the obvious choice would be aiohttp.
If I'm not mistaken you're searching for asyncio.Semaphore. Example of usage:Output:Example of async downloading with aiohttp can be found here.


Answer URL
https://docs.python.org/3/library/asyncio-sync.html#asyncio.Semaphore
https://docs.python.org/3/library/asyncio-sync.html#synchronization-primitives
https://docs.python.org/3/library/asyncio-task.html#task-functions
