Natural Text
I have a text file with all of them currently having the same end character (N), which is being used to identify progress the system makes. I want to change the end character to "Y" in case the program ends via an error or other interruptions so that upon restarting the program will search until a line has the end character "N" and begin working from there. Below is my code as well as a sample from the text file.UPDATED CODE:Output:As you can see I am already keeping track of which line I am at just by using x. Should I use something like file.readlines()?Sample of text document:Thank you!Edit: updated code thanks to @idlehands
There are a few ways to do this.Option #1My original thought was to use the tell() and seek() method to go back a few steps but it quickly shows that you cannot do this conveniently when you're not opening the file in bytes and definitely not in a for loop of readlines().  You can see the reference threads here:Is it possible to modify lines in a file in-place?How to solve "OSError: telling position disabled by next() call"The investigation led to this piece of code:In the first referenced thread one of the answers mentioned this could lead you to potential problems, and directly modifying the bytes on the buffer while reading it is probably considered a bad ideaâ„¢.  A lot of pros probably will scold me for even suggesting it.Option #2a(if file size is not horrendously huge)This approach loads all the lines into memory first, so you do the modification in memory but leave the buffer alone.  Then you reload the file and write the lines that were changed.  The caveat is that technically you are rewriting the entire file line by line - not just the string N even though it was the only thing changed.Option #2bTechnically you could open the file as r+ mode from the onset and then after the iterations have completed do this (still within the with block but outside of the loop):I'm not sure what distinguishes this from Option #1 since you're still reading and modifying the file in the same go.  If someone more proficient in IO/buffer/memory management wants to chime in please do.The disadvantage for Option 2a/b is that you always end up storing and rewriting the lines in the file even if you are only left with a few lines that needs to be updated from 'N' to 'Y'.Results (for all solutions):And if you were to say, encountered a break at the line starting with 220940, the file would become:There are pros and cons to these approaches.  Try and see which one fits your use case the best.
I would read the entire input file into a list and .pop() the lines off one at a time.  In case of an error, append the popped item to the list and write overwrite the input file.  This way it will always be up to date and you won't need any other logic.


Answer URL
https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects
