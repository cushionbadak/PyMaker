Natural Text
I was surprised to find the following, in Python 3, the first two raise nothing:In Python 2.7, only the first one raises nothing:What is going on here? Why are any of then not raising errors? And why was the () = () presumably added to be valid in Python 3?*Note, you can replace the right hand side with any empty iterable (e.g. [] = set()), I just choose an empty tuple for the illustration
According to Issue23275, these are basically quirks causing no real harm but also no utility. Note that [] = () does not alter the list literal:[] = x statements basically assert that x is iterable and that x is empty (although no-one would recommend using them this way), e.g.As John Y comments it is best to think of [] = () as not an assignment but a way of being consistent with Python's iterable unpacking syntax.As ArrowCase comments, this syntax also extends to multiple assignments:Looking at the CPython bytecode of the multiple assignment illustrates that this operations are similar to the normal iterable unpacking syntax, using the UNPACK_SEQUENCE instruction:The same Issue23275 states that () = () was added as valid syntax to Python 3 for concordance. It was decided that removing [] = () would break code needlessly, since it causes no harm and fits with iterable unpacking logic. {} = () is still invalid because the unpacking syntax does not make sense in this context with braces.In case anyone is wondering, syntax like list() = () is simply syntactically invalid, because you can never assign to function call.
There is a way to assign variables from an iterable:The [] = … and () = … assignments seem to be special cases of these.
The left hand side of an assignment statement is not an expression, it is a target list. Short summary:If the target list is an identifier, the name is just bound to the right hand side. If the target list is a comma seperated list of targets, the right hand side is unpacked and the unpacked elements are assigned to the listed targets.A target list may be enclosed in parentheses or square brackets. In particular, that allows creating empty target lists, as seen in your examples.This explains why [] and () are valid left hand sides for assignments: they are valid target lists. However, {} is not, as it is not a valid target list. Of course, {} might be part of a target, for example as the primary of a subscription: {}[()] = 0 is valid python (but completely useless, of course).
This is syntax to unpack a two-element iterable into two assignment targets:This generalizes up to three or more targets, but it also generalizes down:unpacks a one-element iterable into one assignment target, andunpacks a zero-element iterable into zero assignment targets (which does nothing if whatever is a zero-element iterable, and throws an exception if it's not).() = whatever also unpacks a zero-element iterable, but {} = whatever does not; there is no unpacking assignment syntax that involves braces.


Answer URL
https://docs.python.org/3/library/dis.html#opcode-UNPACK_SEQUENCE
https://docs.python.org/3/reference/simple_stmts.html#assignment-statements
