Natural Text
I want to check if two strings are anagrams. For example, if my word is "halo", I want to check if those letters appear in "loha". It should match because it's an anagram. My attempt fails and I'm not sure why. My code and output is below. I have a list of words and I want to check to see which elements are anagrams in the list.And here's my output
This should prove to be relatively fast in that it keeps a sorted list so it only has to make ONE new one every time it iterates.result:Different structure option:
Try thisOut putTrueFor multiple elements checkOut put[True, False]
you can use counter which outputs a dictionary of letter counts for each letter in a word
If you want to find all the angrams in your list, you might want to do this instead:This would return the following:This may not be the most efficient solution but it gets the job done.
Simply use sorted() on both strings and compare them.Here, sorted('angel') outputs ['a', 'e', 'g', 'l', 'n'] and sorted('glean') also outputs ['a', 'e', 'g', 'l', 'n']. Both equal, hence are anagrams.To make things clear:Solution to your problem:Output:
Below code takes a list of words as input and groups them into anagramsoutput:
Use sets:outputs TrueAs noted in the comments, this will not work even with a len parameter attached.Here's a recursive anagram test to redeem myself


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
