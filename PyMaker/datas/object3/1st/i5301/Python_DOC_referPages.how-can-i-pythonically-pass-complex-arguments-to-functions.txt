Natural Text
I have a SOAP web service I have to work with, and one of the commands it supports is a "SQL like" query where I input a select, from, and where statements. I think the "where" clause will be most demonstrative of what I'm trying to do so here: Basically, the way I've thought to do this is to package a list of where-clause dictionaries. But the dictionaries should always have the same keys. Is there a way to define this type in the function definition? I don't want kwargs or args because I know in advance the data structure. One thing I looked at wasApparently this is only available in newer versions of Python (which I have) but my understanding is the where clause after this is expecting a dictionary, and I want a list of dictionaries. Generally speaking how do I define a function argument, when I want a dictionary inside of a list, or something else nested? Is there any way besides a dictionary, that I can get a single function parameter (where) to accept all of the arguments I need to make the SOAP where object? 
I do not know if this helps, but you could use *where to expect an arbitrary amount of args:One thing you can also do, but you would to have to change probaply a lot of code for that, is use namedtuple instead of dictionaries:
You have not specified anything about types. The * syntax in a function definition only specifies how a caller can provide arguments for the parameters. Parameters before it can be filled with both positional arguments and keyword arguments, those that follow the * can only be specified with keyword arguments.Put differently, the following calls are now legal:but the following is not:You'll instead get a TypeError exception, TypeError: sql_soap() takes 1 positional argument but 2 were given.Using * in a function definition does not say anything about what type of objects the parameter accepts. You can still pass anything you like to the function call.Perhaps you got confused with the *args and **kwargs syntax in function definitions, where those parameters capture all remaining positional or keyword arguments passed in, which did not address any of the other parameters. They don't say anything about the argument types either; instead they put those remaining argument values in a tuple and dictionary, respectively.Python does now support type hinting, but even type hinting will not let you specify what keys to use in a dictionary.I'd use named tuples instead here, together with type hints:This lets the type checker know that the where argument must be a sequence type (like a list), that contains only WhereClause instances. And those instances will have specific attributes.Anytime you want to use any of the WhereClause instances, you can use attributes to get at the contents, so whereclause.condition and whereclause.value.


Answer URL
https://docs.python.org/3/library/typing.html#typing.NamedTuple
