Natural Text
I've managed to build some DLLs on Linux that are necessary for my Python extension using MinGW.  Something along these lines:I was now hoping I could avoid extending build_ext in the same painful way to get it to cross-compile Cython code for Windows...  I looked into the abyss of "elegant interplay of setuptools, distutils and cython", and before the abyss has a chance to look back into me... Isn't there a way to just specify some flag... like a name of compiler and Python binary for desired platform and... it would just do it?I've read this article: http://whatschrisdoing.com/blog/2009/10/16/cross-compiling-python-extensions/ - it's almost 10 years old.  And it just made me want to cry... did anything change since it was written?  Or are these steps more or less what I'll have to do to compile for the platform other than the one I'm running on?Or, is there an example project on the web which does it?GoalMy ultimate goal is to produce an egg package which will contain both PE and ELF binaries in it and will install them in the correct location on either platform when installed by pip or pipenv.  It should compile on Linux (compiling it on MS Windows isn't necessary).
I'm posting this as community wiki because it's a pretty unsatisfactory answer: it only tells you why it's very hard rather than offers really solutions.The official Python distributions on Windows are compiled with Microsoft Visual C (MSVC), and when compiling a Python extension it's generally necessary to use the same version as the one that Python was compiled with. This shows you that an exact compiler match is pretty important.It is possible to get versions of Python compiled with Mingw, and these would then be compatible with modules compiled with Mingw. This could probably be made to work as a cross-compiler on Linux but the modules would only be useful to a very small subset of people that have this custom build of Python (so doesn't help create a useful distributable .egg file).A reasonable effort has gone also into making a version of Mingw that can build compatible Python extensions on Windows: https://mingwpy.github.io/ (and I think also https://anaconda.org/msys2/m2w64-toolchain). The main driver for this seems to be the lack of freely Fortran compiler for Windows that is compatible with MSVC, hence the ability to build Fortran modules is very useful. The mingwpy toolchain worked pretty well in my experience, until Python 3.4 when the switch to a more recent version of MSVC brought a whole exciting new set of compatibility issues.My feeling would be that any viable solution would probably be based around these mostly-working Mingw compilers for windows.
According to https://docs.python.org/3/distutils/builtdist.html , distutils only supports cross-compiling between win32 and win_amd64 as of this writing (3.7).Moreover, building extensions with compilers other than the MSVC that Python is built with is not officially supported.It is theoretically possible by getting a Linux toolchain for win32/64 (including the necessary headers and link libraries), a set of the necessary Python for Windows binaries to link against, then forge compiler and linker paths and/or options in setup.py -- though it will still be an unsupported setup.So you'll be better off using a Windows VM or an online build service like AppVeyor.
I had the same issue once, but I just used a virtual machine to compile my most painfuly microsoft dependant programs.https://developer.microsoft.com/en-us/windows/downloads/virtual-machinesIf you don't have access to a windows machine or your programs uses very specific machiney like a fortran compiler optimized or some POSIX dependant stuff or newest features from VS redistributable versions, you better give  a try to a virtual machine based compilation system.


Answer URL
https://docs.python.org/3/distutils/builtdist.html
https://docs.python.org/3/extending/windows.html?highlight=msvc#using-dlls-in-practice
