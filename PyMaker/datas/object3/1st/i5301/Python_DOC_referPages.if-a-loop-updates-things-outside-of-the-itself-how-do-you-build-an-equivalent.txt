Natural Text
The question is how to use list comprehension/lambda+maps (in order to push the task of performing the actual loop to the underlying c) when the loop references and updates things outside of itself?My example is this:Note sentences_wiki is a an array of sentences - each of which is an array of words.As an attempt I ended up with the following non functional exampleI
You shouldn't use map or a list comprehension just for the side effects of the function you're applying. You should only use it when the resulting list contains meaningful data. In your case, you'd be creating a big nested list of lists containing a whole bunch of repeated references to the same words list you created at the global level. That's not useful at all.Furthermore, your entire reason for making the change seems to be based on the premise that using map or a comprehension is sure to be faster. That's probably not true. They may be about the same speed, or may be slower. I think it's very unlikely that anything you can do will make the comprehension/map version faster than the explicit loop. The main reason is that function calls in Python are pretty slow, and so the need to pack some of the loop logic into a function makes that part slower than it was with the explicit loops.What often can be faster is using builtin functions or types to do the iteration for you in C without ever reaching back out to Python code. In your example, you want to be counting the words in your list of lists, so using collections.Counter is probably a good idea. I'd probably do something like this, eliminating the inner loop while keeping the outer one:As Patrick Haugh commented, it's even possible to eliminate both loops using itertools if you want to create the counter in one line:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
