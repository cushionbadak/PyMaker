Natural Text
I'm trying to modify a function which uses a module-level variable variable defined below it, similar to this:I would like to make the message a parameter, like so:I've noticed that in order for this to work, I had to move the definition of MESSAGE up in the code. Apparently, all module-levels are first 'bound' and are then available within function bodies, but when provided as default function arguments, they have to be defined before the function. Is this correct? (I would also like to read up on this to fully understand it; any references would be much appreciated).
... when provided as default function arguments, they have to be defined before the function. Is this correct?Correct.  Default arguments are evaluated at function definition time.  If you need them evaluated at function call time, this common pattern works:
...is evaluated when say_hello is called. As long as MESSAGE has been assigned by the time say_hello is called, say_hello will see the value....is evaluated when say_hello is defined. Python evaluates default argument values at function definition time, so MESSAGE has to be assigned before say_hello is even defined for this to work.
While you're learning about default argument binding, give this a try:The calls with their own arguments will do what you expect - each one prints only one variable.  But the calls to foo with the default argument may surprise you.  The first time you call it, you get the expected result: [3].  The second time you call it, you may be surprised that the result is [3, 3].There's actually nothing in this answer that isn't in the others.  As others have said, the default argument is evaluated at the time the function is defined.  What you see here is a consequence of that - the arguments are evaluated only at the time that the function is defined.  bar=[] is evaluated once, giving you one list.If you do object creation or function calls as part of your default argument, they only happen once, with the net result being a surprisingly static-acting argument.  Most of the time, this is not what we're looking for.The definitive reference for python is found at docs.python.org .  The specific reference for defining functions is at https://docs.python.org/3/tutorial/controlflow.html#defining-functions.


Answer URL
https://docs.python.org/3/tutorial/controlflow.html#defining-functions
