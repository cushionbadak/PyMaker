Natural Text
BackgroundI have some large text files used in an automation script for audio tuning. Each line in the text file looks roughly like:The text gets fed to an old command-line program which searches for keywords, and swaps them out. Sample output would be:ProblemSometimes, text files have keywords that are meant to be left untouched (i.e. cases where we don't want "BANANA" substituted). I'd like to modify the text files to use some kind of keyword/delimiter that is unlikely to pop up in normal circumstances, i.e:QuestionDoes python's text file parser have any special indexing/escape sequences I could use instead of simple keywords?
use a regular expression replacement function with a dictionary.Match everything between brackets (non-greedy, avoiding the brackets themselves) and replace by the value of the dict, put original value if not found:prints:
You can use re.sub to perform the substitution. This answer creates a list of randomized values to demonstrate, however, the list can be replaces with the data you are using:Output:
Just useAnd replace this with the desired result, e.g. 123.Broken down, this saysSee a demo on regex101.com.For your changed requirements, you could use an OrderedDict:Which yieldsThe idea here is to put every (potentially) new item in the dict, then search for the index. OrderedDicts remember the order entry.For the sake of academic completeness, you could do it all on your own as well:
Can also be done using pyparsing.This parser essentially defines noun to be the uppercase things within square brackets, then defines a sequence of them to be one line of input, as complete.To replace items identified with other things define a class derived from dict in a suitable way, so that anything not in the class is left unchanged.
I think it's easier — and clearer — using plex. The snag is that it appears to be available only for Py2. It took me an hour or two to make sufficient conversion work to Py3 to get this.Just three types of tokens to watch for, then a similar number of branches within a while statement.Result:


Answer URL
https://docs.python.org/3/library/collections.html
