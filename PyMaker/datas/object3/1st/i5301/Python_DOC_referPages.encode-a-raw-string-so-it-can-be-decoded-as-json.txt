Natural Text
I am throwing in the towel here. I'm trying to convert a string scraped from the source code of a website with scrapy (injected javascript) to json so I can easily access the data. The problem comes down to a decode error. I tried all kinds of encoding, decoding, escaping, codecs, regular expressions, string manipulations and nothing works. Oh, using Python 3. I narrowed down the culprit on the string (or at least part of it)Unfortunately, I cannot find a way for scrapy/splash to return the string as raw. So, somehow I need to have python interprets the string as raw while it is loading the json. Please helpUpdate:What worked for that string was json.loads(str(data.encode('unicode_escape'), 'utf-8')) However, it didnt work with the larger string. The error I get doing this is JSONDecodeError: Invalid \escape on the larger json string
The problem exists because the string you're getting has escaped control characters which when interpreted by python become actual bytes when encoded (while this is not necessarily bad, we know that these escaped characters are control characters that json would not expect). Similar to Turn's answer, you need to interpret the string without interpreting the escaped values which is done usingjson.loads(scraped.encode('unicode_escape'))This works by encoding the contents as expected by the latin-1 encoding whilst interpreting any \u003 like escaped character as literally \u003 unless it's some sort of control character.If my understanding is correct however, you may not want this because you then lose the escaped control characters so the data might not be the same as the original.You can see this in action by noticing that the control chars disappear after converting the encoded string back to a normal python string:scraped.encode('unicode_escape').decode('utf-8')If you want to keep the control characters you're going to have to attempt to escape the strings before loading them.
If you are using Python 3.6 or later I think you can get this to work withAs per the docs, this will give you anEncoding suitable as the contents of a Unicode literal in  ASCII-encoded Python source code, except that quotes are not escaped.  Decodes from Latin-1 source code. Beware that Python source code  actually uses UTF-8 by default.Which seems like exactly what you need.
Ok. so since I am on windows, I have to set the console to handle special characters. I did this by typing chcp 65001 into the terminal. I also use a regular expression and chained the string manipulation functions which is the python way anyways. Then everything went smoth. I'll sort out the encoding and escaping when writing to database down the line.


Answer URL
https://docs.python.org/3/library/codecs.html#text-encodings
https://docs.python.org/3/whatsnew/3.6.html#json
