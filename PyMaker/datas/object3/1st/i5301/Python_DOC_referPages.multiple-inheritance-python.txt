Natural Text
I read Python's documentation and can't understand this piece of informationFor most purposes, in the simplest cases, you can think of the search  for attributes inherited from a parent class as depth-first,  left-to-right, not searching twice in the same class where there is an  overlap in the hierarchy. Thus, if an attribute is not found in  DerivedClassName, it is searched for in Base1, then (recursively) in  the base classes of Base1, and if it was not found there, it was  searched for in Base2, and so on.If it is new-style class, why does Python search recursively in the base classes of Base1 and not going to Base2 then Base3?Sample from Mark Lutz's book.  Python goes to D then B then C. 
If you continue to read, then the documentation says "In fact, it is slightly more complex than that".The thing you mention is oriented to single inheritance language. Python works different, and they implemented super(). You can either read on the documentation to know how does it work, or/and (depends on your level of curiosity) you can go read the answer on here and start playing with the code and see what happens.Good Luck
Attribute lookup occurs according to the method resolution order (MRO) established when the class is first defined. One important rule of the MRO is that no class appears before any of its children. This means the MRO for D is [D, B, C, A, object], not [D, B, A, object, C] as you would expect from a pure depth-first search.


Answer URL
https://docs.python.org/3/tutorial/classes.html#multiple-inheritance
https://docs.python.org/3/library/functions.html#super
