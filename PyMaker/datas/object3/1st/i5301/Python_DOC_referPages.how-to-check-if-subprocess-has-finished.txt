Natural Text
I am starting a process by doing:After that, so that the main thread doesn't exit immediately I do:Instead of doing this, how can I check that each of the child processes are still running from the main thread ? Then instead of having the infinite loop I can break out of the loop at the right time and do something else....
p.is_alive() tells you whether the process is running.To wait until it's ended, use p.join().
Add all processes to a list, and join() each of them in turn:The join() call blocks until the process is finished. It doesn't matter in which order you call them; calling join() on a process that's already complete will just return immediately.You may also want to check out the other functionality in the multiprocessing module; in particular the Pool class might help you simplify this code.
you can use the join method (read more in docs):First, keep the Process objects you create:After starting all your processes, use join to wait each one of them to finish executing.:Basically join makes the main process wait for process p to finish and only then to proceed to the next line of code.
You can do like this:To only check if the process is alive, use .is_alive()Read more here: https://docs.python.org/3/library/multiprocessing.html


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.is_alive
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.join
https://docs.python.org/3/library/multiprocessing.html
