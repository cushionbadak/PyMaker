Natural Text
(Bear with me, I think in C and not Python, so you're probably about to see some real dumb stuff...)I have many (100+) different C structs, pulled into Python (version 3.5.1) as bytes, that I want to be able to access using the original C struct's variable names.  Here's a simple example.  In Python I have received these bytes:Assume these bytes were provided by something running C, using a struct of the following format:How can I process example1_bytes so that I can access them like this:Taking it a step further, what if the C struct is more complex and contains arrays and/or sub-structs?  For example, something like this:How can I process example2_bytes so that I can access them like this:I've experimented a bit using Python's struct unpack, which returns tuples and I think is a step in the right direction, but it hasn't quite gotten me to the usable solution I want.  I'm not sure if I need to go down the namedtuple path or take some other direction.
You are looking for the ctypes library, which allows you to define Python wrappers around for complex, underlying C-struct. For a simple type:More complex structures:Note, you define an array of type T of size n using the multiplication operator!: T*nSo, along with Structures and Arrays, it supports Unions and pointers, as well as containing all sorts of goodies for C-programmers.Note, you are using bytes objects, which are immutable and will require a copy when creating a structure. however, if you use a bytearray, you won't require a copy of the underlying buffer!:However, using a bytearray:


Answer URL
https://docs.python.org/3/library/ctypes.html
