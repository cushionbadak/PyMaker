Natural Text
Its my first question. I was lookoing through forum but cannot find fiiting aswer.I need to send in one message a ASCII text followed by 4 bytes (no less) composition of binary flags and than followed ASCII textThe format of bit flags is defined as follows:Length 4 bytes b. The presence of an optional element or group of optional elements is indicated by a set bit (= 1), the absence by a non-set bit (= 0). Bits not required are 0.A value of 0b00000000 00000000 00000000 00000011 means that only the Fields in the Optional Elements section are sent, where the “Top. Lab” column is 1 or 2.For 0b00000000 00000000 00000000 01111111 all the Optional elements fields are sent where the “Top. Lab” column is one of the numbers 1 to 7.For 0b00000000 00000000 00000000 10000000 only the Fields in the Optional elements section are sent where the “Top. Lab” column is 8.lets say I want to send flags for field 1 and 4 so I prepared code:Is there  better way to:build up 4 bytes bites value ?send it together with ascii text in socket message?  I was trying before to send bytes directly but this gives error of concatenating or if is byte string b'0000.....0' it send it as length of 32 bytes instead of 4 bytes.  Update:The 'string1' has defined length 22bytes (its header of message) and include information about and include type of message, sender id, length of 'string2'. This part is working as expected, only sending bit flags is problem for me. Up till now I was just sending 4 bytes of ascii encoded string 0000 which make me possible to receive message on other side correctly. This of course not mean 0b00000000 00000000 00000000 00000000 so other side interpret message content wrong way.
In Python, the go-to way to represent values as a fixed number of bytes is with the struct module. It's also easier to use bit flags explicitly instead of opaque values like 17:Note that you might have issues with endianness but I'd have to see more of the protocol to tell if 'string1'.encode('ascii') will work.


Answer URL
https://docs.python.org/3/library/struct.html
https://docs.python.org/3/library/struct.html#byte-order-size-and-alignment
