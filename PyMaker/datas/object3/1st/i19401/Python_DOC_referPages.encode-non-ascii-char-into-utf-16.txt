Natural Text
How can I encode the non-ascii(ascii > 127) characters like (ö,ä,ü etc) of the string in UTF-16,so that “é” becomes “\u00e9” and “Ř” becomes “\u0158”. What I did is converted the char into hex and replaced the first two char with \u00 (for UTF-16). But this is not working ...giving me garbage values. Please help me with a right algorithm. Here is what I wrote but it doesn't convert correctly:
@TokenMacGuy had posted this answer to the old question which you've deleted. Since users with enough reputation can still see the deleted question, I'm copy-pasting it here for you:So you're trying to convert from unicode to an ascii representation where non ascii codepoints are 'escaped'?  If so, how about:by the way, this algorithm is NOT utf-16; please don't call it that;, it's ASCII!  UTF-16 looks like this:Note: you don't specify so this example is in python2.7, not python3; if you need that, please add it to your question I'm not sure if that would help you. Or maybe @TokenMacGuy himself will edit this answer to make it more helpful. 
open the file in binary modeif that doesnt work try the codecs builtin
Use the built-in encode method of strings:
It's not clear from the question whether you want the characters as the literal string '\u00xx' or whether you want a Unicode string with the proper character in it.To get the characters converted directly to Unicode, you must determine what code page they were originally created in and use it with decode. I'm guessing code page 852 here since it's the first one I could find that contains Ř.If you want to quickly convert it to a string that contains only ASCII with the non-ASCII characters replaced with an escape sequence, use the unicode-escape coding.The Windows 1250 code page also contains Ř but at a different value. The same technique works there too.


Answer URL
