Natural Text
This question already has an answer here:Reading a file without newlines                    9 answers                I have a .txt file with values in it.The values are listed like so:My goal is to put the values in a list. When I do so, the list looks like this:['Value1\n', 'Value2\n', ...]The \n is not needed.Here is my code:
This should do what you want (file contents in a list, by line, without \n)
I'd do this:or:
You can use .rstrip('\n') to only remove newlines from the end of the string:This leaves all other whitespace intact. If you don't care about whitespace at the start and end of your lines, then the big heavy hammer is called .strip().However, since you are reading from a file and are pulling everything into memory anyway, better to use the str.splitlines() method; this splits one string on line separators and returns a list of lines without those separators; use this on the file.read() result and don't use file.readlines() at all:
for each string in your list, use .strip() which removes whitespace from the beginning or end of the string:But depending on your use case, you might be better off using something like numpy.loadtxt or even numpy.genfromtxt if you need a nice array of the data you're reading from the file.
Nota Bene: rstrip() removes the whitespaces, that is to say : \f ,  \n , \r , \t , \v , \x and blank  ,but I suppose you're only interested to keep the significant characters in the lines.  Then, mere map(strip, f) will fit better, removing the heading whitespaces too.If you really want to eliminate only the NL \n and RF \r symbols, do:splitlines() without argument passed doesn't keep the NL and RF symbols (Windows records the files with NLRF at the end of lines, at least on my machine) but keeps the other whitespaces, notably the blanks and tabs..has the same effect as that is to say the NL and RF are kept
After opening the file, list comprehension can do this in one line:Just remember to close your file afterwards.
I had the same problem and i found the following solution to be very efficient. I hope that it will help you or everyone else who wants to do the same thing.First of all, i would start with a "with" statement as it ensures the proper open/close of the file.It should look something like this:If you want to convert those strings (every item in the contents list is a string) in integer or float you can do the following:Use int instead of float if you want to convert to integer.It's my first answer in SO, so sorry if it's not in the proper formatting.
I used the strip function to get rid of newline character as split lines was throwing memory errors on 4 gb File.Sample Code:
I recently used this to read all the lines from a file:or you can use this for that little bit of extra added safety:It doesn't work with whitespace in-between text in a single line, but it looks like your example file might not have whitespace splitting the values. It is a simple solution and it returns an accurate list of values, and does not add an empty string: '' for every empty line, such as a newline at the end of the file.

The easiest way to do this is to write file.readline()[0:-1]This will read everything except the last character, which is the newline.


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.rstrip
https://docs.python.org/3/library/stdtypes.html#str.strip
https://docs.python.org/3/library/stdtypes.html#str.splitlines
