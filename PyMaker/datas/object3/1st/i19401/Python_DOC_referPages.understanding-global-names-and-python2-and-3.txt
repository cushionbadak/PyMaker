Natural Text
As a newbie to Python, I'm kind of learning some of the differences between Python2 and 3.  In working through the Python course, it seems that there are some things that need to be changed in the code to make it work in 3.  Here's the code;To make this work in Python 3, the print syntax needs to be changed (add parens), but another issue that comes up is the error "NameError: global name 'raw_input' is not defined".  I've seen this issue come up often in my learning.  It doesn't seem to come up when I run it in Python2, but in 3 it seems to need it declared as a global.  However, when I add "global raw_input" to the function, it doesn't seem to work (in other cases, it worked everytime I did it.)  Can someone tell me what I'm doing wrong?  Also, I've heard that declaring globals is a bad habit to get into when not necessary, so what's the best way to handle them? 
raw_input() has been renamed in Python 3, use input() instead (and the old Python 2 input() was removed). See PEP 3111.See What's new in Python 3.0 for an exhaustive overview. There is also the Dive into Python 3 overview.
Amending Martijn's answer, here's a general trick you can do for these kind of small incompatibilities:Afterwards you can just use raw_input in your script with both Py2 and Py3. Similar things might be required for the unicode, and byte types.Since you indicated you're interested in migration from >=Py2.7 to a Py3, you should know that Python 2.7 was mostly a Python 2.6 with lots of Py3 stuff backported.So, while the print function technically still is a statement in Py2.7, and a function in Py3, the Py2.7 print does accept tuples. And that makes some of the Py3 syntax work in Py2.7. In short, you can just use parantheses:To print an empty line, the best method working in both versions would beTo print without adding a newline by default I'm resorting back to write(), e.g.:On the other hand, for lots of Py3 stuff, you can actually enable the full Py3 syntax in Py2.7 by importing things from the future:Then you don't need to switch between write() and print().In real applications it all depends on if and how you have to interact with other people's code (packages, other developers in your team, code publishing requirements) and what's your roadmap for Python version changes.


Answer URL
