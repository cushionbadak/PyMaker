Natural Text
I am going to implement some container object.In the first case work both len() and .__len__()But in the second case I get error with len().Why len() in second case does not work, whereas .__len__() is defined and works correctly?Is it OK in general to assign some methods from one object to another object? Like I did with self.L.__len__().
You cannot do this, special hook methods like __len__ are always looked up on the type, not on the instance.In other words, len(ob) calls type(ob).__len__(ob), not ob.__len__().See the Special method lookup documentation; I explained why this is in a previous answer.For methods that are not special hooks (starting and ending with double underscores), you are free to assign methods to your instance, there is no technical reason preventing you from doing that.If your goal is to provide a facade object then by all means, copy over methods. I see no obvious downsides to doing that. Calling the method directly on your instance instead of having to route through a wrapper method would perform slightly better (you save a stack push and pop for the wrapper method).
The fine Python documentation tells us thatFor new-style classes, implicit invocations of special methods are only guaranteed to work correctly if defined on an object’s type, not in the object’s instance dictionary.


Answer URL
