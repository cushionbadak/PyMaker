Natural Text
I have some Python code that is far, far slower than it really ought to be.I'm pretty sure the bottleneck is in the star=stardict[random.choice(list( etc... line. I'm guessing here, but I assume dicts work by searching through every entry in the dict and seeing which one has the right key. Lists, I assume again, would just read off the information at a memory location derived from the entry number, and for extremely large (200,000 entries, to be exact) lists/dicts be much faster.Would converting the dict's entries to a list make this code faster? How would I do this (I thought I saw a function for it, reviewing the docs now...)? Are there any other ways anyone notices to make this faster?
You're creating a list every time through the loop, but that list is unchanging. Move it outside of the loop.The problem almost certainly isn't in the dict lookup. They're based on hash tables which are quite fast.
Move the list generation list(stardict.keys()) outside the loopTry to profile your code (documentation)Assuming you are running CPython, check if your code could run with Pypy. This could lead to better performances due to its optimised JIT
You only use the key as in intermediate value to select a random item in stardict. You can use the dictionary's value list directly instead: 


Answer URL
