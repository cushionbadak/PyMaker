Natural Text
In PEP 3107 and this SO answer it is implied that Python3K function annotations and decorators fit hand and glove -- that I should be able to write a decorator that works with function attributes. I cannot figure how to make them work as I expect however.Consider:Prints:What that group of lines shows me is that I cannot see how to access the value of x and y in xXy in the decorator or the function attributes of xXy. What I would like to do is 1) have a function with annotations as specified in PEP 3107, 2) be able to have a decorator that can access the function annotations and the values the function is called with without just being a clone of of xXy's function signature. 
New in version 3.3,inspect.signature()would allow you get the information you want in a function decorator. Here's an example of using it to print the argument names and values passed on each call to a decorated function as well as access the associated annotations:Output:
I believe you are looking for functools.wraps():This is a simple decorator that ensures that a wrapper function carries the attributes of the function it wraps.


Answer URL
