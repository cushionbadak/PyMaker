Natural Text
I'm trying to implement strong type genetic programming in python.Is there something like these sample?andupdate:I'm trying to generate python's expression and avoiding something cannot be evaluated like this:
Python 3 introduces function annotations. By themselves they don't do anything, but you can write your own enforcement:
the best way is to use docstrings to store such information of the function and 
In Python return type is not known until the call is performed and return statement is executed. It even can be different in different situations, so a brief answer is "not possible".If you need to know the return type for certain function, you still may wrap it into some type checking code that also may expose the return type. However, that would be rather unpythonic:UPD: You may do the same to parameter types and check them as well.
In Python, a dynamically and strongly typed language, the type information of a function is required at runtime. In 3.3 and later, you can get the type of a function as follows:see https://docs.python.org/3/library/inspect.html#introspecting-callables-with-the-signature-object
no chance. since python uses duck typing, you could pass parameters of different types, e.g. int and int, str and str, etc. to funcA. there is no chance to tell what return type and parameter type can be without seeing actual parameters
This is impossible - your own example proves it, imagine you call it this way:You get 3, an Integer, but what about this:You get "TestTest", a string! Python doesn't care about types, and no function is guaranteed to output a single type. This would also produce different results with floats or lists. Beyond that, you could also explicitly return different types of objects.In general, this is a good thing. It means you don't need to worry about whether or not the type is right, just whether it's possible to do with the things you pass in. This makes Python extremely flexible.


Answer URL
https://docs.python.org/3/library/inspect.html#introspecting-callables-with-the-signature-object
