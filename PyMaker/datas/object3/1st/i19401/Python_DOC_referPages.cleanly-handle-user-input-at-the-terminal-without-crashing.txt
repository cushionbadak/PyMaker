Natural Text
I have this simple project to do. This is the code I have so far, it works perfectly fine. But if someone types in a letter or an unknown symbol, the program crashes. How can I make this error proof and display or print a message if the wrong thing is entered?
I'd advise against using eval. It is not good from the security point of view.  Just do an explicit conversion to the desired type:To process invalid input:Or:You can also wrap the input in an infinite loop that would terminate on successful conversion:
Use exception handling.Python doesn't crash when someone gives you invalid input, it throws an exception instead. You can catch such exceptions and handle them instead of letting python exit the program.In this case, since you only want a floating point number you really should not be using eval(); that will take a lot of different inputs and will throw a lot of different exceptions.Use the float() function instead, it will only throw a ValueError if you give it incorrect input. Then catch that and display an error message:
Surround  the statement witha  try/exceptI should note: There is no way to "Error Proof" something, much like bullet proofing is impossible, a big enough bullet will penetrate anything, same with coding.  All you can do is write good code.  Nothing is absolute in coding.
Could you not use ascii. eg turn the string into a numerical value then ignore results which aren't within your numerical window eg 'if (c <= 47  and c >= 57):'. This should stop it crashing.I think:P
Exceptions are the way to comfortably route and handle errors in non-trivial programs. But a clear concept is helpful to not make a random hack out of that when programs grow.(E.g. catching builtin ValueError far away or returning / continuing by chance would quickly become hairy.)There is the main difference between errors caused by invalid / odd user inputby bugsby dynamic system / environment limits.A reasonable way of separating, routing and handling these errors is:(A) Catch or compare for user input errors very early near the point of potential happening. React immediately for simple recoveries / repetitions. Otherwise (for breaking out) convert to an enriched exception which can be catched and distinguished further down or at the bottom of the call stack (or by the default handler sys.excepthook)(B) Let crash down bug exceptions to the bottom of the call stack - unhandled; or possibly initiate comfortable bug presentation and feedback action.(C) For system environment errors choose an approach between (A) and (B) depending on how much context, detail & comfort info you want to be present at the current stage of development.This way this could become a scalable pattern for user oriented error handling in your example:


Answer URL
