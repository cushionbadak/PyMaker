Natural Text
I am looking for a pythonic way to create and write to file if opening it was successful or else return an error if not (e.g. permission denied).  I was reading here What's the pythonic way of conditional variable initialization?. Although I'm not sure this method works as I have attempted to test it.It's supposed to be a one-liner.When I do the above I get a syntax error as such:Is there a more and correct pythonic one-line or two-liner to be able to achieve this?
I'd do something like this :edits along the comments, thank you for your input!
Since you're asking about what the Pythonic was of doing something, I think that you should consider the Ask Forgiveness, Not Permission paradigm. Namely, just perform the operation, and catch the appropriate exception if it didn't work.For example, If there was no permission to do the op, an IOError will be thrown. Just catch it, then.Alex Martelli once talked about this, and described some inherent fallacies about checking permissions. There's an inherent race in these matters. You could always have permission to write when you opened the file, but not later when you attempted to write. You'll have to deal with exceptions anyway, so you might as well just build with them.
Instead of nesting the try and with statements (and missing the IOError on the way if the inner code raises one), I highly suggest this syntax. It causes one less nesting and makes sure that the IOError occurred because of the open. That way, you have no chance of catching an unwanted exception, and you have much more control.There is no real pythonic way for doing it as a one liner, and it's generally a good idea to avoid long one liners.
If you want to be Pythonic, always go for readability when designing your code. To be honest, there is absolutely nothing wrong with wrapping something in a try/except and controlling your logic accordingly.AKA, EAFP -> Easier to Ask for Forgiveness than Permission. Furthermore, when you are writing to a file, you are always better off using a context manager. So, this can easily translate in to something like this: 


Answer URL
https://docs.python.org/3/glossary.html#term-eafp
