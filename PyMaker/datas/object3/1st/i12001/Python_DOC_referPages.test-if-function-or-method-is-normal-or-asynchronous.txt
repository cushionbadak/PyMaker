Natural Text
How can I find out if a function or method is a normal function or an async function? I would like my code to automatically support normal or async callbacks and need a way to test what type of function is passed.And depending on what type of function gets passed it should either run it normally or with await. I tried various things but have no idea how to implement isAsync().
Use the inspect module of Python.inspect.iscoroutinefunction(object)Return true if the object is a coroutine function (a function defined with an async def syntax).This function is available since Python 3.5.The module is available for Python 2 with lesser functionalities and certainly without the one you are looking for: inspectInspect module as the name suggests is useful to inspect a whole lot of thing. The documentation saysThe inspect module provides several useful functions to help get information about live objects such as modules, classes, methods, functions, tracebacks, frame objects, and code objects. For example, it can help you examine the contents of a class, retrieve the source code of a method, extract and format the argument list for a function, or get all the information you need to display a detailed traceback.There are four main kinds of services provided by this module: type checking, getting source code, inspecting classes and functions, and examining the interpreter stack.Some basic capabilities of this module are:It also packs capability to retrieve the source codeMethods are named intuitively. Description if needed can be found in documentation.
If you don't want to introduce another import with inspect, iscoroutine is also available inside asyncio. 
Co-routines have the COROUTINE flag set, bit 6 in the code flags:The value 128 is stored as a constant in the inspect module:The inspect.iscoroutinefunction() function does just that; test if the object is a function or method (to ensure there is a __code__ attribute) and test for that flag. See the source code.Of course, using inspect.iscoroutinefunction() is the most readable and guaranteed to continue to work if ever the code flags were to change:
Solutions above will work for simple cases, when you pass coroutine function. In some cases you may like to pass awaitable object function that acts like coroutine function, but is not coroutine function. Two examples is Future class or Future-like object class (class that implements __await__ magic method). In this cases iscoroutinefunction will return False, what is not you need.It's easier to understand on non-async example with passing non-function callable as callback:Back to async world, a similar situation:Way to solve it not to use iscoroutine or iscoroutinefunction, but use inspect.isawaitable instead. It works with ready object so you must create it first. In other words, solution I would advise to use:It's more universal (and I'm sure logically correct) solution.


Answer URL
https://docs.python.org/3/library/inspect.html
https://docs.python.org/3/library/inspect.html#inspect.iscoroutinefunction
https://docs.python.org/3/library/asyncio-task.html#asyncio.Future
https://docs.python.org/3/library/asyncio-task.html#asyncio.coroutine
