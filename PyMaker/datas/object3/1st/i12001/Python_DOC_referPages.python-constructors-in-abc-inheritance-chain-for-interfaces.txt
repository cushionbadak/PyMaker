Natural Text
I've attempted to create a Python interface class hierachy that looks something like:So basically an interface sort of like that with a bunch more functions everywhere and stuff in the constructors etc...Then I go to derive off my interface:I'm trying to work out how to call the constructors properly.  The way I have it, I'm pretty sure I call the interface constructors many times...  So it's wrong...  Is there a preferred way to do it?  (Perhaps I don't call constructors in the interface classes, or I only call the interface constructor at the end up my implementation class.)Also, I've never coded in this style and am open to better ways to code this.
You're probably looking for the super() function.Calling super().something() calls the method something() of the parent class. It makes sure (using __mro__) to call the parent classes' method only once.i.e. your code will look like this:Keep in mind you do not need to pass self or the metaclass. The metaclass passes by the inheritance. Also, you do not need to call super more than once. Super will call all of the parent classes' methods automatically.Regarding the interface, it looks good but there's no need to pass metaclass=ABCMeta if the class you're inheriting from already has it. The metaclass is passed on by inheritance.


Answer URL
https://docs.python.org/3/library/functions.html#super
https://docs.python.org/3/library/stdtypes.html#class.__mro__
