Natural Text
This is my project structure (Python 3.5.1.):Case 1File b.py is empty.File __init__.py is:If we run import a, the output is:Case 2File b.py is empty.File __init__.py is:If we run import a, the output is:QuestionWhy doesn't the program fail in Case 2?Usually if we run import a.b then we can only reference it by a.b, not b. Hopefully somebody can help explain what's happening to the namespace in Case 2.
Python adds modules as globals to the parent package after import.So when you imported a.b, the name b was added as a global to the a module, created by a/__init__.py.From the Python 3 import system documentation:When a submodule is loaded using any mechanism (e.g. importlib APIs, the import or import-from statements, or built-in __import__()) a binding is placed in the parent moduleâ€™s namespace to the submodule object. For example, if package spam has a submodule foo, after importing spam.foo, spam will have an attribute foo which is bound to the submodule.Bold emphasis mine. Note that the same applies to Python 2, but Python 3 made the process more explicit.
An import statement brings a module into scope. You imported b, so there it is, a module object.Read the documentation for import:The basic import statement (no from clause) is executed in two steps:find a module, loading and initializing it if necessarydefine a name or names in the local namespace for the scope where the import statement occurs.You didn't import b in the first case.


Answer URL
https://docs.python.org/3/reference/import.html#submodules
https://docs.python.org/3/reference/simple_stmts.html#import
