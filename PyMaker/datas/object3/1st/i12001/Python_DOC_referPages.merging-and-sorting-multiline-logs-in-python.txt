Natural Text
I have a bunch of log files with the following format:Where the number of text lines following a timestamp can vary from 0 to many. All the lines following a timestamp until the next timestamp are part of the previous log statement.Example:I am trying to create a log merge script for such types of log files and have been unsuccessful so far.If the logs were in a standard format where each line is a separate log entry, it is straight forward to create a log merge script using fileinput and sorting.I think am looking at a way to treat multiple lines as a single log entity that is sortable on the associated timestamp.Any pointers?
You can write a generator that acts as an adapter for your log stream to do the chunking for you. Something like this:This will turn your raw log lines into batches where each one is a list of lines, and the first line in each list has the timestamp. You can build the rest from there. It might make more sense to start batch as an empty string and tack on the rest of the message directly; whatever works for you.Side-note, if you're merging multiple timestamped logs you shouldn't need to perform global sorting at all if you use a streaming merge-sort. 
The following approach should work well.It makes use of the merge function to combine a list of iterables in order. As your timestamps are naturally ordered, all that is needed is a function to read whole entries at a time from each file. This is done using a regular expression to spot lines starting in each file with a timestamp, and groupby is used to read matching rows in at once.glob is used to first find all files in your folder with a .log extension.
You can easily break it into chunks using re.split() with a capturing regexp:You can make the regexp as precise as you wish; I just require [20\d\d- at the start of a line. The result contains the matching and non-matching parts of logtext, as alternating pieces (starting with an empty non-matching part).It remains to reassemble the log parts, which you can do with this recipe from itertools:If you have several of these lists, you can indeed just combine and sort them, or use a fancier merge sort if you have lots of data. I understand your question to be about splitting up the log entries, so I won't go into this.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
