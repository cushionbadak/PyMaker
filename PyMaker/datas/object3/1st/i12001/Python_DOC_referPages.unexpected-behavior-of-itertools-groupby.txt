Natural Text
This is the observed behavior:The expected output of list(y[1]) is [0,1,2,3,4,5,6,7,8,9]What's going on here?I observed this on cpython 3.4.2, but others have seen this with cpython 3.5 and IronPython 2.9.9a0 (2.9.0.0) on Mono 4.0.30319.17020 (64-bit).The observed behavior on Jython 2.7.0 and pypy:
itertools.groupby documentation tells thatitertools.groupby(iterable, key=None)[...]The operation of groupby() is similar to the uniq filter in Unix. It generates a break or new group every time the value of the key function changes (which is why it is usually necessary to have sorted the data using the same key function). That behavior differs from SQLâ€™s GROUP BY which aggregates common elements regardless of their input order.The returned group is itself an iterator that shares the underlying iterable with groupby(). Because the source is shared, when the `groupby() object is advanced, the previous group is no longer visible. So, if that data is needed later, it should be stored as a list [--]So the assumption from the last paragraph is that that the generated list would be the empty list [], since the iterator advanced already, and met StopIteration; but instead in CPython the result is surprising [9].This is because the _grouper iterator lags one item behind the original iterator, which is because groupby needs to peek one item ahead to see if it belongs to the current or the next group, yet it must be able to later yield this item as the first item of the new group.However the currkey and currvalue attributes of the groupby are not reset when the original iterator is exhausted, so currvalue still points to the last item from the iterator.The CPython documentation actually contains this equivalent code, that also has the exact same behaviour as the C version code:Notably the __next__ finds the first item of the next group, and stores it its key into self.currkey and its value to self.currvalue. But the key is the lineWhen next throws StopItertion the self.currvalue still contains the last key of the previous group. Now, when y[1] is made into a list, it first yields the value of self.currvalue, and only then runs next() on the underlying iterator (and meets StopIteration again).Even though there is Python equivalent in the documentation, that behaves exactly like the authoritative C code implementation in CPython, IronPython, Jython and PyPy give different results.
The problem is that you group all of them into one group so after the first next call everything is already grouped:but the elements are a generator, so you need to pass it immediatly into some structure taking an iterable to "print" or "save" it, i.e. a list:and then your range(10) is empty and the groupy-generator is finished:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
