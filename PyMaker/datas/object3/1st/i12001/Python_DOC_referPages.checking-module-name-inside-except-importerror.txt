Natural Text
PyCharm gives a code inspection warning on that:'MySQLdb' in try block with 'except ImportError' should also be defined in except blockThis inspection detects names that should resolve but don't. Due to dynamic dispatch and duck typing, this is possible in a limited but useful number of cases. Top-level and class-level items are supported better than instance items.Ok, I thought the warning is reasonable, because the fallback code assumes that 'MySQLdb' is not installed, while it could be some different error that just raised ImportError. So I used something like:  The PyCharm alert is still exists, but It could be just a PyCharm issue (google shows issues with such inspections)Questions:Is it really worth checking for name when you "except ImportError"? Even in simple cases (no some action after import MySQLdb)? If it worth checking, Is the above example the right way to do it? If no - what is the right way?P.S. MySQLdb is just an example of a module that could be absent in the system.
I think you misunderstood the warning, if you do not define a variable called MySQLdb in the except block then later on when you try to use the module you would get a NameError:If the module is only used in the try: clause then this is no issue. But for the more general case the checker expects you to define the variable in the except block:
In Python 3.3+, an ImportError has the attribute name that tells the name of the module whose import failed. Then of course MySQLdb would hint that you're stuck with Python 2.
Try this:Output:[!] Error: Please Install Module Name:[ libname ] And Try Again !!!


Answer URL
https://docs.python.org/3/library/exceptions.html#ImportError
