Natural Text
The answer to Javascript regex question Return the part of the regex that matched is "No, because compilation destroys the relationship between the regex text and the matching logic."But Python preserves Match Objects, and re.groups() returns the specific group(s) that triggered a match.  It should be simple to preserve the regex text of each group as part of a Match Object and return it, but there doesn't appear to be a call to do so.This returns:The compiler obviously knows that there are three groups in this pattern.  Is there a way to extract the subpattern in each group in a regex, with something like:Yes, it would be possible to write a custom pattern parser, for example to split on '|' for this particular pattern.  But it would be far easier and more reliable to use the re compiler's understanding of the text in each group.
If the indices are not sufficient and you absolutely need to know the exact part of the regex, there is probably no other possibility but to parse the expression's groups on your own.All in all, this is no big deal, since you can simply count opening and closing brackets and log their indices:Edited: This dumb implementation only counts opening and closing braces. However, regexes may contain escaped braces, e.g. \(, which are  counted as regular group-defining braces using this method. You may  want to adapt it to omit braces that have an uneven number of  backslashes right before them. I leave this issue as a task for you ;)With this function, your example becomes:Which returns:Edited: To get the list of your groups, of course a simple comprehension would do:
This may or may not be helpful depending on the problem that you are actually trying to solve ... But python lets you name the groups:From there, when you have a match, you can inspect the groupdict to see which groups are present:Of course, this doesn't tell you the exact regular expression associated with the match -- You'd need to keep track of that yourself based on the group name.If you really want to go beyond this, you probably want something a little more sophisticated than simple regular expression parsing.  In that case, I might suggest something like pyparsing.  Don't let the old-school styling on the website fool you (or the lack of a PEP-8 compliant API) -- the library is actually quite powerful once you get used to it.
It will remain up to you to track what regular expressions you are feeding into re.search. Something like:


Answer URL
https://docs.python.org/3/library/re.html#match-objects
