Natural Text
Suppose I have 0.625 as a floating point is 0b.101, so if I want the first two bits of that as an integer i.e. 0b10 = 2, how can I achieve this in python?I've tried taking the number to a power of 2 and casting to an int, so if I want n bits I do int(0.625*(2**n)). But that is not working for me.The problem occurs when I have a number greater than 1 so 24.548838022726972 will give me 392 rather than 12 for the first four bits. (24.548838022726972 = 0b11000.100011001...)
If you want the n most significant bits, one way to start is to use math.frexp to normalise your number to lie in the range [0.5, 1.0). Then multiplying by 2**n and taking the integer part will give you what you need.Instead of explicitly computing a power of 2 to scale by, you could use the math.ldexp function to do the second part of the operation.
You can use struct.pack() to convert a floating point number to a list of bytes, and then extract the bits you're interested in from there.
Here is a simplified Java program for the test case:Output:
A direct way to obtain the significant bits of the mantissa in the IEEE 754 format with builtin functions is: You obtain   0b1 + mantissa without non significant 0.


Answer URL
https://docs.python.org/3/library/math.html#math.frexp
https://docs.python.org/3/library/math.html#math.ldexp
