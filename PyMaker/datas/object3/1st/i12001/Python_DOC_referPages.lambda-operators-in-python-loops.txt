Natural Text
This question already has an answer here:Creating lambda inside a loop [duplicate]                    3 answers                I'm encountering some strange behavior with lambda functions in a loop in python. When I try to assign lambda functions to dictionary entries in a list, and when other entries in the dictionary are used in the function, only the last time through the loop is the lambda operator evaluated.  So all of the functions end up having the same value!Below is stripped-down code that captures just the parts of what I'm trying that is behaving oddly.  My actual code is more complex, not as trivial as this, so I'm looking for an explanation and, preferably, a workaround.The output is:In other words, the dictionary entires that are just integers are fine, and were filled properly by the loop.  But the lambda functions — which are trivial and should just return the same value as the "number" entries — are all set to the last pass through.What's going on?
Try thisIt prints (python3)To avoid confusion, n referred to different things in your code.  I used it only at one place.It is a closure problem.
By the end of your for loop, the n variable - which, unlike in static languages such as C#, is set to 3, which is then being accessed in the lambda expression. The variable value is not fixed; as another answer on the site points out, lambda expressions are fluid and will retain references to the variables involved instead of capturing the values at the time of creation. This question also discusses your issue.To fix it, you need to give the lambdas new, local variable via default parameters:This creates a new variable in the lambda's scope, called n, which sets its default value to the "outside" value of n. Note that this is the solution endorsed by the official FAQ, as this answer by Adrien Plisson states.Now, you can call your lambda like normal and ignore the optional parameter, with no ill effect.EDIT: As originally stated by Sci Prog, this solution makes n = number redundant. Your final code will look similar to this:
You are probably reaching the problem that the method is created as referencing a variable n.  The function is only evaluated after the loop so you are going to call the function which references n.  If you're ok with having the function evaluated at the time of assignment you could put a function call around it:or if you want to have the functions to use, have them reference the specific value you want.  From your code you could use a default argument as a workaround:The difference comes down to a question of memory addressing.  I imagine it went something like this:


Answer URL
https://docs.python.org/3/faq/programming.html#why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result
