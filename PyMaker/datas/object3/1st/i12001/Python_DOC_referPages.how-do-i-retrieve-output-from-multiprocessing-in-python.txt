Natural Text
So, I'm trying to speed up one routine by using the Multiprocessing module in Python. I want to be able to read several .csv files by splitting the job among several cores, for that I have:Then I call this function by saying:The thing is that this doesn't store any output. I have read all the forums online and seen that there might be a way with multiprocessing.queue but I don't understand it quite well.Is there any simple and straightforward method?
Your best bet are multiprocessing.Queue or multiprocessing.Pipe, which are designed exactly for this problem. They allow you to send data between processes in a safe and easy way.If you'd like to return the output of your csvreader function, you should pass another argument to it, which is the multiprocessing.Queue through which the data will be sent back to the main process. Instead of returning the values, place them on the queue, and the main process will retrieve them at some point later. If they're not ready when the process tries to get them, by default it will just block (wait) until they are availableYour function would now look like this:The main routine would be:Note that you have to call Queue.get() for each item you want to return.Have a look at the documentation on the multiprocessing module for more examples and information.
Using the example from the introduction to the documentation:


Answer URL
https://docs.python.org/3/library/multiprocessing.html?highlight=multiprocessing#exchanging-objects-between-processes
