Natural Text
So I understand that everything in Python is an object. I also understand that an object is a portion of memory that contains information. Knowing these two things made me wonder how integers can be objects so I went digging.  I figured out that CPython creates a range from -5 to 256 on startup. So, what I would like to know is whether or not this is correct as I can not find an answer.  1 is an identifier that points to an object where the information stored in there is the value 1, is this statement correct?  Also, if CPython only creates a range from -5 to 256, then how do integers above or below that range know what value is being stored in them?  How do strings and floats know what value is being stored in them?Sorry if this is a bad question, I am new to coding and trying to wrap my head around the terminology and understand what is happing when I execute lines of code. Thank you in advance for the help.
Integers are objects because everything is an object. If you're wrapping your brain around the terminology bits, I'd recommend checking out the Everything Is an Object chapter in Dive Into Python. Here's the most relevant bit:Everything in Python is an object, and almost everything has attributes and methods. All functions have a built-in attribute __doc__, which returns the doc string defined in the function's source code. The sys module is an object which has (among other things) an attribute called path. And so forth.Still, this begs the question. What is an object? Different programming languages define “object” in different ways. In some, it means that all objects must have attributes and methods; in others, it means that all objects are subclassable. In Python, the definition is looser; some objects have neither attributes nor methods (more on this in Chapter 3), and not all objects are subclassable (more on this in Chapter 5). But everything is an object in the sense that it can be assigned to a variable or passed as an argument to a function (more in this in Chapter 4).
All of Python integers are objects. Their values are a bit complicated, as they can expand to support very large numbers (bigger than the standard 32- or 64-bit integers available in most programming languages). The implementation is written in C, and you can find it here. You don't really need to know or care about the details of the implementation though. The int objects work pretty much like every other kind of object in Python.The caching of integers -5 through 256 is a separate thing. The caching avoids recreating the same small integers over and over, but the cached 1 object is still the same kind of object as an uncached int like 257. It's just that every time you have an int who's value is 1 you're dealing with the exact same object, while there may be several objects with the value 257 in existence at the same time. You can write your own classes that do this sort of caching if you want, just define a __new__ method that returns a pre-existing instance of the class. The caching is another implementation detail that you don't really need to care about. Python would still work just fine if it didn't cache any integers (it just might be a little bit slower and use a bit more memory than the current cached implementation).


Answer URL
https://docs.python.org/3/c-api/long.html
