Natural Text
I have a file where the lines look like this:tom, 10, 20, 0, 100, 0, 100, 70, 80, 90, 0, 80, 85I want to take the number 10 through the second 100, and use the greatest four values. Then take the average.I have:This does not work. I am concerned that each line is not considered a list. The error appears on first line as type is unhashable.Edit: I want to do this without modules. Also, I am creating a list for the line with : name, q1, q2, q3, q4, q5, q6, a1, a2, a3, a4, midterm, final = line.strip().split(',')
No need for complicated conditionals, just use heapq.nlargest or since it's a small number of items anyway, sort the lot of 'em and slice off the largest:Your code contains insufficient context to figure out where my_dictionary came from, but the general idea would be to slice off the values you care about to make a list to sort, then average those:then average them:
Edited: Here's a complete example, in Python 3. Note I added reversed=True on sorted() call. That was a bug earlier.Also, please note that there are no "modules" here. These are all functions/keywords/capabilities built in to the base python. No imports required!
I assume we're starting like this:And we only want the numbers from 10 to the second 100, so...Python's built-in sorted will order the numbers from smallest to largest,Since we want the four largest numbers in a list that is ordered from smallest to largest, we want the last four items in the list.Finally, to get the average, we can simply sum the values in the greatest list and divide by 4 (since we are averaging a total of 4 values).float will just let the answer have decimal places. Without float, the average is 57. With float, the average is 57.5


Answer URL
https://docs.python.org/3/library/heapq.html#heapq.nlargest
