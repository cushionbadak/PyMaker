Natural Text
I would like to generate a human-readable hash with customized properties -- e.g., a short string of specified length consisting entirely of upper case letters and digits excluding 0, 1, O, and I (to eliminate visual ambiguity):A 7-character string of the above form could take on over 34 billion unique values which, for my purposes, makes collisions extremely unlikely.  Security is also not a major concern.Is there an existing module or routine that implements something like the above? Alternatively, can someone suggest a straightforward algorithm?
The method you should be using has similarities with password one-way encryption. Of course since you are going for readable, a good password function is probably out of the question.Here's what I would do:Take an MD5 hash of the emailConvert base32 which already eliminates O and IReplace any non-readable characters with readable onesHere's an example based on the above:Since it's a one-way function (hash), you obviously don't need to worry about reversing the process (you can't anyway). You can also replace any other characters you find non-readable with readable ones (I would go for lowercase versions of the characters, e.g. q instead of Q)More about base32 here: https://docs.python.org/3/library/base64.html
You can simply truncate the beginning of an MD5sum algorithm. It should have approximately the same statistical properties than the whole string anyway:Same code with hashlib module:


Answer URL
https://docs.python.org/3/library/base64.html
