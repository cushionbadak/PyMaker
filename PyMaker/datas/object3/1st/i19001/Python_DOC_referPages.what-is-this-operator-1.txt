Natural Text
I'm going through some Python activities and was given example code with this operator: y *= -1I had a look through the relevant Python docs, to no avail.I know y += 1, for example, is short for y = y + 1. So is this y = y * -1 y equals y times -1 maybe?Closest thing in Python docs I could find is this: x * y: product of x and yIs this it?
In the vast majority of the casesis the same as but in the general case, it is interpreted as:which is then equivalent to:if y's type overrides __imul__.This means that if y's type overrides the inplace multiplication operator, y*=<expr> is performed inplace, while y=y*<expr> is not.EDITIt might not be immediately clear why the assignment is needed, i.e. why it is intrepreted as y = imul(y, <expr>), and not just imul(y, <expr>).The reason is that it makes a lot of sense for the following two scenarios to give the same result:andNow, this of course works if a and b are of the same type (e.g. floats, numpy arrays, etc.), but if they aren't, it is possible for the result of the operation to have the type of b, in which case the operation cannot be an inplace operation of a, thus the result needs to be assigned to a, in order to achieve the correct behavior.For example, this works, thanks to the assignment:Whereas if the assignment is dropped, a remains unchanged:
Yes that's correct. It just means multiply the left-hand value by negative the right-hand value. They're both arithmetic operators that differ simply by operation and expression binding, so I believe +/* are parallel everywhere else in overloads.


Answer URL
