Natural Text
Is it possible to emulate something like sum() using list comprehension ?For example - I need to calculate the product of all elements in a list :Code that is doing the same : 
No; a list comprehension produces a list that is just as long as its input. You will need one of Python's other functional tools (specifically reduce() in this case) to fold the sequence into a single value.
On Python 3 you will need to add this import: from functools import reduceImplementation ArtifactIn Python 2.5 / 2.6 You could use vars()['_[1]'] to refer to the list comprehension currently under construction. This is horrible and should never be used but it's the closest thing to what you mentioned in the question (using a list comp to emulate a product). 
List comprehension always creates another list, so it's not useful in combining them (e.g. to give a single number). Also, there's no way to make an assignment in list comprehension, unless you're super sneaky.The only time I'd ever see using list comprehensions as being useful for a sum method is if you only want to include specific values in the list, or you don't have a list of numbers:or another example":Super sneaky way to make an assignment in a list comprehension...but that's horrible :)
Something like this:
I complement the answer of Ignacio Vazquez-Abrams with some code that uses the reduce operator of Python. which can also be written asBonus: Python provides this functionality in the built-in sum function. This is the most readable expression imo. 

Found the magic on http://code.activestate.com/recipes/436482/.It should be the logic like the following code.
It is possible to achieve by using lambda with list comprehensionSince we can't assign a value in list comprehension we go with lambdaSolution:


Answer URL
https://docs.python.org/3/library/functools.html
