Natural Text
This question already has an answer here:Is there a logical difference between 'not ==' and '!= (without is)                    3 answers                I wondered what'd be the difference between these two pieces of code:
The first uses the object’s __ne__ method, while the second uses the object’s __eq__ method and negates its result.While both methods should pair their result so a == b implies not a != b this is actually not required or enforced.There are no implied relationships among the comparison operators. The truth of x==y does not imply that x!=y is false. Accordingly, when defining __eq__(), one should also define __ne__() so that the operators will behave as expected.In your case, where choice is a string (I guess?) it does not make a real difference. The built-in types all ensure the inverse relationship between == and !=. So the only difference is really how understandable it is when looking at the code. And I personally prefer the more concise first version.


Answer URL
