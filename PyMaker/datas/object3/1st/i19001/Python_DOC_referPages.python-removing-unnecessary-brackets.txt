Natural Text
I wrote a very simple function in Python, that prints out all prime numbers within a specific sequence. It works fine, but the results it gives me have way too many brackets/parentheses in them. I'd like to get the result as one output with a single list including all of the numbers, rather than a lot of outputs, each containing a single number.Here's the code:The function is_prime() used in the code simply returns True, if the number is a prime number, and False, if it isn't.Basically, for every loop, it checks if X is a prime number. If it is, X will be added to the list called Z. Although, when it does this, it also adds unnecessary brackets/parentheses to the list. Here's the result, using the sequence 1-100:As you can see, there are way too many brackets/parentheses.How can I rewrite the code, so it doesn't make these?
Just append to a list instead of nesting tuples:
Not a direct answer, but here's a cleaner and shorter way:
You can also concatenate tuples (notice the trailing comma when appending to Z):Not sure which is more efficient: appending to a list or concatenating tuples...
In the line "z = z, x", what you've done is to assign to z a list containing z and x. After the first time, z is always a list when you arrive here, so you get a new list, containing the old list, and an integer. So, z = 0 at the start, then 0, 1 next, and then it goes oval... The next time, it becomes (0, 1), 2; the previous list (the old z), and the new x. Next time, you get ((0, 1), 2), 3, and so on.If you use z.append(x), it adds an additional item to the list, rather than creating a new, 2 element list each time. Using z.append(x), in the end, you'll get (0, 1, 2, 3, ...), which is closer to what you'd thought you'd get.


Answer URL
