Natural Text
I have this:If I do this:Then I get this:but I want this:without creating new dictionary.
There's no built-in method for doing this in Python 2. If you need this, you need to write a prepend() method/function that operates on the OrderedDict internals with O(1) complexity.For Python 3.2 and later, you should use the move_to_end method. The method accepts a last argument which indicates whether the element will be moved to the bottom (last=True) or the top (last=False) of the OrderedDict.Finally, if you want a quick, dirty and slow solution, you can just create a new OrderedDict from scratch.Details for the four different solutions:Extend OrderedDict and add a new instance methodDemo:Standalone function that manipulates OrderedDict objectsThis function does the same thing by accepting the dict object, key and value. I personally prefer the class:Demo:Use OrderedDict.move_to_end() (Python >= 3.2)Python 3.2 introduced the OrderedDict.move_to_end() method. Using it, we can move an existing key to either end of the dictionary in O(1) time.If we need to insert an element and move it to the top, all in one step, we can directly use it to create a prepend() wrapper (not presented here).Create a new OrderedDict - slow!!!If you don't want to do that and performance is not an issue then easiest way is to create a new dict:output:
EDIT (2019-02-03)Note that the following answer only works on older versions of Python. More recently, OrderedDict has been rewritten in C. In addition this does touch double-underscore attributes which is frowned upon.I just wrote a subclass of OrderedDict in a project of mine for a similar purpose. Here's the gist.Insertion operations are also constant time O(1) (they don't require you to rebuild the data structure), unlike most of these solutions.
You have to make a new instance of OrderedDict. If your keys are unique:But if not, beware as this behavior may or may not be desired for you:
If you know you will want a 'c' key, but do not know the value, insert 'c' with a dummy value when you create the dict.and change the value later.
This is now possible with move_to_end(key, last=True)https://docs.python.org/3/library/collections.html#collections.OrderedDict.move_to_end
If you need functionality that isn't there, just extend the class with whatever you want:Not terribly efficient, but works:
You may want to use a different structure altogether, but there are ways to do it in python 2.7.d2 will then containAs mentioned by others, in python 3.2 you can use OrderedDict.move_to_end('c', last=False) to move a given key after insertion.Note: Take into consideration that the first option is slower for large datasets due to creation of a new OrderedDict and copying of old values.
FWIW Here is a quick-n-dirty code I wrote for inserting to an arbitrary index position.  Not necessarily efficient but it works in-place.
I would suggest adding a prepend() method to this pure Python ActiveState recipe or deriving a subclass from it. The code to do so could be a fairly efficient given that the underlying data structure for ordering is a linked-list.UpdateTo prove this approach is feasible, below is code that does what's suggested. As a bonus, I also made a few additional minor changes to get to work in both Python 2.7.15 and 3.7.1.A prepend() method has been added to the class in the recipe and has been implemented in terms of another method that's been added named move_to_end(), which was added to OrderedDict in Python 3.2. prepend() can also be implemented directly, almost exactly as shown at the beginning of @Ashwini Chaudhary's answerâ€”and doing so would likely result in it being slightly faster, but that's been left as an exercise for the motivated reader...
I got an infinity loop while trying to print or save the dictionary using @Ashwini Chaudhary answer with Python 2.7. But I managed to reduce his code a little, and got it working here:


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict.move_to_end
https://docs.python.org/3/whatsnew/3.2.html#collections
https://docs.python.org/3/library/collections.html#collections.OrderedDict.move_to_end
https://docs.python.org/3/library/collections.html#collections.OrderedDict.move_to_end
https://docs.python.org/3/library/collections.html#collections.OrderedDict.move_to_end
https://docs.python.org/3/library/collections.html#collections.OrderedDict.move_to_end
