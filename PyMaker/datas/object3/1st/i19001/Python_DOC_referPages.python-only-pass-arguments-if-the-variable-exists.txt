Natural Text
I have the following variables that a user can optionally submit through a form (they are not required, but may do this to filter down a search).Now I want to pass these variables to a function, but only if they exist. If they do not exist I want to just run the function without arguments.the function without arguments is:with color only it'sand with color and size it'sIf the argument is defined I want to pass it to the function, but if it's not I do not want to pass it.What is the most efficient way to do that? Does python have built-in methods for this?
Assuming that's a standard get call (like on a dictionary), this ought to be easy. Define your function with None for the defaults for your parameters, and then pass color and size without bothering to check them! This way, you only check for None arguments in one place (inside the function call, where you have to check anyway if the function can be called multiple ways). Everything stays nice and clean. Of course this assumes (like I said at the top) that your get call is like a normal Python dictionary's get method, which returns None if the value isn't found.Finally, I notice that your function name is apicall: there's a chance you don't actually have access to the function code itself. In this case, since you may not know anything about the default values of the function signature and None might be wrong, I would probably just write a simple wrapper to do the argument-checking for you. Then you can call the wrapper as above!NOTE: This second version shouldn't be necessary unless you can't see the code that you're calling and don't have any documentation on it! Using None as a default argument is very common, so chances are that you can just use the first way. I would only use the wrapper method if you can't modify the function you're calling and you don't know what its default arguments are (or its default arguments are module constants or something, but that's pretty rare).
meybe you can use something like this:
As much as I like @HenryKeiter's solution, Python provides a MUCH easier way to check the parameters. In fact, there are a couple different solutions.For example, if search() is a standalone function and you want to view the args, you can use the inspect module as seen in this solution.Example Code 1However, if search() is a method of a class (we'll call it Search), then you can simply do use the built-in vars function to see all of the class methods and their parameters:Example Code 2The only caveat with the 2nd method is that it's more useful as a visual inspection tool, rather than a programmatic one, although you could technically say if 'size' in vars(Search)['search']: do something. It just wouldn't be very robust. Easier and more durable to say if 'size' in inspect.getfullargspec(Search.search).args: do something or for arg in inspect.getfullargsspec(Search.search).args: do something
When you're defining your method, if you set a default argument you can specify the argument or not.Then, when you call it, you can specify the keyword argument as you choose. Both of these would be valid:


Answer URL
https://docs.python.org/3/library/inspect.html
https://docs.python.org/3/library/functions.html#vars
