Natural Text
In "Programming Python", Mark Lutz mentions "mixins". I'm from a C/C++/C# background and I have not heard the term before. What is a mixin? Reading between the lines of this example (which I've linked to because it's quite long), I'm presuming it's a case of using multiple inheritance to extend a class as opposed to 'proper' subclassing. Is this right? Why would I want to do that rather than put the new functionality into a subclass? For that matter, why would a mixin/multiple inheritance approach be better than using composition?What separates a mixin from multiple inheritance? Is it just a matter of semantics?
A mixin is a special kind of multiple inheritance.  There are two main situations where mixins are used:You want to provide a lot of optional features for a class.You want to use one particular feature in a lot of different classes.For an example of number one, consider werkzeug's request and response system.  I can make a plain old request object by saying:If I want to add accept header support, I would make thatIf I wanted to make a request object that supports accept headers, etags, authentication, and user agent support, I could do this:The difference is subtle, but in the above examples, the mixin classes weren't made to stand on their own.  In more traditional multiple inheritance, the AuthenticationMixin (for example) would probably be something more like Authenticator.  That is, the class would probably be designed to stand on its own.
First, you should note that mixins only exist in multiple-inheritance languages. You can't do a mixin in Java or C#. Basically, a mixin is a stand-alone base type that provides limited functionality and polymorphic resonance for a child class. If you're thinking in C#, think of an interface that you don't have to actually implement because it's already implemented; you just inherit from it and benefit from its functionality. Mixins are typically narrow in scope and not meant to be extended. [edit -- as to why:]I suppose I should address why, since you asked. The big benefit is that you don't have to do it yourself over and over again. In C#, the biggest place where a mixin could benefit might be from the Disposal pattern. Whenever you implement IDisposable, you almost always want to follow the same pattern, but you end up writing and re-writing the same basic code with minor variations. If there were an extendable Disposal mixin, you could save yourself a lot of extra typing. [edit 2 -- to answer your other questions]What separates a mixin from multiple inheritance? Is it just a matter of semantics?Yes. The difference between a mixin and standard multiple inheritance is just a matter of semantics; a class that has multiple inheritance might utilize a mixin as part of that multiple inheritance. The point of a mixin is to create a type that can be "mixed in" to any other type via inheritance without affecting the inheriting type while still offering some beneficial functionality for that type. Again, think of an interface that is already implemented. I personally don't use mixins since I develop primarily in a language that doesn't support them, so I'm having a really difficult time coming up with a decent example that will just supply that "ahah!" moment for you. But I'll try again. I'm going to use an example that's contrived -- most languages already provide the feature in some way or another -- but that will, hopefully, explain how mixins are supposed to be created and used. Here goes:Suppose you have a type that you want to be able to serialize to and from XML. You want the type to provide a "ToXML" method that returns a string containing an XML fragment with the data values of the type, and a "FromXML" that allows the type to reconstruct its data values from an XML fragment in a string. Again, this is a contrived example, so perhaps you use a file stream, or an XML Writer class from your language's runtime library... whatever. The point is that you want to serialize your object to XML and get a new object back from XML. The other important point in this example is that you want to do this in a generic way. You don't want to have to implement a "ToXML" and "FromXML" method for every type that you want to serialize, you want some generic means of ensuring that your type will do this and it just works. You want code reuse. If your language supported it, you could create the XmlSerializable mixin to do your work for you. This type would implement the ToXML and the FromXML methods. It would, using some mechanism that's not important to the example, be capable of gathering all the necessary data from any type that it's mixed in with to build the XML fragment returned by ToXML and it would be equally capable of restoring that data when FromXML is called. And.. that's it. To use it, you would have any type that needs to be serialized to XML inherit from XmlSerializable. Whenever you needed to serialize or deserialize that type, you would simply call ToXML or FromXML. In fact, since XmlSerializable is a fully-fledged type and polymorphic, you could conceivably build a document serializer that doesn't know anything about your original type, accepting only, say, an array of XmlSerializable types. Now imagine using this scenario for other things, like creating a mixin that ensures that every class that mixes it in logs every method call, or a mixin that provides transactionality to the type that mixes it in. The list can go on and on. If you just think of a mixin as a small base type designed to add a small amount of functionality to a type without otherwise affecting that type, then you're golden. Hopefully. :)
This answer aims to explain mixins with examples that are:self-contained: short, with no need to know any libraries to understand the example.in Python, not in other languages.It is understandable that there were examples from other languages such as Ruby since the term is much more common in those languages, but this is a Python thread.It shall also consider the controversial question:Is multiple inheritance necessary or not to characterize a mixin?DefinitionsI have yet to see a citation from an "authoritative" source clearly saying what is a mixin in Python.I have seen 2 possible definitions of a mixin (if they are to be considered as different from other similar concepts such as abstract base classes), and people don't entirely agree on which one is correct.The consensus may vary between different languages.Definition 1: no multiple inheritanceA mixin is a class such that some method of the class uses a method which is not defined in the class.Therefore the class is not meant to be instantiated, but rather serve as a base class. Otherwise the instance would have methods that cannot be called without raising an exception.A constraint which some sources add is that the class may not contain data, only methods, but I don't see why this is necessary. In practice however, many useful mixins don't have any data, and base classes without data are simpler to use.A classic example  is the implementation of all comparison operators from only <= and ==:This particular example could have been achieved via the functools.total_ordering() decorator, but the game here was to reinvent the wheel:Definition 2: multiple inheritanceA mixin is a design pattern in which some method of a base class uses a method it does not define, and that method is meant to be implemented by another base class, not by the derived like in Definition 1.The term mixin class refers to base classes which are intended to be used in that design pattern (TODO those that use the method, or those that implement it?)It is not easy to decide if a given class is a mixin or not: the method could be just implemented on the derived class, in which case we're back to Definition 1. You have to consider the author's intentions.This pattern is interesting because it is possible to recombine functionalities with different choices of base classes:Authoritative Python occurrencesAt the official documentatiton for collections.abc the documentation explicitly uses the term Mixin Methods.It states that if a class:implements __next__inherits from a single class Iteratorthen the class gets an __iter__ mixin method for free.Therefore at least on this point of the documentation, mixin does not not require multiple inheritance, and is coherent with Definition 1.The documentation could of course be contradictory at different points, and other important Python libraries might be using the other definition in their documentation.This page also uses the term Set mixin, which clearly suggests that classes like Set and Iterator can be called Mixin classes.In other languagesRuby: Clearly does not require multiple inheritance for mixin, as mentioned in major reference books such as Programming Ruby and The Ruby programming LanguageC++: A method that is not implemented is a pure virtual method.Definition 1 coincides with the definition of an abstract class (a class that has a pure virtual method).That class cannot be instantiated.Definition 2 is possible with virtual inheritance: Multiple Inheritance from two derived classes
I think of them as a disciplined way of using multiple inheritance - because ultimately a mixin is just another python class that (might) follow the conventions about classes that are called mixins.My understanding of the conventions that govern something you would call a Mixin are that a Mixin:adds methods but not instance variables (class constants are OK)only inherits from object (in Python)That way it limits the potential complexity of multiple inheritance, and makes it reasonably easy to track the flow of your program by limiting where you have to look (compared to full multiple inheritance).  They are similar to ruby modules.If I want to add instance variables (with more flexibility than allowed for by single inheritance) then I tend to go for composition.Having said that, I have seen classes called XYZMixin that do have instance variables.
Mixins is a concept in Programming in which the class provides functionalities but it is not meant to be used for instantiation. Main purpose of Mixins is to provide functionalities which are standalone and it would be best if the mixins itself do not have inheritance with other mixins and also avoid state. In languages such as Ruby, there is some direct language support but for Python, there isn't. However, you could used multi-class inheritance to execute the functionality provided in Python.I watched this video http://www.youtube.com/watch?v=v_uKI2NOLEM to understand the basics of mixins. It is quite useful for a beginner to understand the basics of mixins and how they work and the problems you might face in implementing them.Wikipedia is still the best: http://en.wikipedia.org/wiki/Mixin
What separates a mixin from multiple inheritance? Is it just a matter of semantics?A mixin is a limited form of multiple inheritance. In some languages the mechanism for adding a mixin to a class is slightly different (in terms of syntax) from that of inheritance.In the context of Python especially, a mixin is a parent class that provides functionality to subclasses but is not intended to be instantiated itself. What might cause you to say, "that's just multiple inheritance, not really a mixin" is if the class that might be confused for a mixin can actually be instantiated and used - so indeed it is a semantic, and very real, difference.Example of Multiple InheritanceThis example, from the documentation, is an OrderedCounter:It subclasses both the Counter and the OrderedDict from the collections module.Both Counter and OrderedDict are intended to be instantiated and used on their own. However, by subclassing them both, we can have a counter that is ordered and reuses the code in each object. This is a powerful way to reuse code, but it can also be problematic. If it turns out there's a bug in one of the objects, fixing it without care could create a bug in the subclass. Example of a MixinMixins are usually promoted as the way to get code reuse without potential coupling issues that cooperative multiple inheritance, like the OrderedCounter, could have. When you use mixins, you use functionality that isn't as tightly coupled to the data. Unlike the example above, a mixin is not intended to be used on its own. It provides new or different functionality.For example, the standard library has a couple of mixins in the socketserver library.Forking and threading versions of each type of server can be created  using these mix-in classes. For instance, ThreadingUDPServer is  created as follows:The mix-in class comes first, since it overrides a method defined in  UDPServer. Setting the various attributes also changes the behavior of  the underlying server mechanism.In this case, the mixin methods override the methods in the UDPServer object definition to allow for concurrency.The overridden method appears to be process_request and it also provides another method, process_request_thread. Here it is from the source code:A Contrived ExampleThis is a mixin that is mostly for demonstration purposes - most objects will evolve beyond the usefulness of this repr:and usage would be:And usage:
I'd advise against mix-ins in new Python code, if you can find any other way around it (such as composition-instead-of-inheritance, or just monkey-patching methods into your own classes) that isn't much more effort.In old-style classes you could use mix-ins as a way of grabbing a few methods from another class. But in the new-style world everything, even the mix-in, inherits from object. That means that any use of multiple inheritance naturally introduces MRO issues.There are ways to make multiple-inheritance MRO work in Python, most notably the super() function, but it means you have to do your whole class hierarchy using super(), and it's considerably more difficult to understand the flow of control.
I think there have been some good explanations here but I wanted to provide another perspective.In Scala, you can do mixins as has been described here but what is very interesting is that the mixins are actually 'fused' together to create a new kind of class to inherit from. In essence, you do not inherit from multiple classes/mixins, but rather, generate a new kind of class with all the properties of the mixin to inherit from. This makes sense since Scala is based on the JVM where multiple-inheritance is not currently supported (as of Java 8). This mixin class type, by the way, is a special type called a Trait in Scala.It's hinted at in the way a class is defined:    class NewClass extends FirstMixin with SecondMixin with ThirdMixin    ...I'm not sure if the CPython interpreter does the same (mixin class-composition) but I wouldn't be surprised. Also, coming from a C++ background, I would not call an ABC or 'interface' equivalent to a mixin -- it's a similar concept but divergent in use and implementation.
Perhaps a couple of examples will help.If you're building a class and you want it to act like a dictionary, you can define all the various __ __ methods necessary.  But that's a bit of a pain.  As an alternative, you can just define a few, and inherit (in addition to any other inheritance) from UserDict.DictMixin (moved to collections.DictMixin in py3k).  This will have the effect of automatically defining all the rest of the dictionary api.A second example: the GUI toolkit wxPython allows you to make list controls with multiple columns (like, say, the file display in Windows Explorer).  By default, these lists are fairly basic.  You can add additional functionality, such as the ability to sort the list by a particular column by clicking on the column header, by inheriting from ListCtrl and adding appropriate mixins.
Maybe an example from ruby can help:You can include the mixin Comparable and define one function "<=>(other)", the mixin provides all those functions:It does this by invoking <=>(other) and giving back the right result."instance <=> other" returns 0 if both objects are equal, less than 0 if instance is bigger than other and more than 0 if other is bigger.
It's not a Python example but in the D programing language the term mixin is used to refer to a construct used much the same way; adding a pile of stuff to a class. In D (which by the way doesn't do MI) this is done by inserting a template (think syntactically aware and safe macros and you will be close) into a scope. This allows for a single line of code in a class, struct, function, module or whatever to expand to any number of declarations.
mixin gives a way to add functionality in a class, i.e you can interact with methods defined in a module by including the module inside the desired class. Though ruby doesn't supports multiple inheritance but provides mixin as an alternative to achieve that.here is an example that explains how multiple inheritance is achieved using mixin.
I just used a python mixin to implement unit testing for python milters.  Normally, a milter talks to an MTA, making unit testing difficult.  The test mixin overrides methods that talk to the MTA, and create a simulated environment driven by test cases instead.So, you take an unmodified milter application, like spfmilter, and mixin TestBase, like this:Then, use TestMilter in the test cases for the milter application:http://pymilter.cvs.sourceforge.net/viewvc/pymilter/pymilter/Milter/test.py?revision=1.6&view=markup
I read that you have a c# background. So a good starting point might be a mixin implementation for .NET.You might want to check out the codeplex project at http://remix.codeplex.com/Watch the lang.net Symposium link to get an overview. There is still more to come on documentation on codeplex page.regardsStefan 
OP mentioned that he/she never heard of mixin in C++, perhaps that is because they are called Curiously Recurring Template Pattern (CRTP) in C++. Also, @Ciro Santilli mentioned that mixin is implemented via abstract base class in C++. While abstract base class can be used to implement mixin, it is an overkill as the functionality of virtual function at run-time can be achieved using template at compile time without the overhead of virtual table lookup at run-time. The CRTP pattern is described in detail hereI have converted the python example in @Ciro Santilli's answer into C++ using template class below:EDIT: Added protected constructor in ComparableMixin so that it can only be inherited and not instantiated. Updated the example to show how protected constructor will cause compilation error when an object of ComparableMixin is created.


Answer URL
https://docs.python.org/3/library/socketserver.html?highlight=mixin#socketserver.ThreadingMixIn
