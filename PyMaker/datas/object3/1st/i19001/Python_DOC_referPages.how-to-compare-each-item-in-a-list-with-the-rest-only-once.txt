Natural Text
Say I have an array/list of things I want to compare. In languages I am more familiar with, I would do something likeThis ensures we only compare each pair once. For some context, I am doing collision detection on a bunch of objects contained in the list. For each collision detected, a small 'collision' object describing the collision is appended to a list, which another routine then loops through resolving each collision (depending on the nature of the two colliding objects). Obviously, I only want to report each collision once.Now, what is the pythonic way of doing this, since Python favors using iterators rather than looping over indices?I had the following (buggy) code:But this clearly picks up each collision twice, which lead to some strange behavior when trying to resolve them. So what is the pythonic solution here?
Of course this will generate each pair twice as each for loop will go through every item of the list.You could use some itertools magic here to generate all possible combinations:itertools.combinations will pair each element with each other element in the iterable, but only once.You could still write this using index-based item access, equivalent to what you are used to, using nested for loops:Of course this may not look as nice and pythonic but sometimes this is still the easiest and most comprehensible solution, so you should not shy away from solving problems like that.
Use itertools.combinations(mylist, 2)
I think using enumerate on the outer loop and using the index to slice the list on the inner loop is pretty Pythonic:
This code will count frequency and remove duplicate elements:


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
