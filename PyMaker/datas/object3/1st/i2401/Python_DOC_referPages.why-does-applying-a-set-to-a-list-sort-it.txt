Natural Text
This question already has an answer here:Are the integer keys in a Python dictionary sorted and sorted with priority?                    2 answers                Running this code multiple times could print something like: (If you are using the console to replicate it, make sure you click Rerun every time before you re-paste the code and execute it. If you still can't replicate, perhaps you have hash randomization not equal to random. On Python 3.3 and greater, hash randomization is turned on by default.)On the other hand, the code below always prints the same set, and it's actually sorted:Question:Why do sets of numbers appear to be always sorted and are they really always sorted? 
Note, I don't have python3.4 handy, but on python2.7 this isn't always the case (and I'd expect that to be true of python3.4 too).I can even change the order of the elements based on how I put them into the set:The order is determined by the hash of the element and by when it was inserted (in the case of hash collisions).  In CPython, integers hash to themselves and a dict/set has 8 slots free to start with.  Since there are 8 spots available, we can hash numbers 0 -> 7 (inclusive) without a hash collision.  However, if we try to hash 8 and 0 (or 9 and 1) in the same set, we'll get a collision.  if 9 is already in the set and then we try to put 1 in, python looks and says "Oh snap, that slot's taken -- Now I need to put it in the next most favorable slot".  The details of collision resolution are beyond what I've looked into, so I can't offer insight into what slot that is ...Note if we had more than ~5 elements in the set, then it would be resized (IIRC, to 16, then 32, then 64, ...) which changes which elements would collide (naturally).


Answer URL
https://docs.python.org/3/using/cmdline.html#cmdoption-R
