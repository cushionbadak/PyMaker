Natural Text
Is there the possibility in Python 3 to distiguish the item lookups Foo[(1,2)] and Foo[1,2]? Since inboth produce the same output.Edit: On why I want that: I have a set of Classes that are "parameterized" and I wanted to implent a factory for those classes. e.g. __call__(*arg) to instanciate the class with the parameters inferred from *arg and __getitem__ to return the class that with the parameters passed via the key.I hoped that __getitem__ might be used similar to __call__ in the way that you can distinguish foo[(1,2)] from foo[1,2] similar to the way you can distinguish foo((1,2)) from foo(1,2) .
Not easily. Although the source is tokenized differently, the code is eventually parsed the same way:There are two ways I can think of to detect the difference, both insane:Get in before the parser does, by registering a custom codec to use in the coding declaration.Use introspection to find the original source code, and check in there for the parens.A related question concerning the grammar: When are parentheses required around a tuple?


Answer URL
https://docs.python.org/3/library/tokenize.html
https://docs.python.org/3/library/codecs.html
https://docs.python.org/3/library/inspect.html
https://docs.python.org/3/reference/grammar.html
