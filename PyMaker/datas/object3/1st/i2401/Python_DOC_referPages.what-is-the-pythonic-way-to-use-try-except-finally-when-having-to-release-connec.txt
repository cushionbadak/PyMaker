Natural Text
I have a function that connects to a database and fetches some data and returns this data. This entire process is surrounded by a try except finally block. In the finally block, I release the resources if they exist even in case of an error. So what is the pythonic way to do the following:The initialization of db_conn = None and the finally block don't look elegant or pythonic enough and I was wondering if there was a better way of doing this?
You want to use a context manager. Context managers and the with statement were added to the language specifically to handle this pattern.The code would become:See With Statement Context Managers. The implementation of DBConnection would need to supply __enter__ and __exit__ methods to handle this:I used return self in the __enter__ handler because that's a good pattern to use for context managers that fits your specific example well, but you could also return something else. Some database adapters return a transaction object or cursor at that point, for example.Note that exceptions raised in __enter__ are not part of the context and are not handled there! If you need to handle exceptions in opening the database that you don't want to propagate, you'd have to postpone connecting until the first get_data() call.Context managers encapsulate the try: ... except ...: finally: ... pattern. Also see the PEP 343 -- The *with* statement proposal that added this to Python:This PEP adds a new statement "with" to the Python language to make it possible to factor out standard uses of try/finally statements.Note that it is up to your use cases as to where you handle exceptions. For some context managers that's the __exit__ method, for others it is only useful to just clean up the context and not suppress exceptions. For example, files are context managers but they would not clear an exception. At that point you'd add a try: .. except SpecificException: to handle such cases:orThe point of the context manager there is to ensure that the file object is closed if it had been opened, and nothing else.


Answer URL
https://docs.python.org/3/reference/datamodel.html#with-statement-context-managers
