Natural Text
Is there a way to transform cycle from itertools into list? Applying list(my_cycle) freezes my computer.I would like to periodically switch between a collection of objects infinitely. They are stored in a cycle. If one of my objects become 'inactive' I would like to delete it from cycle. I solved it with another list with inactive objects but it looks like bad workaround.
If your set of all object (active and inactive) never changes, and especially if transitions between active and inactive state are common, the total number of objects isn't outrageous or the set of inactive objects doesn't usually cover most of the total set, cycle would still work fairly well here, by keeping a set of inactive objects around and filtering out currently inactive objects "live":Advantages to this design are that:It makes it cheap to activate and deactivate objectsIt preserves original iteration order indefinitely (if an object was originally in position 4, when it goes inactive it is skipped, and when it goes active again, it reappears after position 3 and before position 5 the next time you cycle through)The main downside is that it adds a tiny bit more overhead to the "nothing is changing" case, especially if the set of inactiveobjects grows to an appreciable fraction of the total number of objects; you still have to cycle all objects even if filter out many of them.If that doesn't suit your use case, a custom version of cycle built on a deque as suggested by wim is probably the best general purpose solution:Use would be:
No, you can not, because a cycle is an infinite sequence.  Your computer "freezes" because Python is trying to iterate a never-ending collection of items (if you left it long enough, the process would run out of memory and crash).What you can do, is collect a predetermined finite amount of the items into a list:There is no general way to know how many items to consume to get one pass through a cycle, because the cycle object does not expose any state about the period of the underlying iteration, i.e. how many items were iterated before repeating. There is no public way to modify the items returned from a cycle once the first StopIteration from the original iterator has been encountered, they are all buffered to private memory somewhere:For cycling a mutable sequence, as an alternative design choice you could consider using a collections.deque instance as your data structure (the rotate method is efficient).


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
