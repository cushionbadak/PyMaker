Natural Text
Using print in a loop slows down the loop. Printing something (I tried with Hello!) 100 times take ~2 sec, without it, it takes 0.0 second. I accurately captured the time using module time. Here is a loop that prints in it and shows the time taken at the end:Output:  Here is another loop that just adds string to a variable and its taking 0.0 seconds.Output:  I tried adding more operations but it it still taking 0.0 seconds. Example:Why does print slow down the loop and how can I overcome this problem?
print() will slow down your loop. That is because you are making a system call and an IO operation each time you call print(). System calls consume a lot of CPU cycles and involves CPU context switch. IO operations will block the main thread of your process for sometime.So the obvious solution is to either eliminate or reduce the number of print() calls.If you really need a mechanism to know the current iteration count of loop, then you can use multi-threading to achieve this. But still, it may involve system calls and thread context switching. But I suppose it will be still faster than print().The trick is to perform the loop in a background thread while you print the progress in main thread. This way the IO operation in calling print() wont block the thread that runs the loop. To optimize it even further, you can print the progress only when user press a key.This solution improves the situation by two waysIO operation is not performed on the worker thread. Yes using locks involves system call. But it is still faster than an IO block.Assuming that the python interpreter uses futex to implement locks, then the cost of aquiring and releasing the lock is very slow, since when compared to worker thread the main thread would rarely hold the lock.


Answer URL
https://docs.python.org/3/library/timeit.html
