Natural Text
According to https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.upload_file and https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.upload_fileobj, upload_fileobj may sound faster. But does anyone know specifics? Should I just upload the file, or should I open the file in binary mode to use upload_fileobj? In other words,Is version 1 or version 2 better? Is there a difference?
The main point with upload_fileobj is that file object doesn't have to be stored on local disk in the first place, but may be represented as file object in RAM.Python have standard library module for that purpose.The code will look likeIn that case it will perform faster, since you don't have to read from local disk.
TL;DRin terms of speed, both methods will perform roughly the same, both written in python and the bottleneck will be either disk-io (read file from disk) or network-io (write to s3).use upload_file() when writing code that only handles uploading files from disk.use upload_fileobj() when you writing generic code to handle s3 upload that may be reused in future for not only file from disk usecase.What is fileobj anyway?there is convention in multiple places including the python standard library, that when one is using the term fileobj she means file-like object. There are even some libraries exposing functions that can take file path (str) or fileobj (file-like object) as the same parameter.when using file object your code is not limited to disk only, for example:for example you can copy data from one s3 object into another in streaming fashion (without using disk space or slowing down the process for doing read/write io to disk).you can (de)compress or decrypt data on the fly when writing objects to S3example using python gzip module with file-like object in generic way:tarfile on the other hand has two parameters file & fileobj:Example compression on-the-fly with s3.upload_fileobj()
Neither is better, because they're not comparable. While the end result is the same (an object is uploaded to S3), they source that object quite differently. One expects you to supply the path on disk of the file to upload while the other expects you to provide a file-like object.If you have a file  on disk and want to upload it, then use upload_file. If you have a file-like object (which could ultimately be many things including an open file, a stream, a socket, a buffer, a string) then use upload_fileobj.A 'file-like object' in this context is anything that implements the read method, and returns bytes.


Answer URL
https://docs.python.org/3/library/io.html
https://docs.python.org/3/glossary.html#term-file-object
https://docs.python.org/3/library/gzip.html#gzip.open
https://docs.python.org/3/library/tarfile.html#tarfile.open
