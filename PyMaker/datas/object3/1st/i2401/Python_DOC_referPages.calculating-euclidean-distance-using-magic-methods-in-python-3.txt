Natural Text
I have a code that calculates Euclidean distance for me:However, now I want to calculate this distance using magic methods in python like __sub__ and __pow__. I've managed to implement __sub__ but I don't know how to implement for __pow__ and square root. This is my code so far:How can I implement the rest of the formula using magic methods. I'm really confused. Help would me appreciated.
As has been mentioned, it may not be a good idea to use a Point class to represent vectors. It's ok in simple programs, but it can get confusing in more complex code. The usual practice is to make points immutable. But anyway...To do this Euclidean distance operation we can "abuse" the new __matmul__ magic method. This method is invoked by the @ operator. Here's a short demo based on your code. Notice that I'm using x and y as the attributes, there's no good reason to mark them as private.output
It does not make sense for the difference of two points to be a point. It seems the object you are trying to implement is in fact a vector.Then the distance corresponds to the norm of a vector, implemented with __abs__.Example
Your second class works for me. I do not see any issues with it:And then:Call it vector or point or whatever, it seems to be doing what you want it to do.
Note that your definition of __pow__ is a bit nonstandard for vectors.But as it is, the distance of two points p1 and p2 could be written as sum((p1 - p2)**2)**.5. So we need your __pow__ method, your __sub__ method, and the only other addition is an __iter__ method which allows sum to work:That's the shortest way based on your existing code anyway. You could experiment further by adding a scalar multiplication method and an addition method and then defining sub as p1 + (-1)*p2. You can also make things a bit easier on yourself by implementing a __repr__ method.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__matmul__
