Natural Text
I am building a RESTful API that runs in a docker container and uses Python 3 Flask and is backed by MongoDB through the PyMongo library. I want to add unit tests to the API that I can run when I make a git commit (in a CI/CD pipeline). The API mostly just allows creating, getting, listing, modifying and deleting of objects in the database. I want my tests to call these endpoints and check the responses make sense. What would the recommended pattern be for this?MockupDB seems like it would allow me to fake a MongoDB server inside my Python container, but programming all responses from MongoDB seems overly complicated.I could modify my data class to do e.g:But that would reduce my coverage.I could have a separate Dockerfile for testing which includes both a MongoDB server and Python. Then point my PyMongo connection at the local server in the test Dockerfile, and a server outside the container for the normal Dockerfile. Which would mean I'm not testing inside the same environment anymore.Maybe I can use the Python unittest.mock module?Or these tests are better suited for running once the container is deployed?I am think the Flask test docs get me so far, but don't describe how to deal with database connections.
docker-compose would allow you to accomplish both.You could have a flask container to run your Flask app, and then a mongo container with a volume mounted to it as your data directory, and thus have a dev volume mount for your unit tests, and the actual production volume mount elsewhere in your CI/CD pipeline.compose also makes it easier for containers to talk with one another. So for example:Then they are on the same network, and Flask can just call mongodb:27017 instead of an ip address


Answer URL
https://docs.python.org/3/library/unittest.mock.html
