Natural Text
I know that the following string definitions represent (python internal) the same (basic knowledge):Therefore if you make it e.g. interactive in PythonWin:Clear for me (understand)But what me confuse is that at the python built in function open all this (partly crazy) path-codings work (interactive tested in PythonWin):My questions:Where is this behaviour documented?Have anybody background-informations?Tests was made at Windows 7 OS and with PythonWin 2.7.13
For details, check section 2.4.1 in the docsLet's take a look at the different strings and why they are working:The \ is the escape character in a string, which is used for special characters like a newline (\n). In this case you are lucky that none of the combinations \u \x \P indicate a special character like that, hence it works, as opposed to open("foo\newfile.txt")Save method, the \\ constructs escapes the \, hence you would also be able to do open("foo\\newline")Also save, since the prefix rindicates a raw string, the \ are taken literally and not as escape sequencesHere you have a raw string (preceeded with r) but still use double \, hence you have \\ in the path. This works because windows understand paths with double \ which you can also confirm in the cmd
This string behaviour is documented under (Python v3.7 docs) 2.4.1. String and Bytes literals and the behaviour of open() is documented under 2. Built-in Functions.Specifically, for the file/path in open() is as clarified under 16.1.2. Process Parameters, in the entry class os.PathLike. Admittedly this is a lot of reading to really understand this parameter.In summation: a r"string" is a raw string. You don't need to escape slashes like \\ to result in a single slash \ when using raw slashes.In the second block, just to be clear, you were looking at the variables themselves and looking at them via their string representation (when using print) (which I think you mention you understand fine, but I just wanted to repeat it back to you to be sure).Going forward, python versions will all be using a PathLike object when handling files and folders. I'm guessing you're still on Python 2.x as you didn't get an error when running print s1 - should be print(s1) in Python 3.x. I recommend moving to Python 3 soon, it really is much better.I hope that answers your questions successfully?


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html
