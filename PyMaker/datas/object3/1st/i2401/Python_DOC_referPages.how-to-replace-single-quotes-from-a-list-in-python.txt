Natural Text
I have a list:This list has single and double quotes and the item value. How can I replace either the single or double quotes from each item. I tried below, but the results are same:
Your list doesn't contain any strings with single quotes. I think you are confusing the repr() representation of the strings with their values.When you print a Python standard library container such as a list (or a tuple, set, dictionary, etc.) then the contents of such a container are shown their repr() representation output; this is great when debugging because it makes it clear what type of objects you have. For strings, the representation uses valid Python string literal syntax; you can copy the output and paste it into another Python script or the interactive interpreter and you'll get the exact same value.For example, s here is a string that contains some text, some quote characters, and a newline character. When I print the string, the newline character causes an extra blank line to be printed, but when I use repr(), you get the string value in Python syntax form, where the single quotes are part of the syntax, not the value. Note that the newline character also is shown with the \n syntax, exactly the same as when I created the s string in the first place:And when I echoed the s value at the end, the interactive interpreter also shows me the value using the repr() output.So in your list, your strings do not have the ' characters as part of the value. They are part of the string syntax. You only need to replace the " characters, they are part of the value, because they are inside the outermost '...' string literal syntax. You could use str.replace('"', '') to remove them:or, you could use the str.strip() method to only remove quotes that are at the start or end of the value:Both work just fine for your sample list:Again, the ' characters are not part of the value:However, I have seen that you are reading your data from a tab-separated file that you hand-parse. You can avoid having to deal with the " quotes altogether if you instead used the csv.reader() object, configured to handle tabs as the delimiter. That class automatically will handle quoted columns:Demo showing how csv.reader() handles quotes:
As suggested by @MartijnPieters in comments, you can use replace on the strings to get the desired output.The change I like to suggest is that using .replace('"', '') instead of .replace('"', ' '). Otherwise the resultant strings will have a leading and trailing white spaceYou can use list comprehension to deal with the list you have like this
You can use split:or you can use:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.strip
https://docs.python.org/3/library/csv.html#csv.reader
