Natural Text
This question already has an answer here:Parsing boolean values with argparse                    13 answers                I am trying to get the following behaviour:python test.py  => store foo=Falsepython test.py --foo => store foo=Truepython test.py --foo bool => store foo=boolIt works when I useHowever it breaks if I add type=bool, trying to enforce casting to boolean. In this case Actually ends up storing foo=True. What's going on??
Are you sure you need that pattern? --foo and --foo <value>, together, for a boolean switch, is not a common pattern to use.As for your issue, remember that the command line value is a string and, type=bool means that you want bool(entered-string-value) to be applied. For --foo False that means bool("False"), producing True; all non-empty strings are true! See Why is argparse not parsing my boolean flag correctly? as well.Instead of supporting --foo / --foo <string value>, I would strongly recommend you use --foo to mean True, drop the argument value, and instead add a --no-foo option to explicitly set False:The dest='foo' addition on the --no-foo switch ensures that the False value it stores (via store_false) ends up on the same args.foo attribute.You'd only need a --foo / --no-foo combination if you have some other configuration mechanism that would set foo to True and you needed to override this again with a command-line switch. --no-<option> is a widely adopted standard to invert a boolean command-line switch.If you don't have a specific need for a --no-foo inverted switch (since just omitting --foo would already mean 'false'), then just stick with the action='store_true' option. This keeps your command line simple and clear!However, if your use case or other constraints specifically require that your command line must have some king of --foo (true|false|0|1) support, then add your own converter:the const value is used for nargs='?' arguments where the argument value is omitted. Here that sets foo=True when --foo is used.default=False is used when the switch is not used at all.type=str_to_bool is used to handle the --foo <value> case.Demo:
You should use the action='store_true' parameter instead for Boolean arguments:So that the absence of the --foo option:would result in a False value for the foo argument, and the presence of the --foo option:would result in a True value for the foo argument.


Answer URL
https://docs.python.org/3/library/argparse.html#action
