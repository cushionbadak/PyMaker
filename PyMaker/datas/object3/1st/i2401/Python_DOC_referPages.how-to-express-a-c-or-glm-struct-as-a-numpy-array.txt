Natural Text
I want to express the below struct into as numpy array.  Thereafter, the numpy array is meant to be read in as a GLSL layout:In the above statements, mat4 denotes a 4x4 matrix.Below, I created a python list which I then converts to a numpy array (w/o copying) with a 4x4 shape where each element is a dtype=float32. Question: What should I do next to represent the UniformBufferObject struct as a numpy array? 
If in GLSL a Uniform block is specified like thisthen OpenGL does not guarantee, that the members in th block are stored in consecutive order. OpenGL gives no guarantees about the memory layout, alignment or order of the elements.To achieve a well defined order and memory layout the memory layout qualifier std140 ahs to be used. The std140 layout is provided since OpenGL 3.1 respectively OpenGL ES 3.0 or the OpenGL extension ARB_uniform_buffer_object: A detailed specification about the layout can be found at:OpenGL 4.6 API Core Profile Specification; 7.6.2.2 Standard Uniform Block Layout; page 144 OpenGL 4.6 API Compatibility Profile Specification; 7.6.2.2 Standard Uniform Block Layout; page 145OpenGL ES 3.2 Specification; 7.6.2.2 Standard Uniform Block Layout; page 113In case of the above uniform block with std140 layout the 3 matrices are tightly packed. The memory layout are 48 (3*4*4) floats in a row and has a size of 192 bytesTo create a buffer which corresponds to this memory layout, a flat numpy.array can be used:e.g.It is not necessary to reshap() the array. But of course you can do so, if you want to access the elements of the model matrix (ubo_data[0]), the view matrix (ubo_data[1]) and the projection matrix (ubo_data[2]) directly:Note, it is even not necessary to use NumPy. A buffer with the same memory layout can be generated by a ctypes array:Using PyOpenGL, each of the above data arrays can be used to crate and initialize the buffer store of a uniform block buffer by glBufferData or update the data store of an existing buffer by glBufferSubData:Note, when using PyGLM, then the data of a uniform buffer like this can be updated directly: e.g.:


Answer URL
https://docs.python.org/3/library/ctypes.html
