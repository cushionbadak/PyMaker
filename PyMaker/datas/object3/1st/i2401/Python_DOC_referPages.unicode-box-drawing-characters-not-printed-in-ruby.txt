Natural Text
I work on a game in Ruby. It uses ncurses to draw window contents and refresh the screen. This all works fine on macOS, where I develop the stuff. But on Linux, I cannot get anything besides plain ASCII to print when interfacing with ncurses either from Ruby or plain C.For example, I get this output:Instead of what I put into the source:File encoding is UTF-8, env or locale output reports LANG and LC_* variables to be en_US or en_US.UTF-8 where appropriate. The terminal can print these characters just fine, so it's not the font or terminal emulator setting.Python 3 works fine, too. Ruby and C don't.(Tested on a fresh Linux Mint 19 setup with libncurses5-dev installed.)So, Am I missing some setting or is the Python binding somewhat special and I'm out of luck?What it looks likeIt should look like this (macOS):But does look like this instead:Python CodeThis code works just fine:The docs for the curses module state that you have to do this since ncurses 5: https://docs.python.org/3/library/curses.htmlSince version 5.4, the ncurses library decides how to interpret non-ASCII data using the nl_langinfo function. That means that you have to call locale.setlocale() in the application and encode Unicode strings using one of the systemâ€™s available encodings.Ruby CodeTried with the ffi-ncurses gem instead of curses but to no avail. The output is the same.C CodeI compile withHere's the code:EditGot it working by linking to ncursesw (note the trailing W!), but it displays the special characters at double the width of text on Linux, using Ubuntu Mono, the same font I tried on OSX with iTerm.
Actually this should be several questions, but the most recent one asks how the characters could be shown as double-width.The screenshot does not match the given example program.  That only draws a few sample characters, while the screenshot shows boxes.However, the particular line-drawing characters can be the problem, versus the locale tables (and depending on the actual program used).   That's because those codes are ambiguous width (see U+2550).  The standard leaves it up to the implementer whether to treat them as single-width or double-width.  Not everyone agrees on the actual width.If this were a bug report, I'd get the actual program source to test with, but suspect the problem lies in Ruby.


Answer URL
https://docs.python.org/3/library/curses.html
