Natural Text
I am having 3 big lists L0, L1 and L2 with 106756, 106588 and 100 words respectively.L0 and L1 consisting the data tokenize into token of words, and L2 consisting of the words that are common to both L0 and L1 lists.Suppose that,As you can see in L1 list there is repetition of the words like 'newness', 'uk'. What I need is that, for every discovered (found) word in L2, like (say 'newness', 'uk'), I need to replace it with its modified injected form like appending a special character either at the start or end position of that discovered word. Further, for all instances of the discovered word (in L2), should be replaced with the modified version of the same word in L1. For Example,Suppose, the word newness occurred 100 times in L1 list (say) and newness is a word also present in L2. Similarly, there are also 100 words in L2 and that are also present in L1, with multiple frequencies. Then, after transformation the list should look somewhat like this:...How to achieve this in a list? Help please. I am also a new-bie to python. I am just curious to know whether there exist some command in python for achieving this? I don't know where to start?
To count things in list, python provides a dict-like Counter() class in its collections module: Doku which counts occurences in O(n) and provides them as dictionary.Output:It provides a convenience method to get the result sorted as list of tuples (key, count) named most_common() - if you use the first one, you get the most used word which you can use together with a list comprehension to modify your source list: Output:The order of items in Counter relates to the order in the original list, you got multiple items wiht a count of 2 in L1 - elsevier is the first of them, hence it is also the first when using most_common() Edit 4 comment:Output:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#collections.Counter.most_common
