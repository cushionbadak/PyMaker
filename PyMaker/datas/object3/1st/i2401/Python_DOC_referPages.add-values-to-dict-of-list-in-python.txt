Natural Text
I have this kind of dictionary of lists, initially empty:Now the use case is to simply add a value to list under a key, which might be a new or an existing key. I think we have to do it like this:This seems awfully tedious and error-prone, needing to write multiple lines (with copy-paste or helper function). Is there a more convenient way?If there isn't "only one way to do it", and you know it, you can also answer that, and maybe suggest alternative ways to accomplish above, even if they aren't necessarily better.I looked for duplicate, didn't find, but perhaps I just didn't know to use right keywords.
What you want is called a defaultdict, as available in the collections library:Python2.7: https://docs.python.org/2/library/collections.html#defaultdict-examplesPython3.7: https://docs.python.org/3/library/collections.html#collections.defaultdict
d[key] = d.get(key, []) + [value] to explaind.get method returns value under the key key and if there is no such key, returns optional argument (second), in this case [] (empty list)then you will get the list (empty or not) and than you add list [value] to it. this can be also done by .append(value) instead of + [value]having that list, you set it as the new value to that keye.g.
Uses the ternary operators. And looks somewhat cleaner, however it is still almost identical to your scenario.I apologize, I wasn't thinking earlier and used standard ternary operators. I changed them to Python ternary operators.


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
