Natural Text
I was writing a class with the set of methods that work as expected for both numpy arrays and scipy.sparse matrices. I then realized that all my methods starts with an if-statement to check if the underlying matrix is dense or sparse e.g.It seems somewhat silly (and not pythonic) to have such if-else statements everywhere. I have so far found two possible ways around this: 1. create an abstract class with pre-specified set of methods and make subclasses (https://pythonspot.com/polymorphism/, https://docs.python.org/3/library/abc.html), or 2. create a set of functions with multiple dispatch (https://github.com/mrocklin/multipledispatch).Which of the two approach (or any other) would be better and why?
This is more of a long comment than an answer.subclassing numpy.ndarray is not a trivial undertaking. scipy.sparse formats are already implemented as classes - several different ones; none are subclasses of ndarray. the behavior of sparse matrices is modeled on numpy.matrix subclass - always 2d, * is matrix multiplication.  numpy functions work on sparse matrices ok, IF, they delegate the action of a method.  In other words, if there are identically named sparse and dense methods, you can often get by with that method or a function that uses it.  This the Python duck-typing.scikit-learn has a lot of code that accepts both sparse and dense.  It may be worth looking at how it handles that.  I know they have added some utility code, including some faster cython stuff to speed up selected sparse actions.sparse.linalg has a concept of linear operator, which just requires that the object have a particular matrix*vector` multiplication.  when you do things with sparse matrices, make sure you understand what is produced.  Sometimes the sparse format changes.  Sometimes the result is a np.matrix, or np.ndarray.Without more details of your functions, it will be hard to suggest a more systematic approach.


Answer URL
https://docs.python.org/3/library/abc.html
