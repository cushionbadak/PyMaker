Natural Text
I have a list of approx. 10000 items. The current situation is that every item has an associated weight (priority or importance). Now the smallest weight is -100 (negative and zero values can be removed) and the highest weight is 1500. Weight is determined by intuition by people (how somebody thinks the item is important to community). Because it's not easy to determine the most important item, I'd like to use some random factor, so that items with lower weight will have less chance to be chosen and their weight will be adjusted in the future (some mix of common sense and randomness).Do you know how to code a function getItem?Thank you
Have a look at this, i think it's what you need with some nice comparision between different methods Weighted random generation in PythonThe simplest approach suggested is:You can find more details and possible improvements as well as some different approaches in the link above.
Python 3.6 introduced random.choices()
You should extract a random number between 0 and the sum of weights (positive by definition). Then you get the item from a list by using bisect: http://docs.python.org/library/bisect.html (the bisect standard moduke).  
It's easier to do if the weights are not negative. If you have to have negative weights, you'll have to offset the weights by the lowest possible weight. In your case, offsetted_weight = itemweight + 100In pseudocode, it goes like this:
If you're storing your data in a database, you can use SQL:


Answer URL
https://docs.python.org/3/library/random.html#random.choices
