Natural Text
I understand the value of exponents, but typically when displaying decimal values to an end user, it's easier for the layman to understand normal decimal values. When I perform the following, I'd rather the display value of the decimal be 50, instead of:Is this possible without quantizing or doing anything to modify the actual value? Also, why does it display a short value like this as an exponent and some longer values in their normal decimal form? Is this a product of division (irony intended)?
See: Significant figures in the decimal module (which admittedly tells you to use .quantize()).  The main problem is that you must keep track of the number of significant digits manually.
You're seeing the default representation, which you can change by subclassing Decimal and overriding __str__ and/or __repr__.Note that __repr__ is just implemented like return "Decimal('%s')" % str(self), but you should try and preserve the invariant that eval(repr(d)) == d.  Probably what you're more interested in is not modifying the default str output or the representation of the class, but just controlling the display format of an instance. In this case, you should just be able to use the str.format features, e.g.
Directly parse the Decimal to int or float you want.or22679.6185 / 28.349523125 is exactly equals 800. and it shows Decimal("8E2") without anything wrong.the precision depends on the context  object. check it by using "decimal.getcontext()".It looks like following:the "prec" is what you want. Try this.It results in 28 significant figures.


Answer URL
https://docs.python.org/3/library/string.html#formatspec
