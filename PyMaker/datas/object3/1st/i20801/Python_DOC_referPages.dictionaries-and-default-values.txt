Natural Text
Assuming connectionDetails is a Python dictionary, what's the best, most elegant, most "pythonic" way of refactoring code like this?
Like this:
You can also use the defaultdict like so:You can pass any ordinary function instead of lambda:
While .get() is a nice idiom, it's slower than if/else (and slower than try/except if presence of the key in the dictionary can be expected most of the time):
For multiple different defaults try this:
There is a method in python dictionaries to do this: dict.setdefaultHowever this method sets the value of connectionDetails['host'] to someDefaultValue if key host is not already defined, unlike what the question asked.
(this is a late answer)An alternative is to subclass the dict class and implement the __missing__() method, like this:Examples:
Testing @Tim Pietzcker's suspicion about the situation in PyPy (5.2.0-alpha0) for Python 3.3.5, I find that indeed both .get() and the if/else way perform similar. Actually it seems that in the if/else case there is even only a single lookup if the condition and the assignment involve the same key (compare with the last case where there is two lookups).
You can use a lamba function for this as a one-liner. Make a new object     connectionDetails2 which is accessed like a function...Now use instead of which returns the dictionary value if k is in the keys, otherwise it returns "DEFAULT"


Answer URL
https://docs.python.org/3/reference/datamodel.html?highlight=__missing__#object.__missing__
