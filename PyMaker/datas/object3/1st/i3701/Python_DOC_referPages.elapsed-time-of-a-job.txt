Natural Text
I've put some code together to do my work. It works fine but it needs to work every 4 or 5 secs. So taking account into 4-5secs rule I have added the below code into my existing code.With this added code I am defining a variable called start at the beginning and deduct this variable from the current time at the end with time.process_time() - start. This way I aim to calculate how many secs have passed since the beginning. As a result of this code here:I see a 1.1 secs average time on my terminal window.So after 2 secs of sleep time this code runs again that takes 1.1 avg. to complete and appends the new result and current time to the out.txt file.My question is:I expect the time at the end of the line in out.txt 3.1 secs greater than the previous one (2 secs sleep time plus 1.1 run time) but it gives me 10 secs difference between lines which I can't understand.Why do I get 10 secs difference between the two results, and how can I reduce this to 3.1 secs?
I'm not sure exactly what you're trying to accomplish here, but I'm pretty sure process_time is not the function you want to use for it. That function returns:â€¦ the value (in fractional seconds) of the sum of the system and user CPU time of the current process. It does not include time elapsed during sleep.So, if you do 1.1 seconds of work and sleep for 2 seconds, you'll get back about 1.1, not 3.1, just like you're seeing.1 If you want walk clock time, not processor time, don't use this function.What should you use? It depends on what you're trying to do. If you want to benchmark code, use timeit. For profiling, use profile. For general-purpose wall-clock time processing, you usually want datetime. If you want an in-process job scheduler, there are a zillion choices on PyPI with different strengths and weaknesses. The time module has most of the low-level stuff you'd need to build those other modules, and functions that mimic C APIs if you're familiar with dealing with struct tm and the like, but otherwise it usually shouldn't be the first place you look. But if you do want to use time here, I suspect it would be time or monotonic you want here, not process_time.1. I don't know why you got the 10 seconds. But in your posted code, you're not actually repeating the slow work each time through the while True: loop, you're just writing a line to a file and sleeping 2 seconds again. So I assume your real code is significantly different, and whatever we're looking for is part of those differences.


Answer URL
https://docs.python.org/3/library/time.html#time.process_time
https://docs.python.org/3/library/timeit.html
https://docs.python.org/3/library/profile.html
https://docs.python.org/3/library/datetime.html
https://docs.python.org/3/library/time.html
