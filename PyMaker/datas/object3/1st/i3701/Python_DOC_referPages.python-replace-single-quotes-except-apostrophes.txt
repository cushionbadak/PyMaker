Natural Text
I am performing the following operations on lists of words. I read lines in from a Project Gutenberg text file, split each line on spaces, perform general punctuation substitution, and then print each word and punctuation tag on its own line for further processing later. I am unsure how to replace every single quote with a tag  or  excepting all apostrophes. My current method is to use a compiled regex:and perform the following operation:but this  ignores cases where a single quote is used around a word with an apostrophe. It also does not indicate to me whether the single quote is abutting the start of a word of the end of a word.Example input:Example output (after processing and printing to file):I do have a further question in relation to this task: since the distinguishment of <opensingle> vs <closesingle> seems rather difficult, would it be wiser to perform substitutions like after performing the   replacement operation?
What you really need to properly replace starting and ending 'is regex.To match them you should use:^' for starting ' (opensingle),'$ for ending ' (closesingle).Unfortunately, replace method does not support regexes,so you should use re.sub instead.Below you have an example program, printing your desired output(in Python 3):
I suggest working smart here: use nltk's or another NLP toolkit instead.Tokenize words like this:You may not like the fact that contractions like don't are separated. Actually, this is expected behavior. See Issue 401. However, TweetTokenizer can help with that:If it gets more involved a RegexpTokenizer could be helpful:Then it should be much easier to annotate the tokenized words correctly.Further references:http://www.nltk.org/api/nltk.tokenize.htmlhttp://www.nltk.org/_modules/nltk/tokenize/regexp.html
I think this can benefit from lookahead or lookbehind references. The python reference is https://docs.python.org/3/library/re.html, and one generic regex site I often reference is https://www.regular-expressions.info/lookaround.html.Your data:And now I'll define a tuple with regular expressions and their replacements.Here's what's going on with the regexes:(?<=[A-Za-z]) is a lookbehind, meaning only match (but do not consume) if the preceding character is a letter.(?=[A-Za-z]) is a lookahead (still no consume) if the following character is a letter.(?<![A-Za-z]) is a negative lookbehind, meaning if there is a letter preceding it, then it will not match.(?![A-Za-z]) is a negative lookahead.Note that I added a . check within <closesingle>, and the order within apo matters, because you might be replacing . with <period> ...This was operating on single words, but should work with sentences as well.(The use of reduce is to facilitate applying a regex's .sub on the words/strings and then keep that output for the next regex's .sub, etc.)


Answer URL
https://docs.python.org/3/library/re.html
