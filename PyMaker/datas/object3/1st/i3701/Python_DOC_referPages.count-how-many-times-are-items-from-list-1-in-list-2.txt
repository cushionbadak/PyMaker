Natural Text
I have 2 lists:And I want dictionary output like this:I already made it:But it is very slow, I need to process like 10MB txt file.EDIT: Entire code, currently testing so unused imports..
@Makalone, above answers are appreciable. You can also try the below code sample which uses Python's Counter() from collections module. You can try it at http://rextester.com/OTYG56015.Python code »Output »
Since speed is currently an issue, it might be worth considering not passing through the list for each thing you want to count. The set() function allows you to only use the unique keys in your list words.An important thing to remember for speed in all cases is the line unique_words = set(b). Without this, an entire pass through your list is being done to create a set from b at every iteration in whichever kind of data structure you happen to use.Alternatively, defaultdicts can be used to eliminate some of the initialization.For completeness sake, I do like the Counter based solutions in the other answers (like from Reut Sharabani). The code is cleaner, and though I haven't benchmarked it I wouldn't be surprised if a built-in counting class is faster than home-rolled solutions with dictionaries.
Try using collections.Counter and move b to a set, not a list:Also, if you can read the words lazily and not create an intermediate list that should be faster.Counter provides the functionality you want (counting items), and filtering the result against a set uses hashing which should be a lot faster.
You can use collection.Counter on a generator that skips ignored keys using a set lookup.Note that count['c'] is not printed, but is still 0 by default in a Counter.
Here's an example I just coughed up in repl. Assuming you're not counting duplicates in list two. We create a hash table using a dictionary. For each item in the list were matching two, we create a key value pair with the item being the key and we set the value to 0.Next we iterate through the second list, for each value, we check if the value has been defined already, if it has been, than we increment the value using the key. Else, we ignore.Least amount of iterations possible. You hit each item in each list only once.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
