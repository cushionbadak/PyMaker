Natural Text
I am trying to encode logic to filter a Pandas dataframe. I'd like to encode the logic as a dictionary, with the subgroup name as the key, and the function to filter for the subgroup as the value:My BaseFilter.for_jets_fans and BaseFilter.for_patriots_fans are static methods that contain the logic to filter my dataframe for each group of fans.However, I'd like to create a function BaseFilter.for_team_fans that accepts a team string parameter to designate which team's fans to filter for.My current attempt is to encoding something like this My question: Is there a more elegant, less convoluted, more maintainable way of doing this? For context, I'm a data scientist, and this is part of a large model that I eventually need to hand off to my engineering team to maintain and upkeep. They've asked me to limit the amount of domain specific language (DSL) to help soften the learning curve and increase the code base maintainability. I feel like using has the potential to quickly evolve into a very complex and unmanageable DSL. The reason why I am encoding my filtering logic is because the types of metrics that we filter for, and how we filter for them- are likely to evolve frequently, so instead of hardcoding them into my code base, I separated the filter logic out into separate configurations.py files that are comprised of dictionaries (ie. analytics_table_mappings). Thus, I'd like to keep flexibility in my filter logic while still making it maintainable for my engineers. Add on:I also need to be capable of handling instances where multiple parameters must be passed. For instance:
You can consider functools.partialmethod, which allows you to specify any number of args or kwargs:
If BaseFilter.for_team_fans is the common base function for every entry in your analytics_table_mappings dict, then you can factor it out. Since that leaves only one property, the dict could be reduced to a simple key: args pairing, such asand then maybe incorporate the logic into a simple class:


Answer URL
https://docs.python.org/3/library/functools.html#functools.partialmethod
