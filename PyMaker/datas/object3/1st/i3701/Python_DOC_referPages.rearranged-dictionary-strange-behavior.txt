Natural Text
I have a dictionary that I declared in a particular order and want to keep it in that order all the time. The keys/values can't really be kept in order based on their value, I just want it in the order that I declared it.So if I have the dictionary:It isn't in that order if I view it or iterate through it, is there any way to make sure Python will keep the explicit order that I declared the keys/values in?
contains If the values are True (or any other immutable object), you can also use:
Rather than explaining the theoretical part, I'll give a simple example.
From Python 3.6 onwards, the standard dict type maintains insertion order by default.Definingwill result in a dictionary with the keys in the order listed in the source code.This was achieved by using a simple array with integers for the sparse hash table, where those integers index into another array that stores the key-value pairs (plus the calculated hash). That latter array just happens to store the items in insertion order, and the whole combination actually uses less memory than the implementation used in Python 3.5 and before. See the original idea post by Raymond Hettinger for details.In 3.6 this  was still considered an implementation detail; see the What's New in Python 3.6 documentation:The order-preserving aspect of this new implementation is considered an implementation detail and should not be relied upon (this may change in the future, but it is desired to have this new dict implementation in the language for a few releases before changing the language spec to mandate order-preserving semantics for all current and future Python implementations; this also helps preserve backwards-compatibility with older versions of the language where random iteration order is still in effect, e.g. Python 3.5).Python 3.7 elevates this implementation detail to a language specification, so  it is now mandatory that dict preserves order in all Python implementations compatible with that version or newer. See the pronouncement by the BDFL.You may still want to use the collections.OrderedDict() class in certain cases, as it offers some additional functionality on top of the standard dict type. Such as as being reversible (this extends to the view objects), and supporting reordering (via the move_to_end() method).
Note that this answer applies to python versions prior to python3.7.  CPython 3.6 maintains insertion order under most circumstances as an implementation detail.  Starting from Python3.7 onward, it has been declared that implementations MUST maintain insertion order to be compliant.python dictionaries are unordered.  If you want an ordered dictionary, try collections.OrderedDict.Note that OrderedDict was introduced into the standard library in python 2.7.  If you have an older version of python, you can find recipes for ordered dictionaries on ActiveState.
Dictionaries will use an order that makes searching efficient, and you cant change that,You could just use a list of objects (a 2 element tuple in a simple case, or even a class), and append items to the end. You can then use linear search to find items in it.Alternatively you could create or use a different data structure created with the intention of maintaining order.
I came across this post while trying to figure out how to get OrderedDict to work. PyDev for Eclipse couldn't find OrderedDict at all, so I ended up deciding to make a tuple of my dictionary's key values as I would like them to be ordered. When I needed to output my list, I just iterated through the tuple's values and plugged the iterated 'key' from the tuple into the dictionary to retrieve my values in the order I needed them.example:It's a tad cumbersome, but I'm pressed for time and it's the workaround I came up with.note: the list of lists approach that somebody else suggested does not really make sense to me, because lists are ordered and indexed (and are also a different structure than dictionaries).
You can't really do what you want with a dictionary. You already have the dictionary d = {'ac':33, 'gw':20, 'ap':102, 'za':321, 'bs':10}created. I found there was no way to keep in order once it is already created. What I did was make a json file instead with the object:I used:then used:to verify.
Generally, you can design a class that behaves like a dictionary, mainly be implementing the methods __contains__, __getitem__, __delitem__, __setitem__ and some more.  That class can have any behaviour you like, for example prividing a sorted iterator over the keys ...
I had a similar problem when developing a Django project. I couldn't use OrderedDict, because I was running an old version of python, so the simple solution was to use Django's SortedDict class:https://code.djangoproject.com/wiki/SortedDict
if you would like to have a dictionary  in a specific order, you can also create a list of lists, where the first item will be the key, and the second item will be the valueand will look like thisexample 
Another alternative is to use Pandas dataframe as it guarantees the order and the index locations of the items in a dict-like structure.
You can do the same thing which i did for dictionary.Create a list and empty dictionary:


Answer URL
https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-compactdict
https://docs.python.org/3/library/collections.html#collections.OrderedDict
https://docs.python.org/3/library/collections.abc.html#collections.abc.Reversible
https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
https://docs.python.org/3/library/collections.html#collections.OrderedDict.move_to_end
https://docs.python.org/3/library/stdtypes.html#dict
https://docs.python.org/3/tutorial/datastructures.html#dictionaries
https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-compactdict
