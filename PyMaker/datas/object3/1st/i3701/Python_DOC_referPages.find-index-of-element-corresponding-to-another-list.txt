Natural Text
I have a list of strings: ls = ['a','b','c'] and another one, with larger strings, guaranteed to include one and only one strings from ls: ls2 = ['1298a', 'eebbbd', 'qcqcq321']".How can I find, for a given string from ls2, what is the index of the corresponding string from ls?I can use:but it there something nicer?EDIT (hope it clarifies):The actual case I'm working on has a bigger 1st list, and a smaller 2nd:and I want to get the result 0,3 because the 1st item in ls2 has the 1st item from ls, while the 2nd in ls2 has the 4th in ls
It doesn't look like you can get away from O(m * n * p) complexity (where m = len(ls), n = len(ls2), p = max(map(len, ls2))) without further information about your data. You can definitely reduce your current loop from O(m2 * n * p) by keeping track of the current index using enumerate. Also, don't forget about early termination:Notice that I swapped the inner and outer loop to make the break work properly: you definitely want to check each element of ls2, but only the minimum number of elements in ls.Here are some timings I accumulated on the different O(m * n * p) solutions presented here. Thanks to @thierry-lathuille for the test data:As it turns out, creating a lookup table for the indices is slightly faster than computing them on the fly with enumerate.
Your codes time complexity is O(n^4), you can make it O(n^3) by using dict.  
Using a dict comprehension:
So, if I interpret the "nicer" request as "written in a more compact way", then I suggest all loops and conditions packed in a list comprehension:But it does not improve the complexity, if "nicer" was to be understood as "less complex"...
You could use these two improvements:Some timings:Breaking out of the loop once the match has been found always improves the speed.The overhead due to the creation of the dict of indices makes it slower for very small lists, but is already faster with lists shorter than the ones used in the timings:Timing results:


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
