Natural Text
Lets say I have a listAnd I want to print this list by calling a function. Here is my function to print the listAnd I am calling print_list() like belowSo above function call looks similar to one we used to do in C/C++.Now lets say I have a list called my_listAnd I want to convert my_list to tuple & I will be doing like belowNow Here this tuple(my_list) is called typecasting as I read from here http://www.pitt.edu/~naraehan/python2/data_types_conversion.htmlnow above typecasting looks completely different from C or C++ as in C we used to doMy first doubt is what is the rational theory or consideration about changing C looks like  (tuple)my_list to tuple(my_list) ? Answer may be Python is not C but I want to know more.My second question is how python interpreter will decides whether its a function call or type conversion function i.e both calling convention of my_print(x) and tuple(my_list) looks similar but actually both are doing different job.  
my_tuple = tuple(my_list) creates an instance of the class tuple from my_list object. It's not quite what a type casting like (tuple)my_list does in C since a new object is created.my_tuple = tuple(my_list) is closer to the C++ my_tuple = new Tuple(my_list).
Why it should be identified as a normal function or type conversion function? It is just a function.Or as almost everything in python is an object, actually function is also a kind of object which implements __call__.Further, there isn't a type conversion function in fact. tuple acts as an constructor, it takes an iterable object and return a tuple object. 
I may answer your second question, Python interpreter works on the basis of scope (local,enclosing,global,default).for example:In above case it doesn't do type conversion instead it executes above function. Why because once we started execution it searches for tuple object and does job. If it didn't find then it considers default keyword and converts. In nutshell It is purely on scope of objects


Answer URL
https://docs.python.org/3/library/stdtypes.html#tuple
