Natural Text
In Python, I'd like to test for the existence of a keyword in the output of a Linux command. The keywords to test for would be passed as a list as shown below. I've not spent a lot of time with Python so brute-force approach is below. Is there a cleaner way to write this? 
The any built-in will do it.
You can use a regular expression to accomplish this. A regular expression of the form a|b|c matches any of a, b or c. So, you'd want something of the form:p.search(result) searches the entire string for a match of the regular expression; it returns a match (which is truth-y) if present and returns None (which is false-y) otherwise. Converting the result to bool gives True if it matches and False otherwise.Putting this together, you'd have:You can also make this more concise by not pre-compiling the regular expression; this should be fine if it's a one-time use:For reference, read about Python's re library.
Your function does two things, printing and returning the result. You could break them up like so:test_result will return a list with all the found keys, or an empty list. The empty list is falsey, so you can use it for whatever tests you want. The print_results is only needed if you actually want to print, otherwise you can use the result in some other function.If you only want to check for the presence and don't care about which key you found, you can do something like:If you're using python3 (as you should be), I believe this will be lazy and only evaluate as much of the list as necessary. See A more concise way to write this Python code for a more concise version of this last function.
To search for an element in a list, you can use a for-else statement. In particular, this allows to return the found element.


Answer URL
https://docs.python.org/3/library/re.html
