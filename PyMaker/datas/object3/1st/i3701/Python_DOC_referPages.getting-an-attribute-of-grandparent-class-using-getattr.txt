Natural Text
I'm trying to access an instance attribute (inst_baseA / inst_baseB) of Base class from an instance of ClassB, depending on an attribute of the instance (self.x of object ClassB).Here is my code:This is what I tried first:I overcome this if I chain calls to getattr:Out of curiosity: Is there a way to get an attribute of the Base class from grandchildren class besides doing two calls to getattr?Update: the reason I need it is I'm trying to:- Get an attribute fron grandparent class (either inst_baseA or inst_baseB)- Depending on an attribute on my instance (the value of x)So my code is actually something like: getattr(self, 'node.{}'.format(self.x)). I didn't explain it correctly at the first time, hope it makes more sense now.
There's operator.attrgetter, but it's really not meant for this kind of thing, so the syntax is pretty awkward:But this is really quite unintuitive, so to avoid confusing people who read your code, it's probably better to roll your own multi-getattr instead:
According to [Python]: getattr(object, name[, default]):Return the value of the named attribute of object. name must be a string. If the string is the name of one of the objectâ€™s attributes, the result is the value of that attribute. For example, getattr(x, 'foobar') is equivalent to x.foobar.node.inst_base is not an attribute of b, but:node is an attribute of binst_base is an attribute of b.nodeSo, you need one getattr call for each "nesting" level. Considering that I've pasted your code in the interpreter's interactive window:Or, to take things further, you can create a getter that works with "nested" attribute names:But that's probably highly inefficient (and also, doesn't handle corner cases), and you'd better use @Aran-Fey's suggestion.


Answer URL
https://docs.python.org/3/library/operator.html#operator.attrgetter
https://docs.python.org/3/library/functions.html#getattr
