Natural Text
Is there any way to convert a string with variables into an operation??For examplePlease, don't give others solutions for the problem, because I know it's very easy to do by a diferent way. But I really need it for a harder problem 
You can do this safely by using in-built operator package, and using globalsNow for this to work you have to declare the variables first
In Python 3.6+, you can use literal string interpolation.
I'm assuming "don't give others solutions for the problem, because I know it's very easy to do by a diferent way" is referring to eval as the easy answer you don't want.But really, what you want is almost certainly a function that parses and interprets an expression in some language, just like eval does, it's just that you want a simpler and more restricted language than Python, maybe just basic arithmetic expressions.As Olivier Melançon's answer shows, Python also comes with an interpreter for a limited subset of Python in the f-string evaluator, and as jedwards' answer shows, there are readily-available interpreters for what are effectively similar languages to such a subset.But if you want to handle exactly the language you want in exactly the way you want, you have to do it yourself. And it's not actually as scary as it sounds. I'll use Python's own ast module for parsing, but then write my own interpreter. This works as long as you really want a strict subset of Python, but if you want something different—e.g., ^ for exponentiation (which has the wrong precedence and associativity), or variables that aren't valid Python identifiers, etc., you'll have to build the parser too.Now, you can evaluate anything using the basic 4 arithmetic operators, parentheses, numeric constants, or the names of global variables whose values are numbers, but nothing else:Obviously the error handling could be nicer, and I probably should have handled at least unary - in case you want negative numbers… but this should be enough to get the point across. And reading the ast docs linked above, it should be clear how to extend this further.On the other hand, Bijoy's answer is an even simpler parser and interpreter. It won't handle more complicated expressions—but if you don't want it to, that's a feature, not a bug.
Using the sympy library (docs) is one approach:Or, even closer to what you had written (but I like it considerably less):EDIT NOTE: Obligatory mention of disappointment, sympify, the string-to-equation parsing command, using eval().  :sad face:That being said, sympy is a helpful library worth considering, and you can certainly build an equation without using sympify.


Answer URL
https://docs.python.org/3/library/ast.html
