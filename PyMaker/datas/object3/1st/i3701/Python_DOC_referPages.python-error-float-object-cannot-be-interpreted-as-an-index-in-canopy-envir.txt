Natural Text
I am using the 2.1.9.3717 version of Canopy to run a code written by someone else, on plotting a histogram for the bootstrapping analysis of a previous data series, and I encounter this error every time. I tried all reinstalling numpy or changing the known number variables to int instead of float, nothing has worked. I am really new at programming and this has caused a lot of confusion for me. Here is the code:And the output:
You say:I tried all reinstalling numpy or changing the known number variables to int instead of float… but you don't seem to actually be converting to int, just calling math.ceil on them. That doesn't change the type:Return the ceiling of x as a float, the smallest integer value greater than or equal to x.What you want is probably int(math.ceil(…)), which gets the ceiling as a float, then converts that int to a float (by truncating it, but since you've already ceilinged it, that should be fine), which can then be used as an index.If the code you borrowed was written for Python 3, the Python 3 version of math.ceil does return an int.1,2 So it worked in Python 3, but your backport to Python 2 doesn't.(Which raises the question of why you're backporting code to Python 2 instead of just using Python 3, but… maybe you have a reason for that.)1. Actually, it only returns an int when called on a float. When called on some other type, it is guaranteed to return something that matches Integral, but that doesn't necessarily mean it's usable as an index. But this is rarely going to be an issue, and it isn't here.2. Python 2 was designed around returning the types a C expert would expect; Python 3 was designed around returning whatever is confusing or most useful. The most famous example is that 5/2 is 2 in 2.x, 2.5 in 3.x.
You are getting this error because you need to pass an int rather than a float. The ciel function returns a float. You may want to typecast it to integer.


Answer URL
https://docs.python.org/3/library/math.html#math.ceil
https://docs.python.org/3/library/math.html#math.ceil
