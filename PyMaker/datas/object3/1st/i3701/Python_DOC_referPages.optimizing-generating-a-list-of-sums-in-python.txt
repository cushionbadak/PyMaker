Natural Text
I am attempting to use Python for the following task: given a set of integers S, produce S + S, the set of integers expressible as s1 + s2 for s1, s2 members of S (not necessarily distinct).I am using the following code:This works fine for short enough lists, but when handed a longer list (say, 5000 elements between 0 and 20000) goes incredibly slowly (20+ minutes).Question: what is making this slow? My guess is that asking whether the sum is already a member of the list is taking some time, but I am a relative newcomer to both Python and programming, so I am not sure. I am also looking for suggestions on how to perform the task of producing S + S in a quick fashion.
Python has a built-in type set that has very fast lookups.  You can't store duplicates or unhashable objects in a set, but since you want a set of integers, it's perfect for your needs.  In the below, I also use itertools.product to generate the pairs.As to why your existing solution is so slow, you might want to look up the term "algorithmic complexity".  Basically, it's a way of categorizing algorithms into general groups based on how well they scale to many inputs.  Your algorithm is a O(n^3) algorithm (it will do about n^3 comparisons).  In comparison, the set solution is O(n^2). It accomplished this by discarding the need to check if a particular sum is already in the set.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
