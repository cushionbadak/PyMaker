Natural Text
I want to make a histogram of all the intervals between repeated values in a list.  I wrote some code that works, but it's using a for loop with if statements. I often find that if one can manage to write a version using clever slicing and/or predefined python (numpy) methods, that one can get much faster Python code than using for loops, but in this case I can't think of any way of doing that.  Can anyone suggest a faster or more pythonic way of doing this?Sample output:^ note: I don't care about the ordering in the dict, so this solution is acceptable, but I want to be able to run on really large arrays/lists and I'm suspecting my current method will be slow. 
You can eliminate the setup loop by a carefully constructed defaultdict.  Then you're just left with a single scan over the input list, which is as good as it gets.  Here I change the resultant defaultdict back to a regular  Dict[int, Dict[int, int]], but that's just so it prints nicely.
There is an obvious change to make in terms of data structures. instead of using a dictionary of dictionaries for hist use a defaultdict of Counter this lets the code becomethis will be faster as the if's are written in C, and will also be cleaner.


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
