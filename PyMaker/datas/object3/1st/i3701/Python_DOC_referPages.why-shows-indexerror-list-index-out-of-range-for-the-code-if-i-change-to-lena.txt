Natural Text
shows IndexError: list index out of range for the codeWhereascan run 
Note: I make the asumption that you use Python 3, where range() is a function which yields values instead of generating a list like in Python 2 (the equivalent function is xrange() ).The range() function is documented in the topic Built-in Types —> Ranges.Quoting the documentation:The arguments to the range constructor must be integers (either built-in int or any object that implements the __index__ special method). If the step argument is omitted, it defaults to 1. If the start argument is omitted, it defaults to 0. If step is zero, ValueError is raised.For a positive step, the contents of a range r are determined by the formula r[i] = start + step*i where i >= 0 and r[i] < stop.For a negative step, the contents of the range are still determined by the formula r[i] = start + step*i, but the constraints are i >= 0 and r[i] > stop.With your example range(len(A), 0, -1), you iterate from the value len(A) inclusive to 0 exclusive. Actually, by convention in the Python language , the start index is inclusive and the stop index is exclusive. Ie.: in your case, your range will generate the indexes len(A), len(A) – 1, ..., 2, 1; but it will never reach 0.This is the same rule for slicing. Given a list L, L[a:b] is the slice of L from index a inclusive to index b exclusive (so b – 1).So, to answer your question, the index len(A) is out of range: only indexes from 0 to len(A) – 1 are valid.For your case, the best practice is to use reversed, to iterate the sequence in reverse order:You get:
In the first example, you try to access the item at  index len(A), but len(A) equals 7, and the list index has a maximum of 6.khelwood was pointing to that already.
Why? Well, because list indexing in python is starting at zero and goes up to len(<iterable>)-1, that's why.So trying to get A[len(A)] will always fail.But when working with range i'd suggest you do a quick test in the python shell to see if everything is working as planned, for example:would present you the output:This shows you what's going on. In this case we can clearly see that the first list element would not be used since the 0 is missing.So, what you probably want is range(len(A)-1,-1,-1).
This is what you want. ^range(len(A),0,-1) iterates from 7 to 0 backwards, but since Python list indexing starts at 0 instead of 1, you need to subtract 1 from both parameters of the range.Giving you:
In the range() function, the first argument is always an index that exists in the list. If there is an array A = ["a", "b", "c", "d"] then len(A) would return 4 and the indexes would be 0, 1, 2, 3 so if you use range(Len(A), 0, -1) it would cause an error since 4 is out of range of the indexes in the list.If you use range(Len(A) - 1, 0, -1) then the output would be "d", "c", "b" and "a" would not be included in the output since the range goes to 0 and in the range function the range ends at 1 value before the second argument.So simply put, for range(3, 0, -1) the indexes are 3, 2, 1 and for range(0, 3, 1) the indexes are 0, 1, 2. The range() function stops 1 value before the second argument.


Answer URL
https://docs.python.org/3/library/functions.html#func-range
https://docs.python.org/3/library/stdtypes.html#typesseq-range
