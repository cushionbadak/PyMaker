Natural Text
Is there an analog, in the asyncio module, to the CalledProcessError exception from the subprocess module?I would have expected there to be an analog, because the asyncio module creates the TimeoutError exception to replace the TimeoutExpired exception from the subprocess module. But there does not seem to be one.As a sub-question: Does the CalledProcessError exception only work with instances of the Popen class? Or does it also work with other classes (e.g. Process from asyncio or Subprocess from tornado.process) which implement (child) process functionality?It seems to be the case that the CalledProcessError exception might work with instances of classes similar, but distinct to Popen. For example, one can find on GitHub examples of people calling CalledProcessError with an instance of the Subprocess class from tornado.process.Note that in the above example, while it is true that tornado.process does have an alias for subprocess.CalledProcessError, based on the import statements at the top of the file that is not the exception being called; it is really subprocess.CalledProcessError being called.If CalledProcessError also works with instances of the Process class from asyncio, then why doesn't TimeoutExpired also work with instances of the Process class from asyncio? In other words, in asyncio why was it necessary to create a new version (TimeoutError) of the TimeoutExpired exception, but not necessary to create a new version of the CalledProcessError exception?At the end of the day the source code for CalledProcessError isn't that complicated, so if I wanted to create a duplicate version for instances of the Process class from asyncio, I suppose I probably could, but it would seem desirable to first try avoid such code duplication.Note: My current working mental model is that the "asyncio.subprocess module aims to do everything that the subprocess module does but asynchronously". To the extent that this mental model is incorrect, this question will likely contain inherent preconceptions/misconceptions.
asyncio does not contain any equivalent for CalledProcessError, because it does not contain any equivalent for the things that raise CalledProcessError. There is no equivalent for check_call, check_output, check_returncode, or the check argument to run.
There is no such exception, no. The asyncio.subprocess implementation should be seen as the equivalent of subprocess.Popen(). From asyncio.subprocess.Process documentation:The API of the Process class was designed to be close to the API of the subprocess.Popen class[.]The CalledProcessError exception is only thrown by the higher-level functions in the same module (such as suprocess.run()), each of which drives Popen() under the hood.Just raise your own exception when the Process.returncode value is non-zero. You can re-use CalledProcessError for this if you want to, all it is is a container for the command run, return code, and the stderr and stdout strings. These are all built-in Python types, nothing subprocess specific.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#timeouterror
https://docs.python.org/3/library/subprocess.html#subprocess.Popen
https://docs.python.org/3/library/asyncio-subprocess.html#process
https://docs.python.org/3/library/asyncio-subprocess.html
https://docs.python.org/3/library/subprocess.html#subprocess.Popen
https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.asyncio.subprocess.Process
https://docs.python.org/3/library/subprocess.html#subprocess.run
https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.asyncio.subprocess.Process.returncode
https://docs.python.org/3/library/asyncio-subprocess.html
