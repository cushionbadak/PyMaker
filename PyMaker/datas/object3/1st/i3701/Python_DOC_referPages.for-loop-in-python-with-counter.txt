Natural Text
How can I create a for loop with a counter? I have a list, and I want to read an element after each n elements. I'd initially done thisBut as expected it prints every element instead of every nth element, what would be the Python way of solving this?
I am not sure wich kind of value is n but usually there are this ways: (for me, n is a list)Other way could be:Or:Even you can combine the first one with the last one:But I'm not sure if that has an advantage...Also, if you are willing to make a function, you could do something similar to the enumerate function:Personally, I wouldn't do this last one. I'm not sure why but it's a feeling.Perfomance testBut if you are really looking for perfomance you should read @Martijn Pieters answer.
Use the itertools.islice() object to limit iteration to every n-th object, this is at least twice as fast as any other proposed solution:The above efficiently produces every 5th object, starting at the first:Replace the first None with n - 1 if you want to skip to the nth object as the first to use:No copy of the input sequence is created to achieve this, so no additional memory or time is needed to produce the results. And taking every n-th object is done more efficiently than a % modulus test against an index from enumerate() could ever make it, or using range() to generate an index. That's because no further Python bytecode steps are needed to make those extra tests or index operations.If you also needed to have the index of the items selected this way, add enumerate() back in by wrapping the iterable:islice() beats any other solution hands-down if you need speed:So, for 1 million inputs, and 1000 tests, the enumerate() approach took sixteen times as much time as the islice() version, and the list(enumerate(...))[::n] copy-and-slice operation took almost 3 minutes to run the 1000 tests, clocking in at almost fifty times slower execution time. Don't ever use that option!
Just use a range:
enumerate returns a sequence of tuples that look like  (index, value)Say your list is my_list. You could do something likeThis is the python way of adding an index to a for loop.Some AlternativesIf your goal is to do something with the list elements by n's, here are some alternative solutions that don't necessarily add an index to your loop, but will get you where you need to be:Array SlicingYou could also use an array slice with a stepThe advantage is you're now working with a smaller list, at the cost of more memory and the time to make a copy, but that might be advantageous if you're doing several operations with it. It's quick to write and easy to read. RangeYou could so something similar with the range functionNote: if you're using python2, use xrange is preferred.This just gets you the index, not the index and value. It's fast and memory efficient. range (or xrange) is lazy and you're using an index directly into the array, so you don't have to touch each element.ItertoolsIf you would like a lazy sequence, you could use itertools. This might be useful if having the subsequence is too large to fit in memory comfortably. This is fast and memory efficient, but it requires an import. Sure, it's from the standard library, but if you're writing code for a small device, maybe it's not available.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.islice
