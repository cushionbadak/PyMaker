Natural Text
Im trying to do a program that counts some things of a C program, the problem I have, is that Im trying to count lines with:It doesnt count me the lines, here is an example of the input and the output:But everytime I press enter to write a new line of code it doesnt get counted, also if I press enter without writing anything, this error appears: Traceback (most recent call last):   File  "C:/Users/User/PycharmProjects/practicas/firma_digital.py", line 80,  in       if tok.type is not None: AttributeError: 'NoneType' object has no attribute 'type'Here is all my code:
It's not that ply is not counting the newline characters. It's never seeing them, because you call it repeatedly using input().From the Python docs (emphasis added):input([prompt])If the prompt argument is present, it is written to standard output without a trailing newline. The function then reads a line from input, converts it to a string (stripping a trailing newline), and returns that.The normal usage of lex.lex is to Additionally, you are printingrather thanAfter the last token is tokenised, lex.lex returns None, so you can expect tok to be Null when your loop terminates, and therefore it is an error to try to extract it's lineno attribute. (However, in your case it only happens if the line you just tried to tokenise was empty, because you only use the first token on each line.) You want the line count recorded in the lexer object, which is the count you update in your action.If you want to work on an entire file (which is the usual case for parsers, other than line-by-line calculators), you need to read the entire contents of the file (or stdin, as the case may be). For non-interactive use, you would generally do that with the file object's read function. If you wanted to test your lexer, you would then use the fact that the lex function implements Python's iteration protocol, so it will work in a for statement. So your main loop would be something like:and you would terminate the input by typing an end-of-file character at the beginning of a line (control-D on Linux or control-Z on Windows).Personally, I would implement the token type counting with a defaultdict:


Answer URL
https://docs.python.org/3/library/collections.html?highlight=defaultdict#collections.defaultdict
