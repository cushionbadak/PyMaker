Natural Text
I have a list of tuples, each on contains a word-to-be-replaced, its line and column number positions from a given text file. I want to go through the text file and replace that specific word of that specific position with a character (e.g. [('word1', 1, 1), ('word2', 1, 9), ... ]).In other words, given a specific word, its line and column numbers inside a text file I am trying to find and replace that word with a character, for example:given that the text file contains the following (assuming its position is as it is displayed -not written- here)Excited him now natural saw passage offices you minuter. At by stack  being court hopes. Farther so friends am to detract. Forbade concern  do private be. Offending residence but men engrossed shy. Pretend am  stack earnest arrived company so on. Felicity informed yet had to is  admitted strictly how stack you.and given that the word to replace is stack with position in the text to be line 3 and column 16, to replace it with the character *,so, after the replace takes place, the text file would now have the contents:Excited him now natural saw passage offices you minuter. At by stack  being court hopes. Farther so friends am to detract. Forbade concern  do private be. Offending residence but men engrossed shy. Pretend am  * earnest arrived company so on. Felicity informed yet had to is  admitted strictly how stack you.I have considered linecache but it seems very inefficient for large text files. Also, given the fact that I already have the line and column numbers, I hoped there was a way to go directly to that position and perform the replace.Does anyone know a way to do this in Python?EDITThe initial solution proposed using numpy's genfromtxt is (most likely) not suitable following the discussion in the follow-up issue since there is a need for every line of the text file to be present and not skipped (e.g. empty lines, strings beginning with 'w' and strings inside '/*.. /').
Try a recipe like this:The result is this:Notice this is a bit of an hack to put a bunch of long strings into a numpy array, and somehow change them, but it should be efficient when inserting in a longer loop for position tuples.EDIT: As @user2357112 made me realize the choice for file reader was not the most appropriate (although it worked for the exercise in question), so I've edited this answer to provide the same solution given in the follow up question.
Consider a single line:word1 a word2 a word3 a word4If you have these changes:And you process them in order:* a word2 a word3 a word4You will fail, because you are changing the positions of the words when you replace 'word1' with '*', a shorter string.Instead, you will have to sort the list of changes by line, reversed by column:You can then process the changes as you iterate through the file, shown in the link referenced by @JRajan:


Answer URL
https://docs.python.org/3/library/linecache.html
