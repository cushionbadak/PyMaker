Natural Text
I am having some trouble with this.I am trying to write this JSON to DataFrame. I feel like my issue is how i am formatting the JSON. When i write each tweet. However not able to narrow it down. Any insight would be awesome. Attached is my raw_tweets.json and 2nd code blow below is how i am writing it, seperating by comma i.e join (',')HERE is the LINK TO raw_tweets.json#JSON to DataFrameTHE way I write my tweets to JSON
raw_tweets.json contains invalid JSON. It contains JSON snippets separated by commas. To make the whole text a valid JSON array, place brackets [...] around the contents:For example,yieldsAnother, better way to fix the problem would be to write valid JSON in raw_tweets.json. After all, if you wanted to send the file to someone else, you'll make their life easier if the file contained valid JSON. We'd need to see more of your code to suggest exactly how to fix it, but in general you would want to use json.dump to write a list of dicts as JSON to a file instead of "manually" writing JSON snippets with saveFile.write(','.join(self.tweet_data)):If raw_tweets.json contained valid JSON then you could load it into a Python list of dicts using:The rest of the code, to load the desired parts into a DataFrame would remain the same.How was this line of code constructed:In an interactive Python session I inspected one dict in polls_json:It is quite large, so I've omitted parts of it here to make the result more readable.Assuming that I correctly guessed the text and location values you are looking for, we can see that given this dict, dct, we can access the desired text value using dct['text']. But the location' key is inside the nested dict, dct['user']. Therefore, we need to use dct['user']['location'] to extract the location value.By the way, Pandas provides a convenient method for reading JSON into a DataFrame, pd.read_json, but it relies on the JSON data being "flat". Because the data we desire is in nested dicts, I used custom code, the list comprehensionto extract the values instead of pd.read_json.


Answer URL
https://docs.python.org/3/library/json.html#json.dump
