Natural Text
I am currently building a little library, and I ran across a problem with descriptors: I created a python descriptor and it has to store values for seperate classes, but I don't want to use the class as storage. And I don't want the user having to inherit anything for those descriptors to work.But when an instance of the object is deleted, I want to delete its data in the descriptor for that instance. (The instance can be deleted, because the descriptor doesn't hold a reference to it, I index those with their id's in a dictionary)And this has to be done, because another instance can be created, with the same id, resulting in a 'data transfer' from the old object to the new, and that is not helpful in any way.Is there a way to let the descriptor know that an instance of the class the descriptor is part of was deleted?(__delete__ just fires if the attribute is deleted, not if the instance is getting removed)Here's a little bit of code to show you what this is all about:I'll just thank you in advance,CodenameLambda
Another version with weak references that does not need hashable instances:Output:
If your instances are hasbable, you could use a WeakKeyDictionary insteadof the standard dictionary:Output:
I'll just use following approach:It yields the expected results.In my run:Although I got that idea pretty early in trying to solve this problem, I discarded it because it is not very pythonic.But I have to thank @Mike MÃ¼ller because he got me to think about reference counting again, wich lead me to picking it up again.I'll mark this question as solved after the two days I have to wait, although it really isn't, because this solution is anything but beautiful.


Answer URL
https://docs.python.org/3/library/weakref.html?highlight=weakkeydictionary#weakref.WeakKeyDictionary
https://docs.python.org/3/reference/datamodel.html#implementing-descriptors
https://docs.python.org/3/glossary.html
