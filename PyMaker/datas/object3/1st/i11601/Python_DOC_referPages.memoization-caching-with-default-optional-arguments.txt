Natural Text
I'd like to make a python decorator which memoizes functions. For example, ifI'd like the output to beand the output should be the same under any permutation of the last 6 lines.This amounts to finding a map sending equivalent sets of *args, **kwargs** to a unique key for the memoization cache dict. THe above example has *args, **kwargs equal to 
For the memoization you can use functools.lru_cache().Edit: The problem with this for your use case is that it does not consider two function calls to be the same if the way they specify their arguments differs.  To address this we can write our own decorator which sits on top of lru_cache() and transforms arguments into a single canonical form:Now add() is called only once for the entire set of calls in the question.  Every call is made with all three arguments specified positionally.
You can use inspect.getcallargs() to get a canonical argument list for a function. Wrapping it in a decorator shouldn't be too hard.


Answer URL
https://docs.python.org/3/library/functools.html#functools.lru_cache
https://docs.python.org/3/library/inspect.html#inspect.getcallargs
