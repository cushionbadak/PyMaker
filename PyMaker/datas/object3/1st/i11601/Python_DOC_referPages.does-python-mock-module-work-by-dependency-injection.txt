Natural Text
So, the main question is on the title. I'm trying to find out if it is correct to say that python mock module uses dependency injection pattern for mocking object calls. I'm not familiar with DI pattern but from what I've read and what I saw with debugger in mock module underhood look like mock() uses DI.Am I right and mock() is DI or I'm missing something about this pattern and mocking?
The mock module does not use dependency injection.mock replaces some objects with customized ones.For dependency injection to be used, there would have to be some top level process, which would search for functions to be called, detected arguments to pass to them, instantiate them and finally made the call.mock only modifies the object and the call to this objects is done as usual - direct call to that object.If you want to find example of dependency injection, check pytest and it's fixtures - they use it a lot and it is fun to use that.
I suppose you are primarily concerned with mocking out an object's attributes with unittest.mock.patch.patch is a function which does little more than return an instance of the class unittest.mock._patch. _patch is a context manager, which monkeypatches an attribute upon __enter__ and unpatches it upon __exit__.


Answer URL
https://docs.python.org/3/library/unittest.mock.html
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch
