Natural Text
If i have an iterator it and want to exhaust it I can write:Is there a builtin or standard library call which allows me to do it in a one-liner?  Of course i could do:which will build a list from the iterator and then discard it.  But i consider that inefficient because of the list-building step.  It's of course trivial to write myself a helper function that does the empty for loop but i am curious if there is something else i am missing. 
From the itertools recipes:
You could use sum:or similarly, using reduce:
object() in itIf you know the iterator will never produce a certain kind of object, you can also use that instead, e.g. None in it or () in it. The newly-created object() works pretty much universally, because it'll never test equal to anything else (barring shenanigans).I'm not advocating this idiom; the for loop in the question is in many ways the best solution. But if you're looking for a creepily "elegant" answer in the sense that it does the minimum possible side-computation while still being a very neat one-liner (as opposed to e.g. any(False for _ in it)) then this may be it.
The built-in all() function should be extremely cheap and simple:Edit: Fixed, thank you @hemflit !


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/functions.html#all
