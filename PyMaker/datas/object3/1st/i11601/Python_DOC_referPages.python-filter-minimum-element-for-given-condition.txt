Natural Text
From a list of tuple l, I need to filter the element which is at least euclidean distance from tuple x. Can I do this using list comprehension or lambda function? You can take l = [(0,0), (1,1), (2,3), (3,4), (4,5)] and x=(3,0).Suppose there are more than one elements in l whose euclidean distance is minimum at same time. Then I need to return random elements from those elements. Can this be done using list comprehension or lambda function too?
First you should define a function to get the Euclidian distance. One way would be to just convert the tuples to complex numbers and get their absolute difference. Alternatively, you could define your own function. That might even be faster, since you do not really need to take the square root if you just want to find the value that has the minimum distance.You can then use that function as a key function to the min builtin.If you want to get all the minimum values, you could store that value in a variable and use a list comprehension to get all values whose distance is equal to that value.If you want a random value of those, use random.choice:Note, however, that this approach will iterate the list twice, and also calculate the distance of each value twice -- once to find the (any) minimum value, and then again to compare each value to that minimum. If performance is very important, you should use @Kasramvd's appraoch.
Here is an efficient approach using dictionary:Demo :This function will categorize your coordinates based on their distance from intended point then find the minimum based on the distance and return the list of relative coordinates, then you can use random.choice() to pick up a random point.


Answer URL
https://docs.python.org/3/library/functions.html#min
https://docs.python.org/3/library/random.html#random.choice
