Natural Text
I want to open a series of subfolders in a folder and find some text files and print some lines of the text files. I am using this:But this cannot access the subfolders as well. Does anyone know how I can use the same command to access subfolders as well?
In Python 3.5 and newer use the new recursive **/ functionality:When recursive is set, ** followed by a path separator matches 0 or more subdirectories. In earlier Python versions, glob.glob() cannot list files in subdirectories recursively.In that case I'd use os.walk() combined with fnmatch.filter() instead:This'll walk your directories recursively and return all absolute pathnames to matching .txt files. In this specific case the fnmatch.filter() may be overkill, you could also use a .endswith() test:
The glob2 package supports wild cards and is reasonably fastOn my laptop it takes approximately 2 seconds to match >60,000 file paths.
To find files in immediate subdirectories:For a recursive version that traverse all subdirectories, you could use ** and pass recursive=True since Python 3.5:Both function calls return lists. You could use glob.iglob() to return paths one by one. Or use pathlib:Both methods return iterators (you can get paths one by one).
You can use Formic with Python 2.6Disclosure - I am the author of this package.
Here is a adapted version that enables glob.glob like functionality without using glob2. So if you have the following dir structureYou can do something like thisPretty much fnmatch pattern match on the whole filename itself, rather than the filename only. 
configfiles = glob.glob('C:/Users/sam/Desktop/**/*.txt") Doesn't works for all cases, instead use glob2  
If you can install glob2 package...    All filenames and folders: 
If you're running Python 3.4+, you can use the pathlib module. The Path.glob() method supports the ** pattern, which means “this directory and all subdirectories, recursively”. It returns a generator yielding Path objects for all matching files.
As pointed out by Martijn, glob can only do this through the **operator introduced in Python 3.5. Since the OP explicitly asked for the glob module, the following will return a lazy evaluation iterator that behaves similarlyNote that you can only iterate once over configfiles in this approach though. If you require a real list of configfiles that can be used in multiple operations you would have to create this explicitly by using list(configfiles).


Answer URL
https://docs.python.org/3/library/glob.html#glob.glob
https://docs.python.org/3/library/pathlib.html#pathlib.Path.rglob
