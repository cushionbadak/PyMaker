Natural Text
Let's say I have this code:models.py :mymodule.py :main.pyMy question is: how do I instantiate the Square I appended (with the arguments I gave in mymodule.py, of course)?The idea is to instantiate the Square later.Thanks!
You have a flaw in your mymodule.py file; you never store the instance. Store it in a variable:You cannot just call the constructor and let it dangle.Looping over the attributes of mymodule looking for something named Square is not going to get what you want, you'll find the class reference, not the instance.Perhaps you should be looking for objects of the Square type instead:If you want to avoid having to import the Square class, you'd have to test for the type name instead, which is more fragile:If you want to really postpone construction, instead construct it later with a set of pre-set values, use functools.partial():If you now import somevariable and call it, the partial will apply the arguments already passed in and create the instance:
Actually you are instantiating it in mymodule.py, but it gets discarded. To stop that you need to store the Square created there in something with a name, otherwise it will be garbage-collected since nothing refers to it. Here's what I mean:mymodule.py :Then you can access it directly and more quickly using that name in main.py like this:main.py
"The idea is to instantiate the Square later."You can do that by storing the callable and its arguments.Or if you want to get super fancy and generate a lot of models, you can make a list:models.py:mymodule.py:main.py


Answer URL
