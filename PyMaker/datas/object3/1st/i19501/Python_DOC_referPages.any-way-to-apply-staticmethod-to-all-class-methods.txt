Natural Text
Is there any way to apply staticmethod to all methods of a given class. I was thinking we can access methods in its metaclass (in new of metaclass) and apply staticmethod, but i am not aware of syntax.  Can any one please shed light on this?
While a module (as suggested by mgilson) is a better option, if you really have a good use for this (I can't think of one), it's relatively easy with the inspect module and a class decorator:All the class decorator does is loop through the methods on the object with inspect.getmembers(), then overwrites the function with a staticmethod() of the original (unbound) function.Note that I would use a module over a class for this, and probably also just manually call @staticmethod on each function over doing it this way (as this, for example, breaks my editor's inspections). This answer is given to show it's possible, because it's a pretty simple implementation.
If none of the methods share any state, there's not much of a reason to have a class at all.  a module with functions is probably a better idea ...
mgilson's answer is best, but to add another pattern which is often used for defining a class as a namespace, you could also instantiate the class, overwriting the class name:Be aware, though, that after this Test is actually a class instance, which might be misleading depending on how you're using it.


Answer URL
