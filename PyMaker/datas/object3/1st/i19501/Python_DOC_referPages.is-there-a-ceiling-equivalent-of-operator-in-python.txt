Natural Text
I found out about the // operator in Python which in Python 3 does division with floor.Is there an operator which divides with ceil instead? (I know about the / operator which in Python 3 does floating point division.)
There is no operator which divides with ceil.  You need to import math and use math.ceil
You can just do upside-down floor division:This works because Python's division operator does floor division (unlike in C, where integer division truncates the fractional part).This also works with Python's big integers, because there's no (lossy) floating-point conversion.Here's a demonstration:
You could do (x + (d-1)) // d when dividing x by d, i.e. (x + 4) // 5.
You can always just do it inline as wellIn python3, this is just shy of an order of magnitude faster than forcing the float division and calling ceil(), provided you care about the speed. Which you shouldn't, unless you've proven through usage that you need to.
Note that math.ceil is limited to 53 bits of precision. If you are working with large integers, you may not get exact results.The gmpy2 libary provides a c_div function which uses ceiling rounding.Disclaimer: I maintain gmpy2.
Solution 1: Convert floor to ceiling with negationReminiscent of the Penn & Teller levitation trick, this "turns the world upside down (with negation), uses plain floor division (where the ceiling and floor have been swapped), and then turns the world right-side up (with negation again)"Solution 2: Let divmod() do the workThe divmod() function gives (a // b, a % b) for integers (this may be less reliable with floats due to round-off error).  The step with bool(r) adds one to the quotient whenever there is a non-zero remainder.Solution 3: Adjust the numerator before the divisionTranslate the numerator upwards so that floor division rounds down to the intended ceiling. Note, this only works for integers.Solution 4: Convert to floats to use math.ceil()The math.ceil() code is easy to understand, but it converts from ints to floats and back.  This isn't very fast and it may have rounding issues.  Also, it relies on Python 3  semantics where "true division" produces a float and where the ceil() function returns an integer.
I came here because of binary modular groups, and wanting to interact with both the shared middles of a list. For example [1,2,3,4] has 2 and 4.To interact with the middle of the list and use a ceiling operator:


Answer URL
https://docs.python.org/3/library/functions.html#divmod
https://docs.python.org/3/library/math.html#math.ceil
