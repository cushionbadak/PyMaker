Natural Text
Running the above programs prints "getattribute" and "no" multiple times. __getattr__ is called multiple times. 333 to be exact. self.c prints 333.What I want to achieve is to have a class that doesn't raise an error if a class variable or method is not declared in the class.Whats the possible reason for this?
hasattr just tries to get the attribute and returns False if it can’t. Whether it can’t is determined in Python 3 by an attempt throwing an AttributeError, and in Python 2 by an attempt throwing any error. (This includes RecursionErrors and is why it fails silently after 333 calls. Python 2 is not a sane language; upgrade to 3 if possible.)Instead, you can return the alternative value on an AttributeError yourself:This can potentially hide other AttributeErrors, but it’s difficult to avoid doing that just by the nature of Python.
hasattr is a shortcut to call getattr and see if it raises an exception (which means attribute does not exist) or not (which means it exists)cf : https://docs.python.org/3/library/functions.html#hasattrgetattr calls __getattr__ so you are doing a recursive callI think a possible workaround would be to use: instead of:
This is because running hasattr(self, name) calls self.__getattr__(name) (aka getattr(self, name)) - reference.So when doing hasattr(self, name) within __getattr__ it calls self.__getattr__(name), here comes the unwanted recursion.I would fix it with:
The problem comes from print(fo.b).Since b is not defined as a member of Foo, fo.b results in a call to fo.__getattr__('b').Then, hasattr(self, name), which is tantamount to hasattr(fo, 'b') calls itself gettatr(fo, 'b'), as stated in hte documentation.Hence an infinite recursion, resulting in a RecursionError in Python 3.Since getting fo.b does not really make sense if you know that Foo does not have a b member, a first fix I would suggest is to define that member.Your code then outputsA more clever fix would be to check if the name argument passed to __getattr__ is 'b', or depending to your needs, different from 'a' and 'c'.In this situation, you can force __getattr__ to define the requested unfound member.Alternatively:


Answer URL
https://docs.python.org/3/library/functions.html#hasattr
https://docs.python.org/3/library/functions.html#hasattr
https://docs.python.org/3/library/functions.html#hasattr
