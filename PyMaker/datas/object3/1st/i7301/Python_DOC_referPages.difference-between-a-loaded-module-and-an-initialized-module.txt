Natural Text
In the reference manual it is stated that:A complete Python program is executed in a minimally initialized environment: all built-in and standard modules are available, but none have been initialized, except for sys (various system services), builtins (built-in functions, exceptions and None) and __main__.I am uncertain about what "initialized" is supposed to mean here. I always thought that a module was initialized if it was loaded and present in sys.modules:This is a dictionary that maps module names to modules which have already been loaded.Apparently, I was wrong because sys.modules contains many other modules:What is the difference between an initialized and a loaded module? I'm on Python 3.
The language initialization has gotten a lot more complicated since that documentation was written. (It's been mostly unchanged since at least Python 1.4.) All those modules in sys.modules are fully loaded and initialized.
Putting it simply:import loads the module into memory.when you call a class in the module and use .__init__() funtion such a way that some of the attributes within the class belonging to this module get updates, then this module becomes an initialized module.Do note that, when you use the module, this process happens implicitly.TL;DRimport some_module loads the module,some_module.some_attribute/function initializes it.


Answer URL
https://docs.python.org/3/reference/toplevel_components.html#complete-python-programs
https://docs.python.org/3/library/sys.html#sys.modules
https://docs.python.org/3/reference/import.html#__spec__
https://docs.python.org/3/reference/import.html#loading
