Natural Text
How can I find the number of arguments of a Python function? I need to know how many normal arguments it has and how many named arguments.Example:This method has 2 arguments and 1 named argument.
The previously accepted answer has been deprecated as of Python 3.0. Instead of using inspect.getargspec you should now opt for the Signature class which superseded it. Creating a Signature for the function is easy via the signature function:Now, you can either view its parameters quickly by string it:or you can also get a mapping of attribute names to parameter objects via sig.parameters. Additionally, you can call len on sig.parameters to also see the number of arguments this function requires:Each entry in the params mapping is actually a Parameter object that has further attributes making your life easier. For example, grabbing a parameter and viewing its default value is now easily performed with:similarly for the rest of the objects contained in parameters.As for Python 2.x users, while inspect.getargspec isn't deprecated, the language will soon be :-). The Signature class isn't available in the 2.x series and won't be. So you still need to work with inspect.getargspec.As for transitioning between Python 2 and 3, if you have code that relies on the interface of getargspec in Python 2 and switching to signature in 3 is too difficult, you do have the valuable option of using inspect.getfullargspec. It offers a similar interface to getargspec (a single callable argument) in order to grab the arguments of a function while also handling some additional cases that getargspec doesn't:As with getargspec, getfullargspec returns a NamedTuple which contains the arguments.
see the inspect module
or, if the current function name is undetermined:
inspect.getargspec()Get the names and default values of a functionâ€™s arguments. A tuple of four things is returned: (args, varargs, varkw, defaults). args is a list of the argument names (it may contain nested lists). varargs and varkw are the names of the * and ** arguments or None. defaults is a tuple of default argument values or None if there are no default arguments; if this tuple has n elements, they correspond to the last n elements listed in args.Changed in version 2.6: Returns a named tuple ArgSpec(args, varargs, keywords, defaults).See can-you-list-the-keyword-arguments-a-python-function-receives.
Adding to the above, I've also seen that the most of the times help() function really helpsFor eg, it gives all the details about the arguments it takes. gives the below
inspect.getargspec() to meet your needs
Good news for folks who want to do this in a portable way between Python 2 and Python 3.6+: use inpsect.getfullargspec( ) method. It works in both Python 2.x and 3.6+    As Jim Fasarakis Hilliard and others have pointed out, it used to be like this:1. In Python 2.x: use inspect.getargspec( )2. In Python 3.x: use signature, as getargspec( ) and getfullargspec( ) were deprecated.  However, starting Python 3.6 (by popular demand?), things have changed towards better:   From the Python 3 documentation page:inspect.getfullargspec(func)Changed in version 3.6: This method was previously documented as deprecated in favour of signature() in Python 3.5, but that decision has been reversed in order to restore a clearly supported standard interface for single-source Python 2/3 code migrating away from the legacy getargspec() API.
As other answers suggest, getargspec works well as long as the thing being queried is actually a function. It does not work for built-in functions such as open, len, etc, and will throw an exception in such cases:The below function (inspired by this answer) demonstrates a workaround. It returns the number of args expected by f:The idea is to parse the function spec out of the __doc__ string. Obviously this relies on the format of said string so is hardly robust!


Answer URL
https://docs.python.org/3/library/inspect.html#inspect.getargspec
https://docs.python.org/3/library/inspect.html#inspect.signature
https://docs.python.org/3/library/inspect.html#inspect.Parameter
https://docs.python.org/3/library/inspect.html#inspect.getargspec
https://docs.python.org/3/library/inspect.html#inspect.getfullargspec
https://docs.python.org/3/library/inspect.html
https://docs.python.org/3/library/inspect.html#inspect.getargspec
https://docs.python.org/3/library/inspect.html#inspect.signature
