Natural Text
In a list like the one below:There could be some numerical elements preceded by a character. I would like to break this into sub-lists like below:As you can tell, depending upon the character, the lists could look similar. Otherwise they could have a different number of elements, or dissimilar elements altogether. The main separator is the "|" character. I have tried to run the following code to split up the list, but all I get is the same, larger, list within a list. I.e., list of len(list) == 1.Any ideas how to split it up successfully?
First, a quick oneliner, which is not an optimal solution in terms of space requirements, but it's short and sweet:Here we join all elements of the big list by a unique non-appearing separator, for example ,, then split by |, and then split again each list into a sublist of the original elements.But if you're looking for a bit more efficient solution, you can do it with itertools.groupby that will operate on an intermediate list, generated on fly with the breakby() generator, in which elements without | separator are returned as is, and those with separator are split into 3 elements: first part, a list-delimiter (e.g. None), and the second part.
It would be easier to join the elements of the list into a single string, split the string on the '|' character, then split each of those elements on the what you used to join the list.  Probably a comma ,If the list is very long, you can also iterate over the items in the list, creating a new sublists on when you encounter a pipe character |
You don't need regex or anything of the sort - a simple loop and str.split() should be more than enough, at least if you're after an actual efficient solution:
Here is a solution to a similar problem I didn't find an answer to.  How to split a list into sublists delimited by a member, e.g. character:



Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
