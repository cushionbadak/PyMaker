Natural Text
Suppose I have a Python function as defined below:I can get the name of the function using foo.func_name. How can I programmatically get its source code, as I typed above?
If the function is from a source file available on the filesystem, then inspect.getsource(foo) might be of help:If foo is defined as:Then:      Returns:    But I believe that if the function is compiled from a string, stream or imported from a compiled file, then you cannot retrieve its source code.
The inspect module has methods for retrieving source code from python objects. Seemingly it only works if the source is located in a file though. If you had that I guess you wouldn't need to get the source from the object.
dis is your friend if the source code is not available:
If you are using IPython, then you need to type "foo??"
While I'd generally agree that inspect is a good answer, I'd disagree that you can't get the source code of objects defined in the interpreter.  If you use dill.source.getsource from dill, you can get the source of functions and lambdas, even if they are defined interactively.It also can get the code for from bound or unbound class methods and functions defined in curries... however, you might not be able to compile that code without the enclosing object's code.
To expand on runeh's answer:EDIT: As pointed out by @0sh this example works using ipython but not plain python. It should be fine in both, however, when importing code from source files.
You can use inspect module to get full source code for that. You have to use getsource() method for that from the inspect module. For example:You can check it out more options on the below link.retrieve your python code
to summarize :
If you're strictly defining the function yourself and it's a relatively short definition, a solution without dependencies would be to define the function in a string and assign the eval() of the expression to your function. E.g. then optionally to attach the original code to the function: 
Please mind that the accepted answers work only if the lambda is given on a separate line. If you pass it in as an argument to a function and would like to retrieve the code of the lambda as object, the problem gets a bit tricky since inspect will give you the whole line.For example, consider a file test.py:Executing it gives you (mind the indention!):To retrieve the source code of the lambda, your best bet, in my opinion, is to re-parse the whole source file (by using f.__code__.co_filename) and match the lambda AST node by the line number and its context.We had to do precisely that in our design-by-contract library icontract since we had to parse the lambda functions we pass in as arguments to decorators. It is too much code to paste here, so have a look at the implementation of this function.
I believe that variable names aren't stored in pyc/pyd/pyo files, so you can not retrieve the exact code lines if you don't have source files.


Answer URL
https://docs.python.org/3/library/inspect.html#inspect.getsource
