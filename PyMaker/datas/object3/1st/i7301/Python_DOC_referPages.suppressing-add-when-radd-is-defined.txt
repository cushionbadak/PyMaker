Natural Text
I have two classes Foo and Bar:As you can see, I have Foo implementing __add__ and Bar implementing __radd__. I can create objects of these classes and add them, because the magic methods are defined.However, adding them produces this:How can I set it so that Bar.__radd__ method is called in preference to Foo.__add__?
There are two ways you can do this.Add an explicit check in Foo related to Bar.Make Bar a subclass of Foo.From docs:Note: If the right operand’s type is a subclass of the left operand’s  type and that subclass provides the reflected method for the  operation, this method will be called before the left operand’s  non-reflected method. This behavior allows subclasses to override  their ancestors’ operations.
Quote from the docs about the __rstuff__ methods :These functions are only called if the left operand does not support the corresponding operation and the operands are of different types. For instance, to evaluate the expression x - y, where y is an instance of a class that has an __rsub__() method, y.__rsub__(x) is called if x.__sub__(y) returns NotImplemented.So, in your case, Foo, the left operand, does have the __add__ method, thus, it's called immediately. To avoid that, you can return NotImplemented from Foo.__add__ if the other argument is of type Bar.
As explain in the Python reference documentation in Datamodel section, that the order use by Python to resolve this case:check for __add__ on the first operandand only if not implemented check for __radd__ on the second one.A possibility to resolve your problem (not really beautiful / pythonic) is to check in your __add__ implementation if other implement the __radd__ method.For example with:With result:


Answer URL
https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types
https://docs.python.org/3/reference/datamodel.html#object.__radd__
https://docs.python.org/3/reference/datamodel.html#object.__radd__
