Natural Text
The unpacking/splat operators * and ** differ widely in their applicability across python versions (2.7, 3.x < 3.5 and 3.x >= 3.5).For example:Are there any more discrepancies between the various versions that I've missed?  I'm looking through PEP and Readmes but the docs aren't detailed with this. 
Around 1992 (not sure about Python version). This is from the Grammar file of Python 1.0.1.Python 1.4+:Keyword Arguments: Functions and methods written in Python can now be  called using keyword arguments of the form keyword = value.Python 1.6+There's now special syntax that you can use instead of the apply()  function. f(*args, **kwds) is equivalent to apply(f, args, kwds). You  can also use variations f(a1, a2, *args, **kwds) and you can leave one  or the other out: f(*args), f(**kwds).Python <= 2.7:Tuple parameter unpacking was removed in Python 3.0.PEP 3113: Tuple parameter  unpacking removed. You can no longer write def foo(a, (b, c)): ....  Use def foo(a, b_c): b, c = b_c instead.Python 3.0+ PEP 3132: Extended Iterable  Unpacking. You can now write things like a, b, *rest =  some_sequence. And even *rest, a = stuff. The rest object is always  a (possibly empty) list; the right-hand side may be any iterable.PEP 3102: Keyword-only arguments. Named parameters occurring after  *args in the parameter list must be specified using keyword syntax in the call. You can also use a bare * in the parameter list to indicate  that you donâ€™t accept a variable-length argument list, but you do have  keyword-only argumentsPython 3.5+PEP 448, additional  unpacking generalizations.As far as I know there's no single page that lists all the syntax changes. Per version syntax changes are listed in the What's new in Python section or you could check the Grammar specification of each release to see the differences.


Answer URL
https://docs.python.org/3/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations
https://docs.python.org/3/whatsnew/index.html
