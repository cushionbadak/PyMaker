Natural Text
I want to hash strings of variable length (6-60 characters long) to 32-bit signed integers in order to save disk space in PostgreSQL.I don't want to encrypt any data, and the hashing function needs to be reproducible and callable from Python. The problem is that I can only find Algorithms that produce unsigned integers (like CityHash), which therefore produce values of up to 2^32 instead of 2^31.This is what I have thus far:
Ryan answered the question in the comments. Simply subtract 2147483648 (= 2^31) from the hash result.orRyan also mentioned that using SHA-512 and truncating the result to the desired number of digits will lead to less collisions than the method above. 

I typically wouldn't use a 32-bit hash except for very low cardinality because it of course risks collisions a lot more than a 64-bit hash would. Databases readily support bigint 8-byte (64-bit) integers. Consider this table for some hash collision probabilities.If you're using Python â‰¥3.6, you absolutely don't need to use a third-party package for this, and you don't need to subtract an offset either, since you can directly generate a signed 64-bit or variable bit-length hash utilizing shake_128:Usage:To generate a 32-bit hash instead, set Int8Hash.BYTES to 4.Disclaimer: I have not written a statistical unit test to verify that this implementation returns uniformly distributed integers.


Answer URL
https://docs.python.org/3/library/hashlib.html#shake-variable-length-digests
