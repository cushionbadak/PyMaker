Natural Text
I know, the title sounds a bit confusing, and as a newbie in Python I didn't know how to put it a better way.Here's what I want to do:My script will read csv files (spreadsheets) and create new spreadsheets from them that won't contain anything else but numbers. Basically, this script gets rid of unwanted character strings by deleting the rows and columns that contain them. I managed to create a functioning script, although it can only be applied to a single file. Put it another way, I would need to change the input file name inside the script each time I want to run it on another csv file.My files have names of this type: "MODELXXXXXXXXX__NAMEY_alfaZ.csv" where X, Y and Z are numbers.I want to pass these files' name as an input to my Python script, so I've used the sys.argv[1] syntax in order to achieve that. Here is an example of what my code looks like:I run my script like this: Now what I'd like to do is automate my script, that is to get rid of the "MODELXXXXXXXXX" part and not having to write "NAMEY_alfaZ" for the output file each time I want to apply my script to another file.Is there any way to do that?Thanks
Since the MODELXXXXX... part in your file name is separated with a double underscore from the rest of the file name, you can just slice off everything from the beginning to those two underscores from your input file name to get the output file name, e.g.:Then you can just use those two instead of the hard-coded values in your open() statements.EDIT - If you want to also modify the base name without the extension, you can extend it to something like this:
If the filenames don't contain multiple __'s, then you could use:In case the double underscore was a typing mistake, you can use:That way, it removes the first item from the list (so "MODELXXXXXXXXX"), and then joins the list back together.
Your input file names have a regular format, so I would suggest you the use of Python regular expressions to extract the relevant information.In your case, you could prepare the regular expression as follows:Then you can match and extract the information you want using match and group.For example, to get the model you do:Your example should be something like:You might want to adjust the regular expression, for instance, changing \d to \d+ or vice-versa to match the number of digits in your file name.


Answer URL
https://docs.python.org/3/library/re.html
