Natural Text
Consider this example where the __dict__ of all instances of a class A will point to a global dict shared.Now let's test a few things:All works as expected.Now let's tweak class A a little by adding an attribute named __dict__.Let's run the same set of steps again:Based on the above information the first case worked as expected but the second one didn't and hence I would like to know what changed after the adding class level __dict__ attribute. And can we access the instance dictionary being used now in any way?
In the first case the self.__dict__ has access to the __dict__ descriptor provided by its type. This descriptor allows it to get the underlying instance dictionary and also set it to a new one using PyObject_GenericGetDict and PyObject_GenericSetDict respectively. And of course we can set a new dictionary from here as well:In the second case our class itself contains an attribute named __dict__, but still the __dict__ attribute points to mappingproxy.__dict__ attribute for classes in this way is a special attribute.The attribute we had set can be accessed like this:A Python level we have now lost access to the instance dictionary but internally a class can find it using tp_dictoffset. As done in _PyObject_GetDictPtr.Both __getattribute__ and __setattr__ also access the underlying instance dictionary using _PyObject_GetDictPtr.To access the instance dictionary being used we can actually implement _PyObject_GetDictPtr in Python using ctypes. This is pretty eloquently done by @user4815162342 here.Continuing the second case:


Answer URL
https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_dictoffset
https://docs.python.org/3/reference/lexical_analysis.html#reserved-classes-of-identifiers
