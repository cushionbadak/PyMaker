Natural Text
I'm switching from nose to pytest and having problems using fudge to create mocks/fakes because @fudge.patch passes them into the test function but pytest interprets test function arguments as fixtures.I'm wondering if pytest and fudge are fundamentally incompatible, or if there's a trick I'm missing. I prefer fudge to mock because it allows you to set up expectations more intuitively, all in one place before you test something, whereas mock splits things up by defining return values before the test and expected calls after.With nose I could monkey-patch with a fudge.Fake like this:Note how fudge lets you set expected calls and fake returns in one place, which I find more intuitive than the way mock does it.However, using pytest this raises an exception because pytest interprets arguments to test functions as fixtures, and doesn't know a fixture called fake_today:I could declare a fake_today as a fixture, but I don't think pytest checks expectations, and if it does then the fixture would always have the same expectations wherever it's used, which doesn't always make sense.I could use the monkeypatch fixture in test functions to inject Fakes, but that's not as neat as using a decorator.I could also define fixtures that return a Fake like this:But you have to do that for every Fake you want to inject, which seems clunky.Not sure what's the best way.
According to this issue comment fudge is not intended to be compatible with pytest.


Answer URL
https://docs.python.org/3/library/unittest.mock.html
