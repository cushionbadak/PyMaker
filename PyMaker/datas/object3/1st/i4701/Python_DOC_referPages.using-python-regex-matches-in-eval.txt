Natural Text
I would like to utilize user input to match and rearrange strings.In Perl a simple example would look like the following:The same works in principle also in Python:Result: 456123However, the expressions 'm.group(1)' and 'm.group(2)' are not very user-friendly if you have to type it several times in an entry field.Therefore, I am wondering if in Python there are similar compact expression like '$1' '$2' in Perl?I can't get it work in Python with '\1' and '\2'.Any ideas?Edit:Sorry, I try to explain after some comments below:I was trying eval() since it seems to work with m.group(1) etc.but apparently for some reason r'\1' etc. is not accepted in eval()results inAbout the suggestion to use re.sub()It should not be a simple substitution of a string but a rearrangement+addition of matches.If I modify the original regex I can use user_input2 = r'\3\2'However, e.g. if I want to add '999' inbetween the matches (of course, neither r'\3999\2' or r'\3+"999"+\2' does it) then probably I am back using eval() and m.group(1) etc. although I wanted to keep the user input as short and simple as possible. Maybe, I can use some kind of the suggested substitutions.
You don't need eval. In fact, you want to avoid eval like the plague.You can achieve the same output with match.expand:The example about inserting 999 between the matches is easily solved by using the \g<group_number> syntax:As you can see, if all you need to do is move captured text around and insert new text, the regex module has you covered. Only use eval if you really have to execute code.
"inspired" by the above comments, I think the following seems to be an answer to my question. (Assuming that you have only \1 to \9). At least, this solution was not intuitive and obvious to me (as Python likes to be). More elegant constructs are welcome.


Answer URL
https://docs.python.org/3/library/re.html#re.match.expand
