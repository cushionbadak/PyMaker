Natural Text
In Python3.6, I use threading.local() to store some status for thread.Here is a simple example to explain my question:When I start this thread:Python gives me an error: It seems the test atrribute can not access out of the __init__ function scope, because I can print the value in the __init__ function after local set attribute test=123.Is it necessary to use threading.local object inside in a Thread subclass? I think the instance attributes of a Thread instance could keep the attributes thread safe.Anyway, why the threading.local object not work as expected between instance function?
As stated in https://docs.python.org/3.6/library/threading.html#thread-local-data:The instanceâ€™s values will be different for separate threads.Test.__init__ executes in the caller's thread (e.g. the thread where t = Test() executes). Yes, it's good place to create thread-local storage (TLS).But when t.run executes, it will have completely diffferent contents -- the contents accessible only within the thread t. TLS is good when You need to share data in scope of current thread. It like just a local variable inside a function -- but for threads. When the thread finishes execution -- TLS disappears.For inter-thread communication Futures can be a good choice. Some others are Conditional variables, events, etc. See threading docs page.
When you constructed your thread you were using a DIFFERENT thread.  when you execute the run method on the thread you are starting a NEW thread.  that thread does not yet have a thread local variable set.  this is why you do not have your attribute it was set on the thread constructing the thread object and not the thread running the object.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
