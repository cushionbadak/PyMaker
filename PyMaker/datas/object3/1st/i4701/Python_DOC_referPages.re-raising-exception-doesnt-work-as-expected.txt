Natural Text
I have this rather intricate try except block:Basically I'm checking:If there's a sys.argv[1]If so, try it as int, and see if it's less than 1If int fails, test it as stringIn both 2+3, if the tests don't succeed, I'm raising a ValueError that should be caught in the except ValueError block and it does as expected:BUT! The sys.exit(1) is not invoked and the program just continues.How can I fix it and even make it more readable?
In the last two lines you catch any exception:This includes the exception SystemExit, which is raised by sys.exit.To fix this, only catch exceptions deriving from Exception, which SystemExit does not:In general, it's (almost) never a good idea to do a bare except, always catch Exception, or if possible, something more specific.
The builtint sys.exit() raises a SystemExit-Exception. As you are catching any type of exception when you don't define the Exception to catch (except: without an Exception Type) the SystemExit gets also caught. Ultimately the function will run until the last line where you wrote pass.Best thing to do is to always catch specific Exceptions and never ever catch all Exceptions with an except:.Furthermore you should put the check if self.sorting is not in self.output_table.column_headers outside the try catch where you check for a valid self.sorting.
From the documentation for sys.exit:Exit from Python. This is implemented by raising the SystemExit exception, so cleanup actions specified by finally clauses of try statements are honored, and it is possible to intercept the exit attempt at an outer level.This means that the outer try except loop is catching the SystemExit exception and causing it to pass. You can add this exception to the outer block and call it again.
I think I would do something like this:It's okay to ask for forgiveness instead of permission when it makes things easier (for example to parse a number), but if you need to make sure if sys.argv has enough elements just check it, it will make the program flow clearer.Avoid using sys.exit within regular code, try to use it only in the outermost levels. For the most part, it is generally better to let exceptions bubble up and catch them at top level or let them crash the program if necessary.Do make use of exception parameters to store error information, you can decide at a later point whether to print the error, log it, show it in a popup, ...Instead of using sys.argv directly from within a class, you can pass it as an argument to the method/constructor, it will make the code easier to test and more flexible towards the future.


Answer URL
https://docs.python.org/3/library/exceptions.html#exception-hierarchy
https://docs.python.org/3/library/sys.html#sys.exit
