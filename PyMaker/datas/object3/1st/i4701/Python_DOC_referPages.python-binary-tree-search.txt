Natural Text
This question already has an answer here:Balanced binary tree python                    1 answer                I need help understanding this piece of code. The question i want to answer is The Python function above searches the contents of a balanced binary tree. If an upper limit of 1,000,000 nodes is assumed what should the max_stack_depth constant be set to?From what I understand, this is a trick question. If you think about it, stack_depth is incremented every time the find_in_tree() function is called in the recursion. And we are trying to find a particular node in the tree. And in our case we are accessing every single node every time even if we find the correct node. Because there is no return condition when stops the algorithm when the correct node is found. Hence, max_stack_depth should 1,000,000? Can someone please try to explain me their thought process.
The key thing to notice is that stack_depth is passed down to each recursive call of the function. If it's a balanced binary tree then each call to find_in_tree will pass the same stack_depth value to up to two children. Just keep in mind that the reference to stack_depth is not shared between subsequent calls to find_in_tree. They will have their own version of stack_depth initialized to the value of the parent call.This should be enough information to figure out what the value should be before the assert fires.
If you look at when stack_depth increments then it looks like we will increment every time we access a node. And in our case we are accessing every single node every time. Because there is no return condition when stops the algorithm when the correct node is found.This is incorrect.  While a stack_depth variable is incremented for every node examined, it's not the same stack_depth variable.  stack_depth is a local within the function.  When find_in_tree recurses and the recursive call increments stack_depth this does not change the value of stack_depth in the caller.stack_depth is measuring the level of recursion that takes place as this function runs to completion.  The maximum value it takes on will be the maximum depth of the tree you're inspecting.That said, if all you know is that you have a million nodes, you still need to step max_stack_depth to a million to guarantee the assertion doesn't fail because you don't know what shape the tree has.  It could be that every node has exactly one child.  In this case, you would need to recurse about a million times (maybe 999,999 times depending on how you count) to visit every node.Of course, Python will stop you long before you get there.Fortunately, you also know the tree is balanced.  This means many nodes have two children.  This tells you the maximum depth you will find should be close to the log base 2 of the number of nodes.


Answer URL
https://docs.python.org/3/library/exceptions.html#RecursionError
https://docs.python.org/3/library/sys.html#sys.setrecursionlimit
