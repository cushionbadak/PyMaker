Natural Text
I am trying to make a program that takes a large data file of integers and creates a new csv in a different format, where it takes the x,y,z of 30 lines and merges them into one line.The large dataset is formatted in (timestamp, x,y,z)Ex:or:The new dataset would look like this:etc.. (each line containing 30 x,y,z's)I thought of maybe appending a \n every 30 lines and then replacing each new line with a comma. And my code below doesn't work. It just puts an extra comma to where the new data looks like this:Do you guys have any ideas?
One approach would be to read your CSV file in blocks of 30 at a time. Then combine these rows. I have assumed delta is calculated by subtracting the first timestamp from the last timestamp in each block (another possibility would be difference between start of each block, so first would be 0?):The grouping is based on the itertools grouper() recipe in the Python documentation.            
I didn't know how you calculate your delta so I just put a placeholder function.Regarding your code you can improve it a little using enumerate so you don't have to update i manually.You can also get the first 4 items of each row in a csv file using the slice notation.This code has a bug though, what happens when you only have 29 rows in your CSV?Those 29 rows are going to get ignored, so you still need to check if the current row is the last one in the csv file, and process it accordingly.
This is a perfect job for zip. Here is a solution, much more pythonic than previous answers:Note: thanks to the slice notation, the last line with possibly less than 30 items, is managed automagically.


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
