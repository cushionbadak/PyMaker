Natural Text
This question already has an answer here:Efficient way to take the minimum/maximum n values and indices from a matrix using Python and NumPy                    2 answers                I need to find just the the smallest nth element in a  1D numpy.array.For example:I want to get 5th smallest element, so my desired output is 40.My current solution is this:However, finding 5 smallest elements and then taking the largest one them seems little clumsy to me. Is there a better way to do it? Am I missing a single function that would achieve my goal?There are questions with similar titles to this one, but I did not see anything that answered my question.Edit:I should've mentioned it originally, but performance is very important for me; therefore, heapq solution though nice would not work for me.Result:
Unless I am missing something, what you want to do is:np.partition(a, k) will place the k-th smallest element of a at a[k], smaller values in a[:k] and larger values in a[k+1:]. The only thing to be aware of is that, because of the 0 indexing, the fifth element is at index 4.
You can use heapq.nsmallest:
you don't need call numpy.max():


Answer URL
