Natural Text
So, I was following a book about machine learning. But I was confused a bit when I encountered this:  the iris dataset marks setosa as zero, we have to change all targets  with the value 0 to 1, and the other values all to 0.We will also use  two features, petal length and petal width. These two features are the  third and fourth entry in each x-value.The way the iteration is implemented, is very vague to me. I have never seen such an implementation. Is it a commonly used way that I dont know of? Or is there a better and a more convenient way to implement the same thing.Thanks
Let's establish what the code is doing - it is converting a  multi-class classification problem into a binary one (one vs rest) -  with the focus apparently on Setosa.That said, that is a really poor way of doing it, and I'm really  surprised to see it in a book about machine learning.Note,And,One naive way of converting this to a binary problem would be using a loop:Reduce this to a single liner, a list comprehension, and you get:Again, this is a poor way of doing it.I'd rather do this with np.where, keeping this in numpy space -You may not see large differences (well, list comprehensions do run in C space and are fast), but numpy is completely vectorised. Again, this is likely not going to be the bottleneck of your code if you're implementing a machine learning classifier, so I wouldn't really worry much about it.And similarly for the second one, like @DyZ mentioned, it is completely unnecessary. Just do -  A simple slicing with ndarray.__getitem__ is sufficient, and you don't even need to convert the result to an array (the slice already is an array). In summary,
The first list comprehension creates a boolean array where True items correspond to the zero iris.target. The same can be accomplished using the native NumPy tools:The second list comprehension is not necessary at all, because iris.data is already a NumPy array. So,must be:I am surprised that a "book about machine learning" offers such a silly advice.
This is a List Comprehension.  It creates a list.  It could also be done as:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
