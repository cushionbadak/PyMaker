Natural Text
My test script test.py is below:And output of the script with running in python3.6 is:So, why slowf() function has changed the global variable n after 5 seconds, but it still read a [] in checkn() function. They just both got into the global var n with the same id. I just confused! I appreciate it if someone could explain this to me!Thanks forwardÔºÅ
Separate processes do not share memory. Changes you make in one child won't be visible in another.The docs explain this, and also why you often don't want shared state (you need to add synchronization, which is tricky to get right), and also what you can do instead.You can use explicit shared memory, but only with basic "C types" like 32-bit integers or arrays of floats. And then you have to use explicit synchronization like Lock in the right places to make your code safe.The ideal solution, when possible, is to redesign your code to pass data over queues instead of sharing it.If that's not appropriate for your problem, you can use a Manager, which basically fakes shared high-level Python objects on top of a queue. This can be excruciatingly slow for some uses, but when it isn't, it can be the simplest answer.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes
https://docs.python.org/3/library/multiprocessing.html#shared-ctypes-objects
https://docs.python.org/3/library/multiprocessing.html#exchanging-objects-between-processes
https://docs.python.org/3/library/multiprocessing.html#multiprocessing-managers
https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes
