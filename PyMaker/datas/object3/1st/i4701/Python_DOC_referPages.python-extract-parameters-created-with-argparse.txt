Natural Text
I have a file called simple_example.py, which consists of 2 functions:I'd like to be able to call either func1() or func2() from the command line, so, I created another file called pyrun.py from this linkHowever, args in ArgSpec(args=[], varargs=None, keywords=None, defaults=None) shows an empty list. How can I extract the parameters from either func1 or func2?Is there a better way to run either func1 or func2 from the command line?
You probably want to use sub-commands. Here is an implementation of your example using sub-commands.Example output:And, of course, the help functions work for each of the sub-commands.
If I put your first block of code in a file, I can import it into a ipython session and run your 2 functions:ipython tab expansion (which uses some form of inspect) shows me that the module has a simple class, and the class itself has two static functions.I can call func1, and get an argparse error message:Similarly for func2:parse_args as a default parses the sys.argv[1:] list, which obviouslly is not tailored to its requirements.is a more useful wrapper.  With this I can pass a test argv list, and get back the parsed Namespace.  If I don't give it such a list, it will used the sys.argv default.  When testing a parser I like to return and/or display the whole Namespace.I haven't used inspect enough to try to figure out what you are trying to do with it, or how to correct it.  You don't need inspect to run code in an imported module like this.I can test your imported parser by modifying the sys.argvOr following the help:Oops, there's an error in your code.  You ask for args['age'], but didn't define a parser argument with that name.  That's part of why I like to print the args Namespace` - to make sure it is setting all the attributes that I expect.Normally we don't use different parsers for different inputs.  It's possible to do that based on your own test of sys.avgv[1], but keep in mind that that string will still be on sys.argv[1:] list that your parser(s) read.  Instead write one parser that can handle the various styles of input.  The subparser mentioned in the other answer is one option.  Another is to base your action on the value of the args.greet attribute.  If not used it will be the default value.


Answer URL
https://docs.python.org/3/library/argparse.html#sub-commands
