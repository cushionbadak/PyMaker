Natural Text
I have an integer representing a UTC hour and I have a UTC offset of a timezone. How can I get the equivalent hour for that timezone? So for example:
If you're using a datetime object, this is super easy:Or, since your offset is currently a string, use int(offset) there.The right solution would be to create a timezone-aware local datetime object out of the UTC datetime object and a timezone object. But that can be difficult if you only have a number offset rather than a full timezone name or object (which seems to be the same), or if you don't have a timezone database installed, etc., so I won't get into details here.If you're using raw timestamps, you need to divide by to convert offset in seconds to offset in hours:But this will cause problems in many cases. For example, what if you're on a half-hour timezone and the time is in the middle of an hour? What if today includes a DST transition? You can solve this by adding in math on minutes and seconds and days as well as hours, and looking up the isdst, and so on… but why do all that work when datetime does it for you (and has been heavily tested)?If you're using a time.struct_tm, as in an earlier edit of your question, you basically have to pull all the values out and do the same math as the last version, because it doesn't have enough functionality to be useful. Or just don't use struct_tm and use datetime instead (as you noticed, they have equivalent strptime functions, so they're just as easy to create).


Answer URL
https://docs.python.org/3/library/datetime.html
