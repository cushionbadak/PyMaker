Natural Text
Every result i've found online has either been really old, specific to either Python 2.7 or 3.x, or is complicated enough that I can't understand it. My use case is very simple, but i'm having a hard time finding a simple solution. My existing code looks like this:The top line ends making an HTTP request. The next few lines compute some values that are then used to make another HTTP request in the 2nd to last line. These two sections (top line, everything after that except for the last line) are completely independent of each other. The final line though requires the result of both.All I really want is to make these two HTTP requests in parallel, since neither needs to wait for the other. What's the simplest way to do this, that works in Python 2.7+?Edit for future readersWent with this solution:
The lower-level threading module in the stdlib is the same in 2.6+ and 3.x, at least for the basic stuff you're doing. It's a little clunky, because out of the box it doesn't give any way for threaded tasks to return a value, but you can add that in pretty simply. For example:And now:The multiprocessing.dummy module lets you use higher-level multiprocessing-style Pool and similar constructs on top of threads.The concurrent.futures module is the simplest way to do what you want, but it doesn't exist in 2.7, so you'd need to pip install futures to get the backport for 2.7, and then write something like this at the top of your file:The nice thing about this one is that what you're trying to do matches up with one of the examples in the docs. However, since you're not really using any pool/executor features (like being able to wait on multiple results in parallel, or compose futures), it's going to end up identical to the multiprocessing example but with different naming:
The multiprocessing module makes it easy to compute multiple things at the same time, especially with Pool.map. Usually this is for applying one function to different values rather than completely different functions, but we can easily turn that around.Note that multiprocessing.dummy means that we're using threads. If you want actually separate processes (which you shouldn't need since you're making HTTP requests which are not CPU bound) you would remove the .dummy.EDIT:The above is meant as a runnable example, in your case it would be:


Answer URL
https://docs.python.org/3/library/threading.html
https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy
https://docs.python.org/3/library/concurrent.futures.html
