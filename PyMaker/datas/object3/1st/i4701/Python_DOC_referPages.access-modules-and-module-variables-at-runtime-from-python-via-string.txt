Natural Text
In my Python programm I want to dynamically load modules and access variables of the module by converting a string parameter into a variable name.Use CaseI have different Fonts on SD Card which are python files, and a display function which loads the font when needed to display the caracters.Examples for my font file:Further, there is a Writer class which renders the fonts to the display:Has anybody an idea how can I accomplish to save the correct values of the queried character of the correct font into the variables width, height and bitmap? I want to load the Fonts dynamically only if needed, and offer the possibility to add new fonts by putting new .py font files into the folder.Thanks in advance.
EDIT The OP is actually using micropython, which doesn't implement importlib... Possible (untested) solution (yes, using exec - if someone knows a better solution please chime in). TL:DR : You want importlib.import_module and eventually getattr(). But you should still read the longer answer, really, it will save you a lot of time and frustration.Longer answer:First point about your "font" files format - this:is a huge design smell. You want lists or dicts instead (or possibly an ordered dict), ie:As a general rule, when you start having some "var1", "var2", "var3" etc pattern then you know you want some kind of container instead.Second  point - your error handling, ie:is worse than useless, it's actually harmful. First because it doesn't stop program execution in the case of an unrecoverable error (you dont want your program to continue when something totally wrong happened), then because it replaces all the incredibly useful informations you'd either get from the error message and traceback with a plain useless "An error happened" message. Only catch exceptions that you can properly manage one way or another, let everything else propagate (maybe someone upper in the call stack - usually in the UI part - might be able to handle it properly). Third point: do not use globals. I mean: do not mutate nor rebind globals (read-only (pseudo-constant) globals are ok of course). Which means you really never have to use the "global" keyword in your code.When you need to share state between a group a functions, use a class, store the state as attributes and make your functions methods. That's what objects are for (well, not only but that's part of there raison d'Ãªtre).EDIT : this part is still true for complete Python implementation and probably still partly true for micropython, except for parts that are not implemented in micropython (like importlib - I don't know what else is missing)And finally: never ever use exec nor eval. You don't need them, whatever you're trying to do there's a better, safer specific solution.In your case, to import a module by it's name, you have importlib.import_module, and to get an object's attribute by it's name you have getattr() (but if you use a proper container, cf first point, you don't even need getattr here). 


Answer URL
https://docs.python.org/3/library/importlib.html#importlib.import_module
https://docs.python.org/3/library/functions.html#getattr
