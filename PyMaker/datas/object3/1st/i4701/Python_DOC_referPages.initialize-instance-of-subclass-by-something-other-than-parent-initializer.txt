Natural Text
I have a Python class (it's not actually mine, it's from a package, so I don't want to edit this one). Minimal example (unrealistic):Now I want to create a subclass of this superclass, whose initialization always comes from a file -- that is, I want to do something likeThis doesn't work (I didn't expect it to): I don't get an exception but the subclass is not initialized correctly. For instance, if the SuperClass has some instance value a, which is always set, doingwill give an AttributeError: type object 'SubClass' has no attribute 'a'.How can I initialize using the from_file function from the parent class?
Python's __init__ method is in reality not a constructor, it's just an initializer. That's why you cannot implement this behavior in the __init__ method - once __init__ is called, you already have a superfluous object instance floating around.The method responsible for actually creating a new instance of the class is __new__, so we can achieve our goal by overriding that. The basic idea is to write something like this:The empty __init__ is necessary because python will automatically call it on the object that's returned from __new__. If we omit the empty __init__ method, python will end up calling SuperClass.__init__ on the object instead, and that will reset all of its attributes. There is, however, a problem: Since we've rewritten the __new__ method so that it requires a filename argument, the from_file method probably no longer works. You haven't shown its code, but it probably does something along these lines:The problem here is that the call to cls() will fail: This calls our __new__ method, which expects a filename argument, without any arguments. We end up with an exception like TypeError: __new__() missing 1 required positional argument: 'filename'. To work around this, we can make the filename parameter optional:Now we can call obj = SubClass('/filepath/file') as desired. However, it's also possible to call SubClass without any arguments (like obj = SubClass()), which will return a completely unitialized object instance (remember, our __init__ is empty, so the object will have no attributes whatsoever). There is, unfortunately, nothing we can do about this.Generally speaking, it's probably a bad idea to do this. As I'm sure you can tell by now, there are numerous pitfalls one has to watch out for when trying to change an existing class's interface like this. It's very possible that it's not worth the trouble and you should just stick to creating your instances with SubClass.from_file.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__new__
