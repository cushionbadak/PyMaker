Natural Text
I have created my custom exceptions as such within errors.pyAnother function somewhere else in the code raises different instances of DataException if there is not enough data in a pandas dataframe. I want to use unittest to ensure that it returns the appropriate exception with its corresponding message.Using a simple example, why does this not work:As suggested here: Python assertRaises on user-defined exceptionsI get this error:Or alternatively:results in:Why is it not recognizing DataException as an Exception? Why does the linked stackoverflow question answer work without supplying a second argument to assertRaises?
You are trying to use methods of the TestCase class without creating an instance; those methods are not designed to be used in that manner.unittest.TestCase.assertRaises is an unbound method. You'd use it in a test method on a TestCase class you define:The error is raised because unbound methods do not get self passed in. Because unittest.TestCase.assertRaises expects both self and a second argument named expected_exception you get an exception as DataException is passed in as the value for self.You do now have to use a test runner to manage your test cases; addat the bottom and run your file as a script. Your test cases are then auto-discovered and executed.It is technically possible to use the assertions outside such an environment, see Is there a way to use Python unit test assertions outside of a TestCase?, but I recommend you stick to creating test cases instead.To further verify the codes and message on the raised exception, assign the value returned when entering the context to a new name with with ... as <target>:; the context manager object captures the raised exception so you can make assertions about it:See the TestCase.assertRaises() documentation.Last but not least, consider using subclasses of DataException rather than use separate error codes. That way your API users can just catch one of those subclasses to handle a specific error code, rather than having to do additional tests for the code and re-raise if a specific code should not have been handled there.


Answer URL
https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises
https://docs.python.org/3/library/exceptions.html#os-exceptions
https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises
