Natural Text
I have a list of numbers and I want to make combinations from it. If I have list:The result is:but I want to get:Is it possible to eliminate duplicates except making new list and going through first list?
As Donkey Kong points to set, You can get the unique values in a list by converting the list to a set :And the result will be:If you want to use it as a list, you can convert it back by doing :Alternative and more clean,comprehensive way will be :
I know this is late but I want to add a point.set(itertools.combinations(t, 4)) would do a fine job for most cases, but it still iterates all repetitive combinations internally and so it can be computationally heavy. This is especially the case if there aren't many actual unique combinations.This one iterates only unique combinations:Usage:Note that itertools.combinations() is implemented in C, which means it is much faster than my python script for most cases. This code works better than set(itertools.combinations()) method only when there are A LOT MORE repetitive combinations than unique combinations.
Technically, what you get are not actually duplicates, it's simply how itertools.combinations works, if you read the description in the linked page:itertools.combinations(iterable, r)Return r length subsequences of elements from the input iterable.Combinations are emitted in lexicographic sort order. So, if the input iterable is sorted, the combination tuples will be produced in  sorted order.Elements are treated as unique based on their position, not on their value. So if the input elements are unique, there will be no  repeat values in each combination.DEMO:So, just as posted on the previous answer, set() will give you the unique values you want:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
