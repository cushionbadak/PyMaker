Natural Text
folder structure:main py: mod.py:__init__.py:If I run main.py, I get no error. But if I edit __init__.py to 'from packages import *' , I get this error: AttributeError: 'module' object has no attribute 'mod'I'm not asking how to make that 'print' command work. I can use other 'import' syntax in main.py to make it work. The question is: I'm curious about that 'from packages import mod' in the __init__.py. If i can do import mod then when I replace to import *, which means import everything, why do I get an error instead?So what does the from packages import * really mean inside that __init__.py?Anyone can help? Thanks
Short answerSo what does the from packages import * really mean inside that __init__.py?The __init__.py imports itself.ExplanationYou can only import modules, not packages. Packages are just containers for modules or sub-packages. When you "import" a package you actually import the module __init__.py.The __init__.py with this content:imports the module mod into __init__.py. Therefore, it will be availablein your main.py via packages.mod (remember packages is represented by __init__.py).When you change the content of __init__.py to:You are importing the module __init__.py, the very same file you are in.This works (a second import just triggers a lookup in sys.modules) but won't give you the content of mod.This means, you can use:but you cannot sensibly use this with an empty __init__.py:Because package is actually represented by the __init__.py and there is nothing in it yet. You can check this (interactively or in  file):In __init__.py you can write:and then in main.py:works. Because the function hello() is now in the global name space of thefile __init__.py.As mentioned in the answer by mozman, you can use __all__ in __init__.py tolist the modules that should be imported if from packages import * is used. This is designed for this case.The __init__.py has only this content:Now you can do this in main.py:If you extend your __init__.py:You can do this in main.py:But if you remove the from packages import * from __init__.py:You will get an error:because the __all__ is only used for the from packages import * case.Now we are back to the __init__.py imports itself.
See also: In Python, what exactly does “import *” import?adding __all__ to packages.__init__:and module 'mod' will be imported, else 'mod' is not in the namespace of 'packages', but I can not explain why 'import *' without __all__ do not import 'mod'.
you can load the modules inside the same packages directly. The following code works and it loads all the modules inside mod.py.Inside __init__.pyEfficient import - loads only hello function In your code,  from packages import * you are telling the interpreter to look for a modules inside packages(in the same directory as __init__.py). But it does not exist there. It exist one directory above the __init__.py. (I suspect my terminologies are wrong)Here is a reference that explains how to load the containing package itself.FOUND ITIt was very interesting to read about python import mechanisms. Ref1 Ref2 Ref3Apparently the parent modules is loaded first. For example, Ref3 states that, the code import mod inside __init__.py is automatically interpreted as packages.mod. Now I have to find out what happens if you write import packages.mod. Ref1 is more up-to-date with python3 conventions. Refer it for more info. Hope this helps you.


Answer URL
https://docs.python.org/3/tutorial/modules.html#importing-from-a-package
