Natural Text
We have a pre-exisitng large imaging library written in C/C++, with a pre-exising image type. We would like to interface it with Python. We know how to do most things using SWIG for instance, but we would like our interface to use NumPy instead of a home-grown structure type to store our images.Does anyone have an example how to do this? There are examples on the web that interface NumPy to bare pointers. How do we interface NumPy to an existing C type struct like this one:
There are basically three ways:Copy from your image buffer to a NumPy array and vice versa. When given a C/C++ image, create a NumPy array and copy the data, when given a NumPy array, create a C/C++ image and copy the data.NumPy array as wrapper around C data pointer. Create a NumPy array but with a given data pointer. Make sure your C/C++ image holding the data pointer lives longer than the NumPy array. The NumPy array can live shorter because in this case it will not attempt to delete the data.C/C++ image buffer as wrapper around a NumPy array pointer. Create a NumPy array and extract the data pointer, then use it to manupilate the NumPy array in-place. Make sure the NumPy array lives long enough by holding a Python reference.Each of these can be implemented in a SWIG typemap.In any case you need a type conversion of your types to NumPy types (NPY_UINT8, ..) and storing of image dimensions in a npy_intp *.To create a NumPy array use PyArray_New or PyArray_SimpleNew or PyArray_SimpleNewFromData (Array API) and specify your desired flags like Fortran-style contiguous or whatever is convenient for you. You can provide your own data pointer with PyArray_New and PyArray_SimpleNewFromData.The return value is a PyObject* which can safely be cast to PyArrayObject* (or perform a PyArray_Check before) and the data pointer is extracted by PyArray_DATA (Array API) which returns a void * which you can then cast to your desired type. Then you can either perform the copy or do the in-place modification as desired.To add a reference to a Python object use Py_INCREF and Py_DECREF (doc) in case you want to avoid for the NumPy array to prematurely being deleted.If you want to be notified when the Python object is about to be garbage collected use a weak reference via PyWeakref_NewRef (doc).


Answer URL
https://docs.python.org/3/c-api/weakref.html
