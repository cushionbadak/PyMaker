Natural Text
So I was attempting to make a function which will takes a single argument numlist (a non-empty list of numbers), and returns the sorted list of numbers which appear with the highest frequency in numlist. So far I have managed to create a dictionary (numbers as keys and their frequencies as values). But I still want to find which one of them has the maximum value and return it. Thing is I dont know how to compare them. Now there are certain one-liners like this But what if there are multiple values meeting that requirement? How would you handle it? Thanks for any help on that!Here is my code:
You can use a Counter  which returns a dict like object where elements are stored as dictionary keys and their counts are stored as dictionary values.Demo:
Sticking to your current implementation, you can sort the values of your dictionary, then just get all the keys of your dictionary that match that maximum value: So, you can do something like this at the end of your method: vals will hold the maximum value to indicate that is the value of the repeating item. Then we create a list comprehension that goes through the dictionary to get all keys that match that value. Putting it together:Output:
You can use collections.Counter:If order matters, use [key] instead of {key} and maxes.append(key) instead of maxes.add(key).
Well the one-liner you can use would beBut as you said it doesn't work for multiple numbers with the same number of occurrences.I prefer continuing to work with the list instead of a dict. The functions below will return a list containing all numbers with the highest occurrence . Or you can use the short version. I'm not sure which I prefer, I did the above one because it felt inefficient using list.count twice. But I'm not sure which one is more efficient. If in the even you only have one number in the list having the highest number of occurrences and you would rather the number itself being returned instead of a list with just one number you can do


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#collections.Counter
