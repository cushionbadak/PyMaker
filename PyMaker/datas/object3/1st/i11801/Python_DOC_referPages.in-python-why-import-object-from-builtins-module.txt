Natural Text
In order to transition to python 3, I am trying to understand writing python 2 and python 3 compatible codes. The following code is from python-future.org and illustrates a way to construct an iterator that would be compatible with both versions of python.The code runs fine in python 2, but to my surprise, if i remove the import statement then i get an error TypeError: Upper object is not an iterator. I often derive my custom classes from object but i have never imported it from builtins. Why does simply importing object change the behaviour of the code?
You are (indirectly) importing from the future.builtins module; it provides a custom object baseclass that adds forward-pointing special names.In Python 2, iterators must have a next() method (as well as __iter__); this method was renamed to __next__ in Python 3. By not using the future.builtins.object version you are simply missing the next -> __next__ alias provided in Python 2.See the source code for future.types.newobject.py:Note that builtins will return standard built-in objects if you are running Python 3, the module only returns shims like these for Python 2.You could simply add that same alias yourself:


Answer URL
https://docs.python.org/3/library/stdtypes.html#typeiter
