Natural Text
My question is more theoretical than practical, I've found more answers that explains how but not why should we use a list in a subprocess.Popen call.For example as is known:Then I was messing around in UNIX and found something interesting:Probably both execve and the list model that subprocess use are someway related, but can anyone give a good explanation for this?Thanks in advance.
The underlying C-level representation is a *char [] array.  Representing this as a list in Python is just a very natural and transparent mapping.You can use a string instead of a list with shell=True; the shell is then responsible for parsing the command line into a * char [] array.  However, the shell adds a number of pesky complexities; see the many questions for why you want to avoid shell=True for a detailed explanation.The command line arguments argv and the environment envp are just two of many OS-level structures which are essentially a null-terminated arrays of strings.
A process is an OS level abstraction — to create a process, you have to use OS API that dictates what you should use. It is not necessary to use a list e.g., a string (lpCommandLine) is the native interface on Windows (CreateProcess()). POSIX uses execv() and therefore the native interface is a sequence of arguments (argv). Naturally, subprocess Python module uses these interfaces to run external commands (create new processes).The technical (uninsteresting) answer is that in "why we must", the "must" part is not correct as Windows demonstrates.To understand "why it is", you could ask the creators of CreateProcess(), execv() functions.To understand "why we should" use a list, look at the table of contents for Unix (list) and Windows (string): How Command Line Parameters Are Parsed — the task that should be simple is complicated on Windows.The main difference is that on POSIX the caller is responsible for splitting a command line into separate parameters. While on Windows the command itself parses its parameters. Different programs may and do use different algorithms to parse the parameters. subprocess module uses MS C runtime rules (subprocess.list2cmdline()), to combine args list into the command line. It is much harder for a programmer to understand how the parameters might be parsed on Windows.


Answer URL
https://docs.python.org/3/library/subprocess.html#converting-an-argument-sequence-to-a-string-on-windows
