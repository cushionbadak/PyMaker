Natural Text
I would like to write a Python script to automate the process of adding the dependencies of a npm package to my Open Build Service project. I have a shell function:this is the Python script I have at the moment (the package.json file being imported is the package.json of the npm package):I would like to pass the key variable to the cpobsn shell function (i.e., I would like this Python loop to run the shell command cpobsn key on every iteration). How do I do this?
Functions are good for interactive use, but this seems like a case where you want a stand-alone script instead.If you want to have a function you can load into your .zshrc or similar, you could do something like the Python __name__ == '__main__' idiom in the script file, too.  But renaming the file to the name of the command and getting rid of the function would seem like the simplest way to achieve your end goal here.Save this as, say, $HOME/bin/cpobsn and chmod +x it.  Make sure $HOME/bin is in your PATH, too.(Note the addition of proper quotes for good measure.)Now, you can call it from Python, as with any regular external command.The choice between subprocess.call() and subprocess.check_call() will depend on whether the script returns a useful exit code.  It doesn't at the moment, so actually call would be sufficient; on the other hand, you should fix that, and use check_call to have Python tell you when some part of the shell script failed.Minimally, adding set -e to the shell script will make it check for errors, and abort if anything fails; but this often requires refactoring to avoid terminating on non-fatal errors (like grep not returning a result -- this is technically an error, but often an acceptable part of normal flow).
Using Python string concatenation with os.system is a great security risk, a key "foo; rm -rf /" for example would delete all your files.Python's subprocess module is much more suited for this use:
Just input key into os.system as well.


Answer URL
https://docs.python.org/3/library/subprocess.html
