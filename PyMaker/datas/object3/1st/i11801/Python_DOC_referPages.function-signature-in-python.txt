Natural Text
In C++ two functions with the same name can be created as long as the signature is different.So for example myfunc(int x) is different from myfunc(float x).In python you cannot do this, so, do you need to define functions with different names, or is there a better way to handle this situation?
In Python3.4+ you can use the functools.singledispatch decorator, which allows you to define a generic function and then register typed implementations against it.From the docsGeneric function:Typed functions:There's no built-in solution for earlier releases of Python, but Guido van Rossum blogged about a solution for python2 using decorators.  (Edit: there is also a backport of the 3.4 functionality for pythons 2.6 - 3.3 on pypi)Edit:Of course, one of the advantages of using Python is that the the same code can often handle ints and floats without explicit dispatching on type, which is one of the reasons why the functionality has only recently been added.
Python doesn't really care whether an argument is an integer or a float. It's dynamically typed. You can do, for example, this:And you can call this function with any number.It's also possible to do this:This will work with numbers, strings (!), arrays (!!) and anything that can be multiplied by a number (if some class provides a method for this).
In python, you have to create only one method, but you can check what arguments can get passed, and if they are different arguments (ie: one is a float and another is an int) then you can differentiate two functions. In code this would look like:
As ForceBru said Python dosen't realy care about parameter type , so if you do , you can handle it yourself:
You could have the function itself do different things based on the types and number of parameters.


Answer URL
https://docs.python.org/3/library/functools.html
