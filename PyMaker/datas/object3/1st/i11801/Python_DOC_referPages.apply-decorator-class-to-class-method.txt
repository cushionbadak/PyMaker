Natural Text
Consider following decorator:And following signal, and class with method I need to decorate:As you can see I need to pass decorator some additional arguments, and in that case - signal I need to connect to.How to pass self as well?The reason I ask that, because it fails with following error if I try to apply this decorator to method, not a function:TypeError: update() missing 1 required positional argument: 'self'More specifically, if I try to emit the signal:And yes, I use "signalslot" in that project.
self must be a positional argument, not a keyword argument:If you need to differentiate between functions and methods, implement a descriptor instead.However, if you are trying to connect a signal, you'll need to do so to a bound method on each instance. You'd be better of connecting your signals at instance creation time:When manager.__init__ is called, you have have a new instance and it is then you can create one self.update bound method to receive the signal.You can still use decorator for this, but you can, at best register at class level what functions can act as signal handlers; you'd have to enumerate all functions on your class at instance-creation time and bind all those signals then:and a separate class decorator to wrap the class.__init__ method:Decorate the class as well as the signal handlers:The decorator then connects all handlers each time a new instance is created:You may want to check if the signalslot project uses weak references to track signal handlers however, as you'll either have a problem of circular references to any instances you create (where a manager instance is kept alive because a signal is still referencing a bound method to that instance), or where your signal handlers are cleaned up too early because your bound methods are stored in weak references, and thus won't have any other references to keep them alive.Looking at the signalslot source code, I see that the current iteration of the project uses hard references, so your manager instances are never going to be cleared unless you do so explicitly. For this reason alone I'd avoid using methods as signal handlers. Take a look at using python WeakSet to enable a callback functionality if you want to use weak references instead.


Answer URL
https://docs.python.org/3/howto/descriptor.html
