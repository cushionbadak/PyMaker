Natural Text
For example, given:I want to have:I tried a loop that goes like; add the index of where the character is found, then replace it with '' so the next time the loop goes through, it passes on to the next character. However, that loops doesn't work for other reasons, and I'm stuck with no idea how to proceed.
A simple dictionary comprehension should do the trick:A simple trial:How It WorksList comprehensions are often used in Python as syntactic sugar for a for loop. Instead of writinglist comprehensions essentially let you condense this series of statements into a single line:Whenever you see a list comprehension, you should remember that it's just a condensed version of the original three line statement. They are effectively identical - the only benefit offered here is conciseness.A similar, related species is the dictionary comprehension. It is similar to the list comprehension, except that it allows you to specify both the keys and values at the same time.An example of a dictionary comprehension:In the answer I provide, I have simply used a dictionary comprehension thatPulls out keys from my_listAssigns a list of indices for each key from my_list as the corresponding valueSyntactically, it expands out into a fairly complicated program that reads like this:Here, enumerate is a standard library function that returns a list of tuples. The first element of each tuple refers to an index of the list, and the second element refers to the value at that index in the list.Observe:That is the power of enumerate. EfficiencyAs always, premature optimisation is the root of all evil. It is indeed true that this implementation is inefficient: it duplicates work, and runs in quadratic time. The important thing, however, is to ask if it is okay for the specific task you have. For relatively small lists, this is sufficient. You can look at certain optimisations. @wilinx's way works well. @Rob in the comments suggests iterating over set(my_list), which prevents duplicated work. 
Use enumerate and setdefault:
Why not use defaultdict from itertools instead:
All you need is to do is use right DataType for you. Check this link - python doc. Good Luck. Hope this helps.Source: https://docs.python.org/2/library/collections.html#collections.OrderedDict


Answer URL
