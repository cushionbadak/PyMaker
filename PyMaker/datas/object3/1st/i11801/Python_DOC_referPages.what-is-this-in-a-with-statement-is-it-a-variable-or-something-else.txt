Natural Text
I'm using Python 3.x. Could someone please explain to me what file in the below block of code is?When I ran the above code, print(file) produced this:I don't understand this. I can see that it's related to the with statement, but it doesn't really look like a variable.So what is file? Is it a variable, or something else? If it is a variable, what data type is it?
Yes, file is a variable, referencing whatever the context manager produced by open() returned. It happens to be the same object. In other words, file references a file object.You could also have done this, to the same effect here:so the file is automatically closed. That's because file objects are context managers; they support the context manager protocol. Technically speaking, the with context_manager as <name> target variable is bound to the the return value of context_manager.__enter__(), but a file object returns itself from that method, and the file.__exit__() method closes the file. See the with compound statement documentation.Now, when you print an object that doesn't have a string representation, it'll print using the repr() function:so yes, this is just another object, one with a custom, helpful representation. File objects implement the object.__repr__() hook to produce this:The name of the file object may also be confusing here. That's because file objects in Python are part of a series of objects defined by the io module; a TextIOWrapper object wraps a buffer (here a BufferedReader, which in turn will wrap the raw, binary file object in the form of a FileIO object:This is all just tech detail you don't normally need to worry about. Each object performs a specific function, and someone needing to do more advanced I/O wrangling can mix and match these.
That's the text representation of an object when it doesn't have its own __repr__ or __str__.  file is a variable which points to an object of that was created in the with statement.
It is the object that is returned by the open(filename, "a") context manager call. The _io.TextIOWrapper is a file-like object that you can do things with like read, write, seek, and close. When you do this:The method thing1.__enter__ gets called, and whatever it returns gets assigned to the variable/name thing2. So yes, in your example file is indeed a variable that has been assigned to whatever object has been returned by the with context manager. In this case it is a _io.TextIOWrapper object. This is why when you do:You get: ...which is just the string representation of that kind of object. You can manually get the same object this way:Note that the object returned by open(filename, "a").__enter__() is the same object you would get from open(filename, "a"). This is because the __enter__() method of the _io.TextIOWrapper object just returns self. However, this is not always the case with other objects. If you find all of this confusing I suggest reading up a bit more about the with statement. 


Answer URL
https://docs.python.org/3/reference/datamodel.html#with-statement-context-managers
https://docs.python.org/3/reference/compound_stmts.html#with
https://docs.python.org/3/reference/datamodel.html#object.__repr__
https://docs.python.org/3/library/io.html
https://docs.python.org/3/library/io.html#io.TextIOWrapper
https://docs.python.org/3/library/io.html#io.BufferedReader
https://docs.python.org/3/library/io.html#io.FileIO
https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects
https://docs.python.org/3/reference/compound_stmts.html#with
