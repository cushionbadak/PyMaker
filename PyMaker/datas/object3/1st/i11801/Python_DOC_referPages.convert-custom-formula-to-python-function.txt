Natural Text
This question already has an answer here:creating a function object from a string                    3 answers                Consider that we have the following input Is there any python library that lets me parse the formula and convert it into a python function representation.eg.I am currently looking into something likeand then process this ast tree further. Do you know of any cleaner alternate solution? Any help or insight is much appreciated!
You could use the re module to do what you want via regular-expression pattern matching and relatively straight-forward text substitution.Output:
You can use what's called string formatting to accomplish this.Will give you the result of ((FooFunction() + BarFunction() - (BazFunction()/2))But I believe the functions will execute when the module is loaded, so perhaps a better solution would beThis will give you the string '((FooFunction() + BarFunction() - (BazFunction()/2))' which you can then execute at any time with the eval function.
If you change the syntax used in the formulas slightly, (another) way to do this — as I mentioned in a comment — would be to use string.Template substitution.Out of curiosity I decided to find out if this other approach was viable — and consequently was able to come up with better answer in the sense that not only is it simpler than my other one, it's also a little more flexible in the sense that it would be easy to add arguments to the functions being called as noted in a comment below.As a final note, notice that string.Template supports different kinds of Advanced usage which would allow you to fine-tune the expression syntax even further — because internally it uses the re module (in a more sophisticated way than I did in my original answer).For the cases where the mapped functions all return values that can be represented as Python literals  — like numbers — and aren't being called just for the side-effects they produce, you could make the following modification which effectively cache (aka memoize) the results:Output:


Answer URL
https://docs.python.org/3/library/functools.html#functools.lru_cache
