Natural Text
I have a list, call it test, with 3 columns, each column has 891 elements, each element is a pair of floats.I want to create a numpy matrix with 3 columns, each of which has 891 elements, each element is the first entry from the pair of floats.I have the following code:This works, but can I write it in a more efficient and elegant way?EDIT:Example:I want:
Two features of Python to learn: iterables, and generator expressions.You have given no example data, so we can't verify we see the same behaviour as you. It's always best to put in your question a minimal, complete, verifiable example for us to execute.Even better if the names are more descriptive of the intent, than just x or test.Instead of fiddling with sequence index, prefer iterating over the iterables, to get the items directly:Instead of appending items one at a time, prefer a list comprehension, if it helps readability:Sometimes (not in this case) you don't even need the list to all exist at once; you just need to iterate over the items, then discard that sequence. Then a generator expression is better; look that one up when you have time.Be careful to see these as options for improving readability. They are not always appropriate, and sometimes they can make your code too dense and hard to read.
Simple as that. One might argue it is not as memory efficient as could be, since you are also storing the elements that you are not interested in, at least temporarily; but that pales in comparison anyway, to the memory use of your nested python datastructures.


Answer URL
https://docs.python.org/3/library/stdtypes.html#iterator-types
https://docs.python.org/3/library/stdtypes.html#list
