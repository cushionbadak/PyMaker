Natural Text
I have 2 lists: For every ticker in l1 I want to find the closest element from l2 after it, so the output should beThe right way seems to be to explicitely iterate in parallel over both lists in reverse order, but I was hoping for a more "pythonic" solution..EDIT: I do want an optimal complexity solution, which (assuming the lists are sorted), I think is O(max(len(l1), len(l2))).
You could use a list comprehension in combination with min method by passing a lambda expression.OutputIf you want a more efficient solution you can write your own insert sort algorithm.
If your lists are long, it can be worth pre-processing l2 in order to be able to use bisect to find the closest date. Then, finding the closest date to a date in l1 will be O(log(len(l2)) instead of O(len(l2)) with min.To address your last comment, here is another solution using iterators and generators, that goes over l1 and only the necessary part of the start of l2:Some tests:
Assuming, as in your example, dates are in chronological order, you can take advantage of the fact your lists are sorted. For example, if you are happy to use a 3rd party library, you can use NumPy via np.searchsorted, a faster version of bisect from the standard library:
You can sort with a key function that calculates the time deltas between the two dates.This outputs:Note that the date format string should be %m/%d/%Y, for month, day and year, respectively.


Answer URL
https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior
