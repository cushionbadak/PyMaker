Natural Text
I have a listI am looking to write a function get_n_preceeding(a, list_of_numbers, n), which takes an argument a and returns n numbers which preceded that number in list_of_numbers.For example:This should return 2 numbers preceding 4 in the list.i.e. ans = [2,3]Similarly, if I want 2 numbers preceding 1, it should give the result as [9,10] # This I think, is the tricky part.Similarly, I am looking to write another function get_n_succeeding(a, list_of_numbers, b)If I use get_n_succeeding(9, my_list, 2), it should return [10,1].I tried using zip operator but couldn't do it.Is there any better way of doing this?
I used list comprehension for get_n_preceeding and just a for loop for the succeeding, subtracting the length of the array if the succeeding index goes out of bounds.
Use array.index() to find the position, then slice the array accordingly:As noted in the docs, array.index() will find the first matching element, and ignore any later duplicates.
You can use the .index() method to find a's index.
You can use a generator and enumerate(iterable):Test:Output:
The modulus operator (%) is often a good choice when you need an expression to wrap or repeat regularly. For example, this solution is simple and robust against edge cases (e.g., n > len(lst)):Results:


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
