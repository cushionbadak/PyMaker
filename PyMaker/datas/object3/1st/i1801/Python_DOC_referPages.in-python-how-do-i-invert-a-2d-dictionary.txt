Natural Text
I have a dictionary in the following formand I need the reverse index dictionary, in this form:BasicallySo essentially, I need the keys of the values as keys, and the keys as keys of values, while at the same time joining results for duplicate new keys etc.I've tried to do if this makes any senseBut I'm getting an error Which from what I understand is because dict.values() .keys() .items() return "views" instead of the actual element itself, but I don't know hot to go about fixing this problem.Also is there a more efficient solution I should consider, because my actual dict is pretty large (~10k keys), and the resulting inverse dict will also be large  ( >3k keys)
using collections.defaultdict(dict) and a double loop it's rather easy:inverted isusing defaultdict avoids to test if the entry already exists & creates a dictionary-value if it doesn't. So, just add the key/values brainlessly in the expected order.Note that those problems where you need to deal items into several objects are hardly solved using comprehensions.
You could use setdefault:OutputThe function setdefault has a similar effect to the usage of defaultdict.
Another solution sans standard lib... But Jean-Francois Fabre's answer is more concise and probably easier to modularize. When in doubt, use the standard lib.


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/stdtypes.html#dict.setdefault
