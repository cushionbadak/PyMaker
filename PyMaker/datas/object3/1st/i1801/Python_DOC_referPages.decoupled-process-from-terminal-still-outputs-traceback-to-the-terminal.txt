Natural Text
While testing an application I made using a rest api I discovered this behaviour which I don't understand.Lets start by reproducing a similar error as follows -In file call.py -Note that this file has code that manifests itself visually for example a GUI that runs forever. Here I am just showing you a representation and deliberately making it raise an Exception to show you the issue. Making a get request and then trying to parse the result as json will raise a JSONDecodeError.Since I want to run this as a daemon process, I decouple this process from the terminal that started it using the following trick -In file start.py -And then I execute python3 start.pyIt apparently decouples the process because if there are no exceptions the visual manifestation runs perfectly.However in case of an exception I immediately see this output in the terminal, even though I got a new prompt after calling python3 start.py -Now, I understand that all exceptions MUST be handled in the program itself. And I have done it after this strange issue, but what is not clear to me is why did this happen at all in the first place?It doesn't happen if I quit the terminal and restart the terminal (the visual manifestation gets stuck in case of a Traceback, and no output on any terminal as expected)Why is a decoupled process behaving this way?NOTE: Decoupling is imperative to me. It is imperative that the GUI run as a background or daemon process and that the terminal that spawns it is freed from it.
by "decoupled", I assume you mean you want the stdout/stderr to go to /dev/null?  assuming that's what you mean, that's not what you've told your code to dofrom the docs:stdin, stdout and stderr specify the executed program’s standard input, standard output and standard error file handles, respectively. Valid values are PIPE, DEVNULL, an existing file descriptor (a positive integer), an existing file object, and None.With the default settings of None, no redirection will occur; the child’s file handles will be inherited from the parent. you therefore probably want to be doing:based on the OPs comment, I think they might be after a tool like GNU screen or tmux.  terminal multiplexers, like these, allow you to create a virtual terminal that you can disconnect from and reconnect to at need.  these answers see https://askubuntu.com/a/220880/106239 and  https://askubuntu.com/a/8657/106239 have examples for tmux and screen respectively


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.Popen
