Natural Text
Suppose I have a big text file in the following formThere are in total 8 keys which will always be in the order of "Surname","Name","Age","Weight","Height","School","Siblings","Quote" which I know beforehand.  As you can see, some profiles do not have the full set of variables. The only thing you can be sure will exist is the name. I want to create a pandas dataframe with each observation as a row and each column as a key. In the case of James, since he does not have the entries in "School" and "Sibling" I would like the entries of those cells to be the numpy nan object. My attempt is using something like (?:\[Surname: \"()\"\]) for every variable. But even for the single case of surname I run into problems. If surname does not exist, it returns no place holders just the empty list.Update:As an example, I would like the return for monica's profile to be('','Monica','','33','','','','I am looking forward to christmas')
You can parse the file data, group the results, and pass to a dataframe:Output:
Building on @WiktorStribi≈ºew comment, you could use groupby (from itertools) to group the lines into empty lines and data lines, for instance like this:OutputNote: This creates a dictionary where the keys are the field names and the values are the values of each, this format does not match your intended output, but I believe is more complete that what you requested. In any case you can easily convert from this format into the desired tuple format.ExplanationThe groupby function from itertools groups the input data into contiguous  groups of empty lines and record lines. Then you only need to process the groups that are not empty. The processing is simple for each line try to match a pattern if the pattern is matched break, assuming the lines are exclusive for each match update the record dictionary with the value of the field, leveraging named groups.
You can rewrite your data file. The code parses your original file into classes D, then uses csv.DictWriter to write it into a normal style csv that should be readable by pandas:Create demo file:Itermediate class:Parsing and rewriting:    Check what was written:Output:
Create a list of (key,value) tuples for each info block with re.findall(), and put them in separate dictionaries: 


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
