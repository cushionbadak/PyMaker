Natural Text
I'm implementing a web API using aiohttp, deployed using gunicorn with UVloop enabled --worker-class aiohttp.GunicornUVLoopWebWorker. Therefore, my code always runs in an asynchronous context. I had the ideia of implementing parallel jobs in the handling of requests for better performance.I'm not using asyncio because i want Parallelism, not Concurrency.I'm aware of multiprocessing and the GIL problem in python. But joining a process also applies to my question.Here is an example:Taking into account that thread.join() or process.join() blocks the current thread, this will block the event loop (As far as my knowledge goes). How can I join asynchronously? What I want can be represented figuratively as this: await thread.join() or await process.join(). Update:Thanks to @user4815162342 I was able to write proper code for my project:Middleware:Util:
I found a solution using multiprocesses. It can be done using a Pool. The standard lib provides some "async" methods (It's not really async, it just separates the initialization of the process from the process' output): apply_asyncUsing a simple async wrapper, I managed to deliver what I wanted:outputs:Parallelism with asyncio :)


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor
