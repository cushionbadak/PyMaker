Natural Text
I need to have a method to easily create an instance of a datetime.datetime subclass, given an existing datetime.datetime() instance.Say I have the following contrived example:I'm using a class like this (but a bit more complex), to use in a SQLAlchemy model; you can tell SQLAlchemy to map a custom class to a supported DateTime column value with a TypeDecorator class; e.g.:I can't use return SerializableDateTime(value) here because the default datetime.datetime.__new__() method doesn't accept a datetime.datetime() instance:Is there a shortcut that avoids having to copy value.year, value.month, etc. all the way down to the timezone into a constructor?
Although you can give your subclass a __new__ method that detects a single datetime.datetime instance then does all the copying there, I'd actually give the class a classmethod just to handle this case, so your SQLAlchemy code would look like:We can make use of the pickle support the datetime.datetime() class already implements; types implement the __reduce_ex__ hook (usually building on higher-level methods like __getnewargs__), and for datetime.datetime() instances this hook returns just the datetime.datetime type and an args tuple, meaning that as long as you have a subclass with the same internal state we can create a new copy with the same state by applying the args tuple back to your new type. The __reduce_ex__ method can vary output by pickle protocol, but as long as you pass in pickle.HIGHEST_PROTOCOL you are guaranteed to get the full supported range of values.The args tuple consists of one or two values, the second being the timezone:That first value in the args tuple is a bytes value that represents all attributes of the object (excepting the timezone), and the constructor for datetime accepts that same bytes value (plus an optional timezone):Since your subclass accepts the same arguments, you can make use of the args tuple to create a copy; we can use the first value to guard against changes in future Python versions by asserting it's still a parent class of ours: This lets you create instances of your subclass as a copy:While using the pickle __reduce_ex__ hook may seem somewhat hackish, this is the actual protocol used to create copies of datetime.datetime instances with the copy module as well, and by using __reduce_ex__(HIGHEST_PROTOCOL) you ensure that all relevant state is copied whatever the Python version you are using.


Answer URL
https://docs.python.org/3/library/pickle.html#object.__reduce_ex__
https://docs.python.org/3/library/pickle.html#object.__getnewargs__
https://docs.python.org/3/library/pickle.html#pickle.HIGHEST_PROTOCOL
https://docs.python.org/3/library/copy.html
https://docs.python.org/3/whatsnew/3.6.html#pep-495-local-time-disambiguation
