Natural Text
Here's my situation:I have one list of product names such as:BLUEAPPLE, GREENBUTTON20, 400100DUCK20 (len = 9000)and a list of official item names such as:BLUEAPPLE, GREENBUTTON, 100DUCK. (len = 2700)As I'll be applying fuzzy string matching to product - items, I want to strip away the unnecessary numbers from the product names -- but keep numbers that are represented in official item names.I came up with a solution, but the issue is it works very slowly.Example:  This function is mapped so that it's looping over every product in the product list.I've been trying to figure out a way to use lambdas here, maps, applys, etc, but can't quite wrap my head around it. What would be the most efficient way to accomplish what I am trying to do, either with straight lists, or in pandas? Alternatively, I'm getting these item and product lists from a postgres database, so if you think it'd be faster to do in psql I'd go that route.
difflib.get_close_matches() will at least help clean up your code and will probably run faster.There are still going to be a lot of comparisons taking place, it has to match every string in p_names to every string in i_names.Similar to your approach using a regular expressions to find a match:
Try this:Also, make sure you are using the normal python interpreter.  IPython and other interpreters with debugging features are a LOT slower than the regular interpreter.You might want to consider doing some set operations first though.  Here's a little example:You kind of lose the order in which they appeared, but maybe you can find a way to modify this for your use.


Answer URL
https://docs.python.org/3/library/difflib.html#difflib.get_close_matches
