Natural Text
Data which I'm receiving is bytes therefore I need temporary file-like container. To my best knowledge BytesIO is file-like object, but json.load() doesn't work on it:One method that works:Another one, presumably more efficient?Do I have more (better) alternatives? If no, which one of the above methods should be preferred?
I would recommend using TextIOWrapper for two reasons:It gives you more control: Not only can you specify an encoding, but also how newlines should be handled (which would be relevant if you were parsing csv data, for example) and a number of other things.It allows you to process the data in a streaming manner. Imagine you have a 10MB file that's not valid json - fileobj.read().decode() would needlessly load all 10MB into memory, but if you use TextIOWrapper then only a few bytes would be loaded before a JsonDecodeError is thrown.
Since you are dealing with JSON, which is purely texts, you should use io.StringIO instead of io.BytesIO:
If you are using Python 3.5, upgrade to 3.6+3.53.6


Answer URL
https://docs.python.org/3/library/io.html#io.TextIOWrapper
