Natural Text
There is given a dictionary with few points with their distance where key - name of the point, and value - it's distance, i.e.The question is to find f.e. 6 shortest routes in order for 3 different points from the dict, so 6 lowest sums of 3 different values from given dict values in order.I tried to do this in following way - get distances into a list, then sort it to:And then just get first 6 combinations, so:5+7+155+7+18  5+7+22  5+7+33  7+15+18and so on...But as you can see, it isn't right, because 4. 5+7+33 = 45 while  5. 7+15+18 = 40, so it should be before it, as lowest sum, so "shortest" distance. I can't figure out any algorithm and solution to deal with this. Any tips how it can be done?Thank you.
Once you have the example_list = [5, 7, 15, 18, 22, 33], you can use this one liner to get the list of combination by 3 elements sorted by their sum:Then pick the first six.If you want also to keep track of the original keys:
You can use the powerset recipes from itertools, combine it with collection.defaultdict and use only those with 3 element tuples. This will overproduce data though - its not optimal if you have huge dictionaries:Output:
You can use the powerset receip from itertools, combine it with colleciton.defaultdict and use only those with 3 element tuples:Output:


Answer URL
https://docs.python.org/3/library/itertools.html#recipes
https://docs.python.org/3/library/collections.html#collections.defaultdict
