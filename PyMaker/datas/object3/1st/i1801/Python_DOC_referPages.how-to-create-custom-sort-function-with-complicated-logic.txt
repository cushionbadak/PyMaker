Natural Text
I'm try to sort a list of objects based on some non-trivial comparison logic, but finding it difficult because in Python the custom sort function takes only 1 argument. In Java, for example, the sort function would have references to object1 and object2, making it straightforward to compare them.The expected sorted order should be:I don't know how to even start implementing the required logic, so I would be grateful for a push in the right direction.
You can make sorting a property of your class, then use sorted. The benefit of this method: for no additional effort, you are able to compare objects with each other via comparison operators such as >, <, ==.Specify __eq__ and __lt__ methodsAt a minimum you should specify __eq__ and __lt__ methods:Adding other comparison methods such as __gt__, __ge__, etc, may be simplified via functools.total_ordering:Example
I would use the following key function:OutputThe key function creates a tuple to be used as key, the first element is the letter, the second element is 0 if the node is of type 'start', 1 if is of type 'end'. The last element is negative if it is of type 'start', positive if it is of type 'end'.
You want to use the cmp argument to sorted which takes a comparison function of 2 arguments:https://docs.python.org/2/library/functions.html#sortedFor your reference, the key function would compute a derived value from each item being sorted and sort according to that value, e.g. to sort a list of pairs by the second value in the pair you could do: sorted(items, key=lambda x: x[1])


Answer URL
https://docs.python.org/3/library/functools.html#functools.total_ordering
https://docs.python.org/3/library/functools.html#functools.total_ordering
