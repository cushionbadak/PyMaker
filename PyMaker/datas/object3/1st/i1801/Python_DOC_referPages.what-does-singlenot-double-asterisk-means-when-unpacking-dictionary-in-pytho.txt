Natural Text
Can anyone explain the difference when unpacking the dictionary using single or double asterisk? You can mention their difference when used in function parameters, only if it is relevant here, which I don't think so.However, there may be some relevance, because they share the same asterisk syntax.Besides, why the key of dictionary is not allowed to be non-string when passed as function arguments in THIS situation? Are there any exceptions? Why they design Python in this way, is it because the compiler can't deduce the types in here or something?Thanks!
When dictionaries are iterated as lists the iteration takes the keys of it, for exampleis the same asin this case, unpacking as *tmp is equivalent to *tmp.keys(), ignoring the values. If you want to use the values you can use *tmp.values().Double asterisk is used for when you define a function with keyword parameters such asorhere you can store the parameters in a dictionary and pass it as **tmp. In the first case keys must be strings with the names of the parameter defined in the function firm. And in the second case you can work with kwargs as a dictionary inside the function.
In this case:foo(*tmp) mean foo(1, 3)foo(**tmp) mean foo(1=2, 3=4), which will raise an error since 1 can't be an argument. Arg must be strings and (thanks @ Alexander Reynolds  for pointing this out) must start with underscore or alphabetical character. An argument must be a valid Python identifier. This mean you can't even do something like this:  orSee python_basic_syntax for more details. 
It is a Extended Iterable Unpacking.For single *,Learn more here. 
I think the ** double asterisk in function parameter and unpacking dictionary means intuitively in this way:All the syntax make sense now. And it is the same for single asterisk. It is only worth noting that if you use single asterisk to unpack dictionary, you are actually trying to unpack it in a list way, and only key of dictionary are unpacked.


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#identifiers
https://docs.python.org/3/reference/expressions.html#calls
