Natural Text
Is there any way to do something like thisor do I have to create the values first somewhere else and make a dictionary after that.
Your code will not work, since the dict variable (which is, by the way, shadowing the builtin dict function) is not yet defined before the {...} literal has been evaluated, so it can not be used within the {...}.Instead, you could create an iterable of numbers, e.g. using itertools.count or just iter(range(1, some_number)), and then get the next values from that iterable.Or use the dict function with zip to combine the list of keys with their values:(This also works with steps other than 1, or in fact with arbitrary lists of values, not just with numbers. In the case of steps always being 1, enumerate might indeed be the simpler alternative.)
If the increment is always 1 you could use enumerate:OutputIf the increment is custom you could use accumulate with add:Note that the first value in increments corresponds to the value of the first key. UPDATEAs mentioned by @tobias_k you could use accumulate without passing add:
Here is a rather silly approach. Define your dict literal within a string, and then use ast.parse to get the value of each expression defining its keys and values. Then you can evaluate each one in turn, providing a custom locals argument to eval in order to forcibly make the dictionary object accessible while the dictionary is still being created.Result:
Normally one use defaultict for something likeBut one can have more fun definitions:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.accumulate
https://docs.python.org/3/library/operator.html#operator.add
