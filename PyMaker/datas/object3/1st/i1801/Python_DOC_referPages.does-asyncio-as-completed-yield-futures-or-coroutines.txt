Natural Text
From the asyncio docs:asyncio.as_completed(aws, *, loop=None, timeout=None)Run awaitable objects in the aws set concurrently. Return an iterator  of Future objects. Each Future object returned represents the earliest  result from the set of the remaining awaitables.I would assume each of these Future objects has the methods described in asyncio.Future: .cancelled(), .exception(), and .result().  But it appears that the yielded elements are just coroutines, not Future objects.  What am I missing?This seems to defeat the description of .as_completed().  How is the coroutine "completed" if I need to await it?Ultimately, the reason I care about this is because I'd like to let exceptions bubble up as they do in asyncio.gather(..., return_exceptions=True).  Consider adding on one bogus URL that will raise when session.request() is called:What I would like to be able to do is something like this (using the methods of a Future object, but these aren't Future objects at all, which is the problem):
What I would like to be able to do is something like this [...]Perhaps not as convenient, but you should be able to extract the exception with code like this:This [yielding coroutines rather than futures] seems to defeat the description of .as_completed(). How is the coroutine "completed" if I need to await it?It's not. When asyncio.as_completed was first implemented, asynchronous iterators didn't exist. Without asynchronous iteration there was no way to return the futures as they complete, so as_completed sort of faked it by yielding (immediately) dummy awaitables which one has to await to get the actual result.Even if as_completed yielded actual futures, it wouldn't help with your use case because those futures wouldn't complete without someone awaiting them. To provide the expected semantics of as_completed yielding completed futures, as_completed needs to implement asynchronous iteration, whose equivalent of __next__ can await.The surprising behavior of as_completed has been brought up before, and I have already filed an issue to fix it by providing async iteration. Once it is implemented, your original code will work with just the for changed to async for.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.as_completed
https://docs.python.org/3/library/asyncio-future.html#asyncio.Future
