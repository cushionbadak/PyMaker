Natural Text
I have seen similar questions, but they did not answer why python __lt__ has higher priority than __gt__?Quick example, let me give a superclass and a subclass:Here in superclass Person, I created a __lt__ method, to compare based on Person's self.id. In sub class SubPerson, I created a __gt__ method to compare based on the self.name.What I found is that if I created a number of SubPerson instances in a list:What I found is that:if __lt__ is defined in superclass, then even if you define __gt__ in subclass, it will still sort by the __lt__ method in superclassBut if it is the other way around, define __gt__ in superclass and __lt__ in subclass, then it will then sort by __lt__ in subclassIf the two method names are the same (both lt or both gt), obviously, the subclass will override superclass, as it should be. But it seems when they are different, it follows a different rule: by whatever __lt__ defines. I've also noticed that even if in one class, if both __lt__ and __gt__ are defined (based on different things, it will still sort by __lt__ method)SO back to my question, is my observation true or not? and since I am a beginner, and I have not read through the whole python documents, can somebody point me out where in the documents that this rule is written.
list.sort uses only < comparisons. This is documented.Binary operators like < will try the left-hand operand's method first unless the right-hand operand's class is a subclass of the left-hand operand's class. The other operand's method will only be considered if the first method is missing or returns NotImplemented. The left-hand operand's method for < is __lt__, and the right-hand operand's method is __gt__. This is also documented.Since all your list elements have the same class and __lt__ always succeeds, only the __lt__ methods end up getting called.


Answer URL
https://docs.python.org/3/library/stdtypes.html#list.sort
https://docs.python.org/3/reference/datamodel.html#object.__lt__
https://docs.python.org/3/library/stdtypes.html#list.sort
https://docs.python.org/3/library/functools.html#functools.total_ordering
