Natural Text
Applying Documentation to Multi-Dispatched FunctionsI am using the multipledispatch package, in a fashion similar to the example code below.  I want to be able to see the docstring text when I ask for help(my_add) in the Python command line, but instead all I see is information about the decorator.Functools.wraps must be the way to do it, but how?I have looked up functools.wraps, which I'm sure is what I want to use.  I have found examples of how to use it, such as this and this.But I still don't entirely understand two issues:How to apply the functools.wraps to external decorators that I don't "own".How to apply it specifically to this case with multiple dispatch, since the function I want to wrap will have multiple docstrings associated with the same function name.Example: Decorated Function CreationBelow is an example to help explain.(Traceback details removed...)I wanted to show that error and the different dispatches just to show that that part is working as I want it (looking for the matched dispatch and calling the associated "flavor" of the function).Example: Calling help on the Decorated Function Fails!But next, if I try to look at the help, instead of seeing the simple docstring that I have provided, I see the docstring associated with the @dispatch decorator.etc.I'm not even sure what it should show, since there are potentially 2 conflicting docstrings I'd like to push forward.  So, I tried to see if I could call help on a function that's actually run, but then of course it gives me help on the returned data type.  E.g.,
The functools.wraps() decorator would have to be part of the decorator implementation and you can't apply it after the fact. The issue here is that the decorator returns an instance of a custom class, and help() can only show documentation for the class of that instance.The Dispatcher() instance the decorator returns already has a __doc__ attribute, one which lists the doc strings of all decorated functions. From the documentation you linked:The Dispatcher creates a detailed docstring automatically. To add a description of the multimethod itself, provide it when creating the Dispatcher.The docstring is there for your example too:(note that the docstrings are reflected correctly from your example, complete with errors).The real issue here is that help() can only print the __doc__ string of the class, so print(type(my_add).__doc__)) is used as a starting point. This is not something that can easily be changed; just stick to printing the __doc__ attribute of the instance directly.


Answer URL
https://docs.python.org/3/library/functools.html
