Natural Text
How to get unittest.mock.Mock().assert_called_once like behavior with unittest.mock.Mock().assert_called_once_with, as assert_called_once s not available below python 3.6 . Basically what I want is checking if the method gets called exactly once, no matter with which argument or how many argument. I tried unittest.mock.ANY, but seems it isn't what I want.   
All that assert_called_once() does is assert that the Mock.call_count attribute is 1; you can trivially do the same test:If you tried to use Mock.assert_called_once_with() with the ANY object, take into account that that object stands for the value of one of the arguments. Mock.assert_called_once_with(ANY) only matches if the object has been called with exactly one argument, and the value of that argument doesn't matter:You can't use the ANY object together with the *called_with assertions to mean 'any number of arguments'. Only in an assertion that takes call() objects would ANY be interpreted as any number of arguments; so you could also use Mock.assert_has_calls() here, passing in a list with a single ANY element:


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.call_count
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.call
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_has_calls
