Natural Text
I need a function to split an iterable into chunks with the option of having an overlap between the chunks.I wrote the following code, which gives me the correct output but that is quite inefficient (slow). I can't figure out how to speed it up. Is there a better method?Testing results so far:With longer list as input:From other tests (not reported here), it turned out that for small lists len(list) <= 100, my original implementation split_overlap() is the fastest. But for anything larger than that, gen_split_overlap() is the most efficient solution so far.
Sometimes readability counts vs. speed. A simple generator that iterates over indices, producing slices gets the job done in reasonable time:If you want to handle potentially infinite iterables, you just have to keep overlap items from the previous yield and slice size - overlap new items:
If it is must to meet the criterion of the chunk sizeYou can create you custom function using zip and a list comprehension to achieve this as:Sample Run:If remaining chunks from the end not meeting the criterion of chunk size are also desiredIf you want to display the chunks even if the doesn't meet the pre-requisite of the chunk size, then you should be using the itertools.zip_longest in Python 3.x (which is equivalent of itertools.izip_longest in Python 2.x). Also, this is variant to yield the values dynamically, which is more efficient in terms of memory in case you have huge list:Sample Run:
Your approach is about as good as it will get, you need to poll the sequence/iterable and build the chunks, but in any case, here is a lazy version that works with iterables and uses a deque for performance:Note: as it is, the generator yields one last incomplete tuple if the input does not produce an exact number of chunks (see second example). If you want to avoid this remove the final if len(q) > overlap: yield tuple(q).
you can try using  which is good for large lists, because it returns an iterator instead of a list.like this:  


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
https://docs.python.org/3/library/collections.html#collections.deque
