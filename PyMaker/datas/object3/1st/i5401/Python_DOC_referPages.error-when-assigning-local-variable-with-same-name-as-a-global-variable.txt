Natural Text
I am seeing an error when assigning either a global or an enclosing-function local to a local variable with the same name.  The code below illustrates this issue, where f() runs fine, while g() raises an error.  It seems like python knows that a is being assigned locally, so it says that all references to a are now local, even the references before a is actually assigned locally.  What explains this behavior?  I am running Python 2.7.12 :: Anaconda 4.2.0 (64-bit).
The short answer is that, within g(), you need to declareif you want to be able to modify "a" from within a function and have this effect globally visible. However, in your case, the effect of using "a" within g() is to convert this variable name to refer to a local-scope variable, which then hides the global "a" which you're attempting to use on the righthand side of your assignment, triggering the exception. This is more fully explained here. There is also a Python FAQ which explains the rules that make f() work without the need for the "global a".


Answer URL
https://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value
https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python
