Natural Text
I'm trying to find duplicates in a list. I want to preserve the values and insert them into a tuple with their number of occurrences. For example: [(2, 2), (3, 1), (5, 3), (6, 1)]This works fine with small sets. My question is: as list_of_n gets larger, will I have to worry about arg1 and arg2 in zip(arg1, arg2) not lining up correctly if they're the same set? I.e. Is there a conceivable future where I call zip() and it accidentally aligns index [0] of list_of_n in arg1 with some other index of list_of_n in arg2?(in case it's not clear, I'm converting the list to a set for purposes of speed in arg2, and under the pretense that zip will behave better if they're the same in arg1)
Since your sample output preserves the order of appearance, you might want to go with a collections.OrderedDict to gather the counts:If order does not matter, the appropriate approach is using a collections.Counter:Note that both approach require only one iteration of the list. Your version could be amended to sth like:but the repeated calls to list.count make an entire iteration of the initial list for each (unique) element.


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#collections.Counter
