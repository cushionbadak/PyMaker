Natural Text
This is the definition of classes:where Child can have different args and kwargs, so please do not consider this notation: child = Child(Parent, 'child')After an assignment like:where Parent is a type (not an instance)result should be:I'm not sure if it's possible at all, but is there anybody who knows a trick?
Yes, it's possible, but you need to store the parent reference in the child object explicitly. The > operator can be hooked into with the __gt__ method.Since you are producing output that contains dynamic information on the child attribute, you could produce a dynamic child object, using the __getattr__ method, which is called whenever an otherwise non-existing attribute is accessed:Demo:If Parent must be a class (why?) then use a fixed attribute (child = Child(Parent, 'child')), or use a metaclass:at which point you get the same effect, but without creating an instance:As of Python 3.6 onwards, you also use the __set_name__ hook to capture the type of the class on which your attribute is defined:Note that these attributes are not set in the __init__! You create the child object as an attribute on the class, at which point the __set_name__ method is called automatically. The output is again the same:Note that subclasses are not going to be reflected in the parent type; you'd have to use the __get__ method to capture the current type each time and return a wrapper object:This creates a ChildWrapper() instance on each attribute access (on the class or an instance), and all further attribute access is delegated back to the original Child() instance (but note that special methods can't be proxied this way):Because the ChildWrapper is created each time based on the object it was accessed on, this works with subclassing too, tracking the current type:
For future references:Result:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__gt__
https://docs.python.org/3/reference/datamodel.html#object.__getattr__
https://docs.python.org/3/reference/datamodel.html#object.__set_name__
https://docs.python.org/3/reference/datamodel.html#object.__get__
https://docs.python.org/3/reference/datamodel.html#special-method-lookup
