Natural Text
I have this piece of code:Because of this, I probably will not be able to use multiprocessing in my program, so I would like to first test the speed of the code after flattening to comprehension as a list. How to do it best? Is it better to flatten with pieces? Just for example, for for/if pairs? Or maybe bigger pieces?
You can't. You can't remove elements again already added to a list, yet this is what your code does. You also use break, and a list comprehension loop does not support breaking out. Last but not least, you are adding data to multiple data structures, while a list comprehension builds a single list object.Besides, when your loop becomes this verbose, you really do not want to try to turn this into a list comprehension. The resulting code would be an unreadable mess.A list comprehension is not that much faster anyway; a list comprehension removes a constant time factor from a regular loop-executing-repeated-list-appends, it is not a magic bullet. That's because a list comprehension avoids the .append attribute lookup, and a method call. Nothing more.That said, your code really looks like you wanted to learn about the any() function and generator expressions to test if your graph alterations still produce the shortest paths:The zip(aaa_binary, aaa_binary[1:]) iterable produces the same edge tuples your t1, t2, etc variables manually defined, provided there are always four elements in aaa_binary.I'd also research if adding your nodes and edges is strictly necessary; perhaps you can avoid having to test every edge added so far each time you want to add a new group. If you can find such a change, then you could consider using functional approach to adding your node groups (as you can then simply filter your groups without adding them first). Once you can filter groups, you can then add them to the graph (with their edges), afterwards, in a straightforward loop.


Answer URL
https://docs.python.org/3/library/functions.html#any
https://docs.python.org/3/tutorial/classes.html#generator-expressions
