Natural Text
I was learning to wrap c++ codes into a Python module, and typemap is needed for functions like int foo(int argc, char **argv); For example, a simple c++ code can beThen I followed the SWIG tutorial here (34.9.2) to write the interface file for SWIG:However, after building the module, there is always an error in Python:In the typemap it seems $input was indeed received as Python list, but something went wrong with PyList_GetItem($input,i). Did I do something wrong?Thanks in advance!
Bytes vs. charactersThe fundamental issue is that Python 3 strings are character strings, while normal Python 2 strings and char* are byte strings.  (char* is usually also taken to be null-terminated.)  As such, PyString_Check has been removed in Python 3, and you have to deal with encoding in some fashion.If you want to accept Python 3 str objects, use PyUnicode functions to check and encode the arguments.  Otherwise, pass bytes objects from Python: bytes literals for fixed ASCII strings (like Args.foo([b"foo",b"bar",b"spam",b"1"])), or else the result of str.encode.Why the code compilesThe wrapper code generated by SWIG is compatible with Python 2 or 3.Even with -py3, it is written in Python 2 style supported by a number of compatibility macros (from pyhead.swg):In the modern, mostly-3 world, it might be preferable for SWIG to use bytesobject.h instead.  It defines the synonym the other way, making the byte-string obvious.
I found this question as a result of a google search where I received the same errorAs the error only appeared after upgrading to Python 3, I was able to resolve it with the following changeThe b forced Python to send the strings as Python2 byte strings rather than the Python3 unicodes string in case this is helpful for anyone else.


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals
https://docs.python.org/3/library/stdtypes.html#str.encode
https://docs.python.org/3/howto/cporting.html#str-unicode-unification
