Natural Text
I am trying to distinguish between different ways of writing while loops.I am writing this specifically for a poker game where I distinguish between different hand types. When writing my is_pair function, I start by saying pair = False. The only way I have found that continues the loop is if I say while pair == False: .... For my is_flush function I am able to set flush = True and the while loop runs on while flush which continues the loop until flush is not true any more. I have tried while not pair: but that didn't work. I want it to continue while pair is False so when it has found a pair it will return as True.I think the statement for flush just looks cleaner and I am wondering if there is another way to incorporate that style into my pair function. 
Since your while not pair: loop did not work, you have found an important difference: pair == False only tests true if pair is set to 0 or False (the only two values that test as equal to False), while while not pair tests for any truth value (inverting that value).You appear to have assigned some other value to pair that is neither of those two values causing the behaviour to change (a truthy value to break out early, or a falsey value to keep the loop going longer than expected).It is that difference that is one of the reasons why the Python style guide recommends you always use if true_expression or if not false_expression rather than use == True or == False:Don't compare boolean values to True or False using ==.Yes:   if greeting:  No:    if greeting == True:  Worse: if greeting is True: Last but not least, for a while ...: loop that simply tests against a single boolean flag (while flag: or while not pair:), consider using while True: and break instead. So rather than do:do this instead:
Aside from actually having little or no difference at all,Using False in a == comparison allows usage of 0 and 1. Using not is inversion of current value. You can use in your program assuming that pair can only contain boolean values:If you however still want to use a variable that can contain both boolean and number, you can use:


Answer URL
https://docs.python.org/3/library/stdtypes.html#truth-value-testing
