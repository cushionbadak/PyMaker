Natural Text
Hello I am working with a lot of numbers like this: 0.00000005, 0.000341, 3423.52322154. Basically bitcoin and altcoin numbers.Now I know that if I do this for example in python It's not correct and that I can str my variables and put them inside Decimal module to fix it. My problem is that I don't know when float is /good enough/ and because I am probably a bit autistic when it comes to performance and understanding what I'm doing I am thinking that I'm perhaps using decimal module too much when it isn't needed.So how can I know when I need to use Decimal when I'm doing math and when I don't have to?Edit: Ok, a lot of people are assuming that because im dealing with bitcoin and altcoin numbers i want to calculate it to buy exact sums or whatever, that is not the case always for me. I also want to take like 200 numbers every second and quickly calculate amount * rate for displayment purposes and perhaps float can be good enough. I suppose there's no easy answer for these things though(i suppose i have to read up on binary representation of numbers etc).Also people have suggested i represent the numbers as integers and then also store the decimal place and then put it back after the calculation. I don't know if this is faster than decimal?
Python has the decimal module that comes along with he language: although it is technically "floating point", it really deals with decimal numbers up to the precision of digits you specify.So it is possible to use the 18 or so numbers after the decimal point some of the cryptocurrencies use (like ethereum) with zero erros introduced due to base shift or rounding.It may look artificial since Decimal instances have to be constructed from strings, but that is just to avoid the errors like those you see in first place. These objects support all numeric operations, and can be easily be converted to strings with no rounding errors for usage on any API you have.https://docs.python.org/3/library/decimal.html
If it needs to be very precise, you shouldn't really use floats. Instead you should store two integers, one that has the number without a decimal point and one that shows how many decimal places it should divide into while displaying or something.The times that float may be useful is when you are doing operations that are within 3 or 4 decimal places, you can use the round function to the amount of desired decimal places after every calculation.


Answer URL
https://docs.python.org/3/library/decimal.html
