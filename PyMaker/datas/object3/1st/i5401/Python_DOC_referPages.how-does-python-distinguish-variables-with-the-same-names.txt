Natural Text
This question already has an answer here:Scope of python variable in for loop                    10 answers                I don't understand how python deals with variables with same names in a program, especially in for loops.The following is a python programThe outcome is as followsI don't understand why I get the above-mentioned outcome. In my opinion, when i is 0, the program will execute i+=2, so i becomes 2, and is printed out. Then the for finishes one loop so that i is increased by 1. So after the first loop, i should become 3. I test my opinion using the following C++ program, the result is exactly what I expect.The outcome is as follows:Why is the result of python program looks like that?To further exploit the reasons, I add more print sentences to the python program as follows:Then the outcome becomes:It seems python treat i's differently in different parts of the program. It implicitly declares another variable named i. But why? And what is the rule of python to decide whether to declare a new variable implicitly?
It doesn't matter how you modify i inside the loop, the next iteration a new value will be fetched from the range object and the value of i will be overwritten.So the Python loopis not equivalent to the C loopwhich uses the current value of i to calculate the new value. Instead it's more equivalent towhere get_next_value() doesn't consider the current value of i at all.
Python simply draws elements from the iterable produced by range(10) and binds i to each of these elements, that's it. So, what Python is doing is:As you can see, you can modify i the way you want, but it will be set equal to next(iterable) right on the next iteration.
This is what you get when you run range(10) in a python (2.7) shell:So what your code is doing is the same asWhich means i is set to the next value in the array at each iteration, regardless of what you did with i in the previous iterationObs:As was pointed out, in python 3 range(10) actually creates a range object range(0,10), which will function like the list above in your example but isn't exactly the same thing. It's an object that stores only the start, stop and step values so as not to store the whole list, and calculates items as needed.For the purpose of understanding what's going on in your question they're gonna be pretty much the same


Answer URL
https://docs.python.org/3/library/stdtypes.html?highlight=range#range
