Natural Text
Recently I have been working with Typescript a lot, it allows to express things like:Pretty concise and giving all the luxuries as type checking and code completion while coding with Persons.How is this done in Python?I have been looking at Mypy and ABC but did not yet succeed in finding the pythonic way to do something similar as the above (my attempts resulted in way too much boilerplate to my taste).
For the code completion and type hinting in IDEs, just add static typing for the Person and Address classes and you are already good to go. Assuming you use the latest python3.6, here's a rough equivalent of the typescript classes from your example:I suppose the boilerplate you mentioned emerges when adding the class constructors. This is indeed inavoidable. I would wish default constructors were generated at runtime when not declared explicitly, like this:but unfortunately you have to declare them manually.EditAs Michael0x2a pointed out in the comment, the need for default constructors is made avoidable in python3.7 which introduced a @dataclass decorator, so one can indeed declare:and get the default impl of several methods, reducing the amount of boilerplate code. Check out PEP 557 for more details.I guess you could see stub files that can be generated from your code, as some kind of interface files:The generated stub file contains the typed signatures of all non-private classes and functions of the module without implementation:These stub files are also recognized by IDEs and if your original module is not statically typed, they will use the stub file for type hints and code completion.
Python 3.6 added a new implementation of namedtuple that works with type hints, which removes some of the boilerplate required by the other answers.Edit: NamedTuples are immutable, so be aware that you can't use this solution if you want to modify the fields of your objects. Changing the contents of lists and dicts is still fine.
With Python 3.5, you can use annotations to specify the type of parameters and return types. Most of recent IDE, like PyCharm can interpret those annotations and give you good code completion. You can also use a comment to specify the signature of a function, or the type of a variable.Here is an example:Notice that Python is not a strongly typed language. So, annotations are only a guide for developers. If you really want to check your code, you need an external tools (currently, the best one is mypy). It can be used like any other code checker during code quality control.
A simple solution I found (that doesn't require Python 3.7) is to use SimpleNamespace:This works in Python 3.3 and higherThe fields are mutable (unlike NamedTuple solution)Code completion seems to work flawlessly in PyCharm but not 100% in VSCode (raised an issue for that)Type checking in mypy works, but PyCharm does not complain if I e.g do person.name = 1If anyone can point out why Python 3.7's dataclass decorator would be better I would love to hear.
Perhaps this will work well with mypyRead more about TypedDict from the mypy docs or from the source codeI'm pretty sure you can nest these things, and set some of them to Optional if you'd like.I got this idea from https://stackoverflow.com/a/21014863/5017391


Answer URL
https://docs.python.org/3/library/types.html#additional-utility-classes-and-functions
