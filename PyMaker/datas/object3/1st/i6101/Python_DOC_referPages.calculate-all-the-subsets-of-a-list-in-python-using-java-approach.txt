Natural Text
I'm working through some interview problems and one of the classic ones, which uses backtracking, is to calculate the powerset (all the subsets) of a list. I have the java solution for the problem:I'm trying to do the same thing but using python instead:I printed the tempList and it seems to be working as expected. The problem I believe is that it lista.append(tempList) is not working as I expected. Is there some particularity in python that is yielding this different result? Thanks!
Makes a copy of tempList, which you ought to do in your Python version as well!
You need to make a copy of tempList. Otherwise, you're just appending multiple references to the same tempList object to lista. When backtrack finally returns, tempList is empty, so lista will just contain multiple references to that empty list. Here's a more Pythoic way to write your code. This version doesn't need to make a copy because each recursive call creates a new templist rather than modifying the original templist object.outputJust for fun, here's the same algorithm in the form of a generator function. I've eliminated the sorting step, the caller can sort the input if they really want that.This code produces the same output as the earlier code.Here's a non-recursive way to make subsets that's a little more compact. It uses a similar algorithm to the earlier code, but it produces the subsets in a slightly different order. It may be helpful to work through the algorithm by hand, on paper, to see how it works.outputAnd here's the almost-unreadable one-liner version of that algorithm. ;)Lastly, here's a way to make subsets using binary numbers. This is handy if you want to get specific subsets without producing them all.Given a set S of n items there are 2**n subsets. Each subset of S corresponds to a n-bit binary number: a 1 bit in the number means the corresponding item in S is in the subset.This generator yields subsets in the same order as the last 2 versions.
This problem (powerset iterator) is addressed already in the standard documentation of itertools module:To address the problem of the final paragraph:tempList.append(n) appends the argument as a whole (since a list is heterogeneous in Python, able to contain all types). You might replace it by temPist.extend(n) instead, which moves the elements, as you seem to expect.


Answer URL
https://docs.python.org/3/library/itertools.html?highlight=powerset
