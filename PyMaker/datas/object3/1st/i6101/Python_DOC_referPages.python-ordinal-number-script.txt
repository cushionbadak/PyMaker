Natural Text
We have an assignment that I'm stumped on. We have to write a function called int2ordinal that solves the following tasks:Any number that ends in 11, 12 or 13 uses a th suffixAll remaining numbers that end in 1 use an st suffixAll remaining numbers that end in 2 use an nd suffixAll remaining numbers that end in 3 use an rd suffixAll remaining numbers use a th suffixSo basically write a function named int2ordinal that takes an integer as its only parameter and returns the number with its appropriate suffix as its result (stored in a string). For example, if the function is passed theinteger 1 then it should return the string "1st". If it is passed the integer 12 then it should return the string "12th". If it is passed 2003 then it should return the string "2003rd".We're using the remainder operator to extract the last digit of an integer by computing the remainder when the integer is divided by 10, and we're doing the same to extract the last two digits of an integer divided by 100. For example 29 % 10 is 9 while 1911 %100 is 11. We can then construct the string that needs to be returned by the function by converting the integer parameter into a string and concatenating the appropriate suffix using the + operator.This is the code we have so far, we think the first half is totally incorrect:Any help would be amazing!
Why not keep it simple? Although untested, this should work.Based on your answer in the comments then do this:In general, try to avoid repeating code as much as you can. If you look at your original code, you're running num % 10/100 on every clause and also casting to str on every single return (no performance loss here, but repeating logic). Better avoid repeating such calls as much as possible, even if this code is not resource intensive, as you say you are an amateur: The earlier you learn this, the better.Also, a reason your original code would always have failed is that it had three arguments, you were always passing a day to it. Named arguments work like this:Doing:    foo(3)Results in foo() getting argument a, b and c will be None.
Why not keep it more simple?You can find this below and use it in all your codes by using pip install mknxgn_essentials then using asordinal = essentials.GetOrdinal(my_num)


Answer URL
https://docs.python.org/3/library/index.html
