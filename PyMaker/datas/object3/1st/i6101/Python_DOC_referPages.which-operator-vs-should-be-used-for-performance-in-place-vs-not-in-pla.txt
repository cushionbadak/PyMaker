Natural Text
Let's say I have this two snippet of code in python :I thought the result of y will be the same in both examples since y point out to x and x become (2,3,4,5), BUT it wasn'tThe results were (1,2,3,4) for 1 and (2,3,4,5) for 2.After some research I find out that in first exampleYou can find out more about this behaviors (not only for this example) in this link In-place algorithmMy question is : Being aware of this behavior why should I use in-place algorithm in term of performance? (time of excution faster? less memory alocation?..)EDIT : Clarification The example of (+, =+) was just to explain simply the in-place algorithm to the one who don't know.. but the question was in general the use of in-place algorithm not only in this case..As another more complex example: loading a CSV file (just 10 Million rows) in a variable then sorting the result, is the idea of in-place algorithm is to produce an output in the same memory space that contains the input by successively transforming that data until the output is produced? - This avoids the need to use twice the storage - one area for the input and an equal-sized area for the output ( Using the minimum amount of RAM, hard disk ... )
x = x + 1 vs x += 1PerformanceIt seems that you understand the semantical difference between x += 1 and x = x + 1.For benchmarking, you can use timeit in IPython.After defining those functions:You can simply use the %timeit syntax to compare performances:not_in_place is 50% slower than in_place.Note that broadcasting also makes a huge difference : numpy understands x += 1 as adding a 1 to every single element of x, without having to create yet another array.Warningin_place should be the preferred function: it's faster and uses less memory. You might run into bugs if you use and mutate this object at different places in your code, though. The typical example would be :SortingYour understanding of the advantages of in-place sorting is correct. It can make a huge difference in memory requirements when sorting large data sets.There are other desirable features for a sorting algorithm (stable, acceptable worst-case complexity, ...) and it looks like the standard Python algorithm (Timsort) has many of them.Timsort is an hybrid algorithm. Some parts of it are in-place and some require extra memory. It will never use more than n/2 though.


Answer URL
https://docs.python.org/3/library/timeit.html
