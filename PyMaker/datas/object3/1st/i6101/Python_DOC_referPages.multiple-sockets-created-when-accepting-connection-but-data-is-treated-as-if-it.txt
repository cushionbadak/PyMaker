Natural Text
I'm working on a multiuser chat-like project that is supposed to handle connections from many clients at the same time. When a client connects, I accept() the connection and pass it to a Client class on its own thread that handles incoming data with a self.socket.recv(1024) loop. When data comes in, it is stored in a list called data-queue. Then I store this client in a list of Clients.Once every 100ms, I iterate over every Client on my Clients list and check if the data-queue list is empty. If it is not, I print whatever I get by pop()-ing the list, and the client address.The thing is, if many clients connect at the same time, only the first connected Client gets all data sent by them as if it was sent by him.If Client A sends "Hi!" and Client B sends "Hi there!", the server just reads that as if Client A had been the one who send both "Hi!" and "Hi there!" and Client B had stood silent the whole time. If Client A disconnects, all input from further Clients is treated as if it had been sent by the first-remaining Client (in this case Client B, as Client A has left), and so on.What could it be?Edit:The source code goes somewhat like this:
This means dataQueue is static and the same instance of [] is shared across threads. Iterating over clients is fruitless in this case, you can just read it from any client object:Move dataQueue into __init__ to fix this.And please look into guarding self.dataQueue with a lock. Odds are lists aren't thread safe.


Answer URL
https://docs.python.org/3/library/threading.html#lock-objects
