Natural Text
Is there an elegant way (most likely using a list comprehension) to concatenate all neighboring string elements in an list?I have a list where there is no functional difference between multiple strings in a row and all of those strings concatenated into a single string, but both for readability and for equivalence testing, I would like to concatenate these together. There can be other non-string elements in the list that can break up the strings. These need to remain between the concatenated groups of strings.For example, I could have and instead, I want
itertools.groupby is the usual answer for combining elements based on a common characteristic. In this case, we group on the type of the element, and when the type is str, we collapse it, otherwise we produce results from the group directly. As a "one-liner", you could do:Assuming C is a class with a default __repr__, you'd get output that looks like this:In this case, the "outer" loop of the listcomp is producing the shared type and an iterator of the elements with that type. When the type is str, we make a one-element tuple of the combined string to "iterate" (it's only one element, so we only iterate once); when it's not str, we produce the elements of the group one by one without further processing.
You can accomplish this using itertools.groupby and chain.
You can use itertools.groupby:Output:
In a basic way you can use this function:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
