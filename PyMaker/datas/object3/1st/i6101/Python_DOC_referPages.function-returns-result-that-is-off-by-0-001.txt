Natural Text
TL;DR: Returned float value is off by 0.0001. Are my implementations of my functions causing this or is it just the wonder that is floating values and computer science in that not all values can be represented accordingly? I do not think it is the latter, so I am wondering if somebody can spot the problem, give a suggestion or ask me to try things to debug.I've written two functions to determine the centroid of a polygon on the Earth's surface.The first function calculates the bearing between two of the vertices. It does so twice, once for the UR to LL then once for the LR to UL.The second function calculates the intersection point given the two previously calculated bearings and the starting point from each of those calculations. So UR & its bearing and LR & its bearing.My results are slightly off in the Longitude. For example, I supply interest() with:My result is [36.96359071593996, 120.61125138605212]. The Latitude is corrected, but the Longitude should be 120.61135138605212.The equations are transcribed from here. There is a calculator to which you can supply the decimal degrees and bearings under the "Intersection of two paths" section to see the expected result. This result, when converted from DMS to DD aligns with that of the centroid calculation performed by the same polygon in ArcGIS. I am aware of a gisstackexchange, however I am not focused on the GIS piece of this problem. Rather my question lies within this:Question:With my current implementation(s), is the storing of functions [i.e. cos = math.cos], native use of squaring [i.e. x ** 2 vs math.pow()] or something else I am unware of causing the decimal places of the float to be ever so slightly off (the 0.0001 matters for my purposes)?Bearing FunctionIntersect Function
The very last thing you do in each function is to convert from radians to degrees in a lossy way.Try the same code but without the rounding in each of the return lines: for exampleinstead of 


Answer URL
https://docs.python.org/3/tutorial/floatingpoint.html
