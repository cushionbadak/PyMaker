Natural Text
I am working on a question in a coding website and got some problem in solving it. The question is:Print 1 to N - Digits Count [ZOHO]A positive integer N is passed as the input. If we print all the  numbers from 1 to N continuosly, the program must find the number of  characters(digits) C printed and print the count C as the output.Input Format: The first line contains N.Output Format: The first line contains C.Boundary Conditions: 1 <= N <= 9999999Example Input/Output 1: Input: 2Output: 2Explanation: We print 12 and hence the total number of characters is  2.Example Input/Output 2: Input: 15Output: 21Explanation: We print 123456789101112131415 and hence the total number  of characters is 21.I solved the problem, but my code didn't pass all the test cases (they are hidden). This is my code:Is this is the right way to solve the problem or is there any other way which can be used to solve this problem?
Since this is a Math question, I would preferably use a more mathematical approach as it would use much less memory and will be much more efficient.Here is my approach.Calculate the length of the number.If length = 1, you are guaranteed to have 9x1 characters. If length = 2, you are guaranteed to have 9x1 + 90x2 characters.If length = 3, you are guaranteed to have 9x1 + 90x2 + 900x3 characters and so on... I hope you can see a loop forming here.For the rest part, take an example of 1234, 1234 - 1000 = 234 numbers will have length = length of the number. No, Mistake : 234  +1 = 235 numbers will have length = length of the number !Formulating it in a code.I also did import time to see efficiency. For n=9999999, your code took about 3.26 sec, while this one takes about 160-200 usec.
Here's a version that uses essentially the same algorithm as Miraj50's answer, except it doesn't need a loop to calculate the length of numbers that have less digits than the current input number. I developed my formula with the help of this OEIS entry: A033713 "Number of zeros in numbers 1 to 999..9 (n digits)".I'll add a slightly modified version of Miraj50's code, and the brute-force version given in the comments by Blender, to show that they all give the same results.outputHere's a version that does timeit tests. As you can see, eliminating that for loop speeds things up, especially when n is large.outputThese timings were obtained on my old 2GHz 32 bit machine running Python 3.6.0 on a Debian derivative of Linux.
I found two new methods, the first uses an approach similar to Miraj50's (I was developing it while he posted so I will keep it here for the sake of completeness) in a for loop fashion while the second one uses vector algebra to calculate it, it may be implemented in numpy also, which may improve its performance for big numbers. You can see them as methods a and b in the folloing section.Profiling scriptI did some timing with the following script. Modify INPUTS and REPETITIONS at will. It takes a while as it is executing REPETITIONS * len(INPUTS) times each method and len(INPUTS) times the OP's method to validate the results. It calculates the mean, median and standard deviation of the samples and print them in a nice table format. If you want to add a new method you just need to define the function and include it in the methods dict.ResultsInterpreting resultsOf the 5 measures that are being tabulated you need to be aware of some implications. As the OS's scheduler may execute different processes in the middle of an algorithm, some of the timings have a quite big error, they take way too much time that what they really needed. This means that the upper bound given by the max, or the mean and standard deviation that consider all values in the sample, give results that are not really trustworthy. Both the minimum value and the median remove the influence of this really long cases in a different way. The comparisons of the algorithms based on the median and the minimum are very similar: all of the algorithms have a similar execution time being @PM2Ring 's version slightly faster.


Answer URL
https://docs.python.org/3/library/timeit.html#timeit.Timer.repeat
