Natural Text
I have the following list of letters:And following list of words:How can I search using Python if any of the combination of words exist for the list of letters? Like just looking at it we can observe that two words 'yutz' and 'tux' are the only one which can be built for the list of letters we have.I'm new to Python and I tried to make different for loops but not able to reach anywhere.And the result is disaster as you guys can understand.
You need to look at your problem in terms of sets. Any word from your words list that is a subset of your set of letters can be formed by those letters. Put differently, letters needs to be a superset of the word:The set.issuperset() method returns true if all elements of the iterable argument are in the set.If you wanted a list, just use a list comprehension:Demo:Note that this only looks at unique letters. apple is a subset of the letters set {'a', 'p', 'l', 'e'}. If you need to handle letter counts too, you need to use a multiset; Python has an implementation called collections.Counter(). This keeps track not only of the letters, but also of their counts.The Counter type doesn't support testing for sub- or supersets, so you have to use subtraction instead; if an empty Counter() is produced, the whole word can be formed from the letter counts:or as a list comprehension:which produces ['apple'], as there is only a single 'e' in the input letter multi-set, and only 2 'p's, not 3.
You can use set.difference here:If the result is an empty set, that means every character in w belongs to letters. If that is the case, set.difference returns an empty set, which is False-y, so not .... results in True and the word is printed. This is equivalent to:This is similar to testing with set.issuperset, but approaches the problem from a different perspective.
You can use the all function with a generator to determine if all the characters in a word belonging to words exists in letters:Output:
You can use itertool's permutation method :In one line:Detailed solution:above list comprehension is same as:output:


Answer URL
https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset
https://docs.python.org/3/library/stdtypes.html#frozenset.issuperset
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/stdtypes.html#frozenset.difference
