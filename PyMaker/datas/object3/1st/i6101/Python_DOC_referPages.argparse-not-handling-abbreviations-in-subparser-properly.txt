Natural Text
(Run on python 3.6.0)TL;DRWhy is the subparser abbreviation invalid even with allow_abbrev=True?LONG VERBasically, having an issue getting argparse to accept abbreviated subparsers names/aliases.Here's the code:So from the code above, it should be expected that any of the following should be accepted:So here's the problem:This works: $ python prog.py c 123 OThis gives an error: $ python prog.py caes 123 XNow here's the confusing part.According to the argparse doc:ArgumentParser supports the creation of such sub-commands with the  add_subparsers() method. The add_subparsers() method is normally  called with no arguments and returns a special action object. This  object has a single method, add_parser(), which takes a command name  and any ArgumentParser constructor arguments, and returns an  ArgumentParser object that can be modified as usual.okay, so any object created with add_subparser() can create its own ArgumentParser objectwith object.add_parser() right? ...which means this newly created ArgumentParser object should be able to accept any ArgumentParser arguments yeah?ArgumentParser definition:Create a new ArgumentParser object. All parameters should be passed as keyword  arguments. Each parameter has its own more detailed description below, but in short  they are:allow_abbrev - Allows long options to be abbreviated if the abbreviation is unambiguous.(default: True)Changed in version 3.5: allow_abbrev parameter was added.(this was on python 3.6.0)Thanks in advance, guys
A patch to allow abbreviations of the subparser names was implemented, but then withdrawn when it proved to be buggy: Issue 12713: allow abbreviation of sub commands by usersAllowing users to turn off abbreviations for long options is a different issue, handled in  Issue 14910: argparse: disable abbreviationTwo different parts of the code.allow_abbrev - Allows long options to be abbreviated if the abbreviation is unambiguous.A long option is created with:With the default allow_abbrev value, this would work with '-f', '--foo', and '--foobar'.  The long_option in this case is '--foobar'.  With it False, '--foo' would not work.It's the main parser that decides whether c or caesar or cae are valid subparser commands (via subp, the special action object created by parser.add_subparsers).  This behaves more like a positional with choices.
The error I'm getting is this:Hinting that abbreviations are supposed to be composable in the sense that two different abbreviations "c" and "a" can be referenced by passing ca. What is it that should really happen there? ca is both a combination between the c and the (non-existing) a short form, as well as an abbreviation. Which should the parser prefer? Therefore this question had to be resolved explicitly when the library was designed: For predictability, you just cannot have both.That being said, maybe you can tweak the result by passing conflict_handler='resolve'? https://docs.python.org/3/library/argparse.html#allow-abbrev


Answer URL
https://docs.python.org/3/library/argparse.html#allow-abbrev
