Natural Text
The Python language (especially 3.x) allows very general unpacking of iterables, a simple example of which isOver the years, this unpacking has been gradually generalized (see e.g. PEP 3132 and PEP 448), allowing it to be used in more and more circumstances. As so, I was surprises to discover that the following is invalid syntax in Python 3.6 (and remains so in Python 3.7):I can make it work by encapsulating the returned tuple in parentheses like so:The fact that I use this in a return statement seems to be important, asis indeed legal and results in the same with and without parentheses.Have this case simply been forgotten by the Python developers, or are there any reason why this case is invalid syntax?Why I careThis breaks an important contract I thought I had with the Python language. Consider the following (also valid) solution:Normally when I have code like this, I consider t to be a temporary name, which I ought to be able to get rid of simply be replacing t in the bottom line with its definition. In this case though, this leads to the invalid codeIt's of course no big deal to have to place parentheses around the return value, but usually additional parentheses are only needed to distinguish between several possible outcomes (grouping). Here this is not the case, as leaving out the parentheses does not produce some other unwanted behavior, but rather no behavior at all.
I suspect this is an accident, based on the comments from this commit for Python 3.2.That commit enabled the assignment expression to take a testlist_star_expr production (what allows the unparenthesized unpacking), but left the return statement taking a testlist production. I suspect the commit just missed this (and possibly other locations, but I'm focusing on the return_stmt production for now).I went ahead and modified the Python Grammar/Grammar file to allow this. All of the tests continue to pass, including those in the test_grammar.py file (but this doesn't seem terribly exhaustive).If you're curious, this is the change I made. Feel free to clone or download my fork.UPDATE: I've submitted a bpo issue and a pull request for the return (and yield) unpacking.


Answer URL
https://docs.python.org/3/reference/grammar.html
