Natural Text
In my python program I want to print progress over a very long loop. I want to output specific information like percent complete etc..., but I don't want all this output to take up the whole screen. Ideally, I want to to print a progress line. Something like Then, when the next line prints, I want to simply overwrite this line. Currently I can do this by simply printing carriage return '\r' before I print my message. This returns the cursor to the beginning of the line and then overwrites the line. Exactly what I want. The issue is when the terminal is too small for the entire line to fit, the line wraps around and the carriage return brings me to the beginning of the wrapped line, not the absolute beginning of the line. Is there a way that I can bring the cursor all the way back to the beginning of the correct line?  
You can use ANSI escape sequences for cursor movement, most notably:Position the Cursor: \033[<L>;<C>H, or \033[<L>;<C>f  puts the cursor at line L and column C.Move the cursor up N lines:  \033[<N>AMove the cursor down N lines:  \033[<N>BMove the cursor forward N columns:  \033[<N>CMove the cursor backward N columns:  \033[<N>DSave cursor position:  \033[sRestore cursor position:  \033[uCursor position save/restore seem ideal for you case, but unfortunately these two codes are not honored by many terminal emulators.They work in xterm and xfce4-terminal though (except when in the last line of terminal / scrolling output, as noted by @ThomasDickey in comments). Try:For other terminal emulators, you can try your luck with \033[<N>A to move cursor up for the required number of lines, and then move to column 0.If you know the length of your line, you can calculate how many rows does it span when (and if wrapped) with (bash example, note the usage of COLUMNS environment variable):and then move up with:In Python, you could use it like:Or, abstract all this with something like curses.Python solutionBased on the Move the cursor up N lines ANSI escape sequence (that should work in most terminal emulators), and a cross-Python compatible code for terminal width detection (in Python3 you can use shutil.get_terminal_size), here's a proof-of-concept demo that works with scrolling output, adapts to line length and changing terminal width:


Answer URL
https://docs.python.org/3/library/curses.html#module-curses
