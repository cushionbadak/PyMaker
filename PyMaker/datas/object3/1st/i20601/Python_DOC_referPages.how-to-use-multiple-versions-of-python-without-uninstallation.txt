Natural Text
I am faced with a unique situation, slightly trivial but painful. I need to use Python 2.6.6 because NLTK is not ported to Python 3 (that's what I could gather).In a different code(which am working concurrently), there is a collections counter function which is available only in Python 3 but not in Python 2.6.6. So, each time I switch between the two codes, I need to install & uninstall the versions. That's such a waste of time.Any suggestions on how I specify which version I want to use?
Install Python 3Python 3.3 and higher put a py.exe into the windows folder. [link]This executable is used to determine the python version with the first line of the file:will be executed with Python 2.7.You must install the Python 3 version after you installed the other Python versions.Additional ressources: https://docs.python.org/3/using/windows.html#customizationpywin https://pypi.python.org/pypi/pywinOld SolutionI guess you use windows. I solved this problem with a hack:Every time I start python on windows a python.bat will be used.This starts a python.py that analyses the file for the header after #! for the python version.To start example.py I type into the consolebut it could also be started per klick.this is my python fileC:\bin\python.pyThis is the C:\bin\python.bat fileand in every file you start you have to put eitherordefault is python2Then I added those files to the folder:C:\bin\python2.batC:\bin\pythonw2.batC:\python3.batC:\bin\pythonw3.batIf you are using python26 instead if python27 then you need to changeto and so on. Same with python not using python 32.You may also want to start python files per klickthen do this:klick right on a .py file-> open with-> select C:\bin\python.batIf you get problems contact me or leave a comment.
You simply install multiple versions in separate directories, and then you run the python program with the Python version you want to use. Like so:Or similar.What virtualenv does is that it gives you many separate "virtual" installations of the same python version. That's a completely different issue, and hence it will not help you in any way.
For those using windows, if you're not averse to using PowerShell, you can install python 2 and 3 separately as mentioned in other answers. Then you can do this:To create an alias for running each version.Keeping aliases around is described in this link: https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.core/about/about_aliases#saving-aliasesIn order to successfully load the profile that that link would have you create, you may need to change your execution policy.should do the trick, but if you want to know more about execution policies you may want to follow this link: https://msdn.microsoft.com/en-us/powershell/reference/5.1/microsoft.powershell.core/about/about_execution_policies
Use virtualenv, which allows you to create dynamic python environments. Check out python's page here.http://pypi.python.org/pypi/virtualenvRelated answered question on installing packages inside virtualenv on windows (as opposed to system-wide) Can I install Python windows packages into virtualenvs?
Use Pythonbrew, its super easy to install, and allows you to very easily install, and switch between, or temporarily use different python versions safely.Once pythonbrew is installed:
You should look into virtualenv. I got to know about it from this blog post, which talks about pip and fabric, also very useful tools for the Python developer.
This page has an implementation of collections.Counter that works for Python 2.6:http://code.activestate.com/recipes/576611/
not sure this is what you want, but I used to live with this for a long time http://www.portablepython.com/
The OP request is a little outdated, especially now that NLTK does have a py3.x port. see Install nltk 3.0 on Ubuntu 13.10 using tar.gz downloadHere's how you can get python3 to work with NLTK.
I do use at least 3 or 4 versions of Python on my machines (Windows).  The installers from http://python.org/ automatically placed them in:andon one machine.  I mostly use Python 2.7 because some applications use wxPython and also for the older console code.  This python.exe was not renamed.  By the way, the Python 2.7 also supports collections.Counter.The c:\Python26 and c:\Python24 are not included in my PATH.  In c:\Python32\, the exe was renamed to py.exe.  This way, python some.py starts Python 2.7, and py another.py starts Python 3.2.
You can specify the version you want in the shebang line. I just ran into this when a VM my Ops guy set up had Python 2.6 in /usr/bin/python2.6, and I needed 2.7 for a few features. He installed it for me at /usr/bin/python2.7.My old shebang:stopped working, because /usr/bin/python was a link to /usr/bin/python2.6. What wound up fixing the problem, and working across Windows, Linux, and OSX, was changing the shebang to:It should work for any version, I believe.
If you're talking about shell, as in linux, if you install python 3, you can invoke it separately with the python3 command. Python 2 is just invoked using python.At least this is my experience with Ubuntu-like systems, I haven't used other Linux environments.I realize this question is almost a year old, but NLTK has been ported to Python 3 (or at least that was true as of writing this).
Take a look on WinPython, a nice portable/installable python distribution for Windows.Portable: preconfigured, it should run out of the box on any machine under Windows (without any requirement) and the folder containing WinPython can be moved to any location (local, network or removable drive) with most of the application settingsFlexible: one can install (or should I write "use" as it's portable) as many WinPython versions as necessary (like isolated and self-consistent environments), even if those versions are running different versions of Python (2.7, 3.3) or different architectures (32bit or 64bit) on the same machine It also allows you to register and unregister easily a given python version as the system default one.But even working as portable, you can make a shortcut of the python executable and put it somewhere in your path. Just name the shortcuts of different versions different names. Then you can just use:
You can use py launcher, that is installed with python distributable:If you need to execute a script with a specific version you can do following:
Simplest solution : Rename the file in where your path is locations e.g:


Answer URL
https://docs.python.org/3/using/windows.html#customization
