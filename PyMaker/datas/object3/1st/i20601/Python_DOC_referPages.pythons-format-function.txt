Natural Text
Recently, I found ''.format function very useful because it can improve readability a lot comparing to the % formatting.Trying to achieve simple string formatting:Whilst two first prints do format as I expect (yes, something=something looks ugly, but that's an example only), the last one would raise KeyError: 'year'.Is there any trick in python to create dictionary so it will automatically fill keys and values, for example somefunc(year, month, location) will output {'year':year, 'month': month, 'location': location}?I'm pretty new to python and couldn't find any info on this topic, however a trick like this would improve and shrink my current code drastically.Thanks in advance and pardon my English.
The first print should be Also, if you are finding some shortcuts, you could write one like, no big difference.
..is what you are looking for. It's functionally identical to doing .format(year=data['year'], ...), or the other examples you gave.The double-asterix thing is a hard thing to search for, so it's usually referred to as "kwargs". Here's a good SO question on this syntax
You can use the dict() callable:When passing keyword arguments it creates a dict containing the elements you specified as kwargs.If you do not want to specify the argument names, use the positional style of .format():However, if you try to do something similar to what compact() in PHP does (create a dict mapping variable names to its values without specifying name and variable separately), please don't. It just results in ugly unreadable code and would require nasty hacks anyway.
You could pass locals():Of course, this has issues: you will have to pass everything in locals, and it can be difficult to understand the effect of renaming or removing a variable.A better way would be:But this is not any more concise, unless you wrap it up with a function (which must of course take a dict parameter).
As of Python 3.6, you can also use the new  Formatted string literals (f-strings), which you can use with variables:or a dictionary:Note the f prefix before the string literal.PEP 498: Formatted string literals:Formatted string literals are prefixed with 'f' and are similar to the  format strings accepted by str.format(). They contain replacement  fields surrounded by curly braces. The replacement fields are  expressions, which are evaluated at run time, and then formatted using  the format() protocol:...


Answer URL
https://docs.python.org/3/whatsnew/3.6.html
https://docs.python.org/3/whatsnew/3.6.html#pep-498-formatted-string-literals
