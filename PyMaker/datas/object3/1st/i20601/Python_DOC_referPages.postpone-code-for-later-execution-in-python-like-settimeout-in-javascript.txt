Natural Text
This question already has an answer here:Python Time Delays                    3 answers                I have to do a program in python that needs to execute for some time and then (does not matter where it was executing) it must dump information to a file, close the file and then exit.The behavior here is equivalent in JavaScript to using setTimeout(func, 1000000) where its first parameter (func) would be a pointer to the function with the exit code and its second parameter would be the time available to the program to execute.I know how to make this program in C (using SO signals) but with python 
In practice, a Timer is probably the simplest way to do what you want. This code will do the following:After 1 second, it prints "arg1 arg2"After 2 seconds, it prints "OWLS OWLS OWLS"======The above code will most likely solve your problem.But! There is alternative way, that doesn't use multithreading. It works much more like Javascript, which is single-threaded. For this single-thread version, all you need to do is store the function and its arguments in an object, along with the time at which the function should be run.Once you have the object containing the function call and the timeout, just periodically check if the function is ready to execute. The right way to do this is by making a priority queue to store all of the functions we want to run in the future, as shown in the code below. Just like in Javascript, this approach makes no guarantee that the function will be run exactly on time. A function that takes a very long time to run will delay the functions after it. But it does guarantee that a function will be run no sooner than its timeout.This code will do the following:After 1 second, it prints "20"After 2 seconds, it prints "132"After 3 seconds, it quits. ======In practice, you would likely have more going on in that while loop than just checking if your timeout functions are ready to go. You might be polling for user input, controlling some hardware, reading data, etc.
You can use signals in python as well (unix only)Docs: http://docs.python.org/library/signal.html
You could use the call_later method of python3's asyncio event loop. Below example will just work. 
There is a nice solution using asyncio in python 3:Note that the sleep and similar functions in python expect a number of seconds, so I have replicated that. But you can supply fractions if you need milliseconds. (e.g 0.5 => 500ms).An advantage of this approach over asyncio.call_later is that it only works with a synchronous callback. This implementation awaits  if the callback is a coroutine so it is slightly more robust.
Use the time module like this:


Answer URL
https://docs.python.org/3/library/asyncio-eventloop.html?highlight=call_later#asyncio.loop.call_later
https://docs.python.org/3/library/asyncio-task.html
