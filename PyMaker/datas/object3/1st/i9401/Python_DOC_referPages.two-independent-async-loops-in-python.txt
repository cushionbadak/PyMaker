Natural Text
What would be a good approach to execute two asynchronous loops running in parallel in Python, using async/await?I've thought about something like the code below, but can't wrap my head around how to use async/await/EventLoop in this particular case.Expected output:
this works fine:note: you wanted to await fast non-io bound operations (list.append and list.pop that are not even coroutines); what you can do is awaitasyncio.sleep(...) (which is a coroutine and yield control back to the caller):time.sleep itself is blocking and does not play nicely with await.
List objects do not have awaitable operations, nor do they need to as there is no I/O or other delay you could handle asynchronously.You also want to use asyncio.sleep(), not time.sleep(); the latter blocks.The following works just fine; I added in a timestamp in the notify to show this off better:Note that we use await on the asyncio.sleep() call; that provides a point where your coroutine (cooperative routine) yields control to another routine.This produces:


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.sleep
