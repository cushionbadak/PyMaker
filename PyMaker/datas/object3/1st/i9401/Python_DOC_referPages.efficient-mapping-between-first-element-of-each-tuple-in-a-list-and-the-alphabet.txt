Natural Text
I have a list of tuples of strings:I want to create a mapping between the first element of each tuple and the English alphabet lowercase characters:'first' mapped to 'a' 'second' mapped to 'b' 'third' mapped to 'c''fourth' mapped to 'd'I have tried the dictionarybut I was wondering if there was a more efficient approach which would create the list containing the first element of the tuples and the alphabet list and then iterate them to create the dictionary.Also, for the alphabet characters, I have tried using string.ascii_lowercase but it gives the string not as a list of each character. I am new with Python so excuse if the question above is basic. I would appreciate any example code for me to understand and learn.
You can use zip() and a dictionary comprehension:or if you want to do it in a more 'functional' way:
Sure, you can achieve that using dictionary comprehension and using string library:

You may create your desired dict using zip as:OR, even better to use it with operator.itemgetter as:Value hold by my_dict will be: Explanation:You were almost there. string.ascii_lowercase returns a string but you may iterate the string and access the item based on index (same as you do with list). For example:As an additional piece of information even though you don't need this: If you want to convert the string into list, you may type-cast it as:


Answer URL
https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries
