Natural Text
I have 2 sets of sets, I need to get all permutations of their combination (as in union) into a single set such that no 2 sets within it contains duplicate elements (you can assume each parent set doesn't have sets with duplicate elements itself), while I can remove only the 2nd level sets, not the elements themselves, for example those:would get me:one set from one parent set could give me a subset of sets from the other parent set that are incompatible (i.e. contain one or more common elements), keeping each of those in the second set would give me a new subset of sets that I can remove from the first and so on.. running this recursively and checking for repetitions is pretty time intensive...is there a better way to approach this ? what tools I can use ? (currently doing this in python)P.S. a small code example of what I mean, again, I'm not looking to fix bugs, just asking for a neater approach:
Here is an itertools-based approach which takes two lists of disjoint sets and returns all maximal combinations of disjoints sets drawn from the two lists subject to the constraint that the sets in the combinations are disjoint:To test it:Output:As a technical annoyance, neither sets nor lists are hashable so it is impossible to maintain a set of lists of sets to filter out redundancies (since the algorithm generates the same maximal combinations more than once). Thus I had to turn the lists of sets into tuples of frozen sets to temporarily record them, only to reverse the process at the end. This is a brute-force approach. It iterates through all 2^n subsets of A, extending each one to a maximal combination in the only way possible. If there is a discrepancy between the size of A and the size of B, pass the shorter of the two lists first (or tweak the code so that it does this automatically). This approach is reasonable for smallish collections but won't scale well. I suspect that the problem itself is NP-hard, so there is a limit to how much efficiency you can expect (which isn't to say that this algorithm is optimal).


Answer URL
https://docs.python.org/3/library/itertools.html
