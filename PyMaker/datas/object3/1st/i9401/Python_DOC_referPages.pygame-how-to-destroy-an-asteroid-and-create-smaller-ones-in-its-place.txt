Natural Text
I'm making this classic style asteroids game and I've beaten all the challenges that come with it. Right now there's a new one.When a bullet hits one of the asteroids, the expected behavior is that it disappear, then three or four smaller asteroids appear in its place, each with random velocity so it looks like a kind of explosion. But instead this weird behavior show in this video I just recorded:https://youtu.be/2ZJvOcB-ZKMAs you can see it does 90% of what it's supposed to do, the asteroid dissapear, then I create four new and smaller asteroids in its pace but then, for some reason they dissapear when they should behave like normal asteroids, since they inherit everything.The game source code can be found here: https://github.com/JuanBonnett/pysteroidsThe classes in charge of handling the collision Bullet->Asteroid are:asteroids.py Main file creates all the objects, the ship, the asteroids generator and the collision detector object.physics.py Where the CollisionDetector class is and which detects when they collide and call its dependencies to do stuff with the collisionasteroid.py has an asteroid generator that generates smaller asteroids in the place of the collision, which I call debris.
When an asteroid blows up, you are passing it a pos vector of where to start.You are applying that same vector instance to all resulting asteroids.All smaller asteroids have the same self.pos value as their siblings that came from the same parent asteroid.It looks weird because the self.points property is working just fine and updated/translated correctly and so you're seeing two positions fight each other and give chaotic/unpredictable behavior. Basically the problem is the pos = _pos line in AsteroidGenerator.generate. It should be making a copy of the vector instead of assigning the reference directly to the new asteroid.I discovered this by putting print statements in your asteroid render code printing the position: print(self.pos.x, self.pos.y). I noticed all asteroids had the same self.pos but were being given supposedly random velocity vectors, so I figured it was probably an object reference problem and followed where that was being assigned. 


Answer URL
https://docs.python.org/3/library/logging.html
