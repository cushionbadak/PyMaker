Natural Text
I would like to use python to ssh into a remote machine, launch an interactive executable on the remote, and then interact with said executable.In other words, I would like to mimic what happens when you do something like:(python2 is just python, but I named it differently to avoid confusion).When I do the command line above, I am "seamlessly" interacting with python2 on the remote.  I can't seem to do this in python.  I've tried using paramiko and subprocess, both have the same problem at this point.  For example, in subprocess:When I do that, I see nothing at the command line, but I can see via ps that python2 is indeed running, I just can't interact with it the way I'd like.  I can't see output from Python.I want to be able to submit commands from the host python script, like ssh.execute("1+1").  Which would basically tell python2 to compute 1+1.  I then want to read the output back into the host python script.  
IssuesYour issue is that â‘  ssh.stdout.readlines() is reading all existing input that has been buffered up to the point you're accessing it, split by line ending (either \r or \n).But because you're opening a prompt, there's â‘¡ likely to be only one line, which is >>> which does not have a line ending.handle streamsWhat you need to do is to create a while loop to read the output as it comes:and that would work that way:then as soon as a complete line is printed out by the remote python interpreter, you'll have something showing up on your console. But that only solves â‘ .You still need to have the remote process to output at least one full line, and the only way to do so, is to actually send data to it!So you want to add another function that does that:which you would call that way:And that will solve â‘¡.parallelize readingwith threadsBut now, you've got another problem, logically speaking if you do:your program flow will never reach handle_errput() or handle_input(), because it will get stuck in the handle_output() infinite loop.The solution to that is to parallelize execution of the three loops:That way reading from external process will happen in another thread, and writing will happen in the current thread. You could as well start three threads (one for reading stdout, one for reading stderr, one for writing) and have the main thread run a loop that will do "stuff" and communicate with those threads (hint: use threading.Queue to exchange data between the threads).with an event library (py3 only)You can avoid using multithreading, and the pain of inter-thread communication if you use an async library like asyncio offered with python 3 (for py2 you can use tornado or greenlet), which will offer you a very nice abstraction over using select():using select() callIn python 2, the best and simplest (but far from being the easiest) way to implement this, is to use a select():Basically a select call would look like:but you should better read a thorough documentation about select().Where to go from there?I want to be able to submit commands from the host python script, like ssh.execute("1+1"). Which would basically tell python2 to compute 1+1. I then want to read the output back into the host python script. The solution I gave you is helping you to handle transparent communication from your terminal to the remote python process. It's exposing all the tools you're missing to implement the above, except one, how to communicate between the 3 loops?The simplest way is to use three queues, two that handle results incoming from the remote process, the last that handles outgoing commands:Then in your main thread you can implement:and your handle_output function would look like (you can adapt to both :Just to give you the ideaâ€¦ Now it's your turn to fill the blanks and choose what suits best your needs ðŸ˜‰DISCLAIMER: this answer has untested code aimed at giving you a direction on how to achieve what you want. Don't copy/paste it but read the documentation and understand what you're doing. Also use threading with care, as a hint, never use a variable in two threads, or you might get bitten. hard.HTH


Answer URL
https://docs.python.org/3/library/asyncio.html
