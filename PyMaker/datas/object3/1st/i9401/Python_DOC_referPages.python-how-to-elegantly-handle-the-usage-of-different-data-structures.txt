Natural Text
I'm using Python 3.5 and this is the code I'm dealing with at the moment:I think that type list is best when dealing with a single Collatz sequence. That's why collatz_seq returns a list. However, I find it interesting to observe how this particular sequence develops when dealing with multiple parameters n in a row. That's why I created collatz_seqs.I do not like collatz_seq_sum for a very simple reason: it only works properly if its parameter seq is of type list. In my opinion it's not the responsibility of collatz_seq_sum to make sure that a proper actual parameter is provided, in this case a list comprised of natural numbers. In my opinion the caller to collatz_seq_sum has to make sure that it's provided a correct parameter.I want collatz_sum_seq to work with single and multiple sequences. collatz_seq returns a list and collatz_seqs returns a dict. Therefore my question: what's the elegant way to make sure that collatz_seq_sum always gets the correct data type for its parameter seq? What can I do for collatz_seq_sum to properly work without collatz_seq_sum caring about the data type of its parameter seq? My first idea was to change collatz_seq to have it return a dict instead of a list and changing collatz_seq_sum in order to process a dict. However, I don't like this approach because I don't want a dict when dealing with a single sequence.Do you have any solutions to that? Thank you very much in advance.
the only way to do polymorphism for functions in python is to check the type of the argument given:if you want a function to behave differently depending on the type of the input this is the way to go.
If I understand it correctly, you want collatz_seq_sum to work with both a dict of collatz sequences or an individual collatz sequence. In the case of a dictionary, you want the function to return a dictionary of the sums of individual collatz sequences.You can use isinstance to check whether the input seq is a dictionary or a list and run different code for each case. The following code would work.However, if you what you want is sum of all sequences of the dict, you could use the following instead,
Python 3.4+ - functools.singledispatch lets you overload a function definition based on the argument's type.Calling collatz_seq_sum with something other than list or dict will raise a NotImplementedError.


Answer URL
https://docs.python.org/3/library/functools.html#functools.singledispatch
https://docs.python.org/3/library/functools.html#functools.singledispatch
