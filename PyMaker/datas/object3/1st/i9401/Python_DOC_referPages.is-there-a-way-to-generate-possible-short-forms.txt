Natural Text
Consider the string Building Centre.  If asked to abbreviate this to fit a specific number of characters, you and I may choose very different but equally valid representations.  For instance, three valid 7 character representations are:BLD CNTBLD CTRBLDNGCTThese are generated by:Using only existing letters in the string (can't abbreviate using z)Using them in the order they appear (LBD is not valid since L does not come before B in Building).Selecting up to as many characters (including spaces) as indicated.I'm looking to write a breadth or depth of search based algorithm to generate all such short forms for a given string and desired length.Before I go about writing the script, I am wondering if something similar has already been implemented.  If not, how would you suggest I write something like this?  Besides itertools, are there any useful libraries?
Yes, this can be beautifully done with itertools:Note that itertools.combinations does indeed preserve the order. You way want to check out the docsEditIf short forms with fewer than length characters should be allowed as well, you can useAs stated in the comments, some short forms get generated twice. To fix this, use e.g. shorts = list(set(shorts)).


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
