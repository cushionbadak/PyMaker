Natural Text
I want to write a code (in python 3) that is able to calculate the sum of all possible combinations of a varying number of lists. The result of the sum needs to be checked with a specified value. For all combinations where the sum adds up to the specified value, I would like to create a new list containing just those values. For example:The result should be for example:I know that a simple option would be to use nested for-loops. The problem is that at the time of writing the code I dont know how many lists there will be, resulting in the need to define all possible cases. This is something I dont want to do. By the time I am running the code, I do know how many lists there are. The length of the lists will always be the same (26 elements).The lists that need to be checked are stored in a list in the following way. For example:An example of an actual set of lists that I would like to solve this problem for is:All the zero values are the result of other refinements in the total number of options that do not meet other criterias.I hope someone can push me into the right direction.Thanks in advance!
With some list of lists l (don't name something list, there's a built in function named list)We can use itertools.product to get all combinations of items between the lists, then map the sum function onto those combinations.  Then checking for membership is easy.If you want to save the sums for multiple checks, I recommend saving them into a setThe * in product(*l) takes the is the unpacking operator.  It gives the elements of l to product as individual arguments product([1,2,3,4], [2,3,4,5])


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
https://docs.python.org/3/library/functions.html#map
https://docs.python.org/3/library/functions.html#sum
https://docs.python.org/3/library/itertools.html
