Natural Text
I'm new to Python. I'm trying to fill a list with the filenames of a bunch of images in a folder. They all begin with "frameinstance" and are then followed by a number from 0-40, i.e. "frameinstance0.png". I tried the code below, but I'm getting a MemoryError error.I also tried this. My output was close, but it's not a list.the output is: []frameinstance0frameinstance1frameinstance2frameinstance3frameinstance4frameinstance5frameinstance6frameinstance7frameinstance8frameinstance9frameinstance10frameinstance11frameinstance12frameinstance13frameinstance14frameinstance15frameinstance16frameinstance17frameinstance18frameinstance19frameinstance20frameinstance21frameinstance22frameinstance23frameinstance24frameinstance25frameinstance26frameinstance27frameinstance28frameinstance29frameinstance30frameinstance31frameinstance32frameinstance33frameinstance34frameinstance35frameinstance36frameinstance37frameinstance38frameinstance39
With a basic list comprehension:In the first code, you always change the value of filenamelist, by converting it to a string that is longer and longer, which ends up on a MemoryError. Check Ryan's answer for more about this, especially why it does not happen in the second code.In the second code, you put [] in filenamelist, and then concatenate it with "frameinstance" + str(i), so at every iteration, you concatenate "frameinstancei" at the end of this string.You end up with a string beginning with "[]" and followed by "frameinstancei" 40 times.Few things though:When you build a list, either use a list comprehension as above for short lists, or use the append method. Typically, write filenamelist.append("frameinstance{}".format(i)) instead of filenamelist = ...It is considered deprecated to print strings by writing "blah" + str(x) + "blah". Instead, use the format method: "blah{}blah".format(x).Don't forget that range(n) gives you integers from 0 to n-1. Therefore, your calls should be range(0,41) instead of range(0,40), and could just be range(41).
The issue is that here:filenamelist is a list, and str(filenamelist) will get you a string representation of that list: brackets [ and ], surrounding a string representation (using repr) of every item in that list. Let’s look at how that expands:Oops. The string representation of a string includes its quotation marks, which have to be backslash-escaped at some point. The backslashes also have to be escaped with another backslash, resulting in exponential backslash growth. Let’s do the math:the third string representation has 2 single quotes and 0 backslashesevery new iteration adds 2 single quotes, 1 backslash for every backslash, and 1 backslash for every single quoteAfter 40 times around the loop, you end up with a list with one string containing 274 billion backslashes, which is a lot of backslashes to fit in memory.The issue here was converting the list to a string to concatenate another string to it; you were probably going for concatenating a list to a list instead of a string to a string. That’s doable:Typically, though, you would use the list’s append method to add one item in place.Now is a good time to note that Python has some helpful string-formatting tools to format numbers (and more) into strings:and give a preview of the short way you’ll likely know how to write this in the future!
You need to add the object into the list
You are really close with your first pass.  A few things to consider:you don't need to initialize filenamelist or i.you can use list comprehension to put the for loop inside the list construction filenamelist = ["frameinstance{}".format(i) for i in range(41)]
range(start, end) do not include end range(0, 40) will end at 39you need to construct a list not string, use list comprehension is recommend.
Try this:Or more pythonic (and faster, for loops are slow in python):You were getting a MemoryError because you were iteratively adding the list to itself causing you to run out of RAM :P.


Answer URL
https://docs.python.org/3/library/functions.html#repr
