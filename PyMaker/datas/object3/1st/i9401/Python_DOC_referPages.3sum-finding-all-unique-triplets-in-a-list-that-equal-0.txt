Natural Text
I am working on the 3SUM problem (taken from leetcode), which takes a list as input and finds all unique triplets in the lists such that a+b+c=0. I am not really sure what my code is doing wrong, but it currently returns an empty list for this list [-1, 0, 1, 2, -1, -4], so it is not recognizing any triplets that sum to 0. I would appreciate any suggestions or improved code.Here's my code:
A couple things to note.Don't use sum as a variable name because that's a built-in function.Your indexing is a little problematic since you initialize l = 0 and have i begin at 0 as well.Don't rest on your laurels: increment the value of l when you find a successful combination. It's really easy to forget this step!An edited version of your code below.If you wish, you can omit the repeats from the list.Another approach uses itertools.combinations. This doesn't require a sorted list.A nested for loop version. Not a big fan of this approach, but it's basically the brute-force version of the itertools.combinations solution. Since it's the same as approach as above, no sort is needed.
I did a similar approach as 3novak, but I added in the case where the number list is less than three integers returning an empty list.I'm doing the same problem at leetcode, but still have a runtime error. This may be able to be done by using a binary search tree-like algorithm to find the third result, as well.
Uncomment print statement from my solution:It will help you to understand the algorithm better. Also, this algorithm is 3 times faster than the above available options. It takes ~892.18 ms compared to the above alternative with runs in ~4216.98 ms time. The overhead is because of the additional removal of duplicates logic. 


Answer URL
https://docs.python.org/3/library/itertools.html
