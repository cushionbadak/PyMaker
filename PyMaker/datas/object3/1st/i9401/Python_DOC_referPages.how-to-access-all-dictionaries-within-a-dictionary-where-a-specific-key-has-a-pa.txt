Natural Text
I have a dictionary of dictionaries, with each nested dictionary having the exact same keys, like this:How to I get a list (or dictionary) of all the dictionaries where 'city' has value 'bar'?The following code works, but isn't scalable:Say 'city' can have 50,000 unique values and the dictionary all_dicts contains 600,000 values, iterating over the dictionary for every single value of 'city' is not very efficient. Is there a scalable and efficient way of doing this?
What you could do is create an index on that dictionary, like this:This will require some initial processing time as well as some additional memory, but afterwards it will be very fast. If you want all items with some cityName, you'll get them by doing:This gives you many benefits if all_dicts is built once and queried afterwards many times.If all_dicts is being modified during the execution of your program, you will need some more code to maintain the cityIndex. If an item is added to all_dicts, just do:while if an item is removed, this is a straightforward way to remove it from the index as well (assuming the combination of 'name' and 'city' is unique among your items):If there are many more queries than updates, you will still get a huge performance improvement.
You have to check all the values; there isn't an alternative to that. You could however use a vectorised approach - list comprehension - which is going to be much faster than a for loop:Using dict.values instead of accessing the dictionary keys also improves performance and is also memory efficient in Python 3.
Or use filter, in python 3:Or with pandas:
out:Build an auxiliary dict to store city as index, and you can reference it very quickly.


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
