Natural Text
Im working with python 3.7 and aiohttp, trying to send async http requests from a client to a server.This is the server code:and this is the client code:  However I have an issue where it looks like all of the requests are being 'prepared' one at a time but then sent all at once.This is how the output is printed where the "blocking calculation" is inside of the for "fetch" func: gif1 And this is how it looks where the "blocking calculation" is done inside of the for loop: gif2I have two questions.1. What causes this difference in behaviour between gif1 and 2?2. Why do all the requests get send at once? I Would excpected a output similat to this:Starting requestStarting requestStarting requestFinished requestFinished requestStarting requestFinished request...  
The issue is that blocking code such as a call to time.sleep(0.3) cannot be executed in parallel by asyncio because it blocks the whole event loop thread. Replace it with await asyncio.sleep(0.3) and the issue will go away.If you have actual blocking code that you must run inside the coroutine (e.g. a numpy computation), use await loop.run_in_executor(None, blocking_function) to run the calculation in a side thread and safely await the result, allowing other coroutines to make progress while waiting.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.sleep
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_in_executor
