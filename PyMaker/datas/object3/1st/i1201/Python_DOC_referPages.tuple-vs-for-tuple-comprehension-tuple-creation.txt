Natural Text
I understand I can create a tuple by these two methods:I'm trying to understand what exactly is happening here:the tuple constructor seems to want a list, but it doesn't seem like the following would produce a listAlso I'm wondering why this doesn't work:With dictionaries it seems I can use either:but now I'm wondering if, like tuples, there's a difference.  Is ():tuple() a different :: relationship than {}:dict()?
Let's break down what's happening here. You're not wrong that the tuple constructor seems to want a list, but it would be more precise to say that the tuple constructor seems to want a list-like object. (to be specific, any iterable works)This is a philosophy called as Duck Typing. The saying goes as follows:If it walks like a duck, swims like a duck, and quacks like a duck,  then it probably is a duck.So then, a list worksbut so does a different iterable, such as a setSo, tuple does not care whether the object it receives is a list, just that it should be able to iterate and get values from the object.Now, The second part of the magic comes from something called list comprehension/generator expressions. They are iterables you can create which make it easy to write 1 liners that create a list or a generator expression respectively. More on the generator later, for now, it is sufficient to see how a list comprehension works.A simple example of list comprehensionWe see that they produce lists. So, can we feed them to a tuple constructor? Why not!Now, what about using the same expression but wrapping it in curved brackets instead?You just created a generator expressionThey are essentially memory efficient on-demand iterables. (to be jargon specific, they have a yield and next , and only yield values as needed). Let's see it in action.We can see that we receive the same values as with our list comprehension. So, does a tuple accept something like a generator? Well, duck typing to the rescue! Absolutely!Do i need the redundant parenthesis? Nope!Now, what does this produce? (x, x*x) for x in [1, 2, 3]Well, it is an expression, but let's get an idea of how it would look in a list comprehension insteadAh, its a list of tuples? Can a generator do the same?Yep, looks good. So its a generator, but its an iterable. Behaves like a duck anyways, doesn't it? So, the tuple constructor should work just fine!So, that wraps up everything. The parenthesis do not imply a tuple all the time, () are not reserved for tuples. We see here that they can be used for generator expressions as well! Similarly, the {} do not have to be tied to dictionaries always, something similar to list comprehension actually exists for dictionaries too! (Known as dict comprehension) I highly recommend going through the links for a more thorough explanation of the individual pieces that are working together here. Hope this helps!


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/reference/expressions.html#generator-expressions
https://docs.python.org/3/tutorial/datastructures.html#dictionaries
