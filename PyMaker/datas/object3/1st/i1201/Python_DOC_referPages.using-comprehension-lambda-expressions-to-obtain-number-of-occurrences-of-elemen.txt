Natural Text
Just went through list, dictionary, set comprehensions and understood lambda expressions but I'm unable to use them to capture the number of occurrences of integers in a nested list as illustrated in the example below. So, is there a solution with comprehensions or lambda expressions to compute it or is it beyond the capability of such constructs? If it's not possible, then what's  the intuition for why it cannot be achieved with comprehensions/lambda expressions?I'm currently using a double for loop to do the computation.
The constructs of generator expressions, list comprehensions, etc. are good for individually mapping the items in a sequence. They are not at all meant for aggregation, which is what you are trying to do here, i.e. combining the values of several items.For your purpose you can use the collections.Counter (which does the aggregation of counting items) with a generator expression that flattens the nested lists instead:This returns:
You can utilize itertools.chain and the Counter object to get these results.Calling chain will flatten your lists and Counter will provide the frequency counts of each value in the flattened list.
You can flatten your nested lists to get a single list using sum and then  apply Counter to get the frequency of occurrence of each element 
You could count each element in the sub-lists (using Counter) and sum the counts:Output


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/functions.html#sum
