Natural Text
Say I have a function foo in a big Python project that has a named argument bar:This function is called a lot in the codebase, in calls that use or omit the named bar parameter.Now say I'm changing this function because it has a bug and want start using a function from a certain package, that is coincidentally also called bar. I cannot use the bar function when I import it like this:I could use something like:But this file also contains a lot of invocations of bar so that's a no-go.The only way I can see this working is to rename the bar method from package:Or to import it multiple times (untested):Is there some way I can rename the bar parameter in the foo function, without all calls to the foo function breaking in the entire codebase?
This is a common issue. In this case, it helps to have an additional import statement for package, so you can safely refer to package's bar through the package namespace without running into naming conflicts.You still end up importing the module once, but you now have two ways of referring to bar.
Replace the function body with a call to another function with differently named arguments:Then you are free to use bar in that function as the name of the function from the package rather than the argument.
If you're lucky, the foo function is only called by "foo()" or "foo(24)" and nowhere by "foo(bar=42)" and then you can put any new name instead of bar without breaking anything.Else you have to grep / search for all calls of "foo(bar=" and replace them too, being careful of the possible extra spaces like in "foo( bar =".
I don't know if I understand your question correctly, but if you just wanna avoid namespace conflict in that specific function, why not import it inside the function?And you can add one line comment at top to remind yourself.
You could use the globals() to reference global variables.This shouldn't break anything in your code base.


Answer URL
https://docs.python.org/3/library/functions.html#globals
