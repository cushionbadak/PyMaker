Natural Text
Novice programmer here. I'm phrasing this question in terms of Python, but I think it makes sense for any programming language that has the concept of Exception Handling.Here it is: I'm writing a software for a business client, who will interact with the software by using a GUI.I'm thinking about putting all of the core business logic in a try/except block in order to catch all exceptions that I haven't planned for (and which I catch and resolve before they bubble up). These could be bugs in other libraries that I'm using, my own bugs, or other unforeseen events. The output of those exceptions I want then to display in a GUI error message.The reasoning behind this will be that if such an error were to occur once my software is deployed and the client would call me telling me "hey, I got this error message that says X", then I would have at least some hint from X as to what went wrong and could immediately start debugging - rather then the GUI just exiting silently and the client calling me and telling "your app just died".1) Would this be a good idea? Since this software will be used in a "safe setting" there is no issue of sensitive information leaking into the error message, which then is displayed. But I'm still unsure, of there aren't any other problems I might run into with this approach.2) If I should go down this route, should I use except BaseException or except Exception?Even after consulting Python's exception hierarchy I don't really get when the three additional exceptions that I'd get if I were to use the first option are really thrown. My application won't use the keyboard, so I think I'm safe regarding KeyboardInterrupt, but I'm unsure about the other two,SystemExit and GeneratorExit.
Show the error messages in your gui only if the user needs to know, such as when the program cannot recover from an error.Use except BaseException to avoid catching exceptions that need to be handled differently. If you need to catch every single type of exception, try to make as many except blocks as possible in order to recover from as many errors as possible.


Answer URL
https://docs.python.org/3/library/exceptions.html#exception-hierarchy
https://docs.python.org/3/howto/logging-cookbook.html
https://docs.python.org/3/library/sys.html#sys.excepthook
