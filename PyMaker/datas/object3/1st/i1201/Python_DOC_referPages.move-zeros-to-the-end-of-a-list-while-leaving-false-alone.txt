Natural Text
I have some code that should find the position of any 0 items in a list and move it to the back whilst preserving the order of the other elements.This code works fine for any list apart from one with False in. I think this is because the .index(0): will also return the position of any False in the list. Any way to get around this?For example if array = [0,1,None,2,False,1,0] then the output should be [1,None,2,False,1,0,0]With that same input my code produces: [1, None, 2, 1, False, 0, 0]
This is a consequence of the fact that bool is a subclass of int in python, so searching for the first index of 0 will return the index of False, if it is in the list before a 0 because False == 0.What you can do is check whether a list element is an instance of int, and at the same time, not an instance of bool. This way, you avoid matching other falsey values (like empty containers and None).You can then iterate over lst in reverse and update in-place.This is amortised linear time complexity, if I'm not mistaken.
If creating another list is of no concern, you can use list-comprehensions:The first part filters out any 0 integerbut lets any non-int pass. The second part adds (too many) zeros and trims the result back down to the original lenght.Caveat: This will create up to twice the original list-length in data - so not good for "big" lists or lists with few 0.Usage:Output:Doku:(related) Truth-testing - there are other values that are "False" as well.
A variation of @coldspeed's solution:
You can use a wrapper with a custom __eq__:Then replace array.index(0) with array.index(Typed(0)) - you don't need to use this within the array itself.Extending this to containers (so that (0, 1) and (False, True) won't be equal) is left as an exercise for the reader.
I think this is as concise as this can be. Thanks for the help everyone
Python guarantees True and False are the only instances of bool, so you can use is to distinguish False from 0.This will preserve the order of the various non-False zeros (0, 0.0, 0j, Decimal(0), Fraction(0, 1)),  that may be in the list.


Answer URL
https://docs.python.org/3/library/stdtypes.html#truth-value-testing
https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy
