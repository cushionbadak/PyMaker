Natural Text
Where len(a) can be as large as needed and len(a[I]) can be as large as needed..how can I get out b = [['dog','frog','cat','dog'],['bird','bat','ball','call']] ?I have tried somethings along the line ofand just general list comprehension with .join, but have had no luck.
b = [sum([x.split('===') for x in sublist], []) for sublist in a]should give you what you want. Works like this:split('===') makes list from every stringyou then add those using sum: sum([['dog', 'frog'], ['cat', 'dog']], []) is basically ['dog', 'frog'] + ['cat', 'dog']sum([x.split('===') for x in sublist], []) uses list comprehension to make a split list from all pieces of small list (['dog===frog', 'cat===dog']), which is the fed to sumand it's all wrapped in another comprehension that runs it for every part of your big list a
You could use a nested list comprehension:Output
You can use chain.from_iterable to flatten the results of splitting the strings in a list into a single list
Here's a one-liner using list comprehension.[[word for element in sublist for word in element.split('===')] for sublist in a]
Output:



Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions
https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
