Natural Text
The code is as follows:The problem is that the code outputs that there are about 75% 'M' stars and nothing else besides. For example, when i use 1000 as the value for numStars, I get a result of about:I have tried as much as I can to fix this error, including changing the logic to:Please help!
If you're using Python 3, use random.choices as shown by Patrick Artner.Otherwise, just reverse the order of the checks:If the first check fails, planetTypeChanceNum can still be less than 0.13 (and it is implied that 0.0003 <= planetTypeChanceNum).However, what's the planet type if planetTypeChanceNum >= 76.45? You're missing an else clause, or perhaps an initial if statement to continue the loop early if there is no planet at all in that case.orBoth of these will exhaustively cover the  interval [0, 100).
This is what you want:What I want to know is how you were getting any 'O's with your original code...
You do not get results because the later tests never can be true -the earlier would have matched already:Beside that you can make your creation far easier by using random.choices() supplying a weight for each choice and use Counter to count them:Output (for 1 million stars):Doku:random.choices(...) - with weighted probabilitycollections.Counter - special dict to count things@Chepner marked that your weights are probably already cumulative-considering the structure of your if's:Leads to: 
You are misusing elifNone of your cases aside from M will ever fire, since once they 'qualify' at the M if block, they then skip over the elifs.To get the functionality you want, you need to bound your if statements, rather than having them one-sided.Example:There are more efficient ways to do this, but I think at this point you just need to understand if/elif functionality.


Answer URL
https://docs.python.org/3/library/random.html#random.choices
https://docs.python.org/3/library/collections.html#collections.Counter
