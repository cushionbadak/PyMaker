Natural Text
New to Unit testing (using pytest) and trying to workout how I can test a config module which loads its values from an ini file in a way that isolates it from its environment. I want to test that the values in the file are the same as what was loaded to the Configuration instance.As shown the ini file is hardcoded in the module but don't want to be tied to config.ini when its potentially unavailable.This is a simplied version of the config module:I access the config values like this:Any help much appreciated.
You write:how I can test a config module [...] in a way that isolates it from its environment.but alsoI want to test that the values in the file are the same as what was loaded to the Configuration instance.Which I understand in the following way: You want to test the chain "configuration input data" -> ConfigParser -> Configuration to check if the "configuration input data" will be found in the Configuration in the expected way.  This is, btw., rather an integration-test scenario than a unit-test scenario.With respect to the isolation you mentioned, I understand it such that you don't want to use 'config.ini' as the data source, but something that is under your control.  You have already provided the name of the configuration file as an argument to your constructor.  This is a good step, since it gives you some control from the testing side, namely giving you the option to specify the file to be used from the test.However, you can even take this further: The ConfigParser class can read from a string instead of a file (the method is read_string, new in Python 3.2: https://docs.python.org/3/library/configparser.html).  If you change your code such that the test can control whether Configuration instructs the ConfigParser to read from a file or from a string, you can create your integration tests by providing strings as inputs, which isolates you from the file system.There are many ways to change the code such that tests can make it parse from a string instead of from a file: One simple approach is, to make the ConfigParser object itself an argument to the function.  That way, you would from the outside create the ConfigParser and either have it read from a file or from a string.  Another option is, to do the reading from a helper method, which you can override in your test.


Answer URL
https://docs.python.org/3/library/configparser.html
