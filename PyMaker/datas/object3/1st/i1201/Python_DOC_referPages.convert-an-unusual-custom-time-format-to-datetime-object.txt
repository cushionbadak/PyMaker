Natural Text
I have an unusual datetime format in my dataset, which I need to convert to usable datetime object. An example looks like: '1/3/2018 1:29:35 PM(UTC+0)'I have tried to parse it with:but it doesn't recognize the format.My current workaround is to parse the datetime column (the data is in pandas dataframe) using regex into two columns, like so:and then depending on the value of the 'utc' column apply custom convert_to_eastern function.I wonder if there is an easier way to accomplish it using  datetime.datetime.strptime() ?Following didn't work:Addition:This is not a question: "How to convert UTC timezone into local timezone" My dataset has rows with UTC as well as Eastern time zone rows. The problem I have is that the format is not an ISO format, but some human-readable custom format. 
Question: an easier way to accomplish it using datetime.datetime.strptime()Split the datestring into parts: utc:[('1/3/2018 1:29:35 PM', '(UTC+0)', 'UTC', '+', '0')]Rebuild the datestring, fixing the hour part padding with 0 to 2 digits.I assume, there are no minutes in the UTC part, therefore defaults to 00.If the datestring has more then 2 UTC digits, returns the unchanged datestring.Note: The strptime format have to be %Z%z!  Documentation: strftime-and-strptime-behaviorOutput:Tested with Python: 3.4.2
The problem is with '+0' for your timezone 'UTC+0'. datetime only takes utc offset in the form of HHMM. Possible workaround:
It should be something like that:Big "Z" for timezone (UTC, GMT etc), small "z" for delta. Also you should add more zeros to delta.


Answer URL
https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior
