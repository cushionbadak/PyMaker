Natural Text
Is there a clean way to patch an object so that you get the assert_call* helpers in your test case, without actually removing the action?  For example, how can I modify the @patch line to get the following test passing:I could probably hack this together using side_effect, but I was hoping there would be a nicer way which works the same way on all of functions, classmethods, staticmethods, unbound methods, etc.  
Similar solution with yours, but using wraps:According to the documentation:wraps: Item for the mock object to wrap. If wraps is not None then  calling the Mock will pass the call through to the wrapped object  (returning the real result). Attribute access on the mock will return  a Mock object that wraps the corresponding attribute of the wrapped  object (so attempting to access an attribute that doesnâ€™t exist will  raise an AttributeError).
This answer address the additional requirement mentioned in the bounty from user Quuxplusone: The important thing for my use-case is that it work with @patch.mock, i.e. that it not require me to insert any code in between my constructing of the instance of Potato (spud in this example) and my calling of spud.foo. I need spud to be created with a mocked-out foo method from the get-go, because I do not control the place where spud is created.The use case described above could be achieved without too much trouble by using a decorator: If the method replaced accepts mutable arguments which are modified under test, you might wish to initialize a CopyingMock* in place of the MagicMock inside the spy_decorator.  *It's a recipe taken from the docs which I've published on PyPI as copyingmock lib


Answer URL
https://docs.python.org/3/library/unittest.mock.html
https://docs.python.org/3/library/unittest.mock-examples.html#coping-with-mutable-arguments
