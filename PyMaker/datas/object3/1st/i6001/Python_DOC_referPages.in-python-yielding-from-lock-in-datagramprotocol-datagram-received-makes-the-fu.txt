Natural Text
I want to synchronize data from between coroutines and I end up with a method not being called whenever there is "yield" inside it.To be more precise, when I implement a DatagramProtocol class with the method datagram_received as per the doc (inspired from this), everything works fine, I receive the data. As soon as I add a "yield" inside the method datagram_received, the method is never called anymore. Here is an example:How can a method suddenly get not being called depending on the content of the method?What am I missing? How the synchronization should be done?
What am I missing?Documentation that inspired you also states:Coroutines can be scheduled in a protocol method using ensure_future(), but there is no guarantee made about the execution order. Protocols are not aware of coroutines created in protocol methods and so will not wait for them.To have a reliable execution order, use stream objects in a coroutine with yield from. For example, the StreamWriter.drain() coroutine can be used to wait until the write buffer is flushed.You cannot yield from/await inside datagram_received, you may:How can a method suddenly get not being called depending on the content of the method?Use of yield or yield from in a function, makes it a generator. So datagram_received returns generator object. To actually execute the code (till yield) you should use next, asyncio does it with (generator-based) coroutines (but again datagram_received isn`t one)More about generators: https://jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/


Answer URL
https://docs.python.org/3/library/asyncio-protocol.html#udp-echo-server-protocol
