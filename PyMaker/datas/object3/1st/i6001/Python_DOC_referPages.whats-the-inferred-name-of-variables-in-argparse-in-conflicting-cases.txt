Natural Text
I have noticed that argparse uses a rather "mystic" way of creating the variables in the parser. I know that the names of the variables are usually easy to infer:it's the stripped version of long or short option (without the -- or - respectively).Also all hyphens (-) becomes underscores (_) to become legal variable names.But that leaves me with a question about conflicting cases (I know it's an extreme case but the inferring part it's a bit mysterious to me). For example the program:uses apparently two very similar options (--max-value and --max_value) which lead to the same inferred variable max_value. If either of the options was missing the variable would be max_value without ambiguity.But when both are present, apparently --max_value gets the trophy variable max_value and the second one (--max-value) gets what? I haven't been able to find what's the second variable. So, to access it I must define a variable explicitly with dest option? How do I get list of the names of variables available? The funny thing is that if I use dest= for the --max_value option then --max-value gets the expected variable max_value while --max_value gets the non inferred one (in my case max1)!I know also that metavar has nothing to do with the actual variable name but only affects the display in help.Edit:Adding some information from the @Martijn Pieters answer:If I am getting it write if no dest is applied the parser follows the general rule which states that an implicit dest is applied. The same in my case dest="max_value".So, is exactly the same as:internally.But, then the following code snippets should produce different results which it does not:max-value 3max-value 3Both just print the value of max_value as int independently of the order they are declared.So, int option have higher precedence than binary (i.e. flags)? Are option types important in these cases?P.S. I am using python 3.6.3 and since it might be a version issue I wanted to mention it.
There is no conflict here; for both --max-value and --max_value, the library simply generates the exact same destination name. Multiple options writing to the same dest destination name is perfectly valid; the last option used on the command line wins in that case:Here --option1 baz wins because --option1 was used last on the command line.Note that any defaults are applied before command-line parsing; the first registered option default value wins. Then the command-line is parsed and if only one of the options is used, then naturally the action associated with that option wins.It is up to you to pick non-conflicting destination names. Not picking option strings that are easy to confuse is also a good idea.If you were looking for a formal set of rules on what dest name is generated for a given optional argument, see the dest option documenation:For optional argument actions, the value of dest is normally inferred from the option strings. ArgumentParser generates the value of dest by taking the first long option string and stripping away the initial -- string. If no long option strings were supplied, dest will be derived from the first short option string by stripping the initial - character. Any internal - characters will be converted to _ characters to make sure the string is a valid attribute name.Multiple options all writing to the same dest destination name is useful for supporting old, deprecated names for a given option:So using -o or --old on the command line has the exact same effect as using -n or --new; the same destination name is set on the namespace.


Answer URL
https://docs.python.org/3/library/argparse.html#dest
https://docs.python.org/3/library/argparse.html#metavar
https://docs.python.org/3/library/argparse.html#dest
