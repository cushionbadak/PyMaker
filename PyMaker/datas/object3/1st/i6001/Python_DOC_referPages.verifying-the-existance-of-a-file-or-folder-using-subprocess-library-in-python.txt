Natural Text
I can check the presence of a file or folder using OS library very easily.The following two links have described thatdirectoryExistance fileExistanceI am attempting to use the subprocess library to do the sameand, I tried a couple of approaches already1- status = subprocess.call(['test','-e',<path>]), which is always returning 1, no matter what I pass in path.2- Using getstatusoutput, /bin/sh: 1: : Permission deniedwhich is working fine because status variable returns 126 if the file/folder exist and 127 when the file/folder doesn't exist. Also the result variable contains message but the "result" variable contains the message : Permission deniedBut the second solution looks like a hack to me. Is their a better way, of doing this ?
The test command is a shell builtin, and on many platforms doesn't exist as an independent command you can run.If you use shell=True to use the shell to run this command, you should pass in a single string, not a list of tokens.This will produce a malformed command if path contains any single quotes; try path.replace("'", r"\'") if you want to be completely correct and robust, or use one of the existing quoting functions to properly escape any shell metacharacters in the command you pass in.The subprocess library now offers a function run() which is slightly less unwieldy than the old legacy call() function; if backwards compatibility is not important, you should probably switch to that... or, as several commenters have already implored you, not use subprocess for this task when portable, lightweight native Python solutions are available.
As pointed in the comments sectioncan be made to work with a shell expansion if we use "shell=True"Although using os.path might be much more efficient anyways.


Answer URL
https://docs.python.org/3/library/pathlib.html#basic-use
https://docs.python.org/3/library/subprocess.html#security-considerations
