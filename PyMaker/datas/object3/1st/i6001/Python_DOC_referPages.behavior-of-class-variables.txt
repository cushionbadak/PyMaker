Natural Text
This question already has an answer here:Python class variables or class variables in general                    4 answers                Differences between static and instance variables in python. Do they even exist?                    6 answers                Compound assignment to Python class and instance variables                    5 answers                Are static class variables possible?                    17 answers                As you see, on changing the class variable by an instance's method, the same doesn't gets reflected in the class variable and the class variable of other instance. Why is it so?
Because q.b -= 1 creates an instance variable with the name b, look in your __dict__:q.b is different than a.b, you've shadowed a.b after the assignment. Take note that this isn't a Python 3 specific issue, Python 2 also behaves in the same way.This is clearly stated in the assignment statement section of the Language Reference:Note: If the object is a class instance and the attribute reference occurs on both sides of the assignment operator, the RHS expression, a.x can access either an instance attribute or (if no instance attribute exists) a class attribute. The LHS target a.x is always set as an instance attribute, creating it if necessary. Thus, the two occurrences of a.x do not necessarily refer to the same attribute: if the RHS expression refers to a class attribute, the LHS creates a new instance attribute as the target of the assignment: This description does not necessarily apply to descriptor attributes, such as properties created with property().


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#assignment-statements
