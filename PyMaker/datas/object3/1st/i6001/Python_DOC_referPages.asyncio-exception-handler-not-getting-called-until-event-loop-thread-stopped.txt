Natural Text
I am setting an exception handler on my asyncio event loop. However, it doesn't seem to be called until the event loop thread is stopped. For example, consider this code:This code prints "Exception handler called", as we might expect. However, if I remove the line that shuts-down the event loop (loop.call_soon_threadsafe(loop.stop, loop)) it no longer prints anything.I have a few questions about this:Am I doing something wrong here?Does anyone know if this is the intended behaviour of asyncio exception handlers? I can't find anything that documents this, and it seems a little strange to me. I'd quite like to have a long-running event loop that logs errors happening in its coroutines, so the current behaviour seems problematic for me.
There are a few problems in the code above:stop() does not need a parameterThe program ends before the coroutine is executed (stop() was called before it).Here is the fixed code (without exceptions and the exception handler):call_soon_threadsafe() returns a future object which holds the exception (it does not get to the default exception handler):However, coroutines that are called using create_task() or ensure_future() will call the exception_handler:You can use this to create a small wrapper:However, you should probably consider using a Queue to communicate with your thread instead.


Answer URL
https://docs.python.org/3/library/queue.html
