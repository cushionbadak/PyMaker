Natural Text
I'm a Python newbie, and I've been struggling with a class assignment for days. I have a csv file that contains data as such:There are about 40 rows in this file, each containing data related to a world city. As you can see, the top row is the header. I am supposed to create a class in Python and read the csv file into the class, where every row becomes an instance of the class. I am then to store the class instances in a list. I've been able to create one instance where all of the data is stored, but I can't seem to create an instance for each row (and I obviously do not want to do it manually).Here's what I've got so far:Again, I'm quite new with Python (and coding in general), and I realize this code is not good, but I'm having a lot of difficulty finding tips for reading csv files into a Python class.
You can try this:However, since you mentioned that there are many rows, you may want to create an id for each city that will act as your string representation in the list:Your output will be a listing like this:And any attributes can be called like so:Regarding your recent comment, to access city attributes by city name, you can slightly restructure instances:
Some tips to help you clean up your code:Instead of this:Define a list to keep track of years and their values:Now pair this structure with each city:Don't nest so deeply. Also, the following is really weird:You are looping over something and then looping over it again while you are looping over it...!Classes belong at top-level. That means there should be 0 spaces preceding class.should be:The reason I mention all this is because trying to do anything further with messy code just results in messier code. :) Try to improve your current code by:Using data structures (lists, dictionaries).Restricting levels of nested code to 2 max. (Consider using functions to help you with this.)Putting classes at top-level.
If your data is just an immutable record, use namedtuple:You can slice the row as you don't need the first value, and unpack it using *:You need to add just this object to your lists of cities, not every attribute:Putting it together with a list comprehension filtering out the label rows:
You can do this by using a csv.DictReader which will return each row as an dictionary. It will also allow you to easily define the class based on the fieldnames defined in the first or header row of the csv file rather than hardcoding them into your program.You'll still be able reference the fields of any record with "dot" syntax such as city.latitude, city.label, etc.Below is Python 2 code. For Python 3, open the file with:instead what's shown.Sample output from your sample input file:



Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
https://docs.python.org/3/library/csv.html#csv.DictReader
