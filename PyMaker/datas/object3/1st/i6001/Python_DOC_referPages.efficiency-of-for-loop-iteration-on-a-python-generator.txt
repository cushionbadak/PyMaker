Natural Text
I was going through generator in python and I got understood the advantage of generators.Consider the examplecase A:Say in the above example, instead of for loop, I usedcase B:Are case A and case B the same in terms of complexity?I mean if I am using a for loop like  in case A, will I get benefit of generator? Or do I always have to use next() for better benefits?
First of all, next() is not an equivalent. next() produces the next value in the iterator, it is not a drop-in replacement for for using a loop.You'd have to use a while True loop:This is slower, because this involves repeated next name resolutions. It is otherwise not more efficient.for uses iter() on the generator (which will return self), and then internally calls the same method next() would call, the __next__() method on the iterator.Ultimately, you can test if something is more efficient (performant), with the timeit module:So for a generator producing 1 million items, the for loop is almost 4 times faster.The advantages of generator functions and generator expressions are memory efficiency, and in many cases, code clarity. for and next() are two very different use-cases to get values from your generators, use what you need for the problem at hand.


Answer URL
https://docs.python.org/3/library/timeit.html
