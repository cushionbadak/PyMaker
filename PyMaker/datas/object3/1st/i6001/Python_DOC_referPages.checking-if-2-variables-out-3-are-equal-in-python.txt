Natural Text
I am making a code where three dice are rolled and if all three dice are equal the values are added. If 2 of the dice are equal then the 2 equal dice values are added and the odd dice value is subtracted from the sum.This is my code so farNow I don't know how I would find out which of the 2 dice are equal to be able to add them together. How would I do this?
You can use a sequence of if-statements:The brackets aren't necessary, just make it a bit clearer
I might use collections.Counter for this.A Counter is a dict subclass that counts objects. In the resulting dictionary, the keys are the objects being counted while the values are the number of times those objects appear.We can create a count of dice rolls by passing a list of the results of random.randint() to Counter's constructor, like so:In addition to accessing the counts via dict's [] operator, we can also access them via Counter.most_common(), which returns a list containing all of the rolls and their associated counts.In our program, rolls[0] is the most common roll and its count, rolls[0][0] is the value of the roll, rolls[0][1] is the number of times it was rolled. Similarly, rolls[1][0] is the second-most common value.You haven't specified what the correct score is when there are no matches. The above algorithm gives a score of 0 if there are no matches.Here is another algorithm which scores the negative sum of all the dice if there are no matches. In essence, it adds up all of the matching dice and subtracts each singleton die. This gives the answer you request for each of the cases you describe but punishes non-matching rolls more severely. Notice how this version generalizes easily to different numbers of dice and different numbers of sides.
Using sets is probably the most elegant solution to determine if you have a repeat, but it does not tell you which element repeats.You could maintain all your dice in a list:You can sort the list. If all the elements are the same, the first and last value will match. If there is a repeat, the middle element will match either the first or the last one:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
