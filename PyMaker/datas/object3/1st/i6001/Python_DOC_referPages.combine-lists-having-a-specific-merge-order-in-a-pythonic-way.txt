Natural Text
I would like to construct list x from two lists y and z. I want all elements from y be placed where ypos elements point. For example:So, x must be [11, 12, 13, 14, 15]Another example:So, x must be [35, 58, 77, 74]I've written function that does what I want but it looks ugly:How to write it in pythonic way?
If the lists are very long, repeatedly calling insert might not be very efficient. Alternatively, you could create two iterators from the lists and construct a list by getting the next element from either of the iterators depending on whether the current index is in ypos (or a set thereof):Note: this will insert the elements from y in the order they appear in y itself, i.e. the first element of y is inserted at the lowest index in ypos, not necessarily at the first index in ypos. If the elements of y should be inserted at the index of the corresponding element of ypos, then either ypos has to be in ascending order (i.e. the first index of ypos is also the lowest), or the iterator of y has to be sorted by the same order as the indices in ypos (afterwards, ypos itself does not have to be sorted, as we are turning it into a set anyway).
You should use list.insert, this is what it was made for!and a test:
With large lists, it might be a good idea to work with numpy.Algorithmcreate a new array as large as y + zcalculate coordinates for z valuesassign y values to x at yposassign z values to x at zposThe complexity should be O(n), with n being the total number of values.As a bonus, it also works fine when ypos isn't sorted:PerformanceWith n set to 1 million, this approach is a bit faster than @tobias_k's answer and 500 times faster than @Joe_Iddon's answer.The lists were created this way:Here are the results with %timeit and IPython:
Assuming that the ypos indices are sorted, here is another solution using iterators, though this one also supports ypos of unknown or infinite length:
If you want the elements in ypos to be placed at the x index where each element's index in ypos should correspond with the same y index's element:Initialize x to the required size using all null values.Iterate through the zipped y and ypos elements to fill in each corresponding y element into x.Iterate through x and replace each remaining null value with z values where each replacement will choose from z in increasingorder.
Pythonic wayoutput[11, 12, 13, 14, 15]In a functionoutoput[11, 12, 13, 14, 15]Using zip[out:] 


Answer URL
https://docs.python.org/3/library/timeit.html
