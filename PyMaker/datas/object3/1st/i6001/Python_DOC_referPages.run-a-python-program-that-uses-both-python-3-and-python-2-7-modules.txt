Natural Text
I'm looking for a way to combine python 3.x and python 2.x modules in same program.Currently, we'd like to load them using YAPSI, but I'm guessing that's a lost cause.** Obviously, its module that is dependent on lib's that currently aren't converted to python 3 and will take much time to do.
from @Frrank answer; i highly recommend you to convert that module source codes to python 3x by yourself! or with many tools that you can find by searching in google ...but generally I think there is no pythonic way for this issue. but Yes You Can; with tricky ways! ( There are three tricky ways ) :First :Download both python 2x and 3x portable interpretersCopy and paste them into same folderWrite each part of your program Separately with their original  interpreters ( write your program as functional or object orinted )Make a main program with python3x and call those two parts with  subprocess, exec or other methodsNow you can compile this folder to a exe file or make a setup (  package exe file ) and done!Second : If you are friendly with cython you can convert each part of your  program to C/C++, then you can merge or re_convert them to python  codes!Third :If you are friendly with jython you can convert each part of your  program to java ( jar file ), then you can merge or re_convert them to python  codes!Good Luck ...
You can but it's a lot of work. The problems mostly are syntax errors in print-statements. Simple print will work on any version.However, if you use any more advanced feature of print which is inevitable,  you either end up with a syntax error or not printing what you intended. Python 2’s trailing comma has in Python 3 become a parameter, so if you use trailing commas to avoid the newline after a print, this will in Python 3 look likewhich is a syntax error under Python 2.Under Python 2.6 there is a to make print into a function. So to avoid any syntax errors and other differences you should start any file where you use print() with from future import print_function. The future import only works under Python 2.6 and later, so for Python 2.5 and earlier you have two options. You can either convert the more complex print to something simpler, or you can use a separate print function that works under both Python 2 and Python 3.To solve print issue you can write your own print functions which is more tricker.2) Import errors.They occurred because reorganization of the standard library getting around is very easy likethis will only work for renamed imports, for new modules or who are mergers or sub-modules of several old modules you have to convert them 2to3 which is pretty easy.3) Integer incompatibilities.In Python 3 the first one is that the int and the long types have been merged this means that you can’t specify that an integer should be long by adding the L suffix any more. 1L is a syntax error in Python 3.you can avoid it likeAnother change is that the syntax for octal literals has also changed. To . avoid you can use the decimal or hex value and put the octal value in a comment like4) Handling binary data.The trickiest and most complicated of them all. You can read it documentation here.
Python 2 and 3 don't cooperate within one process. You could use remote procedure calls though, perhaps using Pyro (Python remote objects). This has similar performance concerns as the pipes within multiprocessing. SharedArray can operate faster using shared memory, but is limited to numeric arrays. 


Answer URL
https://docs.python.org/3/howto/pyporting.html
