Natural Text
Using python socket I am receiving value as a string and want to store the value in SQLite DB as dictionary key to column and values as a row.So for that purpose, I am not able to convert the string to dictionary -ReceivedValue always returns str type instead list and stopping me to process further to add in SQLite DB.How can I convert this received value to a Dictionary or list of dictionaries?Json Approach EDIT:1 - Attached the required screenshot for Json Error eval Approach EDIT:2 - OutPut -WORKING SOLUTION: Just Removed the double quotes from the RecievedValue to evaluate it across eval() or ast.literal_eval() 
Assuming ReceivedValue is a string like below (your example did not have the quotes around it making it a list of dictionaries) you can use eval(ReceivedValue) to convert it.  [Standard Disclaimer applies] Note that there are security implications to using eval - do you trust the source of the string you are about to evaluate?  Evaluating malicious string could cause it to execute code on your system. https://nedbatchelder.com/blog/201206/eval_really_is_dangerous.html
Use json module to convert it to dict, that would be easiest I guess.
When working with sockets you have to serialize and deserialize information if you want to send anything besides bytes or strings across a socket. This can be accomplished in multiple ways. One such popular way is using the Pickle library https://docs.python.org/3/library/pickle.html which allows you to serialize and deserialize information such as dictionaries and objects. This can be accomplished with the dump and load functions. Just call serialized_dict = pickle.dump(dict) before sending the information in the socket and deserialized_dict = pickle.load(buffer_bytes) to deserialize it on the other end.However it is known that the pickle function is not secure against erroneous or maliciously constructed data. And it is not advised to use pickling for data that you do not construct yourself such as user input. Another way to handle serializing is to pack and unpack buffers on your own using the struct object in python https://docs.python.org/3/library/struct.html. This is a slightly more complex approach. Here is a synopsis I can elaborate on if need be. You would need to pack each key and value pair into a buffer/bytearray and then send it through the socket, once received you would need to unpack each key and value pair then construct your dictionary again on the other side. Things you would need to make sure you keep track of are the size of each element in the buffer and how many items(key/value pairs) are in the buffer


Answer URL
https://docs.python.org/3/library/pickle.html
https://docs.python.org/3/library/struct.html
https://docs.python.org/3/library/struct.html
