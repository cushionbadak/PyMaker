Natural Text
My code uses yield from in python3 in recursive calls and it works perfectly fine. The problem right now is that this was introduced from PEP-380 in python 3.3 and I need it to work in python 2.7. I read up on a few articles and none of them were detailed enough or simple enough.Few referred articles :Converting “yield from” statement to Python 2.7 codeyield from and Python 2.7and few others.I have recreated a small Sample code (which takes in a multi-level list and returns a flattened list) that is very minimalistic compared to my requirements.#driver values :The same converted does not work in python 2.7 due to the non-availability of yield from.
You still need to loop. It doesn't matter that you have recursion here. You need to loop over the generator produced by the recursive call and yield the results:Your recursive call produces a generator, and you need to pass the results of the generator onwards. You do so by looping over the generator and yielding the individual values.There are no better options, other than upgrading to Python 3.yield from essentially passes on the responsibility to loop over to the caller, and passes back any generator.send() and generator.throw() calls to the delegated generator. You don't have any need to pass on .send() or .throw(), so what remains is taking responsibility to do the looping yourself.Demo:yield from was introduced in PEP 380 -- Syntax for Delegating to a Subgenerator (not PEP 342), specifically because a loop over the sub-generator would not delegate generator.throw() and generator.send() information.The PEP explicitly states:If yielding of values is the only concern, this can be performed without much difficulty using a loop such asThe Formal Semantics has a Python implementation equivalent that may look intimidating at first, but you can still pick out that it loops (with while 1:, looping ends when there is an exception or StopIteration is handled, new values are retrieved with next() or generator.send(..)), and yields the results (with yield _y).
Why do you say "my code cannot work with loops and needs to be recursive"? You can easily use a loop in a recursive generator:output


Answer URL
https://docs.python.org/3/whatsnew/3.3.html
