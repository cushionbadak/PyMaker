Natural Text
I am a beginner of Python and would like to do some word filtering (extracting only items in 'keyword' list that exist in 'whitelist').Here is my code so far:I want to remove every word except for 'Cat', 'Dog', and 'Cow' (which are in the 'whitelist') so that the result ('keyword_filter' list) will look like this:However, I got the result something like this:I would sincerely appreciate if you can give some advice.
You need to split the strings in the list and check if word in the split is contained in the whitelist. Then rejoin all words in the whitelist after filtering:Better to make whitelist a set to improve the performance for lookup of each word.You could also use re.findall to find all parts of each word matching strings contained in the whitelist, and then rejoin after finding the matches:
try this.. 
Simple list comprehension:The output:
Since you want to preserve the order of your keyword list, you'll want to have that as the outermost loop.for phrase in keyword:Now you need to split up the phrase into its actual words and determine if those words are in the whitelist. Then you need to put the words back together. You can do this in one line.Breakdown: phrase.split(", ") gives you a list of strings that were separated by ", " in the original string -- i.e. the words you care about. word in ... if word in whitelist is a list comprehension. It will return a list of each word in ..., in this case phrase.split, that meets the condition word in whitelist. Finally, ", ".join(...) gives you a string made up of every element in the list ... connected by ", ".Lastly, you need to put the newly filtered string into your list of filtered strings.As a sidenote, I agree with others that you should use a set for your collection of whitelisted words. It has much faster lookup time. However, for a miniscule list of words like this example you won't notice a performance difference.
You could use regex:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#sets
