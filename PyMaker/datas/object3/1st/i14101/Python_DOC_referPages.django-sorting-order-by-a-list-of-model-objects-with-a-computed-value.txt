Natural Text
I have two models a Slot and an Appointment.Slot objects are basically appointment requests by Users and they are defined for week_starting DateField, and I need to match two slots to create an Appointment object for that week_starting. I am iterating slots and creating appointments as follows:next_weekday is a method where I find the next monday's date.A new requirement has just popped up, and apparently I need to match the slots according to their users' previous appointments count together, i.e. For any slot, I need to find another one, of which the User has fewer appointment count than with anybody else.Slot model:Appointment model:I need to match two Slot objects that is not is_matched to create an Appointment object. I need to do it for every single Slot object. When doing that, I need to match two users who have the least number of Appointments together.I don't know any other solutions but looping. Any thoughts?
You may need to tweak this for related names and the like but something like the below should help. If I understand you correctly you need yourSlot objects to be aware of their User's Appointment counts.That will return a list of 2-tuples, where the first item is the user and the second is their appointment count. Taking the first two items in such a list will give you the two related users with the fewest appointments for any given slot. Remember to handle cases where there are fewer than 2 people in the list, or where there are ties in the appointment count.I might add another model method for just that along the lines of:You would combine this with something similar to the suggestion in my first comment as a queryset (either as extra context or as the main queryset depending on your preference) if you want to sort slots by how few appointments their two users from the above have.That should (haven't tested so again, may need a slight tweak) return a list of slots in the order I've described. Again you'd need to handle the same cases I described before.


Answer URL
https://docs.python.org/3/library/functions.html#sorted
