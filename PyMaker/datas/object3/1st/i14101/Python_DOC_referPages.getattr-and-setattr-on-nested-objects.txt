Natural Text
this is probably a simple problem so hopefuly its easy for someone to point out my mistake or if this is even possible.I have an object that has multiple objects as properties. I want to be able to dynamically set the properties of these objects like so:The output is:{'pet': <main.Pet object at 0x10c5ec050>, 'residence': <main.Residence object at 0x10c5ec0d0>, 'pet.name': 'Sparky', 'residence.type': 'Apartment'}As you can see, rather then having the name attribute set on the pet object of the person, a new attribute "pet.name" is created. I cannot specify person.pet to setattr because different child-objects will be set by the same method, which is parsing some text and filling in the object attributes if/when a relevant key is  found.Is there a easy/built in way to accomplish this? Or perhaps I need to write a recursive function to parse the string and call getattr multiple times until the necessary child-object is found and then call setattr on that found object?Thank you!
You could use functools.reduce:rgetattr and rsetattr are drop-in replacements for getattr and setattr,which can also handle dotted attr strings.
For one parent and one child:This is simpler than the other answers for this particular use case.
I made a simple version based on ubntu's answer called magicattr that also works on attrs, lists, and dicts by parsing and walking the ast.For example, with this class:You can do thisIt also won't let you/someone call functions or assign a value since it doesn't use eval or allow Assign/Call nodes.
Ok so while typing the question I had an idea of how to do this and it seems to work fine. Here is what I came up with:I guess this solves my question, but I am still curious if there is a better way to do this?I feel like this has to be something pretty common in OOP and python, so I'm surprised gatattr and setattr do not support this natively.
unutbu's answer (https://stackoverflow.com/a/31174427/2683842) has a "bug". After getattr() fails and is replaced by default, it continues calling getattr on default.Example: rgetattr(object(), "nothing.imag", 1) should equal 1 in my opinion, but it returns 0:getattr(object(), 'nothing', 1)  == 1.getattr(1, 'imag', 1)  == 0 (since 1 is real and has no complex component).SolutionI modified rgetattr to return default at the first missing attribute:


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
