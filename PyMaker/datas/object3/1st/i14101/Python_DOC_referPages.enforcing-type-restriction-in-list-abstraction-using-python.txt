Natural Text
Below is the list abstraction in functional paradigm, that encapsulates any type of data in its representation.In the above code, interfaces that are provided to users of this abstraction are create_list / len_rlist / getitem_rlist / count.Questions:How to enforce that the object passed to parameter(s) of interfaces len_rlist / getitem_rlist / count is nothing but the object provided by create_list interface?How to enforce above list abstraction store same type data?Note: Practically it is required to enforce these rules from syntax perspective.
Because python is dynamicaly typed language you can't check type before executing. But in reality sometimes need check input parameters, return values. I use next solutions for this tasks:
In order to enforce the type, you will have to provide the type as a parameter somewhere in your constructor. Consider building a parameterized type constructor. Here is an example.If accepting "1" is not OK for your purpose, you can of course add an isinstance check to the definition of rlist.
Python is not a strongly typed language. More exactly, it is a dynamic typed. That means that variables contains values that do have a type, but the language itself will never forbids to put a value of a different type in a variable.But, you have the isinstance and type functions that could help to achieve this requirement : you could affect a type to your recursive list and only allow to bind together an element and a recursive list of compatible types. The full spec could be :a rlist stores the type of the element it acceptsa rlist can be constructed by adding a first element for which isinstance(elt, typ) is true, and typ is the accepted typ of the rest partan initial list can be constructed by giving it explicetly a type, or by using the type of its first elementImplementation:But when you need strong typing, you should wonder if Python is really the appropriate language - Java is strongly typed and natively supports all that. The Python way is more I accept this and just hope it'll fit, programmer should know what he does


Answer URL
https://docs.python.org/3/library/array.html
