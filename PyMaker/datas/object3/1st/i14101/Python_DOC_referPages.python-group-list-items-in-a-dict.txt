Natural Text
I want to generate a dictionary from a list of dictionaries, grouping list items by the value of some key, such as:So far I've found two ways of doing this. The first simply iterates over the list, create sublists in the dict for each key value and append elements matching these keys to the sublist :And another using itertools.groupby:I wonder which alternative is the most efficient ?Is there any more pythonic/concise or better performing way of achieving this ?
Is it correct that you want to group your input list by the value of the 'a' key of the list elements? If so, your first approach is the best, one minor improvement, use dict.setdefault:
A one liner -
If by efficient you mean "time efficient", it is possible to measure it using the timeit built in module.For example:Please refer to the timeit official docs for further information.
The best approach is the first one you mentioned, and you can even make it more elegant by using setdefault as mentioned by bernhard above. The complexity of this approach is O(n) since we simply iterate over the input once and for each item we perform a lookup into the output dict we are building to find the appropriate list to append it to, which takes constant time (lookup+append) for each item. So overlal complexity is O(n) which is optimal. When using itertools.groupby, you must sort the input beforehand (which is O(n log n)). 


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.setdefault
https://docs.python.org/3/library/stdtypes.html#dict.setdefault
