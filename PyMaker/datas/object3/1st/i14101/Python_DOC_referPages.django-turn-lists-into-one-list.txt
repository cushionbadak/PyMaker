Natural Text
I want to put this data into one list so i can sort it by timestamp. I tried itertools chain but that didn't really work.Thank you for your help :)  I'm very bad at making clear what i want to do so im sorry upfront if this takes some explaning. If i try a chain i get the value back like this. I want to display it on the html page like this :date, name , rating, text (newline)likes comments Which would work the way i did it but if i want to sort it by time, it wouldn't work so i tried to think of a way to make it into a sortable list. Which can be displayed. Is that understandable ?  ['Eva Simia', 'Peter Alexander', {'scale': 5, 'value': 5}, {'scale': 5, 'value': 5}, 1, 0, 1, 0]it should look like this:['Peter Alexander, scale:5, value:5, 1,0]['Eva Simia, scale:5, value:5, 1,0]
Updated after clarification:The problem as I understand it:You have a dataset that is split into several lists, one list per field.Every list has the records in the same order. That is, user[x]'s rating value is necessarily rating_values[x].You need to merge that information into a single list of composite items. You'd use zip() for that:From there, you can simply sort your list using sorted():The key argument must be a function. It is given each item in the list once, and must return the key that will be used to compare items. Here, we build a short function on the fly, that returns the date and username, effectively telling things will be sorted, first by date and if dates are equal, then by username.[Past answer about itertools.chain, before the clarification]The point of using itertools.chain is usually to avoid needless copies and intermediary objects. To do that, you want to pass it iterators.chain will return an iterator that will iterate through each of the given iterators, one at a time, moving to the next iterator when current stops.Note every iterator has to be wrapped in parentheses, else python will complain. Do not make it square brackets, at it would cause an intermediary list to be built.
You can join list by simply using +.



Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/functions.html#sorted
