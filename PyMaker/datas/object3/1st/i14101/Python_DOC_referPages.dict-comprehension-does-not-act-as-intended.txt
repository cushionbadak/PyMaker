Natural Text
Basically, I want a dictionary where the token is the key and the value is the frequency of that token in the list of tokens.I want my comprehension to check if the token is already in li. If it is just increase its value by 1, if it's not, create it and set its value to 1.For some reason, every key ends up with a value of (1), no matter how many times it appears in the list of tokens.Can you help me see why this is happening?I could solve it with a loop but i want to grasp dict comprehensions.Thank you SO much!
A comprehension expression like list/dictionary comprehension is a builder expression and the object is not constructed until the expression is completely evaluated. The assignment to a symbolic name to the reference of the generated dictionary follows subsequent to that.In your particular example, you are referring to the the symbol li, that refers to the object empty dictionary. So during the evaluation of the expression, li continues to refer to an empty dictionary which would mean, the dictionary comprehension can be equivalently written asor to simplify as membership test on an empty dictionary is always falseWhat you need is an already available library utility or a state based solution.Luckily, standard library collections provides a function called counter which was written and designed for this purposeWhich would simply your function asA state based solution simply requires an external counter for each unique occurrenceor if you do not intend to use defaultdict
The dictionary comprehension is executed first, producing a new dictionary object. Only when that expression has completed, is li bound to that new dictionary.In other words, this is what happens under the hood, without _result being available for reference in the loop:Since li is empty during the entire loop, token in li is always going to be False. The dictionary comprehension itself is working just fine.If you wanted to count values, you could just make it an explicit loop:but you'd be better off using a collections.Counter() object, which encapsulates the same procedure and adds other functionality on top:
Use a Counter dict:Using a normal dict you need to use a for loop and dict.setdefault:You cannot increment a count in a dict comprehension as you will always end up with a count of 1, you need either a Counter dict or an explicit loop to handle repeating keys as li is referring to the empty dict until the comprehension is complete.if not token in li is always True so you always set the value to 1So in your function use a Couner dict and iterate over the items:



Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
