Natural Text
I created a function that will inverse a list recursively but it uses an global list in witch it puts the elements.Can this be rewritten so that it won't use an outside variable/list to achieve the same result.Here is the code:
What about:
it looks like you are doing a whole lot more work than you need to
While your implementation could be improved in various ways, when I find that I want to build something recursive without using globals and without making the interface feel dirty is create a nested helper function:That way, you can have values that are at the scope of the outer function.
The problematic way to do it is simple, just use default arguments.Just remember to pass a new list to the output, so that you can call it again without getting old values.Nevertheless, you can use the safe approach without using default arguments:And you can also use its recursive equivalent as a lambda expression:Keep in mind though, that there's an even simpler solution without using recursion at all:Since in Python, you can reverse any list using extended slice notation.Also, you can just use reverse() and spare you the trouble.
Building on Rederick Deathwill, here is a simplified version of your function:It uses a default value for invs, getting rid of the need for a global variable to hold the inverted list. With subsequent invocation, invs is passed along so that the next call can build on it.Once the bottom of the call stack is reached, the function returns the reversed list. A nice addition to the original is the return inner(list_, invs) line, which allows the caller to capture the new list as the return value.This is not the shortest, but I think it is at least readable.


Answer URL
https://docs.python.org/3/whatsnew/2.3.html#extended-slices
