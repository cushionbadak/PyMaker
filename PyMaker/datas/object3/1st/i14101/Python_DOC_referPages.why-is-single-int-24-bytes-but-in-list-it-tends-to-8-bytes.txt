Natural Text
Here is what I am looking at:I know that int in Python is growable (can get bigger that 24 bytes) objects that live on the heap, and I see why that object can be quite large, but isn't a list just a collections of such objects? Apparently it is not, what is going on here?
This is the size of the object - excluding the objects it contains:The size of the list with 1000 elements, in your case, is 8072 bytes but each integer object is still 24 bytes. The list object keeps track of these integer objects but they're not included in the size of the list object.
The list doesn't contain any integers; it contains pointers to various objects, which happen to be integers and which are stored elsewhere. getsizeof() tells you the size only of the object you pass to it, not of any additional objects it points to.
A list is a collection of pointers to objects, not of the objects themselves.  So, assuming a 64-bit system, your list has 8000 bytes of pointers plus 72 bytes of overhead.


Answer URL
https://docs.python.org/3/library/sys.html#sys.getsizeof
