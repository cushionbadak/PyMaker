Natural Text
I have an OrderedDict and in a loop I want to get index, key and value. It's sure can be done in multiple ways, i.e.But I would like to avoid range(len(a)) and shorten a.iterkeys(), a.itervalues() to something like a.iteritems().With enumerate and iteritems it's possible to rephrase asBut it requires to unpack inside the loop body. Is there a way to unpack in a for statement or maybe a more elegant way to iterate?
You can use tuple unpacking in for statement:Side Note:In Python 3.x, use dict.items() which returns an iterable dictionary view.
Is ugly, if you ask me. I don't know why are you interested in the index.The idea between dict is that you are to be ignorant of the index.There is a whole lot of logic behind dict and queues so that we are to be free of indexes.If you insist in getting the index there is no need to iterate twice.Let's see what enumerate does to lists: Note the "start".Enumerate knows how to manage lists. Dictionaries store data as a list, somewhere in the belly of the beast. So what happens if we use enumerate on a dict?In this light I would go for the elegant:I feel that "for i, (k,v) in" exposes too much of the inner structure too soon.With "for i,k in" we are protected and when times comes to refactor, we don't need to touch the way we loop. We need to change only what we do in the loop. One less aspect to take care of. Not to mention that this call to enumerate works just the same in any python after 2.6 :)https://docs.python.org/2/library/stdtypes.html#dict.iteritemshttps://docs.python.org/2/library/functions.html#enumerate
Use the methods values or items to get a view and then typeset it as an iterator:e.g. to sort by the values in your dictionary


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.items
https://docs.python.org/3/glossary.html#term-dictionary-view
