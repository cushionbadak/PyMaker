Natural Text
I want a unit test to assert that a variable action within a function is getting set to its expected value, the only time this variable is used is when it is passed in a call to a library. My thought was that I could mock lib.event.Event, and get its input arguments and assert they are of specific value. >Is this not how mocks work? The mock documentation frustrates me with its inconsistency, half-examples, and plethora of examples that are not related to what I want to do.
You could use patch decorator and then call assert_called_with to that mocked object like this:If you have this structure:And the content of example.py is:And the content of lib/event.py is:The code of tests.py should be like:
You can use call_args or call_args_list as well.A quick example would look like:I just quickly written this example for somebody who might need it - I have not actually tested this so there might be minor bugs.
If you want to access arguments directly, how about this?  A little redundant though...See https://docs.python.org/3.6/library/unittest.mock.html#unittest.mock.call.call_list


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.call_args
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.call_args_list
