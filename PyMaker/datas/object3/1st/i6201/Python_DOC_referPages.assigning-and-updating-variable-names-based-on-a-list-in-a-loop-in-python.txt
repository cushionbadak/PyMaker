Natural Text
I am working in Pandas to create a series of data frames, each of which is an aggregated version of the previous one. (I have a statistic that has to be calculated recursively.) Let's assume that I have a series of variables that I'll be aggregating, saved in a dictionary called aggVars. The original data frame, df, has nested observations:I think you get the idea. Observations are nested in occupations, which are within industries, which are within areas, which are within years.I can do this the dumb way:(I have intentionally used different names for the data frames, i.e., df_county instead of df_area, to reflect that the .groupby() variables in the real data do not map so neatly onto the hierarchical levels.)I have tested this, and it works fine. But this is CLEARLY a stupid way to do this. This should be a loop of some sort. And here is where my troubles begin. I could specify a list of lists:And then loop over the list, something like this:The logic here would be to assign the new data frame's name based on the first sub-element of the aggHierarchy element, then group things using the second sub-element. But of course, this doesn't work. The loop I've written basically tries to assign a NAME for the new data frame using new_df = 'df_%s' % level[0], but all I've actually done there is create a string. Furthermore, Stack Overflow is full of people pointing out that using lists to assign variable names in a loop is Considered Harmful. I get that--I can tell how janky this is. "Use a dictionary," I see people writing. But here's the thing: The aggregation of those data frames has to happen in a certain order, which (I believe) I can't specify with a dictionary. I am failing to grasp how I go from adding variable names to a dictionary, to calling them in some specified order in a loop.Thus my question, which hopefully I've given enough background information to specify well: given a block of code like DUMB CODE BLOCK above, where I need to update variable names based on a list (or dictionary!) whose exact contents I might not know in advance...how can I create some sort of loop there?
Keep using your list but use the DataFrame name as a dictionary key to store all the intermediate DataFrames.Assuming the original DataFrame is named df:If you do not want to lose the original DataFrame:Your comment:If, in aggHierarchy, I list the names as df_industry, df_area and so on, and then loop using for df_name, group in aggHierarchy, the resulting dictionary keys are industry, area and so on. That is, python seems to "absorb" the prefix when the prefix is included in the looping variable and the things looped over.Surprised  me when I saw it - I certainly don't see that behaviourIn the loop, df_name is just a name. The for statement is implicitly(?) assigning the first item from each row in aggHierarchy to it.  No magic going on.


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#the-for-statement
https://docs.python.org/3/reference/simple_stmts.html#assignment
