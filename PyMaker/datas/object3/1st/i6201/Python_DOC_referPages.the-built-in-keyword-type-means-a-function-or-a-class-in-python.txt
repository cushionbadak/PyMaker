Natural Text
In most posts, people often say type is a built-in function if it is provided with one argument, and it is a metaclass if provided with 3 arguments.But in python's doc, the signature of type is:So, does it means type is a built-in class and not a built-in function even if it is provided with one argument? 
type is called a "metaclass" because it's a class that produces other classes (AKA types). It behaves like a normal class. In particular, it has the equivalent of a __new__ method that would look something like this in Python:Note that when instantiating a class, the value of the new instance is whatever is returned from __new__. In the case of type, __new__ always returns a type object (AKA class). Here's an example of a class that extends int to use -1 as the default value instead of 0:To really dig into how type works, take a look at the C code in type_new. You can see there (scroll down a few lines) that type(x) is a special case that immediately returns the type (AKA class) of x. When you do type(name, bases, dict), the type creation machinery is invoked.For more fun, try the following:
The built-in type always returns a type object, which is basically a class.  That's true whether it's the one-argument form or the three-argument form.  In the one-argument case, the returned object is the type (class) of the argument.  In the three argument case, the returned object is a new type object (class).  In both cases the returned object can be used to instantiate new objects (instances of the class).Some classes can be used as metaclasses.  That's a common use case for the three-argument form of type.  But there are other ways to make a class that can be used as a metaclass, and other uses for the three-argument form of type.It's not that much different from int, which is a built-in function that returns an object of type int.  int is also the name of a class, and can be used to create new objects:And also like type, it has more than one form:
The distinction between classes and functions in Python is not as stark as in other languages.You can use function call syntax to invoke an actual function, but also an instance of a class with the __call__ method, and even a class that overrides __new__ can behave like a function.The word Python uses for all these is callable: an object you can invoke using the call syntax (foo()), which evaluates to a result.The type built-in is a callable. It can be called.Sometimes you treat type like a function, and it works, so you can say it's a function. Other times you treat it like a class, so you can say it's a class. The actual implementation should not matter.This is duck typing in action: if it walks like a duck, and it quacks like a duck, then it must be a duck.


Answer URL
https://docs.python.org/3/library/functions.html?highlight=type#type
https://docs.python.org/3/reference/datamodel.html#object.__new__
https://docs.python.org/3/library/stdtypes.html#bltin-type-objects
