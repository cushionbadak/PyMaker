Natural Text
Is there an equivalent of Perl's BigFloat data type in Python? The reason I ask is that I want to compute nCk using its definition, n!/k!*(n-k)!.With Perl's BigFloat data type, computing from the definition works correctly for any n and k. For example factorial(500)/factorial(10)*factorial(490) produces the exact answer when n and k are BigFloats.In Python, both factorial(500) and factorial(10)*factorial(49) give the exact answers using whatever Python uses for ints. Thus it appears that python can do very high precision arithmetic. However the quotientint(factorial(500)/(factorial(10)*factorial(490)) comes close to the exact answer, but falls a little short?  Is there a way to  get an exact answers out of python for expressions like the above?
Python's int objects can grow as big as necessary (subject only to how much memory is available), so they can be used for calculations involving huge numbers. In Python 2, there were 2 integer types, int and long, with int being used for values that fit into machine integers, but in Python 3 they've been amalgamated into a single int type.Python doesn't have a built-in BigFloat type, but the standard library does have the decimal module which can do basic arithmetic, including square roots, to any desired precision. If you need to do arbitrary precision mathematics with more functions, please see the excellent 3rd-party library, mpmath.You can safely use // floor division when computing binomial coefficients, since the terms in the denominator are guaranteed to divide the numerator. EgoutputHowever, it may be more efficient to calculate the binomial coefficient with a simple loop, rather than calculating those huge factorials.output


Answer URL
https://docs.python.org/3/library/decimal.html
