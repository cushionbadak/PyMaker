Natural Text
Context:I developed a python script to be run on a remote linux server. Running using Python 3.6.1. The script worked but was very messy, and procedurally written as opposed to OO. So, I re-wrote this script into 2 different classes. One main class and a blueprint class for objects.My script is a lot more complicated, i just simplified it for this question.Desired Function:Read values from CSV file. Create Objects from these values, 1 object per line. Do some calculations on the values on init'ing the object (in the objects class). Have these objects be accessible from the main class (Base class).Problems:I need some clarification on:The main method is not running. Tried variants on the method call, like Base.main(), including the "if name" statement inside the Base class, and it complains about self not being definedThe "self" reference. Are my usages of this correct? For example: Adding the attribute "age" into the Person objects so you can access it with person.age for example. My method call "self.input_file_handling(Base.inputFilePath)" etc.Script:
First the main method of Base class is not static because it use the self variable, so is necessary receive that.If you want call the main method and use the self variable you need make something like that:You can call the input_file_handling method without using self, because it's staticI think you need learn more about how python resolve static things and the class and object variables.
Python is not C. There is no main function that automagically executes.The main method that you defined is inside Base class, but it doesn't accept an argument for the instance.Either modify it so it accept it (ie self by the convention) or make it a static method.Then in if __name__ == '__main__': either use Base().main() or Base.main(), depending on what approach you decided to take.But you don't seem to need any of this, and only doing it for the sake of forcing Python to look/work as other languages (looking at you C++/Java). Python doesn't require you to have a class or a 'main' function/method to execute code.
Your code written in a Pythonic way would be: (Python3)You seem to come from a OOP-only language (C# maybe?).Some tips:Avoid globals when able for variables, use them for function definition, class definition and constants.Do not use a new class to store functions that do not require itUse lower case and '' for variable and function names, Use CamelCase for class names, use caps and '' for constants.Use duck typing: do not check that a argument is of a given type, try to use it as if it was and handle throw exceptions if it isn't.Properties ar your friends if you want to force a specific bahaviour at getting or setting a class attributesIf you do not understand somehting ask in the comments.


Answer URL
https://docs.python.org/3/glossary.html#term-duck-typing
