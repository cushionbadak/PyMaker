Natural Text
I have a module test.py which is importing functions from another module, keyboard.py, using from keyboard import *.Inside keyboard.py there are two functions:Now, my test function, in test.py, looks like this:As you can see, I'm trying to put two mock return values in place.However, their effects seem to be inversed!When I call them in the interactive console while stopped at a breakpoint (or inspect the values when called normally), the two mocked functions return each other's fake return values!From the console:Am I misunderstanding something about the order of mock arguments being passed to the test function?Could it be something to do with patching keyboard.get_keys rather than test.get_keys?Thanks!Louise
The order of your patches should be reversed, as they are applied bottom up. See this comment in the python docs on nested mock arguments:Note When you nest patch decorators the mocks are passed in to the  decorated function in the same order they applied (the normal python  order that decorators are applied). This means from the bottom up, so  in the example above the mock for module.ClassName1 is passed in  first.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#quick-guide
