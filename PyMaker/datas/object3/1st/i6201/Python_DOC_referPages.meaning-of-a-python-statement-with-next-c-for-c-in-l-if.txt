Natural Text
when porting some python code into PHP I ran into problems with the following piece of code:I cannot figure out, what the line does mean. Can anybody explain me the sense of this statement, please?Thank you in advance!
It's combining two-arg next (which pulls the next value from an iterator, and if the iterator is exhausted returns the second argument as the default) with a generator expression, which is like a lazy list comprehension (it produces an iterator/generator that produces values on demand).So:in English, means "Get the first element of l for which config.equalsForConfigSet of that element is truthy; if no such element is found, return None". And it does it lazily, or if you prefer, with short-circuiting, so as soon as one c value passes, it doesn't need to continue; the rest of l isn't even loaded, let alone tested (unlike how a list comprehension would do it).In code, you could express the same behavior with a function like so:then use the function to do:
My understanding is next(iterator, default)The next() function returns the next item from the iterator.its taking 'c' from the for loop which is extracting c from the list l (populated earlier), wherein the for loop is evaluating with a condition that config.equalsForConfigSet(C) should return true.If there is no value for 'c' in the first parameter to next(), it will return Nonehttps://www.programiz.com/python-programming/methods/built-in/next
This is basically a call to the next function with two arguments:a generator comprehension - (c for c in l if config.equalsForConfigSet(c))NoneSo let's tear it into pieces.Comprehension PartThe thing enclosed in the parenthesis () is a generator expression. Just like the list comprehension (when used with []), but the result is a generator object.Thanks @ShadowRanger for hints in the comments.next and NoneThe next function returns the next item in the given iterator (the generator expression in your case). However, when the iterator has reached its end, and there is nothing else to return, it would raise the StopIteration exception. In such cases though, when you pass in the second argument as the default, it is returned instead of raising the exception. So in your case, if the latter case happens then None is returned.SummaryThis whole thing is done for the following:the generator is an iterator that generates values on-demand, so all the list is not loaded into the memorythe next call is getting you the first element from your brand new generator if it has one, otherwise NoneSo if we describe the source function, it would sound like this:Get me the first element out of l that satisfies config.equalsForConfigSet condition if any, otherwise return None.


Answer URL
https://docs.python.org/3/library/functions.html#next
https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression
