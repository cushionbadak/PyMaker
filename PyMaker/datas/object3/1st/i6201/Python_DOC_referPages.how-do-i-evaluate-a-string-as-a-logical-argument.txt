Natural Text
I'm working on a nestable For Loop in Python for Robot Framework. My goal is to mimic 100% of the functionality of the original, so I need to be able to break the For Loop if certain conditions are met. My solution to this is with a custom keyword that is evaluated a little differently in the Python code: exit_if.exit_if takes one argument, a string, and returns one argument for processing, a Boolean. I'd like to send it a string like '$var1 == $var2' (I've already solved the problem of requiring parentheses around custom variable names created within the For Loop from Robot Framework), have exit_if evaluate the string as it would any Boolean expression, and return True if the expression evaluates to True, and False if the expression evaluates to False.An easy solution to this is to have exit_if take three arguments: var1, operator, and var2. Then, in a switch statement, evaluate the variables based on the operator. However, this seems unnecessarily clunky and inefficient, so I'd like to find a more elegant solution.After Googling around (it's possible that my Google searches were parameterized incorrectly), I found nothing that would do what I'm trying to ask this program to do, so, given that this is a coding question that can benefit future programmers, I turned to this site. How can I accomplish the effects of the three-parameter solution with a single parameter and no/minimum switch/if statements?EDIT: I apologize for the brevity of the original post, I was rushed out of the office in the process of asking this question.Robot Framework interacts with my For Loop by sending a very long list of cells of information in a Framework-like language that my code then processes and turns into the format required for BuiltIn().run_keywords. In Robot Framework, this format looks like so (simple version):Robot Framework processes this as a single line of cells, like so (cells are separated by |):My code converts these cells into a list of strings.Then, the code used to format it for use each loop iteration by BuiltIn().run_keywords(). So, on iteration 2 (INDEX0 = 1):That system being too limited to the built-in capabilities of Run Keywords, I created a mirror version of it that I can control. Its functionality is identical to Run Keywords, but it is called by self._run_keywords(*kwords).As it stands now, that code won't run. I'm trying to create code that will process the 1 == 1 and pass it to some keyword. Given my current goal is to allow the user to specify breakpoints in the loop, I created a function called exit_if. exit_if will (eventually) receive an argumentative input in the form of a string (like the one above, though not necessarily in the same syntax), decide if the conditions are right to exit the for loop, and exit the for loop. I want it to return a Boolean for verification purposes, and because I'm not entirely sure how exit_if will interact with the rest of the file yet.I already knew of a very clunky way to do this. Take the input (1 == 1), use string parsing to find the operator and variables, use a switch statement to decide which comparison to do, do the comparison, and (possibly) return the value to the rest of the loop so that it can stop the loop.Thanks to Kindall, I now have an easier way to do this with a dictionary and operator, but I was hoping for a more elegant solution along the lines of the following:Obviously, feeding an if statement an existing string always results in True, but I was hoping to be able to cast the string as something or apply a function to it to turn it into a Boolean statement. If this isn't possible and I need to go the clunky way, that's fine. Speed and beauty aren't requirements, but it was worth asking.
Use the operator module and a dictionary.Looking up your variable names and passing in their values, I'll leave to you.
You can use regular expressions to solve this.More about re module:https://docs.python.org/2/library/re.htmlhttps://docs.python.org/3/library/re.html


Answer URL
https://docs.python.org/3/library/re.html
