Natural Text
This question already has an answer here:Does a slicing operation give me a deep or shallow copy?                    2 answers                I have a list and I want to understand slices of it. I take a slice [0:1] of it: They are the same. But:So the slice's 0-element is the same as the list's 0-element, but when I change it in the slice, it is not changed in the list. Why not?
From the documentation:All slice operations return a new list containing the requested elements. This means that the following slice returns a new (shallow) copy of the list.So basically when you do l[0:1][0] = 13 you're assigning 13 as the value in a new list, not l.  It's the same as if you didorNote this is only true for immutable types, such as int and str.  Since a slice performs a shallow copy, you'd get the behavior you'd expect if you modify an object.


Answer URL
https://docs.python.org/3/tutorial/introduction.html#lists
