Natural Text
TL;DRWould like to run Jupyter notebooks with different python setups. Python packages always install globally. Don't understand why.\TL;DRI would like to run Jupyter notebooks with different python setups using venv. See here for the official documentation.Python 3.6 is already installed on my systemUsing the following commands I have created two virtual environments:Following this guide I tried setting up different kernels for each notebook withHowever, the second command failed withSo, I deactivated my venv and ran the same command outside the venv which succeededInside my Jupyter notebook I can see the different kernels now:new kernels availableNow I'm creating a new notebook using test01 kernel. Inside the notebook, I try to add a module which is not available in Python by default:This is as expected. I then go about to installing that package into my test01 environment using pipAfter restarting my test01 kernel the import error disappears - as expected. However - and now this is my question - when I import mord package on a test02 notebook, there is no import error either. Why is that?I would expect that mord package was only installed for test01. However, it seems to be installed globally.Looking at the venv folders it shows that nothing was added specifically to those projectsvenv foldersThe pyvenv.cfg file seems also unchanged.Can anyone give me some pointers what I am doing wrong?
because you created virtualenv with --without-pip flag, there is no pip executable in the virtual environment, you used system pip to install package.basically, virtual environment not involved in your setup, even though there are two kernel specs, they all created with virtualenv deactivated.setup steps recommend: create virtualenv without --without-pip option; install ipykernel for each of your virtual environments, which means, install while virtualenv is activated; create kernel spec from corresponding virtualenv.
After georgexsh had pointed me in the right direction regarding the --without-pip flag, this is how I solved it in my case:Create two virtual environmentsI am still using the --without-pip flag, because the command otherwise produces an error messageThe following steps are executed for each of the environments test01, test02:Activate virtual environment and install pip manuallyInstall and run Jupyter inside the virtual environmentAfter having completed the above steps for both environments, I tested installing a package only in one of the environmentsActivate the environment you want to install to first (if not activated already)numpy package is now only available to the Jupyter version installed in test01 environment.If found that installing a dedicated kernel per each environment was optional (for my purpose). Anyway, here are the steps to run in an activated environment:Now within Jupyter you can also create notebooks with different kernel types.


Answer URL
https://docs.python.org/3/library/venv.html
