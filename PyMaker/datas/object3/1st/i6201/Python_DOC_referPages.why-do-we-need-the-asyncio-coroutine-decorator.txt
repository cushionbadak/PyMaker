Natural Text
Why do we need the asyncio.coroutine decorator? What functionality does it provide?For example:Now if I uncomment the first two lines and use the asyncio.coroutine decorator, I still get the same output.I mean this is already a coroutine - a function that can be paused and passed in with an argument. Why do I need to decorate it with another coroutine i.e asyncio.coroutine?
It's important to understand that generators and asyncio coroutines - are different things. Coroutines are implemented using generators, but (theoretically) could been implemented without them. Genarators - are part of implementation regarding to coroutines.Since asyncio coroutines are implemented using generators, you can sometimes use generators as coroutines without errors:Result:But it doesn't work with every kind of coroutine:Result:That's why (besides few other things) asyncio.coroutine decorator uses:Result:But as already noted by all it doesn't actually matter today: since Python 3.5 decorator and yield from have been replaced with keywords async def and await that's not only nicer, but helps to split coroutines from their implementation details in a better way. 


Answer URL
https://docs.python.org/3/library/asyncio-task.html#coroutines
