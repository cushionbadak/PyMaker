Natural Text
Does python provide an elegant way to check for "equality" of sequences of different types? The following work, but they seem rather ugly and verbose for python code:The following is a bit shorter, but also less efficient since a third sequence is created:Shoehorning one of those examples into a list comprehension isn't really what I'm looking for either.Edit: Ideally I am looking for a solution that doesn't create another sequence during the comparison.
Convert both sequences to lists, and use builtin list comparison. It should be sufficient, unless your sequences are really large.Edit:Testing done by schickb shows that using tuples is slightly faster:
You can determine the equality of any two iterables (strings, tuples, lists, even custom sequences) without creating and storing duplicate lists by using the following:Note that if the two iterables are not the same length, the shorter one will be padded with Nones. In other words, it will consider [1, 2, None] to be equal to (1, 2).Edit: As Kamil points out in the comments, izip_longest is only available in Python 2.6. However, the docs for the function also provide an alternate implementation which should work all the way back to 2.3.Edit 2: After testing on a few different machines, it looks like this is only faster than list(a) == list(b) in certain circumstances, which I can't isolate.  Most of the time, it takes about seven times as long.  However, I also found tuple(a) == tuple(b) to be consistently at least twice as fast as the list version.
Apart from the extra memory used by creating temporary lists/tuples, those answers will lose out to short circuiting generator solutions for large sequences when the inequality occurs early in the sequencesor more conciselysome benchmarks from ipython
It looks like tuple(a) == tuple(b) is the best overall choice. Or perhaps tuple comparison with a preceding len check if they'll often be different lengths. This does create extra lists, but hopefully not an issue except for really huge lists. Here is my comparison of the various alternatives suggested:Here are the results:Edit: Added a few more tests. This was run on an AMD 939 3800+ with 2GB of ram. Linux 32bit, Python 2.6.2
Since you put the word "equality" in quotes, I assume that you would like to know how the lists are the same and how the are different.  Check out difflib which has a SequenceMatcher class:You will get back a sequences of descriptions of the differences.  It's fairly simple to turn that into diff-like output.
It's probably not as efficient, but it looks funky:I don't know the "all" function that Ben mentioned, but perhaps you could use that instead of "False not in"
This "functional" code should be fast and generic enough for all purposes.If on Python 2.5, use the definition for izip_longest from there.
I think it's a good idea to special case when both sequences are type list. Comparing two lists is faster (and more memory efficient) than converting both to tuples.In the case that either a or b are not lists, they are both converted to tuple. There is no overhead if one or both are already tuples, as tuple() just returns a reference to the original object in that case. 


Answer URL
