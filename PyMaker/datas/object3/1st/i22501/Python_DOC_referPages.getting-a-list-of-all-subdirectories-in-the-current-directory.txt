Natural Text
Is there a way to return a list of all the subdirectories in the current directory in Python?I know you can do this with files, but I need to get the list of directories instead.
Do you mean immediate subdirectories, or every directory right down the tree? Either way, you could use os.walk to do this:will yield a tuple for each subdirectory. Ths first entry in the 3-tuple is a directory name, soshould give you all of the subdirectories, recursively.Note that the second entry in the tuple is the list of child directories of the entry in the first position, so you could use this instead, but it's not likely to save you much.However, you could use it just to give you the immediate child directories:Or see the other solutions already posted, using os.listdir and os.path.isdir, including those at "How to get all of the immediate subdirectories in Python".

You could just use glob.globDon't forget the trailing / after the *.
Much nicer than the above, because you don't need several os.path.join() and you will get the full path directly (if you wish), you can do this in Python 3.5+This will give the complete path to the subdirectory.If you only want the name of the subdirectory use f.name instead of f.pathhttps://docs.python.org/3/library/os.html#os.scandir
If you need a recursive solution that will find all the subdirectories in the subdirectories, use walk as proposed before.If you only need the current directory's child directories, combine os.listdir with os.path.isdir
I prefer using filter (https://docs.python.org/2/library/functions.html#filter), but this is just a matter of taste.
Implemented this using python-os-walk. (http://www.pythonforbeginners.com/code-snippets-source-code/python-os-walk/)
You can get the list of subdirectories (and files) in Python 2.7 using os.listdir(path)
Listing Out only directoriesListing Out only files in current directory
Since I stumbled upon this problem using Python 3.4 and Windows UNC paths, here's a variant for this environment:Pathlib is new in Python 3.4 and makes working with paths under different OSes much easier:https://docs.python.org/3.4/library/pathlib.html
Thanks for the tips, guys. I ran into an issue with softlinks (infinite recursion) being returned as dirs. Softlinks? We don't want no stinkin' soft links! So...This rendered just the dirs, not softlinks:
Although this question is answered a long time ago. I want to recommend to use the pathlib module since this is a robust way to work on Windows and Unix OS.So to get all paths in a specific directory including subdirectories:etc.
Python 3.4 introduced the pathlib module into the standard library, which provides an object oriented approach to handle filesystem paths:Pathlib is also available on Python 2.7 via the pathlib2 module on PyPi.
Building upon Eli Bendersky's solution, use the following example:where <your_directory> is the path to the directory you want to traverse.
Here are a couple of simple functions based on @Blair Conrad's example - 
With full path and accounting for path being ., .., \\, ..\\..\\subfolder, etc:
This answer didn't seem to exist already.
I've had a similar question recently, and I found out that the best answer for python 3.6 (as user havlock added) is to use os.scandir. Since it seems there is no solution using it, I'll add my own. First, a non-recursive solution that lists only the subdirectories directly under the root directory.The recursive version would look like this:keep in mind that entry.path wields the absolute path to the subdirectory. In case you only need the folder name, you can use entry.name instead. Refer to os.DirEntry for additional details about the entry object.
use a filter function os.path.isdir over os.listdir()something like this filter(os.path.isdir,[os.path.join(os.path.abspath('PATH'),p) for p in os.listdir('PATH/')])
Copy paste friendly in ipython:Output from print(folders):
If you want just the top list folder, please use listdir as walk take too much time.


Answer URL
https://docs.python.org/3/library/os.html#os.scandir
https://docs.python.org/3/library/os.html#os.DirEntry
https://docs.python.org/3/library/functions.html#next
