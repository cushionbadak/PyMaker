Natural Text
I was wondering if there's any library for asynchronous method calls in Python. It would be great if you could do something likeOr to call a non-async routine asynchronouslyIt would be great to have a more refined strategy as native in the language core. Was this considered?
You can use the multiprocessing module added in Python 2.6. You can use pools of processes and then get results asynchronously with: E.g.:This is only one alternative. This module provides lots of facilities to achieve what you want. Also it will be really easy to make a decorator from this.
Something like:See the documentation at https://docs.python.org/2/library/threading.html#module-threading for more details; this code should work for Python 3 as well.
As of Python 3.5, you can use enhanced generators for async functions.Enhanced generator syntax:New async/await syntax:
It's not in the language core, but a very mature library that does what you want is Twisted. It introduces the Deferred object, which you can attach callbacks or error handlers ("errbacks") to. A Deferred is basically a "promise" that a function will have a result eventually.
You can implement a decorator to make your functions asynchronous, though that's a bit tricky. The multiprocessing module is full of little quirks and seemingly arbitrary restrictions â€“ all the more reason to encapsulate it behind a friendly interface, though.The code below illustrates usage of the decorator:In a real-world case I would ellaborate a bit more on the decorator, providing some way to turn it off for debugging (while keeping the future interface in place), or maybe a facility for dealing with exceptions; but I think this demonstrates the principle well enough.
Just
My solution is:And works exactly as requested:
You could use eventlet. It lets you write what appears to be synchronous code, but have it operate asynchronously over the network.Here's an example of a super minimal crawler:
Something like this works for me, you can then call the function, and it will dispatch itself onto a new thread.
Is there any reason not to use threads? You can use the threading class.Instead of finished() function use the isAlive(). The result() function could join() the thread and retrieve the result. And, if you can, override the run() and __init__ functions to call the function specified in the constructor and save the value somewhere to the instance of the class.
You can use concurrent.futures (added in Python 3.2).
You can use process. If you want to run it forever use while (like networking) in you function:if you just want to run it one time, do like that:


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
https://docs.python.org/3/library/asyncio.html
https://docs.python.org/3/library/concurrency.html
