Natural Text
This question already has an answer here:How to escape os.system() calls?                    10 answers                Is there anything in the Python standard library that will properly parse/unparse strings for using in shell commands? I'm looking for the python analog to perl's String::ShellQuote::shell_quote:And, even more importantly, something which will work in the reverse direction (take a string and decompose it into a list).
pipes.quote is now shlex.quote in python 3.It is easy enough to use that piece of code.https://github.com/python/cpython/blob/master/Lib/shlex.py#L281That version handles zero-length argument correctly.
Looks like gets me far enough.
I'm pretty sure that pipes.quote is broken, and should not be used, because it does not handle zero-length arguments correctly:I believe the result should be something like
For shell quoting, this works:  I've rigorously tested it on Posix.  [I'm assuming that the list2cmdline function supplied by Python works as advertised on Windows]The tests are here, if anyone cares.
To unquote, try  shlex.split()
You should never have to shell quote. The correct way to do a command is to not do shell quoting and instead use subprocess.call or subprocess.Popen, and pass a list of unquoted arguments. This is immune to shell expansion.i.e.If you want to unquote shell quoted data, you can use shlex.shlex like this:
The standard library module subprocess has the list2cmdline function which does this, albeit according to Microsoft rules so I am not sure how reliable it works in Unix-like environments for more complicated command lines.
The quotefunction is available for quite some time (Python 2.7?) -- the major drawback is it moved from pipe module to shlex between 3.2 and 3.3.You have to be prepared to handle both cases while importing that function:


Answer URL
https://docs.python.org/3/library/shlex.html#shlex.quote
