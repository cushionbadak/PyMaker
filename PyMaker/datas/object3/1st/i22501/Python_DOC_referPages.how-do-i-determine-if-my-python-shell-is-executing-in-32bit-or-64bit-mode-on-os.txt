Natural Text
I need a way to tell what mode the shell is in from within the shell.  I've tried looking at the platform module but it seems only to tell you about "about the bit architecture and the linkage format used for the executable": the binary is compiled as 64bit though (I'm running on OS X 10.6) so it seems to always report 64bit even though I'm using the methods described here to force 32bit mode).
UPDATED:One way is to look at sys.maxsize as documented here:sys.maxsize was introduced in Python 2.6.  If you need a test for older systems, this slightly more complicated test should work on all Python 2 and 3 releases:BTW, you might be tempted to use platform.architecture() for this.  Unfortunately, its results are not always reliable, particularly in the case of OS X universal binaries.
When starting the Python interpreter in the terminal/command line you may also see a line like: Python 2.7.2 (default, Jun 12 2011, 14:24:46) [MSC v.1500 64 bit (AMD64)] on win32 Where [MSC v.1500 64 bit (AMD64)] means 64-bit Python.Works for my particular setup.
Basically a variant on Matthew Marshall's answer (with struct from the std.library):
Try using ctypes to get the size of a void pointer:It'll be 4 for 32 bit or 8 for 64 bit.
Open python console:it should display the '64bit' or '32bit' according to your platform.Alternatively( in case of OS X binaries ):
For a non-programmatic solution, look in the Activity Monitor. It lists the architecture of 64-bit processes as “Intel (64-bit)”.
On my Centos Linux system I did the following:1) Started the Python interpreter (I'm using 2.6.6)2) Ran the following code:and it gave me 
platform.architecture() notes say:Note:  On Mac OS X (and perhaps other platforms), executable files may be universal files containing multiple architectures.To get at the “64-bitness” of the current interpreter, it is more reliable  to query the sys.maxsize attribute:
Grouping everything...Considering that:The question is asked for OSX (I have an old (and cracked) VM with an ancient Python version)My main env is WinI only have the 32bit version installed on Win (and I built a "crippled" one on Lnx)I'm going to exemplify on all 3 platforms, using Python3 and Python2.Check [Python 3]: sys.maxsize value - compare it to 0x100000000 (2 ** 32): greater for 64bit, smaller for 32bit:OSX 9 x64:Python 2.7.10 x64:Ubtu 16 x64:Python 3.5.2 x64:Python 3.6.4 x86:Win 10 x64:Python 3.5.4 x64:Python 3.6.2 x86:Use [Python 3]: struct.calcsize(fmt) to determine the object size produced by the (pointer) format. In other words, determines the pointer size (sizeof(void*)):OSX 9 x64:Python 2.7.10 x64:Ubtu 16 x64:Python 3.5.2 x64:Python 3.6.4 x86:Win 10 x64:Python 3.5.4 x64:Python 3.6.2 x86:Use [Python 3.5]: ctypes - A foreign function library for Python. It also boils down to determining the size of a pointer (sizeof(void*)). As a note, ctypes uses #2. (not necessarily for this task) via "${PYTHON_SRC_DIR}/Lib/ctypes/__init__.py" (around line #15
struct.calcsize("P") returns size of the bytes required to store a single pointer. On a 32-bit system, it would return 4 bytes. On a 64-bit system, it would return 8 bytes. So the following would return 32 if you're running 32-bit python and 64 if you're running 64-bit python:Python 2Python 3
after hitting python in cmd
3.5.1 (v3.5.1:37a07cee5969, Dec  6 2015, 01:54:25) [MSC v.1900 64 bit (AMD64)]
Platform Architecture is not the reliable way.Instead us:


Answer URL
https://docs.python.org/3/library/platform.html#cross-platform
https://docs.python.org/3/library/platform.html#platform.architecture
https://docs.python.org/3/library/sys.html#sys.maxsize
https://docs.python.org/3/library/struct.html#struct.calcsize
