Natural Text
I have a list of objects in Python and I want to shuffle them. I thought I could use the random.shuffle method, but this seems to fail when the list is of objects. Is there a method for shuffling object or another way around this?This will fail.
random.shuffle should work.  Here's an example, where the objects are lists:Note that shuffle works in place, and returns None.
As you learned the in-place shuffling was the problem. I also have problem frequently, and often seem to forget how to copy a list, too. Using sample(a, len(a)) is the solution, using len(a) as the sample size. See https://docs.python.org/3.6/library/random.html#random.sample for the Python documentation.Here's a simple version using random.sample() that returns the shuffled result as a new list.
It took me some time to get that too. But the documentation for shuffle is very clear:shuffle list x in place; return None.So you shouldn't print random.shuffle(b). Instead do random.shuffle(b) and then print b.

If you happen to be using numpy already (very popular for scientific and financial applications) you can save yourself an import.http://docs.scipy.org/doc/numpy/reference/generated/numpy.random.shuffle.html
It works fine for me.  Make sure to set the random method.
If you have multiple lists, you might want to define the permutation (the way you shuffle the list / rearrange the items in the list) first and then apply it to all lists:Numpy / ScipyIf your lists are numpy arrays, it is simpler:mpuI've created the small utility package mpu which has the consistent_shuffle function:Note that mpu.consistent_shuffle takes an arbitrary number of arguments. So you can also shuffle three or more lists with it.
This alternative may be useful for some applications where you want to swap the ordering function.
'print func(foo)' will print the return value of 'func' when called with 'foo'.'shuffle' however has None as its return type, as the list will be modified in place, hence it prints nothing.Workaround:If you're more into functional programming style you might want to make the following wrapper function:
In some cases when using numpy arrays, using random.shuffle created duplicate data in the array. An alternative is to use numpy.random.shuffle. If you're working with numpy already, this is the preferred method over the generic random.shuffle. numpy.random.shuffleExampleUsing random.shuffle:Using numpy.random.shuffle:
One can define a function called shuffled (in the same sense of sort vs sorted)
shuffle  is in place, so do not print result, which is None, but the list. 
For one-liners, userandom.sample(list_to_be_shuffled, length_of_the_list) with an example:outputs:[2, 9, 7, 8, 3, 0, 4, 1, 6, 5]
Make sure you are not naming your source file random.py, and that there is not a file in your working directory called random.pyc..  either could cause your program to try and import your local random.py file instead of pythons random module.  
You can go for this:if you want to go back to two lists, you then split this long list into two.

you could build a function that takes a list as a parameter and returns a shuffled version of the list:

you can either use shuffle or sample . both of which come from random module.OR

The shuffling process is "with replacement", so the occurrence of each item may change! At least when when items in your list is also list. E.g.,After, The number of [0] may be 9 or 8, but not exactly 10.
Plan: Write out the shuffle without relying on a library to do the heavy lifting. Example: Go through the list from the beginning starting with element 0; find a new random position for it, say 6, put 0’s value in 6 and 6’s value in 0. Move on to element 1 and repeat this process, and so on through the rest of the list
It works fine. I am trying it here with functions as list objects:It prints out:foo1 foo2 foo3 foo2 foo3 foo1(the foos in the last row have a random order)


Answer URL
https://docs.python.org/3/library/random.html
