Natural Text
I want to do something like:How do I check whether both 'foo' and 'bar' are in dict foo?
Well, you could do this:

Simple benchmarking rig for 3 of the alternatives.Put in your own values for D and Q
You don't have to wrap the left side in a set. You can just do this:This also performs better than the all(k in d...) solution.
Using sets:Alternatively:
How about this:
While I like Alex Martelli's answer, it doesn't seem Pythonic to me.  That is, I thought an important part of being Pythonic is to be easily understandable.  With that goal, <= isn't easy to understand.While it's more characters, using issubset() as suggested by Karl Voigtland's answer is more understandable.  Since that method can use a dictionary as an argument, a short, understandable solution is:I'd like to use {'foo', 'bar'} in place of set(('foo', 'bar')), because it's shorter.  However, it's not that understandable and I think the braces are too easily confused as being a dictionary.
Alex Martelli's solution set(queries) <= set(my_dict) is the shortest code but may not be the fastest. Assume Q = len(queries) and D = len(my_dict).This takes O(Q) + O(D) to make the two sets, and then (one hopes!) only O(min(Q,D)) to do the subset test -- assuming of course that Python set look-up is O(1) -- this is worst case (when the answer is True).The generator solution of hughdbrown (et al?) all(k in my_dict for k in queries) is worst-case O(Q).Complicating factors:(1) the loops in the set-based gadget are all done at C-speed whereas the any-based gadget is looping over bytecode.(2) The caller of the any-based gadget may be able to use any knowledge of probability of failure to order the query items accordingly whereas the set-based gadget allows no such control.As always, if speed is important, benchmarking under operational conditions is a good idea.
I think this is the smartest and pithonic.
How about using lambda?
In case you want to: also get the values for the keyscheck more than one dictonarythen:
Not to suggest that this isn't something that you haven't thought of, but I find that the simplest thing is usually the best:
Jason, () aren't necessary in Python.
You can use .issubset() as well
This seems to work


Answer URL
https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset
