Natural Text
We are working with a code repository which is deployed both to Windows and Linux - sometimes on different directories.  How should one of the modules inside the project refer to one of the non-Python resources in the project (CSV files, etc.)?If we do something like:or:It will work only when the script is run from one specific directory, or a subset of the directories.What I would like to do is something like:Is this the right way? Is it possible?
Try to use a filename relative to the current files path. Example for './my_file':In Python 3.4+ you can also use pathlib:
If you are using setup tools or distribute (a setup.py install) then the "right" way to access these packaged resources seem to be using package_resources.In your case the example would beWhich of course reads the resource and the read binary data would be the value of my_dataIf you just need the filename you could also useExample:The advantage is that its guaranteed to work even if it is an archive distribution like an egg. See http://packages.python.org/distribute/pkg_resources.html#resourcemanager-api
I often use something similar to this:The variableholds the file name of the script you write that code in, so you can make paths relative to script, but still written with absolute paths. It works quite well for several reasons:path is absolute, but still relativethe project can still be deployed in a relative containerBut you need to watch for platform compatibility - Windows' os.pathsep is different than UNIX.
In Python, paths are relative to the current working directory, which in most cases is the directory from which you run your program. The current working directory is very likely not as same as the directory of your module file, so using a path relative to your current module file is always a bad choice.Using absolute path should be the best solution:
You also try to normalize your cwd using os.path.abspath(os.getcwd()). More info here.
You can use the build in __file__ variable. It contains the path of the current file. I would implement getBaseOfProject in a module in the root of your project. There I would get the path part of __file__ and would return that. This method can then be used everywhere in your project.
I spent a long time figuring out the answer to this, but I finally got it (and it's actually really simple):This will append the relative path of your subfolder to the directories for python to look inIt's pretty quick and dirty, but it works like a charm :)


Answer URL
https://docs.python.org/3/library/pathlib.htm
