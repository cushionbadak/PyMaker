Natural Text
I am currently using PIL.However, while this sufficiently covers most cases, some image files like, xcf, svg and psd are not being detected. Psd files throws an OverflowError exception.Is there someway I could include them as well?
A lot of times the first couple chars will be a magic number for various file formats.  You could check for this in addition to your exception checking above. 
I have just found the builtin imghdr module. From python documentation:The imghdr module determines the type  of image contained in a file or byte  stream.This is how it works:Using a module is much better than reimplementing similar functionality
In addition to what Brian is suggesting you could use PIL's verify method to check if the file is broken.im.verify()Attempts to determine if the file is  broken, without actually decoding the  image data. If this method finds any  problems, it raises suitable  exceptions. This method only works on  a newly opened image; if the image has  already been loaded, the result is  undefined. Also, if you need to load  the image after using this method, you  must reopen the image file. Attributes
You could use the Python bindings to libmagic, python-magic and then check the mime types. This won't tell you if the files are corrupted or intact but it should be able to determine what type of image it is.
Well, I do not know about the insides of psd, but I, sure, know that, as a matter of fact, svg is not an image file per se, -- it is based on xml, so it is, essentially, a plain text file.
On Linux, you could use python-magic (http://pypi.python.org/pypi/python-magic/0.1) which uses libmagic to identify file formats.AFAIK, libmagic looks into the file and tries to tell you more about it than just the format, like bitmap dimensions, format version etc.. So you might see this as a superficial test for "validity".For other definitions of "valid" you might have to write your own tests.
Would checking the file extensions be acceptable or are you trying to confirm the data itself represents an image file?If you can check the file extension a regular expression or a simple comparison could satisfy the requirement.
UpdateI also implemented the following solution in my Python script here on GitHub.I also verified that damaged files (jpg) frequently are not 'broken' images i.e, a damaged picture file sometimes remains a legit picture file, the original image is lost or altered but you are still able to load it with no errors. But, file truncation cause always errors. End UpdateYou can use Python Pillow(PIL) module, with most image formats, to check if a file is a valid and intact image file.In the case you aim at detecting also broken images, @Nadia Alramli correctly suggests the im.verify() method, but this does not detect all the possible image defects, e.g., im.verify does not detect truncated images (that most viewers often load with a greyed area).Pillow is able to detect these type of defects too, but you have to apply image manipulation or image decode/recode in or to trigger the check. Finally I suggest to use this code:In case of image defects this code will raise an exception.Please consider that im.verify is about 100 times faster than performing the image manipulation (and I think that flip is one of the cheaper transformations).With this code you are going to verify a set of images at about 10 MBytes/sec with standard Pillow or 40 MBytes/sec with Pillow-SIMD module (modern 2.5Ghz x86_64 CPU).For the other formats psd,xcf,.. you can use Imagemagick wrapper Wand, the code is as follows:But, from my experiments Wand does not detect truncated images, I think it loads lacking parts as greyed area without prompting. I red that Imagemagick has an external command identify that could make the job, but I have not found a way to invoke that function programmatically and I have not tested this route.I suggest to always perform a preliminary check, check the filesize to not be zero (or very small), is a very cheap idea:


Answer URL
https://docs.python.org/3/library/imghdr.html
