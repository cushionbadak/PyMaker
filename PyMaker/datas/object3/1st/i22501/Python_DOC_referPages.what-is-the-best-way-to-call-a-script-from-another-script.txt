Natural Text
I have a script named test1.py which is not in a module. It just has code that should execute when the script itself is run. There are no functions, classes, methods, etc. I have another script which runs as a service. I want to call test1.py from the script running as a service.For example:File test1.pyFile service.pyI'm aware of one method which is opening the file, reading the contents, and basically eval'ing it. I'm assuming there's a better way of doing this. Or at least I hope so.
The usual way to do this is something like the following.test1.pyservice.py
This is possible in Python 2 usingSee the documentation for the handling of namespaces, if important in your case.However, you should consider using a different approach; your idea (from what I can see) doesn't look very clean.
Another way:File test1.py:File service.py:The advantage to this method is that you don't have to edit an existing Python script to put all its code into a subroutine.Documentation: Python 2, Python 3
If you want test1.py to remain executable with the same functionality as when it's called inside service.py, then do something like:test1.pyservice.py
You should not be doing this.  Instead, do:test1.py:service.py
Use import test1 for the 1st use - it will execute the script. For later invocations, treat the script as an imported module, and call the reload(test1) method.When reload(module) is executed:Python modules’ code is recompiled and the module-level code reexecuted, defining a new set of objects which are bound to names in the module’s dictionary. The init function of extension modules is not called A simple check of sys.modules can be used to invoke the appropriate action. To keep referring to the script name as a string ('test1'), use the 'import()' builtin.
Using os you can make calls directly to your terminal. If you want to be even more specific you can concatenate your input string with local variables, ie.
Why not just import test1? Every python script is a module. A better way would be to have a function e.g. main/run in test1.py, import test1 and run test1.main(). Or you can execute test1.py as a subprocess.
This is an example with subprocess library:


Answer URL
https://docs.python.org/3/library/subprocess.html
