Natural Text
This question already has an answer here:How do I parse an ISO 8601-formatted date?                    24 answers                I'm getting a datetime string in a format like "2009-05-28T16:15:00" (this is ISO 8601, I believe). One hackish option seems to be to parse the string using time.strptime and passing the first six elements of the tuple into the datetime constructor, like:I haven't been able to find a "cleaner" way of doing this. Is there one?
I prefer using the dateutil library for timezone handling and generally solid date parsing. If you were to get an ISO 8601 string like: 2010-05-08T23:41:54.000Z you'd have a fun time parsing that with strptime, especially if you didn't know up front whether or not the timezone was included. pyiso8601 has a couple of issues (check their tracker) that I ran into during my usage and it hasn't been updated in a few years. dateutil, by contrast, has been active and worked for me: 
With Python 3 and no external libraries:Python 2 doesn't support the %z format specifier, so it's best to explicitly use Zulu time everywhere if possible:
Because ISO 8601 allows many variations of optional colons and dashes being present, basically CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm]. If you want to use strptime, you need to strip out those variations first.The goal is to generate a UTC datetime object.If you just want a basic case that work for UTC with the Z suffix like 2016-06-29T19:36:29.3453Z:If you want to handle timezone offsets like 2016-06-29T19:36:29.3453-0400 or 2008-09-03T20:56:35.450686+05:00 use the following. These will convert all variations into something without variable delimiters like  20080903T205635.450686+0500 making it more consistent/easier to parse.If your system does not support the %z strptime directive (you see something like ValueError: 'z' is a bad directive in format '%Y%m%dT%H%M%S.%f%z') then you need to manually offset the time from Z (UTC). Note %z may not work on your system in Python versions < 3 as it depended on the C library support which varies across system/Python build type (i.e., Jython, Cython, etc.).
Arrow looks promising for this:Arrow is a Python library that provides a sensible, intelligent way of creating, manipulating, formatting and converting dates and times. Arrow is simple, lightweight and heavily inspired by moment.js and requests.
You should keep an eye on the timezone information, as you might get into trouble when comparing non-tz-aware datetimes with tz-aware ones.It's probably the best to always make them tz-aware (even if only as UTC), unless you really know why it wouldn't be of any use to do so.
I haven't tried it yet, but pyiso8601 promises to support this.
Both ways:Epoch to ISO time:ISO time to Epoch:
This also includes the milliseconds and time zone.If the time is '2012-09-30T15:31:50.262-08:00', this will convert into epoch time.
Isodate seems to have the most complete support.
aniso8601 should handle this. It also understands timezones, Python 2 and Python 3, and it has a reasonable coverage of the rest of ISOÂ 8601, should you ever need it.
Here is a super simple way to do these kind of conversions.No parsing, or extra libraries required.It is clean, simple, and fast.


Answer URL
https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat
