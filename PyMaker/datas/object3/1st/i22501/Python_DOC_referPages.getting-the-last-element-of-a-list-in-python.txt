Natural Text
In Python, how do you get the last element of a list?
some_list[-1] is the shortest and most Pythonic.In fact, you can do much more with this syntax. The some_list[-n] syntax gets the nth-to-last element. So some_list[-1] gets the last element, some_list[-2] gets the second to last, etc, all the way down to some_list[-len(some_list)], which gives you the first element.You can also set list elements in this way. For instance:Note that getting a list item by index will raise an IndexError if the expected item doesn't exist. This means that some_list[-1] will raise an exception if some_list is empty, because an empty list can't have a last element.
If your str() or list() objects might end up being empty as so: astr = '' or alist = [], then you might want to use alist[-1:] instead of alist[-1] for object "sameness".The significance of this is:Where the distinction being made is that returning an empty list object or empty str object is more "last element"-like then an exception object.
You can also do:It depends on what you want to do with your list because the pop() method will delete the last element.
The simplest way to display last element in python isthere are many other method to achieve such a goal but these are short and sweet to use.
In Python, how do you get the last element of a list?To just get the last element, without modifying the list, and assuming you know the list has a last element (i.e. it is nonempty) pass -1 to the subscript notation:ExplanationIndexes and slices can take negative integers as arguments.I have modified an example from the documentation to indicate which item in a sequence each index references, in this case, in the string "Python", -1 references the last element, the character, 'n':Assignment via iterable unpackingThis method may unnecessarily materialize a second list for the purposes of just getting the last element, but for the sake of completeness (and since it supports any iterable - not just lists):The variable name, head is bound to the unnecessary newly created list:If you intend to do nothing with that list, this would be more apropos:Or, really, if you know it's a list (or at least accepts subscript notation):In a functionA commenter said:I wish Python had a function for first() and last() like Lisp does... it would get rid of a lot of unnecessary lambda functions.These would be quite simple to define:Or use operator.itemgetter:In either case:Special casesIf you're doing something more complicated, you may find it more performant to get the last element in slightly different ways.If you're new to programming, you should avoid this section, because it couples otherwise semantically different parts of algorithms together. If you change your algorithm in one place, it may have an unintended impact on another line of code. I try to provide caveats and conditions as completely as I can, but I may have missed something. Please comment if you think I'm leaving a caveat out.SlicingA slice of a list returns a new list - so we can slice from -1 to the end if we are going to want the element in a new list:This has the upside of not failing if the list is empty:Whereas attempting to access by index raises an IndexError which would need to be handled:But again, slicing for this purpose should only be done if you need:a new list createdand the new list to be empty if the prior list was empty.for loopsAs a feature of Python, there is no inner scoping in a for loop.If you're performing a complete iteration over the list already, the last element will still be referenced by the variable name assigned in the loop:This is not semantically the last thing in the list. This is semantically the last thing that the name, item, was bound to.Thus this should only be used to get the last element if you are already looping, and you know the loop will finish (not break or exit due to errors), otherwise it will point to the last element referenced by the loop.Getting and removing itWe can also mutate our original list by removing and returning the last element:But now the original list is modified. (-1 is actually the default argument, so list.pop can be used without an index argument):Only do this ifyou know the list has elements in it, or are prepared to handle the exception if it is empty, andyou do intend to remove the last element from the list, treating it like a stack. These are valid use-cases, but not very common.Saving the rest of the reverse for later:I don't know why you'd do it, but for completeness, since reversed returns an iterator (which supports the iterator protocol) you can pass its result to next:So it's like doing the reverse of this:But I can't think of a good reason to do this, unless you'll need the rest of the reverse iterator later, which would probably look more like this:and now:

some_list = [1, 2, 3]Method 1:Method 2:Method 3:
if you want to just get the last value of list, you should use :BUT if you want to get value and also remove it from list, you can use :OR: you can pop with index too...
lst[-1] is the best approach, but with general iterables, consider more_itertools.last:Code
Ok, but what about common in almost every language way items[len(items) - 1]? This is IMO the easiest way to get last element, because it does not require anything pythonic knowledge.
list[-1] will retrieve the last element of the list without changing the list.list.pop() will retrieve the last element of the list, but it will mutate/change the original list. Usually, mutating the original list is not recommended.Alternatively, if, for some reason, you're looking for something less pythonic, you could use list[len(list)-1], assuming the list is not empty.
You can also use the code below, if you do not want to get IndexError when the list is empty.


Answer URL
https://docs.python.org/3/library/exceptions.html#IndexError
https://docs.python.org/3/tutorial/introduction.html
