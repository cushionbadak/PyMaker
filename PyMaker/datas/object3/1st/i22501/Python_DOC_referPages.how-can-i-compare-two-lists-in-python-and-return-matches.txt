Natural Text
I want to take two lists and find the values that appear in both.would return [5], for instance.
Not the most efficient one, but by far the most obvious way to do it is:if order is significant you can do it with list comprehensions like this:(only works for equal-sized lists, which order-significance implies).
Use set.intersection(), it's fast and readable.
A quick performance test showing Lutz's solution is the best:These are the results on my machine:Obviously, any artificial performance test should be taken with a grain of salt, but since the set().intersection() answer is at least as fast as the other solutions, and also the most readable, it should be the standard solution for this common problem.
I prefer the set based answers, but here's one that works anyway
The easiest way to do that is to use sets:

Quick way:
Also you can try this,by keeping common elements in a new list. 
Do you want duplicates? If not maybe you should use sets instead:
another a bit more functional way to check list equality for list 1 (lst1) and list 2 (lst2) where objects have depth one and which keeps the order is:
Can use itertools.product too.
You can use 
You can use:Output:

If you want a boolean value:
The following solution works for any order of list items and also supports both lists to be different length.
Using __and__ attribute method also works.or simply

I just used the following and it worked for me:this would then print 5 in your case. Probably not great performance wise though.


Answer URL
https://docs.python.org/3/library/stdtypes.html#frozenset.difference
https://docs.python.org/3/library/stdtypes.html#frozenset.union
