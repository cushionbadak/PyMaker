Natural Text
Given a string as user input to a Python function, I'd like to get a class object out of it if there's a class with that name in the currently defined namespace. Essentially, I want the implementation for a function which will produce this kind of result:Is this, at all, possible?
Warning: eval() can be used to execute arbitrary Python code. You should never use eval() with untrusted strings. (See Security of Python's eval() on untrusted strings?)This seems simplest.
This could work:
You could do something like:
You want the class Baz, which lives in module foo.bar. With Python 2.7,you want to use importlib.import_module(), as this will make transitioning to Python 3 easier: With Python < 2.7:Use:
This accurately handles both old-style and new-style classes.
I've looked at how django handles thisdjango.utils.module_loading has thisYou can use it like import_string("module_path.to.all.the.way.to.your_class")
In terms of arbitrary code execution, or undesired user passed names, you could have a list of acceptable function/class names, and if the input matches one in the list, it is eval'd.PS: I know....kinda late....but it's for anyone else who stumbles across this in the future.
Yes, you can do this. Assuming your classes exist in the global namespace, something like this will do it:
Using importlib worked the best for me.This uses string dot notation for the python module that you want to import.
If you really want to retrieve classes you make with a string, you should store (or properly worded, reference) them in a dictionary. After all, that'll also allow to name your classes in a higher level and avoid exposing unwanted classes.Example, from a game where actor classes are defined in Python and you want to avoid other general classes to be reached by user input.Another approach (like in the example below) would to make an entire new class, that holds the dict above. This would:Allow multiple class holders to be made for easier organization (like, one for actor classes and another for types of sound);Make modifications to both the holder and the classes being held easier;And you can use class methods to add classes to the dict. (Although the abstraction below isn't really necessary, it is merely for... "illustration").Example:This returns me:Another fun experiment to do with those is to add a method that pickles the ClassHolder so you never lose all the classes you did :^)


Answer URL
https://docs.python.org/3/library/importlib.html
