Natural Text
The problem:So, the idea is two add to dictionaries by int/float values in the shortest form.Here's one solution that I've devised, but I don't like it, cause it's long:I think there must be a shorter/concise solution (maybe something to do with reduce and operator module? itertools?)... Any ideas?Update: I'm really hoping to find something more elegant like "reduce(operator.add, key = itemgetter(0), a+b)". (Obviously that isn't real code, but you should get the idea). But it seems that may be a dream.Update: Still loking for more concise solutions. Maybe groupby can help?The solution I've come up with using "reduce"/"groupby" isn't actually concise:
Easiest to just use a Counter
solving not in terms of "length" but performance, I'd do the following:it's also py3k-compatible, unlike your original code.
In my first impression, I will write:
If you want short code, you're there.If you want clean code, inherit from Ber's defaultdict and overload __add__:Gives:
I think one line of code is already pretty short :)I may become "half a line", it you use defaultdict and remove some unnecessary list and set creations:
The first thing I think of is a bit more efficient and (IMO) a bit more elegant, but still too much typing.  Actually, it's about equivalent to kcwu's.It's really a shame that dict.update doesn't return self.  I guess it's not the Python way.  If it did, the [..., d][1] trick would be unnecessary.Perl: "Easy things are easy, hard things are possible"Haskell: "Easy things are hard, hard things are easy"  "Hard things are easy, the impossible just happened"
Comment for @John Pirie's answer:Here's implementation that doesn't use (self.keys() + rhs.keys()):
or, with a one liner:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
