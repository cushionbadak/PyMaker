Natural Text
Since examples of asynchronous programming are still fairly sparse, I am trying to come up with my own using the new async def. I figured the most basic example I could make would be an event loop which listens to the user inputs and prints them back.I want an event loop which listens to the keys the user presses and prints them every second. I'm trying to do so by having one task that prints from a queue of keys and a second task that listens to pressed keys and adds them to the queue.I am missing a good way to asynchronously listen to key strokes. Here is what I have for now.Expected output would look like thisI doubt there is an awaitable coroutine such as asyncio.await_pressed_key, how would we proceed to create one?Any other approach is welcome as well as my goal is not to make this specific example work, but rather to generate meaningful asynchronous programmign examples.
Assuming that you want to read characters from a TTY (terminal device on Unix-like system), accessing characters as they are typed requires:the TTY to be in "raw mode", so that the system returns characters without waiting for a newline to be typed by the user;the standard input, which are blocking, to be wrapped into an asyncio non-blocking stream.The former is provided by the tty module that comes with the Python standard library, and the latter by the aioconsole third-party library.With those two, your example could look like this:This example will only work on Unix-like systems.


Answer URL
https://docs.python.org/3/library/ctypes.html
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.run_in_executor
