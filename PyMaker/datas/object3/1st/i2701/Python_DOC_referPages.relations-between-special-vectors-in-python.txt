Natural Text
I am wondering if there is a way to establish a relation between some special "vectors".Example:Suppose these are my vectors (I will only choose 3 special vectors):and I want to add the following rules when comparing them (lexicographic order):I wish to say that  because but I also want to saybecause but note that things are a little different for "b" and "c" since these are not comparable because even thoughIn other words, the rules I am applying, will first compare the "normal" entries of two vectors x and y, if a certain entry of vector x is bigger than a certain entry of vector y, we take a look at the last entry. If the last entry of vector x is greater than Or equal, then we say x>y, if this is not the case, then x and y are not comparable.In case all "normal" entries of x and y are the same, we compare the last entry. If the last entry of x is bigger than the last entry of y, we also say x>y. I am thinking that this has to do with a while loop.
You can make vector a subclass of list and overload the __lt__ and __gt__ methods so that the last item is checked before the default behavior. Also overload the __le__ and __ge__ methods for completeness:so that:will output:EDIT: In light of the comments made below, I would also like to point out that this is case where functools.total_ordering doesn't work because of the atypical logic required by the OP, where one object can be not less than, not greater than and not equal to the other at the same time.So if we define only the __lt__ method for the vector class and apply the total_ordering decorator:The test code above would produce the following incorrect output instead:
You can easily write a function to do what you described.You've defined the "normal" values as all but the last one, and the "special" values as the last one, so that's easy:Now, if I understand it correctly, you want to do a lexicographical comparison of the normal values, and then defer to the special values if they're equal…… but otherwise use the special values as a check to make sure they're ordered in the same way as the normal values:Notice that for comparing the lists of normal values, and the lists of special values, I didn't use a loop; I just compared the lists. That's because lists already compare lexicographically (which, internally, is done with a loop, of course, but I don't have to write it).


Answer URL
https://docs.python.org/3/library/functools.html#functools.cmp_to_key
