Natural Text
Say you have something like this:PyCharm can parse the str typing hints to auto-complete for outputs of either method.But what if I want to put Point and Line in separate files? Is there some way to still get auto-completion?
The problem is that Line isn't a name for a type at all within point.py, and Point isn't a name for a type within line.py. Putting it in quotes doesn't help; that just delays when the string is resolved. It still has to eventually resolve to a type, so you're just delaying things to a point where they resolve to a NameError, which doesn't help thing.If you do an import line in Point and import point in Line, then point.Point and line.Line become types, which solves that problem. But of course it creates a new problem: a circular import.In some cases, as explained in PEP 484, you can resolve that just by doing a conditional "static-typing-only" import, like this:… and then using 'line.Line' in the type annotation.See the docs on TYPE_CHECKING for more details. (In particular, if you need compatibility with Python 3.5 before 3.5.2, this will give you a NameError instead of False at runtime, which is a pain… but not many people need to run on 3.5.1.)If that doesn't solve the problem, you need some scheme to avoid the circular import, the same way you would for a runtime circular import.For example, you can go with the traditional "interface" solution where the first type depends on the second, but the second doesn't depend on the first, it depends only on a superclass for the first.Typically, this superclass would be an ABC, to indicate that it's serving only as an interface to some real class defined elsewhere. (And that way, you know, and Python and your static checker can enforce, that anything that types as the ABC must be an instance of one of the concrete subclasses of that ABC—of which there's only one.)
You can have an assertion for that type, PyCharm will recognize it as the type you asserted it to be.


Answer URL
https://docs.python.org/3/library/typing.html#typing.TYPE_CHECKING
