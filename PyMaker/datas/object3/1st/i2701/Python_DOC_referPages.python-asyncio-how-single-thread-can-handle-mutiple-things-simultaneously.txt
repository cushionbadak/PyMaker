Natural Text
Hi I am new to asyncio and concept of event loops (Non-blocking IO)here, when code starts, firstWorker() is executed and paused until it encounters await subWorker(). While firstWorker() is waiting, secondWorker() gets started.Question is, when firstWorker() encounters await subWorker() and gets paused, the computer then will execute subWorker() and secondWorker() at the same time. Since the program has only 1 thread now, and I guess the single thread does secondWorker() work. Then who executes subWorker()? If single thread can only do 1 thing at a time, who else does the other jobs?
The assumption that subWorker and secondWorker execute at the same time is false.The fact that secondWorker simply sleeps means that the available time will be spent in subWorker.asyncio by definition is single-threaded; see the documentation:This module provides infrastructure for writing single-threaded concurrent codeThe event loop executes a task at a time, switching for example when one task is blocked while waiting for I/O, or, as here, voluntarily sleeping.
This is a little old now, but I've found the visualization from the gevent docs (about 1 screen down, beneath "Synchronous & Asynchronous Execution") to be helpful while teaching asynchronous flow control to coworkers: http://sdiehl.github.io/gevent-tutorial/The most important point here is that only one coroutine is running at any one time, even though many may be in process.


Answer URL
https://docs.python.org/3/library/asyncio.html
