Natural Text
I am trying to make a python program that would download multiple images simultaneously by means of threading. However, the problem is that I have to ask the user how many images he/she wants to download, so I have to create a new thread for each download using a loop.I tried that, and it turns out that I cannot create a thread without starting it too. I want both the threads created by the loop to start at roughly the same time. However, the loop progresses only after the thread constructed in the loop has finished executing -  so I cannot simultaneously download the images.It seems like it does not matter if I include t.start() in the loop, since the thread starts automatically due to the line - I want the first thread to start and the loop to repeat with the next thread, so that both downloads can run simultaneously. For now, the loop moves to the next iteration only when the first thread has finished.
Form python docs:class threading.Thread(group=None, target=None, name=None, args=(),  kwargs={}, *, daemon=None)You should instantiate your threading object as follows:Otherwise you just calling your img_down method without passing it to Threading object
You need to call .start() for your thread to start. If you want to wait until all threads have finished, you should .join() the thread as well.For example,(2, 'b')(3, 'b')(1, 'a')Here my main will exit while the threads are still running. In order to prevent it from doing so until all threads have finished, call join.
Ok so as you can see in documentation you have to do 2 things:Instantiate the thread in the correct way :this is blocking because it's a method call not a thread instantiationyou have to instantiate it this way:Start the threads this way :otherwise the threads will not make the work.By the way you can first instantiate all the threads and then start them with another cycle.
Creating a thread does not start it. You have to start it explicity, by calling the objects .start()method. However, two points to notice for your use caseadding one thread per file to download does not improve performance. Something in the order of ~10 threads would be good, for much more you have diminishing returns, and after a point performance could actually decrease.For your use case it would be easier and better to use a thread pool.for example


Answer URL
https://docs.python.org/3/library/threading.html#thread-objects
