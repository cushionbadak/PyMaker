Natural Text
As you may know, this is most recent type of defining named tuples in python:After defining the type, Python interpreter defines a default constructor getting id and name and you can instantiate a new object using your fields.Now I want to initialise a new object using a string and within the function I parse it. How can I define another constructor without spoiling the good default ones?
How can I define another constructor without spoiling the good default ones?You can't. Python classes can't have multiple __new__ methods (or, if you meant "initializer", __init__ methods), just one.But there's an easy way to work around this: the alternate constructor idiom: you write a @classmethod that provides an alternate way to construct instances. There are plenty of examples in the standard library, like datetime.now and datetime.utcfromtimestamp. There are even a few examples in the basic builtin types, like int.from_bytes.Here's how that works:This is, of course, the same thing you'd do with a collections.namedtuple subclass, a @dataclass, or a plain-old class that had too many different ways to construct it.If you really want to, the other way to do it is to provide an ugly constructor with either keyword-only parameters, or parameters that have different meanings depending on what you pass. With NamedTuple, you'll have to either insert an extra class in the way, or monkeypatch the class after creation, because otherwise there's no documented way of getting at the default constructor implementation.So:… or, if you prefer monkeypatching:… or, if you want more of a range-style ugly API you can do either of the above with:
Yes since Python 3.6 there is a new alternative for namedtuple - NamedTuple. Thanks to variable annotations now it is possible. So, if you previously wrote something like:Now you can define it as follows.To add a new constructor just define a classmethod:


Answer URL
https://docs.python.org/3/library/datetime.html#datetime.datetime.now
https://docs.python.org/3/library/datetime.html#datetime.datetime.utcfromtimestamp
https://docs.python.org/3/library/stdtypes.html#int.from_bytes
https://docs.python.org/3/library/typing.html#typing.NamedTuple
