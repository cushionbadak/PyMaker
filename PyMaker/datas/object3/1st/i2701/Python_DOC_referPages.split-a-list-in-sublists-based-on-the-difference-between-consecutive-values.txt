Natural Text
I have a list with values for which each value has at least one (but often more) consecutive value(s) that have a .033 increment:I would like to split this list into sublists where consecutive items that differ by .033 are combined, and when the difference is larger to start a new sublist:
Keep track of the last element you saw and either append the current item to the last sublist, or create a new sublist if the difference is greater than your allowed delta.Note, however, that a value of 0.033 will in fact not return the result that you want, as some of the differences are considerably more (0.037) or just slightly more due to floating point rounding. Instead, you might want to use a slightly more generous value, e.g., using 0.035 gives you [[26.051, 26.084, 26.117, 26.15, 26.183], [31.146], [31.183], [34.477, 34.51, 34.543]]
One can use temporary lists and for loop to get the desired result: Output: 
My approach involves running through pairs of consecutive numbers and examine the gaps between them, just like everybody else's. The difference here is in the use of iter() to create two iterables from one list. A few notesMy solution looks long, but if you subtract all the comments, blank likes, and the last print statement, it is only 6 linesIt is efficient because I did not actually duplicate the listAn empty list (empty l) will generate a StopIteration exception, so please ensure the list is not empty
If you're a fan of itertools, you could use itertools.groupby() for this:Output:   As far as the logic is concerned, the key function returns different keys for numbers that have neighbors with the difference of 0.033 and those that don't. Then groupby() groups them accordingly.


Answer URL
https://docs.python.org/3/library/itertools.html
https://docs.python.org/3/library/itertools.html#itertools.groupby
