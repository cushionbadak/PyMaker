Natural Text
Let me explain why I need to do this:I'm developing a library, and have the need to serialize python functions.Here are the 2 utility functions I use:Now, If somehow I could cache the serialized functions, and store them in a dict like this:It would result in quite a performance improvement since I don't need to serialize (and transport) them repeatedly.Is there a reliable way to achieve this?EDIT: If I tried hashing a function, It's not exactly what I have in mind.I need 2 functions with the same body, signature, global scope (and something else, which I'm probably missing) to return the same hash.Here is the library in question.EDIT: Here is some in-depth explanation of why I want to do this.I am sending the function from a process ("Client") to another one ("Server"), and executing it on "Server".Sounds weird and complicated, but I have a good reason for it.This whole process makes the function strictly atomic across all "Client"sThe "Server" is the "Actor". So one, and only one function can run at a time, making it easier for the programmer to avoid race conditions.Now, I if the "Client" has already sent the function to the "Server" once, then for the subsequent interactions, It sends only the hash of that function, and the "Server" can just look up that function in its table.
I need 2 functions with the same body, signature, global scope (and something else, which I'm probably missing) to return the same hash.Then you will have to construct the hash yourself, based on those criteria.For example:Note that the first ones are the same, because the code and the number of positional parameters are the same - we didn't include co_consts, so the different string and changing 1 to 2 is not taken into account. Note that the last one is different, because we changed the operation (which influenced co_code, which in turn influenced fnhash).It will be up to you to select exactly which attributes of the code object you will choose to be meaningful (e.g. I doubt you'll want to include co_filename and co_firstline). See the meanings of various co_* fields in the inspect docs.


Answer URL
https://docs.python.org/3/library/inspect.html
