Natural Text
I have a function in my class config to load a configuration text file. Before loading the data, the function checks the file to avoid malfunctions if the user has manually modified the file.Instead, this is the configuration file:Now, I'm getting an error that I honestly can not understand what caused it. If I change the file in this way for example:I get the error:Same thing happens if I change Display Height, Music Volume, Sound Volume, Voice Volume, Ambient Volume and Other Volume.After I get the error, I go to see the configuration file and see that it has been rightly corrected. That's why I can not understand why I keep getting these errors.The block that keeps giving me the error is:Can you please help me?EDIT:I added a simplified class version, with only the functions needed for the error.EDIT2:In the __init__ of the class, it checks whether the file is present or not. If it is not present, the new_config() function is called, which creates a new file with the default data, and then calls the load_config() function. If the file is present, the load_config() function is called directly.The load_config() function must check the file data before loading it into the program.First block of the load_config() function:The first thing to do is to transform what is written in the file into something that the program can work on. The file is then readed, for each line replaced (":") with a useful symbol for later ("|") and the carriage return is deleted. Now we have to divide it in two, so that on one side there is the name of the data, while on the other side there is the data itself. This is done by dividing where the symbol previously ("|") has been inserted. This division is done in the try, so that if the file has some error inside, the file is overwritten by creating a new one with new_config(). The second thing to do is to transform the data (which is currently a string) into a valid data. This is done by ast.literal_eval(). Once again, everything is put into a try, for the same reason as before. Finally, it is checked that the data is single and not a tuple. The data name and the data are entered respectively in list_dat and list_str.Second block of the load_config() function:The first thing to do is to check, a default list of names, if the name of the data is correct, if it is wrong, it is corrected. Same for the data, but in that case it is checked if the type is the same as its default counterpart. Rarely (1 in 100 for example), I noticed that if the file is empty, no Except is raised from the split() block or the ast.literal_eval() block. So I added:To avoid this problem.Third block of the load_config() function (This is the block that gives me the problem):This checks whether the width and height of the screen are the same as that of the data. If they are not equal, it is checked that the data is the same as the default (1024, 576). If they are the same, it is finally checked that the default loading mode is false. This check is performed so that when the program screen is created, there are no problems whatsoever. If any of these checks fail (else), the width and height data are changed to the default data.Similarly, the same volume control is made, with the only difference being that the number is not more than 100 (maximum volume) or less than 0 (minimum volume).Fourth block of the load_config() function:The controlled data are assigned to their variables, to be used by the program.EDIT3:I have unfortunately forgotten to say something previously. I am aware that exceptions are raised on ast.literal_eval(), which is why I put it in try. When this happens, the new_config() function is called and the cycle should start over. So the lists return empty and are filled again by the check. At least this in theory. Instead, while the file is created as new as it should (with default data), the rest of the function goes to pieces the second time it is executed. Also because, again, the error is caused only by the data I put. For others (Fullscreen etc.) that have a Boolean value and have no control in the third block, the problem does not occur.
After simplifying your script to something like this, It's clear that ast.literal_eval() method throws ValueError exception:And since you handling it here:You getting less config entries than expected, thus InvalidIndex error.Now ast.literal_eval() throws exception since your input can't be evaluated to any known python type or method.Please check the docs to learn how to use it the right way


Answer URL
https://docs.python.org/3/library/ast.html
