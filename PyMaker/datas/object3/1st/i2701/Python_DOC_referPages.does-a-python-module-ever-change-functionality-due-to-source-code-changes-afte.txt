Natural Text
I have a long-running Python server and would like to be able to upgrade a service without restarting the server. What's the best way do do this?
You can reload a module when it has already been imported by using the reload builtin function:In Python 3, reload was moved to the imp module. In 3.4, imp was deprecated in favor of importlib, and reload was added to the latter. When targeting 3 or later, either reference the appropriate module when calling reload or import it.I think that this is what you want. Web servers like Django's development server use this so that you can see the effects of your code changes without restarting the server process itself.To quote from the docs:Python modules’ code is recompiled and  the module-level code reexecuted,  defining a new set of objects which  are bound to names in the module’s  dictionary. The init function of  extension modules is not called a  second time. As with all other objects  in Python the old objects are only  reclaimed after their reference counts  drop to zero. The names in the module  namespace are updated to point to any  new or changed objects. Other  references to the old objects (such as  names external to the module) are not  rebound to refer to the new objects  and must be updated in each namespace  where they occur if that is desired.As you noted in your question, you'll have to reconstruct Foo objects if the Foo class resides in the foo module.
In Python 3.0–3.3 you would use: imp.reload(module)The BDFL has answered this question.However, imp was deprecated in 3.4, in favour of importlib (thanks @Stefan!).I think, therefore, you’d now use importlib.reload(module), although I’m not sure.
It can be especially difficult to delete a module if it is not pure Python.Here is some information from: How do I really delete an imported module?You can use sys.getrefcount() to find out the actual number of  references.Numbers greater than 3 indicate that  it will be hard to get rid of the  module. The homegrown "empty"  (containing nothing) module should be  garbage collected afteras the third reference is an artifact  of the getrefcount() function.
reload(module), but only if it's completely stand-alone. If anything else has a reference to the module (or any object belonging to the module), then you'll get subtle and curious errors caused by the old code hanging around longer than you expected, and things like isinstance not working across different versions of the same code.If you have one-way dependencies, you must also reload all modules that depend on the the reloaded module to get rid of all the references to the old code. And then reload modules that depend on the reloaded modules, recursively.If you have circular dependencies, which is very common for example when you are dealing with reloading a package, you must unload all the modules in the group in one go. You can't do this with reload() because it will re-import each module before its dependencies have been refreshed, allowing old references to creep into new modules.The only way to do it in this case is to hack sys.modules, which is kind of unsupported. You'd have to go through and delete each sys.modules entry you wanted to be reloaded on next import, and also delete entries whose values are None to deal with an implementation issue to do with caching failed relative imports. It's not terribly nice but as long as you have a fully self-contained set of dependencies that doesn't leave references outside its codebase, it's workable.It's probably best to restart the server. :-)

For Python 2 use built-in function reload():For Python 2 and 3.2–3.3 use reload from module imp:But imp is  deprecated since version 3.4 in favor of importlib, so use:or
The following code allows you Python 2/3 compatibility:The you can use it as reload() in both versions which makes things simpler.
The accepted answer doesn't handle the from X import Y case. This code handles it and the standard import case as well:In the reloading case, we reassign the top level names to the values stored in the newly reloaded module, which updates them.
This is the modern way of reloading a module:Just type reload(MODULE_NAME), replacing MODULE_NAME with the name of the module you want to reload.For example, reload(math) will reload the math function.
If you are not in a server, but developing and need to frequently reload a module, here's a nice tip.First, make sure you are using the excellent IPython shell, from the Jupyter Notebook project. After installing Jupyter, you can start it with ipython, or jupyter console, or even better, jupyter qtconsole, which will give you a nice colorized console with code completion in any OS.Now in your shell, type:Now, every time you run your script, your modules will be reloaded. Beyond the 2, there are other options of the autoreload magic:
For those like me who want to unload all modules (when running in the Python interpreter under Emacs):More information is in Reloading Python modules.
Enthought Traits has a module that works fairly well for this. https://traits.readthedocs.org/en/4.3.0/_modules/traits/util/refresh.htmlIt will reload any module that has been changed, and update other modules and instanced objects that are using it. It does not work most of the time with __very_private__ methods, and can choke on class inheritance, but it saves me crazy amounts of time from having to restart the host application when writing PyQt guis, or stuff that runs inside programs such as Maya or Nuke. It doesn't work maybe 20-30 % of the time, but it's still incredibly helpful.Enthought's package doesn't reload files the moment they change - you have to call it explicitely - but that shouldn't be all that hard to implement if you really need it
Those who are using python 3 and reload from importlib.If you have problems like it seems that module doesn't reload... That is because it needs some time to recompile pyc (up to 60 sec).I writing this hint just that you know if you have experienced this kind of problem.
2018-02-01module foo must be imported successfully in advance.  from importlib import reload, reload(foo) 31.5. importlib — The implementation of import — Python 3.6.4 documentation
Other option. See that Python default importlib.reload will just reimport the library passed as an argument. It won't reload the libraries that your lib import. If you changed a lot of files and have a somewhat complex package to import, you must do a deep reload. If you have IPython or Jupyter installed, you can use a function to deep reload all libs:If you don't have Jupyter, install it with this command in your shell:
for me for case of Abaqus it is the way it works.Imagine your file is Class_VerticesEdges.py
Another way could be to import the module in a function. This way when the function completes the module gets garbage collected. 
I got a lot of trouble trying to reload something inside Sublime Text, but finally I could wrote this utility to reload modules on Sublime Text based on the code sublime_plugin.py uses to reload modules.This below accepts you to reload modules from paths with spaces on their names, then later after reloading you can just import as you usually do.If you run for the first time, this should load the module, but if later you can again the method/function run_tests() it will reload the tests files. With Sublime Text (Python 3.3.6) this happens a lot because its interpreter never closes (unless you restart Sublime Text, i.e., the Python3.3 interpreter).


Answer URL
https://docs.python.org/3/library/imp.html#imp.reload
https://docs.python.org/3/library/imp.html
https://docs.python.org/3/library/importlib.html#importlib.reload
https://docs.python.org/3/library/importlib.html#importlib.reload
https://docs.python.org/3/library/importlib.html#importlib.reload
