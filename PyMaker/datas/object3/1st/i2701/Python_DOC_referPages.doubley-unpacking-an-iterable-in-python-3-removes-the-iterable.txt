Natural Text
Is this expected behaviour for unpacking? I would've assumed the original data wouldn't be modified on unpacking and a copy is simply made?EDIT:If so, what is the reasoning behind it?
From the glossary entry for iterators (my emphasis):A container object (such as a list) produces a fresh new iterator each time you pass it to the iter() function or use it in a for loop. Attempting this with an iterator will just return the same exhausted iterator object used in the previous iteration pass, making it appear like an empty container.
Yes, this is expected behavior for unpacking an iterator:The iterator can only be iterated once and then it is exhausted.The iterator protocol specifies that an exhausted iterator must continue raising StopIteration exceptions on subsequent calls of its __next__ method.  Therefore, iterating it once again is valid (not an error), but the iterator should yield no new items:Nothing prevents you to define an iterator which disobeys this rule, but such iterators are deemed "broken".The list iterable could be unpacked multiple times, however.And you could create as many independent iterators, from the same source list, as you want:
You are confusing the terminology of "iterator" and "iterable".An iterator (typically) can't be iterated over again. An iterable on the other hand (like a list) can:


Answer URL
https://docs.python.org/3/glossary.html#term-iterator
https://docs.python.org/3/library/stdtypes.html#iterator-types
