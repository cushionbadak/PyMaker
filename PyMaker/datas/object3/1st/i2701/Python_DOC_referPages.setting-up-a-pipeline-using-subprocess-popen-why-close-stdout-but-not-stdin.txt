Natural Text
The Python 3 documentation for subprocess.popen (1) presents the following sample code for pipelines:The p1.stdout.close() call after starting the p2 is important in order for p1 to receive a SIGPIPE if p2 exits before p1.Why is this necessary? Previous questions (Replacing Shell Pipeline, Under what condition does a Python subprocess get a SIGPIPE?, Explain example from python subprocess module) have answers stating that p1.stdout has multiple readers, which must all be closed to prevent p1's output pipe from closing.What is the relation between p2.stdin and p1.stdout, and do I have to close p2.stdin?
No, you do not have to close p2.stdin. In fact you can't, because it's None.This is because stdin=p1.stdout, while a Python stream object is only created if stdin=subprocess.PIPE. See subprocess Popen.stdin docs)I wrote a test program (Python 3) which terminates with BrokenPipeError if CLOSE_P1 = True, but spins forever?? if CLOSE_P1 = False:


Answer URL
https://docs.python.org/3/library/subprocess.html#replacing-shell-pipeline
https://docs.python.org/3/library/subprocess.html#subprocess.Popen.stdin
