Natural Text
I have had it up to here with Python's import system... thought I'd finally got something reliable and then the inexplicable happens!This is the directory structure of my application:I run all my tests through tests/run.py, which looks like the following (in an attempt to resolve all the import problems):This worked like an absolute charm, until I made one modification to the file /my-application/subpackage/my-module.py - I added a local function call. So e.g. my_module.py:UPDATE: THIS works fine:As soon as I added that local function call, the tests stop working, with the error No module named "subpackage".The test_my_module.py looks like this (basically):Note that in test_my_module.py I am using subpackage as the first part of my import statement, because I am using the run.py file that sets my-application as a system path. If I change the import to start with my_application I get the same error referring to my_application.py.I am still learning python, so suggest any change to my application structure you like. I can't believe the hassle of this import system - I do feel like I'm missing something basic here...Thank you in advance!
Managing import paths manually is difficult.A setup.py is the best way to manage python packages.  by convention package names should use _ not -.Create a setup.py with this content next to my_application/I recommend an application structure like the following:Install package locallypython setup.py developThis will symlink (magically) install your package into the python package pathNow in any scripts you can use paths as you'd expect e.g.  also recommend you use a virtualenvMore on setup.py here


Answer URL
https://docs.python.org/3/library/venv.html
