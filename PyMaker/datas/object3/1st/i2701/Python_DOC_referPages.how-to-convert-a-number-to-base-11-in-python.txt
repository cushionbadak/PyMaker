Natural Text
Python allows easy creation of an integer from a string of a given base via I want to perform the inverse: creation of a string from an integer, i.e. I want some function int2base(num, base), such that:The function name/argument order is unimportant. For any number x and base b that int() will accept.This is an easy function to write: in fact it's easier than describing it in this question. However, I feel like I must be missing something.  I know about the functions bin, oct, hex, but I cannot use them for a few reasons:Those functions are not available on older versions of Python, with which I need compatibility with (2.2) I want a general solution that can be called the same way for different basesI want to allow bases other than 2, 8, 16RelatedPython elegant inverse function of int(string, base)Integer to base-x system using recursion in pythonBase 62 conversion in PythonHow to convert an integer to the shortest url-safe string in Python?
If you need compatibility with ancient versions of Python, you can either use gmpy (which does include a fast, completely general int-to-string conversion function, and can be built for such ancient versions -- you may need to try older releases since the recent ones have not been tested for venerable Python and GMP releases, only somewhat recent ones), or, for less speed but more convenience, use Python code -- e.g., most simply:
ref:http://code.activestate.com/recipes/65212/Please be aware that this may lead to for very big integers.
Surprisingly, people were giving only solutions that convert to small bases (smaller then the length of the English alphabet). There was no attempt to give a solution which converts to any arbitrary base from 2 to infinity.So here is a super simple solution:so if you need to convert some super huge number to the base 577,numberToBase(67854 ** 15 - 102, 577), will give you a correct solution:[4, 473, 131, 96, 431, 285, 524, 486, 28, 23, 16, 82, 292, 538, 149, 25, 41, 483, 100, 517, 131, 28, 0, 435, 197, 264, 455],Which you can later convert to any base you want

Great answers!I guess the answer to my question was "no" I was not missing some obvious solution. Here is the function I will use that condenses the good ideas expressed in the answers.allow caller-supplied mapping of characters (allows base64 encode)checks for negative and zeromaps complex numbers into tuples of strings
Python doesn't have a built-in function for printing an integer in an arbitrary base. You'll have to write your own if you want to.
You could use baseconv.py from my project: https://github.com/semente/python-baseconvSample usage:There is some bultin converters as for example baseconv.base2, baseconv.base16 and baseconv.base64.
http://code.activestate.com/recipes/65212/Here's another one from the same link
I made a pip package for this.I recommend you use my bases.py https://github.com/kamijoutouma/bases.py which was inspired by bases.jsrefer to https://github.com/kamijoutouma/bases.py#known-basesalphabetsfor what bases are usableEDIT:pip link https://pypi.python.org/pypi/bases.py/0.2.2
RecursiveI would simplify the most voted answer to:With the same advice for RuntimeError: maximum recursion depth exceeded in cmp on very large integers and negative numbers. (You could usesys.setrecursionlimit(new_limit))IterativeTo avoid recursion problems:
output:"1F"

A recursive solution for those interested. Of course, this will not work with negative binary values. You would need to implement Two's Complement.
explanationIn any base every number is equal to a1+a2*base**2+a3*base**3... The "mission" is to find  all a 's.For everyN=1,2,3... the code is isolating the  aN*base**N by "mouduling" by b for b=base**(N+1)   which slice all a 's bigger than N, and slicing all the a 's that their serial is smaller than N by decreasing a everytime the func is called by the current aN*base**N .  Base%(base-1)==1 therefor base**p%(base-1)==1 and therefor q*base^p%(base-1)==q with only one exception when q=base-1 which returns 0.To fix that in case it returns 0 the func is checking is it 0 from the beggining.  advantagesin this sample theres only one multiplications (instead of division) and some moudulueses which relatively takes small amounts of time.

Another short one (and easier to understand imo):And with proper exception handling:
Another solution, works with base 2 to 10, needs modification for higher bases:Example:
Here is a recursive version that handles signed integers and custom digits.


Strings aren't the only choice for representing numbers: you can use a list of integers to represent the order of each digit. Those can easily be converted to a string.None of the answers reject base < 2; and most will run very slowly or crash with stack overflows for very large numbers (such as 56789 ** 43210). To avoid such failures, reduce quickly like this:Speedwise, n_to_base is comparable with str for large numbers (about 0.3s on my machine), but if you compare against hex you may be surprised (about 0.3ms on my machine, or 1000x faster). The reason is because the large integer is stored in memory in base 256 (bytes). Each byte can simply be converted to a two-character hex string. This alignment only happens for bases that are powers of two, which is why there are special cases for 2,8, and 16 (and base64, ascii, utf16, utf32).Consider the last digit of a decimal string. How does it relate to the sequence of bytes that forms its integer? Let's label the bytes s[i] with s[0] being the least significant (little endian). Then the last digit is sum([s[i]*(256**i) % 10 for i in range(n)]). Well, it happens that 256**i ends with a 6 for i > 0 (6*6=36) so that last digit is (s[0]*5 + sum(s)*6)%10. From this, you can see that the last digit depends on the sum of all the bytes. This nonlocal property is what makes converting to decimal harder.
I have not seen any converters of float here. And I missed the grouping for always three digits.TODO:-numbers in scientific expression (n.nnnnnn*10**(exp) -- the '10' is self.baseDigits[1::-1]/self.to_string(len (self.baseDigits))-from_string-function.-base 1 -> roman numbers?-repr of complex with aglesSo here is my solution:
output: to convert to any base, inverse is easy too.


Answer URL
https://docs.python.org/3/library/sys.html#sys.setrecursionlimit
