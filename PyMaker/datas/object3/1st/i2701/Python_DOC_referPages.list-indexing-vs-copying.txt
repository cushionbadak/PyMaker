Natural Text
I have a list named mylistWhat is the difference between newlist = mylistand newlist = mylist[:]it would seem that the latter is safer to use as it will not mutate mylist based on any manipulation of newlist`
The first only creates another name for the list. It is still the same list.This means mutating newlist also mutates mylist.The second example actually creates a copy of the list, an actual new list.You have little reason to have two names for the same object as this can be both confusing and lead to mutation bugs.A mutation bug is when some object is needed in some part of your code, say a function func1, but mutated beforehand by some other part of your code, say a function func2. If the object in its initial state was expected by func1, it can be very tedious to track down where the mutation happened.Example:In the above example, it would have been better to pass func2 a copy of obj. Since a lot happen between the first and last lines, it can be very tedious to track down the mutation bug.
The difference is: the first one creates (or rebinds) another name in the local namespace referencing the same mylist instance.  You can think of it as an alias. The second one creates a shallow copy of mylist.This line:is terrible Python.  Because that is not a "newlist" as the variable name is suggesting, it's just adding another name for the same list.This is acceptable:Whether that's preferable to taking a slice with mylist[:] or not depends entirely on context. Sometimes you want a copy, sometimes you want another reference to existing data.it would seem that the latter is safer to use as it will not mutate mylist based on any manipulation of newlistThat's not entirely true, since the slice is only a shallow copy.  The newlist could still be sharing state:Again, whether a shallow copy is sufficient or not depends on the data. If you use nested data and a shallow copy is not enough, or there are mutable elements that should be copied, you can look into using copy.deepcopy.


Answer URL
https://docs.python.org/3/library/copy.html
