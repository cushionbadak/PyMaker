Natural Text
I have a list:I want to iterate consecutive elements in the list such that, when it comes to last element i'e 8 it pairs with the first element 1.The final output I want is:I tried using this way:But I am getting only this result:How do I make a pair of last element with first? I have heard about the negative indexing property of a list.
You can simply extend the second list in zip() with a list with only the first item, something like:
You can use cycle to cycle the lists (in combination with islice to skip the first element):This is easily extensible. Note that it relies on the fact that zip halts on the shorter list (the second argument is an infinite cycle). It also does everything lazily and does not create any intermediate list (well, except for the printed list) :-)
You can also iterate through the indexes of L, and for the index of the second item of the output tuples, simply use the remainder of the length of L:
You can simply concatenate the list resulting from zip(L, L[1:]) with the pair formed by the last element L[-1] and first one L[0] and iterate over the resultIt gives the desired outcome. 
It's not a one-liner, but:
You can just append the front element(s) to the back.

You can simply use itertools.zip_longest with a fillvalue of the first item.
This is a version (over-)using itertools:The idea is to cycle over the second argument - that way zip runs until L itself is exhausted. This does not create any new lists.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.cycle
https://docs.python.org/3/library/itertools.html#itertools.islice
https://docs.python.org/3/library/itertools.html?highlight=itertools#itertools.cycle
