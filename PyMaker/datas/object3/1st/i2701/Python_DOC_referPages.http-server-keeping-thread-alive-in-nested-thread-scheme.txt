Natural Text
I have a little HTTPServer implementation I'm spinning up to listen for a callback from an API.  In testing, this implimentation is keeping the innermost thread alive.  Here's the server:So what the server implementation above does, is log information about requests in the ResquestLog:list and then provided a method GetRequestItem that can be used to pull for the existence of a logged request.  In the test I'm throwing and error and catching it with the handle_error() override.  Here is the calling function that spins up the server, polls for request, and then shutdowns the sever by setting its Server.Serve method to FalseThe above method sticks on the t1.join() call.  Inspecting the self.Httpd object when its hung tells me that the servers serve_forever() loop is shutdown but the thread still shows its a live when calling t1.is_alive().  So what's going on?  The only thing I can think of is that when self.shutdown() is called in the t1 thread it really yeilds the loop instead of shutting it down and keeps the tread alive?  Documentation on shutdown just says shutdown() : Tell the serve_forever() loop to stop and wait until it does. Nice and murky. Any ideas? Edit 1:the answer suggested at How to stop BaseHTTPServer.serve_forever() in a BaseHTTPRequestHandler subclass? is entirly different.  They're suggesting overriding all the native functionality of the socketserver.BaseServer.serve_forever() loop with a simpler implementation whereas I'm trying to correctly use the native implementation.  To the best of my understanding so far, the example of my working code above, should achieve the same thing that answer is suggesting, but the child thread isn't terminating.  Thus this question. 
I need OP to verify this, but the problem here is that http.server.HTTPServer is based on processes, not threads, and zombie process may be created. As a matter of fact, the forkingMixIn explicitly handles this issue:serve_forever(poll_interval=0.5)Handle requests until an explicit shutdown() request. Poll for shutdown every poll_interval seconds. Ignores the timeout attribute.  It also calls service_actions(), which may be used by a subclass or  mixin to provide actions specific to a given service. For example, the  ForkingMixIn class uses service_actions() to clean up zombie child  processes.This involves iterating all active_children, and calling the discard function. You can check the source code for socketserver.ForkingMixIn.collect_children (see bottom of post). The quickest solution may be to use ThreadingHTTPServer:class http.server.ThreadingHTTPServer(server_address,  RequestHandlerClass)This class is identical to HTTPServer but uses threads to handle requests by using the ThreadingMixIn. This is useful to handle web  browsers pre-opening sockets, on which HTTPServer would wait  indefinitely.In case you want to stick with the regular serverYou will need to create and handle active_children, and implement something similar to the method ForkingMixIn calls on service_actions:


Answer URL
https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.serve_forever
https://docs.python.org/3/library/http.server.html#http.server.ThreadingHTTPServer
