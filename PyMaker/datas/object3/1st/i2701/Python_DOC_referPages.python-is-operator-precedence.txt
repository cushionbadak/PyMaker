Natural Text
In Python3,returns False, butreturns True. So I would assume based on this example alone, == has precedence over is.However,returns True. Andreturns True. Butreturns False. In this case, it would seem as if is has precedence over ==.To give another example, and this expression isn't meant to do anything, but bear with me please. If I sayit returns True. But both of the following return False.So clearly, Python isn't evaluating these with some strict precedence, but I'm confused what is going on. How is it evaluating this expression with 2 different operators, but differently from either order?
What you see here is operator chaining and there is no precedence involved at all!Python supports expressions likeTo test that a number is in between 1 and 3; it's equal to (1 < a) and (a < 3) except that a is only evaluated once.Unfortunately that also means that e.g.actually meanswhich is of course True, and the longer example you started withmeanswhich can only be True if both a and b are None.Documentation here, see the bit about chaining.Very useful sometimes but it also pops up when you least expect it!
According to the documentation, all python comparisons operators has same priority:There are eight comparison operations in Python. They all have the  same priority (which is higher than that of the Boolean operations).However by wrapping comparisons with the brackets, they start to be the atoms expressions, so statements in brackets evaluated before statements outside, that impacts the order of the evalutation, I will decompose the first "contradictional" case, the all others is similar:Per documentation the priority is the same, so evaluation is next:Please see order for the second case below:


Answer URL
https://docs.python.org/3/reference/expressions.html#comparisons
https://docs.python.org/3/library/stdtypes.html#comparisons
https://docs.python.org/3/reference/expressions.html#atoms
