Natural Text
I am working in Python 3.4, and I have behavior that I don't understand: if I redirect stdout to a file, I am able to capture text from child processes. However, when I redirect to a Python file object, I stop capturing that output. I would love an explanation of the (following) behavior.I have:The redirect_stdout context manager in Python 3.4 makes grabbing stdout easy (in this instance).I can then simply call the script to get the following output:This is exactly what I want, and works fine.My confusion stems from the fact that if I if I switch TemporaryFile with TextIOWrapper, the behavior of my script changes.Now when I call the program, I lose the output from the forked process.What is going on?I suspect the problem has to do with the fact that the TextIOWrapper object doesn't have a file descriptor, and that os.fork() (used by multiprocessing) may thus be replacing the TextIOWrapper with another, but I admit some confusion there (especially given that stdout appears to be a TextIOWrapper with fileno() implemented).Thanks for any information.
Since you're using multiprocessing, you should use the standard message passing primitives provided by that library.  Do not call print() from the subprocess; that's poor design.If you're actually trying to make this work with someone else's (non-Python) code, use subprocess.check_output() or another of the subprocess functions instead.


Answer URL
https://docs.python.org/3/library/subprocess.html#subprocess.check_output
