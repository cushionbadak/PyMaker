Natural Text
I happened to stumble across this question Python - intersection between a list and keys of a dictionary , and unfortunately did not have the required reputation to ask:Why does this work?
The result of d1.keys() is a set like view.Keys views are set-like since their entries are unique and hashable. If all values are hashable, so that (key, value) pairs are unique and hashable, then the items view is also set-like. (Values views are not treated as set-like since the entries are generally not unique.) For set-like views, all of the operations defined for the abstract base class collections.abc.Set are available (for example, ==, <, or ^).From https://docs.python.org/3/library/stdtypes.html#dictionary-view-objectsThe second argument to & is only required to be an iterable of hashable objects (although this is not stated in the documentation).See https://docs.python.org/3/library/stdtypes.html#set.intersection
It works because you are using Python 3. d1.keys() returns a list (Python 2) or an object of type <class dict_keys>. (Python 3), and l1 is a list. In the Python 2 case the final statement gives TypeError: unsupported operand type(s) for &: 'list' and 'list'. In Python 3 the dict_keys object is an iterable view, which apparently does have some sort of implementation of the __and__() method used to implement the & operation.
it works in python3 (3.4.3 at least) because dict#keys returns and instance of dict_keys, which apparently implements (parts of?) the set interface.  and the set type has implementations of some infix integer operators with different (but similar) meanings.


Answer URL
https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
https://docs.python.org/3/library/stdtypes.html#set.intersection
