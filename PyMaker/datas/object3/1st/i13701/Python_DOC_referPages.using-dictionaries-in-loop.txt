Natural Text
I am trying to write a code that replicates greedy algorithm and for that I need to make sure that my calculations use the highest value possible. Potential values are presented in a dictionary and my goal is to use largest value first and then move on to lower values. However since dictionary values are not sequenced, in for loop I am getting unorganized sequences. For example, out put of below code would start from 25. How can I make sure that my code is using a dictionary yet following the sequence of (500,100,25,10,5)? 
Two ideas spring to mind:Use collections.OrderedDict, a dictionary subclass which remembers the order in which items are added. As long as you add the pairs in descending value order, looping over this dict will return them in the right order.If you can't be sure the items will be added to the dict in the right order, you could construct them by sorting:Get the values of the dictionary with values()Sort by (ascending) value: this is sorted(), and Python will default to sorting in ascending orderGet them by descending value instead: this is reverse=TrueHere's an example:
Dictionaries yield their keys when you iterate them normally, but you can use the items() view to get tuples of the key and value. That'll be un-ordered, but you can then use sorted() on the "one-th" element of the tuples (the value) with reverse set to True:I'm guessing that you do actually need the keys, but if not, you can just use values() instead of items(): sorted(a.values(), reverse=True)
You can use this
Output:


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
