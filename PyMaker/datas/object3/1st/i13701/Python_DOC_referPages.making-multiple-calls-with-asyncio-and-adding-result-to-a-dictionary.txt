Natural Text
I am having trouble wrapping my ahead around Python 3's Asyncio library. I have a list of zipcodes and I am trying to make async calls to an API to get each zipcodes corresponding city and state. I can do it successfully in sequence with a for loop but I want to make it faster in the case of a big zipcode list.This is an example of my original that worksThis is my terrible non-functional attempt at trying to make it asyncAny help is much appreciated. All of the tutorials I've come across online seem to be a tad over my head.Note: I've seen some examples use aiohttp. I was hoping to stick with the native Python 3 libraries if possible.
You're not going to be able to get any concurrency if you use urllib to do the HTTP request, because it's a synchronous library. Wrapping the function that calls into urllib in a coroutine doesn't change that. You have to use an asynchronous HTTP client that's integrated into asyncio, like aiohttp:I know you prefer to only use the stdlib, but the asyncio library doesn't include an HTTP client, so you'd have to basically re-implement pieces of aiohttp to recreate the functionality its providing. I suppose another option would be to make the urllib calls in a background thread, so that they don't block the event loop, but its kind of silly to do when aiohttp is available (and sort of defeats the purpose of using asyncio in the first place):
Not done much with asyncio but asyncio.get_event_loop() should be  what you need, you also obviously have to change what your function takes as arguments and use asyncio.wait(tasks) as per the docs:I don't have >= 3.4.4 so I had to use asyncio.async instead of asyncio.ensure_futureOr change the logic and create the dict from  task.result from the tasks:If you are looking at outside modules there is also a port of requests that works with asyncio.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#example-parallel-execution-of-tasks
