Natural Text
Consider the following lines And then,while,Why type(x) and x.type give two different pieces of information ? What information is conveyed by them ?I also see that referring to Theano tutorial ,Why type(x) output is different in my case ? Are these caused by version specific implementation differences and what is signified by this difference ?
theano.tensor has an attribute type which you are looking at when you sayThis is analagous to numpy objects dtype attribute that many of their objects carry (if you are familiar with that library).On the other hand type is a Python function that looks at the actual type of the object you pass in, which for type(x) is indeed a So long story short, you are comparing an attribute to the actual object type.
type(x) is a builtin.x.type is an attribute that's defined in your object.They are completely seperate, type(x) returns what type of object x is and x.type does whatever the object wants it to. In this case, it returns some information on the type of object it is
As others have mentioned, type(x) is Python's builtin function that returns the type of the object.  It has nothing to do with Theano per se.  This builtin function can be applied to any Python object (and everything in Python is an object).  For example,type(1) is int,type(True) is bool,type(lambda x: x * x) is function, etc.Interestingly, you can call type on type itself (everything, including type, is an object) - type(type) is type.Incidentally, type(T.dscalar) is TensorType (theano.tensor.type.TensorType to be precise).x.type, as others have mentioned, is an attribute of the object x.  It points back to type(T.dscalar).  x.type returns TensorType(float64, scalar) - this not only shows you the type of T.dscalar, it also tells you that x is scalar and it is 64-bit float.Other examples of the type attribute:


Answer URL
https://docs.python.org/3/library/functions.html#type
