Natural Text
Overall Goal: I am trying to read some progress data from a python exe to update the progress of the exe in another applicationI have a python exe that is going to do some stuff, I want to be able to communicate the progress to another program. Based on several other Q&A here I have been able to have my running application send progress data to a named pipe using the following codeIn short the example code writes the path of the each file that was globbed to the NamedPipe - this is useful and can be easily extended to more logging type events.  However, the problem is trying to figure out how to read the content of the named pipe without knowing the size of each possible message.  For example the first file could be named J:\someDirectory\a.htm, but the second could have 300 characters in the name.So far the code I am using to read the contents of the pipe requires that I specify a buffer sizeFirst establish the connectionand then I have been playing around with reading from the fileThis generally works but I really want to read until I hit a newline character, do something with the content between when I started reading and the newline character and then repeat the process until I get to a line that has Process Complete in the lineI have been struggling with how to read only until I find a newline character (\n).  I basically want to read the file by lines and based on the content of the line do something (either display the line or shift the application focus).Based on the suggestion provided by @meuh I am updating this because I think there is a dearth of examples, guidance in how to use pipesMy server code  The Client code  
I don't have windows but looking through the api it seems you should convertyour client to message mode by adding after the CreateFile() the call:then each sufficiently long read will return a single message, ie what the other wrote in a single write.  You already set PIPE_TYPE_MESSAGE when you created the pipe.
You could simply use an implementation of io.IOBase that would wrap the NamedPipe.BEWARE : untested, but it should work after fixing the eventual typos.You could then do:
You could use the msvcrt module and open to turn the pipe into a file object.Sending codeReceiving codeSome notes. I've only tested this with python 3.4, but I believe you may be using python 2.x.Python seems to get weird if you try to close both the file object and the pipe..., so I've only used the file object (by using the with block)I've only created the file objects to read on one end and write on the other. You can of course make the file objects duplex by Creating the file descriptors (read_fd and write_fd) with the os.O_RDWR flagCreating the file objects in in "r+" mode rather than "r" or "w"Going back to creating the pipe with the win32pipe.PIPE_ACCESS_DUPLEX flagGoing back to creating the file handle object with the win32file.GENERIC_READ | win32file.GENERIC_WRITE flags.


Answer URL
https://docs.python.org/3/library/msvcrt.html
