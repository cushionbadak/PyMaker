Natural Text
I recently discovered the trystatement (I'm pretty new) and I know about except, but I have some questions:1) How do I use finally?2) Can you have multiple excepts with different errors? Could you give me some examples of this? 
Answer is yes to everything you ask.Output: That's it in short. To get full explanations you best see a tutorial, there's easily million of them online. Some general rules I like to hold to when doing this is:surround the shortest snippet of code you can with the try block. This helps isolate exactly where the error originated.keep your excepts as specific as possible. Try not to catch a generic except as I shown bellow. It's useful sometimes, but so rarely so you should probably try to never do it.finally is always executed. Finally always happens, if an error occurred, if it didn't, if you caught it or if you didn't, finally will always execute. Use it to create a clean exit for your code. Close all open files here, save all data structures you might have and tie all loose ends. We already saw how finally behaves when you encounter an error you don't have an except for above, here's an example when you raise an error that you have an except for: Finally will happen even if you don't encounter an error:There's a couple of ways you can catch any error (try to avoid this, always):or you could doAdditionally try except blocks can have an else statement.Imagine, for a second, a situation where you would want to run some additional code appart from the raise statement. Imagine that code could throw an error too. To put that code inside the same try block would then break my 1st point and that's not how we should do things! To get around that with what I showed so far would look something like:I believe you'll agree that it's ugly and less readable than what python normally strives for. That's why there's an added else statement you can have in your try except block.else statement must follow all excepts and will only ever execute if there was no error raised. To be really technical, it will only execute "if it flows off the try statement". That means that there must be no returns, breaks, continues and such statements that cause a "jump". else also makes your code neater and more powerful, however I've rarely used it or seen it been used:


Answer URL
https://docs.python.org/3/tutorial/errors.html
