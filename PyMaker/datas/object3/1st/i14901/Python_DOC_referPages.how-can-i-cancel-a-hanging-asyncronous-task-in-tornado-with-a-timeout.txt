Natural Text
My setup is python tornado server, which asynchronously processes tasks with a ThreadPoolExecutor. In some conditions, the task might turn into infinite loop. With the with_timeout decorator, I have managed to catch the timeout exception and return an error result to the client. The problem is that the task is still running in the background. How it is possible to stop the task from running in the ThreadPoolExecutor? Or is it possible to cancel the Future?Here is the code that reproduces the problem. Run the code with tornado 4 and concurrent.futures libraries and go to http://localhost:8888/test
Future instances themselves can't be cancelled once they're actually executing, they can only be cancelled if they're in a pending state. This is noted in the docs:cancel()Attempt to cancel the call. If the call is currently being executed and cannot be cancelled then the method will return False,  otherwise the call will be cancelled and the method will return True.So, the only way to abort the method you're running in the background is to actually insert logic into your potentially infinite loop so that it can be aborted when you tell it to. With your example, you could use a threading.Event:


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future.cancel
