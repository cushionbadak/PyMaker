Natural Text
I'm looking to strip the white-space from each of the arguments in a function that takes a bunch of required strings.  And I don't want to use **kwargs which defeats the purpose of the required arguments.OutputDesired output for the original 'a' argument:Being a newb, I cobbled this together and then read the python documentation which clearly states.locals()  Update and return a dictionary representing the current local symbol table. Free variables are returned by locals() when it is  called in function blocks, but not in class blocks.Note  The contents of this dictionary should not be modified; changes may not affect the values of local and free variables used by the  interpreter.What is the right way to do what I'm attempting here?
You can use a decorator to do that kind of task.The idea is to mask the real function behind a decorator that will take generic arguments, do modifications "on them" (actually create new variables containing the modifications) and pass the modified arguments to the real function.Then you'd get
I would start by changing your definition to def func(**kwargs).  This takes whatever keyword arguments you provide and adds them to a dictionary.  For example:As you can see, it works with no arguments as well (nothing to print).  From there, have a look at the string method strip.EDIT:You're giving some pretty arbitrary restrictions.  So, what you want is:...a specific number of arguments with specific names....to loop over the arguments....perform some work on each one.The fastest way to do what you want is with locals() I think.  I'm guessing what you're balking at is the bit about the contents of the dictionary not being modified.  This isn't a concern here, as you're looping over a list of tuples representing the keys and values from the locals dictionary.  When you do for argument, argument_value in ____ you are unpacking the tuples and assigning one value to each of those names.  When you then do argument_value = 'blahblah' you are assigning a new string to argument_value.  Strings are immutable, so you can't change the value "in placed".  You aren't changing the value in the dictionary, as you haven't assigned anything to the dictionary's key. 


Answer URL
https://docs.python.org/3/library/functions.html#locals
