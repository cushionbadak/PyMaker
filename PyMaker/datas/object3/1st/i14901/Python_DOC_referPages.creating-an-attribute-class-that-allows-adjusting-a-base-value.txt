Natural Text
I want to create an Attribute class so I can do stuff like:Now when I doIt actually doesn't change the real value, but it keeps health's base value at 100, while giving it an adjustment of +10.Here's what I tried, but it works using healt.get() and health.set() which is not wanted:But I  want to be able to do this:Is this possible?
Below are four approaches that might meet your needs.DescriptorsDescriptors allow you to provide direct attribute access while hiding the underlying implementation.Output:The problem with this approach is that you have no easy way to access the internals of the descriptor.  So in this case, you can't ever inspect the adjustments list.  You can, however, directly assign c1.health = X to it as if it were a normal attribute.Note: As noted by Veedrac in the comments, these attributes are defined at the class level and will be shared between all instances of the Creature class.  For this reason alone it's not a solution whatsoever, but it wasn't a great solution in any case.Normal Tracker ObjectsYou can use a class that implements the "augmented assignment" magic methods __iadd__() and __isub__()Output:The problem with this approach is that you can't directly assign to the attribute without overriding it.  In other words, c1.health = X will override the value of the health attribute to be equal to X -- you lose whatever was there previously.But with this approach, you can access the adjustments list:  print c1.health.adjustmentsNote that c1.health is an instance of AdjustmentTracker, not a numeric type like you may expect (try print c1.health).  You have a number of ways to access/extract the numeric value, in the example I use the int(c1.health) type conversion (possible since I implemented __int__).Descriptor + Tracker ObjectUsing a combination of the two above methods, you can use all of the syntax you listed.Output:Here, the descriptors aren't keeping track of the base and adjustment list themselves, rather you're using them as a proxy to interface with AdjustmentTracker obejcts.  With this you can do both direct assignment (e.g. c1.health = 60) and access the underlying initial base / adjustments (e.g. c1._health.adjustments).Properties + Tracker ObjectsJust as in the previous example, we use AdjustmentTracker objects to hold the state of the attributes.  But in this example, instead of using an explicit descriptors, you can use properties to shield the attribute.Output:This example is basically the same as the previous one, just less lines of code since it makes use of properties, and functions exactly the same.
Check out propertieshttps://docs.python.org/3/library/functions.html#propertyIn the example below a property is being used as a decorator.Every time the health attribute is retrieved the getter function (the function marked with the property decorator) is called. Similarly when the health attribute is set the setter function (the function marked with the health.setter decorator) is called.outputs


Answer URL
https://docs.python.org/3/library/functions.html#property
