Natural Text
This is similar to Calling coroutines in asyncio.Protocol.data_received but I think it warrants a new question.I have a simple server set up like thisIt works fine, if I do thismy client gets the reply. But I can't get it to work with any sort of asyncio call. I tried all of the following and none of them worked.that one hung and printed nothing (if I decorated data_received with @asyncio.coroutine I get that that is not yielded from) OK, I get that using yield in data_received isn't right.If I try a new event loop, as below, that hangs in run_until_completeIf I use a Future, that also hangs in run_until_completeThe following gets close, but it returns immediately and the result is of type asyncio.coroutines.CoroWrapper, implying that the wait_for line returned immediately with the unfinished task?I'm a bit stuck really, and would appreciate some pointers about what to look at.
You need to add your coroutine to the event loop, and then use Future.add_done_callback to handle the result when the coroutine completes:Calling a coroutine directly in data_received just simply isn't allowed, since the caller isn't going to try to yield from it, and creating/running a new event loop inside of data_received will always end up blocking the main event loop until the inner event loop finishes its work.You just want to schedule some work with your main event loop (asyncio.async/loop.create_task()), and schedule a callback to run when the work is done (add_done_callback).


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.Future.add_done_callback
https://docs.python.org/3/library/asyncio-protocol.html#coroutines-and-protocols
