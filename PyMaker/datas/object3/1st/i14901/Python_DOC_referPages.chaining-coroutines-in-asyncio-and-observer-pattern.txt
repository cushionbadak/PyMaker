Natural Text
I'm having trouble wrapping my head around how coroutines are chained together. In a slightly less trivial example than hello world or factorials, I'd like to have a loop which continually watches file modification times, and then prints out the time whenever the file is touched:I would expect this to work - however, when I run it I get a:What am i doing wrong here?UPDATE: see my answer below for an example of the observer pattern (i.e. efficiently allow multiple registrants to get updates when a file gets touched) without using callbacks (you have to use Tasks).UPDATE2: there is a better fix for this: 3.5's async for (asynchronous iterators): https://www.python.org/dev/peps/pep-0492/
I got your code working by using return instead of yield in the chained coroutine, just like the chained coroutines example:Note that printer()'s loop will create a new pathmonitor generator for each iteration. Not sure if this is what you had in mind but it might be a start.I find the coroutines API and syntax a bit confusing myself. Here's some reading that I have found helpful:Whatâ€™s New In Python 3.3: "PEP 380: Syntax for Delegating to a Subgenerator"PEP380: "Formal semantics"asyncio: "Example: Chain coroutines"Greg Ewing's "Binary Tree" example
As others pointed out, my mistake was that I was trying to use a coroutine like a generator. Instead of relying on a generator for iteration, I needed to create multiple coroutines. Also, I needed to use tasks to implement the observer pattern without callbacks since multiple registrants can yield from the same task. My pathmonitor looks something like this:


Answer URL
https://docs.python.org/3/library/asyncio-task.html#example-chain-coroutines
https://docs.python.org/3/whatsnew/3.3.html#pep-380
https://docs.python.org/3/library/asyncio-task.html#example-chain-coroutines
