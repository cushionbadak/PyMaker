Natural Text
I recently started playing with The Python Challenge. While fairly convoluted, the required coding isn't very hard, which makes leaning many useful modules quite interesting.My question is about level 17. I understand the idea of following the clues as was needed in level 4, while collecting the cookies, which is what I did. However, I cannot BZ2-decompress the string that I get.I tried Googling, and I found a nice blog with the solutions in Python 2. Specifically, the one for the level 17 is here. Analysing that one, I realized that I indeed get the compressed string (from the cookies) right and it decompresses properly in Python 2:However, bz2.decompress in Python 3 requires a byte array instead of a string, but the obvious Python 3 counterpart of the above line:fails with OSError: Invalid data stream. I tried all the standard encodings and some variants of the above, but to no avail.Here is my (non-working) solution so far:So, my question is: what would a Python 3 solution to the above problem look like and why doesn't mine work as expected?I am well aware that parts of this can be done more nicely. I was going for a quick and dirty solution, so my interest here is only that it works (and why not the way I did it above).
You need to use the urllib.parse.unquote_to_bytes() function here. It does not support the + to space mapping, but that is trivially worked around with str.replace():This then decompresses nicely. You can decode the resulting uncompressed string as ASCII:Demo using a different message I prepared to not give away the puzzle:Alternatively, tell urllib.unquote_plus() to use the Latin-1 encoding instead of UTF-8. The default error handler for unquote_plus() is set to 'replace', so you never notice that the original data can't be decoded as UTF-8 and thus has bytes replaced with the U+FFFD REPLACEMENT CHARACTER, which is what causes decompression to fail. Latin-1 maps all bytes one-on-oe directly to the first 256 Unicode characters, so you can encode back to the original bytes:


Answer URL
https://docs.python.org/3/library/codecs.html#standard-encodings
https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote_to_bytes
