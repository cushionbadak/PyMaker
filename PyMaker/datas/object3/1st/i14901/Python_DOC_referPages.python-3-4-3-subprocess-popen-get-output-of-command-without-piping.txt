Natural Text
I am trying to assign the output of a command to a variable without the command thinking that it is being piped. The reason for this is that the command in question gives unformatted text as output if it is being piped, but it gives color formatted text if it is being run from the terminal. I need to get this color formatted text.So far I've tried a few things. I've tried Popen like so:This will let me print the output, but it gives me the unformatted output that I get when the command is piped. That makes sense, as I'm piping it here in the Python code. But I am curious if there is a way to assign the output of this command, directly to a variable, without the command running the piped version of itself.I have also tried the following version that relies on check_output instead:And again I get the same unformatted output that the command returns when the command is piped.Is there a way to get the formatted output, the output the command would normally give from the terminal, when it is not being piped?
Using pexpect:2.py:subprocess:pexpect:Here it is with grep --colour=auto:
Yes, you can use the pty module. With pty:Note from the docs:Because pseudo-terminal handling is highly platform dependent, there  is code to do it only for Linux. (The Linux code is supposed to work  on other platforms, but hasnâ€™t been tested yet.)A less than beautiful way of reading the whole output to the end in one go:Edit: nicer way of getting the content at once thanks to @Antti Haapala:Edit: people are right to point out that this will deadlock if the process generates a large output, so @Antti Haapala's answer is better.
A working polyglot example (works the same for Python 2 and Python 3), using pty.
Many programs automatically turn off colour printing codes when they detect they are not connected directly to a terminal. Many programs will have a flag so you can force colour output. You could add this flag to your process call. For example:Be warned though. The actual colour output is done by the terminal. The terminal interprets special character espace codes and changes the text colour and background color accordingly. Without the terminal to interpret the colour codes you will just see the text in black with these escape codes interspersed throughout. 


Answer URL
https://docs.python.org/3/library/pty.html
