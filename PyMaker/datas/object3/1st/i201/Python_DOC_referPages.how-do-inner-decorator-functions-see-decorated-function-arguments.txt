Natural Text
This question already has an answer here:How to make a chain of function decorators?                    17 answers                I'm trying to conquer one of the final basic python features that I've avoided using since I started: decorators. I'm not grocking it like i did with list-comps, and I do not understand how an inner function within a decorator declaration works.Here's an example of what I mean. Given this chunk-o-code:I understand that this this will printbut what I don't understand is how inner obtains any *args or **kwargs from decorated()My understanding is thatis equivalent to outter(decorated("Bob")). If this is the case, how would inner() be able to access the name argument? Syntax issues aside, I'd expect the declaration for inner to look like def inner(func.args, func.kwargs):What's going on here? What am I misunderstanding?
My understanding is thatis equivalent to outter(decorated("Bob")).That’s wrong. It’s equivalent to outter(decorated)("Bob"). decorated is replaced with the return value of outer(decorated) (which is inner). When you call decorated, you’re actually calling inner.You can check that interactively:


Answer URL
https://docs.python.org/3/library/functools.html#functools.wraps
