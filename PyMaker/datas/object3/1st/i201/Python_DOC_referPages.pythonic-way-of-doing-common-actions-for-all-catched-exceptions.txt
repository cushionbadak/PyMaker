Natural Text
If I have the following structure:What is the most Pythonic way to call handle_all_exceptions if I don't want to do it in every except clause because I have lots of them? Maybe there is a simple way to determine if the exception occured or not inside finally clause?
Simplest way I can think is nesting try statements:The bare raise reraises the exception.Another option is to catch all exceptions and do your own dispatching instead of using the try statement for that:
I think you could also check for the types of the Exceptions. However, I don't know if this is the most pythonic way:EDIT: Looking at the documentation, it seems there isn't a most pythonic way. How you deal with the different types of exceptions inside your function handle_all_exceptions() is up to you. See the doc.As you don't want to check for instances or similiar, here is another possible way of implementation. Although the list implementation is definitly not nice, it solves the problem without nested try-statements. You can also use boolean statements or similiar, however with the list, you still have access to the error object for further handling.
You could first define a mapping associating handling function with corresponding exception:Then you could accept the raised exception as an argument of the handle_all_exceptions function, and add it the specific handling using the handling mapping and the type of the raised exception.Doing it you could handle you exception in a simple manner:
I found some tricky solution without type , isinstance and lots of raise in every except clause. Maybe it is not the most Pythonic, but it is interesting at least:


Answer URL
https://docs.python.org/3/tutorial/errors.html
