Natural Text
Say I have the following abstract class Foo:What should I put in the body of the bar method? I see a lot of code that has raise NotImplementedError, as shown above. However, this seems redundant, since any subclass that does not implement bar will raise the TypeError: Can't instantiate abstract class Foo with abstract methods bar when it is instantiated.Is it Pythonic to leave bar empty, as follows:This is what is done in the Python docs for Abstract Base Classes, but I'm not sure if that's just a placeholder or an actual example of how to write code.If it's ok to leave bar with only three dots (...), when should I use NotImplementedError?
The documentation does aim to give you an example. You don't have to follow it.You could provide a default; subclasses are still free to use super() to call your implementation. This is what most of the collections.abc classes do; see the source code.Size for example, returns 0 for __len__:


Answer URL
https://docs.python.org/3/library/abc.html#abc.abstractmethod
