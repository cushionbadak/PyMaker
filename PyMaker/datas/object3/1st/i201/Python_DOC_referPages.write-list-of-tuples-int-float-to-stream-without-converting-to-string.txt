Natural Text
I have a list in Python that consists of tuples that have the following format: (int, float). I want to write this list to a io byte or io raw stream without having to convert the ints and/or floats to a string. How can I do this? Thanks.
There are many formats which can be used to serialize Python objects into bytes. There are pros and cons for each of them.If the data has only a list of tuples of integers and flaots, that make the job rather simple.Let's assume, this is the data:Which of them falls into the category of "strings" is not clear to me. The most obvious "string" format would be str(data). How big is it?This takes up 5500 bytes. The question asks for something more compressed. So, we're looking for something much shorter than 5500 bytes.JSON is a very popular format (it is also a string). How big is it?This has the same size (5500 bytes), but at least it is well defined. Can it be smaller? How about a BZipped JSON?That is much better!This was probably very good because of a repeating pattern. Is there a format which does not use zipping? Maybe pickle?Not as good as zip (of course!), but still good.Could we make a BZipped pickle?Better, but there is no reason for it to be better than BZipped JSON.How about some other format? You could convert each tuple to the equivalent of this C structure, using the struct module:However, then you'd have to know how big the int can be. Python int can be as big aas you want, but if you e.g. know that all numbers are between 0 and 255, you just need one byte. For the float, you need 64 bits (i.e. 8 bytes), or you lose precision. So, this will go up to about 1000 bytes. Not very good.There are also other built-in options documented in Python's documentation on Persistence.You can also invent your own format.In the end, you have to decide what suits you best.
You can dump integers and floats into bytes directly really easily using the struct module. As an aside the string I use as the first argument to the pack function is a format identifier that tells you what type and size of each number, in this case l is a long signed int, d is a float double. 


Answer URL
https://docs.python.org/3/library/struct.html
https://docs.python.org/3/library/persistence.html
https://docs.python.org/3/library/struct.html
