Natural Text
To start off, because I've been burned before by someone with a power trip, this question is not for homework.Anyway, I have a text file that is something like the following:I would like to replace the string "1.0" in the 2 lines:However, NOT the "1.0" string in the lines:The current code that I'm using is:However the result is that all occurrences of "1.0" get replaced. Then I have to go back into the file, and correct the bug. The resultant file that I would like to get is:How can I get that? I couldn't find an example solution to this type of issue. Thank you all for your help.EDIT: My fault for not clarifying, but the string I want to replace isn't always "1.0", nor always 3 characters long. It could be "-12.3", for example. I would like to make the code as generic as possible.I also tried using rsplit to isolate the first string using space as a delimiter, but that doesn't seem to work for file writing.========================EDIT2: I found a way to do this, though it seems to be quite a round-about method:Basically, it would open the file, read line by line for the whole line that contains the specific string I want, then just store it into memory. Then open the file again, read everything, and just replace that whole string. Then open the file, and write the file.It does what I want, but is there a way to simplify the code?
Just use Instead of the above shortcut, you can try a more generalized case by defining an empty list first :li = []and then use the code below ( considering the string abc is fixed as in your above case ) :
As I mentioned in a comment, you can use regular expressions to match a pattern you're looking for.  You can specify groups in the pattern (using (...) or (?P<name...)) to identify parts of the pattern and specifically replace or reuse those parts.Something like this should work:A different (untested) approach that doesn't use regular expressions:Note that this isn't quite the same as the regular expression (RE) approach (notable differences are that it will accept any floating-point number as the first token (e.g. 1e-10) and that it won't preserve spaces after performing the replacement), but it might be a bit easier to understand if you're unfamiliar with REs.


Answer URL
https://docs.python.org/3/library/re.html
https://docs.python.org/3/howto/regex.html
