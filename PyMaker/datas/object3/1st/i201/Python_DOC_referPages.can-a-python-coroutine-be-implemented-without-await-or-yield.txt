Natural Text
I'm learning Python await / async syntax and wondering how coroutine can be implemented without async, await or yield. For example, I made this simple three seconds timer with async def syntax:The result:I noticed that we can implement a Coroutine object by implementing __await__ (https://docs.python.org/3.6/reference/datamodel.html#awaitable-objects). So I can successfully remove await.Finally, I want to implement the iterator without yield like that:But it didn't work. It stops after it shows '1'.I know this doesn't have any practical value, but I want to know it to understand asyncio correctly. Can I implement a Coroutine without await or yield? If so how to do it? I tested it by Python 3.6.7.
While coroutines are implemented using generators, coroutines are not generators:And it is intentional since generator is nothing more than a detail of implementation towards coroutine. Same true for iterators: coroutines are not iterators.loop.run_until_complete expects to recieve something awaitable like asyncio coroutine or future. You're trying to pass iterator - a different object with a different behavior.Long story short, if you want to implement coroutine compatible with asyncio:define functions with async defor implement __await__ magic methodAnd read asyncio doc for examples.If you want to understand general idea behind how coroutines work on very low-level you can follow this excellent video where David Beazley implements coroutine and event loop from scratch.


Answer URL
https://docs.python.org/3/library/asyncio.html
