Natural Text
In Python 3.7     int(x-1) == x is   True  for x = 5e+17Why is this so and how do I prevent this bug?To reproduce, paste this into your Python console:(I am using int because x is the result of a division and I need to parse it as int.)
Let's start by establishing that 5 == 5.0 is True even though 5 is an int and 5.0 is a float. This is by design.If we keep that in mind, then we can also accept that int(5e+17) == 5e+17 is True.Finally, we see that int(5e+17) == int(5e+17-1) is also True because of precision errors (Thanks @juanpa.arrivillaga for the link). Now it is clear why int(5e+17-1) == 5e+17 is True.This can be solved by using Decimal but be sure to initialize it with a string:
Python float is stored as a double-precision floating point number.  They only have 53 bits of precision, so integers larger than 253 stored as floats begin to lose precision.  Here's a clear example of how large numbers begin to lose precision:The above number is approximately 9e+15, so your 1e+17 number is well into loss of precision.  You have to add/subtract 16 from floats that large to expect a change in stored value:Python has functions to convert to and from an exact binary floating point value.  The 1 before and 13 hexadecimal digits after the decimal indicate the 53-bit value:Adding one to the 53-bit value:
5e+17 is a floating point literal not an integer literal.In CPython, float type is a double precision float which is 64-bit IEEE 754 in most current CPUs. This means you only have 53 bits to represent the digits (about 16 decimal digits). Extra digits will be lost. For example:While:OTH, you can use integers; While 64-bit integers can only represent about 19 decimal digits, Python will automatically create unlimited precision integer objects instead of machine-size integers when required.Since you want to process the result as int, you can convert it to an integer after the division  before further processing to preserve precision:


Answer URL
https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex
https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-floatnumber
https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex
