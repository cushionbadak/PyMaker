Natural Text
I did some google searching on how to check if a string has any elements of a list in it and I found this bit of code that works:if any(i in string for i in list):I know this works, but I don't really know why.  Could you share some insight?
As the docs for any say:Return True if any element of the iterable is true. If the iterable is empty, return False. Equivalent to:So, this is equivalent to:â€¦ which is itself effectively equivalent to:If you don't understand the last part, first read the tutorial section on list comprehensions, then skip ahead to iterators, generators, and generator expressions.If you want to really break it down, you can do this:That still isn't exactly the same, because a generator expression builds a generator, not a list, but it should be enough to get you going until you read the tutorial sections.But meanwhile, the point of having any and comprehensions and so on is that you can almost read them as plain English:
This produces an iterable of booleans indicating whether each item in list is in string. Then you check whether any item in this iterable of bools is true.In effect, you're checking whether any of the items in the list are substrings of string.
What's going on here with:is best explained by illustrating:If you read the any documentaiton you'll note:any(iterable) Return True if any element of the iterable is true.  If the iterable is empty, return False. Equivalent to:The list comprehension should be more obvious as it constructs a list of i in s for each element of xs.Basically (in English) you are returning any match where each sub-string exists in the search string (haystack).It's important to note as well that any() will short circuit and end on the first True(ish) value it finds. any() can be implement in pure Python like this:


Answer URL
https://docs.python.org/3/library/functions.html#any
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/tutorial/classes.html#iterators
https://docs.python.org/3/library/functions.html#any
https://docs.python.org/3/library/functions.html#any
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/tutorial/classes.html#generators
