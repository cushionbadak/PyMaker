Natural Text
I am reading about classes in Python (3.4) and from what I understand it seems that every new object has its own bound methods instances.The output of this is False.This seems to me as a waste of memory. I thought that internally a.foo and b.foo would point somehow internally to one function in memory: A.foo where self as the class instance will be passed. I assume this maybe cannot be implemented easily in the language.Does each new instance contain also new instances of its bound methods?If so, does not this hurt the performance or make case for creating new objects more cautiously than in other languages where methods are "shared" among objects like in Java?
Methods are bound on demand, each time you access one.Accessing the name of a function invokes the descriptor protocol, which on function objects returns a bound method.A bound method is a thin wrapper around a function object; it stores a reference to the original function and to the instance. When calling a method object, it in turn passes the call to the function, with instance inserted as a first argument.Methods are not created when the instance is created, so there is no extra memory required a-priori.You can re-create the steps manually:It is only the method object that is recreated each time; the underlying function remains stable:This architecture also makes classmethod, staticmethod, and property objects work. You can create your own descriptors, creating a whole host of interesting binding behaviours.


Answer URL
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/library/functions.html#classmethod
https://docs.python.org/3/library/functions.html#staticmethod
https://docs.python.org/3/library/functions.html#property
