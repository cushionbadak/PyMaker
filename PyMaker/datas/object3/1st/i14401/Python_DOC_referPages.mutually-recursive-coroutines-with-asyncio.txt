Natural Text
I had the hypothesis that if I wrote mutually recursive coroutines with asyncio, they would not hit the maximum recursion depth exception, since the event loop was calling them (and act like a trampoline). This, however, is not the case when I write them like this:When this runs, I get RuntimeError: maximum recursion depth exceeded while calling a Python object.Is there a way to keep the stack from growing in recursive coroutines with asyncio?
To keep the stack from growing, you have to allow each coroutine to actually exit after it schedules the next recursive call, which means you have to avoid using yield from. Instead, you use asyncio.async (or asyncio.ensure_future if using Python 3.4.4+) to schedule the next coroutine with the event loop, and use Future.add_done_callback to schedule a callback to run once the recursive call returns. Each coroutine then returns an asyncio.Future object, which has its result set inside the callback that's run when the recursive call it scheduled completes.It's probably easiest to understand if you actually see the code:Now, your example code doesn't actually return n all the way back up the stack, so you could make something functionally equivalent that's a bit simpler:But I suspect you really meant to return n all the way back up.
I changed the code to async, await and measured time. I really like how much more readable it is.Future:    Result:Async, await:    Result:


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.async
https://docs.python.org/3/library/asyncio-task.html#asyncio.Future.add_done_callback
