Natural Text
Let's say the class Color is an enumeration:Now, let's say I want to associate each of those member with a function AND keeping their value. i.e doing something like thisWould call a function that I'd assign in someway.And keeping the IntEnum behavior, meaning that Would still return TrueI guess I need to define a new superclass for my enumeration, but how?The only thing near that that I have managed to do is:Where f g and h are functions.However. With this method, the only way to access the value isAnd to call the function this is Wich is, in my opinion, pretty ugly, especially when names are a bit longs, when you have to call function a lot of times and with a lots of argumentsSo is there a way to do what I want or do I need to stick to the uggly version?
Against my better judgement, I've decided to unravel the magic threads that hold Enums together. Here's what I came up with:This also supports reassignment, so afterwards:
Simple and plain, although a nightmare for readability and comprehensibility. Simply implements Python callable interface by providing a __call__ method. Bury it in some module, implement __all__ and never import anything besides Color class.Edit:Much better (more readable, less hacky etc.) would be to define explicit callable interface on Enum.Any users of this Enum would do something like:With with proper name of get_something would be readable, easy to understand for pylint and other static analysis tools and less error-prone.


Answer URL
https://docs.python.org/3/library/enum.html#how-are-enums-different
