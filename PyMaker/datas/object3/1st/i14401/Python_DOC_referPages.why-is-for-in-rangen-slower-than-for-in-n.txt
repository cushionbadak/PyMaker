Natural Text
Testing alternatives to for _ in range(n) (to execute some action n times, even if the action does not depend on the value of n) I noticed that there is another formulation of this pattern that is faster, for _ in [""] * n.For example: returns 16.4 seconds;whereas,takes 10.7 seconds.Why is [""] * 10^1000 so much faster than range(10^1000) in Python 3?All testing done using Python 3.3
When iterating over range(), objects for all integers between 0 and n are produced; this takes a (small) amount of time, even with small integers having been cached.The loop over [None] * n on the other hand produces n references to 1 object, and creating that list is a little faster.However, the range() object uses far less memory, and is more readable to boot, which is why people prefer using that. Most code doesn't have to squeeze every last drop from the performance.If you need to have that speed, you can use a custom iterable that takes no memory, using itertools.repeat() with a second argument:As for your timing tests, there are some problems with those.First of all, you made an error in your ['']*n timing loop; you did not embed two quotes, you concatenated two strings and produced an empty list:That's going to be unbeatable in an iteration, as you iterated 0 times.You also didn't use large numbers; ^ is the binary XOR operator, not the power operator:which means your test missed out on how long it'll take to create a large list of empty values.Using better numbers and None gives you:
Your problem is that you are incorrectly feeding timeit.You need to give timeit strings containing Python statements. If you doLook at the value of stmt.  The quote characters inside the square brackets match the string delimiters, so they are interpreted as string delimiters by Python.  Since Python concatenates adjacent string literals, you'll see that what you really have is the same as 'for _ in [' + ']*100: pass', which gives you 'for _ in []*100: pass'.So your "super-fast" loop is just looping over the empty list, not a list of 100 elements.  Try your test with, for example,


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.repeat
