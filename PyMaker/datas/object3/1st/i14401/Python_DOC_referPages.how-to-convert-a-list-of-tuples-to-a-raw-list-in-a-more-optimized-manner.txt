Natural Text
Here is my text file, which consists of a tuple on each line:What's the most both rough and optimized perspective to read above file and generate a list like below structure:Here is my current approach, is not which truly what I want:
You can use ast.literal_eval to safely evaluate the tuple and convert those tuples into a list inside a list-comp, eg:for more information, read the doc of ast.literal_eval, and this thread.
This is the fastest solution I've been able to come up with so far.It makes use of re.findall and the fact that all values are only positive integers. By using capture groups in the regular expression in combination with re.findall, you can efficiently grab pairs of positive integer strings and map them to integers in a list comprehensionTo handle negative integers as well, you can use r'-?\d+' as your regular expression instead.When I run the following code on Python 2.7.6 default version for Linux, it seems to show that re_sol1 is the fastest:Sample output from a single run:
The code below relies on assumption, that your lines follow the same format (number1, number2)s[1:-1] will omit first and last characters (brackets) of s.I put Shashank's solution (removed import from the function) and Jon's solution and mine into a file and decided to do a few tests. I generated a few files with  5000-1000 lines in them to do tests.Excerpt from testAll 3 functions produce the same result


Answer URL
https://docs.python.org/3/library/re.html#re.findall
