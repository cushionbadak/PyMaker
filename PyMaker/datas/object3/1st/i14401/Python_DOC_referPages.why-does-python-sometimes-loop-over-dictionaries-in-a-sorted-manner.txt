Natural Text
This question already has an answer here:Will a Python dict with integers as keys be naturally sorted?                    5 answers                A dictionary is populated with consecutive integer keys, like this:Later, the dictionary items are iterated like this:The result shows the items are iterated in numerical order:It turns out, this is the behavior I want, but not what I expected.  I expected dictionary iteration in random order.  What's going on here, and can I depend on this behavior in code released publicly?
Dictionaries are not in random order.  They are in arbitrary order.  In this case, you got lucky and they were sorted.  Tomorrow, they might not be.  If you need randomness, use random.  If you need sorted order, use sorted().  As @BenjaminWohlwend mentions in the comments, you can use collections.OrderedDict to keep track of insertion order.In this case, I would guess the dictionary is doing some sort of small-integer-key optimization, acting like an array (e.g. hash(1) == 1).  This is not a guaranteed behavior and might work differently on other Python implementations.
The order is not random, it's arbitrary.  What that means is that you can't depend on it iterating in any particular order.  It may sometimes happen to be in sorted order, but you can't assume it will be.


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
