Natural Text
I want to find create lists of anagrams from a list of words. Should I use another loop in my code or recursion?My output is ['bad', 'dab', 'bda', 'dba']. But I also want more listsof other anagrams from some_list.I want the output to be:  - ['app', 'ppa'] - ['bad', 'dab', 'bda', 'dba'] - ['sad', 'das']
I recommend you write Python, not Java or whatever other language you're emulating there. Here's your core code in Python, with normal looping and without all the unnecessary stuff:I don't see use for recursion, but yes, you could wrap an outer loop around this to find the other anagram groups.Though this is how I'd do it, using the helpful itertools.groupby:That prints:Alternative solution for the changed question with sorting the groups:Output:
Your problem is that you loop one time over your list ,since you need to loop based on all of the words.But i suggest another way for this task,you can use itertools.groupby and sorted function using operator.itemgetter :Result :All that i have done here is creating a list of sorted words with those index using sorted and enumerate :then we need to grouping this pairs based on the second element and get the first element (indices) so we will have the following list of tuples :that each tuple is contain the indices of the words that those sorted representations are same.and at last all you need is picking up the elements of the main list based  on the preceding indices :
1) Create a function anagrams(word) that is returning a list of anagrams for a single word as your code does. 2) map the function over your list of words.
Here is a solution:
The natural way to do this if you can afford the memory overhead of an additional dictionary seems to me to be:Output:EDIT: As mentioned in the comment below you can replace the try...except block with the dict method setdefault if the syntax doesn't bother you:
You can group the words in a dict, using the sorted word as the key, filtering out the words that values that don't have at least two elements, using an OrderedDict to keep order:Or using a loop and appending to a list, using a temp list to gather common words:If order does not matter a defaultdict would be more efficient:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
