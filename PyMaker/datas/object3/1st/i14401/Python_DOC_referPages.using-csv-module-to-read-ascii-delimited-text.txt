Natural Text
You may or may not be aware of ASCII delimited text, which has the nice advantage of using non-keyboard characters for separating fields and lines.Writing this out is pretty easy:And, sure enough, you get things dumped out properly. However, on reading, lineterminator does nothing, and if I try to do: It throws a ValueError: illegal newline value:So how can I read in my ASCII delimited file? Am I relegated to doing line.split(chr(30))?
You can do it by effectively translating the end-of-line characters in the file into the newline characters csv.reader is hardcoded to recognize:Output:
The documentation says:The reader is hard-coded to recognise either '\r' or '\n' as end-of-line, and ignores lineterminator. This behavior may change in the future.So the csv module cannot read CSV files that use custom line terminators.
Hey I was struggling with a similar problem all day. I wrote a function heavily inspired by @martineau that should solve it for you. My function is slower but can parse files delimited by any kind of string. Hope it helps!
Per the docs for open:newline controls how universal newlines mode works (it only applies to text mode). It can be None, '', '\n', '\r', and '\r\n'.so open won't handle your file. Per the csv docs:Note The reader is hard-coded to recognise either '\r' or '\n' as end-of-line, and ignores lineterminator.so that won't do it either. I also looked into whether str.splitlines was configurable, but it uses a defined set of boundaries.Am I relegated to doing line.split(chr(30))?Looks that way, sorry!


Answer URL
https://docs.python.org/3/library/functions.html#open
https://docs.python.org/3/library/csv.html#csv.Dialect.lineterminator
https://docs.python.org/3/library/stdtypes.html#str.splitlines
