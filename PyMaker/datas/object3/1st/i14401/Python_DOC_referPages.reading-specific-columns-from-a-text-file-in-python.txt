Natural Text
I have a text file which contains a table comprised of numbers e.g:5 10 66 20 17 30 48 40 39 23 14 13 6if for example I want the numbers contained only in the second column, how do i extract that column into a list? 
You can do the same using a list comprehensionDocs on split()string.split(s[, sep[, maxsplit]])Return a list of the words of the string s. If the optional second argument sep is absent or None, the words are separated by arbitrary strings of whitespace characters (space, tab, newline, return, formfeed). If the second argument sep is present and not None, it specifies a string to be used as the word separator. The returned list will then have one more item than the number of non-overlapping occurrences of the separator in the string.So, you can omit the space I used and do just x.split() but this will also remove tabs and newlines, be aware of that. 
You have a space delimited file, so use the module designed for reading delimited values files, csv.The zip(*iterable) pattern is useful for converting rows to columns or vice versa. If you're reading a file row-wise......but need columns, you can pass each row to the zip function
You can use a zip function with a list comprehension :result :
First of all we open the file and as datafile then we apply .read() method reads the file contents and then we split the data which returns something like: ['5', '10', '6', '6', '20', '1', '7', '30', '4', '8', '40', '3', '9', '23', '1', '4', '13', '6'] and the we applied list slicing on this list to start from the element at index position 1 and skip next 3 elements untill it hits the end of the loop.Output:
I know this is an old question, but nobody mentioned that when your data looks like an array, numpy's loadtxt comes in handy:
It may help:


Answer URL
https://docs.python.org/3/library/csv.html
