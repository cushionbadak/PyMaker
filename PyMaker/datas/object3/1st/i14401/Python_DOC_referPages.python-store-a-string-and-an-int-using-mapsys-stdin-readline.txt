Natural Text
If the input contains a space separated line of int, like-I can map store it in an array using the map() functionor even in two separate variables, byIs there any way to use the same way to read an input line that contains mixed data types. eg.-where foo is a string and 3 is an integer?
If you always had a string and non negative int:But the safest way is always to use a try/except when casting user input even when only expecting one type. As requested checking for negative is possible:But --10 --10-- would also be pass the test but cause an error so again only for your specific case.
To do that you should be able to discriminate between strings that can represent integers and strings that cannot. An example is:Then you can normally use map:The above line for input:will print:
You could use str.isdigit to test whether the string can be cast to an integer number.Of course, you can do the same using map and sys.stdin.readline using a lambdaIf you want to support all sorts of data types, you can try to literal_eval and fall back to the basic string if that does not work.
map is for when you want to apply the same transformation to every element of the input. That doesn't fit your use case; you want to treat the two inputs in different ways. Since the data has a fixed format of string, then integer, it'd be best to parse it in a way that always produces that format:If you have more columns, you could make a list of which function to use to handle each column:The solutions suggested by the other answers don't account for the fixed format of the input. If the user inputsx should be "31", not 31, and if the user inputsthat should be detected as an error, rather than assigning "bar" to y.
You can do a quick "try / except" setup if you're not looking for anything fancy.e.g., 


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.isdigit
https://docs.python.org/3/library/ast.html#ast.literal_eval
