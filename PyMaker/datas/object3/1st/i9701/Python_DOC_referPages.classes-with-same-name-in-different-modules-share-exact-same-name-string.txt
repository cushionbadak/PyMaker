Natural Text
Slightly surprising behaviour. Two classes with the same name in different modules share the same name. (Not equality, which is expected, but string object identity! )I don't support it really matters much, but does anyone know why, and whether there's any potential here for further surprises?Demo (with a/a.py and b/b.py and empty __init__.py in a/ and b/)
This is an implementation detail of the CPython interpreter.It interns identifier strings; only one copy is created for source code strings, and re-used everywhere the exact same string value appears. This makes dictionary containment tests faster (by trying pointer comparisons first).You can do this for your own strings with the sys.intern() function, which helpfully notes:Normally, the names used in Python programs are automatically interned, and the dictionaries used to hold module, class or instance attributes have interned keys.Also see About the changing id of a Python immutable string
As youve noted - you can't rely in sting objects being the same - nor in they being different objects. (Unless you explicitly makes references to the same strings, of course).If you want to compare for the name, just use the == object. If yu want to know if the classes are the same, them use the is operator with the classes themselves, not with their names.
In Python everything is object/class. Whatever you write either a class or function, it's type is type.In question you have 2 diff classes a and b. Here these 2 lines create 2 instances of both classes.Function Test on each object return class Test. A class to __class__ returns object type or __repr__ of object. And name returns name of class in form of string. If you want to confirm type this and see type(tb.class.name). So >>> tb.__class__.__name__ is ta.__class__.__name__ this is returning true as one str is type of other.


Answer URL
https://docs.python.org/3/library/sys.html#sys.intern
https://docs.python.org/3/library/sys.html#sys.intern
