Natural Text
I use Python 3.5 and my project structure is like this: I want to import myLibA.py in myApp.pyIf I simply write from Libraries import myLibA I end up with this error : ImportError: No module named Libraries.I found the Q/A Importing files from different folder in Python, from which I adapted my own solution, adding this at the beginning of myApp.py in order to add my Project folder to the Python Path :This worked well on Windows, but when I run myApp.py from the same project on OSX (10.9) I see the same error message, my module is not found. To reproduce my issue it's very simple. Just fill the Python files like this : myApp.py : myLibA.py : I don't understand why the Python Path method doesn't work here. Anyway, I'm looking for a solution that keeps the Python file compatible with Windows and that is contained in the sources (in the Python files). I've seen a few console hooks but I'm not satisfied with that because I want to be able to clone the project on any OSX/Windows PC with Python 3.5, and just run myApp.py. I'm looking for a solution that doesn't involve any library not natively present in Python 3.5. Is there another way to achieve this ? (If not, is it because it is somehow not pythonic to organize a project like this? As a C developer I might have the wrong approach)
Add __init__.py to your Libraries directory.  That file can be empty, and it  magically turns the Libraries directory into a package.  Now:The __file__ special variable gives the filename of the current script.  os.path.dirname() gives the directory it resides in, and os.path.split(libdir)[0] gives its parent directory.  This should work wherever the script is called from.I am using append rather than insert.  It is generally advised that user directories are searched last, and also append is more efficient than insert in the C Python implementation.
You should have __init__.py inside every folder that you want to import.Also a common project structure for a python project is this:Where main.py will contain the entry code of you app, just like C's main(), for exampleNo need to tinker with sys.path in runtime.
This Question is somewhat similar. My favourite answer suggests a project structure like this in your case:With the library code in myLibA.py unchanged the app code and import would look like this:Edit 1:When the requested folder structure is necessary, this change to the  myApp.py file:works too.


Answer URL
https://docs.python.org/3/tutorial/modules.html#packages
