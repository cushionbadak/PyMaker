Natural Text
When I run the program in its current state, it will give me the following output: However, I NEED it to look like this: Clean, organized, tabbed, perfect alignment. I don't know how to pull the data from the dictionary in a clean manner. I have to, in addition, add the totals for chocolate, etc. and the 1st, 2nd and 3rd columns. Presentation is important. It's not merely a "how do I output the data" but, "how do I output the data with a clean presentation." I was thinking of using nested for loops, or maybe something with a for loop. But where that for loop goes, or how I use it to print out the dictionary data cleanly how I want it to look like is beyond me. I've looked at other questions asked, but nothing comes close to this level of tabulation, organization and printing specifics for data coming from a dictionary. I've also attempted the often cited "for key, val in X.items():" but that hasn't worked for me. I don't even know where to start with that function and its confusing beyond belief. Where would I put it? How would I name it? Where would I go from there? Not to mention I have columns to add, and rows to add. This is a very specific question. Thank you. 
Python has an excellent mini-language specifically for string formatting. This is what should be used.You know that you want your format to beflavor    sell1    sell2    sell3    Total:     total sellsWhich would equate to the following string format:"{} \t {} \t {} \t {} \t Total: {}"So now that you know your format, the next step is to apply this format to every key, value pair in your dictionary. Use a for loop to iterate over each key, value pair.The last thing left to do is to fill in the blanks. You know that the keys in your dict() are the flavors, so the first parameter to format() would be the key variable:.format(key, ...)Next you need the three values from your key's, values. We could index each value out of of value:.format(key, value[0], value[1], value[2], ...)Bu that's a bit verbose, and Python had a better method. We can simply "unpack" the list of values into the appropriate spots using the syntax *iterable..format(key, *value, ...)And the last value left to fill in would be your total. You can make use of the builtin function sum() to add all the values in values together:.format(key, *value, sum(value))Now to print the sum of each column, we first need the value of each key in your dict(). This can be done using a simple list comprehension:Next, we need to get the first value from each list in sales and add the value. This can be done using a list comprehension and the zip() builtin function:The round function is used with floats to round them to a certain decimal place. You can change that number to your liking, but I chose one. The last thing left to do is to print the totals of each column. After a bit of experimentation, this should work just fine:So the final, finished solution would be:
You can use python's string formatting to create a regular appearance.There's a nice website just to do with python formatting: https://pyformat.infoThe format of the table row will look something like:Then you can fill in the fields:To pull these fields out of the dictionary:
Try the following:Output:
Enter inside the def main(): and you will get the desired output. 


Answer URL
https://docs.python.org/3/library/string.html#format-string-syntax
