Natural Text
I'm creating a HTTP proxy in python but I'm having trouble in the fact that my proxy will only accept the webservers response and will completely ignore the browsers next request and the transfer of data just stops. Here's the code:Sorry about the code this is just a trial version and help will be much appreciated as I am only 14 and have much to learn :-)
Unfortunately I don't really see how your code should work, so I'm putting here my thoughts of how should a simple HTTP proxy look like.So what should a basic proxy server do:Accept connection from a client and receive an HTTP request.Parse the request and extract its destination.Forward requests and responses.(optionally) Support Connection: keep-alive.Let's go step by step and write some very simplified code.How does proxy accepts a client. A socket should be created and moved to passive mode:Once the TCP connection is established, it's time receive a request. Let's assume we're going to get something like this:In TCP, message borders aren't preserved, so we should wait until we get at least first two lines (for GET request) in order to know what to do later:After we have got the remote hostname, it's time to forward the requests and responses:Please note select - this is how we know if a remote peer has sent us data. I haven't run and tested this code and there are thing left to do:Chances are, you will get several GET requests in a single client_sock.recv(1024) call, because again, message borders aren't preserved in TCP. Probably, look additional get requests each time you receive data.Request may differ for POST, HEAD, PUT, DELETE and other types of requests. Parse them accordingly.Browsers and servers usually utilise one TCP connection by setting Connection: keep-alive option in the headers, but they also may decide to drop it. Be ready to detect disconnects and sockets closed by a remote peer (for simplicity sake, this is called while it_makes_sense() in the code).bind, listen, accept, recv, send, sendall, getaddrinfo, select - all these functions can throw exceptions. It's better to catch them and act accordingly. The code currently server one client at a time.


Answer URL
https://docs.python.org/3/library/select.html
