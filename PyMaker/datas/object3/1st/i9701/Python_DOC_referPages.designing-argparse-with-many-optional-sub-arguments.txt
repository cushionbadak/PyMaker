Natural Text
I am currently writing a script for my library, and i ended up getting stuck on how to design argparse that will have a lot of options, and sub arguments.Currently i am designing the search function, which has the following options, some required and some not:search_session_id - Requireduser_session_id - Requireddiscover_fields - Optionalstart_time - Optionalend_time - Optionalsummary_fields - Optionalfield_summary - Optionallocal_search - OptionalMy problem is then the following:How can i make the argparse and the if statements, if all optionals needs to work together, but also work if only one of them are defined?If i need to check every single combination, i would end up with something like this:As you can see, i can continue with no end, to make if statements that have every single combination of optional arguments. There must be an easier way to design this? If i was to just parse it in as kwargs, they would not be sent in the correct format, or i would require the person using the script to write things like end_time=SOMETIME, instead of just --endtime TIME. Now this might seem to be a small price to pay, but if i need to add every function with all their parameters into the script, then this will be come a lot longer and more tedious.
You could collect all the optional keyword arguments passed to arc.search to a dict and then unpack it when you call the function:Output:Since some of the argument names used by parser are different than the ones passed to search the names need to remapped. vars is used to create a dict from Namespace object returned by parse_args(). Then dictionary comprehension iterates over the mapped argument names, picks ones which were given user and creates a new dictionary with key names that arc.search understands. Finally **real_args unpacks the dictionary named parameters within the function call.


Answer URL
https://docs.python.org/3/library/functions.html#vars
https://docs.python.org/3/library/argparse.html#argparse.Namespace
