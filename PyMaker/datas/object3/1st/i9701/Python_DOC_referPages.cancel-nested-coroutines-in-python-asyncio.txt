Natural Text
In my application, I have a coroutine, which may await on several other coroutines, and each if this coroutines, may await on another ones and so on.If one of such coroutines fails, there is no need to execute all others, that was not executed yet. (In my case this is even harmful, and I want to launch several rollback coroutines instead).So, how do I cancel execution of all nested coroutines? Here is what I have for now:This obviously does not work. As you can see, foo coroutine is canceled, as I want, but bar2 is still running:So, I'm definitely doing something wrong. What is the correct approach here?
By the time you call task_bar.cancel() the task is already finished, so there's no effect. As the gather docs state:If return_exceptions is true, exceptions in the tasks are treated the same as successful results, and gathered in the result list; otherwise, the first raised exception will be immediately propagated to the returned future.This is exactly what's happening, a slight modification of your task_bar coroutine to:Outputs:I'm also printing task_bar before the task_bar.cancel() call, notice it's finished, so calling cancel has no effect.In terms of a solution I think the spawning coroutine needs to handle the cancellation of the coroutines it scheduled as I couldn't find a way to retrieve them once the coroutine is finished (beyond abusing Task.all_tasks which sounds wrong).Having said that I had to use wait instead of gather and return on first exception, here's a full example:Which outputs:It's not great, but it works.
As far as I know,  it's not possible to automatically cancel all subtasks of a coroutine when cancelling the coroutine itself. So you have to clean up the subtasks manually.When an exception is thrown while awaiting an asyncio.gather future, you can access the remaining tasks by the _children attribute of the Gathering_future object.Your example working:returns


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.gather
https://docs.python.org/3/library/asyncio-task.html#asyncio.wait
