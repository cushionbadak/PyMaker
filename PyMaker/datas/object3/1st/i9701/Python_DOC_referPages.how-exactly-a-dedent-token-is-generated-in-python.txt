Natural Text
I am reading a documentation about lexical analysis of python,which described the course how INDENT and DEDENT tokens are generated.I post the description here.The indentation levels of consecutive lines are used to generate INDENT and DEDENT tokens, using a stack, as follows.Before the first line of the file is read, a single zero is pushed on the stack; this will never be popped off again. The numbers pushed on the stack will always be strictly increasing from bottom to top. At the beginning of each logical line, the lineâ€™s indentation level is compared to the top of the stack. If it is equal, nothing happens. If it is larger, it is pushed on the stack, and one INDENT token is generated. If it is smaller, it must be one of the numbers occurring on the stack; all numbers on the stack that are larger are popped off, and for each number popped off a DEDENT token is generated. At the end of the file, a DEDENT token is generated for each number remaining on the stack that is larger than zero.I've tried to understand the DEDENT section,but failed to,could somebody give a better explanation than the referenced?
As Python sometimes is easier than English, here is a rough translation of this description to Python. You can see real-world parser (written by myself) that works like this here.Here is the output:
Let's say that we have a source file that uses 4 spaces per indentation level, and that we are currently at the third level of indentation.  The contents of the indentation stack will be [0, 4, 8, 12] - the initial zero, plus each new indentation level as it was first encountered.  Now, consider the number of leading spaces on the next line of code...If it is 12 (matching the current top of the stack), there's no indentation change, nothing special happens.If it's anything greater than 12, an INDENT token is generated, and the new value added to the stack.If it's 8, one DEDENT token gets generated, and the 12 popped off the stack.If it's 4, you get two DEDENTs, and both the 12 and 8 get popped.If it's 0, or the source file ends at this point, you get three DEDENTs, and 12, 8, 4 get popped.If it's anything else less than 12, an "inconsistent indentation" error is generated, as it's impossible to tell which previous level of code you've dedented to.Note that only lines with actual code are considered - if a line contains only whitespace or a comment, its amount of leading space is irrelevant.The whole point of this process is that exactly one DEDENT gets generated to correspond to each INDENT, occurring at the point where the indentation level returns to (or goes below) the amount present before the corresponding INDENT.


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#lexical-analysis
