Natural Text
I received an assignment where I had to find the sum of all prime numbers up to 2 million and the code I wrote originally took way too long to run so the teacher gave me this algorithm to check if the number is prime. However, I don't quite seem to get what's going on in the return all statement and what it has to do with prime numbers
Since I was not nice to you. Let me just make a little extra effort and explain it you.First read this:http://wiki.planetmath.org/howtofindwhetheragivennumberisprimeornotLet's see whats happening here.Step1. if n % 2 == 0 and n > 2Check if the number is divisible by 2 and also greater than 2. If these condition fail then the number is not prime. Don't proceed any further and return false.Step2a. int(math.sqrt(n)) + 1Calculate the square root of the number (it might be float so we convert it into int) and then add 1 to it.Step2b. range(3, int(math.sqrt(n)) + 1, 2)Create a list starting from 3 to the value calculated in step2a with a step size of 2. So basically it will get all the odd numbers from 3 to step2a value. Why just odd? Because evens are not prime!Step2c. (n % i for i in range(3, int(math.sqrt(n)) + 1, 2)In this step we are iterating over the list created in 2b and dividing n by all of those numbers (by dividing here i mean taking modulus) and we are storing the results in an iterator object.Step2d. all()If n was divisible by any number of list from 2b, then a 0 will be stored on n % i. And we know that a prime number is not divisible by any number other than 1 and itself. If we get a 0 then we are done, it's not a prime number.all() will return true only if all the values are non zero.Eg. print all([1,2,3,4,5])-->Trueprint all([0,1,2,3,4])-->FalseI hope, now it's clear to you.


Answer URL
https://docs.python.org/3/library/functions.html#all
