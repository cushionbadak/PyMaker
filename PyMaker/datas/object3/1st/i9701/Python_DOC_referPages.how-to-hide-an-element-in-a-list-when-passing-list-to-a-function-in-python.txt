Natural Text
Suppose I have a listAnd a functionAnd I want to call the function iteratively like this:The first thing that comes to mind would be something like this:But this doesn't really work, because each time I call del it actually deletes the element. I sort of just want to 'hide' the element each time I call the function. Is there a way to do this?
You can use itertools.combinations for this:This will make sublist a tuple.  If you need it to be a list, you can call list() on it before passing it to doSomething().If you care about the order in which the doSomething() calls are done, you will want to reverse the order of iteration so that it begins by removing the first element instead of the last element:This is less efficient because all of the sublists must be generated up front instead of one at a time.  mgilson in the comments suggests reversing the input list and then reversing each sublist, which should be more efficient but the code may be harder to read.
Normally, looping over indices is a bad idea -- but in this case, it seems that you want to remove elements at a given index (iteratively) so looping over indices actually seems appropriate for once.You could use list.pop for this purpose, but it turns out that would be an extra O(N) operation for each turn of the loop (once to copy the list, once to remove the i'th element).  We can do it differently by removing the element while we're copying...Note however that it isn't guaranteed that this will be faster than the naive approach:The naive approach has the advantage that the any indexing that needs to be done in .pop is pushed to C code which is genearally faster than doing python comparisons.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
