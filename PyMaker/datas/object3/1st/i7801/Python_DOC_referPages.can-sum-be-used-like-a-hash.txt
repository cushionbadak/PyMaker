Natural Text
I want to check whether the sum of two list is same or not. Here the sum returns true. If I hash the list I get different values but hashing is computationally expensive. I only want to check whether the elements in the two lists are same (only with the exception of 1 element). I am using Binary search technique of dividing the list and then checking the hash. if hashes are different I am checking if its more than once. But as I said hashing is computationally expensive. Also the order does matter here. Thank you
First, is is not the logically correct syntax for your application; use == instead. Refer this post to know more about the difference: Is there a difference between `==` and `is` in Python?This is the correct code to compare a checksum (and is obviously true in this example). If you are looking for something different, like finding whether the items of the list are the same element-wise, then the straight-forward answer would be
is checks for object identity, not equality (link).sum does not differentiate between the elements that are summed over only the end result. If you need to differentiate between the elements of the containers you can use a setor if you're sensitive to the counts of the elements use collections.Counterthis requires you to iterate over the list.Depending on what exactly you're after you could also you This checks both the elements contained and their order (maybe you don't care about order) and is pretty efficient. You have to do the cast to a tuple as list is not immutable and therefore can not be hashed.hash(tuple) seems to be much faster, but it's not clear to me what exactly your end goal is
Can sum be used like a hash?Yes, the sum() function can be used as a hash for a list or tuple of integers.Is hashing is computationally expensive?Interestingly, hash() performs better than sum() for a tuple of integers:How to compare unordered listsThe stated problem is "how to compare elements in the two lists are same (only with the exception of 1 element)"A built-in tool for doing this is collections.Counter().  Internally, it uses fast hashing to accumulate counts.  In Python 3, it is accelerated by code written in C.   It uses a single O(n) pass rather than an O(log n) binary search.The difference in the various approaches will become more pronounced as the list size grows larger.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
