Natural Text
i was going through a post post about how observer pattern can be implemented in python . on the same post there are these comments.1) In python you may as well just use plain functions, the ‘Observer’  class isnt really needed.2) This is great example of what Java programmers are trying to do once  they switch to Python – they feel like Python is missing all that crap  and try to “port” it.These comments imply that the observer pattern is not really useful in python and there exists other ways to achieve the same effect. is that true and if how can that be done?Here is the code of observer pattern:
There are many different ways you can "observe" something in python. Use property descriptors, custom __setattr__, decorators...Here is a simple example that uses first class functions:You can then register any callable.This will work properly. The call to do_something will have the correct self value. Because an object's methods are callable objects which carry a reference to the instance they are bound to.This might help understanding how it works under the hood:[edit: decorator example]You may also use the register method we defined above as a decorator, like this:For this to work, just remember that register needs to return the callable it registered.


Answer URL
https://docs.python.org/3/howto/descriptor.html
