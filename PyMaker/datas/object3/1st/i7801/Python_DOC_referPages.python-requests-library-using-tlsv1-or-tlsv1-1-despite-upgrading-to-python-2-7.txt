Natural Text
I wanted to make sure that when using requests library to post to an HTTP server, it would refuse to communicate using TLSv1 or TLSv1.1.  To do this, I configured my https server to force the SSL protocol to use either TLSv1 or TLSv1.1. I expected these versions to be rejected.My python program is running on CentOs machine:The default Python version is 2.6.6:I installed python 2.7:Using pip2.7, I installed the libraries required get requests to run.  I did not make any changes to the openssl.I sent two test alerts and it seems that my program negotiated down to TLSv1.  I was under the impression that TLSv1 is deprecated.  The program is executing using python 2.7 and not the system default of python 2.6.At the top of the python program I embedded:    #!/usr/local/bin/python2.7Below are the 2 post alerts that shows TLSv1.1 and TLSv1 going through:Any thoughts?
The documentation of the ssl module has a table which shows which protocol settings work together. Usually if a client and a server both using PROTOCOL_TLS (which is the same as PROTOCOL_SSLv23) connect they use the highest shared protocol version. If there is no compatible version (e.g. the server only speaks 1.1, the client only 1.0) then you'll get an error.The requests documentation shows how you can force a client to use a specific tls version, e.g. to force TLS 1.2 you could use (slightly modified example):Recent versions of urllib3 (which requests uses for connections) allow to pass a SSLContext instead, which allows for more flexible configurations, e.g. blocking specific versions while allowing any newer version:


Answer URL
https://docs.python.org/3/library/ssl.html#ssl.wrap_socket
