Natural Text
I'm looking for an alternative to a dictionary that will allow me to efficiently use ranges as keys. Presumably the data structure needs to be sorted - maybe something like a b tree? I haven't found a good python implementation.For example, given the following dictionary-like data structure:d = {'38.1003827193': 'value1', '58.29932891733': 'value2'}Searching for the range 38 -> 38.337 should return value1
I'm not sure why your keys are kept as strings, but the bisect module in the standard library can help you do binary searches in a sorted index. Multidimensional indexing is another chapter in turn, and the primary question is how you use your data; trees may be faster for insertions or particular distributions, for instance. 
Not sure if this is what you meant, but I think this is what you meant:If 38 (lower bound) and 38.3 (upper bound) are entered value1 is printed.Alternatively you can have search for numbers based on the part before the decimal:When 37 (lower bound) and 39 (upper bound) are entered the code prints: value1, but when 38 is entered as upper bound value1 is not printed.If you dont want it to print you can  have it return a list of all the values that are that number. All you would have to do is change the print(d[d_keys[n]]) to numbers_in_range.append(d[d_keys[n]]) and adding numbers_in_range = [] somewhere above.


Answer URL
https://docs.python.org/3/library/bisect.html
