Natural Text
For example we have [0, 1, 3, 5, 7, 8, 9, 10, 12, 13] . The result must be 7, 8, 9, 10 because they are adjacent to each other, index wise and are consecutive integers, and also this chain is longer than 0, 1.English is not my first language, excuse me if the writing is a bit obscure. 
Group the items into subsequences using itertools.groupby based on  constant differences from an increasing count (provided by an itertools.count object), and then take the longest subsequence using the built-in max on key parameter len:You may include the group key in the result (suppressed as _) to further understand how this works.
Alternative solution using numpy module:The output:np.where(np.diff(nums) != 1)[0]+1 - gets the indices of elements on which the array should be split (if difference between 2 consequtive numbers is not equal to 1, e.g. 3 and 5)np.split(...) - split the array into sub-arrayshttps://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.diff.html#numpy.diffhttps://docs.scipy.org/doc/numpy-dev/reference/generated/numpy.split.html
CodeUsing itertools.groupby (similar to @Moses Koledoye's answer):AlternativeConsider the third-party tool more_itertools.consecutive_groups:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/library/itertools.html#itertools.count
https://docs.python.org/3/library/itertools.html#itertools.groupby
