Natural Text
I'm not experienced in OOP nor am I a programmer by trade, so I apologize if this is something I should have been able to find. I currently have a python program which I have written to do some complex data analysis - it consists of functions and then script which calls those functions (no main sentinel etc. etc.). No classes or anything.It would be really helpful if I could package analysis in one program, data visualization in another, et cetera, and then just call the programs I want from a GUI. Therefore I'm trying to write a simple GUI (in Tkinter) which will allow me to set some parameters and filepaths etc. before running that program.I'm accustomed to other "languages" which encourage packaging different components of your programs as sub-programs which call each other. In python my functions either get really really long (tons of indentation, hard to maintain) or I end up with a million functions which call each other (tons of functions, hard to keep track of). If I tried to do this all in one .py it would be very long with no organization. In the interest of saving time and complexity I would like to have the GUI program in one .py program, and have its widgets call other programs (or functions from them) as necessary. I have a feeling this is going to involve importing the functions of my analysis program and then calling them. How can I do this? Do any routines I want to call need to be packaged as functions and then imported somehow?Essentially I'm trying to get away from having 10 levels of indentation. Any advice would be appreciated. I would also be interested in packaging this program in some sort of deployable fashion, but that might be well above my pay grade so to speak. 
It is usually preferred to have more shorter functions than one long function.This gets harder to maintain the more functions there are. Because of this, you should put functions that belong together (e.g. all operate on some objects) into their own module (or class). E.g. if you have multiple functions that do some math, put them into a file math_utils.py. In your main script you can then do e.g. this (if you defined a cube root funciton in math_utils, of course):This works, as long as the two scripts are in the same folder.In the same vein you can create multiple files that hold utility functions. In addition to this, your functions should all have docstrings describing what they do and what the expect as parameters and what they return. This makes this a lot more maintainable. You should also add module docstrings that describe what the functions in each file do.So you would have:File math_utils.py


Answer URL
https://docs.python.org/3/tutorial/modules.html
https://docs.python.org/3/library/subprocess.html#module-subprocess
