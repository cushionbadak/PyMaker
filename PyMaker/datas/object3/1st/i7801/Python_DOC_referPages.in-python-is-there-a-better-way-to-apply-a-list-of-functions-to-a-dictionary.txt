Natural Text
Is there a better way to iteratively apply a list of functions to a dictionary? Here is an example of what I want to do.  But this uses recursion.Produces expected output:I want to provide the functions as a array and produce the same output.  Here is what I have tried and works:This produces the desired output:Is there a way to do this that is more readable, removes the recApply function and hopefully minimizes dictionary copies? 
You don't need to return your dictionaries and re-assign references - mutable types are passed by reference so:would to perfectly fine.
reduce (or functools.reduce in Python 3) can be used to compose a list of functions into a single function. This requires you to define a composition function:and an identity function:Using these, you can create a function g that applies each function in order to an initial input.Note this works because func1, func2 and func3 are similar enough to pure functions that you can make use of the function monoid. Loosely speaking, it just means that function composition is associative (compose(f, compose(g, h)) is the same as compose(compose(f, g), h)) and that the identity function is neutral under composition (compose(identity, f) and compose(f, identity) are both the same as f itself).Your three functions aren't really pure functions; they are more like identity functions with side effects. However, you can treat them as pure functions because you are using them as if they were defined as, for example,Exercise for the reader: determine if my call to reduce actually defines g(x) = func3(func2(func1(x))) or g(x) = func1(func2(func3(x)).
You could also use reduce (or functools.reduce in Python 3) with the starting dictionary as the initializer parameter:This will apply the functions one after the other to the initializer or the result of the previous function.You could also combine this with functools.partial to create a chained function that can then be applied to different input dictionaries:And you could generalize that further, making it a partial of a partial function...


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
https://docs.python.org/3/library/functools.html#functools.partial
