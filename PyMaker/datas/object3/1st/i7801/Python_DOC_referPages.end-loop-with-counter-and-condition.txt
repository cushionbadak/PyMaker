Natural Text
In Python I can implement a loop with step counter and a stop condition as a classical case of for loop :where fun(x) is some arbitrary function from integers to integers. I always in doubts if that is the best way to code it (Pythonically, and in terms of readability and efficiency) or is it better to run it as a while loop:which approach is better? In particular - I'm concerned about the usage of break statement which doesn't feel right.
The for loop is slightly more performant than the while because range() is implemented in C, meanwhile the += operation is interpreted and requires more operations and object creation/ destruction. You can illustrate the performance difference using the timeit module, for example:The for loop is arguably more Pythonic in the vast majority of cases when you wish to iterate over an iterable object. Furthermore, to quote the Python wiki: "As the for loop in Python is so powerful, while is rarely used except in cases where a user's input is required". There is nothing un-Pythonic about using a break statement per se.Readability is mostly subjective, I would say the for loop is more readable too, but it probably depends on your previous programming background and experience.
There is a minute difference in performance. As the while loop performs an extra boolean check at every iteration, it is slightly slower. However, for most functions you would like to assess, there is an alternative to using a loop in the first place, which is way faster. See example attached below. And I am certain there are more optimal implementations..time elapsed 11.082087516784668and here 14.429940938949585Alternative 1.4022133350372314If you want to/have to use a loop however, the for-loop is in general the more Pythonic way to go, as is explained in this nice answer to a related questionEDIT: Chris Rands's answer below explains it from the C-code point of view, and uses a more accurate (although on such macro-levels as I forced this example to be, that would not really matter) timing module. Do read his answer as well.
best way would be not to loop explicitly at all. itertools for the rescue:+ it would be a lot a lot faster than looping
Looking purely at the bytecode, While-loop got 30 lines and the for-loop got 26 lines.In the end, don't really think it matters that much but I personally prefer the for-loop version as it's easier to read.http://mergely.com/9P1cfnTr/ Code I used:
Taking the functional approach, create a local closure that performs the action and returns the termination predicate's value. Then iterate over the inputs until done.Another way of terminating a sequence of actions is:Looks like we are back to the break statement for pythonicness
I'm pretty sure you should not care about performance when you are comparing while and for loops, so the main question is about readability.first of all, of course is much better thanbecause you don't need to keep some C-like variables in mind when you are reading simple loop@quidkid's solution is pretty elegant, but it is a good point that works only on quite simple examples and will lost readability as you will require to add some additional functionalityAs i can see, the main problem in your code is that your function is not pure, so maybe you should do something like this:
If efficiency is what you are looking for then use generator functionsThe result of %timeit in ipythonThe slowest run took 6.15 times longer than the fastest. This could  mean that an intermediate result is being cached. 10000 loops, best of  3: 30.9 Âµs per loop
You  do NOT need the break statement at all... for loops will terminate automatically. All you need is:This, will always be more readable imho.


Answer URL
https://docs.python.org/3/library/timeit.html
