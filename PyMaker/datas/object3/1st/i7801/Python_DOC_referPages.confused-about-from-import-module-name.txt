Natural Text
Perhaps I didn't understand this topic well. I can import the 'siblings' or 'nephews' directories but I can't import the 'cousin' directories. I read this Python document and tried to do this as they show but I still can't import the 'cousin' directory. In my example, I have a directory structure like the below:For example: When I run the test.py file and write the below codes:This code import it's siblings.For example: When I run the test.py file again and write the below codes:This codes import it's nephews and also it can import it's grandnephews like the below:But suppose I want to import the 'cousin' file. How can I import the cousin file?  I run the test_1.py file. It's 'cousin' is 'test_2'.When I read the Python document which was given above, there's an example at the intra-package reference topic about this example. And there has written a method that written as below to import the 'cousin' module.In my example there's no init.py file in the directories. I suspected that the problem arise from here. And also I wonder is there something written in the init that I haven't learned yet?While I was thinking about why still I get an error like: <SystemError: Parent module '' not loaded, cannot perform relative import> I added an empty init.py file into the directories as shown in the Python document. I hope I explained my problem. And definitely, as a beginner of Python, I would like to learn how to use 'from . import module' expression. Thanks.
The advantage of adding a path to sys.path (over using imp) is that it simplifies things when importing more than one module from a single package.Say Soundpackage has sound , modifysound , audioenhanceEtc. Which are modules inside the package.
Import statements are dependent on the main script executing, or rather the directory your main script is executing from gets automatically added to the sys.path which is what Python uses to search for modules on import.Therefore, if you run your test.py script which ends up importing directory_1.directory_1_1.test_1_1, if that script has import directory_2.directory_2_1.test_1_1 everything will be fine, but if some other script calls it, from some other place, it won't be able to find it.For that reason, when making inter-dependent modules, since you cannot know who will be importing them always use relative paths. For example, your test_2_2.py can import its test_1_1.py 'cousin' with: from ....directory_1.directory_1_1 import test_1_1 (relative names follow similar rules to path names, except you don't need separators, so . is the current path, .. is a path one level up, ... is a path two levels up and so on). NOTE: These kinds of multi-level relative imports work only when used in packages, you cannot use this for referencing your running scripts (and why should you when you know where everything is running from?). All your directories need to have __init__.py in order to be considered as packages by the Python interpreter.


Answer URL
https://docs.python.org/3/tutorial/modules.html
