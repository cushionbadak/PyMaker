Natural Text
Consider I have a dict holding n different types represented by keys:x1, x2 ..xnFor simplicity let's take a small example:I want to calculate cartesian product of the above. My output should be:Should I traverse each unique pair out of input dictionary keys and calculate their cartesian product and append their values?How do I concatenate the rest of values if another value appears let's say x3?In this kind of approach I will calculate cartesian product for x1*x2 valuesand then x2*x3 values and how do I merge the results to be x1*x2*x3?Can you think of a more simple algorithm and an efficient one? Or this should be the way?
You can use itertools.product to get the cartesian product.To reconstruct the key-value pairs for the new dicts, you can first freeze the order of keys (.keys and .values ordering is not guaranteed across all Python versions unless dict is not altered) by calling list on it before taking the cartesian product. The values from the cartesian product now maintain the order of the keys and the key-value pairs for the resulting dicts can now be safely constructed with zip:This will scale to as many value lists as the original list contains.
You can use product from itertools module within a comprehension: Output:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/functions.html#zip
