Natural Text
I am trying to implement QM coding for educational purposes. My main resource is chapter 5.11 from Handbook of Data Compression, 5th edition. This is my rough implementation of encoder for now:I am mapping the interval to integers, since it should be more efficient as I understand. In the book, there is mentioned, that 16 bit word is used for mapping, but since I am doing this in Python I am not sure whether not enforce the 16 bit length of all variables. The problem is that when I run my encoder, the C (self._c in code), which should point to the bottom of MPS interval if I understand it correctly overflows over 16 bit length very quickly, and its value becomes very large. Because of this, the encoded bits is mostly just a string of LPS symbols. Should I enforce the variable length somehow? Or is there other problem in my code? I have spent several days on it already trying to figure out what went wrong...
In any form of arithmetic compression (like QM), one needs to stay within the maximum allowed bits (16 in this case), otherwise you will have all kinds of problems.  These problems include roundoff errors because in theory you may need infinite precision.  The algorithm itself will round off when necessary and perform a renormalization to maximize use of the bit range.  The answer to your question is "Yes".


Answer URL
https://docs.python.org/3/library/ctypes.html#ctypes.c_int16
