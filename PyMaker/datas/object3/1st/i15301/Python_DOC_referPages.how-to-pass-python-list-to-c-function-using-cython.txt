Natural Text
I am using a Raspberry Pi to interface with custom hardware connected to the GPIO. The controlling software is written in Python, and the interface to the custom hardware is written in C, as it is a much faster C implementation. I now need to start calling my C functions from my Python, and have recently been learning how to wrap C in Cython. I have got everything to work, except passing a Python list to a C function.My custom hardware needs to be sent anywhere from 1 to 32 bytes, hence the use of an array.The Cython tutorials and other references I have read online either are really simple, and do not include how to pass lists to C, use numpy, which I am not using, or use very complicated code examples that lack sufficient documentation for me to understand it properly.What I have now are:test.ctest.hpytest.pyxdefns.pxdUsing the tutorials at cython.org, my getAll() and pop() functions work, but when I include the putAll() function (taken from the process_byte_data example code found at the link, under Unicode and passing strings > Accepting strings from Python code), I get this error:Now, I have a way around this - combining up to 32 bytes into an int and passing as a long int, and then pulling it apart in C - but it is very ugly.Also, I do not require Cython for any performance gains, other than that of using the C implemented library for interfacing with my custom hardware vs a Python implemented one.Any help would be greatly appreciated.(Edit) SolutionI managed to get this working. Here is the code I now have for anyone who needs it.pytest.pyxtest.cThis code is not optimal, as it uses ints in the python/cython code, then converts it to char in the C function. The pyPutAll() function in pytest.pyc accepts an ordinary python list. It then creates a C pointer and allocates memory. Iterating through the list, each value is put into a C array, and then finally passes the pointer to the C function.It gets the job done, but I'm sure someone else can give a much more efficient solution.Matt
ctypes is better suited to what you are trying to do.For instance: (test.py)Usage:The above is for python 3 . If you're running python 2 then you can substitute bytes for str, but the function is less flexible. In addition, be aware that create_string_buffer creates a C-string (adds an additional NUL character on the end of the string).To compile the shared library you need to do the following:
You can use Python's bytearray with Cython and I think is cleaner and easier than ctypes:test.pyThis works with your original putAll C function:test.cpytest.pyxIf you need to pass a list, you would have to convert it to a vector inside the pyx function, and pass a reference to that instead:pytest.pyx


Answer URL
https://docs.python.org/3/library/ctypes.html
