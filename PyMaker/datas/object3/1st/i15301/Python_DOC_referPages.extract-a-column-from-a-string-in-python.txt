Natural Text
I run a command remotely using Python and this is the output I get:How do I extract one column from this so my output is something like this:The code to run the command and print the output is this:When I run print type(raw_output) it says it's unicode.Any help would be much appreciated.
Reading Columns from a FileA text file is inherently row oriented, when you open it in a text editor you see, and you can operate on, lines of text.This inherent structure is reflected in an idiomatic way of slurping a text file content using python:data being a list of strings corresponding to the rows of the file.Sometimes the text is more structured and you can see that there is a columnar organization in it. For the sake of simplicity, say that we havean initial line of headers,possibly some line of junk anda number of lines containing the actual data,moreover we assume that every relevant line contains the same number of columns.An idiom that you can use ishere data is now a list of lists, one sublist for each row of the file, each sublist a list of the strings obtained splitting column-wise a row.Reordering in ColumnsWhile you can access every single data item by data[row][column] it may be more convenient to refer to data using the headers, as in data['Aggregate'][5]... In python, to address data using a string you usually use a dictionary, and you can build a dictionary using what is called a dictionary comprehensionThis works because the idiom zip(*list_of_rows) returns you a list_of_cols.Moving OnWhat we have seen is simple and convenient to use if the file format is simple and the manipulations you want to do are not involved. For more complex formats and/or manipulation requirements, python offers a number of options, either in the standard librarythe csv module eases the task of reading (and writing as well) comma(/tab) separated values files,or as optional maodulesthe numpy module, aimed to numerical analysis, has facilites for slurping all data from a text file and putting them in an array structure,the pandas module, aimed at data analysis and modeling, built on numpy, also has facilities to turn a structured text file into a dataframe structure.
There are two handy functions for what you want: readlines() splits a files in lines and str.split() splits a string (by default, using any whitespace as separator).An alternative way to it without using readlines() would be:Finally, you may be handling files whose line termination is either "\n", (GNU/Linux), "\r\n" (Windows) or "\r" (Mac OS). Then you have to use the re module:


Answer URL
https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects
https://docs.python.org/3/library/stdtypes.html#str.split
https://docs.python.org/3/library/re.html
