Natural Text
Occasionally, I have this problem where I want to check:Suppose I know that there's a 90% chance 'string1' in a evaluates to True. Will Python still evaluate if 'string2' in a in this case where 'string1' in a is True? Or is it technically more efficient to write:
or and and both use short-circuiting; they will only evaluate as many conditions as necessary to determine a result.  So, if 'string1' in a returns True, 'string2' in a will never be touched.
The or stalemate and the if ladder are equivalent in this case. The or statement should be preferred as it reduces code duplication. You only have to change one section of code if you want to do something different if one of the strings is in the given string. If you have many strings to search for them you may find it preferable to use the any function and a generator. The above evaluates to the same as the or statement where strings is a list of the strings your are searching for. It also stops checking whether s in a the first time it evaluates to True. 
No it'll stop when evaluates True. Because in or operator, one True is enough to process that statement. If any condition returns True there, for example string1 is True then other conditions are not going to process. As you know except False or False every condition is True, so no need to check rest of them.
I realize this isn't your question, but you should consider using sets for situations like this. Instead of: You can do: Using sets in this way is more terse as well as faster than multiple condition if statements. EDIT: Note that the above will only work to check the presence of individual words with no white space between. 


Answer URL
https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not
