Natural Text
I have some objects which can either be floats (or integers) or tuples (or lists or arrays). Is it possible to use idiomatic Python to avoid writing an if/elif function? Right now I haveI'd like to avoid the elif stuff because sometimes I want attribute_a to be a float but attribute_b to be a list in which case, I'd like something likesince I have five different attributes, it's infeasible to write out the full set of possible if loops for every possible combination of which one is a number and which is a list.Any help is appreciated,Thanks,SamEDIT, 1/23/15: One idea is to define two new functions as follows(or with the various generalizations to isintance, etc.), and then plug these in where needed. Is this a reasonable hack, or is it somehow infelicitous?
Use isinstance where you can pass a tuple of types to avoid your multiple or's:If you can only have either two possible cases use if/else:You could use a conditional expression but your statement would be rather long:If you want to check two attributes for a group of possible match combinations:Another way is to store the result of isinstance and negate the checks to avoid repeated calls:If you want to check if either is a tuple,list, etc.. then you can use:Then:
You may want to consider using an abstract base class to cut down on the number of combinations. There is already an abc to test if one of your arguments is int or float; it is numbers.Real: There is also already an abc to test if one of your arguments is  list, tuple, or array. It is collections.abc.Container: So the function becomes: There is one important potential advantage to using abstract base classes instead of isinstance(var,(list, tuple, array)) as in the Padraic Cunningham's answer: checking against an abc instead will allow your code to work even for types that "act like" these kinds of containers, but are not necessarily subclasses of them. The same is true for classes that "act like" a Real but are not necessarily subclassed from int or float. Depending on your use case, this can also be a disadvantage as well (see the note below about str objects, for instance). EDIT: Important gotcha from the comments below is this:If it is important to restrict strings from the iterable types (looks like it might be), a custom abstract base class can be created using the abc module.Or alternatively, you can just add and not isinstance(var,str) (Python 3 only).EDIT: Unfortunately the overload part of this answer won't work for OP since he's <3.0, but maybe it will help somebody else. This question also reminded me of the overload library, which I have been meaning to try out. Using that module, here's an attempt to solve your problem using abstract base classes: 


Answer URL
https://docs.python.org/3/library/functools.html#functools.singledispatch
