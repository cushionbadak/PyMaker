Natural Text
This is a code snippet from lib_robotis and the value n is the angle that we are inputting(to rotate the dimexel motor).According to the architecture of the chip within the motor, we require to give the lower bit (identified by lo) of the goal position into the address 0x1e and the higher bit (identified by hi) of the goal position into the address 0x1f.
n is a number in the range 0 <= n < 256*256. It takes two bytes to express that number since one byte can encode a value from 0 to 255.hi,lo=n/256, n%256is the same as / is the division operator and % is the remainder operator, so the above code says to divide n by 256 and store the quotient in hi and the remainder in lo. Each of hi and lo will be in the range 0 to 255, so they will each fit into one byte. And n == (256 * hi) + lo, so no information has been lost & the motor controller has all the information it needs to perform the desired operation.I assume that the code in your post was written for Python 2; it won't work properly on Python 3. You should replace the n / 256 by n // 256 to make the code work on all versions of Python.FWIW, there are various better ways to break a number up into high and low bytes. One uses the built-in divmod function:hi, lo = divmod(n, 256)
First of all you're talking about higher/lower bytes, not bits.Dividing by 256 is the same as shifting rightwards 8 times, so that will basically yield the high byte. Taking the remainder of the division by 256 (through the modulo operator '%') effectively extracts the lower byte, since the result will be < 256 by definition.
Think of bits like they are the "digits" in the binary notation. If you need to take, say, 2 rightmost digits of the number 256, you simply write 256%100, where 100 is 10^2. Likewise, to take 8 rightmost "binary digits", i.e. bits, you have to divide the number by 2^8, i.e. 256.
we require to give the lower bit (identified by lo) of the goal position into the address 0x1e256 is 28, so dividing by 256 meaning rightshifting by 8 bits, giving you the high byte.Take for example a 16-bits number:dividing it by 256 is rightshifting by 8 bits, will give you:The remainder of the division by 256 gives you the lower byte.


Answer URL
https://docs.python.org/3/library/functions.html#divmod
