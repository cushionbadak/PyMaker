Natural Text
I have a loop as follows:Basically, I want to find a line where 'My Expression exists', and pull a number out of that line, which indicates the onset of a trial. I then want to jump to the next line that contains either MyExpression OR MyExpression2, and pull a number from that line which is the offset of my trial. I want to go through my entire file, so I have two lists, one indicating onsets, and one indicating offsets.I know how to do this in Matlab, but in Python I'm not sure how to tell it to look in the next line. Something like if ('MyExpresion' in line+1) OR ('MyExpression2' in line+1)?UPDATE: Sorry for the late reply, but this is what my file might look like:I would want two arrays/lists: [1234, 5234] and [4675, 6666] basically, which correspond to onsets and offsets. I'll play with the current answers and see if any of them do this, thank you!
In a for line in afile: loop's body, the next line has not been read yet; however, you can proceed to read following lines within said loop body.  E.g:Note that this consumes a portion of (or all) what was left in afile.  If you need to walk over that portion again, you need to use itertools.tee to make two "clones" of the afile iterator, and loop on the "clones" instead.  But, from what I understand of your question, that's not necessary for your specific requirements (and it's a bit trickier, so I won't expound on that).So for example, if a.txt is the example file you give:then this sample code:emitsNo idea what is the algorithm you imagine would give, instead,what logical spec would make 4675 be ignored for the first pair but reconsidered as beginning the second pair?  Certainly nothing I can see specified in the text of your Q, so, please edit that text to make your specs correspond to your actual intentions!
File objects are iterators, which means that you can advance them with next:Note that the None in there is a default value to return if the end of the file is reached.  Without it, a StopIteration exception will be raised.
Hope this helps... look for "Expression", and prints the lines in pairs.You should replace line.strip() with your own function to get the number you are looking for.Note: I don't like using indexes when creating the duples but it was simpler than using an iterator.


Answer URL
https://docs.python.org/3/glossary.html#term-iterator
https://docs.python.org/3/library/functions.html#next
