Natural Text
I have researched a bit around this; however, when I tried implementing it into my code, I was unsuccessful. This is what I have so far:ClassA.txt would contain for example:And I want the names to come alphabetically in order. However, when I print the sorted_dict it comes up with:Not only isn't it in order, but also the people who scored 10 for some reason are printed incorrectly (backwards).
sorted(v) will sort the strings alphabetically, returning a list of the sorted characters. This will place 0 before 1 because that's how they are defined (think 0, 1, 2, 3, 4, 5...).Dictionaries are inherently unordered, being a collection of key:value mappings. If you wish to print the dictionary in order, as sorted by the keys, then you can doNote that this won't permanently alter the sorting of the dictionary, if you try print(sorted_dict) after this then the ordering may be unsorted.If you require a permanently sorted dict then you should look up collections.OrderedDict. OrderedDicts only remember the order of insertion though, you can't sort them and then keep the sorted order. Your code could look something like this when using an OrderedDict (note that I've removed the bit about sorting the 10, etc as I don't think that's what you wanted, but if you do you can always add it in).Note: you can ignore the part about s and StringIO, that's just me creating a file-like object for testing the code.


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
