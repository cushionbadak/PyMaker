Natural Text
I have a list of some elements, e.g. [1, 2, 3, 4] and a single object, e.g. 'a'. I want to produce a list of tuples with the elements of the list in the first position and the single object in the second position: [(1, 'a'), (2, 'a'), (3, 'a'), (4, 'a')].I could do it with zip like this:However this gives me a feeling of creating and unnecessary list of repeating element.Another possibility iswhich is very clean and pythonic indeed, but here I do the whole thing "manually". In Haskell I would do something likeIs there any built-in function or trick, either for the zipping with scalar or for something that would enable me to use ordinary zip, i.e. sort-of infinite list?
This is the cloest to your Haskell solution:You could also use generators, which avoid creating a list like comprehensions do:
You can use the built-in map function:
This is a perfect job for the itertools.cycle class.Demo:
You could also use zip_longest with a fillvalue of o:Just be aware that any mutable values used for o won't be copied whether using zip_longest or repeat.



Answer URL
https://docs.python.org/3/library/itertools.html#itertools.repeat
