Natural Text
In python, the normal way to edit the middle of a file usually involves taking the first part of the file, add in what you want, then add in the last half minus the bytes you edited. My question is is there any way in which you can open a file and only edit certain bytes without loading the entire file into memory, and also read bytes from a file without loading the entire file into memory. The files I will be editing will be very large so loading them into variables is slow and inefficent
You can seek and then write, but often seeking and writing around is not that intuitive - especially if you need to modify values (add 1 to byte at 12345678); also writes, reads move pointer around, or that you need to actually make your byte value into bytes([value]) for write and so on.If you've got a 64-bit computer; 64-bit operating system and 64-bit Python - you could put all those bits into use and memory map your whole file into virtual memory with mmap module; with mmap you can access your file as a bytearray-like object (Python 3):(On Python 2, the elements are 8-bit strings of length 1, so you need to use chr(42) and so on)On 32-bit computers the small virtual memory limits the maximum size of a file that can be manipulated in this way to a gigabyteish or even less; on  64-bit computer it can be assumed that you would not have a file too large to be mmapped. P.S. mmap is also very nice for reading big data


Answer URL
https://docs.python.org/3/library/mmap.html
