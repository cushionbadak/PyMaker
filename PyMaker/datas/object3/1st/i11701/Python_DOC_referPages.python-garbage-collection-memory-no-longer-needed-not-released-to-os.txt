Natural Text
I have written an application with flask and uses celery for a long running task. While load testing I noticed that the celery tasks are not releasing memory even after completing the task. So I googled and found this group discussion..https://groups.google.com/forum/#!topic/celery-users/jVc3I3kPtlwIn that discussion it says, thats how python works.Also the article at https://hbfs.wordpress.com/2013/01/08/python-memory-management-part-ii/ says  "But from the OS’s perspective, your program’s size is the total (maximum) memory allocated to Python. Since Python returns memory to the OS on the heap (that allocates other objects than small objects) only on Windows, if you run on Linux, you can only see the total memory used by your program increase."And I use Linux. So I wrote the below script to verify it.The input was a 4MB file. Even after returning from the 'fileopen' function the 4MB memory was not released. I checked htop output while the loop was running, the resident memory stays at 14MB. So unless the process is stopped the memory stays with it.So if the celery worker is not killed after its task is finished it is going to keep the memory for itself. I know I can use max_tasks_per_child config value to kill the process and spawn a new one. Is there any other way to return the memory to OS from a python process?.
I think your measurement method and interpretation is a bit off. You are using ru_maxrss of resource.getrusage, which is the "high watermark" of the process. See this discussion for details on what that means. In short, it is the peak RAM usage of your process, but not necessarily current. Parts of the process could be swapped out etc.It also can mean that the process has freed that 4MiB, but the OS has not reclaimed the memory, because it's faster for the process to allocate new 4MiB if it has the memory mapped already. To make it even more complicated programs can and do use "free lists", lists of blocks of memory that are not in active use, but are not freed. This is also a common trick to make future allocations faster.I wrote a short script to demonstrate the difference between virtual memory usage and max RSS:The results are:It is clear how the ru_maxrss remembers the maximum RSS, but the current usage has dropped in the end.Note on psutil.virtual_memory().used:used: memory used, calculated differently depending on the platform and designed for informational purposes only.


Answer URL
https://docs.python.org/3/library/resource.html#resource.getrusage
