Natural Text
I have a simple script blah.py (using Python 2):If I execute my script by:It prints argument but if I execute script by:error occurs:IndexError...So arguments do not pass to script.python.exe in PATH. Folder with blah.py also in PATH.python.exe is default program to execute *.py files.What is the problem?
When you execute a script without typing "python" in front, you need to know two things about how Windows invokes the program.  First is to find out what kind of file Windows thinks it is: Next, you need to know how Windows is executing things with that extension.  It's associated with the file type "Python.File", so this command shows what it will be doing:So on my machine, when I type "blah.py foo", it will execute this exact command, with no difference in results than if I had typed the full thing myself:If you type the same thing, including the quotation marks, then you'll get results identical to when you just type "blah.py foo".  Now you're in a position to figure out the rest of your problem for yourself.  (Or post more helpful information in your question, like actual cut-and-paste copies of what you see in the console.  Note that people who do that type of thing get their questions voted up, and they get reputation points, and more people are likely to help them with good answers.)Brought In From Comments:Even if assoc and ftype display the correct information, it may happen that the arguments are stripped off. What may help in that case is directly fixing the relevant registry keys for Python. Set the key to: Likely, previously, %* was missing. Similarly, set to the same value. See http://eli.thegreenplace.net/2010/12/14/problem-passing-arguments-to-python-scripts-on-windows/HKEY_CLASSES_ROOT\Applications\python.exe\shell\open\command The registry path may vary, use python26.exe or python.exe or whichever is already in the registry.HKEY_CLASSES_ROOT\py_auto_file\shell\open\command
you should make the default application to handle python files be python.exe.right click a *.py file, select "Open With" dialog.  In there select "python.exe" and check "always use this program for this file type" (something like that).then your python files will always be run using python.exe
Additionally, if you want to be able to run your python scripts without typing the .py (or .pyw) on the end of the file name, you need to add .PY (or .PY;.PYW) to the list of extensions in the PATHEXT environment variable.In Windows 7:right-click on Computerleft-click Propertiesleft-click Advanced system settingsleft-click the Advanced tableft-click Environment Variables...under "system variables" scroll down until you see PATHEXTleft-click on PATHEXT to highlight itleft-click Edit...Edit "Variable value" so that it contains ;.PY (the End key will skip to the end)left-click OKleft-click OKleft-click OKNote #1: command-prompt windows won't see the change w/o being closed and reopened.Note #2: the difference between the .py and .pyw extensions is that the former opens a command prompt when run, and the latter doesn't.On my computer, I added ;.PY;.PYW as the last (lowest-priority) extensions, so the "before" and "after" values of PATHEXT were:before: .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSCafter .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY;.PYWHere are some instructive commands:
How to execute Python scripts in Windows?You could install pylauncher. It is used to launch .py, .pyw, .pyc, .pyo files and supports multiple Python installations:You can run your Python script without specifying .py extension if you have .py, .pyw in PATHEXT environment variable:It adds support for shebang (#! header line) to select desired Python version on Windows if you have multiple versions installed. You could use *nix-compatible syntax #! /usr/bin/env python.You can specify version explicitly e.g., to run using the latest installed Python 3 version:It should also fix your sys.argv issue as a side-effect.
I encountered the same problem but in the context of needing to package my code for Windows users (coming from Linux).My package contains a number of scripts with command line options.I need these scripts to get installed in the appropriate location on Windows users' machines so that they can invoke them from the command line.As the package is supposedly user-friendly, asking my users to change their registry to run these scripts would be impossible.I came across a solution that the folks at Continuum use for Python scripts that come with their Anaconda package -- check out your Anaconda/Scripts directory for examples.For a Python script test, create two files: a test.bat and a test-script.py.test.bat looks as follows (the .bat files in Anaconda\Scripts call python.exe with a relative path which I adapted for my purposes):test-script.py is your actual Python script:If you leave these two files in your local directory you can invoke your Python script through the .bat file by doingIf you copy both files to a location that is on your PATH (such as Anaconda\Scripts) then you can even invoke your script by leaving out the .bat suffixDisclaimer: I have no idea what's going on and how this works and so would appreciate any explanation.
On Windows, To run a python module without typing "python",--> Right click any python(*.py) file--> Set the open with property to "python.exe" --> Check the "always use this program for this file type"--> Append the path of python.exe to variable environment e.g. append C:\Python27 to PATH environment variable.To Run a python module without typing ".py" extension--> Edit PATHEXT system variable and append ".PY" extension to the list.
Found an incredibly useful answer here: How to run different python versions in cmd?I would suggest using the Python Launcher for Windows utility that introduced was into Python 3.3 a while ago. You can also manually download and install it directly from the author's website for use with earlier versions of Python 2 and 3.Regardless of how you obtain it, after installation it will have associated itself with all the standard Python file extensions (i.e. .py, .pyw, .pyc, and .pyo files). You'll not only be able to explicitly control which version is used at the command-prompt, but also on a script-by-script basis by adding Linux/Unix-y shebang #!/usr/bin/env pythonX comments at the beginning of your Python scripts.As J.F. Sebastian suggests, Python Launcher for Windows is the best and default choice for launching different version of Python in Windows. It used to be a third-party tool, but now it is officially supported since Python 3.3.New in version 3.3.The Python launcher for Windows is a utility which aids in the location and execution of different Python versions. It allows scripts (or the command-line) to indicate a preference for a specific Python version, and will locate and execute that version.This is a great tool just use it!
Can you execute python.exe from any map?If you do not, chek if you have proper values for python.exe in PATH enviromentAre you in same directory than blah.py. Check this by issuing command -> edit blah.py and check if you can open this fileEDIT:In that case you can not. (python arg means that you call python.exe whit some parameters which python assume that is filename of script you want to run)You can create bat file whit lines in your path map and run .bat fileExample:In one of Path maps create blah.py.batEdit file and put lineYou can now run blah.py from anywere, becuase you do not need to put .bat extention when running bat files
If that's what I understood, it's like this:COPY (not delete) python.exe and rename to py.exe and execute:
Simply run the command:Assuming the file name is within same folder and Python has already been added to environment variables.


Answer URL
https://docs.python.org/3/using/windows.html#python-launcher-for-windows
