Natural Text
I have a list of floats All should return: What's the most effective way of getting ints with taking the smaller as the base there multiplier? or a multiples of them if it's not possibleExample: should return andshould return:I'm using the value / min(l1) but it wont work for the second case and third case
You could convert all of the numbers to integers, then divide each by their greatest common divisor (GCD). It's a good idea to avoid floating point numbers due to their inability to represent many decimals exactly. The fractions module is perfect for this: it can handle both decimals and rational numbers like 1/3 and 2/7.This converts each number to a rational fraction, then multiplies them by the least common multiple (LCM) of their denominators. That effectively scales them up so they're all integers. Then it divides them by their collective GCD, scaling them down as much as possible.Example:(Using limit_denominator() allows floats to be passed in, even inexact ones. It's not entirely recommended, but you could omit the quotes and pass 0.2 in place of '0.2' or 1/3 in place of '1/3'.)
In integers, you're looking for the greatest common divisor.  There are many algorithms to find it.  Then you need to transfer that logic over to floats, keeping in mind that floating point arithmetic means that something close to zero should probably be considered zero:prints out:Python 3.5 introduced math.isclose, which you could use instead of iszero.  It also moved gcd from fractions to math.  The problem with the builtin gcd is that it doesn't account for floating points being close to zero, and everything blows up.


Answer URL
https://docs.python.org/3/library/fractions.html#fractions.gcd
https://docs.python.org/3/library/fractions.html
https://docs.python.org/3/library/fractions.html
