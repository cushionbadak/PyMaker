Natural Text
I want to merge 2 arrays in Python and add values based on a keyExample:print(Groceries) will return:Is there any way I can merge them in a way where the result would instead be:(Note that it states 13 Bananas instead of 2 instances of Bananas)
For counting jobs, use a Counter:The counter needs proper keys to differentiate items, so form (group, item) tuples from your original dict format as keys, quantity as value:This method has a caveat though: if your list A or B contains multiple records for the same item, this will not work correctly as the dictionary comprehension will "remember" only the latest. If you know this is a possibility, you can revert to plain old for-looping and adding up:To get your original format back create a list of small dictionaries from counter's items:
Use a support method to do the merging and use a dictionary to store the results. This will do what you want but it will loose the ordering of the list. I am not sure if you need that.[{'group': 'Fruit', 'quantity': 13, 'item': 'Banana'}, {'group':  'Vegetable', 'quantity': 1, 'item': 'Celery'}, {'group': 'Vegetable',  'quantity': 1, 'item': 'Carrot'}]
You can loop through the list and add the quantity if value exists. This may help
Am inefficient way would be to search the list for an existing dictionary, matching the 'group' and 'item':This is inefficient because it uses next to do a linear search through all entries in Groceries. If you had millions of items it would become very slow.If you restructure your data to be dictionary lookups based upon groups and items it will be much quicker. You need a dictionary of dictionaries. You can also use a defaultdict to automatically have value 0 for missing items:This allows you to create groups and items with quantity 0:First create using A:Then add B:However, because you get the default you could add A and B all in one loop, by chaining them together (using chain):


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
