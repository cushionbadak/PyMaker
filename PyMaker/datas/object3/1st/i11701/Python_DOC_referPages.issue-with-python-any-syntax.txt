Natural Text
I have some problem with the "any" syntax. I have two lists.I want to find if elements in seq exist in mainseq.This gives me "a" and "b" as expected. But when I remove the "any" syntax, I get all the values in seq, even though "c" and "d" is not there in mainseq.What is happening behind the scenes with and WITHOUT the "any" function? Please help.
To understand what is happening you could debug it by printing an equivalent list comprehension and the boolean representation and any:But remember that a generator will always evaluate to True because a generator has no explicit boolean representation and doesn't have a length (see Truth-value-testing in the official documentation).any on the other hand consumes the generator and returns True only if any element is True. This is the case for each == a and each == b. So the if condition will not always be triggered.
any returns a boolean value True or False.Your statement (each in halum for halum in mainseq) returns a generator which evaluates to truthy value, hence code always falls in the if block.Here is a more verbose code explaining this: http://ideone.com/AQ7dRsOutputs:
Any returns true if the list given has at least 1 element in it. You can achieve what you want by doing this instead:
(each in halum for halum in mainseq) is a generator expression.  A generator expression is a truthy value.  Using just that in an if statement will always be True, so the suite will always be executed.  any() searches an iterable for any value that is truthy.  Therefore, using it will execute the suite only if any of the results of that generator expression is True.
any() returns True if any element of the iterable is true. If the iterable is empty, return False.So if any(each in halum for halum in mainseq): looks at elements inside.iterations where each is "a" or "b" contains those elements and therefore if statement is true. For cases of "c" and "d", iterable is empty, producing false.When you remove any(), you are no longer looking inside the iterable but simply asking whether iterable itself is not true.if (each in halum for halum in mainseq): will always be true since it always will produce a valid generator object.


Answer URL
https://docs.python.org/3/reference/expressions.html#generator-expressions
https://docs.python.org/3/library/functions.html#any
