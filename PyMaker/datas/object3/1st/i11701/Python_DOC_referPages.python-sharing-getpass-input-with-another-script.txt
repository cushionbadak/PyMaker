Natural Text
I'm trying to make a script consisting of multiple modules, I need su/sudo for these scripts, but instead of having the user input their password every single time, I just want to ask for it once and be done with it. (I also don't want to store the password in plaintext because it's intended to be used on different machines with different users/passwords)Okay, so this is what I've done so far but I keep getting errors. I'm not sure if any of it is correct, I am new to python.in my file, main.py: and in test.py:when main calls test, it tries to run getpass again, and I get IOError Errno 5.I guess what i need is how to save suStart as it's own string? I thought using suPass would do that, but it does not.Thanks!
suPass is not defined in the scope of test.py, only main.py. In order for test.py to be aware of the variable suPass you need to pass it in as an argument when initializing the subprocess, so, pass it in along with the args and change test.py to reflect this:Now, in your subprocess call, add suPass to your arguments:Now, if you would like to somehow store this password securely, you could use hashlib, binascii and os.urandom to generate a password hash:new_hash and salt can be saved to a file (or database, or another storage medium), and you can encrypt the user's password entry at a later time in a new program, then compare the hash to what's stored in the file.Here is the Python Docs Example.
Here is a simple but effective approach: in order for test.py to be aware of the variable suPass you need to share this later one between the 2 modules.From How do I share global variables across modules?The canonical way to share information across modules within a single  program is to create a special module (often called config or cfg).  Just import the config module in all modules of your application; the  module then becomes available as a global name. Because there is only  one instance of each module, any changes made to the module object get  reflected everywhere.Thus here are your modules:main.pytest.pyNote how subPass is accessed in test.py: calling the module main.py then the variable itself (main.suPass)


Answer URL
https://docs.python.org/3/library/hashlib.html#key-derivation
