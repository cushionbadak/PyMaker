Natural Text
I have a large hierarchy of classes stemming from Function class (for example SineFunction would be a child), and all of them implement the __call__ method, as well as other methods (for example derivation or more specialized numerical methods). What is the cleanest way of adding common logic to each of these __call__ methods based on the type of the input? Formally, I'd like to have something like for each child class of Function. I could add super() at each implementation of __call__ but that would be painful. Anything easier to achieve this?
How about something like this?The child classes each define _call, and the fallback logic resides in the parent class.An example:Editorializing:As an aside, I don't know much about your particular use case, but my understanding is that isinstance is very often not the ideal choice, and it's better to do some sort of duck typing. In which case, you'd probably want to replace the if(isinstance(... statement with a try/except block where you just use the interface as if x implements the BaseFunction interface.


Answer URL
https://docs.python.org/3/whatsnew/3.4.html#whatsnew-singledispatch
