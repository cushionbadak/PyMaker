Natural Text
How does an int in python avoid being an object but yet is one:If I do the following:If I type in 10. it produces 10.0 whereas anything such as 10.__ anything __ produces a syntax error. It does make sense since a float would be considered as 10.5 buthow is this achieved/implemented? how can I call the int methods on an int?
The Python tokenizer is greedy, it always tries to match the longest token possible at any given position; otherwise it could think that 10.e+123 is the same as (10).e + 123.In the case of 10.__add__(20) it sees the following tokens:i.e., the . was considered to be a part of the number literal, e.g. a float. If you parenthesize the number ((10).__add__(20)), you'll get:Similarly, just adding a space between the number and the dot (10 .) would work here.Here the . is tokenized as a separate operator. If a float constant would do, then you could actually type:This is tokenized as float literal 10. followed by a . followed by identifier __add__ and so forth.The silly iter().next needs to be iter().__next__ on Python 3. The tokenize.tokenize requires an argument that is a readline -like function; when called, it should return a line of program input.
Just use parenthesis around the number:
It's a matter of lexing. You can wrap the number in parenthesis to access members, e.g. (10).__add__(20)The expression 10.__add__(20) is parsed/lexed as (10.) __add__(20).


Answer URL
https://docs.python.org/3/library/tokenize.html#tokenize.tokenize
