Natural Text
I'm working with the json module creating a json file containing entries of the likeHowever, in the json-file created the fields are in the wrong orderwhich is a problem because the substitions for the %s-strings are now incorrect.How can I force the dumps function to keep the given order? 
Like the other answers correctly state, before Python 3.6, dictionaries are unordered.That said, JSON is also supposed to have unordered mappings, so in principle it does not make much sense to store ordered dictionaries in JSON. Concretely, this means that upon reading a JSON object, the order of the returned keys can be arbitrary.A good way of preserving the order of a mapping (like a Python OrderedDict) in JSON is therefore to output an array of (key, value) pairs that you convert back to an ordered mapping upon reading:(Note the way the ordered dictionary is constructed from a list of (key, value) pairs: OrderedDict({1: 10, 2: 20}) would not work: its keys are not necessarily ordered as in the dictionary literal, since the literal creates a Python dictionary whose keys are unordered.)PS: Starting with Python 3.1, the json modules offers a hook for automatically converting a list of pairs (like above) to something else like an OrderedDict.
You can choose OrderedDict to be used instead of an ordinary dict when creating a json object to remember the order of insertions:
This is a dictionary, and dictionaries don't keep order.You can use OrderedDict instead.You could also add the sort_keys=False parameter:
You cannot create an OrderedDict from a dict because order has already changed the moment you create a dictionary.So best way is to use tuples to create a OrderedDict


Answer URL
https://docs.python.org/3/library/json.html#json.load
