Natural Text
I have a problem with a little server-client assignment in python 2.7.The client can send 5 types of requests to the server:get the server's IPget contents of a directory on the serverrun cmd command on the server and get the outputopen a calculator on the serverdisconnectThis is the error I get:Code:Doesn't the substring contain 4 chars including the null?Would appreciate explanation about this error + how to solve it.Entire server code:Entire client code:
This is explained in a big box at the very top of the docs:Note By default, the result of packing a given C struct includes pad bytes in order to maintain proper alignment for the C types involved; similarly, alignment is taken into account when unpacking. This behavior is chosen so that the bytes of a packed struct correspond exactly to the layout in memory of the corresponding C struct. To handle platform-independent data formats or omit implicit pad bytes, use standard size and alignment instead of native size and alignment: see Byte Order, Size, and Alignment for details.So, on most platforms, 'BH' is 4 bytes—1 byte for the B, 1 byte of padding so the H ends up aligned, and 2 bytes for the H. But on some platforms it might be 3 bytes, or 6. For that matter, B and H aren't even guaranteed to be 1 and 2 bytes respectively in native format, so it could be 17 bytes.If you don't want that, because you're using this for a network protocol rather than for accessing C structs in memory, don't use the default native order, padding, and alignment. On all platforms, '>BH' is 3 bytes—1 byte for the B, and 2 for the H. (And the H is always in network order, even if one of the two machines communicating is little-endian.)If you do want that, then use [:struct.calcsize('BH')] instead of [:3], to make sure you read the right number of bytes for your platform. But honestly, if you do want that, you're shouldn't.
Why would there be any null included? The slice includes 3 characters, which is exactly how many you specified — indexed 0 to 2.Instead, slice it with client_structs[:4]. (Or, as abarnert points out, slice [:3] or [:struct.calcsize('>BH')] and pack/unpack with ">BH" to avoid endianness problems.)Python is not as tricky about most fencepost errors as most C-ish languages, so you may have inadvertently gotten too clever for yourself.


Answer URL
https://docs.python.org/3/library/struct.html
https://docs.python.org/3/library/struct.html#struct-alignment
