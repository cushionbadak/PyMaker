Natural Text
python -V is about 40% faster than python -c 'import sys; print(".".join(map(str, sys.version_info[:3])))'.But is python -V considered to be as stable?At least it used to print to stderr before Python 3.4 (http://bugs.python.org/issue18338), which would require you to use python -V 2>&1 (which is a bit slower already).The main question however is: what's the fastest way to get the python version?Anything better than python -V 2>&1 | cut -f2 -d' '?
You've got two questions here. I'll skip the "what's the fastest way" and just answer the main question.But is python -V considered to be as stable?Definitely not. All that's documented is:Print the Python version number and exit. Example output could be:As you noted yourself, it's not only not documented where it gets printed, but they changed it between 3.3 and 3.4.Nothing is guaranteed about the format. And even the example in the docs isn't the format you wanted. (I'm assuming the [:3] in your other example means you actually need 3.0.2 rather than 3.0).In practice, your script doesn't even get the X.Y.Z version for every popular Python interpreter.PyPy reports two version numbers, the version of the Python language and the version of the PyPy interpreter. If I run your script in a PyPy virtualenv, it gives me two values, 2.7.8 and 2.5.0. In this case, the one you want is the first one, but how far do you trust that "in this case"?Jython reports only one version number, which is the one you want for the first two digits in 2.2, 2.5, and pre-2.7, but there were pre-2.3 versions that didn't support most of Python 2.3 but still called themselves 2.3.0.By contrast, sys.version_info is documented to give you three integers that are exactly what you want. (Well, as long as you don't need Python 1.5 compatibility, because version_info didn't exist until 1.6/2.0.)Also notice that the docs specifically say not to extract version information out of sys.version, which I think is more stable than python -V (as in all the major implementations interpret the wording to mean that it must actually start with the Python version number, even though it's a bit vague).But you don't really care whether it's "as stable", you just care whether it's "stable enough". And the answer to that is at least partly subjective and very use-dependent. If it works on every Python version and implementation you care about (which assumes you know and can test all the ones you care aboutâ€¦), it's stable enough, right?
I think that if you want to programmatically determine the Python interpreter version that you should just import sys and read sys.version_info.


Answer URL
https://docs.python.org/3/using/cmdline.html#cmdoption-V
https://docs.python.org/3/library/sys.html#sys.version_info
https://docs.python.org/3/using/cmdline.html#cmdoption-V
