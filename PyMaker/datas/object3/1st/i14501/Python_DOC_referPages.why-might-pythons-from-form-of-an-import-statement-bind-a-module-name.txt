Natural Text
I have a Python project with the following structure:All of the modules are empty except testapp/api/__init__.py which has the following code:and testapp/api/utils.py which defines x:Now from the root I import testapp.api:The result of the import surprises me, because it shows that the second import statement has overwritten utils. Yet the docs state that the from statement will not bind a module name:The from form does not bind the module name: it goes through the list  of identifiers, looks each one of them up in the module found in step  (1), and binds the name in the local namespace to the object thus  found.And indeed, when in a terminal I use a from ... import ... statement, no module names are introduced:I suspect this has to do with Python, at the time of the second import statement, trying to import testapp.api.utils which refers to testapp.utils and failing but I'm not certain.What is happening here?
From the import system documentation:When a submodule is loaded using any mechanism (e.g. importlib APIs,  the import or import-from statements, or built-in __import__())  a binding is placed in the parent module’s namespace to the submodule  object. For example, if package spam has a submodule foo, after  importing spam.foo, spam will have an attribute foo which is  bound to the submodule. Let’s say you have the following directory  structure:and spam/__init__.py has the following lines in it:then executing the following puts a name binding to foo and bar in  the spam module:Given Python’s familiar name binding rules this might seem surprising,  but it’s actually a fundamental feature of the import system. The  invariant holding is that if you have sys.modules['spam'] and  sys.modules['spam.foo'] (as you would after the above import), the  latter must appear as the foo attribute of the former.If you do from testapp.api.utils import x, the import statement will not load utils into the local namespace. However, the import machinery will load utils into the testapp.api namespace, to make further imports work right. It just happens that in your case, testapp.api is also the local namespace, so you're getting a surprise.


Answer URL
https://docs.python.org/3/reference/import.html#submodules
