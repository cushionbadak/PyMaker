Natural Text
I am still having troubles adjusting to 'more pythonian ways' of writing code sometimes ... right now I am iterating over some values (x). I have many arrays and I always compare the first value of all the arrays, the second value ... shortly: a mean value of all the entries in an array by position in the array.I am pretty sure that can be done super beautiful. I know I could change the second last line to something like sum_mean_x.append(mean_x.mean) but, I guess I miss some serious magic this way.
Use the numpy package for numeric processing. Suppose you have the following three lists in plain Python:And you want to get the mean value for each position. Arrange the vectors in a single array:Then you can get the per-column mean like this:
It sounds like what you're trying to do is treat your list of lists are a 2D array where each list is a row, and then average each column.The obvious way to do this is to use NumPy, make it an actual 2D array, and just call mean by columns. See simleo's answer, which is better than what I was going to add here. :)But if you want to stick with lists of lists, going by column effectively means transposing, and that means zip:That statistics.mean is only in the stdlib in 3.4+, but it's based on stats on PyPI, and if yur Python is too old even for that, you can write it on your own. Getting the error handling right on the edge cases is tricky, so you probably want to look at the code from statistics, but if you're only dealing with values near 1, you can just do it the obvious way:

You mean something like


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/statistics.html#statistics.mean
https://docs.python.org/3/library/statistics.html#statistics.mean
