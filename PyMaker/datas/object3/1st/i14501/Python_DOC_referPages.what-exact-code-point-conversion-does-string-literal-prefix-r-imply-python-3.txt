Natural Text
What Unicode code-point conversion does the stringprefix "r" (or "R") actually perform on string literals in Python 3 (literals/files parsed as UTF-8)?I am using Python 3.4 on Windows 7.I want to to parse this "evil" path on Windows:With the prefix "r", I get:My question: How do I mimic (exactly) the "raw" code-point mapping/conversion on a Unicode string object in memory (not a string literal)? I could use str.translate and str.maketrans, but what exact mapping are we talking about then?Context: Generally, I want to be to support all kinds of weird directory names on Windows (and other platforms) being handed to my application as strings via command line parameters. How can I?
What Unicode code-point conversion does the string prefix "r" (or "R") actually perform on string literals in Python 3 (literals/files parsed as UTF-8)?Python 3 native strings are already UTF-8 (by default), no conversions are done with the r prefix.  Without the r prefix then conversions are done to characters prefixed \.  See hereSo, if you have (what you call) weird Windows path names, then always use raw strings, or use a / for a directory separator instead.  However you only need to worry about those that are hard-coded because they are parsed by python, those entered by the user should be fine.Edit:if you do this:Double back-slashing has the same effect as using raw strings.
When you type a string literal like this in Python source code, you need to either double the backslashes or use r for a raw string.This has nothing to do with Unicode. It's the Python interpreter which is evaluating backslash escape sequences in string literals.This is only the case with string literals in your source code. If you read a string from the command line or from a file you don't have to worry about any of this. Python does not interpret backslashes in these cases.


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.translate
https://docs.python.org/3/library/stdtypes.html#str.maketrans
