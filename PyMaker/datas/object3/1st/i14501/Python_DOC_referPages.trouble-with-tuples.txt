Natural Text
I'm doing some OOP in Python and I'm having trouble when the user inputs a tuple as one of the arguments. Here's the code:I tried thought initializing  the inch to 0 would help thing out but that didn't work. Tuples also don't support indexing so that option was also non-existent. I feel like the answer is simple and I'm just overthinking it. The test code that I'm using is: My code works as expected when an int is input but, again, I can't seem to figure it out when a tuple is input. Any ideas?
Are you really being passed a tuple? It looks to me that your constructor should simply be:That works if you create your object with any of these (because you have a default value for the inch argument): etc. Note that in the second and third instances, you still aren't being passed a tuple. In order to actually receive a tuple, you'd need to call it like this:or use the '*' operator in the constructor declaration.
Tuples do support indexing. They don't support index assignment, because they are immutable, but do support index access.Your code isn't working because your code is designed to accept the tuple in as ft. It isn't doing anything to int, which is an entirely different argument. All you need to do is use indexing instead:However, this only works if you actually pass in a tuple, which your test code never does! Height(5,6) is just passing in two arguments. For a tuple input, you'd need Height((5,6)).As others have noted, the way you are calling it actually makes more sense than using a tuple. To get that working, you just need to see if your second argument is being used (and let's change to v1 and v2, for reasons I'll get to later):But this has a usability problem: the meaning of the first argument depends on whether there is a second argument there! That's why naming it ft is particularly bad: if the second argument isn't provided, it's actually in inches!One solution to this is to make both arguments have names, allowing the user to choose the ones they want to use:Then you have many choices, and less chance for confusion:
You have numerous problems in your code, from formatting to functionality. Most important is this:so if the user passes a number in feet, it's assumed to actually be in inches? Why?!I think you are fundamentally mistaking what happens when you call e.g.Inside __init__, this effectively sets ft = 5 and inch = 10, not ft = (5, 10).Here's how I'd have done it:This allows any of the following to work correctly:Note also use of str.format and compliance with the style guide. Another alternative would be to raise an error if inches > 11 and feet > 0, as that is potentially erroneous input. You might also want to look into emulating numeric types.


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.format
https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types
