Natural Text
Here is my code. I'm not exactly sure if I need a counter for this to work. The answer should be 'iiii'.
Correcting your codeThe line if char == vowels: is wrong. It has to be if char in vowels:. This is because you need to check if that particular character is present in the list of vowels. Apart from that you need to print(char,end = '') (in python3) to print the output as iiii all in one line.The final program will be likeAnd the output will beOther ways includeUsing in a stringAs simple as it looks, the statement if char in 'aeiou' checks if char is present in the string aeiou. A list comprehensionThis list comprehension will return a list that will contain the characters only if the character is in aeiou A generator expressionThis gen exp will return a generator than will return the characters only if the character is in aeiouRegular ExpressionsYou can use re.findall to discover only the vowels in your string. The codewill return a list of vowels found in the string i.e. ['i', 'i', 'i', 'i']. So now we can use str.join and then use str.translate and maketransFor this technique you will need to store a map which matches each of the non vowels to a None type. For this you can use string.ascii_lowecase. The code to make the map is this will return the mapping. Do store it in a variable (here m for map)This will remove all the non aeiou characters from the string. Using dict.fromkeysYou can use dict.fromkeys along with sys.maxunicode. But remember to import sys first! and now use str.translate. Using bytearrayAs mentioned by J.F.Sebastian in the comments below, you can create a bytearray of lower case consonants by usingUsing this we can translate the word ,which will return b'iiii'. This can easily be converted to str by using decode i.e. b'iiii'.decode("ascii"). Using bytesbytes returns an bytes object and is the immutable version of bytearray. (It is Python 3 specific)Using this we can translate the word ,which will return b'iiii'. This can easily be converted to str by using decode i.e. b'iiii'.decode("ascii"). Timing comparisonPython 3The timings in sorted orderAs you can see the final method using bytes is the fastest. Python 3.5The timings in sorted order
You can try pythonic way like this,Function;
== tests for equality. You are looking to see if any of the characters exist in the string that are in your list 'vowels'. To do that, you can simply use in such as below.Additionally, I see you have a 'vowels_found' variable but are not utilizing it. Below one example how you can solve this:Your output would then be:


Answer URL
https://docs.python.org/3/howto/regex.html
https://docs.python.org/3/library/stdtypes.html#str.maketrans
https://docs.python.org/3/library/stdtypes.html#dict.fromkeys
https://docs.python.org/3/library/sys.html#sys.maxunicode
https://docs.python.org/3/library/functions.html#bytearray
https://docs.python.org/3/library/functions.html#bytes
