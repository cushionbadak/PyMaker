Natural Text
This question already has an answer here:Getting a map() to return a list in Python 3.x                    9 answers                In Python 2 I can do the following:In Python 3 in get a KeyError:I would like to achieve the same behavior in Python 3 as in Python 2.I understand that map in Python 3 will return an iterator (lazy evaluation and whatnot), which has to be iterated for the dictionary to be updated.I had assumed the d['c'] key lookup would trigger the map iteration somehow, which is not the case.Is there a pythonic way to achieve this behavior without writing a for loop,which I find to be verbose compared to map.I have thought of using list comprehensions:But it does not seem pythonic.
As you note, map in Python 3 creates an iterator, which doesn't (in and of itself) cause any updates to occur:To force the map to be fully evaluated, you could pass it to list explicitly:However, as the relevant section of What's new in Python 3 puts it:Particularly tricky is map() invoked for the side effects of the  function; the correct transformation is to use a regular for loop  (since creating a list would just be wasteful).In your case, this would look like:which doesn't result in an unnecessary list of None.
Alongside the @jonrsharpe's explanation that explains the problem clearly In Python 3 you can use collections.ChainMap for such tasks:But note that if there are duplicate keys, the values from the first mapping get used.Read more about the advantages of using ChainMap :What is the purpose of collections.ChainMap?


Answer URL
https://docs.python.org/3/whatsnew/3.0.html#views-and-iterators-instead-of-lists
