Natural Text
I have a problem with a little server-client assignment in python 2.7.The client can send 5 types of requests to the server:get the server's ipget contents of a directory on the serverrun cmd command on the server and get the outputopen a calculator on the serverdisconnectbasically, this is the error I get:Would appreciate explanation about this error + how to solve it.server code:client code:
I think the problem is this:The data the client sends over appears to be arbitrary binary data, not a struct format string. You can't call calcsize on that.For example, if I select 1 on the client, it will pack the message code, 1, as a byte, and the number 0 as a short, so it'll send the b'\x01\x00\x00'. But on the server, you receive that and try to use it as a struct format. So, you get an error saying that b'\x01' is not a valid format code.Since you've given us a ton of non-working code with no explanation of how it's supposed to work, it's hard to guess what you should be doing here, only that, whatever it is you want, this can't be the way to do it.It looks like your format is always a 1-byte code, a 2-byte length, and then a bunch of arbitrary characters matching that length. If so, the way to parse that would be something like this:Although really, there's not much point to using pack and unpack to pack a string of bytes; you're just going to get back the same thing that was already in buffer[3:], and on the other side you're just packing the path or whatever other thing it is into itself.Anyway, again, this is just a guess, because I don't actually know how you expected your code to work, so this may not be what you wanted it to do.Meanwhile, you've got at least one other serious problem that you need to fix. TCP sockets are byte streams, not message streams. When you do a send from the client, it may show up split across two recvs on the server, or merged with a previous send. You can't just recv and assume you have an entire message.The worst thing about this problem is that when you're testing with localhost sockets on a machine that's not under load, it "works" 99.9999% of the time, meaning you may not realize you have a problem. But then, as soon as you try to deploy it on the internet or run it when your machine is busy, it starts failing all over the place, and only then do you realize that to debug the problem you have to write a huge chunk of code, and often restructure your whole program.You seem to have designed a protocol that contains enough information to split the messages off the stream. But you have to actually do that, not just expect it to happen like magic.


Answer URL
https://docs.python.org/3/library/struct.html#struct.calcsize
