Natural Text
From what I have researched most operators and methods can be overridden when creating a class in python. By using __add__(self, other) and others for example.My "problem" (more like I don't quite understand how it is done) is for verifying is something is in my class I have to obviously use __contains__(self, theThing).Alas I thought this should return a boolean value in the code itself, but from example code I have seen, like this:What I am returning is therefore a tuple containing the Id of where said item is. Could someone explain why this is done instead of returning True or False? And if so, shouldn't it be implicitly possible to get the index of an item in a structure by just using in?Thanks :D
For python2 __contains__ or python3 __contains__ both should return true or false. And now the question is what is True and what is False. Truth value testing. The following values are considered false:NoneFalsezero of any numeric type, for example, 0, 0.0, 0j.any empty sequence, for example, '', (), [].any empty mapping, for example, {}.instances of user-defined classes, if the class defines a bool() or len() method, when that method returns the integer zero or bool value False.
__contains__()  is expected to return a boolean value. In your case, __contains__() is returning a list with any tree nodes that match posORname. Thus, it's basically just a lazy way of implementing __contains__(), because in a boolean context:An empty list is equivalent to False.A non-empty list is equivalent to True.While you could potentially have __contains__() return a data structure with the index or ID of the matching tree node, the in operator doesn't care; it only exists to check whether or not an item is contained by an object. Also, __contains__() is not intended to be called directly, so relying on it to return such information would be an abuse of the __contains__() method.Instead, you would be better off implementing an separate method for getting the index/id of a node.
The result of __contains__ is converted to a boolean according to the usual rules, so that, e.g., empty lists count as False while lists with something in them count as True.  So for your example, if the list has anything in it --- that is, any items match the criteria in that list comprehension --- then the in test will be True.This auto-conversion-to-bool behavior does not appear to be explicitly documented, and is different from other operators (like < and >), which return what they return without converting to bool.  There is some discussion of the behavior here.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__contains__
https://docs.python.org/3/library/stdtypes.html?highlight=truth#truth-value-testing
