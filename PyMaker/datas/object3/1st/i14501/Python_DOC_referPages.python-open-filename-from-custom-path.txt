Natural Text
Similar to the system path, I want to offer some convenience in my code allowing a user to specify a file name that could be in one of a handful of paths.Say I had two or more config pathsAnd my user wants to open bar, (AKA bar.baz)Is there a convenient build in way to let open('bar') or open('bar.baz') automatically search these paths for that file in LTR order of precedence? Eg, will temporary adjusting my sys.path to only be these directories do this for me?Else, how would you suggest implementing a PATH-like searching open-wrapper?
open doesn't get into that kind of logic. If you want, write a wrapper function that uses os.path.join to join each member of sys.path to the parameter filename, and tries to open them in order, handling the error that occurs when no such file is found. I'll add that, as another user stated, this is kind of a misuse of sys.path, but this function would work for any list of paths. Indeed, maybe the nicest option is to use the environment variables suggested by another user to specify a colon-delimited list of config directories, which you then parse and use within your search function. 
As other people already mentioned: sys.path only affects the module search path, i.e. it's relevant for importing Python modules, but not at all for open().I would suggest separating the logic for searching the paths in order of precedence and opening the file, because that way it's easier to test and read.I would do something like this:
environmental variablessay your app is named foo ... in the readme tell the user to use the FOO_PATH environmental variable to specify the extra pathsthen inside your app do something likeyou could wrap it into a generic functionthen you could use it just like normal open
Extract from Python Standard Library documentation for open built-in function:open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)...file is either a string or bytes object giving the pathname (absolute or relative to the current working directory) of the file to be opened ...Explicitely, open does not bring anything to automagically find a file : if path is not absolute, it is only searched in current directory.So you will have to use a custom function or a custom class for that. For example:That means that a file opener will keep its own path, will be initialized by default with current path, will have methods to set, append to or extend its path, and will normaly raise a FileNotFoundError is a file is not found in any of the directories listed in its path.Usage :


Answer URL
https://docs.python.org/3/library/functions.html#open
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch
