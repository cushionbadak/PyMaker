Natural Text
Lets say I have a list like this:And I have a function let's say I want to apply the F function to each sublist of the F function can compute some score about two lists. How can apply this F function to each list of list_of_lists and return each score in a new list like this:I tried with the map function the following:
You can use the builtin map to do this. So if the function you want to apply is len, you would do:In Python3, the above returns a map iterator, so you will need an explicit list call:If you are looking to write some code for this which has to be compatible in both Python2 and Python3, list comprehensions are the way to go. Something like:will work in both Python 2 and 3 without any changes.However, if your input list_of_lists is huge, using map in Python3 would make more sense because the iterator will be much faster.
How aboutwhich will iterate over list_of_lists, call F with each sublist as an argument, then generate a list of the results.If you want to use the sublists as all the arguments to F you could do it slightly differently as
You can use a list comprehension, like thisFor example,Note: Though list comprehensions look like a way to apply a function to all the elements, its main purpose is to construct a new list. So, if you don't want to construct a new list, then just iterate with for loop and call the function.Apart from that, you can use the map function in Python 2.7, to apply a function to all the elements and construct a list. For example,But, map returns a map iterator object in Python 3.x. So, you need to explicitly convert that to a list, like thisYou might want to read about, what Guido thinks about map in this post.Basically, map would more often demand you to create a new function (mostly people create a lambda function). But in many cases, list comprehension avoids that.
Something that works on arbitrarily nested lists, e.g. [[1,2],[[5]],[7,[8,[9,11]]]] :here is an example of running this:and here is how to do the same only on selected levels:getting e.g.there are some optimisations to do here, by avoiding passing f and levelsaround (making the recursive function an inner function in a wrapper,so that it can use f and levels from the outer scope), but that's minor. (Note that this is Python 2, for Python 3 you need to replace map with something else).For a more generic input, the following would do the trick:So now also the following sort of works:(things get slightly rewritten, as map() always produces lists...)
Map is your friend! map takes a function and an iterable (list, for example) and applies the function on each element of the list.OutputIf you wanted to do more granular calculation on elements of the sublist, you can nest the map:OutputAnother possible approach (also from functional programming) are list comprehensions. List comprehension is a way of constructing a list from iterable in Python. The syntax is [element for element in iterable]. Any computation can be done on the element, someans that the resulting list will be a list of elements, where each element is the result of function f. Like map, list comprehension can be further nested, resulting in a nested element function application.Output


Answer URL
https://docs.python.org/3/library/functions.html#map
