Natural Text
My scenario: I am reading a csv file. I want to have access to both a dictionary of the fields generated by each line, and the raw, un-parsed line. The goal is ultimately to do some processing on the fields, use the result to decide which lines I am interested in, and write those lines only into an output file. An easy solution, involving reading the file twice looks something like:Any better suggestions? Edit: to be more specific about the usage scenario. I intended to index the lines by some of the data in the dict, and then use this index to find lines I am interested in. Something like:and then later on 
I ended up wrapping the file with an object that saves the last line read, and the handing this object to the DictReader. This could be then used this way:Or I can implement dict_and_row:This also allows access to other properties such as the number of characters read.Not sure that's the best solution but it does have the advantage of retaining access to strings as they were originally read from the file.     
You could use Pandas which is an excellent library to do such kind of processing...
This is similar to something that I had to do at one point.  I needed to put rows of properly-formatted CSV data into a list, manipulate it, and then save it.  I used io.StringIO() to get CSV to write to a list, then passed that back.  Without your data, I can't be 100% certain, but this should work.  Note that, rather than reading the file in twice, I'm reading it in once and then writing the relevant lines back into CSV format.


Answer URL
https://docs.python.org/3/library/io.html#io.StringIO
