Natural Text
I've stumbled across some odd python (2.7) import behaviour, which, whilst easy to work around, has me scratching my head.Given the following folder structure:Where test/package/__init__.py contains the followingAnd test/package/x.py contains the followingWhy would running import test.package from a REPL result in the following output?I would have expected x to reference the top level x module, however what the second import does instead, is to import the whole local x module (not just hello as I expected), effectively trampling on the first import.Can anyone explain the mechanics of the import here?
The from .x import name realizes that test.package.x needs to be a module. It then checks the corresponding entry in sys.modules; if it is found there, then sys.modules['test.package.x'].hello is imported into the calling module.However, if sys.modules['test.package.x'] does not exist yet, the module is loaded; and as the last step of loading the sys.modules['test.package'].x is set to point to the newly loaded module, even if you explicitly did not ask for it. Thus the second import overrides the name of the first import.This is by design, otherwiseandwouldn't be interchangeable.I am unable to find good documentation on this behaviour in the Python 2 documentation, but the Python 3 behaviour is essentially the same in this case:When a submodule is loaded using any mechanism (e.g. importlib APIs, the import or import-from statements, or built-in  __import__()) a binding is placed in the parent moduleâ€™s namespace to the submodule object. For example, if package spam has a submodule foo, after importing spam.foo, spam will have an attribute foo which is bound to the submodule.[...]The invariant holding is that if you have sys.modules['spam'] and sys.modules['spam.foo'] (as you would after the above import), the latter must appear as the foo attribute of the former.


Answer URL
https://docs.python.org/3/reference/import.html#submodules
