Natural Text
If I have a dictionary in a dictionary, how can I ask for a key in constant time? For example:This doesn't work:
Use a list comprehension:d.items() gives you a sequence of (key, value) pairs, where the value is the nested dictionary. The list comprehension filters these by matching the hobby variable to the nested 'Hobby' key, producing a list of the names for which the filter test returns True.You cannot ask for the keys in constant time, because that number is variable.Demo:Note that the returned list of keys is in arbitrary order, because dictionaries have no set ordering. You cannot simply test that list against another list and expect it to be equal every single time, because lists do have order. The exact order depends on the Python hash seed and the insertion and deletion history of the dictionary.You may want to return a set instead; sets do not have ordering either and better reflect the nature of the matching keys returned:after which your assertion would become:
This should work:For example:Result:
If you need to make lots of these queries in constant time, you have to change to an appropriate data structure. For example:(Notice that I used a set, not a list; Martijn Pieters' answer explains why.)Now:Simple, and efficient.Of course building the data structure doesn't take constant time; it obviously has to iterate over every sub element of every element of your whole dict. But you only do that once, and then all of your zillion queries are constant time. So, as long as you can afford the space, and "zillion" is actually a large number, this is the optimization you want.You will need to restructure your code so the dict actually is built once, rather than every time get_hobbies is called. Whether that means putting this in a class, using a closure, explicitly memoizing in an attribute stashed on the function, or just using a global that's built at the top level is up to you. Taking the last one, just because it's shortest (it's probably not best):


Answer URL
https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED
