Natural Text
I want to compare two Python lists, 'A' and 'B' in such a manner that I can find all elements in A which correspond to the same number in B. I want to do this for each number in B. For example, if I would like to get A and B will always have the same lengths.
You can use zip to create tuples which consist from one element from both lists, then sort them and finally group them by value from B:In above zip(B, A) returns iterable of tuples where each tuple has element from B and A:Result of above is then sorted so that all the tuples with same value from B are next to each other:Result of sorting is passed to groupby which groups the tuples based on value returned by key function, in this case the first item in the tuple. Result is iterable of (key, group) tuples where group is iterable of elements:
I think you can use this code:Each key of the dictionary will be an element of B, and its associated value will be the list you want.
Try this approach.It finds the unique entries in B by using the set function. We then loop through these unique entries. The first list comprehension (for indices) finds the indices of the entries in B that match this unique entry. The second saves the value in A of those indices.
An alternative using collections.defaultdict:Sample of printed results:
Create a specific function that takes two lists (A, B) and a number (n) as arguments.  Select all items in A that have the same list position as the items in B that are equivalent to n.  zip is used to pair items from A and B with the same list position.  This function uses a list comprehension to select the items from A.The function could be written without a list comprehension:Using fuctools.partial the list arguments can be fixed:Then it could be used like this:


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/library/functions.html#zip
