Natural Text
I'm trying to use Python to access the trading API at poloniex.com, a cryptocurrency exchange. To do this I must follow this prescription:All calls to the trading API are sent via HTTP POST to https://poloniex.com/tradingApi and must contain the following headers:Key - Your API key.  Sign - The query's POST data signed by your key's "secret" according to the HMAC-SHA512 method.  Additionally, all queries must include a "nonce" POST parameter. The nonce parameter is an integer which must always be greater than the previous nonce used.Here is what I have so far. My current issue is that I do not know how to compile the POST url so that it can be signed without sending the incomplete request first. This obviously doesn't work.
Create a prepared request; you can add headers to that after the body has been created:I changed your params argument to data; for a POST request it is customary to send the parameters in the body, not the URL.For the nonce, I'd use a itertools.count() object, seeded from the current time so restarts don't affect it. According to the Poloniex API documentation (which you quoted in your question), the nonce is part of the POST body, not the headers, so put it in the payload dictionary:Using int(time.time()) would re-use the same number if you created more than one request per second. The example code provided by Poloniex uses int(time.time()*1000) to make it possible to create a request every microsecond instead, but using your own monotonically increasing counter (seeded from time.time()) is far more robust.You can also encapsulate the digest signing process in a custom authentication object; such an object is passed in the prepared request as the last step in preparation:Use this with your requests calls:The argument passed in is the secret used in the HMAC digest; you can also pass in  a different header name.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.count
