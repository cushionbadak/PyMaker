Natural Text
I have a Python class that performs a bunch of calculations. The class supports various calculations, each of which might or might not actually get called. Here is an example:What I want is to calculate the difference between two instances of the class. I've come up with the following approach, but not sure if this method has any drawbacks or maybe there's a better way?Alternatively I can add a decorator and don't use the Diff class:Any feedback will be appreciated.
Your Diff class looks fine to me, but I'm still undecided whether this is Pythonic or not. ;) I don't see any major drawbacks, but it can be made more efficient.Here's an alternative implementation of the Diff class. It's a little more efficient since it doesn't have to do a lookup and two calls of operator.attrgetter on each __getattr__ call. Instead, it caches the attribute accessing functions using functools.partial and the built-in getattr function.I've also implemented a simple MyCalc class for testing purposes.output

You say your class supports about 15 calculations, all returning numeric values, some of which might or might not get called.Cleanest and most Pythonic seems to be to have one calc() method returning a vector, i.e. a NumPy array (or Pandas Series or DataFrame). Then the client code can simply do vector subtraction: ab_diff = a.calc() - b.calc(). There seems no need to reinvent the wheel on np.array, just based on what you've described.If some of those calculations are rarely-called and/or expensive to compute, then you could refactor into calc() and calc_rare(). Or, you could pass in kwargs to calc(..., compute_latlong=False, compute_expensive_stuff=False). You can return np.NaN as default values for expensive stuff you don't compute by default, to keep your vector length constant.


Answer URL
https://docs.python.org/3/library/functools.html#functools.partial
https://docs.python.org/3/library/functions.html#getattr
