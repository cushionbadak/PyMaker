Natural Text
I have several lists of lists, and I want to be able to edit the items in the lists throughout my code, and then reset them all to their initial values later.Here's an example:As you can see, this method works for list[2] because that item is a value, and not a nested list. It seems that even though I use [1:] to make a copy in lists[0], the references to nested lists are what get copied, rather than the values in those nested lists.How can I properly copy the values of lists[1:] into lists[0] and then back again, without having both copies reference the same index?Or perhaps there's a simpler way to achieve the same intended result, returning all items in lists to their original values?
Use deep copy: https://docs.python.org/3/library/copy.htmlThis will copy the object as well the child objects.
Use persistent data structures.  Avoiding mutation allows greater sharing and avoids spooky action at a distance like this.For example:Also, Python has non-list variables.  The first element of a list of random values is a strange place to "save" things.  Given the above, you could just keep the original values around in another variable.  For example:Now you can screw around with lists and when you get tired of it, lists = original brings you right back to the initial state.


Answer URL
https://docs.python.org/3/library/copy.html
