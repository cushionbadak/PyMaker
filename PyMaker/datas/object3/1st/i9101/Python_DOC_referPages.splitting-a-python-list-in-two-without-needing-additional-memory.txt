Natural Text
I would like to split an int list l in two small lists l1, l2 (I know the split point n).I am already able to perform the splitting by copying l2 elements in another list and then removing them from l, but this requires to have space for at least n + n/2 elements in memory and this is not affordable since l is big.Does someone has a solution?
If you do not want to spend additional memory on the smaller lists, you have two possibilities:Either you can destroy/reduce the original list as you create the smaller lists. You could use collections.deque, providing O(1) removal and insertion at both ends:Or you can create two views on parts of the smaller lists, meaning that the original list would be altered if the smaller lists are modified, and vice versa. For instance, use numpy.array for your numbers and create slices (being views) on that array:If you have to use plain Python list, you could also use list.pop. However, as explained in the documentation for deque, you should not use pop(0), as this will have to re-organize the entire list each time you pop an element, giving you O(nÂ²) for extracting half of the list. Instead, use pop() to pop from the end of the list. To restore the original order, you could first pop into a temporary list, and then pop from that list, reversing it twice.
How about trying thisthen, l = mylist(range(1,10))
You can slice the list with itertools.islice at n. The slice objects are lazy and are only loaded into memory when you iterate on them:
I came with a simple solution. What aboutIt seems to work and it should not require additional memory.
Helo AreTor,This is my solution:list is the list of elements.n is the number of elements you want in the first list (the split point index).list[0:n] will return the first n items of you list.list[n:] will return the rest of the list.Hope it helps youEDIT: If you worry about memory problems, you can delete the list once you split it.. Even you can use list[0:n] / list[n:] in your code and you dont use more memory.. 


Answer URL
https://docs.python.org/3/library/collections.html#collections.deque
https://docs.python.org/3/library/collections.html#collections.deque
https://docs.python.org/3/library/collections.html#collections.deque
