Natural Text
I have a set of tags I care about counting. Let's say they are:I want my program to iterate through a list of sentences that perhaps looks like this:I used nltk.pos_tag to label each word with the result being:I want to check if there are any words in here that have the pos_tags and I think I have seem to accomplished that; however, I am having huge amounts of trouble returning the result in the form that I want, which is a matrix style.The rows would be the number of sentences there are. In this case, 3. The columns would be the number of tags there are. In this case, also 3.The final result would look like:This is what I have so far:
there are various Matrix types in Python, Libs, but I just made a list of lists a nested list comprehension does fine here constructing the list of liststhe sum(sen,()) flattens the list of tuples - but isn't the most recommended for performanceMad Physicist is correct about the quick and dirty above counting tags that are also words in the sentence, respecting the data structure would be safer
There are a couple of different ways of approaching this problem. Probably the easiest is to notice that each sentence is handled independently of the others. You can therefore put all the operations for one sentence into a single function and then run it for each sentence independently:If you prefer to expand the matrix dynamically instead of preallocating with [None] * len(sents), you can do that too:In both cases, do_counting is a function that takes a sentence string and a list of tags, returning a single row of the matrix. The tags are an input in case you decide to change the order or names of the tags you are interested in. The output will always match the input list.The parsing will be done with nltk the same way you have already figured out to do. The counting is most easily accomplished with a collections.Counter object, which is pretty much made for the purpose. It will count the number of occurrences of each tag. We can then select the tags we want based on the list you pass in as the second argument:Notice that I ignore the tokens for the purposes of counting. _ is a valid variable name in Python, but is conventionally used to indicate discarded parameters. The counter could have been written asIt would not be too difficult to do the counting yourself instead of using Counter:Hopefully I have layed out an approach you can follow, but more importantly understand. I have tried to present you with a couple of options for doing some of the tasks to give you a feel for the possibilities as you study more on your own.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
