Natural Text
Is there a way in which to see the attributes of a Python object via vars, but with the output formatting being clean, and it not showing all the values of each attribute? (For example, a large array taking up all the screen). I basically just want a nice clean list of its attributes. 
If you want a list of the keys of the object's vars, that'd beor you could go through the keys and print them on their own lines:or you could pretty-print the dict with pprint (though it might not be any prettier than IPython's default pretty-printing):or you could just code up whatever you think would be a readable way to view the information vars gives you. You're always free to write your own code.There's also dir(whatever), which aims to provide a list of the object's attributes useful for interactive inspection. dir(whatever) will usually be different from list(vars(whatever)); for example, it'll include methods.
Do you want a list of the attribute names, the vars keys? Or the full dictionary, keys and values? Depending on the object class vars could be empty, just a few scalars and strings, or a large and complex set of lists, arrays, etc. Without a general purpose 'pretty-printer' you can not generate a clear display for all classes. It's the purpose of the __str__ and __repr__ methods to produce a useful display of the objects attributes.In my current ipython sessionThe variables are:One is user defined function with an empty vars    One is sparse matrix, with a modest number of attributes.  This example has only 5 nonzero values, so the arrays are quite small.  Yes, numpy arrays can be very large.  Their display is controlled by numpy code.argparse is an imported module, with many vars.  One, the doc takes up nearly a page.arr is an array, and doesn't have a __dict__, and vars(arr) gives an error.This is the whos display for this display.  arrays are displayed in a condensed form that is unique to ipython.You could write a pretty printer.  Here's a start:For the sparse matrixBut for argparse parser object, it is clearly inadequate:The object has many attributes; some have long class names.  Some are dictionaries with a few keys, but long values.  I'd have to do some sort of recursion to compress those.  So it's possible to write a compact displayer, but it will be a lot of work.


Answer URL
https://docs.python.org/3/library/pprint.html
