Natural Text
I have code like this (simplified):But ctr causes an error:How can I fix this? I thought nested scopes would have allowed me to do this. I've tried with 'global', but it still doesn't work.
If you're using Python 3, you can use the nonlocal statement to enable rebinding of a nonlocal name:If you're using Python 2, which doesn't have nonlocal, you need to perform your incrementing without barename rebinding (by keeping the counter as an item or attribute of some barename, not as a barename itself).  For example:and of course use ctr[0] wherever you're using bare ctr now elsewhere.
From http://www.devshed.com/c/a/Python/Nested-Functions-in-Python/1/Code in a nested function's body may  access (but not rebind) local  variables of an outer function, also  known as free variables of the nested  function.So, you would need to pass ctr to inner explicitly.
The ExplanationWhenever a value is assigned to a variable inside a function, python considers that variable a local variable of that function. Since the statement ctr += 1 includes an assignment to ctr, python thinks that ctr is local to the inner function. Consequently, it never even tries to look at the value of the ctr variable that's been defined in outer. What python sees is essentially this:And I think we can all agree that this code would cause an error, since ctr is being accessed before it has been defined.(See also this question for more details about how python decides the scope of a variable.)The Solution (in python 3)Python 3 has introduced the nonlocal statement, which works much like the global statement, but lets us access variables of the surrounding function (rather than global variables). Simply add nonlocal ctr at the top of the innerfunction and the problem will go away:The Workaround (in python 2)Since the nonlocal statement doesn't exist in python 2, we have to be crafty. There are two easy workarounds:Removing all assignments to ctrSince python only considers ctr a local variable because there's an assignment to that variable, the problem will go away if we remove all assignments to the name ctr. But how can we change the value of the variable without assigning to it? Easy: We wrap the variable in a mutable object, like a list. Then we can modify that list without ever assigning a value to the name ctr:Passing ctr as an argument to inner
How about declaring ctr outside of outer (i.e. in the global scope), or any other class/function? This will make the variable accessible and writable.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#grammar-token-nonlocal_stmt
