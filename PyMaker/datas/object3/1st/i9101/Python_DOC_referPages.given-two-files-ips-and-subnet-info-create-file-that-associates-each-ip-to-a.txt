Natural Text
I've been struggling for a couple of days with the proper way to address this solution, and I am seeking some assistance.I have two files and need to create a third that shows the relationship.IP Address file - ip.csvSubnet file - subnet.csvI need to specify what subnet that each IP is in, and create a third fileThe ip.csv file will contain about 1.5 million IP's and the subnet.csv file will contain around 140,000 subnets.ip.csv file sample:subnet.csv file sample:Format of file I need to create:I've tried to make use of things from these pages:subnettree moduleipaddress modulerandom page with cidr helpIP range helpThis is the code that I have tried.  It works on small sets, but I'm having problems running it with the full set of files.
You could read all the subnets to memory and sort them by network address. This would allow you to use bisect to do a binary search in order to find the subnet for every IP. This only works if the subnets don't overlap each other, if they do you'll probably need to use segment tree.Output:Above has time complexity of O(n log m) where n is the number of IPs and m number of networks. Note that it only runs with Python 3 since ipaddress is not included to Python 2.7. If you need to use Python 2.7 there are backports available. Update The first goal for efficient solution is to find a way to process each individual IP in efficient manner. Looping through all subnets is terribly expensive so it won't do. It's much better to create a sorted list of first IP in each subnet. For given data it would look like this:This will allow us to execute binary search in order to find index of IP address that is equal or lower than individual IP. For example when we search for IP 10.20.3.56 we use bisect.bisect to provide us the first index greater than IP and decrement it by one:Since we have stored the networks to another list which is in the same order we can use index to retrieve given subnet. Once we have the subnet we still need to check that the individual IP is equal or lower than the last IP within the subnet. If the individual IP is within the subnet then write a row to result, if not move to next IP.


Answer URL
https://docs.python.org/3/library/ipaddress.html#module-ipaddress
https://docs.python.org/3/library/ipaddress.html#module-ipaddress
