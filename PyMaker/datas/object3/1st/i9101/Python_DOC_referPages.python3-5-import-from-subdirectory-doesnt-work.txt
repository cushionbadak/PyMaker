Natural Text
I have a bunch of python scripts and simply want to structure them by putting most of them into subdirectories. However, when I try to load scripts from subdirectories, python gives me different error messages, depending on how I try to import the subdirectory scripts.My subdir looks like this:In my script from the parent dir, when I dothis error occurs:When I dothis error occurs:I also touched __init__.py into io/ but it didn't help at all, as well as preceeding a dot to io/, but no luck. The python docs say I should add the __init__.py and then everything should work, basically (as far as I interpreted it).Can anyone help me here? If I left out some important info, please tell me and I'll add it.Cheers,JakobEDIT:As many of you stated, io is already another package in python, so renaming my io/ to something different fixed the problem (while also having the __init__.py). Thank you very much! I know there have been multiple correct answers, however, I could just mark one as correct, sorry.
The name io is already being used by a standard library module. Since it's one of the very basic modules used by the interpreter, it gets loaded during the startup process, before any of your code runs. This means that by the time Python sees your request to import io.dataset_creator, it's already got an io module in sys.modules. Since that module is not a package, it won't try loading the other submodule you've written in your io package (even if you had a module search path set up so that your package came ahead of the standard library).You should rename your io package. One option is to put it inside another package (mypackage.io.dataset_creator should work fine). You could also just replace the name io with something more specific (e.g. myproject_io).
It's possible that that it's failing because io is already a built-in module
I have answered a similar question here Using exec on a file in a different directory causes module import errorsAppend your parent path to Pythonpath: import sys sys.path.append("/path/to/parentfolder")You can use os.path.dirname(__file__) to get file's absolute path other than hardcoded path.Add __init__.py to your parent folder and io folder, make the it as python package other than directory.import the module:import io.dataset_creator as dcreatorIn you app.py:
This happened to me as well on Python 3.5.1 when I tested it. Renaming the directory io to something else (I used my_io) fixed the problem. Here was my test case:Both modules imported correctly when I changed the directory's name. I suggest you change your io directory to something similar to avoid this.I think this must be to do with some internal Python module called io which was conflicting somehow.
Recreating the problem:Gives the error messages.Solution:Create another sub-directory called "io" and put the files there.Use a name different than "io", as a module by that name already exists.Explanation:You are already in the io dir, so you don't need to specify the "io". You can simply do:And once you add a function or class in your python files:You can import like this:To organise your code under an io module umbrella, create another io directory as follows and use it to store your python code:Note I renamed the directory to "ia" as well as there is already an "io" module that exists (ref).


Answer URL
https://docs.python.org/3/library/io.html
https://docs.python.org/3/library/io.html
https://docs.python.org/3/library/io.html
