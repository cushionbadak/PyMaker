Natural Text
The following xml-file (lieferungen.xml) contains several inconsistencies. Several of the items have more than one id (e.g. item "apfel" has 3 different IDs):In order to find all inconsistencies in the file, I wrote the following sax-parser in python:The output of this program is as follows:As you can see, from the file (note the comments marking occurrences of more than one ID), this output is wrong in two ways:There are only two different IDs for item "Kirschen", not three.Several items with more than one ID are not mentioned at all (e.g. item "Kohl" has two different IDs) However, I do not understand, what's going wrong in my code.
Unless I've misunderstood, the error is that this lineshould beAs it stands, your program appears to be counting consistencies rather than inconsistencies: Kirschen uses the ID 7866 three times and nothing else uses the same ID more than once, hence your output.With the above change made, I get the following output:Having said this, I'm not sure your code would necessarily do what you want all of the time.  Try moving the <artikel> element with ID 7116 above all of the other <artikel> elements and then running your code.  Your code will then tell you that there are four different IDs for Kirschen, when arguably there are only two.The reason for this is that the number of IDs your program outputs for an item is one for the first ID found for that item and one for each further <artikel> element with the that name but whose ID differs from the first.If you really want to count the number of IDs used per product, a better way would be to use sets to store the IDs used for each product as you go through, and then print the lengths of any sets that contain more than one element.  Here's what your characters method could look like after making this change - I'll leave it up to you to make the necessary modifications to your endDocument method:Note that in the last line I don't need to check whether the set in self.items[item] already contains self.id.  The nice thing about a set is that if you add an ID that's already in the set, nothing happens.  The set doesn't end up with duplicate IDs.   Note also that I'm no longer using self.items2, as self.items has all the information I need.You could even go one step further than this.  We have to check whether item is in self.items and create a set for that item if it isn't.  If we use a defaultdict, then that will take care of creating the set for us if it doesn't already exist.  Add the line from collections import defaultdict above your C_Handler class and replace the line self.items = {} with self.items = defaultdict(set).  After doing this, your characters method just needs to be the following:


Answer URL
https://docs.python.org/3/library/collections.html#defaultdict-examples
