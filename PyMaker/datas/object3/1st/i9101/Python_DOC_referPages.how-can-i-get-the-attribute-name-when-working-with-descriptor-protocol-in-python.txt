Natural Text
The descriptor protocol works fine but I still have one issue I would like to resolve.I have a descriptor:This is subclassed:And then used is a model class:So far, so good, this works just as expected.The only issue I have here is that we have to give a field name every time a field is declared. e.g. "country_code_2" for the country_code_2 field. How would it be possible to get the attribute name of the model class and use it in the field class?
There is a simple way, and there is a hard way.The simple way is to use Python 3.6 (or newer), and give your descriptor an additional object.__set_name__() method:When a class is created, Python automatically will call that method on any descriptors you set on the class, passing in the class object and the attribute name.For earlier Python versions, the best next option is to use a metaclass; it'll be called for every subclass that is created, and given a handy dictionary mapping attribute name to attribute value (including you descriptor instances). You can then use this opportunity to pass that name to the descriptor:This calls the same __set_name__() method on the field, that Python 3.6 supports natively. Then use that as the metaclass for BaseModel:orYou could also use a class decorator to do the __set_name__ calls for any class you decorate it with, but that requires you to decorate every class.  A metaclass is automatically propagated through the inheritance hierarchy instead.
I go through this in my book, Python Descriptors, though I haven't updated to a second edition to add the new feature in 3.6. Other than that, it's a fairly comprehensive guide on descriptors, taking 60 pages on just the one feature.Anyway, a way to get the name without metaclasses is with this very simple function:Considering every time you use the name of the descriptor, the instance is involved, this shouldn't be too difficult to figure out how to use. You could also find a way to cache the name once you've looked it up the first time.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__set_name__
