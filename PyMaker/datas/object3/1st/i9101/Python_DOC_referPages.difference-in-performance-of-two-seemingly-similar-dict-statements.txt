Natural Text
This question already has an answer here:Is there anything faster than dict()?                    3 answers                "One semi-gotcha to avoid though is to make sure you do: key in some_dict rather than key in some_dict.keys(). Both are equivalent semantically, but performance-wise the latter is much slower (O(n) vs O(1)). I've seen people do the in dict.keys() thinking it's more explicit & therefore better."I found this piece of advice online. Can anyone please explain and justify the above difference in performance? How is the working of these two seemingly similar statements so different?EDIT: To be more precise, how is indexing in a dictionary faster than indexing in a list? As far as I've learned, hash tables are arrays of linked lists. The array being an array of the keys. So finding a key in a hash table should be similar to finding that key in a list of keys. (?)
It is true only for Python 2.In Python 3, dict.keys() returns a view object dict_keys that wraps the source dict object:As a result, in Python 3, key in dict.keys() is effectively executed almost as key in dict:dict.keys() creates the dict_keys object in O(1) time and thenthe query operation is rerouted through dict_keys back to dict which performs it in O(1) time.Unlike Python 3, in Python 2, dict.keys() returns a list object which has to be constructed in O(n) time:Therefore, in Python 2, key in dict.keys() (as a test, rather than as a part of for key in dict.keys()) will have two sources of O(n) time complexity:Building the list returned by dict.keys() takes O(n) timeChecking if the query value is in the returned list takes another O(n) time.


Answer URL
https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
