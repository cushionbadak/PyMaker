Natural Text
I'm writing an implementation of doubly linked lists. In order to traverse the list, I'm using something like:where get_next and get_previous are just getters of self.next and self.previous. However, PyCharm yells at me for trying to call next asnext(some_node, direction=-1). What's the proper way to do this?
Besides __iter__ there is also __reversed__. Both are required to return iterators. The __next__ method should be implemented on iterators (not on node-classes). Note that all magic methods (when called by a function like next instead of directly invoked) need to implement the expected arguments not more - not less.For example a doubly linked list could just implement __iter__ and __reversed__ and rely on next and previous attribute of the Node:For example:gives:similar for reversed:
The extra argument to next is a default value, and __next__ doesn't take any extra arguments. Python doesn't have any sort of two-way iterators. If your interface is not exactly the same as for i in obj:, then you should write your own.
__next__ is part of the iterator protocol and should be used as described in said protocol, doing otherwise only make problems with the rest python.In your case just rename the function to simple next and use as some_node.next(-1), though I would change the direction argument to a boolean, as that is how you use it, and its name too. Like this for exampleand use as some_node.next(), some_node.next(False) or even some_node.next(0) (using 0 instead of False for the same effect)


Answer URL
https://docs.python.org/3/library/stdtypes.html#iterator-types
https://docs.python.org/3/reference/datamodel.html#object.__reversed__
