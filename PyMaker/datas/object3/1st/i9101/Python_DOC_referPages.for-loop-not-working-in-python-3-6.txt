Natural Text
I've been working on combining 3 text files.In the first file, I have pairs of strings (not int)In the second file, I have definitions of strings from file 1In the third, there is another definition for the strings from 1st file (also string)My code is:It seems to work, at least once, since it prints the proper result for the first lineThe result:1;a;123;2;b;41242;;;3;;4;;;5;;6;;;7;;6;;;8;;9;;;1;;7;;;1;;7;;;3;;6;;;4;;7;;;10/2;;10/2;;;10/1;;12;;;13;;11;;;3;;what to change, to make the code work for each line?file1 contains:1;2;2;3;4;5;6;7;6;8;9;1;7;1;7;3;6;4;7;10/2;10/2;10/1;12;13;11;3;file2:1;a;2;b;3;c;4;d;5;e;6;f;7;g;8;h;9;i;10/1;j;10/2;k;11;l;12;m;13;n;file3:1;123;2;321;3;554;4;3313;5;334;6;564;7;3234;8;56345;9;2346;10/1;342;10/2;553;11;23;12;453;13;2234;
You are trying to loop over a file object more than once. File objects are like long pieces of tape, and reading a line or chunk moves the file pointer, the position where a next read or write will take place. Once you have read the whole file, that pointer is at the very end of the file 'tape' and you can't read more from that position (there is no more data there), until the file pointer is moved again by other means.You either need to open the file objects each time you want to loop, or rewind the file pointer to the start. You can do the latter with a  file.seek(0) call.However, reading from a file time and again is slow. Since all your are doing is using those extra files as maps (mapping one value in a row to another), you should really just read them into memory into a dictionary. That way you don't have to loop at all, and make your code much, much faster in the process.You should also use the csv module, rather than split yourself. The module handles reading and splitting much more efficiently, and correctly in the case of quotes and other corner cases:As you are also writing out semi-colon-separated information, you can use the same csv module to produce a csv.writer() object to write out the data again. In the above example I write out to sys.stdout, but you could write to any file you like.


Answer URL
https://docs.python.org/3/library/io.html#io.IOBase.seek
https://docs.python.org/3/library/csv.html
