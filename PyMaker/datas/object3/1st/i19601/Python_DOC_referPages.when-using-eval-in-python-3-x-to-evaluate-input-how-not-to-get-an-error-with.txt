Natural Text
I am learning Python 3.x. I want to write a function which evaluates inputted values and prints the result. If the string originally is inputted, the function should just print the string without evaluation.It works fine with integers and mathematical operations.But when a string gets inputted, like "fasdfasd", it gets an error: "name 'fasdfasd' is not defined".I understand why this error happens. Because "fasdfasd" is seen as a variable.But I don't understand how to check whether a string was originally inputted?How do I filler strings from the input before evaluating it? 
First: It's rarely a good idea to rely on  eval(). You could simply catch the NameError (and SyntaxError as well) and assume the input was a string:There may be other exceptions raised here, but next to avoid using eval() I also want to caution against using a blanket except: or except Exception: handler, those are generally also not good ideas.A better technique would be to use ast.literal_eval instead:literal_eval only accept python literal values (so 'string' or 123 or ('some', 'more', [1, 2, 4.5], 'complex structure')) and will throw a ValueError if it cannot parse that input.It does not suffer from the security problems that eval() suffers from, nor do you need to catch as many exceptions, only ValueError needs to be handled.
If you are taking user input, presumable you know what you are asking for and what type it should be. You need to write a verifier. You can do this textually with regular expressions, or more basically with "casts", or conversion functions.For example, if you are looking for an integer number, use int to convert it, and check for errors.Tell the user to enter a number. The int function will raise ValueError if it can't parse it, and only that , so you can easily tell that you got something other than a number.You can do the same with float. What you get from input is always a str, so if that's what you want just use that. 
Okay, simply as an answer I'm going to put thisBut you really don't want to use eval, its evil, nasty, leads to bugs and security risks, and is hard to develop, debug and use properly


Answer URL
