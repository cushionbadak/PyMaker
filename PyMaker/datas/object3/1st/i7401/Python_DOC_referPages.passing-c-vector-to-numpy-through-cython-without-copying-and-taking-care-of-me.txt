Natural Text
Dealing with processing large matrices (NxM with 1K <= N <= 20K & 10K <= M <= 200K), I often need to pass Numpy matrices to C++ through Cython to get the job done and this works as expected & without copying. However, there are times when I need to initiate and preprocess a matrix in C++ and pass it to Numpy (Python 3.6). Let's assume the matrices are linearized (so the size is N*M and it's a 1D matrix - col/row major doesn't matter here). Following the information in here: exposing C-computed arrays in Python without data copies & modifying it for C++ compatibility, I'm able to pass C++ array. The problem is if I want to use std vector instead of initiating array, I'd get Segmentation fault. For example, considering the following files:fast.hfast.cpp faster.pyxsetup.pyIf you build this withand run Python 3.6 interpreter, if you enter the following you'd get seg fault after a couple of tries.Couple of things to note:If you use array instead of vector (in fast.cpp) this would work like a charm!If you call faster(1000000) and put the result into something other than variable a this would work.If you enter smaller number like faster(10) you'd get a more detailed info like:It's really puzzling that why this doesn't happen with arrays? No matter what!I make use of vectors a lot and would love to be able to use them in these scenarios.
I think @FlorianWeimer's answer provides a decent solution (allocate a vector and pass that into your C++ function) but it should be possible to return a vector from doit and avoid copies by using the move constructor.You should then be able to use it as:
When you return from doit, the WhyNot object goes out of scope, and the array elements are deallocated.  This means that &WhyNot[0] is no longer a valid pointer.  You need to store the WhyNot object somewhere else, probably in a place provided by the caller.One way to do this is to split doit into three functions, doit_allocate which allocates the vector and returns a pointer to it, doit as before (but with an argument which receives a pointer to the preallocated vector, anddoit_free` which deallocates the vector.Something like this:


Answer URL
https://docs.python.org/3/library/array.html
