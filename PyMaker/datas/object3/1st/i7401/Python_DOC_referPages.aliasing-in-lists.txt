Natural Text
There is some confusion regarding this. Consider this piece of code.Also, consider this piece of code.If f and g are different objects, then how can their inner elements point to the same memory location?
As your question evolved, different iterations of it require different answers:NoneNone is a singleton, so all references to it refer to the same object and have the same address. This means that, for a given Python process, id(None) always returns the same value. It also means that we can test for None using the is operator:StringsStrings are subject to interning, where the interpreter folds identical string literals to conserve storage. More on this in Python string interning.The way this happens to be implemented means that your string example breaks if we replace one of the literals with an expression involving a variable:IntegersInterestingly, CPython also chooses to intern small integers:More on this in "is" operator behaves unexpectedly with integers.Concretely, this means that your first example breaks if we try it with much larger integers:
Because None doesn't change homes. Every None object has the same location. TryYou'll get:


Answer URL
https://docs.python.org/3/c-api/none.html
