Natural Text
How can I store the users input from the hangman function, so every time the for loop runs it remembers the user has already guessed the letter. When the hangman function runs the first time, if the user's input is 'gera', that's fine, it should then loop back for a fifth guess; the problem is if the user enters 'mo' now, it won't show like this gera _ _ mo, instead it'll print _ _ _ _ _ _ mo; forgetting the users previous 'gera' input. How can I store past inputs so the code recalls what was passed?
You can do this easily:Or, using a generator:BTW, letters_guessed could be a string ("eikprs") or, if the order doesn't matter, a set: set("eikprs").You can also try this:
There are several ways to solve it like ForceBru already mentioned. But to add one with sets as proposed in the comments: 
Let's look at your function, because there's a concept you don't appear to have:The line for char1 in secret_word: iterates over the word, pulling each character into char in turn. There's nothing wrong with this, and pretty much every solution will have to use it.Next, you do for thing in letters_guessed:. There's a problem with this, as pointed out by @ForceBru, in that Python supplies the in and not in operators to do what you're trying to code by hand.However, when you're just starting out it's okay to re-invent the wheel a few times. If nothing else, it helps you understand what's happening under the hood.The thing I think you've missed, or misunderstood, is this: when you have char1 == thing you know something. You can absolutely state that "yes, this letter has been guessed" and you can proceed to show the letter.But when that condition isn't true - when char1 != thing - you don't know anything. You can't simply say "oh, if that isn't true then draw an underscore" because you aren't finished checking!Remember that the for thing in letters_guessed: loop is checking each of the letters that have been guessed. This means that even though this particular character in letters_guessed might not match the current character in the word, it's possible that some other character will match, so you have to keep looping.Something like this:


Answer URL
https://docs.python.org/3/reference/expressions.html?highlight=expressions#membership-test-operations
