Natural Text
Sometimes I need a dummy context manager that does nothing. It can then be used as a stand-in for a more useful, but optional, context manager. For example:How do I define such a trivial, empty context manager? Does the Python library offer one off the shelf?How about cases where we want the context to be used with an as clause?
Python 3.7 and above: use contextlib.nullcontext, specifically designed for this reason.Before Python 3.7, the standard library does not offer a context manager specifically designed for these use cases, but there are some workarounds.Since Python 3.4, contextlib.suppress can be used for that purpose in the first case, i.e. when there is no as clause:Since Python 3.3, a similar work-around is also available, contextlib.ExitStack, albeit slower than suppress (it takes twice as long in my tests).Before Python 3.3, or in case you need an as clause before Python 3.7, developers need to roll their own.Here is one possible implementation (see note at the bottom, but all errors are mine):One can then write:Of course, dummy_resource will need to support all operations required of the "meaningful" resource. So for example, if the meaningful context manager, on __enter__(), returns something that is made to quack() inside the managed block, dummy_resource will also need to support that, albeit possibly without doing anything at all.Source: A Python feature request. Many thanks to all those who contributed to that discussion. This is my attempt at summarising its outcome in a self-answered question, to save people time reading that long thread. Also see Python documentation's mention of this use of ExitStack.
Since Python 3.2, memoryview(b'') can be use as a no-op context manager. See https://docs.python.org/3/library/stdtypes.html#memoryview.release.ProsNo imports requiredWorks on 3.2+Roughly twice as fast as contextlib.nullcontextConsYou probably want to add a # no-op comment.
I just used threading.Lock() as a dummy context manager. Temporary lock, only used by the context manager.


Answer URL
https://docs.python.org/3/library/contextlib.html#contextlib.suppress
https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack
https://docs.python.org/3/library/contextlib.html#simplifying-support-for-single-optional-context-managers
https://docs.python.org/3/library/stdtypes.html#memoryview.release
https://docs.python.org/3/library/contextlib.html#simplifying-support-for-single-optional-context-managers
