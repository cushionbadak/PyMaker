Natural Text
Is it possible to somehow override import so that I can do some more sophisticated operations on a module before it gets imported?As an example: I have a larger application that uses matplotlib for secondary features that are not vital for the overall functionality of the application. In case that matplotlib is not installed I just want to mock the functionality so that the import and all calls to matplotlib functions appear to be working, just without actually doing anything. A simple warning should then just indicate that the module is not installed, though that fact would not impair the core functionality of the application. I already have an import function that, in the case that matplotlib is not installed, returns a MagicMock object instead of the actual module which just mimics the behavior of the matplotlib API. So, all import matplotlib... or from matplotlib import... should then be automatically overridden by the corresponding function call. I could replace all import and from ... import expressions by hand but I'd like to make but there are a lot of them. I'd rather like to have this functionality automatically by overriding import.Is that possible?
The easiest way I've found is to replace the __import__ function with your own implementation (described here). Then if someone tries to import matplotlib, you just import a different module instead:To restrict the custom import behavior to only a few modules, you can use introspection (with the inspect module) to find out from which module the import has been performed:
Short answer is NO... But you could and should catch ImportError for when the module is not there, and handle it then. Otherwise replacing all import statements with something else is the clever thing to do.


Answer URL
https://docs.python.org/3/library/functions.html#__import__
https://docs.python.org/3/library/inspect.html
