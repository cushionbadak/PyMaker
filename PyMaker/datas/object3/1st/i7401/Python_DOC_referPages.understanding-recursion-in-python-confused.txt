Natural Text
I am trying to understand recursion.I have this code computes the sum between the range to 2 numbers.I am trying to understand where the value of each recursion call is stored.So if lower is 12 and upper is 30 then where is this 42 stored ?ThanksJason
Values of each recursion are stored in the call stack:You can display the disassembly of your function like this:You get:The LOAD_FAST routine load the value from the function stack.This is the same with temporary values.
Python, and most other languages, uses a structure called the stack for function calls. If you're unfamiliar with the stack data structure, I would recommend reading up on that. It will give you a solid understanding of how stack's work. I would recommend checking out this tutorial for a detailed explanation. 
Your code written with different naming conventions...Given a an integer (low), and another integer that is higher than said integer (high), this code will find the sum between those two integers (inclusive), through recursion.e.g. >>> compute(6, 9)Above would return 30, by way of recursion, i.e. each time the initial condition is not met, if low > high:, the function is called again, adding 1 to low so that eventually the condition will be met, and when it is (when low is equal to 10) recursion will set in.Still with the example compute(6, 9) - when low = 10, 0 is returned, previously low was 9, so the expression return low + compute(low+1, high) at this point would be return 9 + 0, now on to the next recursive call, low before 9 was 8 - we just returned 9 from the previous call, so return 8 + 9, returning 17... I think you get the point, this process happens until the initial return statement. Think of it as unwinding a slinky, and then having it wind back to it's initial form.Note that without your first condition to eventually be met, and the incremental return statement, the function would return the same thing infinitely so that the if condition is never met, or infinitely add 1 to low.I hope this sheds a little light on recursion.
Think of it like a call center. One that advertises that they tell you the sum of numbers in a range you can ask for.So you call someone there and ask for the sum of the numbers from 12 to 30. That person thinks "Darn that's too complicated for me" and calls the same call center itself to ask for the sum from 13 to 30. That second person still can't do it directly and calls the center again to ask for the sum from 14 to 30. And so on. Eventually someone will receive a call asking for the sum from 31 to 30 and directly reply "Um, that's an empty range, so zero of course". And then it all goes backwards. All the people involved in the call stack, who've been waiting for their answers, now one by one compute their own result and report it to the person who called them. So the replies are "30" (because 30+0), then "59" (because 29+30), then "87" (because 28+59), and so on. Eventually the person you called and asked for 12 to 30, will receive the answer that the sum of 13 to 30 is 387. They add it to 12 and reply to you "399".In this analogy, there are people who keep their request data in their head while they're waiting for their own answer. Where is all this data stored when this is done in computer programming? Well, on the call stack. It's called a stack because like a stack of papers that you build one at a time and take off one at a time, the calls are made on top of each other and finished in reverse order. And just like that call center, the computer's call stack has a limited size. When you ask about a range that's larger than the number of people in the call center, eventually everyone in the call center will be involved in your request and the last person called will have nobody left to talk to. At this point the system somewhat breaks down. In the computer, that's called a "stack overflow". Just like this site.


Answer URL
https://docs.python.org/3/library/functions.html#sum
