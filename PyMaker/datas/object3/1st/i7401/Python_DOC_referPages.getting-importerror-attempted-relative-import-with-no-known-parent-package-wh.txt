Natural Text
I'm creating a modular app using Flask blueprints feature. As a result, my directory structure is like this:The modules directory here is not be confused with Python modules, they are for giving a modular structure to my project (core module, foo module, bar module, etc.). Now each folder in the modules directory (and a module inside it with same name such as core.core) is dynamically imported in my main flask app (mould.py) by doing this:As a result of this, I'm unable to do this in the module scripts like db.py:Since it gives a path error as the entire module is being executed at the project level, so I had to do this:This solves the issue and I'm able to successfully import all modules. However, when I go to the core modules directory for some troubleshooting and start the python interpreter, it doesn't allow me to import the db module:Is there a way around this? So, that I can import the db module successfully in the code as well as interpreter?
I know I'm late to the party, but I think I've found a solution to this problem.  Hopefully this will be useful to someone else working on a large Python project.The trick is to try one import format and fall back to the other format if the first fails.Approach 1db.pyOn the plus side, this approach is pretty simple, but doesn't scale well (module names are duplicated).  Scaling can be improved by importing programmatically.Approach 2 (not recommended)db.pyglobals() is the global symbol table.Of course, now this functionality needs to be duplicated in every module.  I'm not sure that's actually an improvement over the first approach.  However, you can separate this logic out into its own independent package that lives somewhere on pythonpath.Approach 3package_importer.pydb.py


Answer URL
https://docs.python.org/3/library/functions.html#globals
https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH
https://docs.python.org/3/library/pkgutil.html#pkgutil.walk_packages
