Natural Text
Consider the line below read in from a txt file:EDIT: The text file has thousands of lines just like the one below:      TAG1=1494947148,1,d,ble,0,2,0,0&TAG2[]=0,229109531800552&TAG2[]=0,22910953180055 ...In the line there would be some data that corresponds to TAG1 and lots of data that have &TAG2 at their start. I want to make a dictionary that has further dictionaries within it, likeHow do I split the string starting at TAG1 and stopping just before the ampersand before TAG2? Does python allow some way to check if a certain character(s) has been encountered and stop/start there? 
I would turn them into a dictionary of string key and list of values.  It doesn't matter if a tag has one or more items, just lists would make parsing them simple.  You can further process the result dictionary if you find that necessary.The code will discard the [] in tag names, as they all turned to list anyway.And when you print the result, you get:How it worksfirst you split the line with &.  That will turn the line into little chunks like "TAG2[]=0,229109531800552", then map turns each chunk into two parts removing the = or []= between them.Because of the map function, splitted is now a iterable that will return lists of two items when consumed.  We further sort then group them with the tag(the string on the left of =).  Now we have tag_values with keys represent tags and each tag paired with all the matching values(including the tag).  Still an iterable though, which means all the thing we talked about haven't really happend yet, except for s.split("&")The last line uses both list and dictionary comprehension.  We want to turn the result into a dict of tag and list of values.  The curly brackets are dictionary comprehension.  The inner variables t and v are extracted from tag_values where t is the tag and v is the grouped matching values(again tag included). At the beginning of the curly bracket t: means use t as a dictionary key, after the column would be the key's matching value.We want to turn the dictionary value to a list of lists.  The square brackets are the list comprehension that consumes the iterable v and turn it into a list.  Variable c represent each item in v, and finally because c has two items, the tag and the string values, by using c[1].split(',') we take the value part and split it right into a list. And there is your result.Further ReadingYou really ought to get familiar with list/dict comprehension and generator expression, also take a look at yield if you want to get more things done with python, and learn itertools, functools, operator along the way.  Basically just functional programming stuff, python is not a pure functional language though, these are just some powerful metaphors you can use.  Read up on some functional languages like haskell that would also improve your python skills.
I think this might what you need:The results:
This may helps you 


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#tut-listcomps
https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression
https://docs.python.org/3/reference/expressions.html#yieldexpr
