Natural Text
I have a temperature application that takes user input (what units, temperature) to convert between different temperature units. It involves prompting the user for these units and numbers, through the normal str(input(xyz)) and float(input(123)) type of prompts, after which the rest of the application takes that data and uses it to perform the task, which from some basic manual testing I have found that it does correctly.I wanted to practice writing unit tests for my application using unittest, and so wrote those too (correctly as well I believe). The tests pass where expected. My issue, however, is that even though I supply data that I will need for the test to work within the test itself, I am still taken through the input prompt in my my main application. While I can just press enter to skip through it and the tests will proceed as expected, I would rather find some way for either unittest to fill in those input prompts itself,  bypass that input bit completely, or at least silence it so that I don't have to run through all my input prompts every time. Is it possible to do this with unittest?Here is the basic structure of what I wrote for my main applicationand for the unittests: 
When you have a module with a function call likeit will be invoked on import of the module.You can avoid that by wrapping it in the conditionalThen main will only be called when that module is executed as the main program, not on import.
You have to mock your input methods to return mocked value. See unittest.mock for reference of how to add mocking. Also consider reading Python common mock gotchas, it could save  a lot of your time. So after adding mocking your test would look similar to code below:Good Luck !


Answer URL
https://docs.python.org/3/library/unittest.mock.html
