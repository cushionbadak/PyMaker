Natural Text
I just trying to know the rationale behind the empty class size in python, In C++ as everyone knows the size of empty class will always shows 1 byte(as far as i have seen) this let the run time to create unique object,and i trying to find out what size of empty class in python:and when i do I wonder why the Empty takes this much 1016(bytes)? and also does the value(1016) it returns is this a standard value that never change(mostly) like C++?, Do we expect any zero base class optimization from python interpreter?Is there any way we can reduce the size of am Empty(just for curiosity sake)?
I assume you are running a 64 bit version of Python 3. On 32 bit Python 3.6 (on Linux), your code prints show 508.However, that's the size of the class object itself, which inherits quite a lot of things from the base object class. If you instead get the size of an instance of your class the result is much smaller. On my system, outputwhich is a lot more compact. :)FWIW, on Python 2.6.6, sys.getsizeof(Empty) returns 448 for a new-style class, and a measly 44 for an old-style class (one that doesn't inherit from object). sys.getsizeof(Empty()) returns 28 for a new-style class instance and 32 for an old-style.You can reduce the size of an instance by using __slots__This class variable can be assigned a string, iterable, or sequence of  strings with variable names used by instances. __slots__ reserves  space for the declared variables and prevents the automatic creation  of __dict__ and __weakref__ for each instance.outputPlease read the docs to understand how to use this feature.
Not 1016 bytes. As you can see, this is implementation specific. Other interesting sizes, using new-style classes:An empty class definition is still a class definition and hence a class object (more here):When a class definition is entered, a new namespace is created, and used as the local scope ..When a class definition is left normally (via the end), a class object is created. This is basically a wrapper around the contents of  the namespace created by the class definition ...All class objects have a minimal set of attributes, which you see by doing:And also other implementation details, which is the reason for their larger than naively-expected size.Finally, note that that the class instances are indeed rather small, as expected, and not as big as class objects. Empty is a class object. Empty() is a class instance.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__slots__
