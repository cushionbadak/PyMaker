Natural Text
I am reading the typing module code and also looking into mypy to understand how it does type checking. Unfortunately for me, mypy builds a very smart tree with typed expressions that I still don't understand, and it's all based on static analysis.I would like to implement a type check system that is dynamic (no static analysis) in Python. Assuming the function that performs type checks is called check_type, I want to accomplish the following:I thought about recreating the object type from its value, such as:But this doesn't work with issubclass:I don't see a simple way to check types in Python without assuming a lot of things about the internals of the typing stdlib module (e.g., accessing __args__ or __tuple_params__).How can I properly implement a check_type function that work for the cases previously listed? I am using Python 2.7.
You can easily get the very limited functionality that works correctly for the simple examples provided in your question:You can even do some more advanced stuff (for example, refer to the types that correspond to classes you defined in your program) by extending this code a bit, so that mypy gets to parse your entire source code as opposed to just the current line.Alternatively, you might want to look at enforce or typeguard.


Answer URL
https://docs.python.org/3/library/typing.html
