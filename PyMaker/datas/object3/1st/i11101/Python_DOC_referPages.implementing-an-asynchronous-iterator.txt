Natural Text
Per PEP-492 I am trying to implement an asynchronous iterator, such that I can do e.g. Here is a trivial example, similar to the one in the docs, with a very basic test of instantiation and async iteration:However, when I execute my test suite, I see:Why does my TestImplementation appear to be invalid? As far as I can tell it meets the protocol:An object must implement an __aiter__ method ... returning an asynchronous iterator object.An asynchronous iterator object must implement an __anext__ method ... returning an awaitable.To stop iteration __anext__ must raise a StopAsyncIteration exception.This is failing with the latest released versions of Python (3.5.1), py.test (2.9.2) and pytest-asyncio (0.4.1).
If you read a little further down the documentation it mentions that (emphasis mine):PEP 492 was accepted in CPython 3.5.0 with __aiter__ defined as a  method, that was expected to return an awaitable resolving to an  asynchronous iterator.In 3.5.2 (as PEP 492 was accepted on a provisional basis) the  __aiter__ protocol was updated to return asynchronous iterators directly.Therefore for versions prior to 3.5.2 (released 2016/6/27) the documentation is slightly out of step with how to write a working asynchronous iterator. The fixed version for 3.5.0 and 3.5.1 looks like:This was introduced on closing bug #27243 and is a little clearer in the data model documentation, which also suggests a way of writing backwards compatible code.


Answer URL
https://docs.python.org/3/reference/datamodel.html#asynchronous-iterators
