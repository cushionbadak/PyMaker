Natural Text
This code reads thefile.csv, makes changes, and writes results to thefile_subset1.However, when I open the resulting csv in Microsoft Excel, there is an extra blank line after each record!Is there a way to make it not put an extra blank line?
In Python 2, open outfile with mode 'wb' instead of 'w'.  The csv.writer writes \r\n into the file directly.  If you don't open the file in binary mode, it will write \r\r\n because on Windows text mode will translate each \n into \r\n.In Python 3 the required syntax changed, so open outfile with the additional parameter newline='' instead.Examples:Documentation Linkshttps://docs.python.org/2/library/csv.html#csv.writerhttps://docs.python.org/3/library/csv.html#csv.writer
Opening the file in binary mode "wb" will not work in Python 3+.  Or rather, you'd have to convert your data to binary before writing it.  That's just a hassle.Instead, you should keep it in text mode, but override the newline as empty.  Like so:
The simple answer is that csv files should always be opened in binary mode whether for input or output, as otherwise on Windows there are problems with the line ending. Specifically on output the csv module will write \r\n (the standard CSV row terminator) and then (in text mode) the runtime will replace the \n by \r\n (the Windows standard line terminator) giving a result of \r\r\n.Fiddling with the lineterminator is NOT the solution.
Note: It seems this is not the preferred solution because of how the extra line was being added on a Windows system.  As stated in the python document:If csvfile is a file object, it must be opened with the ‘b’ flag on platforms where that makes a difference.Windows is one such platform where that makes a difference.  While changing the line terminator as I described below may have fixed the problem, the problem could be avoided altogether by opening the file in binary mode.  One might say this solution is more "elegent".  "Fiddling" with the line terminator would have likely resulted in unportable code between systems in this case, where opening a file in binary mode on a unix system results in no effect.  ie. it results in cross system compatible code.From Python Docs: On Windows, 'b' appended to the mode  opens the file in binary mode, so  there are also modes like 'rb', 'wb',  and 'r+b'. Python on Windows makes a  distinction between text and binary  files; the end-of-line characters in  text files are automatically altered  slightly when data is read or written.  This behind-the-scenes modification to  file data is fine for ASCII text  files, but it’ll corrupt binary data  like that in JPEG or EXE files. Be  very careful to use binary mode when  reading and writing such files. On  Unix, it doesn’t hurt to append a 'b'  to the mode, so you can use it  platform-independently for all binary  files.Original:As part of optional paramaters for the csv.writer if you are getting extra blank lines you may have to change the lineterminator (info here).  Example below adapated from the python page csv docs.  Change it from '\n' to whatever it should be.  As this is just a stab in the dark at the problem this may or may not work, but it's my best guess.
I'm writing this answer w.r.t. to python 3, as I've initially got the same problem.I was supposed to get data from arduino using PySerial, and write them in a .csv file. Each reading in my case ended with '\r\n', so newline was always separating each line.In my case, newline='' option didn't work. Because it showed some error like :So it seemed that they don't accept omission of newline here.Seeing one of the answers here only, I mentioned line terminator in the writer object, like, writer = csv.writer(csv_file, delimiter=' ',lineterminator='\r')and that worked for me for skipping the extra newlines.
When using Python 3 the empty lines can be avoid by using the codecs module. As stated in the documentation, files are opened in binary mode so no change of the newline kwarg is necessary. I was running into the same issue recently and that worked for me:
Use the method defined below to write data to the CSV file. Just add an additional newline='' parameter inside the open method :This will write CSV rows without creating additional rows!


Answer URL
https://docs.python.org/3/library/csv.html#csv.writer
https://docs.python.org/3/library/codecs.html
