Natural Text
I have a really weird problem. I've got three files, which contain one column of numbers. I need to get ONLY unique values from first file, that are not present at second and third files.I tried Python like:And same for third file.I tried uniq, sort, diff, some awk scripts and comm in linux shell like here: Fast way of finding lines in one file that are not in another?But the only result i get each time is THE SAME AMOUNT OF LINES AS IT WAS IN FORMER FIRST FILE. I don't get it at all!Maybe, i've missed something? Maybe it's something with a format? However, i checked it a lot of times. Here are the files: http://dropmefiles.com/BaKGjP.S. Later i thought there are no unique lines at all, but i checked it manually, some numbers in first file ARE unique.P.P.S. The format of files is like this:
What's wrongAnd same for third fileIf you are really doing the same for the third file, i.e. comparing the original contents of the first file with the third, you can introduce duplicates of items that were not in the second file but are in the third. For example:After processing file 2, resultfile would contain 2 and 3. Then after processing file 3, resultfile would contain 2 and 3 (from the first run) plus 1 and 3, i.e. 2, 3, 1, 3. However, the result should just be 3.It's not clear from your code whether you are actually writing the output of each run to the file resultfile. If you are, then you should use it as the input for the second and subsequent runs, don't process the first file again.A better way to fix itIf you do not need to preserve the order of lines from the first file you could use set.difference() like this:Note that this will include any whitespace (including newline characters) present in the files. If you wanted to ignore leading and trailing whitespace from each line:The above assumes Python 3. If you're using Python 2 then, optionally for better efficiency,  import itertools.imap and use it instead of map().Or you might like to treat the data as numeric (I'll assume float here, but you can use int instead):
The easiest way would be to read each file into a set, and then use Python's (very efficient) set operations to do the comparison. 
It's likely the issue might be that first.csv is strictly ASCII text, while second.csv, and third.csv are ASCII text, with CRLF line terminators. I would suggest you change them to the same format (ASCII text would probably work best).


Answer URL
https://docs.python.org/3/library/stdtypes.html?highlight=set.difference#set.difference
