Natural Text
How would one test the os module methods provided in python. For example how would you test the use of os.mkdir?What can be used to test this method?This method would have test cases such as Verifying the folder was createdInsufficient permissions to create folderInsufficient space to create folder
When unit-testing create_folder, you don't test os.mkdir. This is for two reasons:It is part of an external library (in this case the standard library, but the same would be the case for third-party libraries), so should be covered by the test suites for that library; andEven if it was part of your codebase, it's a different unit to the one under test.Additionally, it's worth noting that your testing of this, as demonstrated by user2393256's answer, would likely be using other functionality from the same external library - if the test fails, do you conclude that os.mkdir didn't work or that os.path.isdir didn't work?From the perspective of testing create_folder, what really matters is that it interacts with that function correctly. I would mock os.mkdir out (using e.g. unittest.mock) and check that it is being called with the appropriate path. You can also change the return value and side effects of the mock, allowing you to simulate things like insufficient permissions or space, and test your app's response to that, without having to somehow set up that environment for real. When testing other units of functionality that call create_folder I would then mock out create_folder entirely, as it's a tested and trusted unit.Beyond the unit testing, you would have a level of integration testing, which makes sure that all parts of your application work together correctly. At this point you would test overall functionality, e.g. that you can save a file then later load it back in, rather than specifics like "is the folder created?"Finally, and specifically for standard library functionality, you have to have a certain amount of trust that the language itself is tested (even if not directly, at least by the thousands of programs out there using this already!) and working.
To check if the directory was created you can use As for the permission: there is a python idiom which saysIt's easier to ask for forgiveness than for permissionIn that case i would try to create the folder and catch the exception that could be thrown.


Answer URL
https://docs.python.org/3/library/unittest.mock.html
