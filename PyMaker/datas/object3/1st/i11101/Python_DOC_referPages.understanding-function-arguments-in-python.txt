Natural Text
I'm trying to understand the following about dealing with functions and their arguments:Output:Obviously people are free to invoke functions in either of the ways shown above, which makes me wonder: why my_arg doesn't go to kwargs anyway? Isn't there a uniform way to access parameters by name (and not by position), which doesn't depend on the way the function was invoked? Please note that:I'm not interested in print_my_args(func, call_no, my_arg), because I'm talking about the case where I don't know the signature of func in advance and yet I want to know if a particular parameter exists (by name).Clearly that's related to decorators, but I've written the example in a simpler way (or I hope so).EDITMany thanks for the answers about inspect.signature. Using that, my new version of print_my_arg() is:
Isn't there a uniform way to access parameters by name (and not by  position), which doesn't depend on the way the function was invoked?Yes by inspecting the signature:Note that trying to bind the signature to an invalid call will raise similar/same TypeError that would be raised when calling the function with invalid arguments.  Also arguments that use the default will not be present in args.arguments unless you call args.apply_defaults()Also note that keyword only arguments will be in args.kwargs dictionary instead of args.arguments:


Answer URL
https://docs.python.org/3/library/inspect.html?highlight=signature#introspecting-callables-with-the-signature-object
https://docs.python.org/3/library/inspect.html?highlight=signature#inspect.Signature.bind
