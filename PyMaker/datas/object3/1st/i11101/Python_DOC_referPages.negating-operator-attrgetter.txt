Natural Text
I would like to use operator.attrgetter and itertool.groupby to split a string of text by spaces, preserving the number of spaces between the text. This is the expected behaviour:As I said I'd like to use attrgetter because I find it more pythonic than using a lambda. I can do:But this will return:What I need though, is exactly the opposite and I tried:This throws:TypeError: bad operand type for unary -: 'operator.attrgetter'How can I negate the value returned from attrgetter for keyfunction purposes?
operator.attrgetter won't directly work as a key function here. attrgetter("isspace")(x) will just fetch the "isspace" attribute of x, while you also need to call it:You could use str.isspace instead:
No, you cannot make an inverted function of the the attrgetter, or any other function with the neg operator. First of all, neg stands for negation; e.g. neg(x) <=> -x. And this applied to False results in 0; True => -1. The boolean negation is operator.not_. But even then this would do little to help you negate the return value - and actaully even negating wouldn't help you. Instead you should just pass in str.isspace to groupby; str.ispace is an unbound method - that accepts an argument of type str.What you are seeing here is that the return value of attrgetter('isspace') is called with each single character as a value. Each invocation returns a bound instance method:As each of these bound methods are bound to a different instance, they are necessarily distinct from each other, and do not compare equal to each other, that is why your code doesn't do what you'd expect. To get the actual value, you'd have to call this method yet again:For this case I'd ditch the itertools completely. This is a text-only task, so regular expressions and the re module are the way to go.There is no need to even handle this character-by-character when re.split is going to already achieve 90 % of what you want:Then, just use a list comprehension to make these into length, string tuples:That is, re.split splits by a given regular expression. \s+ matches one or more white-space characters. Normally the delimiter is discarded, but if the regular expression contains a subgroup (...) then contents of that subgroup are also retained in the match. 


Answer URL
https://docs.python.org/3/library/re.html
