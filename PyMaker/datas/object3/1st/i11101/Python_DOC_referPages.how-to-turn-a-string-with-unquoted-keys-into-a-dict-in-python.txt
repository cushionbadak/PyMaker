Natural Text
This question already has an answer here:Convert a String representation of a Dictionary to a dictionary?                    11 answers                I have a string Please not that the keys to the dictionary entries are unquoted, so a simple eval("{a:'b', c:'d',e:''}") as suggested in a previous question does not work.What would be the most convenient way to convert this string to a dictionary?
Depending on the complexity of what you're parsing, this could work:
If this is from a trusted source (do not use this for general user input, as eval is not secure; but then again, if you're getting input from a potentially malicious user you should use JSON format and the json module instead), you can use eval with a trick.printsHow this works is that we create a new dictionary subclass identdict that defines the magic method __missing__. This method is called for lookups on keys that are missing from the dictionary. In this case, we just return the key, so the dictionary maps keys to themselves. Then the source is evaluated using an identdict instance as the globals argument. eval will look up the values of variables from the globals mapping; as it is an identdict, the value of each variable accessed is conveniently now the name of the variable.Works for even more complex strings as values, and anything that is proper Python literal syntax.
WARNING This approach will not work as desired if you have a key mapping to an empty string in the middle of your "dictionary." I'll not delete this answer because I think this approach might still be salvageable. This might be a little more general than Will's answer, although, it is still going to depend on the exact structure of what you are parsing. If your key, value pairs will consist of alphanumeric words, you should be fine, though. If you want to know what is happening with the zip function, see these questions:Collect every pair of elements from a list into tuples in PythonI used itertools.zip_longest so you can use a fill value, inspired by:Pairs from single list
You could also do it this way, even though it's not pretty. It really does depend on what the structure of your string is. Are there any other sort of string dicts you have to evaluate?Output:
you can achieve this by using json package;



Answer URL
https://docs.python.org/3/library/json.html
