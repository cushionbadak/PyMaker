Natural Text
what gets returned when you return 'self' inside a python class?  where do we exactly use return 'self'? In the below example what does self exactly returns   
The keyword self is used to refer to the instance that you are calling the method from.This is particularly useful for chaining. In your example, let's say we want to call __next__() on an initialized Fib instance. Since __iter__() returns self, the following are equivalent :AndIn your particular example, the self keyword returns the instance of the Fib class from which you are calling __iter__() (called obj in my small snippet).Hope it'll be helpful.
Python treats method calls like object.method() approximately like method(object). The docs say that "call x.f() is exactly equivalent to MyClass.f(x)". This means that a method will receive the object as the first argument. By convention in the definition of methods, this first argument is called self.So self is the conventional name of the object owning the method.Now, why would we want to return self? In your particular example, it is because the object implements the iterator protocol, which basically means it has __iter__ and __next__ methods. The __iter__ method must (according to the docs) "Return the iterator object itself", which is exactly what is happening here.As an aside, another common reason for returning self is to support method chaining, where you would want to do object.method1().method2().method3() where all those methods are defined in the same class. This pattern is quite common in libraries like pandas.
Partial Answer:When you return self, you return the class instance. For example:If I create an instance and run ret_self, you will see that they both refer to the same instance:In other words, both x and x.ret_self() return the same reference to that class instance.self is actually another way of saying "this instance of Foo". Hence, instance variables are self.a in the class.When will you need this? I don't have the experience to tell you and I do not want to give possibly misleading information that I am unsure of. I will leave it to someone else to expound on this answer.Please do not accept this answer.


Answer URL
https://docs.python.org/3/tutorial/classes.html#method-objects
https://docs.python.org/3/library/stdtypes.html#iterator-types
