Natural Text
I have several test cases and test functions, and the list of test cases is different for the different functions. This can be easily done with pytest.mark.parametrize. The extra need I have is to load a resource (a file in my case) and I'd like to have this file only loaded once per test session and cached.Below an example illustrating what I want. It's working, but I would like to find a way to use pytest fixtures or some other caching mechanism so that I don't have to do the caching myself and have the pars=load_file(pars) line in each test function.Can someone please explain how to do this with pytest?
The first and the obvious solution is to use the session-scoped fixtures. However, it requires restructuring the test file, and load all of the known files in advance.Please note the indirect parametrisation. It means that the pars fixture will be prepared instead, getting a parameter value in request.param. The parameter name and the fixture must share the same name.The session-scoped fixture (or module-scoped, or class-scoped if you wish) will be prepared only once for all the tests. It is important to note that the wider-scoped fixtures can be used in the more narrow-scoped or same-scoped fixtures, but not in the opposite direction.If the cases are not that well-defined, it is the same easy, just the cache is populated on demand:Note, that the {} object is created only once, because it is session-scoped, and is shared among all tests & callspecs. So, if one fixture adds something into it, other fixtures will see it too. You can notice that on how case_1 is reused in the test_2:
A simple use of @lru_cache in your file parsing function can also do the caching trick:You can also reach the same result while making the whole code a bit more readable (?) by separating the test functions from the test cases with pytest-cases (I'm the author by the way!):Yields:Finally note that depending on your use case you might wish to switch to a case generator function, that would be far more readable and supports caching too. Also look at tags & filters, if you do not want to hardcode the cases explicitly.


Answer URL
https://docs.python.org/3/library/functools.html#functools.lru_cache
