Natural Text
I have a huge list of elements which somehow must be processed. I know that it can be done with Process from multiprocessing by:and so I can create lets say 10 processes and pass arguments split by 10 to args. And then job is done.But I do not want to create it manually and calculate it manually. Instead I want to use ProcessPoolExecutor and I am doing it like this:calculation is my function which do the job. list_to_process is my list to be processed. But instead after running this code, iteration on loop goes just one time. I thought that is the same as this 10 times:But it seems to be wrong. How to achieve real multiprocessing by ProcessPoolExecutor?
Remove the for loop from your calculation function.  Now that you're using ProcessPoolExecutor.map, that map() call is your loop, the difference being that each element in the list is sent to a different process.  E.g.You'll see something in the terminal like:Though the order of events will be effectively random.  The return value (at least in my Python version), is actually an itertools.chain object for some reason.  But that's an implementation detail.  You can return the result as a list like:In your example code you've instead passed a single-element tuple (list_to_process,) so that's just going to pass your full list to one process.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
https://docs.python.org/3/library/functions.html#map
