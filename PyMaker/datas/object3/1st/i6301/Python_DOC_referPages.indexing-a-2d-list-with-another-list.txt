Natural Text
If I have a list such as:and another list which contains a [row, column] index for an element in the list, so for example:Obviously I can get the element at index with:However,  I find that this syntax is quite clunky and doesn't sit well in a big block of code. It would also become worse with a higher dimensional list.My question: is there an easier way to do this index?It would seem that something like:would be more readable but this isn't how Python works so isn't an option.
Since you're working with a 2D-list, it might be a good idea to use numpy. You'll then simply need to define index as a tuple. Index 3 would be out of range, though:The method you're looking for is called Array#dig in Ruby:but I couldn't find any plain Python equivalent.
You could just create a simple function that iterates over the index. For every element in index just fetch item from object and assign that as a new object. Once you have iterated over the whole index return current object. As @EricDuminil noted it works with dicts and all other objects that support __getitem__:Output:
The method you used is probably the simplest way, but for better readability you could go for something like One way or another, you need to split your index list into the 2 values. If you want to declutter your main block of code, you can write a function to handle this, but that would hardly be "easier".EDIT: As suggested below, tuple unpacking is an even better option 


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getitem__
