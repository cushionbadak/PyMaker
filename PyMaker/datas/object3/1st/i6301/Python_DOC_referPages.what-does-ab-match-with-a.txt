Natural Text
This question already has an answer here:Difference between * and + regex                    6 answers                I just learnt that [^ab] will catch any character other than a or b.So [^ab]* should match 0 or more characters none of which are a or b.Yet python somehow matches [^ab]* to a.This code snippet prints a match. I believe either I am wrong in understanding the usage of ^ or made some error in the code
The []* means zero or more instances of what is in the brackets. In this case the empty string is matched since it is part of your string.See the doc, section match.If zero or more characters at the beginning of string match the regular expression pattern...The string 'a' has the empty string '' at the beginning if you will. You could say the reg ex is seeing it as ''+'a' where the beginning matches your pattern.Maybe you want to try fullmatch instead.
The "a" isn't the one being matched, it's an empty string ("") that's being matched.As you know, the * in regex signifies that the previous group matches 0 or more times - your regex is matching [^ab] 0 times, which is an empty string. Because of this, m is not None, but contains the empty string, which is different from no match.I wrote the assignments into a REPL:You can see that m.groups() is an empty tuple (and therefore not None), and m.group(0) returns an empty string, which means pattern matched 1 item (since m.group(1) doesn't work), which is an empty string.Try using [^ab]+ to not match anything - the + is like *, but it matches at least once.
As the previous answers states, using * regex expression matches 0 or more matches. That's the tricky part.You can do some testing, and better understand how Python treats *. The match object has the groups() method which returns the matches in groups:This seems odd. How come this returns an empty group? This is even more strange: the findall method returns a list of matched itemsTwo empty strings. This means even when there is no match, you'll get an empty item (list / tuple). If you change the * to + (match one or more) the results are different:This returns None.So, to sum it up, Python treats * with additional empty string at the beginning of the searched string when used in pattern such []*. However, when the pattern []+ is used it doesn't do that.


Answer URL
https://docs.python.org/3/library/re.html
