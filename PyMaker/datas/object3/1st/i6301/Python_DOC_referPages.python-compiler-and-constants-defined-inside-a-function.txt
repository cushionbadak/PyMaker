Natural Text
Does the Python compiler recognize constants defined within a function, such that it only computes their values once regardless of how many times the function is subsequently called in the code?For example,Would x be recalculated the 100 times f() is called?It is not always possible to define constants outside the function that uses them, and I'm curious if Python has got your back in these situations.
(Note that this applies to CPython, and may be different in other implementations)Python code is parsed and compiled into bytecode. You can see the instructions used with the dis module.As you can see, integer literals are constants, but lists have to be built everytime.This is a relatively fast operation (Probably even quicker than looking up a global, but the time is still negligible)If you had a function g that used a tuple instead, it is loaded as a constant:But this seems like a case of premature optimisation.The constants stored for a function can be found as function.__code__.co_consts.The reason a new list has to be built every time is so that if the list is changed, it won't affect a list that is loaded everytime.And the tuple optimisation goes away if it isn't a list of constants.
Short answer: for lists, it does not.If we check the intermediate code after compilation with dis, we see:So as you can see the program first loads constants 1 to 4 and pushes these on the stack, and the constructs a list with these constants, so that means it constructs a list each time.In case the list is not mutated, I propose to define the constant outside the function:


Answer URL
https://docs.python.org/3/library/dis.html
https://docs.python.org/3/tutorial/classes.html#python-scopes-and-namespaces
https://docs.python.org/3/reference/executionmodel.html#naming-and-binding
