Natural Text
I am experimenting with a search algorithm, and I am trying to use an A* algorithm to solve the problem.I am using a list of dictionaries to mantain the internal node structure.Each node is characterised by a certain state and associated cost.The selection function should return the node with the lowest cost.To be able to do this, I am filtering the list every time.I found this is very fast if the problem is very small,but in the case the list is very big, this function  uses 84% of the total time of the algorithm.My question is if there is a more efficient way of doing this.
Yeah, don't .pop from the beginning! That is linear-time. .pop from the end is constant, so just do:You might want to consider alternative data-structures, if you are trying to maintain a sorted sequence. You could look at heapq which is part of the standard-library, although it is pretty bare-bones. You might also consider the sortedcontainers library, which apparently, is very performant.
You should use functions like attrgetter or itemgetter for your key instead of lambda function as it is considered to be faster. Docs: https://docs.python.org/3/howto/sorting.htmlFor details, have a look at this answer.operator.itemgetter or lambda


Answer URL
https://docs.python.org/3/howto/sorting.html
https://docs.python.org/3/library/heapq.html
