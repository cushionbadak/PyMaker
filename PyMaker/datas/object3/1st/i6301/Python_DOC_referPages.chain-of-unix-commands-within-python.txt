Natural Text
I'd like to execute the following UNIX command in Python: cd 2017-02-10; pwd; echo missing > 123.txt The date directory DATE = 2017-02-10 and OUT = 123.txt are already variables in Python so I have tried variations of call("cd", DATE, "; pwd; echo missing > ", OUT) using the subprocess.call function, but I’m struggling to find documentation for multiple UNIX commands at once, which are normally separated by ; or piping with >Doing the commands on separate lines in Python doesn’t work either because it “forgets” what was executed on the previous line and essentiality resets.
You can pass a shell script as a single argument, with strings to be substituted as out-of-band arguments, as follows:This is much more secure than substituting your date and out values into a string which is evaluated by the shell as code, because these values are treated as literals: A date of $(rm -rf ~) will not in fact try to delete your home directory. :)
Doing the commands on separate lines in Python doesn’t work either  because it “forgets” what was executed on the previous line and  essentiality resets.This is because if you have separate calls to subprocess.call it will run each command in its own shell, and the cd call has no effect on the later shells.One way around that would be to change the directory in the Python script itself before doing the rest. Whether or not this is a good idea depends on what the rest of the script does. Do you really need to change directory? Why not just write "missing" to 2017-02-10/123.txt from Python directly? Why do you need the pwd call?Assuming you're looping through a list of directories and want to output the full path of each and also create files with "missing" in them, you could perhaps do this instead:The above could use some error handling in case you don't have permission to write to the file or the directory doesn't exist, but your shell commands don't have any error handling either.



Answer URL
https://docs.python.org/3/library/shlex.html#shlex.quote
