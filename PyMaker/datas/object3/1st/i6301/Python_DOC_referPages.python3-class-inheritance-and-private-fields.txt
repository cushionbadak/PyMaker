Natural Text
I am trying to understand how class inheritance works in Python 3, in particular how private fields interact with local and inherited methods. Here are some examples to illustrate the issue.First, if a variable var in the Superclass is public, then any method in the Subclass will also be able to alter it:The same is not true if the variable __var in the Superclass is private, any inherited method will ignore modifications done by the Subclass:Local methods in the Subclass can alter it:But in order to use an inherited method with the altered value, I must use self._Superclass__var instead of self.__var in the Subclass:Why is this the case? Are private fields not being inherited by the subclasses and therefore the variable self.__var inside the Subclass is NOT pointing to the same value the variable self.__var inside Superclass?
Python doesn't really have private variables, there are two conventions:Variables prefixed with underscore (_var) are used to let you and other people know that it's intended to be privateVariables prefixed with two undersores (__var) are also mangled by python interpreter and also are prefixed by class name, but they are still accessible like self._Superclass__var in your exampleSee also the documentation.There is one more issue in your code - you are using class variables, not instance variables (this is what usually called static class variables in other languages).Check this example:And when you are doing self.var = xxx assignments in your methods, you just hide the class-level variable and add the new instance-level variable with same name.See also the documentation: https://docs.python.org/3.6/tutorial/classes.html#class-and-instance-variables


Answer URL
https://docs.python.org/3/tutorial/classes.html#private-variables
https://docs.python.org/3/tutorial/classes.html#private-variables
