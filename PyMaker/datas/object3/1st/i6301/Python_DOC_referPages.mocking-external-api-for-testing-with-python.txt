Natural Text
ContextI am trying to write tests for functions that query an external API. These functions send requests to the API, get responses and process them.In my tests, I want to simulate the external API with a Mock server that is ran locally.So far, the mock server is ran successfully and responds to custom GET queries.The problemThe external API responds with objects of type <class 'dict'>, while apparently all I can get from my mock server is a response of type <class 'bytes'>. The mock server is fetching pre-defined data from disk and returning them through a stream. Since I can not simulate the external API, my tests throw error messages because of the wrong types of responses.Following are snippets of my code with some explanations.1. setUp() function:The setUp function is ran at the beginning of the test suite. It is responsible of configuring and running the server before running the tests:2. The MockServerClassHandler:To my understanding from the official documentation, a BaseHTTPRequestHandler can only serve the content of his response through writing in a predefined stream (wfile) which needs to be given (and I am quoting an error message) a byte-like variable.So my questions are:Is there a way to make my mock server respond with other types of content than bytes? (JSON, python dicts ...)Is it safe to write, in the functions that I test, a piece of code that will convert the bytes variables to Python dicts, just so I can test them with my mock server? Or is this violating some principles of testing?Is there another way of writing a server that responds with JSON and python dicts?
In the comments, it sounds like you solved your main problem, but you're interested in learning how to mock out the web requests instead of launching a dummy web server.Here's a tutorial on mocking web API requests, and the gory details are in the documentation. If you're using legacy Python, you can install the mock module as a separate package from PyPI.Here's a snippet from the tutorial:


Answer URL
https://docs.python.org/3/library/unittest.mock.html
