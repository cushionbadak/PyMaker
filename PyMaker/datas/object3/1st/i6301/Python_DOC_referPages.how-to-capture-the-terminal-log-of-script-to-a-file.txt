Natural Text
This question already has an answer here:How to capture stdout output from a Python function call?                    2 answers                I have a python script which runs succesfully from the Linux terminal. I am able to collect the terminal output to a file using a shell script when I run my python script.Now I want to collect the terminal output from the python script itself. But unable to do so.I want to do this using python only not using any shell or unix scriptingI have done like below in my python file:This part of code in the python file prints both stderr and stdout to a outfile.How can I capture the whole terminal output to a single file.
If you're okay with the requirement of having python in your PATH, then I'd call another python process to run your main script. In your top-level script, use the subprocess.Popen to start your desired script in a child process. Then use subprocess.Popen.communicate() to get the output streams from the process (and probably pass any command-line arguments into the process).You might even be able to redirect all std* output to files just with Popen, but this really depends on your needs and whatnot. communicate() seems pretty useful for what you might want to do.subprocess.Popensubprocess.Popen.communicate
You can use something like this in your code:        os.system('pdv -t %s > 123.txt' % epoch_name)You could also look into this: Subprocess


Answer URL
https://docs.python.org/3/library/subprocess.html
