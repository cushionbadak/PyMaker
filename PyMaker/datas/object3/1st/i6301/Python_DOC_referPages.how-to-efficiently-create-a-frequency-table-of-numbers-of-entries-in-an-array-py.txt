Natural Text
I'm trying to implement an efficient way of creating a frequency table in python, with a rather large numpy input array of ~30 million entries. Currently I am using a for-loop, but it's taking far too long.The input is an ordered numpy array of the form And I would like to have an output of the form:Currently I am using the following implementation:Is there a quicker way of doing this or a way without iterating through a loop? Thanks for helping, and sorry if this has been asked before!
You can simply do this using Counter from collections module. Please see the below code i ran for your test case.It gave the following outputyou can easily use this object for further. I hope this helps.
If your input array x is sorted, you can do the following to get the counts in linear time:
I think numpy.unique is your solution.https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.unique.htmlThis takes ~4 seconds for me.The collections.Counter approach takes ~10 seconds.But the numpy.unique returns the frequencies in an array and the collections.Counter returns a dictionary. It's up to convenience.Edit. I cannot comment on other posts so I'll write here that @lomereiters solution is lightning fast (linear) and should be the accepted one.


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
