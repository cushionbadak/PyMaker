Natural Text
I tried the following code:The compiler reported a SyntaxError: invalid syntax. What is the problem?[EDITED:] What I was trying to do is:I want to change the namescope in tensorflow for sharing variables. I looked at the online tutorial but that doesn't help much.
Oversimplifying slightly, your code:… translates to something like this:Writing 1 = x.__enter__() is obviously going to raise a SyntaxError: can't assign to literal, because it doesn't mean anything to assign a new value to the literal constant 1.Doing the same thing in a with statement raises the same exception. (In old versions of Python (I think just 2.5?), the error message wasn't quite as useful, and it just said SyntaxError: invalid syntax, but the problem is the same.)Depending on what was in x, getting past the SyntaxError may well just raise a new exception, AttributeError: __enter__. Only context managers can be used in a with statement. Roughly, these are things that know how to clean up after themselves, and where it's important to get them to clean up at the end of some block of code no matter what. Files are the prototypical example: they call self.close() when you exit the block, which makes sure you don't get OS errors from having hundreds of open files lying around, or fail to flush the last write, or other such problems.For more information on with, see PEP 343, the proposal that originally added with to Python 2.5, or Understanding Python's "with" statement (from effbot).So, the question here is: what were you trying to do? If you just want to assign the value 1 to the name x, you already know how to do that, because you did it with y in the very next line: just x = 1. If you were trying to do something different… well, there probably is a way to do it, but with may well be nowhere near the right answer.
You misunderstand Python's with statement.  If you tell us what you want to do, we can help.creates a context (execution environment) with three characteristics:On entering the context, the object's __enter__ method (function) is called;The return value of that function is assigned to name;On leaving the context, the object's __exit__ method is called, regardless of how we leave the context.Your attempt, with x as 1 fails on all characteristics.  x has no __enter__ or __exit__ method; there is no return value; you could not assign that return value to the constant 1.


Answer URL
https://docs.python.org/3/reference/datamodel.html#with-statement-context-managers
https://docs.python.org/3/reference/compound_stmts.html#with
