Natural Text
I want to run a process that runs an infinite loop (for example, starting a database server) from a python script and capture stdout and stderr. I tried this, but p.communicate() never returns, apparently because the process needs to finish first.I'd like to get the output in some kind of streaming form. For example, I might want to save every 100 characters to a new log file. How can I do it?
Edit: Something closer to what you already had, as asyncio seems like overkill for a single coroutine:Original:I threw something together.  The following uses asyncio.subprocess to read lines from a subprocess' output, and then do something with them (in this case, just print() them).The subprocess is specified by args, and in my case is just running another python instance in unbuffered mode with the following script (test4.py):I'm sleeping in the for loop so it's clear whether the lines are coming in individually or all at once when the program has finished.  (If you don't believe me, you can change the for loop to while True:, which will never finish).The "supervisor" script is:Note that async def is Python 3.5+, but you could use @asyncio.coroutine in 3.4.


Answer URL
https://docs.python.org/3/library/asyncio-subprocess.html
https://docs.python.org/3/library/asyncio-subprocess.html
https://docs.python.org/3/library/asyncio-subprocess.html#subprocess-using-streams
