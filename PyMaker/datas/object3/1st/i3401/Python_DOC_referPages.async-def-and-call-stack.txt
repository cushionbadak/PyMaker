Natural Text
When using asyncio with Python 3.6, if one function deep in the callstack is async, do I need to make the whole stack async and put await at every call?For example I have:  In the above example, do I need to make the whole call stack of func1 / 2 / 3 as async and await on all of them? (I am afraid answer is yes)Can I interchangeably pass FileDataSource and SocketDataSource to func1 or do I need to change the whole call hierarchy based on async vs non-async calls?What would be the best way to design something like this which can run as a server or a batch?Thanks a lot in advance for all help!
if one function deep in the callstack is async, do I need to make the whole stack async and put await at every call?The answer depends on what exactly the functions in the call stack do, but most likely yes. await affects requires the async function to communicate with its caller - either the awaiter or the event loop driver - in order to ensure suspension/resumption of its execution.A non-async function can participate in the call stack without awaiting, but then it can only be used to transmit the coroutine object and it cannot examine the data. For example, func3 could be implemented as either:or:But the first function could examine (or log, etc.) the data returned by getData, whereas the second one exits immediately and returns the coroutine object which someone else must await.Can I interchangeably pass FileDataSource and SocketDataSource to func1 or do I need to change the whole call hierarchy based on async vs non-async calls?Once you make all the functions in the call stack async, you won't be able to pass FileDataSource, but that doesn't mean you have to have two separate call hierarchies. Just implement FileDataSource as trivially "async" by changing def getData() to async def getData() (and otherwise leaving the implementation unchanged), and it will work for async usage, provided it doesn't actually block.


Answer URL
https://docs.python.org/3/library/asyncio-stream.html#asyncio.open_connection
