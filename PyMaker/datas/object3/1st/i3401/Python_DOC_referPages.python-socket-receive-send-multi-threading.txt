Natural Text
I am writing a Python program where in the main thread I am continuously (in a loop) receiving data through a TCP socket, using the recv function. In a callback function, I am sending data through the same socket, using the sendall function. What triggers the callback is irrelevant. I've set my socket to blocking.My question is, is this safe to do? My understanding is that a callback function is called on a separate thread (not the main thread). Is the Python socket object thread-safe? From my research, I've been getting conflicting answers.
Sockets in Python are not thread safe.You're trying to solve a few problems at once:Sockets are not thread-safe.recv is blocking and blocks the main thread.sendall is being used from a different thread.You may solve these by either using asyncio or solving it the way asyncio solves it internally: By using select.select together with a socketpair, and using a queue for the incoming data.We use multiple constructs in here. You will have to fill up the empty spaces with your code of choice. As for the explanation:We first create a send_queue which is a queue of data to send. Then, we create a pair of connected sockets (socketpair()). We need this later on in order to wake up the main thread as we don't wish recv() to block and prevent writing to the socket.Then, we connect the main_socket and start the callback thread. Now here's the magic:In the main thread, we use select.select to know if the rsock or main_socket has any data. If one of them has data, the main thread wakes up.Upon adding data to the queue, we wake up the main thread by signaling ssock which wakes up rsock and thus returns from select.select.In order to fully understand this, you'll have to read select.select(), socketpair() and queue.Queue().


Answer URL
https://docs.python.org/3/library/asyncio.html
https://docs.python.org/3/library/select.html#select.select
https://docs.python.org/3/library/socket.html#socket.socketpair
https://docs.python.org/3/library/queue.html#queue.Queue
