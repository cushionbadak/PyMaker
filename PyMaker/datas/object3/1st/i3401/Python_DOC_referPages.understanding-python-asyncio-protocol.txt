Natural Text
I am lacking understanding on how Python asyncio and protocols are working.Documentaion that seems relevant:class asyncio.ProtocolProtocol.eof_received()  state machine shows relevant transitionsAbstractEventLoop.run_until_complete(future) Example code that is echo tcp client:Output when connceted on echo server:From what I understand this should run until connection is closed. From: Connection callbacksconnection_made() and connection_lost() are called exactly once per successful connection. All other callbacks will be called between those two methods, which allows for easier resource management in your protocol implementation.and from also state machine:But, function EchoClientProtocol.connection_lost is never called and loop.run_until_complete(coro) terminates before Protocol completes. Question is:How to get coroutine/future that wraps protocol in a way that coroutine completes when end state of protocol is reached and loop.run_until_complete returns on such event.
As Sraw's answer points out, loop.create_connection is a coroutine that returns as soon as it has created a transport/protocol pair. So you need to run another coroutine (or equivalent object) that will keep the event loop alive for interesting things to happen.how to run loop until protocol internal state reaches state end without explicitly closing loopYou don't necessarily need to close or stop the loop. If I'm following you correctly, you'd like to avoid an unsightly run_forever, instead writing something like:While wait_connection_lost() indeed doesn't come with asyncio, you are providing the protocol implementation, so you can easily create one for your protocol:
loop.run_until_complete(coro) returns transport, protocol.So to triggle connection_lost, the connection should be closed either by server or client. So you need:As you are not stoping loop in connection_lost, it will be blocked here forever.BTW, coro returns when connection is connectted successfully.


Answer URL
https://docs.python.org/3/library/asyncio-protocol.html#asyncio.Protocol
https://docs.python.org/3/library/asyncio-protocol.html#asyncio.Protocol.eof_received
https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.AbstractEventLoop.run_until_complete
https://docs.python.org/3/library/asyncio-protocol.html#connection-callbacks
