Natural Text
I'm planning to read millions of small files from disk. To minimize i/o, I planned to use a dictionary that maps a file path to its content. I only want the dictionary to retain the last n keys inserted into it, though (so the dictionary will act as a cache).Is there a data structure in Python that already implements this behavior? I wanted to check before reinventing the wheel.
Use collections.deque for this with a maxlen of 6, so that it stores only the last 6 elements and store the information as key value pairs
For my particular problem, since I needed to read files from disk, I think I'll use the lru cache as @PatrickHaugh suggested. Here's one way to use the cache:The output shows that requests for 0 do not incur additional i/o, which is perfect.
You can use collections.OrderedDict and its method popitem to ensure you keep only the last n keys added to the dictionary. Specifying last=False with popitem ensures the behaviour is "FIFO", i.e. First-In, First-Out. Here's a trivial example:


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
https://docs.python.org/3/library/functools.html#functools.lru_cache
