Natural Text
Here is an example dictionary, colors:For the sake of this example, let's assume that there are many more color-named keys in this dictionary. Now, assume I am looking for a particular member ID.Is there a simpler, possibly one-line way to do this?
Here is another one-liner that uses any coupled with a generator expression:
Here's a one-line way of doing this:Output:
Evaluates to the first color key with that member_id, like 'Blue' (or None if not found).Generator expressions are lazy, so it will stop searching as soon as it finds a match.
You could use a list comprehension which is just a concise way to do your for loop and conditional statement. The list comprehension below will return a color value when the member_id is present. If you check that the returned list has at least one value, you know the member_id was present in at least one color dict. If you make two lines and assign the output you could also have the color dict handy, in case you need to modify or read any of its state.any([color for color in colorDict if member_id in colorDict[color]['members']])I would say this is more pythonic than the example in your question, but sometimes list comprehensions can be unclear when there is more complexity involved. For example, if you needed two loops and two conditions then a list comprehension may not be the best choice. Overall they're an extremely useful tool, but it's up to you to decide when to use them.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
