Natural Text
This question already has an answer here:How to remove items from a list while iterating?                    23 answers                I want to iterate over a list of files in Python 3. They are CSV files containing matrices. I want to do the same with all of them so I wanted to create a list with their names, remove all other files in the folder from the list and do my transformation with the relevants.My target files all end with "2m.csv" (e.g.: 14-17_CCK_all_2m.csv) and my results at the end of the process will end with "1m.csv". Still when I run the following script in Jupyter notebook, the result contains some files ending with "1m.csv" (they remained there from an earlier cycle of the development)Interestingly, if I test one of the false negatives in a separate lines, I get a True answer, so the if statement should have eliminated it from my list in the script above - which it did with some of them, but not with some others:All the files in question have very similar name structure. Thanks for your help.
The problem seems in your for loop. You are iterating through and modify myfiles at the same time.The solution is to filter out wrong file names inline.
To filter the list in Python, like you would want, don't use for loop to iterate over it. It's better to use list comprehensionsSo it would look like this:It's more clean, its usually faster on benchmarks, and it does the job you want it to do (and it's also a lot cleaner than map/filter - but that's my subjective opinion)
Better use list comprehensions:And I prefer to use endswith() method, not slices:
modifying a collection/list --  iterating it is always likely to produce this sort of discrepancy. If you add a print statement before your if statement, you'll probably see that "2m.csv" doesn't print. THe reason being that as you're removing from the list, the list is re-indexed, and the iteration effectively skips over the item.The solution as given in the linked duplicate is to use list comprehension:Alternatively, if you prefer to use a for loop, you need to iterate backwards, so that the removal of items (and subsequent re-indexing) doesn't affect the remaining items.But the list comprehension method would be more concise and more pythonic.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
