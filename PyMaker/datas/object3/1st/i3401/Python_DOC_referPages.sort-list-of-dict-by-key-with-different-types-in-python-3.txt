Natural Text
I have a method that group a list of dict by a key. To do it I found here that I have to use the groupby function but before I have to sort the list. Here is my method right now:This piece of code works only if every key is defined in all the dicts and the values are all of the same type. However, where I use this method I don't know if the key is defined everywhere and if they are of the same type. On Python 2.x I know that exists sorted function with cmp parameter that could do a custom sort but from Python 3.x this isn't possible anymore. Is there a way to make a custom sort? I am thinking about use the classic sort by < and sorting also by typename. By now I thought about use the get function and cast to string in the sort likeIt only overcomes in case of string, numeric and None content but not a generic object and it breaks easily if for example I executeThe output isinstead of what I expect should be (order of lists is not a problem)
You can solve your problem by doing something like thisBut if you still need a custom comparison function, you can do it using functools.cmp_to_key
Thanks to @Sunitha and @njzk2 for pointing out the cmp_to_key function, it did totally what I wanted. So, my grouping now is:Calling on the sample listIt returns the expected listWhat I did is to compare in the classic way the keys of the same type, otherwise I simply do a string comparison between the classes' names (using a.__class__.__name__ instead of type(a).__name__, check out to this answer).Thanks to all!


Answer URL
https://docs.python.org/3/whatsnew/3.0.html#ordering-comparisons
https://docs.python.org/3/library/functools.html#functools.cmp_to_key
https://docs.python.org/3/library/functools.html#functools.cmp_to_key
