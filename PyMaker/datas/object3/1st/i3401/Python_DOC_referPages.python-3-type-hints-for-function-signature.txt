Natural Text
Is there a way to declare the signature of a function object with Python (3.5+) type hints? Specifically, is there a way to declare what type of function object a function can accept or a variable can reference. I'm sure it could get quite messy (as it can with C++11 lambda types for example), but is there at least some way to check function types?For example:Passing func1 as an argument to takes_two should be an error, whereas passing func2 is fine.
For that purpose, use the typing.Callable type (see here):The first argument to Callable is a list of types for the arguments of the function, while the second argument is the return type.Of course, python itself does not check types at all. For this, you should use additional tools such as mypy
Short answer: there is no built-in way to enforce type declaration and checking.As the name suggests, these are type hints, which can help the programmer know what is passed as arguments and what is returned from functions (this can be specially useful when reading/reviewing large code files). However, as can be seen here in this post from Guido, Jukka and Lukasz:It should also be emphasized that Python will remain a dynamically typed language, and the authors have no desire to ever make type hints mandatory, even by convention.So if you expect statically-typed arguments which would raise errors if passed objects do not have the required type, then you should not be using python in the first place.However, you may have some options: e.g. IDEs, like pycharm or Atom, have plug-ins that will check types for you.However, if your point is to just have a type hint for callable with no enforcing, error-raising or automatic checking, then check @dseuss' answer :)
You can tell the signature of a user defined function using function annotations. But actually it's just a meta information. It does not enforce any type checking rules. You can use a separate line type checker in modern editors like pycharm etc. These type checker acts as powerfull linter.Typically, Python will remain a dynamically typed language, and the authors have no desire to ever make type hints mandatory, even by convention. Refer- type hints


Answer URL
https://docs.python.org/3/library/typing.html#callable
