Natural Text
I was trying out the new dataclasses in Python 3.7The dataclass decorator can be passed arguments to control the dunder functions that are added to the class.For some reason, the decorator does not seem to raise TypeError for eq=False argument.As per the docs:If I understand correctly, if i pass eq = False, __eq__ function will not be added, and a TypeError should be thrown when comparing two instances of the same class. Instead, the eq parameter seems to have no effect.The above does not raise TypeError and always evaluates to False.The other arguments(eg: order, repr) seem to behave as expectedIs there some gap in my understanding?I am using docker image python/rc-stretch
In python3.7, given the following dataclass definitionthe expected result for Number(1) == Number(1) is False. This is correct since setting eq = True only overrides the default python-object equality function, which just checks for identical references (the same as is) in this case.The dataclass specification is a bit lacking here. It explains the eq parameter witheq: If true (the default), an __eq__ method will be generated. This method compares the class as if it were a tuple of its fields, in order. [...]but in order to understand the issue you ran into, you also need to know that the basic python object already offers an __eq__ function:
When you don't define __eq__, __eq__ will resolve to object.__eq__.  That is what's happening when you create a dataclass with eq=False.object.__eq__(self, other) is False unless self is other, i.e. unless the two are the same object.


Answer URL
https://docs.python.org/3/reference/expressions.html#value-comparisons
https://docs.python.org/3/reference/expressions.html#value-comparisons
