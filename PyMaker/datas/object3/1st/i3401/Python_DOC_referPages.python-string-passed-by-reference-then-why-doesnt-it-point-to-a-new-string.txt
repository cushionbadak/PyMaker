Natural Text
I have the following piece of code:The output is Old but I don't understand - the method change gets a REFERENCE to the class variable variable then why doesn't self.variable change to New if I assigned a new string to the pointer inside the class ?I know the string itself is immutable but doesn't it change the value of the pointer represented by self.variable ?Wouldn't it be the same as:  *var = 'New'   in C ?
@roganjosh already pointed you to the right blog post. It comes down to Python does not pass the variables by reference or by value but by assignment. You can reference these posts for further elaboration:Python functions call by referenceHow do I pass a variable by reference?https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference
As mentioned in the comments by Kasaramvd and the link provided by roganjosh above, var is just a local name which refers to an immutable object. All the change() function can do is create a name var in its local namespace and bind it to a the different immutable object 'New'.Works when using self.variable instead of var:


Answer URL
https://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference
