Natural Text
X: a list of lists, where each list element corresponds to a label in YY: a binary list of labels (values are either 1 or 0)I want to extract the elements in X according to the value at the corresponding index in Y, as follows:good = values of X where the label/value in Y is 1bad = values of X where the label/value in Y is 0I am still fairly new to sub-setting in Python and not really sure of a good way to do this.
If something about your problem makes this naturally seems to call out for doing this in terms of slicing with a bunch of bools rather than looping, that may be a sign that you should be using NumPy:If, on the other hand, this does make sense in terms of looping, the easy thing to do is write the loop statements out verbosely, and only then figure out how to translate that into a neat list comprehension.So, let's translate your English description into Python.First, we want to loop over the values of X with the corresponding values of Y. That's what zip does. So:Now, an x is good if the y equals 1. So:And what we want to do with the good x values is gather them into a new list. So:And that exactly fits the pattern for a list comprehension: you create an empty list, then have a for with zero or more nested for and/or if statements underneath it and an append to the list at the base. So:Or, since 1 is truthy and 0 is falsey:That looks like something general enough to wrap up as a function:And finally, many interesting looping patterns like that are already wrapped up in a function in itertoolsâ€”or, if not there, then in third-party libraries like more_itertools and toolz. So, it's worth scanning through them to find if there's something that already does exactly what you want. And, in fact, there is:So, you can just use that:But it's still worth learning how to write these things yourself, even if you end up using itertools in the end.
list(itertools.compress(X, Y)) will get you the list of good lists. list(itertools.compress(X, [not a for a in Y])) will get you the list of bad lists.
Now simply print out the lists good and bad
You can simply treat Y as a list of indices for your desired partition.


Answer URL
https://docs.python.org/3/library/itertools.html
