Natural Text
I want to have my tests in a separate folder from my package code, such that from the top level directory of my project I can run python sample/run.py or python tests/test_run.py, and have both of them resolve all the imports properly.My directory structure looks like this:I know there are supposedly many ways to achieve this, as discussed here: Python imports for tests using nose - what is best practice for imports of modules above current packageHowever, when I try to run python tests/test_run.py, I get a ModuleNotFoundError for 'helper', because 'sample/run.py' imports 'sample/helper.py'.In particular, I am trying to follow the convention (suggested in the Hitchhiker's Guide to Python) of explicitly modifying the path using:As a result, I have a blank sample/__init__.py, along with the following code files.sample/run.py:sample/helper.py:tests/context.py:tests/test_run.py:So I have two questions:Why is Python unable to find the 'helper' module?How do I fix things so that I can run both sample/run.py and tests/test_run.py from the top-level directory?
Edited:To make both sample/run.py and tests/test_run.py work, you should add the path of sample directory into python path. So, your tests/context.py should be This change will let Python know the path of helper module.sample/run.py should be:Implicit relative imports within packages are not available in Python 3. Please check below:The import system has been updated to fully implement the second phase of PEP 302. There is no longer any implicit import machinery - the full import system is exposed through sys.meta_path. In addition, native namespace package support has been implemented (see PEP 420). linkThis documentation might be helpful to understand Intra-Package-References.


Answer URL
https://docs.python.org/3/reference/import.html
https://docs.python.org/3/tutorial/modules.html#intra-package-references
