Natural Text
I have a block of code that should remove every letter from that a string whose index is divisible by 3:The string "Python" for example produces "yton" as expected. I have tested this with a dozen or so strings with the correct output, except for one curious case:The string "Hello" produces "eo" instead of "elo". Upon closer inspection, python is removing double-occurences, such as "ll". Why would this be?
This is what replace does:Return a copy of the string with all occurrences of substring old replaced by new. If the optional argument count is given, only the first count occurrences are replaced.You're actually relying on exactly that behavior in your replace(' ', '') call.When you don't want that, don't use replace. (In fact, almost any use of s.replace(s[i], …) has exactly this problem, so watch out whenever you find yourself writing that.)For example, you can just use slicing:Or, maybe even better, just build up a list of characters and join them at the end:… which you can even condense into a one-liner:If you're really not allowed to use join, you can do the same logic—just less efficient and idiomatic—with string concatenation:Or, just for fun, put all the complexity in the ranges and slicing so you don't even need the %:
This is because the replace method replaces every occurrence of the string with the replacement string. When you replace l, the third character of Hello, it also replaces the other l with ''.
By calling s.replace you are invoking replace on the entire string s, which replaces all occurrences of s[i], unless you pass a third parameter to replace() to limit the number of times the replacement happens.Try this in stead:I think you could also just skip using replace and more precisely change that one character, changing the code under your if to:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.replace
