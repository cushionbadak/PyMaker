Natural Text
I'm toying with python to understand how it works, but there is something weird. I'm defining a __new__ method in my MetaClass, and I expect the fourth argument (which is a dict of attributes of the class-to-be), to contain methods defined in my class-to-be body.I have this code : The output is:So print(attrs) in MyMetaClass.__new__ the result is, as expected : How you can see, it contains the 'foobar' key.However, the next line raises AttributeError : 'dict' object has no attribute 'foobar'. Why ?I tried hasattr(attrs, 'foobar') which returns false too.
A dictionary doesn't expose the keys as attributes. The dictionary will become the namespace for the class being created, but it is not yet part of a class. Classes (and their metaclass) have a __getattribute__ method that translates attribute access to dictionary lookups, but that's not available on the dictionary object itself.Just use dictionary subscription access:or call super().__new__(), store the return value, then look up the attribute on that new class object:Note: super(MyMetaClass, metacls) does not produce an instance! It returns the super() proxy object, attributes on which will be looked up on the metaclass Method Resolution Order (MRO). super(MyMetaClass, metacls).__new__ is such a lookup, finding the next __new__ attribute in the metaclass's MRO. In this case that's type.__new__, and calling that method produces the actual class object. 


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getattribute__
https://docs.python.org/3/howto/descriptor.html
