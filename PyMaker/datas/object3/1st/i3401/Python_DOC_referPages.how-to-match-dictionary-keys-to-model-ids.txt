Natural Text
I have a list similar to the following:my_list = ['1', '2', '1', '3', '2', '1']These are votes and each vote is corresponds to an id from this model which contains the choices of a poll:I'm using Counter to count the votes and I end up with this:Each key in this dictionary corresponds to an ID in the Choice model. How can I replace the key names of the dictionary with the corresponding choice_text for each ID?I would like to end up with a dictionary that looks as following:{'choice_text for id=1':3, 'choice_text for id=2':2, 'choice_text for id=3':1}EDIT:Additionally what if I wanted to do the same procedure to the list I already have.my_list = ['1', '2', '1', '3', '2', '1']to something like this:another_list = ['choice_text for id=1', 'choice_text for id=2', 'choice_text for id=1', 'choice_text for id=3', 'choice_text for id=2', 'choice_text for id=1']
Well we can first load a dictionary that maps ids to choice_text:Here with pk__in we thus make a filter (which is, strictly speaking, not necessary, but will reduce the amount of work both for the database and the webserver, unless the number of ids is huge). Then we want it to return values_lists, so for every element a list with two elements: the pk and the choice_text.We use the dict(..) constructor, which can fetch an iterable of 2-lists (or 2-tuples), and converts it to a dictionary where for every element the left item of the sublist/tuple is the key, and the right item is the value.Now we can use this to construct a new dictionary:Note that in case there are two Choices with the same choice_text, then it will only retain one of the elements in the counter.In case the choice_texts should be different for every two Choices with the same question, you can enforce that at the model level with unique_together:
to get the name of your choice : choice_text = Choice.objects.get(pk=choice_id)so you have to iterate over your ids, get the choice_text and use :votes[choice_text] = votes.pop(choice_id) to rename your keys to the corresponding choice names. 


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
