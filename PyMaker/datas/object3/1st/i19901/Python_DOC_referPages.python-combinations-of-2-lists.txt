Natural Text
What is the pythonic way to calculated all the product combinations of two lists. So given two lists of length n I'd liked to return a list of length 2^n containing the products. Like list(itertools.product(on,off)) but the results should use all four elements not only combination pairs like:So more like this:The output can be similar to the itertools.product() method i.e [(5.53, 3.12, 3.75, 4.75),(5.53, 3.12, 3.75, 1.7), ...]  I need to calculate the product but I'm interesting in the combination method. Note: When I say pythonic way of doing this I mean a simple one or two lines taking advantage of pythons structures, libraries (itertools ect). 
You can generate all 2**4 possibilities by starting with itertools.product([0, 1], 4).  This enumerates all possible sequences of 0s and 1s of length 4, and then you can translate each 0-1 sequence to a sequence of values from off and on, by taking off[i] if the ith element of the 0-1 sequence is 0, and on[i] otherwise.  In code: To print the products instead of the lists:If you have numpy available and are willing to work with numpy arrays instead of Python lists, then there are some nice tools like numpy.choose available.  For example:Combining with the earlier solutions gives:
You were very close, itertools.combinations().
Is this what you want:


Answer URL
