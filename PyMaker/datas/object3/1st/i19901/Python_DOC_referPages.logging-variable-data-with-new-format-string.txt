Natural Text
I use logging facility for python 2.7.3. Documentation for this Python version say:the logging package pre-dates newer formatting options such as str.format() and string.Template. These newer formatting options are supported...I like 'new' format with curly braces. So i'm trying to do something like:And get error:TypeError: not all arguments converted during string formattingWhat I miss here?P.S. I don't want to use because in this case the message is always being formatted regardless of logger level.
EDIT: take a look at the StyleAdapter approach in @Dunes' answer unlike this answer; it allows to use alternative formatting styles without the boilerplate while calling logger's methods (debug(), info(), error(), etc).From the docs â€” Use of alternative formatting styles:Logging calls (logger.debug(), logger.info() etc.) only take  positional parameters for the actual logging message itself, with  keyword parameters used only for determining options for how to handle  the actual logging call (e.g. the exc_info keyword parameter to  indicate that traceback information should be logged, or the extra  keyword parameter to indicate additional contextual information to be  added to the log). So you cannot directly make logging calls using  str.format() or string.Template syntax, because internally the logging  package uses %-formatting to merge the format string and the variable  arguments. There would no changing this while preserving backward  compatibility, since all logging calls which are out there in existing  code will be using %-format strings.And:There is, however, a way that you can use {}- and $- formatting to  construct your individual log messages. Recall that for a message you  can use an arbitrary object as a message format string, and that the  logging package will call str() on that object to get the actual  format string.Copy-paste this to wherever module:Then:Note: actual formatting is delayed until it is necessary e.g., if DEBUG messages are not logged then the formatting is not performed at all.
Here is another option that does not have the keyword problems mentioned in Dunes' answer. It can only handle positional ({0}) arguments and not keyword ({foo}) arguments. It also does not require two calls to format (using the underscore). It does have the ick-factor of subclassing str:You use it like this:Of course, you can remove the check noted with # optional to force all messages through the adapter to use new-style formatting.Note for anyone reading this answer years later: Starting with Python 3.2, you can use the style parameter with Formatter objects:Logging (as of 3.2) provides improved support for these two additional formatting styles. The   Formatter class been enhanced to take an additional, optional keyword parameter named style. This   defaults to '%', but other possible values are '{' and '$', which correspond to the other two   formatting styles. Backwards compatibility is maintained by default (as you would expect), but by   explicitly specifying a style parameter, you get the ability to specify format strings which work   with str.format() or   string.Template. The docs provide the examplelogging.Formatter('{asctime} {name} {levelname:8s} {message}', style='{')Note that in this case you still can't call the logger with the new format. I.e., the following still won't work:
The easier solution would be to use the excellent logbook moduleOr the more complete:
This was my solution to the problem when I found logging only uses printf style formatting. It allows logging calls to remain the same -- no special syntax such as log.info(__("val is {}", "x")). The change required to code is to wrap the logger in a StyleAdapter.Usage is:It's worth noting that this implementation has problems if key words used for brace substitution include level, msg, args, exc_info, extra or stack_info. These are argument names used by the log method of Logger. If you need to one of these names then modify process to exclude these names or just remove log_kwargs from the _log call. On a further note, this implementation also silently ignores misspelled keywords meant for the Logger (eg. ectra).
As other answers mention, the brace-style formatting introduced in Python 3.2 is only used on the format string, not the actual log messages.As of Python 3.5, there is no nice way to use brace-style formatting to log messages.However, as with most things in Python, there is a not-nice way.The following monkey-patches the logging module to create a get_logger function that will return a logger that uses the new-style formatting for every log record that it handles.Usage:Notes:Will only affect specific loggers created by the get_logger function.If the logger is accessed again from a normal logging.getLogger() call, the new-style formatting will still applykwargs are not supportedPerformance hit should be minimal (rewriting a single function pointer for each log message)The formatting of the message is delayed until it is outputDoesn't stop the args from being stored on logging.LogRecord objects (useful in certain cases)From looking at the logging module source code it seems like it should work all the way back to Python 2.6 when str.format was introduced (but was only tested on Python 3.5).
Try logging.setLogRecordFactory in Python 3.2+:
Here's something real simple that works:Then:
I created a custom Formatter, called ColorFormatter that handles the problem like this:This keeps it compatible with various libraries.The drawback is that it is probably not performant due to potentially attempting format of the string twice.


Answer URL
https://docs.python.org/3/howto/logging-cookbook.html#use-of-alternative-formatting-styles
https://docs.python.org/3/howto/logging-cookbook.html#use-of-alternative-formatting-styles
