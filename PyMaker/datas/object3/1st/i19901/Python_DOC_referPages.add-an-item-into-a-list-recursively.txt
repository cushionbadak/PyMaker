Natural Text
Hi. I was wondering if there is a way to add items into a list recursively. The function is supposed to print the path names of the file that matches with fname. So fname is the name of the file and the path is the folder in which the file is located. If there are folders inside the path folder it will go inside and look for the fname file. so far I am able to find all the files. But I am not able to append the list recursively.
Normally, I wouldn't give a full solution because this smells like homework (which is also why I'm avoiding os.walk), but since you have posted your attempt, here's an explanation and a solution:For one thing, every time you call findAll, you initialize lst. Sure, you return it at the end, but you don't do anything with the return value, so the effect lst.append is contained within the recursion and is therefore not visible outside. Let me try to draw diagram to explain this (with one level of recursion):There are a couple of ways by which you can fix this:move lst to a scope outside findAll (personally, this is what I would do)use the return value from the recursive call to modify lstmove lst to a scope outside findAllAfter findAll has terminated, lst will contain the values you wantuse the return value from the recursive call to modify lstHope this helpsPS: of course, the non-homework way to do this would be to use os.walk:EDIT: OP asked for a version that doesn't use global variables:
you need to extend your list with your recursive callalso you can check if something is a directory with os.path.isdir(n)but I think you have more problems than that with your scriptafaik listdir just returns names , not the path of the directory ....so you will need to call  findAll(fname,os.path.join(path,n))
Not related to the question per se but I believe that os.walk would help you out:Check out help(os.walk), it comes with a great example on how to use this function.
try/except is used incorrectly in your code. except clause is executed only if there is an error. Also you don't use the returned value from findAll(). You could skip creating a list inside the function and just yield found items lazily instead:Outputif it is not homework you could use os.walk() to find the files:OutputIt is the same output as expected.
If you're on a Unix based system you could use find with the subprocess module .. I would reckon this would be the fastest way to retrieve all paths matching a filename. You can then do a split() on the output to make it a list:You can always split the command and avoid the shell=TrueCheckout: http://docs.python.org/2/library/subprocess.html#using-the-subprocess-module.. Hope this helps!


Answer URL
