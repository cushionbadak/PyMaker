Natural Text
Let's say I have a class in Python:I'd like to do some extra stuff when I access 'a' but NOT 'b'. So, for example, let's assume that the extra stuff I'd like to do is to increment the value of the attribute:It feels like there is a way through __getattr__ or __getattribute__, but I couldn't figure that out.The extra thing can be anything, not necessarily related to the attribute (like print 'Hello world').Thanks.
What you are looking for is a property, which can be used nicely as a decorator:The function is called whenever you try to access foo_instance.a, and the value returned is used as the value for the attribute. You can also define a setter too, which is called with the new value when the attribute is set.This is presuming you want the odd set-up of class attributes you only ever access from instances. (_a and b here belong to the class - that is, there is only one variable shared by all instances - as in your question). A property, however, is always instance-owned. The most likely case is you actually want:Where they are instance attributes.
If you really do want the equivalent of @property for a class variable, you have to build the descriptor yourself.You almost certainly don't want to do thisâ€”see Lattyware's answer for how to make normal instance variables, and turn one of them into a @property.But here's how you could do it:Now you can test it:Turning this into a @classproperty decorator is left as an exercise for the reader.PS, this still isn't exactly like a normal class variable. Setting Foo.a = 10 will replace your magic auto-incrementing value with a normal 10, while setting foo.a = 10 will update the class with an auto-incrementing 10 instead of storing an instance variable in f. (I originally had the __set__ method raise AttributeError, because normally you'd want an auto-incrementing magic variable be read-only, but I decided to show the more complex version just to show all the issues you have to deal with.)


Answer URL
