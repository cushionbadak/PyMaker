Natural Text
We can use time.tzname get a local timezone name, but that name is not compatible with pytz.timezone.In fact, the name returned by time.tzname is ambiguous. This method returns ('CST', 'CST') in my system, but 'CST' can indicate four timezones:Central Time Zone (North America) - observed in North America's Central Time ZoneChina Standard TimeChungyuan Standard Time - the term "Chungyuan Standard Time" is now rarely in use in TaiwanAustralian Central Standard Time (ACST)
tzlocal module returns pytz tzinfo's object corresponding to the local timezone:It works even during daylight savings time transitions when local time may be ambiguous.local_tz also works for past dates even if utc offset for the local timezone was different at the time. dateutil.tz.tzlocal()-based solution fails in this case e.g., in Europe/Moscow timezone (example from 2013):dateutil returns wrong UTC+4 offset instead of the correct UTC+3 on 1970-01-01.For those bumping into this in 2017 dateutil.tz.tzlocal() is still broken. The above example works now because the current utf offset is UTC+3 in Moscow (that by accident is equal to the utc offset from 1970). To demonstrate the error we can choose a date when utc offset is UTC+4:dateutil returns wrong UTC+3 offset instead of the correct UTC+4 on 2014-06-01.
Use the tzlocal function from the python-dateutil package:Internally, this is a class that uses time.timezone and time.altzone (switching based on time.daylight), but creates a suitable timezone object from that.You use this instead of a pytz timezone.The alternative is to read the currently configured timezone from the operating system instead, but this differs widely from OS to OS. On Mac OS X you need to read the output of systemsetup -gettimezone:On Debian and Ubuntu systems, you can read /etc/timezone:On RedHat and direved systems, you'll need to read it from /etc/sysconfig/clock:
A very simple method to solve this question:Update: @MartijnPieters said 'This won't work with DST / summertime.' So how about this version?
Since Python 3.6, you can simply run naive_datetime.astimezone() and system time zone will be added to naive_datetime object.If called without arguments (or with tz=None) the system local timezone is assumed for the target timezone. The .tzinfo attribute of the converted datetime instance will be set to an instance of timezone with the zone name and offset obtained from the OS.https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezoneExample:
i don't know if this is useful for you or not, but i think it answers your more general problem:if you have a date that is in an ambiguous timezone, like CST, simple-date (python 3.2+ only, sorry) can automate the search, and allows you to do things like prefer certain countries.for example:note how, by specifying a country you reduce the range of possible values sufficiently to allow conversion to UTC.it's implemented by doing a search over the timezones in PyTZ:finally, to answer the question asked directly, it also wraps tzlocal, as mentioned in another answer here, so will automatically do what you expect if you don't give a timezone.  for example, i live in chile, sogives my locale's timezone (ambiguous or not).
say you have list of utc DateTime values in OBJ list object.find below url to get respective timezone positional string parameterIs there a list of Pytz Timezones?Now our tz is object having singapore Timeresult list object has DateTime value of your respective timezone


Answer URL
https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone
