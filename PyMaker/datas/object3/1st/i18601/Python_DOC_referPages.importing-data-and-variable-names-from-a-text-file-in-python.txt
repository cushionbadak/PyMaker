Natural Text
I have a text file containing simulation data (60 columns, 100k rows):... where in the first row are variable names, and beneath (in columns) is the corresponding data (float type).I need to use all these variables with their data in Python for further calculations. For example, when I insert:I need to receive the values from the second column. I know how to import data:Assign variables "manually":But I'm having trouble with getting variable names: How can I change this code to get all variable names from the first row and assign them to the imported arrays ?  
Instead of trying to assign names, you might think about using an associative array, which is known in Python as a dict, to store your variables and their values. The code could then look something like this (borrowing liberally from the csv docs):data then contains each of your variables, which can be accessed via data['varname'].So, for example, you could do data['a'] to get the list ['1', '2', '3', '4'] given the input provided in your question.I think trying to create names based on data in your document might be a rather awkward way to do this, compared to the dict-based method shown above. If you really want to do that, though, you might look into reflection in Python (a subject I don't really know anything about).
The answer is: you don't want to do that.Dictionaries are designed for exactly this purpose: the data structure you actually want is going to be something like:... which you can then easily access using e.g. data["a"].It's possible to do what you want, but the usual way is a hack which relies on the fact that Python uses (drumroll) a dict internally to store variables - and since your code won't know the names of those variables, you'll be stuck using dictionary access to get at them as well ... so you might as well just use a dictionary in the first place.It's worth pointing out that this is deliberately made difficult in Python, because if your code doesn't know the names of your variables, they are by definition data rather than logic, and should be treated as such.In case you aren't convinced yet, here's a good article on this subject:Stupid Python Ideas: Why you don't want to dynamically create variables
Thanks to @andyg0808 and @Zero Piraeus I have found another solution. For me, the most appropriate - using Pandas Data Analysis Library....where 0,1,2,3 are the row index.
Here is a simple way to convert a .txt file of variable names and data to NumPy arrays. I like this method because it is easy to follow and simple to maintain. We can compact this code as follows:Both codes do the same thing, return NumPy arrays named a,b, and c with their associated data. 


Answer URL
