Natural Text
I'm trying to write a function, in an elegant way, that will group a list of dictionaries and aggregate (sum) the values of like-keys.Example:I've tried doing this using itertools for the groupby and summing each like-key value pair, but am missing something here. Here's what my function currently looks like:
You can use collections.Counter and collections.defaultdict.Using a dict this can be done in O(N), while sorting requires O(NlogN) time.The advantage of Counter is that it'll automatically sum the values of similar keys.:Example:
Thanks, I forgot about Counter. I still wanted to maintain the output format and sorting of my returned dataset, so here's what my final function looks like:
Here's an approach using more_itertools where you simply focus on how to construct output.GivenCode OutputThe items are grouped by date and pertinent values are reduced as Counters. DetailsStepsbuild helper functions to customize construction of keys, values and reduced values in the final defaultdict. Here we want to:group by date (kfunc)built dicts keeping the "value*" parameters (vfunc)aggregate the dicts (rfunc) by converting to collections.Counters and summing them.  See an equivalent rfunc below+.pass in the helper functions to more_itertools.map_reduce.  Simple Groupby... say in that example you wanted to group by id and date?No problem.Customized OutputWhile the resulting data structure clearly and concisely presents the outcome, the OP's expected output can be rebuilt as a simple list of dicts:For more on map_reduce, see the docs.  Install via > pip install more_itertools.+An equivalent reducing function:


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/collections.html#collections.Counter
