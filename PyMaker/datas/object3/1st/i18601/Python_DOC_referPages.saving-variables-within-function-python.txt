Natural Text
I'd like to save to disk all the variables I create within a particular function in one go, so that I can load them later. Something of the type:Is there a way to do this in python? I know cPickle can do this, but as far as I know, one has to type cPickle.dump() for every single variable, and my script has dozens. Also, it seems that cPickle stores only the values and not the names of the variables, so one has to remember the order the data was originally saved.
Assuming all of the variables you want to save are local to the current function, you can get at them via the locals function. This is almost always a very bad idea, but it is doable.For example:If you print locals(), you'll see that it's just a dict, with a key for each local variable. So, when you later load the pickle, what you'll get back is that same dict. If you want to inject it into your local environment, you can… but you have to be very careful. For example, this function:… will be compiled to expect a to be a global, rather than a local, so the fact that you've updated the local a will have no effect.This is just one of the reasons it's a bad idea to do this.So, what's the right thing to do?Most simply, instead of having a whole slew of variables, just have a dict with a slew of keys. Then you can pickle and unpickle the dict, and everything is trivial.Or, alternatively, explicitly pickle and unpickle the variables you want by using a tuple:In a comment, you say that you'd like to pickle a slew or variables, skipping any that can't be pickled.To make things simpler, let's say you actually just want to pickle a dict, skipping any values that can't be pickled. (The above should show why this solution is still fully general.)So, how do you know whether a value can be pickled? Trying to predict that is a tricky question. Even if you had a perfect list of all pickleable types, that still wouldn't help—a list full of integers can be pickled, but a list full of bound instance methods can't.This kind of thing is exactly why EAFP ("Easier to Ask Forgiveness than Permission") is an important principle in duck-typed languages like Python.* The way to find out if something can be pickled is to pickle it, and see if you get an exception.Here's a simple demonstration:You can make this a bit less verbose, and more efficient, if you put the whole stashing procedure in a wrapper function:
You can use pickle to store objects in files:More information at: http://docs.python.org/2/library/pickle.html
You can pickle multiple variables by making them attributes of an object, or elements in a dictionary. In either case it saves the name as well.  It's not quite as convenient as save in MATLAB, but it's better than nothing.
If you are not satisfied with the API of pickle, consider shelve which does the pickling for you with a nicer dict-like front end.ex.


Answer URL
