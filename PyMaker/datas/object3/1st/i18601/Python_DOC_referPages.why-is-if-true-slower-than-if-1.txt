Natural Text
Why is if True slower than if 1 in Python? Shouldn't if True be faster than if 1?I was trying to learn the timeit module. Starting with the basics, I tried these:I am confused by these things:According to the response from Mr. Sylvain Defresne in this question, everything is implicitly converted to a bool first and then checked. So why is if True slower than if 1?Why is test3 slower than test1 even though only the return values are different?Like Question 2, but why is test4 a little faster than test2?NOTE: I ran timeit three times and took the average of the results, then posted the times here along with the code.This question does not relate to how to do micro benchmarking(which I did in this example but I also understand that it is too basic) but why checking a 'True' variable is slower than a constant.
True and False are not keywords in Python 2. They must resolve at runtime. This has been changed in Python 3Same test on Python 3:Time error is in 1%, which is acceptable.
Bytecode disassembly makes difference obvious.As Kabie mentioned, True and False are globals in Python 2. Lots of stuff is going on to access them.Python compiler was able to recognize 1 as a constantly "truthy" expression and optimize redundant condition away!Pretty much the same as test1, with one more LOAD_GLOBAL.See test2. But LOAD_GLOBAL is a bit more costly than LOAD_CONST.


Answer URL
