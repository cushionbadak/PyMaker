Natural Text
I have a Python module that uses the argparse library. How do I write tests for that section of the code base?
You should refactor your code and move the parsing to a function:Then in your main function you should just call it with:(where the first element of sys.argv that represents the script name is removed to not send it as an additional switch during CLI operation.)In your tests, you can then call the parser function with whatever list of arguments you want to test it with:This way you'll never have to execute the code of your application just to test the parser.If you need to change and/or add options to your parser later in your application, then create a factory method:You can later manipulate it if you want, and a test could look like:
"argparse portion" is a bit vague so this answer focuses on one part: the parse_args method. This is the method that interacts with your command line and gets all the passed values. Basically, you can mock what parse_args returns so that it doesn't need to actually get values from the command line. The mock package can be installed via pip for python versions 2.6-3.2. It's part of the standard library as unittest.mock from version 3.3 onwards.You have to include all your command method's args in Namespace  even if they're not passed. Give those args a value of None. (see the docs) This style is useful for quickly doing testing for cases where different values are passed for each method argument. If you opt to mock Namespace itself for total argparse non-reliance in your tests, make sure it behaves similarly to the actual Namespace class.Below is an example using the first snippet from the argparse library.
Make your main() function take argv as an argument rather than letting it read from sys.argv as it will by default:Then you can test normally.
Populate your arg list by using sys.argv.append() and then callparse(), check the results and repeat.Call from a batch/bash file with your flags and a dump args flag.Put all your argument parsing in a separate file and in the if __name__ == "__main__": call parse and dump/evaluate the results then test this from a batch/bash file.
A simple way of testing a parser is:Another way is to modify sys.argv, and call args = parser.parse_args()There are lots of examples of testing argparse in lib/test/test_argparse.py
I did not want to modify the original serving script so I just mocked out the sys.argv part in argparse.This breaks if argparse implementation changes but enough for a quick test script. Sensibility is much more important than specificity in test scripts anyways.
When passing results from argparse.ArgumentParser.parse_args to a function, I sometimes use a namedtuple to mock arguments for testing.
parse_args throws a SystemExit and prints to stderr, you can catch both of these:You inspect stderr (using err.seek(0); err.read() but generally that granularity isn't required.Now you can use assertTrue or whichever testing you like:Alternatively you might like to catch and rethrow a different error (instead of SystemExit):
I found that the easiest way, for me at least, was just to check sys.argv[0] so see if python was ran as python -m unittest and not parse anything if that was the case.


Answer URL
https://docs.python.org/3/library/argparse.html#parsing-arguments
https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTrue
https://docs.python.org/3/library/unittest.mock.html
