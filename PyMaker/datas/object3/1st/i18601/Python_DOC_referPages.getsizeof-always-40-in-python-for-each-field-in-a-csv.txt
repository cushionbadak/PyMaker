Natural Text
This question already has an answer here:What is the difference between len() and sys.getsizeof() methods in python?                    1 answer                So I am reading a csv file row by row. Inside each row I go field by field and try to get the size of each field in bytes suing .getsizeof. The code is below :For some reason the size foe every field accross all rows is coming out 40. Any idea why ? 
First, this:… doesn't actually do anything useful. It doesn't change field; it just returns a new bytes holding an ASCII-encoded version of your field, which you don't store anywhere.On top of that, you only call it when your field is an int, in which case you'll get an AttributeError, because int objects don't have an encode method.So, clearly, you're only hitting the else case. And what does that do?Well, it makes a 1-element list. You're not asking the size of that element, but the size of the list. So, they'll all be the same size.As the docs explain:Only the memory consumption directly attributed to the object is accounted for, not the memory consumption of objects it refers to.So, what if you want to know the size of the list, plus all 1 of its elements? A couple paragraphs down there's a general-purpose solution:See recursive sizeof recipe for an example of using getsizeof() recursively to find the size of containers and all their contents.However, in your case, there's a much simpler solution: sys.getsizeof(field) + sys.getsizeof(field[0]) will do.But note that this may not be what you wanted anyway. For example, if you have 1000 rows, and 900 of them have the value '0', you're going to count u'0' 900 times… but really, you're probably only actually storing one copy of u'0', with 900 references to it.
It is probably because you are only getting the size of the reference instead of the size of the actually string field.


Answer URL
