Natural Text
How do you find the median of a list in Python? The list can be of any size and the numbers are not guaranteed to be in any particular order.If the list contains an even number of elements, the function should return the average of the middle two.Here are some examples (sorted for display purposes):
Python 3.4 has statistics.median:Return the median (middle value) of numeric data.When the number of data points is odd, return the middle data point.  When the number of data points is even, the median is interpolated by taking the average of the two middle values:Usage:It's pretty careful with types, too:
For python-2.x:Use numpy.median() to make a one-line function:Or, to write a function:For python-3.x, use statistics.median:
The sorted() function is very helpful for this. Use the sorted functionto order the list, then simply return the middle value (or average the two middlevalues if the list contains an even amount of elements).
Here's a cleaner solution:Note: Answer changed to incorporate suggestion in comments.
You can try the quickselect algorithm if faster average-case running times are needed. Quickselect has average (and best) case performance O(n), although it can end up O(nÂ²) on a bad day.Here's an implementation with a randomly chosen pivot:You can trivially turn this into a method to find medians:This is very unoptimised, but it's not likely that even an optimised version will outperform Tim Sort (CPython's built-in sort) because that's really fast. I've tried before and I lost.
Of course you can use build in functions, but if you would like to create your own you can do something like this. The trick here is to use ~ operator that flip positive number to negative. For instance ~2 -> -3 and using negative in for list in Python will count items from the end. So if you have mid == 2 then it will take third element from beginning and third item from the end.
You can use the list.sort to avoid creating new lists with sorted and sort the lists in place.Also you should not use list as a variable name as it shadows  python's own list.

Here what I came up with during this exercise in Codecademy:

median Function
I posted my solution at Python implementation of "median of medians" algorithm , which is a little bit faster than using sort().  My solution uses 15 numbers per column, for a speed ~5N which is faster than the speed ~10N of using 5 numbers per column.  The optimal speed is ~4N, but I could be wrong about it.Per Tom's request in his comment, I added my code here, for reference.  I believe the critical part for speed is using 15 numbers per column, instead of 5.
I had some problems with lists of float values. I ended up using a code snippet from the python3 statistics.median and is working perfect with float values without imports. source

I defined a median function for a list of numbers as

It is very simple;And you can use the return value like this median = median(anyList)
Here's the tedious way to find median without using the median function: 


Answer URL
https://docs.python.org/3/library/statistics.html#statistics.median
https://docs.python.org/3/library/statistics.html#statistics.median
https://docs.python.org/3/library/statistics.html#statistics.median
