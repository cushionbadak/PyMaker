Natural Text
I am currently writing a Linear Algebra module for Python 3.x wherein I deal with self-defined matrix objects.Is there any way I can make the basic arithmetic operators like +, -, * adhere to my matrix objects? For example -Right now I have written separate functions for addition, multiplication, etc. but typing A.multiply(A) is much more cumbersome than simply A*A.
You are looking for special methods. Particularly at emulating numerical types section.Also, as you're trying to implement matrices and matrices are containers, you may find useful to define custom container methods for your type.UPDATE: Here is an example of custom objects using special methods to implement arithmetical operators:
Unless you're doing this specifically to learn or for practice you should look at numerical python, numpy, which is the de facto standard solution for basic linear algebra and matrices.  It has a matrix class which does what you are looking for.
You can override the built in methods for numerical types.You will probably want to include a couple of checks (such as adding matrices of different dimensions, or adding a matrix to something that is not a matrix, etc) but this works as a simple example.  Also notice that I'm returning a matrix object using the list_to_matrix() function - if that isn't the desired functionality you can change it pretty readily.  You would use a similar process for all other arithmetic functions you need to implement.Output:As mentioned in one of the other answers, numpy might be a good resource to use for your matrix operations - a lot of this functionality is already built in.
If you define some special methods within the class, Python will call them for arithmetic operations. An example class that define addition, multiplication, division, and subtraction:Gives:


Answer URL
https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types
https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types
https://docs.python.org/3/reference/datamodel.html#emulating-container-types
https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types
