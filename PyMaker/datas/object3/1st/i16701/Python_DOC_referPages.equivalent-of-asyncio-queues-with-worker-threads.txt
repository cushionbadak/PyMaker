Natural Text
I'm trying to figure out how to port a threaded program to use asyncio. I have a lot of code which synchronizes around a few standard library Queues, basically like this: One thread creates values (possibly user input), and another thread does something with them. The point is that these threads are idle until there's new data, at which point they wake up and do something with it.  I'm trying to implement this pattern using asyncio, but I can't seem to figure out how to make it "go". My attempts look more or less like this (and don't do anything at all). I've tried variations on using coroutines, not using them, wrapping stuff in Tasks, trying to make them create or return futures, etc. I'm starting to think that I have the wrong idea about how I should be using asyncio (maybe this pattern should be implemented in a different way that I'm not aware of).Any pointers would be appreciated. 
Yes, exactly. Tasks are your friends:asyncio.ensure_future can be used for task creation also.And please keep in mind: q.put() is a coroutine, so you should to use yield from q.put(value).UPDSwitched from asyncio.Task()/asyncio.async() to new brand API loop.create_task() and asyncio.ensure_future() in example.
Here's what I use in production, moved to gist: https://gist.github.com/thehesiod/7081ab165b9a0d4de2e07d321cc2391d
A bit later and maybe OT, have in mind that you can consume from the Queue from multiple tasks as they were independent consumers.The following snippet shows as an example how you can achieve the same thread pool pattern with asyncio tasks.


Answer URL
https://docs.python.org/3/library/asyncio.html
https://docs.python.org/3/library/asyncio-task.html#task
