Natural Text
This question already has an answer here:Transpose a matrix in Python [duplicate]                    3 answers                I have a list of lists that looks like this;Which is the most efficient way to get 3 lists from the above list based on the position of the element?Result:
You can use zip and a list comprehension:Placing * before lst unpacks the list into arguments for the zip function.  In this case:is equivalent to writing:zip then zips these lists together by returning an iterator of tuples where the n-th tuple contains the n-th item from each of the lists.  In this case, it returns:1Finally, the list comprehension converts these tuples into lists and collects them into a new list.1You need to call list() on zip(*lst) to view its items because zip returns an iterator in Python 3.x.


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries
https://docs.python.org/3/glossary.html#term-iterator
