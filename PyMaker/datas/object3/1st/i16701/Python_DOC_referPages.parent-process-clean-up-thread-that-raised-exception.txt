Natural Text
I have some code that contains two objects something to this effect: My problem is this.  If Child is spawned and running properly, the print Child will give something like this  <Child(Thread-2, started 140038530209536)>.  If it raises an exception, it'll print something like this  <Child(Thread-2, stopped 140038530209536)>My Parent object need to know that its stopped, clean up it's own self.child variable, then restart another Child in its place.  Obviously this is over simplified but hopefully you get my point.  Calling join() on the child doesn't work either because Parent has many other things to do and since join() is blocking that causes a problem.  EDIT: What ended up solving my problem was moving my reference to the child thread outside the scope of my parent object.  When the reference was in the global scope, I didn't have a problem unsetting it when I needed to restart the child. 
The following code maintains a 'pool' of threads (aka children).  Every second, dead threads are removed, and new ones added to maintain 3 threads at all times.For a larger projects consider going to the concurrent.futures module, specifically the ThreadPoolExecutor function.  I also recommend 3rd party library gevent (flexible, fast, Python2 only) and internal module multiprocessing (has Pool, is included in all Pythons).sourceoutput


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
