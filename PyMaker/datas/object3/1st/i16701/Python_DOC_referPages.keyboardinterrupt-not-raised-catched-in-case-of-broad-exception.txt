Natural Text
Could somebody explain to me the following. Lets take a look at the code:If I run this, wait for a while, then press CTRL+C - exception will be processed, message yo will be printed.If we change the code to catch a broad exception like this:run it, wait for while, press CTRL+C - KeyboardInterrupt exception will not be catched.According to python documentation:Python installs a small number of signal handlers by default: SIGPIPE is ignored (so write errors on pipes and sockets can be reported as ordinary Python exceptions) and SIGINT is translated into a KeyboardInterrupt exception. All of these can be overridden.So, why in the second case this exception is not catched (or even is not raised)?
You cannot catch KeyboardInterrupt by catching Exception because the former inherits from BaseException only.  You can read about this in the docs:exception KeyboardInterruptRaised when the user hits the interrupt key (normally Control-C or Delete). During execution, a check for interrupts is made regularly.  Interrupts typed when a built-in function input() or raw_input() is  waiting for input also raise this exception. The exception inherits  from BaseException so as to not be accidentally caught by code that  catches Exception and thus prevent the interpreter from exiting. (Emphasis mine)This means that you would have to do:But that is considered a bad practice.  It would be better to just catch KeyboardInterrupt itself like in your first example.


Answer URL
https://docs.python.org/3/library/exceptions.html#exceptions.Exception
https://docs.python.org/3/library/exceptions.html#exceptions.BaseException
https://docs.python.org/3/library/exceptions.html#exceptions.KeyboardInterrupt
