Natural Text
This question already has an answer here:Python 3 bytes formatting                    4 answers                I know this question has been asked before, but couldn't get it working for me though.What I want to do is sent a prefix with my message like so:This gives meI tried formatting with % and encoding but none of them worked.
You can't format a bytes literal. You also can't concatenate bytes objects with str objects. Instead, put the whole thing together as a str, and then convert it to bytes using the proper encoding.Or if you're a fan of one-liners:According your comment on @Jan-Philip's answer, you need to specify how many bytes you're about to transfer? Given that, you'll need to encode the message first, so you can properly determine how many bytes it will be when you send it. The len function produces a proper byte-count when called on bytes, so something like this should work for arbitrary text:
Edit: I think I misunderstood your question. Your issue is that you can't get the length into a bytes object, right?Okay, you would usually use the struct module for that, in this fashion:This writes the length of the (binary!) message into a four byte integer object. The return value of pack() is this object (of type bytes). For decoding this on the receiving end you need to read exactly the first 4 bytes of your message into a bytes object. Let's call this first_four_bytes. Decoding is done using struct.unpack, using the same format specifier (!i) in this case:Then you know exactly how many of the following bytes belong to the message: messagesize. Read exactly that many bytes, and decode the message. Old answer:In Python 3, the __add__ operator returns what we want:


Answer URL
https://docs.python.org/3/library/stdtypes.html#bytes-and-bytearray-operations
