Natural Text
I have a case for needing to add a path to a python package to sys.path (instead of its parent directory), but then refer to the package normally by name. Maybe that's weird, but let me exemplify what I need and maybe you guys know how to achieve that.I have all kind of experimental folders, modules, etc inside a path like /home/me/python.Now I don't want to add that folder to my sys.path (PYTHONPATH) since there are experimental modules which names could clash with something useful. But, inside /home/me/python I want to have a folder like pyutils. So I want to add /home/me/python/pyutils to PYTHONPATH, but, be able to refer to the package by its name pyutils...like I would have added /home/me/python to the path.
One helpful fact is that adding something to the python path is different from importing it into your interpreter. You can structure your modules and submodules such that names will not clash.Look here regarding how to create modules. I read the documents, but I think that module layout takes a little learning-by-doing, which means creating your modules, and then importing them into scripts, and see if the importing is awkward or requires too much qualification.Separately consider the python import system. When you import something you can use the "import ... as" feature to name it something different as you import, and thereby prevent naming clashes.You seem to have already understood how you can change the PYTHONPATH using sys.path(), as documented here.
You have a number of options:Make a new directory pyutilsdir, place pyutils in pyutilsdir,and then add pyutilsdir to PYTHONPATH.Move the experimental code outside of /home/me/python and add python toyour PYTHONPATH.Rename the experimental modules so their names do not clash withother modules. Then add python to PYTHONPATH.Use a version control system like git or hg to make theexperimental modules available or unavailable as desired. You could have a master branch without the experimental modules,and a feature branch that includes them. With git, for example, you could switch betweenthe two withThe contents of /home/me/python/pyutils (the git repo directory) wouldchange depending on which commit is checked out. Thus, using version control, you can keep the experimental modules in pyutils, but only make them present when you checkout the feature branch.
I'll answer to my own question since I got an idea while writing the question, and maybe someone will need that.I added a link from that folder to my site-packages folder like that:ln -s /home/me/python/pyutils /path/to/site-packages/pyutilsThen, since the PYTHONPATH contains the /path/to/site-packages folder, and I have a pyutils folder in it, with init.py, I can just import like:from pyutils import mymoduleAnd the rest of the /home/me/python is not in the PYTHONPATH


Answer URL
https://docs.python.org/3/reference/import.html
