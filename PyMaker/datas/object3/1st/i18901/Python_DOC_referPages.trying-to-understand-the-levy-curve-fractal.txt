Natural Text
I am asked to implement a recursive function that takes a nonnegative integer n as input and returns turtle instruction encoded with letters L,R and F where L means rotate left 45 degrees, R means rotate right 45 degress and F means go forward.Additional information i have i: for every nonnegative integer n>0, the Levy curve L(n) can be defined in terms of Levy curve L(n-1); Levy curve L(0) is just a straight line.I am very new to this and I am not sure how to start:so far I only got:I need some good pointers here please.
Since Levy C's L system only has a single rule, it's simple to build the resulting string using a single replace method.Result:You can visualize this replacement by imagining each straight line in the figure being replaced by two smaller lines connected at a ninety degree angle. Like so:
First, in case this is the problem:  A large Levy curve (recursive case) is constructed by arranging two smaller ones facing each other 'across the room', with two more 'on the floor' facing up, in between.  A small Levy curve (base case) is just a straight line.  So indeed, the base case is:But for the recursive case, you just have it call lev(n-1).  You are right that you will need to do this, but you will need to do it four times, and rotate in between.  This will create the desired 'two smaller curves facing each other, with two in between'.Inspecting the curve carefully (here: https://en.wikipedia.org/wiki/File:Levy_C_construction.png), we see that we will need to draw one curve, then turn right, then draw another, then turn completely around, then draw a third curve, and finally, turn right and draw the final curve.This can be done fairly simply:


Answer URL
