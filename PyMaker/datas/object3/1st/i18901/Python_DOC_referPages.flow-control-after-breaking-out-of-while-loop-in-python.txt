Natural Text
I am pretty new to both programming and Python. A few times now, I have created what feels like an awkward program flow,  and I am wondering if I am following best practices. This is conceptually what I have wanted to do:What I've ended up doing works, but feels off somehow:Is there a better way?
You're looking for while-else loop:From docs:A break statement executed in the first suite terminates the loop  without executing the else clause’s suite.
Use an else clause to the while loop:See the while statement documentation:A break statement executed in the first suite terminates the loop without executing the else clause’s suite.
If you think about it, you might already have a perfectly good condition to use without setting a flag: the condition at the top of the while loop (or, rather, the not of it). Assuming you don't change the truthiness of your condition during the same iteration as a break, this gives you:This makes sense if you think of while as a repeated if: instead of happening once, a while keeps going until the condition becomes falsey.But, like the other answers have mentioned, the analogy goes further: just like you don't have to spell all your ifs as while accepts an else that is executed if the condition at the top is tested and found to be falsey. So,And, same as the if/else case, this doesn't imply any further tests of the condition than what would happen anyway. In the same way that an else attached to if a won't run if the true-branch makes a falsey, an else attached to a while will never run after a break since that explicitly skips ever checking the condition again. This makes the else: equivalent to a decicated flag in every case.This also extends to for loops, even though the analogy breaks - but it executes under similar enough rules: the else is run if the loop ends by having run its course rather than hitting a break.


Answer URL
