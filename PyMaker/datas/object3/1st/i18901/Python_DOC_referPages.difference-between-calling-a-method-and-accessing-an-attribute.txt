Natural Text
I'm very new to Python, and I'm using Python 3.3.1.Now I'll createHow can I distinguish between methods and atrributes? I mean, when do I use c.SetAtrr(Argument), and  c.SetAtrr=value?
Methods are attributes too. They just happen to be callable objects.You can detect if an object is callable by using the callable() function:When you call a method, you look up the attribute (a getattr() operation) and then call the result:is two steps; finding the attribute (which in this case looks up the attribute on the class, and treats it as a descriptor), then calls the resulting object, a method.When you assign to an attribute, you rebind that name to a new value:would be a setattr() operation. If you wanted to intercept getting and setting attributes on instances of your class, you could provide the attribute access hooks, __getattr__, __setattr__ and __delattr__.If you wanted to add a method to an instance, you would have to treat the function as a descriptor object, which produces a method object:The return value of function.__get__(), when given an instance and a class, is a bound method. Calling that method will call the underlying function with self bound to the instance.And speaking of descriptors, the property() function returns a descriptor too, making it possible to have functions that behave like attributes; they can intercept the getattr(), setattr() and delattr() operations for just that attribute and turn it into a function call:Accessing .bar invoked the bar property get hook, which then calls the original bar method.In almost all situations, you are not going to need the callable() function; you document your API, and provide methods and attributes and the user of your API will figure it out without testing each and every attribute to see if it is callable. With properties, you have the flexibility of providing attributes that are really callables in any case.


Answer URL
