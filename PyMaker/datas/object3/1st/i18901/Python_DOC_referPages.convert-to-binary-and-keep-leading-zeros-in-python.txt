Natural Text
I'm trying to convert an integer to binary using the bin() function in Python. However, it always removes the leading zeros, which I actually need, such that the result is always 8-bit:Example:Is there a way of doing this?
Use the format() function:The format() function simply formats the input following the Format Specification mini language. The # makes the format include the 0b prefix, and the 010 size formats the output to fit in 10 characters width, with 0 padding; 2 characters for the 0b prefix, the other 8 for the binary digits.This is the most compact and direct option.If you are putting the result in a larger string, use an formatted string literal (3.6+) or use str.format() and put the second argument for the format() function after the colon of the placeholder {:..}:As it happens, even for just formatting a single value (so without putting the result in a larger string), using a formatted string literal is faster than using format():But I'd use that only if performance in a tight loop matters, as format(...) communicates the intent better.If you did not want the 0b prefix, simply drop the # and adjust the length of the field:
See: Format Specification Mini-LanguageNote for Python 2.6 or older, you cannot omit the positional argument identifier before :, so use
I am usingwill print 
You can use the string formatting mini language:Demo:Output:EDIT:based on @Martijn Pieters idea
Sometimes you just want a simple one liner:Python 3
You can use something like this 

You can use zfill:prints:I like this solution, as it helps not only when outputting the number, but when you need to assign it to a variable... e.g. - x = str(datetime.date.today().month).zfill(2) will return x as '02' for the month of feb.


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#f-strings
