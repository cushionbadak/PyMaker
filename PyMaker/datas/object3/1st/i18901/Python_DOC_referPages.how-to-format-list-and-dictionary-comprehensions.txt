Natural Text
List and dictionary comprehensions are powerful and fast, but they can be hard to read. My mental read buffer quickly fills up, especially when they’re deeply nested. Is there a way to make these more readable?
You’re right. ;) They can be hard to read, which can also make them hard to compose and debug. Let’s take the following example dict comprehension:Too many years of C and Java programming have made this difficult for me to read. The comprehension is logically broken into different parts, but I still need to really stare at it to decompose it.The key thing to remember is that a comprehension is an expression, not a statement. So you can surround the expression with parens and then use implicit line joining to add line breaks that organize the expression based on its nesting levels:Here it becomes more clear that the “the last index varying fastest, just like nested for loops.”You can even add blank lines and comments:One note of caution: the Python Language Reference says that “the indentation of the continuation lines is not important.” So you can use any form of indentation to improve readability, but the interpreter won’t do any extra checking.
Another approach is to keep the power of comprehensions, but build on generators upon generators to remove the nesting then use the builtin list/set/dict etc... - something similar to:Could be broken out to:Which is actually way more verbose but if you apply similar logic to the nested levels, then does actually make more sense.


Answer URL
