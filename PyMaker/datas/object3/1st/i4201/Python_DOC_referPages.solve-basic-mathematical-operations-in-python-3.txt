Natural Text
I'm trying to develop a simple python method that will allow me to compute basic mathematical operations. The point here is that I can't use eval(), exec() or any other functions that evaluate python statemets, so I have to do it manually. Up to now, I've came across with this piece of code:So we have two lists of Strings, the basicoperationlist has operations of the following format: 2940-81, 101-16, 46/3, 10*9, 145/24, -34-40.They will always have two numbers, and one operand in the middle. The problem with my solution is that when I have an operation like the last one, the .split() method splits my list into an empty list and a list with the complete operation. In summary, this solution does not work well when we mix negative numbers an the minus operation. I don't know if it fails in any other case because I've only managed to notice the error I previously described. The idea is that at the end of the method, I have the solutionlist as a list of Strings that are going to be the ordered answers to the basic mathematical operations.This is the error that prompts out whenever my code encounters an operation like the last one: ValueError: invalid literal for int() with base 10: ''The basicoperationslist is defined here:As you see, I use a regex to extract the basicoperations from a larger operation. The step2processedoperation is an String that a server sends to my machine. But as example it may contain:It contains complete and balanced mathematical operations.Maybe someone could help me to solve this problem or maybe I should change this method completely. Thank you in advance.
I'd ditch the whole splitting approach as it is way too complex and may fail in certain cases as you noticed. Instead I'd use a regex and the operator module to simplify things.This approach is easier to adapt to new cases (new operators for example)
You can easily use operator and a dict to store the operations instead of a long list of if-else This solution can also calculate more complicated expressions through recursion.Define the operations and their orderThe simple case of a single numberThe calculationNegative first numberbefore the calculation:in the calculation, after the splitting of the string:So in total this becomes:ParenthesesChecking whether there are parentheses can be done easily with re. First we need to make sure it doesn't recognise the 'simple' parenthised intermediary results (like (-1))Then to calculate the leftmost outermost parentheses, you can use this functionThe reason for the () around calculate(middle) is because an intermediate result can be negative, and this might pose problems later on if the parentheses are left out here.The beginning of the algorithm then changes to:Since intermediary results can be negative, we need regular expressions to split on the - to prevent 5 * (-1) from being split on the -So I reordered the possible operations like this:The pattern for the - only matches if it is preceded by a ) or a digit. This way we can drop the negative flag and handlingThe rest of the algorithms changes then to:complete algorithmThe complete code can be found heretesting:power:Adding power becomes as simple as adding to OPERATIONS


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.split
