Natural Text
I want to know how __future__ imports interact with eval and exec (and compile, I guess).Experimentation (with python 2) shows that module-level __future__ imports do have an effect on code executed by eval and exec:Output:But at the same time, code executed with exec can perform its own __future__ imports that only affect the code locally:Output:But experimentation can only get you so far. My questions are:Are these interactions well-defined and documented?Is there a way to disable module-level __future__ imports in eval, exec and compile?
Per the language reference:Code compiled by calls to the built-in functions exec() and compile()  that occur in a module M containing a future statement will, by  default, use the new syntax or semantics associated with the future  statement.You can disable this behaviour in compile:The optional arguments flags and dont_inherit control which future  statements (see PEP 236) affect the compilation of source.For example:The other way around, disabling the usage of __future__ imports in arbitrary code being executed/compiled, is not possible as far as I'm aware.


Answer URL
https://docs.python.org/3/library/functions.html#eval
https://docs.python.org/3/library/functions.html#exec
https://docs.python.org/3/library/functions.html#compile
https://docs.python.org/3/reference/simple_stmts.html#future-statements
https://docs.python.org/3/library/functions.html#compile
