Natural Text
Below I have the Threader class, which I use to thread an arbitrary number of functions, then return a list of the threaded functions' returns after joining the threads. One feature I want is the option to return a dictionary instead of a list. I found one method for doing so by requiring threaded functions to return a tuple. The tuple's first value would then be used for the key. I want to instead have it so that the threaded function's first argument is used as the key.I learned that threads can be named, so I've set the names to be set as the threads' function's first argument on thread creation. The thread itself can access the name with getName(), but how would I get the name of the thread next in line to be .get() from the queue? (How do I access the thread objects within the queue?)I just need it to work as described in the first paragraph, so I'm open to alternative methods of achieving the same effect.Example usage:Edit: What I currently use:My cleaned up and improved version of Mackay's answer (return is sorted by thread insertion):
If you only want to achieve the result outlined in the first paragraph, where you use the first argument as the key, you can modify your code to do it like this:NB it's not necessary to store the threads themselves in the queue, just the results. (A queue is a good choice for storing the results, as it deals with the access synchronization issues).In the worker() function you can generate the key however you like; in the code above I've used the first argument as you've suggested.A usage example would be:This gives the output:Hope this may help.


Answer URL
https://docs.python.org/3/library/queue.html
