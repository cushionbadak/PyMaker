Natural Text
I have a shared library and two header files. I was able to use the library by creating bindings using swig. However, the swig version is quite slow and I didn't manage to include support for numpy arrays. I am now trying to call functions of the library from Python using ctypes. First header contains an extern "C" block which exports 3 functions through macros (which are not available to me). The simplified version of the header looks like this:Normally, the first function MakeAlgo returns a pointer to an instance of the Foo class, the second function DestroyAlgo destroys the instance, and the third function AlgoProcess takes two structures as an input and modifies some of their values in-place.The second header contains definitions of StructOne and StructTwo and some constants. StructTwo contains several nested structures.In Python, I rewrote all the structures contained in the second header using ctypes.Structure. I don't post all the code here but here's an example how I defined a nested structure:Then my Python code looks like this (assuming the structures are in a structures.py file):After creating a pointer to the Foo class, submitting the inputs, I check some of the values in one of the structures and it doesn't match the expected result. For instance, I know that one of the fields are set only to 0 or 1 by the library, but I get some weird results, like 196611000.Does anybody knows what is wrong (maybe someone had similar problem)? Can it be the way I defined the structures? Or maybe it is a pointer to the C++ class which is not handled correctly?EDITI managed to solve the initial problem. It appears that the way I define the structures was not correct. Instead of the above code, the nested structures should be passed by reference:However, now to access the StructFoo's fields, I have to do:In actual code I might have up to 4 nested levels. Is there a more elegant way to access their fields then:
My edit was incorrect.The problem was that some of the structure were bit-field structures, specifying the width of each field solved it:Bit-field structures in ctypes.


Answer URL
https://docs.python.org/3/library/ctypes.html#bit-fields-in-structures-and-unions
