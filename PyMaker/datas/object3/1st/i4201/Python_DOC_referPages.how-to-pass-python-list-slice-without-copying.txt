Natural Text
I wrote a quick select algorithms as below:What I intend to do is to find the kth element in an arr with O(n) complexity. But when I finished the coding, I found that arr[:p] actually pass a copy rather than a slice of original list, which will not make the recursive partition work properly. As far as I know, pandas Series slice actually did what I want. If I pass arr as pd.Series, it seems to work properly. But is there a more native way to pass an origin slice of python list arr[:p] ?  
arr[:p] is a copy, so there's no way to pass it without copying.As you already discovered, you can use a different type that does "view slicing"—memoryview, np.array, pd.Series, etc.Or you can pass the whole list and the slice information around together, like this:Or you can write a simple wrapper that carries around the list, start, and stop values and implements collections.abc.Sequence (or MutableSequence) by forwarding appropriately. That's more work up-front, but it might make the other code you're writing more readable.You can find a simple version of mutable and immutable slice views here. It's not as thoroughly tested as I'd hoped, but it seems to work for your quickselect. (Of course the cost for linear rather than quadratic work is probably swamped by the constant multiplier of building a wrapper object for each slice until you get to decent-sized lists…)
One possible solution is to use numpy or pandas as well as stated by Mr. abarnert. But importing package will not always work for pure algo questions. 


Answer URL
https://docs.python.org/3/library/stdtypes.html#typememoryview
