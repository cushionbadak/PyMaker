Natural Text
Let's say I have a stream (a generator) which produces text. They are typically JSON strings but could be any string. And I can't instantiate it as a list. Too large.I want to take this stream and produce another stream which is this stream composed with compression followed by encryption. What is a good way to do that?The encryption part is not so hard but compression usually requires a batch of data. Is there a pure streaming way to do it? If not, what is a good enough alternative?I also don't want to create any files. 
The stdlib zlib has support for compressing a stream of data by feeding in chunks at a time. See compressobj and the Compress type.Notice that you can feed in as many or as few bytes as you want; the compressor object does its own buffering to keep zlib happy.Many other compression libraries are built to mimic the interface of zlib to some degree.And, as you already know, encryption usually isn’t a problem.Since you’re starting with text, not bytes, there’s also a zeroth part to your problem: encoding the text. You could use the codecs module for a stream encoder, but since it sounds like you’ve already got a generator of one line at a time, (line.encode('utf-8') for line in lines) should be just fine. (You probably already knew this part, which is why you didn’t ask—but a future searcher with the same problem may not.)
Can you group your data with the grouper from the itertools recipe?return:Note that it never create a list with all the data!


Answer URL
https://docs.python.org/3/library/zlib.html
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/zlib.html
