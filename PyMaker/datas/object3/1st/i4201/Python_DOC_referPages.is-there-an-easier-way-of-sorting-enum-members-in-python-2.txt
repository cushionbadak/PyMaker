Natural Text
I'm stuck with Python 2.7 for a project, and I have several Enums for integrating a Python framework (OpenERP) with a legacy framework.  In Python 2, Enums are not ordered by default:If order is important one has to manually add an _order_ = 'member1, member2, member3' attribute.This works fine for smaller Enums, but I have several that have between 10 and 50 names, and that is simply too many to either type or read or keep in sequence when names are added/removed.Are there any other options?
As of aenum 2.1.21 the _order_ attribute can be a function; this function will be used as the key to sort() to put the Enum members in the correct order:and in use:While I wouldn't call this next version easier, if you can't use aenum, and don't want to try and maintain a huge _order_, it is possible using the Functional API:Ugly, but it works.  However, it would not work if the precedence field was needed.1 Disclosure:  I am the author of the Python stdlib Enum, the enum34 backport, and the Advanced Enumeration (aenum)  library.2 _init_ is necessary in this case as I do not want the precedence value passed to the str constructor.3 the key function will be given one argument:no _init_ -> a tuple of (name, value) where value may also be a tuple (it would have been in the example above)with _init_ -> an aenum.NamedTuple with fields name plus whatever fields are in _init_ (so name, value, and precedence in the example above)


Answer URL
https://docs.python.org/3/library/enum.html#functional-api
https://docs.python.org/3/library/enum.html
