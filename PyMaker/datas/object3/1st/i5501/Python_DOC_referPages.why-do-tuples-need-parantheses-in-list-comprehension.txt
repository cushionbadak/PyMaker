Natural Text
It is well known that tuples are not defined by parentheses, but commas. Quote from documentation:A tuple consists of a number of values separated by commasTherefore:Another striking example is this:Even the single-element tuple needs a comma, and parentheses are always used just to avoid confusion. My question is: Why can't we omit parentheses of arrays in a list comprehension? For example:Isn't the second list comprehension just syntactic sugar for the following loop, which does work?
Python's grammar is LL(1), meaning that it only looks ahead one symbol when parsing.Here, the parser sees something like this.However, without the parentheses, it has to make a decision earlier on.A parser which backtracks tends to be notoriously slow, so LL(1) parsers do not backtrack. Thus, the ambiguous syntax is forbidden.
As I felt "because the grammar forbids it" to be a little too snarky, I came up with a reason.It begins parsing the expression as a list/set/tuple and is expecting a , and instead encounters a for token.For example:tokenizes as follows:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences
https://docs.python.org/3/reference/grammar.html
https://docs.python.org/3/reference/expressions.html#generator-expressions
https://docs.python.org/3/reference/expressions.html#list-displays
