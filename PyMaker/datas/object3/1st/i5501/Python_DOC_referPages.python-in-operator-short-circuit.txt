Natural Text
I was reading an interesting post on Short-Circuiting in Python and wondered if this was true for the in operator. My simple testing would conclude that it does not:Is there a detailed explanation of why 999 takes longer than 0. Is the in operator like a loop?Also, is there a way to tell the in operator to "stop the loop" once the value is found (or is this the already defaulted behavior that I'm not seeing)? Lastly- Is there another operator/function that I am skipping over that does what I'm talking about in regards to "short-circuiting" in?
The implementation of in for list objects is found in list_contains. It performs a scan of the list and does exit early if the last comparison has found the element, there's no point in continuing there. The loop involved is:If cmp is 1 (the value returned from PyObject_RichCompareBool for a match), the for loop condition (cmp == 0 && i < Py_SIZE(a)) becomes false and terminates.For list objects, which are built-in, what is called for in is a C function (for CPython). For other implementations of Python, this can be a different language using different language constructs. For user-defined classes in Python, what is called is defined in the Membership test operations of the Reference Manual, take a look there for a run-down of what gets called.You could also come to this conclusion by timing:The furthest the element the more you need to scan. If it didn't short-circuit, all in operations would result in similar timings.
Short circuiting does occur. The in operator calls the __contains__ method, which in turn is implemented differently per class (in your case list). Searching for 999 takes around double the time as searching for 0, since half of the work is creating the list, and the other half is iterating through it, which is short circuited in the case of 0.
Here's another look with a hashed object, set:Output:As others have said, the list implementation must do a sequential search.  Set inclusion uses a hashed value, and is on par with finding the item in the first element checked.


Answer URL
https://docs.python.org/3/c-api/object.html#c.PyObject_RichCompareBool
