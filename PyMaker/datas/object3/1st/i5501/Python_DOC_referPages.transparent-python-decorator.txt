Natural Text
I need a decorator to log method calls. I`ll use something like this (print will be replaced by sending data somewhere):It works fine, but it shadows original method signature:I have to keep method signature untouched, soIs there a way to wrap function with decorator, keeping it`s signature and docs?
The main problem here is that you're grabbing the function parameters directly from the function's code object. This is not really what you want - you aren't actually interested in the function's code, you're interested in the function itself. Decorators have a special __wrapped__ attribute which points to the original function; but code objects do not. Therefore you should use the inspect module instead, which will take care of most things for you and give you the result you expect.Unfortunately, maintaining the decorated function's signature must be done manually, by assigning a signature object to decorator.__signature__.Here is an implementation of the log decorator with python 3's inspect module:And the print_function_args function can be simplified (and corrected) with getfullargspec:You'll find that everything works as expected now:


Answer URL
https://docs.python.org/3/library/inspect.html
https://docs.python.org/3/library/inspect.html#inspect.Signature
https://docs.python.org/3/library/inspect.html#inspect.getfullargspec
