Natural Text
Please update the title if you can think of a good one !I have a data of the following structure:Expected output: For the sake of learning I just want to rewrite the output file, same as the input file, but using the process I propose below.I want to: step 01: read the values only for two consecutive blocks at a time (first 7 & 9) -> step 02: store that data in a dictionary with block numbers as main unique key -> step 03: return that dictionary to the predefined function for parsing. -> Now, read blocks (9 & 12) -> repeat the same process until end.I am thinking something like:So, when the code is executed it will read data from block 7 and 9, until dictionary is filled and returned to the pre-defined function. When parsing is done, it now can just retain the data from latter block of the previous parse. That way it will only have to read the remaining block.Expected output: The main problem for me now is to be able to read two blocks at a time. I don't want to add intrinsic details of how I want to parse information in `parse_two_blocks(someData)' - this is just another problem. But, lets try to rewrite the output same as input.
Parse the input into an on-the-fly list (a generator) of blocks. Iterate over the pairs. It should all be done as you evaluate the pairs. That is, none of those lines should ever read or store the whole csv file at once.Output (of one):io.StringIO(string)Take a string and return a file-like object that contains the contents of string.csv.DictReader(file_object, dialect) from the csv moduleReturns an ordered dict for each row where the field names taken from the very first row are used as dictionary keys for the field values.groupby(iterable, key_function)Make an iterator that returns consecutive keys and groups from the  iterable. The key is a function computing a key value for each element.lambda x: x['A_block']A temporary function that takes an input named x and returns the value for the key 'A_block'(k, list(v)) for k, v in blocksgroupby() returns an iterator (that can only be used once) for the values. This converts that iterator to a list.pairwise(iterable) recipe"s -> (s0,s1), (s1,s2), (s2, s3), ..."


Answer URL
https://docs.python.org/3/library/io.html#io.StringIO
https://docs.python.org/3/library/csv.html#csv.DictReader
https://docs.python.org/3/library/csv.html
https://docs.python.org/3/library/itertools.html#itertools.groupby
https://docs.python.org/3/library/itertools.html#itertools-recipes
