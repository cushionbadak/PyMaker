Natural Text
What is the difference between below 2 ways of reading bytes?which is better? why?
If you know that your string is the hex string, why not directly convert it into int with base as "16" after slicing it? For example:You must note here that I am slicing the string with index as "8" instead of 4, but since we know that it is a hex string, we can slice it accordingly considering 2 characters represents a hex number. Here's the performance comparison of your's as well as mine solution:As you see, simply using int to convert is more efficient than both of your solutions.However if you are interested only in the solutions you mentioned, then I'll suggest the one without using io.BytesIO because:without using ByteIO, you'll requires one lesser imports comparatively your second solution looks simpler tooNote: For the performance measurement, I am not calculating the time of imports, in case someone is planning to say that "this difference is related to additional import" ;)
The point of using IO constructs (StringIO, BytesIO) is to work with objects that mimic a stream (like files). So your first solution is wrapping your bytes in a file-like object and reading from that wrapper as if it was a file. Your second solution just reads from the bytes. I say if the semantics of your code do not require that the bytes be a stream, skip the IO solution go straight to the source.


Answer URL
https://docs.python.org/3/library/functions.html#hex
https://docs.python.org/3/library/functions.html#int
