Natural Text
I have spent considerable time on my below code but I just can't get it to work and I'm hoping someone can offer me some advice.In each folder (Property for example) I have a superseded folder. My end goal is to rename each file that is in each directory to prefix the date (e.g. 2018010_Property_Export.dfb) and then move it to the superseded folder.I am not sure how to rename each file in each folder and then move it to the superseded folder. At the moment I think I'm trying to rename the filepath instead of the individual file names.
"U://Working_Files".format(x) results in "U://Working_Files", because there is no placeholder ({}) in the string. You should really use os.path.join() to handle path building. Also, you should not double the / forward slash (you probably confused that with the \\ being required in a Python string literal to produce a single backslash):This is really the only logic mistake you have made; the rest of the code does work as designed. That said, there are a few things that can be improved.Personally, I'd leave the work of putting the source directory name and the names of the subdirectories together, to the function loop. That saves you an extra loop when just setting up your configuration.I'd not prefix directories with ~; leave that to whomever configures the source directory; they can specify ~/some_directory or ~someuser/some_directory as a path explicitly. The function should take arguments, not use globals, anyway. Besides, prefixing your directories with ~ would disallow the use of ~some_other_account_name at the start of such a path.I'd skip over anything that isn't a file early; no need to get the modified date for a directory, right?The following will move any non-directory name out of the directory, into the subdirectory named superseded:The above also tries to minimise work. You only need to resolve the source path once, not for each name in subdirs. datetime objects support str.format() formatting directly, so we can form the new filename in one step from the modified timestamp and the old name. The os.path.abspath() cleans out errors like the // double slash as well, making it more robust.Rather than print each path in the loop, the function returns a mapping of files that have been renamed, so the caller can process that further as needed.
See if this below code will work for you. This code will go through all the working folders, find only the files, rename and move those renamed files to the superseded folder 


Answer URL
https://docs.python.org/3/library/os.path.html#os.path.join
