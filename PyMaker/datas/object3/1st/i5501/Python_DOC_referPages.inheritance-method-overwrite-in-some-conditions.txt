Natural Text
When creating a simple object hierarchy in Python, I'd like to be able to invoke methods of the parent class from a derived class.  In Perl and Java, there is a keyword for this (super).  In Perl, I might do this:In python, it appears that I have to name the parent class explicitly from the child.In the example above, I'd have to do something like Foo::frotz().  This doesn't seem right, since this behavior makes it hard to make deep hierarchies.  If children need to know what class defined an inherited method, then all sorts of information pain is created.  Is this an actual limitation in python, a gap in my understanding or both?
Yes, but only with new-style classes.  Use the super() function:
Python also has super as well: super(type[, object-or-type])Return a proxy object that delegates method calls to a parent or sibling class of type.  This is useful for accessing inherited methods that have been overridden in a class.   The search order is same as that used by getattr() except that the type itself is skipped.Example: 
will be just fine, whether the immediate parent class defined frotz itself or inherited it.  super is only needed for proper support of multiple inheritance (and then it only works if every class uses it properly).  In general, AnyClass.whatever is going to look up whatever in AnyClass's ancestors if AnyClass doesn't define/override it, and this holds true for "child class calling parent's method" as for any other occurrence!
Python 3 has a different and simpler syntax for calling parent method.If Foo class inherits from Bar, then from Bar.__init__ can be invoked from Foo via super().__init__():
Many answers have explained how to call a method from the parent which has been overridden in the child.However "how do you call a parent class's method from child class?"could also just mean:"how do you call inherited methods?" You can call methods inherited from a parent class just as if they were methods of the child class, as long as they haven't been overwritten.e.g. in python 3:yes, this may be fairly obvious, but I feel that without pointing this out people may leave this thread with the impression you have to jump through ridiculous hoops just to access inherited methods in python. Especially as this question rates highly in searches for "how to access a parent class's method in Python", and the OP is written from the perspective of someone new to python.I found:https://docs.python.org/3/tutorial/classes.html#inheritanceto be useful in understanding how you access inherited methods.
Here is an example of using super():
There's a super() in Python too. It's a bit wonky, because of Python's old- and new-style classes, but is quite commonly used e.g. in constructors:
I would recommend using CLASS.__bases__something like this
If you don't know how many arguments you might get, and want to pass them all through to the child as well:(From: Python - Cleanest way to override __init__ where an optional kwarg must be used after the super() call?)
There is a super() in python also.Example for how a super class method is called from a sub class methodThis example is similar to the one explained above.However there is one difference that super doesn't have any arguments passed to it.This above code is executable in python 3.4 version. 
In Python 2, I didn't have a lot luck with super().  I used the answer from jimifiki on this SO thread how to refer to a parent method in python?.Then, I added my own little twist to it, which I think is an improvement in usability (Especially if you have long class names).Define the base class in one module:Then import the class into another modules as parent:
in this example cafec_param is a base class (parent class) and abc is a child class. abc calls the AWC method in the base class.Output565656


This is a more abstract method:


Answer URL
https://docs.python.org/3/tutorial/classes.html#inheritance
