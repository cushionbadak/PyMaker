Natural Text
I really like Python generators. In particular, I find that they are just the right tool for connecting to Rest endpoints - my client code only has to iterate on the generator that is connected the the endpoint. However, I am finding one area where Python's generators are not as expressive as I would like. Typically, I need to filter the data I get out of the endpoint. In my current code, I pass a predicate function to the generator and it applies the predicate to the data it is handling and only yields data if the predicate is True.I would like to move toward composition of generators - like data_filter(datasource( )). Here is some demonstration code that shows what I have tried. It is pretty clear why it does not work, what I am trying to figure out is what is the most expressive way of arriving at the solution:
data_filter should apply len on the elements of d not on d itself, like this:now your code:returns
More concisely, you can do this with a generator expression directly:Apply the filter to your generator just like a regular function:If your predicate is really simple, the built-in function filter may also meet your needs.  
You could pass a filter function that you apply for each item:
What I would do is define filter(data_filter) to receive a generator as input and return a generator with values filtered by data_filter predicate (regular predicate, not aware of generator interface).The code is:If you want to further improve, may use compose which was the whole intent I think:PS: I used some code found here, where the Clojure guys expressed composition of generators inspired by the way they do composition generically with transducers. PS2: filter may be written in a more pythonic way:


Answer URL
https://docs.python.org/3/library/functions.html#filter
