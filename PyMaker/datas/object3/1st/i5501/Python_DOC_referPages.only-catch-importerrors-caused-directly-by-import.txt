Natural Text
I have a situation where a python file is dynamically loaded with the importlib module. I then catch ImportError to detect if the file does not exist. However this catches any importerrors indirectly caused by the import too. E.g.I would like to be able to tell the difference between an ImportError caused from my importlib.load_module and and caused by the process of executing the imported module itself.
load_module() is deprecated now.  They say to use exec_module() instead.  And indeed this offers a solution, because the import now happens in two phases: finding the module, then executing it.  See "Checking if a module can be imported" in the documentation, here: https://docs.python.org/3/library/importlib.html#checking-if-a-module-can-be-importedIn your case the code would look like:
Just create and use a custom exception:File MyImportError.py:File a.py:File b.py:Edit:Okay, I see, then try that alternatively:File a.py:File b.py:You will see a full traceback with the relevant error messages:


Answer URL
https://docs.python.org/3/library/importlib.html#checking-if-a-module-can-be-imported
