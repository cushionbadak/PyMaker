Natural Text
Going through Zed Shaw's book Exercise 17 [about copying one file to another] where he reduces his these two lines of code into one as :there's also a piece of code where he writes So I was reducing this into one line same as above :This seems to work fine but when I close the out_file there's an error as:I am unable to grasp what is going on and how close() is working here?
The two are not equivalent. If you write out_file = open(to_file, 'w').write(indata), you have implicitly written:Now as we can see in the documentation of write():f.write(string) writes the contents of string to the file, returning the number of characters written.So it returns an integer. So in your second sample out_file is not a file handler, but an integer. Further in the code, you somewhere aim to close the out_file file handler with out_file.close(). But since out_file is no longer a file handler, it thus makes no sense to call close on this.Nevertheless, by using a context, you do no longer need to perform a .close() yourself, so more elegantly is probably:The reduction in the book itself is allowed (well at least semantically, it is better to use context manager), since the author probably never closes the file handle explicitly.
Following is usually better approach, both for reading & writing: There is no need to close f with this code. With code val = open(to_file, 'w').write(indata) "val" will be return value of write function, not open function. 
The write method returns the number of characters written in your file which is an integer not a file object and therefore doesn't have a close method.Also, calling the I/O methods directly on open() is recommended only if you don't want to have any further interaction with the file. Besides, the most proper way to deal with file objects is to use a with statement that closes the file automatically at the end of the block and there's no need to call the close() manually.
The read() function reads the file and then returns the file content, so when you assign indata to read() it's assigning the returned file content.  The difference is that the write() function returns the number of characters written, therefore your outdata is now an int object.Read more about it here: https://docs.python.org/3.6/tutorial/inputoutput.htmlTherefore, you cannot combine the write() function into one line and expect to have a referenced file object to close after, and that's disastrous.The preferred way is to use the with block.  Refer to @Willem's answer for more details.
The author "Zed" has already clarified when you will read the page 64 from that book. Please read below:When I try to make this script shorter, I get an error when I close the files at the end.   You probably did something like this, indata = open(from_file).read(), which means you donâ€™t need to then do in_file.close() when you reach the end of the script. It should already be closed by Python once that one line runs.


Answer URL
https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects
