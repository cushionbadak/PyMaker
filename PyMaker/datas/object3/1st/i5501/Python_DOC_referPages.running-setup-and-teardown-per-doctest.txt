Natural Text
The following doctests fail because the first affects the next.I need to reset the external resource - in this case the scenegraph of Autodesk Maya - prior to running each individual doctest, with a function like this..Granted I could call the above once per test, which I am until I find a solution, but for readability and maintenance of this project I'd prefer stowing the setup away into a dedicated function, for when it grows and needs to change.Python's native doctest and nose both support calling a setup/teardown function, but only at a per-file level.I'm happy to use any framework, I would also accept any level of hacking to get around it. It's for use with a single module of about 30-100 doctests, to be run on Travis through GitHub.
Unfortunately the easiest and most accurate -- though not the fastest -- option is to reset the scene before each test as you suggest. Apart from some application level globals you'll be resetting all of the scene content before each test. However, even for trivial tests (create a cube, delete it, etc) you'll be spending a lot of time creating and deleting empty scenes  -- a task which Maya is unfortunately rather slow at.  Still, this is the best option because it would otherwise require complicated code to manage your invariants inside the tests -- a test that fails could easily leave state in the scene that "smarter" faster methods of resetting will miss, thus messing up the test run.A lot of maya people will use mocks instead of scene tests wherever possible : guaranteeing that the same series of calls to cmds or the api are made in the same sequence each time without guaranteeing the results.  That's less satisfying as a test but will run faster and catch many accidental changes.You may want to see if the doctest constraint is negotiable -- a doctest will have to be exec'ed or something similar, so you will not be running your tests in the same scope as user code (at least, not necessarily) which also raises the possibility of code that runs fine in the tests but fails in the runtime.If you run your tests using a maya.standalone instance you'll be able to churn through them a lot faster; the GUI lag is a significant part of the speed issue in using cmds.file()  As long as you don't use GUI elements in the code you're testing -- which is a good idea to avoid anyway, since GUI testing is a much more complex business -- you should be OK


Answer URL
https://docs.python.org/3/library/doctest.html#doctest.DocTestSuite
