Natural Text
I have a program that needs to create several graphs, with each one often taking hours. Therefore I want to run these simultaneously on different cores, but cannot seem to get these processes to run with the multiprocessing module. Here is my code:(full_graph() has been defined earlier in the program, and is simply a function that runs a collection of other functions)The function normally outputs some graphs, and saves the data to a .txt file. All data is saved to the same 2 text files. However, calling the functions using the above code gives no console output, nor any output to the text file. All that happens is a few second long pause, and then the program exits.I am using the Spyder IDE with WinPython 3.6.3
Without a simple full_graph sample nobody can tell you what's happening. But your code is inherently wrong.See the comment after p.join(). If your processes really take hours to complete, you would run one process for hours and then the 2nd, the 3rd. Serially and using a single core.From the docs: https://docs.python.org/3/library/multiprocessing.htmlProcess.join: https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.joinIf the optional argument timeout is None (the default), the method blocks until the process whose join() method is called terminates. If timeout is a positive number, it blocks at most timeout seconds. Note that the method returns None if its process terminates or if the method times out. Check the processâ€™s exitcode to determine if it terminated.If each process does something different, you should then also have some args for full_graph(hint: may that be the missing factor?)You probably want to use an interface like map from Poolhttps://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.PoolAnd do (from the docs again)


Answer URL
https://docs.python.org/3/library/multiprocessing.html
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.join
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool
