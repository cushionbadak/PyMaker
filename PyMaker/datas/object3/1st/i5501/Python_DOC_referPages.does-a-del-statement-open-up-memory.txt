Natural Text
I wrote a python script that backs up my files while I'm sleeping at night. The program is designed to run whenever the computer is on and to automatically shut down the computer after the backups are done. My code looks like this:The backup function is from another file that I wrote to perform more customized backups on a case by by case basis. This code all works perfectly fine, but I'm wondering if the del statement is really necessary. I put it in thinking that it would prevent my memory from getting filled up by thousands of datetime objects, but then I read that Python uses garbage collection, similar to Java. Further, does the todayvariable automatically get replaced with each pass through the while loop? I know that the program works as intended with the del statement, but if it is unnecessary, then I would like to get rid of it if only for the sake of brevity! What are it's actual effects on memory?
I put it in thinking that it would prevent my memory from getting filled up by thousands of datetime objectsThe del statement is not necessary, you may simply remove that block.  Python will free the space from those local variables automatically.... but then I read that Python uses garbage collection, similar to Java. The above statement is misguided: this has nothing to do with the garbage collector, which exists to break up circular references.  In CPython, the memory is released when the object reference count decreases to zero, and that would occur even if the garbage collector is disabled.  Further, does the today variable automatically get replaced with each pass through the while loop? I know that the program works as intended with the del statement, but if it is unnecessary, then I would like to get rid of it if only for the sake of brevity! What are it's actual effects on memory?A new datetime object is created on each iteration of the loop.The today name in scope will be rebound to the newly created datetime instance.  The old datetime instance will be deleted because no reference exists on it (since the only existing reference is lost once you rebound the name today to a different object).  Once again, I stress that this is just ref-counting and has nothing to do with gc.On an unrelated note, your program will busy-loop and consume an entire CPU with this while loop.  You should consider adding a call to time.sleep into the loop so the process will remain mostly idle. Or, better yet, schedule the task to run periodically using cron.


Answer URL
https://docs.python.org/3/library/gc.html
