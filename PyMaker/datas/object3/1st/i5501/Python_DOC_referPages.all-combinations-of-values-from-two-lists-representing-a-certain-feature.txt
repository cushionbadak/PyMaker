Natural Text
I have three lists:How to create all three-element combinations? Where sequences from the list c tell you which list can be used to choose numbers for a given place in a given output sequenceFor example (pseudocode):And the same for the rest of the i indexes. Where the values in individual sublistas can not be repeated.I will be very grateful for any tips.
This generator function will handle 'ab' template strings with the a's and b's in any order, and the output lists will not contain repeated items if the a and b lists are disjoint. We use itertools.combinations to generate combinations of the required order, and combine the a and b combinations using itertools.product. We get them in the correct order by turning each a and b combination into an iterator and select from the correct iterator via a dictionary.outputI should mention that even though combinations returns iterators, and product happily takes iterators as arguments, it has to make lists from the iterators because it has to run over the iterator contents multiple times. So if the number of combinations is huge this can consume a fair amount of RAM. If you want permutations instead of combinations, that's easy. We just call itertools.permutations instead of itertools.combinations.outputFinally, here's a version that handles any number of lists, and template strings of any length. It only accepts a single template string per call, but that shouldn't be an issue. You can also choose whether you want to generate permutations or combinations via an optional keyword arg.output
combinations is a nested lazy iterator (i.e. nothing is stored in memory and calculated, yet). If you want to get an iterator of listsOr you might want to flatten the result:
If I understand it correctly, you can achieve the goal with a dictionary bookkeeping the correspondence of a character like "a" to a variable name a.
Put the lists in a dictionary so you can access them with strings.Use the characters in each sequence to determine which lists to use.Use itertools.product to get the combinations.Result for sequence 'abb':edit to filter out tuples with duplicatesI like the idea of a callable dict that can be used with map.  It could be used here.I couldn't help myself, here is a generic version of @PM2Ring's solution/answer. Instead of filtering out unwanted items, it doesn't produce them in the first place.
It looks like you're looking for some way to programmatically call itertools.product


Answer URL
https://docs.python.org/3/library/itertools.html#product
