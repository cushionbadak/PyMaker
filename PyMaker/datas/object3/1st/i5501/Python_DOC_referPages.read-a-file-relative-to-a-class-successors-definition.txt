Natural Text
Say I have an interface class Base intended to be inherited. I need to define a static method in Base that would read and print a text file next to a successor's definition. My attempt was as follows.Example structure:Base.py:A.py (same for B.py):When I import A class and call A.print_file(), this code attempts to read .../module/file.txt and not .../module/A/file.txt, as __file__ seems to be calculated against Base.py and not A.py.Is there a way to read A/file.txt and B/file.txt in the static method without additional code in A.py and B.py?
From the docs:__file__ is the pathname of the file from which the module was loaded, if it was loaded from a file. The __file__ attribute may be missing for certain types of modules, such as C modules that are statically linked into the interpreter; for extension modules loaded dynamically from a shared library, it is the pathname of the shared library file.Thus having __file__ point to Base.py makes sense as this is where the module Base initially is loaded from.An appropriate choice here could be getfile from the inspect package:inspect.getfile(object): Return the name of the (text or binary) file in which an object was defined.


Answer URL
https://docs.python.org/3/reference/datamodel.html
https://docs.python.org/3/library/inspect.html
