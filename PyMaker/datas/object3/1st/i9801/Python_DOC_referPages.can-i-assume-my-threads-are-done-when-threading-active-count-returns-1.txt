Natural Text
Given the following class:When all the threads are done, there's still one active thread - threading.active_count() on the last line gets me that number.The active thread is <_MainThread(MainThread, started 12960)> - as printed with threading.enumerate().Can I assume that all my threads are done when active_count() == 1?Or can, for instance, imported modules start additional threads so that my threads are actually done when active_count() > 1 - also the condition for the loop I'm using in the run method.
You can assume that your threads are done when active_count() reaches 1. The problem is, if any other module creates a thread, you'll never get to 1. You should manage your threads explicitly.Example: You can put the threads in a list and join them one at a time. The relevant changes to your code are:
according to docs active_count() includes the main thread, so if you're at 1 then you're most likely done, but if you have another source of new threads in your program then you may be done before active_count() hits 1. I would recommend implementing explicit join method on your ScraperPool and keeping track of your workers and explicitly joining them to main thread when needed instead of checking that you're done with active_count() calls.Also remember about GIL...


Answer URL
https://docs.python.org/3/library/threading.html#threading.enumerate
