Natural Text
I wanted to compare different to build a string in Python from different variables:using + to concatenate (referred to as 'plus')using %using "".join(list)using format functionusing "{0.<attribute>}".format(object)I compared for 3 types of scenaristring with 2 variablesstring with 4 variablesstring with 4 variables, each used twiceI measured 1 million operations of each time and performed an average over 6 measures. I came up with the following timings:In each scenario, I came up with the following conclusionConcatenation seems to be one of the fastest methodFormatting using % is much faster than formatting with format function I believe format is much better than % (e.g. in this question) and % was almost deprecated. I have therefore several questions:Is % really faster than format?If so, why is that?Why is "{} {}".format(var1, var2) more efficient than "{0.attribute1} {0.attribute2}".format(object)?For reference, I used the following code to measure the different timings.
Yes, % string formatting is faster than the .format methodmost likely (this may have a much better explanation) due to % being a syntactical notation (hence fast execution), whereas .format involves at least one extra method callbecause attribute value access also involves an extra method call, viz. __getattr__I ran a slightly better analysis (on Python 3.6.0) using timeit of various formatting methods, results of which are as follows (pretty-printed with BeautifulTable) -The trailing _str & _int represent the operation was carried out on respective value types.Kindly note that the concat_str result for a single variable is essentially just the string itself, so it shouldn't really be considered.My setup for arriving at the results -I couldn't go beyond num_vars=250 because of some max arguments (255) limit with timeit.tl;dr - Python string formatting performance : f-strings are fastest and more elegant, but at times (due to some implementation restrictions & being Py3.6+ only), you might have to use other formatting options as necessary.


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals
