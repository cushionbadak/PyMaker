Natural Text
I'm working with some text in python, it's already in unicode format internally but I would like to get rid of some special characters and replace them with more standard versions.I currently have a line that looks like this, but it's getting ever more complex and I see it will eventually bring more trouble.for example the u\2018 and \u2019 are left and right single quotes. Those are somewhat acceptable but for this type of text processing I don't think they are needed.Things like this u\2013 EN DASH and this HORIZONTAL ELLIPSIS are definitely not needed.Is there a way to remove those quotation marks and use simple standard quotes that won't break text processing 'with nltk' and remove things like those EN DASH, HORIZONTAL ELLIPSIS without making such a monster call like I see starting to rear it's head in the sample code above?
If your text is in English and you want to clean it up in a human-readable way, use the third-party module unidecode. It replaces a wide range of characters with their nearest ascii look-alike. Just apply unidecode.unidecode() to any string to make the substitutions:
If you need to do this kind of characters "normalisation" you may consider implementing a codec for the Codec registry.The implementation is similar as the one proposed by @RomanPerekhrest with a table of substitution characters.Implementing a codecImport the codecs module, give a name to your codec (avoid existing names).Create the encoding table (the one you'll use when you do u"something".encode(...):The table above can "normalize" spaces, hyphens, quotation marks.This is where normalisation rules goâ€¦Then, implement the function used to normalize your string:You can also implement the decoding, but you need to reverse the _ENCODING_TABLE,the best practice is to prepare the reversed table and fill the missing characters later.Now, everything is ready, you can implements the codec protocol:How to register the newly created codec?If you have several normalisation codecs, the best practice is to gatherthem in the __init__.py file of a dedicated package(for instance: my_app.encodings.Whenever you need your codec, you write:
The unified solution would be using a predefined dict of replacement pairs. Such a dict can be easily extended(modified). The solution using re.complile and re.sub functions:
Use the built-in string method translate.  It takes a dictionary of Unicode ordinals as keys and translates to the values, which can be Unicode ordinals, strings or None.  The value None deletes characters:Output:
re.sub will do it too:


Answer URL
https://docs.python.org/3/library/codecs.html
https://docs.python.org/3/library/stdtypes.html#str.translate
https://docs.python.org/3/library/stdtypes.html#str.translate
