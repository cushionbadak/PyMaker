Natural Text
Is there any way I can only replace only the first argument only in string formatting? Like in this:I want the output to be:The second {} arg I will replace later.I know I can create a string like: and later combine it with remaining string and create new string, but can I do it in one go?
If you know when you set up the format string that you'll only be replacing a subset of the values, and you want some other set to remain, you can escape the ones you're not going to fill right away by doubling the brackets:
The only way you can replace it in the same line is if you replace "{test}" with another bracket. I.e:but that doesn't make much sense because you could've just done:immediately. You could keep the result of:So s has a bracket inside it waiting to get replaced and call format on it later on if you need to. 
You would have to write your own format function that only makes a single replacement. For example, to give you something to start with (note that this is somewhat vulnerable to bad format strings):Used like this:
The correct way to achieve this would probably be to subclass string.Formatter class and use its instance instead of the string method:The following Formatter methods would have to be overwritten:get_value() should return some special object instead of raising LookupError.get_field() should save field_name argument into this object (or proceed normally if the object is not our special object).convert_field() should just save conversion argument into this object and do no conversion (or proceed normally...).format_field() should reconstruct field format string from the special object using its field_name and conversion attributes and format_spec argument of this method (or proceed normally...).So, for example:should result in "hello {who.name!r:^16s}", where "who.name" is field_name, "r" is conversion, "^16s" is format_spec and all these three values were re-combined back into "{who.name!r:^16s}", so that it can be used in the next formatting pass.Additional note: the special object should return itself upon access of any attribute (with .) or item (with []).


Answer URL
https://docs.python.org/3/library/string.html#string.Formatter
