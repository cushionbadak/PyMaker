Natural Text
I am wondering how I can go about condensing these elif statements into a method of some sorts. I also don't know how to go about storing a chosen coordinate so that I can perform checks of surrounding coordinates. I know my code is nooby, but so am I, I learn better starting with the long way :)Below is how I'm going about storing a coordinate inside a variable. (Not sure this is even the right way to do it yet...)SjumpX is the coordinate of the piece my player wants to grab, and DjumpX is the coordinate of the destination. My logic behind this is if the player enters a coordinate(ie A1 B2 C3...), I can then store that coordinate into the variable 'grab', then use that variable to test if the destination coordinate is empty, also if the coordinate between the two is the an opposing players piece.Here is the board:This where I'm checking that the "jumpable" destination coordinates are empty based on the current coordinates of my 'grab' variable. In this case 'A3' <==>  grab = [0][2]My main Questions Are:1- How do I condense my huge elif statement list?2- What is the correct format/process to store a coordinate to perform checks on surrounding coordinate content?3- How can I condense my if statement that checks to see if the destination coordinate is empty('-'). 
We can make a mapthen using it we can initialize the grabi.e,I think it helps
Assuming you would want to grab the board's position corresponding to SjumpX value, the following would be a simple code for the task.This would mean converting the first letter of SjumpX to its ASCII ordinate value (A, B, C, ...) and converting it to numbers (65, 66, 67, ...). Since the offset is 65, subtracting it from the ordinate should give you the numbers you need (0, 1, 2, ...)On the other hand you could go for a direct method suggested by @khachik's comment.This directly maps (A, B, C) to (0, 1, 2), although this statement would grow longer for larger boards (D, E, and so on).
I have two suggestions:First: Keep an adjacency list for the or a matrix representation (this answer depends on your design, I personally like adjacency lists better)Second: Store the mapping of row, col in a dict {'A1': (0,0), 'A2': (0,1)}. Dict is constant time lookup and you can directly get the co-ordinate making things fast. Use a matrix representation as 


Answer URL
https://docs.python.org/3/library/functions.html#map
