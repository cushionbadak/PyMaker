Natural Text
I'm stuck on a question where I have to add 2 lists together while factoring in the length. For example, if list1 = [1,2] and list2 = [3,4,5] the answer would be [1+3,2+4,5] or [4,6,5]. What I have so far is:I'm not really sure how to appraoch this question since I'm new to lists. Would appreciate the help!
You should use zip_longest from itertools with a fillvalue of 0 in a list comprehension:zip_longest pairs the elements in the input lists (list1 and list2 here). If one list is smaller, pairs the remainding elements of the larger list with the value supplied as the fillvalue (which we assign to 0 here).Now, r equals:Similarly, you could utilize map instead of the list-comp:and get the same result for r.
Poor man's approach:
I would use the zip_longest solution too, but building in your code this is what I would dofirst make sure that the first list is the longest, and if that is not the case exchange them, then make a copy of longest list and finally add the elements of the shorter list position-wise to the copy and return it
Although zip_longest is more neat, another possibility is to use a trial/error approach (if you are tired of "ifs"), as shown here:
Documentation on zip_longest:Make an iterator that aggregates elements from each of the iterables. If the iterables are of uneven length, missing values are filled-in with fillvalue. Iteration continues until the longest iterable is exhausted.Here's the code:Output:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
