Natural Text
This is somewhat of a follow on to Why are mutable values in Python Enums the same object?.If the values of an Enum are mutable (e.g. lists, etc.), those values can be changed at any time. I think this poses something of an issue if Enum members are retrieved by value, especially if someone inadvertently changes the value of an Enum he looks up:I think given normal Python idioms this is okay, with the implication being that users can use mutables as their Enum values, but just to understand the can of worms they might be opening.However this brings up a second issue - since you can look up an Enum memeber by value, and the value can be mutable, it must be doing the lookup by a means other than a hashmap/dict, since the mutable cannot be a key in such a dict.Wouldn't it be more efficient (although, granted, less flexible) to limit Enum values to only mutable types so that lookup-by-value could be implemented with a dict?
It appears the answer to my second question was hiding in plain sight in the soure code for enum.py.Each Enum does contain a dict of value->member pairs for hashable (i.e. immutable) values, and when you look up an Enum by value, it attempts to retrieve the member from that dict.  If the value is not hashable, it then brute-force compares for equality against all existing Enum values, returning the member if finds a match.  The relevant code is in lines 468-476 in enum.py:So it appears as though the designers of enum.py wanted to have a quick lookup when getting Enums by value, but still wanted to give the flexibility of having mutable values for Enum values (even though I still can't think of a reason why someone would want that in the first place).


Answer URL
https://docs.python.org/3/library/argparse.html
