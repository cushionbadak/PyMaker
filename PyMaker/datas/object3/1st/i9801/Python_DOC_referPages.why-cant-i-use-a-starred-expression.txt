Natural Text
My code My question, why?In a more serious tone: I'd like an answer, or a reference, that details all the ins and outs of using a starred expression, as it happens that I am sometimes surprised from its behaviours...AddendumTo reflect some of the enlightening comments thatimmediately followed my question I add the following code(I had tried the (, a) part before posting the original question but I've omitted it 'cause the error was not related to the starring.)There is a syntax, in python ≥ 3.5, that "just works" but nevertheless I would like some understanding.
It's because this:Is just a value surrounded by parenthesis. It's not a new tuple object. So your expression:will get translated to:which is obviously wrong in terms of python syntax.In order to create a new Tuple, with one expression as an initializer, you need to add a ',' after it:Note: unless a is a generator, in this particular situation you could just type:Also, if I may suggest something: you could start using new-style formating expressions. They are great!You can read more about them in those two paragraphs of python documentation, also there is this great website. The line above uses argument unpacking mechanism described below.Starred ExpressionsThere are many more uses to starred expression than just creating a new list/tuple/dictionary. Most of them are described in this PEP, and this oneAll of them come down to two kinds:RValue unpacking:Iterable / dictionary object initialization (notice that you can unpack dictionaries inside lists too!):Of course, the most often seen use is arguments unpacking:which would translate to this:This topic was already covered in great extent in another Stack Overflow question.
My question, why?Because your python syntax doesn't allow that. It's defined that way, so there's no real "why".also, it's unnecessary. would work.So, you'd need to convert your expansion to a tuple – and the right way of doing that would be, as pointed out by Lafexlos, be 
It's because:Can be just:Of course then able to do:But then:Or you can do:But then:So:


Answer URL
https://docs.python.org/3/library/string.html#custom-string-formatting
https://docs.python.org/3/library/string.html#format-string-syntax
