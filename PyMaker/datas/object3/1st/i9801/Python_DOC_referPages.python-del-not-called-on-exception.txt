Natural Text
I'm attempting to wrap a poorly written Python module (that I have no control of) in a class. The issue is that if I don't explicitly call that module's close function then the python process hangs on exit, so I've attempted to wrap the module with a class that has a del method, however the del method does not seem to be called on exceptions.Example:In this case del is not called and python hangs. I need somehow to force Python to call del immediately whenever the object goes out of scope (like C++ does).Please note that I have no control over the problematic module (i.e. cannot fix the bug that causes this in the first place) and also no control over whoever uses the wrapper class (can't force them to use "with" so I can't use exit either).Is there any decent way to solve this?Thanks!
If you want some resource to be released on an exception, think about __enter__ + __exit__ paradigm.When the execution goes into the 'with' block, the method __enter__() of 't' is called, and then it leaves the block due to either normal flow, or an exception, the method __exit__() of 't' is called.
A possible solution is to use sys.excepthook, which allows you to introduce custom login to the global exception handler. You can add some code there to close your module's leftovers.


Answer URL
https://docs.python.org/3/library/sys.html
