Natural Text
let's say I have 6 lists or arrays. Each list has any amount of words.I didn't feel like typing out all those words but let's say that I would like to get intersection. Finding the intersection of all is pretty simple and that can be done in python with a function like this:I would like to make sure that I am not missing a simpler solution and not over thinking this.For the above example, to get a match for any two lists I would need to do.for threeThe reason I ask is because looking at the example with only two lists, what if array zero and array one doesn't contain similar words but array zero and three does?Is there a way to generalize this, I have a strong feeling it has been solved and I am over thinking this question. I'd like to be able to find out of say the word cat appears in 0,1, 2, ..N lists.[EDIT]Here is some sample data that I am working with.I clean up the text, tokenize it into three lists, data0_list, ... data2_list.after that a function call like this output the data.That output looks like this:in this example the word rainforest, world, forest and some other more common words are in all three data sets.What I am trying to do now is find the words that are in more than one list.So for instance the I would like to be able to say the word rainforest is in 3/3 lists.the word oxygen on the other hand is in 2/3 lists, it's in data_0 & data_1.
Simplest way to find the intersection of multiple list is to use list slicing feature along with set.intersection(). For example:Then intersection of all the list can be calculated as:which will return:Edit: Looks like you do not need intersection. You need to find count of item in all the list based on statement:I'd like to be able to find out of say the word cat appears in 0,1, 2, ..N lists.If you care about just the count of items, you may use collections.Counter() along with itertools.chain() as:where my_count will hold:If you also want a mapping of item with it's list, you can create dict to map the items. But, firstly you need union of all the items as:Then store it in dict. I am using collections.defaultdict() for ease:Now my_dict will hold value:You can find the occurrence count from this dict. 
Although the bulk of your question talks about intersections of sets, what you actually want appears not to be directly related to that concept:I'd like to be able to find out of say the word cat appears in 0,1, 2, ..N lists.You can find this out without bothering with intersections, sets and so on:This works because True acts like the integer 1 when used in arithmetic (on which sum() is based).If what you actually want is the intersection of all the "sets", that's also straightforward:Update: Now that you've clarified your problem, it's clear that you actually need to count how many times a word occurs across your various lists. Apart from the method described above to count occurrences of a single word, and as I mentioned in my comment on Andrea Reina's answer (and Moinuddin Quadri subsequently added to his own answer), an idiomatic way to do that in Python is with collections.Counter and itertools.chain:
You can use reduce (functools.reduce if you are using Python 3.x)
If you can use frozenset instead of list, this is a generalization:To create all combinations we uses itertools.combinations:We will use frozenset which is hashable (later used as dict keys):Create the mappings by applying frozenset.intersections across all combinations (picked combinations of size 3 as an example), store results in a dict:Result:
Refining Zero Piraeus' answer:


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/itertools.html#itertools.chain
https://docs.python.org/3/library/functools.html#functools.reduce
https://docs.python.org/3/library/stdtypes.html#frozenset
https://docs.python.org/3/library/itertools.html#itertools.combinations
https://docs.python.org/3/library/stdtypes.html#set.intersection
