Natural Text
I want to create generator, which can merge values from iterables on fly (continuously) in endless look.The main idea, that generator will produce the values into output each time, when you ask it. So, the main function is endless loop, where you ask generator for values one by one and print them into output.While values comes from iterators generator returns values one by one to print them into output.Now, in my code I'm passing values into one list . but It is not necessary to collect all values into one single list before print.when I'm running like this:To be clear I have an example:Lets imagine that we are taking balls with numbers (like bingo) from several black boxes.we don't really know the number of balls in each box. we can take the balls from boxes one by one.We know, that each next ball from the same black box will have number greater than previous.So, we should takes balls from black boxes and give on each step one ball with the smallest number to our assistant.So, my question is how I can create generator, which can merge values from iterables on fly (continuously) in endless look?  (also I won't to be use list because of memory- I know maybe  itertools.chain(*iterables) is good option but don't know how to use)
You do have to actually compare the values in order to sort them.  I'm not sure this is going to give you any real benefit over just doing sorted(itertools.chain(...)), but this only keeps len(iterables) items in memory at any given time.Edit: To make this (or any other iterator for that matter) repeat indefinitely use itertools.cycle
I think this is a task for itertools(Python3, Python2). Exampleif you need them in order you can apply sorted on listFrom docs:Make an iterator that returns elements from the first iterable until  it is exhausted, then proceeds to the next iterable, until all of the  iterables are exhausted. Used for treating consecutive sequences as a  single sequence
If I understood correctly what I believe you're after is itertools.chain Python 3, Python 2 which allows you to combine iterables together.Then combining two or more generators.If you want sorting with it then I have this solution, however I can't vouch for its efficiency, I haven't timed it (since I don't have anything to compare it to) but I feel the multiple list calls may not be best for really large iterables.if you want it to continue indefinitely then itertools.cycle is an infinite generator that loops back to the start after reaching the end.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable
https://docs.python.org/3/library/itertools.html#itertools.chain
