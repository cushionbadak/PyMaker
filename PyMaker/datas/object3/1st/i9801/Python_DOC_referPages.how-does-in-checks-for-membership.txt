Natural Text
I have a multiple instances of a class. I consider two classes equal, when a certain attribute matches.All instances are in an array list = [a, b, c]. I now create a new instance of said class d. When I do d in list it ofc outputs false.My question is: How is membership checked when using in? Is it normal comparison (which means I can use __eq__ in my class to implement the equality of classes)? If not: How can I achieve that in matches if a certain attribute of a class equals?

From the docs:For user-defined classes which define the __contains__() method, x in y is true if and only if y.__contains__(x) is true.For user-defined classes which do not define __contains__() but do define __iter__(), x in y is true if some value z with x == z is produced while iterating over y. If an exception is raised during the iteration, it is as if in raised that exception.Lastly, the old-style iteration protocol is tried: if a class defines __getitem__(), x in y is true if and only if there is a non-negative integer index i such that x == y[i], and all lower integer indices do not raise IndexError exception. (If any other exception is raised, it is as if in raised that exception).
Behavior of in is based on the __contains__() method. Let us see with an example:Now when you do in on X()m you can see 'Hello' printedAs per the __contains__() document:For objects that donâ€™t define __contains__(), the membership test first tries iteration via __iter__(), then the old sequence iteration protocol via __getitem__(), see this section in the language reference.


Answer URL
https://docs.python.org/3/reference/expressions.html#in
