Natural Text
I would like to include some metadata into a python slice object, along with adding variables to indicate the index of each element in the slice. The metadata is used to label each element that the slice is retrieving. I know there are other labelled data structures that can be used, but in my project slices are predefined as a sort of subscript for numpy arrays and is re-used in various places. So, for me it makes sense to find a way to incorporate this.I was thinking of sub-classing slice, but apparently it cannot be subclassed which was explained clearly in the answer of the linked question. Has anything changed since then?What I'd like to do is create a class that looks like:and be able to use it like this:is there a way to do this without having to add a __call__ method to return the slice? Somehow I doubt this because the array or list taking in the sub through __getitem__ wouldn't know what to do with this. I know that I could probably just monkey-patch this information to slice, but am wondering if this type of thing could be done in a class.Currently, I am defining the slice and slice elements separately like:But this approach makes it much harder to process the output of multidimensional arrays into a dict where keys are subscript element combinations in the case of more than 1 sub and values are 1d arrays.
Nope, slice objects still can't be sub-classed. I'm saying this based on the flags defined for PySlice_Type in the default Python (3.7) branch:To allow an object to act as a base class the appropriate Py_TPFLAGS_BASETYPE would be ored in there as they are with types defined allowed to. Taking lists as an example, their flags are defined as:Ignoring the rest, Py_TPFLAGS_BASETYPE is |'ed in there allowing it to act as a base class.Judging by the fact that I couldn't find this mentioned somewhere in the docs, I'd say it's an implementation detail whose rationale I'm currently not aware of. The only way I believe you might circumvent it is by dropping to C and making your class there.
What I ended up doing is subclassed numpy.ndarray because I was only trying to pass the slices into this type of object (could do the same for list), and then reimplemented __getitem__ so that if a Subscript object is passed in then the slice will first be extracted before passing onto the parent method.Looks like:And can use like this:This is much closer to the approach that I was avoiding (i.e. using something like xarray), but the result is still basically a numpy array and works for me.


Answer URL
https://docs.python.org/3/c-api/typeobj.html#Py_TPFLAGS_BASETYPE
