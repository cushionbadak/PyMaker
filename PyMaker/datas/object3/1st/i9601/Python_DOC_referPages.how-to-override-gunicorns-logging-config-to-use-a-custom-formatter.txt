Natural Text
I would like gunicorn.error to use the following key-value based log format instead of the default defined in gunicorn/glogging.py:In my gunicorn config file:Gunicorn logs twice, in my custom format and in the default format:I used the logging_tree library to take a look at the configured loggers and I'm seeing 2 gunicorn loggers emitting to the console:Gunicorn's docs say it's possible to specify the logger class to use, but I don't know how to do this.
I have had very good luck by specifying my own custom logging class. You can do this by making a class that inherits from Gunicorn's gunicorn.glogging.Logger class, and then override the setup(self, cfg) method of this class.For example:Now, depending upon how you launch Gunicorn, you can either provide the full path to this class; IE: program.app.CustomLogger via the --logger-class option, or you can directly pass it in via your own customer Gunicorn application class like so:This should accomplish your desired goal without any yucky INI files being required and it is a completely supported configuration style.
I think you only need to give the configuration file (.ini or .conf) with your own configuration. Make sure you override the default.There is a examples/logging.conf in the examples directory.
I recently run into this myself, with gunicorn, as well as some other python packages that do not honor existing logging configuration when they are imported.The following function resets all existing logging configuration and loads the new configuration from a dictionary. See logging.config.dictConfig for more information on the configuration dictionary schema.Just call reset_logging_configuration() after you have imported all offending modules.Beaware: this method messes with logging internals and is more of a work-around than an actual solution. However, many modules blindly overwrite existing logging configuration when they are imported, leaving you with no choice but to overwrite their configuration after they are loaded. Use with caution!This code is based on a code-snippet found in logging/config.py.


Answer URL
https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig
