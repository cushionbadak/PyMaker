Natural Text
I found this rule  here,i just didn't figure out how "*" or_expr is equivalent as starred_item .If there is nothing wrong, what is it the problem that caused my code a = 8;b = 2; *(a >> b), = (1,2,3) to raise a exception,which said "SyntaxError: can't assign to operator"?
Atribution in Python - which happens with the assignment operator = or one of the augmented operators (+=, -=, ...) is actually a statement, and can't be used as part of a normal expression as in C-syntax derived Languages.The left part of an assignment must make sense as a variable name (or a sequence of names).  The expression you are trying to use there *a >> b, = (1,2,3) (to which I admit I can't understand what you wanted to achieve) is equivalent to a sequence were the first (and only) element is *a >> b - that is nor a valid name in Python - therefore your error.The "*a" in assignemnts mean that any lenght that "is left of" after attribution to other parts of the sequence of names are assigned to the starred name:And that is deterministic and works whenever a * appears:And of course, if one tries to use two stars, that results in an error due to the ambiguity:Again, note that in no way an arbitrary expression is allowed on the left side of an attribution operator. On non-assignemnt expressions, the * operator can be used to expand in place an iterable. Up to Python 3.5, that was only possible on function calls - now it is possible anywhere were a sequence of literals is expected:


Answer URL
https://docs.python.org/3/reference/expressions.html#expression-lists
