Natural Text
I have a script that in the end executes two functions.  It polls for data on a time interval (runs as daemon - and this data is retrieved from a shell command run on the local system) and, once it receives this data will: 1.) function 1 - first write this data to a log file, and 2.) function 2 - observe the data and then send an email IF that data meets certain criteria. The logging will happen every time, but the alert may not. The issue is, in cases that an alert needs to be sent, if that email connection stalls or takes a lengthy amount of time to connect to the server, it obviously causes the next polling of the data to stall (for an undisclosed amount of time, depending on the server), and in my case it is very important that the polling interval remains consistent (for analytics purposes). What is the most efficient way, if any, to keep the email process working independently of the logging process while still operating within the same application and depending on the same data?  I was considering creating a separate thread for the mailer, but that kind of seems like overkill in this case. I'd rather not set a short timeout on the email connection, because I want to give the process some chance to connect to the server, while still allowing the logging to be written consistently on the given interval. Some code:
This is exactly the kind of case you want to use threading/subprocesses for. Fork off a thread for the email, which times out after a while, and keep your daemon running normally.
Possible approaches that come to mind:MultiprocessingMultithreadingParallel PythonMy personal choice would be multiprocessing as you clearly mentioned independent processes; you wouldn't want a crashing thread to interrupt the other function.You may also refer this before making your design choice: Multiprocessing vs Threading Python
Thanks everyone for the responses.  It helped very much.  I went with threading, but also updated the code to be sure it handled failing threads.  Ran some regressions and found that the subsequent processes were no longer being interrupted by stalled connections and the log was being updated on a consistent schedule  . Thanks again!!


Answer URL
https://docs.python.org/3/library/threading.html
