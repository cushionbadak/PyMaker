Natural Text
First of all I have to say, that I'm not new in Python. I know the use of if __name__ == '__main__': well enough. I just try to understand how the Python interpreter handles this. I wrote two scripts to test what's possible in Python. Note that that's actually really bad Python - I wouldn't make use of such things. I only want to learn about the possibilities.main.py:bad.py:There's no output by running main.py and I didn't really expect an output.what I want to know:does __name__ = '__main__' in bad.py automatically change the variable __name__ in main.py? Or can two different '__main__'-modules exist?is it possible to substitute an import statement just by manipulating __name__? If it is, how would you do that?when I change exit() to print "Hello",, The output is "Hello", then an Error occurs:could someone explain this behaviour?Are there any differences between python versions / operating systems? I tried this example in Python 2.7.6 on Linux2EDIT:Of course import bad.py doesn't work. import-statements don't want any file-endings. I did this mistake because I also program in C. I changed the line to import bad. The output looks like this now:
change your import statement to import badThe if __name__ == '__main__': intention is to run this code if this program is run directly, as a main program. As you see you can overwrite the name value but the same effect would occur if you remove the if check in bad.__name__ in bad.py is independent from __name__ in main.py. You can see that when you again call main.py from another program.the import function is completely different from the __name__ attribute. So no.you got the error because main continues with the next import after bad was finished. And it cannot import py.Add some more print statements to follow the logic. You can also print __name__ itself to see those values.
A few things are happening in your code :Firstly your import lineimport bad.py Isn'i importing the file  bad.py. It's performing a search see here for the search logicto find a module called bad   Which its finding and the =n once bad is imported it's looking inside that module for an object called py  which its not finding and instead returning an Import Error.      (in the exit(). Version your quitting before the import of bad is complete so it  doesn't get the chance to try and find pySecondly name. Is defined for each module by the the interpreter and import logic, when the file is loaded name is set,  after that you can change it all you want (like in bad.py).  It's also scoped to module, changing bad.__name__ doesn't change main__name


Answer URL
https://docs.python.org/3/reference/import.html#searching
https://docs.python.org/3/library/__main__.html
