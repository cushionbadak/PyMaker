Natural Text
This question already has an answer here:check if a string matches an IP address pattern in python?                    18 answers                What's the best way to validate that an IP entered by the user is valid?  It comes in as a string.
Don't parse it.  Just ask.

The IPy module (a module designed for dealing with IP addresses) will throw a ValueError exception for invalid addresses.However, like Dustin's answer, it will accept things like "4" and "192.168" since, as mentioned, these are valid representations of IP addresses.If you're using Python 3.3 or later, it now includes the ipaddress module:For Python 2, you can get the same functionality using ipaddress if you install python-ipaddress:This module is compatible with Python 2 and provides a very similar API to that of the ipaddress module included in the Python Standard Library since Python 3.3. More details here. In Python 2 you will need to explicitly convert the IP address string to unicode: ipaddress.ip_address(u'127.0.0.1').
IPv4:IPv6:The IPv6 version uses "(?:(?<=::)|(?<!::):)", which could be replaced with "(?(?<!::):)" on regex engines that support conditionals with look-arounds. (i.e. PCRE, .NET)Edit:Dropped the native variant.Expanded the regex to comply with the RFC.Added another regex for IPv6 addresses.Edit2:I found some links discussing how to parse IPv6 addresses with regex:A Regular Expression for IPv6 Addresses - InterMapper ForumsWorking IPv6 regular expression - Patrickâ€™s playground blogtest-ipv6-regex.pl - Perl script with tons of test-cases. It seems my regex fails on a few of those tests.Edit3:Finally managed to write a pattern that passes all tests, and that I am also happy with.
From Python 3.4 on, the best way to check if an IPv6 or IPv4 address is correct, is to use the Python Standard Library module ipaddress - IPv4/IPv6 manipulation library s.a. https://docs.python.org/3/library/ipaddress.html for complete documentation.Example : For other versions: Github, phihag / Philipp Hagemeister,"Python 3.3's ipaddress for older Python versions", https://github.com/phihag/ipaddressThe backport from phihag is available e.g. in Anaconda Python 2.7 & is included in Installer. s.a. https://docs.continuum.io/anaconda/pkg-docsTo install with pip:s.a.: ipaddress 1.0.17, "IPv4/IPv6 manipulation library", "Port of the 3.3+ ipaddress module", https://pypi.python.org/pypi/ipaddress/1.0.17
I hope it's simple and pythonic enough:
I think this would do it...
I have to give a great deal of credit to Markus Jarderot for his post - the majority of my post is inspired from his.I found that Markus' answer still fails some of the IPv6 examples in the Perl script referenced by his answer.Here is my regex that passes all of the examples in that Perl script:I also put together a Python script to test all of those IPv6 examples; it's here on Pastebin because it was too large to post here.You can run the script with test result and example arguments in the form of "[result]=[example]", so like:or you can simply run all of the tests by specifying no arguments, so like:Anyway, I hope this helps somebody else!
I came up with this noob simple version 
Consider IPv4 address as "ip".
I only needed to parse IP v4 addresses. My solution based on Chills strategy follows:


Answer URL
https://docs.python.org/3/library/ipaddress.html
