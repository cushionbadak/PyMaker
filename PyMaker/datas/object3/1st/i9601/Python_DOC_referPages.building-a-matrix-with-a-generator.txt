Natural Text
I have a list:I want my output to be:I wrote this function and it works fine: But this doesn't scale well - as my list could have up to 100's of values and I don't want to keep adding the below line of code for each value in my list:I've never used generators before but it sounds like the solution would involve one. I've always tried a while loop, but it doesn't quite get me there as I run into the same issue.
Using two for loops we have to reset the sub_answer every time. This looks messy so maybe another option; can be found below:Removing a for loop for a list comprehension. Now we don't need sub_answer:l is scale able. We are iterating through the list and then appending to a new list that we created using a list comprehension which we are subtracting the each variable by going through the list again. If we change l to be l = [1,2,3,4,5,6,7] we get:As a note (3-1 is not -2... it's 2....)We used one list comprehension why not use two?!?!?!:If you don't want a for loop and just want to use list comprehension:gives the same result, but I think for loops are more readable if you are learning or on a team.
double list comprehension does it in one line:inner listcomp to create the inner lineouter listcomp to create rowsresult with your input:list comprehensions are highly optimized memory-wise (less reallocations) & CPU-wise (less instructions) so replacing your double loop + append with 2 nested list comprehensions like that will speed up your code a lot.
A short answer (shortest so far ^^) would be:This uses list comprehension.
You can use list comprehension with map() and operator like this:This is equivalent to:Explanation:For each item in l, we build a list [item]*len(l) and we use map() and operator to get the subtraction of these two lists. For the first element in l which is 1, we have:Then:Output:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
