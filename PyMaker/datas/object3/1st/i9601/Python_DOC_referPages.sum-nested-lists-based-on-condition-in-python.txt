Natural Text
I have a nested list looking like this:What I want to do is summing every integervalue in the sublist with another sublist if city and year are equal. I first thought of a dictionary with city and year as key, but it caused problems sorting it.Then I had: {('Vienna','2012'):[890,503,70],('Bern','2013'):[800,1150,768],...}I also tried something like this:[sum(x) for x in zip(*list) if x[0] == x[0]] but of course it did not work.Can I do something like this with a nested list to so sorting it by city and year would be easier? 
You could construct a result dict where key is tuple of first two items in the original lists and value is list of numbers. Every time you add value to dict you could use get to either return existing element or given default value, in this case empty list. Once you have the existing list and list to add you can use zip_longest with fillvalue to get numbers to sum from both lists. zip_longest returns tuples of length 2 containing one number from each list. In case one list is longer than other fillvalue is used as default so this will also work in case lists have different lengths. Finally list comprehension could used to sum each item for a new value:Output:If you want to sort the cities alphabetically and years latest first you could pass custom key to sorted:Output:
You should maintain a dictionary as you have outlined in the question. Something like this will help,
One way is to split the list of lists into a dict by the key you want (the city and year). Also the defaultdict helps squashing all distances into a flat listNow dct has the integers grouped by the city and year:And you can just sum them:
The solution using itertools.groupby and operator.itemgetter functions:The output:
out: 


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
