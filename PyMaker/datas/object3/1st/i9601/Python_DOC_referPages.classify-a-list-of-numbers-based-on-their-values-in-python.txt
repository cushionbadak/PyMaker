Natural Text
I am trying to write a loop in python that reads a text file of 50 numbers and sorts through the numbers and assigns them to different variables based on their values. I would like variable A to contain values less than 2, variable B to to contain values from 2 to 2.1, Variable c to contain values from 2.1 to 2.25, variable d to contain values from 2.25 to 2.5, and variable e to contain values from 2.25 to 2.5. My code so far looks like this: However, when I try to run this I get an invalid syntax error. I am new to python and programming and would appreciate any help!
You need to initialize variables a, b, c, d, and e as list:I would suggest reading the official Python tutorial, so you get an idea of Python syntax first.
When you get the hang of the above beginner friendly solutions, consider taking a look at bisect.You can solve your problem by doing a little semantic modification of the linked example.grade() , for a given number will ask, at what index would it go if it were to be inserted in breakpoints? And it will return marks[index]. For example if you gave it a score of 1, it would calculate that 1 belongs in index 0 of breakpoints before 2, so it will return marks[0]=a.the print statement will give you a list of tuples containing (letter mark, value that mark is assigned to).As I said this is more advanced and you should try to get to understand it after you grasped basic concepts, but it's worth taking a look at to bend your mind a little.
Don't forget to instantiate the lists, and the line if i<2 displacementval()=a(): doesn't mean anything.
There's a couple of issues here, but I'll try my best to walk you through them.First off, you said you wanted 5 variables: a, b, c, d, e, and that each should hold a list of values. To do this we must first declare each as a list, which, in Python is just a collection of values. This looks like this:Next during our for loop, we need to compare the values and sort them accordingly, like this:A little explanation: when we use a_list.append(a_value) we are adding that value on to the end of the list. Also, our if statement just checks if something is true, and then moves onto the next elif. So if a value is not < 2, it will go to the next and check if it's less than 2.1, if it is it must be greater than or equal to 2 and less than 2.1, and so on.Hopefully this helps!


Answer URL
https://docs.python.org/3/tutorial/introduction.html#lists
https://docs.python.org/3/tutorial/index.html
