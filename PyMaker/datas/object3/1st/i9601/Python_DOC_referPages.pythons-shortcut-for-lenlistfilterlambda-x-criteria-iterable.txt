Natural Text
Imagine you need to count number of iterable elements that satisfy some criteria - is there is a more good looking way to do this?It's python3 of course. But 2 is fine too.I can't find anything suitable in collections or itertools python modules or in built-ins.

Try the quantify recipe from itertools recipes:more_itertools already implements this recipe, so it is even more compact:For comparison:PerformanceA: control - author's exampleB: faster - quantify, itertools recipe C: slowest - generator expression, uses more_itertools.ilen to evaluateD: fastest - list comprehensionE: faster - generator expression, sum(1 for _ in ...) idiomWhile more_itertools.quantify is concise, the idiomic generator expression is on par if not faster. However, classic list comprehensions (first suggested by @宏杰李) are the best performers.See also a thread on extending len() to generators.
List comprehensions provide a concise way to create lists. Common  applications are to make new lists where each element is the result of  some operations applied to each member of another sequence or  iterable, or to create a subsequence of those elements that satisfy a  certain condition.Note that this creates (or overwrites) a variable named x that still  exists after the loop completes. We can calculate the list of squares  without any side effects using:or, equivalently:than just put you conditon in the the if statment like thisyou got a list of elements which meet the condition, and you can use len(lsit_) to count the elementsList Comprehension Document


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
