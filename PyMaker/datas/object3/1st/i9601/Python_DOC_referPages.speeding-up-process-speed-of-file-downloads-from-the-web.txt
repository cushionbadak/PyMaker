Natural Text
I'm writing a program that has to download a bunch of files from the web before it can even run, so I created a function that will download all the files and "initialize" the program called init_program, how it works is it runs through a couple dicts that have urls to a gistfiles on github. It pulls the urls and uses urllib2 to download them. I won't be able to add all the files but you can try it out by cloning the repo here. Here's the function that will create the files from the gists:This works, yes, however it's extremely slow, due to the size of the files, each file has at least 100,000 lines in it. How can I speed up this function to make it faster and more user friendly?
Some weeks ago I faced a similar situation where it was needed to download many huge files but all simple pure Python solutions that I found was not good enough in terms of download optimization. So I found Axel â€” Light command line download accelerator for Linux and UnixWhat is Axel?Axel tries to accelerate the downloading process by using multiple  connections for one file, similar to DownThemAll and other famous  programs. It can also use multiple mirrors for one download.Using Axel, you will get files faster from Internet. So, Axel can  speed up a download up to 60% (approximately, according to some  tests).As axel is written in C and there's no C extension for Python, so I used the subprocess module to execute him externally and works perfectly for me. You can do something like this:You can also parse the progress of each download parsing the output of the stdout. 
You're blocking whilst you wait for each download. So the total time is the sum of the round trip time for each download. Your code will likely spend a lot of time waiting for the network traffic. One way to improve this is not to block whilst you wait for each response. You can do this in several ways. For example by handing off each request to a separate thread (or process), or by using an event loop and coroutines. Read up on the threading and asyncio modules.


Answer URL
https://docs.python.org/3/library/subprocess.html
