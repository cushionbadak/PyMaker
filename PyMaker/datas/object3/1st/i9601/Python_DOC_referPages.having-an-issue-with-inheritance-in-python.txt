Natural Text
I'm having trouble with inheritance between classes. The class I'm struggling with is the vulture class which is a subclass of the bird class which is a subclass of the critter class. The bird and critter class, and the main that they're being run through, all work fine. But when I try to use the vulture class, I get an error:I'm not sure what I did wrong, and I'm hoping someone could help me find my mistake.Vulture class:Bird class:I don't think that the critter class itself will be relevant in this, and it's pretty big, so I'll leave that off the post unless someone thinks it might help to have.
See this section on Private Variables in the Python documentation.Python treats instance variables that start with double-underscores specially, mangling the name to keep them private to the class (even private from the parent class).  When you call a Bird method on your Vulture class, the Bird method references to self.__direction are actually referencing the self._Bird__direction variable which is distinct from the self._Vulture__direction variable that you initialize in your Vulture __init__ constructor.In particular:Edit: As @ShadowRanger points out, the convention in Python is to prefix with a single underscore those instance variables or methods that are intended to be private to the implementation but freely shared between superclasses and subclasses (i.e., similar to protected in Java or C++).  There's no special treatment of such variables by the language, it's just a signal to users of the class that they shouldn't "mess" with those instance variables or methods.This is probably what you intended for __direction, __in_a_row, and maybe even __hungry (though that last one doesn't appear in the Bird class).  If you change all these double underscore prefixes to single underscores, that should clear up your problem.


Answer URL
https://docs.python.org/3/tutorial/classes.html#private-variables
