Natural Text
I encountered a (in my opinion) extremely strange behavior, when looping through a list of lists. It is very difficult to explain, but here is an example code:When executing this, I get: This is very strange for me, as the list which is appended is a copy of lis,but lis is appended as well. I would assume this list to be untouched.For example doing the same with a list of integers the following happens:Output:Just as expected num is not touched by the manipulation of num_copy.If somebody could explain why this is happening and how to avoid this, like how to disconnect the lis_copy from is, that would be great.Wow, I am amazed I did not encounter mayor problems before, without knowing this. I think I should review quiet some of my code. Anyway I thought this is somehow connected to the loop, this seems not to be the case, therefore I think the best explanation can be found here: How to clone or copy a list?
You could use copy.copy() or copy.deepcopy()to avoid this behavior:Output:Source: https://docs.python.org/2/library/copy.html
This is because Python lists (and dicts) are not copied to a new list, but the new list becomes a reference to that list. if you truly want to copy the list, use deepcopy
Case a:We have a pointer to a list, and inside the loop we have another pointer made that points to the inner list objects. Then a zero is appended to each object.Case b:We have a pointer to a list, and inside the loop we have another pointer made that points to the inner integers. The difference is that in this case the pointer is changed to then point to a zero object rather than the list elements.


Answer URL
https://docs.python.org/3/library/copy.html
