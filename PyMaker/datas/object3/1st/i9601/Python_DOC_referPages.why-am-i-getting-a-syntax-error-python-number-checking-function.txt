Natural Text
I've written this function in Python, which is designed to check if any list element is a number, and return that list element if it is. This is the code:Whenever I try to run it I get a syntax error saying that the colon at the end of the if statement is an 'unexpected token', and every item in the last two lines of the if statement gives the same unexpected token error. I've checked the indentation and I can't see anything wrong with it, what am I missing? Thanks.
You just have to indend the code of your function and fix the if isinstance(list[x], (int, float) == True): part and close the paranthesis of your first print statement.If you are interested in improving your code, remove the == True part, as has been stated in the comments as well. And from your question I assume you want to return fals, if true_or_false is False or num otherwise.If you add a breakstatement in the loop, the loop will be exited when you have found the first number. So your computer does not need to loop through the complete list and this can save you some execution time.I also expect, your x += 1 statement is not what you want to do. The for ... in range ... loop will increase your x in each cycle. That is why x += 1 will make your code skip every second list element. You also will not need to declare x first.Concering your question about the unnecessary == True part:The if statement is working like the following pseudo code.So, if you add a == True, python would check it like so:which is the same as:
Here is a solution using a list comprehension.  It checks each element against the Number abstract base class.  It will return a list of numbers, since there might be more than 1 numeric elelement.example:
Python is tab-sensitive and intolerant of errors in this regard. I'm also seeing an instance of an unmatched parenthesis on line 6. Try the following and you might get a more informative error on what to fix next:It's a bit ambiguous how some of that should be indented because I can't tell what you're trying to do.If you're trying to return to values, consider returning a list or a dictionary containing the values.


Answer URL
https://docs.python.org/3/library/numbers.html
