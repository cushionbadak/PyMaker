Natural Text
I need to compare two lists in order to create a new list of specific elements found in one list but not in the other. For example:I want to loop through list_1 and append to main_list all the elements from list_2 that are not found in list_1.The result should be:How can I do it with python?
(1) You can use NumPy's setdiff1d. From the response of Chinny84, if you are concerned with the unique elements, then:(2) Otherwise, use main_list = np.setdiff1d(list_2,list_1, assume_unique=True)Both answers will give you ["f", "m"]. However, if list_2 = ["a", "f", "c", "m", "m"], answer (1) yields ["f", "m"] BUT answer (2) gives ["f", "m", "m"] (because the uniqueness of each element in list_2 is immaterial).pythonnumpy
You can use sets:Output:Per @JonClements' comment, here is a tidier version:
Not sure why the above explanations are so complicated when you have native methods available:
Use a list comprehension like this:Output:
If you want a one-liner solution (ignoring imports) that only requires O(max(n, m)) work for inputs of length n and m, not O(n * m) work, you can do so with the itertools module:This takes advantage of the functional functions taking a callback function on construction, allowing it to create the callback once and reuse it for every element without needing to store it somewhere (because filterfalse stores it internally); list comprehensions and generator expressions can do this, but it's ugly.†That gets the same results in a single line as:with the speed of:Of course, if the comparisons are intended to be positional, so:should produce:(because value in list_2 has a match at the same index in list_1), you should definitely go with Patrick's answer, which involves no temporary lists or sets (even with sets being roughly O(1), they have a higher "constant" factor per check than simple equality checks) and involves O(min(n, m)) work, less than any other answer, and if your problem is position sensitive, is the only correct solution when matching elements appear at mismatched offsets.†: The way to do the same thing with a list comprehension as a one-liner would be to abuse nested looping to create and cache value(s) in the "outermost" loop, e.g.:which also gives a minor performance benefit on Python 3 (because now set_1 is locally scoped in the comprehension code, rather than looked up from nested scope for each check; on Python 2 that doesn't matter, because Python 2 doesn't use closures for list comprehensions; they operate in the same scope they're used in).
output:
I would zip the lists together to compare them element by element.
If the number of occurences should be taken into account you probably need to use something like collections.Counter:As promised this can also handle differing number of occurences as "difference":


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/library/itertools.html
