Natural Text
I'm trying to subclass the IntEnum to start members' value at a certain value and then automatically set the value for subsequent members.  This is my class:As shown above the comparison between the members is not correct.  When printing out Abc.dict, I noticed that it _value2member_map_ does not look correct either.Notice how '_value2member_map_' has key 0 instead of the expected values 100 and 101.  I must be missing something in the init function, but I could not figure out how to properly do what I intended.  Any help is appreciated.Thank you.
First, there's a more idiomatic—and dead simple—way to do what you seem to be trying to do:Or, given that you're putting 100 and 101 in as comments anyway, live code is always better than comments:The fact that you're not doing either of those is a signal to the reader that you're probably doing to do something more complicated. Except that, as far as I can tell, you aren't, so this is misleading.Plus, you're combining two patterns that have directly opposite connotations: as the docs say, using the () idiom "signifies to the user that these values are not important", but using IntEnum obviously means that the numeric values of these enumeration constants are not just important but the whole point of them.Not only that, but the user has to read through your method code to figure out what those important numeric values are, instead of just immediately reading them off.Anyway, if you want to get this to work, the problem is that replacing _value_ after initialization isn't documented to do any good, and in fact it doesn't. What you want to override is __new__, not __init__, as in the auto-numbering example in the docs. But there are two differences here (both related to the fact that you're using IntEnum instead of Enum):You cannot call object.__new__, because an IntEnum is an int, and object.__new__ can't be used on instances of builtin types like int. You can figure out the right base class dynamically from looking through cls's mro, or you can just hardcode int here.You don't need an intermediate base class here to do the work. (You might still want one if you were going to create multiple auto-numbered IntEnums, of course.)So:


Answer URL
https://docs.python.org/3/library/enum.html#omitting-values
https://docs.python.org/3/library/enum.html#using-a-custom-new
