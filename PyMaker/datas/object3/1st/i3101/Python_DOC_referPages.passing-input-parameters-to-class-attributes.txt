Natural Text
I'm devloping a module that works with another module. The other module requires class attributes to be set before the __init__ method (let's work under the assumption that the behavior of this other module cannot be changed). These class attributes (Signal in the example below) are derived partially from an object that comes from my code. The method shown below is a disaster for many reasons. For example, my_obj1 and my_obj2 are not guaranteed to exist; the import in the other module will fail in this case. There could be a need to create 2 different instances of OtherModuleVodoo1 using 2 different instances from my code (my_obj).This is a skeleton of the code to explain:Question:Is there a way to "input" parameters to the construction of a class (not to the initialization of a class instance)?What I tried and why each did not work.Metaclasses. These feel close to the right approach but I wasn't able to get it to work. __new__ but this doesn't populate the namespace within the class definition (before the __init__)Setting my_obj1 = None until an OtherModuleVodoo1 instance is needed and then modifying the class attribute before instantiating an object:An example of attempt 3:However, here the output is:I anticipate responses that focus completely on changing the approach. That is warranted. However, my immediate question is how to best band-aid what I have. 
This may need some massaging to make it work with your code, but you can use __init_subclass__  in a parent class to accept arguments to class creation.  This was introduced in Python 3.6You could also make Voodoo a Device subclass to clean up the signatures of your subclasses.
Example with a metaclass in Python 3:The metaclass takes action when the classes A and B are created (not instantiated).


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__init_subclass__
