Natural Text
I am using Python 3.6. I wrote following code, it's a for loop:Edit: I made a mistake when I wrote var l down, so I re-type it here. Thanks for @Ender Look ！！So, the result is what I want:{'a': '\t1\t2\t3'}Then I refactor above code as comprehension:dict2 = {}dict2 = {i[0]: dict2.get(i[0], '') + '\t' + i[1] for i in l}print(dict2)I though they should return same output. But the dict2 is:{'a': '\t3'}I want to know what's the matter with my dict comprehension? Thanks a lot!
You don't necessarily need to use a comprehension here. You can make use of defaultdict from collections:
Your dictionary comprehension doesn't work because it's use .get on itself.Until the end of the whole dictionary comprehension, this new dictionary isn't assigned to your actual dict2 variable. So all the times your comprehension tries to retrieve the value from dict2.get(...) it always executes that function from the empty dictionary dict2 = {}.Sadly, I don't know (and I don't think it exists) a way to use .get on a dictionary comprehension about itself, because the variable dict2 isn't updated on "real time" (it wait until the end the comprehension). Or at least that I have understood, my humble knowledge isn't perfect.
Yes, you can do it as a single dict comprehension.You shouldn't.Note how we had to create a reference to an inner dict d anyway, since your algorithm has to look things up in the dict as it's being constructed. What is the outer comprehension even for? And we're throwing away all but the last element of the inner list comp.It's much clearer to use a normal for loop like this,Use the right tool for the job.


Answer URL
https://docs.python.org/3/library/collections.html#defaultdict-examples
