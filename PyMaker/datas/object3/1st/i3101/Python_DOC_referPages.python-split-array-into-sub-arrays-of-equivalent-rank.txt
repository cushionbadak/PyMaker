Natural Text
EDITED:I have an array of n sorted values.I want to create m sub-arrays so that my best element goes into my first sub-array, my second element goes into my second sub array, etc, and my n+1-th best element goes into my first sub array.If I have just two arrays its easy but if I want more than two sub-arrays I don't know how to do it.for example if I have an initial array:And I want 3 sub-arrays I should get:What's the most efficient/pythonic way of doing this?
FOR X SUBLISTS :One possibility would be to do :You can then unpack the sub-lists stored in sublist.For example : will grant you the expected output.This is the trivial solution. Their is probably something more pythonic in itertools or an other lib.If you don't understand how this code works , take a look at the documentation of a slice. 
For 2 arraysFor 3 arraysWhy this worksiter(a) creates an iterator on the list a.  When you iterate through it, the elements get used up and eventually the iterator becomes exhausted.[iter(a)] * 2 creates a list that looks like this i = iter(a); [i, i].  Notice that the same iterator shows up twice.  That means that when I take an element from the first i, I also take it from the second i because they point to the same iterator.So! when I use zip on the unpacked list of the same iterator zip(*[iter(a)] * 2), As I pair things up, I'm pulling from the same iterator and therefore naturally exhausting them in the order we want.I then use another zip to transpose the results and then map with list to make them lists instead of tuples.

Below will give the desired answer,


Answer URL
https://docs.python.org/3/library/functions.html#slice
https://docs.python.org/3/library/functions.html#slice
