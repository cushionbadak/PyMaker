Natural Text
I made a small program and tested that it does keep the order. However, I still want to be sure that deepcopy is guaranteed to do that.The output of this program is 
In CPython, it appears the order is preserved. I drew that conclusion from inspecting the implementation of deepcopy. In this case, it will find either the __reduce_ex__ or __reduce__ method on your OrderedDict object to use for pickling:(https://github.com/python/cpython/blob/master/Lib/copy.py#L159-L161)Those return odict_iterator objects for constructing, so order would be preserved:
Correctly implemented copying via copy.deepcopy should produce an object that is equal to the original (assuming equality is defined at all). While no, there is no explicit documented guarantees regarding OrderedDict and copy.deepcopy specifically, if the ordering of OrderedDict changed in the copy, it would not be equal to the original OrderedDict, which would violate the expectation of copy-equality in a big way.No firm guarantee can truly be given, since the __deepcopy__ method of a key or a value could do something truly terrible (modifying the source OrderedDict for instance), but aside from pathological cases, you can rely on copy.deepcopy to preserve ordering.
deepcopy of an object should return an object of the same type. so an ordereddict returned as a copy should remain ordered?EDIT - This is not completely correct answer. Please look at Greg's comment below.


Answer URL
https://docs.python.org/3/library/pickle.html#object.__reduce__
