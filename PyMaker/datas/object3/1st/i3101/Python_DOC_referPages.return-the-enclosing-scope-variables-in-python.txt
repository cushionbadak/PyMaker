Natural Text
GivenI have a function, scope, which can be declared inside an enclosing namespace, i.e. a module, class or function.  Variables of interest are located immediately outside this function.How do I generically access the variables/parameters and their values declared within any enclosing namespace?ExampleSample pseudo-code for capturing function variables (b) and parameters (c):Expected OutputAttemptsI've had moderate success at the module-level, e.g. a = 1:I can also access class attributes from methods, e.g. b = 2:I can only partially access variables and parameters inside an enclosing function:While __code__.co_varnames successfully gives the enclosing variables (excluding a), I am interested the values as well (e.g. {'c': 3, 'b': 2}).I have made many unmentioned attempts including inspect functions, other code object methods, dir(), and object special methods.  My preference is to implement more generic and idiomatic code for detecting variables in an enclosing namespace, although any advice is appreciated.  I am also aware of Python idioms and the nature of this question.  I am still intrigued by its possibilities, and I thank anyone willing to stretch beyond the norm.
It's kinda cheating, butworks. (It's cheating because the default argument is evaluated at definition time by the defining code, thus locals() is run in the enclosing scope and thus it's not actually the scope function reaching out to the enclosing scope.)Note that the directory returned by locals() may or may not change when the corresponding scope is modified after the call. If you want consistent behavior across Python implementations (or even across your different use-cases), make a deep copy either in the default argument or in the body of the scope function.
While python will give you ways to do this, you REALLY don't want to.  Function/classes/etc should not expose their internals to the calling code, as that breaks abstraction and makes code fragile.  Functions should take in arguments and return output values, but the internal algorithm and especially variable names shouldn't be exposed.


Answer URL
https://docs.python.org/3/library/functions.html#locals
