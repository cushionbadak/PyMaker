Natural Text
This question already has an answer here:Why isn't this a syntax error in python?                    3 answers                Inputting the command 0xbin() returns False:Why does that happen? This syntax should have no meaning whatsoever. Functions cannot start with 0, there are no "i" and "n" in hex, and the bin function must have some arguments.
Python seems to interpret 0xbin() as 0xb in (), meaning is eleven in an empty tuple.The answer is no, therefore False.
If you disassemble the code, you'll see that Yself's answer, which mentions that 0xbin() is interpreted as 0xb in (), is confirmed:
You can use Python's own tokenizer to check!This prints the tokens in your string, separated by spaces. In this case, the result will be:In other words, it returns False because the number 11 (0xb) is not in the empty tuple (()).(Thanks to Roman Odaisky for suggesting the use of tokenize in the comments!)EDIT: To explain the code a bit more thoroughly: the tokenize function expects input in a bit of a weird format, so io.BytesIO(line).readline is a function that turns a sequence of bytes into something tokenize can read. tokenize then tokenizes it and returns a series of namedtuples; we take the string representing each one and join them together with spaces. The type != 59 part is used to ignore the encoding specifier that would otherwise show up at the beginning.
You can use the AST module to get the abstract syntax tree of the expression:See the abstract grammar for how to interpret the expression, but tl;dr: Num(n=11) is the 0xb part, and Tuple(elts=[], ...) hints towards an empty tuple rather than a function call.


Answer URL
https://docs.python.org/3/library/ast.html
https://docs.python.org/3/library/tokenize.html
