Natural Text
I've got an array of (random) floating point numbers. I want to round each value up to a limit of an arbitrary grid. See the following example:This results in:How can I avoid the for loop? I'm sure there's some way using NumPy's array magic that I don't see right now.
If intervals is sorted, you can use np.searchsorted:searchsorted returns the index of the interval where the element belongs to:The default side='left' returns the smallest index of such interval and the result falls into the left open, right close scenario.
You can use Pandas cut():
Another option is:Essentially we build a mask that checks to see if the sample is greater than the interval (assumes it's already sorted as in your example). Then we sum along the first axis, which will add up a 1 for every interval that the value is greater than. The resultant sums are the indices in the intervals array.A non-NumPy solution using a list comprehension (obviously includes the for loop, but should be relatively efficient with the generator):
Did not run a check but:
If values is a 1D arrays with your values, you could do something like


Answer URL
https://docs.python.org/3/library/timeit.html
