Natural Text
I created two lists l1 and l2, but each one with a different creation method:But the output surprised me:The list created with a list comprehension is a bigger size in memory, but the two lists are identical in Python otherwise.Why is that? Is this some CPython internal thing, or some other explanation?
When you write [None] * 10, Python knows that it will need a list of exactly 10 objects, so it allocates exactly that.When you use a list comprehension, Python doesn't know how much it will need. So it gradually grows the list as elements are added. For each reallocation it allocates more room than is immediately needed, so that it doesn't have to reallocate for each element. The resulting list is likely to be somewhat bigger than needed.You can see this behavior when comparing lists created with similar sizes:You can see that the first method allocates just what is needed, while the second one grows periodically. In this example, it allocates enough for 16 elements, and had to reallocate when reaching the 17th.
As noted in this question the list-comprehension uses list.append under the hood, so it will call the list-resize method, which overallocates. To demonstrate this to yourself, you can actually use the dis dissasembler:Notice the LIST_APPEND opcode in the disassembly of the <listcomp> code object. From the docs:LIST_APPEND(i) Calls list.append(TOS[-i], TOS). Used to implement list comprehensions.Now, for the list-repetition operation, we have a hint about what is going on if we consider:So, it seems to be able to exactly allocate the size. Looking at the source code, we see this is exactly what happens:Namely, here: size = Py_SIZE(a) * n;. The rest of the functions simply fills the array.
None is a block of memory, but it is not a pre-specified size. In addition to that, there is some extra spacing in an array between array elements. You can see this yourself by running:Which does not total the size of l2, but rather is less.And this is much greater than one tenth of the size of l1.Your numbers should vary depending on both the details of your operating system and the details of current memory usage in your operating system. The size of [None] can never be bigger than the available adjacent memory where the variable is set to be stored, and the variable may have to be moved if it is later dynamically allocated to be larger. 


Answer URL
https://docs.python.org/3/library/dis.html#opcode-LIST_APPEND
https://docs.python.org/3/library/sys.html#sys.getsizeof
