Natural Text
I understand that the __del__ function of a Python class is not treated in the way that many people might expect: as a destructor.I also understand that there are more 'pythonic' and arguably more elegant ways to tidy up, particularly with use of the with construct.However, when writing code that may be used by an audience less versed in pythonic ways, when cleanup is important, is there an elegant way I can simply get __del__ to work as a destructor reliably, without interfering with python's natural use of __del__?The expectation that __del__ behave as a destructor doesn't seem unreasonable and at the same time is quite common.  So I'm simply wondering if there is an elegant way to make it work as per that expectation - disregarding the many debates that can be had over the merits of how pythonic it is.
If you understand all that, why not do it in the Pythonic way? Compare another class where cleanup is important: tempfile.TemporaryDirectory.How do they do this? Here's the relevant bit:weakref.finalize will trigger _cleanup when the object is garbage-collected, or at the end of the program if it's still around. We can keep the finaliser around so that we can explicitly kill the object (using detach) and mark it as dead so the finaliser is not called (when we want to manually handle the cleanup).If you want to support the context usage with with, it is trivial to add __enter__ and __exit__ methods, just invoke cleanup in __exit__ ("manual cleanup" as discussed above).
This is a pattern I have been employing that achieves this using the atexit python module.When pasted into a python command prompt, this is the total output:


Answer URL
https://docs.python.org/3/library/atexit.html
https://docs.python.org/3/library/weakref.html#weakref.finalize
