Natural Text
This question already has an answer here:Accessing dict_keys element by index in Python3                    4 answers                Imagine I have a dict like this:The dict contains only one key value.I am trying to get key from this dict, I tried d.keys()[0] but it returns IndexError, I tried this:It works just fine but I think it is not a good way of doing this because it creates a new list and then get it first index.Is there a better way to do this? I want to get the value too. 
If you know (or expect) there is exactly one key / value pair then you could use unpacking to get the key and the value. eg.You can take this one step further and unpack the key / value pair too.Of course this throws an error if the dictionary has multiple key / value pairs. But then this is useful. Dictionaries are unordered pre python 3.7 (dict is ordered in CPython 3.6, but it's an implementation detail), so doing list(d.items())[0] can give inconsistent results. Even in 3.7+ the ordering is over insertion, not any natural ordering of the keys, so you could still get surprising results.
There is some information for you below, but I believe that you don't fully understand dictionaries. They are unsorted, meaning that the list created will be in random order, so indexing will return unpredictable answers.Since Python 3, d.keys() no longer returns a list, and instead returns a dictionary object which doesn't support indexing and subsequently would return IndexError. Unfortunately, you will simply have to use list(). If the option is available (i.e. You are going to loop through the list), you could go:which means that you don't have to convert it to a list.
You can do it the silly way:Using at least gives you key and value at once (and throw on empty dicts). With dictionarys being "insert-ordered" from 3.7 onwards there might evolve some methods to "get the first" or "get the last" of it, but so far dict were unordered and indexing into them (or getting first/last) made no sense.


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.items
