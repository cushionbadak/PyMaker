Natural Text
I'm new to python. I want to create a script that will compare two file and output will contain text that matches.I want to compare file 1 to file 2. Both files contains email addresses on each line. 
The key to problems like this is to not think about "files", but about the data. What is a file? It's just an iterable of lines. So you're just asking how to find all values from one iterable that are also in another iterable. That's easy.The set constructor takes any iterable—like a file—and makes a set out of it.The intersection method takes any iterable—like a file—and gives you all elements that are in both the self set and that iterable. So, in this case, it's all elements that are in both the set of all lines of file1, and the iterable of all lines of file2.Here's an example to show it working:file1:file2:code:This does of course require reading the entirety of file1 into memory. If that's not possible, the most efficient alternative is probably to do an offline sort of both files, and then iterate them both.But a simpler solution would be to use a dbm (with meaningless values) as an on-disk set. Here's an implementation I slapped together. It requires Python 3.3+, likely has problems on Windows, only handles str elements, and only supports the minimal API of collections.abc.MutableSet plus intersection; if you need older versions, portability, different key types, better error handling, etc., it may take more than 3 minutes. Anyway:Any on-disk solution will obviously be significantly slower for mid-sized files, but when you get to giant files that either wouldn't fit in memory or, worse, would fit but only by throwing your whole computer into swap hell, it obviously wins.
To find the difference:To show inverted difference just add if:


Answer URL
