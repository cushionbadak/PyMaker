Natural Text
I wrote the following code:I would like to know if there is any nicer/simpler/shorter way to write the code above? If yes, please do not use difficult functions (etc.) because I am still a beginner and will not understand it.
I believe you are trying to append items from initial_list to the nested list values in lists until all value initial_list are used, cycling over lists from the start if there are fewer nested lists than initial values to append.Use zip() to pair up nested lists with initial_list items:The itertools.cycle() function here ensures that all values from initial_list are used; zip() stops at the shortest list, which will always be initial_lists here.Demo with an initial list of 10 values (integers 0 through to 9) and a nested list with 4 empty sublists:Not using cycling would require you to keep a counter and append to lists[count % len(lists)]. The counter can be generated with the enumerate() function:
You can use:...instead of:Also, list_.pop(0) is slow.  Maybe you are looking for a http://docs.python.org/3/library/collections.html#collections.deque ?  It'll allow you to rapidly remove things from either end, but you won't be able to conveniently access (EG) the middle anymore.


Answer URL
