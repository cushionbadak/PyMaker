Natural Text
To do: Convert python to ythonpay (i.e. pick up a first letter, put it in the end and add 'ay' and make sure the user has not entered in the word numbers or alphanumeric word )result I got:1>> enter a word -> python2>> Enter valid word!
There are two fundamental issues with your code (and one stylistic issue).Usually you want functions to return something.  For example your intention is to take a word, move the first letter to the end of the word, and add "ay" ... in other words to render it in "Pig Latin."But you're print-ing the results rather than return-ing them.  You might think that using print returns a value (in the sense that it "returned" something to your screen or terminal).  But that's not what "return" means in computer programming.  The Python return statement is how your function returns a result to the rest of the program following any particular invocation (or "call to") your function.Here's the simplest function that would work:... that will take a "slice" of the word from a one character offset into the string all the way to the end of the string.  That's what [1:] means ... it describes a range of characters, how far to the start of the range and then how far to go to get up to (but not including) the end.  Then it adds the first character (which is "zero characters" from the beginning of the string), converts that to lower case (which is harmless for all characters, and only affects capital letters) and then it adds the literal string "ay" ... and it takes all of that and returns it.The other issue with your code is that you're calling string methods in a confused way.  word.alnum() will return True only if all the characters are alphanumeric and word.isdigit() will return True only if all of the characters are numeric.  That's the same as just calling word.isdigit() since digits are a proper subset of the alphanumeric character set.  In other words the only strings that will pass your code will be those which contain no letters (or other characters); clearly not what you intended.You probably would prefer to check that the string consists entirely of alphabetic characters:This leaves you with the question of what you should do with an invalid argument (value passed to your function's "word" parameter by the caller).You could print an error message.  But that's consider poor programming practice.  You could return some special value such as Python's None value; but then code that calls your function must either check the results every time, or results can cause some other error far removed from where your function was called (where this non-string value was returned).You can also raise an exception:... note that I don't need to explicitly spell out else in this case; the control flow only reaches that statement if I didn't return a value, only when it's an error.  Any other time the control flow returns to the calling code (the part of the program that called my pigify() function).Another thing I could do is decide that pigify() simply returns anything that doesn't look like a "word" exactly as it was passed:... here I could just return word without the else: as it did before with the raise statement.  But I personally think that looks wrong; so I've explicitly spelled out the else: clause purely for stylistic reasons.Mostly you want your program to be composed of functions (or objects with methods) that work with manipulate the data, and then a smaller body of code (possibly functions or object and their methods) which then "render" the results of those manipulations.  Any time you're writing a function which manipulations or transforms data and writes those results to the screen or into a web page, or out to a file or database, you should pause and reconsider your design.  The transformative/manipulations and and computations might be re-useable while the code which writes results is typically quite specific.  So interleaving one with the other is usually a bad decision.
The str.isdigit() and str.isalnum() methods only return true if all of the characters match the criteria.  Your test is written so that you want to detect whether any of the characters match the criteria:So you can amend the code to start with something like this:FWIW, str.isalpha() would be easier to use because digits are already excluded.
In your code, you have problem with isalnum() which returns true if string contains only alphabets, only numbers or contains both alphabets and numbers so you can try to match if string only contains alphabets and execute your code as follow:


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.isdigit
https://docs.python.org/3/library/stdtypes.html#str.isalnum
https://docs.python.org/3/library/stdtypes.html#str.isalpha
