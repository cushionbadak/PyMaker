Natural Text
I have read my materials, which tell that a python iterator must have both __iter__ and __next__ method, but an iterable just needs __iter__. I check a list and find it has no __next__ method. When using iter() on it, it will become an iterator. This means that iter() will add a __next__ method to a list to convert it to an iterator? If yes, how does this happen? 
No. iter returns an iterator, it does not convert the list into an iterator. It doesn't modify the list at all, and certainly, the list does  not get a __next__ method.Lists are iterables, not iterators. They implement a __iter__ method, thus they are iterable:But not __next__, thus they are not iterators:Iterators themselves are iterable, by definition, since they implement __iter__ as well. Consider:Most iterators should simply return themselves when you use iter on them:Indeed, this is a requirement of the iterator protocol: "Iterators are required to have an __iter__() method that returns the  iterator object itself so every iterator is also iterable and may be  used in most places where other iterables are accepted."Note, again, they are the same iterator:So an iterator implements __iter__ and __next__, an iterable just means that it implements __iter__. What is returned by __iter__ is an iterator, so that must implement __next__.


Answer URL
https://docs.python.org/3/glossary.html#term-iterator
https://docs.python.org/3/glossary.html#term-iterator
