Natural Text
Doing it for a homework,but don't get right results.I am trying to write a function which returns the maximum value from either a list or tuple or tuple containing a list.Facing difficulty in determining how to exactly loop through a tuple and if it has a list look into it,and when all's done,find the maximum value recursively. Read the for example for what I mean.For example, • max_val((5, (1,2), [[1],[2]])) returns 5.• max_val((5, (1,2), [[1],[9]])) returns 9.So far, I have tried the max and sorting t,but that does not give right answer.
(Disclaimer: as you mentioned in the question that this is a homework assignment, I strongly suggest you to first have a go solving the problem yourself, before "peeking" into the following solution (although there are many ways to do this). A good way to learn solving a complex problem is to first break it down into smaller "chunks", come up with some very simple inputs and expected outputs, followed by implementing your own codes. Use Google searches to find tips / hints. I'm putting my own solution here purely for the benefit of sparking inspirations. There may be more elegant / efficient way to do this.) Step 1: Break this problem into two smaller partsFor ease of understanding I'd break this down into two steps:Part 1: flatten the deeply nested tuple/list into a flatten list. I've found this recursive tuple/list deep flattening solution pretty easy to understand. If the input is an int, just return a list with that one int in it.Part 2: once we have a flatten list, use the max function to find the max integer of the flatten list. Step 2: Visualise sample inputs and expected outputsBefore even attempting implementing codes, I always find it beneficial to "visualise" some very simple example inputs and expected outputs. Let's visualise some scenarios. Scenario 1 - Input is an already flatten listinput: [1, 2, 3, 4, 5, 6]part 1 (deep flattening) output: [1, 2, 3, 4, 5, 6]part 2 (max element in list) output: 6 Scenario 2 - Input is an already flatten tupleinput: (1, 2, 3, 4, 5, 6)part 1 (deep flattening) output: [1, 2, 3, 4, 5, 6]part 2 (max element in list) output: 6 Scenario 3 - Input is a deeply nested listinput: [1, [2, [3, 4, 5, 6]]]part 1 (deep flattening) output: [1, 2, 3, 4, 5, 6]part 2 (max element in list) output: 6 Scenario 4 - Input is a deeply nested tupleinput: (1, (2, (3, 4, 5, 6)))part 1 (deep flattening) output: [1, 2, 3, 4, 5, 6]part 2 (max element in list) output: 6 Scenario 5 - Input is a deeply nested list/tuple combined. eg 1input: [1, (2, [3, 4, 5, 6])]part 1 (deep flattening) output: [1, 2, 3, 4, 5, 6]part 2 (max element in list) output: 6 Scenario 6 - Input is a deeply nested list/tuple combined. eg 2input: (1, [2, (3, 4, 5, 6)])part 1 (deep flattening) output: [1, 2, 3, 4, 5, 6]part 2 (max element in list) output: 6 Scenario 7 - Input is an integerinput: 6part 1 (deep flattening) output: [6]part 2 (max element in list) output: 6 Scenario 8 - (optional) Input is an empty listinput: []part 1 (deep flattening) output: []part 2 (max element in list) output: None Scenario 9 - (optional) Input is an empty tupleinput: ()part 1 (deep flattening) output: []part 2 (max element in list) output: None Step 3 - implement Part 1 (deep flattening)This is my code (works for some test case scenarios above. Tweak as needed to make it more robust). Step 4 - implement Part 2 (max element of a list)This is the ultimate code in question, using the deep_flatten helper function. Step 5 - do some testingDo some testings against the scenarios. print out the variables to check result is as expected.Scenario 1Scenario 2Scenario 3Scenario 4Scenario 5Scenario 6Scenario 7Scenario 8Scenario 9 Sample case as per the question:
Im not going to do your homework for you ... but ill give you a hint
One approach is to convert the tuple to a string first.
The main idea about this problem is think recursively:will return 5 and 9 respectively.


Answer URL
https://docs.python.org/3/library/functions.html#type
