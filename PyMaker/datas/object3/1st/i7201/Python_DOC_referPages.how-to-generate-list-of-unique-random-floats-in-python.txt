Natural Text
I know that there are easy ways to generate lists of unique random integers (e.g. random.sample(range(1, 100), 10)).I wonder whether there is some better way of generating a list of unique random floats, apart from writing a function that acts like a range, but accepts floats like this:Is there a better way to do this?
AnswerOne easy way is to keep a set of all random values seen so far and reselect if there is a repeat:NotesThis technique is how Python's own random.sample() is implemented.The function uses a set to track previous selections because searching a set is O(1) while searching a list is O(n).Computing the probability of a duplicate selection is equivalent to the famous Birthday Problem.  Given 2**53 distinct possible values from random(), duplicates are infrequent. On average, you can expect a duplicate float at about 120,000,000 samples.Variant:  Limited float rangeIf the population is limited to just a range of evenly spaced floats, then it is possible to use random.sample() directly.  The only requirement is that the population be a Sequence:Here is a example of choosing ten random samples without replacement from a range of 41 evenly spaced floats from 10.0 to 20.0.
If you need to guarantee uniqueness, it may be more efficient toTry and generate n random floats in [lo, hi] at once.If the length of the unique floats is not n, try and generate however many floats are still needed and continue accordingly until you have enough, as opposed to generating them 1-by-1 in a Python level loop checking against a set.If you can afford NumPy doing so with np.random.uniform can be a huge speed-up.If you cannot use NumPy, it still may be more efficient depending on your data needs to apply the same concept of checking for dupes afterwards, maintaining a set.Rough benchmarkExtreme degenerate case More "normal" case (with larger sample)
You can easily use your list of integers to generate floats:Check out this StackÂ Overflow question about generating random floats.If you want it to work with python2, add this import:
You could just use random.uniform(start, stop). With double precision floats, you can be relatively sure that they are unique if your set is small. If you want to generate a big number of random floats and need to avoid that you have a number twice, check before adding them to the list.However, if you are looking for a selection of specific numbers, this is not the solution.
or use uniform
As stated in the documentation Python has the random.random() function:Then you will get a float val as: 0.672807098390448So all you need to do is make a for loop and print out random.random():
more_itertools has a generic numeric_range that handles both integers and floats.


Answer URL
https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset
