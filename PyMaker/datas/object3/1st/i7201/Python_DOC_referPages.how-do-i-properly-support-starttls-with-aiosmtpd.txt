Natural Text
I have the following server taken almost directly from the aiosmtpd docs:However, when I start this server and try to send an email to it using swaks:It times out after 30s. If I remove the ssl_context=context from the server and -tls from the client then it sends the mail fine.Additionally, when I try to connect via telnet and just send EHLO whatever then the server actually closes the connection.What's the correct way to implement an aiosmtpd server that supports tls?
Building upon Wayne's own answer, here's how to create a STARTTLS server with aiosmtpd.1. Create an SSL contextFor testing, use the following command to generate a self-signed certificate for localhost:openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes -subj '/CN=localhost'Load it into Python using the ssl module:2. Pass SSL context to aiosmtpdCreate a subclass of aiosmtpd's Controller that passes this context as the tls_context to SMTP:3. Run itInstantiate this controller with a handler and start it. Here, I use aiosmtpd's own Debugging handler:4. Test itEither configure a local mail client to send to localhost:1025, or use swaks:swaks -tls -t test --server localhost:1025... or use openssl s_client to talk to the server after the initial STARTTLS command has been issued:openssl s_client -crlf -CAfile cert.pem -connect localhost:1025 -starttls smtpThe full codeThe code below additionally tests the server using swaks, and it also shows how to create a TLS-on-connect server (as in Wayne's answer).
I was close. I figured from the fact that I could connect via telnet, but EHLO hostname would disconnect that the server was trying to require a TLS connection ahead of time.When I examined swaks --help I found that there was a slightly different option that would probably do what I wanted:When I tried that, I still got an error:Through some of my perusal of the Python ssl documentation, I noticed the load_cert_chain method. It turned out that this was exactly what I needed. Following these instructions I generated a totally insecure self-signed certificate:Then I added this line:And now I'm able to send email. For the lazycurious, here's the entire server code:Which can be validated with:


Answer URL
https://docs.python.org/3/library/ssl.html#ssl.SSLContext.load_cert_chain
