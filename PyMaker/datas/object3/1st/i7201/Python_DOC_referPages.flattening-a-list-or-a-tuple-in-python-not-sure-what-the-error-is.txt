Natural Text
Here is the function that I've written to flatten a list or a tuple that looks something likewhen I doI expected to get a list but I instead getI am not really sure why this happens becausethis part of the code will retrieve the int inside the third element of the tuple which is [[1],[2]] by calling it recursively. What am I missing here?Thanks
You've assigned the built-in list to a list instance in your function, so the type check no longer works properly for list objects.You should use a different name for the accumulator list, say, lst:OTOH, you could do both checks at once using isinstance which also ensures that the objects you're running your checks against are actually types:
You masked the name list:type(i) is never going to be equal to [].Use a different name for your list:You also want to use isinstance() instead of type() with equality tests:this would have told you much earlier that you were not comparing with a type:The exception is thrown because [] is not a type.You could use a generator here to avoid the need to append or extend a new list object repeatedly. If you put the isinstance() type check outside the loop you can support non-sequences with the same function:


Answer URL
https://docs.python.org/3/library/functions.html#isinstance
