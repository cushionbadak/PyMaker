Natural Text
This question already has an answer here:Python: Numpy __deepcopy__ TypeError                    3 answers                The duplicate will answer what, but will not adequately answer why or why it is not mentioned in the docs even though it is required. Read on for more... There are two ways of making a deep copy of a numpy array. One way is using copy.deepcopy from the copy module. The other way is to call array.__deepcopy__ directly.From the docs:Used if copy.deepcopy is called on an array.The docs hint that the right way to call this function is without any argument. However....A TypeError is returned! But...And even...It appears this function requires an argument but that argument supposedly has no bearing on the returned copy. This argument is not mentioned in the documentation. Is it a doc bug? Why is it even passed in if it is ignored?
Python requires the __deepcopy__() method to take one argument memo (docs):In order for a class to define its own copy implementation, it can define special methods __copy__() and __deepcopy__(). The former is called to implement the shallow copy operation; no additional arguments are passed. The latter is called to implement the deep copy operation; it is passed one argument, the memo dictionary. If the __deepcopy__() implementation needs to make a deep copy of a component, it should call the deepcopy() function with the component as first argument and the memo dictionary as second argument.Its purpose is to keeping a “memo” dictionary of objects already copied during the current copying passThis prevents recursive loops during copying if objects contain reference cycles.I guess numpy does not need to use that argument because an array normally does not hold recursive references to other Python objects, so it is simply ignored.


Answer URL
https://docs.python.org/3/library/copy.html
