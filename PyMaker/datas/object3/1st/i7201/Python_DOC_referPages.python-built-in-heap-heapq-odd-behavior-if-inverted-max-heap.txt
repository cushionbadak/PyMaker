Natural Text
I'm trying to use the Python (2.0) built-in min-heap data structure from the heapq module (https://docs.python.org/3/library/heapq.html) to build a max-heap. To do that I simply use the negative of the numbers I need to push into my heap.Using this (max-heap version):I get something which doesn't look correct:The min-heap version instead looks fine:As you can see:What am I missing?I've checked other SE questions/answers (e.g., python topN max heap, use heapq or self implement?, What do I use for a max-heap implementation in Python?, etc.) but they don't mention this issue.
As @user2357112 already mentioned, it is a min-heap. There is nothing wrong with the output. The difference between the 2 inputs is that, in the first scenario you enter the data in sorted fashion and in the second scenario, you input the data in reverse sorted fashion. the min-heap property: the value of each node is greater than or equal  to the value of its parent, with the minimum-value element at the  root.Case 1 : Reverse Sorted Input = 10,9,8,7,6Case 2 : Sorted Input = 1,2,3,4,5If you are interested in how the heap is built and how it balances after every input, go to the following url. You can insert one element at a time and see it in action. https://www.cs.usfca.edu/~galles/JavascriptVisual/Heap.html
The invariant of a min-heap is that each node is less than either of its children; there is no implied ordering between the two children (and therefore, there can be many valid orderings of a given set of values; the only value that has an absolutely fixed position is the minimum one, at the root of the tree).  Note that this is true of your output:The fact that your other example ended up in completely sorted order is merely a coincidence, based on the different order in which items were inserted into the heap.


Answer URL
https://docs.python.org/3/library/heapq.html
