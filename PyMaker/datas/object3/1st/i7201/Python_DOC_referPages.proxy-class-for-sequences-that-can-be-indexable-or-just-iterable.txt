Natural Text
In python 3.x, I am trying to implement a class that would be a proxy for a sequence given as a parameter. The proxy also takes a function that is called on each element of the input sequence.What would be the correct way for the proxy class to implement the __getitem__, __iter__ and __len__ methods dynamically depending on their availability in the input sequence. Here is my attempt at doing this (I am calling my sequences "providers" and the function is a "transform"):However that fails because it seems that python bypasses __getattr__ when looking for __getitem__. What would be the correct way to do this ?As a bonus, would there be a way to do this while having my Proxy class inherit dynamically from collections.abc.Sequence or collections.abc.Iterable depending on the input sequence ?PS: I also thought about just implementing __getitem__ anyway and relying on catching TypeError when trying to call it on a non-indexable input sequence, but I would like to be able to check if my proxy class is indexable by looking for the presence of __getitem__ without having to explicitly call it with an index.
Just implement __getitem__ and __len__. It will fail with the appropriate error message if the input_provider doesn't implement these operations:Just as example:


Answer URL
https://docs.python.org/3/glossary.html#term-eafp
https://docs.python.org/3/glossary.html#term-lbyl
