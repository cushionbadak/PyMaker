Natural Text
This question already has an answer here:I am trying to make a function which return max from nested list?                    6 answers                Right now I'm stuck at a problem and can't seem to figure it out.I have a list/tuple, which can in turn contain many lists/tuples/ints. I need to find the maximum value out of the object, and hence I need to look into all levels inside the object. As an example, I have the item:I need to write a function which returns me 5, which is the max value inside the object. Few more examples:Function should return 7Function should return 6Function should return 6Edit 1:I did try this myself. This is how I thought to solve it.I used Python Tutor to see what is wrong with my code, and I know that every time I recursively call my function, the flatList variable is getting assigned back to an empty list, and hence, the flatList will only contain the element from the last recursive call, if I am guessing correctly. I also cannot create the flatList variable outside the function, as it is one of the requirements of the assignment that I do not create any global variables of my own.
Let’s try to tackle the problem together: You probably do know how to get the maximum value of a non-nested iterable (being it a list, tuple, or whatever). You can use the built-in max() function, or alternatively write your own if you may not use a built-in function for your task.We’ll assume for now that we have a max function (self-written or not) that accepts a non-nested iterable and returns the maximum, e.g:So we know how to solve this for the easiest case: non-nested iterables. Now let’s go one level up: We have an iterable of iterables, for example this:How do we get the maximum here? We first get the maximum for each sublist and then get the maximum of all calculated maximums. Something like this:So far so good. Now let’s assume that our list lst also contains single numbers, so it’s an uneven list:So when we loop through the items of the list, we need to either just take the number or calculate the maximum for the sublist:So now we have the ability to max an iterable that contains mixed values. Now what we need to do is make sure that this works for any level of nestedness. For this purpose, we use recursion: We start at the outermost list and iterate through its items. When the item is a number, we can just keep the number. When its an iterable, we calculate its maximum using our solution. Afterwards we get the maximum of all collected maximums:And that’s it! Let’s give it a try:
If you don't mind an external library you could use deepflatten from iteration_utilities (disclaimer: I'm the author) and pythons max function.A rough pure-python equivalent of deepflatten can be found in the linked documentation. It is:


Answer URL
https://docs.python.org/3/library/functions.html#max
