Natural Text
I'm in a conundrum to decide what's the best way to insert a unique identifier for every row within a database containing over 60 million rows (and this is just one such dump, with similar sized ones arriving every month). The table (which I later import into a python dictionary) looks like this right now:So far my strategy has been running the gamut on a random number concatenated with the deviceTimeStamp and then SHA-256 hashing it. (BTW, security is not an issue here, for the record. We're driving the rows into a mining engine, but as they are realtime IoT data, there are at times certain rows which have the same deviceTimeStamp. Also, deviceTimeStamp has milisecond information.)I run a loop and do the following (adding only relevant parts of the script): After doing this, I realized that it might be the case that we could have the same hex digest for different rows, which beats the purpose of having a unique ID column. Any ideas or recommendations? 
uuid.uuid4() will do.See uuid for more information.
Building upon comments above, I've created a unique identifier using uuid and then run a SHA-256 hex on it to obtain a (possibly) random number: 


Answer URL
https://docs.python.org/3/library/uuid.html
