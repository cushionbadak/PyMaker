Natural Text
This question already has an answer here:How to clone or copy a list?                    20 answers                Variable A assigned to variable B. When A changes, shouldn't A change too?                    2 answers                I'm using Python 3.xExecuted the below code and couldn't formulate a reason.  You can execute it at the below linkClick to RunI couldn't find a justification, any pointers to find the root cause or your findings on it if you had came across it will be helpful.Thanks
Here is what happens ... alist = [10,1000,100] means alist references to an object of type list.blist = alist means blist also points to the same object type as alist points i.e. a list.alist += [34] adds 34 to alist and resultant will be in alist. alist is still referencing to an object of type list.alist = 35 means you have changed the reference type of alist from list to a int whose value is 35 and not list anymore. Doing so doesn't impact the actual list hence blist displays list and alist displays 35.Use type(variable) to understand better, Check this... Sample Run
The statement alist += [35] is shorthand for alist.extend([35]). See the docs for extend.The variable alist is a reference to a list. This list will be appended with 35. Since the variable blist is a reference to the same list, the same happens there. When you assign 35 to the variable alist, what alist references changes. It now points to this value and blist still references the list.All the datastructures you create in your program are stored in the memory, and your variables are just references to those pieces of memory. Some operations will alter the data that is references in the memory, for example extend. Variable assignment will change what the variable points too.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html
