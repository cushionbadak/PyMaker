Natural Text
I am looking for a way to run a method every second, regardless of how long it takes to run.  In looking for help with that, I ran acrossRun certain code every n secondsand in trying it, found that it doesn't work correctly.  It appears to have the very problem I'm trying to avoid: drift.  I tried adding a "sleep(0.5)" after the print, and it does in fact slow down the loop, and the interval stays at the 1.003 (roughly) seconds.Is there a way to fix this, to do what I want?
Don't use a threading.Timer if you don't actually need a new thread each time; to run a function periodically sleep in a loop will do (possibly in a single separate thread). Whatever method you use to schedule the next execution, don't wait for the exact amount of time you use as interval - execution of the other statements take time, so the result is drift as you can see. Instead, write down the initial time in a variable, and at each iteration calculate the next time when you want to schedule execution and sleep for the difference between now and then. (of course you may refine it for better overall accuracy, but this at least should avoid drift) 
I'm pretty sure the problem with that code is that it takes Python some time (apparently around .3s) to execute the call to your function woof, instantiate a new threading.Timer object, and print the current time. So basically, after your first call to the function, and the creation of a threading.Timer, Python waits exactly 1s, then calls the function woof (a decisecond or so), creates a new Timer object (yet another decisecond at least), and finally prints the current time with some delay.The solution to actually run a program every second seems to be the Twisted library, as said on this other post, but I didn't really try it myself...Edit: I would mark the question as possible duplicate but I apparently don't have enough reputation to do that yet... If someone can be kind enough to do so with at least the link I provided, it would be cool :)


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor
