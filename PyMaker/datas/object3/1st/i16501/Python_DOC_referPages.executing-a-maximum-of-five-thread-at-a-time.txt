Natural Text
I have a list of X thread (potentially more than 100)I want to run no more than five at the same time.I came up with this :But the problem is that it wait that the 5 threads are finished,I could launch an other thread as soon as one of them has finished.Is there a way like event/listener in java to raise some kind offlag when a thread is finished?Thanks
The best way to do this is probably to use a Semaphore object. Create a Semaphore with an initial value of five then have your main thread (the one that controls the others) call the Semaphore's acquire() method (presumably in a loop) before starting a thread. This will block when five threads have been started.The threads should call the Semaphore's release() method when they are done, and this will wake up the main thread by allowing it's acquire() call to proceed, whereupon it will start another thread, and so on until there's nothing left to do.Once you have finished starting threads do be careful to join() with the final threads to ensure they terminate before exiting the main thread.A BoundedSemaphore would also allow you to detect errors where the thread was released more than it was acquired.
Use ThreadPoolExecutor from concurrent.futures library (it has been backported to Python 2.7).The usage is moreless as follows:Executor will run callable_which_gets_the_job_than(some_argument=foo) with foo values from bar. Each call will be in a separate thread, the number of threads running at the same time will not exceed 5.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html
