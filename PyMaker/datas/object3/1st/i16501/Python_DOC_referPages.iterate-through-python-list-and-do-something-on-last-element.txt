Natural Text
I'm looking for a pythonic way to iterate through a list and do something on the last (and only the last) element. There are two ways I can see to do this, of which I would guess the second is best:and However, I wonder if there is a way of doing it without calling len() on a list I'm already iterating over. I'm quite happy, by the way, to be told that this isn't something I should worry about. 
Here I just assume that you want to do something extra to the last item (the normal action will still be taken on it beforehand).  I also assume you aren't hitting any break statements (in that case else won't execute).  Of course, you don't really need else:should work too since the loop variable "leaks" into the enclosing scope and if there are breaks that you're worried about and you really are looping over a sequence, why not:
You're making up problems :) There really isn't any with your approach.If you want to loop, you can find the length. And then access the last thing. Or just do the loop, then do something with a_list[-1]. Fancy way, use for-else - you can google it. But then again, really, there is nothing wrong with your code.
You can use the else block of a for-loop:As you can see, an operation is performed on each element in the list but the last one undergoes an extra operation.Note too that the else block will only be run if the loop exits normally without encountering a break statement.  This behavior seems proper because, if a break statement was encountered, then the loop was explicitly exited and we are done with the list.
You can use this:to access last element
I would certainly prefer the second version of the two you present; index could cause problems if there are duplicates in the list and is an O(n) operation on every iteration, whereas len is O(1).Generally, though, as you want to do something additional (not different) to the last item, I would just make it a separate step after the for loop:This will work even if there is a break (unlike using else) and affects the last item in the list not the last item iterated over - this may or may not be desired behaviour.
Consider:vsIf you time these, you can see this is the fastest way:On my (iMac) machine:


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#the-for-statement
