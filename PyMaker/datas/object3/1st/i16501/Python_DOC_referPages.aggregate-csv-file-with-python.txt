Natural Text
My cross-tabulated CSV file looks like this:I would like to amend it so that it looks like this:Each country now sits on one row and the number of columns has been expanded (no cross-tab).I'm trying to do this in Python 3. Excel VBA is out because I was hitting the row limit with some of the larger CSV files.I suppose what I'm trying to do is an "aggregate" with an additional "group by" step. I've got as far as reading in the CSV file and calculating various values which may prove useful: number of unique countries(3), number of unique age groups(2),names and number of columns required for final output file(7).I'm looking to make the code as flexible as possible so that it can read in a file with x number of unique countries and y number of unique age groupings and z number of column variables. And the final file would contain a header row with y*z+1 columns and below this x number of rows.Hope this makes sense, any help/pointers would be appreciated.
I'm going to propose a pandas solution because otherwise you're reinventing the wheel, but there's no way around the fact that it takes a bit of getting used to.  The upside is that once you've picked it up operations like this become relatively straightforward.produces(where we could sort the columns if we really wanted to.)There's no point in copying out an entire tutorial here -- although you can read the reshaping tutorial here -- but I can at least give an overview of how this works.Step by step.  First, we read the csv file into a DataFrame (kind of like an excel sheet):where you can access the frame by rows, columns, etc.  For your purposes we can melt (unpivot) this data:So now we have the row labels we want (the countries) and information about the other columns, whatever they are, and the values.  You wanted the "Age" and whatever's in "Other" combined, so:and now all the hard work is done.  We simply have to call pivot to turn it:(Looks better on the screen.)  It's given us the extra "value" level, which you don't want, so let's drop that:And then we write it to csv:
The most obvious way to approach this is in two stages:Collect the data into a convenient data structure from the input CSV file.Use the collected data to write the output CSV file.It seems to me that the most convenient data structure to use is a defaultdict of dict objects, using the primary key (in this case, "Country") as the top-level key, and concatenations of the combining key (in this case "Age") and the additional keys as the keys for the second-level dicts:It'll also be necessary to keep track of the headers used - a set is probably the best choice for that.Using those data structures, the code would look something like this:Example use:Resulting out.csv file:


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
