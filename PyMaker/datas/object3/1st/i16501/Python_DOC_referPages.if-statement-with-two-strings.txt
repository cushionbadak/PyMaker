Natural Text
I'm just starting out learning Python and wanted some practice with if statements since I'm playing around with text-adventure games. I was trying to get a thing like this to work. For instance, if one would type "look at the floor" (or just "look floor"), where word1 would be 'look' and 'floor'.Perhaps there is an easy answer to this, and I've tried a few different ways, but can't seem to make it work. Thanks for any help!
You need to have an in membership test for each word:Of course, this quickly becomes tedious if you have many words.  In that case, you can use all and a generator expression:The above will test if each word in the tuple ('word1', 'word2', ...) can be found in answer.
Here is a more thorough explanation:Order of evaluation!You have to keep in mind that while some idiomatic constructs make sense in English (or any other language), they might not make sense in a programming language, even if it is valid syntax.For instance, let us consider the test expression your sample code:When you apply the rules for the order of evaluation, the sub-expression in parentheses ( ('word1' and 'word2')) is evaluated first. Because of the and operator, the result of this sub-expression is the right operand since the left operand evaluates to True. Re-inserting this value in your initial expression gives us this: 'word2' in answer. Therefore the test will always validate as long as the second word can be found in the answer.Edit: corrected boolean evaluation.
You can use all to make that happen:This will go through each word that you specified and check whether it's in answer. The built-in function all() will return True when that's the case for all checks that were performed, and False otherwise. In other words, it's only True when all checks are True.
The other answers are good, but I will try to explain what is wrong with your logic for you:According to the Python order of evaluation rules the components within the brackets of your if statement are evaluated first.Therefore your expression is effectively evaluated by the interpretter as:the value of temp above will be the result of logically anding two different strings together which doesn't really make a lot of sense. In this case, the first operand evaluates to True and the second operand is returned, if the first operand evaluated to False (such as an empty string) Python would return the first operand. Thus in your specific case, Python will just return the second string, so: Therefore the interpretter reads your code as:By writing:You make the comparisons you want to evaluate explicit so the interpretter can understand and doesn't give you weird results.


Answer URL
https://docs.python.org/3/library/functions.html#all
https://docs.python.org/3/reference/expressions.html#grammar-token-generator_expression
