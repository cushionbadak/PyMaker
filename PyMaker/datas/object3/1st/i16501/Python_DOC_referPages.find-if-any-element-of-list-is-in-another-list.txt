Natural Text
I have a master list, A, and secondary list, B.  A contains all of the elements of B and also contains additional elements.  I want to identify the values of A that do not occur in B.  For example:What I want is:If B contained only one element, say roads, I could do something to the effect of:But I am stuck if B has multiple elements, which it does.  I found the any() function, but am not sure why this wouldn't work:(I looked at some other answers, but couldn't find what I am looking for.  This has possibly been asked elsewhere.  If so, forgive me for asking it twice.)
You could also use sets by doing set(a) - set(b), but I believe this will be slightly slower.  Also, using sets also remove duplicate values in the result, which may or may not be what you want.  
Try list comprehension:
While the accepted answer is certainly the best for many purposes its algorithmic complexity is O(NÃ—M) where N and M are the lengths of A and B. In most case (that is when A and B are not overly long) this won't matter.But if you intend to process very long lists you will improve processing time by first converting B to a frozen set:The resulting complexity is O(N+M).


Answer URL
https://docs.python.org/3/library/stdtypes.html#frozenset
