Natural Text
I have a file called foobar (without .py extension). In the same directory I have another python file that tries to import it:But this only works if I rename the file to foobar.py. Is it possible to import a python module that doesn't have the .py extension?Update: the file has no extension because I also use it as a standalone script, and I don't want to type the .py extension to run it. Update2: I will go for the symlink solution mentioned below.
You can use the imp.load_source function (from the imp module), to load a module dynamically from a given file-system path.This SO discussion also shows some interesting options.
Like others have mentioned, you could use imp.load_source, but it will make your code more difficult to read.  I would really only recommend it if you need to import modules whose names or paths aren't known until run-time.What is your reason for not wanting to use the .py extension?  The most common case for not wanting to use the .py extension, is because the python script is also run as an executable, but you still want other modules to be able to import it.  If this is the case, it might be beneficial to move functionality into a .py file with a similar name, and then use foobar as a wrapper.
imp.load_source(module_name, path) should do or you can do the more verbose imp.load_module(module_name, file_handle, ...) route if you have a file handle instead
Here is a solution for Python 3.4+:Using spec_from_loader and explicitly specifying a SourceFileLoader will force the machinery to load the file as source, without trying to figure out the type of the file from the extension. This means that you can load the file even though it is not listed in importlib.machinery.SOURCE_SUFFIXES.If you want to keep importing the file by name after the first load, add the module to sys.modules:
If you install the script with package manager (deb or alike) another option would be to use setuptools:"...there’s no easy way to have a script’s filename match local conventions on both Windows and POSIX platforms. For another, you often have to create a separate file just for the “main” script, when your actual “main” is a function in a module somewhere... setuptools fixes all of these problems by automatically generating scripts for you with the correct extension, and on Windows it will even create an .exe file..."https://pythonhosted.org/setuptools/setuptools.html#automatic-script-creation


Answer URL
https://docs.python.org/3/library/importlib.html#importlib.util.spec_from_loader
https://docs.python.org/3/library/importlib.html#importlib.machinery.SourceFileLoader
https://docs.python.org/3/library/importlib.html#module-importlib.machinery
https://docs.python.org/3/library/importlib.html#importlib.machinery.SOURCE_SUFFIXES
