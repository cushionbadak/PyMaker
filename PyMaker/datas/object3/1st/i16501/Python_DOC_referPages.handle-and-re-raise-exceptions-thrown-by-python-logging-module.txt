Natural Text
QuestionHow do I write a custom handler for a python logging logger that will catch an IOError caused by a sudden inability to write logging information to file and re-raise the error as a different type?Further informationI'm reading and converting a large repository of raw data and it's important for me to record the process (python logging module). If logging fails because of some error, e.g. IOError, I would like the application to gracefully exit. Over the weekend, the network location where I write my log files crashed and the conversion process gamely continued.There can be an IOError thrown by other components in my code (e.g. a raw file to convert for a given hour is not present indicating that the detector was down for that given period in time) that are not important and can be ignored. I catch these errors and continue with the next hour of data.If the logger threw a different, custom exception I could handle it separately. Something like (disclaimer: this doesn't work):LoggerIOError is a simple, custom exception.Can anyone provide some help or advice? I don't have much experience with the logging module and so I may be overlooking something simple. logging.raiseExceptions should be its default value of True. DetailsOS/Python details:Windows 7Python 2.7Thanks!
Exceptions are handled by the handleError method of a handler, documented here. Subclass a relevant handler to implement custom error processing. The handleError method is called from the exception clause, so sys.exc_info() should return the current exception.


Answer URL
https://docs.python.org/3/library/logging.html#logging.Handler.handleError
