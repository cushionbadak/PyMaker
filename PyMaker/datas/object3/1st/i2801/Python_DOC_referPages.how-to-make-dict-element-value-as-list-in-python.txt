Natural Text
I have a list. Let's say [3,4,2,3,4,2,1,4,5]. I need to create a dictionary from the indexes of the elements.Here in this case, I need to create a dict as follows:where the element values are the indexes of the keys in list provided.I've tried. But was able to change the values as integers only. But unable to make them as list.Is there any way to do this with just 1 for loop?The code I've tried:
You can use a set:Output:
You can use collections.defaultdict with enumerate for an O(n) solution:
This will work, the key thing you're looking for is the enumerate() function:Gives: 
results inWhy? Well, we iterate over the list, and for each item, we first make sure that there is a list in the dictionary mapped to by this item. Then we append the respective index to that list. What results is a dictionary which maps each seen item to a list of indexes it was found at.The solution is similar to jpp's solution, except of the part with .setdefault(), which creates an empty list in every loop run, while the defaultdict approach only creates new lists if needed.Another approach could be a dict subclass which implements __missing__. This is called whenever a key isn't present.and then just do d[item].append(index). Now, whenever a key is not found, __missing__() is called which "fixes" the problem. See also How can I call __missing__ from dict for this.


Answer URL
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/functions.html#enumerate
