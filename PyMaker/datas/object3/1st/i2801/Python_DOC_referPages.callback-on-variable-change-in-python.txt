Natural Text
I've searched around but didn't find anything like this. Let's say I have an army of threads, that keep reading and updating an integer variable x. I would like a callback for when x changes over a certain margin, let's say 500, to run the callback. How can this be done without putting a heavy load on the system, like having a thread that has a while true and checks if the variable has changed?  Performance is critical. But so are ethics.In plain code would be something like this:
You want to have a function (a  "setter") which is called whenever the variable's value changes. A good way to do that is to define a @property. It will behave like a variable, but will have a getter function and a setter function.Then, in the setter, call any callbacks you need, which will react to the change.This should do the trick:Then, you can do:
If x is an attribute of some object, rather than a global variable, this is very simple: add a __setattr__ method:Obviously there are ways you can make this more flexible:Add a way to register conditions dynamically instead of just always calling x_callback.Make it a mixin class that can be attached to any other class letting you register(name, callback) whatever you want.Combine the above, so you can register(name, condition, callback).self.x_callback(oldval=self.x, newval=value) so the callback can see old and new values.if self.x_callback(value): so the callback can accept or reject the change. value = self.x_callback(value) so the callback can override the change.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__setattr__
