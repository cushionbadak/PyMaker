Natural Text
I have the following code:Basically start() create pages and getdata() runs per page.The print shows me:However I expected that all pages would be created on the same time then each one of them runs when the thread gets CPU time but what actually happens is that only when getdata() finishs The next page is created. Which means the threads are useless here. I should note that each getdata() call takes about 4-5 minutes to finish.I suspect that the problem is here:It waits for getdata() to finish before the next loop run.How can I fix it and make it works with the threads?
The problem is that you're not executing tasks in the executor at all. Instead, you're calling the 5-minute function, then trying to execute its result as a task:That getdata(page, hed, value_limit) is a function call: it calls getdata and waits for its return value.What you need to do is pass the function itself to submit, like this:I'm not sure what you're trying to do with the extra , page, but if you wanted a list of (future, page) tuples, that would be:
You have to submit a function (without actually calling it!) to executor.submit. So in your particular case, you should fix the hed and value_limit arguments in the getdata function to make it a function with a single argument page.The easiest solution may look like the following:Then you could use it as shown below:Another possible solution is to use functools.partial. You may find it even more elegant, but the idea is still the same.


Answer URL
https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.submit
https://docs.python.org/3/library/functools.html#functools.partial
