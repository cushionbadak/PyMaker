Natural Text
I want to be able to keep the order of the list when it compares. Notice when I compare list1 with list2, it returns me 8 then 7 (reverse). How do I have it maintain the order?
An OrderedDict makes a good substitute for an order-preserving set, since the keys views are set-like:Strictly speaking, that may be still using implementation detail of CPython.  But the list-comprehensions are not, and they're still O(n):
You can use a list comprehension:This will, however, include duplicate elements:If duplicates aren't desired, simply transform the list comprehension into a loop and keep track of all elements that you've already encountered:
While this does not use the - operator for sets, it does preserve the order of the original list.
A 'set' by definition is unordered. If you'd like to sort the elements, try using a list operation. You can use setdiff1d from numpy, for example:
You can use list comprehension instead to find the difference. Here is how you do it:[x for x in list1 if x not in list2] which will yield ['7', '8'] And you can do [x for x in list2 if x not in list1] which will yeild ['5', '6']And if original list contains duplicates, you can use [x for x in list1 if x not in list2 and list1.count(x) == 1]
Probably the most naive approach:Result:
In this case, just use a list comprehension:In general, consider itertools.zip_longest (vs. zip), particularly with lists of differing lengths.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
