Natural Text
I have the following point class:I want to make 'points' iterable so that the following is possible:If you see my commented code, that is what I attempted but it says TypeError: iter() returned non-iterator of type 'Point'. Any ideas on how to correctly do this?
tl;dr:To make something iterable, you need your __iter__ method to return an iterator.You can't just return self, unless self is already an iterator (which means it has a __next__ method). But you don't want points to be an iterator, you want it to be iterable over and over.You can't return iter(int(self.x)) then return iter(int(self.y)), for two reasons. First, after you return, your function is done; any code that happens after that never gets run. Second, you can't call iter on an int. (Also, there's no reason to call int on an int.)You could fix that last set of problems by creating an iterable out of each int, like a single-element list, iterating that iterable, and then delegating to it with yield from instead of return. Using yield or yield from in a function makes it a generator function, and the generators created by generated functions are iterators:â€¦ but this is kind of silly. Once we know we want a generator, we can just yield the values we want to be iterated. Hence the code at the top.Alternatively, you could explicitly create a single-element iterables for both elements and chain them together and return that:But that's also silly. Chaining two iterators over single-element lists is the same as just iterating a two-element list:Finally, rather than relying on a generator, list iterator, chain, or other iterator type that comes with Python, you can always write one explicitly:
You can use yield:Output:
You should implement a special __iter__(self) method, which should return an iterator. Add something like
Your __iter__ method should yield x and y valuesWith this, you get the following output


Answer URL
https://docs.python.org/3/library/collections.html#collections.namedtuple
