Natural Text
I have a Timer decorator printing the time elapsed for a Memoize decorated function on screen. However, the decorator print statement prints the memoize class as the function name on screen rather than the function input to memoize. For instance, using this code:returns the following:when I want that memoization.Memoize to be pass_and_square_time. I've tried a variety of different combinations of self.__wrapper__, functools.wraps, and functools.update_wrapper() to no avail.My Timer class is implemented as follows:My Memoize class is implemented as follows:
This is a lot simpler using closures than classes.I would similarly write timer asThen
Both Timer and Memoize are implemented as classes, in such way that they return an instance of their own class when they decorate a function. Because of that, it is not possiblle to use functools.wrap or to set the __name__ on the returned function (because there is no returned function).Instead, I suggest implementing __repr__ on Timer and Memoize, which will represent the decorated function better. That function will be called by Python interpreter when it needs to get the string representation of the object.This is the current situation and the problem:Now, if you add to Memoize this:Then it works as expected:Then do the same for Memoize, and even this will work:Note that Timer(Memoize(pass_and_square_time)) is exactly what the decorators do here:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__repr__
