Natural Text
Pytest's output for failed asserts is much more informative and useful than the default in Python. I would like to leverage this when normally running my Python program, not just when executing tests. Is there a way to, from within my script, overwrite Python's assert behavior to use pytest to print the stacktrace instead while still running my program as python script/pytest_assert.py?Example programDesired resultProgress updateThe closest I've got is this but it only works for asserts within that one function and spams the trace:
DisclaimerAlthough there is surely a way to reuse pytest code to print the traceback in the desired format, stuff you need to use is not part of public API, so the resulting solution will be too fragile, require invocation of non-related pytest code (for initialization purposes) and likely break on package updates. Best bet would be rewriting crucial parts, using pytest code as an example.NotesBasically, the proof-of-concept code below does three things:Replace the default sys.excepthook with the custom one: this is necessary to alter the default traceback formatting. Example:will output:Instead of hello world, the formatted exception info will be printed. We use ExceptionInfo.getrepr() for that.To access the additional info in asserts, pytest rewrites the assert statements (you can get some rough info about how they look like after rewrite in this old article). To achieve that, pytest registers a custom import hook as specified in PEP 302. The hook is the most problematic part as it is tightly coupled to Config object, also I noticed some module imports to cause problems (I guess it doesn't fail with pytest only because the modules are already imported when the hook is registered; will try to write a test that reproduces the issue on a pytest run and create a new issue). I would thus suggest to write a custom import hook that invokes the AssertionRewriter. This AST tree walker class is the essential part in assertion rewriting, while the AssertionRewritingHook is not that important.Codehooks.pymain.pyAfter calling hooks.install_hooks(), main.py will have modified traceback printing. Every module imported after install_hooks() call will have asserts rewritten on import.pytest_assert.pyExample outputSummarizingI would go with writing an own version of AssertionRewritingHook, without the whole non-related pytest stuff. The AssertionRewriter however looks pretty much reusable; although it requires a Config instance, it is only used for warning printing and can be left to None.Once you have that, write your own function that formats the exception properly, replace sys.excepthook and you're done.


Answer URL
https://docs.python.org/3/library/sys.html#sys.excepthook
