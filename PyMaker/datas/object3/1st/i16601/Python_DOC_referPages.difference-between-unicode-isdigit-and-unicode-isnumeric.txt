Natural Text
What is the difference between methods unicode.isdigit() and unicode.isnumeric()?
The Python 3 documentation is a little clearer than the Python 2 docs:str.isdigit()  [...] Digits include decimal characters and digits that need special handling, such as the compatibility superscript digits. Formally, a digit is a character that has the property value Numeric_Type=Digit or Numeric_Type=Decimal.str.isnumeric()  Numeric characters include digit characters, and all characters that have the Unicode numeric value property, e.g. U+2155, VULGAR FRACTION ONE FIFTH. Formally, numeric characters are those with the property value Numeric_Type=Digit, Numeric_Type=Decimal or Numeric_Type=Numeric.So isnumeric() tests additionally for Numeric_Type=Numeric. Quoting from a historic proposal for official numeric type definitions:Numeric_Type=Decimal  Characters used in a positional decimal systems, which standard base-10 radix systems with contiguous digits 0..9, and are most-significant-digit first (backingstore order). These are coextensive by definition with General_Category=Decimal_Number.Numeric_Type=Digit  Variants of positional decimal characters (Numeric_Type=Decimal) or sequences thereof. These include super/subscripts, enclosed, or decorated by the addition of characters such as parentheses, dots, or commas.Numeric_Type=Numeric  Characters with numeric value, but that are neither Decimal nor Digit.So any character that is numeric, but not decimal or a variation thereof. Think fractions, roman numerals, glyphs that combine digits, and any numbering system that is not decimal-based.That includes:However, the distinction between Numeric_Type=Digit and Numeric_Type=Numeric is no longer considered useful, and Numeric_Type=Digit is no longer used for new characters since Unicode 6.3.0. Quoting Unicode Standard Annex #44:Starting with Unicode 6.3.0, no newly encoded numeric characters will be given Numeric_Type=Digit, nor will existing characters with Numeric_Type=Numeric be changed to Numeric_Type=Digit. The distinction between those two types is not considered useful.Thus, ðŸ„Œ (DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ZERO) and other characters that once would have been assigned Numeric_Type=Digit have instead been assigned Numeric_Type=Numeric, and they report False for isdigit:
Return True if there are only numeric characters in S, False otherwise. Numeric characters include digit characters, and all characters that have the Unicode numeric value property, e.g. U+2155, VULGAR FRACTION ONE FIFTH.Return true if all characters in the string are digits and there is at least one character, false otherwise.For 8-bit strings, this method is locale-dependent.
From the manualThe method isnumeric() checks whether the string consists of only  numeric characters. This method is present only on unicode objects.Digits include decimal characters and digits that need special  handling, such as the compatibility superscript digits. Formally, a  digit is a character that has the property value Numeric_Type=Digit or  Numeric_Type=Decimal.
From python inbuilt docs,
The code snippet provided by @Martijn Pieters doesn't work on the latest Python version i.e. 3.7 at the time of writing this answer.Here is the updated code snippet.Output:NOTE: I am using f-strings for formatting. It's a really cool new way to format string and introduced in Python 3.6 under PEP-498. It's also called Literal String Interpolation. You can read more about it here or check out Official Documentation too.


Answer URL
https://docs.python.org/3/library/stdtypes.html#str.isdigit
https://docs.python.org/3/library/stdtypes.html#str.isdigit
https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals
