Natural Text
Consider a function f(*x) which takes a lot of arguments *x. Based on these arguments (objects), the function f composes a rather complex object o and returns it. o implements __call__, so o itself serves as a function. Since the composition of o is pretty time consuming and in my scenario there is no point in having multiple instances of o based on the same arguments *x, they are to be cached.The question is now: How to efficiently compute a hash based on multiple arguments *x? Currently I am using a python dictionary, and i concatenate the str() representations of each x to build each key. It works in my scenario, but it feels rather awkward. I need to call the resulting objects o in a very high frequency, so I suspect the repeated call of str() and the string concatenations waste a lot of computation time.
You can use the hash built-in function, combining the hashes of the items in x together. The typical way to do this (see e.g. the documentation) would be an xor across all the hashes of the individual objects:it is advised to somehow mix together (e.g. using exclusive or) the hash values for the components of the object that also play a part in comparison of objectsTo implement that in a functional way, using operator and reduce:See also this question.
Since version 3.2, Python already contains an implementation of an LRU cache that you can useto cache your functions' results based on their arguments: functools.lru_cacheExample:Output:(Notice how f(1, 2, 3) only got called once)As suggested in the comments, it's probably best to simply use  the hash()es of your arguments to build the cache-key for your arguments - that's what lru_cache already does for you.If you're still on Python 2.7, Raymond Hettinger has posted some recipes with LRU caches that you could use in your own code.


Answer URL
https://docs.python.org/3/library/functions.html#hash
https://docs.python.org/3/reference/datamodel.html#object.__hash__
https://docs.python.org/3/library/operator.html
https://docs.python.org/3/library/functools.html#functools.reduce
