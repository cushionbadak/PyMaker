Natural Text
Given:Okay, that either calls super or crawls the mro?This is expected.What is getattribute not doing that getattr does? What?!  type.__getattribute__ calls super but object's version doesn't?
You are operating directly on classes. object.__getattribute__ is only used on instances of A and B instead. That's because special methods are looked up on the type; for instances the type is the class.For classes then, the type is.. type:so type.__getattribute__ is used:and object.__getattribute__ works fine on instances:For instances attributes are looked up first on the class (in the case of data descriptors), then on the instance, then if the instance doesn't have the attribute, the class hierarchy is searched in MRO order. This is the job of object.__getattribute__. So object.__getattribute__ looks at the first argument (e.g. self, the instance object) for the attribute, and at objects in type(self).__mro__.For classes, attributes are looked up on the class itself and all its bases; type.__getattribute__ looks directly at self.__mro__ for these; self being a class object here.If you use object.__getattribute__ for classes then, there is no f attribute on B directly, and no f anywhere in type(B).__mro__. If you use type.__getattribute__, A is a member of B.__mro__ so f is found there:


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-names
https://docs.python.org/3/howto/descriptor.html#descriptor-protocol
