Natural Text
I have some working code (library) that, in some situations, I only need a small subset of its functional.Thinking of a simpler case, the code (library) is a class that takes a few parameters when initializing.For my limited use case, many of those parameters are not vital as they are not directly used in the internal calculation (some parameters are only used when I call particular methods of the object), while it is very hard to prepare those parameters properly.So, I am wondering, if there is any easy way to know what parameters are essential without fully analyzing the library code (which is too complicated). For example, I may pass fake parameters to the api, And it would raise an exception only if they are actually used.For example, I can pass in some_parameter = None for some_parameter that I guess won't be used. So whenever the library tries to access some_parameter.some_field an exception would be raised thus I can further look into the issue and replace it by the actually parameter. However, it would change the behavior of the library if the code itself accepts None as a parameter.Are there any established approach to this problem? I don't mind false positive as I can always look into the problem and manually check if the usage of the fake parameters by the library is trivial.For those suggestions on reading documentation and code, I don't have documentations! And the code is legacy code left by previous developers. Update@sapi:Yes I would like to use the proxy pattern / object: I will further investigate on such topic."A virtual proxy is a placeholder for "expensive to create" objects. The real object is only created when a client first requests/accesses the object."
Depending on what you're looking to achieve, you may be able to pass in a proxy object which throws an exception when accessed.For example:Of course, that approach will fail in two pretty common situations:if the library itself checks if the attribute exists (eg, to provide some default value)if it's treated as a primitive (float, string etc), though you could modify this approach to take that into account
I am assuming all classes in question are new-style. This is always the case if you are using Python 3; in Python 2, they must extend from object. You can check a class with isinstance(MyClass, type). For the remainder of my answer, I will assume Python 3, since it was not specified. If you are using Python 2, make sure to extend from object where no other base class is specified.If those conditions hold, you can write a descriptor that raises an exception whenever it is accessed:I will assume we are using this class as an example:If we want to see if a is used anywhere, extend the class and put an instance of our descriptor on the class:Now if we were to try to use the class, we can see which methods use a:Here, we can see that use_a tried to use a (raising an exception because it did), but use_b did not (it completed successfully).This approach works more generally than sapi’s does: in particular, sapi’s approach will only detect an attribute being accessed on the object. But there are plenty of things you can do that do not access attributes on that object. This approach, rather than detecting attributes being accessed on that object, detects the object itself being accessed.
I belive the simplest and least intrusive way is to turn the parameters into properties:Will print True in stdout, and Accesing parameter a to stderr. You would have to tweak it to allow the class to change it.


Answer URL
https://docs.python.org/3/reference/datamodel.html#descriptors
