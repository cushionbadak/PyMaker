Natural Text
This question already has an answer here:all permutations of a binary sequence x bits long                    5 answers                How to get all possible combinations of a listâ€™s elements?                    24 answers                A simplified version of my question is: I wrote this code:And the result is:But what I expect is the combinations:AAAAAAAXAAXAAXAAXAAAAAXXAXAXXAAXXXAAXAXAAXXAAXXXXAXXXXAXXXXAXXXXNotice that in the final program I shall need to do a lot of operations under each if condition, so it will not be a simple string character iteration, but first I want to get this combination part working. Thank you very much for your help.
If you really need all the for loops in your actual program, you could fix it like this:It gives the following output:Notice that the last letter changes the fastest, because it's set by the most inner for loop.
You could use the built-in library itertools, which has the 'combinations' function, or you could recognize that you're essentially expressing binary numbers:The above code:Takes a range of numbers from zero (0b0000) to 2^4 - 1 (0b1111), Converts each to its binary representation in a string (built-in bin function)Chops off the leading '0b'Makes sure the resulting string has enough leading zerosThen in the for-loop body, converts the 1's and 0's to your format.The operations you do could be based on the number of the range, in which case you can move the string formatting into the body of the loop (of course it would help if you gave an idea of what kind of operations you'd be doing)Here's a not-so-intuitive way for displaying combinations:
The problem with your code is that you set the items of temp to X, but never set them back to A. See moarningsun's answer for a straight-forward way to fix this. You can, however, make this a whole lot shorter: Instead of looping over range(0, 2) and setting, e.g., temp[0] to either X or A depending on the value of x1, you can directly loop over the characters in the string AX and set temp[0] accordingly.You can even make this into one big list comprehension:The proper way to do it is, of course, to use the itertools module. Note, however, that what you are looking for are actually not combinations, but a product.You can thus create the 'combinations' in just one readable line of code and then iterate that list and do whatever you need to do in a much cleaner loop.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/library/itertools.html
https://docs.python.org/3/library/itertools.html#itertools.combinations
https://docs.python.org/3/library/itertools.html#itertools.product
