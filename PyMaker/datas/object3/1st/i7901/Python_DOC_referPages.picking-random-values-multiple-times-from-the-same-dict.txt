Natural Text
I'm trying to pick a random value from a dict. and then pick a second value from the same dict. guaranteeing that it is different. If I call the function it works, however there is no guarantee that the second time I call it the value will be different than the first so I tried the following.I still get matching values occasionally. I tried replacing the if val2 in statement with while val2 in and still no luck. Am I misunderstanding something simple?
If you need exactly two values (or any fixed number you know in advance), use random.sample(). That's what it's for: Sampling "without replacement", i.e. once you've picked an element from the list, it is no longer available to be picked again.
As alexis has suggested, random.sample() is the right tool for this job, but for the sake of completeness, if you need to pick up random fields in a iterative/lazy fashion, you can do it yourself by:However, that WILL modify the dict you pass to it. If you want a non-modifying iterative method you can create a generator like:
random.choice can achieve this but you'll be needing to retain state information after each call to the function as such when random.choice returns the previous random value, you ignore the value and call it again. Popping the value out of the sequence is another alternative:The first time you call pick_value there's no previous value, this is what the outer if statement is for, it checks if the there's a previous value and compare it against the newly chosen random value. This function  returns None when random.choice fails to return a random value that's not equal to the previous one after 100 calls to random.choice. *Of course, this is just a variation on a theme, other users provided simpler alternatives, so you don't necessarily need to wrap random.choice with the above logic.  
This option is useful if you are already using numpy library:Consider using random.choice from numpy:


Answer URL
https://docs.python.org/3/library/random.html#random.sample
