Natural Text
Is it to for remembering yourself and your team to implement the class correctly?I don't fully get the use of an abstract class like this:
As the documentation states [docs], In user defined base classes, abstract methods should raise this exception when they require derived classes to override the method, or while the class is being developed to indicate that the real implementation still needs to be added.Note that although the main stated use case this error is the indication of abstract methods that should be implemented on inherited classes, you can use it anyhow you'd like, like for indication of a TODO marker.
As Uriel says, it is meant for a method in an abstract class that should be implemented in child class, but can be used to indicate a TODO as well.There is an alternative for the first use case: Abstract Base Classes. Those help creating abstract classes.Here's a Python 3 example:When instantiating C, you'll get an error because my_abstract_method is abstract. You need to implement it in a child class.Subclass C and implement my_abstract_method.Now you can instantiate D.C.my_abstract_method does not have to be empty. It can be called from D using super().An advantage of this over NotImplementedError is that you get an explicit Exception at instantiation time, not at method call time.
Consider if instead it was:and you subclass and forget to tell it how to isTileCleaned() or, perhaps more likely, typo it as isTileCLeaned(). Then in your code, you'll get a None when you call it. Will you get the overridden function you wanted? Definitely not.Is None valid output? Who knows.  Is that intended behavior? Almost certainly not. Will you get an error? It depends.raise NotImplmentedError forces you to implement it, as it will throw an exception when you try to run it until you do so. This removes a lot of silent errors. It's similar to why a bare except is almost never a good idea: because people make mistakes and this makes sure they aren't swept under the rug.Note: Using an abstract base class, as other answers have mentioned, is better still, as then the errors are frontloaded and the program won't run until you implement them (with NotImplementedError, it will only throw an exception if actually called).
You might want to you use the @property decorator,


Answer URL
https://docs.python.org/3/library/exceptions.html#NotImplementedError
