Natural Text
I declared a integer variable x with value 0.When i run this line:Everything goes well. But when i run this line:Python raises an exception:Why python throws this exception while in official python documentation for operator module said += operator calls __iadd__ method?
in official python documentation for operator module said += operator calls __iadd__ method?No, it says that a += b is equivalent to a = operator.iadd(a, b), not a.__iadd__(b).operator.iadd(a, b) is not equivalent to a.__iadd__(b). operator.iadd falls back to __add__ and __radd__ if __iadd__ is not present or returns NotImplemented.
It does not say that; what you're linking to in the documentation is the operator module:operator.iadd(a, b)operator.__iadd__(a, b) a = iadd(a, b) is equivalent to a += b.The operator module contains function equivalents for operators and similar things, it doesn't define standard Python operators. It doesn't say anything about x.__iadd__.The relevant documentation is rather this:object.__iadd__(self, other) These methods are called to implement the augmented arithmetic assignments (+=, ...). These methods should attempt to do the operation in-place (modifying self) and return the result (which could be, but does not have to be, self). If a specific method is not defined, the augmented assignment falls back to the normal methods. ...So, an object can define __iadd__ to override the behaviour of a += operation, but if such a method is not defined, it falls back to the default a = a + b behaviour.


Answer URL
https://docs.python.org/3/library/operator.html#operator.__iadd__
https://docs.python.org/3/reference/datamodel.html#object.__iadd__
https://docs.python.org/3/reference/datamodel.html#object.__iadd__
