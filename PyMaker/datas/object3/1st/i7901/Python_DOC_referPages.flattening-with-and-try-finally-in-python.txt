Natural Text
Consider following code:Having lots of nested with or async with statements has negative effect on readability of code, especially in tests, where the same clause might be reused lots of times.In languages like D, there is scope(exit) ... construct, which allows you to append code to the list of scope finalizers â€” this code would be executed once the scope is left, allowing you to effectively do what __exit__ does, but without adding an indent.Is there a way to flatten with in Python and do something like this?Or, alternatively, is there a way to reliably execute arbitrary code on exiting the scope?
As far as I know, you can't achieve what you want. Especially because there's no possibility to define such "scope".Even in your pseudo-code:What context should [not] catch it?I may be wrong, but the the only way to set the "guard" for catching exceptions is try/except clause. with is roughly a wrapper around it.Speaking about motivation, if you have problems with nested context managers so hard, you should probably refactor your core to extract inner context as functions. You may take a look at contextlib for helpers
I can't stand the extra indentations from the with statement... This is what I do to flatten them:Nested:Flattened:


Answer URL
https://docs.python.org/3/library/contextlib.html
https://docs.python.org/3/reference/compound_stmts.html#with
