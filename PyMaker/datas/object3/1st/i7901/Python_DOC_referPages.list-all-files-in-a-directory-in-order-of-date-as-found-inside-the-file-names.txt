Natural Text
I have various tar files in a Desktop folder (Ubuntu). The filename is like this:The boldfaced part is the date.  I want to sort the files in date order, most recent first.Is there a simple python solution for this?
You don't need to parse the date, or even use regex for that matter. If the file names are structured as you say, it's sufficient to do just:UPDATE - I've added the offset argument to specify where in the file name begins your date. In the list you've posted it begins 10 characters from the back (default), but if you've had a .tar extension after the name, as in your initial example, you'd account those 4 characters as well and use offset of -14:
No, there is not a simple Python function for this.  However, there are reasonably simple building blocks from which you can make a readable solution.Write a function to extract the date and rearrange it to be useful as a sort key.  Find the last two hyphens in the file name, grab the string between them, and then rearrange the digits in the format yyyymmdd (year-month-day).  Return that string or integer (either will work) as the functional value.For your main routine, collect all the file names in a list (or make a generator) and sort them, using the value of that function as the sort key.See the sorting wiki for some implementation details.
As Adam Smith have pointed out, you require the list of files to work with.Edit As Martineu has noticed, the hash might be different than the one you indicated so it would be easier to discard beginning of the name part in advance.


Answer URL
https://docs.python.org/3/library/os.html?highlight=os.listdir#os.listdir
