Natural Text
This question already has an answer here:Dictionaries: How to keep keys/values in same order as declared?                    12 answers                I have the following snippet of code which I ran in python2.7.12 and python3.5.2When ran in python2.7.12 I get the expected result :In python3.5.2, something strange happens. I sometimes get results such as :In addition, in python3.5.2, but not python2.7.12, each time the program is ran char_list is in a different order. It is in the same order every time for python2.7.12.In both version of python enumerate returns an object that is iterable. Why would this strange behavior be happening?P.S. this also happens when I make a copy of char_list and pass the copy into the second enumerate instead of char_list
Enumerate is working fine, but when you save the data in a dictionary python does not maintain the order. By default Python dictionaries are unordered and are not guaranteed to keep key/value pairs in the same order they were added. OrderedDict is a good solution for Python as you can read about here. Also not that in CPython 3.6 dictionaries will maintain order, but this in not guaranteed in the future.If you want order preserved consider using a lists or tuples.
I have been able to replicate both your problem, and, by making the following changes, get the expected output.There are two changes to make. Firstly, writing char_list = list(set(file_data)) stores the data as a set, which is an unordered data type - that is, it will not retain the order it is stored necessarily. Therefore, simply removing the set text will solve the order problem.As for the new line text appearing in the result, simply append .strip('\n') to your file_data= f.read() line and it will automatically remove that text.After making the changes and confirming they work, your code would look something like this:Hope this helps!


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#sets
