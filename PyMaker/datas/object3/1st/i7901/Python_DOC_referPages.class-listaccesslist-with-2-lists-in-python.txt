Natural Text
I found this task for implement a class named AccessList(type list) in python:Create a class AccessList(list) which behaves like a "normal" list with this feature:there is managed a second intern list which bookmarks the last asked element (in-test). The access to this list is only readable with the property "access"if there is an in-test, then the asked element should be added to the 2nd listif you iterate over an instance of AccessList the access property should not change itselfExamples:So this is my try:But now I got no idea how to implement the in-test?
The __contains__ method is responsible for managing the in checks:I made some changes here that don't really change the functionality but are considered good style:Using super instead of hardcoding the superclass explicitly.Using @property to create the property.Accepting *args, **kwargs in __init__ and passing them to the superclass __init__. You don't care what is passed to the __init__ so you can accept anything and let the superclass figure out what should be done.You could use self._access.copy() instead of self._access[:]. I feel it's a bit clearer what happens. However if your list may contain mutable objects you need to use copy.deepcopy(self._access), otherwise you could alter the instances inside the _access list!And it passes your tests:


Answer URL
https://docs.python.org/3/library/collections.html#collections.UserList
