Natural Text
I have a csv file with start and end postcodes (UK equivalent of US zipcodes) and would like to compute simple distance, road travel distance and travel time between the two. I guess the way to go would be to use Google maps in one way or another. I first tried using some spreadhsheet and the following url http://maps.google.com/maps?saddr="&B2&"&daddr="&A2&" but I do not know how to retrieve the resulting distance from google maps   I would like to know some more pythonic way to work this out
The main issue with finding a distance between 2 postcodes is that they aren't designed for it.For the purposes of directing mail, the United Kingdom is divided by  Royal Mail into postcode areas. -WikipediaA postcode by itself provides no useful information, so you are correct you need help from an external source. The Google maps service at http://maps.google.com is of no use, as it's not designed for you to retrieve information like this.Option 1 - Google Maps APIThe Google Maps API is feature packed and will provide you with a lot of options. The link above is to the Distance Matrix API, which will help with working out distances between 2 points. The results from this will be based on travel (so driving distance), this may or may not be what you want.ExamplePython 3Note: Google Maps API is subject to usage limits.Option 2 - Do it yourself with postcodes.iopostcodes.io has a nice API backed by a public data set. Example lookup. Results are in JSON which can be mapped to a Python dictionary using the json module. The downside here is it provides no way to check distance, so you will have to do it yourself using the Longitude and Latitude returned.ExamplePython 3Calculating distanceI don't want to get too much into this because it's a big topic and varies greatly depending on what you're trying to achieve, but a good starting point would be the Haversine Formula, which takes into account the curvature of the Earth. However, it assumes the Earth is a perfect sphere (which it's not).The haversine formula determines the great-circle distance between two  points on a sphere given their longitudes and latitudes. Important in  navigation, it is a special case of a more general formula in  spherical trigonometry, the law of haversines, that relates the sides  and angles of spherical triangles.Here is an example of it implemented in Python: https://stackoverflow.com/a/4913653/7220776
The distance between postal codes can be obtained with the pgeocode library. Unlike the above response, it does not query a web API, and is therefore more suitable for processing large amounts of data,More information about these postal codes, including latitude and longitude, can be queried with,This uses the GeoNames postal code dataset to get the GPS coordinates, then computes the Haversine (great circle) distance on those. Most countries are supported.In the particular case of Great Britain, only the outward codes are included in the GB dataset, the full dataset is also available as GB_full but it is currently not supported in pgeocode.
This looks like the perfect resource for you (they provide lat and long values for each postcode in the UK, in various formats): https://www.freemaptools.com/download-uk-postcode-lat-lng.htmand in particular this CSV file (linked in the same page):https://www.freemaptools.com/download/full-postcodes/ukpostcodes.zipOnce you match geographical coordinates to each postcode you have (out of the scope of this question), say you'll have a table with 4 columns (i.e. 2 (lat, long) values per postcode). You can compute the distances using numpy. Here's an example:
The simplest way to calculate the distance between two UK postcodes is not to use latitude and longitude but to use easting and northing instead.Once you have easting and northing you can just use Pythagoras's theorem to calculate the distance, making the maths much simpler.Get the easting and northing for the postcodes. You can use Open Postcode Geo for this.Use the below formula to find the distance:sqrt(pow(abs(easting1 - easting2),2) + pow(abs(northing1 - northing1),2))This example is from MySQL but you should be able to find similar functions in both Excel and Python:sqrt(): Find the square root.pow(): Raise to the power of.abs(): Absolutevalue (ignore sign).


Answer URL
https://docs.python.org/3/library/json.html
