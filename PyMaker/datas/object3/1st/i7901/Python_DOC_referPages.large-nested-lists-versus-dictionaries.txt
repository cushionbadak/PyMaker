Natural Text
Please could I solicit some general advice regarding Python lists.  I know I shouldn't answer 'open' questions on here but I am worried about setting off on completely the wrong path.My problem is that I have .csv files that are approximately 600,000 lines long each.  Each row of the .csv has 6 fields, of which the first field is a date-time stamp in the format DD/MM/YYYY HH:MM:SS.  The next two fields are blank and the last three fields contain float and integer values, so for example:etcNo two values in column 1 (date-time stamp) will ever be the same.I need to write a program that will do a few basic operations with the data, such as:read all of the data into a dictionary, list, set (?) etc as  appropriate.search through the date time stamp column for a particular value.read through the list and do basic calculations on the floats in columns 4 and 5. write a new list based on the searches/calculations.My question is - how should I 'handle' the data and am I likely to run into problems due to the length of the dataset?For example, should I import all of the data into a list, and each element of the list is a sublist of each rows data?  E.g:[[23/05/2017 16:42:17,'','', 1.25545, 1.74733, 12],[23/05/2017 16:42:20,'','', 1.93741, 1.52387, 14], ...]Or would it be better to make each date-time stamp the 'key' in a dictionary and make the dictionary 'value' a list with all the other values, e.g:{'23/05/2017 16:42:17': [ , , 1.25545, 1.74733, 12], ...}etcIf I use the list approach, is there a way to get Python to 'search' in only the first column for a particular time stamp rather than making it search through 600,000 rows times 6 columns when we know that only the first column contains timestamps?I apologize if my query is a little vague, but would appreciate any guidance that anyone can offer.
600000 lines aren't that many, your script should run fine with either a list or a dict.As a test, let's use:dictIf you're looking for exact timestamps, a lookup will be much faster with a dict than with a list. You have to know exactly what you're looking for though: "23/05/2017 16:42:17" has a completely different hash than "23/05/2017 16:42:18".Note that your DD/MM/YYYY HH:MM:SS format isn't very convenient : sorting the cells lexicographically won't sort them by datetime. You'd need to use datetime.strptime() first:list with binary searchIf you're looking for timestamps ranges, a dict won't help you much. A binary search (e.g. with bisect) on a list of timestamps should be very fast.DatabaseBefore reinventing the wheel, you might want to dump all your CSVs into a small database (sqlite, Postgresql, ...) and use the corresponding queries.PandasIf you don't want the added complexity of a database but are ready to invest some time learning a new syntax, you should use pandas.DataFrame. It does exactly what you want, and then some.


Answer URL
https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime
https://docs.python.org/3/library/bisect.html
