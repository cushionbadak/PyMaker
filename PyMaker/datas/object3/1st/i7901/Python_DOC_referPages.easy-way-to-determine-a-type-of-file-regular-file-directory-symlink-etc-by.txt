Natural Text
I wanted an easy way to determine a type of path so I googled alot and then I wrote this:Then I googled more and wrote this:Both functions do what I want, but look kinda ugly and I think that I'm missing a simpler solution hiding in some cool python lib.Question is: Is there a better way to do this?
We can make it more consise with utilizing bitmasking inside enum:Let's assume first value describes if file exists: 0 for existing and 1 for not existing, second one will be symlink: 1 for links and 0 for non-links, third for directory: 1 if it is directory and 0 if it is not, and the last for file in hte same menner.So if we wanted to describe file that existsand is a symlink to file, we would use 0(exists)1(link)0(non-dir)1(file)With using meaningful values we can now consisely chain those values together with results returned from python stat wrapper.Obviously there is issue of some illegal states like if something would report that it is both directory and file, at that point this will raise exception, it can be modified for different behaviour, but raising exception seems perfectly valid.Also I've used pretty ugly way of adding together this value, but this is for sake of readibility. You always could do ''.join(map(str,map(int,[islink(filepath),isdir(filepath),isfile(filepath)]))) or even shorter ways
You can try the pathlib module which has been in stdlib since Python 3.4 (for older pythons use pip install pathlib). It defines the Path class which contains methods for both checking types of files as well as resolving symlinks. Besides, it provides a pretty convenient API: 


Answer URL
https://docs.python.org/3/library/pathlib.html
https://docs.python.org/3/library/pathlib.html#pathlib.Path
https://docs.python.org/3/library/pathlib.html#pathlib.Path.resolve
