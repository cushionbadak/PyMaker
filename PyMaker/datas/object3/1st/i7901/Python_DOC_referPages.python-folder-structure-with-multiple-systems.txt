Natural Text
I am trying to restructure a large project so that I can have one core set of code reused among a web frontend application written in flask and an automated back end that uses luigi tasks. so I have two clients that I'd like to share code between in order to access a database and perform some automated tasks from either the web or luigi. What is a good way to keep those three things organized and structured so that I can easily import core modules into either project. I've had some issues getting Luigi to recognize modules that are parallel to it. 
Technically, the only requirement to re-use the code is that the Python files of the shared modules ("core set of code") are found via sys.path of the executing interpreter, e.g. by adding the according directory to the PYTHONPATH environment variable. This enables you to use them as modules. However, you have to assess the changes to your project layout depending on your version control scheme and how you deploy the web application and clients. Usually, I would assume that you have to use the following rules of thumb.Manage the shared code modules as a separate project. Especially, if the lifecycles of the depending clients and web applications are not tied together.Treat the shared core modules as a library or framework. I should not rely on implementation details of the web application or the clients. Usually, you need to provide some entry points and configuration hooks.Change your deployment in a way that the shared core modules are pulled as a dependency of the according client/application. There is a magnitude of possibilites depending on your setup and use case. For example, you could build pip-installable packages using setuptools.


Answer URL
https://docs.python.org/3/library/sys.html#sys.path
