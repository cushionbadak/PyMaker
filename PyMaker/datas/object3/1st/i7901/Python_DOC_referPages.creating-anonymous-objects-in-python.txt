Natural Text
I'm debugging some Python that takes, as input, a list of objects, each with some attributes.I'd like to hard-code some test values -- let's say, a list of four objects whose "foo" attribute is set to some number.Is there a more concise way than this?Ideally, I'd just like to be able to say something like:(Obviously, that is made-up syntax. But is there something similar that really works?)Note: This will never be checked in. It's just some throwaway debug code. So don't worry about readability or maintainability.
I like Tetha's solution, but it's unnecessarily complex.Here's something simpler:
I found this: http://www.hydrogen18.com/blog/python-anonymous-objects.html, and in my limited testing it seems like it works:
Have a look at this:
Non classy:
Another obvious hack:But for your exact usecase, calling a function with anonymous objects directly, I don't know any one-liner less verbose thanUgly, does the job, but not really.
As of Python 3.3, there's types.SimpleNamespace that does exactly what you want:That's a tad wordy, but you can clean it up with an alias:And now that's actually pretty close to the fictional syntax in your question.
Maybe you can use namedtuple to solve this as following:
So brief, such Python! O.oThen you can use Object as a generic object constructor:EDIT: Well okay, technically this creates a class object, not an object object. But you can treat it like an anonymous object or you modify the first line by appending a pair of parenthesis to create an instance immediately:
There is a cool way but hard to understand. It use type() create a no-named class with default init params,then init it without any param and get the anonymous object.


Answer URL
https://docs.python.org/3/library/types.html#types.SimpleNamespace
