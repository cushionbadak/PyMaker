Natural Text
I'm currently using a try/except block to treat a particular variable as an iterable when I can, but handle it a different, though correct, manner when it isn't iterable. My problem is that a TypeException may be thrown for reasons other than trying to iterate with a non-iterable. My check was to use the message attached to the TypeException to ensure that this was the reason and not something like an unsupported operand. But messages as a part of exceptions have been deprecated. So, how can I check on the reason for my TypeException?For the sake of completeness, the code I'm using is fairly similar to this:
Separate the part that throws the exception you're interested in from the parts that throw unrelated exceptions:
The best way, if it suits your use case, is to use collections.Iterable. Because this is such a common task, I tend to wrap it in a function:But note the documentation:Checking isinstance(obj, Iterable) detects classes that are registered  as Iterable or that have an __iter__() method, but it does not detect  classes that iterate with the __getitem__() method. The only reliable  way to determine whether an object is iterable is to call iter(obj).


Answer URL
https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable
