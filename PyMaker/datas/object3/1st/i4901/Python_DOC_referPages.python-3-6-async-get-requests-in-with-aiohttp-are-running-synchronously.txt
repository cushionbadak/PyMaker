Natural Text
I have the below functioning properly, but for some reason the requests seem to be executing synchronously, instead of asynchronously.  My assumption now is that this is happening because of the for record in records for loop in the main function, but i'm not sure how to change this so that requests can execute async.  If this is not the case, what else would I need to change?
You are awaiting on separate do_request() calls in sequence. Instead of awaiting on them directly (which blocks until the coroutine is done), use the asyncio.gather() function to have the event loop run them concurrently:The asyncio.gather() return value is a list of all the results the coroutines returned, in the same order you passed them to the gather() function.If you needed the original records to process the responses, you can pair up record and query string in several different ways:store valid records in a separate list and use zip() to pair them up again as you process the responsesuse a helper coroutine that takes the valid record, produces a query string, invokes the request, and returns the record and response together as a tuple.You can also mix in the response handling into a gathered coroutine; one that takes a record, produces the query string, awaits on do_request and then stores the result in the database when the response is ready.In other words, divide up your work that needs to happen consecutively, in coroutines and gather those.
Building off of Martijn's AnswerIf order of the requests don't matter to you too much (when it gets written to the database), you could write the responses to your database while fetching commands.Edit (to explain more): I use 2 semaphores here. 1 is to limit the number of connections through aiohttp. This will depend on your system. Most linux systems default to 1024. In my own personal experience, setting it lower than your OS max is preferable.max_coroutines is to solve the problem of having too many coroutines ran at once.I use asyncio.ensure_future() so that we run the coroutines as we build the list. This way, you're not creating the full list of coroutines before executing any of them.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.gather
