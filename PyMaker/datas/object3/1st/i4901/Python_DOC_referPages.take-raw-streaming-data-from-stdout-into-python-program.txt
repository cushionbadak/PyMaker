Natural Text
I have a hackrf hardware unit that is feeding a continuous raw uint8 data stream to a linux shell pipe. For example this will pipe continous data to another application in a linux shell like so:hackrf_transfer -r /dev/stdout -f 92700000 -s 8000000 - | (another application)In python this will do the same:BUT I cannot get the Hackrf pipe stream into a python script. For example I may want to decimate that raw data stream or manipulate it in some way and then send it on to another subprocess application etc. like so:(HackRF)source subprocess >> a python script >> sink subprocess (eg.  baudline)or in a single python script:source hackrf >> my_function >> sink applicationI can do source >> sink in a python script where both applications already accept a shell command such as a hackrf subprocess pipe into Baudline subprocess stdin pipe. In other words if the two apps work in the shell using a pipe it works in a python subprocess call. But I can't get a python function between this shell pipe to alter the data using a python script or function.Does anyone have any ideas on how I could go about this please?
The output of hackrf_transfer is a byte stream, not line-oriented, so readlines() doesn't work; use read(8*1024) instead.If I use hackout.stdout.read() or hackout.communicate it 'sinks' the data stream.Right, those calls without arguments cannot be used to read a continuous data stream in parallel.read(size=-1):As a convenience, if size is unspecified or -1, all bytes until EOF are returned.communicate(input=None, timeout=None):Read data from stdout and stderr, until end-of-file is reached. Wait for process to terminate.This is why I told to use read(8*1024).Its not running errors or messages with this: data = hackout.stdout.readlines(8*1024) but I want to take this and feed it to stdout. I tried sys.stdin.write(data) its not writing but It's seeing 'data' as a list. So its captured the data but I can't write that captured data back out.I hope you meant read rather than readlines, for the reason I stated at the beginning of this post.Here's a sketch of working code, based on what you posted in a meanwhile deleted "answer":


Answer URL
https://docs.python.org/3/library/io.html#io.IOBase.readlines
https://docs.python.org/3/library/io.html#io.RawIOBase.read
https://docs.python.org/3/library/io.html#io.RawIOBase.read
https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate
