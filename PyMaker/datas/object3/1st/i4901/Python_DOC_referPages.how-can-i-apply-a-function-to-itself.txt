Natural Text
Suppose I have function, f, which takes in some variable and returns a variable of the same type.  For simplicity, let's sayI'm interested in applying f to itself over and over.  Something like f(f(f(...(f(x))...))).I could do this likeBut I was wondering if there was a simpler, less verbose way to doing the same thing.  I wan't to avoid for loops (just as a challenge to myself).  Is there maybe some way of using map or a similar function to accomplish this?
Is there maybe some way of using map or a similar function to accomplish this?Not map, but reduce. I wouldn't use it for this, but you could call reduce on an n-item sequence to cause f to be called n times. For example:Explanation:n is assigned each successive return value of f._ is the list of numbers from range(100). These numbers are all ignored. All that matters is how many there are.42 is the starting value.100 nested calls to f(f(f...(f(42))...)) results in 142.
In Python, a for loop is the most ergonomic and readable way to do this. So I would consider this mostly an exercise â€” these are more natural to use in functional languages.functools.reduce collapses a list of values to a single value by repeatedly calling a function of two arguments. Here's factorial:We can abuse this to use a list of values for its length only and ignore the actual contents.Or we can string together n copies of the (unary) function in a list and collapse them by applying each one to the accumulated value.
While it is not clear from your example if you are trying to calculate a final numerical result or accumulate a list of values, you can use a very simple recursive approach with a lambda function:Single value:List of values:
The construct would be recursion. But recursion requires that your call stack ends at some point. Such a case could work with an algorithm such as:This is typically the approach used to compute results such as the factorial.To use an example, adding a requirement (that you only compute if x < 2, just as an example):The key is that there be a point at which the call stack starts returning (to avoid an overflow)
You could add the function itself in the return line of the definition. An example would be the top answer here How can I build a recursive function in python?
You could factor out recursion:If you're into something better than a one-liner, recursion can be abolished:Then:
What I think you're asking about is concept called Recursion. You could use something like a lambda function but recursive calls in a for loop aren't inherently bad. I'd go read more about recursive functions in general and then look for python implementations specifically. 


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
