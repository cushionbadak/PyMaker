Natural Text
Here's my code:My quotient displays as 1.00000e-05Is there any way to suppress scientific notation and make it display as0.00001? I'm going to use the result as a string.
but you need to manage precision yourself. e.g.,will display zeros only.details are in the docsOr for Python 3 the equivalent old formatting or the newer style formatting
Using the newer version ''.format (also remember to specify how many digit after the . you wish to display, this depends on how small is the floating number). See this example:as shown above, default is 6 digits! This is not helpful for our case example, so instead we could use something like this:UpdateStarting in Python 3.6, this can be simplified with the new formatted string literal, as follows:
With newer versions of Python (2.6 and later), you can use ''.format() to accomplish what @SilentGhost suggested:
This will work for any exponent:
This is using Captain Cucumber's answer, but with 2 additions.1) allowing the function to get non scientific notation numbers and just return them as is (so you can throw a lot of input that some of the numbers are 0.00003123 vs  3.123e-05 and still have function work.2) added support for negative numbers. (in original function,  a negative number would end up like 0.0000-108904 from -1.08904e-05)
If it is a string then use the built in float on it to do the conversion for instance:print( "%.5f" % float("1.43572e-03"))answer:0.00143572
In addition to SG's answer, you can also use the Decimal module:
Using 3.6.4, I was having a similar problem that randomly, a number in the output file would be formatted with scientific notation when using this:All that I had to do to fix it was to add 'f':
Since this is the top result on Google, I will post here after failing to find a solution for my problem. If you are looking to format the display value of a float object and have it remain a float - not a string, you can use this solution:Create a new class that modifies the way that float values are displayed.You can modify the precision yourself by changing the integer values in {:f}


Answer URL
https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498
