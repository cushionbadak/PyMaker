Natural Text
Python itemgetter doesn't return tuples of length 0 or 1. For example:Is there any good reason that the itemgetter is written this way?  And not (1,) for the second last () and for the last? Is there some other built-in option if I always want to return a tuple/list given the keys?
Is there some other built-in option if I always want to return a  tuple/list given the keys?just use a comprehension:In context:
Part of your confusion comes from the fact that your get_something() func takes a single argument (expected to be an iterable) and unpacks it when passing it to itemgetter(). This results in the return value of get_something() not being "symetric" with it's arguments. If you defined get_something() to use varargs instead (as itemgetter() does) :the return values would be more consistant with the arguments, ie:Now the point is that few people would bother using itemgetter() to implement your get_something function - itemgetter has mainly been designed to be used as a callback for sorted() and like functions / methods (where it's current behaviour makes sense), and get_something would more canonically be implemented with a list expression ie:which would take an iterable and return a (possibly empty) list.
This behavior is documented in the docs (emphasis is mine):Return a callable object that fetches item from its operand using the  operandâ€™s __getitem__() method. If multiple items are specified,  returns a tuple of lookup valuesitemgetter does not decide the return type, it is the operand's __getitem__() method.Wouldn't it be easier/better"better" is subjective. You can always wrap itemgetter:


Answer URL
https://docs.python.org/3/library/operator.html#operator.itemgetter
