Natural Text
Using __name__ inside a method references the module where the class was defined.Is there a way instead for an object to get the module where it has been instantiated?
So - Python's dynamism allows a function to check the frame object where it was called from. .It would be better if you could pass the module explicitly to the class constructor, though:And in the other files:But, as I mentioned in the first line, you can get to the code callinga module - save if you have an specialized metaclass, the code calling one class's __init__ is where the object is instantiated. So you can write:The Frame object is an internal Python object that keeps the execution state of a code context while the program is being run. It contain references to globals and locals variables available to that frame, as well as code object, current source line, and so on. The topmost frame (0) is the current frame in execution  - the second one to the top (1) is the direct caller of the current function/method. The frame .f_globals attribute is a direct reference to the globals dictionary - the same that would be returned if one would call globals() inside that frame.


Answer URL
https://docs.python.org/3/library/inspect.html#the-interpreter-stack
https://docs.python.org/3/library/sys.html#sys._getframe
