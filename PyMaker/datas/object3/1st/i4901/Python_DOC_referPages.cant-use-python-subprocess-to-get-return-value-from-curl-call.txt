Natural Text
So I am trying to write a simple wrapper in python to call rasa, a nlu tool from. The command I would write on the the command line is this:curl -X POST "localhost:5000/parse" -d '{"q":"I am looking for fucking Mexican food"}' | python -m json.toolThe output I expect is something like this:% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                   Dload  Upload   Total   Spent    Left  Speed  100   545    0   500  100    45  33615   3025 --:--:-- --:--:-- --:--:-- 35714plus the outprint of a json file. I wrote this program in python: Unfortunately my output is like this, meaning I dont actually get the return from the curl call: {'args': ['curl', '-X', 'POST', 'localhost:5000/parse', '-d', '\'{"q":"Lets say something"}\'', '|', 'python', '-m', 'json.tool'], 'returncode': 2, 'stdout': b'', 'stderr': None}If I call my python programm from the commandline, this is the output:curl: option -m: expected a proper numerical parameter  curl: try 'curl --help' or 'curl --manual' for more information  {'args': ['curl', '-X', 'POST', 'localhost:5000/parse', '-d', '\'{"q":"Lets say something"}\'', '|', 'python', '-m', 'json.tool'], 'returncode': 2, 'stdout': b'', 'stderr': None}I tried looking everywhere but just cant get it going. Would really appreciate some help.
Update: I grossly misunderstood the question the first time.  Rushed reading the details, so my apologies there.  You are having a problem because you are trying to pipe two commands together using Popen.  The pipe operator, however, is something implemented by the shell, not python.  So it is expecting your command to just be a command related to curl.  It is complicated, but you have options.I think for your particular example, the simplest is to not try to chain the command to json.tool.  You actually have no need for it.  You are already in python, so you can just pretty print the output you get from curl yourself.  Using python would look something likeHowever, if what you want long term is to actually connect multiple processes with pipes, well there it depends on the scenario.  The easiest method is to pass shell=True to Popen and pass the exact command (not a list of arguments).  This delegates everything to the shell.  I need to warn you that this is very exploitable when the command is based off user input.  Both 2.x pipes.quote() and 3.x shlex.quote() have a recommendation of how to escape the command so it should be safe.So if you find yourself needing to connect processes but have something based on user input, you can use multiple processes and connect them yourself.This question has a bunch more on the topic if you are curious.


Answer URL
https://docs.python.org/3/library/subprocess.html#security-considerations
