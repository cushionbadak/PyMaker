Natural Text
Python dicts/lists are not hashable but python objects are. This seems odd to me, particular because python dicts and python objects are nearly identical from a mutability stand point.I have a couple of theories:Two dicts can be equal without having the same id, and python enforces that equal instances must have the same hash. Objects don't have this behavior by default, but they can if __eq__ is overridendicts and lists are designed to be mutated. Having them hash to the same value before and after mutating is a foot-gunWhat was the design justification for this language feature?Update from comments:https://docs.python.org/3/glossary.html#term-hashableThis explains why dicts/lists aren't hashable sinceHashable objects which compare equal must have the same hash value.But why was this rule decided on?
Good article that explains hashable and equality problem.In general, I would say that decision to keep default object hashable was made because it covers more cases and still quite cheap. When doing the same for dicts and lists will produce unexpected result most of the time.


Answer URL
https://docs.python.org/3/glossary.html#term-hashable
