Natural Text
I have an issue with using a class to decorate another class's method. Code is as followsIt shows this error TypeError: func() takes exactly 3 arguments (2 given).if called usingthen it passes. But then if the decorator is taken away, then this line will have issue again.Why this is happening and how to solve it?EDIT: second version of the code to show the self in decorator.call should be different than the self in test.funcThis shows the same error. But works but not ideal.
To work as a method, an object in a class needs to implement part of the descriptor protocol. That is, it should have a __get__ method that returns a callable object which has been "bound" to the instance the method was looked up on.Here's one way that you could make that work, using a wrapper function:You could instead return an instance of some other class from __get__, rather than a function, and use the __call__ method of that other class to implement the wrapper. If you're not using a closure though, you'd need to pass the instance to the wrapper class explicitly (as well as the function, since self.func won't work outside the descriptor class).


Answer URL
https://docs.python.org/3/reference/datamodel.html#implementing-descriptors
