Natural Text
I would like to implement validation for Python 3.6 type annotation within my project.  I have a method that uses __annotations__ dict to check if all attributes of the class have the correct value. It works perfectly for basic types like int, str or bool, but fails for more sophisticated elements like typing.Union or typing.Optional (which is also a Union).The failure is caused by isinstance() method within Union object that throws TypeError. I even cannot find a way to ensure that the annotation is a Union so I cannot validate if a value complies with a type. The typing module does not have any solution for it. Is there a way to validate if specified variable complies with typing.Union?
Yes. isinstance and issubclass were killed some time ago for cases like Union. The idea, as also stated in a comment on the issue by GvR is to implement your own version of issubclass/isinstance that use some of the extra metadata attached to types:__args__ and __origin__ are available as of Python 3.6.3. They might not in earlier versions since typing is still provisional. Until the internal interface for introspecting types is fleshed out and typing graduates from provisional status, you should expect breakage due to changes in the API. 


Answer URL
https://docs.python.org/3/library/typing.html
