Natural Text
I'm banging my head against the wall trying to figure out why this nested loop is miscounting the number of times an integer occurs in a list. I've set up a function to take two lines of input, n and ar, where n is the number of integers in ar and ar is the list of integers. My code is below:The counter seems to be increasing the count by 1 every time, which leads me to believe it's a problem with the nested loop.OKCount of 0 increased by +2Count of 0 increased by +3I understand there might be more efficient or "pythonic" ways to count the amount of times a number occurs in a list but this was the solution I came up with and as someone still learning Python, it would help to understand why this exact solution is failing. Many thanks in advance.
This is because for each distinct number in the list (call it x) you count the number of subsequent appearances. This is fine if a number only occurs twice but if it occurs multiple times you will over-count for each additional appearance.For example: [0, 0, 0, 0]. You iterate over the list and then for each item you iterate over the list that follows that item. So for the first 0 you count a total of 3 subsequent 0s. For the second however you will count a total of 2 and for the third a total of 1 which makes 6. This is why you have 3 too much in the end.You can achieve this task by using collections.Counter:
I'm not exactly sure that I can fix your specific problem, but would something like this work instead?I understand that you want to fix your existing work as a learning exercise, but I'm not sure that that approach is even the right one. As it is, I can't really tell what you're going for, so it's hard for me to offer specific advice. I would recommend that you don't throw good time after bad.
python has a method to do exactly what you're describing.It's called .count().If you do ar.count(3), it will return the number of occurences of 3 in the list ar.** In your case:**There's no need for a nested loop as you only need one loop.Try this:This would produce the dict you want with the numbers and their occurences
You can refer to other answers as to how you should solve this problem more efficiently, but to answer the question you're asking (Why doesn't this nested loop work?):To visualize what your nested loop is doing consider the following input:0 0 0 0 0Your algorithm will count the following:0 0 0 0 0  ^ ^ ^ ^ ^   (5)then,0 0 0 0 0    ^ ^ ^ ^  (4)then,0 0 0 0 0      ^ ^ ^ (3)then,0 0 0 0 0        ^ ^ (2)and finally,0 0 0 0 0          ^ (1)What happens is it counts the number of 0's multiple times over. In this instance it will count15 0's (5+4+3+2+1)
itertools are your friend


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
