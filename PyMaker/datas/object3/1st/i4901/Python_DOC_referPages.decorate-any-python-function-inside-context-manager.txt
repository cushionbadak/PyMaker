Natural Text
I would like to create a python context manager, which would allow the following (with reverse_decorator applying the decorated function with first argument reversed if it is string):to result in:The point is not the print function itself, but writing this kind of context manager, that could decorate any function - local, global, builtin, from whatever module.  Is this even possible in python? How should I do it?EDIT: To clarify a bit, the point was not to have to change the code inside the with context.
This is my approach:Output:This should work across functions and other modules and so on, since it modifies the attributes of the module or class. Class methods are complicated, because once you create an instance of a class its attributes point to the functions defined in the class at the time the object was created, so you have to choose between modifying the behavior of a particular instance or modifying the behavior of new instances within the managed context, as in the example. Also, trying to decorate methods of builtin classes like list or dict does not work.
It is possible if you modify it add a bit:Here is a definition that works for this example*:But its probably easier to just do it explicitly, following the Python Zen:*This code does not work under many circumstances, as @AranFey noted in the comments:Inside functionsIf the function you want to decorate is imported with import x from y as zIf you care that afterwards you have a print function defined in the globals(), instead of directly being a built-inSince this is more a proof-of-concept, that yes, one can write a decorator that works in this example, I will not try to fix these shortcomings. Just use the way I gave above, or use only the decorator:


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch
https://docs.python.org/3/library/sys.html#sys.setprofile
