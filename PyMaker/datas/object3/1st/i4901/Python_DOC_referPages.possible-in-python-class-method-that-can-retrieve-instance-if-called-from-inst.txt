Natural Text
Thinking about this and I'm wondering if it is possible (and if so, how to make such a decorator etc.) to have a classmethod, that IF called from an instance, can retrieve data on the instance?  Perhaps some more clarity on how the staticmethod and classmethod decorators work would be helpful too (looking at the implementation __builtin__.py did not help)Example use would be:So that we could do:I came up with this below to mimic the behavior but its pretty inconvenient to implement:
To expand on the comments made by @Adirio You could make a decorator that accomplishes this dynamically.In this particular implementation, when the decorated method is called it will do a partial bind of the provided arguments to the method and uses the method's signature to determine what parameters have not been provided. For any unspecified argument, if the calling object has an attribute matching the unspecified parameter name, the object's attribute value will be injected into the function.Then suppose you have the following class using this decoratorThen the following behavior would be observedIn this particular case ba.apply_defaults is called before checking the object's attributes to inject. If you want the object's attributes to take precedence over defaults, call ba.apply_defaults after the parameter injection logic.
When you try you example, you get an error saying AttributeError: type object 'A' has no attribute 'y', because in constructor, you assigned y as an attribute of the object and not of the class.The trivial fix:Would indeed solve the error, but as the class will only know one single object at a time, you would get weird result as soon as you use more than one:So the only foolproof way is to create an attribute with the name of the class function in each object. As you only call a class method, a lamdba is enough:You can then safely do:
Do not forget to handle error cases.
With the help of docs.python.org/3/howto/descriptor.html I came up with this, seems to work:Testing:


Answer URL
https://docs.python.org/3/howto/descriptor.html
