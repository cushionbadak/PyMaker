Natural Text
I have a program spread across 2 files using the twitter api. One file is dedicated to sending and reading tweets, so I have put the 'import twitter' line in that file. The second file has an import statement to import this twitter-based file and will call the "read" and "post" functions from that file. This is the gist of the code:File 1:File 2:This works fine and acts exactly as I expect it to, but I'm not sure if this is the most efficient way, performance wise, of running this. Will the 'import twitter' line be run every time file 2 is called and fill up memory and time with duplicate imports? And if so, would I be better with this:File 1:File 2:Where the api object is being passed across files.Thanks
Import caches all imports, so with multiple imports they will just access the cached version after the first time an import is performed. See https://docs.python.org/3/reference/import.html for details of how this works.Generally speaking you should create your import structure around the concept of modules being correct, performance shouldn't be a large factor in this decision, because honestly when you get the import structure right there won't be that much of a performance difference. If you use something from a module in a file you should explicitly import that module. Related to this make sure that every module you use can be imported directly without error, this will help you design your modules better and avoid a class of subtle bugs where changing the order of importing can cause errors due to the caching mechanism in importlib.


Answer URL
https://docs.python.org/3/reference/import.html
