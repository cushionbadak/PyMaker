Natural Text
Object: to produce a dict showing which unique values in base[2:] (captured in the list uniques) are associated withbase[1] values (i.e. 5001, 5002 etc.).The code below works but is too slow for the amount of data Ineed to process so I'm looking for a faster way to achieve this.
Rather than loop over all of records again and again, invert the loop. Make uniques a set for fast membership testing, and loop over records just the once.Even better, that set can be handled by the dictionary keys:In Python 3, dict.keys() is a dictionary view object which acts like a set. You can create an intersection with that set with the & and operator. If you are using Python 2, replace uniques_dict.keys() with uniques_dict.viewkeys() for the exact same behaviour.Set intersections are fast and efficient; you still need to match each element in record[2:] against the key set still, but it is O(N) loop rather than a O(NK) loop as each key test is a O(1) operation independent of K = len(unique_keys).Demo:If uniques is a strict superset of all possible values in base[*][2:], then you don't have to even calculate those up front. Just create dictionary keys as you go along, and use a set() on each record[2:] list to only handle unique values. The uniques_dict values should also be sets to eliminate duplicate keys added:Now list(uniques_dict) is your list of uniques, built as you process base:


Answer URL
https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
