Natural Text
I am completely baffled at this seemingly simple problem that I have.  I want to define a function that will take the input, which can be a str or int and double it.  For example, if the input is 'foo', then the output will be 'foofoo'.  Likewise, if the input is (9), the output will be 18.  Can somebody point me in the right direction?Here is what I have so far:
What about:or Both should work as:the + operator is overloaded to perform concatenation when arguments are strings;the * operator is overloaded to "duplicate" when one argument is a string.As Python is dynamically typed, the choice of the real operation performed will be made at run-time, depending the type of the operands.More formally, to quote the documentation:The * (multiplication) operator yields the product of its arguments. The arguments must either both be numbers, or one argument must be an integer and the other must be a sequence. In the former case, the numbers are converted to a common type and then multiplied together. In the latter case, sequence repetition is performed; a negative repetition factor yields an empty sequence.[...]The + (addition) operator yields the sum of its arguments. The arguments must either both be numbers or both be sequences of the same type. In the former case, the numbers are converted to a common type and then added together. In the latter case, the sequences are concatenated.If you're curious, from the sources or Python3.3.6/Objects/abstract.c (The code for PyNumber_Mul is quite comparable) :As you can see, the interpreter will first try to perform an addition using the special method __add__ defined for the left operand. If this one returns NotImplemented, it will try to interpret the left operand as a sequence and perform a concatenation.
Just multiply the input by two. If it is a string, it will concatenate twice. If it is a number, it will double.Look at the Python Documentation. This is taken straight from it.Strings can be concatenated (glued together) with the + operator, and repeated with *:


Answer URL
https://docs.python.org/3/reference/expressions.html#binary-arithmetic-operations
