Natural Text
i am trying to compute time intervals per day from a list of unix timestamps in Python. I have searched for simular questions on stack overflow but mostly found examples of computing deltas or SQL solutions.I have a list of the sort:I can easily turn this list of timestamps into datetime objects using:From there I can probably write quite a lengthy code where the first day/month is kept and a check is done to see if the next item in the list is of the same day/month. If it is I look at the times, get the first and last from the day and store the interval + day/month in a dictionary.As I am fairly new to Python I was wondering what is the best way to do this in this programming language without the abusive use of if/else statements.Thank you in advance
If the list sorted as in your case then you could use itertools.groupby() to group the timestamps into days:OutputIf there is only one timestamp in that day than it is repeated twice.how would you afterwards do to test if the last (for example) 5 entries in the result have a larger interval than the previous 14? 
You can use collections.defaultdict. It's amazingly handy when you're trying to build a collection without inital estimates on size and members.From this, intervalsByDate is now a dict with values as a list timestamps sorted based on the calendar dates. For each date you can sort the timestamps and get the total intervals. Iterating the defaultdict is identical to a dict (being a sub-class of dicts).Now output is a map of dates with intervals in miliseconds as the value. Do with it as you will!EDITIs it normal that the keys are not ordered? I have keys from different months mixed togheter.Yes, because (hash)maps & dicts are essentially unorderedHow would I be able to, for example, select the first 24 days from a month and then the lastIf I was very adamant on my answer, I'd maybe look at this, which is an Ordered default dict.. However, you could modify the datatype of output to something which isn't a dict to fit your needs. For example a list and order it based on dates.
Just subtract the 2 dates from each other. This will result in a timedelta instance.See datetime.timedelta:https://docs.python.org/2/library/datetime.html#timedelta-objectsCombine this with row slicing and zip to get your solution. An example solution would be:This also works for adding or subtracting a certain period from a date:I don't have an easy solution for adding or subtracting months or years.


Answer URL
https://docs.python.org/3/library/stdtypes.html#typesmapping
