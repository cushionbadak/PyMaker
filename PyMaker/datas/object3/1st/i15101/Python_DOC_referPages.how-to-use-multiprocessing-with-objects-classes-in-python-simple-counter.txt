Natural Text
I want speed up program in Python with use true multi threading. As I learned I need to use multiprocessing since threading produced threads on one cpu what is not need and slows down my program.First of all I want to write simple working program using multiprocessing to modify object instance.Let it be counter since simple to explain what counter should.The result of this program is not what I want or except (should be COUNTS = 10):How can I simply - please help:Pass object to other "processes/threads"?Lock object variable in other "processes/threads"?I am good at threading/parallelism but has no idea how to do it with Python threading (rather multiprocessing) - it looks that is possible.
multiprocessing is not threading so your example does not quite do what you expect it to do. multiprocessing uses fork, so your child processes runs fine doing job on their copy of your object and then exiting discarding the changes. What you could do is to use callback on apply_async to gain some visibility into what's going on, but you can't just share your member variable. You can share state between processes by using value, array or manager as mentioned in the comments.So just to reiterate, if you want threading use threadig (it's still there), but if you want parallelization then you have to use multiprocessing in Python but then you will have to adjust your design as you don't have same access to your subprocesses as you do with threads.edit: also you can use the result object returned from apply_async to fetch a result, which will most likely give you what you want.Hope this helps.


Answer URL
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.AsyncResult
https://docs.python.org/3/library/multiprocessing.html#managers
