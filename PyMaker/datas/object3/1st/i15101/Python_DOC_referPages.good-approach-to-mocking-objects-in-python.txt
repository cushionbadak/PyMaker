Natural Text
I'm trying to understand Python Mock to better unit test my code.  I haven't done much unit testing in the past, but I want to emphasize it moving forward.  The "with mock.patch('something') as mock:" syntax seems really handy for mocking objects that my code is utilizing.  This has been especially convenient for mimicking database or API calls.However, I'm noticing as the number of tests I write go up, so does the duplication in my tests.  If I have multiple classes used within my class (MyClass below) that need to be mocked, I need to mock them for multiple tests even if they aren't being directly used for a particular test.  For example:In this case, MockClassA, B, and C might talk to a database or make an API call, which I don't actually want to do during testing.  But since my class is using each, I need to mock all of them for all tests.  Is there a better way to do this?EDIT: fixed my code to reflect that I'm using Mamba for unit testing.  I apologize for not mentioning that initially.
Is not just a case if patch documentation starts withpatch() acts as a function decorator, class decorator ....Use patch as decorator is one of the best way to improve readability and simplicity. Your case become Moreover if you want to make the same patches for all test cases you can decorate the class instead of single methods. As documented here decorate a class by one of patch decorators act like patch all methods that starts by patch.TEST_PREFIX. In your case we use the default value for patch.TEST_PREFIX and we can write:Finally you can use patch.multiple to patch a set of attributes. In that specific synthetic case seams very powerful but in the real word cases its use is very rare:Consider to use setUp() and tearDown() if you need to create objects useful for a lot of tests (every test unit framework have something like this). You can either use setUp() and tearDown() to start and stop patches context but my taste is that decorators and with context are more readable. 


Answer URL
https://docs.python.org/3/library/unittest.mock.html#patch
https://docs.python.org/3/library/unittest.mock.html#test-prefix
https://docs.python.org/3/library/unittest.mock.html#patch-multiple
https://docs.python.org/3/library/unittest.mock.html#test-prefix
