Natural Text
I get this error message:SyntaxError: duplicate argument 'p1' in function definition onTraceback (most recent call last):  File "python", line 45, in   File "python", line 34, in cencdTypeError: unsupported operand type(s) for -: 'method' and 'method'please assist."""working solution """"
Both getX and getY are methods in your code, not attributes. So you will need to call them using getX() and getY().So ma=(p2.getY-p1.getY)/(p2.getX-p1.getX) becomes:And so on, the other code changes.Otherwise, you can also define your methods as @property:And now you can access these as p1.getX and p2.getY and so on.Note that the above @property decorator turns the method into a getter, which makes sense to use only with private variables (variables defined to start with _).As such, since both x and y are normal attributes of your class, you can access them directly without using and property decorators or using getter methods, like p1.x and p2.y, as @Padraic points in his post.
You don't need getters or setters in python nor is it pythonic to use them, you should access the attributes directly:
As Padraic Cunningham said, we don't need getters or setters in Python, but as mu said we can make getters if we want, but normally they are used to get "fake" attributes that are actually computed from true attributes. For example, in the code below I've added a fake norm attribute to your Point class.I've also added a few more double-underscore methods (aka dunder methods or magic methods) to your class. These methods are discussed in the official Python docs. One of the most common dunder methods is __repr__() which should return a string that corresponds to how you create an instance of the class. This is especially handy when you're using a class in the interactive interpreter. FWIW, if a class doesn't define a __str__() method its __repr__() method will be used if you attempt to turn a class instance into a string. If a __repr__() method hasn't been defined a default one will be used.The other dunder methods I've added make it easier to perform arithmetic operations on points; this can make code easier to write and to read. I think you'll agree that it makes the cencd() function a little clearer. (I'm not sure exactly what that function's supposed to do; I assume you've got the algebra correct :) ).This code was tested on Python 2.6.6; it should run ok on Python 3 without modification.output


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-names
