Natural Text
Let's say I have a long list of this type:Given the first elements, I want to construct a dictionary that would show a count of the second elements. For example in the particular example above, I'd like to have something like this:Here's how I unsuccessfully tried to solve it. I constructed a list of unique first elements. Let's call it words and then:I get an obviously erroneous result. One problem with the code is, it overcounts pairs. I am not sure how to solve this. 
You should do this instead:that is, you should be doing dic[word] rather than dic[pair[0]], which will assign the inner_dic to the first element in the last pair checked, even if pair[0] isn't word.
The collections module makes short work of tasks like this.Use a Counter for the counting part (it is a kind of dictionary that returns 0 for missing values, making it easy to use +=1 for incrementing counts).  Use defaultdict for the outer dict (it can automatically make a new counter for each "first" prefix):Here is the equivalent using regular dictionaries:Either the short way or the long way will work perfectly with the json module (both Counter and defaultdict are kinds of dicts that can be JSON encoded).Hope this helps.  Good luck with your text analysis :-)
You can use a defaultdict combined with a Counter dict:The defaultdict will create a new key/value pairing where the value is a Counter dict if the key does not exist, if the key exists we just update the value using Counter.update which unlike dict.update will increment the value not overwrite.using a normal dict without imports we can use dict.setdefault which will create a new dict as a value for each key k and set a default value of 0 for each subkey v:
Here is a way using the .setdefault method:No external library required.



Answer URL
https://docs.python.org/3/library/collections.html#module-collections
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/json.html#module-json
