Natural Text
I was trying out caching using descriptors using below codeBoth the calls to print take 5 seconds which is not how it should work. But if I remove the __set__ method that I had added, caching works fine. I couldnt figure out why caching does not work as expected with the __set__ method in the descriptor class.Any pointers appreciated. I am using Python 3.4.1Ref: http://www.pydanny.com/cached-property.html
You hit upon the difference between a data descriptor and a regular descriptor. Data descriptors are handled before instance attributes, while regular descriptors are handled after.See Invoking Descriptors in the reference documenation:If the descriptor defines __set__() and/or __delete__(), it is a data descriptor; if it defines neither, it is a non-data descriptor.[...]Data descriptors with __set__() and __get__() defined always override a redefinition in an instance dictionary. In contrast, non-data descriptors can be overridden by instances.Emphasis mine.And from the Descriptor HowTo Guide:If an object defines both __get__() and __set__(), it is considered a data descriptor. Descriptors that only define __get__() are called non-data descriptors (they are typically used for methods but other uses are possible).Data and non-data descriptors differ in how overrides are calculated with respect to entries in an instance’s dictionary. If an instance’s dictionary has an entry with the same name as a data descriptor, the data descriptor takes precedence. If an instance’s dictionary has an entry with the same name as a non-data descriptor, the dictionary entry takes precedence.Your TestDecs descriptor has a __set__ method, so it is considered a data descriptor, and the instance attribute is not consulted to allow the setter to always be invoked.


Answer URL
https://docs.python.org/3/reference/datamodel.html#invoking-descriptors
https://docs.python.org/3/howto/descriptor.html#descriptor-protocol
