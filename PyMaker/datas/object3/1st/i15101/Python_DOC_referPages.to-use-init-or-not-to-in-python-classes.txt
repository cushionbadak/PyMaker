Natural Text
I have always defined variables for classes like:However, I discovered it is also simply possible to use:In both cases, a new instance will have a variable x with a value of 1.Is there any difference?
For further reading, in the Python Tutorial chapter on classes, that matter is discussed in detail. A summary follows:There is a difference as soon as non-immutable data structures take part in the game.In that case, the same instance of x is used for both class instances. When using __init__, new instances are created when a new A instance is created:In the first example, a list is created and bound to A.x. This can be accessed both using A.x and using A().x (for any A(), such as a1 or a2). They all share the same list object.In the second example, A does not have an attribute x. Instead, the objects receive an attribute x during initialization, which is distinct for each object.
Your question is very imprecise. You speak about "variables for classes", but later you say "instance will have a variable". In fact, your examples are reversed. Second one shows a class A with a variable x, and the first one shows a class A with no variable x, but whose every instance (after __init__, unless deleted) has a variable x.If the value is immutable, there is not much difference, since when you have a=A() and a doesn't have a variable x, a.x automatically delegates to A.x. But if the value is mutable, then it matters, since there is only one x in the second example, and as many xs as there are instances (zero, one, two, seventeen,...) in the first one.


Answer URL
https://docs.python.org/3/tutorial/classes.html#class-and-instance-variables
