Natural Text
So I have a button class that does something when clicked, but different buttons perform different functions. I was wondering if there is such a thing as anonymous inner classes in Python to override such a callback without creating a new class altogether for each type of button. I know that I can assign a callback attribute to call such a function, but I am just wondering if there is an anonymous inner class equivalent.In Java I can create anonymous inner classes to override the update method for close, play, pause, and all other buttons without creating an entirely different class.
Sure, you can (although probably shouldn't) just use type:You may prefer to define the function outside the expression, so as to be able to avoid code-golfing it:This does exactly what Java is doing, however it does so more explicitly, and thus, with a more cumbersome syntax. In fact in python you can define local classes:The only difference with respect to Java is that you must give a name to the class and use it to create an instance. Using a decorator you could avoid this last step:Used as:However, depending on how you are going to use that method, I'd suggest two different ways to handle the problem:Actually all the actions of the buttons are the same, except for some data. In this case it's probably better to just create an instance attribute (or a property) to hold that data, and change the data instead of the method:I mean something like this:You can just set the instance attribute to the callback you want:
You don't need to make an anonymous class -- python lets you replace methods with any callable (in fact, any object on the fly):is perfectly valid.EDIT:The Java approach doesn't actually save you from generating any class -- that class just doesn't have a name, so there's no "benefit" doing that.


Answer URL
https://docs.python.org/3/library/functions.html#type
