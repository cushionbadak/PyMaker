Natural Text
I would like to multiply all elements of a list by a number. I know the other ways to do it but I want to know Why isn't this working? I am getting the very same list as an output.
It isn't working because, you're using for loop on a list and defining/changing the num global variable, not the elements in lst list.For example:In this case, in the first loop, num is 1 (the first element in l), and sure 1 * 2 gives 2.Then, num become 5 since 5 is the second element in the list. After num * 2, num become 10.In the second for loop, it become 8 * 2, 16. it doesn't change again because the for loop is ended. However, you didn't change anything of the list during this loop. Because for only gets the elements in the list, and put it into a temporary variable. And when you change that temporary variable inside the for loop, you didn't change anything of the list.
Well, since you wrote "I know the other ways to do it but I want to know Why isn't this working?", here is your answer: You are only modifying the temporary loop variable num, not the list itself. Try this:
You are not changing the elements of the lst, do it like this:
Two clean expressions:to change in-place:to produce a new list:For input I'd prefer explicitly splitting and converting a string:
You need to update the lst.
It's better to use ast.literal_eval then eval due to safety. You could read about it here. You could solve that with list comprehension:List comprehensions are faster then map with lambda. Timing:
As everyone else pointed out, the correct way to do this is by indexing into the list:A Little Bit About Pass By AssignmentYour loop, which uses the for num in list notation does not modify the list.  Because the loop variable num takes a value of type int at each iteration of the loop, since ints are immutable (i.e its value cannot be changed) in python, num gets a copy of the integer value.  This changes when the object in the list is mutable and is passed by reference.  Consider the following:Now, since myList contains a list of X objects which are mutable, the loop variable el has a reference copied into it. The reference points to the same object in memory that the reference in original myList points to.    So when you change the object using the loop variable, the objects referred to in the original myList are also changed.This Pass By Reference talks about it in greater depth.


Answer URL
https://docs.python.org/3/library/ast.html#ast-helpers
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
