Natural Text
I have a non-GUI PyQt application that I want to performs some clean-up tasks and print a message after quitting the event loop. This application runs as a subprocess to a larger application. When it receives a SIGTERM signal, it quits the application.According to the documentation for QCoreApplication.quit(), the program should then return control to just after the call to exec_(). But instead, it seems to exit immediately.Platform is Opensuse 13.2 x86_64.
Your issue probably is that Python handles signals while it's running Python code - basically something like:Did a signal occur?If so, call signal handlerExecute next executionHowever, while your application is in the Qt mainloop, it's inside C++ code, so Python never has a chance to react to the signal.I know of two solutions for the problem:Polling for signalsThis simply executes a little bit of Python code all few seconds using a QTimer:The drawback is that it takes up to 1s to react to signals, and you're "pointlessly" running some code once per second - waking up the CPU all the time might be a problem for e.g. power consumption too, but I don't have any evidence to back up this claim, it's more of a guess.It's however the only solution which works on Windows.Polling for signals using a wakeup filedescriptorThis uses a QSocketNotifier with a pipe and and signal.set_wakeup_fd to listen to signals.Combining the approachesThe complete code I have in my application to handle signals looks something like this:


Answer URL
https://docs.python.org/3/library/signal.html#signal.set_wakeup_fd
