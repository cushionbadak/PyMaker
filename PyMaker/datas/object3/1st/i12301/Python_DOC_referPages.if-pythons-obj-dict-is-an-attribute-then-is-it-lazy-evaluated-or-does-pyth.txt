Natural Text
I just read the Python's __dict__ is actually an attribute, not a method.  And vars(obj) is the same as obj.__dict__.If __dict__ is an attribute, then does Python actively maintain it (seems unlikely), or lazily compose it -- and how?
The way I picture it is that an object stores it's attributes in a dictionary, which you can access viaThat is a dictionary, not a string.  It is print(obj.__dict__) or str(obj.__dict__) that creates a string from a dictionary.The attributes can also be accessed by name, which is translated into a method call, and (effectively) dictionary access.And as you note vars(obj) is another way of fetching this dictionary.The interpreter maintains a large number of dictionaries, including one attached to each object (with a few exceptions).  But don't confuse maintaining a dictionary with the act of displaying it.  The dictionary exists whether you print it or not.And as discussed in the comments, one object's dictionary can contain pointers to other objects, each of which will have their own dictionary of attributes.


Answer URL
https://docs.python.org/3/reference/datamodel.html#implementing-descriptors
