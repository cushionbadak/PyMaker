Natural Text
Lately, I've been prototyping a lot of C algorithms in Python. In order to help me make the most accurate models, I tried to create a custom data-type that I could use for seamlessly mixing fixed-width integers (uint8_t and friends) with standard Python math.Towards that end, I wrote a little custom class that provides modulo-wrapped math and logic functions (to ensure that adding '1' to an 255 will return a value of 0 on an 8-bit variable).Everything seemed to go smoothly, except that my custom math functions don't seem to get called by the interpreter!Using the code below:I get the following results:If I manually declare all of the functions with a pattern like,everything seems to work as shown below:I really don't want to clutter up the code with 12 identical methods if I can avoid it. How can I make the interpreter correctly detect that __add__ and friends were created during __init__()?
As stated in the official documentation magic methods must be defined on the class, not the instance.You have two options to solve your problem:1. use old-style classesIn old-style classes (it's not like i recommend to use them) you can define magic methods on the instance and they will work. You only have to change the lambda function, because they are only passed one parameter (self is implicit here)2. define the methods on the classTo avoid that extra call to static_init you can create a meta class and add the magic methods in its __init__()2b. with metaclass


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-lookup
