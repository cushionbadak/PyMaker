Natural Text
I need to quickly hash a dictionary (a counter), and I’m noticing that python seems to order dictionaries with the same keys in the same order, even if they are constructed differently. In fact the dictionaries seem to be able to survive quite a bit of abuse:My question is then, if my dictionaries have the same keys and the same values, can I count on the keys being in the same order, at least for the lifetime of that running instance of python?Note that I’m aware python is a bit incomprehensible in how it decides to order a dictionary, but I want to know if given the same inputs, the same instance of python will return the same key ordering each time.
In terms of the language definition, no you cannot rely on stable ordering, because it is not promised in the language definition. Now, it might be that over the short- and medium-term you will find that this ordering is stable, and this makes sense: computers are deterministic, so it's reasonable to expect the same results from one iteration of the experiment to the next. (however, since they are complex systems, this nondeterministic machine might still produce unexpected results, since you don't know the factors that are determinant) However, this reasoning does not extend to the long-term, which is what you should be programming to, because the language implementation is free to choose any means of ordering those keys that it likes, and to change that choice at any time, as long as the implementation is consistent with the language definition. This means that programs depending on some order remaining stable are subject to breakage if run under different implementations, and they are subject to breakage when the implementation is updated. This is not a place you want to be, therefore you should not make any assumptions about the stability of ordering of dictionary keys.That being said, if you are only concerned about stability just across the lifetime of one running instance of python then this seems like a safe gamble - again, computers are deterministic - but still a gamble. Test carefully against cases rather more complex than the ones you're expecting to encounter, and then decide whether that chopping block looks like a comfortable place to rest your neck. 
Regular python dicts are not ordered. It is never guaranteed that when you get the list of keys that they will be the order you expect them to be.If you want to preserve order, use an ordered dict.https://docs.python.org/2/library/collections.html#collections.OrderedDict
if my dictionaries have the same keys and the same values, can I count on the keys being in the same orderNo.
Given that nobody mentioned this yet, I'll tell you that hash randomization is enabled by default since Python 3.3.With hash randomization, the result of hash('abc') is different between each Python run. Because hashes are at the base of dictionaries (they are used to determine the location of the item in the internal array used by dict), there are even fewer guarantees about ordering.


Answer URL
https://docs.python.org/3/whatsnew/3.3.html
