Natural Text
I am writing a python method to dump the entire contents of a MySQL table. However, this table contains personally-identifiable information (PII). I have a requirement that this data must be GPG-encrypted. Additionally the requirement is that none of this data is allowed to be written to disk in unencrypted form (even if that is just a temporary file that is later removed)I have temporarily solved this problem as follows by using the subprocess.Popen() and piping the output of the mysql executable directly to the gpg executable and then piping that output to stdout:It works, but this seems to me like a terrible hack. It feels very wrong to fork shell processes to do this. So I want to do this natively in python (without popen()). I have a MySQLdb connection to the database. And the python-gnupg module can do the encryption on a file stream. But how can I convert the output of MySQLdb's fetchall() to a file stream? So far, all I have is this:How can I turn the output of fetchall() to a file stream so that I can send it to gpg.encrypt_file() without writing a temporary file to disk that is unencrypted? There could be millions of rows of data. So reading it all into memory at once is not a viable solution.
You can use a file-like object similiar to io.StringIO or io.BytesIO from the io module. Looking at the latest source code there is no encrypt_file anymore, instead encrypt wraps the data in a binary stream using StringIO or BytesIO depending on the Python VersionSo nothing actually stops you from using encrypt directly, if you want more control on how the data is encrypted you can implement a dummy file-object or just write your data to an io.BytesIO object.


Answer URL
https://docs.python.org/3/library/io.html
