Natural Text
I've got a list of Python objects that I'd like to sort by an attribute of the objects themselves.  The list looks like:Each object has a count:I need to sort the list by number of counts descending.I've seen several methods for this, but I'm looking for best practice in Python.
More on sorting by keys Â» 
A way that can be fastest, especially if your list has a lot of records, is to use operator.attrgetter("count"). However, this might run on an pre-operator version of Python, so it would be nice to have a fallback mechanism. You might want to do the following, then:
Readers should notice that the key= method:is many times faster than adding rich comparison operators to the objects. I was surprised to read this (page 485 of "Python in a Nutshell"). You can confirm this by running tests on this little program:My, very minimal, tests show the first sort is more than 10 times slower, but the book says it is only about 5 times slower in general. The reason they say is due to the highly optimizes sort algorithm used in python (timsort).Still, its very odd that .sort(lambda) is faster than plain old .sort(). I hope they fix that.

Object-oriented approachIt's good practice to make object sorting logic, if applicable, a property of the class rather than incorporated in each instance the ordering is required.This ensures consistency and removes the need for boilerplate code. At a minimum, you should specify __eq__ and __lt__ operations for this to work. Then just use sorted(list_of_objects).
It looks much like a list of Django ORM model instances.Why not sort them on query like this:
Add rich comparison operators to the object class, then use sort() method of the list.See rich comparison in python.Update: Although this method would work, I think solution from Triptych is better suited to your case because way simpler.


Answer URL
https://docs.python.org/3/howto/sorting.html
