Natural Text
A silly question, but this is bugging me (regardless of downvotes for my imbecility!): I think I have picked up a nonsensical fear of generating data outside of a method that method uses (without changing), but I am unsure if this is the case.Let's say I have a method myfx, that will need some dictionary datadex that requires a lengthy operation to make, but will be common to all the calls during that session. The simplest, but not doable, way is:but that will waste too much time. So the best thing would be to make it in the main scope once as one does with class variables:However, I do not know why, but I go to great lengths to avoid this. It is inelegant, but I don't think that is the case. I generally resort to closures:Or worse making a class. I code nearly exclusively in Python and JS. My best guess is it is a throwback from my Perl coding days —Subconsciously I somethinge find myself writing variables first alla Pascal, so I think some habits linger as shadows—, but that would not explain the class or closure way as OO-Perl is completely different.
A class is the right way to encapsulate this behavior. You have some data that is shared by multiple function calls.While there are certainly other alternatives, this is going to be the most common and straightforward method in Python.
Python functions are objects and can have attributes, if you don't want to have your function inside a class you can do something like this:I guess that what you are trying to avoid is having a global variable.
if you really just want to avoid object oriented programming you can do the following to create a map where the get_dict() uses a generator to store the dict.


Answer URL
https://docs.python.org/3/library/functools.html
https://docs.python.org/3/library/functools.html#functools.partial
