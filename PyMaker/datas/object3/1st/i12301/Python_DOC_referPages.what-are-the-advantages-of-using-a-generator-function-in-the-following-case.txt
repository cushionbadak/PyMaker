Natural Text
The objective of my assignment is to produce list elements indefinitely.So I did this: The solution has something like this: The output although is same in both the cases:So how is generator function beneficial?
Use itertools.cycle()The generator does not add anything useful here. I would try to avoid pop(0) as it triggers a rebuild of the whole server list each time. I would recommend itertools.cycle():Output:Our wrapped in a function to match your usage:Output: Write you own generator functionTo make the point for a generator, a variation that takes advantage of its ability to store stet might more useful:While this illustrates nicely that you have state working with index, the same can be achieved more easily with:This avoids modifying the list of SERVERS. The result is the same:Output: How a generator worksA simple generator function:Make an instance:Use next to get the next value returned by yield:Keep going:Now it is exhausted:You may think of cursor that moves along in the generator function. Every time you call next() it moves to the next yield. So putting the yield in a while True loop makes an infinite generator. As long as you don't call close() on it, it gives you a new value with yield. Also, you have state inside the generator. This means you can do things like incrementing counters between calls to next().
A list is its own generator in this context:If you want an infinite generator, @MikeMÃ¼ller's itertools.cycle is preferred for not-reinventing-the-wheel. If you must do your own:but don't, it is less efficient and asks more of the code reader's memory.


Answer URL
https://docs.python.org/3/library/itertools.html?highlight=cycle#itertools.cycle
