Natural Text
How should a program generate a unique filesystem path and not createthe filesystem entry?The tempfile.mktemp function is strongly deprecated, and rightly so because it leaves the program vulnerable to insecure file creation.In some code (e.g. unit tests) I am calling tempfile.mktemp togenerate a unique path for a filesystem entry that I do not want toexist on the real filesystem. In this case the filesystem securityconcerns are irrelevant because there is no file.The deprecation of that function is a concern still, because I don'twant code that makes every conscientious reader need to decide whetherthe code is a problem. Instead the code should avoid rightly-deprecatedAPIs.It is also prone to that API function disappearing at some point in thefuture, because it is explicitly and strongly deprecated.Other functions provided by tempfile do not serve the need to avoid touching the filesystem at all, just to get a unique path.So I agree with the deprecation of tempfile.mktemp in general, but the library doesn't appear to provide a replacement for this purpose.What standard library function should I be using to generatetempfile.mktemp-like unique paths, and not ever create a real fileby that path?
AFAIK there is no such a standard function, which generates a unique name, but doesn't create a file.Take a look at the internal implementation of the "mktemp" function and create your own one...Here is the code that might be interesting for you:
This is a code maintenance question as much as a programming question. Here is one option to resolve it:create a wrapper function around tempfile.mktemp, with a descriptive name that matches your domain (e.g. something in the vein of create_database_path_name)in the implementation, write a comment above the tempfile.mktemp invocation explaining why it was carefully weighed, and considered safe for this usage, deprecation notwithstanding.The first step makes sure that the invocation of the deprecated function is contained in only one place. Second step makes sure that one place is well documented for future code review.If the deprecated function ever disappears from the module, you only have one place to fix, e.g. by copying the original implementation.
The reasons for mktemp deprecation is irrelevant to you because you don't plan to ever make the file. It generates random file names and that's what you want. If you are worried about reviewers that don't understand that, a simple comment would do. Alternately, you could create your own file name with something like base64.b64encode(os.urandom(20)).decode('ascii') and not offend their delicate sensibilities. 


Answer URL
https://docs.python.org/3/library/tempfile.html#tempfile.mktemp
https://docs.python.org/3/library/tempfile.html#tempfile.mktemp
