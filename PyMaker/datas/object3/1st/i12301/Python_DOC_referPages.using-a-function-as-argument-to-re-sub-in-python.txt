Natural Text
I'm writing a program to split the words contained in an hashtag.For example I want to split the hashtags:into:I'm having troubles when using re.sub with a functional argument.The code I've written is:For example when using these functions like this:The output I obtain is:Which is not the output I had expected:Why is this happening? In particular I've used the suggestion from this answer but I don't understand what goes wrong in this code.
Notice that m.group() returns the entire string that matched, whether or not it was part of a capturing group:m.group(0) also returns the entire match:In contrast, m.groups() returns all capturing groups:and m.group(1) returns the first capturing group:So the problem in your code originates with the use of m.group in sincewhereas if you had used .group(1), you would have gottenand the preceding # makes all the difference:Thus, changing m.group() to m.group(1), and substituting /usr/share/dict/words for corncob_lowercase.txt, prints since, alas, 'gob' is longer than 'go'.One way you could have debugged this is to replace the lambda function with a regular function and then add print statements:That would focus your attention on which you could then compare withThat would lead you to ask the question, if m.group() returns '#Whatthehello', what method do I need to return 'Whatthehello'. A dive into the docs then solves the problem.


Answer URL
https://docs.python.org/3/library/re.html#re.match.group
