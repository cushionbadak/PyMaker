Natural Text
In Python, everything is an object. What is the nature of variables? Explore it in an example:Here, both calls to dir() list the value’s (the int object for 1) properties and methods.And the calls to id() show that the object is the same in both cases.There does not appear to be a way to get information about the variable itself, instead of the object it references. Is there anything in Python to get information about the variable foo instead of the object it references?
Python’s variables are essentially just names for objects. These names are just labels for objects, so the only “property” of a name would be which object it refers to, which is exactly what you get by using a name. That being said, names to belong to something: A scope. Names are valid within the scope they are defined in, so if you can access that scope, it is possible to see the name. You can use locals() to access the current local scope:As you can see, there is the name foo in that scope, with the value it is referring to. But that’s really all there is. Apart from the name, the object they reference, and the scope they exist in, Python variables do not have any more properties. And they are not “objects” in the sense of Python objects, so they are an exception from the simplified statement “everything is an object”.For more information on names, see “Facts and myths about Python names and values” by Ned Batchelder.
id shows value's id and tell nothing about variable itself? Use which function can get its properties?Object ids are opaque: there is no (documented, reliable) way to go from an id to the object's properties. The primary use case for id() is to check whether two names refer to the same object.The fact that id(foo) happens to be the same as id(1) is an implementation detail. It does not hold in general:(Note how the two numbers are different.)
I will answer you with 2 posts: Yes, in python everything is an objectand id are like memory adresses in C. If you want only get your properties declared in the object, for me, the best choice is using sets: 


Answer URL
https://docs.python.org/3/library/functions.html#locals
