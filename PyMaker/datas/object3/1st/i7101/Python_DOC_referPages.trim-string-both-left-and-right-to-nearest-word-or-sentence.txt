Natural Text
I'm writing a function that finds a string near a identical string(s) in a larger piece of text. So far so good, just not pretty. I'm having trouble trimming the resulting string to the nearest sentence/whole word, without leaving any characters hanging over. The trim distance is based on a number of words either side of the keyword.what I've got so far is based on character, not word distance.However a regex could split it to the nearest whole word or sentence. Is that the most Pythonic way to achieve this? This is what I've got so far:Thank you.
You can use this regex to match up to N non-whitespace substring on either side of marble:2 words:RegEx Breakup:RegEx Demo1 word regex:
You can do this without re if you ignore the punctuation:
Using the ngrams() function from this answer, here's one approach which just takes all the n-grams and then chooses the ones with keyword in the middle:
more_itertools.adajacent1 is a tool that probes neighboring elements.CodeThe OP may adjust the final output of these results as desired.DetailsThe given string has been split into an iterable of words. A a simple predicate2 was defined, returning True if the keyword (or a keyword with a trailing period) is found in the iterable.A list of (bool, word) tuples are returned from the more_itertools.adjacent tool:OutputThe first index is True for any valid occurences of keywords and neighboring words with a distance of 1.  We use this boolean and itertools.groupby to find and group together consecutive, neighboring items.  For example:OutputFinally, we apply a condition to filter the False groups and join the strings together.Ouput1more_itertools is a third-party library that implements many useful tools including the itertools recipes.2Note, stronger predicates can certainly be made for keywords with any punctuation, but this one was used for simplicity.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/itertools.html
https://docs.python.org/3/library/itertools.html#itertools-recipes
https://docs.python.org/3/library/itertools.html#itertools-recipes
