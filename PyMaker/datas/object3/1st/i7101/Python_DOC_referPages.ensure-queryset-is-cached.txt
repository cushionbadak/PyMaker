Natural Text
I am calling a function that starts a process that takes longer to execute, many different things are done. This function chiefly handles instances of a particular class, Item. These items are categorized by different attributes: category1, category2 and category3.Now, there is a different model that applies some sort of rules to these categories: Rule with many-to-many attributes: categories1, categories2 and categories3. A rule applies to an Item, if the same rule points to different categories, only one of them should be applied. The decision of which one is defined by a certain logic encapsulated in a function:The issue lies in the get_rules_that_applies method. Every time we need to get the rule that applies to a certain item and let me say again that many many items are involved in the process we are talking about, warehouse.rule_set.all() is called.Since the rules will not change during this process, we can just cache all the rules in the ware house, but how? How can I make sure warehouse = warehouse.rule_set.all() is cached and all filtering and QuerySet operations that act on these rules are not hitting the database?
I believe that the solution you are seeking is the memoization of the get_rules_that_applies method.There is a tool ready-made for that, called django-memoize and those are its docs.Quick-start on usage:    pip install django-memoizePlace it on your INSTALLED_APPSIn your model.py:(Update) A Semi-DIY Approach:Since my answer, I read the following post: https://www.peterbe.com/plog/cache_memoize-cache-decorator-for-django which is accompanied by a gist on how to achieve memoization yourself.A More DIY Approach:Python 3.2 and up:The @functools.lru_cache decorator which is a:Decorator to wrap a function with a memoizing callable that saves up to the maxsize most recent calls. It can save time when an expensive or I/O bound function is periodically called with the same arguments.How to use it:maxsize: Defines the size of the cache in function calls to be stored. It can be set to None to cache every call.Python < 3.2In here What is memoization and how can I use it in Python? exist a more "old school" approach.How to cache a queryset with either of the above methods:Why not define an intermediate function to form the queryset and cache that functions results?and then in your get_rules_that_applies function:
You have 2 option:cache the item in the viewcahce the item in the modelThe code will be the same in view and in the model, Import cahce:Code:Your model will be:Few info about Django query, When they are evaluated?:https://docs.djangoproject.com/en/1.11/ref/models/querysets/#when-querysets-are-evaluatedHope this help


Answer URL
https://docs.python.org/3/library/functools.html#functools.lru_cache
