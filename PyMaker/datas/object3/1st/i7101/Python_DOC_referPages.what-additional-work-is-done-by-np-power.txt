Natural Text
I realised that np.power(a, b) is slower than np.exp(b * np.log(a)):The results are the same (with a few numerical errors of order 1e-16). What additional work is done in np.power? Furthermore, how can I find an answer to these kind of questions myself?
Under the hood both expressions call the respective C functions pow or exp and log and running a profiling on those in C++, without any numpy code, gives:This is consistent with the numpy timings. It thus seems like the primary difference is that the C function pow is slower than exp(log). Why? It seems that part of the reson is that the expressions are not equivalent for all input. For example, with negative a and integer b, power works while exp(log) fails:Another example is 0 ** 0:Hence, the exp(log) trick only works on a subset of inputs, while power works on all (valid) inputs.In addition to this, power is guaranteed to give full precision according to the IEEE 754 standard, while exp(log) may suffer from rounding errors.


Answer URL
https://docs.python.org/3/c-api/number.html
