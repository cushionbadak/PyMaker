Natural Text
I'm trying to create an execution environment/shell that will remotely execute on a server, which streams the stdout,err,in over the socket to be rendered in a browser. I currently have tried the approach of using subprocess.run with a PIPE. The Problem is that I get the stdout after the process has completed. What i want to achieve is to get a line-by-line, pseudo-terminal sort of implementation.My current implementationtest.pyand in the shellIf i try to attempt even this simple implementation with pty, how does one do it?
Im sure theres a dupe around somewhere but i couldnt find it quickly
If your application is going to work asynchronously with multiple tasks, like reading data from stdout and then writing it to a websocket, I suggest using asyncio.  Here is an example that runs a process and redirects its output into a websocket:It uses aiohttp and is based on the web_ws and subprocess streams examples.
If you are on Windows then you will be fighting an uphill battle for a very long time, and I am sorry for the pain you will endure (been there). If you are on Linux, however, you can use the pexpect module. Pexpect allows you to spawn a background child process which you can perform bidirectional communication with. This is useful for all types of system automation, but a very common use case is ssh.I have found it very useful to create a class to handle something complicated like an ssh connection, but if your use case is simple enough that might not be appropriate or necessary. The way pexpect.before is of type bytes and omits the pattern you are searching for can be awkward, so it may make sense to create a function that handles this for you at the very least.If you want to send messages to the child process, you can use child.sendline(line). For more details, check out the documentation I linked. I hope I was able to help!
I don't know if you can render this in a browser, but you can run a program like module so you get stdout immediately like this:You can add sleep in test.py to see the difference:


Answer URL
https://docs.python.org/3/whatsnew/3.6.html#asyncio
https://docs.python.org/3/library/asyncio-subprocess.html#subprocess-using-streams
