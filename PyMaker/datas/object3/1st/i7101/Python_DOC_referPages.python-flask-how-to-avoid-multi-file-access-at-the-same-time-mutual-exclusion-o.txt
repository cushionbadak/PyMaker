Natural Text
I am currently developing a data processing web server(linux) using python flask.The general work flow is:Get an input file from the user (handled by python flask)Flask passes this input file to a java program Java program processes this input file, saves the outputs (multiple files) on the server.Flask calls another python script which will process these outputs to get the final result and return the result back to the client.The problem is: between step 3 and step 4, there exist some intermediate files, this would not have been a problem at all if this is a local program. but as a server program, When more than one clients access this program, they could get unexpected result generated by input that is provided by another user who is using the web program at the same time. From the point I see it, this is kind of a mutual exclusion problem on file access. I have had problems with mutual exclusion problems on threads before, I solved some of them using thread locks such as like synchronization in java and lock in pythons, but I am not sure what to do when it comes to files instead of threads. It occurred to me that maybe I canspawn different copies of files based on different clients. But as I understand, the HTTP is stateless so you can't really know who is accessing the server. I don't want to add a login system and a user database to achieve this purpose as I sense there is a much simpler and better way to resolve this problem. I have been looking for a good solution these days but haven't found an ideal one so I am looking for some advice here. Any suggestions will be highly appreciated. If you can suggest a viable solution, please feel free to provide me with your name so I can add you to the thank list of digital and paper publications about this tool when it's published.
As a system kind of person I suggest you something like thishttps://docs.python.org/3/library/fcntl.html#fcntl.lockfThis is how I would solve it there is so many way to solve this problem and it is up to debate of course it is come hard with the best solution Assume the output file is where the conflict happen so you lock the file and you keep polling until the resource is release (the user need to wait) so you force one user to access the file at a time (polling here time.sleep) for like 2-3 seconds (add a try except) here thread lock on the output file only when the resource is release the next user process will pass through normally. Another easy way is to dump the data in a rds like mysql or postgres it will handle all the file access nightmare occurred from concurrent request (put the output file in a db).


Answer URL
https://docs.python.org/3/library/fcntl.html#fcntl.lockf
