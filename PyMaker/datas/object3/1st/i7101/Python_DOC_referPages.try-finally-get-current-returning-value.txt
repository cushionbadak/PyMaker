Natural Text
I was looking at this list of python quirks and was amused that this returns False:After seeing this I saw the answers here and here which presented the reason why, and that's that the finally clause will always be executed, no exceptions.My question is, where is the previous return value stored:Why doesn't this return None but instead returns the original True?And is it possible to access the going to be returned value programatically?I'd like to know if it's possible to do this without using a variable for example:andreturn 'Set' and 'Not Set' respectively.
Why doesn't this return None but instead returns the original True?From the docs:The finally clause is also executed “on the way out” when any other clause of the try statement is left via a break, continue or return statement.So this means that if a return statement is present in the finally clause that value will be returned (since the finally block is guaranteed to execute fully, any return statement inside it will be executed as well). Otherwise, if the try/except block was going to return a value, that value is returned.This means thatWill execute exactly as:And is it possible to access the going to be returned value programatically?No, you can't access the value after the return statement in other parts of the code without saving it. 


Answer URL
https://docs.python.org/3/reference/compound_stmts.html#the-try-statement
