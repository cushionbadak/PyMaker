Natural Text
I want to use the pigpio library to send and receive 8-bit binary data over a serial link using bit-banging. The other side expects and sends bytes with an added valid parity bit. Unfortunately there is no parity handling in the pigpio library. However, the pigpio library accepts data in chunks of arbitrary length, so I can add a parity bit in my code to each data byte before I present the 9-bit chunks to the send routine (or receive 9-bit chunks and verify the parity).  The messages to be sent are in a buffer as 8-bit binary bytes.I was looking at the BitArray functions but am stymied how I can extend each message byte with a parity bit and fill a bitarray with the 9-bit data in Python.  Does anybody have a suggestion?
As per the docs for wave_add_serial(), you need to set bb_bits=9.http://abyz.co.uk/rpi/pigpio/python.html#wave_add_serialThen:For bb_bits 9-16 there will be two bytes per character.So you will need to provide data formatted with 9 bits of data plus 7 bits of don't-care in two-byte pairs.  This should make your life easy, as your real data will simply be spread into twice as many bytes as originally, with the parity being stored in the first bit of every other byte.
Take a look at the struct module. You can use it to pack and unpack binary data.


Answer URL
https://docs.python.org/3/library/struct.html
