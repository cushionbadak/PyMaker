Natural Text
I have the following code:It successfully finds the first string and writes the total count to the output file, but it writes zero finds for 'String 1 reverse', even though it should find 1000's.It works if I insert this between searching for String 1 and String 1 reverse:i.e. I close the read file and then open it again.I don't want to have to add this after each search line, what's going on? Is it something to do with caching the open file or cache in regex?Thanks
I do not have samples to test your example, but I suspect that the issue comes from:You are doing f.read() two times, which means that the entire file is read, and the cursor is then set at the end of the file. The second f.read() will return an empty string, because there is no more data to read.You have to remember that reading a file means that the reading cursor (the position attached to the file descriptor) will change of +n bytes after reading n bytes. With no arguments f.read() will read for the entire file size bytes, and leave the cursor at end of file.You have two solutions:Store the file content in a variable (Eg: content = f.read()) and perform your searches on that variable.Use the file seek features:To change the file objectâ€™s position, use f.seek(offset, from_what). The position is computed from adding offset to a reference point; the reference point is selected by the from_what argument. A from_what value of 0 measures from the beginning of the file, 1 uses the current file position, and 2 uses the end of the file as the reference point. from_what can be omitted and defaults to 0, using the beginning of the file as the reference point.https://docs.python.org/3/tutorial/inputoutput.htmlThe first solution is actually recommended: you don't need to read the file more than once, and seeking features are mostly used for large file operations.Here is a fixed version of your code following that recommendation:Optimization: note that you don't need to close() on variables now, as you keep no reference of the file instances.
Once you do a file.read(), the entire file is read and the pointer is at the end of the file; which is why the second line doesn't return any results.You need to read the contents first, then run your analysis:You don't need output.close (it didn't do anything in the first place), as the with statement automatically will close the file.If you want to repeat this operation for all the files that match your pattern:


Answer URL
https://docs.python.org/3/tutorial/inputoutput.html
