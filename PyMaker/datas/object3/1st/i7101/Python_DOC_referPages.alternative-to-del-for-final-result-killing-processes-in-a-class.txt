Natural Text
This dummy class is similar to a current project of mine:The problem is that __del__ is not guaranteed to be always called, especially at important points in time, since __del__ is only called by Python's garbage collector when the reference count of the object reaches zero.How can I assure that resources always get set free and the workers always get terminated?
How can I assure that resources always get set free and the workers always get terminated?You can accomplish this by implementing the context manager methods __enter__ and __exit__. You can then use your EndProcess class with the context manger statement with. This way, your clean-up logic will executed even if an error occurs:Now you can use EndProcess instances in a context manager statement:


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__enter__
https://docs.python.org/3/reference/datamodel.html#object.__exit__
https://docs.python.org/3/reference/datamodel.html#with-statement-context-managers
