Natural Text
The time has come to convert all prints into logging calls in a library I'm maintaining.  Some of the print calls are using str.format, like this (simplified):When I try to log it:Seems this is not specifying the thousands separator correctly.  How do you specify the thousands separator when using the %-formatting syntax which Python's stdlib logging module necessitates?  Currently using this workaround, which does give the desired output, but seems wrong since the variable is formatted first using str.format and then formatted as a string again, instead of logging as a number directly:
That's a limitation with logging and it's actually mentioned in (at least one place in) the documentation: logging.debug(msg, *args, **kwargs)Logs a message with level DEBUG on the root logger. The msg is the message format string, and the args are the arguments which are merged into msg using the string formatting operator. (Note that this means that you can use keywords in the format string, together with a single dictionary argument.)(emphasis mine)But the string formatting operator % doesn't support thousand seperators.You could however adapt a recipe from the official cookbook:WARNING:__main__: this bird wouldn't voom if you put 4,000,000 volts through it!This is actually copied verbatim (I just changed the message) from the last example in the "Use of alternative formatting styles" section.Personally I would just go with your format(n, ',') solution. It may not be perfect but it doesn't require setting up a custom LoggerAdapter to print a different thousand seperator.


Answer URL
https://docs.python.org/3/library/logging.html#logging.debug
https://docs.python.org/3/howto/logging-cookbook.html#use-of-alternative-formatting-styles
https://docs.python.org/3/library/logging.html#logging.Formatter
https://docs.python.org/3/howto/logging-cookbook.html#use-of-alternative-formatting-styles
