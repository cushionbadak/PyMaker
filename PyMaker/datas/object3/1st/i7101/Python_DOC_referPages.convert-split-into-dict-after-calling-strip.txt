Natural Text
I would like to create a dictionary of values resulting from a split() sequence without whitespace.If I had a list of strings that were formatted like so:I know how to get the pairs by whitespace >2 by:s = [y for x in lines for y in x.split('  ') if y]This returns another list of strings with the pairs:s = ['Item1 = A', 'Item2 = B', 'Item3 = C', 'Item4 = D', 'Item5 = E']So far so good. Now from here I need to break the pairs by the =, the left side is the key and the right side is the value. I can do this by:t = [y.split('=') for x in lines for y in x.split('  ') if y]This returns another list of strings with broken pairs:t = ['Item1 ', ' A', 'Item2 ', ' B', 'Item3 ', ' C', 'Item4 ', 'D', 'Item5 ', ' E']Now each item has either a trailing or a leading whitespace. This is easily fixed by updating that last list comprehension line to:t = [z.strip() for x in lines for y in x.split('  ') for z in y.split('=') if y]In order to make this a dictionary I know to call a generator expression:d = dict(y.split('=') for x in lines for y in x.split('  ') if y)But this keeps that trailing or leading whitespace with the key and value. If I were to add the z.strip() I get the error:ValueError: dictionary update sequence element #0 has length 5; 2 is requiredQuestion:How can I use the dict() generator and strip() whitespace from the split('=') call at the same time? Or am I forced to strip() after the dict() call?
How about this:
You could iterate over t using range with a step of 2:To fit it all in one line you could also write:
If you could identify a pattern to match with a regex, then you could use re and itertools to handle the dict creation
Here's my go at it:Or if you like to cram things into one line:Instead of splitting by double spaces and then by equals, just split by whitespace in general and then remove equals tokens. Then pass the generator twice to zip to generate the pairs for dict.The drawback of this solution is that it requires to have always whitespace around the equals symbols.


Answer URL
https://docs.python.org/3/library/functions.html#func-range
