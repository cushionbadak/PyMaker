Natural Text
How do I concatenate two lists in Python?Example:Expected outcome:
You can use the + operator to combine them:Output:
It's also possible to create a generator that simply iterates over the items in both lists. This allows you to chain lists (or any iterable) together for processing without copying the items to a new list:
You can use sets to obtain merged list of unique values
Python >= 3.5 alternative: [*l1, *l2]Even though this is an old answer, another alternative has been introduced via the acceptance of PEP 448 which deserves mentioning. The PEP, titled Additional Unpacking Generalizations, generally reduced some syntactic restrictions when using the starred * expression in Python; with it, joining two lists (applies to any iterable) can now also be done with:This functionality was defined for Python 3.5 it hasn't been backported to previous versions in the 3.x family. In unsupported versions a SyntaxError is going to be raised.As with the other approaches, this too creates as shallow copy of the elements in the corresponding lists.The upside to this approach is that you really don't need lists in order to perform it, anything that is iterable will do. As stated in the PEP:This is also useful as a more readable way of summing iterables into a  list, such as my_list + list(my_tuple) + list(my_range) which is now  equivalent to just [*my_list, *my_tuple, *my_range].So while addition with + would raise a TypeError due to type mismatch:The following won't:because it will first unpack the contents of the iterables and then simply create a list from the contents.
You could also use extend in order to add a list add the end of another one:
This is quite simple, and I think it was even shown in the tutorial:
This question directly asks about joining two lists. However it's pretty high in search even when you are looking for a way of joining many lists (including the case when you joining zero lists).I think the best option is to use list comprehensions:You can create generators as well:Old AnswerConsider this more generic approach:Will output:Note, this also works correctly when a is [] or [[1,2,3]].However, this can be done more efficiently with itertools:If you don't need a list, but just an iterable, omit list().UpdateAlternative suggested by Patrick Collins in the comments could also work for you:
You could simply use the + or += operator as follows:Or:Also, if you want the values in the merged list to be unique you can do:
It's worth noting that the itertools.chain function accepts variable number of arguments:If an iterable (tuple, list, generator, etc.) is the input, the from_iterable class method may be used:
You can go for list.extend function.Output: [1,2,3,4,5,6]
With Python 3.3+ you can use yield from:Or, if you want to support an arbitrary number of iterators:
If you want to merge the two lists in sorted form, you can use the merge function from the heapq library.
If you can't use the plus operator (+), you can uses the  __add__ function:Alternatively, if you don't like the use of dunders you can use the operator import:One could argue this is a bit more readable.
As a more general way for more lists you can put them within a list and use the itertools.chain.from_iterable()1 function which based on this answer is the best way for flatting a nested list:1. Note that chain.from_iterable() is available in Python 2.6 and later. In other versions, use chain(*l).
Joining two lists in Python:If you don't want any duplication:
If you need to merge two ordered lists with complicated sorting rules, you might have to roll it yourself like in the following code (using a simple sorting rule for readability :-) ).
As already pointed out by many, itertools.chain() is the way to go if one needs to apply exactly the same treatment to both lists. In my case, I had a label and a flag which were different from one list to the other, so I needed something slightly more complex. As it turns out, behind the scenes itertools.chain() simply does the following:(see https://docs.python.org/2/library/itertools.html), so I took inspiration from here and wrote something along these lines:The main points to understand here are that lists are just a special case of iterable, which are objects like any other; and that for ... in loops in python can work with tuple variables, so it is simple to loop on multiple variables at the same time. 
The above code, does not preserve order, removes duplicate from each list (but not from the concatenated list)
You could use the append() method defined on list objects: 
In Python you can concatenate two arrays of compatible dimensions with this command
To extend a list with another one there are several methods like below:Also, for loop can also be used:
A really concise way to combine a list of lists iswhich gives us

Output:
Use a simple list comprehension:It has all the advantages of the newest approach of using Additional Unpacking Generalizations - i.e. you can concatenate an arbitrary number of different iterables (for example, lists, tuples, ranges, and generators) that way - and it's not limited to Python 3.5 or later.
You can use extends function 
If you wanted a new list whilst keeping the two old lists:
print(c) gives
So there are two easy ways.Using +: It creates a new list from provided listsExample:Using extend: It appends new list to existing list. That means it does not create a separate list.Example:Thus we see that out of two of most popular methods, extend is efficient.
You can use the '+' operator for concatenating two lists in Python:


Answer URL
https://docs.python.org/3/whatsnew/3.3.html#pep-380
