Natural Text
I have the following list of lists of values and I want to find the min value among all the values.I was planning to do something like:I tried this approach on a smaller example and it works:But using this on my original list Q it returns the wrong result:Why is this approach wrong and why?
Lists are compared using their lexicographical order1 (i.e. first elements compared, then the second, then the third and so on), so just because list_a < list_b doesn't mean that the smallest element in list_a is less than the smallest element in list_b, which is why your approach doesn't work in the general case.For example, consider this:The reason min(l1, l2) is [2, 1] is because the first element of l1 (3) is initially compared with that of l2 (2). Now, 2 < 3, so l2 is returned as the minimum without any further comparisons. However, it is l1 that really contains the smallest number out of both lists (0) which occurs after the initial element. Therefore, taking the min of min(l1, l2) gives us the incorrect result of 1.A good way to address this would be to find the minimum of the "flattened" list, which can be obtained with a generator:(+1 to @Ffisegydd for posting a solution along these lines first.)1 From http://docs.python.org/3/tutorial/datastructures.html#comparing-sequences-and-other-types:Sequence objects may be compared to other objects with the same sequence type. The comparison uses lexicographical ordering: first the first two items are compared, and if they differ this determines the outcome of the comparison; if they are equal, the next two items are compared, and so on, until either sequence is exhausted. If two items to be compared are themselves sequences of the same type, the lexicographical comparison is carried out recursively. If all items of two sequences compare equal, the sequences are considered equal. If one sequence is an initial sub-sequence of the other, the shorter sequence is the smaller (lesser) one.
Your approach didn't work properly because, that is how Python sequence comparison is doneI want to find the min value among all the values.If you want to find the minimum of all the values, you can do something like this
You can use a generator expression coupled with the min function to find the answer:This generator expression flattens your list of lists and then simply returns the minimum value.
min(map(min,Q)) ist the command you're looking for.
min(Q) returns the "minimum" list in Q, which is the list that has the smallest first element.Therefore, min(min(Q)) returns the smallest element of the list with the smalles first element, which is not what you want.You could useinstead, which returns the smallest of the minimums of all lists in Q.
What you really want is to flatten that list and then find the minimum:
There are lots of answers, but the easiest way IMHO is to make the 'list of lists' into a single list using itertools.chain.from_iterable:or the shorter and just as easy to read (to me) version:
I think I found why, min applied on a list of lists will compare the first values of each sublist.
min(Q) does not always return the list that must contain Minimum of all values. That's why your approach is wrong.You must find the min value of all list and make another list. then find min of that list, that's it.


Answer URL
