Natural Text
I am using tkinter in Python and came across the following code:I was wondering whether anyone could explain what enumerate means in this context?
The enumerate() function adds a counter to an iterable.So for each element in cursor, a tuple is produced with (counter, element); the for loop binds that to row_number and row, respectively.Demo:By default, enumerate() starts counting at 0 but if you give it a second integer argument, it'll start from that number instead:If you were to re-implement enumerate() in Python, here are two ways of achieving that; one using itertools.count() to do the counting, the other manually counting in a generator function:andThe actual implementation in C is closer to the latter, with optimisations to reuse a single tuple object for the common for i, ... unpacking case and using a standard C integer value for the counter until the counter becomes too large to avoid using a Python integer object (which is unbounded).
It's a builtin generator function, see http://docs.python.org/2/library/functions.html#enumerate .In short, it yields the elements of an iterator, as well as an index number:printsIt's helpful if you want to loop over an interator, and also want to have an index counter available. If you want the counter to start from some other value (usually 1), you can give that as second argument to enumerate.
I am reading a book ('Effective Python') by Brett Slatkin and he shows another way to iterate over a list and also know the index of the current item in the list. BUT suggests to not use it and use enumerate instead. I know you asked what enumerate means, but when I understood the following, I also understood how enumerate makes iterating over a list while knowing the index of the current item easier (and more readable). The output is:I also used to do something, even sillier before I read about the enumerate function. It produces the same output. But with enumerate I just have to write:
As other users have mentioned, enumerate is a generator that adds an incremental index next to each item of an iterable.So if you have a list say l = ["test_1", "test_2", "test_3"], the list(enumerate(l)) will give you something like this: [(0, 'test_1'), (1, 'test_2'), (2, 'test_3')].Now, when this is useful? A possible use case is when you want to iterate over items, and you want to skip a specific item that you only know its index in the list but not its value (because its value is not known at the time).So your code reads better because you could also do a regular for loop with range but then to access the items you need to index them (i.e., joint_values[i]).Although another user mentioned an implementation of enumerate using zip, I think a more pure (but slightly more complex) way without using itertools is the following:Example:Output:[(0, 'test_1'), (1, 'test_2'), (2, 'test_3')][(10, 'test_1'), (11, 'test_2'), (12, 'test_3')]
The enumerate function works as follows:The output is


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.count
