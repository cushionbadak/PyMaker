Natural Text
James Powell, in his short description for an upcoming presentation, says he is the proud inventor of one of the gnarliest Python one-liners:I am trying to figure out this generator, and since I live with Python 2.7.x, I'm also tripping over the (yield from g) expression.How do I read this, and what would be the python 2.7.x analog?What a great discussion below! I want to check if I have this correct in the main.Is that about right?
This expression seems to be a code-golf way of writing:((Or maybe the motivation be taking advantage of generator delegations, but IMHO readability really suffers.))For example:Prints twice the flattened list.I think it becomes more legible if you use different variable names:Which is the same as as due to the something and False the outer generator doesn't yield anything, while the inner generator yields all elements of all sublists (subgenerators, subiterables).Maybe this clarifies a bit how it works:Apparently the original generator can be simplified to this, omitting the last and False:Revision:Thanks to Martijn Pieters fighting my stubbornness, I managed to see that (None for sublist in g if (yield from sublist) and False) and (None for sublist in g if (yield from sublist) ) are not equivalent. Here an example of a g which makes a difference:This prints:


Answer URL
