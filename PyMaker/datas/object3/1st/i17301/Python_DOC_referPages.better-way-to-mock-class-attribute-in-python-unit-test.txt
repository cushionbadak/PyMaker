Natural Text
I have a base class that defines a class attribute and some child classes that depend on it, e.g.I want to unittest this class with different assignments, e.g. empty dictionary, single item, etc. This is extremely simplified of course, it's not a matter of refactoring my classes or testsThe (pytest) tests I have come up with, eventually, that work areThis feels rather complicated and hacky - I don't even fully understand why it works (I am familiar with descriptors though). Does mock automagically transform class attributes into descriptors?A solution that would feel more logical does not work:or justOther variants that I've tried don't work either (assignments remains unchanged in the test). What's the proper way to mock a class attribute? Is there a better / more understandable way than the one above?
base.Base.assignment is simply replaced with a Mock object. You made it a descriptor by adding a __get__ method.It's a little verbose and a little unnecessary; you could simply set base.Base.assignment directly:This isn't too safe when using test concurrency, of course.To use a PropertyMock, I'd use:or even:
To improve readability you can use the @patch decorator:You can find more details at http://www.voidspace.org.uk/python/mock/patch.html#mock.patch.
If your class (Queue for example) in already imported inside your test - and you want to patch MAX_RETRY attr - you can use @patch.object or simply better @patch.multiple 
Perhaps I'm missing something, but isn't this possible without using PropertyMock?
Here is an example how to unit-test your Base class:mocking multiple class attributes of different types (ie: dict and int)   using the @patch decorator and pytest framework with  with python 2.7+ or 3+.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#patch-object
https://docs.python.org/3/library/unittest.mock.html#patch-multiple
