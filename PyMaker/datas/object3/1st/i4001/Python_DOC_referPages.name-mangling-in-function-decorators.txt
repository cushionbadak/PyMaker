Natural Text
I cannot use a decorator within a class declared in the same module as the decorator if the decorator name is a __double_leading_underscore type.It's easier to explain with an example:If I change @decorator with @__decorator:It tries to find __decorator from within the class.Is there a way to keep the naming convention but refer to the module instead of the class?
This is due to Python's name mangling. According to the docsAny identifier of the form __spam (at least two leading underscores,  at most one trailing underscore) is textually replaced with  _classname__spam, where classname is the current class name with leading underscore(s) stripped. This mangling is done without regard  to the syntactic position of the identifier, as long as it occurs  within the definition of a class.Emphasis added.When the interpreter sees @__decorator within class A, it ignores the binding to decorator, textually replaces __decorator with _A__decorator and tries to evaluate that identifier, which gives you a NameError.
As noted in this post it's due to attribute name mangling.Code posted by OP is an interesting case that made me research how name manging is performed. It turns out that name mangling is performed during compilation to Python bytecode which can be seen by running this code (run in Python 3.7):The bytecode is:This explains why __decorator in class' body triggers searching for _A__decorator because it's "hardcoded" in the bytecode.The only way to call __decorator in class body is to use one of following calls:As noted each call looks horrible and the issue lies in __mangled name. If your goal is to  hint that the module attribute shouldn't be used directly a single underscore is enough. But if you really want leading double underscore you can add more than 2 trailing underscores to prevent mangling as noted in documentation:Any identifier of the form __spam (at least two leading underscores,  at most one trailing underscore) is textually replaced with  _classname__spam, where classname is the current class name with leading underscore(s) stripped.


Answer URL
https://docs.python.org/3/tutorial/classes.html#private-variables
