Natural Text
I am trying to set a value from the dict if the condition is met. Basically I iterate over the values of my dictionary and check if they fit my condition (then I break to loop which is not the best practice but saves some iterations)Here is the code I am using:I does it's job but it is relatively slow while I have to check > 10k records so I am looking for some smarter (and maybe more pythonic) way of solving that task. I have seen a function any() but it only returns if there is such entry which matches the conditions without telling which.I'd be happy to hear your ideas and suggestions. 
If you have the data directly as-is, with only a dictionary structure, you will have to iterate over it every time. The best speedup you can get would be to use a comprehension instead of a loop, and dict.items instead of zip:On the one hand this iterates over the whole dict. On the other, it tells you immediately how many values met the criterion, if any.The problem here is that no matter how much less overhead a comprehension has than an explicit loop, this is still O(n) for every lookup. The correct solution is to use a different, or complimentary data structure. Since you want value to be greater than something, I'd recommend a max-heap.Python implements heaps in the heapq module. It is a bit unusual because it does not provide a heap object, just functions to heapify and maintain lists as heaps. Also, only min-heaps are supported, but that's OK because you can always just negate your values:This is a one-time O(n) penalty, which you never have to repeat. Your whole loop now becomes an O(1) operation:Inserting new elements has an O(log(n)) cost:As a side note, if you can't introduce new data structures, you might get better performance with
You can do it like this:
Instead of iterating a zip object, you can iterate directly over dict.items:This will be more efficient than creating a custom zipped iterable.


Answer URL
https://docs.python.org/3/library/heapq.html
