Natural Text
I have seen the following many times, where the instance variables (ex. obj_foo and obj_bar) are re-assigned to be local method variables (ex. within call):I am not sure if this is convention (easy to read) or if there is a more significant purpose?Is this bad practice?Does this effect performance?
Usually, there is no reason to do that, but in some circumstances it may be:faster (because access to local variables is fast)more easily readable (because it is shorter)The speed is probably the more important factor here. Accessing member variables involves various mechanisms (see __getattr__, __getattribute__, __dict__, descriptors) which take some time to resolve. Additionally, the getter for the variable may do something even more expensive.On the other hand, local variables are in CPython optimised at compile time, so there is actually no lookup for a variable named 'obj_foo' in the __dict__, but instead the interpreter just picks the first local variable, because it knows that obj_foo is the first local variable without the need to search for the name.So, if a member variable is used many times in the same function and profiling shows that it takes significant time to access that member variable, it may be useful to use a local variable instead.Usually, that does not make a big difference, but here is an example to show the idea:The timing is almost the same, but there is some difference:IMHO, in this case, the difference is barely enough to justify adding that one line of code.
You could do this just to avoid writing out self every time.However, it could also be that there is a more important reason to do this: it could completely change the semantics. Example:In this example, x and self.x are not interchangeable, even though you have assigned x = self.x in the first line of theMethod. The first print will output 42, the second print will output 58. This can happen every time that some member variable is assigned to a local variable and then overridden.How this impacts performance is not entirely obvious, because both lookups self.x and x will have to look for the symbol in a dictionary: in the first case, the dictionary of the member variables of self, in the second case, in the current scope. It could impact the performance both positively and negatively, depending on how many and what other variables are defined in each scope. In most non-contrived cases, it could have a tiny positive effect on performance.EDIT: As @zvone has pointed out, the last paragraph does not necessarily hold for all implementations of the python interpreter.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getattr__
https://docs.python.org/3/reference/datamodel.html#object.__getattribute__
https://docs.python.org/3/library/stdtypes.html#object.__dict__
https://docs.python.org/3/howto/descriptor.html
