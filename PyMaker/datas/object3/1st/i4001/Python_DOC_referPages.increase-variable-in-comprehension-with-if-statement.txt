Natural Text
I'm trying to learn Python comprehensions, but I'm stuck. I'm trying to increase my count variable when the condition is True, and return that count after the loop. Here is my code: It's returning "0" each time my condition is True. When I try to add count += 1 in the comprehension it's giving me a SyntaxError.
Comprehensions don't work that way. Conceptually, they allow you to set and filter the individual elements of a list, not accumulate into a single variable.There is a standard idiom for getting around that though. You basically make an iterable of booleans for your condition, or just retain ones for all the elements you want and discard the others, then sum over that.As a further improvement, I would recommend using a generator expression rather than a list comprehension. It looks almost the same, but supports lazy evaluation. This means that you get all the benefits of the one-liner, without having to store the list of flag values in memory.Here is how the first option would look:The second option would look like this:Notice that I renamed your variable list to L so it wouldn't shadow the builtin function.
Don't?Or use len:Or use sum:Or use sets (prepare to be surprised):Here's the performance numbers on a list of 1000 consecutive numbers:That's not a guarantee of performance. Sets are also probably the least memory efficient solution in this case. But it does work (seemingly pretty well).Also, don't name a variable list, that's a built-in function in Python and overwriting it will cause all sorts of mayhem.
You are very close. List comprehensions cannot store and reuse variables in the way you wish; they may only contain expressions. One solution is to use sum with a generator expression.The benefit of this solution is you avoid the expense of building a list, which is not necessary to count the number of elements satisfying a condition.Note you should never name variables after classes. In addition, you can use set for O(1) lookup.Also note that we construct the A_set outside the list comprehension, otherwise it will be computed for each iteration of range(len(A)).

If all you need is the quantity of times that happens, return the length of the list:Remember that this is a list comprehension; you cannot add arbitrary actions., such as assignment.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/library/functions.html
https://docs.python.org/3/reference/expressions.html#generator-expressions
