Natural Text
I asked my friend for assistance with a function that swaps characters in a string, and this is what he came up with:The problem is I'm not familiar at all with the module that is being used. Is there another way to write this code (perhaps a little more beginner-friendly)? Thanks in advance.EDIT: These are the outputs right now 
Your friend is using the regular expression \w+ to match all strings of "word characters". In re, "word characters" means:Matches Unicode word characters; this includes most characters that can be part of a word in any language, as well as numbers and the underscore.Really, you probably don't want to include numbers and underscores, just letters. Your friend probably did this because… well, most regular expression solutions are "quick & dirty" instead of precise; it's just shorter to specify \w than what you actually want, and it works for your sample inputs, so that's what they did.So, for your first example, it'll match:For each one, it's calling that hfunc, and substituting the result in place of the original word. That's what re.sub does.If you want to do the same thing without using re, you can group the words in the same way, and loop over the groups manually. For example, with itertools.groupby, to group characters by whether they're letters or not (without the hacky numbers-and-underscores bit):If you run that and look at the output, you should be able to see what to do. First, we want to join each group back into a string. Then, for the ones where isletters is true, we want to call that hfunc (but let's rename it, and its parameter, to something more meaningful…). Then join all the results back up. So:If you want to keep track of whether anything was changed, you can do that, as you go along:If you don't understand how that groupby works… well, the "roughly equivalent" code in the docs probably won't help you without a bit more study, but you can easily write something less flexible that gives the same output for this case. It's probably worth trying it. Here's a pseudocode framework to get your started:
Here is a simple solution, that has only one flaw I found: It doesn't deal with punctuation correctly. If that is a problem, tell me.


Answer URL
https://docs.python.org/3/library/re.html
https://docs.python.org/3/library/re.html#re.sub
https://docs.python.org/3/library/itertools.html#itertools.groupby
