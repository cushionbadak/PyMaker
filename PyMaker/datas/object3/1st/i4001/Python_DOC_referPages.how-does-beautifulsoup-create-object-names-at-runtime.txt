Natural Text
How does BeautifulSoup create object names at runtime?Take the following code for exampleHow is the object of name 'sid' created. Earlier I thought standard html tags are pre-created, but the appearance of a custom tag as an object name means my understanding was wrong.My limited understanding is that bs4 first creates and object of type <class 'bs4.BeautifulSoup'> which the recursively creates objects of type <class 'bs4.element.Tag'> My question is how does bs4 dynamically name these <class 'bs4.element.Tag'> objects to the actual tags found in the html?How can I replicate this?
The key is __getattr__, a special method that allows classes to dynamically create attributes on demand.Oversimplifying slightly:1 when you write spam.eggs, Python does something like this pseudocode:The default object.__getattr__ just raises an AttributeError, but you can override it to do anything you want.Here's the code from Tag.__getattr__:There's a bunch of special-case code to handle things like BS3-style legacy access, but other than that, it's dead simple: tag.spam just returns tag.find('spam').If you're considering doing this yourself, keep in mind that Python also offers "semi-dynamic" attributes, which you can create by name (using setattr at some point after construction, rather than each time they're looked up. For many projects, this is a better solution (more efficient, attributes show up in dir and other reflective calls, etc.). It would probably be a bad idea for BS4's mutable trees,2 but if it didn't allow mutation, it might make more sense to do something like this pseudocode:1. Most notably, this behavior is implemented in object.__getattribute__, so if you want to completely skip the default functionality, you can even override that method. Also, I've ignored __slots__, descriptors, special method lookup, how builtin/C-extension types work, etc.2. Imagine your rename that sid node to pid. It can't just walk the ancestor chain and delete sid and add pid attributes on each oneâ€”there could be another sid descendant that should now take over the sid attribute, and for pid, it even depends on whether such a descendant comes before or after the current node.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__getattr__
https://docs.python.org/3/library/functions.html#setattr
https://docs.python.org/3/reference/datamodel.html#object.__getattribute__
https://docs.python.org/3/reference/datamodel.html#slots
https://docs.python.org/3/howto/descriptor.html
https://docs.python.org/3/reference/datamodel.html#special-lookup
