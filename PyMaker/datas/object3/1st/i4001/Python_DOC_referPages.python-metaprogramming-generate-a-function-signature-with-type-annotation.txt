Natural Text
I am working within a Python web framework that uses Python 3 type annotations for validation and dependency injection.So I am looking for a way to generate functions with type annotations from a parameters given to the generating function:so thatwill returnIs there something I cam put instead of the ??? that will do the thing I need.I also looked at Signature.replace() in the inspect module, but did not find a way to attach the new signature to a new or existing function.I am hesitant to use ast because:The abstract syntax itself might change with each Python releaseSo my question is: What (if any) is a reasonable way to generate a function with Python 3 type annotation based on a dict passed to the generating function?Edit: while @Aran-Fey's solution answer my question correctly, it appears that my assumption was wrong. Changing the signature doesn't allow calling the new_fn using the new signature. That is gen_fn({'a': int})(a=42) raises a TypeError: ... `got an unexpected keyword argument 'a'.
Instead of creating a function with annotations, it's easier to create a function and then set the annotations manually.inspect.signature looks for the existence of a __signature__ attribute before it looks at the function's actual signature, so we can craft an appropriate inspect.Signature object and assign it there:typing.get_type_hints does not respect __signature__, so we should update the __annotations__ attribute as well:Putting them both together:Note that this doesn't make your function callable with these arguments; all of this is just smoke and mirrors that makes the function look like it has those parameters and annotations. Implementing the function is a separate issue.You can define the function with varargs to aggregate all the arguments into a tuple and a dict:But that still leaves you with the problem of implementing the function body. You haven't said what the function should do when it's called, so I can't help you with that. You can look at this question for some pointers.


Answer URL
https://docs.python.org/3/library/inspect.html#inspect.Signature.replace
https://docs.python.org/3/library/ast.html
https://docs.python.org/3/library/inspect.html#inspect.signature
https://docs.python.org/3/library/inspect.html#inspect.Signature
https://docs.python.org/3/library/typing.html#typing.get_type_hints
https://docs.python.org/3/library/functions.html#exec
