Natural Text
What is the difference between this listand this other list?I have printed the type, both are  <class 'list'>
The type of a Python container doesn't include information about whatis contained. A list is a list, whether it contains tuples or floats. Likewise, a tuple is a tuple, regardless of what it contains. L1 and L2 are both instances of list, but that doesn't tell us anything about the contents of either list.L1 is a list with one object, that happens to be a tuple containing three floats.L2 is a list with three objects, all of them floats.
In python lists are not homogeneous in type. This means at the top level you will simply see list without any qualifications.The first one is a list of a single element, a tuple of 3 elements, the second is a list of 3 elements, each a float.
A list is an object that contains other objects. You access a list with list[index], where "index" is the position in the list of the thing you're pulling out.A tuple is like a list, except it cannot be changed. You access them the same way: tuple[index]. If you try to change a tuple's contents, you'll get an error.Lists are defined using square braces [], and tuples are defined using parenthesis (). So, in your first example, you have a list, and inside that list is a single tuple. Inside that tuple are three floats. If you wanted to pull 0.39 out of it, you would use listname[0][0].The second example is a list containing three floats. If you wanted to pull 0.39 out of it, you would use listname[0].
The first list is a nested tuple list. So you have a tuple within the list. The other list is a normal Python list if you review the Python data structures. The distinction is critical because it impacts how you interact with the list. I will show you some examples below:Since the regular list has indices for each element in the list, running a for loop will print each number individually as shown here: However, since the other list has a nested tuple within it, the for loop will only print the tuple: If you wanted to access each element of the nested tuple individually, you'd have to store it in a different variable and call the index that you want, and then print the specific index that you want out of the tuple as I do below:The output is as follows: Another important distinction is that a tuple is immutable meaning that it cannot be altered even within your list. You can delete the tuple, and insert another one, but you cannot alter the specific elements within the tuple. A normal list can be altered, as you probably already know. The same concept of a tuple being immutable remains the same with a nested tuple. 


Answer URL
https://docs.python.org/3/tutorial/datastructures.html
