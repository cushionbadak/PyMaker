Natural Text
The interface of the id() function in Python is clear to me:"An object’s identity never changes once it has been created" [1], and"This is an integer which is guaranteed to be unique and constant for this object during its lifetime." [2]But this statement in [1] confuses me: "you may think of it as the object’s address in memory". The issue is it's not clear what object's address in memory is and how it changes. I would think this is really an implementation detail. This question seems to suggest for this statement in the Language Reference to hold true, the virtual address of an object must never change in the implementation. My questions are then:  Is this address being referred to the virtual memory address or the physical memory address? The physical address of any process is determined at run-time by the OS so I don't see how it can be physical.  How does the implementation keep the virtual object address the same, and still avoid internal fragmentation? By contrast, in Java, the JVM routines moves objects during GC. 
The id of an object is, in fact, implementation-defined, as long as it is a) unique and constant during its lifetime (while not related to this question: this does mean that two objects can have the same id if the first's lifetime has ended).The CPython-implementation does have the invariant that objects are always pinned at their original memory location and never moved around. This has huge benefits when it comes to interoperability with C, as you can freely pass pointers around that stay valid as long as the object stays alive (which is usually just an incremented reference counter away).Given that, the CPython-interpreter simply uses the virtual memory address of an object as it's id:The virtual address is unique for every object because any two objects that could determine that they are not the same object have to be at different memory locations.Using the virtual address of an object as it's id is always safe, because if one would store the id, drop the original object, re-use the id (have I seen this object before?) and get into confusion, he'd violate the rule that the id is only valid for as long as the object represented by it is alive.Also notice that reallocations do not change the virtual address of the object. For example, the list object has an internal pointer to the vector of elements. The id of the list-object is the virtual address of PyListObject itself. When the list grows and needs to be reallocated / moved somewhere else, only the internal pointer is changed; the PyListObject stays where it was, hence it's id remains the same.Here is the entire definition of the built-in id() function from current HEAD:No smoke, no mirrors. It's just the pointer.


Answer URL
https://docs.python.org/3/reference/datamodel.html
https://docs.python.org/3/library/functions.html#id
https://docs.python.org/3/reference/datamodel.html
