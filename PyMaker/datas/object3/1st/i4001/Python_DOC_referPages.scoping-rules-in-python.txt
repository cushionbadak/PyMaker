Natural Text
Consider the following python snippet (I am running Python 3)This produces the output hello johny as expectedHowever,generates an UnboundLocalError: local variable 'x' referenced before assignment.Why does the first snippet work, whereas the second doesn't? 
The error is actually caused (indirectly) by the following line, i.e. x = 2. Try commenting out that line and you'll see that the function works.The fact that there is an assignment to a variable named x makes x local to the function at compile time, however, at execution time the first reference to x fails because, at the time that the print() statement is executed, it does not exist yet in the current scope.Correct it by using nonlocal in func2():The reason that the first function (greet()) works is because it's OK to read variables in an outer scope, however, you can not assign to them unless you specify that the variable exists in an outer scope (with nonlocal or global).You can assign to a variable of the same name, however, that would create a new local variable, not the variable in the outer scope. So this also works:Here x is assigned to before being referenced. This creates a new variable named x in the scope of function func2() which shadows the x defined in func1().
In a given scope, you can only reference a variable's name from one given scope. Your variable cannot be global at some point and local later on or vice versa.For that reason, if x is ever to be declared in a scope, Python will assume that you are refering to the local variable everywhere in that scope, unless you explicitly state otherwise.This is why you first function, greet, works. The variable name is unambiguously coming from the closure. Although, in func2 the variable x is used in the scope and thus you cannot reference the x from the closure unless explicitly stating otherwise with nonlocal.The following errors might enlighten us on this.A variable cannot become global after useThis raises a SyntaxError: name 'x' is used prior to global declaration. This means that the closure's x cannot be used and then the global one.A global variable cannot become localHere is another case using global at the top of func2.This code was exectued without error, but notice that the assignment to x updated the global variable, it did not make x become local again.


Answer URL
https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement
https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement
