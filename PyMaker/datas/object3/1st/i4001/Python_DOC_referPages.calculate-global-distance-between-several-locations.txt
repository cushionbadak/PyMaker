Natural Text
I am working on the calculation of the distance between two global positions based on their coordinates. When using only two locations, I get results:What if I want to calculate the distance between several locations? Assuming I have a CSV file containing three locations:How can I iterate over these two columns and produce distances between (A,B), (A,C) and (B,C)  ?  
Assuming you've read that CSV into some kind of sequence of sequences (e.g., list(csv.reader(f))), all you need to do is iterate over all combinations of locations. And that's exactly what itertools.combinations does:While you're looking at the linked docs above, notice combinations_with_replacement, permutations, and product, which are often the answers to similar but slightly different problems.This should be easy to adapt to a sequence of dicts, or a dict of Location instances, etc. If, on the other hand, you have something like a 2D numpy array or a pandas DataFrame, you may want to do something different. (Although from a quick search, it looks like just making an array out the itertools combinations with fromiter isn't significantly slower than anything else, even if you want to trade of space for time to broadcast your global_distance function.)
I'd import the data from your file via pandas:Additionally, you can import itertools:With this you can get all combinations of a iterable like this, as an example with the indices of the dataframe here:This shows, that you'll get the combinations you want.Now do the same with the data of your dataframe:And if you want to have the location names included in the output, you can leave away the index_col=0 when importing, so that A, B and C is also part of the df.values and you could write:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
