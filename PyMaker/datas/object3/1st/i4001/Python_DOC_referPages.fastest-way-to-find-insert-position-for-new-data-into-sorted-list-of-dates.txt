Natural Text
Let us say I have a list of dates:And I get a new date and want to know which position to insert it.  If the date is already in the list we assume we will insert it again to the right of existing date.I.e., '2016-12-10' would be inserted in position 0, left to Timestamp('2017-03-31 00:00:00'), etc.
In general, the best you can do to find the location is a logarithmic search. But the details depends on what you have.Also, notice that even if you improve the search from linear time to logarithmic, if you're using a data structure like a list or array, the insert is still going to take linear time (because it has to shift the rest of the list up). So you may be optimizing the wrong thing.For a very small collection, like a list of 5 values, you're probably better off just using linear search.If you're doing almost all of your inserts in one phase, and then almost all of your searches after the collection is mostly already built, just collect everything with set.add or list.append, then sort it at the end of the phase. This is still effectively (amortized) log time, but with a much better multiplier.For a list or other plain Sequence, use bisect from the stdlib. For a numpy array, or something built on top of it like a pandas Series: use numpy's searchsorted. (If you're storing a bunch of Pandas Timestamp objects, you probably should be using one of these data structures instead of a list, if you aren't already.)If you're doing lots of inserts (and deletes?) interleaved with lookups, you may want to switch to a logarithmic data structure. There are many options here, but something like blist is a good place to start.
If you have a sorted list, you can insert the new date and sort the result. You can also use bisect.


Answer URL
https://docs.python.org/3/library/bisect.html
