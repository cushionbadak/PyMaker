Natural Text
I already wrote my script using asyncio but found that the number of coroutines running simultaneously is too large and it often ends up hanging around.So I would like to limit the number of coroutines concurrently, and once it reaches the limit, I want to wait for any coroutine to be finished before another is executed.My current code is something like the following:The players is of type list and contains many elements (say, 12000). It needs so much computational resource to run all of them simultaneously in asyncio.gather(*p) so I would rather like the number of players run simultaneously to be 200. Once it reaches 199, then I wish another coroutine starts to be executed.Is this possible in asyncio?
I can suggest using asyncio.BoundedSemaphore.This way, only 200 concurrent tasks can acquire semaphore and use system resources while 12000 tasks are at hand.
You might want to consider using aiostream.stream.map with the task_limit argument:Same approach using pipes:See the aiostream project page and the documentation for further information.Disclaimer: I am the project maintainer.


Answer URL
https://docs.python.org/3/library/asyncio-sync.html#asyncio.BoundedSemaphore
https://docs.python.org/3/library/asyncio-queue.html
