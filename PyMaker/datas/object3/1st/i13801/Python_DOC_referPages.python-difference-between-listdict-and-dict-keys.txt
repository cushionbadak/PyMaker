Natural Text
Say I have a dict:Both list(foo) and foo.keys() return the same thing. What's the difference between the two?
One difference is in Python 3. foo.keys() returns an iterator of the keys, which is what foo.iterkeys() does in Python 2, while list(foo) returns a list of the keys.As noted below, foo.keys() doesn't exactly return an iterator in Python 3. It returns a dict_keys object (or view) which, among its operations, allows iteration. You can also do fun things such as set operations and multiple iteration. It still has the concept of lazy evaluation which makes iterators so powerful.
Python3:from the official documentationCalling foo.keys() will return a dictionary view object. It supports  operations like membership test and iteration, but its contents are  not independent of the original dictionary â€“ it is only a view.in fact, giveswhereas in Python 2 bothgive
There's no real difference in python 2, which is why I suspect dict.keys changed to return a view in python3 and dict.viewkeys was removed.In python 3:The last two things are basically the thing you need to know about the difference between dict.keys and list(dictionary) in python3. dict.keys is just a view of the keys, so checking item in dictionary.keys() is O(1), but you can't iterate over dictionary.keys() and modify the dictionary at the same time.They are both iterators, in that they both implement __iter__.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#dictionaries
https://docs.python.org/3/tutorial/datastructures.html
