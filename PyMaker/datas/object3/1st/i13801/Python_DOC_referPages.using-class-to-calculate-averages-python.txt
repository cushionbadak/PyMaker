Natural Text
I'm reading data from a range of air quality monitors using python. At the moment I'm doing following to calculate averages. I figured there must be a better way to do this using a class, because most of the code repeats itself, to make this more generally applicable and efficient. The other problem is I have a number of different types of monitors, which largely operate on the same principle but have slightly different variables. The code given below is a real nightmare to move across to a new monitor because I have to edit every line. Trouble is when I search about class and averaging, all I seem to get is averaging students grades in a class at school rather than using a software class to calculate averages from multiple variables.Basically the monitor makes one reading a second, but I only want 1 minute averages, so I churn thru following until minute rolls over. Any suggestions gratefully received. Currently I'm doing this:Ideally I want to be able to get something like Thanks a million. 
Your existing code is a bit strange & dangerous with all those try:...except blocks. It's dangerous because it ignores all sorts of errors that really should not be ignored. For example: attempting to use the value of an undefined variable, division by zero errors, and outright syntax errors.You can do what you want with a class, but for something like this I'd be more likely to use a simple dict. I'll post code for both approaches to help you decide (or to add to your confusion :) ). Obviously I don't have your monitoring hardware connected to my serial port, so in order to test this code I wrote a simple generator function that creates random fake data. Hopefully, it will be easy enough for you to modify my code.First, the code that uses a class which holds the current total and the number of readings; this class also has a property that calculates the mean on demand. So you can do things like print dust.total, flow.mean, if you want to. outputAnd here's the version using a dict. I've set the randomiser seed to the same value so that the fake data's the same as in the previous version.outputHere's a simple example of using try:... except to validate input data.output
If you keep the data in lists, it is easier to calculate the average and other statistical properties. And things like the length of the list and the sum are built-ins.So first make some lists.I'll use the following data as an example.Let's split that up;To calculate the average:Update:It is hard to give a recommendation for handling different kinds of instruments without seeing the data they generate.You could for instance write a data translation function for each different kind of sensor, that reads a line from the serial port and returns a tuple or namedtuple of data, with measurements that are not supported by a particular device as None.Assuming you know which sensor you are connected to you could then pick the right function to call at the beginning of the program;


Answer URL
https://docs.python.org/3/library/statistics.html
