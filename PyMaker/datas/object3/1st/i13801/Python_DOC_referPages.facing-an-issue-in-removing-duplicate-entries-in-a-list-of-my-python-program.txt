Natural Text
The below program is for entering the values to a list and print the list again after removing the duplicate entries... Can someone please have a look and let me know what would be the error in the program?When I run the program it gives below error:
as you keep deleting the elements the length of list keeps decreasing and the index you are accessing might not be accessibleinstead do something likeand dont name your lists as the "list" keyword
There are several problems with your code.The first is your assumption that list.remove() takes an index as its argument. It doesn't remove an element by index, but by value (see the method's documentation). The second is that if you modify a list as you iterate over it you may well find that this messes up your indexing:The third (minor) issue is that you are using the name of a built-in type (list) as a variable in your code, which will "shadow" the built-in type, making it inaccessible.
There are a number of problems in your solution:The one you run into is that the remove method removes the first element that matches the argument, but you use the index of the element as argument which does not need to be one of the element. Instead if you want to remove an element by index you should use del mylist[index] instead.Second you're trying to modify an list while iterating through it and that's not a good thing, you will probably not getting the result from that that you expect.Also a aestetically questionable construct is calling your list list, that name is already used by the type list. By doing so you run into the problem that you can't use the builtin list anymore and that could be confusing. The pythonic way to do this is to use the library functions and not reinventing the wheel (and of course not calling your list list):What it does is using OrderedDict which retains the order of the keys to put the element into and then create a list from that and then put it in the original list.That solution however assumes that the items are hashable, which might not be the case. Otherwise the only solution is to iterate twice through the list as Cunningham's answer shows (which is therefore slower).
You are trying to remove j not what is in list[j], you also need to make a copy of the list and remove from that, when you remove elements you change the size of the list so apart from an index error you will try to remove elements that are not there:To remove from the original list, you can use a set and reversed:Or use an OrderedDict:
A simple way using comprehension would be assuming your list name is l to avoid clashing with the type list:It avoids a name clash with the builtin type list, and modifying a list that you are iterating, and is still O(n2/2)


Answer URL
https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types
