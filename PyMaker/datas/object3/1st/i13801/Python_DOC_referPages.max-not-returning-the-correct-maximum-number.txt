Natural Text
I am using the following code to find out which of the two numbers has a maximum value:But the output I get is 2.3 and not 2.300000000001. Can anyone explain why this happens?
Don't worry - max isn't broken, and maximum indeed holds 2.300000000001. print, however, rounds it when printing. You could use repr to prove that:
From the doc:14. Floating Point Arithmetic: Issues and LimitationsItâ€™s easy to forget that the stored value is an approximation to the  original decimal fraction, because of the way that floats are  displayed at the interpreter prompt. Python only prints a decimal  approximation to the true decimal value of the binary approximation  stored by the machine. If Python were to print the true decimal value  of the binary approximation stored for 0.1, it would have to display>>> 0.10.1000000000000000055511151231257827021181583404541015625That is more digits than most people find useful, so Python keeps the  number of digits manageable by displaying a rounded value instead>>> 0.10.1Answer: result you get is fine, but print rounds it.You can check the actual value with repr():
The Python print command truncates numbers automatically. There's some explanations in the comments above. If you want it to print the full value, try using print "%13f" % maximum to show you the full value
In your case, as said by mureinik, only print was the cause of the problem. A more direct demonstration is :But beware, Python uses underlying floating point of its platform and it has not an inifinite accuracy. As a rule of thumb, only 16 decimal digits are accurate:
The "absolute or relative difference" check is implemented by code equivalent to the following Python code:(https://code.google.com/codejam/apactest/faq.html#case_1)It would be good to check this thing as well. When python comes out with output, there is some range of ignorance when dealing with real numbers. 


Answer URL
https://docs.python.org/3/tutorial/floatingpoint.html
