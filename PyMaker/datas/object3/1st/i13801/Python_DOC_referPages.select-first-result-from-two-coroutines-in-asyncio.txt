Natural Text
QuestionUsing Python's asyncio module, how do I select the first result from multiple coroutines?  ExampleI might want to implement a timeout on waiting on a queue:Analagous OperationsThis would be similar to Go's select or Clojure's core.async.alt!.  It is something like the converse of asyncio.gather (gather is like all, select would be like any.)
You can implement this using both asyncio.wait and asyncio.as_completed:Output:Both implementations return the value yielded by the first completed Future, but you can easily tweak it to return the Future itself, instead. Note that because the other Future passed to each select implementation is never yielded from, a warning gets raised when the process exits.
Simple solution, by using asyncio.wait and its FIRST_COMPLETED parameter:gives:
In the case of wanting to apply a timeout to a task, there is a standard library function that does exactly this: asyncio.wait_for(). Your example can be written like this:But this only works for the specific case of a timeout. The other two answers here generalize to any arbitrary set of tasks, but neither of those answers shows how to clean up the tasks which don't finish first. This is what causes the "Task was destroyed but it is pending" messages in the output. In practice, you should do something with those pending tasks. Based on your example, I'll assume that you don't care about the other tasks' results. Here's an example of a wait_first() function that returns the value of the first completed task and cancels the remaining tasks.Running this example:There are no error messages about pending tasks, because each pending task has been cleaned up correctly.In practice, you probably want wait_first() to return the future, not the future's result, otherwise it will be really confusing trying to figure out which future finished. But in the example here, I returned the future's result since it looks a little cleaner.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.gather
https://docs.python.org/3/library/asyncio-task.html#asyncio.wait_for
