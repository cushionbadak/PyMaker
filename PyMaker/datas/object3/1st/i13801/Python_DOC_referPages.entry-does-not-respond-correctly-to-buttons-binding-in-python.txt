Natural Text
I'm trying to program a calculator in python for a while now and there is a problem with my entry that I can't solve it although I don't see any problem with it. so here is an example for my code: Now the problem is that the string "1" should be entered to the entry only if I click n the num_one button, but when I start the program automatically the number "1" goes into the entry.
Lots of issues that I noticed in your code -string=StringVar - You need to call it like StringVar() , otherwise you are just setting StringVar class (not its object) to `string.When you do -You actually call the function first and bind the return value , you should instead bind the function object (without calling it) , Example -For binding the function to left mouse click, you need to bind to <Button-1> (notice the < and > at the ends) not Button-1 .In your function, the first parameter you will recieve (the function that is bound) is the event object , not the next index. You can instead use something like -
As Anand says, there are various problems with your current code, both in the syntax & the design.I'm not sure why you want to track the Entry's index yourself, since the Entry widget already does that. To insert text at the current cursor position you can use Tkinter.INSERT in the entry.insert() method call.It looks like you intend to write a separate callback function for each of the number buttons. That's unnecessary, and it could get messy.The code below shows a way to use a single callback function for multiple buttons. We attach the button's number as an attribute to the button itself. The callback function can easily access that number because the Event object argument that the callback is called with contains the widget that activated it as an attribute.Note that my code uses import Tkinter as tk rather than from Tkinter import *. Sure, it makes the code a little more long-winded, but it prevents name collision. Ideally, GUI code should go into a class, as that makes it easier for the widgets to share data, and it tends to make the code neater.


Answer URL
https://docs.python.org/3/library/functions.html#divmod
