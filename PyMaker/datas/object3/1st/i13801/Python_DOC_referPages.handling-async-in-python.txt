Natural Text
I'm coming from node where handling asynchronous design is as simple as adding a callback and getting on with your life. I'm trying to write some apps in python where I'm not having the same success and I'm struggling to find what to search for since there doesn't seem to be a direct equivalent.Here's an example where I'm running an MQTT messaging client and waiting for a state change signal from a sensor.Both libraries seem to have their own way of holding up the thread but it seems like I can only have one blocking and listening at a time. I have a feeling that threading might be the answer, but I'm struggling to work out how to implement this and not sure if it's right. I'm also confused as to what wait() and loop_forever() actually do.The answer I'm looking for is the 'python' way to solve this problem.
You may want to look at the Twisted framework"Twisted is an event-driven networking engine written in Python"It is specifically designed for building asynchronous network applications.In particular, read up on the reactor, and using Deffered() to register callbacks
Asynchronous programming have been integrated into python recently. So,if you are using python 3.3, then python provides an inbuilt library Asyncio especially for this purpose (which was previously called 'Tulips'). If you are using python 2.7, then you can use Trollius which is backporting of Asyncio. If nothing suits you, than you can obviously use full-fledged network programming framework Twisted as suggested in other answers.
I'm the author of HBMQTT, a MQTT broker/client library which uses Python asyncio API.The client API doesn't need any callback. You can use the client API to subscribe for some topic and then run a loop for reading and processing incoming messages. Something like:HBMQTT is still under development. It requires Python 3.4.


Answer URL
https://docs.python.org/3/library/asyncio.html
https://docs.python.org/3/library/asyncio.html
https://docs.python.org/3/library/asyncio.html
