Natural Text
In Python, data types (like int, float) both represent a value, but also have some built-in attributes/functions/etc:Is it possible to reproduce this behavior within Python, e.g. define a class:where I could have s return 1.2 (instead of typing s.value), and do things like a = s -> a = 1.2? The closest I can get to this behavior is adding something like:and using a = s[()], but that doesn't look very good.
where I could have s return 1.2 (instead of typing s.value)In the console? Then implement the __repr__ method.a = s -> a = 1.2To avoid having to use a = s.value, you can implement __call__ and call the object:Check the documentation about the data model on emulating numeric types.For example:Can be used like this:There are also the __int__ and __float__ magic methods, which you can implement and use like this (this is more semantically correct):
As far as I know, that's not possible for your a = s example. You would have to change the behavior of =, the assignment operator. The assignment operator doesn't really do anything to the object on the right, it just copies a reference to it (in the case of an object, at least).In general, it is possible to change the behavior of built in operators for your custom classes using operator overloading, but Python doesn't provide this sort of option for assignment (=) because of how different it is from operators like addition (+) and even equality (==).


Answer URL
https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types
https://docs.python.org/3/reference/datamodel.html#object.__int__
https://docs.python.org/3/reference/datamodel.html#object.__float__
