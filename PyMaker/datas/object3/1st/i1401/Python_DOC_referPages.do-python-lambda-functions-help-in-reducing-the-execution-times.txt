Natural Text
It is understood that Python lambda functions help in creating anonymous functions.  These can be used in other functions like map(), reduce(), filter() and key() in sorting functions. It can also be used to demonstrate and utilise lexical closures.  What I would like to specifically know here is, do lambda functions have a specific advantage over regular functions in terms of their execution times, considering all the other factors to be unchanged? As I am new to Python, I have tried to understand them by analogously comparing them with the inline functions of C++.  Inline functions, as I understand from C++, are useful in saving time as they do not require the necessary "housekeeping tasks" concerned with context switching that occur during function calls and jumps.Do Python Lambda functions provide with such similar advantages over regular functions?Some relevant posts that I found useful but not necessarily helpful for my question:Why are Python lambdas useful?Why use lambda functions?
No. The function objects generated by lambda behave exactly like those generated by def. They do not execute any faster. (Also, inline in modern C++ is no longer a directive telling the compiler to inline a function, and has very little to do with inlining.)If you want, you can take a look at the bytecode disassembly for a lambda and an equivalent def:Output:No difference. You can also time them:Output:The lambda actually took longer in this run. (There seems to be some confusion in the comments about whether we're timing enough work to be meaningful. timeit wraps the timed statement in a million-iteration loop by default, so yes, we are.)Before you ask, no, lambda has no performance disadvantage over def either. The winner of the above race is basically up to luck. lambda and def do have a significant disadvantage over avoiding the use of a callback function entirely, though. For example, map-with-lambda has a significant performance penalty relative to list comprehensions:Output:Whether lambda or def, Python functions are expensive to call.


Answer URL
https://docs.python.org/3/library/timeit.html#timeit.timeit
