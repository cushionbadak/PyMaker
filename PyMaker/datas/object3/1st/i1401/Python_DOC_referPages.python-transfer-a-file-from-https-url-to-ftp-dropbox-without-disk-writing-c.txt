Natural Text
I have a large file (500 Mb-1Gb) stored on a HTTP(S) location(say https://example.com/largefile.zip).I have read/write access to an FTP serverI have normal user permissions (no sudo).Within these constraints I want to read the file from the HTTP URL via requests and send it to the FTP server without writing to disk first.So normally, I would do.and then upload the local file to FTP. But I want to avoid the disk I/O. I cannot mount the FTP as a fuse filesystem because I don't have super user rights.Ideally I would do something like ftp_file.write() instead of handle.write(). Is that possible? The ftplib documentation seems to assume only local files will be uploaded, not response.content. So ideally I would like to doI am not sure how to write ftp_send_chunk().There is a similar question here (Python - Upload a in-memory file (generated by API calls) in FTP by chunks). My use case requires retrieving  a chunk from the HTTP URL and writing it to FTP.P.S.: The solution provided in the answer (wrapper around urllib.urlopen) will work with dropbox uploads as well. I had problems working with my ftp provider ,so finally used dropbox, which is working reliably.Note that Dropbox has a "add web upload" feature in the api which does the same thing (remote upload). That only works with "direct" links. In my use case the http_url came from a streaming service that was i.p. restricted. So this workaround became necessary.Here's the codeI think it should even be possible to do this with google-drive via their python api , but using credentials with their python wrapper is too hard for me. Check this1 and this2
It should be easy with urllib.request.urlopen, as it returns a file-like object, which you can use directly with FTP.storbinary.If you want to monitor progress, implement a wrapper file-like object that will delegate calls to filehandle object, but will also display the progress:For Python 2 use:urllib.urlopen, instead of urllib.request.urlopen.filehandle.info().getheader('Content-Length') instead of str(self.p + filehandle.length)


Answer URL
https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen
https://docs.python.org/3/library/ftplib.html#ftplib.FTP.storbinary
