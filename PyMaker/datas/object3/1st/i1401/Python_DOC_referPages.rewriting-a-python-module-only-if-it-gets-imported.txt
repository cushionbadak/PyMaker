Natural Text
I'm writing a library that uses abstract syntax trees to rewrite parts of amodule. Once it's rewritten, I put it in sys.modules so other modules cancall it. However, the timing is important, and I can't just run the rewritten moduleat the start. I want it to run when it gets imported by another module, and notbefore.I had solved this by writing an importer, but that used the imp module tocreate a new module object for my rewritten code. That imp module is nowdeprecated, and the replacement doesn't seem to let me create and execute anew module. It just lets me find the source file, and create a spec objectpointing to that.If I can't use the imp module anymore, How can I create a new module with therewritten code?As a trivial example, I have a module that just prints out a couple of messages:My tracer has options for whether or not to import my_module.py and whether ornot to rewrite it with an extra print() message.When I call it, you can see the messages:That all works fine with Python 3.6, but Python 3.7 complains about the imp module:
It looks like I misunderstood the importer protocol. You can override the  part that executes the module, and leave the part that creates the new module unchanged. Here's my example, rewritten to use the newer importer protocol with find_spec() and execute_module() instead of find_module() and load_module().The output from that is exactly the same as the old version, but the deprecation warning is gone.


Answer URL
https://docs.python.org/3/glossary.html#term-importer
