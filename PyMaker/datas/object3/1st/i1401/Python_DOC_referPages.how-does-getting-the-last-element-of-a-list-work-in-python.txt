Natural Text
I know that the last element of a list say li can be accessed by li[-1] but how exactly does it work in the background? Is it same as li[len(li) - 1]Is there any other way of getting the last element of a list without actually knowing the length of the list? I am looking at this question in terms of efficiency so please suggest any other alternate solutions with less complexity if it exists.
You probably want to read this:https://docs.python.org/2/faq/design.html#how-are-lists-implemented-in-cpythonIt said,CPython’s lists are really variable-length arrays, not Lisp-style  linked lists. The implementation uses a contiguous array of references  to other objects, and keeps a pointer to this array and the array’s  length in a list head structure.That's why li[-1] is recommended and most efficient.
li[-1] is the fastest and more Pythonic way to do it. You can do li[-n] to get the nth element starting from the end, it is just an access by index and it is in fact faster than li[len(li) - 1].If you have a list in python the length is given so li[1] works the same way as li[-1].
From docsThe formal syntax makes no special provision for negative indices in  sequences; however, built-in sequences all provide a getitem()  method that interprets negative indices by adding the length of the  sequence to the index (so that x[-1] selects the last item of x).So yes, internally it DOES work as -1 + len(li)However, here is the kicker. len is a constant time/O(1) operation, and does not depend on the length of the list. So, negative indexing is really efficient, and really IS the right way you should be accessing elements. That is why it is there after all.


Answer URL
https://docs.python.org/3/reference/expressions.html#subscriptions
