Natural Text
I have a file that contains several numbers. If the number is less than 4 digit longs, we need to extract it and append 0 to the beginning, + a suffix and then append to master list.exDF = [ 1, 23, 333, 4444]should be DF = [0001.hk, 0023.hk, 0333.hk, 4444.hk]The below code works, and helps me accomplish the above task.There are a couple of issues with the above approach. With the above code, it will give me 3 lists, but the result should be only 1 list so I can do some further processing / tasks. Also, I feel it looks weird and repetitive. It will do what is intended, but is there a way to make it a tad nicer ?Appreciate all the help !!
You could use zfill in a list comprehension:OutputThe above list comprehension is equivalent to:From the documentation, zfill:Return a copy of the string left filled with ASCII '0' digits to make  a string of length width.So as the code is calling s.zfill(4) it will append '0' at beginning of the string until the string is of length 4.
The simplest way to do this would be:Read more about format strings in the PEP 498 document that introduced them.
Python has a zfill() function that will add zeroes to the front of a string until the string has the length you want, if you have fewer digits:So you could just do:
A cool one liner could be:list(map(lambda x: ('000' + str(x) + '.hk')[-7:], ls))What this does is to add a '000' at the begining of each number, and the suffix at the end. Then it just cuts the first part (as the extension is always the same, you know that the amount of chars that the string has is always seven). This would be:333 ==> 00033.hk ==> 0033.hkIn case you are not familiar with the map function, what it does is to apply a function to each element in an iterable, so this will apply this function to each number in this list.Here's a mini example for you to try:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/library/stdtypes.html#str.zfill
