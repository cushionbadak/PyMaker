Natural Text
I'm trying to split a list of integers into sublists of the the indexes of equal integers. So say I have a list:The desired output would be:I can't figure out how to do this though, as most solutions require you to first sort the original list, but in my case, this messes up the indices. Itertools or np.arrays have not helped me for this reason, as they only group sequential equal elements. Does anyone know of a solution for this problem? I would love to hear!
You can use enumerate:Output:
You can use collections.defaultdict for a one-pass solution. Then use sorted if you need, as in your desired result, to sort your indices by value.For comparison, the values of dd are insertion ordered in Python 3.6+ (officially in 3.7+, as a CPython implementation detail in 3.6):
Here is how I would do it with numpy, using the argsort function I linked in the comments.
This can be achieved with a list comprehension.
Using enumerate and a defaultdict, you can build a mapping of values to their indices with 
Here's a linear time and space solution that appends indexes to number bucket lists in an OrderedDict() and extracts the index lists to produce the result:Output:Try it!


Answer URL
https://docs.python.org/3/library/functions.html#enumerate
https://docs.python.org/3/library/collections.html#collections.defaultdict
