Natural Text
Let B inherit from A. Suppose that some of B's behavior depends on the class attribute cls_x and we want to set up this dependency during construction of B objects. Since it is not a simple operation, we want to wrap it in a class method, which the constructor will call. Example:Problem: cm as well as __init__ will always be doing the same things and their behavior must stay the same in each derived class. Thus, we would like to put them both in the base class and not define it in any of the derived classes. The only difference will be the caller of cm - either A or B (or any of B1, B2, each inheriting from A), whatever is being constructed. So what we'd like to have is something like this:I feel like it's either something very simple I'm missing about Python's inheritance mechanics or the whole issue should be handled entirely differently.This is different than this question as I do not want to override the class method, but move its implementation to the base class entirely.
Look at it this way: Your question is essentially "How do I get the class of an instance?". The answer to that question is to use the type function:But you don't even need to do that, because classmethods can be called directly through an instance:This works because classmethods automatically look up the class of the instance for you. From the docs:[A classmethod] can be called either on the class (such as C.f()) or on an instance  (such as C().f()). The instance is ignored except for its class.
For ClassOfWhateverIsInstantiated you can just use self:To understand this, just remember that class B is inheriting the methods of class A. So when __init__() is called during B's instantiation, it's called in the context of class B, to which self refers.


Answer URL
https://docs.python.org/3/library/functions.html#type
https://docs.python.org/3/library/functions.html#classmethod
https://docs.python.org/3/library/functions.html#staticmethod
