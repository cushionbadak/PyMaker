Natural Text
I need a method in a composite class to return the mapping of the instance.This solution will only work once when as_dict() method is called for the first time. When it's called for the second time, this would not work since self.entity will now refer to a dictionary and calling __dict__ on it will raise AttributeError. So I came up with a not so efficient solution;This works but not so efficient because I am making a deepcopy of the instance every time I call the function. My question is, why when I call self.entity.__dict__, entity becomes type dict instead of type Entity? What is the mechanism behind this? And also whats the most efficient implementation to obtain a mapping of a composite object?
As jonrsharpe mentions, this:does not create a copy of self.__dict__ - it only binds the local name mapping_dict to the object also bound to self.__dict__ (you definitly want to read this for more about python names / bindings etc).So this next line:is actually the equivalent of:which is obviously not what you want.A simple solution is to create a new dict from self.__dict__. Since we need this for both  Component and Entity, the better solution is to factor this out to a mixin class:Note that this won't take computed attributes (properties etc) in account, only plain instance attributes, but I assume that it's what you want.


Answer URL
https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping
