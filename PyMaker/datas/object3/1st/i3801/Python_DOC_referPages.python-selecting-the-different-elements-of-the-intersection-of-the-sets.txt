Natural Text
I have two lists in Python, like these:I need to create a third list with items from the first list which aren't present in the second one. From the example I have to get:Are there any fast ways without cycles and checking?
Beware that where you might expect/want it to equal set([1, 3]). If you do want set([1, 3]) as your answer, you'll need to use set([1, 2]).symmetric_difference(set([2, 3])).
The existing solutions all offer either one or the other of:Faster than O(n*m) performance.Preserve order of input list.But so far no solution has both. If you want both, try this:Performance testResults:The method I presented as well as preserving order is also (slightly) faster than the set subtraction because it doesn't require construction of an unnecessary set. The performance difference would be more noticable if the first list is considerably longer than the second and if hashing is expensive. Here's a second test demonstrating this:Results:

The difference between two lists (say list1 and list2) can be found using the following simple function.orBy Using the above function, the difference can be found using diff(temp2, temp1) or diff(temp1, temp2). Both will give the result ['Four', 'Three']. You don't have to worry about the order of the list or which list is to be given first.Python doc reference
In case you want the difference recursively, I have written a package for python:https://github.com/seperman/deepdiffInstallationInstall from PyPi:Example usageImportingSame object returns emptyType of an item has changedValue of an item has changedItem added and/or removedString differenceString difference 2Type changeList differenceList difference 2:List difference ignoring order or duplicates: (with the same dictionaries as above)List that contains dictionary:Sets:Named Tuples:Custom objects:Object attribute added:
If you are really looking into performance, then use numpy!Here is the full notebook as a gist on github with comparison between list, numpy, and pandas.https://gist.github.com/denfromufa/2821ff59b02e9482be15d27f2bbd4451
i'll toss in since none of the present solutions yield a tuple:alternatively:Like the other non-tuple yielding answers in this direction, it preserves order
Can be done using python XOR operator.This will remove the duplicates in each listThis will show difference of temp1 from temp2 and temp2 from temp1.
most simple way,use set().difference(set())answer is set([1])can print as a list,
Try this:
this could be even faster than Mark's list comprehension:
I wanted something that would take two lists and could do what diff in bash does. Since this question pops up first when you search for "python diff two lists" and is not very specific, I will post what I came up with.Using SequenceMather from difflib you can compare two lists like diff does. None of the other answers will tell you the position where the difference occurs, but this one does. Some answers give the difference in only one direction. Some reorder the elements. Some don't handle duplicates. But this solution gives you a true difference between two lists:This outputs:Of course, if your application makes the same assumptions the other answers make, you will benefit from them the most. But if you are looking for a true diff functionality, then this is the only way to go.For example, none of the other answers could handle:But this one does:
You could use a naive method if the elements of the difflist are sorted and sets.or with native set methods:Naive solution:  0.0787101593292Native set solution:  0.998837615564
Here's a Counter answer for the simplest case.This is shorter than the one above that does two-way diffs because it only does exactly what the question asks: generate a list of what's in the first list but not the second.Alternatively, depending on your readability preferences, it makes for a decent one-liner:Output:Note that you can remove the list(...) call if you are just iterating over it.Because this solution uses counters, it handles quantities properly vs the many set-based answers.  For example on this input:The output is:
If you run into TypeError: unhashable type: 'list' you need to turn lists or sets into tuples, e.g.See also How to compare a list of lists/sets in python?
I am little too late in the game for this but you can do a comparison of performance of some of the above mentioned code with this, two of the fastest contenders are,I apologize for the elementary level of coding.
This is another solution:
single line version of arulmr solution
if you want something more like a changeset... could use Counter
We can calculate intersection minus union of lists:
This can be solved with one line.The question is given two lists (temp1 and temp2) return their difference in a third list (temp3).
Here are a few simple, order-preserving ways of diffing two lists of strings.CodeAn unusual approach using pathlib:This assumes both lists contain strings with equivalent beginnings.  See the docs for more details.  Note, it is not particularly fast compared to set operations.A straight-forward implementation using itertools.zip_longest:
Let's say we have two listswe can see from the above two lists that items 1, 3, 5 exist in list2 and items 7, 9 do not. On the other hand, items 1, 3, 5 exist in list1 and items 2, 4 do not.What is the best solution to return a new list containing items 7, 9 and 2, 4?All answers above find the solution, now whats the most optimal?versusUsing timeit we can see the resultsreturns
Here is an simple way to distinguish two lists (whatever the contents are), you can get the result as shown below :Hope this will helpful.




Answer URL
https://docs.python.org/3/library/pathlib.html#module-pathlib
https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.relative_to
https://docs.python.org/3/library/itertools.html#itertools.zip_longest
