Natural Text
I found multiple (slightly different) ways to define abstract classes in Python. I read the documentation and also could not find an answer here on stackoverflow. The main difference between the three examples (see code below) is:A sets a new metaclass abc.ABCMeta explicitlyB inherits from abc.ABCC inherits from objects but defines @abc.abstractmethod classesIt seems that A and B are not different (i.e. also B has the new metaclass abc.ABCMeta). However, class C remains of type type. What are the impacts of not defining a metaclass for C? When is it necessary to define the metaclass or is it wrong/bad style to not define the abc.ABCMeta metaclass for an abstract class? Nonetheless, the class C seems to behave as I expect from an ABC.
The abc.ABCMeta class is necessary to actually enforce the abstractmethod behaviour. Its itention is to disallow instantiation of any classes which do not implement the abstract method. The decorator itself cannot enforce that, the metaclass is enforcing the decorator upon instantiation:However: So, without the metaclass, the abstractmethod decorator doesn't do anything.abc.ABC is merely a shorthand so you can do Foo(ABC) instead of Foo(metaclass=ABCMeta), that is all:A helper class that has ABCMeta as its metaclass. With this class,  an abstract base class can be created by simply deriving from ABC  avoiding sometimes confusing metaclass usage [..]https://docs.python.org/3/library/abc.html#abc.ABC


Answer URL
https://docs.python.org/3/library/abc.html#abc.ABC
