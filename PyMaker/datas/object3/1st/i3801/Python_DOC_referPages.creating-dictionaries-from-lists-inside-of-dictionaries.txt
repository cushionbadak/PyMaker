Natural Text
I'm quite new to Python and I have been stumped by a seemingly simple task.In part of my program, I would like to create Secondary Dictionaries from the values inside of lists, of which they are values of a Primary Dictionary.I would also like to default those values to 0For the sake of simplicity, the Primary Dictionary looks something like this:What I would like my result to be is something like:I understand the process should be to iterate through each list in the primaryDict, then iterate through the items in the list and then assign them as Dictionaries.I've tried many variations of "for" loops all looking similar to:I've also tried some methods of combining Dictionary and List comprehension,but when I try to index and print the Dictionaries with, for example:I get the "TypeError: list indices must be integers or slices, not str", which I interpret that my 'apple' is not actually a Dictionary, but still a string in a list. I tested that by replacing 'apple' with 0 and it just returns 'apple', proving it true.I would like help with regards to:-Whether or not the values in my list are assigned as Dictionaries with value '0'or-Whether the mistake is in my indexing (in the loop or the print function), and what I am mistaken withor-Everything I've done won't get me the desired outcome and I should attempt a different approachThanks
You can get the data structure that you desire via:But the correct nested access would be:If you actually want primaryDict['list_a']['apple'] to work, do instead
Here is a dict comprehension that works:There are two problems with your current code. First, you are trying to iterate over listKey, which is a string. This produces a sequence of characters.Second, you should use something like in place of
You are close. The main issue is the way you iterate your dictionary, and the fact you do not append or assign your sub-dictionaries to any variable.This is one solution using only for loops and list.append.A more Pythonic solution is to use a single list comprehension.If you are using your dictionary for counting, which seems to be the implication, an even more Pythonic solution is to use collections.Counter:There are specific benefits attached to collections.Counter relative to normal dictionaries.
Output:Hope this helps!
@qqc1037, I checked and updated your code to make it working. I have mentioned the problem with your code as comments. Finally, I have also added one more example using list comprehension, map() & lambda function.Another example: Using list comprehension, map(), lambda function


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
