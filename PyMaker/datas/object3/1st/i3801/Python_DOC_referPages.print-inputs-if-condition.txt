Natural Text
I would like to create an application that reads the name and grade of 4 students, prints the average and says which student is above average. For instance:Student 1: JohnGrade of John: 90Student 2: PaulGrade of Paul: 85Student 3: RingoGrade of Ringo: 80Student 4:Grade of George: 75The average of grades is 82.5 and John and Paul are above average. Here's my code:I'm able to print the grades of the students that are above average, but how can I print their names? I've tried to sort the grades_list and create a new list for the names, but it didn't help me. Any tips? (Sorry for the bad title)
First, let me simplify your code a bit to make the rest of this easier. Instead of this:… you can just do this:Now, you build a second list of names:And now you can either loop over the two lists in lock-step using zip:… or you can loop over the indexes of grade_list instead of the members:The first one is obviously cleaner and less verbose, so if you can understand how zip works, that's the one you should probably use.But let me show you an even nicer way to solve this:Now, you don't have to repeat yourself four times—and, if you want to change it to handle John, Paul, Ringo, George, and Brian, or even to ask the user how many students to handle, you only need to replace that 4 with 5 or int(input("How many students? ")), and the rest of your code still works.(If you're not using Python 3.6, you can't use "f-strings" like f"Student {i+1}: ", but you can change those to use %, as you're already used to.)Other ideas to play with once you've got the basics working:Use a list of pairs (tuples, or lists, with two elements), instead of a pair of lists.Use a list of instances of some very simple class (maybe built with namedtuple, @dataclass, or @attr) instead of just pairs.Use a dict instead of a list of pairs. Notice that this requires names to be unique (which you might actually want), and abandons any notion of order.Or use an OrderedDict, which gives you the same benefits without losing ordering.Or use a third-party collection class like blist.sorteddict that can keep things sorted by name, or by grade, or whatever you want.These all have different pros and cons, so it's worth working through a bunch of them to compare. jpp's answer demonstrates the dict solution—as you can see, it's cleaner and simpler in some ways, less so in others.
This is an extension to @abarnet's post, showing an alternative way to structure your data.If the student number is not important, you can use an unordered collection such as a dictionary. If ordering is important, the below solution can be adapted to use collections.OrderedDict.Note that dictionary keys must be unique; so duplicate names are not permitted with this structure. You can, however, create a dictionary of tuples to map a unique identifying number to (name, score).
You should use a two-dimensional array(a.k.a. matrix) so that you have pairs of names and grades:That's how I would do it.


Answer URL
https://docs.python.org/3/library/functions.html#zip
