Natural Text
How can I parse text on python using regex to extract a valid passage from stuff likenear accomodation\n\nNear accomodation is one case of accomodation. By changing the shape of the lens, accomodation adjusts the refractory power to the distance of an object under observation. The issue isI want to extract Near accomodation is one case of accomodation. By changing the shape of the lens, accomodation adjusts the refractory power to the distance of an object under observation.That means the valid text should end on a period and get rid of stuff like "The issue is" which is an unfinished sentence as well as anything that comes before characters like \n.Another example would be<p>The level of dopamine available in nerve terminals is controlled by the enzyme monoamineoxidase, which inactivates the neurotransmitter in the presynapse. </p>\n\n</body></html>Which should extractThe level of dopamine available in nerve terminals is controlled by the enzyme monoamineoxidase, which inactivates the neurotransmitter in the presynapse. So get also rid of any html tags So I need clean passages that end up in a period. Without any newline characters or html tags that could come after or before the relevant passage. All passages are more or less like the examples I provided.
I propose seperating the removal of HTML tags (which you should not do with regex) from the main task, for example with this solution.The rest of the task can then be solved with the following regex:We first match either the beginning of the text (^), a new line or a literal dot. The ?: is just to make this group non-capturing. Then we collect everything until a dot, in a greedy fashion (meaning we get the biggest possible match).You could use it like this:
The key is to be able to precisely state the conditions that:Start the matchContinue the matchEnd the matchIn your case, these seem to beAn upper-case letter. [A-Z]Not any char from '\n', '<' and so on, repeated. [^\n<>]+A full stop. \.Since regexs are greedy by default, the ending condition will apply on a longest match and so get multiple sentences that don't contain the continuation condition. This gives the regex [A-Z][^\n<>]+\.:Using what you provided:Feel free to adapt as needed.


Answer URL
https://docs.python.org/3/library/re.html#regular-expression-syntax
https://docs.python.org/3/library/re.html
