Natural Text
I'm building a module, but I'm having some hard times understanding which is the best-practice to avoid workspace pollution.Example codeMy module is:The contents of the files are:init.pysomeFunctions.pyaSubModule.pyThe problemWhen doingI would like to be able to accessHowever I have also the following unwanted behaviour:Problem 1The file someFunctions.py is imported as a submodule. In other words, I can access function1 both from aModule.function1 and from aModule.someFunctions.function1 . This is, in my opinion, messy.The only solution I found to this is to rename the file _someFunctions.py . The leading underscore is now telling Python not to import it. This looks fine, but I'm not sure if this is considered good practice.Problem 2The functions exp, log and sqrt are imported under aModule.aSubModule. I would like to access the functions inside aSubModule doing but I would like to avoid having exp, log and sqrt inside aModule.aSubModuleThis is because inside the "real" sub module i'm working to, I have just 3-4 functions that are relevant to the user, but more than 10-15 imports. Therefore when I try to tab-completeabout 20 entries pop-up, of which just 3-4 are relevant.
I could not find a nice way, but hacks are possible. The trick is that any identifier starting with an underscore will not be used by the help system not for tab autocompletion, even if it is a module identifier. So to avoid automatic access to unnecessary identifier, you can have packages containing private modulesContent of aModule __init__.py:Content of aSubModule __init__.py:I must admit it is rather hacky and not very Pythonic. Maybe a custom importer would lead to cleaner code, but I could not find my way through the importlib module.My conclusion is that the Pythonic way is probably not to try to hide names imported through a module, but just import in the current namespace the names you need.


Answer URL
https://docs.python.org/3/tutorial/modules.html?highlight=__all__#importing-from-a-package
