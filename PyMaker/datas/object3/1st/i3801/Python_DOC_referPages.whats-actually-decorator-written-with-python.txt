Natural Text
Im struggling to understand decorator with python. My understanding is here below;At first, my_function_too(x,y) method will be defined as func in my_decorator(func) and then function_that_runs_func(*args,**kwargs) methods will be outputed.1. What is the func in @functools.wraps(func) ? 2. Why do we need to write return function_that_runs_func and  return my_decorator here ?My friends explained that function_that_runs_func()method is going to replace my_function_too() method. But I could not understand what he is saying and why.3. Would anyone please tell gently me what he is implying ? CODE:OUTPUT:In the decorator 124
It may help to think of a decorator that takes args as a decorator factory. So decorator_with_arguments(57) returns my_decorator, which does the actual decorating. That is, my_decorator receives the original version of my_function_too as its arg and returns the decorated version, binding it to the name my_function_too, just as if you did In your code, the func in @functools.wraps(func) is the function that's passed to my_decorator, which in this case is the original version of my_function_too. functools.wraps is a decorator version of functools.update_wrapper. You can read about them both in the linked docs. Don't worry too much about them, they just make the decorated version of the function look more like the original version.


Answer URL
https://docs.python.org/3/library/functools.html#functools.update_wrapper
