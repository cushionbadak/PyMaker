Natural Text
While following Python tutorials, I came to know about the built-in repr() function, which according to the official documentation:Returns a string containing a printable representation of an object. For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to eval(), otherwise the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object. A class can control what this function returns for its instances by defining a __repr__() method.https://docs.python.org/3/library/functions.html#reprTo sum up, for many object types including most built-ins, eval(repr(obj)) == obj (or the equivalent  obj == eval(repr(obj)) returns True, also mentioned in the above documentation. But, while executing the following code, AttributeError: type object 'datetime.datetime' has no attribute 'datetime' occurs in the last statement i.e. print(today == eval(repr(today)).Can someone explain the reason behind this behavior?
datetime uses datetime.datetime(...) in the representation:That's the module name, followed by the class name, which is an attribute of the module:The name datetime in your example doesn't reference the module but the class inside the module:Use import datetime instead, then use today = datetime.datetime.now().repr() calls the object.__repr__() method, which is not passed any information on how your code is referencing the class; so the instance can't adjust what string it generates. Even if more information was available, you wouldn't want to generate different strings anyway; do you really want to figure out what fluzborx.datetime() is when someone jokingly used import datetime as fluzborx somewhere?Note that the goal of repr() is to aid debugging, not to provide full serialisation support of data types. If you want to serialise datetime instances, use a proper serialisation format such as pickle, or write your own datetime -> string and string -> datetime conversions (e.g. for JSON, perhaps use ISO8601 string conversions).


Answer URL
https://docs.python.org/3/library/functions.html#repr
https://docs.python.org/3/reference/datamodel.html#object.__repr__
https://docs.python.org/3/library/pickle.html
