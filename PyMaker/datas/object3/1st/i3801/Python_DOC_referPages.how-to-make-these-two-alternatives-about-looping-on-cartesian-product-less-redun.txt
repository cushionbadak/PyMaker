Natural Text
In the following function f, we can either loop on a first or on b first.How to make its code less redundant?I was thinking about product, but still, we would have:which is still a bit redundant.
How about using a generator expression to flip the tuples when you do the product with the source of the b values first:I would note that this is still not the same as your original function, since in the original, myfunction gets called a different number of times between the two branches (either 10 times or 50). The new function always calls it (via myfunction2) in the inner loop, so it will always be run 50 times.
If your function is too repetitive, you can refactor things step by step.The commonality you want to factor out is calling myfunction2(a, b) on some iterator. But the second iterator not only has the product args reversed, but the elements of each pair as well. So:If you're doing this multiple times, you can factor out that tuple-flipping into a function:(Or, of course, flippair could just return p[::-1]—or, since you don't need tuples, but just any kind of iterable, just use reversed. But this way seems more explicit, and still easily concise enough.)But I think the best solution is to use keyword arguments for myfunction:This makes it really obvious that you're passing a values as a and b values as b, rather than flipping them so they end up in b and a and then flipping them back to pass them in reverse order.While we're at it, why repeat the ranges?… at which point you can give them names as well:… or, maybe even factor out the calls to range:This is probably horrible overkill for just choosing "a-then-b" vs. "b-then-a", but if you wanted this to extend to choosing different permutations of three variables, or arbitrary orders from a dynamic list, etc., it would probably be worth doing.
You could map through reversed:


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
