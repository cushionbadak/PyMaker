Natural Text
As I dig further into Python internals, I start to see abc's more often in the documentation. Unfortunately the docs don't explain how they can be used. I haven't even been able to use the "concrete implementations" of these abstract base classes. For example, reading about class importlib.abc.SourceLoader, one learns that "is_package" is a concrete implementation of InspectLoader.is_package(). But what if I'd like to use that in my code? Is it possible? I've tried many ways but the method can't be imported. ExtensionFileLoader is documented as a concrete implementation of importlib.abc.ExecutionLoader, but if I try to use it (such as: from importlib import machinery.ExecutionLoader), once again it can't be found. If these methods can't be imported, why are they documented? is there any sample code to show how they can be used?   Example:  People might comment that I shouldn't try to import an abstract class. But "is_package" is documented as concrete, so I should be able to use it somehow, which is my question.
The error message that this line produces should give you a hint where you've gone wrong:"import foo" requires that foo be a module, but SourceLoader is a class inside a module.  You need to instead write:However, there are further problems with this line:First of all, SourceLoader.is_package is an instance method, not a class or static method; it has to be called on an instance of SourceLoader, not on the class itself.  However, SourceLoader is an abstract class, so it can't be directly instantiated; you need to use a concrete subclass like SourceFileLoader instead.  (When the docs call SourceLoader.is_package a "concrete implementation" of InspectLoader.is_package, I believe what they mean is that SourceLoader provides a default implementation for is_package so that its subclasses don't need to override it in order to be non-abstract.)Hence, you need to write:where fullname is "a fully resolved name of the module the loader is to handle" and path is "the path to the file for the module."


Answer URL
https://docs.python.org/3/library/importlib.html#importlib.abc.SourceLoader.is_package
https://docs.python.org/3/library/importlib.html#importlib.machinery.SourceFileLoader
