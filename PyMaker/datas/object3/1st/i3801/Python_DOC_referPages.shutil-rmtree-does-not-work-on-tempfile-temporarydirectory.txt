Natural Text
Consider this testIn tearDown however an error is raisedwhich refers to self.test_dir.name.According to the source code for tempfile, both elements are the same.And I'm not using it within a context, so __exit__() shouldn't be called as far as I understand.What is happening?
Don't cleanup these with shutil.  The tempfile.TemporaryDirectory class provides a cleanup() method, just call that if you want to opt-in to an explicit cleanup.The reason you get the crash with your code is that the TemporaryDirectory class is designed to clean up after itself once it goes out of scope (ref count to zero).  However, since you've already removed the directory from your filesystem manually, the tear down fails when the instance subsequently tries to delete itself.  The "No such file or directory" error is from TemporaryDirectory's own tear down, it's not from your shutil.rmtree line!
It's not context related:it printsSo as soon as the reference of t is set to None the object is garbage collected and the directory is removed, as the documentation states:On completion of the context or destruction of the temporary directory object the newly created temporary directory and all its contents are removed from the filesystem.Uncommenting os.rmdir(s) in the snippet below throws exception when object is finalized:So your call probably succeeds, but you get the exception at the finalization of the object (just afterwards)Calling cleanup() object method instead of rmtree solves the issue, because the object internal state is updated for not to try to remove the directory when finalized (if you ask me, the object should test if directory exists before trying to clean it up, but even that doesn't always work since it's not an atomic operation)So replacebyor by nothing at all, let the object clean the directory on deletion.


Answer URL
https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory
https://docs.python.org/3/library/weakref.html#weakref.finalize
