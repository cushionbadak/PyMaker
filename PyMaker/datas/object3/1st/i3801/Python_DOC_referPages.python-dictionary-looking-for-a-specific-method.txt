Natural Text
Let's say I have a dictionary of strings as keys and values as integers.Where keys will be distinct strings encountered and how many times they are encountered.For example: "word word word" would produce: {"word" : 3}I want to say for the variables:Â This algorithm is slow because hashing happens twice by calling the update and string in item method, would be faster if when python performs the hashing to check if string exists in item either increase the value by 1 if a key exists there or create the key and put value as 1.In Java the corresponding method would be:Reduces code from an if-else statement to just one line and skips hashing again.Just wondering if such method exists in python 3.Thanks in advance!  
I did some timing analysis using different ways to fill the dictionary. First, the setup:Now, the functions, using your approach with update, or just using +=, or get with default, as well as defaultdict and Counter:They all produce the same result, although the last two use a subclass of dict:Using update is pretty wasteful here; += is fastest, even with the in check, whereas defaultdict and Counter are shorter, but also slower.Note, however, that in this example text, most words occur only once, which might skew the tests. Using words = words * 100, we get this, making Counter less slow, and defaultdict the fastest.Still, personally I'd use Counter as the difference in running time is probably not much of a problem, it's the shortest, the intention is immediately clear, and it also provides some useful helper methods, like getting most common entries and such.
Idiomatic Python would be


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.get
https://docs.python.org/3/library/collections.html#collections.defaultdict
https://docs.python.org/3/library/collections.html#collections.Counter
