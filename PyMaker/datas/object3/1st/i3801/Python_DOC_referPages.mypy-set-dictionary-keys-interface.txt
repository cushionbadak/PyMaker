Natural Text
Suppose I have a function which takes a dictionary as a parameter:Can I specify that this dictionary must have the key "x" to mypy? I'm looking for something similar to interface from typescript, without changing d to a class.The reason I don't want to change d to a class, is because I am modifying a large existing codebase to add mypy type checking and this dictionary is used in many places. I would have to modify a lot of code if I had to change all instances of d["x"] to d.x.
No, with typing (PEP 484 and PEP 526) you can't declare that a specific key is to be present in a container. All that you can declare are the types, not the runtime contents. 'x' is a specific string value, not a type.I know you specifically don't want to have to do this, but the perhaps the answer is to consider a different data structure, such as a named tuple or a dataclass, where you can specify the attribute a type has.This is what the typescript declaration does, really:The printLabel function has a single parameter that requires that the object passed in has a property called label of type string.Python attributes are the moral equivalent of Typescript object properties. That Typescript object notation and Python dictionaries have a lot in common perhaps confuses matters, but you should not look upon Typescript object declarations as anything but classes, when trying to map concepts to Python.mypy does include extensions to typing which fall outside of the Python type hinting standard. This includes the mypy_extensions.TypeDict object, which works a lot like a typing.TypeVar declaration:or using a class-based syntax:Keys in a TypeDict declaration are either all required, or all optional (when you set total=False on the declaration); you'd have to use inheritance to produce a type with some keys optional, see the documentation linked. But be aware that TypeDict is experimental and could be dropped again or altered drastically in a future mypy release, and is not available in other Python type-hint checkers.
Mypy extends PEP 484 by providing a TypedDict type. This allows specifying specific attributes of a dict type. In your case you can do the following:


Answer URL
https://docs.python.org/3/library/typing.html#typing.TypeVar
