Natural Text
I am trying to write a part of program where the user inputs a Target Word (targetWord = input()), assigns a nested Dictionary with the key being the same as the input word.For example:where all the values in the nested dictionary are assigned integers.The user may input 'x', to which the program will assign:The program should then allow the user to input words again, but this time every single word from input is appended to a lookup list, for example user inputs 'y', then 'z':Then the program should run through the nested dictionary and for every value with the corresponding key as in the targetDict, append just values to a new nested list and add whatever value the nested Dictionary values are. So the output of this section should be:because in nested dict 'y', only 'blue' was a common key, to which its value 2 was put in a list, then appended onto targetOutput. The same case with dict 'z', where the keys 'one' and 'green' were present in both 'x' and 'z', putting their values, 1 and 1 into a nested list.Here is a representation of the dysfunctional code I have for:The sum function at the end is because my actually final output should be the sum of the values in the nested list, akin to:I am also trying to make the reverse happen, where in another list for every key in the lookup, it returns a nested list containing the sum of every value the targetWord dictionary also has a key for, like:My question is, how do I fix my code so that it outputs the 2 above lists? I'm quite new with dictionaries.
The .keys() method on a dictionary gives you a dictionary view, which can act like a set. This means you can take the intersection between the key views of two dictionaries! You want the intersection between the inital targetDict and the dictionaries named in lookup:The targetDict.keys() & other_dict expression produces the intersection here:The [other_dict[common] for common in common_keys] list comprehension takes those keys and looks up the values for them from the other dictionary.If you want to sum the values, just pass the same sequence of values to the sum() function:There is no point in wrapping the summed values in another list there as there is only ever going to be a single sum. The above gives you a targetOutput list with [2, 2], not [[2], [2]].


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.keys
https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
