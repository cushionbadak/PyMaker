Natural Text
I found this question in 'How to Think like a computer scientist: Learning with Python 3, 3rd edition' by Peter Wentworth. I have added their solution below as well.My simple recursive function produces wrong outputThe Books Code produces the correct one, but why the need of a flag?I am unable to understand the requirement of a flag here, though it produces the correct result.
Here is a neat fix of your function:Remark:when i is a list you can re-assign it to the max of that list (recursively) so that you do not have to use too many if statements further down.
There is a problem with your recursive approach. Simple fix would be:Updated code would look like this:The first time flag is used to prevent comparing a None value to an integer. If you do a comparison without first_time check then it results Type Error. 
Here's a more compact recursive solution which uses a generator expression and the built-in max function. It handles negative values correctly, and it will also work with non-numeric data. However, it will raise TypeError if you pass it a list containing items that can't be compared, eg numbers and strings.output
The flag makes sure that the item variable is not reset to 0 every time, thereby producing problematic output. Your code suffers from the problem that whenever the function is called for a sub-list it resets the item variable and then compares for the maximum with 0 instead of the old maximum.In your problematic input, if you change the position of 6 and 100 you will get the correct output because the last sub-list has been dealt with by then. If you add another sub-list after the now changed 100 (in the position of 6), then you'll again get the problem to occur.


Answer URL
https://docs.python.org/3/tutorial/classes.html#generator-expressions
