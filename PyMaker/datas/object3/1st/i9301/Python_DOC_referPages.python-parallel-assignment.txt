Natural Text
Trying to figure out how this parallel assignment works. The full code can be found here. (Raw Github python file). Here is what I'm having issues with:I'll break it down as much as I know, but I'm probably doing something wrong.Are we assigning target, and direction to the same thing? I thought parallel assignment was something like x, y = 5, 6Now if we look at the iterable, it is the following:How can we have (neighbor , direction) before the for loop? What does the if statement here do? Do we not need anything below the if block to run if neighbor.owner != myID?If the iterator is empty, we will return None, None as seen below?And this is the function we are using to determine the max?Background if needed:This is code for a bot to be played in the game Halite. It is a prebuilt bot found in this GitHub repo. 
The max function here return the maximum tuple of (direction , neighbors) with respect to neighbor.production ( as we understand this from key) and neighbors are allowed to participate in this iterate if neighbor.owner != myID happens , and if iterator was empty default = (None, None) will be target and directions values , so target is the neighbor with most production at the end.
Whenever there are multiple variables on the left of an assignment, the right side is required to be a sequence with exactly that many elements, which are unpacked into the individual variables.Sometimes, the right side explicitly builds that sequence: for example, x, y = 5, 6 is technically the construction of the tuple (5, 6), followed by its unpacking.  (Actually, since Python 2.6 the tuple construction gets eliminated here, but that's an internal optimization that should never be relevant to you.)However, ANY source of a sequence of the correct length is valid on the right side.  In your target, direction = max(...) example, max is choosing an element from a list of 2-element tuples (neighbor, direction).  The "largest" one of these (as defined by the key= parameter) is returned and unpacked into target and direction.


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
