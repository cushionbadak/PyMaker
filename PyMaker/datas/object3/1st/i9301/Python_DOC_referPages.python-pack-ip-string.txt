Natural Text
I want to kind of implement my own struct.pack specific function to pack an IP string (i.e. "192.168.0.1") to a 32-bit packed value, without using the socket.inet_aton built in method.I got so far:My question is:How do I get from that ['0xc0', '0xa8', '0x0', '0x01'] to '\xc0\xa8\x00\x01', (this is what I'm getting from socket.inet_aton(ip)?(And also - How is it possible that there is a NUL (\x00) in the middle of that string? I think I lack some understanding of the \x format)
You can use string comprehension to format as you like:or as a one liner:
An alternative:Can you use ipaddress and to_bytes (python 3.2)?Note that you may actually only need the integer.Can be shorter obviously, but wanted to show all steps clearly :)
Based loosely off @Stephen's answer but returns a string with the actual bytes rather than a string with literal slashes:Works in Python 2 and 3. Returns a b'' rather than a string, matching best practice for Python3.


Answer URL
https://docs.python.org/3/library/ipaddress.html
