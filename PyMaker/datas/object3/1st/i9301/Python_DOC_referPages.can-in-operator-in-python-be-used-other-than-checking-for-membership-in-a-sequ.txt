Natural Text
in operator in Python is a membership operator that tests for membership in a sequence. Description of in operatorEvaluates to true if it finds a variable in the specified sequence and false otherwise.Now consider the code:Please correct me here:I think the statement for char in s should check for 'M' in 'HELLO' which should be evaluated to False and the loop should be terminated. But here, instead of checking for the membership, it is assigning every character to the variable char and thus the loop is printing the every character.My question is, how in operator can be used other than checking the membership?
The in keyword is used in two different contexts:Membership testIterationThe first, as you said, checks if something belongs to a sequence, by calling that sequence's __contains__. When using this syntax, a boolean value is returned.Since in looks for the __contains__ method, x in seq is valid as long as seq implements a __contains__ method. You can implement this, even though it does not make logical sense, regarding the concept of membership.The second is actually more often used. According to an iteration protocol, it enumerates the elements of an iterable object, so that actions can be performed on them.You can iterate over a list:Over a string:And over any object implementing the __iter__ method, as long as the latter returns an object that implements the __next__ method.The following example is a basic (not to say "poor") range-like class, whose you can iterate over the instances.A lot of native types are iterable: dictionaries, ranges, sets...Semantically speaking, it makes sense to use the same in word for both contexts. "Is this thing in that stuff?" is a valid question, as long as "stuff" is a collection, which is capable of containing things. Henceforth, "do this for every thing in that stuff" seems pretty natural.Hence the use of "in" for both contexts.This is however quite a simplification of the reality, which is actually more vast. I invite you to read the documentation, and for an in-depth understanding of the in keyword, read Python's grammar.
any object that has the __contains__() method can use the "in" operator. by using the dir() function or the hasattr() function you can check if you can use the "in" operator on that object
The main thing you need to think here is that the keyword in if you use it in a for loop then it'll redefine char or every line in the loop.so to test every character individually in a loop you'd need:but that's kind of pointless. You might as well use if char=chrBut you can test for characters in list elements like this so:would test every list element for the presence of "M"


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__contains__
https://docs.python.org/3/reference/compound_stmts.html#the-for-statement
https://docs.python.org/3/reference/datamodel.html#object.__iter__
https://docs.python.org/3/library/stdtypes.html#iterator.__next__
https://docs.python.org/3/library/functions.html#func-range
https://docs.python.org/3/library/stdtypes.html#set
https://docs.python.org/3/index.html
https://docs.python.org/3/reference/grammar.html
