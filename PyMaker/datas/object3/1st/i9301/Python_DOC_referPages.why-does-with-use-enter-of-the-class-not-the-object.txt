Natural Text
While experimenting with patching a context manager at runtime, I noticed that the following code does not behave as I expected:Executed, this prints:While the first part of main, with the explicit calls to __enter__, behaves as expected (the method is correctly modified), the with-statement seems to ignore this.After some search, I found that the according PEP 343 shows an example translation, which explains the behaviour; namely, the translation of the with mgr: ... internally uses something likeinstead of a direct method call, like I was doing above.And I was wondering why that is done. Is it just to prevent people like me from messing around, or is there a deeper reason?
There is something called special method lookup defined in the language description. Basically, this kind of lookup (using type(obj).__method__(obj)) happens for all "magic methods"; two reasons are given:Performance optimizations are possibleThere are cases with only work correctly with this variant, namely when special lookup defers to the type (like, int.__hash__ being not the same thing as type(int).__hash__, which we usually really want)


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-lookup
