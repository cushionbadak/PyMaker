Natural Text
I have a long list of unicode definitions and description mappings that use the 'U+1F49A' coding convention.In python (3), how can I read these in as true unicode characters? (i.e. '\u00001F49A' or 'ðŸ’š'I've tried array slicing and composition eg '\U000{}'.format('1F49A') but end up with SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 0-4: truncated \UXXXXXXXX escape as the initial string instantiation craps out on a partial unicode declaration.
You can also use int() to parse the number, and chr() to convert the number to a single-character string. For example:If you want to convert all of the U+xxxx instances in a larger string, you can use the same chr()/int() pattern in the 2nd arg of re.sub():


Answer URL
https://docs.python.org/3/library/functions.html#int
https://docs.python.org/3/library/functions.html#chr
