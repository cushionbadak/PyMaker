Natural Text
In the python library pytides, I came across a strange method to initialize a class (the Tide class and its initialization ).I reproduced below a simplified version of the code :As I understand, the dtype variable in Foobar is a global variable, but I don't understand what's the point to have it. Is it just here to provide a convenient way to initialize Foobar? Moreover the Foobar class needs an array of Foobar.dtype at construction, is not a sort of cyclic call (which should crash)?
Foobar.dtype is a class attribute.That is a variable which is attached to the definition of the class not a single instance of the class. If you're familiar with other popular object-oriented languages, this concept is very similar to a static variables in Java and C#.Python docs which explains in more detail https://docs.python.org/3/tutorial/classes.html#class-objectsConsidering class Foobar in the example you've provided:Foobar is a classmyFoobar is an instance of Foobarlet's pretend that there's another instance too: yourFoobarthen myFoobar and yourFoobar (and any other instances) may need to be able to have access to some data (in this case a definition of a numpy datatype) which is the same for all instances of Foobar. Thus there's an argument that it should be associated to the class rather than each individual instance. (However there are also arguments that class attributes / static variables do more harm than good: Why are static variables considered evil?)i.e. avoiding a way of writing it where you allocate each instance of Foobar its own instance of the same numpy dtype definition, such as...
There isn't much that is strange about this initialization, dtype holds the types Foobar requires for the numpy array it receives durings its initialization (model). It's a class attribute, not a global one, so it is shared by all instances of the Foobar class.The way model is initialized might seem odd, but it is just initializing model based on the name that specifies the field, this might be best demonstrated by printing out model in between the steps:adds the values for the 'fooObj' object type. While:adds the values for the float types 'A' and 'B' respectively.


Answer URL
https://docs.python.org/3/tutorial/classes.html#class-objects
