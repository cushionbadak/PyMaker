Natural Text
I'm trying to get it so each piece of code I'm writing is on a separate line but it comes out as a big long line once it wrote the CSV file, I've tried /n, /r/n and .splitlines but none of them work and I have the same resulthere is the code(haven't included modules)and here is the end result      1,01,31-TK-01A,31-TK-01A,B,0.0,0,#,Mtr,0.0,0.0,0.0,22-FEB-2018 14:29,Y2,02,31-TK-01B,31-TK-01B,B,0.0,0,#,Mtr,0.0,0.0,0.0,22-FEB-2018 14:29,Y3,03,44-TK-01,44-TK-01,B,0.0,0,#,Mtr,0.0,0.0,0.0,22-FEB-2018 14:29,Y4,04,51-TK-01,51-TK-01,A,12.323,0,#,Mtr,19.0,0.0,0.821,22-FEB-2018 14:29,Y5,05,51-TK-02,51-TK-02,A,0.0,0,#,Mtr,0.0,0.0,0.0,22-FEB-2018 14:29,Y6,06,51-TK-03,51-TK-03,A,0.0,0,#,Mtr,0,0.0,0.0,01-JAN-1970 12:15,Y7,07,51-TK-04,51-TK-04,A,0.0,0,#,Mtr,0,0.0,0.0,01-JAN-1970 12:15,Y8,08,51-TK-12,51-TK-12,B,0.0,0,#,Mtr,0,0.0,0.0,01-JAN-1970 12:15,Y9,09,51-TK-13,51-TK-13,B,0.0,0,#,Mtr,0.0,0.0,0.0,22-FEB-2018 14:29,Y10,10,51-TK-19,51-TK-19,B,0.0,0,#,Mtr,0.0,0.0,0.0,22-FEB-2018 14:29,Y11,11,51-TK-20,51-TK-20,B,0.0,0,#,Mtr,0.0,0.0,0.0,22-FEB-2018 14:29,Y12,12,51-TK-21,51-TK-21,B,0.0,0,#,Mtr,0.0,0.0,0.0,22-FEB-2018 14:29,Y13,13,51-TK-22,51-TK-22,B,0.0,0,#,Mtr,0.0,0.0,0.0,22-FEB-2018 14:29,Y14,14,51-TK-23,51-TK-23,A,0.0,0,#,Mtr,0,0.0,0.0,01-JAN-1970 12:15,Y15,15,51-TK-24,51-TK-24,A,0.0,0,#,Mtr,0,0.0,0.0,01-JAN-1970 12:15,Y16,16,51-TK-25,51-TK-25,A,0.0,0,#,Mtr,0,0.0,0.0,01-JAN-1970 12:15,Y17,17,51-TK-30,51-TK-30,B,0.0,0,#,Mtr,0,0.0,0.0,01-JAN-1970 12:15,Y18,18,51-TK-31,51-TK-31,B,0.0,0,#,Mtr,0,0.0,0.0,01-JAN-1970 12:15,Y19,19,51-TK-32,51-TK-32,B,0.0,0,#,Mtr,0,0.0,0.0,01-JAN-1970 12:15,Y20,20,51-TK-33,51-TK-33,B,0.0,0,#,Mtr,0,0.0,0.0,01-JAN-1970 12:15,Y21,21,51-TK-34,51-TK-34,B,0.0,0,#,Mtr,0,0.0,0.0,01-JAN-1970 12:15,Y22,22,51-TK-35,51-TK-35,B,0.0,0,#,Mtr,0,0.0,0.0,01-JAN-1970 12:15,Ythis comes off as one straight line i want it in separate rows for each piece of data. 
Very short answer: the newline character is "\n", not "/n`".Now for a couple advices1/ hardcoding platform-specific separators defeats the whole point of os.path.join() 2/ in general, use string formatting instead of string concatenation3/ but if you want to generate a csv, use the csv module instead 4/ if you want both index and value in a for loop, don't maintain the index by hand, use enumerate() instead5/ unless you don't mind opening your application to SQL injection attacks, don't use string interpolation for SQL queries, use placeholders and prepared statements instead6/ your system certainly has a builtin tasks scheduler (last time I used Windows - in the NT4 days some 19 years ago that is - it had one, and I assume it still does), use it instead of reinventing the square wheel.
You would probably benefit a lot from using the standard library's csv module, which includes plenty of examples to demonstrate its use.Where instead of writing your file line-by-line as in your case you show above it would look something like:


Answer URL
https://docs.python.org/3/library/string.html#format-string-syntax
https://docs.python.org/3/library/csv.html
https://docs.python.org/3/library/functions.html#enumerate
