Natural Text
I am testing a method, geodata_collect._request_loc_data(), and within that method I call another method, geodata_collect.utils.loadJSON(...) which I need to mock in order to unit-test the first mentioned method. My problem is that I need geodata_collect.utils.loadJSON(...) to return a different value the third time it is called from within geodata_collect._request_loc_data().I have been exploring MagicMock and side_effect in order to do this.However, when geodata_collect.utils.loadJSON(...) is called from within geodata_collect._request_loc_data() the MagicMock class is returned, instead of the actual value.What should be returned:
You have set the return value of the call to a mock object. So thatâ€™s what will be returned! You set return values (side effects) for calls to that call result, so geodata_collect.utils.loadJSON()(). Set the side_effect argument in the patch() call:Or the side_effect attribute on the mock object returned when entering the context manager:Capturing the mock object the patch() context manager creates with as <name> is generally a good idea anyway as you now have access to it to assert if it was called. You can also pass in the MagicMock instance you created up front, just pass it in as the second argument, or use the name new:patch() will then replace geodata_collect.utils.loadJSON with that instance, and calling it will use the side_effect list set.


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect
