Natural Text
I am using dateutils.parser.parse to parse date strings which might contain partial information. If some information is not present, parse can take a default keyword argument from which it will fill any missing fields. This default defaults to datetime.datetime.today().For a case like dateutil.parser.parse("Thursday"), this means it will return the date of the next Thursday. However, I need it to return the date of the last Thursday (including today, if today happens to be a Thursday).So, assuming today == datetime.datetime(2018, 2, 20) (a Tuesday), I would like to get all of these asserts to be true:Is there an easy way to achieve this? With the current parse function only the first and third assert would pass.
Here's your modified code (code.py):Notes:I changed the structure of the code "a bit", to parametrize it, so if a change is needed (e.g. a new example to be added) the changes should be minimalInstead of asserts, I added a function (print_stats) that prints the results (instead raising AssertError and exiting the program if things don't match)Takes an argument (parse_func) which is a function that does the parsing (e.g. parse)Uses some globally declared data (data) together with the (above) functiondata - is a list of triples, where each triple contains:Text to be convertedExpected datetime ([Python]: datetime Objects) to be yielded by the conversiondefault argument to be passed to the parsing function (parse_func)parse2 function (an improved version of parse):Accepts 2 types of date strings:Weekday nameMonth / Day (unordered)Does the regular parsing, and if the converted object comes after the one passed as the default argument (that is determined by comparing the appropriate attributes of the 2 objects), it subtracts a period (take a look at [Python]: timedelta Objects):"Thursday" comes after "Tuesday", so it subtracts the number of days in a week (7)"December 10" comes after "February 20", so it subtracts the number of days in the year*weekday_strs: I'd better explain it by example:Flattens parser.parserinfo.WEEKDAYSConverts strings to lowercase (for simplifying comparisons)_days_in_year* - as you probably guessed, returns the number of days in an year (couldn't simply subtract 365 because leap years might mess things up):Output:


Answer URL
https://docs.python.org/3/library/datetime.html#datetime-objects
https://docs.python.org/3/library/datetime.html#timedelta-objects
