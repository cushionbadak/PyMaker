Natural Text
I want to write in Python a class that can run a certain algorithm for a given period of time, then stop and return the most uptodate value it found until the timeout.As an example, I wrote a simple class for finding finds a maximum in a vector:When I run this class, it shows that, as expected, the result increases with time. However, the return value is always 0! Here is a typical output:What is my mistake?
When you use multiprocessing in Python it literally creates a new independent Python process and runs whatever you ask it to. The fact that the API is simplified so it looks like multithreading should not confuse you. In the main process, you create an AnytimeAlgorithm object. Then, you create a Process that runs a function; this creates a new process and copies the state of the interpreter, so you have a copy of your AnytimeAlgorithm in the new process too that you can use. However, the two objects are not the same, they do not even live in the same process, so they cannot (directly) share any information. The changes you make to the object in the new process only affect to the object copy in that process, not the original one.You can check the documentation on how to share information between the main process and the spawned one, for example with pipes, queues or shared memory, which may be a good option here:Output:Note that using Value has an additional overhead due to inter-process synchronized access. Read the documentation to understand how locking works for this class and consider writing your algorithm in a way that access to shared resources is minimized (e.g. using temporal local variables that you write at the end of each computation).


Answer URL
https://docs.python.org/3/library/multiprocessing.html
https://docs.python.org/3/library/threading.html
https://docs.python.org/3/library/multiprocessing.html#exchanging-objects-between-processes
https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes
https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Value
