Natural Text
I am doing python basic challenges this is one of them. What all I needed to do is to read through a file and print out the frequency of letters in decreasing order. I am able to do this but I wanted to enhance the program by also printing out the frequency percentage alongside with the letter - frequency - freq%. Something like this: o - 46 - 10.15%This is what I did so far:As you can see I am able to calculate and sort the freq% on a different list but I am not able to include it in the tuple of the lst[] list alongside with the letter, freq. Is there any way to solve this problem? Also if you have any other suggestions for my code. Please do mention.Output Screen Modification Applying a simple modification as mentioned by @wwii I got the desired output. All I had to do is add one more parameter to the print statement while iterating the lst[] list. Previously I tried to make another list for the freq%, sort and then tried to insert it to the letters-count tuple in a list which didn't work out. Output Screen
Your count data is in a dictionary of {letter:count} pairs.  You can use the dictionary to calculate the total count like this:Then don't calculate the percentage till you are iterating over the counts...Or if you want to put it all in a list so you can sort it:Using operator.itemgetter for the sort key function can help code readability.
Tuples are immutable which is probably the issue you are finding. The other issue is the simple form of the sort function; A more-advanced sort function would serve you well. See below:The list-of-tuples format of lst, but because tuples are immutable whereas lists are mutable, opting to change lst to a list-of-lists is a valid approach. Then, since lst is a list-of-lists with each element consisting of 'letter,count,frequency%', the sort function with lambda can be used to sort by whichever index you'd like. The following is to be inserted after your for line in fop: loop.
The items in freqlst,countlist, and lst are related to each other by their position. If any are sorted that relationship is lost.zipping the lists together before sorting will maintain the relationship.Will pick up from your list initialization lines.Basically, zip combines lists together into a list of tuples. Then you can use a lambda function to sort those tuples (very common stack question)
I think I was able to achieve what you wanted by using lists instead of tuples. Tuples cannot be modified, but if you really want to know how click here(I also added the possibility to quit the program)Important: Never forget to comment your codeThe code:



Answer URL
https://docs.python.org/3/library/operator.html#operator.itemgetter
