Natural Text
I have this basic example to understand the numpy append method. The output gives me 2 arrays but are in different format (or what I understand of different format). What is the exact different of both arrays and why is the output different?
Your second method is pure python and doesn't use any numpy, so the type starts as list ([]) and stays that way, because list.append() also returns a list. It contains integers because that's what you get out of range and nothing in your code changes them.The first method uses numpy's append method that returns an ndarray, which uses floats by default. This also explains why your returned array contains floats.
The first coderesults in distances being an array of floats. While the second coderesults in distances being a list of ints.arrary is a numpy type (main difference: faster, all items have the same type), while list is python-internal (main difference: works without numpy, can hold any mixed types).
The first gives you an numpy.ndarray and is the result of numpy methods, the second produces a list and is a result of list methods. Numpy arrays and Python lists are not the same thing.Numpy arrays are essentially object-oriented wrappers around fix-sized, typed, true multidimensional arrays. numpy array methods are optimized for vectorized numerical calculations, and along with scipy, provide powerful scientific computing and linear algebra capabilities.Python list objects are heterogeneous, resizable, array-lists. They are optimized for constant-time .append. Indeed, both of these for-loops will scale very differently. numpy.ndarray.append requires creating an entirely new array each iteration. Python list have amoratized constant time append. Thus, you will see quadratic growth in runtime as the size of your numpy.ndarray scales, whereas with the list, you will see linear scaling. 


Answer URL
https://docs.python.org/3/library/functions.html#float
https://docs.python.org/3/library/stdtypes.html#list
https://docs.python.org/3/library/functions.html#int
