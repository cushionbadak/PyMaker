Natural Text
This question already has an answer here:Pythonic way to check if a list is sorted or not                    19 answers                I have a function named checker(nums) that has an argument that will later receive a list. What i want to do with that list is to check if each other element is greater or equal to the previous one.Example:I have a list [1, 1, 2, 2, 3] and i have to check if it fulfills the condition.Since it does, the function should return TrueMy code:This will only run once and return True if the first condition is true.I've seen a statement if all and am unsure of how to use it.
Your function can be reduced to this:Note the following:zip loops through its arguments in parallel, i.e. nums[0] & nums[1] are retrieved, then nums[1] & nums[2] etc.i <= j performs the actual comparison.The generator expression denoted by parentheses () ensures that each value of the condition, i.e. True or False is extracted one at a time. This is called lazy evaluation.all simply checks all the values are True. Again, this is lazy. If one of the values extracted lazily from the generator expression is False, it short-circuits and returns False.AlternativesTo avoid the expense of building a list for the second argument of zip, you can use itertools.islice. This option is particularly useful when your input is an iterator, i.e. it cannot be sliced like a list.Another iterator-friendly option is to use the itertools pairwise recipe, also available via 3rd party more_itertools.pairwise:
Your code can in fact be reduced to checking if nums is sorted, e.g.This does exactly what you expect, e.g.
Similar solution to @jp_data_analysis using more_itertools.windowedAnd for scientific purposes (not recommended code), here is a more functional approach


Answer URL
https://docs.python.org/3/library/functions.html#zip
https://docs.python.org/3/reference/expressions.html#generator-expressions
https://docs.python.org/3/library/functions.html#all
https://docs.python.org/3/library/itertools.html#itertools.islice
https://docs.python.org/3/library/itertools.html#itertools-recipes
