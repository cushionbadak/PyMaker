Natural Text
I've been making a lot of classes an Python recently and I usually just access instance variables like this:But often I see that objects from other modules will make wrapper methods to access variables like this:What are the advantages/disadvantages to these different approaches and is there a generally accepted best practice (even if there are exceptions)?
The main advantages of "getters" (the getVariable form) in my modest opinion is that it's much easier to add functionality or evolve your objects without changing the signatures.For instance, let's say that my object changes from implementing some functionality to encapsulating another object and providing the same functionality via Proxy Pattern (composition). If I'm using getters to access the properties, it doesn't matter where that property is being fetched from, and no change whatsoever is visible to the "clients" using your code.I use getters and such methods especially when my code is being reused (as a library for instance), by others. I'm much less picky when my code is self-contained.In Java this is almost a requirement, you should never access your object fields directly. In Python it's perfectly legitimate to do so, but you may take in consideration the possible benefits of encapsulation that I mentioned. Still keep in mind that direct access is not considered bad form in Python, on the contrary.
There should never be any need in Python to use a method call just to get an attribute. The people who have written this are probably ex-Java programmers, where that is idiomatic. In Python, it's considered proper to access the attribute directly.If it turns out that you need some code to run when accessing the attribute, for instance to calculate it dynamically, you should use the @property decorator.
making getVariable() and setVariable() methods is called enncapsulation.There are many advantages to this practice and it is the preffered style in object-oriented programming.By accessing your variables through methods you can add another layer of "error checking/handling" by making sure the value you are trying to set/get is correct.The setter method is also used for other tasks like notifying listeners that the variable have changed.At least in java/c#/c++ and so on.


Answer URL
https://docs.python.org/3/library/functions.html#property
