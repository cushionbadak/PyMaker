Natural Text
I have a python object with several attributes and methods.  I want to iterate over object attributes.  I want to generate a dictionary containing all of the objects attributes and their current values, but I want to do it in a dynamic way (so if later I add another attribute I don't have to remember to update my function as well).In php variables can be used as keys, but objects in python are unsuscriptable and if I use the dot notation for this it creates a new attribute with the name of my var, which is not my intent.Just to make things clearer:Â·Update:With attributes I mean only the variables of this object, not the methods.
Assuming you have a class such ascalling dir on the object gives you back all the attributes of that object, including python special attributes. Although some object attributes are callable, such as methods.You can always filter out the special methods by using a list comprehension.or if you prefer map/filters.If you want to filter out the methods, you can use the builtin callable as a check.You could also inspect the difference between your class and its parent using.
in general put a __iter__ method in your class and iterate through the object attributes or put this mixin class in your class.Your class:
Objects in python store their atributes (including functions) in a dict called __dict__. You can (but generally shouldn't) use this to access the attributes directly. If you just want a list, you can also call dir(obj), which returns an iterable with all the attribute names, which you could then pass to getattr.However, needing to do anything with the names of the variables is usually bad design. Why not keep them in a collection?You can then iterate over the keys with for key in obj.special_values:
The correct answer to this is that you shouldn't. If you want this type of thing either just use a dict, or you'll need to explicitly add attributes to some container. You can automate that by learning about decorators.In particular, by the way, method1 in your example is just as good of an attribute.
then just call it as an iterable
For python 3.6
As mentioned in some of the answers/comments already, Python objects already store a dictionary of their attributes (methods aren't included). This can be accessed as __dict__, but the better way is to use vars (the output is the same, though). Note that modifying this dictionary will modify the attributes on the instance! This can be useful, but also means you should be careful with how you use this dictionary. Here's a quick example:Using dir(a) is an odd, if not outright bad, approach to this problem. It's good if you really needed to iterate over all attributes and methods of the class (including the special methods like __init__). However, this doesn't seem to be what you want, and even the accepted answer goes about this poorly by applying some brittle filtering to try to remove methods and leave just the attributes; you can see how this would fail for the class A defined above.(using __dict__ has been done in a couple of answers, but they all define unnecessary methods instead of using it directly. Only a comment suggests to use vars).
For python 3.6


Answer URL
https://docs.python.org/3/library/types.html#types.DynamicClassAttribute
