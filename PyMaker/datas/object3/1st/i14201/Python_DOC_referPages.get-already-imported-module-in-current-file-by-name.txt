Natural Text
I am studying sklearn and I write a class Classifier to do common classification. It need a method to determine using which Estimator:I want to get Estimator by name, but what xxx should be?Or is there a better way to do this?Build a dict to store the imported module?  but this way seems not so good..
In this case it is advised to simply use the class directly as an argument.You will never have to worry about it as a string: you can compare LinearSVC is LinearSVC, and compare it to something else.Think of it like accepting an integer as argument, then converting it to a string to use it: does that make sense? You can just simply require a string.Proposed code:You can then do:As per the comment:You can then also initialise a dict at start like:It's cleaner to work with a KeyError (the string/model does not exist, and you're aware since you did not define them), than to check globals, sounds pretty nasty!
There are two build-in functions may help you: globals and locals, both of the two return a dict of the current symbol table.you code could be Estimator = globals()[method] or mv the estimator keys to __init__ and use Estimator = locals()[method]
Built in function globals() does the trick: you can check that globals()['LogisticRegression'] is LogisticRegression returns True.ADDENDUMSafe: nothing 'nasty' can happen by evaluating globals()[method]Efficient: overhead is negligible with respect to some_method_dict[method]Simple: globals()[method] is just the shortest answer to the question.If this is pythonic or not, I don't know, but the globals() builtin is there to be used, so why chose more complicated solutions?To be explicit, can be implemented asif the None return is preferred to a KeyError exception if method was not imported.


Answer URL
https://docs.python.org/3/library/functions.html#globals
