Natural Text
Based on this related question and answer I asked, it has become obvious that datetime.fromtimestamp(os.path.getctime()) in Python 3.4 doesn't return a timezone-aware datetime object, However, based on some investigation, I've also discovered that OS X 10.9 on an HFS+ filesystem (for example) does seem to maintain the timezones along with ctimes (unless gls is inferring the timezone from my local timezone and daylight-savings time):(I am using the GNU version of ls)How can I get the timezone from the ctime and insert/combine it into a datetime object?(I'd also like the same answer for the mtime, I assume it will be similar).
Both ctime and mtime are available as "seconds since epoch" (values returned by time.time()). To get the local timezone, you could use tzlocal module:You might see the timezone info because ls converts the timestamps into corresponding broken-down time with timezone offset using the local timezone.
If you only want to rely on Python Standard Library, you can only use the timezone subclass of tzinfo :Then you could have (in France) :Of course, mtime would work exactly the sameYou should consult J.F. Sebastian's post for references. Here is an extract :To get the current UTC offset in a way that workarounds the time.daylight issue and that works even if tm_gmtoff is not available, [this] can be used:
This works for me:No external packages. Just the standard python libraries. (Python 3.6)


Answer URL
https://docs.python.org/3/library/os.path.html#os.path.getmtime
