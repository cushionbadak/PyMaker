Natural Text
We find an interesting issue on yield of Python. We wrote a simple program:The result is amazing:i=5, j=21 => yield i => a1=21 => send(66) => x = 66i=5, j=21 => yield j => a2=5 => send(77) => y = 7700print 7766print 21print 5i.e. after yield i, a1 gets the value of j; after yield j, a2 gets the value of i.Does anyone know why yield do like this? Why not a1=5, a2=21?
next(gen) takes the first element from the generator (i):Then gen.send(66) is equal to j (which is 21). Since your second loop is still working, subsequent gen.send(77) is equal to i (which is still 5).Essentially, the problem is that you consume 3 values, instead of 2.Use gen.send(None) or next(gen) to start the generator:
next(gen) calls into the method, which returns from the first yield i. Your a1 = gen.send(66) then resumes the method at y = (yield j) * 100 and yields j from there. The a2 = gen.send(77) line resumes the method directly afterwards and returns from x = yield i.


Answer URL
https://docs.python.org/3/reference/expressions.html#generator.send
