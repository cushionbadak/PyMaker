Natural Text
I have a list of names,x, and a list of scores,y, that correspond to the names. So, a has score 8, b has scores 8, c has score 15, ..., k has score 14I want to find the 5 smallest scores from the list,y, and get their name and have a print out similar to the following:top5 lowest scores:Currently, I am creating a copy of the list and then using pop to keep reducing the list, but it is giving me incorrect names for the scores. However, when I create my list for the max5 values, everything comes out fine using the same method. I am unsure of a function that lets me do this in python. This is just a sample of my problem, my real problem involves store locations along with scores for those stores that I computed from a function, but I want to get the top 5 highest and 5 lowest scores. Does anyone have an efficient solution to this?
Python has a data structure called Dictionary that you can use to store key/value pairs . In Python , dictionary is defined as -Then you can iterate over the key value pairs in this dictionary to find the 5 smallest numbers.You can convert the dict to a tuple and then sort the tuple based on the second item-Instead of using a dict, you can also use a list of tuples, and use the last line in above code to sort it based on the second element of each tuple.The list of tuples would look like -
First of all, organize your input collectionSuppose you have input x and y where each of them is the collection of labels and score, respectively:To sort x by the corresponding score y, zip them together and sort by the score, take the first 5 and thats' it:Quick explanationIt zips x and y together so you have a list of        zip(x,y) = ('a',5), ('b',3), ...Then you sort that list by the second element of each tuple       sorted( zip(x,y ))where the key for sorting is the second element of tuple (t[1])Lastly, take the first 5 elements of the sorted list       [5:]Your resultant collection looks like this:
First of all, {8,8,15...} would create a set, not a list; as sets are not ordered, you cannot pair 2 sets together like this.Thus you'd haveNow, to make these into letter, score pairs, use the zip function.And then you can find n smallest items with aptly named nsmallest function from the heapq module; you need to provide a custom key function that would provide the score for each item; we will use operator.itemgetter(1) for it (it would return the element 1 or the score for each letter, score pair:prints out To get the letters only, just add:


Answer URL
https://docs.python.org/3/library/heapq.html#heapq.nsmallest
