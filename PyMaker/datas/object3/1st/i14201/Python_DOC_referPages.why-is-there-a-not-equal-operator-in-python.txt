Natural Text
This question already has an answer here:Why does Python have an __ne__ operator method instead of just __eq__?                    3 answers                I was wondering about the reason of having a not equal operator in python.The following snipped:outputs:Doesn't this actually invite a lot of trouble by potentially saying:can be correct at the same time. Furthermore this introduces a potential pitfall when forgetting to implement __ne__.
Depending on one's needs there are cases where equal and not equal are not opposite; however, the vast majority of cases they are opposite, so in Python 3 if you do not specify a __ne__ method Python will invert the __eq__ method for you.If you are writing code to run on both Python 2 and Python 3, then you should define both.
Per the data model documentation, which covers the "magic methods" you can implement on classes (emphasis mine):There are no implied relationships among the comparison operators. The  truth of x==y does not imply that x!=y is false. Accordingly, when  defining __eq__(), one should also define __ne__() so that the  operators will behave as expected.
Seems you are returning True instead of doing the comparison.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__lt__
