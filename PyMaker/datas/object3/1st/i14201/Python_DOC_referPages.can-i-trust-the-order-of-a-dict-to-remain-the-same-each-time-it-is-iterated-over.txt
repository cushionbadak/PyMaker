Natural Text
I have the following three strings (they exist independently but are displayed here together for convenience):I'm looking to populate a dict with some values based on the reversed (bottom to top) order of the strings. Specifically, for each string, I'm extracting the IP address as an index of sorts, and then the full string as the value. Given that order is important, I decided to go with lists, and initially did something like this (pseudocode, with the above bunch of text):resulting in the following two lists (again, just an illustration):This has worked fine up until a point, but now as I begin populating a dict  with values in these lists (at hardcoded indices), comparing against values in other lists (again at hardcoded indices) etc., not only does debugging become a pain, the code becomes unsustainable.I'm beginning to rewrite using a dict (returning a dict where the IP addresses are the keys and the full strings are the values). Then I will perform operations like:Here's my concern: can I be sure that the dict, any time it is iterated over, will always be done in the order in which the dict was created? If not, is my only option to revert back to lists (and the tedious and brittle length comparisons, assignments inherent in doing so) etc.?I know that a dict is, by its very nature, unsorted. And I know of the sorted function, but I'm not looking to sort they keys by any descending/ascending order etc. rather it's about maintaining (somehow) the order in which the dict was created.
can I be sure that the dict, any time it is iterated over, will always be done in the order in which the dict was created?No, a dict is unordered, and will lay out its ordering however the particular implementation decides to.See, immediately after I created the dict the order changed.If you want to ensure you have a deterministic, controllable order, you can use a collections.OrderedDictYou can still access the OrderedDict in the conventions you are used toNote that you do not have to insert all of the elements upon creation. You can insert them one at a time if you want.
You should not rely on the iteration order of a dict. The only way you can get any stable and repeatable ordering is by doing something like:That will give you a stable ordering, but probably not the one you want. You probbaly want to use an OrderedDict


Answer URL
https://docs.python.org/3/library/collections.html#collections.OrderedDict
