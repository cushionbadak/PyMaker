Natural Text
I have the following list:s06_235b and s06_235, s08_014 and 18:s08_014 are duplicated. However, as shown in the example, there is no specific pattern in the naming. I need to do a pairwise comparison of the element of the list:I need then to check for each pair, if the two, contain the same string but with length more than 4. That is s06_235b and s06_235, and s08_014 and 18:s08_014 would pass this criterion but s08_056 and s08_169 would not. How can I achieve this in Python?
You can use an 'in' operator to see if on variable contains anotherTry this:Edit:As tobias_k mention: Note that this only works if the entire string is contained in the other string
You could iterate all the combinations, join them with some special character that can not be part of those strings, and use a regular expression like (\w{5,}).*#.*\1 to find a repeated group in that pair. Other than just testing with s1 in s2, this will also work if just a part of the first string is contained in the second, or vice versa.Here, (\w{5,}) is the shared substring of at least 5 characters (from the \w class in this case, but feel free to adapt), followed by more characters .* the separator (# in this case), more filler .* and then another instance of the first group \1.Output:    Of course, you can tweak the regex to fit your needs. E.g., if you do not want the repeated region to be bounded by _, you could use a regex like p = r"([a-z0-9]\w{3,}[a-z0-9]).*#.*\1".


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
https://docs.python.org/3/library/re.html
