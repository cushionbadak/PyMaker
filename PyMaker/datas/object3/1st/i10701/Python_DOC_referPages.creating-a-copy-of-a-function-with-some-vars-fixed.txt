Natural Text
Assume I have a functionHow can I create a copy of that function and fix the multiplier in that function?such that multiply_by_5 would have only one argument x and the multiplier would be 5? So thatIs there a way in Python 2.7 to do that?
You can use functools.partial with keyword argument:
functools.partial is made exactly for this.you can use it like
As suggested by @niemmi's answer, functools.partial is probably the way to go. However, similar work can be done using curried functions:Or using the lambda syntax:Note that partial is more succinct, more efficient, and more directly express your intent in a standard way. The above technique is an example of the concept called closure, which is means that a function defined in inner scope may refer to variables defined in enclosing scopes, and "close" over them, remembering them, and even mutating them.Since this technique is more general, it might take the reader of your code more time to understand what exactly do you mean in your code, since your code may be arbitrarily complicated.Specifically for multiplication (and other operators) partial can be combined with operator.mul:
Here's an alternative that doesn't use functools.partial. Instead we define a function inside a function. The inner function "remembers" any of the local variables of the outer function that it needs (including the outer function's arguments). The magic that makes this happen is called closure. outputIf you want, you can use your existing multiply_by function in the closure, although that's slightly less efficient, due to the overhead of an extra function call. Eg:That can be written more compactly using lambda syntax:
If you cannot change the multiply_by() function, the simplest and perhaps best way is probablyYou can also use lambda if you really want a one-liner.However, you may want to change your first function toThen you can do either of these:


Answer URL
https://docs.python.org/3/library/functools.html#functools.partial
