Natural Text
I know how to refer to some types, i.e. str for type(''), int for type(1) etc. But what about other types, such as type(lambda: None)?I know to refer to it as type(f) == type(lambda: None) for comparison, but, is there any other way, except that? (No silly answer such as code-golf, use another return value for the lambda, etc.)Edit: I just found out how to utilize the accepted answer!
If you want to test if a certain value is a lambda:See https://docs.python.org/3/library/types.html.You usually use isinstance for testing if something is something, type() == type() is very frowned upon.
To get the type of various builtin types in Python 2, you can use the types module.
Checking if something is a function is different to checking if it is a callable.Most likely you want to check if the object is callable (can I use this object like a function?). A function is one of several types of callable. They are:Pure python functionsMethodsClasses / instances with __call__ methodsBuiltin (C) functionsA pure python function is one that is either a lambda, or defined using a def statement. A method is a function that exists on a class, and has been access via an instance -- basically a function with it's first argument bound as an instance). Classes and objects can be called if their class implements a __call__ method (all classes are callable by default, but not all objects are). Builtin functions are just functions written in C, rather than Python.If you want to check if something is callable, then use the callable function. eg.If you want to check if a an object is one of the specific subtypes of callable then use the types module.For other types, you may wish to use the collections.abc module. The classes defined here are abstract base classes that check instances of subclasses confirm to the specification, or can be used to check if an object can act as an instance of the type). eg.


Answer URL
https://docs.python.org/3/library/types.html
https://docs.python.org/3/library/functions.html#isinstance
