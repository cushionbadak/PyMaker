Natural Text
TCP flows by their own nature will grow until they fill the maximum capacity of the links used from src to dst (if all those links are empty).Is there an easy way to limit that ? I want to be able to send TCP flows with a maximum X mbps rate. I thought about just sending X bytes per second using the socket.send() function and then sleeping the rest of the time. However if the link gets congested and the rate gets reduced, once the link gets uncongested again it will need to recover what it could not send previously and the rate will increase. 
At the TCP level, the only control you have is how many bytes you pass off to send(), and how often you call it.  Once send() has handed over some bytes to the networking stack, it's entirely up to the networking stack how fast (or slow) it wants to send them.Given the above, you can roughly limit your transmission rate by monitoring how many bytes you have sent, and how much time has elapsed since you started sending, and holding off subsequent calls to send() (and/or the number of data bytes your pass to send()) to keep the average rate from going higher than your target rate.If you want any finer control than that, you'll need to use UDP instead of TCP.  With UDP you have direct control of exactly when each packet gets sent.  (Whereas with TCP it's the networking stack that decides when to send each packet, what will be in the packet, when to resend a dropped packet, etc)


Answer URL
https://docs.python.org/3/library/socket.html#socket.socket.setblocking
