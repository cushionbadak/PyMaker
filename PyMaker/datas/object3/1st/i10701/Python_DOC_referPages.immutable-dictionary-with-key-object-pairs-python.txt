Natural Text
I have a dictionary filled with key-object pairs. I want to make the dictionary immutable and I thought the best/easiest way is to cast it to a frozenset but frozenset(dict) and also tuple(dict) only stores the keys.Using frozenset(dict.items()) I seem to get a frozenset with the key-object pairs but I don't know how to retrieve the values/keys.I have the following code which works, as long as "__obfuscators" is a dictionaryI tried this in an attempt to get it working with the frozen set:but this gives that frozenset does not have \__getitem__and self.__obfuscators.__getattribute__(key) always says it does not have the attribute (because I assume this searches for a function named key)Is there a better way to make the dictionary immutable or how can I retrieve the object depending on the key?Edit:I ended up casting the dict to a tuple using tuple(obfuscator.items())and then wrote my own find value function:I would like to thank everyone for their efforts and input.
You can create an immutable view of a dictionary using types.MappingProxyType:notice that you can still change the vaule object, so:will work.
You could make a wrapper class that takes a dictionary and has a get item function but no set item.  You'd need to add a few things for thread safety and hashing maybe but the basic class wouldn't be too difficult.
The simplest way I could think of to achieve what you want was to subclass the standard dict type and overwrite its __setitem__ method:This allows you to create dictionaries that cannot thereafter be changed by item assignment:or, equivalently:The dict then prints out just like a standard dict:But when you try to change a value (or add a new one):Note that this isn't fully immutable, however:for example, will update it, but this solution might be good enough - it depends on the broader requirements.
Since you mention tuple(dict) in your original post, probably the simplest solution to achieve what you want might simply be:
You need a dict that is capable of freezing? You can simply make one:It will behave exactly like usual dict until you call .freeze(). Then it's frozen.


Answer URL
https://docs.python.org/3/library/types.html#types.MappingProxyType
