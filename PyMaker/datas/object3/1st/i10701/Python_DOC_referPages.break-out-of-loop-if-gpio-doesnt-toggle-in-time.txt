Natural Text
I'm changing some inputs to a device with relays, and I'm expecting at some point to break the firmware.  The question is, when will this happen?So, to determine if the firmware breaks, I'm monitoring some LEDs that normally blink during normal operation.  I know that they will lock up in whatever state they're currently in when the firmware breaks.  So, my bright idea was to simple feed that signal back into a Raspberry Pi and watch the that GPIO for a change-state.  If I see the state change, then go ahead and flip the relays...Then look at the LEDs and make sure they're still blinking...rinse, repeat.However, I would normally check this with an interrupt or something in C, but I'm writing this in Python...What's the Python way for handling this?  I know that if I don't see any blinking for 2 seconds or so, the test is over, but I'm not sure how to do this without invoking something like sleep...to which, I wouldn't be able to watch for pin changes.
From the gpio module, create a threaded callback function that fires every time a rising (or falling, etc...) edge is detected.Then using signal within this function call signal.alarm() to reset an alarm whenever the pin changes.Finally use signal.signal() to register a function for what should happen when the alarm is not reset in time (ie, firmware has broken)this won't work if you're using windows unfortunately... you would need to implement your own alarm system with threading if you are


Answer URL
https://docs.python.org/3/library/signal.html#signal.alarm
https://docs.python.org/3/library/signal.html#signal.alarm
