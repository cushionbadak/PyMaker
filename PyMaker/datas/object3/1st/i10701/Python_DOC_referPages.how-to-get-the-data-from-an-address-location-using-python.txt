Natural Text
Let's say I have an id of a Python object, which I retrieved by doing id(thing). How do I find thing again by the id number I was given?
You'll probably want to consider implementing it another way. Are you aware of the weakref module?(Edited) The Python weakref module lets you keep references, dictionary references, and proxies to objects without having those references count in the reference counter. They're like symbolic links.
If the object is still there, this can be done by ctypes:output:If you don't know whether the object is still there, this is a recipe for undefined behavior and weird crashes or worse, so be careful.
Short answer, you can't.Long answer, you can maintain a dict for mapping IDs to objects, or look the ID up by exhaustive search of gc.get_objects(), but this will create one of two problems: either the dict's reference will keep the object alive and prevent GC, or (if it's a WeakValue dict or you use gc.get_objects()) the ID may be deallocated and reused for a completely different object.Basically, if you're trying to do this, you probably need to do something differently.
You can use the gc module to get all the objects currently tracked by the Python garbage collector.
Just mentioning this module for completeness. This code by Bill Bumgarner includes a C extension to do what you want without looping throughout every object in existence.The code for the function is quite straightforward. Every Python object is represented in C by a pointer to a PyObject struct. Because id(x) is just the memory address of this struct, we can retrieve the Python object just by treating x as a pointer to a PyObject, then calling Py_INCREF to tell the garbage collector that we're creating a new reference to the object.If the original object no longer exists then the result is undefined. It may crash, but it could also return a reference to a new object that's taken the location of the old one in memory.
eGenix mxTools library does provide such a function, although marked as "expert-only": mx.Tools.makeref(id) 
This will do:But I suggest implementing a more decent way.


Answer URL
https://docs.python.org/3/library/ctypes.html
