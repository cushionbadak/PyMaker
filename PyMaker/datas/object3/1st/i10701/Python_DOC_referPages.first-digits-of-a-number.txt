Natural Text
I want the first 9 digits and last 9 digits of a fibonocci series for an infinite loop. Running the tests individually, I get better result for the last 9 digits using modulo operator no where comparable to the first 9 digits. I ran different tests like int(str(b)[::-1])%10**9, b/(10**(len(str(b))-9)) but still the same result. I think this happens because of number to string conversion of higher digits. Is there any other way of printing the first 9 digits without converting into a string or an efficient way with/without strings?
Here are a few versions and timings for getting the first 30000 prefixes. I left out the first two yields and the last digits for simplicity.fibby1 is the original way just using str(b)[:9].fibby2 keeps track of the appropriate power of 10 to divide by.fibby3 keeps the first 9 digits in a and b and the remaining digits in A and B. Compared to fibby2, this avoids dividing a large b by a large power of 10. Large numbers are only added/subtracted/compared, or multiplied with a tiny number.fibby4 uses math.log10 suggested by @therefromhere.fibby5 uses the decimal module.The output:Just for comparison I also tried str(b % 10**9), i.e., the last nine digits, and that took 0.506 seconds. Which is slower than my fast solutions for the first nine digits.The code:


Answer URL
https://docs.python.org/3/library/decimal.html
