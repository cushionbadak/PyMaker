Natural Text
The Python built-in function any(iterable) can help to quickly check if any bool(element) is True in a iterable type.But is there an elegant way or function in Python that could achieve the opposite effect of any(iterable)? That is, if any bool(element) is False then return True, like the following example:
There is also the all function which does the opposite of what you want, it returns True if all are True and False if any are False. Therefore you can just do:
Write a generator expression which tests your custom condition. You're not bound to only the default truthiness test:
Well, the implementation of any is equivalent to:So, just switch the condition from if element to if not element:Yes, of course this doesn't leverage the speed of the built-ins any or all like the other answers do, but it's a nice readable alternative.
You can do:Recall that map in Python 3 is a generator. For Python 2, you probably want to use imap Mea Culpa: After timing these, the method I offered is hands down the slowestThe fastest is not all(l) or not next(filterfalse(bool, it), True) which is just a silly itertools variant. Use Jack Aidleys solution.Timing code:Results:


Answer URL
https://docs.python.org/3/library/functions.html#any
