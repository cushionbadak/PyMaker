Natural Text
Why do function generators and class generators behave differently? I mean, with class generators I can use generator as many times as I want, but with function generators, I can only use it once? Why so?
Calling the f_gen() function produces an iterator (specifically, a generator iterator). Iterators can only ever be looped over once. Your class is not an iterator, it is instead an iterable, an object that can produce any number of iterators.Your class produces a new generator iterator each time you use for, because for applies the iter() function on the object you pass in, which in turn calls object.__iter__(), which in your implementation returns a new generator iterator each time it is called.In other words, you can make the class behave the same way by calling iter(instance) or instance.__iter__() before looping:You can also make the CCounter() into an iterator by returning self from __iter__, and adding an object.__next__() method (object.next() in Python 2):
Your class is an iterable, but not an iterator itself. Each time you call iter on it, you get a new iterator.If you want to replicate the behavior of the generator function with a class, then you want an iterator like this:


Answer URL
https://docs.python.org/3/glossary.html#term-iterator
https://docs.python.org/3/glossary.html#term-generator-iterator
https://docs.python.org/3/glossary.html#term-iterable
https://docs.python.org/3/library/functions.html#iter
https://docs.python.org/3/reference/datamodel.html#object.__iter__
https://docs.python.org/3/library/stdtypes.html#iterator.__next__
