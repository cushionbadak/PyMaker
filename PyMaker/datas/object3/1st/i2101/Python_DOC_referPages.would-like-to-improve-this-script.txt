Natural Text
I was reviewing some scripts that I have saved and came across to this particular one; I feel like it can be improved without the need of using all the lower/upper case letters, any advice? I was thinking of using str.lower, but don't really see how to implement it 
Using str.lower, you could lowercase the character you are about to test so you don't need the uppercase letters. Characters that are . or , are not affected by lower. Also, use sum with a generator expression to make you code more compact and (IMHO) more readable.Or you could use ascii_letters defined in the string module:In both cases, the in check will be linear (O(k) for k "good" letters), though. This should not be a problem for such a short list of letters, but to improve it further, you could turn letters into a set so that the in check will be O(1).
Use regex to find all letters and dots and take length:
You can also use the following method, basically, stripping the digits and using len to count number of remaing chars:Or using string.digits from string module:EDIT: Following tobias_k comments, I suggest the following which is similar to Austing's answer but through different approach:Which it says to look for all characters except(^) the ones mentioned after (^), which are the digits.
Well I used s.isalpha(), s.upper.isupper(), and ch in '.'(didn't need ,):Now, my questions is about why Python says that my line  if ch.isalpha(): is inconsistent?error: builtins.TabError: inconsistent use of tabs and spaces in indentation


Answer URL
https://docs.python.org/3/library/string.html#string.ascii_letters
