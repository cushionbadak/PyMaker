Natural Text
This question already has an answer here:loop over 2 lists, repeating the shortest until end of longest                    2 answers                I am trying to create a program which associates each day of the moth with a corresponding weekday. However, I am running into an issue when I attach the weekday.When this is run, I get the following result:This continues right up until 31.Any help would be greatly appreciated, as I do not understand where I am going wrong.Thank you! :)
With the nested for loops you are saying "for every day in January, iterate over days and print something`.The word iterate is key here. You are going over the whole list days for every element in January.What you are actually trying to do is to cycle the elements of days while iterating over the elements of January. Luckily, we have itertools.cycle for that!Here's how I would implement your idea.If this is more than just a programming exercise, you might want to look into the datetime module in order to avoid manually computing the weekday of a given date.
The second loop iterates over all 7 days of the week before going to the next day in the month. One way to go about making what you need is by using a modulo operation:Output:
There are several issues with your code:You need to cycle through your day strings ('Monday', 'Tuesday', etc)repeatedly. You haven't specified any logic to achieve this. One solution (see below) is itertools.cycle.You don't need to create a list of string numbers. You don't need a list, or even strings. Just use a range object to specify a range.Use zip to iterate sequentially an iterable of day numbers and strings. You then only need a single for loop.You can use f-strings (Python 3.6+) as an efficient and readable alternative to manual string concatenation.Here's a working example:
This is In first Iteration of outer loopIn first Iteration of outer loop....Hence the output above.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.cycle
https://docs.python.org/3/library/functions.html#func-range
https://docs.python.org/3/library/functions.html#zip
