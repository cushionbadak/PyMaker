Natural Text
See full gist hereConsider the case where we have a simple metaclass that generates the __init__ method for a classNow this is all good and well to useBut we have problems when subclassing, because if you want to subclass the __init__ method what of course happens is the subclassed method just gets overwritten.This will obviously give the The only way I can think to solve this is to create an intermediate class in the __new__ method of the metaclass and make this the base for the class we are creating. But I can't get this to work, I tried something like thisBut this gives me recursion error
The infinite recursion is caused by the fact that the type constructor can return an instance of your metaclass.In this line here:If any of the base classes in bases is an instance of TestType, then the subclass will also be an instance of TestType. That is why Test can be created with no problems, but SubTest causes infinite recursion.The fix is simple: Create the intermediate class without an __init__ attribute. That way if '__init__' in attrs: will be False, and the endless recursion is avoided.


Answer URL
https://docs.python.org/3/library/functions.html#type
