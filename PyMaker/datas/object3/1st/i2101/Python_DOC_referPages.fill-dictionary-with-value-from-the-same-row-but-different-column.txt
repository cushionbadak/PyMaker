Natural Text
Lately I've been trying to map some values, so I'm trying to create a dictionary to do so. The odd thing is my DataFrame has a column made of lists, and DataFrames are always a bit awkward with lists. The DataFrame has the following structure:So I want to create a dictionary that maps '10' to 1, '14' to 2, and so on. I tried the following:But that isn't making it. Probably something to do with indexes. What am I missing?Edit: I'm trying to create a dictionary that maps the values '10', '11', '12' to 1; '13','14' to 2; '20','21','22','24' to 3, so if I typedicc['10'] I get 1, if I typedicc['22'] I get 3. Obviously, the actual DataFrame is quite bigger and I can't do it manually.
You can do it like this:OutputNotes:The code {r : p for rs, p in df[['rules', 'procedure']].values for rin rs} is a dictionary comprehension, the dictionary counterpart oflist.The df[['rules', 'procedure']].values is equivalent tozip(df.rules, df.procedure) it outputs a pair of list, int. So thers variable is a list and p is an integer.Finally you iterate over the values of rs using the second for loopUPDATEAs suggested for @piRSquared you can use zip:
Help from cytoolzNoteI updated my post to mimic how @jpp passed multiple iterables to map.  @jpp's answer is very good.  Though I'd advocate for upvoting all useful answers, I wish I could upvote their answer again (-:
Using collections.ChainMap:For many uses, the final dict conversion is not necessary:A ChainMap class is provided for quickly linking a number of  mappings so they can be treated as a single unit. It is often much  faster than creating a new dictionary and running multiple update()  calls.See also What is the purpose of collections.ChainMap?
You may check flatten the list
using itertools.chain and DataFrame.itertuples:


Answer URL
https://docs.python.org/3/library/collections.html#collections.ChainMap
