Natural Text
I have one parent class P and several child classes. The parent class contains the method doSomething(x) defined only as:Now, some of P's subclasses may have implemented this method, and some have not. Is there any way I can check if doSomething(x) is going to do nothing but pass, at runtime (e.g. if it is implemented, execute it, if not, skip it)?
There is no need to do anything here other than just calling doMethod() on the instance. Calling a no-op method is not so costly that detecting when a child class has implemented an override is going to save you anything.So your number 1 option is to just call the method, and don't worry about it being an empty method. That's what pass is for, to give you an easy parent class method that does nothing.Next, you stateParent class contains method doSomething(x)You can use this to detect if you have that method still; the underlying function for the bound method is going to be the same object:Again, I'm not sure why anyone would want to do that, because that test is not going to save you anything over just using instance.doSomething().Next, a function that consists solely of the statement pass will be compiled to the same bytecode, always; it's the same bytecode as return None. Compare the bytecode if you must know if a function is empty:This can be applied to any function or method that, in essence, only ever returns None and does nothing else.Demo:Note how is_pass() works on any function that uses pass.
Since your parent method is defined as It does nothing - it is cheaper to just call it instead of verifying if it has been overriden or not. It will be automatically "skipped" because it does nothing in first place.That said, if you really want to test for it, you can do something like this


Answer URL
https://docs.python.org/3/library/constants.html#NotImplemented
https://docs.python.org/3/library/exceptions.html#NotImplementedError
