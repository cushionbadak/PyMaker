Natural Text
I have been executing a piece of code for a while now and it never ran into an error. There is however a seemingly dangerous part in the code and since it is a multi threaded program it might be sheer luck that it has not crashed yet.My program contains two threads. One is writing files and the other is constantly scanning for these files which it then reads and processes further. My concern is that the second thread might try to read a file that the first thread has not yet fully written to the disk, causing it to crash.It seems to be going alright though. Is this sheer luck or is the filename only appearing once the file has been fully written to the disk?
Yes, it sounds like you have a race condition. You need to ensure that the reader does not try to read more than has been written, or at least handle that error in some way.My preferred way of solving this sort of problem is to use a threadsafe queue. The writing thread can place the name or path of the file onto the queue after it has finished writing. The reading thread waits for a new filename on the queue (using queue.get()) and then processes the file.You probably want some mechanism of safely shutting down the reader thread after all files have been processed. A good mechanism is to put a sentinel value on the queue, which will indicate to the reader that its work is done. A common choice for a sentinel is None. So the reading thread would have something like:while the writing thread would have a loop that looks like:


Answer URL
https://docs.python.org/3/library/queue.html?highlight=queue
