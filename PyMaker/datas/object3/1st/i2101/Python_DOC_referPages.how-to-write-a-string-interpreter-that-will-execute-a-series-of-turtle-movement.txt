Natural Text
I am working on a project where I want to take in a string such as "F100<30S30"F100 would move  the turtle forward by 100, <30 would rotate the turtle 30 degrees, and S30 would draw a circle with the radius of 30. I can get the program to interpret one command, for example F100, but I cannot get it to interpret a long string as shown above. What ways can I go about interpreting this. Thank you. 
I don't know what kinds of commands your turtle can take, so this example may not exactly fit your use case. But from what I can see, you could use regular expressions to solve this problem.Let's say a command consists of two parts: a character to indicate the operation (F, <, S, etc.), and a number to indicate the magnitude (100, 30, etc.). Your string has several of these back-to-back. What we can do is build a regular expression that will recognize all instances of this operation-number pattern in your string.Using only the commands F, <, and S, the following regular expression will work:Let's unpack this. First, r'...' designates this string as a "raw string", which is what we typically use for regular expressions. This means characters within the string that would normally be escape characters, like \, will not be treated as such.Next, the parentheses () mark whatever's inside of them as a regex match - meaning that, when we pass through the string, anything matching the pattern inside the parentheses will be saved and outputted. Inside the parentheses, the square brackets [] denote a group of characters - this will match any character contained inside the brackets. So, in this case, the regex will look for a F, S, or <.After looking for that character, we look for a number. \d is a shorthand for [0123456789] - that is, it matches any digit. + is a sign we attach to \d. This tells the regex to be "greedy", which means to include as many digits as possible instead of just one. You can now use python's re library to find all matches in the string. The findall method is what we need here: it takes one regex string and one search string, and returns, in order, a list of patterns from the search string that match the regex string.Now, you've turned that one string into a list (commands) of smaller strings, each of which represents one command. You can now iterate through commands and execute each command individually.For more information on regular expressions in python, you can look to the re module's documentation.


Answer URL
https://docs.python.org/3/library/re.html
