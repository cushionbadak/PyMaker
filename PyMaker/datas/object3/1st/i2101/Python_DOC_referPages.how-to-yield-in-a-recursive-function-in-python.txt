Natural Text
So I have a dictionary:I need to create a dictionary as follows:It can go deeper up to any level but I should always get the key value pair at the maximum depth. So I wrote a function:Now the problem is, once it goes in recursion, the yield is lost. How do I yield that dictionary again? All I get is a generator which is not what I want. 
Use yield from with your recursive call, otherwise you are just ignoring the result of the recursive call:This is only available in Python > 3.3, but essentially just a short hand for simply yielding from an extra loop:In order to achieve your desired data structure, you might be better off yielding pairs instead of dicts, so you can transform the result more easily to the resulting dict:Then you can use it like:An even simpler recursive approach will just return a complete dict:
You are ignoring the generator object that the recursive call produces:so the recursive call is not actually executed (the code in your generator is never executed for that call).You want to use yield from to delegate iteration to that call:yield from moves control from the current generator to the iterator that the expression after yield from produces; here that's your recursive generator.yield from requires Python 3.3 or newer. If you are using Python 2 or an older Python 3 release, you can also add another loop to explicitly yield each result produced by iteration:I'd also use isinstance(data, dict) rather than use type(...) ==, to allow for subclasses:Note that your code doesn't actually produce a dictionary as output. It produces an iterable of single key-value dictionaries:The key argument from the outermost call is redundant here too, as you replace it with the key of the current iteration.If you do need to stick with a generator function, then at least produce (key, value) tuples and don't bother with recursing when the value is not a dictionary (so test before you recurse), to remove the need to pass along the key; the remaining data argument is now assumed to be a dictionary, always:and use dict(boil_down_nested(input_dict)) to produce a new dictionary from the key-value tuples the generator now outputs:Without recursion, you can use a stack to track nested dictionaries still to process; this makes it much easier to just output a dictionary as a result directly:No separate dict() call required anymore:
Note that you do not necessarily need to use yield:Output:


Answer URL
https://docs.python.org/3/whatsnew/3.3.html#pep-380
https://docs.python.org/3/whatsnew/3.3.html#pep-380
