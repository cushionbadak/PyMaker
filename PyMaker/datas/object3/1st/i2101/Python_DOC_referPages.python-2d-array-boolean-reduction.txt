Natural Text
I've got a 2D array comprised of boolean values (True,False).  I'd like to consolidate the array to a 1D based on a logical function of the contents.  e.g. Input:Output (logical AND):How would this be done without a loop ?
I'm assuming you want to apply logical ANDs to the rows. You can apply numpy.all.For a solution without numpy, you can use operator.and_ and functools.reduce.edit: actually, reduce is a bit redundant in this particular case.does the job just as well. 
You can use Python's built-in all method with a list-comprehension:If that's still too loopy for you, combine it with map:Note that map doesn't return a list in Python 3. If you want a list as your result, you can call list(map(all, my_list)) instead.
You can do this without NumPy too. Here is one solution using list comprehension. Explanation: It will loop over sub-lists and even if one of the items in each sub-list is False, it outputs False else True.Alternative (less verbose) as suggested by Jean below:
You can do this with numpy with the numpy.all function:Here thus the i-th element is True if all elements of the i-th row are True, and False otherwise. Note that the list should be rectangular (all sublists should contain the same number of booleans).In "pure" Python, you can use the all function as well, like:This approach will work as well if the "matrix" is not rectangular. Note that for an empty sublist, this will return True, since all elements in an empty sublist are True.
You can also do this with map and reduce:The benefit here is that you can change the reduce function to something else (say, an OR or something more adventurous).


Answer URL
https://docs.python.org/3/library/functools.html#functools.reduce
