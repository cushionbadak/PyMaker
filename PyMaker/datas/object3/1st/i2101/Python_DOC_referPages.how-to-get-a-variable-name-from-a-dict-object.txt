Natural Text
I have a dictionary: keys are strings, values are integers.Example: I'd like to get 'b' as an answer, since it's the key with a higher value.I did the following, using an intermediate list with reversed key-value tuples:Is that one the better (or even more elegant) approach?
You can use operator.itemgetter for that:And instead of building a new list in memory use stats.iteritems(). The key parameter to the max() function is a function that computes a key that is used to determine how to rank items.Please note that if you were to have another key-value pair 'd': 3000 that this method will only return one of the two even though they both have the maximum value. If using Python3:

I have tested MANY variants, and this is the fastest way to return the key of dict with the max value:To give you an idea, here are some candidate methods:The test dictionary:And the test results under Python 3.2:And under Python 2.7:You can see that f1 is the fastest under Python 3.2 and 2.7 (or, more completely, keywithmaxval at the top of this post)
If you need to know only a key with the max value you can do it without iterkeys or iteritems because iteration through dictionary in Python is iteration through it's keys.EDIT:From comments, @user1274878 :I am new to python. Can you please explain your answer in steps?Yep...maxmax(iterable[, key])max(arg1, arg2, *args[, key])Return the largest item in an iterable or the largest of two or more arguments.The optional key argument describes how to compare elements to get maximum among them:Returned values will be compared.DictPython dict is a hash table. A key of dict is a hash of an object declared as a key. Due to performance reasons iteration though a dict implemented as iteration through it's keys.Therefore we can use it to rid operation of obtaining a keys list.ClosureA function defined inside another function is called a nested function. Nested functions can access variables of the enclosing scope.The stats variable available through __closure__ attribute of the lambda function as a pointer to the value of the variable defined in the parent scope.
Here is another one:The function key simply returns the value that should be used for ranking and max() returns the demanded element right away.
If you don't care about value (I'd be surprised, but) you can do:I like the tuple unpacking better than a [0] subscript at the end of the expression.I never like the readability of lambda expressions very much, but find this one better than the operator.itemgetter(1) IMHO.
Given that more than one entry my have the max value. I would make a list of the keys that have the max value as their value.This will give you 'b' and any other max key as well.Note: For python 3 use stats.items() instead of stats.iteritems()
Example:if you wanna find the max value with its key, maybe follwing could be simple, without any relevant functions.the output is the key which has the max value.
To get the maximum key/value of the dictionary stats:Based on keys>>> max(stats.items(), key = lambda x: x[0])('c', 100)Based on values>>> max(stats.items(), key = lambda x: x[1])('b', 3000)Of course, if you want to get only the key or value from the result, you can use tuple indexing. For Example, to get the key corresponding to the maximum value:>>> max(stats.items(), key = lambda x: x[1])[0]'b'ExplanationThe dictionary method items() in Python 3 returns a view object of the dictionary. When this view object is iterated over, by the max function, it yields the dictionary items as tuples of the form (key, value).>>> list(stats.items())[('c', 100), ('b', 3000), ('a', 1000)]When you use the lambda expression lambda x: x[1], in each iteration, x  is one of these tuples (key, value). So, by choosing the right index, you select whether you want to compare by keys or by values.Python 2For Python 2.2+ releases, the same code will work. However, it is better to use iteritems() dictionary method instead of items() for performance.NotesThis answer is based on the comments on Climbs_lika_Spyder's answer.The used code was tested on Python 3.5.2 and Python 2.7.10 . 
Per the iterated solutions via comments in the selected answer... In Python 3:In Python 2:

With collections.Counter you could doIf appropriate, you could simply start with an empty collections.Counter and add to it
I got here looking for how to return mydict.keys() based on the value of mydict.values(). Instead of just the one key returned, I was looking to return the top x number of values.This solution is simpler than using the max() function and you can easily change the number of values returned:If you want the single highest ranking key, just use the index:If you want the top two highest ranking keys, just use list slicing:
Thanks, very elegant, I didn't remember that max allows a "key" parameter.BTW, to get the right answer ('b') it has to be:
max((value, key) for key, value in stats.items())[1]

+1 to @Aric Coady's simplest solution. And also one way to random select one of keys with max value in the dictionary:
I tested the accepted answer AND @thewolf's fastest solution against a very basic loop and the loop was faster than both:results:
How about:
A heap queue is a generalised solution which allows you to extract the top n keys ordered by value:Note dict.__getitem__ is the method called by the syntactic sugar dict[]. As opposed to dict.get, it will return KeyError if a key is not found, which here cannot occur.


Answer URL
https://docs.python.org/3/library/stdtypes.html#dict.items
https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects
https://docs.python.org/3/reference/expressions.html#lambda
