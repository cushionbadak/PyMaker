Natural Text
Disclaimer: This is a section from a uni assignmentI have been given the following AES-128-CBC key and told that up to 3 bits in the key have been changed/corrupt.The original key's SHA-1 hash is provided;  and I have to find the original key by trying all combinations of up to 3 bit flips.Supposedly this is possible in 349633 guesses however I don't have a clue where that number came from; I would have assumed it would be closer to 128*127*126 which would be over 2M combinations, that's where my first problem lies.Secondly, I created the python script below containing a triple nested loop (I know, far from the best code...) to iterate over all 2M possibilities however, after completion an hour later, it hadn't found any matches which I really don't understand. Hoping someone can atleast point me in the right direction, cheersEDIT:Changing for loop todrastically cuts down on the number of guesses while (I think?) still covering the whole space. Still getting some duplicates and still no luck finding the match though..
Your code, if not very efficient, looks fine except for one thing:as the output of hexstarts with 'Ox', which shouldn't be part of the key. So, you should be fine by removing these two characters.For the number of possible keys to try, you have:1 with no bit flipped128 with 1 bit flipped128*127/2 = 8128 with 2 bits flipped (128 ways to choose the first one, 127 ways to choose the second, and each pair will appear twice)128*127*126/6 = 341376 with 3 bits flipped (each triplet appears 6 times). This is the number of combinations of 128 bits taken 3 at a time.So, the total is 1 + 128 + 8128 + 341376 = 349633 possibilities.Your code tests each of them many times. You could avoid a the useless repetitions by looping like this (for 3 bits):You could adapt your trick of starting at -2 with:You could also generate the combinations with itertools.combinations:but you'd need a bit more work to manage the cases with 0, 1, 2 and 3 flipped bits in this case.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.combinations
