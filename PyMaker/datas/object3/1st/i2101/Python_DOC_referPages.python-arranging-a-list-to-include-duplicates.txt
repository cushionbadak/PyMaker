Natural Text
I have a list in Python that is similar to:Is there a way using pandas or some other list comprehension to make the list appear like this, similar to a queue system:
It is possible, by using cumcount 
If you split your list into one separate list for each value (groupby), you can then use the itertools recipe roundrobin to get this behavior:
If I'm understanding you correctly, you want to retain all duplicates, but then have the list arranged in an order where you create what are in essence separate lists of unique values, but they're all concatenated into a single list, in order.I don't think this is possible in a listcomp, and nothing's occurring to me for getting it done easily/quickly in pandas.But the straightforward algorithm is:Create a different list for each set of unique values: For i in x: if x not in list1, add to list 1; else if not in list2, add to list2; else if not in list3, ad to list3; and so on. There's certainly a way to do this with recursion, if it's an unpredictable number of lists.Evaluate the lists based on their values, to determine the order in which you want to have them listed in the final list. It's unclear from your post exactly what order you want them to be in. Querying by the value in the 0th position could be one way. Evaluating the entire lists as >= each other is another way.Once you have that set of lists and their orders, it's straightforward to concatenate them in order, in the final list.
essentially what you want is pattern, this pattern is nothing but the order in which we found unique numbers while traversing the list x for eg: if x = [4,3,1,3,5] then pattern = 4 3 1 5 and this will now help us in filling x again such that output will be [4,3,1,5,3]note: python 3.6+ dict respects insertion order and I am assuming that you are using python3.6+ .This is what I thought of doing at first but It fails in some cases..


Answer URL
https://docs.python.org/3/library/itertools.html
