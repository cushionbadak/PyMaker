Natural Text
Is this a valid way to generate n random bytes that are cryptographically random?I know random.SystemRandom() is the same as os.urandom(), and I know that os.urandom() is definitely a cryptographically secure way of generating random numbers. However, the chr(random.SystemRandom().randint(0,256)) part throws me off a bit. Since chr() doesn't support unicode, I'm assuming that this function is discarding some characters that would otherwise be produced by random.SystemRandom(). I'm not sure what to think of randint(0,256) either, since that is the size of a byte.
random.randint(a, b)Return a random integer N such that a <= N <= b. Alias for  randrange(a, b+1).So it is inclusive you could get something bigger than a byte.
Use the secret module!From the docs:The secrets module is used for generating cryptographically strong random numbers suitable for managing data such as passwords, account authentication, security tokens, and related secrets.In particularly, secrets should be used in preference to the default pseudo-random number generator in the random module, which is designed for modelling and simulation, not security or cryptography.


Answer URL
https://docs.python.org/3/library/secrets.html?#module-secrets
