Natural Text
I am trying to understand pythons asynico module and came across the following piece of code at https://docs.python.org/3/library/asyncio-task.html#asyncio.create_taskIt turns out that  await task2, (or task1, but not both) can simply be removed and the code appears to be doing exactly the same. I find this very counterintuitive, what is happening here?Thank you for your time.
await does not start the coroutines in the tasks, it simply tells the coroutine main to wait for those two coros. The event loop is implicitly started with run_until_complete which in turn means it will wait for the coro passed to it (main) to complete. It is up to that coro to extend its own lifetime (by awaiting) long enough to ensure that the tasks created from inside it can complete.As you see, all three coros are running without awaiting anything. It's just that the two say_after coros will take longer than the main that implicitly controls how long the event loop runs.If you made main wait for work done in the loop long enough, both tasks would complete:So, which task, if any, completes when you test commenting out the awaiting of task1 and/or task2 above is basically just a matter of timing, mainly influenced by HW, OS and possibly runtime (i.e. IDE vs. shell).P.S. Tasks only have three states: pending, cancelled and finished. Every task is in state pending right after its creation and remains in that state until the coroutine wrapped in it either terminates (in any way) or until it gets cancelled by the event loop controlling it.
There are three different scenarios you've posed:No await statements (comment-out both)Use only await task1 (comment-out the second)Use only await task2 (commment-out the first)Here's your script; extend the sleep time on task2 a bit just for illustration's sake.1. No await statementsHere's the meat of asyncio.run():Importantly, the loop only cares that main() is complete, and then cancels all other tasks that are associated with the running event loop.  (Each task is tied to an event loop when it is specified.)If you define main() without any await statements, create_task() schedules the tasks to be executed, but main() does not wait for either one of them to complete.2. await task1Setup:Output:Both tasks move from pending to running, but only task1 completes, because main() only awaited on a task that takes ~1 second, not long enough for task2 to run.*  (Notice that main() takes only 1 second.)3. await task2Setup:Output:Both tasks move from pending to running, and now both task1 and task2 complete, because main() awaited on a task that takes ~3 seconds, long enough for both tasks to run to completion.*This applies at least to my setup (Mac OSX, ...) but as mentioned in the other answer here, the timing may play out differently on another setup and, if the task run-times are similar, both may get to run in places like case # 2.


Answer URL
https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task
https://docs.python.org/3/library/asyncio-task.html#running-an-asyncio-program
https://docs.python.org/3/library/asyncio-task.html#creating-tasks
