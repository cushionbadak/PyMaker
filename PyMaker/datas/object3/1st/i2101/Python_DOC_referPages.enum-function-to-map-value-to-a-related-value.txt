Natural Text
Currently, I have an enum that represents a name/number mapping. Each EventType, however, also has additional "related properties" (e.g. a status code, and a message type).Instead of creating the methods above and tons of if chains checking against self, is there a cleaner way of refactoring to return the status codes and message types? It's almost as if CANCELLED = (0, statuscode1, messagetype1).. How can I represent this concept in an enum? Is an enum even the correct way to do this?
If you want the value of the Enum member to be 0, 1, or 2, then you will need to either override __new__, or use aenum.Using the aenum library1:and in use:See this answer for an example of how to do this with the stdlib Enum (which uses the overriding __new__ technique).1 Disclosure:  I am the author of the Python stdlib Enum, the enum34 backport, and the Advanced Enumeration (aenum)  library.
You can use a tuple as the value of your Enum objects, and include the status and message strings together with the integer code. Then you can add methods (or property descriptors) to fetch individual pieces of the tuple via the value attribute:
In Python 3.4, there is a new Enum data type, which you can use as:To use, simply:If it's just the use case you described, you can also use named tuple if you want:To use this one: 


Answer URL
https://docs.python.org/3/library/enum.html
https://docs.python.org/3/library/enum.html
