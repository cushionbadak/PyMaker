Natural Text
I'm looking for an equivalent in python of dictionary.get(key, default) for lists. Is there any one liner idiom to get the nth element of a list or a default value if not available?For example, given a list myList I would like to get myList[0], or 5 ifmyList is an empty list.Thanks.
To support negative indices we can use:
Edit: I removed the check for TypeError - probably better to let the caller handle this.
This is probably better as a gets larger This works because if a[n:] is an empty list if n => len(a)Here is an example of how this works with range(5)And the full expression
Just discovered that : iter(l) returns an iterator on myList, next() consumes the first element of the iterator, and raises a StopIteration error except if called with a default value, which is the case here, the second argument, 5This only works when you want the 1st element, which is the case in your example, but not in the text of you question, so...Additionally, it does not need to create temporary lists in memory and it works for any kind of iterable, even if it does not have a name (see Xiong Chiamiov's comment on gruszczy's answer)

... looking for an equivalent in python of dict.get(key, default) for listsThere is an itertools recipes that does this for general iterables.  For convenience, you can > pip install more_itertools and import this third-party library that implements such recipes for you:CodeDetailHere is the implementation of the nth recipe:Like dict.get(), this tool returns a default for missing indices.  It applies to  general iterables:
Combining @Joachim's with the above, you could useExamples:Or, maybe more clear, but without the len
Using Python 3.4's contextlib.suppress(exceptions) to build a getitem() method similar to getattr().


Answer URL
https://docs.python.org/3/library/itertools.html#itertools-recipes
