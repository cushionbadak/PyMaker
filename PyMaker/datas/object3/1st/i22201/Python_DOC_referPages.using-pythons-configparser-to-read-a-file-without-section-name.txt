Natural Text
I am using ConfigParser to read the runtime configuration of a script.I would like to have the flexibility of not providing a section name (there are scripts which are simple enough; they don't need a 'section'). ConfigParser will throw the NoSectionError exception, and will not accept the file.How can I make ConfigParser simply retrieve the (key, value) tuples of a config file without section names? For instance:I would rather not write to the config file.
Alex Martelli provided a solution for using ConfigParser to parse .properties files (which are apparently section-less config files).His solution is a file-like wrapper that will automagically insert a dummy section heading to satisfy ConfigParser's requirements.
Enlightened by this answer by jterrace, I come up with this solution:Read entire file into a stringPrefix with a default section nameUse StringIO to mimic a file-like objectEDIT for future googlers: As of Python 3.4+ readfp is deprecated, and StringIO is not needed anymore. Instead we can use read_string directly:
You can do this with a single additional line of code. (Two lines if you count import statements.)In python 3, use itertools.chain() to simulate a section header for read_file().In python 2, prepend a section header line to the data you read from your config file, wrap the result in a StringIO object, and pass it to readfp().With either approach, your config settings will be available in parser.items('top').You could use StringIO in python 3 as well, by importing it from its new home in the io package, but note that readfp() is deprecated in python 3 and should therefore be avoided.If you don't mind an extra dependency, you might consider using a TOML parser instead of ConfigParser.
You can use the ConfigObj library to do that simply : http://www.voidspace.org.uk/python/configobj.htmlUpdated: Find latest code here.If you are under Debian/Ubuntu, you can install this module using your package manager :An example of use:
The easiest way to do this is to use python's CSV parser, in my opinion.  Here's a read/write function demonstrating this approach as well as a test driver. This should work provided the values are not allowed to be multi-line.  :)
Having ran into this problem myself, I wrote a complete wrapper to ConfigParser (the version in Python 2) that can read and write files without sections transparently, based on Alex Martelli's approach linked on the accepted answer. It should be a drop-in replacement to any usage of ConfigParser. Posting it in case anyone in need of that finds this page. 
Blueicefield's answer mentioned configobj, but the original lib only supports Python 2. It now has a Python 3+ compatible port: https://github.com/DiffSK/configobjAPIs haven't changed, see it's doc.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.chain
https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.read_file
