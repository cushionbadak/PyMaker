Natural Text
What is the proper indentation for Python multiline strings within a function?oror something else?It looks kind of weird to have the string hanging outside the function in the first example.
You probably want to line up with the """Since the newlines and spaces are included in the string itself, you will have to postprocess it. If you don't want to do that and you have a whole lot of text, you might want to store it separately in a text file. If a text file does not work well for your application and you don't want to postprocess, I'd probably go withIf you want to postprocess a multiline string to trim out the parts you don't need, you should consider the textwrap module or the technique for postprocessing docstrings presented in PEP 257:
The textwrap.dedent function allows one to start with correct indentation in the source, and then strip it from the text before use.The trade-off, as noted by some others, is that this is an extra function call on the literal; take this into account when deciding where to place these literals in your code.The trailing \ in the log message literal is to ensure that line break isn't in the literal; that way, the literal doesn't start with a blank line, and instead starts with the next full line.The return value from textwrap.dedent is the input string with all common leading whitespace indentation removed on each line of the string. So the above log_message value will be:
One option which seems to missing from the other answers (only mentioned deep down in a comment by naxa) is the following:This will allow proper aligning, join the lines implicitly, and still keep the line shift which, for me, is one of the reasons why I would like to use multiline strings anyway.It doesn't require any postprocessing, but you need to manually add the \n at any given place that you want the line to end. Either inline or as a separate string after. The latter is easier to copy-paste in.
Use inspect.cleandoc like so:Relative indentation will be maintained as expected.Note: It's good practice to indent logical blocks of code under its related context to clarify the structure. E.g. the multi-line string belonging to the variable string.
Some more options.  In Ipython with pylab enabled, dedent is already in the namespace.  I checked and it is from matplotlib.  Or it can be imported with:In documentation it states that it is faster than the textwrap equivalent one and in my tests in ipython it is indeed 3 times faster on average with my quick tests.   It also has the benefit that it discards any leading blank lines this allows you to be flexible in how you construct the string:Using the matplotlib dedent on these three examples will give the same sensible result.  The textwrap dedent function will have a leading blank line with 1st example.Obvious disadvantage is that textwrap is in standard library while matplotlib is external module. Some tradeoffs here... the dedent functions make your code more readable where the strings get defined, but require processing later to get the string in usable format.  In docstrings it is obvious that you should use correct indentation as most uses of the docstring will do the required processing.When I need a non long string in my code I find the following admittedly ugly code where I let the long string drop out of the enclosing indentation.  Definitely fails on "Beautiful is better than ugly.", but one could argue that it is simpler and more explicit than the dedent alternative.
If you want a quick&easy solution and save yourself from typing newlines, you could opt for a list instead, e.g.:
I preferor
My two cents, escape the end of line to get the indents:
I came here looking for a simple 1-liner to remove/correct the identation level of the docstring for printing, without making it look untidy,  for example by making it "hang outside the function" within the script.Here's what I ended up doing: Obviously, if you're indenting with spaces (e.g. 4) rather than the tab key use something like this instead: And you don't need to remove the first character if you like your docstrings to look like this instead:
The first option is the good one - with indentation included. It is in python style - provides readability for the code.To display it properly:
It depends on how you want the text to display. If you want it all to be left-aligned then either format it as in the first snippet or iterate through the lines left-trimming all the space.
For strings you can just after process the string. For docstrings you need to after process the function instead. Here is a solution for both that is still readable.
I sometimes write multiline text as a list of strings then concatenate them...It's not the most efficient way but it is performant enough for most use cases and it doesn't mess with your indentation or require the first line to have a different indentation to the second like the triple quoted method.


Answer URL
https://docs.python.org/3/library/inspect.html#inspect.cleandoc
https://docs.python.org/3/library/inspect.html#inspect.cleandoc
