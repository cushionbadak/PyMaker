Natural Text
Following up to Regular expression to match hostname or IP Address?and using Restrictions on valid host names as a reference, what is the most readable, concise way to match/validate a hostname/fqdn (fully qualified domain name) in Python?  I've answered with my attempt below, improvements welcome.
ensures that each segmentcontains at least one character and a maximum of 63 charactersconsists only of allowed charactersdoesn't begin or end with a hyphen.It also avoids double negatives (not disallowed), and if hostname ends in a ., that's OK, too. It will (and should) fail if hostname ends in more than one dot.
Here's a bit stricter version of Tim Pietzcker's answer with the following improvements:Limit the length of the hostname to 253 characters (after stripping the optional trailing dot).Limit the character set to ASCII (i.e. use [0-9] instead of \d).Check that the TLD is not all-numeric.
Per The Old New Thing, the maximum length of a DNS name is 253 characters. (One is allowed up to 255 octets, but 2 of those are consumed by the encoding.)One could argue for accepting empty domain names, or not, depending on one's purpose.
I like the thoroughness of Tim Pietzcker's answer, but I prefer to offload some of the logic from regular expressions for readability. Honestly, I had to look up the meaning of those (? "extension notation" parts. Additionally, I feel the "double-negative" approach is more obvious in that it limits the responsibility of the regular expression to just finding any invalid character. I do like that re.IGNORECASE allows the regex to be shortened.So here's another shot; it's longer but it reads kind of like prose. I suppose "readable" is somewhat at odds with "concise". I believe all of the validation constraints mentioned in the thread so far are covered:
Complimentary to the @TimPietzcker answer. Underscore is a valid hostname, double dash is common for IDN punycode. Port number should be stripped. This is the cleanup of the code.

This pure regex should meet all the parameters:^(?=.{1,253}\.?$)(?!-)[A-Za-z0-9\-]{1,63}(\.[A-Za-z0-9\-]{1,63})*\.?(?<!-)$
Process each DNS label individually by excluding invalid characters and ensuring nonzero length.
If you're looking to validate the name of an existing host, the best way is to try to resolve it. You'll never write a regular expression to provide that level of validation.


Answer URL
https://docs.python.org/3/library/re.html?highlight=re#re.compile
