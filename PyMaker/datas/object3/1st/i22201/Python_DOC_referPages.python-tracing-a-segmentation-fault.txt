Natural Text
I'm developing C extensions from python ad I obtain some segfaults (inevitable during the development...).I'm searching a way to display at which line of code the segfault happens (an idea is like tracing every single line of code), how I can do that?
Here's a way to output the filename and line number of every line of Python your code runs:Output:(You'd probably want to write the trace output to a file, of course.)
If you are on linux, run python under gdb
Segfaults from C extensions are very frequently a result of not incrementing a reference count when you create a new reference to an object. That makes them very hard to track down as the segfault occurs only after the last reference is removed from the object, and even then often only when some other object is being allocated.You don't say how much C extension code you have written so far, but if you're just starting out consider whether you can use either ctypes or Cython. Ctypes may not be flexible enough for your needs, but you should be able to link to just about any C library with Cython and have all the reference counts maintained for you automatically.That isn't always sufficient: if your Python objects and any underlying C objects have different lifetimes you can still get problems, but it does simplify things considerably.
I came here looking for a solution to the same problem, and none of the other answers helped me. What did help was faulthandler, and you can install it in Python 2.7 just using pip install.faulthandler was introduced to Python only in version 3.3, that was released in September 2012, which was after most other answers here were written.
There are somewhat undocumented python extensions for gdb.From the Python source grab Tools/gdb/libpython.py (it is not included in a normal install). Put this in sys.pathThen:As you can see we now have visibility into the Python stack corresponding with the CPython call chain.Some caveats:Your version of gdb needs to be greater than 7 and it needs to have been compiled with --with-pythongdb embeds python (by linking to libpython), it doesn't run it in a subshell. This means that It may not necessarily match the version of python that is on $PATH. You need to download libpython.py from whatever version of the Python source that matches whatever gdb is linked to. You may have to run gdb as root - if so you may need to set up sys.path to match that of the code that you are debugging. If you cannot copy libpython.py into sys.path then you can add it's location to sys.path like this:This is somewhat poorly documented in the python dev docs, the fedora wiki and the python wikiIf you have an older gdb or just can't get this working there is also a gdbinit in the Python source that you can copy to ~/.gdbinit which add some similar functionality 


Answer URL
https://docs.python.org/3/library/faulthandler.html
