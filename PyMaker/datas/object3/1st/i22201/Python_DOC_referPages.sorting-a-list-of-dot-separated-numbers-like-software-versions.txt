Natural Text
I have a list containing version strings, such as things:I would like to sort it, so the result would be something like this:The order of precedence for the digits should obviously be from left to right, and it should be descending. So 1.2.3 comes before 2.2.3 and 2.2.2 comes before 2.2.3.How do I do this in Python?
Split each version string to compare it as a list of integers:Gives, for your list:In Python3 map no longer returns a list, So we need to wrap it in a list call. The alternative to map here is a list comprehension. See this post for more on list comprehensions. 
You can also use distutils.version module of standard library:Gives you:It can also handle versions with pre-release tags, for example:Gives you:Documentation: https://github.com/python/cpython/blob/3.2/Lib/distutils/version.py#L101
natsort proposes "natural sorting"; wich works very intuitively (in Python 3)givesbut it works as well on complete package names with version number:gives
I also solved this question using Python, although my version does some extra things, here is my code:For versions there exist three things; Major, Minor, and the revision. What this does is that it organises it so that '1' will come before '1.0' which will come before '1.0.0'. Also, another plus, no need to import any libraries incase you don't have them, and it works with old versions of Python, this one was specifically meant for Version 2.7.6.  Anyway, here are a few examples:If you have any questions, just comment on the answer!!


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
