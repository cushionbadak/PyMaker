Natural Text
Here's my code:I'm getting an error in the IF conditional. What am I doing wrong?
You would want and instead of &&.
Python uses and and or conditionals.i.e.
Two comments:Use and and or for logical operations in Python.Use 4 spaces to indent instead of 2.  You will thank yourself later because your code will look pretty much the same as everyone else's code.  See PEP 8 for more details.
I'm getting an error in the IF conditional. What am I doing wrong?There reason that you get a SyntaxError is that there is no && operator in Python. Likewise || and ! are not valid Python operators. Some of the operators you may know from other languages have a different name in Python.The logical operators && and || are actually called and and or.Likewise the logical negation operator ! is called not.So you could just write:or even:Some additional information (that might come in handy):I summarized the operator "equivalents" in this table:See also Python documentation: 6.11. Boolean operations.Besides the logical operators Python also has bitwise/binary operators:There is no bitwise negation in Python (just the bitwise inverse operator ~ - but that is not equivalent to not).See also 6.6. Unary arithmetic and bitwise/binary operations and 6.7. Binary arithmetic operations.The logical operators (like in many other languages) have the advantage that these are short-circuited.That means if the first operand already defines the result, then the second operator isn't evaluated at all.To show this I use a function that simply takes a value, prints it and returns it again. This is handy to see what is actuallyevaluated because of the print statements:As you can see only one print statement is executed, so Python really didn't even look at the right operand.This is not the case for the binary operators. Those always evaluate both operands:But if the first operand isn't enough then, of course, the second operator is evaluated:To summarize this here is another Table:The True and False represent what bool(left-hand-side) returns, they don't have to be True or False, they just need to return True or False when bool is called on them (1).So in Pseudo-Code(!) the and and or functions work like these:Note that this is pseudo-code not Python code. In Python you cannot create functions called and or or because these are keywords. Also you should never use "evaluate" or if bool(...).Customizing the behavior of your own classesThis implicit bool call can be used to customize how your classes behave with and, or and not.To show how this can be customized I use this class which again prints something to track what is happening:So let's see what happens with that class in combination with these operators:If you don't have a __bool__ method then Python also checks if the object has a __len__ method and if it returns a value greater than zero. That might be useful to know in case you create a sequence container.See also 4.1. Truth Value Testing.NumPy arrays and subclassesProbably a bit beyond the scope of the original question but in case you're dealing with NumPy arrays or subclasses (like Pandas Series or DataFrames) then the implicit bool callwill raise the dreaded ValueError:In these cases you can use the logical and function from NumPy which performs an element-wise and (or or):If you're dealing just with boolean arrays you could also use the binary operators with NumPy, these do perform element-wise (but also binary) comparisons:(1)That the bool call on the operands has to return True or False isn't completely correct. It's just the first operand that needs to return a boolean in it's __bool__ method:That's because and actually returns the first operand if the first operand evaluates to False and if it evaluates to True then it returns the second operand:Similarly for or but just the other way around:However if you use them in an if statement the if will also implicitly call bool on the result. So these finer points may not be relevant for you.
I went with a purlely mathematical solution:
You use and and or to perform logical operations like in C, C++. Like literally and is && and or is ||. Take a look at this fun example,Say you want to build Logic Gates in Python: Now try calling them: This will output:Hope this helps!
Probably this is not best code for this task, but is working -
Use of "and" in conditional. I often use this when importing in Jupyter Notebook:
A single & (not double &&) is enough or as the top answer suggests you can use 'and'.I also found this in pandas if we replace the "&" with "and", it won't work.
maybe with & instead % is more fast and mantain readibilityother tests even/oddx is even ?   x % 2 == 0x is odd  ?   not x % 2 == 0maybe is more clear with bitwise and 1x is odd  ?   x & 1x is even ?   not x & 1    (not odd)


Answer URL
https://docs.python.org/3/reference/expressions.html#unary-arithmetic-and-bitwise-operations
