Natural Text
I've written a fairly simple filter in python using ElementTree to munge the contexts of some xml files. And it works, more or less. But it reorders the attributes of various tags, and I'd like it to not do that.Does anyone know a switch I can throw to make it keep them in specified order?Context for thisI'm working with and on a particle physics tool that has a complex, but oddly limited configuration system based on xml files. Among the many things setup that way are the paths to various static data files. These paths are hardcoded into the existing xml and there are no facilities for setting or varying them based on environment variables, and in our local installation they are necessarily in a different place.This isn't a disaster because the combined source- and build-control tool we're using allows us to shadow certain files with local copies. But even thought the data fields are static the xml isn't, so I've written a script for fixing the paths, but with the attribute rearrangement diffs between the local and master versions are harder to read than necessary.This is my first time taking ElementTree for a spin (and only my fifth or sixth python project) so maybe I'm just doing it wrong.Abstracted for simplicity the code looks like this:Reasonable or dumb?Related links:How can I get the order of an element attribute list using Python xml.sax?Preserve order of attributes when modifying with minidom
With help from @bobince's answer and these two (setting attribute order, overriding module methods)I managed to get this monkey patched it's dirty and I'd suggest using another module that better handles this scenario but when that isn't a possibility:Then in your code:
Nope. ElementTree uses a dictionary to store attribute values, so it's inherently unordered.Even DOM doesn't guarantee you attribute ordering, and DOM exposes a lot more detail of the XML infoset than ElementTree does. (There are some DOMs that do offer it as a feature, but it's not standard.)Can it be fixed? Maybe. Here's a stab at it that replaces the dictionary when parsing with an ordered one (collections.OrderedDict()).Looks potentially promising.Bah, the serialiser outputs them in canonical order.This looks like the line to blame, in ElementTree._write:Subclassing or monkey-patching that is going to be annoying as it's right in the middle of a big method.Unless you did something nasty like subclass OrderedDict and hack items to return a special subclass of list that ignores calls to sort(). Nah, probably that's even worse and I should go to bed before I come up with anything more horrible than that.
Wrong question. Should be: "Where do I find a diff gadget that works sensibly with XML files?Answer: Google is your friend. First result for search on "xml diff" => this. There are a few more possibles.
Yes, with lxmlHere is direct link to documentation, from which the above example is slightly adapted.Also note that lxml has, by design, some good API compatiblity with standard xml.etree.ElementTree
From section 3.1 of the XML recommendation:Note that the order of attribute specifications in a start-tag or empty-element tag is not significant.Any system that relies on the order of attributes in an XML element is going to break.
Have had your problem. Firstly looked for some Python script to canonize, didnt found anyone. Then started thinking about making one. Finally xmllintsolved.
This is a partial solution, for the case where xml is being emitted and a predictable order is desired. It does not solve round trip parsing and writing.   Both 2.7 and 3.x use sorted() to force an attribute ordering.  So, this code, in conjunction with use of an OrderedDictionary to hold the attributes will preserve the order for xml output to match the order used to create the Elements.The problem with parsing XML into an element tree is that the code internally creates plain dicts which are passed in to Element(), at which point the order is lost.  No equivalent simple patch is possible.
Best Option is to use the lxml library http://lxml.de/Installing the lxml and just switching the library did the magic to me.
I used the accepted answer above, with both statements:While this fixed the ordering in every node, attribute ordering on new nodes inserted from copies of existing nodes failed to preserve without a deepcopy.  Watch out for reusing nodes to create others...In my case I had an element with several attributes, so I wanted to reuse them:The fromstring(tostring) will reorder the attributes in memory.  It may not result in the alpha sorted dict of attributes, but it also may not have the expected ordering.Now the ordering persists.


Answer URL
https://docs.python.org/3/library/xml.etree.elementtree.html
