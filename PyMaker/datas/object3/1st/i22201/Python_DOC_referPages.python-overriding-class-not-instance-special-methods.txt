Natural Text
How do I override a class special method?I want to be able to call the __str__() method of the class without creating an instance. Example:produces:should be:Even if I use the @staticmethod or @classmethod the __str__ is still using the built-in Python definition for __str__. It's only working when it's Foo().__str__() instead of Foo.__str__().
Special method __str__ defined in a class works only for the instances of that class, to have the different behavior for class objects you will have to do it in a metaclass of that class e.g. (python 2.5)output:
Why do you want to abuse the meaning of __str__? That method name (like many dunder method names) is special in Python, being an instance method with the meaning "return a string representation of this instance of the class".If you want a function that just returns a static string, it would be better to have that as a separate function not inside a class.If you want a constructor that returns a new string, name it something else so it's not clobbering the special __str__ name.If you want a method for printing a representation of the class, you should not use the name __str__ for that. That name is – as the dunder-style name implies – expected to have particular behaviour as defined in the Python documentation. Choose some (non-dunder) name which you can give your special meaning, and don't forget to make it a class method.
I'm not sure what you are trying to do, exactly.   Let me just add a bit of random information.First, add this class:Print this instead:To get this:Are you absolutely sure you don't want to call a classmethod?


Answer URL
https://docs.python.org/3/reference/datamodel.html#special-method-names
https://docs.python.org/3/reference/datamodel.html#special-method-names
https://docs.python.org/3/reference/datamodel.html#object.__str__
