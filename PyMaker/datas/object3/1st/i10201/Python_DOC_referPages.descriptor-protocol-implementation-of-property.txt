Natural Text
The Python descriptor How-To describes how one could implement the property() in terms of descriptors. I do not understand the reason of the first if-block in the __get__ method. Under what circumstances will obj be None? What is supposed to happen then? Why do the __get__ and __del__ methods not check for that?Code is a bit lengthy, but it's probably better to give the full code rather than just a snippet. Questionable line is marked.
You can see what the effect is by making another version that leaves that test out.  I made a class Property that uses the code you posted, and another BadProperty that leaves out that if block.  Then I made this class:The similarities and differences can be seen in this example:The effect of the if block is to return the raw property object itself if it is accessed via the class.  Without this check, the getter is called even when accessing the descriptor via the class.The __set__ and __del__ methods do not need such a check, since the descriptor protocol is not invoke at all when setting/deleting attributes on a class (only on an instance).  This is not totally obvious from the documentation, but can be seen in the difference between the description of __get__ vs. those of __set__/__del__ in the docs, where __get__ can get the attribute of "the owner class or an instance" but __set__/__del__ only set/delete the attribute on an instance.
From the descriptor documentation:The details of invocation depend on whether obj is an object or a class.Basically, instances call descriptors as type(b).__dict__['x'].__get__(b, type(b)), while classes call descriptors as B.__dict__['x'].__get__(None, B). If obj is None means the getter was called from the class, not an instance.This machinery is used for example to implement classmethods.The __set__ and __delete__ do not check for obj is None because they can never be called like this. Only __get__ is invoked when called from the class. Doing cls.prop = 2 or del cls.prop will directly overwrite or delete the property object, without invoking __set__ or __delete__.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__get__
