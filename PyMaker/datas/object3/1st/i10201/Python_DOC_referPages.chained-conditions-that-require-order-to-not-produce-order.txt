Natural Text
Whenever I chain conditions in Python (or any other language tbh) I stumble upon asking myself this, kicking me out of the productive "Zone". When I chain conditions I can, by ordering them correctly, check conditions that without checking for the other conditions first, may produce an Error.As an example lets assume the following snippet:If the first condition wasnt in the first place or even absent, the second condition my produce an KeyErrorI do this pretty often to simply save space in the code, but I always wondered, if this is good style, if it comes with a risk or if its simply "pythonic".
A more Pythonic way is to "ask for forgivness rather than permission". In other words, use a try-except block:
Python is a late binding language, which is reflected in these kind of checks. The behavior is called short-circuiting. One thing I often do is:Now, many people will argue that try: except: is more appropriate. This really depends on the use case!if expressions are faster when the check is likely to fail, so use them when you know what is happening.try expressions are faster when the check is likely to succeed, so use them to safeguard against exceptional circumstances.if is explicit, so you know precisely what you are checking. Use it if you know what is happening, i.e. strongly typed situations.try is implicit, so you only have to care about the outcome of a call. Use it when you don't care about the details, i.e. in weakly typed situations.if works in a well-defined scope - namely right where you are performing the check. Use it for nested relations, where you want to check the top-most one.try works on the entire contained call stack - an exception may be thrown several function calls deeper. Use it for flat or well-defined calls.Basically, if is a precision tool, while try is a hammer - sometimes you need precision, and sometimes you just have nails.


Answer URL
https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not
