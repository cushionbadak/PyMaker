Natural Text
I would like to understand how to open this version of the MNIST data set. For example, the training set label file train-labels-idx1-ubyte is defined as: And I found some code online that seems to work, but do not understand how it works:My understanding is that struct.unpack interprets the second argument as a big-endian byte string of two 4-byte integers (See here). When I actually print the value of bytes, though, I get:The first four-byte integer makes sense:The first two bytes are 0. The next indicates the data are unsigned bytes. And 0x01 indicates a 1-dimensional vector of labels. Assuming my understanding is correct so far, what is happening with the next three (four?) bytes:How does this translate to 60,000?
To understand how it works, you need to convert it to its binary representation.As you mentioned, Python is correctly extracting the right information:In the header of the string, there are two 4-bytes integers. We can see their binary and decimal representation if we iterate over data:The easy part is to know that the first 4 bytes are the first integer (the magic number), and the next 4 bytes are the second integer (the number of items).Then, given these last 4 bytes, there are two ways one can construct the integer value they represent.The first option (the one used in MNIST), is big or high endian. Which means, that the MOST significant bytes are found first:If you check the decimal value of this binary number, it is 60,000, the number of items in the MNIST dataset.Also, we could interpret this as little endian. In this case, the LESS significant bytes are found first:Which in its decimal representation, is the number 1,625,948,160.So, if you simply convert each byte in \x00\x00\xea` to binary, and you find the decimal representation of that whole binary number (reverting the order of the bytes if little endian), you have the integer value they represent.
I wrote the following code in case anyone needs to parse the whole dataset of images (as it appears in the question's title), and not just the first two bytes.And just to check, show the first digit. In my case it's a 7.


Answer URL
https://docs.python.org/3/library/struct.html
