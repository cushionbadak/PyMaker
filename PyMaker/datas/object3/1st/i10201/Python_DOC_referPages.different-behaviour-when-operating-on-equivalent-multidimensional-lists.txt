Natural Text
This question already has an answer here:List of lists changes reflected across sublists unexpectedly                    12 answers                When I operate on two, I think equivalent multidimensional lists, I have different outcomes. The only difference between the lists is how they are created. I'm using Python 3.4.3As you can see, both b's and the operations on them are the same, but the outcome is not. I'm guessing that it has something to do with the way they are created since that is the only difference, but I don't see how.Its the same with Python 2.7.6
`id() shows the object's ID or the memory location in Python.When you do b = [[1,2]]*2 you are basically saying let's point to the same object twice and store it in b in a list.When you do b = [[1,2],[1,2]] you are basically saying let me get two different objects and put them in a list and let b reference the list.So for the latter example, of course you are going to get that output since they are the same object you are changing. You can think of it as me giving you the same address to a house and I have the same address I gave you. We end up at the same place and what ever changes we make to the house, we see it together. Edited for comment:Correct! They are changing how the memory is handled but the values are the same.== tests if the values are the same. is tests if the objects are the same. so in our case:Edited second time for second comment!~If you want a unique object and want to copy it from another object, try using copy. It makes a new object with the same values.Edited again using one of my favorite function sum:This is more or less redundant and it might confuse you some more, but sum also works too.Will return different instances in the object. I only point this is just in case you don't want to import copy or import anything.  
In the second case you're making what's known as a shallow copy of the [1,2] list. Essentially what that means is that somewhere in memory you have the list [1,2], and when you write [[1,2]]*2 you're saying you want two references to that same list. Thus, when you change one of the lists, you're actually changing the list that both items in b are referring to.
This is very-well understood behavior in Python.


Answer URL
https://docs.python.org/3/library/functions.html#id
