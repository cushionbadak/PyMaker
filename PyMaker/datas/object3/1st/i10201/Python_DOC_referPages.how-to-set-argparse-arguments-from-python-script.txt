Natural Text
I have a main function specified as entry point in my package's setup.py which uses the argparse package in order to pass command line arguments (see discussion here):Ideally, I would like to use the same main function in the package's tests as suggested here. In the latter context, I would like to call the main function from within the test class and set (some of) the command line arguments prior to the function call (which otherwise will fail, due to missing arguments).Is that possible?
The argparse module actually reads input variables from special variable, which is called ARGV (short from ARGument Vector). This variable is usually accessed by reading sys.argv from sys module.This variable is a ordinary list, so you can append your command-line parameters to it like this:However, messing with sys.argv at runtime is not a good way of testing. A much more cleaner way to replace the sys.argv for some limited scope is using unittest.mock.patch context manager, like this:Read more about unittest.mock.patch in documentationAlso, check this SO question:How do I set sys.argv so I can unit test it?
Add kwargs to main and if they're None, you set them to the parse_args.
@William Fernandes: Just for the sake of completeness, I'll post the full solution in the way that was suggested by (checking for an empty dict not kwargs is None):From within the test class the main function can then be called with arguments:The call from the command line without kwargs then requires the specification of the command line argument a=.... 


Answer URL
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch
