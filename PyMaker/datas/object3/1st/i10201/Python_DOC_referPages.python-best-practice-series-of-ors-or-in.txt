Natural Text
I am working on a project where a question came up about the following line:I proposed a change to make it "simpler" like so:What would be considered best practice and what would be best for performance? This is for user interface code that gets updated frequently so minor performance improvements could be noticeable. I know the first example will "fail fast" if any were found, and I am assuming that the second would as well. Furthermore, wouldn't it be even faster to use a dict like:...so that a list wouldn't need to be constructed?The only thing PEP-8 says (that I could find):...code is read much more often than it is written. The guidelines provided here are intended to improve the readability of code...However, know when to be inconsistent -- sometimes style guide recommendations just aren't applicable. When in doubt, use your best judgment. Look at other examples and decide what looks best.
I'd go with the set. It's much more readable. The string of ors can be faster in some circumstances since the operator short circuits and there is no overhead of constructing the list of items each time but I don't think it's worth the readability sacrifice. Here is a quick and dirty benchmark. This is with Python 2.7Python 3 numbers.
Obviously in your case it's better to use in operator. It's just much more readable.In more complex cases when it's not possible to use in operator, you may use all and any functions:
As suggested by multiple people, go for reability.performance wise there is a difference, the in operator on sets has an average lookup time of O(1), while for lists it's O(n). You can find this here.In your case where the list of possibilities is limited you will hardly notice a difference. However, once this list becomes very large (talking about millions), you can notice a difference.A simple example can show this: For sets:where with lists:


Answer URL
https://docs.python.org/3/library/functions.html#all
https://docs.python.org/3/library/functions.html#any
