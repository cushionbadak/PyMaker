Natural Text
I'm trying to count the occurrence of each character for any given string input, the occurrences must be output in ascending order( includes numbers and exclamation marks)  I have this for my code so far, i am aware of the Counter function, but it does not output the answer in the format I'd like it to, and I do not know how to format Counter. Instead I'm trying to find away to use the count() to count each character. I've also seen the dictionary function , but I'd be hoping that there is a easier way to do it with count() 
collections.Counter objects provide a most_common() method that returns a list of tuples in decreasing frequency. So, if you want it in ascending frequency, reverse the list:Demo run
Just call .most_common and reverse the output with reversed to get the output from least to most common:
If you just want to format the Counter output differently:
Your best bet is to use Counter (which does work on a string) and then sort on it's output.
Another way to avoid using Counter.Output:
One way to do this would be by removing instances of your sub string and looking at the length...alternatively you could use re or regular expressions,finally you could count them manually,Test any of the three with...Now that you can count any given character you can iterate through your string's unique characters and apply a counter for each unique character you find. Then sort and print the result.
You could use the list function to break the words apart`from collections 


Answer URL
https://docs.python.org/3/library/collections.html#collections.Counter
https://docs.python.org/3/library/collections.html#collections.Counter.most_common
https://docs.python.org/3/library/collections.html#collections.Counter.most_common
https://docs.python.org/3/library/functions.html#reversed
