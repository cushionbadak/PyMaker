Natural Text
This question already has an answer here:How do you split a list into evenly sized chunks?                    57 answers                I need to add the first three elements of a list then add the next three elements of a list and so forth. This is the code I have got so far:For the list:This in turn gives me the result:I need to getIf the remaining numbers is less than 3, it gives me the remainder of the sum ie,Gives meAndGive me
Let's analyze your code!Here is the fixed code:UPDATE: It seems there's a shortening contest going on -- and I do not want to be left behind. Here's an ugly version I'd like to add to the list.
I like SuperSaiyan's approach of explaining things, I'll be the one who shortens it a bit. You can get the same result with a single comprehension:l[i:i+n] splits the list in even chunks of length 3 and sum takes care of adding these together. Using the for i in range(0, len(l), n) we dictate that this operation is to happen for ceil(len(l) / 3) times.
The other answer mentions the fault with your code. However do note that it's always easier to use a list comprehension in these cases. It also works for un-mod-3 lists See What does "list comprehension" mean? How does it work and how can I use it?  for more details about a list comprehension. 
Here is a slightly different way of doing it using zip_longest from itertools (izip_longest in python2), it splits the list in three lists then zip them to get packs of three elements and finally sums the packs:
Just cuz I like to be different.
Alternatively, you may achieve it by using map() with lambda function as:


Answer URL
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
