Natural Text
I have a dataframe df that loads data from a database. Most of the columns are json strings while some are even list of jsons. For example:As you can see, not all the rows have the same number of elements in the json strings for a column. What I need to do is keep the normal columns like id and name as it is and flatten the json columns like so:I have tried using json_normalize like so:But there seems to be some problems with keyerror. What is the correct way of doing this?
Here's a solution using json_normalize() again by using a custom function to get the data in the correct format understood by json_normalize function.Finally, join the DFs on the common index to get:EDIT:- As per the comment by @MartijnPieters, the recommended way of decoding the json strings would be to use json.loads() which is much faster when compared to using ast.literal_eval() if you know that the data source is JSON.
create a custom function to flatten columnB then use pd.concat
The quickest seems to be:


Answer URL
https://docs.python.org/3/library/json.html#json.loads
https://docs.python.org/3/library/ast.html#ast.literal_eval
https://docs.python.org/3/library/collections.html#collections.OrderedDict
