Natural Text
I am using a context manager to wrap the text which would show in terminal and write to file at the same time.I faced this problem and got the solution, please checkWriting terminal output to terminal and to a file?Cannot change the functions (etc. func1 and func2) problem is after the 'with' statement any output as sys.stdout.write its showing value error: I/O operation in closed filesample code:
You don't really need (or want) to use as here. If the goal is to convert any write to sys.stdout to a write to both sys.stdout and your log file, you need to backup sys.stdout on __enter__ and restore it on __exit__, but don't explicitly pass sys.stdout to the constructor, and don't use the __enter__ return to replace sys.stdout, because that bypasses the __enter__/__exit__ code. Instead, have __enter__ and __exit__ do the replacing work for you:Now, usage is just:Note: If you're targeting Python 3.4 or higher, I'd recommend implementing the class with just write, and then using contextlib.redirect_stdout to avoid reinventing the wheel:Note: All the above aside, usually, you want to just use the logging module and logger methods for stuff like this. You can pre-configure different loggers, some that go to sys.stdout, some that go to a log file and sys.stdout, some that go just to log files, and use the appropriate one when needed.
with FileWrite(..........., sys.stdout) as sys.stdout:You are overwriting sys.stdout, just chose a real name for your file like output or whatever but sys.stdout.Example:EDITSince you don't really want to write on the standard output, pass your FileWrite instance as parameter to your methods.Do the same for func2.


Answer URL
https://docs.python.org/3/library/logging.html
