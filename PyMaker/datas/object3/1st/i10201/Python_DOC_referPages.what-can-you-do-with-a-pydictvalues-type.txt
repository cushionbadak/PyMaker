Natural Text
While trying to convert some Python/C API code to work in both 2 & 3, I found that, given the following Pythonand then calling PyObject_GetAttrString(an_example, "ITEMS") would yield a PyObject for which PySequence_Check would return true in 2.7. Now in 3.4, it's yielding a PyObject whose type is PyDictValues_Type and PySequence_Check doesn't return true. The documentation on PyDictValues is, ahem, sparse. What can one do with it? It also response false to PyIter_Check.
In Python 2, dict.values() returns a list, but in Python 3, it's a view of dictionary values. The equivalent in Python 2.7 is dict.viewvalues().In particular views are not sequences because dictionaries don't have orders. So dict.viewkeys() and dict.viewitems() are set-like, because keys have to be unique. dict.viewvalues() is multi-set-like. You can iterate over it, get the length, and do contains checks against it. But you can't index into it like a sequence.
Basically just iter (PyObject_GetIter in the C API).There are technically other operations, like == (inherited from object, uninteresting), len (but you'd call that on the dict instead of making a values view if you wanted that), and in (slow, linear scan, avoid it), but the primary use of a values view is as an iterable.If you want a list, like Python 2, using the C API call PyDict_Values on the dict instead of calling the values method still makes a list.Keys and items views (keys() and items()) are more interesting. They support all the operations in the collections.abc.Set interface, which you'd access through the usual C API equivalents of those operations (so things like PyObject_RichCompare or PySequence_Contains, even though they're not sequences).


Answer URL
https://docs.python.org/3/library/collections.abc.html#module-collections.abc
