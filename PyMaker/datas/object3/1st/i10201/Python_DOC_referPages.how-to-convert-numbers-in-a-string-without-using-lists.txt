Natural Text
My prof wants me to create a function that return the sum of numbers in a string but without using any lists or list methods.The function should look like this when operating:Usually a function like this would be easy to create when using lists and list methods. But trying to do so without using them is a nightmare.I tried the following code but they don't work:Instead of getting 1, 2, and 3 all converted into integers and added together, I instead get the string '11'. In other words, the numbers in the string still have not been converted to integers.I also tried using a map() function but I just got the same results:
Totally silly of course, but for fun:This assumes all characters (apart from whitespaces) are figures.
You've definitely put some effort in here, but one part of your approach definitely won't work as-is: you're iterating over the characters in the string, but you keep trying to treat each character as its own number. I've written a (very commented) method that accomplishes what you want without using any lists or list methods:Personally, I would use this one-liner, but it uses str.split():
No lists were used (nor harmed) in the production of this answer:If the string is noisier than the OP indicates, then this should be more robust:EXAMPLES
If you want to be able to handle floats and negative numbers:Which will work for all cases:Or a variation taking slices:You could also use itertools.groupby which uses no lists, using a set of allowed chars to group by:which gives you the same output:Which if you only have to consider positive ints could just use str.isdigit as the key:
Try this:
You could write a generator:Then just sum that:or, you could use re.finditer with a regular expression and a generator construction:No lists used...
Here each substring is converted to number and added to grant total
If we omit the fact eval is evil, we can solve that problem with it.Yes, that simple. But i won't put that thing in production.And sure we need to test that:And it would raise nothing.


Answer URL
https://docs.python.org/3/library/functions.html#eval
