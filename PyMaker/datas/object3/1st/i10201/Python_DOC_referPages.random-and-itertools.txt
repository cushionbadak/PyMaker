Natural Text
I have some sample code that iterates through two different ranges of numbers successfully, but I want to add functionality to it so that it moves through the chained ranges randomly like so:However this produces the following error:Can anyone advise the amendments needed to make this function as intended?
A quick fix would be as follows:The problem with your code is that to sample from some iterable randomly, you need to know its length first, but itertools.chain is an iterable that provides only the __iter__ method and no __len__. Basically, to do random.choice or random.sample or anything that involves choosing elements at random, you'll need a sequence or a set, which means that sequence should be finite. Iterables that don't provide the __len__ method are considered infinite as you'll never know how many elements will be produced until the iterable's exhausted, if at all. 
As the random.sample documentation states,Returns a k length list of unique elements chosen from the population sequence or setIt requires a sequence or a set so that it can sample from the entire population, but itertools.chain returns an iterator which could even be infinite. So sample cannot determine the actual size of the population. That is why you are getting this error.To fix this, you can simply create a list or a tuple and pass it to sample, like thisNote: The other problem in your code is that, the sampling quantity cannot be bigger than the actual population.So the population size is 47 and you are sampling 48 elements.
The issue is that itertools.chain creates generators, rather than lists. These generators are lazily evaluated, each element exists only briefly and is discarded after use.  The len function is not defined for generators because all the elements don't exist at once.To fix your issue, you'll have to explicitly convert the chain output to a list. 
You have to convert population to a list explicitly. You can try like this:
Im pretty sure you can get the length of a generator type object with the following syntax:


Answer URL
https://docs.python.org/3/library/random.html#random.sample
https://docs.python.org/3/library/itertools.html#itertools.chain
