Natural Text
I'm having trouble solving this task:Write a recursive function that inputs a positive integer n and  outputs all n! permutations of {1, 2, . . . , n}. Do not use any of  Sageâ€™s permutation commands. Use a list to store the values and work  with that list.Sample Input: 3Expected Output: (1,2,3), (1,3,2), (2,3,1),(2,1,3), (3,1,2), (3,2,1)All the things that I have found online generates permutation of list not for an integer. I thought of calculating my factorial will help determining my output length. I could not thing of how would I do this. Please help me out! Thank you ! I have tried this [(0, 0, 2), (0, 1, 1), (0, 2, 0), (1, 0, 1), (1, 1, 0), (2, 0, 0)]
You can use a backtracking algorithm to get the permutations:Just pass in the number of elements:Or using a generator function:
Edit: I created a solution that uses no modules and works recursive:Output: [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.permutations
