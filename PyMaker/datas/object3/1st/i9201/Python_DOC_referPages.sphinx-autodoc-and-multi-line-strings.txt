Natural Text
I have a python module which defines a multi-line string constant. I want to have the multi-line string display nicely in the Sphinx-based documentation.Below, is some example Python code, RST, and how it renders with sphinx-build. However, I would rather get something like the "desired sphinx docs".Is this possible?mymodule.pymydocs.rstResulting Sphinx DocsDesired Sphinx Docs
This cannot be supported directly, but since you're using Sphinx and Python the following hack is what I decided to go with:In this example, it is important that you can import the variable you desire.  This should already be working, since autodoc is able to produce output.This hack will enable you to have a more human friendly output, but you will also still have the value of the variable (as far as sphinx is concerned) in the undesireable (with a bunch of \n characters).I will be reusing my own project for this, but using your variable / value.  My package name is exhale and the file I'm putting this in is exhale/configs.py, so that's where that stuff is coming from.  So this is the layout:File: exhale/configs.pyThis is your actual python code.  It looks like this:In your sphinx documentationIn whatever file you had the autodata above (I used automodule, it doesn't matter).  The docs look like this (to be clear, you've already got this, and do not need to change it).  The things you need to change are your actual python docstring, and the next section.  This is here for completeness of the answer.Modify your conf.pyThis is the fancy part, and a huge benefit to using Sphinx -- Python is so freaking convenient when it comes to writing files.  In the above docstring, you'll see that I deliberately have a .. include directive.  The crazy part about this is we can write this file dynamically.  At the bottom of your conf.py, you can just add something likeIf you are using Python 3, instead of splitting and joining, just use textwrap.indent.  I did the above just to make sure Python 2 users can replicate.KABOOMWhen you run make html, it will regenerate the file DEFAULT_CONFIG_value.rst every time!  So even if you change the value of the variable, it should be good to go.  For reference, the generated file for me looks like thisNote: this is not a standalone reStructuredText document, it should only every be used via .. include::!Last but not least, the rendered output looks like this:As stated in the preamble, Sphinx is going to include the \n version in the value.  We are just putting this in the docstring.  It's very useful to have both.  The reason is because with the .. code-block:: py approach, Sphinx will strip leading / trailing newlines (hence the .. note:: in the docstring).  So it is very helpful to have the human-readable version, but it's also useful to know the raw value.The only other thing worth mentioning here is that the sky is the limit!  I chose to use .. code-block:: py for my purposes, but since you're literally writing the file yourself you can do whatever you want.  You could write the file so that it instead producesby changing the part in conf.py.  It's up to you!  When changing the output you may get bugs, open up the generated .rst document and make sure it's valid :)


Answer URL
https://docs.python.org/3/library/textwrap.html#textwrap.indent
