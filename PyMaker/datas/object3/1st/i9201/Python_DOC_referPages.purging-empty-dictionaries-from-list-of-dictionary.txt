Natural Text
I have a list of dictionaries like so:What's the most efficient way to purge empty dictionaries from this list, end result being:I'm trying: I don't suppose this can be done in O(1) or something?
Just use a list comprehension, and filter on the boolean truth. An empty dictionary is considered false:In Python 2, you could also use the filter() function, using None as the filter:In Python 3 that returns an iterator, not a list, so you'd have to call list() on that (so return list(filter(None, ...))), at which point the list comprehension is simply more readable. Of course, if you don't actually need to have random access to the result (so direct index access to result[whatever]), then an iterator might still be a good idea anyway.Note that this has to take O(N) time, you have to test each and every dictionary. Even if lists had some kind of automaticly updated map that lets you get the indices of the dictionaries that are empty in O(1) time, removing items from a list requires moving later entries forward.
Comprehension or filter (Python2, Python3):None as filter function will filter out all non-truthy elements, which in the case of empty collections makes it quite concise.
could use a list comprehension?
I did it in this way[{'a': '21'}, {'b': 20}, {'c': '89'}]


Answer URL
https://docs.python.org/3/library/functions.html#filter
