Natural Text
I read through the main answers on usage of slots and it has given me an idea of how and where to use __slots__ . Now, I am porting a code from Python 2 to Python 3 which is similar to as following:But this is giving error Python 3 while working fine on Python 2:ValueError: '_fields' in __slots__ conflicts with class variable. I change the code to and it works fine. My query is, is it even the correct change ?As i got from original code, I guess it is saying that don't use __dict__ for saving memory or faster access or whatever reason but at the same time is also trying to specify the type of attribute _field as set(). Can the change above be the right way to say it or it can have some side effects.Further Experiments: I experimented further with following variants (on Python 3): and it gave following output. We can see that only C object shows correct footprint i.e. no __dict__ and only __slots__ . Isn't it what ideally we would want ? Any explanation on __weakref__ would also be helpful.Also on Python 2, both B and C object show same footprint. Based on that should C be the right way to put it as it is compiling on both Python 2 and 3 as well.
But this is giving error Python 3 while working fine on Python 2:ValueError: '_fields' in __slots__ conflicts with class variable. While you didn't get an error in Python2 at class creation/compile time like in Py3k, if you try to actually set the value of _fields, you get AttributeError: 'C' object attribute '_fields' is read-only:Also, see the fourth note in the slots documentation:__slots__ are implemented at the class level by creating descriptors (Implementing Descriptors) for each variable name. As a result, class attributes cannot be used to set default values for instance variables defined by __slots__; otherwise, the class attribute would overwrite the descriptor assignment.Wrt your modification:I change the code to The modified class B has a _fields inside __init__(), not self._fields so it's just a local variable in init, and not accessible anywhere else in the class. Change that to:To correctly initialise _fields, do this:Wrt further experimentation:In class D, __slots__ is a variable only inside __init()__. It's not the (special) class variable D.__slots__; or even the instance variable self.__slots__. So it has __dict__.Class A has none, so also has __dict__.Class C has __slots__ correctly.


Answer URL
https://docs.python.org/3/reference/datamodel.html#notes-on-using-slots
