Natural Text
In Python, how can I parse a numeric string like "545.2222" to its corresponding float value, 545.2222? Or parse the string "31" to an integer, 31?I just want to know how to parse a float str to a float, and (separately) an int str to an int.


Python method to check if a string is a float:A longer and more accurate name for this function could be: is_convertible_to_float(value)What is, and is not a float in Python may surprise you:You think you know what numbers are? You are not so good as you think! Not big surprise.
This is another method which deserves to be mentioned here, ast.literal_eval:This can be used for safely evaluating strings containing Python expressions from untrusted sources without the need to parse the values oneself.That is, a safe 'eval'

Localization and commasYou should consider the possibility of commas in the string representation of a number, for cases like  float("545,545.2222") which throws an exception. Instead, use methods in locale to convert the strings to numbers and interpret commas correctly. The locale.atof method converts to a float in one step once the locale has been set for the desired number convention.Example 1 -- United States number conventions In the United States and the UK, commas can be used as a thousands separator.  In this example with American locale, the comma is handled properly as a separator:Example 2 -- European number conventionsIn the majority of countries of the world,  commas are used for decimal marks instead of periods.  In this example with French locale, the comma is correctly handled as a decimal mark:The method locale.atoi is also available, but the argument should be an integer.
Users codelogic and harley are correct, but keep in mind if you know the string is an integer (for example, 545) you can call int("545") without first casting to float.If your strings are in a list, you could use the map function as well. It is only good if they're all the same type.
If you aren't averse to third-party modules, you could check out the fastnumbers module. It provides a function called fast_real that does exactly what this question is asking for and does it faster than a pure-Python implementation:
The question seems a little bit old. But let me suggest a function, parseStr, which makes something similar, that is, returns integer or float and if a given ASCII string cannot be converted to none of them it returns it untouched. The code of course might be adjusted to do only what you want:
In Python, how can I parse a numeric string like "545.2222" to its corresponding float value, 542.2222? Or parse the string "31" to an integer, 31?  I just want to know how to parse a float string to a float, and (separately) an int string to an int.It's good that you ask to do these separately. If you're mixing them, you may be setting yourself up for problems later. The simple answer is:"545.2222" to float:"31" to an integer:Other conversions, ints to and from strings and literals:Conversions from various bases, and you should know the base in advance (10 is the default). Note you can prefix them with what Python expects for its literals (see below) or remove the prefix:If you don't know the base in advance, but you do know they will have the correct prefix, Python can infer this for you if you pass 0 as the base:Non-Decimal (i.e. Integer) Literals from other BasesIf your motivation is to have your own code clearly represent hard-coded specific values, however, you may not need to convert from the bases - you can let Python do it for you automatically with the correct syntax.You can use the apropos prefixes to get automatic conversion to integers with the following literals. These are valid for Python 2 and 3:Binary, prefix 0bOctal, prefix 0oHexadecimal, prefix 0xThis can be useful when describing binary flags, file permissions in code, or hex values for colors - for example, note no quotes:Making ambiguous Python 2 octals compatible with Python 3If you see an integer that starts with a 0, in Python 2, this is (deprecated) octal syntax.It is bad because it looks like the value should be 37. So in Python 3, it now raises a SyntaxError:Convert your Python 2 octals to octals that work in both 2 and 3 with the 0o prefix:
float("545.2222") and int(float("545.2222"))
The YAML parser can help you figure out what datatype your string is. Use yaml.load(), and then you can use type(result) to test for type:
I use this function for thatIt will convert the string to its type

You need to take into account rounding to do this properly.I.e. int(5.1) => 5     int(5.6) => 5  -- wrong, should be 6 so we do int(5.6 + 0.5) => 6

I am surprised nobody mentioned regex because sometimes string must be prepared and normalized before casting to numberusage:and by the way, something to verify you have a number:
Python have this great flexibility of parsing in one liners. 
To typecast in python use the constructor funtions of the type, passing the string (or whatever value you are trying to cast) as a parameter.For example:Behind the scenes, python is calling the objects __float__ method, which should return a float representation of the parameter. This is especially powerful, as you can define your own types (using classes) with a __float__ method so that it can be casted into a float using float(myobject).
This is a corrected version of https://stackoverflow.com/a/33017514/5973334This will try to parse a string and return either int or float depending on what the string represents.It might rise parsing exceptions or have some unexpected behaviour.
You can use str() to convert any variable to string, int() to convert string integers to integers and float() to convert string floating numbers to float value.
Use:This is the most Pythonic way I could come up with. 
Use:
If you know the str it can be just int or float:
Here's another interpretation of your question (hint: it's vague). It's possible you're looking for something like this:It works like this...Theoretically, there's an injection vulnerability. The string could, for example be "import os; os.abort()". Without any background on where the string comes from, however, the possibility is theoretical speculation.  Since the question is vague, it's not at all clear if this vulnerability actually exists or not.


Answer URL
https://docs.python.org/3/reference/lexical_analysis.html#integer-literals
