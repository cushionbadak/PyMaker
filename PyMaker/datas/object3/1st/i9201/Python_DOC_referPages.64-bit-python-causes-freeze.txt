Natural Text
Being new to programming, I was playing around with Python with this script:On 32-bit Python it will cause a memory overflow error. However when trying it on 64-bit Python and watching Task Manager, Python uses 4 GB of memory (I have 8 GB of RAM) then my computer freezes, and I have to restart it. Is this normal behavior? How can I fix this, or limit how much memory Python has access to?Also if I converted something like this to a .exe file (used this script as testing for something else) would it freeze other computers?
The function itertools.permutations() returns a generator that lazily computes all possible permutations of the given sequence in lexicographical order. Then your code stores all these permutations explicitly in a list.Your sequence contains 11 letters. For your input, there are 11! = 39 916 800 permutations. Python is not particularly memory-efficient; for each of the 40 million permutations, these values need to be stored:A pointer to the list object. (8 bytes on 64-bit Python)The list container itself, containing 11 pointers to strings and slack space. (8Ã— 8 bytes)Thus at least 96 bytes are used per permutation. Adding some padding and miscellaneous waste, we can estimate that each permutation uses 150 bytes of memory. Multiply this by 40 million, and we get 6 gigabytes.This high memory usage explains why your program dies on 32-bit Python (cannot use more than 4 GB of RAM, and in practice is limited by 2 GB). Also, when the process consumes a lot of memory, it can cause thrashing in the page/swap file if one is enabled.One way to limit Python's memory limit is through mechanisms provided through the operating system, such as ulimit. Another way is by consulting the resource module.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.permutations
https://docs.python.org/3/library/resource.html
