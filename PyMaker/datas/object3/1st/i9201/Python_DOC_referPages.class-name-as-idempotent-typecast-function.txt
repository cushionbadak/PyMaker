Natural Text
I'm writing a custom type Foo and I'd like to achieve the following: when writingthen if bar is already an instance of Foo, then Foo(foo) returns that object unmodified, so foo and bar refer to the same object. Otherwise a new object of type Foo should be created, using information from bar in whatever way Foo.__init__ deems appropriate.How can I do this?I would assume that Foo.__new__ is the key to this. It should be fairly easy to have Foo.__new__ return the existing object if the instanceof check succeeds, and to call super().__new__ otherwise. But the documentation for __new__ writes this:If __new__() returns an instance of cls, then the new instanceâ€™s __init__() method will be invoked like __init__(self[, ...]), where self is the new instance and the remaining arguments are the same as were passed to __new__().In this case I would be returning an instance of the requested class, albeit not a new one. Can I somehow prevent the call to __init__? Or do I have to add a check inside __init__ to detect whether it is being invoked for a newly created instance or for an already existing one? The latter sounds like code duplication which should be avoidable.
IMHO, you should directly use __new__ and __init__. The test in init to see whether you should init a new object or already have an existing one is so simple that there is no code duplication and the added complexity is IMHO acceptableIt gives as expected:
One way to achieve this is by moving the required code into a metaclass like this:That metaclass adds a __new__ method unless there exists a base class that already added a __new__ method. So for class hierarchies where some such class extends another such class, the __new__ method will get added but once. It also wraps the constructor to perform the check whether the first argument is identical to self (thanks to the answer by Serge Ballesta for pointing out this simple check). Otherwise it calls the original constructor, or the base constructor if no constructor had been defined.Quite a bit of code, but you only need that once, and can use it to introduce these semantics for as many types as you want. If you only need this for a single class, other answers may be more appropriate.


Answer URL
https://docs.python.org/3/reference/datamodel.html#object.__new__
