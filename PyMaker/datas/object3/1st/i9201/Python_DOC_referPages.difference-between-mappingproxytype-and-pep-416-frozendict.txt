Natural Text
While frozendict was rejected, a related class types.MappingProxyType was added to public API in python 3.3.I understand MappingProxyType is just a wrapper around the underlying dict, but despite that isn't it functionally equivalent to frozendict?In other words, what's the substantive difference between the original PEP 416 frozendict and this:Of course MappingProxyType is not hashable as is, but just as the PEP suggested for frozendict, it can be made hashable after ensuring that all its values are hashable (MappingProxyType cannot be subclassed, so it would be require composition and forwarding of methods).
TL;DRMappingProxyType is a read only proxy for mapping (e.g. dict) objects.frozendict is an immutable dictAnswerThe proxy pattern is (quoting wikipedia):A proxy, in its most general form, is a class functioning as an  interface to something else.The MappingProxyType is just a simple proxy (i.e. interface) to access the real object (the real map, which on our example is dict).the suggested frozendict object is just as set is to frozenset. a read only  (immutable) object which can only be changed upon creation.So why do we need MappingProxyType? example use case is where you want to pass a dictionary to another function but without it able to change your dictionary, it act as a read only proxy, (quoting python docs):Read-only proxy of a mapping. It provides a dynamic view on the  mappingâ€™s entries, which means that when the mapping changes, the view  reflects these changes.lets see some example usage of the MappingProxyTypeUpdate:because the PEP did not make it into python, we cannot know for sure what the implementation that would be.by looking at the PEP we see that:would raise an exception as {'b': 1} is not hashable value, but on your implementation it will create the object. of-course, you can add a validation for the value as noted on the PEP.I assume part of the PEP was memory optimization and implementation of this kind of frozendict could have benefit from the performance of dict comparison using the __hash__ implementation.


Answer URL
https://docs.python.org/3/c-api/dict.html#c.PyDictProxy_New
