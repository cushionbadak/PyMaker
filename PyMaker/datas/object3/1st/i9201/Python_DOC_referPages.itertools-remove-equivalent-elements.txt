Natural Text
I'm generating all vectors respecting some symmetry groups using itertools in python.Basically all is just permutation of x,y,z axis and sign. I'm just not sure what is the best way to ensure that equivalent vectors are not duplicated E.g. 0 = -0 therefore sign permuations of [1, 2, 0] should be just [[1, 2, 0], [1, -2, 0], [-1, 2, 0], [-1, -2, 0]]itertools.permutations( 'AAB'  ) should produce [('A', 'B', 'A'), ('B', 'A', 'A'), ('A', 'A', 'B')] i.e. not duplicating each elements by exchange of equvalent AMy current solution:to remove dumplicate I pass it through a set like lst = list(set(lst)). But I don't like to create a lot of garbage which is filtered out later. Also it arbitrarily change order of elements. Also it set can be created just form hashable elements (e.g. tuples, but not lists or numpy arrays ) which requires conversion.This function does the sign permutation with checking for zeros, but it is probably very inefficient:It is working, but I was thinking maybe there is something prefabricated ... more efficient, simple and pythonic
Maybe this is a bit more Pythonic:Output:
how about creating a list with the signs and using itertools.product over that:or in one go:this way there is a lot less work to do inside the loop.
I think no matter how smart you are about using itertools, sets or iterators - the most important thing is to write code in a way that is easy to understand e.g. it won't hurt to name vars better and make it obvious that you multiply vectors:This is just an example how to make it easier to follow IMHO.


Answer URL
https://docs.python.org/3/library/itertools.html#itertools.product
