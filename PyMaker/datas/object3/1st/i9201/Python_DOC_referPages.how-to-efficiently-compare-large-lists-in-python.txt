Natural Text
I am trying to find 9 letter words, that when you split evenly into 3 parts, and jumble around, you get another nine letter word.This is how I do it. The only problem is nineWordList is 68,000 elements long, and this takes ages. How can I improve this, to make it more efficient?
Use a set to avoid having to loop on two levels through the list:This will still have to loop through all those 68,000 entries (you obviously cannot avoid that) but in a first pass, it will convert the list into a set, so membership tests using in can be made in constant time. This gives you a linear time complexity instead of the quadratic time complexity that your nested loops had. Of course, the additional set will require more memory but that shouldnâ€™t be a problem.Btw. I believe your slicing is off. i[0:2] will not produce a 3-letter word (when you want to split a 9-letter word evenly):The second index in slices is always non-inclusive so you need to increase that by one:You can also shorten your conditions a bit by using itertools.permutations to generate those possible jumpled words. That way, your checks might be a bit nicer to the eye:
Put all your valid words in a Python set and then loop through the set rearranging the words in the manner you've described. For each rearrangement, check to see if it is in the set.Since Python's set is based on a hash table the look-ups occur in O(1) (constant) time. For a constant number of rearrangements per word, your algorithm then works in O(n) time, which is far better than the O(n^2) algorithm you have now.The revised code looks like this:Your previous code was slow because for each word you had to look at all the other words (technically, half of them, on average). That's about 2,312,000,000 words you have to look at; that's what's meant by O(n^2). In the new code for each word you only have to look in one well-defined place, so you only look at 68,000 words. That's the benefit of hash tables, which can often give you O(n) performance on a dataset.


Answer URL
https://docs.python.org/3/library/stdtypes.html#set
https://docs.python.org/3/library/itertools.html#itertools.permutations
