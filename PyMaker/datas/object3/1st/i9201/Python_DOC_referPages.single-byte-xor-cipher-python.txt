Natural Text
This is for a modern cryptography class that I am currently taking.The challenge is the cryptopals challenge 3: Single-Byte XOR Cipher, and I am trying to use python 3 to help complete this.I know that I am supposed to XOR the string and converted to English. The hex string is "1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736" which converts to "806748453371902409051174291875458592743800337585421566549206796642836053682239286" in decimal form. I have XOR'd this against multiple hex byte combinations (2 hex digits), but I do not know how to convert this into English. Is it just brute force and educated guessing at this point?I know about ETAOIN SHRDLU, but this hasn't really been that helpful.  Thank you for your time and help.ADDED: Additionally, I tried Challenge #4 but this code does not seem to work. But it did work for Challenge #3 so I am confused.Challenge #3Challenge #4
Building on @falsetru's answer, but showing just the decoded string with the most space characters:Instead of counting spaces, you could use ETAOIN SHRDLU ("the approximate order of frequency of the 12 most commonly used letters in the English language") for weights, but it's not necessary here.Btw, I think it would've been good if you had linked to the challenge.Edit: Alternatively, you can try to find the key (or a few most promising keys) and then only decode using that key (or those few keys). For example, assuming that counting the spaces will determine the winner:This could even easily be done by hand (though the challenge tells you not to do that).
You can use binascii.hexlify, binascii.unhexlify to convert byte strings to hexadecimals or vice versa:Using str.isprintable, you can filter out non-printable candidates:
With observation you can find "3737" in encoded string, so it can be "e","E","o","O","r","R" for an English word may be?Using retro-engineering, XOR results shows "R","r","X","x","E","e" as potentials keys.After trying theses potentials Keys you will obtain that "X" is the key ;-)


Answer URL
https://docs.python.org/3/library/binascii.html#binascii.hexlify
https://docs.python.org/3/library/binascii.html#binascii.unhexlify
https://docs.python.org/3/library/stdtypes.html#str.isprintable
https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions
https://docs.python.org/3/tutorial/classes.html#generator-expressions
https://docs.python.org/3/library/stdtypes.html#str.join
https://docs.python.org/3/library/functions.html#chr
