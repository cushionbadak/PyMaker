Natural Text
It seems really stupid, but I'm wondering why the following code (numpy 1.11.2) raise an exception:An not this one:I can understand, when we want to take part of an array, that's possible we don't really care if the index becomes too big (just taking what is in the array), but it seems a bit tricky too me: it's quite easy too didn't notice you're actually having a but on the way you're counting indexes, without an exception raising.
This is consistent with how Python lists (or sequences in general) behave:You cannot access an index that does not exit.But you can have an empty range, i.e. an empty list or and empty NumPy array.So when if one of the indices is outside of he size of the sequence, take what is there.The Python tutorial uses a more positive wording:However, out of range slice indexes are handled gracefully when used for slicing:
When you give the index 1:100, you use slicing. Python, in general, accepts slices larger than the list, and ignores remaining items, so there is no problem. However, when x[10], you specifically refer to the 11-th element (remember that lists start at 0), which does not exist, so you get an exception
In Python, Counting Begins at 0.In your first example your array has 10 elements, but is indexed from 0 to 9. Therefore, calling a[10], you attempt to call the 11th element, which will give you an error as it outside of the valid index for your array.As follows:You can read about Python 0 indexing here:https://docs.scipy.org/doc/numpy-1.10.0/user/basics.indexing.html


Answer URL
https://docs.python.org/3/tutorial/introduction.html#strings
