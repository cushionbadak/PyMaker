link:
library/asyncio-task.html#timeouts

docs:

Timeouts¶


coroutine (aw, timeout, *, loop=None)¶
Wait for the aw awaitable
to complete with a timeout.
If aw is a coroutine it is automatically scheduled as a Task.
timeout can either be  or a float or int number of seconds
to wait for.  If timeout is , block until the future
completes.
If a timeout occurs, it cancels the task and raises
.
To avoid the task ,
wrap it in .
The function will wait until the future is actually cancelled,
so the total wait time may exceed the timeout.
If the wait is cancelled, the future aw is also cancelled.
The loop argument is deprecated and scheduled for removal
in Python 3.10.
Example:



Changed in version 3.7: When aw is cancelled due to a timeout,  waits
for aw to be cancelled.  Previously, it raised
 immediately.


