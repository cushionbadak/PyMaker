link:
library/xmlrpc.client.html#xmlrpc.client.ServerProxy

docs:


class (uri, transport=None, encoding=None, verbose=False, allow_none=False, use_datetime=False, use_builtin_types=False, *, context=None)¶

Changed in version 3.3: The use_builtin_types flag was added.

A  instance is an object that manages communication with a
remote XML-RPC server.  The required first argument is a URI (Uniform Resource
Indicator), and will normally be the URL of the server.  The optional second
argument is a transport factory instance; by default it is an internal
 instance for https: URLs and an internal HTTP
 instance otherwise.  The optional third argument is an
encoding, by default UTF-8. The optional fourth argument is a debugging flag.
The following parameters govern the use of the returned proxy instance.
If allow_none is true,  the Python constant  will be translated into
XML; the default behaviour is for  to raise a . This is
a commonly-used extension to the XML-RPC specification, but isn’t supported by
all clients and servers; see http://ontosys.com/xml-rpc/extensions.php
for a description.
The use_builtin_types flag can be used to cause date/time values
to be presented as  objects and binary data to be
presented as  objects; this flag is false by default.
,  and  objects
may be passed to calls.
The obsolete use_datetime flag is similar to use_builtin_types but it
applies only to date/time values.
Both the HTTP and HTTPS transports support the URL syntax extension for HTTP
Basic Authentication: .  The  
portion will be base64-encoded as an HTTP ‘Authorization’ header, and sent to
the remote server as part of the connection process when invoking an XML-RPC
method.  You only need to use this if the remote server requires a Basic
Authentication user and password. If an HTTPS URL is provided, context may
be  and configures the SSL settings of the underlying
HTTPS connection.
The returned instance is a proxy object with methods that can be used to invoke
corresponding RPC calls on the remote server.  If the remote server supports the
introspection API, the proxy can also be used to query the remote server for the
methods it supports (service discovery) and fetch other server-associated
metadata.
Types that are conformable (e.g. that can be marshalled through XML),
include the following (and except where noted, they are unmarshalled
as the same Python type):






XML-RPC type
Python type






, ,
,  ,
 or

 in range from -2147483648 to 2147483647.
Values get the  tag.

 or

.  Values get the  tag.





 or  containing
conformable elements.  Arrays are returned as
.


.  Keys must be strings, values may be
any conformable type.  Objects of user-defined
classes can be passed in; only their
 attribute is transmitted.


 or .
Returned type depends on values of
use_builtin_types and use_datetime flags.


,  or
.  Returned type depends on the
value of the use_builtin_types flag.


The  constant.  Passing is allowed only if
allow_none is true.


.  Returned type only.



This is the full set of data types supported by XML-RPC.  Method calls may also
raise a special  instance, used to signal XML-RPC server errors, or
 used to signal an error in the HTTP/HTTPS transport layer.
Both  and  derive from a base class called
.  Note that the xmlrpc client module currently does not marshal
instances of subclasses of built-in types.
When passing strings, characters special to XML such as , , and 
will be automatically escaped.  However, it’s the caller’s responsibility to
ensure that the string is free of characters that aren’t allowed in XML, such as
the control characters with ASCII values between 0 and 31 (except, of course,
tab, newline and carriage return); failing to do this will result in an XML-RPC
request that isn’t well-formed XML.  If you have to pass arbitrary bytes
via XML-RPC, use  or  classes or the
 wrapper class described below.
 is retained as an alias for  for backwards
compatibility.  New code should use .

Changed in version 3.5: Added the context argument.


Changed in version 3.6: Added support of type tags with prefixes (e.g. ).
Added support of unmarshalling additional types used by Apache XML-RPC
implementation for numerics: , , , ,
 and .
See http://ws.apache.org/xmlrpc/types.html for a description.

