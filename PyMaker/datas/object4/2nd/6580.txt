link:
library/wsgiref.html#module-wsgiref.handlers

docs:

 – server/gateway base classes¶
This module provides base handler classes for implementing WSGI servers and
gateways.  These base classes handle most of the work of communicating with a
WSGI application, as long as they are given a CGI-like environment, along with
input, output, and error streams.


class ¶
CGI-based invocation via , ,  and
.  This is useful when you have a WSGI application and want to run
it as a CGI script.  Simply invoke , where  is
the WSGI application object you wish to invoke.
This class is a subclass of  that sets 
to true,  to false, and  to true, and
always uses  and  to obtain the necessary CGI streams and
environment.



class ¶
A specialized alternative to , for use when deploying on
Microsoft’s IIS web server, without having set the config allowPathInfo
option (IIS>=7) or metabase allowPathInfoForScriptMappings (IIS<7).
By default, IIS gives a  that duplicates the  at
the front, causing problems for WSGI applications that wish to implement
routing. This handler strips any such duplicated path.
IIS can be configured to pass the correct , but this causes
another bug where  is wrong. Luckily this variable is
rarely used and is not guaranteed by WSGI. On IIS<7, though, the
setting can only be made on a vhost level, affecting all other script
mappings, many of which break when exposed to the  bug.
For this reason IIS<7 is almost never deployed with the fix. (Even IIS7
rarely uses it because there is still no UI for it.)
There is no way for CGI code to tell whether the option was set, so a
separate handler class is provided.  It is used in the same way as
, i.e., by calling , where
 is the WSGI application object you wish to invoke.

New in version 3.2.




class (stdin, stdout, stderr, environ, multithread=True, multiprocess=False)¶
Similar to , but instead of using the  and
 modules, the CGI environment and I/O streams are specified explicitly.
The multithread and multiprocess values are used to set the
 and  flags for any applications run by
the handler instance.
This class is a subclass of  intended for use with
software other than HTTP “origin servers”.  If you are writing a gateway
protocol implementation (such as CGI, FastCGI, SCGI, etc.) that uses a
 header to send an HTTP status, you probably want to subclass this
instead of .



class (stdin, stdout, stderr, environ, multithread=True, multiprocess=False)¶
Similar to , but designed for use with HTTP origin
servers.  If you are writing an HTTP server implementation, you will probably
want to subclass this instead of .
This class is a subclass of .  It overrides the
, , , ,
, and  methods to support explicitly setting the
environment and streams via the constructor.  The supplied environment and
streams are stored in the , , , and
 attributes.
The  method of stdout should write
each chunk in full, like .



class ¶
This is an abstract base class for running WSGI applications.  Each instance
will handle a single HTTP request, although in principle you could create a
subclass that was reusable for multiple requests.
 instances have only one method intended for external use:


(app)¶
Run the specified WSGI application, app.

All of the other  methods are invoked by this method in the
process of running the application, and thus exist primarily to allow
customizing the process.
The following methods MUST be overridden in a subclass:


(data)¶
Buffer the bytes data for transmission to the client.  It’s okay if this
method actually transmits the data;  just separates write
and flush operations for greater efficiency when the underlying system actually
has such a distinction.



()¶
Force buffered data to be transmitted to the client.  It’s okay if this method
is a no-op (i.e., if  actually sends the data).



()¶
Return an input stream object suitable for use as the  of the
request currently being processed.



()¶
Return an output stream object suitable for use as the  of the
request currently being processed.



()¶
Insert CGI variables for the current request into the  attribute.

Here are some other methods and attributes you may wish to override. This list
is only a summary, however, and does not include every method that can be
overridden.  You should consult the docstrings and source code for additional
information before attempting to create a customized 
subclass.
Attributes and methods for customizing the WSGI environment:


¶
The value to be used for the  environment variable.  It
defaults to true in , but may have a different default (or
be set by the constructor) in the other subclasses.



¶
The value to be used for the  environment variable.  It
defaults to true in , but may have a different default (or
be set by the constructor) in the other subclasses.



¶
The value to be used for the  environment variable.  It
defaults to false in , but  sets it to
true by default.



¶
The default environment variables to be included in every request’s WSGI
environment.  By default, this is a copy of  at the time that
 was imported, but subclasses can either create their own
at the class or instance level.  Note that the dictionary should be considered
read-only, since the default value is shared between multiple classes and
instances.



¶
If the  attribute is set, this attribute’s value is used to
set the default  WSGI environment variable, and also to set a
default  header in HTTP responses.  It is ignored for handlers (such
as  and ) that are not HTTP origin
servers.

Changed in version 3.3: The term “Python” is replaced with implementation specific term like
“CPython”, “Jython” etc.




()¶
Return the URL scheme being used for the current request.  The default
implementation uses the  function from 
to guess whether the scheme should be “http” or “https”, based on the current
request’s  variables.



()¶
Set the  attribute to a fully-populated WSGI environment.  The
default implementation uses all of the above methods and attributes, plus the
, , and  methods and the
 attribute.  It also inserts a  key
if not present, as long as the  attribute is a true value
and the  attribute is set.

Methods and attributes for customizing exception handling:


(exc_info)¶
Log the exc_info tuple in the server log.  exc_info is a  tuple.  The default implementation simply writes the traceback to
the request’s  stream and flushes it.  Subclasses can override
this method to change the format or retarget the output, mail the traceback to
an administrator, or whatever other action may be deemed suitable.



¶
The maximum number of frames to include in tracebacks output by the default
 method.  If , all frames are included.



(environ, start_response)¶
This method is a WSGI application to generate an error page for the user.  It is
only invoked if an error occurs before headers are sent to the client.
This method can access the current error information using ,
and should pass that information to start_response when calling it (as
described in the “Error Handling” section of PEP 3333).
The default implementation just uses the ,
, and  attributes to generate an output
page.  Subclasses can override this to produce more dynamic error output.
Note, however, that it’s not recommended from a security perspective to spit out
diagnostics to any old user; ideally, you should have to do something special to
enable diagnostic output, which is why the default implementation doesn’t
include any.



¶
The HTTP status used for error responses.  This should be a status string as
defined in PEP 3333; it defaults to a 500 code and message.



¶
The HTTP headers used for error responses.  This should be a list of WSGI
response headers ( tuples), as described in PEP 3333.  The
default list just sets the content type to .



¶
The error response body.  This should be an HTTP response body bytestring. It
defaults to the plain text, “A server error occurred.  Please contact the
administrator.”

Methods and attributes for PEP 3333’s “Optional Platform-Specific File
Handling” feature:


¶
A  factory, or .  The default value of this
attribute is the  class.



()¶
Override to implement platform-specific file transmission.  This method is
called only if the application’s return value is an instance of the class
specified by the  attribute.  It should return a true
value if it was able to successfully transmit the file, so that the default
transmission code will not be executed. The default implementation of this
method just returns a false value.

Miscellaneous methods and attributes:


¶
This attribute should be set to a true value if the handler’s  and
 are being used to communicate directly to the client, rather than
via a CGI-like gateway protocol that wants the HTTP status in a special
 header.
This attribute’s default value is true in , but false in
 and .



¶
If  is true, this string attribute is used to set the HTTP
version of the response set to the client.  It defaults to .




()¶
Transcode CGI variables from  to PEP 3333 “bytes in unicode”
strings, returning a new dictionary.  This function is used by
 and  in place of directly using
, which is not necessarily WSGI-compliant on all platforms
and web servers using Python 3 – specifically, ones where the OS’s
actual environment is Unicode (i.e. Windows), or ones where the environment
is bytes, but the system encoding used by Python to decode it is anything
other than ISO-8859-1 (e.g. Unix systems using UTF-8).
If you are implementing a CGI-based handler of your own, you probably want
to use this routine instead of just copying values out of 
directly.

New in version 3.2.


