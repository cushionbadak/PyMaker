link:
library/xmlrpc.client.html#module-xmlrpc.client

docs:

 — XML-RPC client access¶
Source code: Lib/xmlrpc/client.py

XML-RPC is a Remote Procedure Call method that uses XML passed via HTTP(S) as a
transport.  With it, a client can call methods with parameters on a remote
server (the server is named by a URI) and get back structured data.  This module
supports writing XML-RPC client code; it handles all the details of translating
between conformable Python objects and XML on the wire.

Warning
The  module is not secure against maliciously
constructed data.  If you need to parse untrusted or unauthenticated data see
XML vulnerabilities.


Changed in version 3.5: For HTTPS URIs,  now performs all the necessary
certificate and hostname checks by default.



class (uri, transport=None, encoding=None, verbose=False, allow_none=False, use_datetime=False, use_builtin_types=False, *, context=None)¶

Changed in version 3.3: The use_builtin_types flag was added.

A  instance is an object that manages communication with a
remote XML-RPC server.  The required first argument is a URI (Uniform Resource
Indicator), and will normally be the URL of the server.  The optional second
argument is a transport factory instance; by default it is an internal
 instance for https: URLs and an internal HTTP
 instance otherwise.  The optional third argument is an
encoding, by default UTF-8. The optional fourth argument is a debugging flag.
The following parameters govern the use of the returned proxy instance.
If allow_none is true,  the Python constant  will be translated into
XML; the default behaviour is for  to raise a . This is
a commonly-used extension to the XML-RPC specification, but isn’t supported by
all clients and servers; see http://ontosys.com/xml-rpc/extensions.php
for a description.
The use_builtin_types flag can be used to cause date/time values
to be presented as  objects and binary data to be
presented as  objects; this flag is false by default.
,  and  objects
may be passed to calls.
The obsolete use_datetime flag is similar to use_builtin_types but it
applies only to date/time values.
Both the HTTP and HTTPS transports support the URL syntax extension for HTTP
Basic Authentication: .  The  
portion will be base64-encoded as an HTTP ‘Authorization’ header, and sent to
the remote server as part of the connection process when invoking an XML-RPC
method.  You only need to use this if the remote server requires a Basic
Authentication user and password. If an HTTPS URL is provided, context may
be  and configures the SSL settings of the underlying
HTTPS connection.
The returned instance is a proxy object with methods that can be used to invoke
corresponding RPC calls on the remote server.  If the remote server supports the
introspection API, the proxy can also be used to query the remote server for the
methods it supports (service discovery) and fetch other server-associated
metadata.
Types that are conformable (e.g. that can be marshalled through XML),
include the following (and except where noted, they are unmarshalled
as the same Python type):






XML-RPC type
Python type






, ,
,  ,
 or

 in range from -2147483648 to 2147483647.
Values get the  tag.

 or

.  Values get the  tag.





 or  containing
conformable elements.  Arrays are returned as
.


.  Keys must be strings, values may be
any conformable type.  Objects of user-defined
classes can be passed in; only their
 attribute is transmitted.


 or .
Returned type depends on values of
use_builtin_types and use_datetime flags.


,  or
.  Returned type depends on the
value of the use_builtin_types flag.


The  constant.  Passing is allowed only if
allow_none is true.


.  Returned type only.



This is the full set of data types supported by XML-RPC.  Method calls may also
raise a special  instance, used to signal XML-RPC server errors, or
 used to signal an error in the HTTP/HTTPS transport layer.
Both  and  derive from a base class called
.  Note that the xmlrpc client module currently does not marshal
instances of subclasses of built-in types.
When passing strings, characters special to XML such as , , and 
will be automatically escaped.  However, it’s the caller’s responsibility to
ensure that the string is free of characters that aren’t allowed in XML, such as
the control characters with ASCII values between 0 and 31 (except, of course,
tab, newline and carriage return); failing to do this will result in an XML-RPC
request that isn’t well-formed XML.  If you have to pass arbitrary bytes
via XML-RPC, use  or  classes or the
 wrapper class described below.
 is retained as an alias for  for backwards
compatibility.  New code should use .

Changed in version 3.5: Added the context argument.


Changed in version 3.6: Added support of type tags with prefixes (e.g. ).
Added support of unmarshalling additional types used by Apache XML-RPC
implementation for numerics: , , , ,
 and .
See http://ws.apache.org/xmlrpc/types.html for a description.



See also

XML-RPC HOWTO
A good description of XML-RPC operation and client software in several languages.
Contains pretty much everything an XML-RPC client developer needs to know.
XML-RPC Introspection
Describes the XML-RPC protocol extension for introspection.
XML-RPC Specification
The official specification.
Unofficial XML-RPC Errata
Fredrik Lundh’s “unofficial errata, intended to clarify certain
details in the XML-RPC specification, as well as hint at
‘best practices’ to use when designing your own XML-RPC
implementations.”



ServerProxy Objects¶
A  instance has a method corresponding to each remote
procedure call accepted by the XML-RPC server.  Calling the method performs an
RPC, dispatched by both name and argument signature (e.g. the same method name
can be overloaded with multiple argument signatures).  The RPC finishes by
returning a value, which may be either returned data in a conformant type or a
 or  object indicating an error.
Servers that support the XML introspection API support some common methods
grouped under the reserved  attribute:


()¶
This method returns a list of strings, one for each (non-system) method
supported by the XML-RPC server.



(name)¶
This method takes one parameter, the name of a method implemented by the XML-RPC
server. It returns an array of possible signatures for this method. A signature
is an array of types. The first of these types is the return type of the method,
the rest are parameters.
Because multiple signatures (ie. overloading) is permitted, this method returns
a list of signatures rather than a singleton.
Signatures themselves are restricted to the top level parameters expected by a
method. For instance if a method expects one array of structs as a parameter,
and it returns a string, its signature is simply “string, array”. If it expects
three integers and returns a string, its signature is “string, int, int, int”.
If no signature is defined for the method, a non-array value is returned. In
Python this means that the type of the returned  value will be something other
than list.



(name)¶
This method takes one parameter, the name of a method implemented by the XML-RPC
server.  It returns a documentation string describing the use of that method. If
no such string is available, an empty string is returned. The documentation
string may contain HTML markup.


Changed in version 3.5: Instances of  support the context manager protocol
for closing the underlying transport.

A working example follows. The server code:


The client code for the preceding server:




DateTime Objects¶


class ¶
This class may be initialized with seconds since the epoch, a time
tuple, an ISO 8601 time/date string, or a 
instance.  It has the following methods, supported mainly for internal
use by the marshalling/unmarshalling code:


(string)¶
Accept a string as the instance’s new time value.



(out)¶
Write the XML-RPC encoding of this  item to the out stream
object.

It also supports certain of Python’s built-in operators through rich comparison
and  methods.

A working example follows. The server code:


The client code for the preceding server:




Binary Objects¶


class ¶
This class may be initialized from bytes data (which may include NULs). The
primary access to the content of a  object is provided by an
attribute:


¶
The binary data encapsulated by the  instance.  The data is
provided as a  object.

 objects have the following methods, supported mainly for
internal use by the marshalling/unmarshalling code:


(bytes)¶
Accept a base64  object and decode it as the instance’s new data.



(out)¶
Write the XML-RPC base 64 encoding of this binary item to the out stream object.
The encoded data will have newlines every 76 characters as per
RFC 2045 section 6.8,
which was the de facto standard base64 specification when the
XML-RPC spec was written.

It also supports certain of Python’s built-in operators through 
and  methods.

Example usage of the binary objects.  We’re going to transfer an image over
XMLRPC:


The client gets the image and saves it to a file:




Fault Objects¶


class ¶
A  object encapsulates the content of an XML-RPC fault tag. Fault
objects have the following attributes:


¶
A string indicating the fault type.



¶
A string containing a diagnostic message associated with the fault.


In the following example we’re going to intentionally cause a  by
returning a complex type object.  The server code:


The client code for the preceding server:




ProtocolError Objects¶


class ¶
A  object describes a protocol error in the underlying
transport layer (such as a 404 ‘not found’ error if the server named by the URI
does not exist).  It has the following attributes:


¶
The URI or URL that triggered the error.



¶
The error code.



¶
The error message or diagnostic string.



¶
A dict containing the headers of the HTTP/HTTPS request that triggered the
error.


In the following example we’re going to intentionally cause a 
by providing an invalid URI:




MultiCall Objects¶
The  object provides a way to encapsulate multiple calls to a
remote server into a single request [1].


class (server)¶
Create an object used to boxcar method calls. server is the eventual target of
the call. Calls can be made to the result object, but they will immediately
return , and only store the call name and parameters in the
 object. Calling the object itself causes all stored calls to
be transmitted as a single  request. The result of this call
is a generator; iterating over this generator yields the individual
results.

A usage example of this class follows.  The server code:


The client code for the preceding server:




Convenience Functions¶


(params, methodname=None, methodresponse=None, encoding=None, allow_none=False)¶
Convert params into an XML-RPC request. or into a response if methodresponse
is true. params can be either a tuple of arguments or an instance of the
 exception class.  If methodresponse is true, only a single value
can be returned, meaning that params must be of length 1. encoding, if
supplied, is the encoding to use in the generated XML; the default is UTF-8.
Python’s  value cannot be used in standard XML-RPC; to allow using
it via an extension,  provide a true value for allow_none.



(data, use_datetime=False, use_builtin_types=False)¶
Convert an XML-RPC request or response into Python objects, a .  params is a tuple of argument; methodname is a string, or
 if no method name is present in the packet. If the XML-RPC packet
represents a fault condition, this function will raise a  exception.
The use_builtin_types flag can be used to cause date/time values to be
presented as  objects and binary data to be
presented as  objects; this flag is false by default.
The obsolete use_datetime flag is similar to use_builtin_types but it
applies only to date/time values.

Changed in version 3.3: The use_builtin_types flag was added.




Example of Client Usage¶


To access an XML-RPC server through a HTTP proxy, you need to define a custom
transport.  The following example shows how:




Example of Client and Server Usage¶
See SimpleXMLRPCServer Example.
Footnotes



[1]This approach has been first presented in a discussion on xmlrpc.com.



