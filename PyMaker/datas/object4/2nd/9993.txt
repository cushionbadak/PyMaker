link:
library/dis.html

docs:


 — Disassembler for Python bytecode¶
Source code: Lib/dis.py

The  module supports the analysis of CPython bytecode by
disassembling it. The CPython bytecode which this module takes as an input is
defined in the file  and used by the compiler and the
interpreter.

CPython implementation detail: Bytecode is an implementation detail of the CPython interpreter.  No
guarantees are made that bytecode will not be added, removed, or changed
between versions of Python.  Use of this module should not be considered to
work across Python VMs or Python releases.

Changed in version 3.6: Use 2 bytes for each instruction. Previously the number of bytes varied
by instruction.


Example: Given the function :


the following command can be used to display the disassembly of
:


(The “2” is a line number).

Bytecode analysis¶

New in version 3.4.

The bytecode analysis API allows pieces of Python code to be wrapped in a
 object that provides easy access to details of the compiled
code.


class (x, *, first_line=None, current_offset=None)¶
Analyse the bytecode corresponding to a function, generator, asynchronous
generator, coroutine, method, string of source code, or a code object (as
returned by ).
This is a convenience wrapper around many of the functions listed below, most
notably , as iterating over a 
instance yields the bytecode operations as  instances.
If first_line is not , it indicates the line number that should be
reported for the first source line in the disassembled code.  Otherwise, the
source line information (if any) is taken directly from the disassembled code
object.
If current_offset is not , it refers to an instruction offset in the
disassembled code. Setting this means  will display a “current
instruction” marker against the specified opcode.


classmethod (tb)¶
Construct a  instance from the given traceback, setting
current_offset to the instruction responsible for the exception.



¶
The compiled code object.



¶
The first source line of the code object (if available)



()¶
Return a formatted view of the bytecode operations (the same as printed by
, but returned as a multi-line string).



()¶
Return a formatted multi-line string with detailed information about the
code object, like .


Changed in version 3.7: This can now handle coroutine and asynchronous generator objects.


Example:




Analysis functions¶
The  module also defines the following analysis functions that convert
the input directly to the desired output. They can be useful if only a single
operation is being performed, so the intermediate analysis object isn’t useful:


(x)¶
Return a formatted multi-line string with detailed code object information
for the supplied function, generator, asynchronous generator, coroutine,
method, source code string or code object.
Note that the exact contents of code info strings are highly implementation
dependent and they may change arbitrarily across Python VMs or Python
releases.

New in version 3.2.


Changed in version 3.7: This can now handle coroutine and asynchronous generator objects.




(x, *, file=None)¶
Print detailed code object information for the supplied function, method,
source code string or code object to file (or  if file
is not specified).
This is a convenient shorthand for ,
intended for interactive exploration at the interpreter prompt.

New in version 3.2.


Changed in version 3.4: Added file parameter.




(x=None, *, file=None, depth=None)¶
Disassemble the x object.  x can denote either a module, a class, a
method, a function, a generator, an asynchronous generator, a coroutine,
a code object, a string of source code or a byte sequence of raw bytecode.
For a module, it disassembles all functions. For a class, it disassembles
all methods (including class and static methods). For a code object or
sequence of raw bytecode, it prints one line per bytecode instruction.
It also recursively disassembles nested code objects (the code of
comprehensions, generator expressions and nested functions, and the code
used for building nested classes).
Strings are first compiled to code objects with the 
built-in function before being disassembled.  If no object is provided, this
function disassembles the last traceback.
The disassembly is written as text to the supplied file argument if
provided and to  otherwise.
The maximal depth of recursion is limited by depth unless it is .
 means no recursion.

Changed in version 3.4: Added file parameter.


Changed in version 3.7: Implemented recursive disassembling and added depth parameter.


Changed in version 3.7: This can now handle coroutine and asynchronous generator objects.




(tb=None, *, file=None)¶
Disassemble the top-of-stack function of a traceback, using the last
traceback if none was passed.  The instruction causing the exception is
indicated.
The disassembly is written as text to the supplied file argument if
provided and to  otherwise.

Changed in version 3.4: Added file parameter.




(code, lasti=-1, *, file=None)¶

(code, lasti=-1, *, file=None)¶
Disassemble a code object, indicating the last instruction if lasti was
provided.  The output is divided in the following columns:

the line number, for the first instruction of each line
the current instruction, indicated as ,
a labelled instruction, indicated with ,
the address of the instruction,
the operation code name,
operation parameters, and
interpretation of the parameters in parentheses.

The parameter interpretation recognizes local and global variable names,
constant values, branch targets, and compare operators.
The disassembly is written as text to the supplied file argument if
provided and to  otherwise.

Changed in version 3.4: Added file parameter.




(x, *, first_line=None)¶
Return an iterator over the instructions in the supplied function, method,
source code string or code object.
The iterator generates a series of  named tuples giving
the details of each operation in the supplied code.
If first_line is not , it indicates the line number that should be
reported for the first source line in the disassembled code.  Otherwise, the
source line information (if any) is taken directly from the disassembled code
object.

New in version 3.4.




(code)¶
This generator function uses the  and 
attributes of the code object code to find the offsets which are starts of
lines in the source code.  They are generated as  pairs.
See Objects/lnotab_notes.txt for the  format and
how to decode it.

Changed in version 3.6: Line numbers can be decreasing. Before, they were always increasing.




(code)¶
Detect all offsets in the code object code which are jump targets, and
return a list of these offsets.



(opcode[, oparg])¶
Compute the stack effect of opcode with argument oparg.

New in version 3.4.




Python Bytecode Instructions¶
The  function and  class provide
details of bytecode instructions as  instances:


class ¶
Details for a bytecode operation


¶
numeric code for operation, corresponding to the opcode values listed
below and the bytecode values in the Opcode collections.



¶
human readable name for operation



¶
numeric argument to operation (if any), otherwise 



¶
resolved arg value (if known), otherwise same as arg



¶
human readable description of operation argument



¶
start index of operation within bytecode sequence



¶
line started by this opcode (if any), otherwise 



¶
 if other code jumps to here, otherwise 


New in version 3.4.


The Python compiler currently generates the following bytecode instructions.
General instructions


¶
Do nothing code.  Used as a placeholder by the bytecode optimizer.



¶
Removes the top-of-stack (TOS) item.



¶
Swaps the two top-most stack items.



¶
Lifts second and third stack item one position up, moves top down to position
three.



¶
Duplicates the reference on top of the stack.

New in version 3.2.




¶
Duplicates the two references on top of the stack, leaving them in the
same order.

New in version 3.2.


Unary operations
Unary operations take the top of the stack, apply the operation, and push the
result back on the stack.


¶
Implements .



¶
Implements .



¶
Implements .



¶
Implements .



¶
Implements .



¶
If  is a generator iterator or coroutine object
it is left as is.  Otherwise, implements .

New in version 3.5.


Binary operations
Binary operations remove the top of the stack (TOS) and the second top-most
stack item (TOS1) from the stack.  They perform the operation, and put the
result back on the stack.


¶
Implements .



¶
Implements .



¶
Implements .

New in version 3.5.




¶
Implements .



¶
Implements .



¶
Implements .



¶
Implements .



¶
Implements .



¶
Implements .



¶
Implements .



¶
Implements .



¶
Implements .



¶
Implements .



¶
Implements .

In-place operations
In-place operations are like binary operations, in that they remove TOS and
TOS1, and push the result back on the stack, but the operation is done in-place
when TOS1 supports it, and the resulting TOS may be (but does not have to be)
the original TOS1.


¶
Implements in-place .



¶
Implements in-place .



¶
Implements in-place .

New in version 3.5.




¶
Implements in-place .



¶
Implements in-place .



¶
Implements in-place .



¶
Implements in-place .



¶
Implements in-place .



¶
Implements in-place .



¶
Implements in-place .



¶
Implements in-place .



¶
Implements in-place .



¶
Implements in-place .



¶
Implements .



¶
Implements .

Coroutine opcodes


¶
Implements , where 
returns  if  is a coroutine object or a generator object with
the CO_ITERABLE_COROUTINE flag, or resolves
.

New in version 3.5.




¶
Implements .

New in version 3.5.


Changed in version 3.7: Returning awaitable objects from  is no longer
supported.




¶
Implements .  See 
for details about 

New in version 3.5.




¶
Resolves  and  from the object on top of the
stack.  Pushes  and result of  to the stack.

New in version 3.5.




¶
Creates a new frame object.

New in version 3.5.


Miscellaneous opcodes


¶
Implements the expression statement for the interactive mode.  TOS is removed
from the stack and printed.  In non-interactive mode, an expression statement
is terminated with .



¶
Terminates a loop due to a  statement.



(target)¶
Continues a loop due to a  statement.  target is the
address to jump to (which should be a  instruction).



(i)¶
Calls .  Used to implement set comprehensions.



(i)¶
Calls .  Used to implement list comprehensions.



(i)¶
Calls .  Used to implement dict
comprehensions.

New in version 3.1.


For all of the ,  and 
instructions, while the added value or key/value pair is popped off, the
container object remains on the stack so that it is available for further
iterations of the loop.


¶
Returns with TOS to the caller of the function.



¶
Pops TOS and yields it from a generator.



¶
Pops TOS and delegates to it as a subiterator from a generator.

New in version 3.3.




¶
Checks whether  is defined in , if not it is
set up to an empty . This opcode is only emitted if a class
or module body contains variable annotations
statically.

New in version 3.6.




¶
Loads all symbols not starting with  directly from the module TOS to
the local namespace. The module is popped after loading all names. This
opcode implements .



¶
Removes one block from the block stack.  Per frame, there is a stack of
blocks, denoting nested loops, try statements, and such.



¶
Removes one block from the block stack. The popped block must be an exception
handler block, as implicitly created when entering an except handler.  In
addition to popping extraneous values from the frame stack, the last three
popped values are used to restore the exception state.



¶
Terminates a  clause.  The interpreter recalls whether the
exception has to be re-raised, or whether the function returns, and continues
with the outer-next block.



¶
Pushes  onto the stack.  It is later called
by  to construct a class.



(delta)¶
This opcode performs several operations before a with block starts.  First,
it loads  from the context manager and pushes it onto
the stack for later use by .  Then,
 is called, and a finally block pointing to delta
is pushed.  Finally, the result of calling the enter method is pushed onto
the stack.  The next opcode will either ignore it (), or
store it in (a) variable(s) (, , or
).

New in version 3.2.




¶
Cleans up the stack when a  statement block exits.  TOS is the
context manager’s  bound method. Below TOS are 1–3 values
indicating how/why the finally clause was entered:

SECOND = 
(SECOND, THIRD) = (), retval
SECOND = ; no retval below it
(SECOND, THIRD, FOURTH) = exc_info()

In the last case,  is called, otherwise
.  Pushes SECOND and result of the call
to the stack.



¶
Pops exception type and result of ‘exit’ function call from the stack.
If the stack represents an exception, and the function call returns a
‘true’ value, this information is “zapped” and replaced with a single
 to prevent  from re-raising the
exception.  (But non-local gotos will still be resumed.)

All of the following opcodes use their arguments.


(namei)¶
Implements . namei is the index of name in the attribute
 of the code object. The compiler tries to use
 or  if possible.



(namei)¶
Implements , where namei is the index into 
attribute of the code object.



(count)¶
Unpacks TOS into count individual values, which are put onto the stack
right-to-left.



(counts)¶
Implements assignment with a starred target: Unpacks an iterable in TOS into
individual values, where the total number of values can be smaller than the
number of items in the iterable: one of the new values will be a list of all
leftover items.
The low byte of counts is the number of values before the list value, the
high byte of counts the number of values after it.  The resulting values
are put onto the stack right-to-left.



(namei)¶
Implements , where namei is the index of name in
.



(namei)¶
Implements , using namei as index into .



(namei)¶
Works as , but stores the name as a global.



(namei)¶
Works as , but deletes a global name.



(consti)¶
Pushes  onto the stack.



(namei)¶
Pushes the value associated with  onto the stack.



(count)¶
Creates a tuple consuming count items from the stack, and pushes the
resulting tuple onto the stack.



(count)¶
Works as , but creates a list.



(count)¶
Works as , but creates a set.



(count)¶
Pushes a new dictionary object onto the stack.  Pops  items
so that the dictionary holds count entries:
.

Changed in version 3.5: The dictionary is created from stack items instead of creating an
empty dictionary pre-sized to hold count items.




(count)¶
The version of  specialized for constant keys.  count
values are consumed from the stack.  The top element on the stack contains
a tuple of keys.

New in version 3.6.




(count)¶
Concatenates count strings from the stack and pushes the resulting string
onto the stack.

New in version 3.6.




(count)¶
Pops count iterables from the stack, joins them in a single tuple,
and pushes the result.  Implements iterable unpacking in tuple
displays .

New in version 3.5.




(count)¶
This is similar to ,
but is used for  call syntax. The stack item at position
 should be the corresponding callable .

New in version 3.6.




(count)¶
This is similar to , but pushes a list
instead of tuple.  Implements iterable unpacking in list
displays .

New in version 3.5.




(count)¶
This is similar to , but pushes a set
instead of tuple.  Implements iterable unpacking in set
displays .

New in version 3.5.




(count)¶
Pops count mappings from the stack, merges them into a single dictionary,
and pushes the result.  Implements dictionary unpacking in dictionary
displays .

New in version 3.5.




(count)¶
This is similar to ,
but is used for  call syntax.  The stack item at
position  should be the corresponding callable .

New in version 3.5.


Changed in version 3.6: The position of the callable is determined by adding 2 to the opcode
argument instead of encoding it in the second byte of the argument.




(namei)¶
Replaces TOS with .



(opname)¶
Performs a Boolean operation.  The operation name can be found in
.



(namei)¶
Imports the module .  TOS and TOS1 are popped and provide
the fromlist and level arguments of .  The module
object is pushed onto the stack.  The current namespace is not affected: for
a proper import statement, a subsequent  instruction
modifies the namespace.



(namei)¶
Loads the attribute  from the module found in TOS. The
resulting object is pushed onto the stack, to be subsequently stored by a
 instruction.



(delta)¶
Increments bytecode counter by delta.



(target)¶
If TOS is true, sets the bytecode counter to target.  TOS is popped.

New in version 3.1.




(target)¶
If TOS is false, sets the bytecode counter to target.  TOS is popped.

New in version 3.1.




(target)¶
If TOS is true, sets the bytecode counter to target and leaves TOS on the
stack.  Otherwise (TOS is false), TOS is popped.

New in version 3.1.




(target)¶
If TOS is false, sets the bytecode counter to target and leaves TOS on the
stack.  Otherwise (TOS is true), TOS is popped.

New in version 3.1.




(target)¶
Set bytecode counter to target.



(delta)¶
TOS is an iterator.  Call its  method.  If
this yields a new value, push it on the stack (leaving the iterator below
it).  If the iterator indicates it is exhausted TOS is popped, and the byte
code counter is incremented by delta.



(namei)¶
Loads the global named  onto the stack.



(delta)¶
Pushes a block for a loop onto the block stack.  The block spans from the
current instruction with a size of delta bytes.



(delta)¶
Pushes a try block from a try-except clause onto the block stack. delta
points to the first except block.



(delta)¶
Pushes a try block from a try-except clause onto the block stack. delta
points to the finally block.



(var_num)¶
Pushes a reference to the local  onto the stack.



(var_num)¶
Stores TOS into the local .



(var_num)¶
Deletes local .



(i)¶
Pushes a reference to the cell contained in slot i of the cell and free
variable storage.  The name of the variable is  if i is
less than the length of co_cellvars.  Otherwise it is .



(i)¶
Loads the cell contained in slot i of the cell and free variable storage.
Pushes a reference to the object the cell contains on the stack.



(i)¶
Much like  but first checks the locals dictionary before
consulting the cell.  This is used for loading free variables in class
bodies.

New in version 3.4.




(i)¶
Stores TOS into the cell contained in slot i of the cell and free variable
storage.



(i)¶
Empties the cell contained in slot i of the cell and free variable storage.
Used by the  statement.

New in version 3.2.




(argc)¶
Raises an exception. argc indicates the number of arguments to the raise
statement, ranging from 0 to 3.  The handler will find the traceback as TOS2,
the parameter as TOS1, and the exception as TOS.



(argc)¶
Calls a callable object with positional arguments.
argc indicates the number of positional arguments.
The top of the stack contains positional arguments, with the right-most
argument on top.  Below the arguments is a callable object to call.
 pops all arguments and the callable object off the stack,
calls the callable object with those arguments, and pushes the return value
returned by the callable object.

Changed in version 3.6: This opcode is used only for calls with positional arguments.




(argc)¶
Calls a callable object with positional (if any) and keyword arguments.
argc indicates the total number of positional and keyword arguments.
The top element on the stack contains a tuple of keyword argument names.
Below that are keyword arguments in the order corresponding to the tuple.
Below that are positional arguments, with the right-most parameter on
top.  Below the arguments is a callable object to call.
 pops all arguments and the callable object off the stack,
calls the callable object with those arguments, and pushes the return value
returned by the callable object.

Changed in version 3.6: Keyword arguments are packed in a tuple instead of a dictionary,
argc indicates the total number of arguments.




(flags)¶
Calls a callable object with variable set of positional and keyword
arguments.  If the lowest bit of flags is set, the top of the stack
contains a mapping object containing additional keyword arguments.
Below that is an iterable object containing positional arguments and
a callable object to call.   and
 can be used for merging multiple
mapping objects and iterables containing arguments.
Before the callable is called, the mapping object and iterable object
are each “unpacked” and their contents passed in as keyword and
positional arguments respectively.
 pops all arguments and the callable object off the stack,
calls the callable object with those arguments, and pushes the return value
returned by the callable object.

New in version 3.6.




(namei)¶
Loads a method named  from TOS object. TOS is popped and
method and TOS are pushed when interpreter can call unbound method directly.
TOS will be used as the first argument () by .
Otherwise,  and  method is pushed (method is bound method or
something else).

New in version 3.7.




(argc)¶
Calls a method.  argc is number of positional arguments.
Keyword arguments are not supported.  This opcode is designed to be used
with .  Positional arguments are on top of the stack.
Below them, two items described in  on the stack.
All of them are popped and return value is pushed.

New in version 3.7.




(argc)¶
Pushes a new function object on the stack.  From bottom to top, the consumed
stack must consist of values if the argument carries a specified flag value

 a tuple of default values for positional-only and
positional-or-keyword parameters in positional order
 a dictionary of keyword-only parameters’ default values
 an annotation dictionary
 a tuple containing cells for free variables, making a closure
the code associated with the function (at TOS1)
the qualified name of the function (at TOS)




(argc)¶
Pushes a slice object on the stack.  argc must be 2 or 3.  If it is 2,
 is pushed; if it is 3,  is
pushed. See the  built-in function for more information.



(ext)¶
Prefixes any opcode which has an argument too big to fit into the default two
bytes.  ext holds two additional bytes which, taken together with the
subsequent opcode’s argument, comprise a four-byte argument, ext being the
two most-significant bytes.



(flags)¶
Used for implementing formatted literal strings (f-strings).  Pops
an optional fmt_spec from the stack, then a required value.
flags is interpreted as follows:

: value is formatted as-is.
: call  on value before
formatting it.
: call  on value before
formatting it.
: call  on value before
formatting it.
: pop fmt_spec from the stack and use
it, else use an empty fmt_spec.

Formatting is performed using .  The
result is pushed on the stack.

New in version 3.6.




¶
This is not really an opcode.  It identifies the dividing line between
opcodes which don’t use their argument and those that do
( and , respectively).

Changed in version 3.6: Now every instruction has an argument, but opcodes 
ignore it. Before, only opcodes  had an argument.




Opcode collections¶
These collections are provided for automatic introspection of bytecode
instructions:


¶
Sequence of operation names, indexable using the bytecode.



¶
Dictionary mapping operation names to bytecodes.



¶
Sequence of all compare operation names.



¶
Sequence of bytecodes that access a constant.



¶
Sequence of bytecodes that access a free variable (note that ‘free’ in this
context refers to names in the current scope that are referenced by inner
scopes or names in outer scopes that are referenced from this scope.  It does
not include references to global or builtin scopes).



¶
Sequence of bytecodes that access an attribute by name.



¶
Sequence of bytecodes that have a relative jump target.



¶
Sequence of bytecodes that have an absolute jump target.



¶
Sequence of bytecodes that access a local variable.



¶
Sequence of bytecodes of Boolean operations.



