link:
library/asyncio-task.html#asyncio.gather

docs:


awaitable (*aws, loop=None, return_exceptions=False)¶
Run awaitable objects in the aws
sequence concurrently.
If any awaitable in aws is a coroutine, it is automatically
scheduled as a Task.
If all awaitables are completed successfully, the result is an
aggregate list of returned values.  The order of result values
corresponds to the order of awaitables in aws.
If return_exceptions is  (default), the first
raised exception is immediately propagated to the task that
awaits on .  Other awaitables in the aws sequence
won’t be cancelled and will continue to run.
If return_exceptions is , exceptions are treated the
same as successful results, and aggregated in the result list.
If  is cancelled, all submitted awaitables
(that have not completed yet) are also cancelled.
If any Task or Future from the aws sequence is cancelled, it is
treated as if it raised  – the 
call is not cancelled in this case.  This is to prevent the
cancellation of one submitted Task/Future to cause other
Tasks/Futures to be cancelled.
Example:



Changed in version 3.7: If the gather itself is cancelled, the cancellation is
propagated regardless of return_exceptions.

