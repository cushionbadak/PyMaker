link:
library/ssl.html#certificate-handling

docs:

Certificate handling¶


(cert, hostname)¶
Verify that cert (in decoded format as returned by
) matches the given hostname.  The rules
applied are those for checking the identity of HTTPS servers as outlined
in RFC 2818, RFC 5280 and RFC 6125.  In addition to HTTPS, this
function should be suitable for checking the identity of servers in
various SSL-based protocols such as FTPS, IMAPS, POPS and others.
 is raised on failure. On success, the function
returns nothing:



New in version 3.2.


Changed in version 3.3.3: The function now follows RFC 6125, section 6.4.3 and does neither
match multiple wildcards (e.g.  or ) nor
a wildcard inside an internationalized domain names (IDN) fragment.
IDN A-labels such as  are still supported,
but  no longer matches .


Changed in version 3.5: Matching of IP addresses, when present in the subjectAltName field
of the certificate, is now supported.


Changed in version 3.7: The function is no longer used to TLS connections. Hostname matching
is now performed by OpenSSL.
Allow wildcard when it is the leftmost and the only character
in that segment. Partial wildcards like  are no
longer supported.


Deprecated since version 3.7.




(cert_time)¶
Return the time in seconds since the Epoch, given the 
string representing the “notBefore” or “notAfter” date from a
certificate in  strptime format (C
locale).
Here’s an example:


“notBefore” or “notAfter” dates must use GMT (RFC 5280).

Changed in version 3.5: Interpret the input time as a time in UTC as specified by ‘GMT’
timezone in the input string. Local timezone was used
previously. Return an integer (no fractions of a second in the
input format)




(addr, ssl_version=PROTOCOL_TLS, ca_certs=None)¶
Given the address  of an SSL-protected server, as a (hostname,
port-number) pair, fetches the server’s certificate, and returns it as a
PEM-encoded string.  If  is specified, uses that version of
the SSL protocol to attempt to connect to the server.  If  is
specified, it should be a file containing a list of root certificates, the
same format as used for the same parameter in
.  The call will attempt to validate the
server certificate against that set of root certificates, and will fail
if the validation attempt fails.

Changed in version 3.3: This function is now IPv6-compatible.


Changed in version 3.5: The default ssl_version is changed from  to
 for maximum compatibility with modern servers.




(DER_cert_bytes)¶
Given a certificate as a DER-encoded blob of bytes, returns a PEM-encoded
string version of the same certificate.



(PEM_cert_string)¶
Given a certificate as an ASCII PEM string, returns a DER-encoded sequence of
bytes for that same certificate.



()¶
Returns a named tuple with paths to OpenSSL’s default cafile and capath.
The paths are the same as used by
. The return value is a
named tuple :

 - resolved path to cafile or  if the file doesn’t exist,
 - resolved path to capath or  if the directory doesn’t exist,
 - OpenSSL’s environment key that points to a cafile,
 - hard coded path to a cafile,
 - OpenSSL’s environment key that points to a capath,
 - hard coded path to a capath directory

Availability: LibreSSL ignores the environment vars
 and .

New in version 3.4.




(store_name)¶
Retrieve certificates from Windows’ system cert store. store_name may be
one of ,  or . Windows may provide additional cert
stores, too.
The function returns a list of (cert_bytes, encoding_type, trust) tuples.
The encoding_type specifies the encoding of cert_bytes. It is either
 for X.509 ASN.1 data or  for
PKCS#7 ASN.1 data. Trust specifies the purpose of the certificate as a set
of OIDS or exactly  if the certificate is trustworthy for all
purposes.
Example:


Availability: Windows.

New in version 3.4.




(store_name)¶
Retrieve CRLs from Windows’ system cert store. store_name may be
one of ,  or . Windows may provide additional cert
stores, too.
The function returns a list of (cert_bytes, encoding_type, trust) tuples.
The encoding_type specifies the encoding of cert_bytes. It is either
 for X.509 ASN.1 data or  for
PKCS#7 ASN.1 data.
Availability: Windows.

New in version 3.4.




(sock, keyfile=None, certfile=None, server_side=False, cert_reqs=CERT_NONE, ssl_version=PROTOCOL_TLS, ca_certs=None, do_handshake_on_connect=True, suppress_ragged_eofs=True, ciphers=None)¶
Takes an instance  of , and returns an instance
of , a subtype of , which wraps
the underlying socket in an SSL context.   must be a
 socket; other socket types are unsupported.
Internally, function creates a  with protocol
ssl_version and  set to cert_reqs. If
parameters keyfile, certfile, ca_certs or ciphers are set, then
the values are passed to ,
, and
.
The arguments server_side, do_handshake_on_connect, and
suppress_ragged_eofs have the same meaning as
.

Deprecated since version 3.7: Since Python 3.2 and 2.7.9, it is recommended to use the
 instead of . The
top-level function is limited and creates an insecure client socket
without server name indication or hostname matching.


