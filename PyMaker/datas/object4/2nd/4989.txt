link:
library/asyncio-llapi-index.html#low-level-api-index

docs:

Low-level API Index¶
This page lists all low-level asyncio APIs.

Obtaining the Event Loop¶







The preferred function to get the running event loop.


Get an event loop instance (current or via the policy).


Set the event loop as current via the current policy.


Create a new event loop.



Examples

Using asyncio.get_running_loop().



Event Loop Methods¶
See also the main documentation section about the
event loop methods.
Lifecycle







Run a Future/Task/awaitable until complete.


Run the event loop forever.


Stop the event loop.


Close the event loop.


Return  if the event loop is running.


Return  if the event loop is closed.

 
Close asynchronous generators.



Debugging







Enable or disable the debug mode.


Get the current debug mode.



Scheduling Callbacks







Invoke a callback soon.


A thread-safe variant of .


Invoke a callback after the given time.


Invoke a callback at the given time.



Thread/Process Pool






 
Run a CPU-bound or other blocking function in
a  executor.


Set the default executor for .



Tasks and Futures







Create a  object.


Schedule coroutine as a .


Set a factory used by  to
create .


Get the factory  uses
to create .



DNS






 
Asynchronous version of .

 
Asynchronous version of .



Networking and IPC






 
Open a TCP connection.

 
Create a TCP server.

 
Open a Unix socket connection.

 
Create a Unix socket server.

 
Wrap a  into a 
pair.

 
Open a datagram (UDP) connection.

 
Send a file over a transport.

 
Upgrade an existing connection to TLS.

 
Wrap a read end of a pipe into a  pair.

 
Wrap a write end of a pipe into a  pair.



Sockets






 
Receive data from the .

 
Receive data from the  into a buffer.

 
Send data to the .

 
Connect the .

 
Accept a  connection.

 
Send a file over the .


Start watching a file descriptor for read availability.


Stop watching a file descriptor for read availability.


Start watching a file descriptor for write availability.


Stop watching a file descriptor for write availability.



Unix Signals







Add a handler for a .


Remove a handler for a .



Subprocesses







Spawn a subprocess.


Spawn a subprocess from a shell command.



Error Handling







Call the exception handler.


Set a new exception handler.


Get the current exception handler.


The default exception handler implementation.



Examples

Using asyncio.get_event_loop() and loop.run_forever().
Using loop.call_later().
Using  to implement
an echo-client.
Using  to
connect a socket.
Using add_reader() to watch an FD for read events.
Using loop.add_signal_handler().
Using loop.subprocess_exec().



Transports¶
All transports implement the following methods:







Close the transport.


Return  if the transport is closing or is closed.


Request for information about the transport.


Set a new protocol.


Return the current protocol.



Transports that can receive data (TCP and Unix connections,
pipes, etc).  Returned from methods like
, ,
, etc:
Read Transports







Return  if the transport is receiving.


Pause receiving.


Resume receiving.



Transports that can Send data (TCP and Unix connections,
pipes, etc).  Returned from methods like
, ,
, etc:
Write Transports







Write data to the transport.


Write buffers to the transport.


Return  if the transport supports sending EOF.


Close and send EOF after flushing buffered data.


Close the transport immediately.


Return high and low water marks for write flow control.


Set new high and low water marks for write flow control.



Transports returned by :
Datagram Transports







Send data to the remote peer.


Close the transport immediately.



Low-level transport abstraction over subprocesses.
Returned by  and
:
Subprocess Transports







Return the subprocess process id.


Return the transport for the requested communication pipe
(stdin, stdout, or stderr).


Return the subprocess return code.


Kill the subprocess.


Send a signal to the subprocess.


Stop the subprocess.


Kill the subprocess and close all pipes.





Protocols¶
Protocol classes can implement the following callback methods:






 
Called when a connection is made.

 
Called when the connection is lost or closed.

 
Called when the transport’s buffer goes over the high water mark.

 
Called when the transport’s buffer drains below the low water mark.



Streaming Protocols (TCP, Unix Sockets, Pipes)






 
Called when some data is received.

 
Called when an EOF is received.



Buffered Streaming Protocols






 
Called to allocate a new receive buffer.

 
Called when the buffer was updated with the received data.

 
Called when an EOF is received.



Datagram Protocols






 
Called when a datagram is received.

 
Called when a previous send or receive operation raises an
.



Subprocess Protocols






 
Called when the child process writes data into its
stdout or stderr pipe.

 
Called when one of the pipes communicating with
the child process is closed.

 
Called when the child process has exited.





Event Loop Policies¶
Policies is a low-level mechanism to alter the behavior of
functions like .  See also
the main policies section for more
details.
Accessing Policies







Return the current process-wide policy.


Set a new process-wide policy.


Base class for policy objects.




