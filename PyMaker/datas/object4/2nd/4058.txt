link:
library/ctypes.html#pointers

docs:

Pointers¶
Pointer instances are created by calling the  function on a
 type:


Pointer instances have a  attribute which
returns the object to which the pointer points, the  object above:


Note that  does not have OOR (original object return), it constructs a
new, equivalent object each time you retrieve an attribute:


Assigning another  instance to the pointer’s contents attribute
would cause the pointer to point to the memory location where this is stored:


Pointer instances can also be indexed with integers:


Assigning to an integer index changes the pointed to value:


It is also possible to use indexes different from 0, but you must know what
you’re doing, just as in C: You can access or change arbitrary memory locations.
Generally you only use this feature if you receive a pointer from a C function,
and you know that the pointer actually points to an array instead of a single
item.
Behind the scenes, the  function does more than simply create
pointer instances, it has to create pointer types first. This is done with the
 function, which accepts any  type, and returns a
new type:


Calling the pointer type without an argument creates a  pointer.
 pointers have a  boolean value:


 checks for  when dereferencing pointers (but dereferencing
invalid non- pointers would crash Python):


