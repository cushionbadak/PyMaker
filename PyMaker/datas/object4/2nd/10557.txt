link:
library/optparse.html#standard-option-actions

docs:

Standard option actions¶
The various option actions all have slightly different requirements and effects.
Most actions have several relevant option attributes which you may specify to
guide ’s behaviour; a few have required attributes, which you
must specify for any option using that action.

 [relevant: , ,
, ]
The option must be followed by an argument, which is converted to a value
according to  and stored in .  If
 > 1, multiple arguments will be consumed from the
command line; all will be converted according to  and
stored to  as a tuple.  See the
Standard option types section.
If  is supplied (a list or tuple of strings), the type
defaults to .
If  is not supplied, it defaults to .
If  is not supplied,  derives a destination
from the first long option string (e.g.,  implies
). If there are no long option strings,  derives a
destination from the first short option string (e.g.,  implies ).
Example:


As it parses the command line


 will set



 [required: ; relevant:
]
The value  is stored in .
Example:


If  is seen,  will set



 [relevant: ]
A special case of  that stores a true value to
.

 [relevant: ]
Like , but stores a false value.
Example:



 [relevant: , ,
, ]
The option must be followed by an argument, which is appended to the list in
.  If no default value for  is
supplied, an empty list is automatically created when  first
encounters this option on the command-line.  If  > 1,
multiple arguments are consumed, and a tuple of length 
is appended to .
The defaults for  and  are the same as
for the  action.
Example:


If  is seen on the command-line,  does the equivalent
of:


If, a little later on,  is seen, it does:


The  action calls the  method on the current value of the
option.  This means that any default value specified must have an 
method.  It also means that if the default value is non-empty, the default
elements will be present in the parsed value for the option, with any values
from the command line appended after those default values:



 [required: ; relevant:
]
Like , but the value  is appended to
; as with ,  defaults to
, and an empty list is automatically created the first time the option
is encountered.

 [relevant: ]
Increment the integer stored at .  If no default value is
supplied,  is set to zero before being incremented the
first time.
Example:


The first time  is seen on the command line,  does the
equivalent of:


Every subsequent occurrence of  results in



 [required: ; relevant:
, , ,
]
Call the function specified by , which is called as


See section Option Callbacks for more detail.


Prints a complete help message for all the options in the current option
parser.  The help message is constructed from the  string passed to
OptionParser’s constructor and the  string passed to every
option.
If no  string is supplied for an option, it will still be
listed in the help message.  To omit an option entirely, use the special value
.
 automatically adds a  option to all
OptionParsers, so you do not normally need to create one.
Example:


If  sees either  or  on the command line,
it will print something like the following help message to stdout (assuming
 is ):


After printing the help message,  terminates your process with
.


Prints the version number supplied to the OptionParser to stdout and exits.
The version number is actually formatted and printed by the
 method of OptionParser.  Generally only relevant if the
 argument is supplied to the OptionParser constructor.  As with
 options, you will rarely create  options,
since  automatically adds them when needed.


