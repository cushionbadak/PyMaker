link:
library/socketserver.html#server-objects

docs:

Server Objects¶


class (server_address, RequestHandlerClass)¶
This is the superclass of all Server objects in the module.  It defines the
interface, given below, but does not implement most of the methods, which is
done in subclasses.  The two parameters are stored in the respective
 and  attributes.


()¶
Return an integer file descriptor for the socket on which the server is
listening.  This function is most commonly passed to , to
allow monitoring multiple servers in the same process.



()¶
Process a single request.  This function calls the following methods in
order: , , and
.  If the user-provided
 method of the
handler class raises an exception, the server’s  method
will be called.  If no request is received within 
seconds,  will be called and 
will return.



(poll_interval=0.5)¶
Handle requests until an explicit  request.  Poll for
shutdown every poll_interval seconds.
Ignores the  attribute.  It
also calls , which may be used by a subclass or mixin
to provide actions specific to a given service.  For example, the
 class uses  to clean up zombie
child processes.

Changed in version 3.3: Added  call to the  method.




()¶
This is called in the  loop. This method can be
overridden by subclasses or mixin classes to perform actions specific to
a given service, such as cleanup actions.

New in version 3.3.




()¶
Tell the  loop to stop and wait until it does.



()¶
Clean up the server. May be overridden.



¶
The family of protocols to which the server’s socket belongs.
Common examples are  and .



¶
The user-provided request handler class; an instance of this class is created
for each request.



¶
The address on which the server is listening.  The format of addresses varies
depending on the protocol family;
see the documentation for the  module
for details.  For Internet protocols, this is a tuple containing a string giving
the address, and an integer port number: , for example.



¶
The socket object on which the server will listen for incoming requests.

The server classes support the following class variables:


¶
Whether the server will allow the reuse of an address.  This defaults to
, and can be set in subclasses to change the policy.



¶
The size of the request queue.  If it takes a long time to process a single
request, any requests that arrive while the server is busy are placed into a
queue, up to  requests.  Once the queue is full,
further requests from clients will get a “Connection denied” error.  The default
value is usually 5, but this can be overridden by subclasses.



¶
The type of socket used by the server;  and
 are two common values.



¶
Timeout duration, measured in seconds, or  if no timeout is
desired.  If  receives no incoming requests within the
timeout period, the  method is called.

There are various server methods that can be overridden by subclasses of base
server classes like ; these methods aren’t useful to external
users of the server object.


(request, client_address)¶
Actually processes the request by instantiating  and
calling its  method.



()¶
Must accept a request from the socket, and return a 2-tuple containing the new
socket object to be used to communicate with the client, and the client’s
address.



(request, client_address)¶
This function is called if the 
method of a  instance raises
an exception.  The default action is to print the traceback to
standard error and continue handling further requests.

Changed in version 3.6: Now only called for exceptions derived from the 
class.




()¶
This function is called when the  attribute has been set to a
value other than  and the timeout period has passed with no
requests being received.  The default action for forking servers is
to collect the status of any child processes that have exited, while
in threading servers this method does nothing.



(request, client_address)¶
Calls  to create an instance of the
.  If desired, this function can create a new process
or thread to handle the request; the  and
 classes do this.



()¶
Called by the server’s constructor to activate the server.  The default behavior
for a TCP server just invokes 
on the server’s socket.  May be overridden.



()¶
Called by the server’s constructor to bind the socket to the desired address.
May be overridden.



(request, client_address)¶
Must return a Boolean value; if the value is , the request will
be processed, and if it’s , the request will be denied.  This
function can be overridden to implement access controls for a server. The
default implementation always returns .


Changed in version 3.6: Support for the context manager protocol was added.  Exiting the
context manager is equivalent to calling .


