link:
library/doctest.html#doctest.testfile

docs:


(filename, module_relative=True, name=None, package=None, globs=None, verbose=None, report=True, optionflags=0, extraglobs=None, raise_on_error=False, parser=DocTestParser(), encoding=None)¶
All arguments except filename are optional, and should be specified in keyword
form.
Test examples in the file named filename.  Return .
Optional argument module_relative specifies how the filename should be
interpreted:

If module_relative is  (the default), then filename specifies an
OS-independent module-relative path.  By default, this path is relative to the
calling module’s directory; but if the package argument is specified, then it
is relative to that package.  To ensure OS-independence, filename should use
 characters to separate path segments, and may not be an absolute path
(i.e., it may not begin with ).
If module_relative is , then filename specifies an OS-specific
path.  The path may be absolute or relative; relative paths are resolved with
respect to the current working directory.

Optional argument name gives the name of the test; by default, or if ,
 is used.
Optional argument package is a Python package or the name of a Python package
whose directory should be used as the base directory for a module-relative
filename.  If no package is specified, then the calling module’s directory is
used as the base directory for module-relative filenames.  It is an error to
specify package if module_relative is .
Optional argument globs gives a dict to be used as the globals when executing
examples.  A new shallow copy of this dict is created for the doctest, so its
examples start with a clean slate. By default, or if , a new empty dict
is used.
Optional argument extraglobs gives a dict merged into the globals used to
execute examples.  This works like :  if globs and
extraglobs have a common key, the associated value in extraglobs appears in
the combined dict.  By default, or if , no extra globals are used.  This
is an advanced feature that allows parameterization of doctests.  For example, a
doctest can be written for a base class, using a generic name for the class,
then reused to test any number of subclasses by passing an extraglobs dict
mapping the generic name to the subclass to be tested.
Optional argument verbose prints lots of stuff if true, and prints only
failures if false; by default, or if , it’s true if and only if 
is in .
Optional argument report prints a summary at the end when true, else prints
nothing at the end.  In verbose mode, the summary is detailed, else the summary
is very brief (in fact, empty if all tests passed).
Optional argument optionflags (default value 0) takes the
bitwise OR of option flags.
See section Option Flags.
Optional argument raise_on_error defaults to false.  If true, an exception is
raised upon the first failure or unexpected exception in an example.  This
allows failures to be post-mortem debugged. Default behavior is to continue
running examples.
Optional argument parser specifies a  (or subclass) that
should be used to extract tests from the files.  It defaults to a normal parser
(i.e., ).
Optional argument encoding specifies an encoding that should be used to
convert the file to unicode.
