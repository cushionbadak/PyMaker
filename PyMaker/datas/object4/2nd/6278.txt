link:
library/xml.dom.minidom.html

docs:


 — Minimal DOM implementation¶
Source code: Lib/xml/dom/minidom.py

 is a minimal implementation of the Document Object
Model interface, with an API similar to that in other languages.  It is intended
to be simpler than the full DOM and also significantly smaller.  Users who are
not already proficient with the DOM should consider using the
 module for their XML processing instead.

Warning
The  module is not secure against
maliciously constructed data.  If you need to parse untrusted or
unauthenticated data see XML vulnerabilities.

DOM applications typically start by parsing some XML into a DOM.  With
, this is done through the parse functions:


The  function can take either a filename or an open file object.


(filename_or_file, parser=None, bufsize=None)¶
Return a  from the given input. filename_or_file may be
either a file name, or a file-like object. parser, if given, must be a SAX2
parser object. This function will change the document handler of the parser and
activate namespace support; other parser configuration (like setting an entity
resolver) must have been done in advance.

If you have XML in a string, you can use the  function
instead:


(string, parser=None)¶
Return a  that represents the string. This method creates an
 object for the string and passes that on to .

Both functions return a  object representing the content of the
document.
What the  and  functions do is connect an XML
parser with a “DOM builder” that can accept parse events from any SAX parser and
convert them into a DOM tree.  The name of the functions are perhaps misleading,
but are easy to grasp when learning the interfaces.  The parsing of the document
will be completed before these functions return; it’s simply that these
functions do not provide a parser implementation themselves.
You can also create a  by calling a method on a “DOM
Implementation” object.  You can get this object either by calling the
 function in the  package or the
 module.  Once you have a , you
can add child nodes to it to populate the DOM:


Once you have a DOM document object, you can access the parts of your XML
document through its properties and methods.  These properties are defined in
the DOM specification.  The main property of the document object is the
 property.  It gives you the main element in the XML
document: the one that holds all others.  Here is an example program:


When you are finished with a DOM tree, you may optionally call the
 method to encourage early cleanup of the now-unneeded
objects.   is an -specific
extension to the DOM API that renders the node and its descendants are
essentially useless.  Otherwise, Python’s garbage collector will
eventually take care of the objects in the tree.

See also

Document Object Model (DOM) Level 1 Specification
The W3C recommendation for the DOM supported by .



DOM Objects¶
The definition of the DOM API for Python is given as part of the 
module documentation.  This section lists the differences between the API and
.


()¶
Break internal references within the DOM so that it will be garbage collected on
versions of Python without cyclic GC.  Even when cyclic GC is available, using
this can make large amounts of memory available sooner, so calling this on DOM
objects as soon as they are no longer needed is good practice.  This only needs
to be called on the  object, but may be called on child nodes
to discard children of that node.
You can avoid calling this method explicitly by using the 
statement. The following code will automatically unlink dom when the
 block is exited:





(writer, indent="", addindent="", newl="")¶
Write XML to the writer object.  The writer should have a  method
which matches that of the file object interface.  The indent parameter is the
indentation of the current node.  The addindent parameter is the incremental
indentation to use for subnodes of the current one.  The newl parameter
specifies the string to use to terminate newlines.
For the  node, an additional keyword argument encoding can
be used to specify the encoding field of the XML header.



(encoding=None)¶
Return a string or byte string containing the XML represented by
the DOM node.
With an explicit encoding [1] argument, the result is a byte
string in the specified encoding.
With no encoding argument, the result is a Unicode string, and the
XML declaration in the resulting string does not specify an
encoding. Encoding this string in an encoding other than UTF-8 is
likely incorrect, since UTF-8 is the default encoding of XML.



(indent="\t", newl="\n", encoding=None)¶
Return a pretty-printed version of the document. indent specifies the
indentation string and defaults to a tabulator; newl specifies the string
emitted at the end of each line and defaults to .
The encoding argument behaves like the corresponding argument of
.



DOM Example¶
This example program is a fairly realistic example of a simple program. In this
particular case, we do not take much advantage of the flexibility of the DOM.




minidom and the DOM standard¶
The  module is essentially a DOM 1.0-compatible DOM with
some DOM 2 features (primarily namespace features).
Usage of the DOM interface in Python is straight-forward.  The following mapping
rules apply:

Interfaces are accessed through instance objects. Applications should not
instantiate the classes themselves; they should use the creator functions
available on the  object. Derived interfaces support all
operations (and attributes) from the base interfaces, plus any new operations.
Operations are used as methods. Since the DOM uses only 
parameters, the arguments are passed in normal order (from left to right).
There are no optional arguments.  operations return .
IDL attributes map to instance attributes. For compatibility with the OMG IDL
language mapping for Python, an attribute  can also be accessed through
accessor methods  and .  
attributes must not be changed; this is not enforced at runtime.
The types , , , and
 all map to Python integer objects.
The type  maps to Python strings.  supports
either bytes or strings, but will normally produce strings.
Values of type  may also be  where allowed to have the IDL
 value by the DOM specification from the W3C.
 declarations map to variables in their respective scope (e.g.
); they must not be changed.
 is currently not supported in .
Instead,  uses standard Python exceptions such as
 and .
 objects are implemented using Python’s built-in list type.
These objects provide the interface defined in the DOM specification, but with
earlier versions of Python they do not support the official API.  They are,
however, much more “Pythonic” than the interface defined in the W3C
recommendations.

The following interfaces have no implementation in :




Most of these reflect information in the XML document that is not of general
utility to most DOM users.
Footnotes



[1]The encoding name included in the XML output should conform to
the appropriate standards. For example, “UTF-8” is valid, but
“UTF8” is not valid in an XML document’s declaration, even though
Python accepts it as an encoding name.
See https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl
and https://www.iana.org/assignments/character-sets/character-sets.xhtml.




