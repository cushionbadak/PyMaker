link:
library/stdtypes.html#bytes-and-bytearray-operations

docs:

Bytes and Bytearray Operations¶
Both bytes and bytearray objects support the common
sequence operations. They interoperate not just with operands of the same
type, but with any bytes-like object. Due to this flexibility, they can be
freely mixed in operations without causing errors. However, the return type
of the result may depend on the order of operands.

Note
The methods on bytes and bytearray objects don’t accept strings as their
arguments, just as the methods on strings don’t accept bytes as their
arguments.  For example, you have to write:


and:



Some bytes and bytearray operations assume the use of ASCII compatible
binary formats, and hence should be avoided when working with arbitrary
binary data. These restrictions are covered below.

Note
Using these ASCII based operations to manipulate binary data that is not
stored in an ASCII based format may lead to data corruption.

The following methods on bytes and bytearray objects can be used with
arbitrary binary data.


(sub[, start[, end]])¶

(sub[, start[, end]])¶
Return the number of non-overlapping occurrences of subsequence sub in
the range [start, end].  Optional arguments start and end are
interpreted as in slice notation.
The subsequence to search for may be any bytes-like object or an
integer in the range 0 to 255.

Changed in version 3.3: Also accept an integer in the range 0 to 255 as the subsequence.




(encoding="utf-8", errors="strict")¶

(encoding="utf-8", errors="strict")¶
Return a string decoded from the given bytes.  Default encoding is
. errors may be given to set a different
error handling scheme.  The default for errors is , meaning
that encoding errors raise a .  Other possible values are
,  and any other name registered via
, see section Error Handlers. For a
list of possible encodings, see section Standard Encodings.

Note
Passing the encoding argument to  allows decoding any
bytes-like object directly, without needing to make a temporary
bytes or bytearray object.


Changed in version 3.1: Added support for keyword arguments.




(suffix[, start[, end]])¶

(suffix[, start[, end]])¶
Return  if the binary data ends with the specified suffix,
otherwise return .  suffix can also be a tuple of suffixes to
look for.  With optional start, test beginning at that position.  With
optional end, stop comparing at that position.
The suffix(es) to search for may be any bytes-like object.



(sub[, start[, end]])¶

(sub[, start[, end]])¶
Return the lowest index in the data where the subsequence sub is found,
such that sub is contained in the slice .  Optional
arguments start and end are interpreted as in slice notation.  Return
 if sub is not found.
The subsequence to search for may be any bytes-like object or an
integer in the range 0 to 255.

Note
The  method should be used only if you need to know the
position of sub.  To check if sub is a substring or not, use the
 operator:




Changed in version 3.3: Also accept an integer in the range 0 to 255 as the subsequence.




(sub[, start[, end]])¶

(sub[, start[, end]])¶
Like , but raise  when the
subsequence is not found.
The subsequence to search for may be any bytes-like object or an
integer in the range 0 to 255.

Changed in version 3.3: Also accept an integer in the range 0 to 255 as the subsequence.




(iterable)¶

(iterable)¶
Return a bytes or bytearray object which is the concatenation of the
binary data sequences in iterable.  A  will be raised
if there are any values in iterable that are not bytes-like
objects, including  objects.  The
separator between elements is the contents of the bytes or
bytearray object providing this method.



static (from, to)¶

static (from, to)¶
This static method returns a translation table usable for
 that will map each character in from into the
character at the same position in to; from and to must both be
bytes-like objects and have the same length.

New in version 3.1.




(sep)¶

(sep)¶
Split the sequence at the first occurrence of sep, and return a 3-tuple
containing the part before the separator, the separator itself or its
bytearray copy, and the part after the separator.
If the separator is not found, return a 3-tuple
containing a copy of the original sequence, followed by two empty bytes or
bytearray objects.
The separator to search for may be any bytes-like object.



(old, new[, count])¶

(old, new[, count])¶
Return a copy of the sequence with all occurrences of subsequence old
replaced by new.  If the optional argument count is given, only the
first count occurrences are replaced.
The subsequence to search for and its replacement may be any
bytes-like object.

Note
The bytearray version of this method does not operate in place - it
always produces a new object, even if no changes were made.




(sub[, start[, end]])¶

(sub[, start[, end]])¶
Return the highest index in the sequence where the subsequence sub is
found, such that sub is contained within .  Optional
arguments start and end are interpreted as in slice notation. Return
 on failure.
The subsequence to search for may be any bytes-like object or an
integer in the range 0 to 255.

Changed in version 3.3: Also accept an integer in the range 0 to 255 as the subsequence.




(sub[, start[, end]])¶

(sub[, start[, end]])¶
Like  but raises  when the
subsequence sub is not found.
The subsequence to search for may be any bytes-like object or an
integer in the range 0 to 255.

Changed in version 3.3: Also accept an integer in the range 0 to 255 as the subsequence.




(sep)¶

(sep)¶
Split the sequence at the last occurrence of sep, and return a 3-tuple
containing the part before the separator, the separator itself or its
bytearray copy, and the part after the separator.
If the separator is not found, return a 3-tuple
containing two empty bytes or bytearray objects, followed by a copy of the
original sequence.
The separator to search for may be any bytes-like object.



(prefix[, start[, end]])¶

(prefix[, start[, end]])¶
Return  if the binary data starts with the specified prefix,
otherwise return .  prefix can also be a tuple of prefixes to
look for.  With optional start, test beginning at that position.  With
optional end, stop comparing at that position.
The prefix(es) to search for may be any bytes-like object.



(table, delete=b'')¶

(table, delete=b'')¶
Return a copy of the bytes or bytearray object where all bytes occurring in
the optional argument delete are removed, and the remaining bytes have
been mapped through the given translation table, which must be a bytes
object of length 256.
You can use the  method to create a translation
table.
Set the table argument to  for translations that only delete
characters:



Changed in version 3.6: delete is now supported as a keyword argument.


The following methods on bytes and bytearray objects have default behaviours
that assume the use of ASCII compatible binary formats, but can still be used
with arbitrary binary data by passing appropriate arguments. Note that all of
the bytearray methods in this section do not operate in place, and instead
produce new objects.


(width[, fillbyte])¶

(width[, fillbyte])¶
Return a copy of the object centered in a sequence of length width.
Padding is done using the specified fillbyte (default is an ASCII
space). For  objects, the original sequence is returned if
width is less than or equal to .

Note
The bytearray version of this method does not operate in place -
it always produces a new object, even if no changes were made.




(width[, fillbyte])¶

(width[, fillbyte])¶
Return a copy of the object left justified in a sequence of length width.
Padding is done using the specified fillbyte (default is an ASCII
space). For  objects, the original sequence is returned if
width is less than or equal to .

Note
The bytearray version of this method does not operate in place -
it always produces a new object, even if no changes were made.




([chars])¶

([chars])¶
Return a copy of the sequence with specified leading bytes removed.  The
chars argument is a binary sequence specifying the set of byte values to
be removed - the name refers to the fact this method is usually used with
ASCII characters.  If omitted or , the chars argument defaults
to removing ASCII whitespace.  The chars argument is not a prefix;
rather, all combinations of its values are stripped:


The binary sequence of byte values to remove may be any
bytes-like object.

Note
The bytearray version of this method does not operate in place -
it always produces a new object, even if no changes were made.




(width[, fillbyte])¶

(width[, fillbyte])¶
Return a copy of the object right justified in a sequence of length width.
Padding is done using the specified fillbyte (default is an ASCII
space). For  objects, the original sequence is returned if
width is less than or equal to .

Note
The bytearray version of this method does not operate in place -
it always produces a new object, even if no changes were made.




(sep=None, maxsplit=-1)¶

(sep=None, maxsplit=-1)¶
Split the binary sequence into subsequences of the same type, using sep
as the delimiter string. If maxsplit is given, at most maxsplit splits
are done, the rightmost ones.  If sep is not specified or ,
any subsequence consisting solely of ASCII whitespace is a separator.
Except for splitting from the right,  behaves like
 which is described in detail below.



([chars])¶

([chars])¶
Return a copy of the sequence with specified trailing bytes removed.  The
chars argument is a binary sequence specifying the set of byte values to
be removed - the name refers to the fact this method is usually used with
ASCII characters.  If omitted or , the chars argument defaults to
removing ASCII whitespace.  The chars argument is not a suffix; rather,
all combinations of its values are stripped:


The binary sequence of byte values to remove may be any
bytes-like object.

Note
The bytearray version of this method does not operate in place -
it always produces a new object, even if no changes were made.




(sep=None, maxsplit=-1)¶

(sep=None, maxsplit=-1)¶
Split the binary sequence into subsequences of the same type, using sep
as the delimiter string. If maxsplit is given and non-negative, at most
maxsplit splits are done (thus, the list will have at most 
elements).  If maxsplit is not specified or is , then there is no
limit on the number of splits (all possible splits are made).
If sep is given, consecutive delimiters are not grouped together and are
deemed to delimit empty subsequences (for example, 
returns ).  The sep argument may consist of a
multibyte sequence (for example,  returns
). Splitting an empty sequence with a specified
separator returns  or  depending on the type
of object being split.  The sep argument may be any
bytes-like object.
For example:


If sep is not specified or is , a different splitting algorithm
is applied: runs of consecutive ASCII whitespace are regarded as a single
separator, and the result will contain no empty strings at the start or
end if the sequence has leading or trailing whitespace.  Consequently,
splitting an empty sequence or a sequence consisting solely of ASCII
whitespace without a specified separator returns .
For example:





([chars])¶

([chars])¶
Return a copy of the sequence with specified leading and trailing bytes
removed. The chars argument is a binary sequence specifying the set of
byte values to be removed - the name refers to the fact this method is
usually used with ASCII characters.  If omitted or , the chars
argument defaults to removing ASCII whitespace. The chars argument is
not a prefix or suffix; rather, all combinations of its values are
stripped:


The binary sequence of byte values to remove may be any
bytes-like object.

Note
The bytearray version of this method does not operate in place -
it always produces a new object, even if no changes were made.


The following methods on bytes and bytearray objects assume the use of ASCII
compatible binary formats and should not be applied to arbitrary binary data.
Note that all of the bytearray methods in this section do not operate in
place, and instead produce new objects.


()¶

()¶
Return a copy of the sequence with each byte interpreted as an ASCII
character, and the first byte capitalized and the rest lowercased.
Non-ASCII byte values are passed through unchanged.

Note
The bytearray version of this method does not operate in place - it
always produces a new object, even if no changes were made.




(tabsize=8)¶

(tabsize=8)¶
Return a copy of the sequence where all ASCII tab characters are replaced
by one or more ASCII spaces, depending on the current column and the given
tab size.  Tab positions occur every tabsize bytes (default is 8,
giving tab positions at columns 0, 8, 16 and so on).  To expand the
sequence, the current column is set to zero and the sequence is examined
byte by byte.  If the byte is an ASCII tab character (), one or
more space characters are inserted in the result until the current column
is equal to the next tab position. (The tab character itself is not
copied.)  If the current byte is an ASCII newline () or
carriage return (), it is copied and the current column is reset
to zero.  Any other byte value is copied unchanged and the current column
is incremented by one regardless of how the byte value is represented when
printed:



Note
The bytearray version of this method does not operate in place - it
always produces a new object, even if no changes were made.




()¶

()¶
Return true if all bytes in the sequence are alphabetical ASCII characters
or ASCII decimal digits and the sequence is not empty, false otherwise.
Alphabetic ASCII characters are those byte values in the sequence
. ASCII decimal
digits are those byte values in the sequence .
For example:





()¶

()¶
Return true if all bytes in the sequence are alphabetic ASCII characters
and the sequence is not empty, false otherwise.  Alphabetic ASCII
characters are those byte values in the sequence
.
For example:





()¶

()¶
Return true if the sequence is empty or all bytes in the sequence are ASCII,
false otherwise.
ASCII bytes are in the range 0-0x7F.

New in version 3.7.




()¶

()¶
Return true if all bytes in the sequence are ASCII decimal digits
and the sequence is not empty, false otherwise. ASCII decimal digits are
those byte values in the sequence .
For example:





()¶

()¶
Return true if there is at least one lowercase ASCII character
in the sequence and no uppercase ASCII characters, false otherwise.
For example:


Lowercase ASCII characters are those byte values in the sequence
. Uppercase ASCII characters
are those byte values in the sequence .



()¶

()¶
Return true if all bytes in the sequence are ASCII whitespace and the
sequence is not empty, false otherwise.  ASCII whitespace characters are
those byte values in the sequence  (space, tab, newline,
carriage return, vertical tab, form feed).



()¶

()¶
Return true if the sequence is ASCII titlecase and the sequence is not
empty, false otherwise. See  for more details on the
definition of “titlecase”.
For example:





()¶

()¶
Return true if there is at least one uppercase alphabetic ASCII character
in the sequence and no lowercase ASCII characters, false otherwise.
For example:


Lowercase ASCII characters are those byte values in the sequence
. Uppercase ASCII characters
are those byte values in the sequence .



()¶

()¶
Return a copy of the sequence with all the uppercase ASCII characters
converted to their corresponding lowercase counterpart.
For example:


Lowercase ASCII characters are those byte values in the sequence
. Uppercase ASCII characters
are those byte values in the sequence .

Note
The bytearray version of this method does not operate in place - it
always produces a new object, even if no changes were made.




(keepends=False)¶

(keepends=False)¶
Return a list of the lines in the binary sequence, breaking at ASCII
line boundaries. This method uses the universal newlines approach
to splitting lines. Line breaks are not included in the resulting list
unless keepends is given and true.
For example:


Unlike  when a delimiter string sep is given, this
method returns an empty list for the empty string, and a terminal line
break does not result in an extra line:





()¶

()¶
Return a copy of the sequence with all the lowercase ASCII characters
converted to their corresponding uppercase counterpart and vice-versa.
For example:


Lowercase ASCII characters are those byte values in the sequence
. Uppercase ASCII characters
are those byte values in the sequence .
Unlike , it is always the case that
 for the binary versions. Case
conversions are symmetrical in ASCII, even though that is not generally
true for arbitrary Unicode code points.

Note
The bytearray version of this method does not operate in place - it
always produces a new object, even if no changes were made.




()¶

()¶
Return a titlecased version of the binary sequence where words start with
an uppercase ASCII character and the remaining characters are lowercase.
Uncased byte values are left unmodified.
For example:


Lowercase ASCII characters are those byte values in the sequence
. Uppercase ASCII characters
are those byte values in the sequence .
All other byte values are uncased.
The algorithm uses a simple language-independent definition of a word as
groups of consecutive letters.  The definition works in many contexts but
it means that apostrophes in contractions and possessives form word
boundaries, which may not be the desired result:


A workaround for apostrophes can be constructed using regular expressions:



Note
The bytearray version of this method does not operate in place - it
always produces a new object, even if no changes were made.




()¶

()¶
Return a copy of the sequence with all the lowercase ASCII characters
converted to their corresponding uppercase counterpart.
For example:


Lowercase ASCII characters are those byte values in the sequence
. Uppercase ASCII characters
are those byte values in the sequence .

Note
The bytearray version of this method does not operate in place - it
always produces a new object, even if no changes were made.




(width)¶

(width)¶
Return a copy of the sequence left filled with ASCII  digits to
make a sequence of length width. A leading sign prefix (/
) is handled by inserting the padding after the sign character
rather than before. For  objects, the original sequence is
returned if width is less than or equal to .
For example:



Note
The bytearray version of this method does not operate in place - it
always produces a new object, even if no changes were made.


