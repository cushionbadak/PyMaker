link:
library/xml.sax.reader.html#module-xml.sax.xmlreader

docs:

 — Interface for XML parsers¶
Source code: Lib/xml/sax/xmlreader.py

SAX parsers implement the  interface. They are implemented in
a Python module, which must provide a function . This
function is invoked by   with no arguments to create
a new  parser object.


class ¶
Base class which can be inherited by SAX parsers.



class ¶
In some cases, it is desirable not to parse an input source at once, but to feed
chunks of the document as they get available. Note that the reader will normally
not read the entire file, but read it in chunks as well; still 
won’t return until the entire document is processed. So these interfaces should
be used if the blocking behaviour of  is not desirable.
When the parser is instantiated it is ready to begin accepting data from the
feed method immediately. After parsing has been finished with a call to close
the reset method must be called to make the parser ready to accept new data,
either from feed or using the parse method.
Note that these methods must not be called during parsing, that is, after
parse has been called and before it returns.
By default, the class also implements the parse method of the XMLReader
interface using the feed, close and reset methods of the IncrementalParser
interface as a convenience to SAX 2.0 driver writers.



class ¶
Interface for associating a SAX event with a document location. A locator object
will return valid results only during calls to DocumentHandler methods; at any
other time, the results are unpredictable. If information is not available,
methods may return .



class (system_id=None)¶
Encapsulation of the information needed by the  to read
entities.
This class may include information about the public identifier, system
identifier, byte stream (possibly with character encoding information) and/or
the character stream of an entity.
Applications will create objects of this class for use in the
 method and for returning from
EntityResolver.resolveEntity.
An  belongs to the application, the  is
not allowed to modify  objects passed to it from the
application, although it may make copies and modify those.



class (attrs)¶
This is an implementation of the  interface (see section
The Attributes Interface).  This is a dictionary-like object which
represents the element attributes in a  call. In addition
to the most useful dictionary operations, it supports a number of other
methods as described by the interface. Objects of this class should be
instantiated by readers; attrs must be a dictionary-like object containing
a mapping from attribute names to attribute values.



class (attrs, qnames)¶
Namespace-aware variant of , which will be passed to
. It is derived from , but
understands attribute names as two-tuples of namespaceURI and
localname. In addition, it provides a number of methods expecting qualified
names as they appear in the original document.  This class implements the
 interface (see section The AttributesNS Interface).


XMLReader Objects¶
The  interface supports the following methods:


(source)¶
Process an input source, producing SAX events. The source object can be a
system identifier (a string identifying the input source – typically a file
name or a URL), a file-like object, or an  object. When
 returns, the input is completely processed, and the parser object
can be discarded or reset.

Changed in version 3.5: Added support of character streams.




()¶
Return the current .



(handler)¶
Set the current .  If no
 is set, content events will be
discarded.



()¶
Return the current .



(handler)¶
Set the current .  If no
 is set, DTD
events will be discarded.



()¶
Return the current .



(handler)¶
Set the current .  If no
 is set,
attempts to resolve an external entity will result in opening the system
identifier for the entity, and fail if it is not available.



()¶
Return the current .



(handler)¶
Set the current error handler.  If no 
is set, errors will be raised as exceptions, and warnings will be printed.



(locale)¶
Allow an application to set the locale for errors and warnings.
SAX parsers are not required to provide localization for errors and warnings; if
they cannot support the requested locale, however, they must raise a SAX
exception.  Applications may request a locale change in the middle of a parse.



(featurename)¶
Return the current setting for feature featurename.  If the feature is not
recognized,  is raised. The well-known
featurenames are listed in the module .



(featurename, value)¶
Set the featurename to value. If the feature is not recognized,
 is raised. If the feature or its setting is not
supported by the parser, SAXNotSupportedException is raised.



(propertyname)¶
Return the current setting for property propertyname. If the property is not
recognized, a  is raised. The well-known
propertynames are listed in the module .



(propertyname, value)¶
Set the propertyname to value. If the property is not recognized,
 is raised. If the property or its setting is
not supported by the parser, SAXNotSupportedException is raised.



IncrementalParser Objects¶
Instances of  offer the following additional methods:


(data)¶
Process a chunk of data.



()¶
Assume the end of the document. That will check well-formedness conditions that
can be checked only at the end, invoke handlers, and may clean up resources
allocated during parsing.



()¶
This method is called after close has been called to reset the parser so that it
is ready to parse new documents. The results of calling parse or feed after
close without calling reset are undefined.



Locator Objects¶
Instances of  provide these methods:


()¶
Return the column number where the current event begins.



()¶
Return the line number where the current event begins.



()¶
Return the public identifier for the current event.



()¶
Return the system identifier for the current event.



InputSource Objects¶


(id)¶
Sets the public identifier of this .



()¶
Returns the public identifier of this .



(id)¶
Sets the system identifier of this .



()¶
Returns the system identifier of this .



(encoding)¶
Sets the character encoding of this .
The encoding must be a string acceptable for an XML encoding declaration (see
section 4.3.3 of the XML recommendation).
The encoding attribute of the  is ignored if the
 also contains a character stream.



()¶
Get the character encoding of this InputSource.



(bytefile)¶
Set the byte stream (a binary file) for this input source.
The SAX parser will ignore this if there is also a character stream specified,
but it will use a byte stream in preference to opening a URI connection itself.
If the application knows the character encoding of the byte stream, it should
set it with the setEncoding method.



()¶
Get the byte stream for this input source.
The getEncoding method will return the character encoding for this byte stream,
or  if unknown.



(charfile)¶
Set the character stream (a text file) for this input source.
If there is a character stream specified, the SAX parser will ignore any byte
stream and will not attempt to open a URI connection to the system identifier.



()¶
Get the character stream for this input source.



The  Interface¶
 objects implement a portion of the mapping protocol, including the methods ,
, ,
, ,
and .  The following methods
are also provided:


()¶
Return the number of attributes.



()¶
Return the names of the attributes.



(name)¶
Returns the type of the attribute name, which is normally .



(name)¶
Return the value of attribute name.



The  Interface¶
This interface is a subtype of the  interface (see section
The Attributes Interface).  All methods supported by that interface are also
available on  objects.
The following methods are also available:


(name)¶
Return the value for a qualified name.



(name)¶
Return the  pair for a qualified name.



(name)¶
Return the qualified name for a  pair.



()¶
Return the qualified names of all attributes.


