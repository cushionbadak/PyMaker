link:
library/json.html#json.JSONDecoder

docs:


class (*, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)¶
Simple JSON decoder.
Performs the following translations in decoding by default:






JSON
Python



object
dict

array
list

string
str

number (int)
int

number (real)
float

true
True

false
False

null
None



It also understands , , and  as their
corresponding  values, which is outside the JSON spec.
object_hook, if specified, will be called with the result of every JSON
object decoded and its return value will be used in place of the given
.  This can be used to provide custom deserializations (e.g. to
support JSON-RPC class hinting).
object_pairs_hook, if specified will be called with the result of every
JSON object decoded with an ordered list of pairs.  The return value of
object_pairs_hook will be used instead of the .  This
feature can be used to implement custom decoders.  If object_hook is also
defined, the object_pairs_hook takes priority.

Changed in version 3.1: Added support for object_pairs_hook.

parse_float, if specified, will be called with the string of every JSON
float to be decoded.  By default, this is equivalent to .
This can be used to use another datatype or parser for JSON floats
(e.g. ).
parse_int, if specified, will be called with the string of every JSON int
to be decoded.  By default, this is equivalent to .  This can
be used to use another datatype or parser for JSON integers
(e.g. ).
parse_constant, if specified, will be called with one of the following
strings: , , .
This can be used to raise an exception if invalid JSON numbers
are encountered.
If strict is false ( is the default), then control characters
will be allowed inside strings.  Control characters in this context are
those with character codes in the 0–31 range, including  (tab),
,  and .
If the data being deserialized is not a valid JSON document, a
 will be raised.

Changed in version 3.6: All parameters are now keyword-only.



(s)¶
Return the Python representation of s (a  instance
containing a JSON document).
 will be raised if the given JSON document is not
valid.



(s)¶
Decode a JSON document from s (a  beginning with a
JSON document) and return a 2-tuple of the Python representation
and the index in s where the document ended.
This can be used to decode a JSON document from a string that may have
extraneous data at the end.

