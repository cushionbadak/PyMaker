link:
library/concurrent.futures.html#executor-objects

docs:

Executor Objects¶


class ¶
An abstract class that provides methods to execute calls asynchronously.  It
should not be used directly, but through its concrete subclasses.



(fn, *args, **kwargs)¶
Schedules the callable, fn, to be executed as 
and returns a  object representing the execution of the
callable.





(func, *iterables, timeout=None, chunksize=1)¶
Similar to  except:

the iterables are collected immediately rather than lazily;
func is executed asynchronously and several calls to
func may be made concurrently.

The returned iterator raises a 
if  is called and the result isn’t available
after timeout seconds from the original call to .
timeout can be an int or a float.  If timeout is not specified or
, there is no limit to the wait time.
If a func call raises an exception, then that exception will be
raised when its value is retrieved from the iterator.
When using , this method chops iterables
into a number of chunks which it submits to the pool as separate
tasks.  The (approximate) size of these chunks can be specified by
setting chunksize to a positive integer.  For very long iterables,
using a large value for chunksize can significantly improve
performance compared to the default size of 1.  With
, chunksize has no effect.

Changed in version 3.5: Added the chunksize argument.




(wait=True)¶
Signal the executor that it should free any resources that it is using
when the currently pending futures are done executing.  Calls to
 and  made after shutdown will
raise .
If wait is  then this method will not return until all the
pending futures are done executing and the resources associated with the
executor have been freed.  If wait is  then this method will
return immediately and the resources associated with the executor will be
freed when all pending futures are done executing.  Regardless of the
value of wait, the entire Python program will not exit until all
pending futures are done executing.
You can avoid having to call this method explicitly if you use the
 statement, which will shutdown the 
(waiting as if  were called with wait set to
):





