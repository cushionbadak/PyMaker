link:
library/logging.handlers.html#logging.handlers.QueueListener

docs:


class (queue, *handlers, respect_handler_level=False)¶
Returns a new instance of the  class. The instance is
initialized with the queue to send messages to and a list of handlers which
will handle entries placed on the queue. The queue can be any queue-like
object; it’s passed as-is to the  method, which needs
to know how to get messages from it. If  is ,
a handler’s level is respected (compared with the level for the message) when
deciding whether to pass messages to that handler; otherwise, the behaviour
is as in previous Python versions - to always pass each message to each
handler.

Changed in version 3.5: The  argument was added.



(block)¶
Dequeues a record and return it, optionally blocking.
The base implementation uses . You may want to override this
method if you want to use timeouts or work with custom queue
implementations.



(record)¶
Prepare a record for handling.
This implementation just returns the passed-in record. You may want to
override this method if you need to do any custom marshalling or
manipulation of the record before passing it to the handlers.



(record)¶
Handle a record.
This just loops through the handlers offering them the record
to handle. The actual object passed to the handlers is that which
is returned from .



()¶
Starts the listener.
This starts up a background thread to monitor the queue for
LogRecords to process.



()¶
Stops the listener.
This asks the thread to terminate, and then waits for it to do so.
Note that if you don’t call this before your application exits, there
may be some records still left on the queue, which won’t be processed.



()¶
Writes a sentinel to the queue to tell the listener to quit. This
implementation uses .  You may want to override this
method if you want to use timeouts or work with custom queue
implementations.

New in version 3.3.


