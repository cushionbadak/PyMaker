link:
library/cmath.html

docs:


 — Mathematical functions for complex numbers¶

This module provides access to mathematical functions for complex numbers.  The
functions in this module accept integers, floating-point numbers or complex
numbers as arguments. They will also accept any Python object that has either a
 or a  method: these methods are used to
convert the object to a complex or floating-point number, respectively, and
the function is then applied to the result of the conversion.

Note
On platforms with hardware and system-level support for signed
zeros, functions involving branch cuts are continuous on both
sides of the branch cut: the sign of the zero distinguishes one
side of the branch cut from the other.  On platforms that do not
support signed zeros the continuity is as specified below.


Conversions to and from polar coordinates¶
A Python complex number  is stored internally using rectangular
or Cartesian coordinates.  It is completely determined by its real
part  and its imaginary part .  In other
words:


Polar coordinates give an alternative way to represent a complex
number.  In polar coordinates, a complex number z is defined by the
modulus r and the phase angle phi. The modulus r is the distance
from z to the origin, while the phase phi is the counterclockwise
angle, measured in radians, from the positive x-axis to the line
segment that joins the origin to z.
The following functions can be used to convert from the native
rectangular coordinates to polar coordinates and back.


(x)¶
Return the phase of x (also known as the argument of x), as a
float.   is equivalent to .  The result lies in the range [-π, π], and the branch
cut for this operation lies along the negative real axis,
continuous from above.  On systems with support for signed zeros
(which includes most systems in current use), this means that the
sign of the result is the same as the sign of , even when
 is zero:




Note
The modulus (absolute value) of a complex number x can be
computed using the built-in  function.  There is no
separate  module function for this operation.



(x)¶
Return the representation of x in polar coordinates.  Returns a
pair  where r is the modulus of x and phi is the
phase of x.   is equivalent to .



(r, phi)¶
Return the complex number x with polar coordinates r and phi.
Equivalent to .



Power and logarithmic functions¶


(x)¶
Return e raised to the power x, where e is the base of natural
logarithms.



(x[, base])¶
Returns the logarithm of x to the given base. If the base is not
specified, returns the natural logarithm of x. There is one branch cut, from 0
along the negative real axis to -∞, continuous from above.



(x)¶
Return the base-10 logarithm of x. This has the same branch cut as
.



(x)¶
Return the square root of x. This has the same branch cut as .



Trigonometric functions¶


(x)¶
Return the arc cosine of x. There are two branch cuts: One extends right from
1 along the real axis to ∞, continuous from below. The other extends left from
-1 along the real axis to -∞, continuous from above.



(x)¶
Return the arc sine of x. This has the same branch cuts as .



(x)¶
Return the arc tangent of x. There are two branch cuts: One extends from
 along the imaginary axis to , continuous from the right. The
other extends from  along the imaginary axis to , continuous
from the left.



(x)¶
Return the cosine of x.



(x)¶
Return the sine of x.



(x)¶
Return the tangent of x.



Hyperbolic functions¶


(x)¶
Return the inverse hyperbolic cosine of x. There is one branch cut,
extending left from 1 along the real axis to -∞, continuous from above.



(x)¶
Return the inverse hyperbolic sine of x. There are two branch cuts:
One extends from  along the imaginary axis to ,
continuous from the right.  The other extends from  along
the imaginary axis to , continuous from the left.



(x)¶
Return the inverse hyperbolic tangent of x. There are two branch cuts: One
extends from  along the real axis to , continuous from below. The
other extends from  along the real axis to , continuous from
above.



(x)¶
Return the hyperbolic cosine of x.



(x)¶
Return the hyperbolic sine of x.



(x)¶
Return the hyperbolic tangent of x.



Classification functions¶


(x)¶
Return  if both the real and imaginary parts of x are finite, and
 otherwise.

New in version 3.2.




(x)¶
Return  if either the real or the imaginary part of x is an
infinity, and  otherwise.



(x)¶
Return  if either the real or the imaginary part of x is a NaN,
and  otherwise.



(a, b, *, rel_tol=1e-09, abs_tol=0.0)¶
Return  if the values a and b are close to each other and
 otherwise.
Whether or not two values are considered close is determined according to
given absolute and relative tolerances.
rel_tol is the relative tolerance – it is the maximum allowed difference
between a and b, relative to the larger absolute value of a or b.
For example, to set a tolerance of 5%, pass .  The default
tolerance is , which assures that the two values are the same
within about 9 decimal digits.  rel_tol must be greater than zero.
abs_tol is the minimum absolute tolerance – useful for comparisons near
zero. abs_tol must be at least zero.
If no errors occur, the result will be:
.
The IEEE 754 special values of , , and  will be
handled according to IEEE rules.  Specifically,  is not considered
close to any other value, including .   and  are only
considered close to themselves.

New in version 3.5.


See also
PEP 485 – A function for testing approximate equality




Constants¶


¶
The mathematical constant π, as a float.



¶
The mathematical constant e, as a float.



¶
The mathematical constant τ, as a float.

New in version 3.6.




¶
Floating-point positive infinity. Equivalent to .

New in version 3.6.




¶
Complex number with zero real part and positive infinity imaginary
part. Equivalent to .

New in version 3.6.




¶
A floating-point “not a number” (NaN) value.  Equivalent to
.

New in version 3.6.




¶
Complex number with zero real part and NaN imaginary part. Equivalent to
.

New in version 3.6.


Note that the selection of functions is similar, but not identical, to that in
module .  The reason for having two modules is that some users aren’t
interested in complex numbers, and perhaps don’t even know what they are.  They
would rather have  raise an exception than return a complex
number. Also note that the functions defined in  always return a
complex number, even if the answer can be expressed as a real number (in which
case the complex number has an imaginary part of zero).
A note on branch cuts: They are curves along which the given function fails to
be continuous.  They are a necessary feature of many complex functions.  It is
assumed that if you need to compute with complex functions, you will understand
about branch cuts.  Consult almost any (not too elementary) book on complex
variables for enlightenment.  For information of the proper choice of branch
cuts for numerical purposes, a good reference should be the following:

See also
Kahan, W:  Branch cuts for complex elementary functions; or, Much ado about
nothing’s sign bit.  In Iserles, A., and Powell, M. (eds.), The state of the art
in numerical analysis. Clarendon Press (1987) pp165–211.



