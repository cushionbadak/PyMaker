link:
reference/datamodel.html#special-method-names

docs:

3.3. Special method names¶
A class can implement certain operations that are invoked by special syntax
(such as arithmetic operations or subscripting and slicing) by defining methods
with special names. This is Python’s approach to operator overloading,
allowing classes to define their own behavior with respect to language
operators.  For instance, if a class defines a method named ,
and  is an instance of this class, then  is roughly equivalent
to .  Except where mentioned, attempts to execute an
operation raise an exception when no appropriate method is defined (typically
 or ).
Setting a special method to  indicates that the corresponding
operation is not available.  For example, if a class sets
 to , the class is not iterable, so calling
 on its instances will raise a  (without
falling back to ). [2]
When implementing a class that emulates any built-in type, it is important that
the emulation only be implemented to the degree that it makes sense for the
object being modelled.  For example, some sequences may work well with retrieval
of individual elements, but extracting a slice may not make sense.  (One example
of this is the  interface in the W3C’s Document
Object Model.)

3.3.1. Basic customization¶


(cls[, ...])¶
Called to create a new instance of class cls.   is a static
method (special-cased so you need not declare it as such) that takes the class
of which an instance was requested as its first argument.  The remaining
arguments are those passed to the object constructor expression (the call to the
class).  The return value of  should be the new object instance
(usually an instance of cls).
Typical implementations create a new instance of the class by invoking the
superclass’s  method using 
with appropriate arguments and then modifying the newly-created instance
as necessary before returning it.
If  returns an instance of cls, then the new instance’s
 method will be invoked like , where
self is the new instance and the remaining arguments are the same as were
passed to .
If  does not return an instance of cls, then the new instance’s
 method will not be invoked.
 is intended mainly to allow subclasses of immutable types (like
int, str, or tuple) to customize instance creation.  It is also commonly
overridden in custom metaclasses in order to customize class creation.



(self[, ...])¶
Called after the instance has been created (by ), but before
it is returned to the caller.  The arguments are those passed to the
class constructor expression.  If a base class has an 
method, the derived class’s  method, if any, must explicitly
call it to ensure proper initialization of the base class part of the
instance; for example: .
Because  and  work together in constructing
objects ( to create it, and  to customize it),
no non- value may be returned by ; doing so will
cause a  to be raised at runtime.



(self)¶
Called when the instance is about to be destroyed.  This is also called a
finalizer or (improperly) a destructor.  If a base class has a
 method, the derived class’s  method,
if any, must explicitly call it to ensure proper deletion of the base
class part of the instance.
It is possible (though not recommended!) for the  method
to postpone destruction of the instance by creating a new reference to
it.  This is called object resurrection.  It is implementation-dependent
whether  is called a second time when a resurrected object
is about to be destroyed; the current CPython implementation
only calls it once.
It is not guaranteed that  methods are called for objects
that still exist when the interpreter exits.

Note
 doesn’t directly call  — the former decrements
the reference count for  by one, and the latter is only called when
’s reference count reaches zero.


CPython implementation detail: It is possible for a reference cycle to prevent the reference count
of an object from going to zero.  In this case, the cycle will be
later detected and deleted by the cyclic garbage collector.  A common cause of reference cycles is when
an exception has been caught in a local variable.  The frame’s
locals then reference the exception, which references its own
traceback, which references the locals of all frames caught in the
traceback.

See also
Documentation for the  module.



Warning
Due to the precarious circumstances under which  methods are
invoked, exceptions that occur during their execution are ignored, and a warning
is printed to  instead.  In particular:

 can be invoked when arbitrary code is being executed,
including from any arbitrary thread.  If  needs to take
a lock or invoke any other blocking resource, it may deadlock as
the resource may already be taken by the code that gets interrupted
to execute .
 can be executed during interpreter shutdown.  As a
consequence, the global variables it needs to access (including other
modules) may already have been deleted or set to . Python
guarantees that globals whose name begins with a single underscore
are deleted from their module before other globals are deleted; if
no other references to such globals exist, this may help in assuring
that imported modules are still available at the time when the
 method is called.





(self)¶
Called by the  built-in function to compute the “official” string
representation of an object.  If at all possible, this should look like a
valid Python expression that could be used to recreate an object with the
same value (given an appropriate environment).  If this is not possible, a
string of the form  should be returned.
The return value must be a string object. If a class defines 
but not , then  is also used when an
“informal” string representation of instances of that class is required.
This is typically used for debugging, so it is important that the representation
is information-rich and unambiguous.



(self)¶
Called by  and the built-in functions
 and  to compute the “informal” or nicely
printable string representation of an object.  The return value must be a
string object.
This method differs from  in that there is no
expectation that  return a valid Python expression: a more
convenient or concise representation can be used.
The default implementation defined by the built-in type 
calls .



(self)¶
Called by bytes to compute a byte-string representation
of an object. This should return a  object.



(self, format_spec)¶
Called by the  built-in function,
and by extension, evaluation of formatted string literals and the  method, to produce a “formatted”
string representation of an object. The format_spec argument is
a string that contains a description of the formatting options desired.
The interpretation of the format_spec argument is up to the type
implementing , however most classes will either
delegate formatting to one of the built-in types, or use a similar
formatting option syntax.
See Format Specification Mini-Language for a description of the standard formatting syntax.
The return value must be a string object.

Changed in version 3.4: The __format__ method of  itself raises a 
if passed any non-empty string.


Changed in version 3.7:  is now equivalent to  rather
than .




(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶
These are the so-called “rich comparison” methods. The correspondence between
operator symbols and method names is as follows:  calls ,
 calls ,  calls ,  calls
,  calls , and  calls
.
A rich comparison method may return the singleton  if it does
not implement the operation for a given pair of arguments. By convention,
 and  are returned for a successful comparison. However, these
methods can return any value, so if the comparison operator is used in a Boolean
context (e.g., in the condition of an  statement), Python will call
 on the value to determine if the result is true or false.
By default,  delegates to  and
inverts the result unless it is .  There are no other
implied relationships among the comparison operators, for example,
the truth of  does not imply .
To automatically generate ordering operations from a single root operation,
see .
See the paragraph on  for
some important notes on creating hashable objects which support
custom comparison operations and are usable as dictionary keys.
There are no swapped-argument versions of these methods (to be used when the
left argument does not support the operation but the right argument does);
rather,  and  are each other’s reflection,
 and  are each other’s reflection, and
 and  are their own reflection.
If the operands are of different types, and right operand’s type is
a direct or indirect subclass of the left operand’s type,
the reflected method of the right operand has priority, otherwise
the left operand’s method has priority.  Virtual subclassing is
not considered.



(self)¶
Called by built-in function  and for operations on members of
hashed collections including , , and
.   should return an integer. The only required
property is that objects which compare equal have the same hash value; it is
advised to mix together the hash values of the components of the object that
also play a part in comparison of objects by packing them into a tuple and
hashing the tuple. Example:



Note
 truncates the value returned from an object’s custom
 method to the size of a .  This is
typically 8 bytes on 64-bit builds and 4 bytes on 32-bit builds.  If an
object’s    must interoperate on builds of different bit
sizes, be sure to check the width on all supported builds.  An easy way
to do this is with
.

If a class does not define an  method it should not define a
 operation either; if it defines  but not
, its instances will not be usable as items in hashable
collections.  If a class defines mutable objects and implements an
 method, it should not implement , since the
implementation of hashable collections requires that a key’s hash value is
immutable (if the object’s hash value changes, it will be in the wrong hash
bucket).
User-defined classes have  and  methods
by default; with them, all objects compare unequal (except with themselves)
and  returns an appropriate value such that 
implies both that  and .
A class that overrides  and does not define 
will have its  implicitly set to .  When the
 method of a class is , instances of the class will
raise an appropriate  when a program attempts to retrieve
their hash value, and will also be correctly identified as unhashable when
checking .
If a class that overrides  needs to retain the implementation
of  from a parent class, the interpreter must be told this
explicitly by setting .
If a class that does not override  wishes to suppress hash
support, it should include  in the class definition.
A class which defines its own  that explicitly raises
a  would be incorrectly identified as hashable by
an  call.

Note
By default, the  values of str, bytes and datetime
objects are “salted” with an unpredictable random value.  Although they
remain constant within an individual Python process, they are not
predictable between repeated invocations of Python.
This is intended to provide protection against a denial-of-service caused
by carefully-chosen inputs that exploit the worst case performance of a
dict insertion, O(n^2) complexity.  See
http://www.ocert.org/advisories/ocert-2011-003.html for details.
Changing hash values affects the iteration order of sets.
Python has never made guarantees about this ordering
(and it typically varies between 32-bit and 64-bit builds).
See also .


Changed in version 3.3: Hash randomization is enabled by default.




(self)¶
Called to implement truth value testing and the built-in operation
; should return  or .  When this method is not
defined,  is called, if it is defined, and the object is
considered true if its result is nonzero.  If a class defines neither
 nor , all its instances are considered
true.



3.3.2. Customizing attribute access¶
The following methods can be defined to customize the meaning of attribute
access (use of, assignment to, or deletion of ) for class instances.


(self, name)¶
Called when the default attribute access fails with an 
(either  raises an  because
name is not an instance attribute or an attribute in the class tree
for ; or  of a name property raises
).  This method should either return the (computed)
attribute value or raise an  exception.
Note that if the attribute is found through the normal mechanism,
 is not called.  (This is an intentional asymmetry between
 and .) This is done both for efficiency
reasons and because otherwise  would have no way to access
other attributes of the instance.  Note that at least for instance variables,
you can fake total control by not inserting any values in the instance attribute
dictionary (but instead inserting them in another object).  See the
 method below for a way to actually get total control
over attribute access.



(self, name)¶
Called unconditionally to implement attribute accesses for instances of the
class. If the class also defines , the latter will not be
called unless  either calls it explicitly or raises an
. This method should return the (computed) attribute value
or raise an  exception. In order to avoid infinite
recursion in this method, its implementation should always call the base class
method with the same name to access any attributes it needs, for example,
.

Note
This method may still be bypassed when looking up special methods as the
result of implicit invocation via language syntax or built-in functions.
See Special method lookup.




(self, name, value)¶
Called when an attribute assignment is attempted.  This is called instead of
the normal mechanism (i.e. store the value in the instance dictionary).
name is the attribute name, value is the value to be assigned to it.
If  wants to assign to an instance attribute, it should
call the base class method with the same name, for example,
.



(self, name)¶
Like  but for attribute deletion instead of assignment.  This
should only be implemented if  is meaningful for the object.



(self)¶
Called when  is called on the object. A sequence must be
returned.  converts the returned sequence to a list and sorts it.


3.3.2.1. Customizing module attribute access¶
Special names  and  can be also used to customize
access to module attributes. The  function at the module level
should accept one argument which is the name of an attribute and return the
computed value or raise an . If an attribute is
not found on a module object through the normal lookup, i.e.
, then  is searched in
the module  before raising an . If found,
it is called with the attribute name and the result is returned.
The  function should accept no arguments, and return a list of
strings that represents the names accessible on module. If present, this
function overrides the standard  search on a module.
For a more fine grained customization of the module behavior (setting
attributes, properties, etc.), one can set the  attribute of
a module object to a subclass of . For example:



Note
Defining module  and setting module  only
affect lookups made using the attribute access syntax – directly accessing
the module globals (whether by code within the module, or via a reference
to the module’s globals dictionary) is unaffected.


Changed in version 3.5:  module attribute is now writable.


New in version 3.7:  and  module attributes.


See also

PEP 562 - Module __getattr__ and __dir__
Describes the  and  functions on modules.




3.3.2.2. Implementing Descriptors¶
The following methods only apply when an instance of the class containing the
method (a so-called descriptor class) appears in an owner class (the
descriptor must be in either the owner’s class dictionary or in the class
dictionary for one of its parents).  In the examples below, “the attribute”
refers to the attribute whose name is the key of the property in the owner
class’ .


(self, instance, owner)¶
Called to get the attribute of the owner class (class attribute access) or of an
instance of that class (instance attribute access). owner is always the owner
class, while instance is the instance that the attribute was accessed through,
or  when the attribute is accessed through the owner.  This method
should return the (computed) attribute value or raise an 
exception.



(self, instance, value)¶
Called to set the attribute on an instance instance of the owner class to a
new value, value.



(self, instance)¶
Called to delete the attribute on an instance instance of the owner class.



(self, owner, name)¶
Called at the time the owning class owner is created. The
descriptor has been assigned to name.

New in version 3.6.


The attribute  is interpreted by the  module
as specifying the class where this object was defined (setting this
appropriately can assist in runtime introspection of dynamic class attributes).
For callables, it may indicate that an instance of the given type (or a
subclass) is expected or required as the first positional argument (for example,
CPython sets this attribute for unbound methods that are implemented in C).


3.3.2.3. Invoking Descriptors¶
In general, a descriptor is an object attribute with “binding behavior”, one
whose attribute access has been overridden by methods in the descriptor
protocol:  , , and . If any of
those methods are defined for an object, it is said to be a descriptor.
The default behavior for attribute access is to get, set, or delete the
attribute from an object’s dictionary. For instance,  has a lookup chain
starting with , then , and
continuing through the base classes of  excluding metaclasses.
However, if the looked-up value is an object defining one of the descriptor
methods, then Python may override the default behavior and invoke the descriptor
method instead.  Where this occurs in the precedence chain depends on which
descriptor methods were defined and how they were called.
The starting point for descriptor invocation is a binding, . How the
arguments are assembled depends on :

Direct Call
The simplest and least common call is when user code directly invokes a
descriptor method:    .
Instance Binding
If binding to an object instance,  is transformed into the call:
.
Class Binding
If binding to a class,  is transformed into the call:
.
Super Binding
If  is an instance of , then the binding 
searches  for the base class 
immediately preceding  and then invokes the descriptor with the call:
.

For instance bindings, the precedence of descriptor invocation depends on the
which descriptor methods are defined.  A descriptor can define any combination
of ,  and .  If it does not
define , then accessing the attribute will return the descriptor
object itself unless there is a value in the object’s instance dictionary.  If
the descriptor defines  and/or , it is a data
descriptor; if it defines neither, it is a non-data descriptor.  Normally, data
descriptors define both  and , while non-data
descriptors have just the  method.  Data descriptors with
 and  defined always override a redefinition in an
instance dictionary.  In contrast, non-data descriptors can be overridden by
instances.
Python methods (including  and ) are
implemented as non-data descriptors.  Accordingly, instances can redefine and
override methods.  This allows individual instances to acquire behaviors that
differ from other instances of the same class.
The  function is implemented as a data descriptor. Accordingly,
instances cannot override the behavior of a property.


3.3.2.4. __slots__¶
__slots__ allow us to explicitly declare data members (like
properties) and deny the creation of __dict__ and __weakref__
(unless explicitly declared in __slots__ or available in a parent.)
The space saved over using __dict__ can be significant.
Attribute lookup speed can be significantly improved as well.


¶
This class variable can be assigned a string, iterable, or sequence of
strings with variable names used by instances.  __slots__ reserves space
for the declared variables and prevents the automatic creation of __dict__
and __weakref__ for each instance.


3.3.2.4.1. Notes on using __slots__¶

When inheriting from a class without __slots__, the __dict__ and
__weakref__ attribute of the instances will always be accessible.
Without a __dict__ variable, instances cannot be assigned new variables not
listed in the __slots__ definition.  Attempts to assign to an unlisted
variable name raises . If dynamic assignment of new
variables is desired, then add  to the sequence of strings in
the __slots__ declaration.
Without a __weakref__ variable for each instance, classes defining
__slots__ do not support weak references to its instances. If weak reference
support is needed, then add  to the sequence of strings in the
__slots__ declaration.
__slots__ are implemented at the class level by creating descriptors
(Implementing Descriptors) for each variable name.  As a result, class attributes
cannot be used to set default values for instance variables defined by
__slots__; otherwise, the class attribute would overwrite the descriptor
assignment.
The action of a __slots__ declaration is not limited to the class
where it is defined.  __slots__ declared in parents are available in
child classes. However, child subclasses will get a __dict__  and
__weakref__ unless they also define __slots__ (which should only
contain names of any additional slots).
If a class defines a slot also defined in a base class, the instance variable
defined by the base class slot is inaccessible (except by retrieving its
descriptor directly from the base class). This renders the meaning of the
program undefined.  In the future, a check may be added to prevent this.
Nonempty __slots__ does not work for classes derived from “variable-length”
built-in types such as ,  and .
Any non-string iterable may be assigned to __slots__. Mappings may also be
used; however, in the future, special meaning may be assigned to the values
corresponding to each key.
__class__ assignment works only if both classes have the same __slots__.
Multiple inheritance with multiple slotted parent classes can be used,
but only one parent is allowed to have attributes created by slots
(the other bases must have empty slot layouts) - violations raise
.





3.3.3. Customizing class creation¶
Whenever a class inherits from another class, __init_subclass__ is
called on that class. This way, it is possible to write classes which
change the behavior of subclasses. This is closely related to class
decorators, but where class decorators only affect the specific class they’re
applied to,  solely applies to future subclasses of the
class defining the method.


classmethod (cls)¶
This method is called whenever the containing class is subclassed.
cls is then the new subclass. If defined as a normal instance method,
this method is implicitly converted to a class method.
Keyword arguments which are given to a new class are passed to
the parent’s class . For compatibility with
other classes using , one should take out the
needed keyword arguments and pass the others over to the base
class, as in:


The default implementation  does
nothing, but raises an error if it is called with any arguments.

Note
The metaclass hint  is consumed by the rest of the type
machinery, and is never passed to  implementations.
The actual metaclass (rather than the explicit hint) can be accessed as
.


New in version 3.6.



3.3.3.1. Metaclasses¶
By default, classes are constructed using . The class body is
executed in a new namespace and the class name is bound locally to the
result of .
The class creation process can be customized by passing the 
keyword argument in the class definition line, or by inheriting from an
existing class that included such an argument. In the following example,
both  and  are instances of :


Any other keyword arguments that are specified in the class definition are
passed through to all metaclass operations described below.
When a class definition is executed, the following steps occur:

MRO entries are resolved;
the appropriate metaclass is determined;
the class namespace is prepared;
the class body is executed;
the class object is created.



3.3.3.2. Resolving MRO entries¶
If a base that appears in class definition is not an instance of ,
then an  method is searched on it. If found, it is called
with the original bases tuple. This method must return a tuple of classes that
will be used instead of this base. The tuple may be empty, in such case
the original base is ignored.

See also
PEP 560 - Core support for typing module and generic types



3.3.3.3. Determining the appropriate metaclass¶
The appropriate metaclass for a class definition is determined as follows:

if no bases and no explicit metaclass are given, then  is used;
if an explicit metaclass is given and it is not an instance of
, then it is used directly as the metaclass;
if an instance of  is given as the explicit metaclass, or
bases are defined, then the most derived metaclass is used.

The most derived metaclass is selected from the explicitly specified
metaclass (if any) and the metaclasses (i.e. ) of all specified
base classes. The most derived metaclass is one which is a subtype of all
of these candidate metaclasses. If none of the candidate metaclasses meets
that criterion, then the class definition will fail with .


3.3.3.4. Preparing the class namespace¶
Once the appropriate metaclass has been identified, then the class namespace
is prepared. If the metaclass has a  attribute, it is called
as  (where the
additional keyword arguments, if any, come from the class definition).
If the metaclass has no  attribute, then the class namespace
is initialised as an empty ordered mapping.

See also

PEP 3115 - Metaclasses in Python 3000
Introduced the  namespace hook




3.3.3.5. Executing the class body¶
The class body is executed (approximately) as
. The key difference from a normal
call to  is that lexical scoping allows the class body (including
any methods) to reference names from the current and outer scopes when the
class definition occurs inside a function.
However, even when the class definition occurs inside the function, methods
defined inside the class still cannot see names defined at the class scope.
Class variables must be accessed through the first parameter of instance or
class methods, or through the implicit lexically scoped  reference
described in the next section.


3.3.3.6. Creating the class object¶
Once the class namespace has been populated by executing the class body,
the class object is created by calling
 (the additional keywords
passed here are the same as those passed to ).
This class object is the one that will be referenced by the zero-argument
form of .  is an implicit closure reference
created by the compiler if any methods in a class body refer to either
 or . This allows the zero argument form of
 to correctly identify the class being defined based on
lexical scoping, while the class or instance that was used to make the
current call is identified based on the first argument passed to the method.

CPython implementation detail: In CPython 3.6 and later, the  cell is passed to the metaclass
as a  entry in the class namespace. If present, this must
be propagated up to the  call in order for the class to be
initialised correctly.
Failing to do so will result in a  in Python 3.6,
and a  in Python 3.8.

When using the default metaclass , or any metaclass that ultimately
calls , the following additional customisation steps are
invoked after creating the class object:

first,  collects all of the descriptors in the class
namespace that define a  method;
second, all of these  methods are called with the class
being defined and the assigned name of that particular descriptor;
finally, the  hook is called on the
immediate parent of the new class in its method resolution order.

After the class object is created, it is passed to the class decorators
included in the class definition (if any) and the resulting object is bound
in the local namespace as the defined class.
When a new class is created by , the object provided as the
namespace parameter is copied to a new ordered mapping and the original
object is discarded. The new copy is wrapped in a read-only proxy, which
becomes the  attribute of the class object.

See also

PEP 3135 - New super
Describes the implicit  closure reference




3.3.3.7. Uses for metaclasses¶
The potential uses for metaclasses are boundless. Some ideas that have been
explored include enum, logging, interface checking, automatic delegation,
automatic property creation, proxies, frameworks, and automatic resource
locking/synchronization.



3.3.4. Customizing instance and subclass checks¶
The following methods are used to override the default behavior of the
 and  built-in functions.
In particular, the metaclass  implements these methods in
order to allow the addition of Abstract Base Classes (ABCs) as “virtual base
classes” to any class or type (including built-in types), including other
ABCs.


(self, instance)¶
Return true if instance should be considered a (direct or indirect)
instance of class. If defined, called to implement .



(self, subclass)¶
Return true if subclass should be considered a (direct or indirect)
subclass of class.  If defined, called to implement .

Note that these methods are looked up on the type (metaclass) of a class.  They
cannot be defined as class methods in the actual class.  This is consistent with
the lookup of special methods that are called on instances, only in this
case the instance is itself a class.

See also

PEP 3119 - Introducing Abstract Base Classes
Includes the specification for customizing  and
 behavior through  and
, with motivation for this functionality
in the context of adding Abstract Base Classes (see the 
module) to the language.




3.3.5. Emulating generic types¶
One can implement the generic class syntax as specified by PEP 484
(for example ) by defining a special method:


classmethod (cls, key)¶
Return an object representing the specialization of a generic class
by type arguments found in key.

This method is looked up on the class object itself, and when defined in
the class body, this method is implicitly a class method.  Note, this
mechanism is primarily reserved for use with static type hints, other usage
is discouraged.

See also
PEP 560 - Core support for typing module and generic types



3.3.6. Emulating callable objects¶


(self[, args...])¶
Called when the instance is “called” as a function; if this method is defined,
 is a shorthand for .



3.3.7. Emulating container types¶
The following methods can be defined to implement container objects.  Containers
usually are sequences (such as lists or tuples) or mappings (like dictionaries),
but can represent other containers as well.  The first set of methods is used
either to emulate a sequence or to emulate a mapping; the difference is that for
a sequence, the allowable keys should be the integers k for which  where N is the length of the sequence, or slice objects, which define a
range of items.  It is also recommended that mappings provide the methods
, , , , ,
, , , , and
 behaving similar to those for Python’s standard dictionary
objects.  The  module provides a

abstract base class to help create those methods from a base set of
, , , and .
Mutable sequences should provide methods , ,
, , , , ,
 and , like Python standard list objects.  Finally,
sequence types should implement addition (meaning concatenation) and
multiplication (meaning repetition) by defining the methods ,
, , ,  and
 described below; they should not define other numerical
operators.  It is recommended that both mappings and sequences implement the
 method to allow efficient use of the  operator; for
mappings,  should search the mapping’s keys; for sequences, it should
search through the values.  It is further recommended that both mappings and
sequences implement the  method to allow efficient iteration
through the container; for mappings,  should be the same as
; for sequences, it should iterate through the values.


(self)¶
Called to implement the built-in function .  Should return the length
of the object, an integer  0.  Also, an object that doesn’t define a
 method and whose  method returns zero is
considered to be false in a Boolean context.

CPython implementation detail: In CPython, the length is required to be at most .
If the length is larger than  some features (such as
) may raise .  To prevent raising
 by truth value testing, an object must define a
 method.




(self)¶
Called to implement . Should return an estimated
length for the object (which may be greater or less than the actual length).
The length must be an integer  0. This method is purely an
optimization and is never required for correctness.

New in version 3.4.



Note
Slicing is done exclusively with the following three methods.  A call like


is translated to


and so forth.  Missing slice items are always filled in with .



(self, key)¶
Called to implement evaluation of . For sequence types, the
accepted keys should be integers and slice objects.  Note that the special
interpretation of negative indexes (if the class wishes to emulate a sequence
type) is up to the  method. If key is of an inappropriate
type,  may be raised; if of a value outside the set of indexes
for the sequence (after any special interpretation of negative values),
 should be raised. For mapping types, if key is missing (not
in the container),  should be raised.

Note
 loops expect that an  will be raised for illegal
indexes to allow proper detection of the end of the sequence.




(self, key, value)¶
Called to implement assignment to .  Same note as for
.  This should only be implemented for mappings if the
objects support changes to the values for keys, or if new keys can be added, or
for sequences if elements can be replaced.  The same exceptions should be raised
for improper key values as for the  method.



(self, key)¶
Called to implement deletion of .  Same note as for
.  This should only be implemented for mappings if the
objects support removal of keys, or for sequences if elements can be removed
from the sequence.  The same exceptions should be raised for improper key
values as for the  method.



(self, key)¶
Called by . to implement  for dict subclasses
when key is not in the dictionary.



(self)¶
This method is called when an iterator is required for a container. This method
should return a new iterator object that can iterate over all the objects in the
container.  For mappings, it should iterate over the keys of the container.
Iterator objects also need to implement this method; they are required to return
themselves.  For more information on iterator objects, see Iterator Types.



(self)¶
Called (if present) by the  built-in to implement
reverse iteration.  It should return a new iterator object that iterates
over all the objects in the container in reverse order.
If the  method is not provided, the 
built-in will fall back to using the sequence protocol ( and
).  Objects that support the sequence protocol should
only provide  if they can provide an implementation
that is more efficient than the one provided by .

The membership test operators ( and ) are normally
implemented as an iteration through a sequence.  However, container objects can
supply the following special method with a more efficient implementation, which
also does not require the object be a sequence.


(self, item)¶
Called to implement membership test operators.  Should return true if item
is in self, false otherwise.  For mapping objects, this should consider the
keys of the mapping rather than the values or the key-item pairs.
For objects that don’t define , the membership test first
tries iteration via , then the old sequence iteration
protocol via , see this section in the language
reference.



3.3.8. Emulating numeric types¶
The following methods can be defined to emulate numeric objects. Methods
corresponding to operations that are not supported by the particular kind of
number implemented (e.g., bitwise operations for non-integral numbers) should be
left undefined.


(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other[, modulo])¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶
These methods are called to implement the binary arithmetic operations
(, , , , , , , ,
, , , , , , ).  For instance, to
evaluate the expression , where x is an instance of a class that
has an  method,  is called.  The
 method should be the equivalent to using
 and ; it should not be related to
.  Note that  should be defined to accept
an optional third argument if the ternary version of the built-in 
function is to be supported.
If one of those methods does not support the operation with the supplied
arguments, it should return .



(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶
These methods are called to implement the binary arithmetic operations
(, , , , , , , ,
, , , , , , ) with reflected
(swapped) operands.  These functions are only called if the left operand does
not support the corresponding operation [3] and the operands are of different
types. [4] For instance, to evaluate the expression , where y is
an instance of a class that has an  method, 
is called if  returns NotImplemented.
Note that ternary  will not try calling  (the
coercion rules would become too complicated).

Note
If the right operand’s type is a subclass of the left operand’s type and that
subclass provides the reflected method for the operation, this method will be
called before the left operand’s non-reflected method.  This behavior allows
subclasses to override their ancestors’ operations.




(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other[, modulo])¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶
These methods are called to implement the augmented arithmetic assignments
(, , , , , , , , ,
, , , ).  These methods should attempt to do the
operation in-place (modifying self) and return the result (which could be,
but does not have to be, self).  If a specific method is not defined, the
augmented assignment falls back to the normal methods.  For instance, if x
is an instance of a class with an  method,  is
equivalent to  . Otherwise,  and
 are considered, as with the evaluation of . In
certain situations, augmented assignment can result in unexpected errors (see
Why does a_tuple[i] += [‘item’] raise an exception when the addition works?), but this behavior is in fact
part of the data model.



(self)¶

(self)¶

(self)¶

(self)¶
Called to implement the unary arithmetic operations (, , 
and ).



(self)¶

(self)¶

(self)¶
Called to implement the built-in functions ,
 and .  Should return a value
of the appropriate type.



(self)¶
Called to implement , and whenever Python needs to
losslessly convert the numeric object to an integer object (such as in
slicing, or in the built-in ,  and 
functions). Presence of this method indicates that the numeric object is
an integer type.  Must return an integer.

Note
In order to have a coherent integer type class, when  is
defined  should also be defined, and both should return
the same value.




(self[, ndigits])¶

(self)¶

(self)¶

(self)¶
Called to implement the built-in function  and 
functions ,  and .
Unless ndigits is passed to  all these methods should
return the value of the object truncated to an 
(typically an ).
If  is not defined then the built-in function 
falls back to .



3.3.9. With Statement Context Managers¶
A context manager is an object that defines the runtime context to be
established when executing a  statement. The context manager
handles the entry into, and the exit from, the desired runtime context for the
execution of the block of code.  Context managers are normally invoked using the
 statement (described in section The with statement), but can also be
used by directly invoking their methods.
Typical uses of context managers include saving and restoring various kinds of
global state, locking and unlocking resources, closing opened files, etc.
For more information on context managers, see Context Manager Types.


(self)¶
Enter the runtime context related to this object. The  statement
will bind this method’s return value to the target(s) specified in the
 clause of the statement, if any.



(self, exc_type, exc_value, traceback)¶
Exit the runtime context related to this object. The parameters describe the
exception that caused the context to be exited. If the context was exited
without an exception, all three arguments will be .
If an exception is supplied, and the method wishes to suppress the exception
(i.e., prevent it from being propagated), it should return a true value.
Otherwise, the exception will be processed normally upon exit from this method.
Note that  methods should not reraise the passed-in exception;
this is the caller’s responsibility.


See also

PEP 343 - The “with” statement
The specification, background, and examples for the Python 
statement.




3.3.10. Special method lookup¶
For custom classes, implicit invocations of special methods are only guaranteed
to work correctly if defined on an object’s type, not in the object’s instance
dictionary.  That behaviour is the reason why the following code raises an
exception:


The rationale behind this behaviour lies with a number of special methods such
as  and  that are implemented by all objects,
including type objects. If the implicit lookup of these methods used the
conventional lookup process, they would fail when invoked on the type object
itself:


Incorrectly attempting to invoke an unbound method of a class in this way is
sometimes referred to as ‘metaclass confusion’, and is avoided by bypassing
the instance when looking up special methods:


In addition to bypassing any instance attributes in the interest of
correctness, implicit special method lookup generally also bypasses the
 method even of the object’s metaclass:


Bypassing the  machinery in this fashion
provides significant scope for speed optimisations within the
interpreter, at the cost of some flexibility in the handling of
special methods (the special method must be set on the class
object itself in order to be consistently invoked by the interpreter).

