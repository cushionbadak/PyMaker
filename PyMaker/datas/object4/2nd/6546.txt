link:
library/cgi.html#debugging-cgi-scripts

docs:

Debugging CGI scripts¶
First of all, check for trivial installation errors — reading the section
above on installing your CGI script carefully can save you a lot of time.  If
you wonder whether you have understood the installation procedure correctly, try
installing a copy of this module file () as a CGI script.  When
invoked as a script, the file will dump its environment and the contents of the
form in HTML form. Give it the right mode etc, and send it a request.  If it’s
installed in the standard  directory, it should be possible to
send it a request by entering a URL into your browser of the form:


If this gives an error of type 404, the server cannot find the script – perhaps
you need to install it in a different directory.  If it gives another error,
there’s an installation problem that you should fix before trying to go any
further.  If you get a nicely formatted listing of the environment and form
content (in this example, the fields should be listed as “addr” with value “At
Home” and “name” with value “Joe Blow”), the  script has been
installed correctly.  If you follow the same procedure for your own script, you
should now be able to debug it.
The next step could be to call the  module’s  function
from your script: replace its main code with the single statement


This should produce the same results as those gotten from installing the
 file itself.
When an ordinary Python script raises an unhandled exception (for whatever
reason: of a typo in a module name, a file that can’t be opened, etc.), the
Python interpreter prints a nice traceback and exits.  While the Python
interpreter will still do this when your CGI script raises an exception, most
likely the traceback will end up in one of the HTTP server’s log files, or be
discarded altogether.
Fortunately, once you have managed to get your script to execute some code,
you can easily send tracebacks to the Web browser using the  module.
If you haven’t done so already, just add the lines:


to the top of your script.  Then try running it again; when a problem occurs,
you should see a detailed report that will likely make apparent the cause of the
crash.
If you suspect that there may be a problem in importing the  module,
you can use an even more robust approach (which only uses built-in modules):


This relies on the Python interpreter to print the traceback.  The content type
of the output is set to plain text, which disables all HTML processing.  If your
script works, the raw HTML will be displayed by your client.  If it raises an
exception, most likely after the first two lines have been printed, a traceback
will be displayed. Because no HTML interpretation is going on, the traceback
will be readable.
