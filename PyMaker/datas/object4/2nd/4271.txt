link:
library/multiprocessing.html#multiprocessing.Queue

docs:


class ([maxsize])¶
Returns a process shared queue implemented using a pipe and a few
locks/semaphores.  When a process first puts an item on the queue a feeder
thread is started which transfers objects from a buffer into the pipe.
The usual  and  exceptions from the
standard library’s  module are raised to signal timeouts.
 implements all the methods of  except for
 and .


()¶
Return the approximate size of the queue.  Because of
multithreading/multiprocessing semantics, this number is not reliable.
Note that this may raise  on Unix platforms like
Mac OS X where  is not implemented.



()¶
Return  if the queue is empty,  otherwise.  Because of
multithreading/multiprocessing semantics, this is not reliable.



()¶
Return  if the queue is full,  otherwise.  Because of
multithreading/multiprocessing semantics, this is not reliable.



(obj[, block[, timeout]])¶
Put obj into the queue.  If the optional argument block is 
(the default) and timeout is  (the default), block if necessary until
a free slot is available.  If timeout is a positive number, it blocks at
most timeout seconds and raises the  exception if no
free slot was available within that time.  Otherwise (block is
), put an item on the queue if a free slot is immediately
available, else raise the  exception (timeout is
ignored in that case).



(obj)¶
Equivalent to .



([block[, timeout]])¶
Remove and return an item from the queue.  If optional args block is
 (the default) and timeout is  (the default), block if
necessary until an item is available.  If timeout is a positive number,
it blocks at most timeout seconds and raises the 
exception if no item was available within that time.  Otherwise (block is
), return an item if one is immediately available, else raise the
 exception (timeout is ignored in that case).



()¶
Equivalent to .

 has a few additional methods not found in
.  These methods are usually unnecessary for most
code:


()¶
Indicate that no more data will be put on this queue by the current
process.  The background thread will quit once it has flushed all buffered
data to the pipe.  This is called automatically when the queue is garbage
collected.



()¶
Join the background thread.  This can only be used after  has
been called.  It blocks until the background thread exits, ensuring that
all data in the buffer has been flushed to the pipe.
By default if a process is not the creator of the queue then on exit it
will attempt to join the queue’s background thread.  The process can call
 to make  do nothing.



()¶
Prevent  from blocking.  In particular, this prevents
the background thread from being joined automatically when the process
exits – see .
A better name for this method might be
.  It is likely to cause enqueued
data to lost, and you almost certainly will not need to use it.
It is really only there if you need the current process to exit
immediately without waiting to flush enqueued data to the
underlying pipe, and you don’t care about lost data.


Note
This class’s functionality requires a functioning shared semaphore
implementation on the host operating system. Without one, the
functionality in this class will be disabled, and attempts to
instantiate a  will result in an . See
bpo-3770 for additional information.  The same holds true for any
of the specialized queue types listed below.

