link:
library/pickle.html#module-interface

docs:

Module Interface¶
To serialize an object hierarchy, you simply call the  function.
Similarly, to de-serialize a data stream, you call the  function.
However, if you want more control over serialization and de-serialization,
you can create a  or an  object, respectively.
The  module provides the following constants:


¶
An integer, the highest protocol version
available.  This value can be passed as a protocol value to functions
 and  as well as the 
constructor.



¶
An integer, the default protocol version used
for pickling.  May be less than .  Currently the
default protocol is 3, a new protocol designed for Python 3.

The  module provides the following functions to make the pickling
process more convenient:


(obj, file, protocol=None, *, fix_imports=True)¶
Write a pickled representation of obj to the open file object file.
This is equivalent to .
The optional protocol argument, an integer, tells the pickler to use
the given protocol; supported protocols are 0 to .
If not specified, the default is .  If a negative
number is specified,  is selected.
The file argument must have a write() method that accepts a single bytes
argument.  It can thus be an on-disk file opened for binary writing, an
 instance, or any other custom object that meets this
interface.
If fix_imports is true and protocol is less than 3, pickle will try to
map the new Python 3 names to the old module names used in Python 2, so
that the pickle data stream is readable with Python 2.



(obj, protocol=None, *, fix_imports=True)¶
Return the pickled representation of the object as a  object,
instead of writing it to a file.
Arguments protocol and fix_imports have the same meaning as in
.



(file, *, fix_imports=True, encoding="ASCII", errors="strict")¶
Read a pickled object representation from the open file object
file and return the reconstituted object hierarchy specified therein.
This is equivalent to .
The protocol version of the pickle is detected automatically, so no
protocol argument is needed.  Bytes past the pickled object’s
representation are ignored.
The argument file must have two methods, a read() method that takes an
integer argument, and a readline() method that requires no arguments.  Both
methods should return bytes.  Thus file can be an on-disk file opened for
binary reading, an  object, or any other custom object
that meets this interface.
Optional keyword arguments are fix_imports, encoding and errors,
which are used to control compatibility support for pickle stream generated
by Python 2.  If fix_imports is true, pickle will try to map the old
Python 2 names to the new names used in Python 3.  The encoding and
errors tell pickle how to decode 8-bit string instances pickled by Python
2; these default to ‘ASCII’ and ‘strict’, respectively.  The encoding can
be ‘bytes’ to read these 8-bit string instances as bytes objects.
Using  is required for unpickling NumPy arrays and
instances of ,  and
 pickled by Python 2.



(bytes_object, *, fix_imports=True, encoding="ASCII", errors="strict")¶
Read a pickled object hierarchy from a  object and return the
reconstituted object hierarchy specified therein.
The protocol version of the pickle is detected automatically, so no
protocol argument is needed.  Bytes past the pickled object’s
representation are ignored.
Optional keyword arguments are fix_imports, encoding and errors,
which are used to control compatibility support for pickle stream generated
by Python 2.  If fix_imports is true, pickle will try to map the old
Python 2 names to the new names used in Python 3.  The encoding and
errors tell pickle how to decode 8-bit string instances pickled by Python
2; these default to ‘ASCII’ and ‘strict’, respectively.  The encoding can
be ‘bytes’ to read these 8-bit string instances as bytes objects.
Using  is required for unpickling NumPy arrays and
instances of ,  and
 pickled by Python 2.

The  module defines three exceptions:


exception ¶
Common base class for the other pickling exceptions.  It inherits
.



exception ¶
Error raised when an unpicklable object is encountered by .
It inherits .
Refer to What can be pickled and unpickled? to learn what kinds of objects can be
pickled.



exception ¶
Error raised when there is a problem unpickling an object, such as a data
corruption or a security violation.  It inherits .
Note that other exceptions may also be raised during unpickling, including
(but not necessarily limited to) AttributeError, EOFError, ImportError, and
IndexError.

The  module exports two classes,  and
:


class (file, protocol=None, *, fix_imports=True)¶
This takes a binary file for writing a pickle data stream.
The optional protocol argument, an integer, tells the pickler to use
the given protocol; supported protocols are 0 to .
If not specified, the default is .  If a negative
number is specified,  is selected.
The file argument must have a write() method that accepts a single bytes
argument.  It can thus be an on-disk file opened for binary writing, an
 instance, or any other custom object that meets this
interface.
If fix_imports is true and protocol is less than 3, pickle will try to
map the new Python 3 names to the old module names used in Python 2, so
that the pickle data stream is readable with Python 2.


(obj)¶
Write a pickled representation of obj to the open file object given in
the constructor.



(obj)¶
Do nothing by default.  This exists so a subclass can override it.
If  returns , obj is pickled as usual.  Any
other value causes  to emit the returned value as a
persistent ID for obj.  The meaning of this persistent ID should be
defined by .  Note that the value
returned by  cannot itself have a persistent ID.
See Persistence of External Objects for details and examples of uses.



¶
A pickler object’s dispatch table is a registry of reduction
functions of the kind which can be declared using
.  It is a mapping whose keys are classes
and whose values are reduction functions.  A reduction function
takes a single argument of the associated class and should
conform to the same interface as a 
method.
By default, a pickler object will not have a
 attribute, and it will instead use the
global dispatch table managed by the  module.
However, to customize the pickling for a specific pickler object
one can set the  attribute to a dict-like
object.  Alternatively, if a subclass of  has a
 attribute then this will be used as the
default dispatch table for instances of that class.
See Dispatch Tables for usage examples.

New in version 3.3.




¶
Deprecated. Enable fast mode if set to a true value.  The fast mode
disables the usage of memo, therefore speeding the pickling process by not
generating superfluous PUT opcodes.  It should not be used with
self-referential objects, doing otherwise will cause  to
recurse infinitely.
Use  if you need more compact pickles.




class (file, *, fix_imports=True, encoding="ASCII", errors="strict")¶
This takes a binary file for reading a pickle data stream.
The protocol version of the pickle is detected automatically, so no
protocol argument is needed.
The argument file must have two methods, a read() method that takes an
integer argument, and a readline() method that requires no arguments.  Both
methods should return bytes.  Thus file can be an on-disk file object
opened for binary reading, an  object, or any other
custom object that meets this interface.
Optional keyword arguments are fix_imports, encoding and errors,
which are used to control compatibility support for pickle stream generated
by Python 2.  If fix_imports is true, pickle will try to map the old
Python 2 names to the new names used in Python 3.  The encoding and
errors tell pickle how to decode 8-bit string instances pickled by Python
2; these default to ‘ASCII’ and ‘strict’, respectively.  The encoding can
be ‘bytes’ to read these 8-bit string instances as bytes objects.


()¶
Read a pickled object representation from the open file object given in
the constructor, and return the reconstituted object hierarchy specified
therein.  Bytes past the pickled object’s representation are ignored.



(pid)¶
Raise an  by default.
If defined,  should return the object specified by
the persistent ID pid.  If an invalid persistent ID is encountered, an
 should be raised.
See Persistence of External Objects for details and examples of uses.



(module, name)¶
Import module if necessary and return the object called name from it,
where the module and name arguments are  objects.  Note,
unlike its name suggests,  is also used for finding
functions.
Subclasses may override this to gain control over what type of objects and
how they can be loaded, potentially reducing security risks. Refer to
Restricting Globals for details.


