link:
library/sysconfig.html

docs:


 — Provide access to Python’s configuration information¶

New in version 3.2.

Source code: Lib/sysconfig.py

The  module provides access to Python’s configuration
information like the list of installation paths and the configuration variables
relevant for the current platform.

Configuration variables¶
A Python distribution contains a  and a 
header file that are necessary to build both the Python binary itself and
third-party C extensions compiled using .
 puts all variables found in these files in a dictionary that
can be accessed using  or .
Notice that on Windows, it’s a much smaller set.


(*args)¶
With no arguments, return a dictionary of all configuration variables
relevant for the current platform.
With arguments, return a list of values that result from looking up each
argument in the configuration variable dictionary.
For each argument, if the value is not found, return .



(name)¶
Return the value of a single variable name. Equivalent to
.
If name is not found, return .

Example of usage:




Installation paths¶
Python uses an installation scheme that differs depending on the platform and on
the installation options.  These schemes are stored in  under
unique identifiers based on the value returned by .
Every new component that is installed using  or a
Distutils-based system will follow the same scheme to copy its file in the right
places.
Python currently supports seven schemes:

posix_prefix: scheme for Posix platforms like Linux or Mac OS X.  This is
the default scheme used when Python or a component is installed.
posix_home: scheme for Posix platforms used when a home option is used
upon installation.  This scheme is used when a component is installed through
Distutils with a specific home prefix.
posix_user: scheme for Posix platforms used when a component is installed
through Distutils and the user option is used.  This scheme defines paths
located under the user home directory.
nt: scheme for NT platforms like Windows.
nt_user: scheme for NT platforms, when the user option is used.

Each scheme is itself composed of a series of paths and each path has a unique
identifier.  Python currently uses eight paths:

stdlib: directory containing the standard Python library files that are not
platform-specific.
platstdlib: directory containing the standard Python library files that are
platform-specific.
platlib: directory for site-specific, platform-specific files.
purelib: directory for site-specific, non-platform-specific files.
include: directory for non-platform-specific header files.
platinclude: directory for platform-specific header files.
scripts: directory for script files.
data: directory for data files.

 provides some functions to determine these paths.


()¶
Return a tuple containing all schemes currently supported in
.



()¶
Return a tuple containing all path names currently supported in
.



(name[, scheme[, vars[, expand]]])¶
Return an installation path corresponding to the path name, from the
install scheme named scheme.
name has to be a value from the list returned by .
 stores installation paths corresponding to each path name,
for each platform, with variables to be expanded.  For instance the stdlib
path for the nt scheme is: .
 will use the variables returned by 
to expand the path.  All variables have default values for each platform so
one may call this function and get the default value.
If scheme is provided, it must be a value from the list returned by
.  Otherwise, the default scheme for the current
platform is used.
If vars is provided, it must be a dictionary of variables that will update
the dictionary return by .
If expand is set to , the path will not be expanded using the
variables.
If name is not found, return .



([scheme[, vars[, expand]]])¶
Return a dictionary containing all installation paths corresponding to an
installation scheme. See  for more information.
If scheme is not provided, will use the default scheme for the current
platform.
If vars is provided, it must be a dictionary of variables that will
update the dictionary used to expand the paths.
If expand is set to false, the paths will not be expanded.
If scheme is not an existing scheme,  will raise a
.



Other functions¶


()¶
Return the  Python version number as a string.  Similar to
.



()¶
Return a string that identifies the current platform.
This is used mainly to distinguish platform-specific build directories and
platform-specific built distributions.  Typically includes the OS name and
version and the architecture (as supplied by ‘os.uname()’), although the
exact information included depends on the OS; e.g., on Linux, the kernel
version isn’t particularly important.
Examples of returned values:

linux-i586
linux-alpha (?)
solaris-2.6-sun4u

Windows will return one of:

win-amd64 (64bit Windows on AMD64, aka x86_64, Intel64, and EM64T)
win32 (all others - specifically, sys.platform is returned)

Mac OS X can return:

macosx-10.6-ppc
macosx-10.4-ppc64
macosx-10.3-i386
macosx-10.4-fat

For other non-POSIX platforms, currently just returns .



()¶
Return  if the running Python interpreter was built from source and
is being run from its built location, and not from a location resulting from
e.g. running  or installing via a binary installer.



(fp[, vars])¶
Parse a -style file.
fp is a file-like object pointing to the -like file.
A dictionary containing name/value pairs is returned.  If an optional
dictionary is passed in as the second argument, it is used instead of a new
dictionary, and updated with the values read in the file.



()¶
Return the path of .



()¶
Return the path of .



Using  as a script¶
You can use  as a script with Python’s -m option:


This call will print in the standard output the information returned by
, ,  and
.


