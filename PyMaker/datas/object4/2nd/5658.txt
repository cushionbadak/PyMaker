link:
library/email.contentmanager.html#module-email.contentmanager

docs:

: Managing MIME Content¶
Source code: Lib/email/contentmanager.py


New in version 3.6: [1]



class ¶
Base class for content managers.  Provides the standard registry mechanisms
to register converters between MIME content and other representations, as
well as the  and  dispatch methods.


(msg, *args, **kw)¶
Look up a handler function based on the  of msg (see next
paragraph), call it, passing through all arguments, and return the result
of the call.  The expectation is that the handler will extract the
payload from msg and return an object that encodes information about
the extracted data.
To find the handler, look for the following keys in the registry,
stopping with the first one found:


the string representing the full MIME type ()
the string representing the 
the empty string


If none of these keys produce a handler, raise a  for the
full MIME type.



(msg, obj, *args, **kw)¶
If the  is , raise a ; otherwise
look up a handler function based on the type of obj (see next
paragraph), call  on the
msg, and call the handler function, passing through all arguments.  The
expectation is that the handler will transform and store obj into
msg, possibly making other changes to msg as well, such as adding
various MIME headers to encode information needed to interpret the stored
data.
To find the handler, obtain the type of obj (), and
look for the following keys in the registry, stopping with the first one
found:


the type itself ()
the type’s fully qualified name ().
the type’s qualname ()
the type’s name ().


If none of the above match, repeat all of the checks above for each of
the types in the MRO ().  Finally, if no other key
yields a handler, check for a handler for the key .  If there is
no handler for , raise a  for the fully
qualified name of the type.
Also add a MIME-Version header if one is not present (see
also ).



(key, handler)¶
Record the function handler as the handler for key.  For the possible
values of key, see .



(typekey, handler)¶
Record handler as the function to call when an object of a type
matching typekey is passed to .  For the possible
values of typekey, see .



Content Manager Instances¶
Currently the email package provides only one concrete content manager,
, although more may be added in the future.
 is the
 provided by
 and its derivatives.


¶
This content manager provides only a minimum interface beyond that provided
by  itself:  it deals only with text, raw
byte strings, and  objects.  Nevertheless, it
provides significant advantages compared to the base API:  on
a text part will return a unicode string without the application needing to
manually decode it,  provides a rich set of options for
controlling the headers added to a part and controlling the content transfer
encoding, and it enables the use of the various  methods, thereby
simplifying the creation of multipart messages.


(msg, errors='replace')¶
Return the payload of the part as either a string (for  parts), an
 object (for 
parts), or a  object (for all other non-multipart types).  Raise
a  if called on a .  If the part is a
 part and errors is specified, use it as the error handler when
decoding the payload to unicode.  The default error handler is
.



(msg, <'str'>, subtype="plain", charset='utf-8'                     cte=None, disposition=None, filename=None, cid=None, params=None, headers=None)¶

(msg, <'bytes'>, maintype, subtype, cte="base64", disposition=None, filename=None, cid=None, params=None, headers=None)

(msg, <'EmailMessage'>, cte=None, disposition=None, filename=None, cid=None, params=None, headers=None)
Add headers and payload to msg:
Add a Content-Type header with a 
value.


For , set the MIME  to , and set the
subtype to subtype if it is specified, or  if it is not.
For , use the specified maintype and subtype, or
raise a  if they are not specified.
For  objects, set the maintype
to , and set the subtype to subtype if it is
specified or  if it is not.  If subtype is
, raise an error ( objects must be used to
construct  parts).


If charset is provided (which is valid only for ), encode the
string to bytes using the specified character set.  The default is
.  If the specified charset is a known alias for a standard
MIME charset name, use the standard charset instead.
If cte is set, encode the payload using the specified content transfer
encoding, and set the Content-Transfer-Encoding header to
that value.  Possible values for cte are ,
, , , and .  If the input cannot be
encoded in the specified encoding (for example, specifying a cte of
 for an input that contains non-ASCII values), raise a
.


For  objects, if cte is not set use heuristics to
determine the most compact encoding.
For , per RFC 2046, raise
an error if a cte of  or  is
requested for subtype , and for any cte other than
 for subtype .  For
, use  if cte is not specified.  For
all other values of subtype, use .



Note
A cte of  does not actually work correctly yet.
The  object as modified by  is
correct, but  does not
serialize it correctly.

If disposition is set, use it as the value of the
Content-Disposition header.  If not specified, and
filename is specified, add the header with the value .
If disposition is not specified and filename is also not specified,
do not add the header.  The only valid values for disposition are
 and .
If filename is specified, use it as the value of the 
parameter of the Content-Disposition header.
If cid is specified, add a Content-ID header with
cid as its value.
If params is specified, iterate its  method and use the
resulting  pairs to set additional parameters on the
Content-Type header.
If headers is specified and is a list of strings of the form
 or a list of  objects
(distinguished from strings by having a  attribute), add the
headers to msg.


Footnotes



[1]Originally added in 3.4 as a provisional module



