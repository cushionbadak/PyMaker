link:
library/xml.dom.html

docs:


 — The Document Object Model API¶
Source code: Lib/xml/dom/__init__.py

The Document Object Model, or “DOM,” is a cross-language API from the World Wide
Web Consortium (W3C) for accessing and modifying XML documents.  A DOM
implementation presents an XML document as a tree structure, or allows client
code to build such a structure from scratch.  It then gives access to the
structure through a set of objects which provided well-known interfaces.
The DOM is extremely useful for random-access applications.  SAX only allows you
a view of one bit of the document at a time.  If you are looking at one SAX
element, you have no access to another.  If you are looking at a text node, you
have no access to a containing element. When you write a SAX application, you
need to keep track of your program’s position in the document somewhere in your
own code.  SAX does not do it for you.  Also, if you need to look ahead in the
XML document, you are just out of luck.
Some applications are simply impossible in an event driven model with no access
to a tree.  Of course you could build some sort of tree yourself in SAX events,
but the DOM allows you to avoid writing that code.  The DOM is a standard tree
representation for XML data.
The Document Object Model is being defined by the W3C in stages, or “levels” in
their terminology.  The Python mapping of the API is substantially based on the
DOM Level 2 recommendation.
DOM applications typically start by parsing some XML into a DOM.  How this is
accomplished is not covered at all by DOM Level 1, and Level 2 provides only
limited improvements: There is a  object class which
provides access to  creation methods, but no way to access an
XML reader/parser/Document builder in an implementation-independent way. There
is also no well-defined way to access these methods without an existing
 object.  In Python, each DOM implementation will provide a
function . DOM Level 3 adds a Load/Store
specification, which defines an interface to the reader, but this is not yet
available in the Python standard library.
Once you have a DOM document object, you can access the parts of your XML
document through its properties and methods.  These properties are defined in
the DOM specification; this portion of the reference manual describes the
interpretation of the specification in Python.
The specification provided by the W3C defines the DOM API for Java, ECMAScript,
and OMG IDL.  The Python mapping defined here is based in large part on the IDL
version of the specification, but strict compliance is not required (though
implementations are free to support the strict mapping from IDL).  See section
Conformance for a detailed discussion of mapping requirements.

See also

Document Object Model (DOM) Level 2 Specification
The W3C recommendation upon which the Python DOM API is based.
Document Object Model (DOM) Level 1 Specification
The W3C recommendation for the DOM supported by .
Python Language Mapping Specification
This specifies the mapping from OMG IDL to Python.



Module Contents¶
The  contains the following functions:


(name, factory)¶
Register the factory function with the name name.  The factory function
should return an object which implements the 
interface.  The factory function can return the same object every time, or a new
one for each call, as appropriate for the specific implementation (e.g. if that
implementation supports some customization).



(name=None, features=())¶
Return a suitable DOM implementation. The name is either well-known, the
module name of a DOM implementation, or . If it is not , imports
the corresponding module and returns a  object if the
import succeeds.  If no name is given, and if the environment variable
 is set, this variable is used to find the implementation.
If name is not given, this examines the available implementations to find one
with the required feature set.  If no implementation can be found, raise an
.  The features list must be a sequence of  pairs which are passed to the  method on available
 objects.

Some convenience constants are also provided:


¶
The value used to indicate that no namespace is associated with a node in the
DOM.  This is typically found as the  of a node, or used as
the namespaceURI parameter to a namespaces-specific method.



¶
The namespace URI associated with the reserved prefix , as defined by
Namespaces in XML (section 4).



¶
The namespace URI for namespace declarations, as defined by Document Object
Model (DOM) Level 2 Core Specification (section 1.1.8).



¶
The URI of the XHTML namespace as defined by XHTML 1.0: The Extensible
HyperText Markup Language (section 3.1.1).

In addition,  contains a base  class and the DOM
exception classes.  The  class provided by this module does not
implement any of the methods or attributes defined by the DOM specification;
concrete DOM implementations must provide those.  The  class
provided as part of this module does provide the constants used for the
 attribute on concrete  objects; they are located
within the class rather than at the module level to conform with the DOM
specifications.


Objects in the DOM¶
The definitive documentation for the DOM is the DOM specification from the W3C.
Note that DOM attributes may also be manipulated as nodes instead of as simple
strings.  It is fairly rare that you must do this, however, so this usage is not
yet documented.







Interface
Section
Purpose




DOMImplementation Objects
Interface to the underlying
implementation.


Node Objects
Base interface for most objects
in a document.


NodeList Objects
Interface for a sequence of
nodes.


DocumentType Objects
Information about the
declarations needed to process
a document.


Document Objects
Object which represents an
entire document.


Element Objects
Element nodes in the document
hierarchy.


Attr Objects
Attribute value nodes on
element nodes.


Comment Objects
Representation of comments in
the source document.


Text and CDATASection Objects
Nodes containing textual
content from the document.


ProcessingInstruction Objects
Processing instruction
representation.



An additional section describes the exceptions defined for working with the DOM
in Python.

DOMImplementation Objects¶
The  interface provides a way for applications to
determine the availability of particular features in the DOM they are using.
DOM Level 2 added the ability to create new  and
 objects using the  as well.


(feature, version)¶
Return true if the feature identified by the pair of strings feature and
version is implemented.



(namespaceUri, qualifiedName, doctype)¶
Return a new  object (the root of the DOM), with a child
 object having the given namespaceUri and qualifiedName. The
doctype must be a  object created by
, or . In the Python DOM API, the first two
arguments can also be  in order to indicate that no 
child is to be created.



(qualifiedName, publicId, systemId)¶
Return a new  object that encapsulates the given
qualifiedName, publicId, and systemId strings, representing the
information contained in an XML document type declaration.



Node Objects¶
All of the components of an XML document are subclasses of .


¶
An integer representing the node type.  Symbolic constants for the types are on
the  object: , ,
, , ,
, ,
, , .
This is a read-only attribute.



¶
The parent of the current node, or  for the document node. The value is
always a  object or .  For  nodes, this
will be the parent element, except for the root element, in which case it will
be the  object. For  nodes, this is always
. This is a read-only attribute.



¶
A  of attribute objects.  Only elements have actual values
for this; others provide  for this attribute. This is a read-only
attribute.



¶
The node that immediately precedes this one with the same parent.  For
instance the element with an end-tag that comes just before the self
element’s start-tag.  Of course, XML documents are made up of more than just
elements so the previous sibling could be text, a comment, or something else.
If this node is the first child of the parent, this attribute will be
. This is a read-only attribute.



¶
The node that immediately follows this one with the same parent.  See also
.  If this is the last child of the parent, this
attribute will be . This is a read-only attribute.



¶
A list of nodes contained within this node. This is a read-only attribute.



¶
The first child of the node, if there are any, or . This is a read-only
attribute.



¶
The last child of the node, if there are any, or . This is a read-only
attribute.



¶
The part of the  following the colon if there is one, else the
entire .  The value is a string.



¶
The part of the  preceding the colon if there is one, else the
empty string.  The value is a string, or .



¶
The namespace associated with the element name.  This will be a string or
.  This is a read-only attribute.



¶
This has a different meaning for each node type; see the DOM specification for
details.  You can always get the information you would get here from another
property such as the  property for elements or the 
property for attributes. For all node types, the value of this attribute will be
either a string or .  This is a read-only attribute.



¶
This has a different meaning for each node type; see the DOM specification for
details.  The situation is similar to that with .  The value is
a string or .



()¶
Returns true if the node has any attributes.



()¶
Returns true if the node has any child nodes.



(other)¶
Returns true if other refers to the same node as this node. This is especially
useful for DOM implementations which use any sort of proxy architecture (because
more than one object can refer to the same node).

Note
This is based on a proposed DOM Level 3 API which is still in the “working
draft” stage, but this particular interface appears uncontroversial.  Changes
from the W3C will not necessarily affect this method in the Python DOM interface
(though any new W3C API for this would also be supported).




(newChild)¶
Add a new child node to this node at the end of the list of
children, returning newChild. If the node was already in
the tree, it is removed first.



(newChild, refChild)¶
Insert a new child node before an existing child.  It must be the case that
refChild is a child of this node; if not,  is raised.
newChild is returned. If refChild is , it inserts newChild at the
end of the children’s list.



(oldChild)¶
Remove a child node.  oldChild must be a child of this node; if not,
 is raised.  oldChild is returned on success.  If oldChild
will not be used further, its  method should be called.



(newChild, oldChild)¶
Replace an existing node with a new node. It must be the case that  oldChild
is a child of this node; if not,  is raised.



()¶
Join adjacent text nodes so that all stretches of text are stored as single
 instances.  This simplifies processing text from a DOM tree for
many applications.



(deep)¶
Clone this node.  Setting deep means to clone all child nodes as well.  This
returns the clone.



NodeList Objects¶
A  represents a sequence of nodes.  These objects are used in
two ways in the DOM Core recommendation:  an  object provides
one as its list of child nodes, and the  and
 methods of  return objects with this
interface to represent query results.
The DOM Level 2 recommendation defines one method and one attribute for these
objects:


(i)¶
Return the i’th item from the sequence, if there is one, or .  The
index i is not allowed to be less than zero or greater than or equal to the
length of the sequence.



¶
The number of nodes in the sequence.

In addition, the Python DOM interface requires that some additional support is
provided to allow  objects to be used as Python sequences.  All
 implementations must include support for
 and
; this allows iteration over the  in
 statements and proper support for the  built-in
function.
If a DOM implementation supports modification of the document, the
 implementation must also support the
 and  methods.


DocumentType Objects¶
Information about the notations and entities declared by a document (including
the external subset if the parser uses it and can provide the information) is
available from a  object.  The  for a
document is available from the  object’s 
attribute; if there is no  declaration for the document, the
document’s  attribute will be set to  instead of an
instance of this interface.
 is a specialization of , and adds the
following attributes:


¶
The public identifier for the external subset of the document type definition.
This will be a string or .



¶
The system identifier for the external subset of the document type definition.
This will be a URI as a string, or .



¶
A string giving the complete internal subset from the document. This does not
include the brackets which enclose the subset.  If the document has no internal
subset, this should be .



¶
The name of the root element as given in the  declaration, if
present.



¶
This is a  giving the definitions of external entities.
For entity names defined more than once, only the first definition is provided
(others are ignored as required by the XML recommendation).  This may be
 if the information is not provided by the parser, or if no entities are
defined.



¶
This is a  giving the definitions of notations. For
notation names defined more than once, only the first definition is provided
(others are ignored as required by the XML recommendation).  This may be
 if the information is not provided by the parser, or if no notations
are defined.



Document Objects¶
A  represents an entire XML document, including its constituent
elements, attributes, processing instructions, comments etc.  Remember that it
inherits properties from .


¶
The one and only root element of the document.



(tagName)¶
Create and return a new element node.  The element is not inserted into the
document when it is created.  You need to explicitly insert it with one of the
other methods such as  or .



(namespaceURI, tagName)¶
Create and return a new element with a namespace.  The tagName may have a
prefix.  The element is not inserted into the document when it is created.  You
need to explicitly insert it with one of the other methods such as
 or .



(data)¶
Create and return a text node containing the data passed as a parameter.  As
with the other creation methods, this one does not insert the node into the
tree.



(data)¶
Create and return a comment node containing the data passed as a parameter.  As
with the other creation methods, this one does not insert the node into the
tree.



(target, data)¶
Create and return a processing instruction node containing the target and
data passed as parameters.  As with the other creation methods, this one does
not insert the node into the tree.



(name)¶
Create and return an attribute node.  This method does not associate the
attribute node with any particular element.  You must use
 on the appropriate  object to use the
newly created attribute instance.



(namespaceURI, qualifiedName)¶
Create and return an attribute node with a namespace.  The tagName may have a
prefix.  This method does not associate the attribute node with any particular
element.  You must use  on the appropriate
 object to use the newly created attribute instance.



(tagName)¶
Search for all descendants (direct children, children’s children, etc.) with a
particular element type name.



(namespaceURI, localName)¶
Search for all descendants (direct children, children’s children, etc.) with a
particular namespace URI and localname.  The localname is the part of the
namespace after the prefix.



Element Objects¶
 is a subclass of , so inherits all the attributes
of that class.


¶
The element type name.  In a namespace-using document it may have colons in it.
The value is a string.



(tagName)¶
Same as equivalent method in the  class.



(namespaceURI, localName)¶
Same as equivalent method in the  class.



(name)¶
Returns true if the element has an attribute named by name.



(namespaceURI, localName)¶
Returns true if the element has an attribute named by namespaceURI and
localName.



(name)¶
Return the value of the attribute named by name as a string. If no such
attribute exists, an empty string is returned, as if the attribute had no value.



(attrname)¶
Return the  node for the attribute named by attrname.



(namespaceURI, localName)¶
Return the value of the attribute named by namespaceURI and localName as a
string. If no such attribute exists, an empty string is returned, as if the
attribute had no value.



(namespaceURI, localName)¶
Return an attribute value as a node, given a namespaceURI and localName.



(name)¶
Remove an attribute by name.  If there is no matching attribute, a
 is raised.



(oldAttr)¶
Remove and return oldAttr from the attribute list, if present. If oldAttr is
not present,  is raised.



(namespaceURI, localName)¶
Remove an attribute by name.  Note that it uses a localName, not a qname.  No
exception is raised if there is no matching attribute.



(name, value)¶
Set an attribute value from a string.



(newAttr)¶
Add a new attribute node to the element, replacing an existing attribute if
necessary if the  attribute matches.  If a replacement occurs, the
old attribute node will be returned.  If newAttr is already in use,
 will be raised.



(newAttr)¶
Add a new attribute node to the element, replacing an existing attribute if
necessary if the  and  attributes match.
If a replacement occurs, the old attribute node will be returned.  If newAttr
is already in use,  will be raised.



(namespaceURI, qname, value)¶
Set an attribute value from a string, given a namespaceURI and a qname.
Note that a qname is the whole attribute name.  This is different than above.



Attr Objects¶
 inherits from , so inherits all its attributes.


¶
The attribute name.
In a namespace-using document it may include a colon.



¶
The part of the name following the colon if there is one, else the
entire name.
This is a read-only attribute.



¶
The part of the name preceding the colon if there is one, else the
empty string.



¶
The text value of the attribute.  This is a synonym for the
 attribute.



NamedNodeMap Objects¶
 does not inherit from .


¶
The length of the attribute list.



(index)¶
Return an attribute with a particular index.  The order you get the attributes
in is arbitrary but will be consistent for the life of a DOM.  Each item is an
attribute node.  Get its value with the  attribute.

There are also experimental methods that give this class more mapping behavior.
You can use them or you can use the standardized  family
of methods on the  objects.


Comment Objects¶
 represents a comment in the XML document.  It is a subclass of
, but cannot have child nodes.


¶
The content of the comment as a string.  The attribute contains all characters
between the leading  and trailing , but does not
include them.



Text and CDATASection Objects¶
The  interface represents text in the XML document.  If the parser
and DOM implementation support the DOM’s XML extension, portions of the text
enclosed in CDATA marked sections are stored in  objects.
These two interfaces are identical, but provide different values for the
 attribute.
These interfaces extend the  interface.  They cannot have child
nodes.


¶
The content of the text node as a string.


Note
The use of a  node does not indicate that the node
represents a complete CDATA marked section, only that the content of the node
was part of a CDATA section.  A single CDATA section may be represented by more
than one node in the document tree.  There is no way to determine whether two
adjacent  nodes represent different CDATA marked sections.



ProcessingInstruction Objects¶
Represents a processing instruction in the XML document; this inherits from the
 interface and cannot have child nodes.


¶
The content of the processing instruction up to the first whitespace character.
This is a read-only attribute.



¶
The content of the processing instruction following the first whitespace
character.



Exceptions¶
The DOM Level 2 recommendation defines a single exception, ,
and a number of constants that allow applications to determine what sort of
error occurred.  instances carry a  attribute
that provides the appropriate value for the specific exception.
The Python DOM interface provides the constants, but also expands the set of
exceptions so that a specific exception exists for each of the exception codes
defined by the DOM.  The implementations must raise the appropriate specific
exception, each of which carries the appropriate value for the 
attribute.


exception ¶
Base exception class used for all specific DOM exceptions.  This exception class
cannot be directly instantiated.



exception ¶
Raised when a specified range of text does not fit into a string. This is not
known to be used in the Python DOM implementations, but may be received from DOM
implementations not written in Python.



exception ¶
Raised when an attempt is made to insert a node where the node type is not
allowed.



exception ¶
Raised when an index or size parameter to a method is negative or exceeds the
allowed values.



exception ¶
Raised when an attempt is made to insert an  node that is already
present elsewhere in the document.



exception ¶
Raised if a parameter or an operation is not supported on the underlying object.



exception ¶
This exception is raised when a string parameter contains a character that is
not permitted in the context it’s being used in by the XML 1.0 recommendation.
For example, attempting to create an  node with a space in the
element type name will cause this error to be raised.



exception ¶
Raised when an attempt is made to modify the type of a node.



exception ¶
Raised when an attempt is made to use an object that is not defined or is no
longer usable.



exception ¶
If an attempt is made to change any object in a way that is not permitted with
regard to the Namespaces in XML
recommendation, this exception is raised.



exception ¶
Exception when a node does not exist in the referenced context.  For example,
 will raise this if the node passed in does
not exist in the map.



exception ¶
Raised when the implementation does not support the requested type of object or
operation.



exception ¶
This is raised if data is specified for a node which does not support data.



exception ¶
Raised on attempts to modify an object where modifications are not allowed (such
as for read-only nodes).



exception ¶
Raised when an invalid or illegal string is specified.



exception ¶
Raised when a node is inserted in a different document than it currently belongs
to, and the implementation does not support migrating the node from one document
to the other.

The exception codes defined in the DOM recommendation map to the exceptions
described above according to this table:






Constant
Exception





















































Conformance¶
This section describes the conformance requirements and relationships between
the Python DOM API, the W3C DOM recommendations, and the OMG IDL mapping for
Python.

Type Mapping¶
The IDL types used in the DOM specification are mapped to Python types
according to the following table.






IDL Type
Python Type




 or 











 or 








Accessor Methods¶
The mapping from OMG IDL to Python defines accessor functions for IDL
 declarations in much the way the Java mapping does.
Mapping the IDL declarations


yields three accessor functions:  a “get” method for 
(), and “get” and “set” methods for 
( and ).  The mapping, in
particular, does not require that the IDL attributes are accessible as normal
Python attributes:   is not required to work, and may
raise an .
The Python DOM API, however, does require that normal attribute access work.
This means that the typical surrogates generated by Python IDL compilers are not
likely to work, and wrapper objects may be needed on the client if the DOM
objects are accessed via CORBA. While this does require some additional
consideration for CORBA DOM clients, the implementers with experience using DOM
over CORBA from Python do not consider this a problem.  Attributes that are
declared  may not restrict write access in all DOM
implementations.
In the Python DOM API, accessor functions are not required.  If provided, they
should take the form defined by the Python IDL mapping, but these methods are
considered unnecessary since the attributes are accessible directly from Python.
“Set” accessors should never be provided for  attributes.
The IDL definitions do not fully embody the requirements of the W3C DOM API,
such as the notion of certain objects, such as the return value of
, being “live”.  The Python DOM API does not require
implementations to enforce such requirements.



