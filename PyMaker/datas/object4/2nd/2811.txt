link:
library/plistlib.html#module-plistlib

docs:

 — Generate and parse Mac OS X  files¶
Source code: Lib/plistlib.py

This module provides an interface for reading and writing the “property list”
files used mainly by Mac OS X and supports both binary and XML plist files.
The property list () file format is a simple serialization supporting
basic object types, like dictionaries, lists, numbers and strings.  Usually the
top level object is a dictionary.
To write out and to parse a plist file, use the  and
 functions.
To work with plist data in bytes objects, use 
and .
Values can be strings, integers, floats, booleans, tuples, lists, dictionaries
(but only with string keys), , , 
or  objects.

Changed in version 3.4: New API, old API deprecated.  Support for binary format plists added.


See also

PList manual page
Apple’s documentation of the file format.


This module defines the following functions:


(fp, *, fmt=None, use_builtin_types=True, dict_type=dict)¶
Read a plist file. fp should be a readable and binary file object.
Return the unpacked root object (which usually is a
dictionary).
The fmt is the format of the file and the following values are valid:

: Autodetect the file format
: XML file format
: Binary plist format

If use_builtin_types is true (the default) binary data will be returned
as instances of , otherwise it is returned as instances of
.
The dict_type is the type used for dictionaries that are read from the
plist file.
XML data for the  format is parsed using the Expat parser
from  – see its documentation for possible
exceptions on ill-formed XML.  Unknown elements will simply be ignored
by the plist parser.
The parser for the binary format raises 
when the file cannot be parsed.

New in version 3.4.




(data, *, fmt=None, use_builtin_types=True, dict_type=dict)¶
Load a plist from a bytes object. See  for an explanation of
the keyword arguments.

New in version 3.4.




(value, fp, *, fmt=FMT_XML, sort_keys=True, skipkeys=False)¶
Write value to a plist file. Fp should be a writable, binary
file object.
The fmt argument specifies the format of the plist file and can be
one of the following values:

: XML formatted plist file
: Binary formatted plist file

When sort_keys is true (the default) the keys for dictionaries will be
written to the plist in sorted order, otherwise they will be written in
the iteration order of the dictionary.
When skipkeys is false (the default) the function raises 
when a key of a dictionary is not a string, otherwise such keys are skipped.
A  will be raised if the object is of an unsupported type or
a container that contains objects of unsupported types.
An  will be raised for integer values that cannot
be represented in (binary) plist files.

New in version 3.4.




(value, *, fmt=FMT_XML, sort_keys=True, skipkeys=False)¶
Return value as a plist-formatted bytes object. See
the documentation for  for an explanation of the keyword
arguments of this function.

New in version 3.4.


The following functions are deprecated:


(pathOrFile)¶
Read a plist file. pathOrFile may be either a file name or a (readable
and binary) file object. Returns the unpacked root object (which usually
is a dictionary).
This function calls  to do the actual work, see the documentation
of  for an explanation of the keyword arguments.

Deprecated since version 3.4: Use  instead.


Changed in version 3.7: Dict values in the result are now normal dicts.  You no longer can use
attribute access to access items of these dictionaries.




(rootObject, pathOrFile)¶
Write rootObject to an XML plist file. pathOrFile may be either a file name
or a (writable and binary) file object

Deprecated since version 3.4: Use  instead.




(data)¶
Read a plist data from a bytes object.  Return the root object.
See  for a description of the keyword arguments.

Deprecated since version 3.4: Use  instead.


Changed in version 3.7: Dict values in the result are now normal dicts.  You no longer can use
attribute access to access items of these dictionaries.




(rootObject)¶
Return rootObject as an XML plist-formatted bytes object.

Deprecated since version 3.4: Use  instead.


The following classes are available:


class (data)¶
Return a “data” wrapper object around the bytes object data.  This is used
in functions converting from/to plists to represent the  type
available in plists.
It has one attribute, , that can be used to retrieve the Python
bytes object stored in it.

Deprecated since version 3.4: Use a  object instead.


The following constants are available:


¶
The XML format for plist files.

New in version 3.4.




¶
The binary format for plist files

New in version 3.4.



Examples¶
Generating a plist:


Parsing a plist:



