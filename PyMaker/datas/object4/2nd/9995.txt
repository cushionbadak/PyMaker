link:
library/dis.html#bytecode-analysis

docs:

Bytecode analysis¶

New in version 3.4.

The bytecode analysis API allows pieces of Python code to be wrapped in a
 object that provides easy access to details of the compiled
code.


class (x, *, first_line=None, current_offset=None)¶
Analyse the bytecode corresponding to a function, generator, asynchronous
generator, coroutine, method, string of source code, or a code object (as
returned by ).
This is a convenience wrapper around many of the functions listed below, most
notably , as iterating over a 
instance yields the bytecode operations as  instances.
If first_line is not , it indicates the line number that should be
reported for the first source line in the disassembled code.  Otherwise, the
source line information (if any) is taken directly from the disassembled code
object.
If current_offset is not , it refers to an instruction offset in the
disassembled code. Setting this means  will display a “current
instruction” marker against the specified opcode.


classmethod (tb)¶
Construct a  instance from the given traceback, setting
current_offset to the instruction responsible for the exception.



¶
The compiled code object.



¶
The first source line of the code object (if available)



()¶
Return a formatted view of the bytecode operations (the same as printed by
, but returned as a multi-line string).



()¶
Return a formatted multi-line string with detailed information about the
code object, like .


Changed in version 3.7: This can now handle coroutine and asynchronous generator objects.


Example:


