link:
library/asynchat.html#module-asynchat

docs:

 — Asynchronous socket command/response handler¶
Source code: Lib/asynchat.py

Deprecated since version 3.6: Please use  instead.



Note
This module exists for backwards compatibility only.  For new code we
recommend using .

This module builds on the  infrastructure, simplifying
asynchronous clients and servers and making it easier to handle protocols
whose elements are terminated by arbitrary strings, or are of variable length.
 defines the abstract class  that you
subclass, providing implementations of the  and
 methods. It uses the same asynchronous loop as
, and the two types of channel, 
and , can freely be mixed in the channel map.
Typically an  server channel generates new
 channel objects as it receives incoming
connection requests.


class ¶
This class is an abstract subclass of . To make
practical use of the code you must subclass , providing
meaningful  and 
methods.
The  methods can be used, although not all make
sense in a message/response context.
Like ,  defines a set of
events that are generated by an analysis of socket conditions after a
 call. Once the polling loop has been started the
 object’s methods are called by the event-processing
framework with no action on the part of the programmer.
Two class attributes can be modified, to improve performance, or possibly
even to conserve memory.


¶
The asynchronous input buffer size (default ).



¶
The asynchronous output buffer size (default ).

Unlike ,  allows you to
define a FIFO queue of producers. A producer need
have only one method, , which should return data to be
transmitted on the channel.
The producer indicates exhaustion (i.e. that it contains no more data) by
having its  method return the empty bytes object. At this point
the  object removes the producer from the queue and starts
using the next producer, if any. When the producer queue is empty the
 method does nothing. You use the channel object’s
 method to describe how to recognize the end of, or
an important breakpoint in, an incoming transmission from the remote
endpoint.
To build a functioning  subclass your  input methods
 and  must handle the
data that the channel receives asynchronously. The methods are described
below.



()¶
Pushes a  on to the producer queue. When this producer is popped off
the queue it causes the channel to be closed.



(data)¶
Called with data holding an arbitrary amount of received data.  The
default method, which must be overridden, raises a
 exception.



()¶
In emergencies this method will discard any data held in the input and/or
output buffers and the producer queue.



()¶
Called when the incoming data stream  matches the termination condition set
by . The default method, which must be overridden,
raises a  exception. The buffered input data
should be available via an instance attribute.



()¶
Returns the current terminator for the channel.



(data)¶
Pushes data on to the channel’s queue to ensure its transmission.
This is all you need to do to have the channel write the data out to the
network, although it is possible to use your own producers in more complex
schemes to implement encryption and chunking, for example.



(producer)¶
Takes a producer object and adds it to the producer queue associated with
the channel.  When all currently-pushed producers have been exhausted the
channel will consume this producer’s data by calling its 
method and send the data to the remote endpoint.



(term)¶
Sets the terminating condition to be recognized on the channel.  
may be any of three types of value, corresponding to three different ways
to handle incoming protocol data.






term
Description



string
Will call  when the
string is found in the input stream

integer
Will call  when the
indicated number of characters have been
received


The channel continues to collect data
forever



Note that any data following the terminator will be available for reading
by the channel after  is called.


asynchat Example¶
The following partial example shows how HTTP requests can be read with
.  A web server might create an
 object for each incoming client connection.
Notice that initially the channel terminator is set to match the blank line at
the end of the HTTP headers, and a flag indicates that the headers are being
read.
Once the headers have been read, if the request is of type POST (indicating
that further data are present in the input stream) then the
 header is used to set a numeric terminator to read the
right amount of data from the channel.
The  method is called once all relevant input has been
marshalled, after setting the channel terminator to  to ensure that
any extraneous data sent by the web client are ignored.



