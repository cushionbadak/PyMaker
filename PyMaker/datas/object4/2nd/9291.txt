link:
library/warnings.html#the-warnings-filter

docs:

The Warnings Filter¶
The warnings filter controls whether warnings are ignored, displayed, or turned
into errors (raising an exception).
Conceptually, the warnings filter maintains an ordered list of filter
specifications; any specific warning is matched against each filter
specification in the list in turn until a match is found; the filter determines
the disposition of the match.  Each entry is a tuple of the form (action,
message, category, module, lineno), where:

action is one of the following strings:






Value
Disposition




print the first occurrence of matching
warnings for each location (module +
line number) where the warning is issued


turn matching warnings into exceptions


never print matching warnings


always print matching warnings


print the first occurrence of matching
warnings for each module where the warning
is issued (regardless of line number)


print only the first occurrence of matching
warnings, regardless of location




message is a string containing a regular expression that the start of
the warning message must match.  The expression is compiled to always be
case-insensitive.

category is a class (a subclass of ) of which the warning
category must be a subclass in order to match.

module is a string containing a regular expression that the module name must
match.  The expression is compiled to be case-sensitive.

lineno is an integer that the line number where the warning occurred must
match, or  to match all line numbers.


Since the  class is derived from the built-in 
class, to turn a warning into an error we simply raise .
If a warning is reported and doesn’t match any registered filter then the
“default” action is applied (hence its name).

Describing Warning Filters¶
The warnings filter is initialized by  options passed to the Python
interpreter command line and the  environment variable.
The interpreter saves the arguments for all supplied entries without
interpretation in ; the  module parses these
when it is first imported (invalid options are ignored, after printing a
message to ).
Individual warnings filters are specified as a sequence of fields separated by
colons:


The meaning of each of these fields is as described in The Warnings Filter.
When listing multiple filters on a single line (as for
), the individual filters are separated by commas,and
the filters listed later take precedence over those listed before them (as
they’re applied left-to-right, and the most recently applied filters take
precedence over earlier ones).
Commonly used warning filters apply to either all warnings, warnings in a
particular category, or warnings raised by particular modules or packages.
Some examples:




Default Warning Filter¶
By default, Python installs several warning filters, which can be overridden by
the  command-line option, the  environment
variable and calls to .
In regular release builds, the default warning filter has the following entries
(in order of precedence):


In debug builds, the list of default warning filters is empty.

Changed in version 3.2:  is now ignored by default in addition to
.


Changed in version 3.7:  is once again shown by default when triggered
directly by code in .


Changed in version 3.7:  no longer appears in the default filter list and is
instead configured via  when  is specified
twice.



Overriding the default filter¶
Developers of applications written in Python may wish to hide all Python level
warnings from their users by default, and only display them when running tests
or otherwise working on the application. The  attribute
used to pass filter configurations to the interpreter can be used as a marker to
indicate whether or not warnings should be disabled:


Developers of test runners for Python code are advised to instead ensure that
all warnings are displayed by default for the code under test, using code
like:


Finally, developers of interactive shells that run user code in a namespace
other than  are advised to ensure that 
messages are made visible by default, using code like the following (where
 is the module used to execute code entered interactively):



