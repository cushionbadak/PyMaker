link:
library/typing.html#classes-functions-and-decorators

docs:

Classes, functions, and decorators¶
The module defines the following classes, functions and decorators:


class ¶
Type variable.
Usage:


Type variables exist primarily for the benefit of static type
checkers.  They serve as the parameters for generic types as well
as for generic function definitions.  See class Generic for more
information on generic types.  Generic functions work as follows:


The latter example’s signature is essentially the overloading
of  and .  Also note
that if the arguments are instances of some subclass of ,
the return type is still plain .
At runtime,  will raise .  In general,
 and  should not be used with types.
Type variables may be marked covariant or contravariant by passing
 or .  See PEP 484 for more
details.  By default type variables are invariant.  Alternatively,
a type variable may specify an upper bound using .
This means that an actual type substituted (explicitly or implicitly)
for the type variable must be a subclass of the boundary type,
see PEP 484.



class ¶
Abstract base class for generic types.
A generic type is typically declared by inheriting from an
instantiation of this class with one or more type variables.
For example, a generic mapping type might be defined as:


This class can then be used as follows:





class (Generic[CT_co])¶
A variable annotated with  may accept a value of type . In
contrast, a variable annotated with  may accept values that are
classes themselves – specifically, it will accept the class object of
. For example:


Note that  is covariant:


The fact that  is covariant implies that all subclasses of
 should implement the same constructor signature and class method
signatures as . The type checker should flag violations of this,
but should also allow constructor calls in subclasses that match the
constructor calls in the indicated base class. How the type checker is
required to handle this particular case may change in future revisions of
PEP 484.
The only legal parameters for  are classes, ,
type variables, and unions of any of these types.
For example:


 is equivalent to  which in turn is equivalent
to , which is the root of Python’s metaclass hierarchy.

New in version 3.5.2.




class (Generic[T_co])¶
A generic version of .



class (Iterable[T_co])¶
A generic version of .



class (Iterable[T_co])¶
A generic version of .



class ¶
An ABC with one abstract method .



class ¶
An ABC with one abstract method .



class ¶
An ABC with one abstract method .



class ¶
An ABC with one abstract method .



class ¶
An ABC with one abstract method  that is covariant
in its return type.



class ¶
An ABC with one abstract method 
that is covariant in its return type.



class (Generic[T_co])¶
A generic version of .



class ¶
An alias to 



class ¶
An alias to 



class (Sized, Iterable[T_co], Container[T_co])¶
A generic version of 

New in version 3.6.




class (Sized, Collection[T_co])¶
A generic version of .



class (AbstractSet[T])¶
A generic version of .



class (Sized, Collection[KT], Generic[VT_co])¶
A generic version of .
This type can be used as follows:





class (Mapping[KT, VT])¶
A generic version of .



class (Reversible[T_co], Collection[T_co])¶
A generic version of .



class (Sequence[T])¶
A generic version of .



class (Sequence[int])¶
A generic version of .
This type represents the types , ,
and .
As a shorthand for this type,  can be used to
annotate arguments of any of the types mentioned above.



class (deque, MutableSequence[T])¶
A generic version of .

New in version 3.6.1.




class (list, MutableSequence[T])¶
Generic version of .
Useful for annotating return types. To annotate arguments it is preferred
to use an abstract collection type such as  or
.
This type may be used as follows:





class (set, MutableSet[T])¶
A generic version of .
Useful for annotating return types. To annotate arguments it is preferred
to use an abstract collection type such as .



class (frozenset, AbstractSet[T_co])¶
A generic version of .



class (Sized, Iterable[T_co])¶
A generic version of .



class (MappingView[KT_co], AbstractSet[KT_co])¶
A generic version of .



class (MappingView, Generic[KT_co, VT_co])¶
A generic version of .



class (MappingView[VT_co])¶
A generic version of .



class (Generic[T_co])¶
A generic version of .



class (Awaitable[V_co], Generic[T_co T_contra, V_co])¶
A generic version of .
The variance and order of type variables
correspond to those of , for example:





class (Generic[T_co])¶
A generic version of .



class (AsyncIterable[T_co])¶
A generic version of .



class (Generic[T_co])¶
A generic version of .

New in version 3.6.




class (Generic[T_co])¶
A generic version of .

New in version 3.6.




class (dict, MutableMapping[KT, VT])¶
A generic version of .
Useful for annotating return types. To annotate arguments it is preferred
to use an abstract collection type such as .
This type can be used as follows:





class (collections.defaultdict, MutableMapping[KT, VT])¶
A generic version of .

New in version 3.5.2.




class (collections.OrderedDict, MutableMapping[KT, VT])¶
A generic version of .

New in version 3.7.2.




class (collections.Counter, Dict[T, int])¶
A generic version of .

New in version 3.6.1.




class (collections.ChainMap, MutableMapping[KT, VT])¶
A generic version of .

New in version 3.6.1.




class (Iterator[T_co], Generic[T_co, T_contra, V_co])¶
A generator can be annotated by the generic type
. For example:


Note that unlike many other generics in the typing module, the 
of  behaves contravariantly, not covariantly or
invariantly.
If your generator will only yield values, set the  and
 to :


Alternatively, annotate your generator as having a return type of
either  or :





class (AsyncIterator[T_co], Generic[T_co, T_contra])¶
An async generator can be annotated by the generic type
. For example:


Unlike normal generators, async generators cannot return a value, so there
is no  type parameter. As with , the
 behaves contravariantly.
If your generator will only yield values, set the  to
:


Alternatively, annotate your generator as having a return type of
either  or :



New in version 3.5.4.




class ¶
 is an alias for . It is provided to supply a forward
compatible path for Python 2 code: in Python 2,  is an alias for
.
Use  to indicate that a value must contain a unicode string in
a manner that is compatible with both Python 2 and Python 3:



New in version 3.5.2.




class ¶

class ¶

class ¶
Generic type  and its subclasses 
and 
represent the types of I/O streams such as returned by
.



class ¶

class ¶
These type aliases
correspond to the return types from  and
.  These types (and the corresponding functions)
are generic in  and can be made specific by writing
, , , or
.



class ¶
Typed version of .
Usage:


This is equivalent to:


To give a field a default value, you can assign to it in the class body:


Fields with a default value must come after any fields without a default.
The resulting class has two extra attributes: ,
giving a dict mapping field names to types, and , a dict
mapping field names to default values.  (The field names are in the
 attribute, which is part of the namedtuple API.)
 subclasses can also have docstrings and methods:


Backward-compatible usage:



Changed in version 3.6: Added support for PEP 526 variable annotation syntax.


Changed in version 3.6.1: Added support for default values, methods, and docstrings.




(typ)¶
A helper function to indicate a distinct types to a typechecker,
see NewType. At runtime it returns a function that returns
its argument. Usage:



New in version 3.5.2.




(typ, val)¶
Cast a value to a type.
This returns the value unchanged.  To the type checker this
signals that the return value has the designated type, but at
runtime we intentionally don’t check anything (we want this
to be as fast as possible).



(obj[, globals[, locals]])¶
Return a dictionary containing type hints for a function, method, module
or class object.
This is often the same as . In addition,
forward references encoded as string literals are handled by evaluating
them in  and  namespaces. If necessary,
 is added for function and method annotations if a default
value equal to  is set. For a class , return
a dictionary constructed by merging all the  along
 in reverse order.



¶
The  decorator allows describing functions and methods
that support multiple different combinations of argument types. A series
of -decorated definitions must be followed by exactly one
non--decorated definition (for the same function/method).
The -decorated definitions are for the benefit of the
type checker only, since they will be overwritten by the
non--decorated definition, while the latter is used at
runtime but should be ignored by a type checker.  At runtime, calling
a -decorated function directly will raise
. An example of overload that gives a more
precise type than can be expressed using a union or a type variable:


See PEP 484 for details and comparison with other typing semantics.



¶
Decorator to indicate that annotations are not type hints.
This works as class or function decorator.  With a class, it
applies recursively to all methods defined in that class (but not
to methods defined in its superclasses or subclasses).
This mutates the function(s) in place.



¶
Decorator to give another decorator the  effect.
This wraps the decorator with something that wraps the decorated
function in .



¶
Decorator to mark a class or function to be unavailable at runtime.
This decorator is itself not available at runtime. It is mainly
intended to mark classes that are defined in type stub files if
an implementation returns an instance of a private class:


Note that returning instances of private classes is not recommended.
It is usually preferable to make such classes public.



¶
Special type indicating an unconstrained type.

Every type is compatible with .
 is compatible with every type.




¶
Special type indicating that a function never returns.
For example:



New in version 3.5.4.




¶
Union type;  means either X or Y.
To define a union, use e.g. .  Details:

The arguments must be types and there must be at least one.

Unions of unions are flattened, e.g.:



Unions of a single argument vanish, e.g.:



Redundant arguments are skipped, e.g.:



When comparing unions, the argument order is ignored, e.g.:



You cannot subclass or instantiate a union.

You cannot write .

You can use  as a shorthand for .



Changed in version 3.7: Don’t remove explicit subclasses from unions at runtime.




¶
Optional type.
 is equivalent to .
Note that this is not the same concept as an optional argument,
which is one that has a default.  An optional argument with a
default does not require the  qualifier on its type
annotation just because it is optional. For example:


On the other hand, if an explicit value of  is allowed, the
use of  is appropriate, whether the argument is optional
or not. For example:





¶
Tuple type;  is the type of a tuple of two items
with the first item of type X and the second of type Y.
Example:  is a tuple of two elements corresponding
to type variables T1 and T2.   is a tuple
of an int, a float and a string.
To specify a variable-length tuple of homogeneous type,
use literal ellipsis, e.g. . A plain 
is equivalent to , and in turn to .



¶
Callable type;  is a function of (int) -> str.
The subscription syntax must always be used with exactly two
values: the argument list and the return type.  The argument list
must be a list of types or an ellipsis; the return type must be
a single type.
There is no syntax to indicate optional or keyword arguments;
such function types are rarely used as callback types.
 (literal ellipsis) can be used to
type hint a callable taking any number of arguments and returning
.  A plain  is equivalent to
, and in turn to
.



¶
Special type construct to mark class variables.
As introduced in PEP 526, a variable annotation wrapped in ClassVar
indicates that a given attribute is intended to be used as a class variable
and should not be set on instances of that class. Usage:


 accepts only types and cannot be further subscribed.
 is not a class itself, and should not
be used with  or .
 does not change Python runtime behavior, but
it can be used by third-party type checkers. For example, a type checker
might flag the following code as an error:



New in version 3.5.3.




¶
 is a type variable defined as
.
It is meant to be used for functions that may accept any kind of string
without allowing different kinds of strings to mix. For example:





¶
A special constant that is assumed to be  by 3rd party static
type checkers. It is  at runtime. Usage:


Note that the first type annotation must be enclosed in quotes, making it a
“forward reference”, to hide the  reference from the
interpreter runtime.  Type annotations for local variables are not
evaluated, so the second annotation does not need to be enclosed in quotes.

New in version 3.5.2.


