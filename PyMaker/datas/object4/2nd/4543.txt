link:
library/queue.html#queue-objects

docs:

Queue Objects¶
Queue objects (, , or )
provide the public methods described below.


()¶
Return the approximate size of the queue.  Note, qsize() > 0 doesn’t
guarantee that a subsequent get() will not block, nor will qsize() < maxsize
guarantee that put() will not block.



()¶
Return  if the queue is empty,  otherwise.  If empty()
returns  it doesn’t guarantee that a subsequent call to put()
will not block.  Similarly, if empty() returns  it doesn’t
guarantee that a subsequent call to get() will not block.



()¶
Return  if the queue is full,  otherwise.  If full()
returns  it doesn’t guarantee that a subsequent call to get()
will not block.  Similarly, if full() returns  it doesn’t
guarantee that a subsequent call to put() will not block.



(item, block=True, timeout=None)¶
Put item into the queue. If optional args block is true and timeout is
 (the default), block if necessary until a free slot is available. If
timeout is a positive number, it blocks at most timeout seconds and raises
the  exception if no free slot was available within that time.
Otherwise (block is false), put an item on the queue if a free slot is
immediately available, else raise the  exception (timeout is
ignored in that case).



(item)¶
Equivalent to .



(block=True, timeout=None)¶
Remove and return an item from the queue. If optional args block is true and
timeout is  (the default), block if necessary until an item is available.
If timeout is a positive number, it blocks at most timeout seconds and
raises the  exception if no item was available within that time.
Otherwise (block is false), return an item if one is immediately available,
else raise the  exception (timeout is ignored in that case).
Prior to 3.0 on POSIX systems, and for all versions on Windows, if
block is true and timeout is , this operation goes into
an uninterruptible wait on an underlying lock. This means that no exceptions
can occur, and in particular a SIGINT will not trigger a .



()¶
Equivalent to .

Two methods are offered to support tracking whether enqueued tasks have been
fully processed by daemon consumer threads.


()¶
Indicate that a formerly enqueued task is complete.  Used by queue consumer
threads.  For each  used to fetch a task, a subsequent call to
 tells the queue that the processing on the task is complete.
If a  is currently blocking, it will resume when all items have been
processed (meaning that a  call was received for every item
that had been  into the queue).
Raises a  if called more times than there were items placed in
the queue.



()¶
Blocks until all items in the queue have been gotten and processed.
The count of unfinished tasks goes up whenever an item is added to the queue.
The count goes down whenever a consumer thread calls  to
indicate that the item was retrieved and all work on it is complete. When the
count of unfinished tasks drops to zero,  unblocks.

Example of how to wait for enqueued tasks to be completed:


