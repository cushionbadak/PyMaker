link:
library/asyncio-eventloop.html#asyncio.loop.create_datagram_endpoint

docs:


coroutine (protocol_factory, local_addr=None, remote_addr=None, *, family=0, proto=0, flags=0, reuse_address=None, reuse_port=None, allow_broadcast=None, sock=None)Â¶
Create a datagram connection.
The socket family can be either ,
, or ,
depending on host (or the family argument, if provided).
The socket type will be .
protocol_factory must be a callable returning a
protocol implementation.
A tuple of  is returned on success.
Other arguments:

local_addr, if given, is a  tuple used
to bind the socket to locally.  The local_host and local_port
are looked up using .
remote_addr, if given, is a  tuple used
to connect the socket to a remote address.  The remote_host and
remote_port are looked up using .
family, proto, flags are the optional address family, protocol
and flags to be passed through to  for host
resolution. If given, these should all be integers from the
corresponding  module constants.
reuse_address tells the kernel to reuse a local socket in
 state, without waiting for its natural timeout to
expire. If not specified will automatically be set to  on
Unix.
reuse_port tells the kernel to allow this endpoint to be bound to the
same port as other existing endpoints are bound to, so long as they all
set this flag when being created. This option is not supported on Windows
and some Unixes. If the  constant is not
defined then this capability is unsupported.
allow_broadcast tells the kernel to allow this endpoint to send
messages to the broadcast address.
sock can optionally be specified in order to use a preexisting,
already connected,  object to be used by the
transport. If specified, local_addr and remote_addr should be omitted
(must be ).

On Windows, with , this method is not supported.
See UDP echo client protocol and
UDP echo server protocol examples.

Changed in version 3.4.4: The family, proto, flags, reuse_address, reuse_port,
*allow_broadcast, and sock parameters were added.

