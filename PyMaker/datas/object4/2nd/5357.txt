link:
library/selectors.html#module-selectors

docs:

 — High-level I/O multiplexing¶

New in version 3.4.

Source code: Lib/selectors.py


Introduction¶
This module allows high-level and efficient I/O multiplexing, built upon the
 module primitives. Users are encouraged to use this module
instead, unless they want precise control over the OS-level primitives used.
It defines a  abstract base class, along with several
concrete implementations (, …),
that can be used to wait for I/O readiness notification on multiple file
objects. In the following, “file object” refers to any object with a
 method, or a raw file descriptor. See file object.
 is an alias to the most efficient implementation
available on the current platform: this should be the default choice for most
users.

Note
The type of file objects supported depends on the platform: on Windows,
sockets are supported, but not pipes, whereas on Unix, both are supported
(some other types may be supported as well, such as fifos or special file
devices).


See also


Low-level I/O multiplexing module.




Classes¶
Classes hierarchy:


In the following, events is a bitwise mask indicating which I/O events should
be waited for on a given file object. It can be a combination of the modules
constants below:







Constant
Meaning




Available for read


Available for write






class ¶
A  is a  used to
associate a file object to its underlying file descriptor, selected event
mask and attached data. It is returned by several 
methods.


¶
File object registered.



¶
Underlying file descriptor.



¶
Events that must be waited for on this file object.



¶
Optional opaque data associated to this file object: for example, this
could be used to store a per-client session ID.




class ¶
A  is used to wait for I/O event readiness on multiple
file objects. It supports file stream registration, unregistration, and a
method to wait for I/O events on those streams, with an optional timeout.
It’s an abstract base class, so cannot be instantiated. Use
 instead, or one of ,
 etc. if you want to specifically use an
implementation, and your platform supports it.
 and its concrete implementations support the
context manager protocol.


abstractmethod (fileobj, events, data=None)¶
Register a file object for selection, monitoring it for I/O events.
fileobj is the file object to monitor.  It may either be an integer
file descriptor or an object with a  method.
events is a bitwise mask of events to monitor.
data is an opaque object.
This returns a new  instance, or raises a
 in case of invalid event mask or file descriptor, or
 if the file object is already registered.



abstractmethod (fileobj)¶
Unregister a file object from selection, removing it from monitoring. A
file object shall be unregistered prior to being closed.
fileobj must be a file object previously registered.
This returns the associated  instance, or raises a
 if fileobj is not registered.  It will raise
 if fileobj is invalid (e.g. it has no 
method or its  method has an invalid return value).



(fileobj, events, data=None)¶
Change a registered file object’s monitored events or attached data.
This is equivalent to  followed
by , except that it
can be implemented more efficiently.
This returns a new  instance, or raises a
 in case of invalid event mask or file descriptor, or
 if the file object is not registered.



abstractmethod (timeout=None)¶
Wait until some registered file objects become ready, or the timeout
expires.
If , this specifies the maximum wait time, in seconds.
If , the call won’t block, and will report the currently
ready file objects.
If timeout is , the call will block until a monitored file object
becomes ready.
This returns a list of  tuples, one for each ready file
object.
key is the  instance corresponding to a ready file
object.
events is a bitmask of events ready on this file object.

Note
This method can return before any file object becomes ready or the
timeout has elapsed if the current process receives a signal: in this
case, an empty list will be returned.


Changed in version 3.5: The selector is now retried with a recomputed timeout when interrupted
by a signal if the signal handler did not raise an exception (see
PEP 475 for the rationale), instead of returning an empty list
of events before the timeout.




()¶
Close the selector.
This must be called to make sure that any underlying resource is freed.
The selector shall not be used once it has been closed.



(fileobj)¶
Return the key associated with a registered file object.
This returns the  instance associated to this file
object, or raises  if the file object is not registered.



abstractmethod ()¶
Return a mapping of file objects to selector keys.
This returns a  instance mapping
registered file objects to their associated 
instance.




class ¶
The default selector class, using the most efficient implementation
available on the current platform. This should be the default choice for
most users.



class ¶
-based selector.



class ¶
-based selector.



class ¶
-based selector.


()¶
This returns the file descriptor used by the underlying
 object.




class ¶
-based selector.


()¶
This returns the file descriptor used by the underlying
 object.


New in version 3.5.




class ¶
-based selector.


()¶
This returns the file descriptor used by the underlying
 object.




Examples¶
Here is a simple echo server implementation:



