link:
library/locale.html

docs:


 — Internationalization services¶
Source code: Lib/locale.py

The  module opens access to the POSIX locale database and
functionality. The POSIX locale mechanism allows programmers to deal with
certain cultural issues in an application, without requiring the programmer to
know all the specifics of each country where the software is executed.
The  module is implemented on top of the  module,
which in turn uses an ANSI C locale implementation if available.
The  module defines the following exception and functions:


exception ¶
Exception raised when the locale passed to  is not
recognized.



(category, locale=None)¶
If locale is given and not ,  modifies the locale
setting for the category. The available categories are listed in the data
description below. locale may be a string, or an iterable of two strings
(language code and encoding). If it’s an iterable, it’s converted to a locale
name using the locale aliasing engine. An empty string specifies the user’s
default settings. If the modification of the locale fails, the exception
 is raised. If successful, the new locale setting is returned.
If locale is omitted or , the current setting for category is
returned.
 is not thread-safe on most systems. Applications typically
start with a call of


This sets the locale for all categories to the user’s default setting (typically
specified in the  environment variable).  If the locale is not
changed thereafter, using multithreading should not cause problems.



()¶
Returns the database of the local conventions as a dictionary. This dictionary
has the following strings as keys:







Category
Key
Meaning





Decimal point character.

 

Sequence of numbers specifying
which relative positions the
 is
expected.  If the sequence is
terminated with
, no further
grouping is performed. If the
sequence terminates with a
,  the last group size is
repeatedly used.

 

Character used between groups.



International currency symbol.

 

Local currency symbol.

 

Whether the currency symbol
precedes the value (for
positive resp. negative
values).

 

Whether the currency symbol is
separated from the value  by a
space (for positive resp.
negative values).

 

Decimal point used for
monetary values.

 

Number of fractional digits
used in local formatting of
monetary values.

 

Number of fractional digits
used in international
formatting of monetary values.

 

Group separator used for
monetary values.

 

Equivalent to ,
used for monetary values.

 

Symbol used to annotate a
positive monetary value.

 

Symbol used to annotate a
negative monetary value.

 

The position of the sign (for
positive resp. negative
values), see below.



All numeric values can be set to  to indicate that there is no
value specified in this locale.
The possible values for  and  are given below.






Value
Explanation




Currency and value are surrounded by
parentheses.


The sign should precede the value and
currency symbol.


The sign should follow the value and
currency symbol.


The sign should immediately precede the
value.


The sign should immediately follow the
value.


Nothing is specified in this locale.



The function sets temporarily the  locale to the 
locale or the  locale if locales are different and numeric or
monetary strings are non-ASCII. This temporary change affects other threads.

Changed in version 3.7: The function now sets temporarily the  locale to the
 locale in some cases.




(option)¶
Return some locale-specific information as a string.  This function is not
available on all systems, and the set of possible options might also vary
across platforms.  The possible argument values are numbers, for which
symbolic constants are available in the locale module.
The  function accepts one of the following keys.  Most
descriptions are taken from the corresponding description in the GNU C
library.


¶
Get a string with the name of the character encoding used in the
selected locale.



¶
Get a string that can be used as a format string for  to
represent date and time in a locale-specific way.



¶
Get a string that can be used as a format string for  to
represent a date in a locale-specific way.



¶
Get a string that can be used as a format string for  to
represent a time in a locale-specific way.



¶
Get a format string for  to represent time in the am/pm
format.




Get the name of the n-th day of the week.

Note
This follows the US convention of  being Sunday, not the
international convention (ISO 8601) that Monday is the first day of the
week.





Get the abbreviated name of the n-th day of the week.




Get the name of the n-th month.




Get the abbreviated name of the n-th month.



¶
Get the radix character (decimal dot, decimal comma, etc.).



¶
Get the separator character for thousands (groups of three digits).



¶
Get a regular expression that can be used with the regex function to
recognize a positive response to a yes/no question.

Note
The expression is in the syntax suitable for the  function
from the C library, which might differ from the syntax used in .




¶
Get a regular expression that can be used with the regex(3) function to
recognize a negative response to a yes/no question.



¶
Get the currency symbol, preceded by “-” if the symbol should appear before
the value, “+” if the symbol should appear after the value, or “.” if the
symbol should replace the radix character.



¶
Get a string that represents the era used in the current locale.
Most locales do not define this value.  An example of a locale which does
define this value is the Japanese one.  In Japan, the traditional
representation of dates includes the name of the era corresponding to the
then-emperor’s reign.
Normally it should not be necessary to use this value directly. Specifying
the  modifier in their format strings causes the 
function to use this information.  The format of the returned string is not
specified, and therefore you should not assume knowledge of it on different
systems.



¶
Get a format string for  to represent date and time in a
locale-specific era-based way.



¶
Get a format string for  to represent a date in a
locale-specific era-based way.



¶
Get a format string for  to represent a time in a
locale-specific era-based way.



¶
Get a representation of up to 100 values used to represent the values
0 to 99.




([envvars])¶
Tries to determine the default locale settings and returns them as a tuple of
the form .
According to POSIX, a program which has not called 
runs using the portable  locale.  Calling  lets
it use the default locale as defined by the  variable.  Since we
do not want to interfere with the current locale setting we thus emulate the
behavior in the way described above.
To maintain compatibility with other platforms, not only the 
variable is tested, but a list of variables given as envvars parameter.  The
first found to be defined will be used.  envvars defaults to the search
path used in GNU gettext; it must always contain the variable name
.  The GNU gettext search path contains ,
,  and , in that order.
Except for the code , the language code corresponds to RFC 1766.
language code and encoding may be  if their values cannot be
determined.



(category=LC_CTYPE)¶
Returns the current setting for the given locale category as sequence containing
language code, encoding. category may be one of the  values
except .  It defaults to .
Except for the code , the language code corresponds to RFC 1766.
language code and encoding may be  if their values cannot be
determined.



(do_setlocale=True)¶
Return the encoding used for text data, according to user preferences.  User
preferences are expressed differently on different systems, and might not be
available programmatically on some systems, so this function only returns a
guess.
On some systems, it is necessary to invoke  to obtain the user
preferences, so this function is not thread-safe. If invoking setlocale is not
necessary or desired, do_setlocale should be set to .
On Android or in the UTF-8 mode (  option), always
return , the locale and the do_setlocale argument are ignored.

Changed in version 3.7: The function now always returns  on Android or if the UTF-8 mode
is enabled.




(localename)¶
Returns a normalized locale code for the given locale name.  The returned locale
code is formatted for use with .  If normalization fails, the
original name is returned unchanged.
If the given encoding is not known, the function defaults to the default
encoding for the locale code just like .



(category=LC_ALL)¶
Sets the locale for category to the default setting.
The default setting is determined by calling .
category defaults to .



(string1, string2)¶
Compares two strings according to the current  setting. As
any other compare function, returns a negative, or a positive value, or ,
depending on whether string1 collates before or after string2 or is equal to
it.



(string)¶
Transforms a string to one that can be used in locale-aware
comparisons.  For example,  is
equivalent to .  This function can be used
when the same string is compared repeatedly, e.g. when collating a
sequence of strings.



(format, val, grouping=False, monetary=False)¶
Formats a number val according to the current  setting.
The format follows the conventions of the  operator.  For floating point
values, the decimal point is modified if appropriate.  If grouping is true,
also takes the grouping into account.
If monetary is true, the conversion uses monetary thousands separator and
grouping strings.
Processes formatting specifiers as in , but takes the current
locale settings into account.

Changed in version 3.7: The monetary keyword parameter was added.




(format, val, grouping=False, monetary=False)¶
Please note that this function works like  but will
only work for exactly one  specifier.  For example,  and
 are both valid specifiers, but  is not.
For whole format strings, use .

Deprecated since version 3.7: Use  instead.




(val, symbol=True, grouping=False, international=False)¶
Formats a number val according to the current  settings.
The returned string includes the currency symbol if symbol is true, which is
the default. If grouping is true (which is not the default), grouping is done
with the value. If international is true (which is not the default), the
international currency symbol is used.
Note that this function will not work with the ‘C’ locale, so you have to set a
locale via  first.



(float)¶
Formats a floating point number using the same format as the built-in function
, but takes the decimal point into account.



(string)¶
Converts a string into a normalized number string, following the
 settings.

New in version 3.5.




(string)¶
Converts a string to a floating point number, following the 
settings.



(string)¶
Converts a string to an integer, following the  conventions.



¶
Locale category for the character type functions.  Depending on the settings of
this category, the functions of module  dealing with case change
their behaviour.



¶
Locale category for sorting strings.  The functions  and
 of the  module are affected.



¶
Locale category for the formatting of time.  The function 
follows these conventions.



¶
Locale category for formatting of monetary values.  The available options are
available from the  function.



¶
Locale category for message display. Python currently does not support
application specific locale-aware messages.  Messages displayed by the operating
system, like those returned by  might be affected by this
category.



¶
Locale category for formatting numbers.  The functions ,
,  and  of the  module are
affected by that category.  All other numeric formatting operations are not
affected.



¶
Combination of all locale settings.  If this flag is used when the locale is
changed, setting the locale for all categories is attempted. If that fails for
any category, no category is changed at all.  When the locale is retrieved using
this flag, a string indicating the setting for all categories is returned. This
string can be later used to restore the settings.



¶
This is a symbolic constant used for different values returned by
.

Example:



Background, details, hints, tips and caveats¶
The C standard defines the locale as a program-wide property that may be
relatively expensive to change.  On top of that, some implementation are broken
in such a way that frequent locale changes may cause core dumps.  This makes the
locale somewhat painful to use correctly.
Initially, when a program is started, the locale is the  locale, no matter
what the user’s preferred locale is.  There is one exception: the
 category is changed at startup to set the current locale
encoding to the user’s preferred locale encoding. The program must explicitly
say that it wants the user’s preferred locale settings for other categories by
calling .
It is generally a bad idea to call  in some library routine,
since as a side effect it affects the entire program.  Saving and restoring it
is almost as bad: it is expensive and affects other threads that happen to run
before the settings have been restored.
If, when coding a module for general use, you need a locale independent version
of an operation that is affected by the locale (such as
certain formats used with ), you will have to find a way to
do it without using the standard library routine.  Even better is convincing
yourself that using locale settings is okay.  Only as a last resort should you
document that your module is not compatible with non- locale settings.
The only way to perform numeric operations according to the locale is to use the
special functions defined by this module: , ,
, .
There is no way to perform case conversions and character classifications
according to the locale.  For (Unicode) text strings these are done according
to the character value only, while for byte strings, the conversions and
classifications are done according to the ASCII value of the byte, and bytes
whose high bit is set (i.e., non-ASCII bytes) are never converted or considered
part of a character class such as letter or whitespace.


For extension writers and programs that embed Python¶
Extension modules should never call , except to find out what
the current locale is.  But since the return value can only be used portably to
restore it, that is not very useful (except perhaps to find out whether or not
the locale is ).
When Python code uses the  module to change the locale, this also
affects the embedding application.  If the embedding application doesn’t want
this to happen, it should remove the  extension module (which does
all the work) from the table of built-in modules in the  file,
and make sure that the  module is not accessible as a shared
library.


Access to message catalogs¶


(msg)¶



(domain, msg)¶



(domain, msg, category)¶



(domain)¶



(domain, dir)¶

The locale module exposes the C library’s gettext interface on systems that
provide this interface.  It consists of the functions ,
, , , ,
and .  These are similar to the same functions in
the  module, but use the C library’s binary format for message
catalogs, and the C library’s search algorithms for locating message catalogs.
Python applications should normally find no need to invoke these functions, and
should use  instead.  A known exception to this rule are
applications that link with additional C libraries which internally invoke
 or .  For these applications, it may be
necessary to bind the text domain, so that the libraries can properly locate
their message catalogs.


