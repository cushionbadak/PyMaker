link:
reference/executionmodel.html#naming-and-binding

docs:

4.2. Naming and binding¶

4.2.1. Binding of names¶
Names refer to objects.  Names are introduced by name binding operations.
The following constructs bind names: formal parameters to functions,
 statements, class and function definitions (these bind the
class or function name in the defining block), and targets that are identifiers
if occurring in an assignment,  loop header, or after
 in a  statement or  clause.
The  statement
of the form  binds all names defined in the imported
module, except those beginning with an underscore.  This form may only be used
at the module level.
A target occurring in a  statement is also considered bound for
this purpose (though the actual semantics are to unbind the name).
Each assignment or import statement occurs within a block defined by a class or
function definition or at the module level (the top-level code block).
If a name is bound in a block, it is a local variable of that block, unless
declared as  or .  If a name is bound at
the module level, it is a global variable.  (The variables of the module code
block are local and global.)  If a variable is used in a code block but not
defined there, it is a free variable.
Each occurrence of a name in the program text refers to the binding of
that name established by the following name resolution rules.


4.2.2. Resolution of names¶
A scope defines the visibility of a name within a block.  If a local
variable is defined in a block, its scope includes that block.  If the
definition occurs in a function block, the scope extends to any blocks contained
within the defining one, unless a contained block introduces a different binding
for the name.
When a name is used in a code block, it is resolved using the nearest enclosing
scope.  The set of all such scopes visible to a code block is called the block’s
environment.
When a name is not found at all, a  exception is raised.
If the current scope is a function scope, and the name refers to a local
variable that has not yet been bound to a value at the point where the name is
used, an  exception is raised.
 is a subclass of .
If a name binding operation occurs anywhere within a code block, all uses of the
name within the block are treated as references to the current block.  This can
lead to errors when a name is used within a block before it is bound.  This rule
is subtle.  Python lacks declarations and allows name binding operations to
occur anywhere within a code block.  The local variables of a code block can be
determined by scanning the entire text of the block for name binding operations.
If the  statement occurs within a block, all uses of the name
specified in the statement refer to the binding of that name in the top-level
namespace.  Names are resolved in the top-level namespace by searching the
global namespace, i.e. the namespace of the module containing the code block,
and the builtins namespace, the namespace of the module .  The
global namespace is searched first.  If the name is not found there, the
builtins namespace is searched.  The  statement must precede
all uses of the name.
The  statement has the same scope as a name binding operation
in the same block.  If the nearest enclosing scope for a free variable contains
a global statement, the free variable is treated as a global.
The  statement causes corresponding names to refer
to previously bound variables in the nearest enclosing function scope.
 is raised at compile time if the given name does not
exist in any enclosing function scope.
The namespace for a module is automatically created the first time a module is
imported.  The main module for a script is always called .
Class definition blocks and arguments to  and  are
special in the context of name resolution.
A class definition is an executable statement that may use and define names.
These references follow the normal rules for name resolution with an exception
that unbound local variables are looked up in the global namespace.
The namespace of the class definition becomes the attribute dictionary of
the class. The scope of names defined in a class block is limited to the
class block; it does not extend to the code blocks of methods – this includes
comprehensions and generator expressions since they are implemented using a
function scope.  This means that the following will fail:




4.2.3. Builtins and restricted execution¶

CPython implementation detail: Users should not touch ; it is strictly an implementation
detail.  Users wanting to override values in the builtins namespace should
 the  module and modify its
attributes appropriately.

The builtins namespace associated with the execution of a code block
is actually found by looking up the name  in its
global namespace; this should be a dictionary or a module (in the
latter case the module’s dictionary is used).  By default, when in the
 module,  is the built-in module
; when in any other module,  is an
alias for the dictionary of the  module itself.


4.2.4. Interaction with dynamic features¶
Name resolution of free variables occurs at runtime, not at compile time.
This means that the following code will print 42:


The  and  functions do not have access to the full
environment for resolving names.  Names may be resolved in the local and global
namespaces of the caller.  Free variables are not resolved in the nearest
enclosing namespace, but in the global namespace.  [1] The  and
 functions have optional arguments to override the global and local
namespace.  If only one namespace is specified, it is used for both.

