link:
library/ctypes.html#accessing-functions-from-loaded-dlls

docs:

Accessing functions from loaded dlls¶
Functions are accessed as attributes of dll objects:


Note that win32 system dlls like  and  often export ANSI
as well as UNICODE versions of a function. The UNICODE version is exported with
an  appended to the name, while the ANSI version is exported with an 
appended to the name. The win32  function, which returns a
module handle for a given module name, has the following C prototype, and a
macro is used to expose one of them as  depending on whether
UNICODE is defined or not:


windll does not try to select one of them by magic, you must access the
version you need by specifying  or 
explicitly, and then call it with bytes or string objects respectively.
Sometimes, dlls export functions with names which aren’t valid Python
identifiers, like . In this case you have to use
 to retrieve the function:


On Windows, some dlls export functions not by name but by ordinal. These
functions can be accessed by indexing the dll object with the ordinal number:


