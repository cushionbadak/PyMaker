link:
library/logging.config.html#configuration-functions

docs:

Configuration functions¶
The following functions configure the logging module. They are located in the
 module.  Their use is optional — you can configure the
logging module using these functions or by making calls to the main API (defined
in  itself) and defining handlers which are declared either in
 or .


(config)¶

Takes the logging configuration from a dictionary.  The contents of
this dictionary are described in Configuration dictionary schema
below.
If an error is encountered during configuration, this function will
raise a , , 
or  with a suitably descriptive message.  The
following is a (possibly incomplete) list of conditions which will
raise an error:

A  which is not a string or which is a string not
corresponding to an actual logging level.
A  value which is not a boolean.
An id which does not have a corresponding destination.
A non-existent handler id found during an incremental call.
An invalid logger name.
Inability to resolve to an internal or external object.

Parsing is performed by the  class, whose
constructor is passed the dictionary used for configuration, and
has a  method.  The  module
has a callable attribute 
which is initially set to .
You can replace the value of  with a
suitable implementation of your own.
 calls  passing
the specified dictionary, and then calls the  method on
the returned object to put the configuration into effect:


For example, a subclass of  could call
 in its own , then
set up custom prefixes which would be usable in the subsequent
 call.  would be bound to
this new subclass, and then  could be called exactly as
in the default, uncustomized state.


New in version 3.2.




(fname, defaults=None, disable_existing_loggers=True)¶
Reads the logging configuration from a -format file. The
format of the file should be as described in
Configuration file format.
This function can be called several times from an application, allowing an
end user to select from various pre-canned configurations (if the developer
provides a mechanism to present the choices and load the chosen
configuration).




Parameters:
fname – A filename, or a file-like object, or an instance derived
from . If a
-derived instance is passed, it is used as
is. Otherwise, a  is
instantiated, and the configuration read by it from the
object passed in . If that has a 
method, it is assumed to be a file-like object and read using
; otherwise,
it is assumed to be a filename and passed to
.
defaults – Defaults to be passed to the ConfigParser can be specified
in this argument.
disable_existing_loggers – If specified as , loggers which
exist when this call is made are left
enabled. The default is  because this
enables old behaviour in a
backward-compatible way. This behaviour is to
disable any existing non-root loggers unless
they or their ancestors are explicitly named
in the logging configuration.






Changed in version 3.4: An instance of a subclass of  is
now accepted as a value for . This facilitates:

Use of a configuration file where logging configuration is just part
of the overall application configuration.
Use of a configuration read from a file, and then modified by the using
application (e.g. based on command-line parameters or other aspects
of the runtime environment) before being passed to .





(port=DEFAULT_LOGGING_CONFIG_PORT, verify=None)¶
Starts up a socket server on the specified port, and listens for new
configurations. If no port is specified, the module’s default
 is used. Logging configurations will be
sent as a file suitable for processing by  or
. Returns a  instance on which
you can call  to start the server, and which
you can  when appropriate. To stop the server,
call .
The  argument, if specified, should be a callable which should
verify whether bytes received across the socket are valid and should be
processed. This could be done by encrypting and/or signing what is sent
across the socket, such that the  callable can perform
signature verification and/or decryption. The  callable is called
with a single argument - the bytes received across the socket - and should
return the bytes to be processed, or  to indicate that the bytes should
be discarded. The returned bytes could be the same as the passed in bytes
(e.g. when only verification is done), or they could be completely different
(perhaps if decryption were performed).
To send a configuration to the socket, read in the configuration file and
send it to the socket as a sequence of bytes preceded by a four-byte length
string packed in binary using .

Note
Because portions of the configuration are passed through
, use of this function may open its users to a security risk.
While the function only binds to a socket on , and so does
not accept connections from remote machines, there are scenarios where
untrusted code could be run under the account of the process which calls
. Specifically, if the process calling  runs
on a multi-user machine where users cannot trust each other, then a
malicious user could arrange to run essentially arbitrary code in a
victim user’s process, simply by connecting to the victim’s
 socket and sending a configuration which runs whatever
code the attacker wants to have executed in the victim’s process. This is
especially easy to do if the default port is used, but not hard even if a
different port is used). To avoid the risk of this happening, use the
 argument to  to prevent unrecognised
configurations from being applied.


Changed in version 3.4: The  argument was added.


Note
If you want to send configurations to the listener which don’t
disable existing loggers, you will need to use a JSON format for
the configuration, which will use  for configuration.
This method allows you to specify  as
 in the configuration you send.




()¶
Stops the listening server which was created with a call to .
This is typically called before calling  on the return value from
.

