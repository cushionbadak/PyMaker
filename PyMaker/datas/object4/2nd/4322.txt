link:
library/multiprocessing.html#multiprocessing.Value

docs:


(typecode_or_type, *args, lock=True)¶
Return a  object allocated from shared memory.  By default the
return value is actually a synchronized wrapper for the object.  The object
itself can be accessed via the value attribute of a .
typecode_or_type determines the type of the returned object: it is either a
ctypes type or a one character typecode of the kind used by the 
module.  *args is passed on to the constructor for the type.
If lock is  (the default) then a new recursive lock
object is created to synchronize access to the value.  If lock is
a  or  object then that will be used to
synchronize access to the value.  If lock is  then
access to the returned object will not be automatically protected
by a lock, so it will not necessarily be “process-safe”.
Operations like  which involve a read and write are not
atomic.  So if, for instance, you want to atomically increment a
shared value it is insufficient to just do


Assuming the associated lock is recursive (which it is by default)
you can instead do


Note that lock is a keyword-only argument.
