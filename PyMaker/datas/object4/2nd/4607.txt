link:
library/asyncio-task.html#awaitables

docs:

Awaitables¶
We say that an object is an awaitable object if it can be used
in an  expression.  Many asyncio APIs are designed to
accept awaitables.
There are three main types of awaitable objects:
coroutines, Tasks, and Futures.
Coroutines
Python coroutines are awaitables and therefore can be awaited from
other coroutines:



Important
In this documentation the term “coroutine” can be used for
two closely related concepts:

a coroutine function: an  function;
a coroutine object: an object returned by calling a
coroutine function.


asyncio also supports legacy generator-based coroutines.
Tasks
Tasks are used to schedule coroutines concurrently.
When a coroutine is wrapped into a Task with functions like
 the coroutine is automatically
scheduled to run soon:


Futures
A  is a special low-level awaitable object that
represents an eventual result of an asynchronous operation.
When a Future object is awaited it means that the coroutine will
wait until the Future is resolved in some other place.
Future objects in asyncio are needed to allow callback-based code
to be used with async/await.
Normally there is no need to create Future objects at the
application level code.
Future objects, sometimes exposed by libraries and some asyncio
APIs, can be awaited:


A good example of a low-level function that returns a Future object
is .
