link:
library/optparse.html#how-optparse-handles-errors

docs:

How  handles errors¶
There are two broad classes of errors that  has to worry about:
programmer errors and user errors.  Programmer errors are usually erroneous
calls to , e.g. invalid option strings, unknown
option attributes, missing option attributes, etc.  These are dealt with in the
usual way: raise an exception (either  or
) and let the program crash.
Handling user errors is much more important, since they are guaranteed to happen
no matter how stable your code is.   can automatically detect
some user errors, such as bad option arguments (passing  where
 takes an integer argument), missing arguments ( at the end
of the command line, where  takes an argument of any type).  Also,
you can call  to signal an application-defined error
condition:


In either case,  handles the error the same way: it prints the
program’s usage message and an error message to standard error and exits with
error status 2.
Consider the first example above, where the user passes  to an option
that takes an integer:


Or, where the user fails to pass a value at all:


-generated error messages take care always to mention the
option involved in the error; be sure to do the same when calling
 from your application code.
If ’s default error-handling behaviour does not suit your needs,
you’ll need to subclass OptionParser and override its 
and/or  methods.
