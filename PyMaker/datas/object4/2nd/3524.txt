link:
library/logging.html#formatter-objects

docs:

Formatter Objects¶
 objects have the following attributes and methods. They are
responsible for converting a  to (usually) a string which can
be interpreted by either a human or an external system. The base
 allows a formatting string to be specified. If none is
supplied, the default value of  is used, which just includes
the message in the logging call. To have additional items of information in the
formatted output (such as a timestamp), keep reading.
A Formatter can be initialized with a format string which makes use of knowledge
of the  attributes - such as the default value mentioned above
making use of the fact that the user’s message and arguments are pre-formatted
into a ’s message attribute.  This format string contains
standard Python %-style mapping keys. See section printf-style String Formatting
for more information on string formatting.
The useful mapping keys in a  are given in the section on
LogRecord attributes.


class (fmt=None, datefmt=None, style='%')¶
Returns a new instance of the  class.  The instance is
initialized with a format string for the message as a whole, as well as a
format string for the date/time portion of a message.  If no fmt is
specified,  is used.  If no datefmt is specified, a format
is used which is described in the  documentation.
The style parameter can be one of ‘%’, ‘{‘ or ‘$’ and determines how
the format string will be merged with its data: using one of %-formatting,
 or . See Using particular formatting styles throughout your application
for more information on using {- and $-formatting for log messages.

Changed in version 3.2: The style parameter was added.



(record)¶
The record’s attribute dictionary is used as the operand to a string
formatting operation. Returns the resulting string. Before formatting the
dictionary, a couple of preparatory steps are carried out. The message
attribute of the record is computed using msg % args. If the
formatting string contains ,  is called
to format the event time. If there is exception information, it is
formatted using  and appended to the message. Note
that the formatted exception information is cached in attribute
exc_text. This is useful because the exception information can be
pickled and sent across the wire, but you should be careful if you have
more than one  subclass which customizes the formatting
of exception information. In this case, you will have to clear the cached
value after a formatter has done its formatting, so that the next
formatter to handle the event doesn’t use the cached value but
recalculates it afresh.
If stack information is available, it’s appended after the exception
information, using  to transform it if necessary.



(record, datefmt=None)¶
This method should be called from  by a formatter which
wants to make use of a formatted time. This method can be overridden in
formatters to provide for any specific requirement, but the basic behavior
is as follows: if datefmt (a string) is specified, it is used with
 to format the creation time of the
record. Otherwise, the format ‘%Y-%m-%d %H:%M:%S,uuu’ is used, where the
uuu part is a millisecond value and the other letters are as per the
 documentation.  An example time in this format is
.  The resulting string is returned.
This function uses a user-configurable function to convert the creation
time to a tuple. By default,  is used; to change
this for a particular formatter instance, set the  attribute
to a function with the same signature as  or
. To change it for all formatters, for example if you
want all logging times to be shown in GMT, set the 
attribute in the  class.

Changed in version 3.3: Previously, the default format was hard-coded as in this example:
 where the part before the comma is
handled by a strptime format string (), and the
part after the comma is a millisecond value. Because strptime does not
have a format placeholder for milliseconds, the millisecond value is
appended using another format string,  — and both of these
format strings have been hardcoded into this method. With the change,
these strings are defined as class-level attributes which can be
overridden at the instance level when desired. The names of the
attributes are  (for the strptime format string)
and  (for appending the millisecond value).




(exc_info)¶
Formats the specified exception information (a standard exception tuple as
returned by ) as a string. This default implementation
just uses . The resulting string is
returned.



(stack_info)¶
Formats the specified stack information (a string as returned by
, but with the last newline removed) as a
string. This default implementation just returns the input value.


