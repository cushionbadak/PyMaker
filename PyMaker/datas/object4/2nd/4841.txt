link:
library/asyncio-eventloop.html#asyncio.Server

docs:


class ¶
Server objects are asynchronous context managers.  When used in an
 statement, it’s guaranteed that the Server object is
closed and not accepting new connections when the 
statement is completed:



Changed in version 3.7: Server object is an asynchronous context manager since Python 3.7.



()¶
Stop serving: close listening sockets and set the 
attribute to .
The sockets that represent existing incoming client connections
are left open.
The server is closed asynchronously, use the 
coroutine to wait until the server is closed.



()¶
Return the event loop associated with the server object.

New in version 3.7.




coroutine ()¶
Start accepting connections.
This method is idempotent, so it can be called when
the server is already being serving.
The start_serving keyword-only parameter to
 and
 allows creating a Server object
that is not accepting connections initially.  In this case
, or  can be used
to make the Server start accepting connections.

New in version 3.7.




coroutine ()¶
Start accepting connections until the coroutine is cancelled.
Cancellation of  task causes the server
to be closed.
This method can be called if the server is already accepting
connections.  Only one  task can exist per
one Server object.
Example:



New in version 3.7.




()¶
Return  if the server is accepting new connections.

New in version 3.7.




coroutine ()¶
Wait until the  method completes.



¶
List of  objects the server is listening on,
or  if the server is closed.

Changed in version 3.7: Prior to Python 3.7  used to return an
internal list of server sockets directly.  In 3.7 a copy
of that list is returned.


