link:
library/pathlib.html#concrete-paths

docs:

Concrete paths¶
Concrete paths are subclasses of the pure path classes.  In addition to
operations provided by the latter, they also provide methods to do system
calls on path objects.  There are three ways to instantiate concrete paths:


class (*pathsegments)¶
A subclass of , this class represents concrete paths of
the system’s path flavour (instantiating it creates either a
 or a ):


pathsegments is specified similarly to .



class (*pathsegments)¶
A subclass of  and , this class
represents concrete non-Windows filesystem paths:


pathsegments is specified similarly to .



class (*pathsegments)¶
A subclass of  and , this class
represents concrete Windows filesystem paths:


pathsegments is specified similarly to .

You can only instantiate the class flavour that corresponds to your system
(allowing system calls on non-compatible path flavours could lead to
bugs or failures in your application):



Methods¶
Concrete paths provide the following methods in addition to pure paths
methods.  Many of these methods can raise an  if a system
call fails (for example because the path doesn’t exist):


classmethod ()¶
Return a new path object representing the current directory (as returned
by ):





classmethod ()¶
Return a new path object representing the user’s home directory (as
returned by  with  construct):



New in version 3.5.




()¶
Return information about this path (similarly to ).
The result is looked up at each call to this method.





(mode)¶
Change the file mode and permissions, like :





()¶
Whether the path points to an existing file or directory:



Note
If the path points to a symlink,  returns whether the
symlink points to an existing file or directory.




()¶
Return a new path with expanded  and  constructs,
as returned by :



New in version 3.5.




(pattern)¶
Glob the given relative pattern in the directory represented by this path,
yielding all matching files (of any kind):


The “” pattern means “this directory and all subdirectories,
recursively”.  In other words, it enables recursive globbing:



Note
Using the “” pattern in large directory trees may consume
an inordinate amount of time.




()¶
Return the name of the group owning the file.   is raised
if the file’s gid isn’t found in the system database.



()¶
Return  if the path points to a directory (or a symbolic link
pointing to a directory),  if it points to another kind of file.
 is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.



()¶
Return  if the path points to a regular file (or a symbolic link
pointing to a regular file),  if it points to another kind of file.
 is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.



()¶
Return  if the path is a mount point: a point in a
file system where a different file system has been mounted.  On POSIX, the
function checks whether path’s parent, , is on a different
device than path, or whether  and path point to the same
i-node on the same device — this should detect mount points for all Unix
and POSIX variants.  Not implemented on Windows.

New in version 3.7.




()¶
Return  if the path points to a symbolic link,  otherwise.
 is also returned if the path doesn’t exist; other errors (such
as permission errors) are propagated.



()¶
Return  if the path points to a Unix socket (or a symbolic link
pointing to a Unix socket),  if it points to another kind of file.
 is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.



()¶
Return  if the path points to a FIFO (or a symbolic link
pointing to a FIFO),  if it points to another kind of file.
 is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.



()¶
Return  if the path points to a block device (or a symbolic link
pointing to a block device),  if it points to another kind of file.
 is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.



()¶
Return  if the path points to a character device (or a symbolic link
pointing to a character device),  if it points to another kind of file.
 is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.



()¶
When the path points to a directory, yield path objects of the directory
contents:





(mode)¶
Like  but, if the path points to a symbolic link, the
symbolic link’s mode is changed rather than its target’s.



()¶
Like  but, if the path points to a symbolic link, return
the symbolic link’s information rather than its target’s.



(mode=0o777, parents=False, exist_ok=False)¶
Create a new directory at this given path.  If mode is given, it is
combined with the process’  value to determine the file mode
and access flags.  If the path already exists, 
is raised.
If parents is true, any missing parents of this path are created
as needed; they are created with the default permissions without taking
mode into account (mimicking the POSIX  command).
If parents is false (the default), a missing parent raises
.
If exist_ok is false (the default),  is
raised if the target directory already exists.
If exist_ok is true,  exceptions will be
ignored (same behavior as the POSIX  command), but only if the
last path component is not an existing non-directory file.

Changed in version 3.5: The exist_ok parameter was added.




(mode='r', buffering=-1, encoding=None, errors=None, newline=None)¶
Open the file pointed to by the path, like the built-in 
function does:





()¶
Return the name of the user owning the file.   is raised
if the file’s uid isn’t found in the system database.



()¶
Return the binary contents of the pointed-to file as a bytes object:



New in version 3.5.




(encoding=None, errors=None)¶
Return the decoded contents of the pointed-to file as a string:


The file is opened and then closed. The optional parameters have the same
meaning as in .

New in version 3.5.




(target)¶
Rename this file or directory to the given target.  On Unix, if
target exists and is a file, it will be replaced silently if the user
has permission.  target can be either a string or another path object:





(target)¶
Rename this file or directory to the given target.  If target points
to an existing file or directory, it will be unconditionally replaced.



(strict=False)¶
Make the path absolute, resolving any symlinks.  A new path object is
returned:


“” components are also eliminated (this is the only method to do so):


If the path doesn’t exist and strict is , 
is raised.  If strict is , the path is resolved as far as possible
and any remainder is appended without checking whether it exists.  If an
infinite loop is encountered along the resolution path, 
is raised.

New in version 3.6: The strict argument (pre-3.6 behavior is strict).




(pattern)¶
This is like calling  with “” added in front of the
given relative pattern:





()¶
Remove this directory.  The directory must be empty.



(other_path)¶
Return whether this path points to the same file as other_path, which
can be either a Path object, or a string.  The semantics are similar
to  and .
An  can be raised if either file cannot be accessed for some
reason.



New in version 3.5.




(target, target_is_directory=False)¶
Make this path a symbolic link to target.  Under Windows,
target_is_directory must be true (default ) if the link’s target
is a directory.  Under POSIX, target_is_directory’s value is ignored.



Note
The order of arguments (link, target) is the reverse
of ’s.




(mode=0o666, exist_ok=True)¶
Create a file at this given path.  If mode is given, it is combined
with the process’  value to determine the file mode and access
flags.  If the file already exists, the function succeeds if exist_ok
is true (and its modification time is updated to the current time),
otherwise  is raised.



()¶
Remove this file or symbolic link.  If the path points to a directory,
use  instead.



(data)¶
Open the file pointed to in bytes mode, write data to it, and close the
file:


An existing file of the same name is overwritten.

New in version 3.5.




(data, encoding=None, errors=None)¶
Open the file pointed to in text mode, write data to it, and close the
file:



New in version 3.5.



