link:
library/hashlib.html#blake2

docs:

BLAKE2¶
BLAKE2 is a cryptographic hash function defined in RFC 7693 that comes in two
flavors:

BLAKE2b, optimized for 64-bit platforms and produces digests of any size
between 1 and 64 bytes,
BLAKE2s, optimized for 8- to 32-bit platforms and produces digests of any
size between 1 and 32 bytes.

BLAKE2 supports keyed mode (a faster and simpler replacement for HMAC),
salted hashing, personalization, and tree hashing.
Hash objects from this module follow the API of standard library’s
 objects.

Creating hash objects¶
New hash objects are created by calling constructor functions:


(data=b'', *, digest_size=64, key=b'', salt=b'', person=b'', fanout=1, depth=1, leaf_size=0, node_offset=0, node_depth=0, inner_size=0, last_node=False)¶



(data=b'', *, digest_size=32, key=b'', salt=b'', person=b'', fanout=1, depth=1, leaf_size=0, node_offset=0, node_depth=0, inner_size=0, last_node=False)¶

These functions return the corresponding hash objects for calculating
BLAKE2b or BLAKE2s. They optionally take these general parameters:

data: initial chunk of data to hash, which must be
bytes-like object.  It can be passed only as positional argument.
digest_size: size of output digest in bytes.
key: key for keyed hashing (up to 64 bytes for BLAKE2b, up to 32 bytes for
BLAKE2s).
salt: salt for randomized hashing (up to 16 bytes for BLAKE2b, up to 8
bytes for BLAKE2s).
person: personalization string (up to 16 bytes for BLAKE2b, up to 8 bytes
for BLAKE2s).

The following table shows limits for general parameters (in bytes):









Hash
digest_size
len(key)
len(salt)
len(person)



BLAKE2b
64
64
16
16

BLAKE2s
32
32
8
8




Note
BLAKE2 specification defines constant lengths for salt and personalization
parameters, however, for convenience, this implementation accepts byte
strings of any size up to the specified length. If the length of the
parameter is less than specified, it is padded with zeros, thus, for
example,  and  is the same value. (This is not
the case for key.)

These sizes are available as module constants described below.
Constructor functions also accept the following tree hashing parameters:

fanout: fanout (0 to 255, 0 if unlimited, 1 in sequential mode).
depth: maximal depth of tree (1 to 255, 255 if unlimited, 1 in
sequential mode).
leaf_size: maximal byte length of leaf (0 to 2**32-1, 0 if unlimited or in
sequential mode).
node_offset: node offset (0 to 2**64-1 for BLAKE2b, 0 to 2**48-1 for
BLAKE2s, 0 for the first, leftmost, leaf, or in sequential mode).
node_depth: node depth (0 to 255, 0 for leaves, or in sequential mode).
inner_size: inner digest size (0 to 64 for BLAKE2b, 0 to 32 for
BLAKE2s, 0 in sequential mode).
last_node: boolean indicating whether the processed node is the last
one (False for sequential mode).




See section 2.10 in BLAKE2 specification for comprehensive review of tree
hashing.


Constants¶


¶



¶

Salt length (maximum length accepted by constructors).


¶



¶

Personalization string length (maximum length accepted by constructors).


¶



¶

Maximum key size.


¶



¶

Maximum digest size that the hash function can output.


Examples¶

Simple hashing¶
To calculate hash of some data, you should first construct a hash object by
calling the appropriate constructor function ( or
), then update it with the data by calling  on the
object, and, finally, get the digest out of the object by calling
 (or  for hex-encoded string).


As a shortcut, you can pass the first chunk of data to update directly to the
constructor as the positional argument:


You can call  as many times as you need to iteratively
update the hash:




Using different digest sizes¶
BLAKE2 has configurable size of digests up to 64 bytes for BLAKE2b and up to 32
bytes for BLAKE2s. For example, to replace SHA-1 with BLAKE2b without changing
the size of output, we can tell BLAKE2b to produce 20-byte digests:


Hash objects with different digest sizes have completely different outputs
(shorter hashes are not prefixes of longer hashes); BLAKE2b and BLAKE2s
produce different outputs even if the output length is the same:




Keyed hashing¶
Keyed hashing can be used for authentication as a faster and simpler
replacement for Hash-based message authentication code (HMAC).
BLAKE2 can be securely used in prefix-MAC mode thanks to the
indifferentiability property inherited from BLAKE.
This example shows how to get a (hex-encoded) 128-bit authentication code for
message  with key :


As a practical example, a web application can symmetrically sign cookies sent
to users and later verify them to make sure they weren’t tampered with:


Even though there’s a native keyed hashing mode, BLAKE2 can, of course, be used
in HMAC construction with  module:




Randomized hashing¶
By setting salt parameter users can introduce randomization to the hash
function. Randomized hashing is useful for protecting against collision attacks
on the hash function used in digital signatures.

Randomized hashing is designed for situations where one party, the message
preparer, generates all or part of a message to be signed by a second
party, the message signer. If the message preparer is able to find
cryptographic hash function collisions (i.e., two messages producing the
same hash value), then they might prepare meaningful versions of the message
that would produce the same hash value and digital signature, but with
different results (e.g., transferring $1,000,000 to an account, rather than
$10). Cryptographic hash functions have been designed with collision
resistance as a major goal, but the current concentration on attacking
cryptographic hash functions may result in a given cryptographic hash
function providing less collision resistance than expected. Randomized
hashing offers the signer additional protection by reducing the likelihood
that a preparer can generate two or more messages that ultimately yield the
same hash value during the digital signature generation process — even if
it is practical to find collisions for the hash function. However, the use
of randomized hashing may reduce the amount of security provided by a
digital signature when all portions of the message are prepared
by the signer.
(NIST SP-800-106 “Randomized Hashing for Digital Signatures”)

In BLAKE2 the salt is processed as a one-time input to the hash function during
initialization, rather than as an input to each compression function.

Warning
Salted hashing (or just hashing) with BLAKE2 or any other general-purpose
cryptographic hash function, such as SHA-256, is not suitable for hashing
passwords.  See BLAKE2 FAQ for more
information.





Personalization¶
Sometimes it is useful to force hash function to produce different digests for
the same input for different purposes. Quoting the authors of the Skein hash
function:

We recommend that all application designers seriously consider doing this;
we have seen many protocols where a hash that is computed in one part of
the protocol can be used in an entirely different part because two hash
computations were done on similar or related data, and the attacker can
force the application to make the hash inputs the same. Personalizing each
hash function used in the protocol summarily stops this type of attack.
(The Skein Hash Function Family,
p. 21)

BLAKE2 can be personalized by passing bytes to the person argument:


Personalization together with the keyed mode can also be used to derive different
keys from a single one.




Tree mode¶
Here’s an example of hashing a minimal tree with two leaf nodes:


This example uses 64-byte internal digests, and returns the 32-byte final
digest:





Credits¶
BLAKE2 was designed by Jean-Philippe Aumasson, Samuel Neves, Zooko
Wilcox-O’Hearn, and Christian Winnerlein based on SHA-3 finalist BLAKE
created by Jean-Philippe Aumasson, Luca Henzen, Willi Meier, and
Raphael C.-W. Phan.
It uses core algorithm from ChaCha cipher designed by Daniel J.  Bernstein.
The stdlib implementation is based on pyblake2 module. It was written by
Dmitry Chestnykh based on C implementation written by Samuel Neves. The
documentation was copied from pyblake2 and written by Dmitry Chestnykh.
The C code was partly rewritten for Python by Christian Heimes.
The following public domain dedication applies for both C hash function
implementation, extension code, and this documentation:

To the extent possible under law, the author(s) have dedicated all copyright
and related and neighboring rights to this software to the public domain
worldwide. This software is distributed without any warranty.
You should have received a copy of the CC0 Public Domain Dedication along
with this software. If not, see
https://creativecommons.org/publicdomain/zero/1.0/.

The following people have helped with development or contributed their changes
to the project and the public domain according to the Creative Commons Public
Domain Dedication 1.0 Universal:

Alexandr Sokolovskiy


See also

Module 
A module to generate message authentication codes using hashes.
Module 
Another way to encode binary hashes for non-binary environments.
https://blake2.net
Official BLAKE2 website.
https://csrc.nist.gov/csrc/media/publications/fips/180/2/archive/2002-08-01/documents/fips180-2.pdf
The FIPS 180-2 publication on Secure Hash Algorithms.
https://en.wikipedia.org/wiki/Cryptographic_hash_function#Cryptographic_hash_algorithms
Wikipedia article with information on which algorithms have known issues and
what that means regarding their use.
https://www.ietf.org/rfc/rfc2898.txt
PKCS #5: Password-Based Cryptography Specification Version 2.0



