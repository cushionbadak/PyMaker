link:
library/uuid.html

docs:


 — UUID objects according to RFC 4122¶
Source code: Lib/uuid.py

This module provides immutable  objects (the  class)
and the functions , , ,  for
generating version 1, 3, 4, and 5 UUIDs as specified in RFC 4122.
If all you want is a unique ID, you should probably call  or
.  Note that  may compromise privacy since it creates
a UUID containing the computer’s network address.   creates a
random UUID.
Depending on support from the underlying platform,  may or may
not return a “safe” UUID.  A safe UUID is one which is generated using
synchronization methods that ensure no two processes can obtain the same
UUID.  All instances of  have an  attribute
which relays any information about the UUID’s safety, using this enumeration:


class ¶

New in version 3.7.



¶
The UUID was generated by the platform in a multiprocessing-safe way.



¶
The UUID was not generated in a multiprocessing-safe way.



¶
The platform does not provide information on whether the UUID was
generated safely or not.




class (hex=None, bytes=None, bytes_le=None, fields=None, int=None, version=None, *, is_safe=SafeUUID.unknown)¶
Create a UUID from either a string of 32 hexadecimal digits, a string of 16
bytes in big-endian order as the bytes argument, a string of 16 bytes in
little-endian order as the bytes_le argument, a tuple of six integers
(32-bit time_low, 16-bit time_mid, 16-bit time_hi_version,
8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as the
fields argument, or a single 128-bit integer as the int argument.
When a string of hex digits is given, curly braces, hyphens,
and a URN prefix are all optional.  For example, these
expressions all yield the same UUID:


Exactly one of hex, bytes, bytes_le, fields, or int must be given.
The version argument is optional; if given, the resulting UUID will have its
variant and version number set according to RFC 4122, overriding bits in the
given hex, bytes, bytes_le, fields, or int.
Comparison of UUID objects are made by way of comparing their
 attributes.  Comparison with a non-UUID object
raises a .
 returns a string in the form
 where the 32 hexadecimal digits
represent the UUID.

 instances have these read-only attributes:


¶
The UUID as a 16-byte string (containing the six integer fields in big-endian
byte order).



¶
The UUID as a 16-byte string (with time_low, time_mid, and time_hi_version
in little-endian byte order).



¶
A tuple of the six integer fields of the UUID, which are also available as six
individual attributes and two derived attributes:






Field
Meaning




the first 32 bits of the UUID


the next 16 bits of the UUID


the next 16 bits of the UUID


the next 8 bits of the UUID


the next 8 bits of the UUID


the last 48 bits of the UUID


the 60-bit timestamp


the 14-bit sequence number






¶
The UUID as a 32-character hexadecimal string.



¶
The UUID as a 128-bit integer.



¶
The UUID as a URN as specified in RFC 4122.



¶
The UUID variant, which determines the internal layout of the UUID. This will be
one of the constants , ,
, or .



¶
The UUID version number (1 through 5, meaningful only when the variant is
).



¶
An enumeration of  which indicates whether the platform
generated the UUID in a multiprocessing-safe way.

New in version 3.7.


The  module defines the following functions:


()¶
Get the hardware address as a 48-bit positive integer.  The first time this
runs, it may launch a separate program, which could be quite slow.  If all
attempts to obtain the hardware address fail, we choose a random 48-bit
number with the multicast bit (least significant bit of the first octet)
set to 1 as recommended in RFC 4122.  “Hardware address” means the MAC
address of a network interface.  On a machine with multiple network
interfaces, universally administered MAC addresses (i.e. where the second
least significant bit of the first octet is unset) will be preferred over
locally administered MAC addresses, but with no other ordering guarantees.

Changed in version 3.7: Universally administered MAC addresses are preferred over locally
administered MAC addresses, since the former are guaranteed to be
globally unique, while the latter are not.




(node=None, clock_seq=None)¶
Generate a UUID from a host ID, sequence number, and the current time. If node
is not given,  is used to obtain the hardware address. If
clock_seq is given, it is used as the sequence number; otherwise a random
14-bit sequence number is chosen.



(namespace, name)¶
Generate a UUID based on the MD5 hash of a namespace identifier (which is a
UUID) and a name (which is a string).



()¶
Generate a random UUID.



(namespace, name)¶
Generate a UUID based on the SHA-1 hash of a namespace identifier (which is a
UUID) and a name (which is a string).

The  module defines the following namespace identifiers for use with
 or .


¶
When this namespace is specified, the name string is a fully-qualified domain
name.



¶
When this namespace is specified, the name string is a URL.



¶
When this namespace is specified, the name string is an ISO OID.



¶
When this namespace is specified, the name string is an X.500 DN in DER or a
text output format.

The  module defines the following constants for the possible values
of the  attribute:


¶
Reserved for NCS compatibility.



¶
Specifies the UUID layout given in RFC 4122.



¶
Reserved for Microsoft compatibility.



¶
Reserved for future definition.


See also

RFC 4122 - A Universally Unique IDentifier (UUID) URN Namespace
This specification defines a Uniform Resource Name namespace for UUIDs, the
internal format of UUIDs, and methods of generating UUIDs.



Example¶
Here are some examples of typical usage of the  module:




