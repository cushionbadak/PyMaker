link:
library/ssl.html#functions-constants-and-exceptions

docs:

Functions, Constants, and Exceptions¶

Socket creation¶
Since Python 3.2 and 2.7.9, it is recommended to use the
 of an  instance to wrap
sockets as  objects. The helper functions
 returns a new context with secure default
settings. The old  function is deprecated since it is
both inefficient and has no support for server name indication (SNI) and
hostname matching.
Client socket example with default context and IPv4/IPv6 dual stack:


Client socket example with custom context and IPv4:


Server socket example listening on localhost IPv4:




Context creation¶
A convenience function helps create  objects for common
purposes.


(purpose=Purpose.SERVER_AUTH, cafile=None, capath=None, cadata=None)¶
Return a new  object with default settings for
the given purpose.  The settings are chosen by the  module,
and usually represent a higher security level than when calling the
 constructor directly.
cafile, capath, cadata represent optional CA certificates to
trust for certificate verification, as in
.  If all three are
, this function can choose to trust the system’s default
CA certificates instead.
The settings are: , , and
 with high encryption cipher suites without RC4 and
without unauthenticated cipher suites. Passing 
as purpose sets  to 
and either loads CA certificates (when at least one of cafile, capath or
cadata is given) or uses  to load
default CA certificates.

Note
The protocol, options, cipher and other settings may change to more
restrictive values anytime without prior deprecation.  The values
represent a fair balance between compatibility and security.
If your application needs specific settings, you should create a
 and apply the settings yourself.


Note
If you find that when certain older clients or servers attempt to connect
with a  created by this function that they get an error
stating “Protocol or cipher suite mismatch”, it may be that they only
support SSL3.0 which this function excludes using the
. SSL3.0 is widely considered to be completely broken. If you still wish to continue to
use this function but still allow SSL 3.0 connections you can re-enable
them using:




New in version 3.4.


Changed in version 3.4.4: RC4 was dropped from the default cipher string.


Changed in version 3.6: ChaCha20/Poly1305 was added to the default cipher string.
3DES was dropped from the default cipher string.




Exceptions¶


exception ¶
Raised to signal an error from the underlying SSL implementation
(currently provided by the OpenSSL library).  This signifies some
problem in the higher-level encryption and authentication layer that’s
superimposed on the underlying network connection.  This error
is a subtype of .  The error code and message of
 instances are provided by the OpenSSL library.

Changed in version 3.3:  used to be a subtype of .



¶
A string mnemonic designating the OpenSSL submodule in which the error
occurred, such as ,  or .  The range of possible
values depends on the OpenSSL version.

New in version 3.3.




¶
A string mnemonic designating the reason this error occurred, for
example .  The range of possible
values depends on the OpenSSL version.

New in version 3.3.





exception ¶
A subclass of  raised when trying to read or write and
the SSL connection has been closed cleanly.  Note that this doesn’t
mean that the underlying transport (read TCP) has been closed.

New in version 3.3.




exception ¶
A subclass of  raised by a non-blocking SSL socket when trying to read or write data, but more data needs
to be received on the underlying TCP transport before the request can be
fulfilled.

New in version 3.3.




exception ¶
A subclass of  raised by a non-blocking SSL socket when trying to read or write data, but more data needs
to be sent on the underlying TCP transport before the request can be
fulfilled.

New in version 3.3.




exception ¶
A subclass of  raised when a system error was encountered
while trying to fulfill an operation on a SSL socket.  Unfortunately,
there is no easy way to inspect the original errno number.

New in version 3.3.




exception ¶
A subclass of  raised when the SSL connection has been
terminated abruptly.  Generally, you shouldn’t try to reuse the underlying
transport when this error is encountered.

New in version 3.3.




exception ¶
A subclass of  raised when certificate validation has
failed.

New in version 3.7.



¶
A numeric error number that denotes the verification error.



¶
A human readable string of the verification error.




exception ¶
An alias for .

Changed in version 3.7: The exception is now an alias for .




Random generation¶


(num)¶
Return num cryptographically strong pseudo-random bytes. Raises an
 if the PRNG has not been seeded with enough data or if the
operation is not supported by the current RAND method. 
can be used to check the status of the PRNG and  can be used
to seed the PRNG.
For almost all applications  is preferable.
Read the Wikipedia article, Cryptographically secure pseudorandom number
generator (CSPRNG),
to get the requirements of a cryptographically generator.

New in version 3.3.




(num)¶
Return (bytes, is_cryptographic): bytes are num pseudo-random bytes,
is_cryptographic is  if the bytes generated are cryptographically
strong. Raises an  if the operation is not supported by the
current RAND method.
Generated pseudo-random byte sequences will be unique if they are of
sufficient length, but are not necessarily unpredictable. They can be used
for non-cryptographic purposes and for certain purposes in cryptographic
protocols, but usually not for key generation etc.
For almost all applications  is preferable.

New in version 3.3.


Deprecated since version 3.6: OpenSSL has deprecated , use
 instead.




()¶
Return  if the SSL pseudo-random number generator has been seeded
with ‘enough’ randomness, and  otherwise.  You can use
 and  to increase the randomness of
the pseudo-random number generator.



(path)¶
If you are running an entropy-gathering daemon (EGD) somewhere, and path
is the pathname of a socket connection open to it, this will read 256 bytes
of randomness from the socket, and add it to the SSL pseudo-random number
generator to increase the security of generated secret keys.  This is
typically only necessary on systems without better sources of randomness.
See http://egd.sourceforge.net/ or http://prngd.sourceforge.net/ for sources
of entropy-gathering daemons.
Availability: not available with LibreSSL and OpenSSL > 1.1.0.



(bytes, entropy)¶
Mix the given bytes into the SSL pseudo-random number generator.  The
parameter entropy (a float) is a lower bound on the entropy contained in
string (so you can always use ).  See RFC 1750 for more
information on sources of entropy.

Changed in version 3.5: Writable bytes-like object is now accepted.




Certificate handling¶


(cert, hostname)¶
Verify that cert (in decoded format as returned by
) matches the given hostname.  The rules
applied are those for checking the identity of HTTPS servers as outlined
in RFC 2818, RFC 5280 and RFC 6125.  In addition to HTTPS, this
function should be suitable for checking the identity of servers in
various SSL-based protocols such as FTPS, IMAPS, POPS and others.
 is raised on failure. On success, the function
returns nothing:



New in version 3.2.


Changed in version 3.3.3: The function now follows RFC 6125, section 6.4.3 and does neither
match multiple wildcards (e.g.  or ) nor
a wildcard inside an internationalized domain names (IDN) fragment.
IDN A-labels such as  are still supported,
but  no longer matches .


Changed in version 3.5: Matching of IP addresses, when present in the subjectAltName field
of the certificate, is now supported.


Changed in version 3.7: The function is no longer used to TLS connections. Hostname matching
is now performed by OpenSSL.
Allow wildcard when it is the leftmost and the only character
in that segment. Partial wildcards like  are no
longer supported.


Deprecated since version 3.7.




(cert_time)¶
Return the time in seconds since the Epoch, given the 
string representing the “notBefore” or “notAfter” date from a
certificate in  strptime format (C
locale).
Here’s an example:


“notBefore” or “notAfter” dates must use GMT (RFC 5280).

Changed in version 3.5: Interpret the input time as a time in UTC as specified by ‘GMT’
timezone in the input string. Local timezone was used
previously. Return an integer (no fractions of a second in the
input format)




(addr, ssl_version=PROTOCOL_TLS, ca_certs=None)¶
Given the address  of an SSL-protected server, as a (hostname,
port-number) pair, fetches the server’s certificate, and returns it as a
PEM-encoded string.  If  is specified, uses that version of
the SSL protocol to attempt to connect to the server.  If  is
specified, it should be a file containing a list of root certificates, the
same format as used for the same parameter in
.  The call will attempt to validate the
server certificate against that set of root certificates, and will fail
if the validation attempt fails.

Changed in version 3.3: This function is now IPv6-compatible.


Changed in version 3.5: The default ssl_version is changed from  to
 for maximum compatibility with modern servers.




(DER_cert_bytes)¶
Given a certificate as a DER-encoded blob of bytes, returns a PEM-encoded
string version of the same certificate.



(PEM_cert_string)¶
Given a certificate as an ASCII PEM string, returns a DER-encoded sequence of
bytes for that same certificate.



()¶
Returns a named tuple with paths to OpenSSL’s default cafile and capath.
The paths are the same as used by
. The return value is a
named tuple :

 - resolved path to cafile or  if the file doesn’t exist,
 - resolved path to capath or  if the directory doesn’t exist,
 - OpenSSL’s environment key that points to a cafile,
 - hard coded path to a cafile,
 - OpenSSL’s environment key that points to a capath,
 - hard coded path to a capath directory

Availability: LibreSSL ignores the environment vars
 and .

New in version 3.4.




(store_name)¶
Retrieve certificates from Windows’ system cert store. store_name may be
one of ,  or . Windows may provide additional cert
stores, too.
The function returns a list of (cert_bytes, encoding_type, trust) tuples.
The encoding_type specifies the encoding of cert_bytes. It is either
 for X.509 ASN.1 data or  for
PKCS#7 ASN.1 data. Trust specifies the purpose of the certificate as a set
of OIDS or exactly  if the certificate is trustworthy for all
purposes.
Example:


Availability: Windows.

New in version 3.4.




(store_name)¶
Retrieve CRLs from Windows’ system cert store. store_name may be
one of ,  or . Windows may provide additional cert
stores, too.
The function returns a list of (cert_bytes, encoding_type, trust) tuples.
The encoding_type specifies the encoding of cert_bytes. It is either
 for X.509 ASN.1 data or  for
PKCS#7 ASN.1 data.
Availability: Windows.

New in version 3.4.




(sock, keyfile=None, certfile=None, server_side=False, cert_reqs=CERT_NONE, ssl_version=PROTOCOL_TLS, ca_certs=None, do_handshake_on_connect=True, suppress_ragged_eofs=True, ciphers=None)¶
Takes an instance  of , and returns an instance
of , a subtype of , which wraps
the underlying socket in an SSL context.   must be a
 socket; other socket types are unsupported.
Internally, function creates a  with protocol
ssl_version and  set to cert_reqs. If
parameters keyfile, certfile, ca_certs or ciphers are set, then
the values are passed to ,
, and
.
The arguments server_side, do_handshake_on_connect, and
suppress_ragged_eofs have the same meaning as
.

Deprecated since version 3.7: Since Python 3.2 and 2.7.9, it is recommended to use the
 instead of . The
top-level function is limited and creates an insecure client socket
without server name indication or hostname matching.




Constants¶

All constants are now  or  collections.

New in version 3.6.




¶
Possible value for , or the 
parameter to .  Except for ,
it is the default mode.  With client-side sockets, just about any
cert is accepted.  Validation errors, such as untrusted or expired cert,
are ignored and do not abort the TLS/SSL handshake.
In server mode, no certificate is requested from the client, so the client
does not send any for client cert authentication.
See the discussion of Security considerations below.



¶
Possible value for , or the 
parameter to .  In client mode, 
has the same meaning as . It is recommended to
use  for client-side sockets instead.
In server mode, a client certificate request is sent to the client.  The
client may either ignore the request or send a certificate in order
perform TLS client cert authentication.  If the client chooses to send
a certificate, it is verified.  Any verification error immediately aborts
the TLS handshake.
Use of this setting requires a valid set of CA certificates to
be passed, either to  or as a
value of the  parameter to .



¶
Possible value for , or the 
parameter to .  In this mode, certificates are
required from the other side of the socket connection; an 
will be raised if no certificate is provided, or if its validation fails.
This mode is not sufficient to verify a certificate in client mode as
it does not match hostnames.   must be
enabled as well to verify the authenticity of a cert.
 uses  and
enables  by default.
With server socket, this mode provides mandatory TLS client cert
authentication.  A client certificate request is sent to the client and
the client must provide a valid and trusted certificate.
Use of this setting requires a valid set of CA certificates to
be passed, either to  or as a
value of the  parameter to .



class ¶
 collection of CERT_* constants.

New in version 3.6.




¶
Possible value for . In this mode, certificate
revocation lists (CRLs) are not checked. By default OpenSSL does neither
require nor verify CRLs.

New in version 3.4.




¶
Possible value for . In this mode, only the
peer cert is check but non of the intermediate CA certificates. The mode
requires a valid CRL that is signed by the peer cert’s issuer (its direct
ancestor CA). If no proper has been loaded
, validation will fail.

New in version 3.4.




¶
Possible value for . In this mode, CRLs of
all certificates in the peer cert chain are checked.

New in version 3.4.




¶
Possible value for  to disable workarounds
for broken X.509 certificates.

New in version 3.4.




¶
Possible value for . It instructs OpenSSL to
prefer trusted certificates when building the trust chain to validate a
certificate. This flag is enabled by default.

New in version 3.4.4.




class ¶
 collection of VERIFY_* constants.

New in version 3.6.




¶
Selects the highest protocol version that both the client and server support.
Despite the name, this option can select both “SSL” and “TLS” protocols.

New in version 3.6.




¶
Auto-negotiate the highest protocol version like ,
but only support client-side  connections. The protocol
enables  and  by
default.

New in version 3.6.




¶
Auto-negotiate the highest protocol version like ,
but only support server-side  connections.

New in version 3.6.




¶
Alias for data:PROTOCOL_TLS.

Deprecated since version 3.6: Use  instead.




¶
Selects SSL version 2 as the channel encryption protocol.
This protocol is not available if OpenSSL is compiled with the
 flag.

Warning
SSL version 2 is insecure.  Its use is highly discouraged.


Deprecated since version 3.6: OpenSSL has removed support for SSLv2.




¶
Selects SSL version 3 as the channel encryption protocol.
This protocol is not be available if OpenSSL is compiled with the
 flag.

Warning
SSL version 3 is insecure.  Its use is highly discouraged.


Deprecated since version 3.6: OpenSSL has deprecated all version specific protocols. Use the default
protocol  with flags like  instead.




¶
Selects TLS version 1.0 as the channel encryption protocol.

Deprecated since version 3.6: OpenSSL has deprecated all version specific protocols. Use the default
protocol  with flags like  instead.




¶
Selects TLS version 1.1 as the channel encryption protocol.
Available only with openssl version 1.0.1+.

New in version 3.4.


Deprecated since version 3.6: OpenSSL has deprecated all version specific protocols. Use the default
protocol  with flags like  instead.




¶
Selects TLS version 1.2 as the channel encryption protocol. This is the
most modern version, and probably the best choice for maximum protection,
if both sides can speak it.  Available only with openssl version 1.0.1+.

New in version 3.4.


Deprecated since version 3.6: OpenSSL has deprecated all version specific protocols. Use the default
protocol  with flags like  instead.




¶
Enables workarounds for various bugs present in other SSL implementations.
This option is set by default.  It does not necessarily set the same
flags as OpenSSL’s  constant.

New in version 3.2.




¶
Prevents an SSLv2 connection.  This option is only applicable in
conjunction with .  It prevents the peers from
choosing SSLv2 as the protocol version.

New in version 3.2.


Deprecated since version 3.6: SSLv2 is deprecated




¶
Prevents an SSLv3 connection.  This option is only applicable in
conjunction with .  It prevents the peers from
choosing SSLv3 as the protocol version.

New in version 3.2.


Deprecated since version 3.6: SSLv3 is deprecated




¶
Prevents a TLSv1 connection.  This option is only applicable in
conjunction with .  It prevents the peers from
choosing TLSv1 as the protocol version.

New in version 3.2.


Deprecated since version 3.7: The option is deprecated since OpenSSL 1.1.0, use the new
 and
 instead.




¶
Prevents a TLSv1.1 connection. This option is only applicable in conjunction
with . It prevents the peers from choosing TLSv1.1 as
the protocol version. Available only with openssl version 1.0.1+.

New in version 3.4.


Deprecated since version 3.7: The option is deprecated since OpenSSL 1.1.0.




¶
Prevents a TLSv1.2 connection. This option is only applicable in conjunction
with . It prevents the peers from choosing TLSv1.2 as
the protocol version. Available only with openssl version 1.0.1+.

New in version 3.4.


Deprecated since version 3.7: The option is deprecated since OpenSSL 1.1.0.




¶
Prevents a TLSv1.3 connection. This option is only applicable in conjunction
with . It prevents the peers from choosing TLSv1.3 as
the protocol version. TLS 1.3 is available with OpenSSL 1.1.1 or later.
When Python has been compiled against an older version of OpenSSL, the
flag defaults to 0.

New in version 3.7.


Deprecated since version 3.7: The option is deprecated since OpenSSL 1.1.0. It was added to 2.7.15,
3.6.3 and 3.7.0 for backwards compatibility with OpenSSL 1.0.2.




¶
Disable all renegotiation in TLSv1.2 and earlier. Do not send
HelloRequest messages, and ignore renegotiation requests via ClientHello.
This option is only available with OpenSSL 1.1.0h and later.

New in version 3.7.




¶
Use the server’s cipher ordering preference, rather than the client’s.
This option has no effect on client sockets and SSLv2 server sockets.

New in version 3.3.




¶
Prevents re-use of the same DH key for distinct SSL sessions.  This
improves forward secrecy but requires more computational resources.
This option only applies to server sockets.

New in version 3.3.




¶
Prevents re-use of the same ECDH key for distinct SSL sessions.  This
improves forward secrecy but requires more computational resources.
This option only applies to server sockets.

New in version 3.3.




¶
Send dummy Change Cipher Spec (CCS) messages in TLS 1.3 handshake to make
a TLS 1.3 connection look more like a TLS 1.2 connection.
This option is only available with OpenSSL 1.1.1 and later.

New in version 3.8.




¶
Disable compression on the SSL channel.  This is useful if the application
protocol supports its own compression scheme.
This option is only available with OpenSSL 1.0.0 and later.

New in version 3.3.




class ¶
 collection of OP_* constants.



¶
Prevent client side from requesting a session ticket.

New in version 3.6.




¶
Whether the OpenSSL library has built-in support for the Application-Layer
Protocol Negotiation TLS extension as described in RFC 7301.

New in version 3.5.




¶
Whether the OpenSSL library has built-in support not checking subject
common name and  is
writeable.

New in version 3.7.




¶
Whether the OpenSSL library has built-in support for the Elliptic Curve-based
Diffie-Hellman key exchange.  This should be true unless the feature was
explicitly disabled by the distributor.

New in version 3.3.




¶
Whether the OpenSSL library has built-in support for the Server Name
Indication extension (as defined in RFC 6066).

New in version 3.2.




¶
Whether the OpenSSL library has built-in support for the Next Protocol
Negotiation as described in the Application Layer Protocol
Negotiation.
When true, you can use the  method to advertise
which protocols you want to support.

New in version 3.3.




¶
Whether the OpenSSL library has built-in support for the SSL 2.0 protocol.

New in version 3.7.




¶
Whether the OpenSSL library has built-in support for the SSL 3.0 protocol.

New in version 3.7.




¶
Whether the OpenSSL library has built-in support for the TLS 1.0 protocol.

New in version 3.7.




¶
Whether the OpenSSL library has built-in support for the TLS 1.1 protocol.

New in version 3.7.




¶
Whether the OpenSSL library has built-in support for the TLS 1.2 protocol.

New in version 3.7.




¶
Whether the OpenSSL library has built-in support for the TLS 1.3 protocol.

New in version 3.7.




¶
List of supported TLS channel binding types.  Strings in this list
can be used as arguments to .

New in version 3.3.




¶
The version string of the OpenSSL library loaded by the interpreter:



New in version 3.2.




¶
A tuple of five integers representing version information about the
OpenSSL library:



New in version 3.2.




¶
The raw version number of the OpenSSL library, as a single integer:



New in version 3.2.




¶

¶


Alert Descriptions from RFC 5246 and others. The IANA TLS Alert Registry
contains this list and references to the RFCs where their meaning is defined.
Used as the return value of the callback function in
.

New in version 3.4.




class ¶
 collection of ALERT_DESCRIPTION_* constants.

New in version 3.6.




¶
Option for  and
.  This value indicates that the
context may be used to authenticate Web servers (therefore, it will
be used to create client-side sockets).

New in version 3.4.




¶
Option for  and
.  This value indicates that the
context may be used to authenticate Web clients (therefore, it will
be used to create server-side sockets).

New in version 3.4.




class ¶
 collection of SSL_ERROR_* constants.

New in version 3.6.




class ¶
 collection of SSL and TLS versions for
 and .

New in version 3.7.




¶



¶
The minimum or maximum supported SSL or TLS version. These are magic
constants. Their values don’t reflect the lowest and highest available
TLS/SSL versions.



¶



¶



¶



¶



¶
SSL 3.0 to TLS 1.3.


