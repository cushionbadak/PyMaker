link:
library/asyncio-sync.html#synchronization-primitives

docs:

Synchronization Primitives¶
asyncio synchronization primitives are designed to be similar to
those of the  module with two important caveats:

asyncio primitives are not thread-safe, therefore they should not
be used for OS thread synchronization (use  for
that);
methods of these synchronization primitives do not accept the timeout
argument; use the  function to perform
operations with timeouts.

asyncio has the following basic synchronization primitives:









Lock¶


class (*, loop=None)¶
Implements a mutex lock for asyncio tasks.  Not thread-safe.
An asyncio lock can be used to guarantee exclusive access to a
shared resource.
The preferred way to use a Lock is an 
statement:


which is equivalent to:




coroutine ()¶
Acquire the lock.
This method waits until the lock is unlocked, sets it to
locked and returns .



()¶
Release the lock.
When the lock is locked, reset it to unlocked and return.
If the lock is unlocked, a  is raised.



()¶
Return  if the lock is locked.




Event¶


class (*, loop=None)¶
An event object.  Not thread-safe.
An asyncio event can be used to notify multiple asyncio tasks
that some event has happened.
An Event object manages an internal flag that can be set to true
with the  method and reset to false with the
 method.  The  method blocks until the
flag is set to true.  The flag is set to false initially.
Example:




coroutine ()¶
Wait until the event is set.
If the event is set, return  immediately.
Otherwise block until another task calls .



()¶
Set the event.
All tasks waiting for event to be set will be immediately
awakened.



()¶
Clear (unset) the event.
Tasks awaiting on  will now block until the
 method is called again.



()¶
Return  if the event is set.




Condition¶


class (lock=None, *, loop=None)¶
A Condition object.  Not thread-safe.
An asyncio condition primitive can be used by a task to wait for
some event to happen and then get exclusive access to a shared
resource.
In essence, a Condition object combines the functionality
of an  and a .  It is possible to have
multiple Condition objects share one Lock, which allows coordinating
exclusive access to a shared resource between different tasks
interested in particular states of that shared resource.
The optional lock argument must be a  object or
.  In the latter case a new Lock object is created
automatically.
The preferred way to use a Condition is an 
statement:


which is equivalent to:




coroutine ()¶
Acquire the underlying lock.
This method waits until the underlying lock is unlocked,
sets it to locked and returns .



(n=1)¶
Wake up at most n tasks (1 by default) waiting on this
condition.  The method is no-op if no tasks are waiting.
The lock must be acquired before this method is called and
released shortly after.  If called with an unlocked lock
a  error is raised.



()¶
Return  if the underlying lock is acquired.



()¶
Wake up all tasks waiting on this condition.
This method acts like , but wakes up all waiting
tasks.
The lock must be acquired before this method is called and
released shortly after.  If called with an unlocked lock
a  error is raised.



()¶
Release the underlying lock.
When invoked on an unlocked lock, a  is
raised.



coroutine ()¶
Wait until notified.
If the calling task has not acquired the lock when this method is
called, a  is raised.
This method releases the underlying lock, and then blocks until
it is awakened by a  or  call.
Once awakened, the Condition re-acquires its lock and this method
returns .



coroutine (predicate)¶
Wait until a predicate becomes true.
The predicate must be a callable which result will be
interpreted as a boolean value.  The final value is the
return value.




Semaphore¶


class (value=1, *, loop=None)¶
A Semaphore object.  Not thread-safe.
A semaphore manages an internal counter which is decremented by each
 call and incremented by each  call.
The counter can never go below zero; when  finds
that it is zero, it blocks, waiting until some task calls
.
The optional value argument gives the initial value for the
internal counter ( by default). If the given value is
less than  a  is raised.
The preferred way to use a Semaphore is an 
statement:


which is equivalent to:




coroutine ()¶
Acquire a semaphore.
If the internal counter is greater than zero, decrement
it by one and return  immediately.  If it is zero, wait
until a  is called and return .



()¶
Returns  if semaphore can not be acquired immediately.



()¶
Release a semaphore, incrementing the internal counter by one.
Can wake up a task waiting to acquire the semaphore.
Unlike ,  allows
making more  calls than  calls.




BoundedSemaphore¶


class (value=1, *, loop=None)¶
A bounded semaphore object.  Not thread-safe.
Bounded Semaphore is a version of  that raises
a  in  if it
increases the internal counter above the initial value.



Deprecated since version 3.7: Acquiring a lock using  or  and/or
 statement (, ) is deprecated.  Use  instead.


