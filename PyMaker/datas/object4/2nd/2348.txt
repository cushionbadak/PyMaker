link:
library/shelve.html#restrictions

docs:

Restrictions¶



The choice of which database package will be used (such as  or
) depends on which interface is available.  Therefore it is not
safe to open the database directly using .  The database is also
(unfortunately) subject to the limitations of , if it is used —
this means that (the pickled representation of) the objects stored in the
database should be fairly small, and in rare cases key collisions may cause
the database to refuse updates.
The  module does not support concurrent read/write access to
shelved objects.  (Multiple simultaneous read accesses are safe.)  When a
program has a shelf open for writing, no other program should have it open for
reading or writing.  Unix file locking can be used to solve this, but this
differs across Unix versions and requires knowledge about the database
implementation used.



class (dict, protocol=None, writeback=False, keyencoding='utf-8')¶
A subclass of  which stores pickled
values in the dict object.
By default, version 3 pickles are used to serialize values.  The version of the
pickle protocol can be specified with the protocol parameter. See the
 documentation for a discussion of the pickle protocols.
If the writeback parameter is , the object will hold a cache of all
entries accessed and write them back to the dict at sync and close times.
This allows natural operations on mutable entries, but can consume much more
memory and make sync and close take a long time.
The keyencoding parameter is the encoding used to encode keys before they
are used with the underlying dict.
A  object can also be used as a context manager, in which
case it will be automatically closed when the  block ends.

Changed in version 3.2: Added the keyencoding parameter; previously, keys were always encoded in
UTF-8.


Changed in version 3.4: Added context manager support.




class (dict, protocol=None, writeback=False, keyencoding='utf-8')¶
A subclass of  which exposes , ,
,  and  which are available
in the third-party  module from pybsddb but not in other database
modules.  The dict object passed to the constructor must support those
methods.  This is generally accomplished by calling one of
,  or .  The
optional protocol, writeback, and keyencoding parameters have the same
interpretation as for the  class.



class (filename, flag='c', protocol=None, writeback=False)¶
A subclass of  which accepts a filename instead of a dict-like
object.  The underlying file will be opened using .  By
default, the file will be created and opened for both read and write.  The
optional flag parameter has the same interpretation as for the 
function.  The optional protocol and writeback parameters have the same
interpretation as for the  class.

