link:
library/email.utils.html#module-email.utils

docs:

: Miscellaneous utilities¶
Source code: Lib/email/utils.py

There are a couple of useful utilities provided in the 
module:


(dt=None)¶
Return local time as an aware datetime object.  If called without
arguments, return current time.  Otherwise dt argument should be a
 instance, and it is converted to the local time
zone according to the system time zone database.  If dt is naive (that
is,  is ), it is assumed to be in local time.  In this
case, a positive or zero value for isdst causes  to presume
initially that summer time (for example, Daylight Saving Time) is or is not
(respectively) in effect for the specified time.  A negative value for
isdst causes the  to attempt to divine whether summer time
is in effect for the specified time.

New in version 3.3.




(idstring=None, domain=None)¶
Returns a string suitable for an RFC 2822-compliant
Message-ID header.  Optional idstring if given, is a string
used to strengthen the uniqueness of the message id.  Optional domain if
given provides the portion of the msgid after the ‘@’.  The default is the
local hostname.  It is not normally necessary to override this default, but
may be useful certain cases, such as a constructing distributed system that
uses a consistent domain name across multiple hosts.

Changed in version 3.2: Added the domain keyword.


The remaining functions are part of the legacy () email API.  There
is no need to directly use these with the new API, since the parsing and
formatting they provide is done automatically by the header parsing machinery
of the new API.


(str)¶
Return a new string with backslashes in str replaced by two backslashes, and
double quotes replaced by backslash-double quote.



(str)¶
Return a new string which is an unquoted version of str. If str ends and
begins with double quotes, they are stripped off.  Likewise if str ends and
begins with angle brackets, they are stripped off.



(address)¶
Parse address – which should be the value of some address-containing field such
as To or Cc – into its constituent realname and
email address parts.  Returns a tuple of that information, unless the parse
fails, in which case a 2-tuple of  is returned.



(pair, charset='utf-8')¶
The inverse of , this takes a 2-tuple of the form  and returns the string value suitable for a To or
Cc header.  If the first element of pair is false, then the
second element is returned unmodified.
Optional charset is the character set that will be used in the RFC 2047
encoding of the  if the  contains non-ASCII
characters.  Can be an instance of  or a
.  Defaults to .

Changed in version 3.3: Added the charset option.




(fieldvalues)¶
This method returns a list of 2-tuples of the form returned by .
fieldvalues is a sequence of header field values as might be returned by
.  Here’s a simple
example that gets all the recipients of a message:





(date)¶
Attempts to parse a date according to the rules in RFC 2822. however, some
mailers don’t follow that format as specified, so  tries to
guess correctly in such cases.  date is a string containing an RFC 2822
date, such as  .  If it succeeds in parsing
the date,  returns a 9-tuple that can be passed directly to
; otherwise  will be returned.  Note that indexes 6,
7, and 8 of the result tuple are not usable.



(date)¶
Performs the same function as , but returns either  or
a 10-tuple; the first 9 elements make up a tuple that can be passed directly to
, and the tenth is the offset of the date’s timezone from UTC
(which is the official term for Greenwich Mean Time) [1].  If the input string
has no timezone, the last element of the tuple returned is .  Note that
indexes 6, 7, and 8 of the result tuple are not usable.



(date)¶
The inverse of .  Performs the same function as
, but on success returns a .  If
the input date has a timezone of , the  will be a naive
, and if the date is conforming to the RFCs it will represent a
time in UTC but with no indication of the actual source timezone of the
message the date comes from.  If the input date has any other valid timezone
offset, the  will be an aware  with the
corresponding a  .

New in version 3.3.




(tuple)¶
Turn a 10-tuple as returned by  into a UTC
timestamp (seconds since the Epoch).  If the timezone item in the
tuple is , assume local time.



(timeval=None, localtime=False, usegmt=False)¶
Returns a date string as per RFC 2822, e.g.:


Optional timeval if given is a floating point time value as accepted by
 and , otherwise the current time is
used.
Optional localtime is a flag that when , interprets timeval, and
returns a date relative to the local timezone instead of UTC, properly taking
daylight savings time into account. The default is  meaning UTC is
used.
Optional usegmt is a flag that when , outputs a  date string with the
timezone as an ascii string , rather than a numeric . This is
needed for some protocols (such as HTTP). This only applies when localtime is
.  The default is .



(dt, usegmt=False)¶
Like , but the input is a  instance.  If it is
a naive datetime, it is assumed to be “UTC with no information about the
source timezone”, and the conventional  is used for the timezone.
If it is an aware , then the numeric timezone offset is used.
If it is an aware timezone with offset zero, then usegmt may be set to
, in which case the string  is used instead of the numeric
timezone offset.  This provides a way to generate standards conformant HTTP
date headers.

New in version 3.3.




(s)¶
Decode the string s according to RFC 2231.



(s, charset=None, language=None)¶
Encode the string s according to RFC 2231.  Optional charset and
language, if given is the character set name and language name to use.  If
neither is given, s is returned as-is.  If charset is given but language
is not, the string is encoded using the empty string for language.



(value, errors='replace', fallback_charset='us-ascii')¶
When a header parameter is encoded in RFC 2231 format,
 may return a
3-tuple containing the character set,
language, and value.   turns this into a unicode
string.  Optional errors is passed to the errors argument of ’s
 method; it defaults to .  Optional
fallback_charset specifies the character set to use if the one in the
RFC 2231 header is not known by Python; it defaults to .
For convenience, if the value passed to  is not
a tuple, it should be a string and it is returned unquoted.



(params)¶
Decode parameters list according to RFC 2231.  params is a sequence of
2-tuples containing elements of the form .

Footnotes



[1]Note that the sign of the timezone offset is the opposite of the sign of the
 variable for the same timezone; the latter variable follows
the POSIX standard while this module follows RFC 2822.


