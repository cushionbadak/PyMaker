link:
library/ctypes.html#calling-functions

docs:

Calling functionsÂ¶
You can call these functions like any other Python callable. This example uses
the  function, which returns system time in seconds since the Unix
epoch, and the  function, which returns a win32 module
handle.
This example calls both functions with a NULL pointer ( should be used
as the NULL pointer):



Note
 may raise a  after calling the function, if
it detects that an invalid number of arguments were passed.  This behavior
should not be relied upon.  It is deprecated in 3.6.2, and will be removed
in 3.7.

 is raised when you call an  function with the
 calling convention, or vice versa:


To find out the correct calling convention you have to look into the C header
file or the documentation for the function you want to call.
On Windows,  uses win32 structured exception handling to prevent
crashes from general protection faults when functions are called with invalid
argument values:


There are, however, enough ways to crash Python with , so you
should be careful anyway.  The  module can be helpful in
debugging crashes (e.g. from segmentation faults produced by erroneous C library
calls).
, integers, bytes objects and (unicode) strings are the only native
Python objects that can directly be used as parameters in these function calls.
 is passed as a C  pointer, bytes objects and strings are passed
as pointer to the memory block that contains their data ( or
).  Python integers are passed as the platforms default C
 type, their value is masked to fit into the C type.
Before we move on calling functions with other parameter types, we have to learn
more about  data types.
