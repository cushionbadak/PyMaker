link:
library/csv.html#module-contents

docs:

Module Contents¶
The  module defines the following functions:


(csvfile, dialect='excel', **fmtparams)¶
Return a reader object which will iterate over lines in the given csvfile.
csvfile can be any object which supports the iterator protocol and returns a
string each time its  method is called — file objects and list objects are both suitable.   If csvfile is a file object,
it should be opened with . [1]  An optional
dialect parameter can be given which is used to define a set of parameters
specific to a particular CSV dialect.  It may be an instance of a subclass of
the  class or one of the strings returned by the
 function.  The other optional fmtparams keyword arguments
can be given to override individual formatting parameters in the current
dialect.  For full details about the dialect and formatting parameters, see
section Dialects and Formatting Parameters.
Each row read from the csv file is returned as a list of strings.  No
automatic data type conversion is performed unless the  format
option is specified (in which case unquoted fields are transformed into floats).
A short usage example:





(csvfile, dialect='excel', **fmtparams)¶
Return a writer object responsible for converting the user’s data into delimited
strings on the given file-like object.  csvfile can be any object with a
 method.  If csvfile is a file object, it should be opened with
 [1].  An optional dialect
parameter can be given which is used to define a set of parameters specific to a
particular CSV dialect.  It may be an instance of a subclass of the
 class or one of the strings returned by the
 function.  The other optional fmtparams keyword arguments
can be given to override individual formatting parameters in the current
dialect.  For full details about the dialect and formatting parameters, see
section Dialects and Formatting Parameters. To make it
as easy as possible to interface with modules which implement the DB API, the
value  is written as the empty string.  While this isn’t a
reversible transformation, it makes it easier to dump SQL NULL data values to
CSV files without preprocessing the data returned from a  call.
All other non-string data are stringified with  before being written.
A short usage example:





(name[, dialect[, **fmtparams]])¶
Associate dialect with name.  name must be a string. The
dialect can be specified either by passing a sub-class of , or
by fmtparams keyword arguments, or both, with keyword arguments overriding
parameters of the dialect. For full details about the dialect and formatting
parameters, see section Dialects and Formatting Parameters.



(name)¶
Delete the dialect associated with name from the dialect registry.  An
 is raised if name is not a registered dialect name.



(name)¶
Return the dialect associated with name.  An  is raised if
name is not a registered dialect name.  This function returns an immutable
.



()¶
Return the names of all registered dialects.



([new_limit])¶
Returns the current maximum field size allowed by the parser. If new_limit is
given, this becomes the new limit.

The  module defines the following classes:


class (f, fieldnames=None, restkey=None, restval=None, dialect='excel', *args, **kwds)¶
Create an object that operates like a regular reader but maps the
information in each row to an 
whose keys are given by the optional fieldnames parameter.
The fieldnames parameter is a sequence.  If fieldnames is
omitted, the values in the first row of file f will be used as the
fieldnames.  Regardless of how the fieldnames are determined, the ordered
dictionary preserves their original ordering.
If a row has more fields than fieldnames, the remaining data is put in a
list and stored with the fieldname specified by restkey (which defaults
to ).  If a non-blank row has fewer fields than fieldnames, the
missing values are filled-in with .
All other optional or keyword arguments are passed to the underlying
 instance.

Changed in version 3.6: Returned rows are now of type .

A short usage example:





class (f, fieldnames, restval='', extrasaction='raise', dialect='excel', *args, **kwds)¶
Create an object which operates like a regular writer but maps dictionaries
onto output rows.  The fieldnames parameter is a  of keys that identify the order in which values in the
dictionary passed to the  method are written to file
f.  The optional restval parameter specifies the value to be
written if the dictionary is missing a key in fieldnames.  If the
dictionary passed to the  method contains a key not found in
fieldnames, the optional extrasaction parameter indicates what action to
take.
If it is set to , the default value, a 
is raised.
If it is set to , extra values in the dictionary are ignored.
Any other optional or keyword arguments are passed to the underlying
 instance.
Note that unlike the  class, the fieldnames parameter
of the  class is not optional.
A short usage example:





class ¶
The  class is a container class relied on primarily for its
attributes, which are used to define the parameters for a specific
 or  instance.



class ¶
The  class defines the usual properties of an Excel-generated CSV
file.  It is registered with the dialect name .



class ¶
The  class defines the usual properties of an Excel-generated
TAB-delimited file.  It is registered with the dialect name .



class ¶
The  class defines the usual properties of a CSV file
generated on UNIX systems, i.e. using  as line terminator and quoting
all fields.  It is registered with the dialect name .

New in version 3.2.




class ¶
The  class is used to deduce the format of a CSV file.
The  class provides two methods:


(sample, delimiters=None)¶
Analyze the given sample and return a  subclass
reflecting the parameters found.  If the optional delimiters parameter
is given, it is interpreted as a string containing possible valid
delimiter characters.



(sample)¶
Analyze the sample text (presumed to be in CSV format) and return
 if the first row appears to be a series of column headers.


An example for  use:


The  module defines the following constants:


¶
Instructs  objects to quote all fields.



¶
Instructs  objects to only quote those fields which contain
special characters such as delimiter, quotechar or any of the characters in
lineterminator.



¶
Instructs  objects to quote all non-numeric fields.
Instructs the reader to convert all non-quoted fields to type float.



¶
Instructs  objects to never quote fields.  When the current
delimiter occurs in output data it is preceded by the current escapechar
character.  If escapechar is not set, the writer will raise  if
any characters that require escaping are encountered.
Instructs  to perform no special processing of quote characters.

The  module defines the following exception:


exception ¶
Raised by any of the functions when an error is detected.

