link:
library/hashlib.html#key-derivation

docs:

Key derivation¶
Key derivation and key stretching algorithms are designed for secure password
hashing. Naive algorithms such as  are not resistant against
brute-force attacks. A good password hashing function must be tunable, slow, and
include a salt.


(hash_name, password, salt, iterations, dklen=None)¶
The function provides PKCS#5 password-based key derivation function 2. It
uses HMAC as pseudorandom function.
The string hash_name is the desired name of the hash digest algorithm for
HMAC, e.g. ‘sha1’ or ‘sha256’. password and salt are interpreted as
buffers of bytes. Applications and libraries should limit password to
a sensible length (e.g. 1024). salt should be about 16 or more bytes from
a proper source, e.g. .
The number of iterations should be chosen based on the hash algorithm and
computing power. As of 2013, at least 100,000 iterations of SHA-256 are
suggested.
dklen is the length of the derived key. If dklen is  then the
digest size of the hash algorithm hash_name is used, e.g. 64 for SHA-512.



New in version 3.4.


Note
A fast implementation of pbkdf2_hmac is available with OpenSSL.  The
Python implementation uses an inline version of . It is about
three times slower and doesn’t release the GIL.




(password, *, salt, n, r, p, maxmem=0, dklen=64)¶
The function provides scrypt password-based key derivation function as
defined in RFC 7914.
password and salt must be bytes-like objects.  Applications and libraries should limit password
to a sensible length (e.g. 1024).  salt should be about 16 or more
bytes from a proper source, e.g. .
n is the CPU/Memory cost factor, r the block size, p parallelization
factor and maxmem limits memory (OpenSSL 1.1.0 defaults to 32 MiB).
dklen is the length of the derived key.
Availability: OpenSSL 1.1+.

New in version 3.6.


