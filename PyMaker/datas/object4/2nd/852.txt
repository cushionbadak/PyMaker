link:
library/textwrap.html

docs:


 — Text wrapping and filling¶
Source code: Lib/textwrap.py

The  module provides some convenience functions,
as well as , the class that does all the work.
If you’re just wrapping or filling one or two text strings, the convenience
functions should be good enough; otherwise, you should use an instance of
 for efficiency.


(text, width=70, **kwargs)¶
Wraps the single paragraph in text (a string) so every line is at most
width characters long.  Returns a list of output lines, without final
newlines.
Optional keyword arguments correspond to the instance attributes of
, documented below.  width defaults to .
See the  method for additional details on how
 behaves.



(text, width=70, **kwargs)¶
Wraps the single paragraph in text, and returns a single string containing the
wrapped paragraph.   is shorthand for


In particular,  accepts exactly the same keyword arguments as
.



(text, width, **kwargs)¶
Collapse and truncate the given text to fit in the given width.
First the whitespace in text is collapsed (all whitespace is replaced by
single spaces).  If the result fits in the width, it is returned.
Otherwise, enough words are dropped from the end so that the remaining words
plus the  fit within :


Optional keyword arguments correspond to the instance attributes of
, documented below.  Note that the whitespace is
collapsed before the text is passed to the  
function, so changing the value of , ,
, and  will have no effect.

New in version 3.4.




(text)¶
Remove any common leading whitespace from every line in text.
This can be used to make triple-quoted strings line up with the left edge of the
display, while still presenting them in the source code in indented form.
Note that tabs and spaces are both treated as whitespace, but they are not
equal: the lines  and  are considered to have no
common leading whitespace.
For example:





(text, prefix, predicate=None)¶
Add prefix to the beginning of selected lines in text.
Lines are separated by calling .
By default, prefix is added to all lines that do not consist
solely of whitespace (including any line endings).
For example:


The optional predicate argument can be used to control which lines
are indented. For example, it is easy to add prefix to even empty
and whitespace-only lines:



New in version 3.3.


,  and  work by creating a
 instance and calling a single method on it.  That
instance is not reused, so for applications that process many text
strings using  and/or , it may be more efficient to
create your own  object.
Text is preferably wrapped on whitespaces and right after the hyphens in
hyphenated words; only then will long words be broken if necessary, unless
 is set to false.


class (**kwargs)¶
The  constructor accepts a number of optional keyword
arguments.  Each keyword argument corresponds to an instance attribute, so
for example


is the same as


You can re-use the same  object many times, and you can
change any of its options through direct assignment to instance attributes
between uses.
The  instance attributes (and keyword arguments to the
constructor) are as follows:


¶
(default: ) The maximum length of wrapped lines.  As long as there
are no individual words in the input text longer than ,
 guarantees that no output line will be longer than
 characters.



¶
(default: ) If true, then all tab characters in text will be
expanded to spaces using the  method of text.



¶
(default: ) If  is true, then all tab characters
in text will be expanded to zero or more spaces, depending on the
current column and the given tab size.

New in version 3.3.




¶
(default: ) If true, after tab expansion but before wrapping,
the  method will replace each whitespace character
with a single space.  The whitespace characters replaced are
as follows: tab, newline, vertical tab, formfeed, and carriage
return ().

Note
If  is false and  is true,
each tab character will be replaced by a single space, which is not
the same as tab expansion.


Note
If  is false, newlines may appear in the
middle of a line and cause strange output. For this reason, text should
be split into paragraphs (using  or similar)
which are wrapped separately.




¶
(default: ) If true, whitespace at the beginning and ending of
every line (after wrapping but before indenting) is dropped.
Whitespace at the beginning of the paragraph, however, is not dropped
if non-whitespace follows it.  If whitespace being dropped takes up an
entire line, the whole line is dropped.



¶
(default: ) String that will be prepended to the first line of
wrapped output.  Counts towards the length of the first line.  The empty
string is not indented.



¶
(default: ) String that will be prepended to all lines of wrapped
output except the first.  Counts towards the length of each line except
the first.



¶
(default: ) If true,  attempts to detect
sentence endings and ensure that sentences are always separated by exactly
two spaces.  This is generally desired for text in a monospaced font.
However, the sentence detection algorithm is imperfect: it assumes that a
sentence ending consists of a lowercase letter followed by one of ,
, or , possibly followed by one of  or ,
followed by a space.  One problem with this is algorithm is that it is
unable to detect the difference between “Dr.” in


and “Spot.” in


 is false by default.
Since the sentence detection algorithm relies on  for
the definition of “lowercase letter,” and a convention of using two spaces
after a period to separate sentences on the same line, it is specific to
English-language texts.



¶
(default: ) If true, then words longer than  will be
broken in order to ensure that no lines are longer than .  If
it is false, long words will not be broken, and some lines may be longer
than .  (Long words will be put on a line by themselves, in
order to minimize the amount by which  is exceeded.)



¶
(default: ) If true, wrapping will occur preferably on whitespaces
and right after hyphens in compound words, as it is customary in English.
If false, only whitespaces will be considered as potentially good places
for line breaks, but you need to set  to false if
you want truly insecable words.  Default behaviour in previous versions
was to always allow breaking hyphenated words.



¶
(default: ) If not , then the output will contain at most
max_lines lines, with placeholder appearing at the end of the output.

New in version 3.4.




¶
(default: ) String that will appear at the end of the output
text if it has been truncated.

New in version 3.4.


 also provides some public methods, analogous to the
module-level convenience functions:


(text)¶
Wraps the single paragraph in text (a string) so every line is at most
 characters long.  All wrapping options are taken from
instance attributes of the  instance.  Returns a list
of output lines, without final newlines.  If the wrapped output has no
content, the returned list is empty.



(text)¶
Wraps the single paragraph in text, and returns a single string
containing the wrapped paragraph.



