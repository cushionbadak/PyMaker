link:
library/reprlib.html#module-reprlib

docs:

 — Alternate  implementation¶
Source code: Lib/reprlib.py

The  module provides a means for producing object representations
with limits on the size of the resulting strings. This is used in the Python
debugger and may be useful in other contexts as well.
This module provides a class, an instance, and a function:


class ¶
Class which provides formatting services useful in implementing functions
similar to the built-in ; size limits for  different object types
are added to avoid the generation of representations which are excessively long.



¶
This is an instance of  which is used to provide the
 function described below.  Changing the attributes of this
object will affect the size limits used by  and the Python
debugger.



(obj)¶
This is the  method of .  It returns a string
similar to that returned by the built-in function of the same name, but with
limits on most sizes.

In addition to size-limiting tools, the module also provides a decorator for
detecting recursive calls to  and substituting a placeholder
string instead.


(fillvalue="...")¶
Decorator for  methods to detect recursive calls within the
same thread.  If a recursive call is made, the fillvalue is returned,
otherwise, the usual  call is made.  For example:



New in version 3.2.



Repr Objects¶
 instances provide several attributes which can be used to provide
size limits for the representations of different object types,  and methods
which format specific object types.


¶
Depth limit on the creation of recursive representations.  The default is .



¶

¶

¶

¶

¶

¶

¶
Limits on the number of entries represented for the named object type.  The
default is  for ,  for , and   for
the others.



¶
Maximum number of characters in the representation for an integer.  Digits
are dropped from the middle.  The default is .



¶
Limit on the number of characters in the representation of the string.  Note
that the “normal” representation of the string is used as the character source:
if escape sequences are needed in the representation, these may be mangled when
the representation is shortened.  The default is .



¶
This limit is used to control the size of object types for which no specific
formatting method is available on the  object. It is applied in a
similar manner as .  The default is .



(obj)¶
The equivalent to the built-in  that uses the formatting imposed by
the instance.



(obj, level)¶
Recursive implementation used by .  This uses the type of obj to
determine which formatting method to call, passing it obj and level.  The
type-specific methods should call  to perform recursive formatting,
with  for the value of level in the recursive  call.



(obj, level)
Formatting methods for specific types are implemented as methods with a name
based on the type name.  In the method name, TYPE is replaced by
. Dispatch to these methods is
handled by . Type-specific methods which need to recursively
format a value should call .



Subclassing Repr Objects¶
The use of dynamic dispatching by  allows subclasses of
 to add support for additional built-in object types or to modify
the handling of types already supported. This example shows how special support
for file objects could be added:



