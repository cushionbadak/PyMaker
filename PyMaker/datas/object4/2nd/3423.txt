link:
library/argparse.html#the-add-argument-method

docs:

The add_argument() method¶


(name or flags...[, action][, nargs][, const][, default][, type][, choices][, required][, help][, metavar][, dest])¶
Define how a single command-line argument should be parsed.  Each parameter
has its own more detailed description below, but in short they are:

name or flags - Either a name or a list of option strings, e.g. 
or .
action - The basic type of action to be taken when this argument is
encountered at the command line.
nargs - The number of command-line arguments that should be consumed.
const - A constant value required by some action and nargs selections.
default - The value produced if the argument is absent from the
command line.
type - The type to which the command-line argument should be converted.
choices - A container of the allowable values for the argument.
required - Whether or not the command-line option may be omitted
(optionals only).
help - A brief description of what the argument does.
metavar - A name for the argument in usage messages.
dest - The name of the attribute to be added to the object returned by
.


The following sections describe how each of these are used.

name or flags¶
The  method must know whether an optional
argument, like  or , or a positional argument, like a list of
filenames, is expected.  The first arguments passed to
 must therefore be either a series of
flags, or a simple argument name.  For example, an optional argument could
be created like:


while a positional argument could be created like:


When  is called, optional arguments will be
identified by the  prefix, and the remaining arguments will be assumed to
be positional:




action¶
 objects associate command-line arguments with actions.  These
actions can do just about anything with the command-line arguments associated with
them, though most actions simply add an attribute to the object returned by
.  The  keyword argument specifies
how the command-line arguments should be handled. The supplied actions are:

 - This just stores the argument’s value.  This is the default
action. For example:



 - This stores the value specified by the const keyword
argument.  The  action is most commonly used with
optional arguments that specify some sort of flag.  For example:



 and  - These are special cases of
 used for storing the values  and 
respectively.  In addition, they create default values of  and
 respectively.  For example:



 - This stores a list, and appends each argument value to the
list.  This is useful to allow an option to be specified multiple times.
Example usage:



 - This stores a list, and appends the value specified by
the const keyword argument to the list.  (Note that the const keyword
argument defaults to .)  The  action is typically
useful when multiple arguments need to store constants to the same list. For
example:



 - This counts the number of times a keyword argument occurs. For
example, this is useful for increasing verbosity levels:



 - This prints a complete help message for all the options in the
current parser and then exits. By default a help action is automatically
added to the parser. See  for details of how the
output is created.

 - This expects a  keyword argument in the
 call, and prints version information
and exits when invoked:




You may also specify an arbitrary action by passing an Action subclass or
other object that implements the same interface.  The recommended way to do
this is to extend , overriding the  method
and optionally the  method.
An example of a custom action:


For more details, see .


nargs¶
ArgumentParser objects usually associate a single command-line argument with a
single action to be taken.  The  keyword argument associates a
different number of command-line arguments with a single action.  The supported
values are:

 (an integer).   arguments from the command line will be gathered
together into a list.  For example:


Note that  produces a list of one item.  This is different from
the default, in which the item is produced by itself.



. One argument will be consumed from the command line if possible, and
produced as a single item.  If no command-line argument is present, the value from
default will be produced.  Note that for optional arguments, there is an
additional case - the option string is present but not followed by a
command-line argument.  In this case the value from const will be produced.  Some
examples to illustrate this:


One of the more common uses of  is to allow optional input and
output files:





.  All command-line arguments present are gathered into a list.  Note that
it generally doesn’t make much sense to have more than one positional argument
with , but multiple optional arguments with  is
possible.  For example:





. Just like , all command-line args present are gathered into a
list.  Additionally, an error message will be generated if there wasn’t at
least one command-line argument present.  For example:





.  All the remaining command-line arguments are gathered
into a list.  This is commonly useful for command line utilities that dispatch
to other command line utilities:




If the  keyword argument is not provided, the number of arguments consumed
is determined by the action.  Generally this means a single command-line argument
will be consumed and a single item (not a list) will be produced.


const¶
The  argument of  is used to hold
constant values that are not read from the command line but are required for
the various  actions.  The two most common uses of it are:

When  is called with
 or .  These actions add the
 value to one of the attributes of the object returned by
. See the action description for examples.
When  is called with option strings
(like  or ) and .  This creates an optional
argument that can be followed by zero or one command-line arguments.
When parsing the command line, if the option string is encountered with no
command-line argument following it, the value of  will be assumed instead.
See the nargs description for examples.

With the  and  actions, the 
keyword argument must be given.  For other actions, it defaults to .


default¶
All optional arguments and some positional arguments may be omitted at the
command line.  The  keyword argument of
, whose value defaults to ,
specifies what value should be used if the command-line argument is not present.
For optional arguments, the  value is used when the option string
was not present at the command line:


If the  value is a string, the parser parses the value as if it
were a command-line argument.  In particular, the parser applies any type
conversion argument, if provided, before setting the attribute on the
 return value.  Otherwise, the parser uses the value as is:


For positional arguments with nargs equal to  or , the  value
is used when no command-line argument was present:


Providing  causes no attribute to be added if the
command-line argument was not present:




type¶
By default,  objects read command-line arguments in as simple
strings. However, quite often the command-line string should instead be
interpreted as another type, like a  or .  The
 keyword argument of  allows any
necessary type-checking and type conversions to be performed.  Common built-in
types and functions can be used directly as the value of the  argument:


See the section on the default keyword argument for information on when the
 argument is applied to default arguments.
To ease the use of various types of files, the argparse module provides the
factory FileType which takes the , ,  and
 arguments of the  function.  For example,
 can be used to create a writable file:


 can take any callable that takes a single string argument and returns
the converted value:


The choices keyword argument may be more convenient for type checkers that
simply check against a range of values:


See the choices section for more details.


choices¶
Some command-line arguments should be selected from a restricted set of values.
These can be handled by passing a container object as the choices keyword
argument to .  When the command line is
parsed, argument values will be checked, and an error message will be displayed
if the argument was not one of the acceptable values:


Note that inclusion in the choices container is checked after any type
conversions have been performed, so the type of the objects in the choices
container should match the type specified:


Any object that supports the  operator can be passed as the choices
value, so  objects,  objects, custom containers,
etc. are all supported.


required¶
In general, the  module assumes that flags like  and 
indicate optional arguments, which can always be omitted at the command line.
To make an option required,  can be specified for the 
keyword argument to :


As the example shows, if an option is marked as ,
 will report an error if that option is not
present at the command line.

Note
Required options are generally considered bad form because users expect
options to be optional, and thus they should be avoided when possible.



help¶
The  value is a string containing a brief description of the argument.
When a user requests help (usually by using  or  at the
command line), these  descriptions will be displayed with each
argument:


The  strings can include various format specifiers to avoid repetition
of things like the program name or the argument default.  The available
specifiers include the program name,  and most keyword arguments to
, e.g. , , etc.:


As the help string supports %-formatting, if you want a literal  to appear
in the help string, you must escape it as .
 supports silencing the help entry for certain options, by
setting the  value to :




metavar¶
When  generates help messages, it needs some way to refer
to each expected argument.  By default, ArgumentParser objects use the dest
value as the “name” of each object.  By default, for positional argument
actions, the dest value is used directly, and for optional argument actions,
the dest value is uppercased.  So, a single positional argument with
 will be referred to as . A single
optional argument  that should be followed by a single command-line argument
will be referred to as .  An example:


An alternative name can be specified with :


Note that  only changes the displayed name - the name of the
attribute on the  object is still determined
by the dest value.
Different values of  may cause the metavar to be used multiple times.
Providing a tuple to  specifies a different display for each of the
arguments:




dest¶
Most  actions add some value as an attribute of the
object returned by .  The name of this
attribute is determined by the  keyword argument of
.  For positional argument actions,
 is normally supplied as the first argument to
:


For optional argument actions, the value of  is normally inferred from
the option strings.   generates the value of  by
taking the first long option string and stripping away the initial 
string.  If no long option strings were supplied,  will be derived from
the first short option string by stripping the initial  character.  Any
internal  characters will be converted to  characters to make sure
the string is a valid attribute name.  The examples below illustrate this
behavior:


 allows a custom attribute name to be provided:




Action classes¶
Action classes implement the Action API, a callable which returns a callable
which processes arguments from the command-line. Any object which follows
this API may be passed as the  parameter to
.


class (option_strings, dest, nargs=None, const=None, default=None, type=None, choices=None, required=False, help=None, metavar=None)¶

Action objects are used by an ArgumentParser to represent the information
needed to parse a single argument from one or more strings from the
command line. The Action class must accept the two positional arguments
plus any keyword arguments passed to 
except for the  itself.
Instances of Action (or return value of any callable to the 
parameter) should have attributes “dest”, “option_strings”, “default”, “type”,
“required”, “help”, etc. defined. The easiest way to ensure these attributes
are defined is to call .
Action instances should be callable, so subclasses must override the
 method, which should accept four parameters:

 - The ArgumentParser object which contains this action.
 - The  object that will be returned by
.  Most actions add an attribute to this
object using .
 - The associated command-line arguments, with any type conversions
applied.  Type conversions are specified with the type keyword argument to
.
 - The option string that was used to invoke this action.
The  argument is optional, and will be absent if the action
is associated with a positional argument.

The  method may perform arbitrary actions, but will typically set
attributes on the  based on  and .

