link:
library/formatter.html#the-writer-interface

docs:

The Writer Interface¶
Interfaces to create writers are dependent on the specific writer class being
instantiated.  The interfaces described below are the required interfaces which
all writers must support once initialized. Note that while most applications can
use the  class as a formatter, the writer must
typically be provided by the application.


()¶
Flush any buffered output or device control events.



(align)¶
Set the alignment style.  The align value can be any object, but by convention
is a string or , where  indicates that the writer’s “preferred”
alignment should be used. Conventional align values are ,
, , and .



(font)¶
Set the font style.  The value of font will be , indicating that the
device’s default font should be used, or a tuple of the form .  Size will be a string indicating the size of
font that should be used; specific strings and their interpretation must be
defined by the application.  The italic, bold, and teletype values are
Boolean values specifying which of those font attributes should be used.



(margin, level)¶
Set the margin level to the integer level and the logical tag to margin.
Interpretation of the logical tag is at the writer’s discretion; the only
restriction on the value of the logical tag is that it not be a false value for
non-zero values of level.



(spacing)¶
Set the spacing style to spacing.



(styles)¶
Set additional styles.  The styles value is a tuple of arbitrary values; the
value  should be ignored.  The styles tuple may be interpreted
either as a set or as a stack depending on the requirements of the application
and writer implementation.



()¶
Break the current line.



(blankline)¶
Produce a paragraph separation of at least blankline blank lines, or the
equivalent.  The blankline value will be an integer.  Note that the
implementation will receive a call to  before this call
if a line break is needed;  this method should not include ending the last line
of the paragraph. It is only responsible for vertical spacing between
paragraphs.



(*args, **kw)¶
Display a horizontal rule on the output device.  The arguments to this method
are entirely application- and writer-specific, and should be interpreted with
care.  The method implementation may assume that a line break has already been
issued via .



(data)¶
Output character data which may be word-wrapped and re-flowed as needed.  Within
any sequence of calls to this method, the writer may assume that spans of
multiple whitespace characters have been collapsed to single space characters.



(data)¶
Output character data which has already been formatted for display.  Generally,
this should be interpreted to mean that line breaks indicated by newline
characters should be preserved and no new line breaks should be introduced.  The
data may contain embedded newline and tab characters, unlike data provided to
the  interface.



(data)¶
Set data to the left of the current left margin, if possible. The value of
data is not restricted; treatment of non-string values is entirely
application- and writer-dependent.  This method will only be called at the
beginning of a line.

