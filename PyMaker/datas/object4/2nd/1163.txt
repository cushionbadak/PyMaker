link:
library/datetime.html#tzinfo-objects

docs:

 Objects¶


class ¶
This is an abstract base class, meaning that this class should not be
instantiated directly.  You need to derive a concrete subclass, and (at least)
supply implementations of the standard  methods needed by the
 methods you use.  The  module supplies
a simple concrete subclass of , , which can represent
timezones with fixed offset from UTC such as UTC itself or North American EST and
EDT.
An instance of (a concrete subclass of)  can be passed to the
constructors for  and  objects. The latter objects
view their attributes as being in local time, and the  object
supports methods revealing offset of local time from UTC, the name of the time
zone, and DST offset, all relative to a date or time object passed to them.
Special requirement for pickling:  A  subclass must have an
 method that can be called with no arguments, else it can be
pickled but possibly not unpickled again.  This is a technical requirement that
may be relaxed in the future.
A concrete subclass of  may need to implement the following
methods.  Exactly which methods are needed depends on the uses made of aware
 objects.  If in doubt, simply implement all of them.



(dt)¶
Return offset of local time from UTC, as a  object that is
positive east of UTC.  If local time is
west of UTC, this should be negative.  Note that this is intended to be the
total offset from UTC; for example, if a  object represents both
time zone and DST adjustments,  should return their sum.  If
the UTC offset isn’t known, return .  Else the value returned must be a
 object strictly between  and
 (the magnitude of the offset must be less
than one day).  Most implementations of  will probably look
like one of these two:


If  does not return ,  should not return
 either.
The default implementation of  raises
.

Changed in version 3.7: The UTC offset is not restricted to a whole number of minutes.




(dt)¶
Return the daylight saving time (DST) adjustment, as a 
object or
 if DST information isn’t known.  Return  if DST is not
in effect. If DST is in effect, return the offset as a  object
(see  for details). Note that DST offset, if applicable, has
already been added to the UTC offset returned by , so there’s
no need to consult  unless you’re interested in obtaining DST info
separately.  For example,  calls its 
attribute’s  method to determine how the  flag
should be set, and  calls  to account for
DST changes when crossing time zones.
An instance tz of a  subclass that models both standard and
daylight times must be consistent in this sense:

must return the same result for every  dt with   For sane  subclasses, this expression yields the time
zone’s “standard offset”, which should not depend on the date or the time, but
only on geographic location.  The implementation of 
relies on this, but cannot detect violations; it’s the programmer’s
responsibility to ensure it.  If a  subclass cannot guarantee
this, it may be able to override the default implementation of
 to work correctly with  regardless.
Most implementations of  will probably look like one of these two:


or


The default implementation of  raises .

Changed in version 3.7: The DST offset is not restricted to a whole number of minutes.




(dt)¶
Return the time zone name corresponding to the  object dt, as
a string. Nothing about string names is defined by the  module,
and there’s no requirement that it mean anything in particular.  For example,
“GMT”, “UTC”, “-500”, “-5:00”, “EDT”, “US/Eastern”, “America/New York” are all
valid replies.  Return  if a string name isn’t known.  Note that this is
a method rather than a fixed string primarily because some 
subclasses will wish to return different names depending on the specific value
of dt passed, especially if the  class is accounting for
daylight time.
The default implementation of  raises .

These methods are called by a  or  object, in
response to their methods of the same names.  A  object passes
itself as the argument, and a  object passes  as the
argument.  A  subclass’s methods should therefore be prepared to
accept a dt argument of , or of class .
When  is passed, it’s up to the class designer to decide the best
response.  For example, returning  is appropriate if the class wishes to
say that time objects don’t participate in the  protocols.  It
may be more useful for  to return the standard UTC offset, as
there is no other convention for discovering the standard offset.
When a  object is passed in response to a 
method,  is the same object as self.   methods can
rely on this, unless user code calls  methods directly.  The
intent is that the  methods interpret dt as being in local
time, and not need worry about objects in other timezones.
There is one more  method that a subclass may wish to override:


(dt)¶
This is called from the default 
implementation.  When called from that,  is self, and dt’s
date and time data are to be viewed as expressing a UTC time.  The purpose
of  is to adjust the date and time data, returning an
equivalent datetime in self’s local time.
Most  subclasses should be able to inherit the default
 implementation without problems.  It’s strong enough to handle
fixed-offset time zones, and time zones accounting for both standard and
daylight time, and the latter even if the DST transition times differ in
different years.  An example of a time zone the default 
implementation may not handle correctly in all cases is one where the standard
offset (from UTC) depends on the specific date and time passed, which can happen
for political reasons. The default implementations of  and
 may not produce the result you want if the result is one of the
hours straddling the moment the standard offset changes.
Skipping code for error cases, the default  implementation acts
like:



In the following  file there are some examples of
 classes:


Note that there are unavoidable subtleties twice per year in a 
subclass accounting for both standard and daylight time, at the DST transition
points.  For concreteness, consider US Eastern (UTC -0500), where EDT begins the
minute after 1:59 (EST) on the second Sunday in March, and ends the minute after
1:59 (EDT) on the first Sunday in November:


When DST starts (the “start” line), the local wall clock leaps from 1:59 to
3:00.  A wall time of the form 2:MM doesn’t really make sense on that day, so
 won’t deliver a result with  on the day DST
begins.  For example, at the Spring forward transition of 2016, we get


When DST ends (the “end” line), there’s a potentially worse problem: there’s an
hour that can’t be spelled unambiguously in local wall time: the last hour of
daylight time.  In Eastern, that’s times of the form 5:MM UTC on the day
daylight time ends.  The local wall clock leaps from 1:59 (daylight time) back
to 1:00 (standard time) again. Local times of the form 1:MM are ambiguous.
 mimics the local clock’s behavior by mapping two adjacent UTC
hours into the same local hour then.  In the Eastern example, UTC times of the
form 5:MM and 6:MM both map to 1:MM when converted to Eastern, but earlier times
have the  attribute set to 0 and the later times have it set to 1.
For example, at the Fall back transition of 2016, we get


Note that the  instances that differ only by the value of the
 attribute are considered equal in comparisons.
Applications that can’t bear wall-time ambiguities should explicitly check the
value of the  attribute or avoid using hybrid
 subclasses; there are no ambiguities when using ,
or any other fixed-offset  subclass (such as a class representing
only EST (fixed offset -5 hours), or only EDT (fixed offset -4 hours)).

See also

dateutil.tz
The standard library has  class for handling arbitrary
fixed offsets from UTC and  as UTC timezone instance.
dateutil.tz library brings the IANA timezone database (also known as the
Olson database) to Python and its usage is recommended.

IANA timezone database
The Time Zone Database (often called tz, tzdata or zoneinfo) contains code and
data that represent the history of local time for many representative
locations around the globe. It is updated periodically to reflect changes
made by political bodies to time zone boundaries, UTC offsets, and
daylight-saving rules.


