link:
library/asyncio-task.html#coroutines

docs:

Coroutines¶
Coroutines declared with async/await syntax is the preferred way of
writing asyncio applications.  For example, the following snippet
of code (requires Python 3.7+) prints “hello”, waits 1 second,
and then prints “world”:


Note that simply calling a coroutine will not schedule it to
be executed:


To actually run a coroutine, asyncio provides three main mechanisms:

The  function to run the top-level
entry point “main()” function (see the above example.)

Awaiting on a coroutine.  The following snippet of code will
print “hello” after waiting for 1 second, and then print “world”
after waiting for another 2 seconds:


Expected output:



The  function to run coroutines
concurrently as asyncio .
Let’s modify the above example and run two  coroutines
concurrently:


Note that expected output now shows that the snippet runs
1 second faster than before:




