link:
library/email.policy.html#email.policy.Policy

docs:


class (**kw)¶
This is the abstract base class for all policy classes.  It provides
default implementations for a couple of trivial methods, as well as the
implementation of the immutability property, the  method, and
the constructor semantics.
The constructor of a policy class can be passed various keyword arguments.
The arguments that may be specified are any non-method properties on this
class, plus any additional non-method properties on the concrete class.  A
value specified in the constructor will override the default value for the
corresponding attribute.
This class defines the following properties, and thus values for the
following may be passed in the constructor of any policy class:


¶
The maximum length of any line in the serialized output, not counting the
end of line character(s).  Default is 78, per RFC 5322.  A value of
 or  indicates that no line wrapping should be
done at all.



¶
The string to be used to terminate lines in serialized output.  The
default is  because that’s the internal end-of-line discipline used
by Python, though  is required by the RFCs.



¶
Controls the type of Content Transfer Encodings that may be or are
required to be used.  The possible values are:







all data must be “7 bit clean” (ASCII-only).  This means that
where necessary data will be encoded using either
quoted-printable or base64 encoding.


data is not constrained to be 7 bit clean.  Data in headers is
still required to be ASCII-only and so will be encoded (see
 and  below for
exceptions), but body parts may use the  CTE.



A  value of  only works with , not
, because strings cannot contain binary data.  If a
 is operating under a policy that specifies
, it will act as if  is .



¶
If , any defects encountered will be raised as errors.  If
 (the default), defects will be passed to the
 method.



¶
If , lines starting with “From “ in the body are
escaped by putting a  in front of them. This parameter is used when
the message is being serialized by a generator.
Default: .

New in version 3.5: The mangle_from_ parameter.




¶
A factory function for constructing a new empty message object.  Used
by the parser when building messages.  Defaults to , in
which case  is used.

New in version 3.6.


The following  method is intended to be called by code using
the email library to create policy instances with custom settings:


(**kw)¶
Return a new  instance whose attributes have the same
values as the current instance, except where those attributes are
given new values by the keyword arguments.

The remaining  methods are called by the email package code,
and are not intended to be called by an application using the email package.
A custom policy must implement all of these methods.


(obj, defect)¶
Handle a defect found on obj.  When the email package calls this
method, defect will always be a subclass of
.
The default implementation checks the  flag.  If
it is , defect is raised as an exception.  If it is 
(the default), obj and defect are passed to .



(obj, defect)¶
Register a defect on obj.  In the email package, defect will always
be a subclass of .
The default implementation calls the  method of the 
attribute of obj.  When the email package calls ,
obj will normally have a  attribute that has an 
method.  Custom object types used with the email package (for example,
custom  objects) should also provide such an attribute,
otherwise defects in parsed messages will raise unexpected errors.



(name)¶
Return the maximum allowed number of headers named name.
Called when a header is added to an 
or  object.  If the returned value is not
 or , and there are already a number of headers with the
name name greater than or equal to the value returned, a
 is raised.
Because the default behavior of  is to append the
value to the list of headers, it is easy to create duplicate headers
without realizing it.  This method allows certain headers to be limited
in the number of instances of that header that may be added to a
 programmatically.  (The limit is not observed by the parser,
which will faithfully produce as many headers as exist in the message
being parsed.)
The default implementation returns  for all header names.



(sourcelines)¶
The email package calls this method with a list of strings, each string
ending with the line separation characters found in the source being
parsed.  The first line includes the field header name and separator.
All whitespace in the source is preserved.  The method should return the
 tuple that is to be stored in the  to
represent the parsed header.
If an implementation wishes to retain compatibility with the existing
email package policies, name should be the case preserved name (all
characters up to the ‘’ separator), while value should be the
unfolded value (all line separator characters removed, but whitespace
kept intact), stripped of leading whitespace.
sourcelines may contain surrogateescaped binary data.
There is no default implementation



(name, value)¶
The email package calls this method with the name and value provided by
the application program when the application program is modifying a
 programmatically (as opposed to a  created by a
parser).  The method should return the  tuple that is to
be stored in the  to represent the header.
If an implementation wishes to retain compatibility with the existing
email package policies, the name and value should be strings or
string subclasses that do not change the content of the passed in
arguments.
There is no default implementation



(name, value)¶
The email package calls this method with the name and value currently
stored in the  when that header is requested by the
application program, and whatever the method returns is what is passed
back to the application as the value of the header being retrieved.
Note that there may be more than one header with the same name stored in
the ; the method is passed the specific name and value of the
header destined to be returned to the application.
value may contain surrogateescaped binary data.  There should be no
surrogateescaped binary data in the value returned by the method.
There is no default implementation



(name, value)¶
The email package calls this method with the name and value currently
stored in the  for a given header.  The method should return a
string that represents that header “folded” correctly (according to the
policy settings) by composing the name with the value and inserting
 characters at the appropriate places.  See RFC 5322
for a discussion of the rules for folding email headers.
value may contain surrogateescaped binary data.  There should be no
surrogateescaped binary data in the string returned by the method.



(name, value)¶
The same as , except that the returned value should be a
bytes object rather than a string.
value may contain surrogateescaped binary data.  These could be
converted back into binary data in the returned bytes object.

