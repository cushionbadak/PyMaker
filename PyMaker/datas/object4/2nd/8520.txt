link:
library/unittest.html#unittest.TestResult

docs:


class ¶
This class is used to compile information about which tests have succeeded
and which have failed.
A  object stores the results of a set of tests.  The
 and  classes ensure that results are
properly recorded; test authors do not need to worry about recording the
outcome of tests.
Testing frameworks built on top of  may want access to the
 object generated by running a set of tests for reporting
purposes; a  instance is returned by the
 method for this purpose.
 instances have the following attributes that will be of
interest when inspecting the results of running a set of tests:


¶
A list containing 2-tuples of  instances and strings
holding formatted tracebacks. Each tuple represents a test which raised an
unexpected exception.



¶
A list containing 2-tuples of  instances and strings
holding formatted tracebacks. Each tuple represents a test where a failure
was explicitly signalled using the  methods.



¶
A list containing 2-tuples of  instances and strings
holding the reason for skipping the test.

New in version 3.1.




¶
A list containing 2-tuples of  instances and strings
holding formatted tracebacks.  Each tuple represents an expected failure
of the test case.



¶
A list containing  instances that were marked as expected
failures, but succeeded.



¶
Set to  when the execution of tests should stop by .



¶
The total number of tests run so far.



¶
If set to true,  and  will be buffered in between
 and  being called. Collected output will
only be echoed onto the real  and  if the test
fails or errors. Any output is also attached to the failure / error message.

New in version 3.2.




¶
If set to true  will be called on the first failure or error,
halting the test run.

New in version 3.2.




¶
If set to true then local variables will be shown in tracebacks.

New in version 3.5.




()¶
Return  if all tests run so far have passed, otherwise returns
.

Changed in version 3.4: Returns  if there were any 
from tests marked with the  decorator.




()¶
This method can be called to signal that the set of tests being run should
be aborted by setting the  attribute to .
 objects should respect this flag and return without
running any additional tests.
For example, this feature is used by the  class to
stop the test framework when the user signals an interrupt from the
keyboard.  Interactive tools which provide 
implementations can use this in a similar manner.

The following methods of the  class are used to maintain
the internal data structures, and may be extended in subclasses to support
additional reporting requirements.  This is particularly useful in building
tools which support interactive reporting while tests are being run.


(test)¶
Called when the test case test is about to be run.



(test)¶
Called after the test case test has been executed, regardless of the
outcome.



()¶
Called once before any tests are executed.

New in version 3.1.




()¶
Called once after all tests are executed.

New in version 3.1.




(test, err)¶
Called when the test case test raises an unexpected exception. err is a
tuple of the form returned by : .
The default implementation appends a tuple  to
the instance’s  attribute, where formatted_err is a
formatted traceback derived from err.



(test, err)¶
Called when the test case test signals a failure. err is a tuple of
the form returned by : .
The default implementation appends a tuple  to
the instance’s  attribute, where formatted_err is a
formatted traceback derived from err.



(test)¶
Called when the test case test succeeds.
The default implementation does nothing.



(test, reason)¶
Called when the test case test is skipped.  reason is the reason the
test gave for skipping.
The default implementation appends a tuple  to the
instance’s  attribute.



(test, err)¶
Called when the test case test fails, but was marked with the
 decorator.
The default implementation appends a tuple  to
the instance’s  attribute, where formatted_err
is a formatted traceback derived from err.



(test)¶
Called when the test case test was marked with the
 decorator, but succeeded.
The default implementation appends the test to the instance’s
 attribute.



(test, subtest, outcome)¶
Called when a subtest finishes.  test is the test case
corresponding to the test method.  subtest is a custom
 instance describing the subtest.
If outcome is , the subtest succeeded.  Otherwise,
it failed with an exception where outcome is a tuple of the form
returned by : .
The default implementation does nothing when the outcome is a
success, and records subtest failures as normal failures.

New in version 3.4.


