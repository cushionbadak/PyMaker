link:
reference/datamodel.html#object.__ge__

docs:


(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶

(self, other)¶
These are the so-called “rich comparison” methods. The correspondence between
operator symbols and method names is as follows:  calls ,
 calls ,  calls ,  calls
,  calls , and  calls
.
A rich comparison method may return the singleton  if it does
not implement the operation for a given pair of arguments. By convention,
 and  are returned for a successful comparison. However, these
methods can return any value, so if the comparison operator is used in a Boolean
context (e.g., in the condition of an  statement), Python will call
 on the value to determine if the result is true or false.
By default,  delegates to  and
inverts the result unless it is .  There are no other
implied relationships among the comparison operators, for example,
the truth of  does not imply .
To automatically generate ordering operations from a single root operation,
see .
See the paragraph on  for
some important notes on creating hashable objects which support
custom comparison operations and are usable as dictionary keys.
There are no swapped-argument versions of these methods (to be used when the
left argument does not support the operation but the right argument does);
rather,  and  are each other’s reflection,
 and  are each other’s reflection, and
 and  are their own reflection.
If the operands are of different types, and right operand’s type is
a direct or indirect subclass of the left operand’s type,
the reflected method of the right operand has priority, otherwise
the left operand’s method has priority.  Virtual subclassing is
not considered.
