link:
library/queue.html#module-queue

docs:

 — A synchronized queue class¶
Source code: Lib/queue.py

The  module implements multi-producer, multi-consumer queues.
It is especially useful in threaded programming when information must be
exchanged safely between multiple threads.  The  class in this
module implements all the required locking semantics.  It depends on the
availability of thread support in Python; see the 
module.
The module implements three types of queue, which differ only in the order in
which the entries are retrieved.  In a FIFO
queue, the first tasks added are the first retrieved. In a
LIFO queue, the most recently added entry is
the first retrieved (operating like a stack).  With a priority queue,
the entries are kept sorted (using the  module) and the
lowest valued entry is retrieved first.
Internally, those three types of queues use locks to temporarily block
competing threads; however, they are not designed to handle reentrancy
within a thread.
In addition, the module implements a “simple”
FIFO queue type, , whose
specific implementation provides additional guarantees
in exchange for the smaller functionality.
The  module defines the following classes and exceptions:


class (maxsize=0)¶
Constructor for a FIFO queue.  maxsize is
an integer that sets the upperbound
limit on the number of items that can be placed in the queue.  Insertion will
block once this size has been reached, until queue items are consumed.  If
maxsize is less than or equal to zero, the queue size is infinite.



class (maxsize=0)¶
Constructor for a LIFO queue.  maxsize is
an integer that sets the upperbound
limit on the number of items that can be placed in the queue.  Insertion will
block once this size has been reached, until queue items are consumed.  If
maxsize is less than or equal to zero, the queue size is infinite.



class (maxsize=0)¶
Constructor for a priority queue.  maxsize is an integer that sets the upperbound
limit on the number of items that can be placed in the queue.  Insertion will
block once this size has been reached, until queue items are consumed.  If
maxsize is less than or equal to zero, the queue size is infinite.
The lowest valued entries are retrieved first (the lowest valued entry is the
one returned by ).  A typical pattern for entries
is a tuple in the form: .
If the data elements are not comparable, the data can be wrapped in a class
that ignores the data item and only compares the priority number:





class ¶
Constructor for an unbounded FIFO queue.
Simple queues lack advanced functionality such as task tracking.

New in version 3.7.




exception ¶
Exception raised when non-blocking  (or
) is called
on a  object which is empty.



exception ¶
Exception raised when non-blocking  (or
) is called
on a  object which is full.


Queue Objects¶
Queue objects (, , or )
provide the public methods described below.


()¶
Return the approximate size of the queue.  Note, qsize() > 0 doesn’t
guarantee that a subsequent get() will not block, nor will qsize() < maxsize
guarantee that put() will not block.



()¶
Return  if the queue is empty,  otherwise.  If empty()
returns  it doesn’t guarantee that a subsequent call to put()
will not block.  Similarly, if empty() returns  it doesn’t
guarantee that a subsequent call to get() will not block.



()¶
Return  if the queue is full,  otherwise.  If full()
returns  it doesn’t guarantee that a subsequent call to get()
will not block.  Similarly, if full() returns  it doesn’t
guarantee that a subsequent call to put() will not block.



(item, block=True, timeout=None)¶
Put item into the queue. If optional args block is true and timeout is
 (the default), block if necessary until a free slot is available. If
timeout is a positive number, it blocks at most timeout seconds and raises
the  exception if no free slot was available within that time.
Otherwise (block is false), put an item on the queue if a free slot is
immediately available, else raise the  exception (timeout is
ignored in that case).



(item)¶
Equivalent to .



(block=True, timeout=None)¶
Remove and return an item from the queue. If optional args block is true and
timeout is  (the default), block if necessary until an item is available.
If timeout is a positive number, it blocks at most timeout seconds and
raises the  exception if no item was available within that time.
Otherwise (block is false), return an item if one is immediately available,
else raise the  exception (timeout is ignored in that case).
Prior to 3.0 on POSIX systems, and for all versions on Windows, if
block is true and timeout is , this operation goes into
an uninterruptible wait on an underlying lock. This means that no exceptions
can occur, and in particular a SIGINT will not trigger a .



()¶
Equivalent to .

Two methods are offered to support tracking whether enqueued tasks have been
fully processed by daemon consumer threads.


()¶
Indicate that a formerly enqueued task is complete.  Used by queue consumer
threads.  For each  used to fetch a task, a subsequent call to
 tells the queue that the processing on the task is complete.
If a  is currently blocking, it will resume when all items have been
processed (meaning that a  call was received for every item
that had been  into the queue).
Raises a  if called more times than there were items placed in
the queue.



()¶
Blocks until all items in the queue have been gotten and processed.
The count of unfinished tasks goes up whenever an item is added to the queue.
The count goes down whenever a consumer thread calls  to
indicate that the item was retrieved and all work on it is complete. When the
count of unfinished tasks drops to zero,  unblocks.

Example of how to wait for enqueued tasks to be completed:




SimpleQueue Objects¶
 objects provide the public methods described below.


()¶
Return the approximate size of the queue.  Note, qsize() > 0 doesn’t
guarantee that a subsequent get() will not block.



()¶
Return  if the queue is empty,  otherwise. If empty()
returns  it doesn’t guarantee that a subsequent call to get()
will not block.



(item, block=True, timeout=None)¶
Put item into the queue.  The method never blocks and always succeeds
(except for potential low-level errors such as failure to allocate memory).
The optional args block and timeout are ignored and only provided
for compatibility with .

CPython implementation detail: This method has a C implementation which is reentrant.  That is, a
 or  call can be interrupted by another 
call in the same thread without deadlocking or corrupting internal
state inside the queue.  This makes it appropriate for use in
destructors such as  methods or  callbacks.




(item)¶
Equivalent to , provided for compatibility with
.



(block=True, timeout=None)¶
Remove and return an item from the queue.  If optional args block is true and
timeout is  (the default), block if necessary until an item is available.
If timeout is a positive number, it blocks at most timeout seconds and
raises the  exception if no item was available within that time.
Otherwise (block is false), return an item if one is immediately available,
else raise the  exception (timeout is ignored in that case).



()¶
Equivalent to .


See also

Class 
A queue class for use in a multi-processing (rather than multi-threading)
context.

 is an alternative implementation of unbounded
queues with fast atomic  and
 operations that do not require locking.


