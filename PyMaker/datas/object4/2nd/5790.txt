link:
library/json.html#json.dump

docs:


(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)¶
Serialize obj as a JSON formatted stream to fp (a -supporting
file-like object) using this conversion table.
If skipkeys is true (default: ), then dict keys that are not
of a basic type (, , , ,
) will be skipped instead of raising a .
The  module always produces  objects, not
 objects. Therefore,  must support 
input.
If ensure_ascii is true (the default), the output is guaranteed to
have all incoming non-ASCII characters escaped.  If ensure_ascii is
false, these characters will be output as-is.
If check_circular is false (default: ), then the circular
reference check for container types will be skipped and a circular reference
will result in an  (or worse).
If allow_nan is false (default: ), then it will be a
 to serialize out of range  values (,
, ) in strict compliance of the JSON specification.
If allow_nan is true, their JavaScript equivalents (,
, ) will be used.
If indent is a non-negative integer or string, then JSON array elements and
object members will be pretty-printed with that indent level.  An indent level
of 0, negative, or  will only insert newlines.   (the default)
selects the most compact representation. Using a positive integer indent
indents that many spaces per level.  If indent is a string (such as ),
that string is used to indent each level.

Changed in version 3.2: Allow strings for indent in addition to integers.

If specified, separators should be an 
tuple.  The default is  if indent is  and
 otherwise.  To get the most compact JSON representation,
you should specify  to eliminate whitespace.

Changed in version 3.4: Use  as default if indent is not .

If specified, default should be a function that gets called for objects that
can’t otherwise be serialized.  It should return a JSON encodable version of
the object or raise a .  If not specified, 
is raised.
If sort_keys is true (default: ), then the output of
dictionaries will be sorted by key.
To use a custom  subclass (e.g. one that overrides the
 method to serialize additional types), specify it with the
cls kwarg; otherwise  is used.

Changed in version 3.6: All optional parameters are now keyword-only.


Note
Unlike  and , JSON is not a framed protocol,
so trying to serialize multiple objects with repeated calls to
 using the same fp will result in an invalid JSON file.

