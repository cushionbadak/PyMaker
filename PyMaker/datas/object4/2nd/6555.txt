link:
library/wsgiref.html#module-wsgiref

docs:

 — WSGI Utilities and Reference Implementation¶

The Web Server Gateway Interface (WSGI) is a standard interface between web
server software and web applications written in Python. Having a standard
interface makes it easy to use an application that supports WSGI with a number
of different web servers.
Only authors of web servers and programming frameworks need to know every detail
and corner case of the WSGI design.  You don’t need to understand every detail
of WSGI just to install a WSGI application or to write a web application using
an existing framework.
 is a reference implementation of the WSGI specification that can
be used to add WSGI support to a web server or framework.  It provides utilities
for manipulating WSGI environment variables and response headers, base classes
for implementing WSGI servers, a demo HTTP server that serves WSGI applications,
and a validation tool that checks WSGI servers and applications for conformance
to the WSGI specification (PEP 3333).
See wsgi.readthedocs.io for more information about WSGI, and links
to tutorials and other resources.

 – WSGI environment utilities¶
This module provides a variety of utility functions for working with WSGI
environments.  A WSGI environment is a dictionary containing HTTP request
variables as described in PEP 3333.  All of the functions taking an environ
parameter expect a WSGI-compliant dictionary to be supplied; please see
PEP 3333 for a detailed specification.


(environ)¶
Return a guess for whether  should be “http” or “https”, by
checking for a  environment variable in the environ dictionary.  The
return value is a string.
This function is useful when creating a gateway that wraps CGI or a CGI-like
protocol such as FastCGI.  Typically, servers providing such protocols will
include a  variable with a value of “1” “yes”, or “on” when a request
is received via SSL.  So, this function returns “https” if such a value is
found, and “http” otherwise.



(environ, include_query=True)¶
Return the full request URI, optionally including the query string, using the
algorithm found in the “URL Reconstruction” section of PEP 3333.  If
include_query is false, the query string is not included in the resulting URI.



(environ)¶
Similar to , except that the  and
 variables are ignored.  The result is the base URI of the
application object addressed by the request.



(environ)¶
Shift a single name from  to  and return the name.
The environ dictionary is modified in-place; use a copy if you need to keep
the original  or  intact.
If there are no remaining path segments in ,  is returned.
Typically, this routine is used to process each portion of a request URI path,
for example to treat the path as a series of dictionary keys. This routine
modifies the passed-in environment to make it suitable for invoking another WSGI
application that is located at the target URI. For example, if there is a WSGI
application at , and the request URI path is , and the
WSGI application at  calls , it will receive the
string “bar”, and the environment will be updated to be suitable for passing to
a WSGI application at .  That is,  will change from
 to , and  will change from  to
.
When  is just a “/”, this routine returns an empty string and
appends a trailing slash to , even though empty path segments are
normally ignored, and  doesn’t normally end in a slash.  This is
intentional behavior, to ensure that an application can tell the difference
between URIs ending in  from ones ending in  when using this
routine to do object traversal.



(environ)¶
Update environ with trivial defaults for testing purposes.
This routine adds various parameters required for WSGI, including ,
, , , ,
, and all of the PEP 3333-defined  variables.  It
only supplies default values, and does not replace any existing settings for
these variables.
This routine is intended to make it easier for unit tests of WSGI servers and
applications to set up dummy environments.  It should NOT be used by actual WSGI
servers or applications, since the data is fake!
Example usage:



In addition to the environment functions above, the  module
also provides these miscellaneous utilities:


(header_name)¶
Return true if ‘header_name’ is an HTTP/1.1 “Hop-by-Hop” header, as defined by
RFC 2616.



class (filelike, blksize=8192)¶
A wrapper to convert a file-like object to an iterator.  The resulting objects
support both  and  iteration styles, for
compatibility with Python 2.1 and Jython. As the object is iterated over, the
optional blksize parameter will be repeatedly passed to the filelike
object’s  method to obtain bytestrings to yield.  When 
returns an empty bytestring, iteration is ended and is not resumable.
If filelike has a  method, the returned object will also have a
 method, and it will invoke the filelike object’s 
method when called.
Example usage:





 – WSGI response header tools¶
This module provides a single class, , for convenient
manipulation of WSGI response headers using a mapping-like interface.


class ([headers])¶
Create a mapping-like object wrapping headers, which must be a list of header
name/value tuples as described in PEP 3333. The default value of headers is
an empty list.
 objects support typical mapping operations including
, , , ,
 and .  For each of
these methods, the key is the header name (treated case-insensitively), and the
value is the first value associated with that header name.  Setting a header
deletes any existing values for that header, then adds a new value at the end of
the wrapped header list.  Headers’ existing order is generally maintained, with
new headers added to the end of the wrapped list.
Unlike a dictionary,  objects do not raise an error when you try
to get or delete a key that isn’t in the wrapped header list. Getting a
nonexistent header just returns , and deleting a nonexistent header does
nothing.
 objects also support , , and
 methods.  The lists returned by  and  can
include the same key more than once if there is a multi-valued header.  The
 of a  object is the same as the length of its
, which is the same as the length of the wrapped header list.  In
fact, the  method just returns a copy of the wrapped header list.
Calling  on a  object returns a formatted bytestring
suitable for transmission as HTTP response headers.  Each header is placed on a
line with its value, separated by a colon and a space. Each line is terminated
by a carriage return and line feed, and the bytestring is terminated with a
blank line.
In addition to their mapping interface and formatting features, 
objects also have the following methods for querying and adding multi-valued
headers, and for adding headers with MIME parameters:


(name)¶
Return a list of all the values for the named header.
The returned list will be sorted in the order they appeared in the original
header list or were added to this instance, and may contain duplicates.  Any
fields deleted and re-inserted are always appended to the header list.  If no
fields exist with the given name, returns an empty list.



(name, value, **_params)¶
Add a (possibly multi-valued) header, with optional MIME parameters specified
via keyword arguments.
name is the header field to add.  Keyword arguments can be used to set MIME
parameters for the header field.  Each parameter must be a string or .
Underscores in parameter names are converted to dashes, since dashes are illegal
in Python identifiers, but many MIME parameter names include dashes.  If the
parameter value is a string, it is added to the header value parameters in the
form . If it is , only the parameter name is added.
(This is used for MIME parameters without a value.)  Example usage:


The above will add a header that looks like this:




Changed in version 3.5: headers parameter is optional.




 – a simple WSGI HTTP server¶
This module implements a simple HTTP server (based on )
that serves WSGI applications.  Each server instance serves a single WSGI
application on a given host and port.  If you want to serve multiple
applications on a single host and port, you should create a WSGI application
that parses  to select which application to invoke for each
request.  (E.g., using the  function from
.)


(host, port, app, server_class=WSGIServer, handler_class=WSGIRequestHandler)¶
Create a new WSGI server listening on host and port, accepting connections
for app.  The return value is an instance of the supplied server_class, and
will process requests using the specified handler_class.  app must be a WSGI
application object, as defined by PEP 3333.
Example usage:





(environ, start_response)¶
This function is a small but complete WSGI application that returns a text page
containing the message “Hello world!” and a list of the key/value pairs provided
in the environ parameter.  It’s useful for verifying that a WSGI server (such
as ) is able to run a simple WSGI application
correctly.



class (server_address, RequestHandlerClass)¶
Create a  instance.  server_address should be a
 tuple, and RequestHandlerClass should be the subclass of
 that will be used to process
requests.
You do not normally need to call this constructor, as the 
function can handle all the details for you.
 is a subclass of , so all
of its methods (such as  and ) are
available.  also provides these WSGI-specific methods:


(application)¶
Sets the callable application as the WSGI application that will receive
requests.



()¶
Returns the currently-set application callable.

Normally, however, you do not need to use these additional methods, as
 is normally called by , and the
 exists mainly for the benefit of request handler instances.



class (request, client_address, server)¶
Create an HTTP handler for the given request (i.e. a socket), client_address
(a  tuple), and server ( instance).
You do not need to create instances of this class directly; they are
automatically created as needed by  objects.  You can,
however, subclass this class and supply it as a handler_class to the
 function.  Some possibly relevant methods for overriding in
subclasses:


()¶
Returns a dictionary containing the WSGI environment for a request.  The default
implementation copies the contents of the  object’s
 dictionary attribute and then adds various headers derived
from the HTTP request.  Each call to this method should return a new dictionary
containing all of the relevant CGI environment variables as specified in
PEP 3333.



()¶
Return the object that should be used as the  stream. The default
implementation just returns .



()¶
Process the HTTP request.  The default implementation creates a handler instance
using a  class to implement the actual WSGI application
interface.




 — WSGI conformance checker¶
When creating new WSGI application objects, frameworks, servers, or middleware,
it can be useful to validate the new code’s conformance using
.  This module provides a function that creates WSGI
application objects that validate communications between a WSGI server or
gateway and a WSGI application object, to check both sides for protocol
conformance.
Note that this utility does not guarantee complete PEP 3333 compliance; an
absence of errors from this module does not necessarily mean that errors do not
exist.  However, if this module does produce an error, then it is virtually
certain that either the server or application is not 100% compliant.
This module is based on the  module from Ian Bicking’s “Python
Paste” library.


(application)¶
Wrap application and return a new WSGI application object.  The returned
application will forward all requests to the original application, and will
check that both the application and the server invoking it are conforming to
the WSGI specification and to RFC 2616.
Any detected nonconformance results in an  being raised;
note, however, that how these errors are handled is server-dependent.  For
example,  and other servers based on
 (that don’t override the error handling methods to do
something else) will simply output a message that an error has occurred, and
dump the traceback to  or some other error stream.
This wrapper may also generate output using the  module to
indicate behaviors that are questionable but which may not actually be
prohibited by PEP 3333.  Unless they are suppressed using Python command-line
options or the  API, any such warnings will be written to
 (not , unless they happen to be the same
object).
Example usage:





 – server/gateway base classes¶
This module provides base handler classes for implementing WSGI servers and
gateways.  These base classes handle most of the work of communicating with a
WSGI application, as long as they are given a CGI-like environment, along with
input, output, and error streams.


class ¶
CGI-based invocation via , ,  and
.  This is useful when you have a WSGI application and want to run
it as a CGI script.  Simply invoke , where  is
the WSGI application object you wish to invoke.
This class is a subclass of  that sets 
to true,  to false, and  to true, and
always uses  and  to obtain the necessary CGI streams and
environment.



class ¶
A specialized alternative to , for use when deploying on
Microsoft’s IIS web server, without having set the config allowPathInfo
option (IIS>=7) or metabase allowPathInfoForScriptMappings (IIS<7).
By default, IIS gives a  that duplicates the  at
the front, causing problems for WSGI applications that wish to implement
routing. This handler strips any such duplicated path.
IIS can be configured to pass the correct , but this causes
another bug where  is wrong. Luckily this variable is
rarely used and is not guaranteed by WSGI. On IIS<7, though, the
setting can only be made on a vhost level, affecting all other script
mappings, many of which break when exposed to the  bug.
For this reason IIS<7 is almost never deployed with the fix. (Even IIS7
rarely uses it because there is still no UI for it.)
There is no way for CGI code to tell whether the option was set, so a
separate handler class is provided.  It is used in the same way as
, i.e., by calling , where
 is the WSGI application object you wish to invoke.

New in version 3.2.




class (stdin, stdout, stderr, environ, multithread=True, multiprocess=False)¶
Similar to , but instead of using the  and
 modules, the CGI environment and I/O streams are specified explicitly.
The multithread and multiprocess values are used to set the
 and  flags for any applications run by
the handler instance.
This class is a subclass of  intended for use with
software other than HTTP “origin servers”.  If you are writing a gateway
protocol implementation (such as CGI, FastCGI, SCGI, etc.) that uses a
 header to send an HTTP status, you probably want to subclass this
instead of .



class (stdin, stdout, stderr, environ, multithread=True, multiprocess=False)¶
Similar to , but designed for use with HTTP origin
servers.  If you are writing an HTTP server implementation, you will probably
want to subclass this instead of .
This class is a subclass of .  It overrides the
, , , ,
, and  methods to support explicitly setting the
environment and streams via the constructor.  The supplied environment and
streams are stored in the , , , and
 attributes.
The  method of stdout should write
each chunk in full, like .



class ¶
This is an abstract base class for running WSGI applications.  Each instance
will handle a single HTTP request, although in principle you could create a
subclass that was reusable for multiple requests.
 instances have only one method intended for external use:


(app)¶
Run the specified WSGI application, app.

All of the other  methods are invoked by this method in the
process of running the application, and thus exist primarily to allow
customizing the process.
The following methods MUST be overridden in a subclass:


(data)¶
Buffer the bytes data for transmission to the client.  It’s okay if this
method actually transmits the data;  just separates write
and flush operations for greater efficiency when the underlying system actually
has such a distinction.



()¶
Force buffered data to be transmitted to the client.  It’s okay if this method
is a no-op (i.e., if  actually sends the data).



()¶
Return an input stream object suitable for use as the  of the
request currently being processed.



()¶
Return an output stream object suitable for use as the  of the
request currently being processed.



()¶
Insert CGI variables for the current request into the  attribute.

Here are some other methods and attributes you may wish to override. This list
is only a summary, however, and does not include every method that can be
overridden.  You should consult the docstrings and source code for additional
information before attempting to create a customized 
subclass.
Attributes and methods for customizing the WSGI environment:


¶
The value to be used for the  environment variable.  It
defaults to true in , but may have a different default (or
be set by the constructor) in the other subclasses.



¶
The value to be used for the  environment variable.  It
defaults to true in , but may have a different default (or
be set by the constructor) in the other subclasses.



¶
The value to be used for the  environment variable.  It
defaults to false in , but  sets it to
true by default.



¶
The default environment variables to be included in every request’s WSGI
environment.  By default, this is a copy of  at the time that
 was imported, but subclasses can either create their own
at the class or instance level.  Note that the dictionary should be considered
read-only, since the default value is shared between multiple classes and
instances.



¶
If the  attribute is set, this attribute’s value is used to
set the default  WSGI environment variable, and also to set a
default  header in HTTP responses.  It is ignored for handlers (such
as  and ) that are not HTTP origin
servers.

Changed in version 3.3: The term “Python” is replaced with implementation specific term like
“CPython”, “Jython” etc.




()¶
Return the URL scheme being used for the current request.  The default
implementation uses the  function from 
to guess whether the scheme should be “http” or “https”, based on the current
request’s  variables.



()¶
Set the  attribute to a fully-populated WSGI environment.  The
default implementation uses all of the above methods and attributes, plus the
, , and  methods and the
 attribute.  It also inserts a  key
if not present, as long as the  attribute is a true value
and the  attribute is set.

Methods and attributes for customizing exception handling:


(exc_info)¶
Log the exc_info tuple in the server log.  exc_info is a  tuple.  The default implementation simply writes the traceback to
the request’s  stream and flushes it.  Subclasses can override
this method to change the format or retarget the output, mail the traceback to
an administrator, or whatever other action may be deemed suitable.



¶
The maximum number of frames to include in tracebacks output by the default
 method.  If , all frames are included.



(environ, start_response)¶
This method is a WSGI application to generate an error page for the user.  It is
only invoked if an error occurs before headers are sent to the client.
This method can access the current error information using ,
and should pass that information to start_response when calling it (as
described in the “Error Handling” section of PEP 3333).
The default implementation just uses the ,
, and  attributes to generate an output
page.  Subclasses can override this to produce more dynamic error output.
Note, however, that it’s not recommended from a security perspective to spit out
diagnostics to any old user; ideally, you should have to do something special to
enable diagnostic output, which is why the default implementation doesn’t
include any.



¶
The HTTP status used for error responses.  This should be a status string as
defined in PEP 3333; it defaults to a 500 code and message.



¶
The HTTP headers used for error responses.  This should be a list of WSGI
response headers ( tuples), as described in PEP 3333.  The
default list just sets the content type to .



¶
The error response body.  This should be an HTTP response body bytestring. It
defaults to the plain text, “A server error occurred.  Please contact the
administrator.”

Methods and attributes for PEP 3333’s “Optional Platform-Specific File
Handling” feature:


¶
A  factory, or .  The default value of this
attribute is the  class.



()¶
Override to implement platform-specific file transmission.  This method is
called only if the application’s return value is an instance of the class
specified by the  attribute.  It should return a true
value if it was able to successfully transmit the file, so that the default
transmission code will not be executed. The default implementation of this
method just returns a false value.

Miscellaneous methods and attributes:


¶
This attribute should be set to a true value if the handler’s  and
 are being used to communicate directly to the client, rather than
via a CGI-like gateway protocol that wants the HTTP status in a special
 header.
This attribute’s default value is true in , but false in
 and .



¶
If  is true, this string attribute is used to set the HTTP
version of the response set to the client.  It defaults to .




()¶
Transcode CGI variables from  to PEP 3333 “bytes in unicode”
strings, returning a new dictionary.  This function is used by
 and  in place of directly using
, which is not necessarily WSGI-compliant on all platforms
and web servers using Python 3 – specifically, ones where the OS’s
actual environment is Unicode (i.e. Windows), or ones where the environment
is bytes, but the system encoding used by Python to decode it is anything
other than ISO-8859-1 (e.g. Unix systems using UTF-8).
If you are implementing a CGI-based handler of your own, you probably want
to use this routine instead of just copying values out of 
directly.

New in version 3.2.




Examples¶
This is a working “Hello World” WSGI application:



