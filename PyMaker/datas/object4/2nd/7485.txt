link:
library/ipaddress.html#interface-objects

docs:

Interface objects¶
Interface objects are hashable, so they can be used as keys in
dictionaries.


class (address)¶
Construct an IPv4 interface.  The meaning of address is as in the
constructor of , except that arbitrary host addresses
are always accepted.
 is a subclass of , so it inherits
all the attributes from that class.  In addition, the following attributes
are available:


¶
The address () without network information.





¶
The network () this interface belongs to.





¶
A string representation of the interface with the mask in prefix notation.





¶
A string representation of the interface with the network as a net mask.





¶
A string representation of the interface with the network as a host mask.






class (address)¶
Construct an IPv6 interface.  The meaning of address is as in the
constructor of , except that arbitrary host addresses
are always accepted.
 is a subclass of , so it inherits
all the attributes from that class.  In addition, the following attributes
are available:


¶



¶



¶



¶



¶
Refer to the corresponding attribute documentation in
.



Operators¶
Interface objects support some operators.  Unless stated otherwise, operators
can only be applied between compatible objects (i.e. IPv4 with IPv4, IPv6 with
IPv6).

Logical operators¶
Interface objects can be compared with the usual set of logical operators.
For equality comparison ( and ), both the IP address and network
must be the same for the objects to be equal.  An interface will not compare
equal to any address or network object.
For ordering (, , etc) the rules are different.  Interface and
address objects with the same IP version can be compared, and the address
objects will always sort before the interface objects.  Two interface objects
are first compared by their networks and, if those are the same, then by their
IP addresses.


