link:
library/threading.html#lock-objects

docs:

Lock Objects¶
A primitive lock is a synchronization primitive that is not owned by a
particular thread when locked.  In Python, it is currently the lowest level
synchronization primitive available, implemented directly by the 
extension module.
A primitive lock is in one of two states, “locked” or “unlocked”. It is created
in the unlocked state.  It has two basic methods,  and
.  When the state is unlocked, 
changes the state to locked and returns immediately.  When the state is locked,
 blocks until a call to  in another
thread changes it to unlocked, then the  call resets it
to locked and returns.  The  method should only be
called in the locked state; it changes the state to unlocked and returns
immediately. If an attempt is made to release an unlocked lock, a
 will be raised.
Locks also support the context management protocol.
When more than one thread is blocked in  waiting for the
state to turn to unlocked, only one thread proceeds when a 
call resets the state to unlocked; which one of the waiting threads proceeds
is not defined, and may vary across implementations.
All methods are executed atomically.


class ¶
The class implementing primitive lock objects.  Once a thread has acquired a
lock, subsequent attempts to acquire it block, until it is released; any
thread may release it.
Note that  is actually a factory function which returns an instance
of the most efficient version of the concrete Lock class that is supported
by the platform.


(blocking=True, timeout=-1)¶
Acquire a lock, blocking or non-blocking.
When invoked with the blocking argument set to  (the default),
block until the lock is unlocked, then set it to locked and return .
When invoked with the blocking argument set to , do not block.
If a call with blocking set to  would block, return 
immediately; otherwise, set the lock to locked and return .
When invoked with the floating-point timeout argument set to a positive
value, block for at most the number of seconds specified by timeout
and as long as the lock cannot be acquired.  A timeout argument of 
specifies an unbounded wait.  It is forbidden to specify a timeout
when blocking is false.
The return value is  if the lock is acquired successfully,
 if not (for example if the timeout expired).

Changed in version 3.2: The timeout parameter is new.


Changed in version 3.2: Lock acquisition can now be interrupted by signals on POSIX if the
underlying threading implementation supports it.




()¶
Release a lock.  This can be called from any thread, not only the thread
which has acquired the lock.
When the lock is locked, reset it to unlocked, and return.  If any other threads
are blocked waiting for the lock to become unlocked, allow exactly one of them
to proceed.
When invoked on an unlocked lock, a  is raised.
There is no return value.


