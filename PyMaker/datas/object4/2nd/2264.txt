link:
library/shutil.html#directory-and-files-operations

docs:

Directory and files operations¶


(fsrc, fdst[, length])¶
Copy the contents of the file-like object fsrc to the file-like object fdst.
The integer length, if given, is the buffer size. In particular, a negative
length value means to copy the data without looping over the source data in
chunks; by default the data is read in chunks to avoid uncontrolled memory
consumption. Note that if the current file position of the fsrc object is not
0, only the contents from the current file position to the end of the file will
be copied.



(src, dst, *, follow_symlinks=True)¶
Copy the contents (no metadata) of the file named src to a file named
dst and return dst.  src and dst are path names given as strings.
dst must be the complete target file name; look at 
for a copy that accepts a target directory path.  If src and dst
specify the same file,  is raised.
The destination location must be writable; otherwise, an 
exception will be raised. If dst already exists, it will be replaced.
Special files such as character or block devices and pipes cannot be
copied with this function.
If follow_symlinks is false and src is a symbolic link,
a new symbolic link will be created instead of copying the
file src points to.

Changed in version 3.3:  used to be raised instead of .
Added follow_symlinks argument.
Now returns dst.


Changed in version 3.4: Raise  instead of .  Since the former is
a subclass of the latter, this change is backward compatible.




exception ¶
This exception is raised if source and destination in 
are the same file.

New in version 3.4.




(src, dst, *, follow_symlinks=True)¶
Copy the permission bits from src to dst.  The file contents, owner, and
group are unaffected.  src and dst are path names given as strings.
If follow_symlinks is false, and both src and dst are symbolic links,
 will attempt to modify the mode of dst itself (rather
than the file it points to).  This functionality is not available on every
platform; please see  for more information.  If
 cannot modify symbolic links on the local platform, and it
is asked to do so, it will do nothing and return.

Changed in version 3.3: Added follow_symlinks argument.




(src, dst, *, follow_symlinks=True)¶
Copy the permission bits, last access time, last modification time, and
flags from src to dst.  On Linux,  also copies the
“extended attributes” where possible.  The file contents, owner, and
group are unaffected.  src and dst are path names given as strings.
If follow_symlinks is false, and src and dst both
refer to symbolic links,  will operate on
the symbolic links themselves rather than the files the
symbolic links refer to—reading the information from the
src symbolic link, and writing the information to the
dst symbolic link.

Note
Not all platforms provide the ability to examine and
modify symbolic links.  Python itself can tell you what
functionality is locally available.

If  is
,  can modify the permission
bits of a symbolic link.
If  is
,  can modify the last access
and modification times of a symbolic link.
If  is
,  can modify the flags of
a symbolic link.  ( is not available on
all platforms.)

On platforms where some or all of this functionality
is unavailable, when asked to modify a symbolic link,
 will copy everything it can.
 never returns failure.
Please see 
for more information.


Changed in version 3.3: Added follow_symlinks argument and support for Linux extended attributes.




(src, dst, *, follow_symlinks=True)¶
Copies the file src to the file or directory dst.  src and dst
should be strings.  If dst specifies a directory, the file will be
copied into dst using the base filename from src.  Returns the
path to the newly created file.
If follow_symlinks is false, and src is a symbolic link,
dst will be created as a symbolic link.  If follow_symlinks
is true and src is a symbolic link, dst will be a copy of
the file src refers to.
 copies the file data and the file’s permission
mode (see ).  Other metadata, like the
file’s creation and modification times, is not preserved.
To preserve all file metadata from the original, use
 instead.

Changed in version 3.3: Added follow_symlinks argument.
Now returns path to the newly created file.




(src, dst, *, follow_symlinks=True)¶
Identical to  except that 
also attempts to preserve file metadata.
When follow_symlinks is false, and src is a symbolic
link,  attempts to copy all metadata from the
src symbolic link to the newly-created dst symbolic link.
However, this functionality is not available on all platforms.
On platforms where some or all of this functionality is
unavailable,  will preserve all the metadata
it can;  never returns failure.
 uses  to copy the file metadata.
Please see  for more information
about platform support for modifying symbolic link metadata.

Changed in version 3.3: Added follow_symlinks argument, try to copy extended
file system attributes too (currently Linux only).
Now returns path to the newly created file.




(*patterns)¶
This factory function creates a function that can be used as a callable for
’s ignore argument, ignoring files and directories that
match one of the glob-style patterns provided.  See the example below.



(src, dst, symlinks=False, ignore=None, copy_function=copy2, ignore_dangling_symlinks=False)¶
Recursively copy an entire directory tree rooted at src, returning the
destination directory.  The destination
directory, named by dst, must not already exist; it will be created as
well as missing parent directories.  Permissions and times of directories
are copied with , individual files are copied using
.
If symlinks is true, symbolic links in the source tree are represented as
symbolic links in the new tree and the metadata of the original links will
be copied as far as the platform allows; if false or omitted, the contents
and metadata of the linked files are copied to the new tree.
When symlinks is false, if the file pointed by the symlink doesn’t
exist, an exception will be added in the list of errors raised in
an  exception at the end of the copy process.
You can set the optional ignore_dangling_symlinks flag to true if you
want to silence this exception. Notice that this option has no effect
on platforms that don’t support .
If ignore is given, it must be a callable that will receive as its
arguments the directory being visited by , and a list of its
contents, as returned by .  Since  is
called recursively, the ignore callable will be called once for each
directory that is copied.  The callable must return a sequence of directory
and file names relative to the current directory (i.e. a subset of the items
in its second argument); these names will then be ignored in the copy
process.   can be used to create such a callable that
ignores names based on glob-style patterns.
If exception(s) occur, an  is raised with a list of reasons.
If copy_function is given, it must be a callable that will be used to copy
each file. It will be called with the source path and the destination path
as arguments. By default,  is used, but any function
that supports the same signature (like ) can be used.

Changed in version 3.3: Copy metadata when symlinks is false.
Now returns dst.


Changed in version 3.2: Added the copy_function argument to be able to provide a custom copy
function.
Added the ignore_dangling_symlinks argument to silent dangling symlinks
errors when symlinks is false.




(path, ignore_errors=False, onerror=None)¶
Delete an entire directory tree; path must point to a directory (but not a
symbolic link to a directory).  If ignore_errors is true, errors resulting
from failed removals will be ignored; if false or omitted, such errors are
handled by calling a handler specified by onerror or, if that is omitted,
they raise an exception.

Note
On platforms that support the necessary fd-based functions a symlink
attack resistant version of  is used by default.  On other
platforms, the  implementation is susceptible to a symlink
attack: given proper timing and circumstances, attackers can manipulate
symlinks on the filesystem to delete files they wouldn’t be able to access
otherwise.  Applications can use the 
function attribute to determine which case applies.

If onerror is provided, it must be a callable that accepts three
parameters: function, path, and excinfo.
The first parameter, function, is the function which raised the exception;
it depends on the platform and implementation.  The second parameter,
path, will be the path name passed to function.  The third parameter,
excinfo, will be the exception information returned by
.  Exceptions raised by onerror will not be caught.

Changed in version 3.3: Added a symlink attack resistant version that is used automatically
if platform supports fd-based functions.



¶
Indicates whether the current platform and implementation provides a
symlink attack resistant version of .  Currently this is
only true for platforms supporting fd-based directory access functions.

New in version 3.3.





(src, dst, copy_function=copy2)¶
Recursively move a file or directory (src) to another location (dst)
and return the destination.
If the destination is an existing directory, then src is moved inside that
directory. If the destination already exists but is not a directory, it may
be overwritten depending on  semantics.
If the destination is on the current filesystem, then  is
used. Otherwise, src is copied to dst using copy_function and then
removed.  In case of symlinks, a new symlink pointing to the target of src
will be created in or as dst and src will be removed.
If copy_function is given, it must be a callable that takes two arguments
src and dst, and will be used to copy src to dest if
 cannot be used.  If the source is a directory,
 is called, passing it the . The
default copy_function is .  Using  as the
copy_function allows the move to succeed when it is not possible to also
copy the metadata, at the expense of not copying any of the metadata.

Changed in version 3.3: Added explicit symlink handling for foreign filesystems, thus adapting
it to the behavior of GNU’s mv.
Now returns dst.


Changed in version 3.5: Added the copy_function keyword argument.




(path)¶
Return disk usage statistics about the given path as a named tuple
with the attributes total, used and free, which are the amount of
total, used and free space, in bytes.  On Windows, path must be a
directory; on Unix, it can be a file or directory.

New in version 3.3.

Availability: Unix, Windows.



(path, user=None, group=None)¶
Change owner user and/or group of the given path.
user can be a system user name or a uid; the same applies to group. At
least one argument is required.
See also , the underlying function.
Availability: Unix.

New in version 3.3.




(cmd, mode=os.F_OK | os.X_OK, path=None)¶
Return the path to an executable which would be run if the given cmd was
called.  If no cmd would be called, return .
mode is a permission mask passed to , by default
determining if the file exists and executable.
When no path is specified, the results of  are used,
returning either the “PATH” value or a fallback of .
On Windows, the current directory is always prepended to the path whether
or not you use the default or provide your own, which is the behavior the
command shell uses when finding executables.  Additionally, when finding the
cmd in the path, the  environment variable is checked.  For
example, if you call ,  will search
 to know that it should look for  within the path
directories.  For example, on Windows:



New in version 3.3.




exception ¶
This exception collects exceptions that are raised during a multi-file
operation. For , the exception argument is a list of 3-tuples
(srcname, dstname, exception).


copytree example¶
This example is the implementation of the  function, described
above, with the docstring omitted.  It demonstrates many of the other functions
provided by this module.


Another example that uses the  helper:


This will copy everything except  files and files or directories whose
name starts with .
Another example that uses the ignore argument to add a logging call:




rmtree example¶
This example shows how to remove a directory tree on Windows where some
of the files have their read-only bit set. It uses the onerror callback
to clear the readonly bit and reattempt the remove. Any subsequent failure
will propagate.



