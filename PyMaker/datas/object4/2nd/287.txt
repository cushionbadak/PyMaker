link:
reference/compound_stmts.html#the-async-with-statement

docs:

8.8.3. The  statement¶

An asynchronous context manager is a context manager that is
able to suspend execution in its enter and exit methods.
The following code:


Is semantically equivalent to:


See also  and  for details.
It is a  to use an  statement outside the
body of a coroutine function.

See also

PEP 492 - Coroutines with async and await syntax
The proposal that made coroutines a proper standalone concept in Python,
and added supporting syntax.


Footnotes



[1]The exception is propagated to the invocation stack unless
there is a  clause which happens to raise another
exception. That new exception causes the old one to be lost.





[2]A string literal appearing as the first statement in the function body is
transformed into the function’s  attribute and therefore the
function’s docstring.





[3]A string literal appearing as the first statement in the class body is
transformed into the namespace’s  item and therefore the class’s
docstring.


