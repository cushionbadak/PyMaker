link:
library/contextlib.html#utilities

docs:

Utilities¶
Functions and classes provided:


class ¶
An abstract base class for classes that implement
 and . A default
implementation for  is provided which returns
 while  is an abstract method which by default
returns . See also the definition of Context Manager Types.

New in version 3.6.




class ¶
An abstract base class for classes that implement
 and . A default
implementation for  is provided which returns
 while  is an abstract method which by default
returns . See also the definition of
Asynchronous Context Managers.

New in version 3.7.




¶
This function is a decorator that can be used to define a factory
function for  statement context managers, without needing to
create a class or separate  and  methods.
While many objects natively support use in with statements, sometimes a
resource needs to be managed that isn’t a context manager in its own right,
and doesn’t implement a  method for use with 
An abstract example would be the following to ensure correct resource
management:


The function being decorated must return a generator-iterator when
called. This iterator must yield exactly one value, which will be bound to
the targets in the  statement’s  clause, if any.
At the point where the generator yields, the block nested in the 
statement is executed.  The generator is then resumed after the block is exited.
If an unhandled exception occurs in the block, it is reraised inside the
generator at the point where the yield occurred.  Thus, you can use a
…… statement to trap
the error (if any), or ensure that some cleanup takes place. If an exception is
trapped merely in order to log it or to perform some action (rather than to
suppress it entirely), the generator must reraise that exception. Otherwise the
generator context manager will indicate to the  statement that
the exception has been handled, and execution will resume with the statement
immediately following the  statement.
 uses  so the context managers
it creates can be used as decorators as well as in  statements.
When used as a decorator, a new generator instance is implicitly created on
each function call (this allows the otherwise “one-shot” context managers
created by  to meet the requirement that context
managers support multiple invocations in order to be used as decorators).

Changed in version 3.2: Use of .




¶
Similar to , but creates an
asynchronous context manager.
This function is a decorator that can be used to define a factory
function for  statement asynchronous context managers,
without needing to create a class or separate  and
 methods. It must be applied to an asynchronous
generator function.
A simple example:



New in version 3.7.




(thing)¶
Return a context manager that closes thing upon completion of the block.  This
is basically equivalent to:


And lets you write code like this:


without needing to explicitly close .  Even if an error occurs,
 will be called when the  block is exited.



(enter_result=None)¶
Return a context manager that returns enter_result from , but
otherwise does nothing. It is intended to be used as a stand-in for an
optional context manager, for example:


An example using enter_result:



New in version 3.7.




(*exceptions)¶
Return a context manager that suppresses any of the specified exceptions
if they occur in the body of a with statement and then resumes execution
with the first statement following the end of the with statement.
As with any other mechanism that completely suppresses exceptions, this
context manager should be used only to cover very specific errors where
silently continuing with program execution is known to be the right
thing to do.
For example:


This code is equivalent to:


This context manager is reentrant.

New in version 3.4.




(new_target)¶
Context manager for temporarily redirecting  to
another file or file-like object.
This tool adds flexibility to existing functions or classes whose output
is hardwired to stdout.
For example, the output of  normally is sent to sys.stdout.
You can capture that output in a string by redirecting the output to an
 object:


To send the output of  to a file on disk, redirect the output
to a regular file:


To send the output of  to sys.stderr:


Note that the global side effect on  means that this
context manager is not suitable for use in library code and most threaded
applications. It also has no effect on the output of subprocesses.
However, it is still a useful approach for many utility scripts.
This context manager is reentrant.

New in version 3.4.




(new_target)¶
Similar to  but redirecting
 to another file or file-like object.
This context manager is reentrant.

New in version 3.5.




class ¶
A base class that enables a context manager to also be used as a decorator.
Context managers inheriting from  have to implement
 and  as normal.  retains its optional
exception handling even when used as a decorator.
 is used by , so you get this
functionality automatically.
Example of :


This change is just syntactic sugar for any construct of the following form:


 lets you instead write:


It makes it clear that the  applies to the whole function, rather than
just a piece of it (and saving an indentation level is nice, too).
Existing context managers that already have a base class can be extended by
using  as a mixin class:



Note
As the decorated function must be able to be called multiple times, the
underlying context manager must support use in multiple 
statements. If this is not the case, then the original construct with the
explicit  statement inside the function should be used.


New in version 3.2.




class ¶
A context manager that is designed to make it easy to programmatically
combine other context managers and cleanup functions, especially those
that are optional or otherwise driven by input data.
For example, a set of files may easily be handled in a single with
statement as follows:


Each instance maintains a stack of registered callbacks that are called in
reverse order when the instance is closed (either explicitly or implicitly
at the end of a  statement). Note that callbacks are not
invoked implicitly when the context stack instance is garbage collected.
This stack model is used so that context managers that acquire their
resources in their  method (such as file objects) can be
handled correctly.
Since registered callbacks are invoked in the reverse order of
registration, this ends up behaving as if multiple nested 
statements had been used with the registered set of callbacks. This even
extends to exception handling - if an inner callback suppresses or replaces
an exception, then outer callbacks will be passed arguments based on that
updated state.
This is a relatively low level API that takes care of the details of
correctly unwinding the stack of exit callbacks. It provides a suitable
foundation for higher level context managers that manipulate the exit
stack in application specific ways.

New in version 3.3.



(cm)¶
Enters a new context manager and adds its  method to
the callback stack. The return value is the result of the context
manager’s own  method.
These context managers may suppress exceptions just as they normally
would if used directly as part of a  statement.



(exit)¶
Adds a context manager’s  method to the callback stack.
As  is not invoked, this method can be used to cover
part of an  implementation with a context manager’s own
 method.
If passed an object that is not a context manager, this method assumes
it is a callback with the same signature as a context manager’s
 method and adds it directly to the callback stack.
By returning true values, these callbacks can suppress exceptions the
same way context manager  methods can.
The passed in object is returned from the function, allowing this
method to be used as a function decorator.



(callback, *args, **kwds)¶
Accepts an arbitrary callback function and arguments and adds it to
the callback stack.
Unlike the other methods, callbacks added this way cannot suppress
exceptions (as they are never passed the exception details).
The passed in callback is returned from the function, allowing this
method to be used as a function decorator.



()¶
Transfers the callback stack to a fresh  instance
and returns it. No callbacks are invoked by this operation - instead,
they will now be invoked when the new stack is closed (either
explicitly or implicitly at the end of a  statement).
For example, a group of files can be opened as an “all or nothing”
operation as follows:





()¶
Immediately unwinds the callback stack, invoking callbacks in the
reverse order of registration. For any context managers and exit
callbacks registered, the arguments passed in will indicate that no
exception occurred.




class ¶
An asynchronous context manager, similar
to , that supports combining both synchronous and
asynchronous context managers, as well as having coroutines for
cleanup logic.
The  method is not implemented,  must be used
instead.


(cm)¶
Similar to  but expects an asynchronous context
manager.



(exit)¶
Similar to  but expects either an asynchronous context manager
or a coroutine function.



(callback, *args, **kwds)¶
Similar to  but expects a coroutine function.



()¶
Similar to  but properly handles awaitables.

Continuing the example for :



New in version 3.7.


