link:
library/unittest.mock.html#calling

docs:

CallingÂ¶
Mock objects are callable. The call will return the value set as the
 attribute. The default return value is a new Mock
object; it is created the first time the return value is accessed (either
explicitly or by calling the Mock) - but it is stored and the same one
returned each time.
Calls made to the object will be recorded in the attributes
like  and .
If  is set then it will be called after the call has
been recorded, so if  raises an exception the call is still
recorded.
The simplest way to make a mock raise an exception when called is to make
 an exception class or instance:


If  is a function then whatever that function returns is what
calls to the mock return. The  function is called with the
same arguments as the mock. This allows you to vary the return value of the
call dynamically, based on the input:


If you want the mock to still return the default return value (a new mock), or
any set return value, then there are two ways of doing this. Either return
 from inside , or return :


To remove a , and return to the default behaviour, set the
 to :


The  can also be any iterable object. Repeated calls to the mock
will return values from the iterable (until the iterable is exhausted and
a  is raised):


If any members of the iterable are exceptions they will be raised instead of
returned:


