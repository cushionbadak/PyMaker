link:
library/xml.etree.elementtree.html#reference

docs:

Reference¶

Functions¶


(text=None)¶
Comment element factory.  This factory function creates a special element
that will be serialized as an XML comment by the standard serializer.  The
comment string can be either a bytestring or a Unicode string.  text is a
string containing the comment string.  Returns an element instance
representing a comment.
Note that  skips over comments in the input
instead of creating comment objects for them. An  will
only contain comment nodes if they have been inserted into to
the tree using one of the  methods.



(elem)¶
Writes an element tree or element structure to sys.stdout.  This function
should be used for debugging only.
The exact output format is implementation dependent.  In this version, it’s
written as an ordinary XML file.
elem is an element tree or an individual element.



(text, parser=None)¶
Parses an XML section from a string constant.  Same as .  text
is a string containing XML data.  parser is an optional parser instance.
If not given, the standard  parser is used.
Returns an  instance.



(sequence, parser=None)¶
Parses an XML document from a sequence of string fragments.  sequence is a
list or other sequence containing XML data fragments.  parser is an
optional parser instance.  If not given, the standard 
parser is used.  Returns an  instance.

New in version 3.2.




(element)¶
Checks if an object appears to be a valid element object.  element is an
element instance.  Returns a true value if this is an element object.



(source, events=None, parser=None)¶
Parses an XML section into an element tree incrementally, and reports what’s
going on to the user.  source is a filename or file object
containing XML data.  events is a sequence of events to report back.  The
supported events are the strings , ,  and
 (the “ns” events are used to get detailed namespace
information).  If events is omitted, only  events are reported.
parser is an optional parser instance.  If not given, the standard
 parser is used.  parser must be a subclass of
 and can only use the default  as a
target.  Returns an iterator providing  pairs.
Note that while  builds the tree incrementally, it issues
blocking reads on source (or the file it names).  As such, it’s unsuitable
for applications where blocking reads can’t be made.  For fully non-blocking
parsing, see .

Note
 only guarantees that it has seen the “>” character of a
starting tag when it emits a “start” event, so the attributes are defined,
but the contents of the text and tail attributes are undefined at that
point.  The same applies to the element children; they may or may not be
present.
If you need a fully populated element, look for “end” events instead.


Deprecated since version 3.4: The parser argument.




(source, parser=None)¶
Parses an XML section into an element tree.  source is a filename or file
object containing XML data.  parser is an optional parser instance.  If
not given, the standard  parser is used.  Returns an
 instance.



(target, text=None)¶
PI element factory.  This factory function creates a special element that
will be serialized as an XML processing instruction.  target is a string
containing the PI target.  text is a string containing the PI contents, if
given.  Returns an element instance, representing a processing instruction.
Note that  skips over processing instructions
in the input instead of creating comment objects for them. An
 will only contain processing instruction nodes if
they have been inserted into to the tree using one of the
 methods.



(prefix, uri)¶
Registers a namespace prefix.  The registry is global, and any existing
mapping for either the given prefix or the namespace URI will be removed.
prefix is a namespace prefix.  uri is a namespace uri.  Tags and
attributes in this namespace will be serialized with the given prefix, if at
all possible.

New in version 3.2.




(parent, tag, attrib={}, **extra)¶
Subelement factory.  This function creates an element instance, and appends
it to an existing element.
The element name, attribute names, and attribute values can be either
bytestrings or Unicode strings.  parent is the parent element.  tag is
the subelement name.  attrib is an optional dictionary, containing element
attributes.  extra contains additional attributes, given as keyword
arguments.  Returns an element instance.



(element, encoding="us-ascii", method="xml", *, short_empty_elements=True)¶
Generates a string representation of an XML element, including all
subelements.  element is an  instance.  encoding [1] is
the output encoding (default is US-ASCII).  Use  to
generate a Unicode string (otherwise, a bytestring is generated).  method
is either ,  or  (default is ).
short_empty_elements has the same meaning as in .
Returns an (optionally) encoded string containing the XML data.

New in version 3.4: The short_empty_elements parameter.




(element, encoding="us-ascii", method="xml", *, short_empty_elements=True)¶
Generates a string representation of an XML element, including all
subelements.  element is an  instance.  encoding [1] is
the output encoding (default is US-ASCII).  Use  to
generate a Unicode string (otherwise, a bytestring is generated).  method
is either ,  or  (default is ).
short_empty_elements has the same meaning as in .
Returns a list of (optionally) encoded strings containing the XML data.
It does not guarantee any specific sequence, except that
.

New in version 3.2.


New in version 3.4: The short_empty_elements parameter.




(text, parser=None)¶
Parses an XML section from a string constant.  This function can be used to
embed “XML literals” in Python code.  text is a string containing XML
data.  parser is an optional parser instance.  If not given, the standard
 parser is used.  Returns an  instance.



(text, parser=None)¶
Parses an XML section from a string constant, and also returns a dictionary
which maps from element id:s to elements.  text is a string containing XML
data.  parser is an optional parser instance.  If not given, the standard
 parser is used.  Returns a tuple containing an
 instance and a dictionary.



Element Objects¶


class (tag, attrib={}, **extra)¶
Element class.  This class defines the Element interface, and provides a
reference implementation of this interface.
The element name, attribute names, and attribute values can be either
bytestrings or Unicode strings.  tag is the element name.  attrib is
an optional dictionary, containing element attributes.  extra contains
additional attributes, given as keyword arguments.


¶
A string identifying what kind of data this element represents (the
element type, in other words).



¶

¶
These attributes can be used to hold additional data associated with
the element.  Their values are usually strings but may be any
application-specific object.  If the element is created from
an XML file, the text attribute holds either the text between
the element’s start tag and its first child or end tag, or , and
the tail attribute holds either the text between the element’s
end tag and the next tag, or .  For the XML data


the a element has  for both text and tail attributes,
the b element has text  and tail ,
the c element has text  and tail ,
and the d element has text  and tail .
To collect the inner text of an element, see , for
example .
Applications may store arbitrary objects in these attributes.



¶
A dictionary containing the element’s attributes.  Note that while the
attrib value is always a real mutable Python dictionary, an ElementTree
implementation may choose to use another internal representation, and
create the dictionary only if someone asks for it.  To take advantage of
such implementations, use the dictionary methods below whenever possible.

The following dictionary-like methods work on the element attributes.


()¶
Resets an element.  This function removes all subelements, clears all
attributes, and sets the text and tail attributes to .



(key, default=None)¶
Gets the element attribute named key.
Returns the attribute value, or default if the attribute was not found.



()¶
Returns the element attributes as a sequence of (name, value) pairs.  The
attributes are returned in an arbitrary order.



()¶
Returns the elements attribute names as a list.  The names are returned
in an arbitrary order.



(key, value)¶
Set the attribute key on the element to value.

The following methods work on the element’s children (subelements).


(subelement)¶
Adds the element subelement to the end of this element’s internal list
of subelements.  Raises  if subelement is not an
.



(subelements)¶
Appends subelements from a sequence object with zero or more elements.
Raises  if a subelement is not an .

New in version 3.2.




(match, namespaces=None)¶
Finds the first subelement matching match.  match may be a tag name
or a path.  Returns an element instance
or .  namespaces is an optional mapping from namespace prefix
to full name.



(match, namespaces=None)¶
Finds all matching subelements, by tag name or
path.  Returns a list containing all matching
elements in document order.  namespaces is an optional mapping from
namespace prefix to full name.



(match, default=None, namespaces=None)¶
Finds text for the first subelement matching match.  match may be
a tag name or a path.  Returns the text content
of the first matching element, or default if no element was found.
Note that if the matching element has no text content an empty string
is returned. namespaces is an optional mapping from namespace prefix
to full name.



()¶

Deprecated since version 3.2: Use  or iteration.




(tag=None)¶

Deprecated since version 3.2: Use method  instead.




(index, subelement)¶
Inserts subelement at the given position in this element.  Raises
 if subelement is not an .



(tag=None)¶
Creates a tree iterator with the current element as the root.
The iterator iterates over this element and all elements below it, in
document (depth first) order.  If tag is not  or , only
elements whose tag equals tag are returned from the iterator.  If the
tree structure is modified during iteration, the result is undefined.

New in version 3.2.




(match, namespaces=None)¶
Finds all matching subelements, by tag name or
path.  Returns an iterable yielding all
matching elements in document order. namespaces is an optional mapping
from namespace prefix to full name.

New in version 3.2.




()¶
Creates a text iterator.  The iterator loops over this element and all
subelements, in document order, and returns all inner text.

New in version 3.2.




(tag, attrib)¶
Creates a new element object of the same type as this element.  Do not
call this method, use the  factory function instead.



(subelement)¶
Removes subelement from the element.  Unlike the find* methods this
method compares elements based on the instance identity, not on tag value
or contents.

 objects also support the following sequence type methods
for working with subelements: ,
, ,
.
Caution: Elements with no subelements will test as .  This behavior
will change in future versions.  Use specific  or  test instead.





ElementTree Objects¶


class (element=None, file=None)¶
ElementTree wrapper class.  This class represents an entire element
hierarchy, and adds some extra support for serialization to and from
standard XML.
element is the root element.  The tree is initialized with the contents
of the XML file if given.


(element)¶
Replaces the root element for this tree.  This discards the current
contents of the tree, and replaces it with the given element.  Use with
care.  element is an element instance.



(match, namespaces=None)¶
Same as , starting at the root of the tree.



(match, namespaces=None)¶
Same as , starting at the root of the tree.



(match, default=None, namespaces=None)¶
Same as , starting at the root of the tree.



(tag=None)¶

Deprecated since version 3.2: Use method  instead.




()¶
Returns the root element for this tree.



(tag=None)¶
Creates and returns a tree iterator for the root element.  The iterator
loops over all elements in this tree, in section order.  tag is the tag
to look for (default is to return all elements).



(match, namespaces=None)¶
Same as , starting at the root of the tree.

New in version 3.2.




(source, parser=None)¶
Loads an external XML section into this element tree.  source is a file
name or file object.  parser is an optional parser instance.
If not given, the standard  parser is used.  Returns the
section root element.



(file, encoding="us-ascii", xml_declaration=None, default_namespace=None, method="xml", *, short_empty_elements=True)¶
Writes the element tree to a file, as XML.  file is a file name, or a
file object opened for writing.  encoding [1] is the output
encoding (default is US-ASCII).
xml_declaration controls if an XML declaration should be added to the
file.  Use  for never,  for always, 
for only if not US-ASCII or UTF-8 or Unicode (default is ).
default_namespace sets the default XML namespace (for “xmlns”).
method is either ,  or  (default is
).
The keyword-only short_empty_elements parameter controls the formatting
of elements that contain no content.  If  (the default), they are
emitted as a single self-closed tag, otherwise they are emitted as a pair
of start/end tags.
The output is either a string () or binary ().
This is controlled by the encoding argument.  If encoding is
, the output is a string; otherwise, it’s binary.  Note that
this may conflict with the type of file if it’s an open
file object; make sure you do not try to write a string to a
binary stream and vice versa.

New in version 3.4: The short_empty_elements parameter.



This is the XML file that is going to be manipulated:


Example of changing the attribute “target” of every link in first paragraph:




QName Objects¶


class (text_or_uri, tag=None)¶
QName wrapper.  This can be used to wrap a QName attribute value, in order
to get proper namespace handling on output.  text_or_uri is a string
containing the QName value, in the form {uri}local, or, if the tag argument
is given, the URI part of a QName.  If tag is given, the first argument is
interpreted as a URI, and this argument is interpreted as a local name.
 instances are opaque.



TreeBuilder Objects¶


class (element_factory=None)¶
Generic element structure builder.  This builder converts a sequence of
start, data, and end method calls to a well-formed element structure.  You
can use this class to build an element structure using a custom XML parser,
or a parser for some other XML-like format.  element_factory, when given,
must be a callable accepting two positional arguments: a tag and
a dict of attributes.  It is expected to return a new element instance.


()¶
Flushes the builder buffers, and returns the toplevel document
element.  Returns an  instance.



(data)¶
Adds text to the current element.  data is a string.  This should be
either a bytestring, or a Unicode string.



(tag)¶
Closes the current element.  tag is the element name.  Returns the
closed element.



(tag, attrs)¶
Opens a new element.  tag is the element name.  attrs is a dictionary
containing element attributes.  Returns the opened element.

In addition, a custom  object can provide the
following method:


(name, pubid, system)¶
Handles a doctype declaration.  name is the doctype name.  pubid is
the public identifier.  system is the system identifier.  This method
does not exist on the default  class.

New in version 3.2.





XMLParser Objects¶


class (html=0, target=None, encoding=None)¶
This class is the low-level building block of the module.  It uses
 for efficient, event-based parsing of XML.  It can
be fed XML data incrementally with the  method, and parsing
events are translated to a push API - by invoking callbacks on the target
object.  If target is omitted, the standard  is used.
The html argument was historically used for backwards compatibility and is
now deprecated.  If encoding [1] is given, the value overrides the
encoding specified in the XML file.

Deprecated since version 3.4: The html argument.  The remaining arguments should be passed via
keyword to prepare for the removal of the html argument.



()¶
Finishes feeding data to the parser.  Returns the result of calling the
 method of the target passed during construction; by default,
this is the toplevel document element.



(name, pubid, system)¶

Deprecated since version 3.2: Define the  method on a custom TreeBuilder
target.




(data)¶
Feeds data to the parser.  data is encoded data.

 calls target’s  method
for each opening tag, its  method for each closing tag, and data
is processed by method .   calls
target’s method .  can be used not only for
building a tree structure. This is an example of counting the maximum depth
of an XML file:





XMLPullParser Objects¶


class (events=None)¶
A pull parser suitable for non-blocking applications.  Its input-side API is
similar to that of , but instead of pushing calls to a
callback target,  collects an internal list of parsing
events and lets the user read from it. events is a sequence of events to
report back.  The supported events are the strings , ,
 and  (the “ns” events are used to get detailed
namespace information).  If events is omitted, only  events are
reported.


(data)¶
Feed the given bytes data to the parser.



()¶
Signal the parser that the data stream is terminated. Unlike
, this method always returns .
Any events not yet retrieved when the parser is closed can still be
read with .



()¶
Return an iterator over the events which have been encountered in the
data fed to the
parser.  The iterator yields  pairs, where event is a
string representing the type of event (e.g. ) and elem is the
encountered  object.
Events provided in a previous call to  will not be
yielded again.  Events are consumed from the internal queue only when
they are retrieved from the iterator, so multiple readers iterating in
parallel over iterators obtained from  will have
unpredictable results.


Note
 only guarantees that it has seen the “>”
character of a starting tag when it emits a “start” event, so the
attributes are defined, but the contents of the text and tail attributes
are undefined at that point.  The same applies to the element children;
they may or may not be present.
If you need a fully populated element, look for “end” events instead.


New in version 3.4.




Exceptions¶


class ¶
XML parse error, raised by the various parsing methods in this module when
parsing fails.  The string representation of an instance of this exception
will contain a user-friendly error message.  In addition, it will have
the following attributes available:


¶
A numeric error code from the expat parser. See the documentation of
 for the list of error codes and their meanings.



¶
A tuple of line, column numbers, specifying where the error occurred.


Footnotes



[1](1, 2, 3, 4) The encoding string included in XML output should conform to the
appropriate standards.  For example, “UTF-8” is valid, but “UTF8” is
not.  See https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl
and https://www.iana.org/assignments/character-sets/character-sets.xhtml.



