link:
library/pathlib.html#pure-paths

docs:

Pure paths¶
Pure path objects provide path-handling operations which don’t actually
access a filesystem.  There are three ways to access these classes, which
we also call flavours:


class (*pathsegments)¶
A generic class that represents the system’s path flavour (instantiating
it creates either a  or a ):


Each element of pathsegments can be either a string representing a
path segment, an object implementing the  interface
which returns a string, or another path object:


When pathsegments is empty, the current directory is assumed:


When several absolute paths are given, the last is taken as an anchor
(mimicking ’s behaviour):


However, in a Windows path, changing the local root doesn’t discard the
previous drive setting:


Spurious slashes and single dots are collapsed, but double dots ()
are not, since this would change the meaning of a path in the face of
symbolic links:


(a naïve approach would make  equivalent
to , which is wrong if  is a symbolic link
to another directory)
Pure path objects implement the  interface, allowing them
to be used anywhere the interface is accepted.

Changed in version 3.6: Added support for the  interface.




class (*pathsegments)¶
A subclass of , this path flavour represents non-Windows
filesystem paths:


pathsegments is specified similarly to .



class (*pathsegments)¶
A subclass of , this path flavour represents Windows
filesystem paths:


pathsegments is specified similarly to .

Regardless of the system you’re running on, you can instantiate all of
these classes, since they don’t provide any operation that does system calls.

General properties¶
Paths are immutable and hashable.  Paths of a same flavour are comparable
and orderable.  These properties respect the flavour’s case-folding
semantics:


Paths of a different flavour compare unequal and cannot be ordered:




Operators¶
The slash operator helps create child paths, similarly to :


A path object can be used anywhere an object implementing 
is accepted:


The string representation of a path is the raw filesystem path itself
(in native form, e.g. with backslashes under Windows), which you can
pass to any function taking a file path as a string:


Similarly, calling  on a path gives the raw filesystem path as a
bytes object, as encoded by :



Note
Calling  is only recommended under Unix.  Under Windows,
the unicode form is the canonical representation of filesystem paths.



Accessing individual parts¶
To access the individual “parts” (components) of a path, use the following
property:


¶
A tuple giving access to the path’s various components:


(note how the drive and local root are regrouped in a single part)



Methods and properties¶
Pure paths provide the following methods and properties:


¶
A string representing the drive letter or name, if any:


UNC shares are also considered drives:





¶
A string representing the (local or global) root, if any:


UNC shares always have a root:





¶
The concatenation of the drive and root:





¶
An immutable sequence providing access to the logical ancestors of
the path:





¶
The logical parent of the path:


You cannot go past an anchor, or empty path:



Note
This is a purely lexical operation, hence the following behaviour:


If you want to walk an arbitrary filesystem path upwards, it is
recommended to first call  so as to resolve
symlinks and eliminate “..” components.




¶
A string representing the final path component, excluding the drive and
root, if any:


UNC drive names are not considered:





¶
The file extension of the final component, if any:





¶
A list of the path’s file extensions:





¶
The final path component, without its suffix:





()¶
Return a string representation of the path with forward slashes ():





()¶
Represent the path as a  URI.   is raised if
the path isn’t absolute.





()¶
Return whether the path is absolute or not.  A path is considered absolute
if it has both a root and (if the flavour allows) a drive:





()¶
With , return  if the path is considered
reserved under Windows,  otherwise.  With ,
 is always returned.


File system calls on reserved paths can fail mysteriously or have
unintended effects.



(*other)¶
Calling this method is equivalent to combining the path with each of
the other arguments in turn:





(pattern)¶
Match this path against the provided glob-style pattern.  Return 
if matching is successful,  otherwise.
If pattern is relative, the path can be either relative or absolute,
and matching is done from the right:


If pattern is absolute, the path must be absolute, and the whole path
must match:


As with other methods, case-sensitivity is observed:





(*other)¶
Compute a version of this path relative to the path represented by
other.  If it’s impossible, ValueError is raised:





(name)¶
Return a new path with the  changed.  If the original path
doesn’t have a name, ValueError is raised:





(suffix)¶
Return a new path with the  changed.  If the original path
doesn’t have a suffix, the new suffix is appended instead.  If the
suffix is an empty string, the original suffix is removed:




