link:
library/optparse.html#how-callbacks-are-called

docs:

How callbacks are called¶
All callbacks are called as follows:


where


is the Option instance that’s calling the callback

is the option string seen on the command-line that’s triggering the callback.
(If an abbreviated long option was used,  will be the full,
canonical option string—e.g. if the user puts  on the
command-line as an abbreviation for , then  will be
.)

is the argument to this option seen on the command-line.   will
only expect an argument if  is set; the type of  will be
the type implied by the option’s type.  If  for this option is
 (no argument expected), then  will be .  If 
> 1,  will be a tuple of values of the appropriate type.

is the OptionParser instance driving the whole thing, mainly useful because
you can access some other interesting data through its instance attributes:


the current list of leftover arguments, ie. arguments that have been
consumed but are neither options nor option arguments. Feel free to modify
, e.g. by adding more arguments to it.  (This list will
become , the second return value of .)

the current list of remaining arguments, ie. with  and
 (if applicable) removed, and only the arguments following them
still there.  Feel free to modify , e.g. by consuming more
arguments.

the object where option values are by default stored (an instance of
optparse.OptionValues).  This lets callbacks use the same mechanism as the
rest of  for storing option values; you don’t need to mess
around with globals or closures.  You can also access or modify the
value(s) of any options already encountered on the command-line.



is a tuple of arbitrary positional arguments supplied via the
 option attribute.

is a dictionary of arbitrary keyword arguments supplied via
.

