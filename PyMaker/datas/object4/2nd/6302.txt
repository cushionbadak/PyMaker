link:
library/xml.sax.html#module-xml.sax

docs:

 — Support for SAX2 parsers¶
Source code: Lib/xml/sax/__init__.py

The  package provides a number of modules which implement the
Simple API for XML (SAX) interface for Python.  The package itself provides the
SAX exceptions and the convenience functions which will be most used by users of
the SAX API.

Warning
The  module is not secure against maliciously
constructed data.  If you need to parse untrusted or unauthenticated data see
XML vulnerabilities.


Changed in version 3.7.1: The SAX parser no longer processes general external entities by default
to increase security. Before, the parser created network connections
to fetch remote files or loaded local files from the file
system for DTD and entities. The feature can be enabled again with method
 on the parser object
and argument .

The convenience functions are:


(parser_list=[])¶
Create and return a SAX  object.  The
first parser found will
be used.  If parser_list is provided, it must be a list of strings which
name modules that have a function named .  Modules listed
in parser_list will be used before modules in the default list of parsers.



(filename_or_stream, handler, error_handler=handler.ErrorHandler())¶
Create a SAX parser and use it to parse a document.  The document, passed in as
filename_or_stream, can be a filename or a file object.  The handler
parameter needs to be a SAX  instance.  If
error_handler is given, it must be a SAX 
instance; if
omitted,   will be raised on all errors.  There is no
return value; all work must be done by the handler passed in.



(string, handler, error_handler=handler.ErrorHandler())¶
Similar to , but parses from a buffer string received as a
parameter.  string must be a  instance or a
bytes-like object.

Changed in version 3.5: Added support of  instances.


A typical SAX application uses three kinds of objects: readers, handlers and
input sources.  “Reader” in this context is another term for parser, i.e. some
piece of code that reads the bytes or characters from the input source, and
produces a sequence of events. The events then get distributed to the handler
objects, i.e. the reader invokes a method on the handler.  A SAX application
must therefore obtain a reader object, create or open the input sources, create
the handlers, and connect these objects all together.  As the final step of
preparation, the reader is called to parse the input. During parsing, methods on
the handler objects are called based on structural and syntactic events from the
input data.
For these objects, only the interfaces are relevant; they are normally not
instantiated by the application itself.  Since Python does not have an explicit
notion of interface, they are formally introduced as classes, but applications
may use implementations which do not inherit from the provided classes.  The
, ,
, ,
and  interfaces are defined in the
module .  The handler interfaces are defined in
.  For convenience,
 (which is often
instantiated directly) and the handler classes are also available from
.  These interfaces are described below.
In addition to these classes,  provides the following exception
classes.


exception (msg, exception=None)¶
Encapsulate an XML error or warning.  This class can contain basic error or
warning information from either the XML parser or the application: it can be
subclassed to provide additional functionality or to add localization.  Note
that although the handlers defined in the
 interface
receive instances of this exception, it is not required to actually raise the
exception — it is also useful as a container for information.
When instantiated, msg should be a human-readable description of the error.
The optional exception parameter, if given, should be  or an exception
that was caught by the parsing code and is being passed along as information.
This is the base class for the other SAX exception classes.



exception (msg, exception, locator)¶
Subclass of  raised on parse errors. Instances of this
class are passed to the methods of the SAX
 interface to provide information
about the parse error.  This class supports the SAX
 interface as well as the
 interface.



exception (msg, exception=None)¶
Subclass of  raised when a SAX
 is
confronted with an unrecognized feature or property.  SAX applications and
extensions may use this class for similar purposes.



exception (msg, exception=None)¶
Subclass of  raised when a SAX
 is asked to
enable a feature that is not supported, or to set a property to a value that the
implementation does not support.  SAX applications and extensions may use this
class for similar purposes.


See also

SAX: The Simple API for XML
This site is the focal point for the definition of the SAX API.  It provides a
Java implementation and online documentation.  Links to implementations and
historical information are also available.
Module 
Definitions of the interfaces for application-provided objects.
Module 
Convenience functions for use in SAX applications.
Module 
Definitions of the interfaces for parser-provided objects.



SAXException Objects¶
The  exception class supports the following methods:


()¶
Return a human-readable message describing the error condition.



()¶
Return an encapsulated exception object, or .


