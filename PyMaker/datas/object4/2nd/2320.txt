link:
library/pickle.html#pickle.Unpickler

docs:


class (file, *, fix_imports=True, encoding="ASCII", errors="strict")¶
This takes a binary file for reading a pickle data stream.
The protocol version of the pickle is detected automatically, so no
protocol argument is needed.
The argument file must have two methods, a read() method that takes an
integer argument, and a readline() method that requires no arguments.  Both
methods should return bytes.  Thus file can be an on-disk file object
opened for binary reading, an  object, or any other
custom object that meets this interface.
Optional keyword arguments are fix_imports, encoding and errors,
which are used to control compatibility support for pickle stream generated
by Python 2.  If fix_imports is true, pickle will try to map the old
Python 2 names to the new names used in Python 3.  The encoding and
errors tell pickle how to decode 8-bit string instances pickled by Python
2; these default to ‘ASCII’ and ‘strict’, respectively.  The encoding can
be ‘bytes’ to read these 8-bit string instances as bytes objects.


()¶
Read a pickled object representation from the open file object given in
the constructor, and return the reconstituted object hierarchy specified
therein.  Bytes past the pickled object’s representation are ignored.



(pid)¶
Raise an  by default.
If defined,  should return the object specified by
the persistent ID pid.  If an invalid persistent ID is encountered, an
 should be raised.
See Persistence of External Objects for details and examples of uses.



(module, name)¶
Import module if necessary and return the object called name from it,
where the module and name arguments are  objects.  Note,
unlike its name suggests,  is also used for finding
functions.
Subclasses may override this to gain control over what type of objects and
how they can be loaded, potentially reducing security risks. Refer to
Restricting Globals for details.

