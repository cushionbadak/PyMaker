link:
library/pickle.html#pickle.Pickler

docs:


class (file, protocol=None, *, fix_imports=True)¶
This takes a binary file for writing a pickle data stream.
The optional protocol argument, an integer, tells the pickler to use
the given protocol; supported protocols are 0 to .
If not specified, the default is .  If a negative
number is specified,  is selected.
The file argument must have a write() method that accepts a single bytes
argument.  It can thus be an on-disk file opened for binary writing, an
 instance, or any other custom object that meets this
interface.
If fix_imports is true and protocol is less than 3, pickle will try to
map the new Python 3 names to the old module names used in Python 2, so
that the pickle data stream is readable with Python 2.


(obj)¶
Write a pickled representation of obj to the open file object given in
the constructor.



(obj)¶
Do nothing by default.  This exists so a subclass can override it.
If  returns , obj is pickled as usual.  Any
other value causes  to emit the returned value as a
persistent ID for obj.  The meaning of this persistent ID should be
defined by .  Note that the value
returned by  cannot itself have a persistent ID.
See Persistence of External Objects for details and examples of uses.



¶
A pickler object’s dispatch table is a registry of reduction
functions of the kind which can be declared using
.  It is a mapping whose keys are classes
and whose values are reduction functions.  A reduction function
takes a single argument of the associated class and should
conform to the same interface as a 
method.
By default, a pickler object will not have a
 attribute, and it will instead use the
global dispatch table managed by the  module.
However, to customize the pickling for a specific pickler object
one can set the  attribute to a dict-like
object.  Alternatively, if a subclass of  has a
 attribute then this will be used as the
default dispatch table for instances of that class.
See Dispatch Tables for usage examples.

New in version 3.3.




¶
Deprecated. Enable fast mode if set to a true value.  The fast mode
disables the usage of memo, therefore speeding the pickling process by not
generating superfluous PUT opcodes.  It should not be used with
self-referential objects, doing otherwise will cause  to
recurse infinitely.
Use  if you need more compact pickles.

