link:
library/ctypes.html#accessing-values-exported-from-dlls

docs:

Accessing values exported from dlls¶
Some shared libraries not only export functions, they also export variables. An
example in the Python library itself is the , an integer
set to 0, 1, or 2, depending on the  or  flag given on
startup.
 can access values like this with the  class methods of
the type.  pythonapi is a predefined symbol giving access to the Python C
api:


If the interpreter would have been started with , the sample would
have printed , or  if  would have been
specified.
An extended example which also demonstrates the use of pointers accesses the
 pointer exported by Python.
Quoting the docs for that value:

This pointer is initialized to point to an array of 
records, terminated by one whose members are all NULL or zero.  When a frozen
module is imported, it is searched in this table.  Third-party code could play
tricks with this to provide a dynamically created collection of frozen modules.
So manipulating this pointer could even prove useful. To restrict the example
size, we show only how this table can be read with :


We have defined the  data type, so we can get the pointer
to the table:


Since  is a  to the array of  records, we
can iterate over it, but we just have to make sure that our loop terminates,
because pointers have no size. Sooner or later it would probably crash with an
access violation or whatever, so it’s better to break out of the loop when we
hit the NULL entry:


The fact that standard Python has a frozen module and a frozen package
(indicated by the negative size member) is not well known, it is only used for
testing. Try it out with  for example.
