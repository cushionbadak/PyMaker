link:
library/asyncio-eventloop.html

docs:


Event Loop¶
Preface
The event loop is the core of every asyncio application.
Event loops run asynchronous tasks and callbacks, perform network
IO operations, and run subprocesses.
Application developers should typically use the high-level asyncio functions,
such as , and should rarely need to reference the loop
object or call its methods.  This section is intended mostly for authors
of lower-level code, libraries, and frameworks, who need finer control over
the event loop behavior.
Obtaining the Event Loop
The following low-level functions can be used to get, set, or create
an event loop:


()¶
Return the running event loop in the current OS thread.
If there is no running event loop a  is raised.
This function can only be called from a coroutine or a callback.

New in version 3.7.




()¶
Get the current event loop.  If there is no current event loop set
in the current OS thread and  has not yet
been called, asyncio will create a new event loop and set it as the
current one.
Because this function has rather complex behavior (especially
when custom event loop policies are in use), using the
 function is preferred to 
in coroutines and callbacks.
Consider also using the  function instead of using
lower level functions to manually create and close an event loop.



(loop)¶
Set loop as a current event loop for the current OS thread.



()¶
Create a new event loop object.

Note that the behaviour of , ,
and  functions can be altered by
setting a custom event loop policy.
Contents
This documentation page contains the following sections:

The Event Loop Methods section is the reference documentation of
the event loop APIs;
The Callback Handles section documents the  and
 instances which are returned from scheduling
methods such as  and ;
The Server Objects section documents types returned from
event loop methods like ;
The Event Loop Implementations section documents the
 and  classes;
The Examples section showcases how to work with some event
loop APIs.


Event Loop Methods¶
Event loops have low-level APIs for the following:


Running and stopping the loop
Scheduling callbacks
Scheduling delayed callbacks
Creating Futures and Tasks
Opening network connections
Creating network servers
Transferring files
TLS Upgrade
Watching file descriptors
Working with socket objects directly
DNS
Working with pipes
Unix signals
Executing code in thread or process pools
Error Handling API
Enabling debug mode
Running Subprocesses



Running and stopping the loop¶


(future)¶
Run until the future (an instance of ) has
completed.
If the argument is a coroutine object it
is implicitly scheduled to run as a .
Return the Future’s result or raise its exception.



()¶
Run the event loop until  is called.
If  is called before  is called,
the loop will poll the I/O selector once with a timeout of zero,
run all callbacks scheduled in response to I/O events (and
those that were already scheduled), and then exit.
If  is called while  is running,
the loop will run the current batch of callbacks and then exit.
Note that new callbacks scheduled by callbacks will not run in this
case; instead, they will run the next time  or
 is called.



()¶
Stop the event loop.



()¶
Return  if the event loop is currently running.



()¶
Return  if the event loop was closed.



()¶
Close the event loop.
The loop must not be running when this function is called.
Any pending callbacks will be discarded.
This method clears all queues and shuts down the executor, but does
not wait for the executor to finish.
This method is idempotent and irreversible.  No other methods
should be called after the event loop is closed.



coroutine ()¶
Schedule all currently open asynchronous generator objects to
close with an  call.  After calling this method,
the event loop will issue a warning if a new asynchronous generator
is iterated. This should be used to reliably finalize all scheduled
asynchronous generators.
Note that there is no need to call this function when
 is used.
Example:



New in version 3.6.




Scheduling callbacks¶


(callback, *args, context=None)¶
Schedule a callback to be called with args arguments at
the next iteration of the event loop.
Callbacks are called in the order in which they are registered.
Each callback will be called exactly once.
An optional keyword-only context argument allows specifying a
custom  for the callback to run in.
The current context is used when no context is provided.
An instance of  is returned, which can be
used later to cancel the callback.
This method is not thread-safe.



(callback, *args, context=None)¶
A thread-safe variant of .  Must be used to
schedule callbacks from another thread.
See the concurrency and multithreading
section of the documentation.


Changed in version 3.7: The context keyword-only parameter was added. See PEP 567
for more details.


Note
Most  scheduling functions don’t allow passing
keyword arguments.  To do that, use :


Using partial objects is usually more convenient than using lambdas,
as asyncio can render partial objects better in debug and error
messages.



Scheduling delayed callbacks¶
Event loop provides mechanisms to schedule callback functions
to be called at some point in the future.  Event loop uses monotonic
clocks to track time.


(delay, callback, *args, context=None)¶
Schedule callback to be called after the given delay
number of seconds (can be either an int or a float).
An instance of  is returned which can
be used to cancel the callback.
callback will be called exactly once.  If two callbacks are
scheduled for exactly the same time, the order in which they
are called is undefined.
The optional positional args will be passed to the callback when
it is called. If you want the callback to be called with keyword
arguments use .
An optional keyword-only context argument allows specifying a
custom  for the callback to run in.
The current context is used when no context is provided.

Changed in version 3.7: The context keyword-only parameter was added. See PEP 567
for more details.


Changed in version 3.7.1: In Python 3.7.0 and earlier with the default event loop implementation,
the delay could not exceed one day.
This has been fixed in Python 3.7.1.




(when, callback, *args, context=None)¶
Schedule callback to be called at the given absolute timestamp
when (an int or a float), using the same time reference as
.
This method’s behavior is the same as .
An instance of  is returned which can
be used to cancel the callback.

Changed in version 3.7: The context keyword-only parameter was added. See PEP 567
for more details.


Changed in version 3.7.1: In Python 3.7.0 and earlier with the default event loop implementation,
the difference between when and the current time could not exceed
one day.  This has been fixed in Python 3.7.1.




()¶
Return the current time, as a  value, according to
the event loop’s internal monotonic clock.


Note

Changed in version 3.8: In Python 3.7 and earlier timeouts (relative delay or absolute when)
should not exceed one day.  This has been fixed in Python 3.8.



See also
The  function.



Creating Futures and Tasks¶


()¶
Create an  object attached to the event loop.
This is the preferred way to create Futures in asyncio. This lets
third-party event loops provide alternative implementations of
the Future object (with better performance or instrumentation).

New in version 3.5.2.




(coro)¶
Schedule the execution of a Coroutines.
Return a  object.
Third-party event loops can use their own subclass of 
for interoperability. In this case, the result type is a subclass
of .



(factory)¶
Set a task factory that will be used by
.
If factory is  the default task factory will be set.
Otherwise, factory must be a callable with the signature matching
, where loop is a reference to the active
event loop, and coro is a coroutine object.  The callable
must return a -compatible object.



()¶
Return a task factory or  if the default one is in use.



Opening network connections¶


coroutine (protocol_factory, host=None, port=None, *, ssl=None, family=0, proto=0, flags=0, sock=None, local_addr=None, server_hostname=None, ssl_handshake_timeout=None)¶
Open a streaming transport connection to a given
address specified by host and port.
The socket family can be either  or
 depending on host (or the family
argument, if provided).
The socket type will be .
protocol_factory must be a callable returning an
asyncio protocol implementation.
This method will try to establish the connection in the background.
When successful, it returns a  pair.
The chronological synopsis of the underlying operation is as follows:

The connection is established and a transport
is created for it.
protocol_factory is called without arguments and is expected to
return a protocol instance.
The protocol instance is coupled with the transport by calling its
 method.
A  tuple is returned on success.

The created transport is an implementation-dependent bidirectional
stream.
Other arguments:

ssl: if given and not false, a SSL/TLS transport is created
(by default a plain TCP transport is created).  If ssl is
a  object, this context is used to create
the transport; if ssl is , a default context returned
from  is used.

See also
SSL/TLS security considerations


server_hostname sets or overrides the hostname that the target
server’s certificate will be matched against.  Should only be passed
if ssl is not .  By default the value of the host argument
is used.  If host is empty, there is no default and you must pass a
value for server_hostname.  If server_hostname is an empty
string, hostname matching is disabled (which is a serious security
risk, allowing for potential man-in-the-middle attacks).

family, proto, flags are the optional address family, protocol
and flags to be passed through to getaddrinfo() for host resolution.
If given, these should all be integers from the corresponding
 module constants.

sock, if given, should be an existing, already connected
 object to be used by the transport.
If sock is given, none of host, port, family, proto, flags
and local_addr should be specified.

local_addr, if given, is a  tuple used
to bind the socket to locally.  The local_host and local_port
are looked up using , similarly to host and port.

ssl_handshake_timeout is (for a TLS connection) the time in seconds
to wait for the TLS handshake to complete before aborting the connection.
 seconds if  (default).



New in version 3.7: The ssl_handshake_timeout parameter.


Changed in version 3.6: The socket option  is set by default
for all TCP connections.


Changed in version 3.5: Added support for SSL/TLS in .


See also
The  function is a high-level alternative
API.  It returns a pair of (, )
that can be used directly in async/await code.




coroutine (protocol_factory, local_addr=None, remote_addr=None, *, family=0, proto=0, flags=0, reuse_address=None, reuse_port=None, allow_broadcast=None, sock=None)¶
Create a datagram connection.
The socket family can be either ,
, or ,
depending on host (or the family argument, if provided).
The socket type will be .
protocol_factory must be a callable returning a
protocol implementation.
A tuple of  is returned on success.
Other arguments:

local_addr, if given, is a  tuple used
to bind the socket to locally.  The local_host and local_port
are looked up using .
remote_addr, if given, is a  tuple used
to connect the socket to a remote address.  The remote_host and
remote_port are looked up using .
family, proto, flags are the optional address family, protocol
and flags to be passed through to  for host
resolution. If given, these should all be integers from the
corresponding  module constants.
reuse_address tells the kernel to reuse a local socket in
 state, without waiting for its natural timeout to
expire. If not specified will automatically be set to  on
Unix.
reuse_port tells the kernel to allow this endpoint to be bound to the
same port as other existing endpoints are bound to, so long as they all
set this flag when being created. This option is not supported on Windows
and some Unixes. If the  constant is not
defined then this capability is unsupported.
allow_broadcast tells the kernel to allow this endpoint to send
messages to the broadcast address.
sock can optionally be specified in order to use a preexisting,
already connected,  object to be used by the
transport. If specified, local_addr and remote_addr should be omitted
(must be ).

On Windows, with , this method is not supported.
See UDP echo client protocol and
UDP echo server protocol examples.

Changed in version 3.4.4: The family, proto, flags, reuse_address, reuse_port,
*allow_broadcast, and sock parameters were added.




coroutine (protocol_factory, path=None, *, ssl=None, sock=None, server_hostname=None, ssl_handshake_timeout=None)¶
Create a Unix connection.
The socket family will be ; socket
type will be .
A tuple of  is returned on success.
path is the name of a Unix domain socket and is required,
unless a sock parameter is specified.  Abstract Unix sockets,
, , and  paths are
supported.
See the documentation of the  method
for information about arguments to this method.
Availability: Unix.

New in version 3.7: The ssl_handshake_timeout parameter.


Changed in version 3.7: The path parameter can now be a path-like object.




Creating network servers¶


coroutine (protocol_factory, host=None, port=None, *, family=socket.AF_UNSPEC, flags=socket.AI_PASSIVE, sock=None, backlog=100, ssl=None, reuse_address=None, reuse_port=None, ssl_handshake_timeout=None, start_serving=True)¶
Create a TCP server (socket type ) listening
on port of the host address.
Returns a  object.
Arguments:

protocol_factory must be a callable returning a
protocol implementation.
The host parameter can be set to several types which determine where
the server would be listening:
If host is a string, the TCP server is bound to a single network
interface specified by host.
If host is a sequence of strings, the TCP server is bound to all
network interfaces specified by the sequence.
If host is an empty string or , all interfaces are
assumed and a list of multiple sockets will be returned (most likely
one for IPv4 and another one for IPv6).


family can be set to either  or
 to force the socket to use IPv4 or IPv6.
If not set, the family will be determined from host name
(defaults to ).
flags is a bitmask for .
sock can optionally be specified in order to use a preexisting
socket object. If specified, host and port must not be specified.
backlog is the maximum number of queued connections passed to
 (defaults to 100).
ssl can be set to an  instance to enable
TLS over the accepted connections.
reuse_address tells the kernel to reuse a local socket in
 state, without waiting for its natural timeout to
expire. If not specified will automatically be set to  on
Unix.
reuse_port tells the kernel to allow this endpoint to be bound to the
same port as other existing endpoints are bound to, so long as they all
set this flag when being created. This option is not supported on
Windows.
ssl_handshake_timeout is (for a TLS server) the time in seconds to wait
for the TLS handshake to complete before aborting the connection.
 seconds if  (default).
start_serving set to  (the default) causes the created server
to start accepting connections immediately.  When set to ,
the user should await on  or
 to make the server to start accepting
connections.


New in version 3.7: Added ssl_handshake_timeout and start_serving parameters.


Changed in version 3.6: The socket option  is set by default
for all TCP connections.


Changed in version 3.5: Added support for SSL/TLS in .


Changed in version 3.5.1: The host parameter can be a sequence of strings.


See also
The  function is a higher-level alternative API
that returns a pair of  and 
that can be used in an async/await code.




coroutine (protocol_factory, path=None, *, sock=None, backlog=100, ssl=None, ssl_handshake_timeout=None, start_serving=True)¶
Similar to  but works with the
 socket family.
path is the name of a Unix domain socket, and is required,
unless a sock argument is provided.  Abstract Unix sockets,
, , and  paths
are supported.
See the documentation of the  method
for information about arguments to this method.
Availability: Unix.

New in version 3.7: The ssl_handshake_timeout and start_serving parameters.


Changed in version 3.7: The path parameter can now be a  object.




coroutine (protocol_factory, sock, *, ssl=None, ssl_handshake_timeout=None)¶
Wrap an already accepted connection into a transport/protocol pair.
This method can be used by servers that accept connections outside
of asyncio but that use asyncio to handle them.
Parameters:

protocol_factory must be a callable returning a
protocol implementation.
sock is a preexisting socket object returned from
.
ssl can be set to an  to enable SSL over
the accepted connections.
ssl_handshake_timeout is (for an SSL connection) the time in seconds to
wait for the SSL handshake to complete before aborting the connection.
 seconds if  (default).

Returns a  pair.

New in version 3.7: The ssl_handshake_timeout parameter.


New in version 3.5.3.




Transferring files¶


coroutine (transport, file, offset=0, count=None, *, fallback=True)¶
Send a file over a transport.  Return the total number of bytes
sent.
The method uses high-performance  if available.
file must be a regular file object opened in binary mode.
offset tells from where to start reading the file. If specified,
count is the total number of bytes to transmit as opposed to
sending the file until EOF is reached. File position is always updated,
even when this method raises an error, and
 can be used to obtain the actual
number of bytes sent.
fallback set to  makes asyncio to manually read and send
the file when the platform does not support the sendfile system call
(e.g. Windows or SSL socket on Unix).
Raise  if the system does not support
the sendfile syscall and fallback is .

New in version 3.7.




TLS Upgrade¶


coroutine (transport, protocol, sslcontext, *, server_side=False, server_hostname=None, ssl_handshake_timeout=None)¶
Upgrade an existing transport-based connection to TLS.
Return a new transport instance, that the protocol must start using
immediately after the await.  The transport instance passed to
the start_tls method should never be used again.
Parameters:

transport and protocol instances that methods like
 and
 return.
sslcontext: a configured instance of .
server_side pass  when a server-side connection is being
upgraded (like the one created by ).
server_hostname: sets or overrides the host name that the target
server’s certificate will be matched against.
ssl_handshake_timeout is (for a TLS connection) the time in seconds to
wait for the TLS handshake to complete before aborting the connection.
 seconds if  (default).


New in version 3.7.




Watching file descriptors¶


(fd, callback, *args)¶
Start monitoring the fd file descriptor for read availability and
invoke callback with the specified arguments once fd is available for
reading.



(fd)¶
Stop monitoring the fd file descriptor for read availability.



(fd, callback, *args)¶
Start monitoring the fd file descriptor for write availability and
invoke callback with the specified arguments once fd is available for
writing.
Use  to pass keyword arguments to callback.



(fd)¶
Stop monitoring the fd file descriptor for write availability.

See also Platform Support section
for some limitations of these methods.


Working with socket objects directly¶
In general, protocol implementations that use transport-based APIs
such as  and 
are faster than implementations that work with sockets directly.
However, there are some use cases when performance is not critical, and
working with  objects directly is more
convenient.


coroutine (sock, nbytes)¶
Receive up to nbytes from sock.  Asynchronous version of
.
Return the received data as a bytes object.
sock must be a non-blocking socket.

Changed in version 3.7: Even though this method was always documented as a coroutine
method, releases before Python 3.7 returned a .
Since Python 3.7 this is an  method.




coroutine (sock, buf)¶
Receive data from sock into the buf buffer.  Modeled after the blocking
 method.
Return the number of bytes written to the buffer.
sock must be a non-blocking socket.

New in version 3.7.




coroutine (sock, data)¶
Send data to the sock socket. Asynchronous version of
.
This method continues to send to the socket until either all data
in data has been sent or an error occurs.   is returned
on success.  On error, an exception is raised. Additionally, there is no way
to determine how much data, if any, was successfully processed by the
receiving end of the connection.
sock must be a non-blocking socket.

Changed in version 3.7: Even though the method was always documented as a coroutine
method, before Python 3.7 it returned an .
Since Python 3.7, this is an  method.




coroutine (sock, address)¶
Connect sock to a remote socket at address.
Asynchronous version of .
sock must be a non-blocking socket.

Changed in version 3.5.2:  no longer needs to be resolved.  
will try to check if the address is already resolved by calling
.  If not,
 will be used to resolve the
address.


See also

and  .




coroutine (sock)¶
Accept a connection.  Modeled after the blocking
 method.
The socket must be bound to an address and listening
for connections. The return value is a pair  where conn
is a new socket object usable to send and receive data on the connection,
and address is the address bound to the socket on the other end of the
connection.
sock must be a non-blocking socket.

Changed in version 3.7: Even though the method was always documented as a coroutine
method, before Python 3.7 it returned a .
Since Python 3.7, this is an  method.


See also
 and .




coroutine (sock, file, offset=0, count=None, *, fallback=True)¶
Send a file using high-performance  if possible.
Return the total number of bytes sent.
Asynchronous version of .
sock must be a non-blocking 
.
file must be a regular file object open in binary mode.
offset tells from where to start reading the file. If specified,
count is the total number of bytes to transmit as opposed to
sending the file until EOF is reached. File position is always updated,
even when this method raises an error, and
 can be used to obtain the actual
number of bytes sent.
fallback, when set to , makes asyncio manually read and send
the file when the platform does not support the sendfile syscall
(e.g. Windows or SSL socket on Unix).
Raise  if the system does not support
sendfile syscall and fallback is .
sock must be a non-blocking socket.

New in version 3.7.




DNS¶


coroutine (host, port, *, family=0, type=0, proto=0, flags=0)¶
Asynchronous version of .



coroutine (sockaddr, flags=0)¶
Asynchronous version of .


Changed in version 3.7: Both getaddrinfo and getnameinfo methods were always documented
to return a coroutine, but prior to Python 3.7 they were, in fact,
returning  objects.  Starting with Python 3.7
both methods are coroutines.



Working with pipes¶


coroutine (protocol_factory, pipe)¶
Register the read end of pipe in the event loop.
protocol_factory must be a callable returning an
asyncio protocol implementation.
pipe is a file-like object.
Return pair , where transport supports
the  interface and protocol is an object
instantiated by the protocol_factory.
With  event loop, the pipe is set to
non-blocking mode.



coroutine (protocol_factory, pipe)¶
Register the write end of pipe in the event loop.
protocol_factory must be a callable returning an
asyncio protocol implementation.
pipe is file-like object.
Return pair , where transport supports
 interface and protocol is an object
instantiated by the protocol_factory.
With  event loop, the pipe is set to
non-blocking mode.


Note
 does not support the above methods on
Windows.  Use  instead for Windows.


See also
The  and
 methods.



Unix signals¶


(signum, callback, *args)¶
Set callback as the handler for the signum signal.
The callback will be invoked by loop, along with other queued callbacks
and runnable coroutines of that event loop. Unlike signal handlers
registered using , a callback registered with this
function is allowed to interact with the event loop.
Raise  if the signal number is invalid or uncatchable.
Raise  if there is a problem setting up the handler.
Use  to pass keyword arguments to callback.
Like , this function must be invoked in the main
thread.



(sig)¶
Remove the handler for the sig signal.
Return  if the signal handler was removed, or  if
no handler was set for the given signal.
Availability: Unix.


See also
The  module.



Executing code in thread or process pools¶


awaitable (executor, func, *args)¶
Arrange for func to be called in the specified executor.
The executor argument should be an 
instance. The default executor is used if executor is .
Example:


This method returns a  object.
Use  to pass keyword arguments to func.

Changed in version 3.5.3:  no longer configures the
 of the thread pool executor it creates, instead
leaving it up to the thread pool executor
() to set the
default.




(executor)¶
Set executor as the default executor used by .
executor should be an instance of
.

Deprecated since version 3.7: Using an executor that is not an instance of
 is deprecated and
will trigger an error in Python 3.9.

executor must be an instance of
.



Error Handling API¶
Allows customizing how exceptions are handled in the event loop.


(handler)¶
Set handler as the new event loop exception handler.
If handler is , the default exception handler will
be set.  Otherwise, handler must be a callable with the signature
matching , where 
is a reference to the active event loop, and 
is a  object containing the details of the exception
(see  documentation for details
about context).



()¶
Return the current exception handler, or  if no custom
exception handler was set.

New in version 3.5.2.




(context)¶
Default exception handler.
This is called when an exception occurs and no exception
handler is set. This can be called by a custom exception
handler that wants to defer to the default handler behavior.
context parameter has the same meaning as in
.



(context)¶
Call the current event loop exception handler.
context is a  object containing the following keys
(new keys may be introduced in future Python versions):

‘message’: Error message;
‘exception’ (optional): Exception object;
‘future’ (optional):  instance;
‘handle’ (optional):  instance;
‘protocol’ (optional): Protocol instance;
‘transport’ (optional): Transport instance;
‘socket’ (optional):  instance.


Note
This method should not be overloaded in subclassed
event loops.  For custom exception handling, use
the  method.




Enabling debug mode¶


()¶
Get the debug mode () of the event loop.
The default value is  if the environment variable
 is set to a non-empty string, 
otherwise.



(enabled: bool)¶
Set the debug mode of the event loop.

Changed in version 3.7: The new  command line option can now also be used
to enable the debug mode.



See also
The debug mode of asyncio.



Running Subprocesses¶
Methods described in this subsections are low-level.  In regular
async/await code consider using the high-level
 and
 convenience functions instead.

Note
The default asyncio event loop on Windows does not support
subprocesses. See Subprocess Support on Windows for details.



coroutine (protocol_factory, *args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kwargs)¶
Create a subprocess from one or more string arguments specified by
args.
args must be a list of strings represented by:

;
or , encoded to the
filesystem encoding.

The first string specifies the program executable,
and the remaining strings specify the arguments.  Together, string
arguments form the  of the program.
This is similar to the standard library 
class called with  and the list of strings passed as
the first argument; however, where  takes
a single argument which is list of strings, subprocess_exec
takes multiple string arguments.
The protocol_factory must be a callable returning a subclass of the
 class.
Other parameters:

stdin: either a file-like object representing a pipe to be
connected to the subprocess’s standard input stream using
, or the
  constant (default). By default a new
pipe will be created and connected.

stdout: either a file-like object representing the pipe to be
connected to the subprocess’s standard output stream using
, or the
 constant (default). By default a new pipe
will be created and connected.

stderr: either a file-like object representing the pipe to be
connected to the subprocess’s standard error stream using
, or one of
 (default) or 
constants.
By default a new pipe will be created and connected. When
 is specified, the subprocess’ standard
error stream will be connected to the same pipe as the standard
output stream.

All other keyword arguments are passed to 
without interpretation, except for bufsize, universal_newlines
and shell, which should not be specified at all.


See the constructor of the  class
for documentation on other arguments.
Returns a pair of , where transport
conforms to the  base class and
protocol is an object instantiated by the protocol_factory.



coroutine (protocol_factory, cmd, *, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, **kwargs)¶
Create a subprocess from cmd, which can be a  or a
 string encoded to the
filesystem encoding,
using the platform’s “shell” syntax.
This is similar to the standard library 
class called with .
The protocol_factory must be a callable returning a subclass of the
 class.
See  for more details about
the remaining arguments.
Returns a pair of , where transport
conforms to the  base class and
protocol is an object instantiated by the protocol_factory.


Note
It is the application’s responsibility to ensure that all whitespace
and special characters are quoted appropriately to avoid shell injection
vulnerabilities. The  function can be used to
properly escape whitespace and special characters in strings that
are going to be used to construct shell commands.




Callback Handles¶


class ¶
A callback wrapper object returned by ,
.


()¶
Cancel the callback.  If the callback has already been canceled
or executed, this method has no effect.



()¶
Return  if the callback was cancelled.

New in version 3.7.





class ¶
A callback wrapper object returned by ,
and .
This class is a subclass of .


()¶
Return a scheduled callback time as  seconds.
The time is an absolute timestamp, using the same time
reference as .

New in version 3.7.





Server Objects¶
Server objects are created by ,
, ,
and  functions.
Do not instantiate the class directly.


class ¶
Server objects are asynchronous context managers.  When used in an
 statement, it’s guaranteed that the Server object is
closed and not accepting new connections when the 
statement is completed:



Changed in version 3.7: Server object is an asynchronous context manager since Python 3.7.



()¶
Stop serving: close listening sockets and set the 
attribute to .
The sockets that represent existing incoming client connections
are left open.
The server is closed asynchronously, use the 
coroutine to wait until the server is closed.



()¶
Return the event loop associated with the server object.

New in version 3.7.




coroutine ()¶
Start accepting connections.
This method is idempotent, so it can be called when
the server is already being serving.
The start_serving keyword-only parameter to
 and
 allows creating a Server object
that is not accepting connections initially.  In this case
, or  can be used
to make the Server start accepting connections.

New in version 3.7.




coroutine ()¶
Start accepting connections until the coroutine is cancelled.
Cancellation of  task causes the server
to be closed.
This method can be called if the server is already accepting
connections.  Only one  task can exist per
one Server object.
Example:



New in version 3.7.




()¶
Return  if the server is accepting new connections.

New in version 3.7.




coroutine ()¶
Wait until the  method completes.



¶
List of  objects the server is listening on,
or  if the server is closed.

Changed in version 3.7: Prior to Python 3.7  used to return an
internal list of server sockets directly.  In 3.7 a copy
of that list is returned.





Event Loop Implementations¶
asyncio ships with two different event loop implementations:
 and .
By default asyncio is configured to use 
on all platforms.


class ¶
An event loop based on the  module.
Uses the most efficient selector available for the given
platform.  It is also possible to manually configure the
exact selector implementation to be used:


Availability: Unix, Windows.



class ¶
An event loop for Windows that uses “I/O Completion Ports” (IOCP).
Availability: Windows.
An example how to use  on Windows:



See also
MSDN documentation on I/O Completion Ports.




class ¶
Abstract base class for asyncio-compliant event loops.
The Event Loop Methods section lists all
methods that an alternative implementation of 
should have defined.



Examples¶
Note that all examples in this section purposefully show how
to use the low-level event loop APIs, such as 
and .  Modern asyncio applications rarely
need to be written this way; consider using the high-level functions
like .

Hello World with call_soon()¶
An example using the  method to schedule a
callback. The callback displays  and then stops the
event loop:



See also
A similar Hello World
example created with a coroutine and the  function.



Display the current date with call_later()¶
An example of a callback displaying the current date every second. The
callback uses the  method to reschedule itself
after 5 seconds, and then stops the event loop:



See also
A similar current date example
created with a coroutine and the  function.



Watch a file descriptor for read events¶
Wait until a file descriptor received some data using the
 method and then close the event loop:



See also

A similar example
using transports, protocols, and the
 method.
Another similar example
using the high-level  function
and streams.




Set signal handlers for SIGINT and SIGTERM¶
(This  example only works on Unix.)
Register handlers for signals  and 
using the  method:





