link:
library/stdtypes.html#additional-methods-on-float

docs:

Additional Methods on Float¶
The float type implements the  abstract base
class. float also has the following additional methods.


()¶
Return a pair of integers whose ratio is exactly equal to the
original float and with a positive denominator.  Raises
 on infinities and a  on
NaNs.



()¶
Return  if the float instance is finite with integral
value, and  otherwise:



Two methods support conversion to
and from hexadecimal strings.  Since Python’s floats are stored
internally as binary numbers, converting a float to or from a
decimal string usually involves a small rounding error.  In
contrast, hexadecimal strings allow exact representation and
specification of floating-point numbers.  This can be useful when
debugging, and in numerical work.


()¶
Return a representation of a floating-point number as a hexadecimal
string.  For finite floating-point numbers, this representation
will always include a leading  and a trailing  and
exponent.



classmethod (s)¶
Class method to return the float represented by a hexadecimal
string s.  The string s may have leading and trailing
whitespace.

Note that  is an instance method, while
 is a class method.
A hexadecimal string takes the form:


where the optional  may by either  or , 
and  are strings of hexadecimal digits, and 
is a decimal integer with an optional leading sign.  Case is not
significant, and there must be at least one hexadecimal digit in
either the integer or the fraction.  This syntax is similar to the
syntax specified in section 6.4.4.2 of the C99 standard, and also to
the syntax used in Java 1.5 onwards.  In particular, the output of
 is usable as a hexadecimal floating-point literal in
C or Java code, and hexadecimal strings produced by C’s  format
character or Java’s  are accepted by
.
Note that the exponent is written in decimal rather than hexadecimal,
and that it gives the power of 2 by which to multiply the coefficient.
For example, the hexadecimal string  represents the
floating-point number , or
:


Applying the reverse conversion to  gives a different
hexadecimal string representing the same number:


