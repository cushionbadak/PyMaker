link:
library/inspect.html#classes-and-functions

docs:

Classes and functions¶


(classes, unique=False)¶
Arrange the given list of classes into a hierarchy of nested lists. Where a
nested list appears, it contains classes derived from the class whose entry
immediately precedes the list.  Each entry is a 2-tuple containing a class and a
tuple of its base classes.  If the unique argument is true, exactly one entry
appears in the returned structure for each class in the given list.  Otherwise,
classes using multiple inheritance and their descendants will appear multiple
times.



(func)¶
Get the names and default values of a Python function’s parameters. A
named tuple  is
returned. args is a list of the parameter names. varargs and keywords
are the names of the  and  parameters or . defaults is a
tuple of default argument values or  if there are no default
arguments; if this tuple has n elements, they correspond to the last
n elements listed in args.

Deprecated since version 3.0: Use  for an updated API that is usually a drop-in
replacement, but also correctly handles function annotations and
keyword-only parameters.
Alternatively, use  and
Signature Object, which provide a
more structured introspection API for callables.




(func)¶
Get the names and default values of a Python function’s parameters.  A
named tuple is returned:

args is a list of the positional parameter names.
varargs is the name of the  parameter or  if arbitrary
positional arguments are not accepted.
varkw is the name of the  parameter or  if arbitrary
keyword arguments are not accepted.
defaults is an n-tuple of default argument values corresponding to the
last n positional parameters, or  if there are no such defaults
defined.
kwonlyargs is a list of keyword-only parameter names in declaration order.
kwonlydefaults is a dictionary mapping parameter names from kwonlyargs
to the default values used if no argument is supplied.
annotations is a dictionary mapping parameter names to annotations.
The special key  is used to report the function return value
annotation (if any).
Note that  and
Signature Object provide the recommended
API for callable introspection, and support additional behaviours (like
positional-only arguments) that are sometimes encountered in extension module
APIs. This function is retained primarily for use in code that needs to
maintain compatibility with the Python 2  module API.

Changed in version 3.4: This function is now based on , but still ignores
 attributes and includes the already bound first
parameter in the signature output for bound methods.


Changed in version 3.6: This method was previously documented as deprecated in favour of
 in Python 3.5, but that decision has been reversed
in order to restore a clearly supported standard interface for
single-source Python 2/3 code migrating away from the legacy
 API.


Changed in version 3.7: Python only explicitly guaranteed that it preserved the declaration
order of keyword-only parameters as of version 3.7, although in practice
this order had always been preserved in Python 3.




(frame)¶
Get information about arguments passed into a particular frame.  A
named tuple  is
returned. args is a list of the argument names.  varargs and keywords
are the names of the  and  arguments or .  locals is the
locals dictionary of the given frame.

Note
This function was inadvertently marked as deprecated in Python 3.5.




(args[, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations[, formatarg, formatvarargs, formatvarkw, formatvalue, formatreturns, formatannotations]])¶
Format a pretty argument spec from the values returned by
.
The first seven arguments are (, , ,
, , , ).
The other six arguments are functions that are called to turn argument names,
 argument name,  argument name, default values, return annotation
and individual annotations into strings, respectively.
For example:



Deprecated since version 3.5: Use  and
Signature Object, which provide a
better introspecting API for callables.




(args[, varargs, varkw, locals, formatarg, formatvarargs, formatvarkw, formatvalue])¶
Format a pretty argument spec from the four values returned by
.  The format* arguments are the corresponding optional
formatting functions that are called to turn names and values into strings.

Note
This function was inadvertently marked as deprecated in Python 3.5.




(cls)¶
Return a tuple of class cls’s base classes, including cls, in method resolution
order.  No class appears more than once in this tuple. Note that the method
resolution order depends on cls’s type.  Unless a very peculiar user-defined
metatype is in use, cls will be the first element of the tuple.



(func, *args, **kwds)¶
Bind the args and kwds to the argument names of the Python function or
method func, as if it was called with them. For bound methods, bind also the
first argument (typically named ) to the associated instance. A dict
is returned, mapping the argument names (including the names of the  and
 arguments, if any) to their values from args and kwds. In case of
invoking func incorrectly, i.e. whenever  would raise
an exception because of incompatible signature, an exception of the same type
and the same or similar message is raised. For example:



New in version 3.2.


Deprecated since version 3.5: Use  and  instead.




(func)¶
Get the mapping of external name references in a Python function or
method func to their current values. A
named tuple 
is returned. nonlocals maps referenced names to lexical closure
variables, globals to the function’s module globals and builtins to
the builtins visible from the function body. unbound is the set of names
referenced in the function that could not be resolved at all given the
current module globals and builtins.
 is raised if func is not a Python function or method.

New in version 3.3.




(func, *, stop=None)¶
Get the object wrapped by func. It follows the chain of 
attributes returning the last object in the chain.
stop is an optional callback accepting an object in the wrapper chain
as its sole argument that allows the unwrapping to be terminated early if
the callback returns a true value. If the callback never returns a true
value, the last object in the chain is returned as usual. For example,
 uses this to stop unwrapping if any object in the
chain has a  attribute defined.
 is raised if a cycle is encountered.

New in version 3.4.


