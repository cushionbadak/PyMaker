link:
library/logging.config.html#access-to-internal-objects

docs:

Access to internal objectsÂ¶
As well as external objects, there is sometimes also a need to refer
to objects in the configuration.  This will be done implicitly by the
configuration system for things that it knows about.  For example, the
string value  for a  in a logger or handler will
automatically be converted to the value , and the
,  and  entries will take an
object id and resolve to the appropriate destination object.
However, a more generic mechanism is needed for user-defined
objects which are not known to the  module.  For
example, consider , which takes
a  argument which is another handler to delegate to. Since
the system already knows about this class, then in the configuration,
the given  just needs to be the object id of the relevant
target handler, and the system will resolve to the handler from the
id.  If, however, a user defines a  which has
an  handler, the configuration system would not know that
the  referred to a handler.  To cater for this, a generic
resolution system allows the user to specify:


The literal string  will be resolved in an
analogous way to strings with the  prefix, but looking
in the configuration itself rather than the import namespace.  The
mechanism allows access by dot or by index, in a similar way to
that provided by .  Thus, given the following snippet:


in the configuration, the string  would resolve to
the dict with key , the string 
would resolve to the dict with key  in the  dict,
and so on.  The string  would
resolve to  and the string
 would resolve to the value
. The  value could be accessed
using either  or, equivalently,
.  The latter form only needs to be
used if the key contains spaces or non-alphanumeric characters.  If an
index value consists only of decimal digits, access will be attempted
using the corresponding integer value, falling back to the string
value if needed.
Given a string , this will
resolve to .
If the string is specified as ,
the system will attempt to retrieve the value from
, and fall back
to  if that
fails.
