link:
library/sqlite3.html#module-functions-and-constants

docs:

Module functions and constants¶


¶
The version number of this module, as a string. This is not the version of
the SQLite library.



¶
The version number of this module, as a tuple of integers. This is not the
version of the SQLite library.



¶
The version number of the run-time SQLite library, as a string.



¶
The version number of the run-time SQLite library, as a tuple of integers.



¶
This constant is meant to be used with the detect_types parameter of the
 function.
Setting it makes the  module parse the declared type for each
column it returns.  It will parse out the first word of the declared type,
i. e.  for “integer primary key”, it will parse out “integer”, or for
“number(10)” it will parse out “number”. Then for that column, it will look
into the converters dictionary and use the converter function registered for
that type there.



¶
This constant is meant to be used with the detect_types parameter of the
 function.
Setting this makes the SQLite interface parse the column name for each column it
returns.  It will look for a string formed [mytype] in there, and then decide
that ‘mytype’ is the type of the column. It will try to find an entry of
‘mytype’ in the converters dictionary and then use the converter function found
there to return the value. The column name found in 
is only the first word of the column name, i.  e. if you use something like
 in your SQL, then we will parse out everything until the
first blank for the column name: the column name would simply be “x”.



(database[, timeout, detect_types, isolation_level, check_same_thread, factory, cached_statements, uri])¶
Opens a connection to the SQLite database file database. By default returns a
 object, unless a custom factory is given.
database is a path-like object giving the pathname (absolute or
relative to the current  working directory) of the database file to be opened.
You can use  to open a database connection to a database that
resides in RAM instead of on disk.
When a database is accessed by multiple connections, and one of the processes
modifies the database, the SQLite database is locked until that transaction is
committed. The timeout parameter specifies how long the connection should wait
for the lock to go away until raising an exception. The default for the timeout
parameter is 5.0 (five seconds).
For the isolation_level parameter, please see the
 property of  objects.
SQLite natively supports only the types TEXT, INTEGER, REAL, BLOB and NULL. If
you want to use other types you must add support for them yourself. The
detect_types parameter and the using custom converters registered with the
module-level  function allow you to easily do that.
detect_types defaults to 0 (i. e. off, no type detection), you can set it to
any combination of  and  to turn
type detection on.
By default, check_same_thread is  and only the creating thread may
use the connection. If set , the returned connection may be shared
across multiple threads. When using multiple threads with the same connection
writing operations should be serialized by the user to avoid data corruption.
By default, the  module uses its  class for the
connect call.  You can, however, subclass the  class and make
 use your class instead by providing your class for the factory
parameter.
Consult the section SQLite and Python types of this manual for details.
The  module internally uses a statement cache to avoid SQL parsing
overhead. If you want to explicitly set the number of statements that are cached
for the connection, you can set the cached_statements parameter. The currently
implemented default is to cache 100 statements.
If uri is true, database is interpreted as a URI. This allows you
to specify options. For example, to open a database in read-only mode
you can use:


More information about this feature, including a list of recognized options, can
be found in the SQLite URI documentation.

Changed in version 3.4: Added the uri parameter.


Changed in version 3.7: database can now also be a path-like object, not only a string.




(typename, callable)¶
Registers a callable to convert a bytestring from the database into a custom
Python type. The callable will be invoked for all database values that are of
the type typename. Confer the parameter detect_types of the 
function for how the type detection works. Note that typename and the name of
the type in your query are matched in case-insensitive manner.



(type, callable)¶
Registers a callable to convert the custom Python type type into one of
SQLite’s supported types. The callable callable accepts as single parameter
the Python value, and must return a value of the following types: int,
float, str or bytes.



(sql)¶
Returns  if the string sql contains one or more complete SQL
statements terminated by semicolons. It does not verify that the SQL is
syntactically correct, only that there are no unclosed string literals and the
statement is terminated by a semicolon.
This can be used to build a shell for SQLite, as in the following example:





(flag)¶
By default you will not get any tracebacks in user-defined functions,
aggregates, converters, authorizer callbacks etc. If you want to debug them,
you can call this function with flag set to . Afterwards, you will
get tracebacks from callbacks on . Use  to
disable the feature again.

