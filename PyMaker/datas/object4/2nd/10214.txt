link:
library/msilib.html#module-msilib

docs:

 — Read and write Microsoft Installer files¶
Source code: Lib/msilib/__init__.py

The  supports the creation of Microsoft Installer () files.
Because these files often contain an embedded “cabinet” file (), it also
exposes an API to create CAB files. Support for reading  files is
currently not implemented; read support for the  database is possible.
This package aims to provide complete access to all tables in an  file,
therefore, it is a fairly low-level API. Two primary applications of this
package are the  command , and the creation of
Python installer package itself (although that currently uses a different
version of ).
The package contents can be roughly split into four parts: low-level CAB
routines, low-level MSI routines, higher-level MSI routines, and standard table
structures.


(cabname, files)¶
Create a new CAB file named cabname. files must be a list of tuples, each
containing the name of the file on disk, and the name of the file inside the CAB
file.
The files are added to the CAB file in the order they appear in the list. All
files are added into a single CAB file, using the MSZIP compression algorithm.
Callbacks to Python for the various steps of MSI creation are currently not
exposed.



()¶
Return the string representation of a new unique identifier. This wraps the
Windows API functions  and .



(path, persist)¶
Return a new database object by calling MsiOpenDatabase.   path is the file
name of the MSI file; persist can be one of the constants
, , ,
, or , and may include the flag
. See the Microsoft documentation for the meaning of
these flags; depending on the flags, an existing database is opened, or a new
one created.



(count)¶
Return a new record object by calling . count is the
number of fields of the record.



(name, schema, ProductName, ProductCode, ProductVersion, Manufacturer)¶
Create and return a new database name, initialize it with schema, and set
the properties ProductName, ProductCode, ProductVersion, and
Manufacturer.
schema must be a module object containing  and
 attributes; typically,  should be
used.
The database will contain just the schema and the validation records when this
function returns.



(database, table, records)¶
Add all records to the table named table in database.
The table argument must be one of the predefined tables in the MSI schema,
e.g. , , , , ,
etc.
records should be a list of tuples, each one containing all fields of a
record according to the schema of the table.  For optional fields,
 can be passed.
Field values can be ints, strings, or instances of the Binary class.



class (filename)¶
Represents entries in the Binary table; inserting such an object using
 reads the file named filename into the table.



(database, module)¶
Add all table content from module to database. module must contain an
attribute tables listing all tables for which content should be added, and one
attribute per table that has the actual content.
This is typically used to install the sequence tables.



(database, name, path)¶
Add the file path into the  table of database, with the stream
name name.



()¶
Return a new UUID, in the format that MSI typically requires (i.e. in curly
braces, and with all hexdigits in upper-case).


See also
FCICreate
UuidCreate
UuidToString


Database Objects¶


(sql)¶
Return a view object, by calling . sql is the SQL
statement to execute.



()¶
Commit the changes pending in the current transaction, by calling
.



(count)¶
Return a new summary information object, by calling
.  count is the maximum number of updated
values.



()¶
Close the database object, through .

New in version 3.7.



See also
MSIDatabaseOpenView
MSIDatabaseCommit
MSIGetSummaryInformation
MsiCloseHandle



View Objects¶


(params)¶
Execute the SQL query of the view, through . If
params is not , it is a record describing actual values of the
parameter tokens in the query.



(kind)¶
Return a record describing the columns of the view, through calling
. kind can be either  or
.



()¶
Return a result record of the query, through calling .



(kind, data)¶
Modify the view, by calling . kind can be one of
, , ,
, , ,
, , ,
, ,
, or .
data must be a record describing the new data.



()¶
Close the view, through .


See also
MsiViewExecute
MSIViewGetColumnInfo
MsiViewFetch
MsiViewModify
MsiViewClose



Summary Information Objects¶


(field)¶
Return a property of the summary, through .
field is the name of the property, and can be one of the constants
, , , ,
, , , ,
, , ,
, , , ,
, or .



()¶
Return the number of summary properties, through
.



(field, value)¶
Set a property through . field can have the
same values as in , value is the new value of the property.
Possible value types are integer and string.



()¶
Write the modified properties to the summary information stream, using
.


See also
MsiSummaryInfoGetProperty
MsiSummaryInfoGetPropertyCount
MsiSummaryInfoSetProperty
MsiSummaryInfoPersist



Record Objects¶


()¶
Return the number of fields of the record, through
.



(field)¶
Return the value of field as an integer where possible.  field must
be an integer.



(field)¶
Return the value of field as a string where possible.  field must
be an integer.



(field, value)¶
Set field to value through . field must be an
integer; value a string.



(field, value)¶
Set field to the contents of the file named value, through
. field must be an integer; value a string.



(field, value)¶
Set field to value through . Both field and
value must be an integer.



()¶
Set all fields of the record to 0, through .


See also
MsiRecordGetFieldCount
MsiRecordSetString
MsiRecordSetStream
MsiRecordSetInteger
MsiRecordClearData



Errors¶
All wrappers around MSI functions raise ; the string inside the
exception will contain more detail.


CAB Objects¶


class (name)¶
The class  represents a CAB file. During MSI construction, files
will be added simultaneously to the  table, and to a CAB file. Then,
when all files have been added, the CAB file can be written, then added to the
MSI file.
name is the name of the CAB file in the MSI file.


(full, file, logical)¶
Add the file with the pathname full to the CAB file, under the name
logical.  If there is already a file named logical, a new file name is
created.
Return the index of the file in the CAB file, and the new name of the file
inside the CAB file.



(database)¶
Generate a CAB file, add it as a stream to the MSI file, put it into the
 table, and remove the generated file from the disk.




Directory Objects¶


class (database, cab, basedir, physical, logical, default[, componentflags])¶
Create a new directory in the Directory table. There is a current component at
each point in time for the directory, which is either explicitly created through
, or implicitly when files are added for the first time.
Files are added into the current component, and into the cab file.  To create a
directory, a base directory object needs to be specified (can be ), the
path to the physical directory, and a logical directory name.  default
specifies the DefaultDir slot in the directory table. componentflags specifies
the default flags that new components get.


(component=None, feature=None, flags=None, keyfile=None, uuid=None)¶
Add an entry to the Component table, and make this component the current
component for this directory. If no component name is given, the directory
name is used. If no feature is given, the current feature is used. If no
flags are given, the directory’s default flags are used. If no keyfile
is given, the KeyPath is left null in the Component table.



(file, src=None, version=None, language=None)¶
Add a file to the current component of the directory, starting a new one
if there is no current component. By default, the file name in the source
and the file table will be identical. If the src file is specified, it
is interpreted relative to the current directory. Optionally, a version
and a language can be specified for the entry in the File table.



(pattern, exclude=None)¶
Add a list of files to the current component as specified in the glob
pattern.  Individual files can be excluded in the exclude list.



()¶
Remove  files on uninstall.



See also
Directory Table
File Table
Component Table
FeatureComponents Table



Features¶


class (db, id, title, desc, display, level=1, parent=None, directory=None, attributes=0)¶
Add a new record to the  table, using the values id, parent.id,
title, desc, display, level, directory, and attributes. The
resulting feature object can be passed to the  method of
.


()¶
Make this feature the current feature of . New components are
automatically added to the default feature, unless a feature is explicitly
specified.



See also
Feature Table



GUI classes¶
 provides several classes that wrap the GUI tables in an MSI
database. However, no standard user interface is provided; use
 to create MSI files with a user-interface
for installing Python packages.


class (dlg, name)¶
Base class of the dialog controls. dlg is the dialog object the control
belongs to, and name is the control’s name.


(event, argument, condition=1, ordering=None)¶
Make an entry into the  table for this control.



(event, attribute)¶
Make an entry into the  table for this control.



(action, condition)¶
Make an entry into the  table for this control.




class (dlg, name, property)¶
Create a radio button control named name. property is the installer property
that gets set when a radio button is selected.


(name, x, y, width, height, text, value=None)¶
Add a radio button named name to the group, at the coordinates x, y,
width, height, and with the label text. If value is , it
defaults to name.




class (db, name, x, y, w, h, attr, title, first, default, cancel)¶
Return a new  object. An entry in the  table is made,
with the specified coordinates, dialog attributes, title, name of the first,
default, and cancel controls.


(name, type, x, y, width, height, attributes, property, text, control_next, help)¶
Return a new  object. An entry in the  table is
made with the specified parameters.
This is a generic method; for specific types, specialized methods are
provided.



(name, x, y, width, height, attributes, text)¶
Add and return a  control.



(name, x, y, width, height, text)¶
Add and return a  control.



(name, x, y, width, height)¶
Add and return a  control.



(name, x, y, width, height, attributes, text, next_control)¶
Add and return a  control.



(name, x, y, width, height, attributes, property, text, next_control)¶
Add and return a  control.



(name, x, y, width, height, attributes, property, text, next_control)¶
Add and return a  control.



See also
Dialog Table
Control Table
Control Types
ControlCondition Table
ControlEvent Table
EventMapping Table
RadioButton Table



Precomputed tables¶
 provides a few subpackages that contain only schema and table
definitions. Currently, these definitions are based on MSI version 2.0.


¶
This is the standard MSI schema for MSI 2.0, with the tables variable
providing a list of table definitions, and _Validation_records providing the
data for MSI validation.



¶
This module contains table contents for the standard sequence tables:
AdminExecuteSequence, AdminUISequence, AdvtExecuteSequence,
InstallExecuteSequence, and InstallUISequence.



¶
This module contains definitions for the UIText and ActionText tables, for the
standard installer actions.


