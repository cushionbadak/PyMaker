link:
reference/datamodel.html#with-statement-context-managers

docs:

3.3.9. With Statement Context Managers¶
A context manager is an object that defines the runtime context to be
established when executing a  statement. The context manager
handles the entry into, and the exit from, the desired runtime context for the
execution of the block of code.  Context managers are normally invoked using the
 statement (described in section The with statement), but can also be
used by directly invoking their methods.
Typical uses of context managers include saving and restoring various kinds of
global state, locking and unlocking resources, closing opened files, etc.
For more information on context managers, see Context Manager Types.


(self)¶
Enter the runtime context related to this object. The  statement
will bind this method’s return value to the target(s) specified in the
 clause of the statement, if any.



(self, exc_type, exc_value, traceback)¶
Exit the runtime context related to this object. The parameters describe the
exception that caused the context to be exited. If the context was exited
without an exception, all three arguments will be .
If an exception is supplied, and the method wishes to suppress the exception
(i.e., prevent it from being propagated), it should return a true value.
Otherwise, the exception will be processed normally upon exit from this method.
Note that  methods should not reraise the passed-in exception;
this is the caller’s responsibility.


See also

PEP 343 - The “with” statement
The specification, background, and examples for the Python 
statement.


