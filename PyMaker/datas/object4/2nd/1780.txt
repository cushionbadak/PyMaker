link:
library/decimal.html#signals

docs:

Signals¶
Signals represent conditions that arise during computation. Each corresponds to
one context flag and one context trap enabler.
The context flag is set whenever the condition is encountered. After the
computation, flags may be checked for informational purposes (for instance, to
determine whether a computation was exact). After checking the flags, be sure to
clear all flags before starting the next computation.
If the context’s trap enabler is set for the signal, then the condition causes a
Python exception to be raised.  For example, if the  trap
is set, then a  exception is raised upon encountering the
condition.


class ¶
Altered an exponent to fit representation constraints.
Typically, clamping occurs when an exponent falls outside the context’s
 and  limits.  If possible, the exponent is reduced to
fit by adding zeros to the coefficient.



class ¶
Base class for other signals and a subclass of .



class ¶
Signals the division of a non-infinite number by zero.
Can occur with division, modulo division, or when raising a number to a negative
power.  If this signal is not trapped, returns  or
 with the sign determined by the inputs to the calculation.



class ¶
Indicates that rounding occurred and the result is not exact.
Signals when non-zero digits were discarded during rounding. The rounded result
is returned.  The signal flag or trap is used to detect when results are
inexact.



class ¶
An invalid operation was performed.
Indicates that an operation was requested that does not make sense. If not
trapped, returns .  Possible causes include:





class ¶
Numerical overflow.
Indicates the exponent is larger than  after rounding has
occurred.  If not trapped, the result depends on the rounding mode, either
pulling inward to the largest representable finite number or rounding outward
to .  In either case,  and 
are also signaled.



class ¶
Rounding occurred though possibly no information was lost.
Signaled whenever rounding discards digits; even if those digits are zero
(such as rounding  to ).  If not trapped, returns
the result unchanged.  This signal is used to detect loss of significant
digits.



class ¶
Exponent was lower than  prior to rounding.
Occurs when an operation result is subnormal (the exponent is too small). If
not trapped, returns the result unchanged.



class ¶
Numerical underflow with result rounded to zero.
Occurs when a subnormal result is pushed to zero by rounding. 
and  are also signaled.



class ¶
Enable stricter semantics for mixing floats and Decimals.
If the signal is not trapped (default), mixing floats and Decimals is
permitted in the  constructor,
 and all comparison operators.
Both conversion and comparisons are exact. Any occurrence of a mixed
operation is silently recorded by setting  in the
context flags. Explicit conversions with 
or  do not set the flag.
Otherwise (the signal is trapped), only equality comparisons and explicit
conversions are silent. All other mixed operations raise .

The following table summarizes the hierarchy of signals:


