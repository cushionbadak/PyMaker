link:
reference/import.html#the-import-system

docs:

5. The import system¶
Python code in one module gains access to the code in another module
by the process of importing it.  The  statement is
the most common way of invoking the import machinery, but it is not the only
way.  Functions such as  and built-in
 can also be used to invoke the import machinery.
The  statement combines two operations; it searches for the
named module, then it binds the results of that search to a name in the local
scope.  The search operation of the  statement is defined as
a call to the  function, with the appropriate arguments.
The return value of  is used to perform the name
binding operation of the  statement.  See the
 statement for the exact details of that name binding
operation.
A direct call to  performs only the module search and, if
found, the module creation operation.  While certain side-effects may occur,
such as the importing of parent packages, and the updating of various caches
(including ), only the  statement performs
a name binding operation.
When an  statement is executed, the standard builtin
 function is called. Other mechanisms for invoking the
import system (such as ) may choose to bypass
 and use their own solutions to implement import semantics.
When a module is first imported, Python searches for the module and if found,
it creates a module object [1], initializing it.  If the named module
cannot be found, a  is raised.  Python implements various
strategies to search for the named module when the import machinery is
invoked.  These strategies can be modified and extended by using various hooks
described in the sections below.

Changed in version 3.3: The import system has been updated to fully implement the second phase
of PEP 302. There is no longer any implicit import machinery - the full
import system is exposed through . In addition,
native namespace package support has been implemented (see PEP 420).


5.1. ¶
The  module provides a rich API for interacting with the
import system.  For example  provides a
recommended, simpler API than built-in  for invoking the
import machinery.  Refer to the  library documentation for
additional detail.


5.2. Packages¶
Python has only one type of module object, and all modules are of this type,
regardless of whether the module is implemented in Python, C, or something
else.  To help organize modules and provide a naming hierarchy, Python has a
concept of packages.
You can think of packages as the directories on a file system and modules as
files within directories, but don’t take this analogy too literally since
packages and modules need not originate from the file system.  For the
purposes of this documentation, we’ll use this convenient analogy of
directories and files.  Like file system directories, packages are organized
hierarchically, and packages may themselves contain subpackages, as well as
regular modules.
It’s important to keep in mind that all packages are modules, but not all
modules are packages.  Or put another way, packages are just a special kind of
module.  Specifically, any module that contains a  attribute is
considered a package.
All modules have a name.  Subpackage names are separated from their parent
package name by dots, akin to Python’s standard attribute access syntax.  Thus
you might have a module called  and a package called ,
which in turn has a subpackage called  and a module within
that subpackage called .

5.2.1. Regular packages¶
Python defines two types of packages, regular packages and namespace packages.  Regular
packages are traditional packages as they existed in Python 3.2 and earlier.
A regular package is typically implemented as a directory containing an
 file.  When a regular package is imported, this
 file is implicitly executed, and the objects it defines are
bound to names in the package’s namespace.  The  file can
contain the same Python code that any other module can contain, and Python
will add some additional attributes to the module when it is imported.
For example, the following file system layout defines a top level 
package with three subpackages:


Importing  will implicitly execute  and
.  Subsequent imports of  or
 will execute  and
 respectively.


5.2.2. Namespace packages¶
A namespace package is a composite of various portions,
where each portion contributes a subpackage to the parent package.  Portions
may reside in different locations on the file system.  Portions may also be
found in zip files, on the network, or anywhere else that Python searches
during import.  Namespace packages may or may not correspond directly to
objects on the file system; they may be virtual modules that have no concrete
representation.
Namespace packages do not use an ordinary list for their 
attribute. They instead use a custom iterable type which will automatically
perform a new search for package portions on the next import attempt within
that package if the path of their parent package (or  for a
top level package) changes.
With namespace packages, there is no  file.  In fact,
there may be multiple  directories found during import search, where
each one is provided by a different portion.  Thus  may not be
physically located next to .  In this case, Python will create a
namespace package for the top-level  package whenever it or one of
its subpackages is imported.
See also PEP 420 for the namespace package specification.



5.3. Searching¶
To begin the search, Python needs the fully qualified
name of the module (or package, but for the purposes of this discussion, the
difference is immaterial) being imported.  This name may come from various
arguments to the  statement, or from the parameters to the
 or  functions.
This name will be used in various phases of the import search, and it may be
the dotted path to a submodule, e.g. .  In this case, Python
first tries to import , then , and finally .
If any of the intermediate imports fail, a  is raised.

5.3.1. The module cache¶
The first place checked during import search is .  This
mapping serves as a cache of all modules that have been previously imported,
including the intermediate paths.  So if  was previously
imported,  will contain entries for , ,
and .  Each key will have as its value the corresponding module
object.
During import, the module name is looked up in  and if
present, the associated value is the module satisfying the import, and the
process completes.  However, if the value is , then a
 is raised.  If the module name is missing, Python will
continue searching for the module.
 is writable.  Deleting a key may not destroy the
associated module (as other modules may hold references to it),
but it will invalidate the cache entry for the named module, causing
Python to search anew for the named module upon its next
import. The key can also be assigned to , forcing the next import
of the module to result in a .
Beware though, as if you keep a reference to the module object,
invalidate its cache entry in , and then re-import the
named module, the two module objects will not be the same. By contrast,
 will reuse the same module object, and simply
reinitialise the module contents by rerunning the module’s code.


5.3.2. Finders and loaders¶
If the named module is not found in , then Python’s import
protocol is invoked to find and load the module.  This protocol consists of
two conceptual objects, finders and loaders.
A finder’s job is to determine whether it can find the named module using
whatever strategy it knows about. Objects that implement both of these
interfaces are referred to as importers - they return
themselves when they find that they can load the requested module.
Python includes a number of default finders and importers.  The first one
knows how to locate built-in modules, and the second knows how to locate
frozen modules.  A third default finder searches an import path
for modules.  The import path is a list of locations that may
name file system paths or zip files.  It can also be extended to search
for any locatable resource, such as those identified by URLs.
The import machinery is extensible, so new finders can be added to extend the
range and scope of module searching.
Finders do not actually load modules.  If they can find the named module, they
return a module spec, an encapsulation of the module’s import-related
information, which the import machinery then uses when loading the module.
The following sections describe the protocol for finders and loaders in more
detail, including how you can create and register new ones to extend the
import machinery.

Changed in version 3.4: In previous versions of Python, finders returned loaders
directly, whereas now they return module specs which contain loaders.
Loaders are still used during import but have fewer responsibilities.



5.3.3. Import hooks¶
The import machinery is designed to be extensible; the primary mechanism for
this are the import hooks.  There are two types of import hooks: meta
hooks and import path hooks.
Meta hooks are called at the start of import processing, before any other
import processing has occurred, other than  cache look up.
This allows meta hooks to override  processing, frozen
modules, or even built-in modules.  Meta hooks are registered by adding new
finder objects to , as described below.
Import path hooks are called as part of  (or
) processing, at the point where their associated path
item is encountered.  Import path hooks are registered by adding new callables
to  as described below.


5.3.4. The meta path¶
When the named module is not found in , Python next
searches , which contains a list of meta path finder
objects.  These finders are queried in order to see if they know how to handle
the named module.  Meta path finders must implement a method called
 which takes three arguments:
a name, an import path, and (optionally) a target module.  The meta path
finder can use any strategy it wants to determine whether it can handle
the named module or not.
If the meta path finder knows how to handle the named module, it returns a
spec object.  If it cannot handle the named module, it returns .  If
 processing reaches the end of its list without returning
a spec, then a  is raised.  Any other exceptions
raised are simply propagated up, aborting the import process.
The  method of meta path
finders is called with two or three arguments.  The first is the fully
qualified name of the module being imported, for example .
The second argument is the path entries to use for the module search.  For
top-level modules, the second argument is , but for submodules or
subpackages, the second argument is the value of the parent package’s
 attribute. If the appropriate  attribute cannot
be accessed, a  is raised.  The third argument
is an existing module object that will be the target of loading later.
The import system passes in a target module only during reload.
The meta path may be traversed multiple times for a single import request.
For example, assuming none of the modules involved has already been cached,
importing  will first perform a top level import, calling
 on each meta path finder (). After
 has been imported,  will be imported by traversing the
meta path a second time, calling
. Once  has been
imported, the final traversal will call
.
Some meta path finders only support top level imports. These importers will
always return  when anything other than  is passed as the
second argument.
Python’s default  has three meta path finders, one that
knows how to import built-in modules, one that knows how to import frozen
modules, and one that knows how to import modules from an import path
(i.e. the path based finder).

Changed in version 3.4: The  method of meta path
finders replaced , which
is now deprecated.  While it will continue to work without change, the
import machinery will try it only if the finder does not implement
.




5.4. Loading¶
If and when a module spec is found, the import machinery will use it (and
the loader it contains) when loading the module.  Here is an approximation
of what happens during the loading portion of import:


Note the following details:


If there is an existing module object with the given name in
, import will have already returned it.
The module will exist in  before the loader
executes the module code.  This is crucial because the module code may
(directly or indirectly) import itself; adding it to 
beforehand prevents unbounded recursion in the worst case and multiple
loading in the best.
If loading fails, the failing module – and only the failing module –
gets removed from .  Any module already in the
 cache, and any module that was successfully loaded
as a side-effect, must remain in the cache.  This contrasts with
reloading where even the failing module is left in .
After the module is created but before execution, the import machinery
sets the import-related module attributes (“_init_module_attrs” in
the pseudo-code example above), as summarized in a
later section.
Module execution is the key moment of loading in which the module’s
namespace gets populated.  Execution is entirely delegated to the
loader, which gets to decide what gets populated and how.
The module created during loading and passed to exec_module() may
not be the one returned at the end of import [2].



Changed in version 3.4: The import system has taken over the boilerplate responsibilities of
loaders.  These were previously performed by the
 method.


5.4.1. Loaders¶
Module loaders provide the critical function of loading: module execution.
The import machinery calls the 
method with a single argument, the module object to execute.  Any value
returned from  is ignored.
Loaders must satisfy the following requirements:


If the module is a Python module (as opposed to a built-in module or a
dynamically loaded extension), the loader should execute the module’s code
in the module’s global name space ().
If the loader cannot execute the module, it should raise an
, although any other exception raised during
 will be propagated.


In many cases, the finder and loader can be the same object; in such cases the
 method would just return a
spec with the loader set to .
Module loaders may opt in to creating the module object during loading
by implementing a  method.
It takes one argument, the module spec, and returns the new module object
to use during loading.   does not need to set any attributes
on the module object.  If the method returns , the
import machinery will create the new module itself.

New in version 3.4: The  method of loaders.


Changed in version 3.4: The  method was replaced by
 and the import
machinery assumed all the boilerplate responsibilities of loading.
For compatibility with existing loaders, the import machinery will use
the  method of loaders if it exists and the loader does
not also implement .  However,  has been
deprecated and loaders should implement  instead.
The  method must implement all the boilerplate loading
functionality described above in addition to executing the module.  All
the same constraints apply, with some additional clarification:


If there is an existing module object with the given name in
, the loader must use that existing module.
(Otherwise,  will not work correctly.)  If the
named module does not exist in , the loader
must create a new module object and add it to .
The module must exist in  before the loader
executes the module code, to prevent unbounded recursion or multiple
loading.
If loading fails, the loader must remove any modules it has inserted
into , but it must remove only the failing
module(s), and only if the loader itself has loaded the module(s)
explicitly.




Changed in version 3.5: A  is raised when  is defined but
 is not.


Changed in version 3.6: An  is raised when  is defined but
 is not.



5.4.2. Submodules¶
When a submodule is loaded using any mechanism (e.g.  APIs, the
 or  statements, or built-in ) a
binding is placed in the parent module’s namespace to the submodule object.
For example, if package  has a submodule , after importing
,  will have an attribute  which is bound to the
submodule.  Let’s say you have the following directory structure:


and  has the following lines in it:


then executing the following puts a name binding to  and  in the
 module:


Given Python’s familiar name binding rules this might seem surprising, but
it’s actually a fundamental feature of the import system.  The invariant
holding is that if you have  and
 (as you would after the above import), the latter
must appear as the  attribute of the former.


5.4.3. Module spec¶
The import machinery uses a variety of information about each module
during import, especially before loading.  Most of the information is
common to all modules.  The purpose of a module’s spec is to encapsulate
this import-related information on a per-module basis.
Using a spec during import allows state to be transferred between import
system components, e.g. between the finder that creates the module spec
and the loader that executes it.  Most importantly, it allows the
import machinery to perform the boilerplate operations of loading,
whereas without a module spec the loader had that responsibility.
The module’s spec is exposed as the  attribute on a module object.
See  for details on the contents of
the module spec.

New in version 3.4.



5.4.4. Import-related module attributes¶
The import machinery fills in these attributes on each module object
during loading, based on the module’s spec, before the loader executes
the module.


¶
The  attribute must be set to the fully-qualified name of
the module.  This name is used to uniquely identify the module in
the import system.



¶
The  attribute must be set to the loader object that
the import machinery used when loading the module.  This is mostly
for introspection, but can be used for additional loader-specific
functionality, for example getting data associated with a loader.



¶
The module’s  attribute must be set.  Its value must
be a string, but it can be the same value as its .  When
the module is a package, its  value should be set to
its .  When the module is not a package, 
should be set to the empty string for top-level modules, or for
submodules, to the parent package’s name.  See PEP 366 for further
details.
This attribute is used instead of  to calculate explicit
relative imports for main modules, as defined in PEP 366. It is
expected to have the same value as .

Changed in version 3.6: The value of  is expected to be the same as
.




¶
The  attribute must be set to the module spec that was
used when importing the module. Setting 
appropriately applies equally to modules initialized during
interpreter startup.  The one exception is ,
where  is set to None in some cases.
When  is not defined,  is used as
a fallback.

New in version 3.4.


Changed in version 3.6:  is used as a fallback when  is
not defined.




¶
If the module is a package (either regular or namespace), the module
object’s  attribute must be set.  The value must be
iterable, but may be empty if  has no further significance.
If  is not empty, it must produce strings when iterated
over. More details on the semantics of  are given
below.
Non-package modules should not have a  attribute.



¶



¶
 is optional. If set, this attribute’s value must be a
string.  The import system may opt to leave  unset if it
has no semantic meaning (e.g. a module loaded from a database).
If  is set, it may also be appropriate to set the
 attribute which is the path to any compiled version of
the code (e.g. byte-compiled file). The file does not need to exist
to set this attribute; the path can simply point to where the
compiled file would exist (see PEP 3147).
It is also appropriate to set  when  is not
set.  However, that scenario is quite atypical.  Ultimately, the
loader is what makes use of  and/or .  So
if a loader can load from a cached module but otherwise does not load
from a file, that atypical scenario may be appropriate.



5.4.5. module.__path__¶
By definition, if a module has a  attribute, it is a package.
A package’s  attribute is used during imports of its subpackages.
Within the import machinery, it functions much the same as ,
i.e. providing a list of locations to search for modules during import.
However,  is typically much more constrained than
.
 must be an iterable of strings, but it may be empty.
The same rules used for  also apply to a package’s
, and  (described below) are
consulted when traversing a package’s .
A package’s  file may set or alter the package’s 
attribute, and this was typically the way namespace packages were implemented
prior to PEP 420.  With the adoption of PEP 420, namespace packages no
longer need to supply  files containing only 
manipulation code; the import machinery automatically sets 
correctly for the namespace package.


5.4.6. Module reprs¶
By default, all modules have a usable repr, however depending on the
attributes set above, and in the module’s spec, you can more explicitly
control the repr of module objects.
If the module has a spec (), the import machinery will try
to generate a repr from it.  If that fails or there is no spec, the import
system will craft a default repr using whatever information is available
on the module.  It will try to use the ,
, and  as input into the repr,
with defaults for whatever information is missing.
Here are the exact rules used:


If the module has a  attribute, the information in the spec
is used to generate the repr.  The “name”, “loader”, “origin”, and
“has_location” attributes are consulted.
If the module has a  attribute, this is used as part of the
module’s repr.
If the module has no  but does have a  that is not
, then the loader’s repr is used as part of the module’s repr.
Otherwise, just use the module’s  in the repr.



Changed in version 3.4: Use of 
has been deprecated and the module spec is now used by the import
machinery to generate a module repr.
For backward compatibility with Python 3.3, the module repr will be
generated by calling the loader’s
 method, if defined, before
trying either approach described above.  However, the method is deprecated.



5.4.7. Cached bytecode invalidation¶
Before Python loads cached bytecode from  file, it checks whether the
cache is up-to-date with the source  file. By default, Python does this
by storing the source’s last-modified timestamp and size in the cache file when
writing it. At runtime, the import system then validates the cache file by
checking the stored metadata in the cache file against at source’s
metadata.
Python also supports “hash-based” cache files, which store a hash of the source
file’s contents rather than its metadata. There are two variants of hash-based
 files: checked and unchecked. For checked hash-based  files,
Python validates the cache file by hashing the source file and comparing the
resulting hash with the hash in the cache file. If a checked hash-based cache
file is found to be invalid, Python regenerates it and writes a new checked
hash-based cache file. For unchecked hash-based  files, Python simply
assumes the cache file is valid if it exists. Hash-based  files
validation behavior may be overridden with the 
flag.

Changed in version 3.7: Added hash-based  files. Previously, Python only supported
timestamp-based invalidation of bytecode caches.




5.5. The Path Based Finder¶
As mentioned previously, Python comes with several default meta path finders.
One of these, called the path based finder
(), searches an import path,
which contains a list of path entries.  Each path
entry names a location to search for modules.
The path based finder itself doesn’t know how to import anything. Instead, it
traverses the individual path entries, associating each of them with a
path entry finder that knows how to handle that particular kind of path.
The default set of path entry finders implement all the semantics for finding
modules on the file system, handling special file types such as Python source
code ( files), Python byte code ( files) and
shared libraries (e.g.  files). When supported by the 
module in the standard library, the default path entry finders also handle
loading all of these file types (other than shared libraries) from zipfiles.
Path entries need not be limited to file system locations.  They can refer to
URLs, database queries, or any other location that can be specified as a
string.
The path based finder provides additional hooks and protocols so that you
can extend and customize the types of searchable path entries.  For example,
if you wanted to support path entries as network URLs, you could write a hook
that implements HTTP semantics to find modules on the web.  This hook (a
callable) would return a path entry finder supporting the protocol
described below, which was then used to get a loader for the module from the
web.
A word of warning: this section and the previous both use the term finder,
distinguishing between them by using the terms meta path finder and
path entry finder.  These two types of finders are very similar,
support similar protocols, and function in similar ways during the import
process, but it’s important to keep in mind that they are subtly different.
In particular, meta path finders operate at the beginning of the import
process, as keyed off the  traversal.
By contrast, path entry finders are in a sense an implementation detail
of the path based finder, and in fact, if the path based finder were to be
removed from , none of the path entry finder semantics
would be invoked.

5.5.1. Path entry finders¶
The path based finder is responsible for finding and loading
Python modules and packages whose location is specified with a string
path entry.  Most path entries name locations in the file system,
but they need not be limited to this.
As a meta path finder, the path based finder implements the
 protocol previously
described, however it exposes additional hooks that can be used to
customize how modules are found and loaded from the import path.
Three variables are used by the path based finder, ,
 and .  The 
attributes on package objects are also used.  These provide additional ways
that the import machinery can be customized.
 contains a list of strings providing search locations for
modules and packages.  It is initialized from the 
environment variable and various other installation- and
implementation-specific defaults.  Entries in  can name
directories on the file system, zip files, and potentially other “locations”
(see the  module) that should be searched for modules, such as
URLs, or database queries.  Only strings and bytes should be present on
; all other data types are ignored.  The encoding of bytes
entries is determined by the individual path entry finders.
The path based finder is a meta path finder, so the import
machinery begins the import path search by calling the path
based finder’s  method as
described previously.  When the  argument to
 is given, it will be a
list of string paths to traverse - typically a package’s 
attribute for an import within that package.  If the  argument is
, this indicates a top level import and  is used.
The path based finder iterates over every entry in the search path, and
for each of these, looks for an appropriate path entry finder
() for the
path entry.  Because this can be an expensive operation (e.g. there may be
stat() call overheads for this search), the path based finder maintains
a cache mapping path entries to path entry finders.  This cache is maintained
in  (despite the name, this cache actually
stores finder objects rather than being limited to importer objects).
In this way, the expensive search for a particular path entry
location’s path entry finder need only be done once.  User code is
free to remove cache entries from  forcing
the path based finder to perform the path entry search again [3].
If the path entry is not present in the cache, the path based finder iterates
over every callable in .  Each of the path entry
hooks in this list is called with a single argument, the
path entry to be searched.  This callable may either return a path
entry finder that can handle the path entry, or it may raise
.  An  is used by the path based finder to
signal that the hook cannot find a path entry finder
for that path entry.  The
exception is ignored and import path iteration continues.  The hook
should expect either a string or bytes object; the encoding of bytes objects
is up to the hook (e.g. it may be a file system encoding, UTF-8, or something
else), and if the hook cannot decode the argument, it should raise
.
If  iteration ends with no path entry finder
being returned, then the path based finder’s
 method will store 
in  (to indicate that there is no finder for
this path entry) and return , indicating that this
meta path finder could not find the module.
If a path entry finder is returned by one of the path entry
hook callables on , then the following protocol is used
to ask the finder for a module spec, which is then used when loading the
module.
The current working directory – denoted by an empty string – is handled
slightly differently from other entries on . First, if the
current working directory is found to not exist, no value is stored in
. Second, the value for the current working
directory is looked up fresh for each module lookup. Third, the path used for
 and returned by
 will be the actual current
working directory and not the empty string.


5.5.2. Path entry finder protocol¶
In order to support imports of modules and initialized packages and also to
contribute portions to namespace packages, path entry finders must implement
the  method.
 takes two argument, the
fully qualified name of the module being imported, and the (optional) target
module.   returns a fully populated spec for the module.
This spec will always have “loader” set (with one exception).
To indicate to the import machinery that the spec represents a namespace
portion. the path entry finder sets “loader” on the spec to
 and “submodule_search_locations” to a list containing the
portion.

Changed in version 3.4:  replaced
 and
, both of which
are now deprecated, but will be used if  is not defined.
Older path entry finders may implement one of these two deprecated methods
instead of .  The methods are still respected for the
sake of backward compatibility.  However, if  is
implemented on the path entry finder, the legacy methods are ignored.
 takes one argument, the
fully qualified name of the module being imported.  
returns a 2-tuple where the first item is the loader and the second item
is a namespace portion.  When the first item (i.e. the loader) is
, this means that while the path entry finder does not have a
loader for the named module, it knows that the path entry contributes to
a namespace portion for the named module.  This will almost always be the
case where Python is asked to import a namespace package that has no
physical presence on the file system.  When a path entry finder returns
 for the loader, the second item of the 2-tuple return value must
be a sequence, although it can be empty.
If  returns a non- loader value, the portion is
ignored and the loader is returned from the path based finder, terminating
the search through the path entries.
For backwards compatibility with other implementations of the import
protocol, many path entry finders also support the same,
traditional  method that meta path finders support.
However path entry finder  methods are never called
with a  argument (they are expected to record the appropriate
path information from the initial call to the path hook).
The  method on path entry finders is deprecated,
as it does not allow the path entry finder to contribute portions to
namespace packages.  If both  and 
exist on a path entry finder, the import system will always call
 in preference to .




5.6. Replacing the standard import system¶
The most reliable mechanism for replacing the entire import system is to
delete the default contents of , replacing them
entirely with a custom meta path hook.
If it is acceptable to only alter the behaviour of import statements
without affecting other APIs that access the import system, then replacing
the builtin  function may be sufficient. This technique
may also be employed at the module level to only alter the behaviour of
import statements within that module.
To selectively prevent import of some modules from a hook early on the
meta path (rather than disabling the standard import system entirely),
it is sufficient to raise  directly from
 instead of returning
. The latter indicates that the meta path search should continue,
while raising an exception terminates it immediately.


5.7. Package Relative Imports¶
Relative imports use leading dots. A single leading dot indicates a relative
import, starting with the current package. Two or more leading dots indicate a
relative import to the parent(s) of the current package, one level per dot
after the first. For example, given the following package layout:


In either  or ,
the following are valid relative imports:


Absolute imports may use either the  or 
syntax, but relative imports may only use the second form; the reason
for this is that:


should expose  as a usable expression, but .moduleY is
not a valid expression.


5.8. Special considerations for __main__¶
The  module is a special case relative to Python’s import
system.  As noted elsewhere, the  module
is directly initialized at interpreter startup, much like  and
.  However, unlike those two, it doesn’t strictly
qualify as a built-in module.  This is because the manner in which
 is initialized depends on the flags and other options with
which the interpreter is invoked.

5.8.1. __main__.__spec__¶
Depending on how  is initialized, 
gets set appropriately or to .
When Python is started with the  option,  is set
to the module spec of the corresponding module or package.  is
also populated when the  module is loaded as part of executing a
directory, zipfile or other  entry.
In the remaining cases
 is set to , as the code used to populate the
 does not correspond directly with an importable module:

interactive prompt
 option
running from stdin
running directly from a source or bytecode file

Note that  is always  in the last case,
even if the file could technically be imported directly as a module
instead. Use the  switch if valid module metadata is desired
in .
Note also that even when  corresponds with an importable module
and  is set accordingly, they’re still considered
distinct modules. This is due to the fact that blocks guarded by
 checks only execute when the module is used
to populate the  namespace, and not during normal import.



5.9. Open issues¶
XXX It would be really nice to have a diagram.
XXX * (import_machinery.rst) how about a section devoted just to the
attributes of modules and packages, perhaps expanding upon or supplanting the
related entries in the data model reference page?
XXX runpy, pkgutil, et al in the library manual should all get “See Also”
links at the top pointing to the new import system section.
XXX Add more explanation regarding the different ways in which
 is initialized?
XXX Add more info on  quirks/pitfalls (i.e. copy from
PEP 395).


5.10. References¶
The import machinery has evolved considerably since Python’s early days.  The
original specification for packages is still available to read,
although some details have changed since the writing of that document.
The original specification for  was PEP 302, with
subsequent extension in PEP 420.
PEP 420 introduced namespace packages for
Python 3.3.  PEP 420 also introduced the  protocol as an
alternative to .
PEP 366 describes the addition of the  attribute for
explicit relative imports in main modules.
PEP 328 introduced absolute and explicit relative imports and initially
proposed  for semantics PEP 366 would eventually specify for
.
PEP 338 defines executing modules as scripts.
PEP 451 adds the encapsulation of per-module import state in spec
objects.  It also off-loads most of the boilerplate responsibilities of
loaders back onto the import machinery.  These changes allow the
deprecation of several APIs in the import system and also addition of new
methods to finders and loaders.
Footnotes



[1]See .





[2]The importlib implementation avoids using the return value
directly. Instead, it gets the module object by looking the module name up
in .  The indirect effect of this is that an imported
module may replace itself in .  This is
implementation-specific behavior that is not guaranteed to work in other
Python implementations.





[3]In legacy code, it is possible to find instances of
 in the .  It
is recommended that code be changed to use  instead.  See
Porting Python code for more details.



