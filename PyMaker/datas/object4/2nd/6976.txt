link:
library/nntplib.html#nntp-objects

docs:

NNTP Objects¶
When connected,  and  objects support the
following methods and attributes.

Attributes¶


¶
An integer representing the version of the NNTP protocol supported by the
server.  In practice, this should be  for servers advertising
RFC 3977 compliance and  for others.

New in version 3.2.




¶
A string describing the software name and version of the NNTP server,
or  if not advertised by the server.

New in version 3.2.




Methods¶
The response that is returned as the first item in the return tuple of almost
all methods is the server’s response: a string beginning with a three-digit
code.  If the server’s response indicates an error, the method raises one of
the above exceptions.
Many of the following methods take an optional keyword-only argument file.
When the file argument is supplied, it must be either a file object
opened for binary writing, or the name of an on-disk file to be written to.
The method will then write any data returned by the server (except for the
response line and the terminating dot) to the file; any list of lines,
tuples or objects that the method normally returns will be empty.

Changed in version 3.2: Many of the following methods have been reworked and fixed, which makes
them incompatible with their 3.1 counterparts.



()¶
Send a  command and close the connection.  Once this method has been
called, no other methods of the NNTP object should be called.



()¶
Return the welcome message sent by the server in reply to the initial
connection.  (This message sometimes contains disclaimers or help information
that may be relevant to the user.)



()¶
Return the RFC 3977 capabilities advertised by the server, as a
 instance mapping capability names to (possibly empty) lists
of values. On legacy servers which don’t understand the 
command, an empty dictionary is returned instead.



New in version 3.2.




(user=None, password=None, usenetrc=True)¶
Send  commands with the user name and password.  If user
and password are  and usenetrc is true, credentials from
 will be used if possible.
Unless intentionally delayed, login is normally performed during the
 object initialization and separately calling this function
is unnecessary.  To force authentication to be delayed, you must not set
user or password when creating the object, and must set usenetrc to
False.

New in version 3.2.




(context=None)¶
Send a  command.  This will enable encryption on the NNTP
connection.  The context argument is optional and should be a
 object.  Please read Security considerations for best
practices.
Note that this may not be done after authentication information has
been transmitted, and authentication occurs by default if possible during a
 object initialization.  See  for information
on suppressing this behavior.

New in version 3.2.


Changed in version 3.4: The method now supports hostname check with
 and Server Name Indication (see
).




(date, *, file=None)¶
Send a  command.  The date argument should be a
 or  object.
Return a pair  where groups is a list representing
the groups that are new since the given date. If file is supplied,
though, then groups will be empty.





(group, date, *, file=None)¶
Send a  command.  Here, group is a group name or , and
date has the same meaning as for .  Return a pair
 where articles is a list of message ids.
This command is frequently disabled by NNTP server administrators.



(group_pattern=None, *, file=None)¶
Send a  or  command.  Return a pair
 where list is a list of tuples representing all
the groups available from this NNTP server, optionally matching the
pattern string group_pattern.  Each tuple has the form
, where group is a group name, last
and first are the last and first article numbers, and flag usually
takes one of these values:

: Local postings and articles from peers are allowed.
: The group is moderated and all postings must be approved.
: No local postings are allowed, only articles from peers.
: Articles from peers are filed in the junk group instead.
: No local postings, and articles from peers are ignored.
: Articles are filed in the  group instead.

If flag has another value, then the status of the newsgroup should be
considered unknown.
This command can return very large results, especially if group_pattern
is not specified.  It is best to cache the results offline unless you
really need to refresh them.

Changed in version 3.2: group_pattern was added.




(grouppattern)¶
Send a  command, where grouppattern is a wildmat string as
specified in RFC 3977 (it’s essentially the same as DOS or UNIX shell wildcard
strings).  Return a pair , where descriptions
is a dictionary mapping group names to textual descriptions.





(group)¶
Get a description for a single group group.  If more than one group matches
(if ‘group’ is a real wildmat string), return the first match.   If no group
matches, return an empty string.
This elides the response code from the server.  If the response code is needed,
use .



(name)¶
Send a  command, where name is the group name.  The group is
selected as the current group, if it exists.  Return a tuple
 where count is the (estimated)
number of articles in the group, first is the first article number in
the group, last is the last article number in the group, and name
is the group name.



(message_spec, *, file=None)¶
Send an  command, or an  command on legacy servers.
message_spec can be either a string representing a message id, or
a  tuple of numbers indicating a range of articles in
the current group, or a  tuple indicating a range of
articles starting from first to the last article in the current group,
or  to select the current article in the current group.
Return a pair .  overviews is a list of
 tuples, one for each article selected
by message_spec.  Each overview is a dictionary with the same number
of items, but this number depends on the server.  These items are either
message headers (the key is then the lower-cased header name) or metadata
items (the key is then the metadata name prepended with ).  The
following items are guaranteed to be present by the NNTP specification:

the , , ,  and 
headers
the  metadata: the number of bytes in the entire raw article
(including headers and body)
the  metadata: the number of lines in the article body

The value of each item is either a string, or  if not present.
It is advisable to use the  function on header
values when they may contain non-ASCII characters:



New in version 3.2.




(*, file=None)¶
Send a  command.  Return a pair  where list is a
list of help strings.



(message_spec=None)¶
Send a  command, where message_spec is either a message id
(enclosed in  and ) or an article number in the current group.
If message_spec is omitted or , the current article in the
current group is considered.  Return a triple 
where number is the article number and id is the message id.





()¶
Send a  command.  Return as for .



()¶
Send a  command.  Return as for .



(message_spec=None, *, file=None)¶
Send an  command, where message_spec has the same meaning as
for .  Return a tuple  where info
is a  with three attributes number,
message_id and lines (in that order).  number is the article number
in the group (or 0 if the information is not available), message_id the
message id as a string, and lines a list of lines (without terminating
newlines) comprising the raw message including headers and body.





(message_spec=None, *, file=None)¶
Same as , but sends a  command.  The lines
returned (or written to file) will only contain the message headers, not
the body.



(message_spec=None, *, file=None)¶
Same as , but sends a  command.  The lines
returned (or written to file) will only contain the message body, not the
headers.



(data)¶
Post an article using the  command.  The data argument is either
a file object opened for binary reading, or any iterable of bytes
objects (representing raw lines of the article to be posted).  It should
represent a well-formed news article, including the required headers.  The
 method automatically escapes lines beginning with  and
appends the termination line.
If the method succeeds, the server’s response is returned.  If the server
refuses posting, a  is raised.



(message_id, data)¶
Send an  command. message_id is the id of the message to send
to the server (enclosed in   and ).  The data parameter
and the return value are the same as for .



()¶
Return a pair .  date is a 
object containing the current date and time of the server.



()¶
Send a  command.  Return the server’s response.



(level)¶
Set the instance’s debugging level.  This controls the amount of debugging
output printed.  The default, , produces no debugging output.  A value of
 produces a moderate amount of debugging output, generally a single line
per request or response.  A value of  or higher produces the maximum amount
of debugging output, logging each line sent and received on the connection
(including message text).

The following are optional NNTP extensions defined in RFC 2980.  Some of
them have been superseded by newer commands in RFC 3977.


(hdr, str, *, file=None)¶
Send an  command.  The hdr argument is a header keyword, e.g.
.  The str argument should have the form 
where first and last are the first and last article numbers to search.
Return a pair , where list is a list of pairs , where id is an article number (as a string) and text is the text of
the requested header for that article. If the file parameter is supplied, then
the output of the   command is stored in a file.  If file is a string,
then the method will open a file with that name, write to it  then close it.
If file is a file object, then it will start calling  on
it to store the lines of the command output. If file is supplied, then the
returned list is an empty list.



(start, end, *, file=None)¶
Send an  command.  start and end are article numbers
delimiting the range of articles to select.  The return value is the
same of for .  It is recommended to use 
instead, since it will automatically use the newer  command
if available.



(id)¶
Return a pair , where path is the directory path to the
article with message ID id.  Most of the time, this extension is not
enabled by NNTP server administrators.

Deprecated since version 3.3: The XPATH extension is not actively used.



