link:
library/unittest.mock.html#where-to-patch

docs:

Where to patchÂ¶
 works by (temporarily) changing the object that a name points to with
another one. There can be many names pointing to any individual object, so
for patching to work you must ensure that you patch the name used by the system
under test.
The basic principle is that you patch where an object is looked up, which
is not necessarily the same place as where it is defined. A couple of
examples will help to clarify this.
Imagine we have a project that we want to test with the following structure:


Now we want to test  but we want to mock out  using
. The problem is that when we import module b, which we will have to
do then it imports  from module a. If we use  to mock out
 then it will have no effect on our test; module b already has a
reference to the real  and it looks like our patching had no
effect.
The key is to patch out  where it is used (or where it is looked up).
In this case  will actually look up  in module b,
where we have imported it. The patching should look like:


However, consider the alternative scenario where instead of  module b does  and  uses . Both
of these import forms are common. In this case the class we want to patch is
being looked up in the module and so we have to patch  instead:


