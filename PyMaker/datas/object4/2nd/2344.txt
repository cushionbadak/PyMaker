link:
library/shelve.html#module-shelve

docs:

 — Python object persistence¶
Source code: Lib/shelve.py

A “shelf” is a persistent, dictionary-like object.  The difference with “dbm”
databases is that the values (not the keys!) in a shelf can be essentially
arbitrary Python objects — anything that the  module can handle.
This includes most class instances, recursive data types, and objects containing
lots of shared  sub-objects.  The keys are ordinary strings.


(filename, flag='c', protocol=None, writeback=False)¶
Open a persistent dictionary.  The filename specified is the base filename for
the underlying database.  As a side-effect, an extension may be added to the
filename and more than one file may be created.  By default, the underlying
database file is opened for reading and writing.  The optional flag parameter
has the same interpretation as the flag parameter of .
By default, version 3 pickles are used to serialize values.  The version of the
pickle protocol can be specified with the protocol parameter.
Because of Python semantics, a shelf cannot know when a mutable
persistent-dictionary entry is modified.  By default modified objects are
written only when assigned to the shelf (see Example).  If the
optional writeback parameter is set to , all entries accessed are also
cached in memory, and written back on  and
; this can make it handier to mutate mutable entries in
the persistent dictionary, but, if many entries are accessed, it can consume
vast amounts of memory for the cache, and it can make the close operation
very slow since all accessed entries are written back (there is no way to
determine which accessed entries are mutable, nor which ones were actually
mutated).

Note
Do not rely on the shelf being closed automatically; always call
 explicitly when you don’t need it any more, or
use  as a context manager:





Warning
Because the  module is backed by , it is insecure
to load a shelf from an untrusted source.  Like with pickle, loading a shelf
can execute arbitrary code.

Shelf objects support all methods supported by dictionaries.  This eases the
transition from dictionary based scripts to those requiring persistent storage.
Two additional methods are supported:


()¶
Write back all entries in the cache if the shelf was opened with writeback
set to .  Also empty the cache and synchronize the persistent
dictionary on disk, if feasible.  This is called automatically when the shelf
is closed with .



()¶
Synchronize and close the persistent dict object.  Operations on a closed
shelf will fail with a .


See also
Persistent dictionary recipe
with widely supported storage formats and having the speed of native
dictionaries.


Restrictions¶



The choice of which database package will be used (such as  or
) depends on which interface is available.  Therefore it is not
safe to open the database directly using .  The database is also
(unfortunately) subject to the limitations of , if it is used —
this means that (the pickled representation of) the objects stored in the
database should be fairly small, and in rare cases key collisions may cause
the database to refuse updates.
The  module does not support concurrent read/write access to
shelved objects.  (Multiple simultaneous read accesses are safe.)  When a
program has a shelf open for writing, no other program should have it open for
reading or writing.  Unix file locking can be used to solve this, but this
differs across Unix versions and requires knowledge about the database
implementation used.



class (dict, protocol=None, writeback=False, keyencoding='utf-8')¶
A subclass of  which stores pickled
values in the dict object.
By default, version 3 pickles are used to serialize values.  The version of the
pickle protocol can be specified with the protocol parameter. See the
 documentation for a discussion of the pickle protocols.
If the writeback parameter is , the object will hold a cache of all
entries accessed and write them back to the dict at sync and close times.
This allows natural operations on mutable entries, but can consume much more
memory and make sync and close take a long time.
The keyencoding parameter is the encoding used to encode keys before they
are used with the underlying dict.
A  object can also be used as a context manager, in which
case it will be automatically closed when the  block ends.

Changed in version 3.2: Added the keyencoding parameter; previously, keys were always encoded in
UTF-8.


Changed in version 3.4: Added context manager support.




class (dict, protocol=None, writeback=False, keyencoding='utf-8')¶
A subclass of  which exposes , ,
,  and  which are available
in the third-party  module from pybsddb but not in other database
modules.  The dict object passed to the constructor must support those
methods.  This is generally accomplished by calling one of
,  or .  The
optional protocol, writeback, and keyencoding parameters have the same
interpretation as for the  class.



class (filename, flag='c', protocol=None, writeback=False)¶
A subclass of  which accepts a filename instead of a dict-like
object.  The underlying file will be opened using .  By
default, the file will be created and opened for both read and write.  The
optional flag parameter has the same interpretation as for the 
function.  The optional protocol and writeback parameters have the same
interpretation as for the  class.



Example¶
To summarize the interface ( is a string,  is an arbitrary
object):



See also

Module 
Generic interface to -style databases.
Module 
Object serialization used by .



