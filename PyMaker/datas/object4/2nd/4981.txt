link:
library/asyncio-api-index.html#high-level-api-index

docs:

High-level API Index¶
This page lists all high-level async/await enabled asyncio APIs.

Tasks¶
Utilities to run asyncio programs, create Tasks, and
await on multiple things with timeouts.







Create event loop, run a coroutine, close the loop.


Start an asyncio Task.

 
Sleep for a number of seconds.

 
Schedule and wait for things concurrently.

 
Run with a timeout.

 
Shield from cancellation.

 
Monitor for completion.


Return the current Task.


Return all tasks for an event loop.


Task object.


Schedule a coroutine from another OS thread.

 
Monitor for completion with a  loop.



Examples

Using asyncio.gather() to run things in parallel.
Using asyncio.wait_for() to enforce a timeout.
Cancellation.
Using asyncio.sleep().
See also the main Tasks documentation page.



Queues¶
Queues should be used to distribute work amongst multiple asyncio Tasks,
implement connection pools, and pub/sub patterns.







A FIFO queue.


A priority queue.


A LIFO queue.



Examples

Using asyncio.Queue to distribute workload between several
Tasks.
See also the Queues documentation page.



Subprocesses¶
Utilities to spawn subprocesses and run shell commands.






 
Create a subprocess.

 
Run a shell command.



Examples

Executing a shell command.
See also the subprocess APIs
documentation.



Streams¶
High-level APIs to work with network IO.






 
Establish a TCP connection.

 
Establish a Unix socket connection.

 
Start a TCP server.

 
Start a Unix socket server.


High-level async/await object to receive network data.


High-level async/await object to send network data.



Examples

Example TCP client.
See also the streams APIs
documentation.



Synchronization¶
Threading-like synchronization primitives that can be used in Tasks.







A mutex lock.


An event object.


A condition object.


A semaphore.


A bounded semaphore.



Examples

Using asyncio.Event.
See also the documentation of asyncio
synchronization primitives.



Exceptions¶







Raised on timeout by functions like .
Keep in mind that  is unrelated
to the built-in  exception.


Raised when a Task is cancelled. See also .



Examples

Handling CancelledError to run code on cancellation request.
See also the full list of
asyncio-specific exceptions.


