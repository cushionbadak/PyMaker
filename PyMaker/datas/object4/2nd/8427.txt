link:
library/unittest.html#test-discovery

docs:

Test Discovery¶

New in version 3.2.

Unittest supports simple test discovery. In order to be compatible with test
discovery, all of the test files must be modules or
packages (including namespace packages) importable from the top-level directory of
the project (this means that their filenames must be valid identifiers).
Test discovery is implemented in , but can also be
used from the command line. The basic command-line usage is:



Note
As a shortcut,  is the equivalent of
. If you want to pass arguments to test
discovery the  sub-command must be used explicitly.

The  sub-command has the following options:


¶
Verbose output



¶
Directory to start discovery ( default)



¶
Pattern to match test files ( default)



¶
Top level directory of project (defaults to start directory)

The , , and  options can be passed in
as positional arguments in that order. The following two command lines
are equivalent:


As well as being a path it is possible to pass a package name, for example
, as the start directory. The package name you
supply will then be imported and its location on the filesystem will be used
as the start directory.

Caution
Test discovery loads tests by importing them. Once test discovery has found
all the test files from the start directory you specify it turns the paths
into package names to import. For example  will be
imported as .
If you have a package installed globally and attempt test discovery on
a different copy of the package then the import could happen from the
wrong place. If this happens test discovery will warn you and exit.
If you supply the start directory as a package name rather than a
path to a directory then discover assumes that whichever location it
imports from is the location you intended, so you will not get the
warning.

Test modules and packages can customize test loading and discovery by through
the load_tests protocol.

Changed in version 3.4: Test discovery supports namespace packages.

