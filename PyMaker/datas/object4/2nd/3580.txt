link:
library/logging.handlers.html

docs:


 — Logging handlers¶
Source code: Lib/logging/handlers.py

Important
This page contains only reference information. For tutorials,
please see

Basic Tutorial
Advanced Tutorial
Logging Cookbook



The following useful handlers are provided in the package. Note that three of
the handlers (,  and
) are actually defined in the  module itself,
but have been documented here along with the other handlers.

StreamHandler¶
The  class, located in the core  package,
sends logging output to streams such as sys.stdout, sys.stderr or any
file-like object (or, more precisely, any object which supports 
and  methods).


class (stream=None)¶
Returns a new instance of the  class. If stream is
specified, the instance will use it for logging output; otherwise, sys.stderr
will be used.


(record)¶
If a formatter is specified, it is used to format the record. The record
is then written to the stream with a terminator. If exception information
is present, it is formatted using  and
appended to the stream.



()¶
Flushes the stream by calling its  method. Note that the
 method is inherited from  and so
does no output, so an explicit  call may be needed at times.



(stream)¶
Sets the instance’s stream to the specified value, if it is different.
The old stream is flushed before the new stream is set.




Parameters:stream – The stream that the handler should use.

Returns:the old stream, if the stream was changed, or None if it wasn’t.





New in version 3.7.



Changed in version 3.2: The  class now has a  attribute, default
value , which is used as the terminator when writing a formatted
record to a stream. If you don’t want this newline termination, you can
set the handler instance’s  attribute to the empty string.
In earlier versions, the terminator was hardcoded as .



FileHandler¶
The  class, located in the core  package,
sends logging output to a disk file.  It inherits the output functionality from
.


class (filename, mode='a', encoding=None, delay=False)¶
Returns a new instance of the  class. The specified file is
opened and used as the stream for logging. If mode is not specified,
 is used.  If encoding is not , it is used to open the file
with that encoding.  If delay is true, then file opening is deferred until the
first call to . By default, the file grows indefinitely.

Changed in version 3.6: As well as string values,  objects are also accepted
for the filename argument.



()¶
Closes the file.



(record)¶
Outputs the record to the file.




NullHandler¶

New in version 3.1.

The  class, located in the core  package,
does not do any formatting or output. It is essentially a ‘no-op’ handler
for use by library developers.


class ¶
Returns a new instance of the  class.


(record)¶
This method does nothing.



(record)¶
This method does nothing.



()¶
This method returns  for the lock, since there is no
underlying I/O to which access needs to be serialized.


See Configuring Logging for a Library for more information on how to use
.


WatchedFileHandler¶
The  class, located in the 
module, is a  which watches the file it is logging to. If
the file changes, it is closed and reopened using the file name.
A file change can happen because of usage of programs such as newsyslog and
logrotate which perform log file rotation. This handler, intended for use
under Unix/Linux, watches the file to see if it has changed since the last emit.
(A file is deemed to have changed if its device or inode have changed.) If the
file has changed, the old file stream is closed, and the file opened to get a
new stream.
This handler is not appropriate for use under Windows, because under Windows
open log files cannot be moved or renamed - logging opens the files with
exclusive locks - and so there is no need for such a handler. Furthermore,
ST_INO is not supported under Windows;  always returns zero
for this value.


class (filename, mode='a', encoding=None, delay=False)¶
Returns a new instance of the  class. The specified
file is opened and used as the stream for logging. If mode is not specified,
 is used.  If encoding is not , it is used to open the file
with that encoding.  If delay is true, then file opening is deferred until the
first call to .  By default, the file grows indefinitely.

Changed in version 3.6: As well as string values,  objects are also accepted
for the filename argument.



()¶
Checks to see if the file has changed.  If it has, the existing stream is
flushed and closed and the file opened again, typically as a precursor to
outputting the record to the file.

New in version 3.6.




(record)¶
Outputs the record to the file, but first calls  to
reopen the file if it has changed.




BaseRotatingHandler¶
The  class, located in the 
module, is the base class for the rotating file handlers,
 and . You should
not need to instantiate this class, but it has attributes and methods you may
need to override.


class (filename, mode, encoding=None, delay=False)¶
The parameters are as for . The attributes are:


¶
If this attribute is set to a callable, the 
method delegates to this callable. The parameters passed to the callable
are those passed to .

Note
The namer function is called quite a few times during rollover,
so it should be as simple and as fast as possible. It should also
return the same output every time for a given input, otherwise the
rollover behaviour may not work as expected.


New in version 3.3.




¶
If this attribute is set to a callable, the  method
delegates to this callable.  The parameters passed to the callable are
those passed to .

New in version 3.3.




(default_name)¶
Modify the filename of a log file when rotating.
This is provided so that a custom filename can be provided.
The default implementation calls the ‘namer’ attribute of the handler,
if it’s callable, passing the default name to it. If the attribute isn’t
callable (the default is ), the name is returned unchanged.




Parameters:default_name – The default name for the log file.




New in version 3.3.




(source, dest)¶
When rotating, rotate the current log.
The default implementation calls the ‘rotator’ attribute of the handler,
if it’s callable, passing the source and dest arguments to it. If the
attribute isn’t callable (the default is ), the source is simply
renamed to the destination.




Parameters:
source – The source filename. This is normally the base
filename, e.g. ‘test.log’.
dest – The destination filename. This is normally
what the source is rotated to, e.g. ‘test.log.1’.






New in version 3.3.



The reason the attributes exist is to save you having to subclass - you can use
the same callables for instances of  and
. If either the namer or rotator callable
raises an exception, this will be handled in the same way as any other
exception during an  call, i.e. via the  method
of the handler.
If you need to make more significant changes to rotation processing, you can
override the methods.
For an example, see Using a rotator and namer to customize log rotation processing.


RotatingFileHandler¶
The  class, located in the 
module, supports rotation of disk log files.


class (filename, mode='a', maxBytes=0, backupCount=0, encoding=None, delay=False)¶
Returns a new instance of the  class. The specified
file is opened and used as the stream for logging. If mode is not specified,
 is used.  If encoding is not , it is used to open the file
with that encoding.  If delay is true, then file opening is deferred until the
first call to .  By default, the file grows indefinitely.
You can use the maxBytes and backupCount values to allow the file to
rollover at a predetermined size. When the size is about to be exceeded,
the file is closed and a new file is silently opened for output. Rollover occurs
whenever the current log file is nearly maxBytes in length; but if either of
maxBytes or backupCount is zero, rollover never occurs, so you generally want
to set backupCount to at least 1, and have a non-zero maxBytes.
When backupCount is non-zero, the system will save old log files by appending
the extensions ‘.1’, ‘.2’ etc., to the filename. For example, with a backupCount
of 5 and a base file name of , you would get ,
, , up to . The file being
written to is always .  When this file is filled, it is closed
and renamed to , and if files ,
, etc. exist, then they are renamed to ,
 etc. respectively.

Changed in version 3.6: As well as string values,  objects are also accepted
for the filename argument.



()¶
Does a rollover, as described above.



(record)¶
Outputs the record to the file, catering for rollover as described
previously.




TimedRotatingFileHandler¶
The  class, located in the
 module, supports rotation of disk log files at certain
timed intervals.


class (filename, when='h', interval=1, backupCount=0, encoding=None, delay=False, utc=False, atTime=None)¶
Returns a new instance of the  class. The
specified file is opened and used as the stream for logging. On rotating it also
sets the filename suffix. Rotating happens based on the product of when and
interval.
You can use the when to specify the type of interval. The list of possible
values is below.  Note that they are not case sensitive.







Value
Type of interval
If/how atTime is used




Seconds
Ignored


Minutes
Ignored


Hours
Ignored


Days
Ignored


Weekday (0=Monday)
Used to compute initial
rollover time


Roll over at midnight, if
atTime not specified,
else at time atTime
Used to compute initial
rollover time



When using weekday-based rotation, specify ‘W0’ for Monday, ‘W1’ for
Tuesday, and so on up to ‘W6’ for Sunday. In this case, the value passed for
interval isn’t used.
The system will save old log files by appending extensions to the filename.
The extensions are date-and-time based, using the strftime format
 or a leading portion thereof, depending on the
rollover interval.
When computing the next rollover time for the first time (when the handler
is created), the last modification time of an existing log file, or else
the current time, is used to compute when the next rotation will occur.
If the utc argument is true, times in UTC will be used; otherwise
local time is used.
If backupCount is nonzero, at most backupCount files
will be kept, and if more would be created when rollover occurs, the oldest
one is deleted. The deletion logic uses the interval to determine which
files to delete, so changing the interval may leave old files lying around.
If delay is true, then file opening is deferred until the first call to
.
If atTime is not , it must be a  instance which
specifies the time of day when rollover occurs, for the cases where rollover
is set to happen “at midnight” or “on a particular weekday”. Note that in
these cases, the atTime value is effectively used to compute the initial
rollover, and subsequent rollovers would be calculated via the normal
interval calculation.

Note
Calculation of the initial rollover time is done when the handler
is initialised. Calculation of subsequent rollover times is done only
when rollover occurs, and rollover occurs only when emitting output. If
this is not kept in mind, it might lead to some confusion. For example,
if an interval of “every minute” is set, that does not mean you will
always see log files with times (in the filename) separated by a minute;
if, during application execution, logging output is generated more
frequently than once a minute, then you can expect to see log files
with times separated by a minute. If, on the other hand, logging messages
are only output once every five minutes (say), then there will be gaps in
the file times corresponding to the minutes where no output (and hence no
rollover) occurred.


Changed in version 3.4: atTime parameter was added.


Changed in version 3.6: As well as string values,  objects are also accepted
for the filename argument.



()¶
Does a rollover, as described above.



(record)¶
Outputs the record to the file, catering for rollover as described above.




SocketHandler¶
The  class, located in the  module,
sends logging output to a network socket. The base class uses a TCP socket.


class (host, port)¶
Returns a new instance of the  class intended to
communicate with a remote machine whose address is given by host and port.

Changed in version 3.4: If  is specified as , a Unix domain socket is created
using the value in  - otherwise, a TCP socket is created.



()¶
Closes the socket.



()¶
Pickles the record’s attribute dictionary and writes it to the socket in
binary format. If there is an error with the socket, silently drops the
packet. If the connection was previously lost, re-establishes the
connection. To unpickle the record at the receiving end into a
, use the 
function.



()¶
Handles an error which has occurred during . The most likely
cause is a lost connection. Closes the socket so that we can retry on the
next event.



()¶
This is a factory method which allows subclasses to define the precise
type of socket they want. The default implementation creates a TCP socket
().



(record)¶
Pickles the record’s attribute dictionary in binary format with a length
prefix, and returns it ready for transmission across the socket.
Note that pickles aren’t completely secure. If you are concerned about
security, you may want to override this method to implement a more secure
mechanism. For example, you can sign pickles using HMAC and then verify
them on the receiving end, or alternatively you can disable unpickling of
global objects on the receiving end.



(packet)¶
Send a pickled string packet to the socket. This function allows for
partial sends which can happen when the network is busy.



()¶
Tries to create a socket; on failure, uses an exponential back-off
algorithm.  On initial failure, the handler will drop the message it was
trying to send.  When subsequent messages are handled by the same
instance, it will not try connecting until some time has passed.  The
default parameters are such that the initial delay is one second, and if
after that delay the connection still can’t be made, the handler will
double the delay each time up to a maximum of 30 seconds.
This behaviour is controlled by the following handler attributes:

 (initial delay, defaulting to 1.0 seconds).
 (multiplier, defaulting to 2.0).
 (maximum delay, defaulting to 30.0 seconds).

This means that if the remote listener starts up after the handler has
been used, you could lose messages (since the handler won’t even attempt
a connection until the delay has elapsed, but just silently drop messages
during the delay period).




DatagramHandler¶
The  class, located in the 
module, inherits from  to support sending logging messages
over UDP sockets.


class (host, port)¶
Returns a new instance of the  class intended to
communicate with a remote machine whose address is given by host and port.

Changed in version 3.4: If  is specified as , a Unix domain socket is created
using the value in  - otherwise, a UDP socket is created.



()¶
Pickles the record’s attribute dictionary and writes it to the socket in
binary format. If there is an error with the socket, silently drops the
packet. To unpickle the record at the receiving end into a
, use the 
function.



()¶
The factory method of  is here overridden to create
a UDP socket ().



(s)¶
Send a pickled string to a socket.




SysLogHandler¶
The  class, located in the  module,
supports sending logging messages to a remote or local Unix syslog.


class (address=('localhost', SYSLOG_UDP_PORT), facility=LOG_USER, socktype=socket.SOCK_DGRAM)¶
Returns a new instance of the  class intended to
communicate with a remote Unix machine whose address is given by address in
the form of a  tuple.  If address is not specified,
 is used.  The address is used to open a socket.  An
alternative to providing a  tuple is providing an address as a
string, for example ‘/dev/log’. In this case, a Unix domain socket is used to
send the message to the syslog. If facility is not specified,
 is used. The type of socket opened depends on the
socktype argument, which defaults to  and thus
opens a UDP socket. To open a TCP socket (for use with the newer syslog
daemons such as rsyslog), specify a value of .
Note that if your server is not listening on UDP port 514,
 may appear not to work. In that case, check what
address you should be using for a domain socket - it’s system dependent.
For example, on Linux it’s usually ‘/dev/log’ but on OS/X it’s
‘/var/run/syslog’. You’ll need to check your platform and use the
appropriate address (you may need to do this check at runtime if your
application needs to run on several platforms). On Windows, you pretty
much have to use the UDP option.

Changed in version 3.2: socktype was added.



()¶
Closes the socket to the remote host.



(record)¶
The record is formatted, and then sent to the syslog server. If exception
information is present, it is not sent to the server.

Changed in version 3.2.1: (See: bpo-12168.) In earlier versions, the message sent to the
syslog daemons was always terminated with a NUL byte, because early
versions of these daemons expected a NUL terminated message - even
though it’s not in the relevant specification (RFC 5424). More recent
versions of these daemons don’t expect the NUL byte but strip it off
if it’s there, and even more recent daemons (which adhere more closely
to RFC 5424) pass the NUL byte on as part of the message.
To enable easier handling of syslog messages in the face of all these
differing daemon behaviours, the appending of the NUL byte has been
made configurable, through the use of a class-level attribute,
. This defaults to  (preserving the existing
behaviour) but can be set to  on a  instance
in order for that instance to not append the NUL terminator.


Changed in version 3.3: (See: bpo-12419.) In earlier versions, there was no facility for
an “ident” or “tag” prefix to identify the source of the message. This
can now be specified using a class-level attribute, defaulting to
 to preserve existing behaviour, but which can be overridden on
a  instance in order for that instance to prepend
the ident to every message handled. Note that the provided ident must
be text, not bytes, and is prepended to the message exactly as is.




(facility, priority)¶
Encodes the facility and priority into an integer. You can pass in strings
or integers - if strings are passed, internal mapping dictionaries are
used to convert them to integers.
The symbolic  values are defined in  and
mirror the values defined in the  header file.
Priorities






Name (string)
Symbolic value




LOG_ALERT

 or 
LOG_CRIT


LOG_DEBUG

 or 
LOG_EMERG

 or 
LOG_ERR


LOG_INFO


LOG_NOTICE

 or 
LOG_WARNING



Facilities






Name (string)
Symbolic value




LOG_AUTH


LOG_AUTHPRIV


LOG_CRON


LOG_DAEMON


LOG_FTP


LOG_KERN


LOG_LPR


LOG_MAIL


LOG_NEWS


LOG_SYSLOG


LOG_USER


LOG_UUCP


LOG_LOCAL0


LOG_LOCAL1


LOG_LOCAL2


LOG_LOCAL3


LOG_LOCAL4


LOG_LOCAL5


LOG_LOCAL6


LOG_LOCAL7






(levelname)¶
Maps a logging level name to a syslog priority name.
You may need to override this if you are using custom levels, or
if the default algorithm is not suitable for your needs. The
default algorithm maps , , ,  and
 to the equivalent syslog names, and all other level
names to ‘warning’.




NTEventLogHandler¶
The  class, located in the 
module, supports sending logging messages to a local Windows NT, Windows 2000 or
Windows XP event log. Before you can use it, you need Mark Hammond’s Win32
extensions for Python installed.


class (appname, dllname=None, logtype='Application')¶
Returns a new instance of the  class. The appname is
used to define the application name as it appears in the event log. An
appropriate registry entry is created using this name. The dllname should give
the fully qualified pathname of a .dll or .exe which contains message
definitions to hold in the log (if not specified,  is used
- this is installed with the Win32 extensions and contains some basic
placeholder message definitions. Note that use of these placeholders will make
your event logs big, as the entire message source is held in the log. If you
want slimmer logs, you have to pass in the name of your own .dll or .exe which
contains the message definitions you want to use in the event log). The
logtype is one of ,  or , and
defaults to .


()¶
At this point, you can remove the application name from the registry as a
source of event log entries. However, if you do this, you will not be able
to see the events as you intended in the Event Log Viewer - it needs to be
able to access the registry to get the .dll name. The current version does
not do this.



(record)¶
Determines the message ID, event category and event type, and then logs
the message in the NT event log.



(record)¶
Returns the event category for the record. Override this if you want to
specify your own categories. This version returns 0.



(record)¶
Returns the event type for the record. Override this if you want to
specify your own types. This version does a mapping using the handler’s
typemap attribute, which is set up in  to a dictionary
which contains mappings for , ,
,  and . If you are using
your own levels, you will either need to override this method or place a
suitable dictionary in the handler’s typemap attribute.



(record)¶
Returns the message ID for the record. If you are using your own messages,
you could do this by having the msg passed to the logger being an ID
rather than a format string. Then, in here, you could use a dictionary
lookup to get the message ID. This version returns 1, which is the base
message ID in .




SMTPHandler¶
The  class, located in the  module,
supports sending logging messages to an email address via SMTP.


class (mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None, timeout=1.0)¶
Returns a new instance of the  class. The instance is
initialized with the from and to addresses and subject line of the email. The
toaddrs should be a list of strings. To specify a non-standard SMTP port, use
the (host, port) tuple format for the mailhost argument. If you use a string,
the standard SMTP port is used. If your SMTP server requires authentication, you
can specify a (username, password) tuple for the credentials argument.
To specify the use of a secure protocol (TLS), pass in a tuple to the
secure argument. This will only be used when authentication credentials are
supplied. The tuple should be either an empty tuple, or a single-value tuple
with the name of a keyfile, or a 2-value tuple with the names of the keyfile
and certificate file. (This tuple is passed to the
 method.)
A timeout can be specified for communication with the SMTP server using the
timeout argument.

New in version 3.3: The timeout argument was added.



(record)¶
Formats the record and sends it to the specified addressees.



(record)¶
If you want to specify a subject line which is record-dependent, override
this method.




MemoryHandler¶
The  class, located in the  module,
supports buffering of logging records in memory, periodically flushing them to a
target handler. Flushing occurs whenever the buffer is full, or when an
event of a certain severity or greater is seen.
 is a subclass of the more general
, which is an abstract class. This buffers logging
records in memory. Whenever each record is added to the buffer, a check is made
by calling  to see if the buffer should be flushed.  If it
should, then  is expected to do the flushing.


class (capacity)¶
Initializes the handler with a buffer of the specified capacity.


(record)¶
Appends the record to the buffer. If  returns true,
calls  to process the buffer.



()¶
You can override this to implement custom flushing behavior. This version
just zaps the buffer to empty.



(record)¶
Returns true if the buffer is up to capacity. This method can be
overridden to implement custom flushing strategies.




class (capacity, flushLevel=ERROR, target=None, flushOnClose=True)¶
Returns a new instance of the  class. The instance is
initialized with a buffer size of capacity. If flushLevel is not specified,
 is used. If no target is specified, the target will need to be
set using  before this handler does anything useful. If
flushOnClose is specified as , then the buffer is not flushed when
the handler is closed. If not specified or specified as , the previous
behaviour of flushing the buffer will occur when the handler is closed.

Changed in version 3.6: The flushOnClose parameter was added.



()¶
Calls , sets the target to  and clears the
buffer.



()¶
For a , flushing means just sending the buffered
records to the target, if there is one. The buffer is also cleared when
this happens. Override if you want different behavior.



(target)¶
Sets the target handler for this handler.



(record)¶
Checks for buffer full or a record at the flushLevel or higher.




HTTPHandler¶
The  class, located in the  module,
supports sending logging messages to a Web server, using either  or
 semantics.


class (host, url, method='GET', secure=False, credentials=None, context=None)¶
Returns a new instance of the  class. The host can be
of the form , should you need to use a specific port number.  If
no method is specified,  is used. If secure is true, a HTTPS
connection will be used. The context parameter may be set to a
 instance to configure the SSL settings used for the
HTTPS connection. If credentials is specified, it should be a 2-tuple
consisting of userid and password, which will be placed in a HTTP
‘Authorization’ header using Basic authentication. If you specify
credentials, you should also specify secure=True so that your userid and
password are not passed in cleartext across the wire.

Changed in version 3.5: The context parameter was added.



(record)¶
Provides a dictionary, based on , which is to be URL-encoded
and sent to the web server. The default implementation just returns
. This method can be overridden if e.g. only a
subset of  is to be sent to the web server, or
if more specific customization of what’s sent to the server is required.



(record)¶
Sends the record to the Web server as a URL-encoded dictionary. The
 method is used to convert the record to the
dictionary to be sent.


Note
Since preparing a record for sending it to a Web server is not
the same as a generic formatting operation, using
 to specify a
 for a  has no effect.
Instead of calling , this handler calls
 and then  to encode the
dictionary in a form suitable for sending to a Web server.




QueueHandler¶

New in version 3.2.

The  class, located in the  module,
supports sending logging messages to a queue, such as those implemented in the
 or  modules.
Along with the  class,  can be used
to let handlers do their work on a separate thread from the one which does the
logging. This is important in Web applications and also other service
applications where threads servicing clients need to respond as quickly as
possible, while any potentially slow operations (such as sending an email via
) are done on a separate thread.


class (queue)¶
Returns a new instance of the  class. The instance is
initialized with the queue to send messages to. The queue can be any
queue-like object; it’s used as-is by the  method, which needs
to know how to send messages to it.


(record)¶
Enqueues the result of preparing the LogRecord.



(record)¶
Prepares a record for queuing. The object returned by this
method is enqueued.
The base implementation formats the record to merge the message,
arguments, and exception information, if present.  It also
removes unpickleable items from the record in-place.
You might want to override this method if you want to convert
the record to a dict or JSON string, or send a modified copy
of the record while leaving the original intact.



(record)¶
Enqueues the record on the queue using ; you may
want to override this if you want to use blocking behaviour, or a
timeout, or a customized queue implementation.




QueueListener¶

New in version 3.2.

The  class, located in the 
module, supports receiving logging messages from a queue, such as those
implemented in the  or  modules. The
messages are received from a queue in an internal thread and passed, on
the same thread, to one or more handlers for processing. While
 is not itself a handler, it is documented here
because it works hand-in-hand with .
Along with the  class,  can be used
to let handlers do their work on a separate thread from the one which does the
logging. This is important in Web applications and also other service
applications where threads servicing clients need to respond as quickly as
possible, while any potentially slow operations (such as sending an email via
) are done on a separate thread.


class (queue, *handlers, respect_handler_level=False)¶
Returns a new instance of the  class. The instance is
initialized with the queue to send messages to and a list of handlers which
will handle entries placed on the queue. The queue can be any queue-like
object; it’s passed as-is to the  method, which needs
to know how to get messages from it. If  is ,
a handler’s level is respected (compared with the level for the message) when
deciding whether to pass messages to that handler; otherwise, the behaviour
is as in previous Python versions - to always pass each message to each
handler.

Changed in version 3.5: The  argument was added.



(block)¶
Dequeues a record and return it, optionally blocking.
The base implementation uses . You may want to override this
method if you want to use timeouts or work with custom queue
implementations.



(record)¶
Prepare a record for handling.
This implementation just returns the passed-in record. You may want to
override this method if you need to do any custom marshalling or
manipulation of the record before passing it to the handlers.



(record)¶
Handle a record.
This just loops through the handlers offering them the record
to handle. The actual object passed to the handlers is that which
is returned from .



()¶
Starts the listener.
This starts up a background thread to monitor the queue for
LogRecords to process.



()¶
Stops the listener.
This asks the thread to terminate, and then waits for it to do so.
Note that if you don’t call this before your application exits, there
may be some records still left on the queue, which won’t be processed.



()¶
Writes a sentinel to the queue to tell the listener to quit. This
implementation uses .  You may want to override this
method if you want to use timeouts or work with custom queue
implementations.

New in version 3.3.




See also

Module 
API reference for the logging module.
Module 
Configuration API for the logging module.




