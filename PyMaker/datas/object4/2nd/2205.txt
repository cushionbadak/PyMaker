link:
library/filecmp.html#module-filecmp

docs:

 — File and Directory Comparisons¶
Source code: Lib/filecmp.py

The  module defines functions to compare files and directories,
with various optional time/correctness trade-offs. For comparing files,
see also the  module.
The  module defines the following functions:


(f1, f2, shallow=True)¶
Compare the files named f1 and f2, returning  if they seem equal,
 otherwise.
If shallow is true, files with identical  signatures are
taken to be equal.  Otherwise, the contents of the files are compared.
Note that no external programs are called from this function, giving it
portability and efficiency.
This function uses a cache for past comparisons and the results,
with cache entries invalidated if the  information for the
file changes.  The entire cache may be cleared using .



(dir1, dir2, common, shallow=True)¶
Compare the files in the two directories dir1 and dir2 whose names are
given by common.
Returns three lists of file names: match, mismatch,
errors.  match contains the list of files that match, mismatch contains
the names of those that don’t, and errors lists the names of files which
could not be compared.  Files are listed in errors if they don’t exist in
one of the directories, the user lacks permission to read them or if the
comparison could not be done for some other reason.
The shallow parameter has the same meaning and default value as for
.
For example,  will compare  with
 and  with .   and  will each be in
one of the three returned lists.



()¶
Clear the filecmp cache. This may be useful if a file is compared so quickly
after it is modified that it is within the mtime resolution of
the underlying filesystem.

New in version 3.4.



The  class¶


class (a, b, ignore=None, hide=None)¶
Construct a new directory comparison object, to compare the directories a
and b.  ignore is a list of names to ignore, and defaults to
.  hide is a list of names to hide, and
defaults to .
The  class compares files by doing shallow comparisons
as described for .
The  class provides the following methods:


()¶
Print (to ) a comparison between a and b.



()¶
Print a comparison between a and b and common immediate
subdirectories.



()¶
Print a comparison between a and b and common subdirectories
(recursively).

The  class offers a number of interesting attributes that may be
used to get various bits of information about the directory trees being
compared.
Note that via  hooks, all attributes are computed lazily,
so there is no speed penalty if only those attributes which are lightweight
to compute are used.


¶
The directory a.



¶
The directory b.



¶
Files and subdirectories in a, filtered by hide and ignore.



¶
Files and subdirectories in b, filtered by hide and ignore.



¶
Files and subdirectories in both a and b.



¶
Files and subdirectories only in a.



¶
Files and subdirectories only in b.



¶
Subdirectories in both a and b.



¶
Files in both a and b.



¶
Names in both a and b, such that the type differs between the
directories, or names for which  reports an error.



¶
Files which are identical in both a and b, using the class’s
file comparison operator.



¶
Files which are in both a and b, whose contents differ according
to the class’s file comparison operator.



¶
Files which are in both a and b, but could not be compared.



¶
A dictionary mapping names in  to 
objects.




¶

New in version 3.4.

List of directories ignored by  by default.

Here is a simplified example of using the  attribute to search
recursively through two directories to show common different files:



