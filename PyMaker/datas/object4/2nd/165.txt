link:
reference/datamodel.html#asynchronous-context-managers

docs:

3.4.4. Asynchronous Context Managers¶
An asynchronous context manager is a context manager that is able to
suspend execution in its  and  methods.
Asynchronous context managers can be used in an  statement.


(self)¶
This method is semantically similar to the , with only
difference that it must return an awaitable.



(self, exc_type, exc_value, traceback)¶
This method is semantically similar to the , with only
difference that it must return an awaitable.

An example of an asynchronous context manager class:



New in version 3.5.

Footnotes



[1]It is possible in some cases to change an object’s type, under certain
controlled conditions. It generally isn’t a good idea though, since it can
lead to some very strange behaviour if it is handled incorrectly.





[2]The , , , and
 methods have special handling for this; others
will still raise a , but may do so by relying on
the behavior that  is not callable.





[3]“Does not support” here means that the class has no such method, or
the method returns .  Do not set the method to
 if you want to force fallback to the right operand’s reflected
method—that will instead have the opposite effect of explicitly
blocking such fallback.





[4]For operands of the same type, it is assumed that if the non-reflected method
(such as ) fails the operation is not supported, which is why the
reflected method is not called.


