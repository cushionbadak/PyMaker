link:
reference/datamodel.html#customizing-module-attribute-access

docs:

3.3.2.1. Customizing module attribute access¶
Special names  and  can be also used to customize
access to module attributes. The  function at the module level
should accept one argument which is the name of an attribute and return the
computed value or raise an . If an attribute is
not found on a module object through the normal lookup, i.e.
, then  is searched in
the module  before raising an . If found,
it is called with the attribute name and the result is returned.
The  function should accept no arguments, and return a list of
strings that represents the names accessible on module. If present, this
function overrides the standard  search on a module.
For a more fine grained customization of the module behavior (setting
attributes, properties, etc.), one can set the  attribute of
a module object to a subclass of . For example:



Note
Defining module  and setting module  only
affect lookups made using the attribute access syntax – directly accessing
the module globals (whether by code within the module, or via a reference
to the module’s globals dictionary) is unaffected.


Changed in version 3.5:  module attribute is now writable.


New in version 3.7:  and  module attributes.


See also

PEP 562 - Module __getattr__ and __dir__
Describes the  and  functions on modules.


