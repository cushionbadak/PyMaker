link:
library/importlib.html#importlib.abc.Loader.load_module

docs:


(fullname)Â¶
A legacy method for loading a module. If the module cannot be
loaded,  is raised, otherwise the loaded module is
returned.
If the requested module already exists in , that
module should be used and reloaded.
Otherwise the loader should create a new module and insert it into
 before any loading begins, to prevent recursion
from the import. If the loader inserted a module and the load fails, it
must be removed by the loader from ; modules already
in  before the loader began execution should be left
alone (see ).
The loader should set several attributes on the module.
(Note that some of these attributes can change when a module is
reloaded):



The name of the module.




The path to where the module data is stored (not set for built-in
modules).




The path to where a compiled version of the module is/should be
stored (not set when the attribute would be inappropriate).




A list of strings specifying the search path within a
package. This attribute is not set on modules.




The parent package for the module/package. If the module is
top-level then it has a value of the empty string. The
 decorator can handle the
details for .




The loader used to load the module. The
 decorator can handle the
details for .



When  is available then backwards-compatible
functionality is provided.

Changed in version 3.4: Raise  when called instead of
. Functionality provided when
 is available.


Deprecated since version 3.4: The recommended API for loading a module is 
(and ).  Loaders should implement
it instead of load_module().  The import machinery takes care of
all the other responsibilities of load_module() when exec_module()
is implemented.

