link:
library/smtpd.html

docs:


 — SMTP Server¶
Source code: Lib/smtpd.py

This module offers several classes to implement SMTP (email) servers.

See also
The aiosmtpd package is a recommended
replacement for this module.  It is based on  and provides a
more straightforward API.   should be considered deprecated.

Several server implementations are present; one is a generic
do-nothing implementation, which can be overridden, while the other two offer
specific mail-sending strategies.
Additionally the SMTPChannel may be extended to implement very specific
interaction behaviour with SMTP clients.
The code supports RFC 5321, plus the RFC 1870 SIZE and RFC 6531
SMTPUTF8 extensions.

SMTPServer Objects¶


class (localaddr, remoteaddr, data_size_limit=33554432, map=None, enable_SMTPUTF8=False, decode_data=False)¶
Create a new  object, which binds to local address
localaddr.  It will treat remoteaddr as an upstream SMTP relayer.  Both
localaddr and remoteaddr should be a (host, port)
tuple.  The object inherits from , and so will
insert itself into ’s event loop on instantiation.
data_size_limit specifies the maximum number of bytes that will be
accepted in a  command.  A value of  or  means no
limit.
map is the socket map to use for connections (an initially empty
dictionary is a suitable value).  If not specified the 
global socket map is used.
enable_SMTPUTF8 determines whether the  extension (as defined
in RFC 6531) should be enabled.  The default is .
When ,  is accepted as a parameter to the 
command and when present is passed to  in the
 list.  decode_data and enable_SMTPUTF8
cannot be set to  at the same time.
decode_data specifies whether the data portion of the SMTP transaction
should be decoded using UTF-8.  When decode_data is  (the
default), the server advertises the 
extension (RFC 6152), accepts the  parameter to
the  command, and when present passes it to 
in the  list. decode_data and enable_SMTPUTF8
cannot be set to  at the same time.


(peer, mailfrom, rcpttos, data, **kwargs)¶
Raise a  exception. Override this in subclasses to
do something useful with this message. Whatever was passed in the
constructor as remoteaddr will be available as the 
attribute. peer is the remote host’s address, mailfrom is the envelope
originator, rcpttos are the envelope recipients and data is a string
containing the contents of the e-mail (which should be in RFC 5321
format).
If the decode_data constructor keyword is set to , the data
argument will be a unicode string.  If it is set to , it
will be a bytes object.
kwargs is a dictionary containing additional information. It is empty
if  was given as an init argument, otherwise
it contains the following keys:


mail_options:
a list of all received parameters to the 
command (the elements are uppercase strings; example:
).
rcpt_options:
same as mail_options but for the  command.
Currently no  options are supported, so for now
this will always be an empty list.


Implementations of  should use the 
signature to accept arbitrary keyword arguments, since future feature
enhancements may add keys to the kwargs dictionary.
Return  to request a normal  response; otherwise
return the desired response string in RFC 5321 format.



¶
Override this in subclasses to use a custom  for
managing SMTP clients.


New in version 3.4: The map constructor argument.


Changed in version 3.5: localaddr and remoteaddr may now contain IPv6 addresses.


New in version 3.5: The decode_data and enable_SMTPUTF8 constructor parameters, and the
kwargs parameter to  when decode_data is
.


Changed in version 3.6: decode_data is now  by default.




DebuggingServer Objects¶


class (localaddr, remoteaddr)¶
Create a new debugging server.  Arguments are as per .
Messages will be discarded, and printed on stdout.



PureProxy Objects¶


class (localaddr, remoteaddr)¶
Create a new pure proxy server. Arguments are as per .
Everything will be relayed to remoteaddr.  Note that running this has a good
chance to make you into an open relay, so please be careful.



MailmanProxy Objects¶


class (localaddr, remoteaddr)¶
Create a new pure proxy server. Arguments are as per .
Everything will be relayed to remoteaddr, unless local mailman configurations
knows about an address, in which case it will be handled via mailman.  Note that
running this has a good chance to make you into an open relay, so please be
careful.



SMTPChannel Objects¶


class (server, conn, addr, data_size_limit=33554432, map=None, enable_SMTPUTF8=False, decode_data=False)¶
Create a new  object which manages the communication
between the server and a single SMTP client.
conn and addr are as per the instance variables described below.
data_size_limit specifies the maximum number of bytes that will be
accepted in a  command.  A value of  or  means no
limit.
enable_SMTPUTF8 determines whether the  extension (as defined
in RFC 6531) should be enabled.  The default is .
decode_data and enable_SMTPUTF8 cannot be set to  at the same
time.
A dictionary can be specified in map to avoid using a global socket map.
decode_data specifies whether the data portion of the SMTP transaction
should be decoded using UTF-8.  The default is .
decode_data and enable_SMTPUTF8 cannot be set to  at the same
time.
To use a custom SMTPChannel implementation you need to override the
 of your .

Changed in version 3.5: The decode_data and enable_SMTPUTF8 parameters were added.


Changed in version 3.6: decode_data is now  by default.

The  has the following instance variables:


¶
Holds the  that spawned this channel.



¶
Holds the socket object connecting to the client.



¶
Holds the address of the client, the second value returned by




¶
Holds a list of the line strings (decoded using UTF-8) received from
the client. The lines have their  line ending translated to
.



¶
Holds the current state of the channel. This will be either
 initially and then  after the client sends
a “DATA” line.



¶
Holds a string containing the greeting sent by the client in its “HELO”.



¶
Holds a string containing the address identified in the “MAIL FROM:” line
from the client.



¶
Holds a list of strings containing the addresses identified in the
“RCPT TO:” lines from the client.



¶
Holds a string containing all of the data sent by the client during the
DATA state, up to but not including the terminating .



¶
Holds the fully-qualified domain name of the server as returned by
.



¶
Holds the name of the client peer as returned by 
where  is .

The  operates by invoking methods named 
upon reception of a command line from the client. Built into the base
 class are methods for handling the following commands
(and responding to them appropriately):






Command
Action taken



HELO
Accepts the greeting from the client and stores it in
.  Sets server to base command mode.

EHLO
Accepts the greeting from the client and stores it in
.  Sets server to extended command mode.

NOOP
Takes no action.

QUIT
Closes the connection cleanly.

MAIL
Accepts the “MAIL FROM:” syntax and stores the supplied address as
.  In extended command mode, accepts the
RFC 1870 SIZE attribute and responds appropriately based on the
value of data_size_limit.

RCPT
Accepts the “RCPT TO:” syntax and stores the supplied addresses in
the  list.

RSET
Resets the , , and
, but not the greeting.

DATA
Sets the internal state to  and stores remaining lines
from the client in  until the terminator
 is received.

HELP
Returns minimal information on command syntax

VRFY
Returns code 252 (the server doesn’t know if the address is valid)

EXPN
Reports that the command is not implemented.






