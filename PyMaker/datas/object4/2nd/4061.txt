link:
library/ctypes.html#callback-functions

docs:

Callback functions¶
 allows creating C callable function pointers from Python callables.
These are sometimes called callback functions.
First, you must create a class for the callback function. The class knows the
calling convention, the return type, and the number and types of arguments this
function will receive.
The  factory function creates types for callback functions
using the  calling convention. On Windows, the 
factory function creates types for callback functions using the 
calling convention.
Both of these factory functions are called with the result type as first
argument, and the callback functions expected argument types as the remaining
arguments.
I will present an example here which uses the standard C library’s
 function, that is used to sort items with the help of a callback
function.   will be used to sort an array of integers:


 must be called with a pointer to the data to sort, the number of
items in the data array, the size of one item, and a pointer to the comparison
function, the callback. The callback will then be called with two pointers to
items, and it must return a negative integer if the first item is smaller than
the second, a zero if they are equal, and a positive integer otherwise.
So our callback function receives pointers to integers, and must return an
integer. First we create the  for the callback function:


To get started, here is a simple callback that shows the values it gets
passed:


The result:


Now we can actually compare the two items and return a useful result:


As we can easily check, our array is sorted now:


The function factories can be used as decorator factories, so we may as well
write:



Note
Make sure you keep references to  objects as long as they
are used from C code.  doesn’t, and if you don’t, they may be
garbage collected, crashing your program when a callback is made.
Also, note that if the callback function is called in a thread created
outside of Python’s control (e.g. by the foreign code that calls the
callback), ctypes creates a new dummy Python thread on every invocation. This
behavior is correct for most purposes, but it means that values stored with
 will not survive across different callbacks, even when
those calls are made from the same C thread.

