link:
library/logging.config.html#user-defined-objects

docs:

User-defined objects¶
The schema supports user-defined objects for handlers, filters and
formatters.  (Loggers do not need to have different types for
different instances, so there is no support in this configuration
schema for user-defined logger classes.)
Objects to be configured are described by dictionaries
which detail their configuration.  In some places, the logging system
will be able to infer from the context how an object is to be
instantiated, but when a user-defined object is to be instantiated,
the system will not know how to do this.  In order to provide complete
flexibility for user-defined object instantiation, the user needs
to provide a ‘factory’ - a callable which is called with a
configuration dictionary and which returns the instantiated object.
This is signalled by an absolute import path to the factory being
made available under the special key .  Here’s a concrete
example:


The above YAML snippet defines three formatters.  The first, with id
, is a standard  instance with the
specified format string.  The second, with id , has a
longer format and also defines the time format explicitly, and will
result in a  initialized with those two format
strings.  Shown in Python source form, the  and 
formatters have configuration sub-dictionaries:


and:


respectively, and as these dictionaries do not contain the special key
, the instantiation is inferred from the context: as a result,
standard  instances are created.  The
configuration sub-dictionary for the third formatter, with id
, is:


and this contains the special key , which means that
user-defined instantiation is wanted.  In this case, the specified
factory callable will be used. If it is an actual callable it will be
used directly - otherwise, if you specify a string (as in the example)
the actual callable will be located using normal import mechanisms.
The callable will be called with the remaining items in the
configuration sub-dictionary as keyword arguments.  In the above
example, the formatter with id  will be assumed to be
returned by the call:


The key  has been used as the special key because it is not a
valid keyword parameter name, and so will not clash with the names of
the keyword arguments used in the call.  The  also serves as a
mnemonic that the corresponding value is a callable.
