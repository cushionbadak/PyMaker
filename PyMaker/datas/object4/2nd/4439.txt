link:
library/subprocess.html#module-subprocess

docs:

 — Subprocess management¶
Source code: Lib/subprocess.py

The  module allows you to spawn new processes, connect to their
input/output/error pipes, and obtain their return codes.  This module intends to
replace several older modules and functions:


Information about how the  module can be used to replace these
modules and functions can be found in the following sections.

See also
PEP 324 – PEP proposing the subprocess module


Using the  Module¶
The recommended approach to invoking subprocesses is to use the 
function for all use cases it can handle. For more advanced use cases, the
underlying  interface can be used directly.
The  function was added in Python 3.5; if you need to retain
compatibility with older versions, see the Older high-level API section.


(args, *, stdin=None, input=None, stdout=None, stderr=None, capture_output=False, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None, text=None, env=None, universal_newlines=None)¶
Run the command described by args.  Wait for command to complete, then
return a  instance.
The arguments shown above are merely the most common ones, described below
in Frequently Used Arguments (hence the use of keyword-only notation
in the abbreviated signature). The full function signature is largely the
same as that of the  constructor - most of the arguments to
this function are passed through to that interface. (timeout,  input,
check, and capture_output are not.)
If capture_output is true, stdout and stderr will be captured.
When used, the internal  object is automatically created with
 and . The stdout and stderr arguments may
not be supplied at the same time as capture_output.  If you wish to capture
and combine both streams into one, use  and 
instead of capture_output.
The timeout argument is passed to . If the timeout
expires, the child process will be killed and waited for.  The
 exception will be re-raised after the child process
has terminated.
The input argument is passed to  and thus to the
subprocess’s stdin.  If used it must be a byte sequence, or a string if
encoding or errors is specified or text is true.  When
used, the internal  object is automatically created with
, and the stdin argument may not be used as well.
If check is true, and the process exits with a non-zero exit code, a
 exception will be raised. Attributes of that
exception hold the arguments, the exit code, and stdout and stderr if they
were captured.
If encoding or errors are specified, or text is true,
file objects for stdin, stdout and stderr are opened in text mode using the
specified encoding and errors or the  default.
The universal_newlines argument is equivalent  to text and is provided
for backwards compatibility. By default, file objects are opened in binary mode.
If env is not , it must be a mapping that defines the environment
variables for the new process; these are used instead of the default
behavior of inheriting the current process’ environment. It is passed directly
to .
Examples:



New in version 3.5.


Changed in version 3.6: Added encoding and errors parameters


Changed in version 3.7: Added the text parameter, as a more understandable alias of universal_newlines.
Added the capture_output parameter.




class ¶
The return value from , representing a process that has finished.


¶
The arguments used to launch the process. This may be a list or a string.



¶
Exit status of the child process. Typically, an exit status of 0 indicates
that it ran successfully.
A negative value  indicates that the child was terminated by signal
 (POSIX only).



¶
Captured stdout from the child process. A bytes sequence, or a string if
 was called with an encoding, errors, or text=True.
 if stdout was not captured.
If you ran the process with , stdout and
stderr will be combined in this attribute, and  will be
.



¶
Captured stderr from the child process. A bytes sequence, or a string if
 was called with an encoding, errors, or text=True.
 if stderr was not captured.



()¶
If  is non-zero, raise a .


New in version 3.5.




¶
Special value that can be used as the stdin, stdout or stderr argument
to  and indicates that the special file 
will be used.

New in version 3.3.




¶
Special value that can be used as the stdin, stdout or stderr argument
to  and indicates that a pipe to the standard stream should be
opened.  Most useful with .



¶
Special value that can be used as the stderr argument to  and
indicates that standard error should go into the same handle as standard
output.



exception ¶
Base class for all other exceptions from this module.

New in version 3.3.




exception ¶
Subclass of , raised when a timeout expires
while waiting for a child process.


¶
Command that was used to spawn the child process.



¶
Timeout in seconds.



¶
Output of the child process if it was captured by  or
.  Otherwise, .



¶
Alias for output, for symmetry with .



¶
Stderr output of the child process if it was captured by .
Otherwise, .


New in version 3.3.


Changed in version 3.5: stdout and stderr attributes added




exception ¶
Subclass of , raised when a process run by
 or  returns a non-zero exit status.


¶
Exit status of the child process.  If the process exited due to a
signal, this will be the negative signal number.



¶
Command that was used to spawn the child process.



¶
Output of the child process if it was captured by  or
.  Otherwise, .



¶
Alias for output, for symmetry with .



¶
Stderr output of the child process if it was captured by .
Otherwise, .


Changed in version 3.5: stdout and stderr attributes added



Frequently Used Arguments¶
To support a wide variety of use cases, the  constructor (and
the convenience functions) accept a large number of optional arguments. For
most typical use cases, many of these arguments can be safely left at their
default values. The arguments that are most commonly needed are:

args is required for all calls and should be a string, or a sequence of
program arguments. Providing a sequence of arguments is generally
preferred, as it allows the module to take care of any required escaping
and quoting of arguments (e.g. to permit spaces in file names). If passing
a single string, either shell must be  (see below) or else
the string must simply name the program to be executed without specifying
any arguments.
stdin, stdout and stderr specify the executed program’s standard input,
standard output and standard error file handles, respectively.  Valid values
are , , an existing file descriptor (a positive
integer), an existing file object, and .   indicates
that a new pipe to the child should be created.   indicates
that the special file  will be used.  With the default
settings of , no redirection will occur; the child’s file handles
will be inherited from the parent.  Additionally, stderr can be
, which indicates that the stderr data from the child
process should be captured into the same file handle as for stdout.
If encoding or errors are specified, or text (also known as
universal_newlines) is true,
the file objects stdin, stdout and stderr will be opened in text
mode using the encoding and errors specified in the call or the
defaults for .
For stdin, line ending characters  in the input will be converted
to the default line separator . For stdout and stderr,
all line endings in the output will be converted to .  For more
information see the documentation of the  class
when the newline argument to its constructor is .
If text mode is not used, stdin, stdout and stderr will be opened as
binary streams. No encoding or line ending conversion is performed.

New in version 3.6: Added encoding and errors parameters.


New in version 3.7: Added the text parameter as an alias for universal_newlines.


Note
The newlines attribute of the file objects ,
 and  are not updated by
the  method.

If shell is , the specified command will be executed through
the shell.  This can be useful if you are using Python primarily for the
enhanced control flow it offers over most system shells and still want
convenient access to other shell features such as shell pipes, filename
wildcards, environment variable expansion, and expansion of  to a
user’s home directory.  However, note that Python itself offers
implementations of many shell-like features (in particular, ,
, , ,
, and ).

Changed in version 3.3: When universal_newlines is , the class uses the encoding

instead of .  See the
 class for more information on this change.


Note
Read the Security Considerations section before using .


These options, along with all of the other options, are described in more
detail in the  constructor documentation.


Popen Constructor¶
The underlying process creation and management in this module is handled by
the  class. It offers a lot of flexibility so that developers
are able to handle the less common cases not covered by the convenience
functions.


class (args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=None, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=(), *, encoding=None, errors=None, text=None)¶
Execute a child program in a new process.  On POSIX, the class uses
-like behavior to execute the child program.  On Windows,
the class uses the Windows  function.  The arguments to
 are as follows.
args should be a sequence of program arguments or else a single string.
By default, the program to execute is the first item in args if args is
a sequence.  If args is a string, the interpretation is
platform-dependent and described below.  See the shell and executable
arguments for additional differences from the default behavior.  Unless
otherwise stated, it is recommended to pass args as a sequence.
On POSIX, if args is a string, the string is interpreted as the name or
path of the program to execute.  However, this can only be done if not
passing arguments to the program.

Note
 can be useful when determining the correct
tokenization for args, especially in complex cases:


Note in particular that options (such as -input) and arguments (such
as eggs.txt) that are separated by whitespace in the shell go in separate
list elements, while arguments that need quoting or backslash escaping when
used in the shell (such as filenames containing spaces or the echo command
shown above) are single list elements.

On Windows, if args is a sequence, it will be converted to a string in a
manner described in Converting an argument sequence to a string on Windows.  This is because
the underlying  operates on strings.
The shell argument (which defaults to ) specifies whether to use
the shell as the program to execute.  If shell is , it is
recommended to pass args as a string rather than as a sequence.
On POSIX with , the shell defaults to .  If
args is a string, the string specifies the command
to execute through the shell.  This means that the string must be
formatted exactly as it would be when typed at the shell prompt.  This
includes, for example, quoting or backslash escaping filenames with spaces in
them.  If args is a sequence, the first item specifies the command string, and
any additional items will be treated as additional arguments to the shell
itself.  That is to say,  does the equivalent of:


On Windows with , the  environment variable
specifies the default shell.  The only time you need to specify
 on Windows is when the command you wish to execute is built
into the shell (e.g. dir or copy).  You do not need
 to run a batch file or console-based executable.

Note
Read the Security Considerations section before using .

bufsize will be supplied as the corresponding argument to the
 function when creating the stdin/stdout/stderr pipe
file objects:

 means unbuffered (read and write are one
system call and can return short)
 means line buffered
(only usable if  i.e., in a text mode)
any other positive value means use a buffer of approximately that
size
negative bufsize (the default) means the system default of
io.DEFAULT_BUFFER_SIZE will be used.


Changed in version 3.3.1: bufsize now defaults to -1 to enable buffering by default to match the
behavior that most code expects.  In versions prior to Python 3.2.4 and
3.3.1 it incorrectly defaulted to  which was unbuffered
and allowed short reads.  This was unintentional and did not match the
behavior of Python 2 as most code expected.

The executable argument specifies a replacement program to execute.   It
is very seldom needed.  When , executable replaces the
program to execute specified by args.  However, the original args is
still passed to the program.  Most programs treat the program specified
by args as the command name, which can then be different from the program
actually executed.  On POSIX, the args name
becomes the display name for the executable in utilities such as
ps.  If , on POSIX the executable argument
specifies a replacement shell for the default .
stdin, stdout and stderr specify the executed program’s standard input,
standard output and standard error file handles, respectively.  Valid values
are , , an existing file descriptor (a positive
integer), an existing file object, and .  
indicates that a new pipe to the child should be created.  
indicates that the special file  will be used. With the
default settings of , no redirection will occur; the child’s file
handles will be inherited from the parent.  Additionally, stderr can be
, which indicates that the stderr data from the applications
should be captured into the same file handle as for stdout.
If preexec_fn is set to a callable object, this object will be called in the
child process just before the child is executed.
(POSIX only)

Warning
The preexec_fn parameter is not safe to use in the presence of threads
in your application.  The child process could deadlock before exec is
called.
If you must use it, keep it trivial!  Minimize the number of libraries
you call into.


Note
If you need to modify the environment for the child use the env
parameter rather than doing it in a preexec_fn.
The start_new_session parameter can take the place of a previously
common use of preexec_fn to call os.setsid() in the child.

If close_fds is true, all file descriptors except ,  and
 will be closed before the child process is executed.  Otherwise
when close_fds is false, file descriptors obey their inheritable flag
as described in Inheritance of File Descriptors.
On Windows, if close_fds is true then no handles will be inherited by the
child process unless explicitly passed in the  element of
, or by standard handle redirection.

Changed in version 3.2: The default for close_fds was changed from  to
what is described above.


Changed in version 3.7: On Windows the default for close_fds was changed from  to
 when redirecting the standard handles. It’s now possible to
set close_fds to  when redirecting the standard handles.

pass_fds is an optional sequence of file descriptors to keep open
between the parent and child.  Providing any pass_fds forces
close_fds to be .  (POSIX only)

New in version 3.2: The pass_fds parameter was added.

If cwd is not , the function changes the working directory to
cwd before executing the child.  cwd can be a  and
path-like object.  In particular, the function
looks for executable (or for the first item in args) relative to cwd
if the executable path is a relative path.

Changed in version 3.6: cwd parameter accepts a path-like object.

If restore_signals is true (the default) all signals that Python has set to
SIG_IGN are restored to SIG_DFL in the child process before the exec.
Currently this includes the SIGPIPE, SIGXFZ and SIGXFSZ signals.
(POSIX only)

Changed in version 3.2: restore_signals was added.

If start_new_session is true the setsid() system call will be made in the
child process prior to the execution of the subprocess.  (POSIX only)

Changed in version 3.2: start_new_session was added.

If env is not , it must be a mapping that defines the environment
variables for the new process; these are used instead of the default
behavior of inheriting the current process’ environment.

Note
If specified, env must provide any variables required for the program to
execute.  On Windows, in order to run a side-by-side assembly the
specified env must include a valid .

If encoding or errors are specified, or text is true, the file objects
stdin, stdout and stderr are opened in text mode with the specified
encoding and errors, as described above in Frequently Used Arguments.
The universal_newlines argument is equivalent  to text and is provided
for backwards compatibility. By default, file objects are opened in binary mode.

New in version 3.6: encoding and errors were added.


New in version 3.7: text was added as a more readable alias for universal_newlines.

If given, startupinfo will be a  object, which is
passed to the underlying  function.
creationflags, if given, can be one or more of the following flags:
















Popen objects are supported as context managers via the  statement:
on exit, standard file descriptors are closed, and the process is waited for.



Changed in version 3.2: Added context manager support.


Changed in version 3.6: Popen destructor now emits a  warning if the child
process is still running.




Exceptions¶
Exceptions raised in the child process, before the new program has started to
execute, will be re-raised in the parent.
The most common exception raised is .  This occurs, for example,
when trying to execute a non-existent file.  Applications should prepare for
 exceptions.
A  will be raised if  is called with invalid
arguments.
 and  will raise
 if the called process returns a non-zero return
code.
All of the functions and methods that accept a timeout parameter, such as
 and  will raise  if
the timeout expires before the process exits.
Exceptions defined in this module all inherit from .


New in version 3.3: The  base class was added.





Security Considerations¶
Unlike some other popen functions, this implementation will never
implicitly call a system shell.  This means that all characters,
including shell metacharacters, can safely be passed to child processes.
If the shell is invoked explicitly, via , it is the application’s
responsibility to ensure that all whitespace and metacharacters are
quoted appropriately to avoid
shell injection
vulnerabilities.
When using , the  function can be
used to properly escape whitespace and shell metacharacters in strings
that are going to be used to construct shell commands.


Popen Objects¶
Instances of the  class have the following methods:


()¶
Check if child process has terminated.  Set and return
 attribute. Otherwise, returns .



(timeout=None)¶
Wait for child process to terminate.  Set and return
 attribute.
If the process does not terminate after timeout seconds, raise a
 exception.  It is safe to catch this exception and
retry the wait.

Note
This will deadlock when using  or 
and the child process generates enough output to a pipe such that
it blocks waiting for the OS pipe buffer to accept more data.
Use  when using pipes to avoid that.


Note
The function is implemented using a busy loop (non-blocking call and
short sleeps). Use the  module for an asynchronous wait:
see .


Changed in version 3.3: timeout was added.




(input=None, timeout=None)¶
Interact with process: Send data to stdin.  Read data from stdout and stderr,
until end-of-file is reached.  Wait for process to terminate.  The optional
input argument should be data to be sent to the child process, or
, if no data should be sent to the child.  If streams were opened in
text mode, input must be a string.  Otherwise, it must be bytes.
 returns a tuple .
The data will be strings if streams were opened in text mode; otherwise,
bytes.
Note that if you want to send data to the process’s stdin, you need to create
the Popen object with .  Similarly, to get anything other than
 in the result tuple, you need to give  and/or
 too.
If the process does not terminate after timeout seconds, a
 exception will be raised.  Catching this exception and
retrying communication will not lose any output.
The child process is not killed if the timeout expires, so in order to
cleanup properly a well-behaved application should kill the child process and
finish communication:



Note
The data read is buffered in memory, so do not use this method if the data
size is large or unlimited.


Changed in version 3.3: timeout was added.




(signal)¶
Sends the signal signal to the child.

Note
On Windows, SIGTERM is an alias for . CTRL_C_EVENT and
CTRL_BREAK_EVENT can be sent to processes started with a creationflags
parameter which includes CREATE_NEW_PROCESS_GROUP.




()¶
Stop the child. On Posix OSs the method sends SIGTERM to the
child. On Windows the Win32 API function  is called
to stop the child.



()¶
Kills the child. On Posix OSs the function sends SIGKILL to the child.
On Windows  is an alias for .

The following attributes are also available:


¶
The args argument as it was passed to  – a
sequence of program arguments or else a single string.

New in version 3.3.




¶
If the stdin argument was , this attribute is a writeable
stream object as returned by . If the encoding or errors
arguments were specified or the universal_newlines argument was ,
the stream is a text stream, otherwise it is a byte stream. If the stdin
argument was not , this attribute is .



¶
If the stdout argument was , this attribute is a readable
stream object as returned by . Reading from the stream provides
output from the child process. If the encoding or errors arguments were
specified or the universal_newlines argument was , the stream is a
text stream, otherwise it is a byte stream. If the stdout argument was not
, this attribute is .



¶
If the stderr argument was , this attribute is a readable
stream object as returned by . Reading from the stream provides
error output from the child process. If the encoding or errors arguments
were specified or the universal_newlines argument was , the stream
is a text stream, otherwise it is a byte stream. If the stderr argument was
not , this attribute is .


Warning
Use  rather than ,
 or  to avoid
deadlocks due to any of the other OS pipe buffers filling up and blocking the
child process.



¶
The process ID of the child process.
Note that if you set the shell argument to , this is the process ID
of the spawned shell.



¶
The child return code, set by  and  (and indirectly
by ).  A  value indicates that the process
hasn’t terminated yet.
A negative value  indicates that the child was terminated by signal
 (POSIX only).



Windows Popen Helpers¶
The  class and following constants are only available
on Windows.


class (*, dwFlags=0, hStdInput=None, hStdOutput=None, hStdError=None, wShowWindow=0, lpAttributeList=None)¶
Partial support of the Windows
STARTUPINFO
structure is used for  creation.  The following attributes can
be set by passing them as keyword-only arguments.

Changed in version 3.7: Keyword-only argument support was added.



¶
A bit field that determines whether certain 
attributes are used when the process creates a window.





¶
If  specifies , this attribute
is the standard input handle for the process. If
 is not specified, the default for standard
input is the keyboard buffer.



¶
If  specifies , this attribute
is the standard output handle for the process. Otherwise, this attribute
is ignored and the default for standard output is the console window’s
buffer.



¶
If  specifies , this attribute
is the standard error handle for the process. Otherwise, this attribute is
ignored and the default for standard error is the console window’s buffer.



¶
If  specifies , this attribute
can be any of the values that can be specified in the 
parameter for the
ShowWindow
function, except for . Otherwise, this attribute is
ignored.
 is provided for this attribute. It is used when
 is called with .



¶
A dictionary of additional attributes for process creation as given in
, see
UpdateProcThreadAttribute.
Supported attributes:

handle_list
Sequence of handles that will be inherited. close_fds must be true if
non-empty.
The handles must be temporarily made inheritable by
 when passed to the 
constructor, else  will be raised with Windows error
 (87).

Warning
In a multithreaded process, use caution to avoid leaking handles
that are marked inheritable when combining this feature with
concurrent calls to other process creation functions that inherit
all handles such as .  This also applies to
standard handle redirection, which temporarily creates inheritable
handles.




New in version 3.7.




Windows Constants¶
The  module exposes the following constants.


¶
The standard input device. Initially, this is the console input buffer,
.



¶
The standard output device. Initially, this is the active console screen
buffer, .



¶
The standard error device. Initially, this is the active console screen
buffer, .



¶
Hides the window. Another window will be activated.



¶
Specifies that the ,
, and  attributes
contain additional information.



¶
Specifies that the  attribute contains
additional information.



¶
The new process has a new console, instead of inheriting its parent’s
console (the default).



¶
A   parameter to specify that a new process
group will be created. This flag is necessary for using 
on the subprocess.
This flag is ignored if  is specified.



¶
A   parameter to specify that a new process
will have an above average priority.

New in version 3.7.




¶
A   parameter to specify that a new process
will have a below average priority.

New in version 3.7.




¶
A   parameter to specify that a new process
will have a high priority.

New in version 3.7.




¶
A   parameter to specify that a new process
will have an idle (lowest) priority.

New in version 3.7.




¶
A   parameter to specify that a new process
will have an normal priority. (default)

New in version 3.7.




¶
A   parameter to specify that a new process
will have realtime priority.
You should almost never use REALTIME_PRIORITY_CLASS, because this interrupts
system threads that manage mouse input, keyboard input, and background disk
flushing. This class can be appropriate for applications that “talk” directly
to hardware or that perform brief tasks that should have limited interruptions.

New in version 3.7.




¶
A   parameter to specify that a new process
will not create a window.

New in version 3.7.




¶
A   parameter to specify that a new process
will not inherit its parent’s console.
This value cannot be used with CREATE_NEW_CONSOLE.

New in version 3.7.




¶
A   parameter to specify that a new process
does not inherit the error mode of the calling process. Instead, the new
process gets the default error mode.
This feature is particularly useful for multithreaded shell applications
that run with hard errors disabled.

New in version 3.7.




¶
A   parameter to specify that a new process
is not associated with the job.

New in version 3.7.





Older high-level API¶
Prior to Python 3.5, these three functions comprised the high level API to
subprocess. You can now use  in many cases, but lots of existing code
calls these functions.


(args, *, stdin=None, stdout=None, stderr=None, shell=False, cwd=None, timeout=None)¶
Run the command described by args.  Wait for command to complete, then
return the  attribute.
Code needing to capture stdout or stderr should use  instead:

run(…).returncode
To suppress stdout or stderr, supply a value of .
The arguments shown above are merely some common ones.
The full function signature is the
same as that of the  constructor - this function passes all
supplied arguments other than timeout directly through to that interface.

Note
Do not use  or  with this
function.  The child process will block if it generates enough
output to a pipe to fill up the OS pipe buffer as the pipes are
not being read from.


Changed in version 3.3: timeout was added.




(args, *, stdin=None, stdout=None, stderr=None, shell=False, cwd=None, timeout=None)¶
Run command with arguments.  Wait for command to complete. If the return
code was zero then return, otherwise raise . The
 object will have the return code in the
 attribute.
Code needing to capture stdout or stderr should use  instead:

run(…, check=True)
To suppress stdout or stderr, supply a value of .
The arguments shown above are merely some common ones.
The full function signature is the
same as that of the  constructor - this function passes all
supplied arguments other than timeout directly through to that interface.

Note
Do not use  or  with this
function.  The child process will block if it generates enough
output to a pipe to fill up the OS pipe buffer as the pipes are
not being read from.


Changed in version 3.3: timeout was added.




(args, *, stdin=None, stderr=None, shell=False, cwd=None, encoding=None, errors=None, universal_newlines=None, timeout=None, text=None)¶
Run command with arguments and return its output.
If the return code was non-zero it raises a . The
 object will have the return code in the
 attribute and any output in the
 attribute.
This is equivalent to:


The arguments shown above are merely some common ones.
The full function signature is largely the same as that of  -
most arguments are passed directly through to that interface.
However, explicitly passing  to inherit the parent’s
standard input file handle is not supported.
By default, this function will return the data as encoded bytes. The actual
encoding of the output data may depend on the command being invoked, so the
decoding to text will often need to be handled at the application level.
This behaviour may be overridden by setting text, encoding, errors,
or universal_newlines to  as described in
Frequently Used Arguments and .
To also capture standard error in the result, use
:



New in version 3.1.


Changed in version 3.3: timeout was added.


Changed in version 3.4: Support for the input keyword argument was added.


Changed in version 3.6: encoding and errors were added.  See  for details.


New in version 3.7: text was added as a more readable alias for universal_newlines.




Replacing Older Functions with the  Module¶
In this section, “a becomes b” means that b can be used as a replacement for a.

Note
All “a” functions in this section fail (more or less) silently if the
executed program cannot be found; the “b” replacements raise 
instead.
In addition, the replacements using  will fail with a
 if the requested operation produces a non-zero
return code. The output is still available as the
 attribute of the raised exception.

In the following examples, we assume that the relevant functions have already
been imported from the  module.

Replacing /bin/sh shell backquote¶


becomes:




Replacing shell pipeline¶


becomes:


The p1.stdout.close() call after starting the p2 is important in order for p1
to receive a SIGPIPE if p2 exits before p1.
Alternatively, for trusted input, the shell’s own pipeline support may still
be used directly:


becomes:




Replacing ¶


Notes:

Calling the program through the shell is usually not required.

A more realistic example would look like this:




Replacing the  family¶
P_NOWAIT example:


P_WAIT example:


Vector example:


Environment example:




Replacing , , ¶






Return code handling translates as follows:




Replacing functions from the  module¶

Note
If the cmd argument to popen2 functions is a string, the command is executed
through /bin/sh.  If it is a list, the command is directly executed.





 and  basically work as
, except that:

 raises an exception if the execution fails.
The capturestderr argument is replaced with the stderr argument.
 and  must be specified.
popen2 closes all file descriptors by default, but you have to specify
 with  to guarantee this behavior on
all platforms or past Python versions.




Legacy Shell Invocation Functions¶
This module also provides the following legacy functions from the 2.x
 module. These operations implicitly invoke the system shell and
none of the guarantees described above regarding security and exception
handling consistency are valid for these functions.


(cmd)¶
Return  of executing cmd in a shell.
Execute the string cmd in a shell with  and
return a 2-tuple . The locale encoding is used;
see the notes on Frequently Used Arguments for more details.
A trailing newline is stripped from the output.
The exit code for the command can be interpreted as the return code
of subprocess.  Example:


Availability: POSIX & Windows.

Changed in version 3.3.4: Windows support was added.
The function now returns (exitcode, output) instead of (status, output)
as it did in Python 3.3.3 and earlier.  exitcode has the same value as
.




(cmd)¶
Return output (stdout and stderr) of executing cmd in a shell.
Like , except the exit code is ignored and the return
value is a string containing the command’s output.  Example:


Availability: POSIX & Windows.

Changed in version 3.3.4: Windows support added




Notes¶

Converting an argument sequence to a string on Windows¶
On Windows, an args sequence is converted to a string that can be parsed
using the following rules (which correspond to the rules used by the MS C
runtime):

Arguments are delimited by white space, which is either a
space or a tab.
A string surrounded by double quotation marks is
interpreted as a single argument, regardless of white space
contained within.  A quoted string can be embedded in an
argument.
A double quotation mark preceded by a backslash is
interpreted as a literal double quotation mark.
Backslashes are interpreted literally, unless they
immediately precede a double quotation mark.
If backslashes immediately precede a double quotation mark,
every pair of backslashes is interpreted as a literal
backslash.  If the number of backslashes is odd, the last
backslash escapes the next double quotation mark as
described in rule 3.


See also


Module which provides function to parse and escape command lines.




