link:
library/pyexpat.html

docs:


 — Fast XML parsing using Expat¶


Warning
The  module is not secure against maliciously
constructed data.  If you need to parse untrusted or unauthenticated data see
XML vulnerabilities.

The  module is a Python interface to the Expat
non-validating XML parser. The module provides a single extension type,
, that represents the current state of an XML parser.  After
an  object has been created, various attributes of the object
can be set to handler functions.  When an XML document is then fed to the
parser, the handler functions are called for the character data and markup in
the XML document.
This module uses the  module to provide access to the Expat
parser.  Direct use of the  module is deprecated.
This module provides one exception and one type object:


exception ¶
The exception raised when Expat reports an error.  See section
ExpatError Exceptions for more information on interpreting Expat errors.



exception ¶
Alias for .



¶
The type of the return values from the  function.

The  module contains two functions:


(errno)¶
Returns an explanatory string for a given error number errno.



(encoding=None, namespace_separator=None)¶
Creates and returns a new  object.   encoding, if specified,
must be a string naming the encoding  used by the XML data.  Expat doesn’t
support as many encodings as Python does, and its repertoire of encodings can’t
be extended; it supports UTF-8, UTF-16, ISO-8859-1 (Latin1), and ASCII.  If
encoding [1] is given it will override the implicit or explicit encoding of the
document.
Expat can optionally do XML namespace processing for you, enabled by providing a
value for namespace_separator.  The value must be a one-character string; a
 will be raised if the string has an illegal length (
is considered the same as omission).  When namespace processing is enabled,
element type names and attribute names that belong to a namespace will be
expanded.  The element name passed to the element handlers
 and  will be the
concatenation of the namespace URI, the namespace separator character, and the
local part of the name.  If the namespace separator is a zero byte ()
then the namespace URI and the local part will be concatenated without any
separator.
For example, if namespace_separator is set to a space character () and
the following document is parsed:


 will receive the following strings for each
element:


Due to limitations in the  library used by ,
the  instance returned can only be used to parse a single
XML document.  Call  for each document to provide unique
parser instances.


See also

The Expat XML Parser
Home page of the Expat project.



XMLParser Objects¶
 objects have the following methods:


(data[, isfinal])¶
Parses the contents of the string data, calling the appropriate handler
functions to process the parsed data.  isfinal must be true on the final call
to this method; it allows the parsing of a single file in fragments,
not the submission of multiple files.
data can be the empty string at any time.



(file)¶
Parse XML data reading from the object file.  file only needs to provide
the  method, returning the empty string when there’s no more
data.



(base)¶
Sets the base to be used for resolving relative URIs in system identifiers in
declarations.  Resolving relative identifiers is left to the application: this
value will be passed through as the base argument to the
, , and
 functions.



()¶
Returns a string containing the base set by a previous call to ,
or  if   hasn’t been called.



()¶
Returns the input data that generated the current event as a string. The data is
in the encoding of the entity which contains the text. When called while an
event handler is not active, the return value is .



(context[, encoding])¶
Create a “child” parser which can be used to parse an external parsed entity
referred to by content parsed by the parent parser.  The context parameter
should be the string passed to the  handler
function, described below. The child parser is created with the
 and  set to the values of
this parser.



(flag)¶
Control parsing of parameter entities (including the external DTD subset).
Possible flag values are ,
 and
.  Return true if setting the flag
was successful.



([flag])¶
Calling this with a true value for flag (the default) will cause Expat to call
the  with  for all arguments to
allow an alternate DTD to be loaded.  If the document does not contain a
document type declaration, the  will still be
called, but the  and
 will not be called.
Passing a false value for flag will cancel a previous call that passed a true
value, but otherwise has no effect.
This method can only be called before the  or 
methods are called; calling it after either of those have been called causes
 to be raised with the  attribute set to
.

 objects have the following attributes:


¶
The size of the buffer used when  is true.
A new buffer size can be set by assigning a new integer value
to this attribute.
When the size is changed, the buffer will be flushed.



¶
Setting this to true causes the  object to buffer textual
content returned by Expat to avoid multiple calls to the
 callback whenever possible.  This can improve
performance substantially since Expat normally breaks character data into chunks
at every line ending.  This attribute is false by default, and may be changed at
any time.



¶
If  is enabled, the number of bytes stored in the buffer.
These bytes represent UTF-8 encoded text.  This attribute has no meaningful
interpretation when  is false.



¶
Setting this attribute to a non-zero integer causes the attributes to be
reported as a list rather than a dictionary.  The attributes are presented in
the order found in the document text.  For each attribute, two list entries are
presented: the attribute name and the attribute value.  (Older versions of this
module also used this format.)  By default, this attribute is false; it may be
changed at any time.



¶
If set to a non-zero integer, the parser will report only those attributes which
were specified in the document instance and not those which were derived from
attribute declarations.  Applications which set this need to be especially
careful to use what additional information is available from the declarations as
needed to comply with the standards for the behavior of XML processors.  By
default, this attribute is false; it may be changed at any time.

The following attributes contain values relating to the most recent error
encountered by an  object, and will only have correct values
once a call to  or  has raised an
 exception.


¶
Byte index at which an error occurred.



¶
Numeric code specifying the problem.  This value can be passed to the
 function, or compared to one of the constants defined in the
 object.



¶
Column number at which an error occurred.



¶
Line number at which an error occurred.

The following attributes contain values relating to the current parse location
in an  object.  During a callback reporting a parse event they
indicate the location of the first of the sequence of characters that generated
the event.  When called outside of a callback, the position indicated will be
just past the last parse event (regardless of whether there was an associated
callback).


¶
Current byte index in the parser input.



¶
Current column number in the parser input.



¶
Current line number in the parser input.

Here is the list of handlers that can be set.  To set a handler on an
 object o, use .  handlername must
be taken from the following list, and func must be a callable object accepting
the correct number of arguments.  The arguments are all strings, unless
otherwise stated.


(version, encoding, standalone)¶
Called when the XML declaration is parsed.  The XML declaration is the
(optional) declaration of the applicable version of the XML recommendation, the
encoding of the document text, and an optional “standalone” declaration.
version and encoding will be strings, and standalone will be  if the
document is declared standalone,  if it is declared not to be standalone,
or  if the standalone clause was omitted. This is only available with
Expat version 1.95.0 or newer.



(doctypeName, systemId, publicId, has_internal_subset)¶
Called when Expat begins parsing the document type declaration ().  The doctypeName is provided exactly as presented.  The systemId and
publicId parameters give the system and public identifiers if specified, or
 if omitted.  has_internal_subset will be true if the document
contains and internal document declaration subset. This requires Expat version
1.2 or newer.



()¶
Called when Expat is done parsing the document type declaration. This requires
Expat version 1.2 or newer.



(name, model)¶
Called once for each element type declaration.  name is the name of the
element type, and model is a representation of the content model.



(elname, attname, type, default, required)¶
Called for each declared attribute for an element type.  If an attribute list
declaration declares three attributes, this handler is called three times, once
for each attribute.  elname is the name of the element to which the
declaration applies and attname is the name of the attribute declared.  The
attribute type is a string passed as type; the possible values are
, , , … default gives the default value for
the attribute used when the attribute is not specified by the document instance,
or  if there is no default value ( values).  If the
attribute is required to be given in the document instance, required will be
true. This requires Expat version 1.95.0 or newer.



(name, attributes)¶
Called for the start of every element.  name is a string containing the
element name, and attributes is the element attributes. If
 is true, this is a list (see
 for a full description). Otherwise it’s a
dictionary mapping names to values.



(name)¶
Called for the end of every element.



(target, data)¶
Called for every processing instruction.



(data)¶
Called for character data.  This will be called for normal character data, CDATA
marked content, and ignorable whitespace.  Applications which must distinguish
these cases can use the ,
, and  callbacks to
collect the required information.



(entityName, base, systemId, publicId, notationName)¶
Called for unparsed (NDATA) entity declarations.  This is only present for
version 1.2 of the Expat library; for more recent versions, use
 instead.  (The underlying function in the Expat
library has been declared obsolete.)



(entityName, is_parameter_entity, value, base, systemId, publicId, notationName)¶
Called for all entity declarations.  For parameter and internal entities,
value will be a string giving the declared contents of the entity; this will
be  for external entities.  The notationName parameter will be
 for parsed entities, and the name of the notation for unparsed
entities. is_parameter_entity will be true if the entity is a parameter entity
or false for general entities (most applications only need to be concerned with
general entities). This is only available starting with version 1.95.0 of the
Expat library.



(notationName, base, systemId, publicId)¶
Called for notation declarations.  notationName, base, and systemId, and
publicId are strings if given.  If the public identifier is omitted,
publicId will be .



(prefix, uri)¶
Called when an element contains a namespace declaration.  Namespace declarations
are processed before the  is called for the element
on which declarations are placed.



(prefix)¶
Called when the closing tag is reached for an element  that contained a
namespace declaration.  This is called once for each namespace declaration on
the element in the reverse of the order for which the
 was called to indicate the start of each
namespace declaration’s scope.  Calls to this handler are made after the
corresponding  for the end of the element.



(data)¶
Called for comments.  data is the text of the comment, excluding the leading
 and trailing .



()¶
Called at the start of a CDATA section.  This and 
are needed to be able to identify the syntactical start and end for CDATA
sections.



()¶
Called at the end of a CDATA section.



(data)¶
Called for any characters in the XML document for which no applicable handler
has been specified.  This means characters that are part of a construct which
could be reported, but for which no handler has been supplied.



(data)¶
This is the same as the ,  but doesn’t inhibit expansion
of internal entities. The entity reference will not be passed to the default
handler.



()¶
Called if the XML document hasn’t been declared as being a standalone document.
This happens when there is an external subset or a reference to a parameter
entity, but the XML declaration does not set standalone to  in an XML
declaration.  If this handler returns , then the parser will raise an
 error.  If this handler is not set, no
exception is raised by the parser for this condition.



(context, base, systemId, publicId)¶
Called for references to external entities.  base is the current base, as set
by a previous call to .  The public and system identifiers,
systemId and publicId, are strings if given; if the public identifier is not
given, publicId will be .  The context value is opaque and should
only be used as described below.
For external entities to be parsed, this handler must be implemented. It is
responsible for creating the sub-parser using
, initializing it with the appropriate
callbacks, and parsing the entity.  This handler should return an integer; if it
returns , the parser will raise an
 error, otherwise parsing will
continue.
If this handler is not provided, external entities are reported by the
 callback, if provided.



ExpatError Exceptions¶
 exceptions have a number of interesting attributes:


¶
Expat’s internal error number for the specific error.  The
 dictionary maps
these error numbers to Expat’s error messages.  For example:


The  module also provides error message
constants and a dictionary  mapping
these messages back to the error codes, see below.



¶
Line number on which the error was detected.  The first line is numbered .



¶
Character offset into the line where the error occurred.  The first column is
numbered .



Example¶
The following program defines three handlers that just print out their
arguments.


The output from this program is:




Content Model Descriptions¶
Content models are described using nested tuples.  Each tuple contains four
values: the type, the quantifier, the name, and a tuple of children.  Children
are simply additional content model descriptions.
The values of the first two fields are constants defined in the
 module.  These constants can be collected in two
groups: the model type group and the quantifier group.
The constants in the model type group are:



The element named by the model name was declared to have a content model of
.




The named element allows a choice from a number of options; this is used for
content models such as .




Elements which are declared to be  have this model type.












Models which represent a series of models which follow one after the other are
indicated with this model type.  This is used for models such as .

The constants in the quantifier group are:



No modifier is given, so it can appear exactly once, as for .




The model is optional: it can appear once or not at all, as for .




The model must occur one or more times (like ).




The model must occur zero or more times, as for .



Expat error constants¶
The following constants are provided in the 
module.  These constants are useful in interpreting some of the attributes of
the  exception objects raised when an error has occurred.
Since for backwards compatibility reasons, the constants’ value is the error
message and not the numeric error code, you do this by comparing its
 attribute with
.
The  module has the following attributes:


¶
A dictionary mapping numeric error codes to their string descriptions.

New in version 3.2.




¶
A dictionary mapping string descriptions to their error codes.

New in version 3.2.




¶



¶
An entity reference in an attribute value referred to an external entity instead
of an internal entity.



¶
A character reference referred to a character which is illegal in XML (for
example, character , or ‘’).



¶
An entity reference referred to an entity which was declared with a notation, so
cannot be parsed.



¶
An attribute was used more than once in a start tag.



¶



¶
Raised when an input byte could not properly be assigned to a character; for
example, a NUL byte (value ) in a UTF-8 input stream.



¶
Something other than whitespace occurred after the document element.



¶
An XML declaration was found somewhere other than the start of the input data.



¶
The document contains no elements (XML requires all documents to contain exactly
one top-level element)..



¶
Expat was not able to allocate memory internally.



¶
A parameter entity reference was found where it was not allowed.



¶
An incomplete character was found in the input.



¶
An entity reference contained another reference to the same entity; possibly via
a different name, and possibly indirectly.



¶
Some unspecified syntax error was encountered.



¶
An end tag did not match the innermost open start tag.



¶
Some token (such as a start tag) was not closed before the end of the stream or
the next token was encountered.



¶
A reference was made to an entity which was not defined.



¶
The document encoding is not supported by Expat.



¶
A CDATA marked section was not closed.



¶



¶
The parser determined that the document was not “standalone” though it declared
itself to be in the XML declaration, and the  was
set and returned .



¶



¶



¶
An operation was requested that requires DTD support to be compiled in, but
Expat was configured without DTD support.  This should never be reported by a
standard build of the  module.



¶
A behavioral change was requested after parsing started that can only be changed
before parsing has started.  This is (currently) only raised by
.



¶
An undeclared prefix was found when namespace processing was enabled.



¶
The document attempted to remove the namespace declaration associated with a
prefix.



¶
A parameter entity contained incomplete markup.



¶
The document contained no document element at all.



¶
There was an error parsing a text declaration in an external entity.



¶
Characters were found in the public id that are not allowed.



¶
The requested operation was made on a suspended parser, but isn’t allowed.  This
includes attempts to provide additional input or to stop the parser.



¶
An attempt to resume the parser was made when the parser had not been suspended.



¶
This should not be reported to Python applications.



¶
The requested operation was made on a parser which was finished parsing input,
but isn’t allowed.  This includes attempts to provide additional input or to
stop the parser.



¶

Footnotes



[1]The encoding string included in XML output should conform to the
appropriate standards. For example, “UTF-8” is valid, but “UTF8” is
not. See https://www.w3.org/TR/2006/REC-xml11-20060816/#NT-EncodingDecl
and https://www.iana.org/assignments/character-sets/character-sets.xhtml.




