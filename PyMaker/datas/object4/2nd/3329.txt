link:
library/io.html#id1

docs:

Text I/O¶


class ¶
Base class for text streams.  This class provides a character and line based
interface to stream I/O.  It inherits .
There is no public constructor.
 provides or overrides these data attributes and
methods in addition to those from :


¶
The name of the encoding used to decode the stream’s bytes into
strings, and to encode strings into bytes.



¶
The error setting of the decoder or encoder.



¶
A string, a tuple of strings, or , indicating the newlines
translated so far.  Depending on the implementation and the initial
constructor flags, this may not be available.



¶
The underlying binary buffer (a  instance) that
 deals with.  This is not part of the
 API and may not exist in some implementations.



()¶
Separate the underlying binary buffer from the  and
return it.
After the underlying buffer has been detached, the  is
in an unusable state.
Some  implementations, like , may not
have the concept of an underlying buffer and calling this method will
raise .

New in version 3.1.




(size=-1)¶
Read and return at most size characters from the stream as a single
.  If size is negative or , reads until EOF.



(size=-1)¶
Read until newline or EOF and return a single .  If the stream is
already at EOF, an empty string is returned.
If size is specified, at most size characters will be read.



(offset[, whence])¶
Change the stream position to the given offset.  Behaviour depends on
the whence parameter.  The default value for whence is
.

 or : seek from the start of the stream
(the default); offset must either be a number returned by
, or zero.  Any other offset value
produces undefined behaviour.
 or : “seek” to the current position;
offset must be zero, which is a no-operation (all other values
are unsupported).
 or : seek to the end of the stream;
offset must be zero (all other values are unsupported).

Return the new absolute position as an opaque number.

New in version 3.1: The  constants.




()¶
Return the current stream position as an opaque number.  The number
does not usually represent a number of bytes in the underlying
binary storage.



(s)¶
Write the string s to the stream and return the number of characters
written.




class (buffer, encoding=None, errors=None, newline=None, line_buffering=False, write_through=False)¶
A buffered text stream over a  binary stream.
It inherits .
encoding gives the name of the encoding that the stream will be decoded or
encoded with.  It defaults to
.
errors is an optional string that specifies how encoding and decoding
errors are to be handled.  Pass  to raise a 
exception if there is an encoding error (the default of  has the same
effect), or pass  to ignore errors.  (Note that ignoring encoding
errors can lead to data loss.)   causes a replacement marker
(such as ) to be inserted where there is malformed data.
 causes malformed data to be replaced by a
backslashed escape sequence.  When writing, 
(replace with the appropriate XML character reference)  or 
(replace with  escape sequences) can be used.  Any other error
handling name that has been registered with
 is also valid.
newline controls how line endings are handled.  It can be ,
, , , and .  It works as follows:

When reading input from the stream, if newline is ,
universal newlines mode is enabled.  Lines in the input can end in
, , or , and these are translated into 
before being returned to the caller.  If it is , universal newlines
mode is enabled, but line endings are returned to the caller untranslated.
If it has any of the other legal values, input lines are only terminated
by the given string, and the line ending is returned to the caller
untranslated.
When writing output to the stream, if newline is , any 
characters written are translated to the system default line separator,
.  If newline is  or , no translation
takes place.  If newline is any of the other legal values, any 
characters written are translated to the given string.

If line_buffering is ,  is implied when a call to
write contains a newline character or a carriage return.
If write_through is , calls to  are guaranteed
not to be buffered: any data written on the 
object is immediately handled to its underlying binary buffer.

Changed in version 3.3: The write_through argument has been added.


Changed in version 3.3: The default encoding is now 
instead of . Don’t change temporary the
locale encoding using , use the current locale
encoding instead of the user preferred encoding.

 provides these members in addition to those of
 and its parents:


¶
Whether line buffering is enabled.



¶
Whether writes are passed immediately to the underlying binary
buffer.

New in version 3.7.




(*[, encoding][, errors][, newline][,                      line_buffering][, write_through])¶
Reconfigure this text stream using new settings for encoding,
errors, newline, line_buffering and write_through.
Parameters not specified keep current settings, except
 is used when encoding is specified but
errors is not specified.
It is not possible to change the encoding or newline if some data
has already been read from the stream. On the other hand, changing
encoding after write is possible.
This method does an implicit stream flush before setting the
new parameters.

New in version 3.7.





class (initial_value='', newline='\n')¶
An in-memory stream for text I/O.  The text buffer is discarded when the
 method is called.
The initial value of the buffer can be set by providing initial_value.
If newline translation is enabled, newlines will be encoded as if by
.  The stream is positioned at the start of
the buffer.
The newline argument works like that of .
The default is to consider only  characters as ends of lines and
to do no newline translation.  If newline is set to ,
newlines are written as  on all platforms, but universal
newline decoding is still performed when reading.
 provides this method in addition to those from
 and its parents:


()¶
Return a  containing the entire contents of the buffer.
Newlines are decoded as if by , although
the stream position is not changed.

Example usage:





class ¶
A helper codec that decodes newlines for universal newlines mode.
It inherits .

