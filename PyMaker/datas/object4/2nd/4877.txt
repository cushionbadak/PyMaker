link:
library/asyncio-protocol.html#transports-and-protocols

docs:

Transports and Protocols¶
Preface
Transports and Protocols are used by the low-level event loop
APIs such as .  They use
callback-based programming style and enable high-performance
implementations of network or IPC protocols (e.g. HTTP).
Essentially, transports and protocols should only be used in
libraries and frameworks and never in high-level asyncio
applications.
This documentation page covers both Transports and Protocols.
Introduction
At the highest level, the transport is concerned with how bytes
are transmitted, while the protocol determines which bytes to
transmit (and to some extent when).
A different way of saying the same thing: a transport is an
abstraction for a socket (or similar I/O endpoint) while a protocol
is an abstraction for an application, from the transport’s point
of view.
Yet another view is the transport and protocol interfaces
together define an abstract interface for using network I/O and
interprocess I/O.
There is always a 1:1 relationship between transport and protocol
objects: the protocol calls transport methods to send data,
while the transport calls protocol methods to pass it data that
has been received.
Most of connection oriented event loop methods
(such as ) usually accept a
protocol_factory argument used to create a Protocol object
for an accepted connection, represented by a Transport object.
Such methods usually return a tuple of .
Contents
This documentation page contains the following sections:

The Transports section documents asyncio ,
, , ,
, and 
classes.
The Protocols section documents asyncio ,
, ,
, and  classes.
The Examples section showcases how to work with transports,
protocols, and low-level event loop APIs.


Transports¶
Transports are classes provided by  in order to abstract
various kinds of communication channels.
Transport objects are always instantiated by an
ref:asyncio event loop <asyncio-event-loop>.
asyncio implements transports for TCP, UDP, SSL, and subprocess pipes.
The methods available on a transport depend on the transport’s kind.
The transport classes are not thread safe.

Transports Hierarchy¶


class ¶
Base class for all transports.  Contains methods that all
asyncio transports share.



class (BaseTransport)¶
A base transport for write-only connections.
Instances of the WriteTransport class are returned from
the  event loop method and
are also used by subprocess-related methods like
.



class (BaseTransport)¶
A base transport for read-only connections.
Instances of the ReadTransport class are returned from
the  event loop method and
are also used by subprocess-related methods like
.



class (WriteTransport, ReadTransport)¶
Interface representing a bidirectional transport, such as a
TCP connection.
The user does not instantiate a transport directly; they call a
utility function, passing it a protocol factory and other
information necessary to create the transport and protocol.
Instances of the Transport class are returned from or used by
event loop methods like ,
,
, , etc.



class (BaseTransport)¶
A transport for datagram (UDP) connections.
Instances of the DatagramTransport class are returned from
the  event loop method.



class (BaseTransport)¶
An abstraction to represent a connection between a parent and its
child OS process.
Instances of the SubprocessTransport class are returned from
event loop methods  and
.



Base Transport¶


()¶
Close the transport.
If the transport has a buffer for outgoing
data, buffered data will be flushed asynchronously.  No more data
will be received.  After all buffered data is flushed, the
protocol’s  method will be called with
 as its argument.



()¶
Return  if the transport is closing or is closed.



(name, default=None)¶
Return information about the transport or underlying resources
it uses.
name is a string representing the piece of transport-specific
information to get.
default is the value to return if the information is not
available, or if the transport does not support querying it
with the given third-party event loop implementation or on the
current platform.
For example, the following code attempts to get the underlying
socket object of the transport:


Categories of information that can be queried on some transports:

socket:
: the remote address to which the socket is
connected, result of 
( on error)
:  instance
: the socket’s own address,
result of 


SSL socket:
: the compression algorithm being used as a
string, or  if the connection isn’t compressed; result
of 
: a three-value tuple containing the name of the
cipher being used, the version of the SSL protocol that defines
its use, and the number of secret bits being used; result of

: peer certificate; result of

:  instance
:  or
 instance


pipe:
: pipe object


subprocess:
:  instance






(protocol)¶
Set a new protocol.
Switching protocol should only be done when both
protocols are documented to support the switch.



()¶
Return the current protocol.



Read-only Transports¶


()¶
Return  if the transport is receiving new data.

New in version 3.7.




()¶
Pause the receiving end of the transport.  No data will be passed to
the protocol’s 
method until  is called.

Changed in version 3.7: The method is idempotent, i.e. it can be called when the
transport is already paused or closed.




()¶
Resume the receiving end.  The protocol’s
 method
will be called once again if some data is available for reading.

Changed in version 3.7: The method is idempotent, i.e. it can be called when the
transport is already reading.




Write-only Transports¶


()¶
Close the transport immediately, without waiting for pending operations
to complete.  Buffered data will be lost.  No more data will be received.
The protocol’s  method will eventually be
called with  as its argument.



()¶
Return  if the transport supports
,  if not.



()¶
Return the current size of the output buffer used by the transport.



()¶
Get the high and low watermarks for write flow control. Return a
tuple  where low and high are positive number of
bytes.
Use  to set the limits.

New in version 3.4.2.




(high=None, low=None)¶
Set the high and low watermarks for write flow control.
These two values (measured in number of
bytes) control when the protocol’s

and 
methods are called. If specified, the low watermark must be less
than or equal to the high watermark.  Neither high nor low
can be negative.
 is called when the buffer size
becomes greater than or equal to the high value. If writing has
been paused,  is called when
the buffer size becomes less than or equal to the low value.
The defaults are implementation-specific.  If only the
high watermark is given, the low watermark defaults to an
implementation-specific value less than or equal to the
high watermark.  Setting high to zero forces low to zero as
well, and causes  to be called
whenever the buffer becomes non-empty.  Setting low to zero causes
 to be called only once the
buffer is empty. Use of zero for either limit is generally
sub-optimal as it reduces opportunities for doing I/O and
computation concurrently.
Use 
to get the limits.



(data)¶
Write some data bytes to the transport.
This method does not block; it buffers the data and arranges for it
to be sent out asynchronously.



(list_of_data)¶
Write a list (or any iterable) of data bytes to the transport.
This is functionally equivalent to calling  on each
element yielded by the iterable, but may be implemented more
efficiently.



()¶
Close the write end of the transport after flushing all buffered data.
Data may still be received.
This method can raise  if the transport
(e.g. SSL) doesn’t support half-closed connections.



Datagram Transports¶


(data, addr=None)¶
Send the data bytes to the remote peer given by addr (a
transport-dependent target address).  If addr is ,
the data is sent to the target address given on transport
creation.
This method does not block; it buffers the data and arranges
for it to be sent out asynchronously.



()¶
Close the transport immediately, without waiting for pending
operations to complete.  Buffered data will be lost.
No more data will be received.  The protocol’s

method will eventually be called with  as its argument.



Subprocess Transports¶


()¶
Return the subprocess process id as an integer.



(fd)¶
Return the transport for the communication pipe corresponding to the
integer file descriptor fd:

: readable streaming transport of the standard input (stdin),
or  if the subprocess was not created with 
: writable streaming transport of the standard output (stdout),
or  if the subprocess was not created with 
: writable streaming transport of the standard error (stderr),
or  if the subprocess was not created with 
other fd: 




()¶
Return the subprocess return code as an integer or 
if it hasn’t returned, which is similar to the
 attribute.



()¶
Kill the subprocess.
On POSIX systems, the function sends SIGKILL to the subprocess.
On Windows, this method is an alias for .
See also .



(signal)¶
Send the signal number to the subprocess, as in
.



()¶
Stop the subprocess.
On POSIX systems, this method sends SIGTERM to the subprocess.
On Windows, the Windows API function TerminateProcess() is called to
stop the subprocess.
See also .



()¶
Kill the subprocess by calling the  method.
If the subprocess hasn’t returned yet, and close transports of
stdin, stdout, and stderr pipes.




Protocols¶
asyncio provides a set of abstract base classes that should be used
to implement network protocols.  Those classes are meant to be used
together with transports.
Subclasses of abstract base protocol classes may implement some or
all methods.  All these methods are callbacks: they are called by
transports on certain events, for example when some data is received.
A base protocol method should be called by the corresponding transport.

Base Protocols¶


class ¶
Base protocol with methods that all protocols share.



class (BaseProtocol)¶
The base class for implementing streaming protocols
(TCP, Unix sockets, etc).



class (BaseProtocol)¶
A base class for implementing streaming protocols with manual
control of the receive buffer.



class (BaseProtocol)¶
The base class for implementing datagram (UDP) protocols.



class (BaseProtocol)¶
The base class for implementing protocols communicating with child
processes (unidirectional pipes).



Base Protocol¶
All asyncio protocols can implement Base Protocol callbacks.
Connection Callbacks
Connection callbacks are called on all protocols, exactly once per
a successful connection.  All other protocol callbacks can only be
called between those two methods.


(transport)¶
Called when a connection is made.
The transport argument is the transport representing the
connection.  The protocol is responsible for storing the reference
to its transport.



(exc)¶
Called when the connection is lost or closed.
The argument is either an exception object or .
The latter means a regular EOF is received, or the connection was
aborted or closed by this side of the connection.

Flow Control Callbacks
Flow control callbacks can be called by transports to pause or
resume writing performed by the protocol.
See the documentation of the 
method for more details.


()¶
Called when the transport’s buffer goes over the high watermark.



()¶
Called when the transport’s buffer drains below the low watermark.

If the buffer size equals the high watermark,
 is not called: the buffer size must
go strictly over.
Conversely,  is called when the
buffer size is equal or lower than the low watermark.  These end
conditions are important to ensure that things go as expected when
either mark is zero.


Streaming Protocols¶
Event methods, such as ,
, ,
, ,
, and 
accept factories that return streaming protocols.


(data)¶
Called when some data is received.  data is a non-empty bytes
object containing the incoming data.
Whether the data is buffered, chunked or reassembled depends on
the transport.  In general, you shouldn’t rely on specific semantics
and instead make your parsing generic and flexible. However,
data is always received in the correct order.
The method can be called an arbitrary number of times while
a connection is open.
However, 
is called at most once.  Once eof_received() is called,
 is not called anymore.



()¶
Called when the other end signals it won’t send any more data
(for example by calling , if the other end also uses
asyncio).
This method may return a false value (including ), in which case
the transport will close itself.  Conversely, if this method returns a
true value, the protocol used determines whether to close the transport.
Since the default implementation returns , it implicitly closes the
connection.
Some transports, including SSL, don’t support half-closed connections,
in which case returning true from this method will result in the connection
being closed.

State machine:




Buffered Streaming Protocols¶

New in version 3.7: Important: this has been added to asyncio in Python 3.7
on a provisional basis!  This is as an experimental API that
might be changed or removed completely in Python 3.8.

Buffered Protocols can be used with any event loop method
that supports Streaming Protocols.
 implementations allow explicit manual allocation
and control of the receive buffer.  Event loops can then use the buffer
provided by the protocol to avoid unnecessary data copies.  This
can result in noticeable performance improvement for protocols that
receive big amounts of data.  Sophisticated protocol implementations
can significantly reduce the number of buffer allocations.
The following callbacks are called on 
instances:


(sizehint)¶
Called to allocate a new receive buffer.
sizehint is the recommended minimum size for the returned
buffer.  It is acceptable to return smaller or larger buffers
than what sizehint suggests.  When set to -1, the buffer size
can be arbitrary. It is an error to return a buffer with a zero size.
 must return an object implementing the
buffer protocol.



(nbytes)¶
Called when the buffer was updated with the received data.
nbytes is the total number of bytes that were written to the buffer.



()¶
See the documentation of the  method.

 can be called an arbitrary number
of times during a connection.  However,  is called at most once
and, if called,  and
 won’t be called after it.
State machine:




Datagram Protocols¶
Datagram Protocol instances should be constructed by protocol
factories passed to the  method.


(data, addr)¶
Called when a datagram is received.  data is a bytes object containing
the incoming data.  addr is the address of the peer sending the data;
the exact format depends on the transport.



(exc)¶
Called when a previous send or receive operation raises an
.  exc is the  instance.
This method is called in rare conditions, when the transport (e.g. UDP)
detects that a datagram could not be delivered to its recipient.
In many conditions though, undeliverable datagrams will be silently
dropped.


Note
On BSD systems (macOS, FreeBSD, etc.) flow control is not supported
for datagram protocols, because there is no reliable way to detect send
failures caused by writing too many packets.
The socket always appears ‘ready’ and excess packets are dropped. An
 with  set to  may
or may not be raised; if it is raised, it will be reported to
 but otherwise ignored.



Subprocess Protocols¶
Datagram Protocol instances should be constructed by protocol
factories passed to the  and
 methods.


(fd, data)¶
Called when the child process writes data into its stdout or stderr
pipe.
fd is the integer file descriptor of the pipe.
data is a non-empty bytes object containing the received data.



(fd, exc)¶
Called when one of the pipes communicating with the child process
is closed.
fd is the integer file descriptor that was closed.



()¶
Called when the child process has exited.




Examples¶

TCP Echo Server¶
Create a TCP echo server using the  method, send back
received data, and close the connection:



See also
The TCP echo server using streams
example uses the high-level  function.



TCP Echo Client¶
A TCP echo client using the  method, sends
data, and waits until the connection is closed:



See also
The TCP echo client using streams
example uses the high-level  function.



UDP Echo Server¶
A UDP echo server, using the 
method, sends back received data:




UDP Echo Client¶
A UDP echo client, using the 
method, sends data and closes the transport when it receives the answer:




Connecting Existing Sockets¶
Wait until a socket receives data using the
 method with a protocol:



See also
The watch a file descriptor for read events example uses the low-level
 method to register an FD.
The register an open socket to wait for data using streams example uses high-level streams
created by the  function in a coroutine.



loop.subprocess_exec() and SubprocessProtocol¶
An example of a subprocess protocol used to get the output of a
subprocess and to wait for the subprocess exit.
The subprocess is created by th  method:


See also the same example
written using high-level APIs.


