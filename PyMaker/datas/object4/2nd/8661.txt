link:
library/2to3.html#using-2to3

docs:

Using 2to3¶
2to3 will usually be installed with the Python interpreter as a script.  It is
also located in the  directory of the Python root.
2to3’s basic arguments are a list of files or directories to transform.  The
directories are recursively traversed for Python sources.
Here is a sample Python 2.x source file, :


It can be converted to Python 3.x code via 2to3 on the command line:


A diff against the original source file is printed.  2to3 can also write the
needed modifications right back to the source file.  (A backup of the original
file is made unless  is also given.)  Writing the changes back is
enabled with the  flag:


After transformation,  looks like this:


Comments and exact indentation are preserved throughout the translation process.
By default, 2to3 runs a set of predefined fixers.  The
 flag lists all available fixers.  An explicit set of fixers to run
can be given with .  Likewise the  explicitly disables a
fixer.  The following example runs only the  and  fixers:


This command runs every fixer except the  fixer:


Some fixers are explicit, meaning they aren’t run by default and must be
listed on the command line to be run.  Here, in addition to the default fixers,
the  fixer is run:


Notice how passing  enables all default fixers.
Sometimes 2to3 will find a place in your source code that needs to be changed,
but 2to3 cannot fix automatically.  In this case, 2to3 will print a warning
beneath the diff for a file.  You should address the warning in order to have
compliant 3.x code.
2to3 can also refactor doctests.  To enable this mode, use the 
flag.  Note that only doctests will be refactored.  This also doesn’t require
the module to be valid Python.  For example, doctest like examples in a reST
document could also be refactored with this option.
The  option enables output of more information on the translation
process.
Since some print statements can be parsed as function calls or statements, 2to3
cannot always read files containing the print function.  When 2to3 detects the
presence of the  compiler directive, it
modifies its internal grammar to interpret  as a function.  This
change can also be enabled manually with the  flag.  Use
 to run fixers on code that already has had its print statements
converted.
The  or  option allows specification of an
alternate directory for processed output files to be written to.  The
 flag is required when using this as backup files do not make sense
when not overwriting the input files.

New in version 3.2.3: The  option was added.

The  or  flag tells 2to3 to always
write output files even if no changes were required to the file.  This is most
useful with  so that an entire Python source tree is copied with
translation from one directory to another.
This option implies the  flag as it would not make sense otherwise.

New in version 3.2.3: The  flag was added.

The  option specifies a string to append to all output
filenames.  The  flag is required when specifying this as backups
are not necessary when writing to different filenames.  Example:


Will cause a converted file named  to be written.

New in version 3.2.3: The  option was added.

To translate an entire project from one directory tree to another use:


