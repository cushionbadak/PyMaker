link:
library/hmac.html#module-hmac

docs:

 — Keyed-Hashing for Message Authentication¶
Source code: Lib/hmac.py

This module implements the HMAC algorithm as described by RFC 2104.


(key, msg=None, digestmod=None)¶
Return a new hmac object.  key is a bytes or bytearray object giving the
secret key.  If msg is present, the method call  is made.
digestmod is the digest name, digest constructor or module for the HMAC
object to use. It supports any name suitable to  and
defaults to the  constructor.

Changed in version 3.4: Parameter key can be a bytes or bytearray object.
Parameter msg can be of any type supported by .
Parameter digestmod can be the name of a hash algorithm.


Deprecated since version 3.4, will be removed in version 3.8: MD5 as implicit default digest for digestmod is deprecated.




(key, msg, digest)¶
Return digest of msg for given secret key and digest. The
function is equivalent to , but
uses an optimized C or inline implementation, which is faster for messages
that fit into memory. The parameters key, msg, and digest have
the same meaning as in .
CPython implementation detail, the optimized C implementation is only used
when digest is a string and name of a digest algorithm, which is
supported by OpenSSL.

New in version 3.7.


An HMAC object has the following methods:


(msg)¶
Update the hmac object with msg.  Repeated calls are equivalent to a
single call with the concatenation of all the arguments:
 is equivalent to .

Changed in version 3.4: Parameter msg can be of any type supported by .




()¶
Return the digest of the bytes passed to the  method so far.
This bytes object will be the same length as the digest_size of the digest
given to the constructor.  It may contain non-ASCII bytes, including NUL
bytes.

Warning
When comparing the output of  to an externally-supplied
digest during a verification routine, it is recommended to use the
 function instead of the  operator
to reduce the vulnerability to timing attacks.




()¶
Like  except the digest is returned as a string twice the
length containing only hexadecimal digits.  This may be used to exchange the
value safely in email or other non-binary environments.

Warning
When comparing the output of  to an externally-supplied
digest during a verification routine, it is recommended to use the
 function instead of the  operator
to reduce the vulnerability to timing attacks.




()¶
Return a copy (“clone”) of the hmac object.  This can be used to efficiently
compute the digests of strings that share a common initial substring.

A hash object has the following attributes:


¶
The size of the resulting HMAC digest in bytes.



¶
The internal block size of the hash algorithm in bytes.

New in version 3.4.




¶
The canonical name of this HMAC, always lowercase, e.g. .

New in version 3.4.


This module also provides the following helper function:


(a, b)¶
Return .  This function uses an approach designed to prevent
timing analysis by avoiding content-based short circuiting behaviour,
making it appropriate for cryptography.  a and b must both be of the
same type: either  (ASCII only, as e.g. returned by
), or a bytes-like object.

Note
If a and b are of different lengths, or if an error occurs,
a timing attack could theoretically reveal information about the
types and lengths of a and b—but not their values.


New in version 3.3.



See also

Module 
The Python module providing secure hash functions.


