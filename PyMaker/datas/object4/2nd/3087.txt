link:
library/os.html#os.DirEntry

docs:


class ¶
Object yielded by  to expose the file path and other file
attributes of a directory entry.
 will provide as much of this information as possible without
making additional system calls. When a  or  system call
is made, the  object will cache the result.
 instances are not intended to be stored in long-lived data
structures; if you know the file metadata has changed or if a long time has
elapsed since calling , call  to fetch
up-to-date information.
Because the  methods can make operating system calls, they may
also raise . If you need very fine-grained
control over errors, you can catch  when calling one of the
 methods and handle as appropriate.
To be directly usable as a path-like object, 
implements the  interface.
Attributes and methods on a  instance are as follows:


¶
The entry’s base filename, relative to the  path
argument.
The  attribute will be  if the 
path argument is of type  and  otherwise.  Use
 to decode byte filenames.



¶
The entry’s full path name: equivalent to  where scandir_path is the  path
argument.  The path is only absolute if the  path
argument was absolute.  If the  path
argument was a file descriptor, the 
attribute is the same as the  attribute.
The  attribute will be  if the 
path argument is of type  and  otherwise.  Use
 to decode byte filenames.



()¶
Return the inode number of the entry.
The result is cached on the  object. Use
 to fetch up-to-date
information.
On the first, uncached call, a system call is required on Windows but
not on Unix.



(*, follow_symlinks=True)¶
Return  if this entry is a directory or a symbolic link pointing
to a directory; return  if the entry is or points to any other
kind of file, or if it doesn’t exist anymore.
If follow_symlinks is , return  only if this entry
is a directory (without following symlinks); return  if the
entry is any other kind of file or if it doesn’t exist anymore.
The result is cached on the  object, with a separate cache
for follow_symlinks  and . Call  along
with  to fetch up-to-date information.
On the first, uncached call, no system call is required in most cases.
Specifically, for non-symlinks, neither Windows or Unix require a system
call, except on certain Unix file systems, such as network file systems,
that return . If the entry is a symlink,
a system call will be required to follow the symlink unless
follow_symlinks is .
This method can raise , such as ,
but  is caught and not raised.



(*, follow_symlinks=True)¶
Return  if this entry is a file or a symbolic link pointing to a
file; return  if the entry is or points to a directory or other
non-file entry, or if it doesn’t exist anymore.
If follow_symlinks is , return  only if this entry
is a file (without following symlinks); return  if the entry is
a directory or other non-file entry, or if it doesn’t exist anymore.
The result is cached on the  object. Caching, system calls
made, and exceptions raised are as per .



()¶
Return  if this entry is a symbolic link (even if broken);
return  if the entry points to a directory or any kind of file,
or if it doesn’t exist anymore.
The result is cached on the  object. Call
 to fetch up-to-date information.
On the first, uncached call, no system call is required in most cases.
Specifically, neither Windows or Unix require a system call, except on
certain Unix file systems, such as network file systems, that return
.
This method can raise , such as ,
but  is caught and not raised.



(*, follow_symlinks=True)¶
Return a  object for this entry. This method
follows symbolic links by default; to stat a symbolic link add the
 argument.
On Unix, this method always requires a system call. On Windows, it
only requires a system call if follow_symlinks is  and the
entry is a symbolic link.
On Windows, the ,  and  attributes of the
 are always set to zero. Call  to
get these attributes.
The result is cached on the  object, with a separate cache
for follow_symlinks  and . Call  to
fetch up-to-date information.

Note that there is a nice correspondence between several attributes
and methods of  and of .  In
particular, the  attribute has the same
meaning, as do the , , 
and  methods.

New in version 3.5.


Changed in version 3.6: Added support for the  interface.  Added support
for  paths on Windows.

