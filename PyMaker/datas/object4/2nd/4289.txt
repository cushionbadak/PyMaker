link:
library/multiprocessing.html#miscellaneous

docs:

Miscellaneous¶


()¶
Return list of all live children of the current process.
Calling this has the side effect of “joining” any processes which have
already finished.



()¶
Return the number of CPUs in the system.
This number is not equivalent to the number of CPUs the current process can
use.  The number of usable CPUs can be obtained with

May raise .

See also





()¶
Return the  object corresponding to the current process.
An analogue of .



()¶
Add support for when a program which uses  has been
frozen to produce a Windows executable.  (Has been tested with py2exe,
PyInstaller and cx_Freeze.)
One needs to call this function straight after the  line of the main module.  For example:


If the  line is omitted then trying to run the frozen
executable will raise .
Calling  has no effect when invoked on any operating
system other than Windows.  In addition, if the module is being run
normally by the Python interpreter on Windows (the program has not been
frozen), then  has no effect.



()¶
Returns a list of the supported start methods, the first of which
is the default.  The possible start methods are ,
 and .  On Windows only  is
available.  On Unix  and  are always
supported, with  being the default.

New in version 3.4.




(method=None)¶
Return a context object which has the same attributes as the
 module.
If method is  then the default context is returned.
Otherwise method should be , ,
.   is raised if the specified
start method is not available.

New in version 3.4.




(allow_none=False)¶
Return the name of start method used for starting processes.
If the start method has not been fixed and allow_none is false,
then the start method is fixed to the default and the name is
returned.  If the start method has not been fixed and allow_none
is true then  is returned.
The return value can be , , 
or .   is the default on Unix, while  is
the default on Windows.

New in version 3.4.




()¶
Sets the path of the Python interpreter to use when starting a child process.
(By default  is used).  Embedders will probably need to
do some thing like


before they can create child processes.

Changed in version 3.4: Now supported on Unix when the  start method is used.




(method)¶
Set the method which should be used to start child processes.
method can be ,  or .
Note that this should be called at most once, and it should be
protected inside the  clause of the
main module.

New in version 3.4.



Note
 contains no analogues of
, ,
, ,
, or .

