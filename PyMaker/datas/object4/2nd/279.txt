link:
reference/compound_stmts.html#the-for-statement

docs:

8.3. The  statement¶
The  statement is used to iterate over the elements of a sequence
(such as a string, tuple or list) or other iterable object:

The expression list is evaluated once; it should yield an iterable object.  An
iterator is created for the result of the .  The suite is
then executed once for each item provided by the iterator, in the order returned
by the iterator.  Each item in turn is assigned to the target list using the
standard rules for assignments (see Assignment statements), and then the suite is
executed.  When the items are exhausted (which is immediately when the sequence
is empty or an iterator raises a  exception), the suite in
the  clause, if present, is executed, and the loop terminates.
A  statement executed in the first suite terminates the loop
without executing the  clause’s suite.  A 
statement executed in the first suite skips the rest of the suite and continues
with the next item, or with the  clause if there is no next
item.
The for-loop makes assignments to the variables(s) in the target list.
This overwrites all previous assignments to those variables including
those made in the suite of the for-loop:


Names in the target list are not deleted when the loop is finished, but if the
sequence is empty, they will not have been assigned to at all by the loop.  Hint:
the built-in function  returns an iterator of integers suitable to
emulate the effect of Pascal’s ; e.g., 
returns the list .

Note
There is a subtlety when the sequence is being modified by the loop (this can
only occur for mutable sequences, e.g. lists).  An internal counter is used
to keep track of which item is used next, and this is incremented on each
iteration.  When this counter has reached the length of the sequence the loop
terminates.  This means that if the suite deletes the current (or a previous)
item from the sequence, the next item will be skipped (since it gets the
index of the current item which has already been treated).  Likewise, if the
suite inserts an item in the sequence before the current item, the current
item will be treated again the next time through the loop. This can lead to
nasty bugs that can be avoided by making a temporary copy using a slice of
the whole sequence, e.g.,



