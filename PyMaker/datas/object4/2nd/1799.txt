link:
library/fractions.html#fractions.Fraction

docs:


class (numerator=0, denominator=1)¶

class (other_fraction)

class (float)

class (decimal)

class (string)
The first version requires that numerator and denominator are instances
of  and returns a new  instance
with value . If denominator is , it
raises a . The second version requires that
other_fraction is an instance of  and returns a
 instance with the same value.  The next two versions accept
either a  or a  instance, and return a
 instance with exactly the same value.  Note that due to the
usual issues with binary floating-point (see Floating Point Arithmetic:  Issues and Limitations), the
argument to  is not exactly equal to 11/10, and so
 does not return  as one might expect.
(But see the documentation for the  method below.)
The last version of the constructor expects a string or unicode instance.
The usual form for this instance is:


where the optional  may be either ‘+’ or ‘-‘ and
 and  (if present) are strings of
decimal digits.  In addition, any string that represents a finite
value and is accepted by the  constructor is also
accepted by the  constructor.  In either form the
input string may also have leading and/or trailing whitespace.
Here are some examples:


The  class inherits from the abstract base class
, and implements all of the methods and
operations from that class.   instances are hashable,
and should be treated as immutable.  In addition,
 has the following properties and methods:

Changed in version 3.2: The  constructor now accepts  and
 instances.



¶
Numerator of the Fraction in lowest term.



¶
Denominator of the Fraction in lowest term.



(flt)¶
This class method constructs a  representing the exact
value of flt, which must be a . Beware that
 is not the same value as .

Note
From Python 3.2 onwards, you can also construct a
 instance directly from a .




(dec)¶
This class method constructs a  representing the exact
value of dec, which must be a  instance.

Note
From Python 3.2 onwards, you can also construct a
 instance directly from a 
instance.




(max_denominator=1000000)¶
Finds and returns the closest  to  that has
denominator at most max_denominator.  This method is useful for finding
rational approximations to a given floating-point number:


or for recovering a rational number that’s represented as a float:





()¶
Returns the greatest  .  This method can
also be accessed through the  function:





()¶
Returns the least  .  This method can
also be accessed through the  function.



()¶

(ndigits)
The first version returns the nearest  to ,
rounding half to even. The second version rounds  to the
nearest multiple of  (logically, if
 is negative), again rounding half toward even.  This
method can also be accessed through the  function.

