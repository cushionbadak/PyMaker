link:
library/ipaddress.html#address-objects

docs:

Address objects¶
The  and  objects share a lot of common
attributes.  Some attributes that are only meaningful for IPv6 addresses are
also implemented by  objects, in order to make it easier to
write code that handles both IP versions correctly.  Address objects are
hashable, so they can be used as keys in dictionaries.


class (address)¶
Construct an IPv4 address.  An  is raised if
address is not a valid IPv4 address.
The following constitutes a valid IPv4 address:

A string in decimal-dot notation, consisting of four decimal integers in
the inclusive range 0–255, separated by dots (e.g. ). Each
integer represents an octet (byte) in the address. Leading zeroes are
tolerated only for values less than 8 (as there is no ambiguity
between the decimal and octal interpretations of such strings).
An integer that fits into 32 bits.
An integer packed into a  object of length 4 (most
significant octet first).





¶
The appropriate version number:  for IPv4,  for IPv6.



¶
The total number of bits in the address representation for this
version:  for IPv4,  for IPv6.
The prefix defines the number of leading bits in an  address that
are compared to determine whether or not an address is part of a
network.



¶



¶
The string representation in dotted decimal notation. Leading zeroes
are never included in the representation.
As IPv4 does not define a shorthand notation for addresses with octets
set to zero, these two attributes are always the same as 
for IPv4 addresses. Exposing these attributes makes it easier to
write display code that can handle both IPv4 and IPv6 addresses.



¶
The binary representation of this address - a  object of
the appropriate length (most significant octet first). This is 4 bytes
for IPv4 and 16 bytes for IPv6.



¶
The name of the reverse DNS PTR record for the IP address, e.g.:


This is the name that could be used for performing a PTR lookup, not the
resolved hostname itself.

New in version 3.5.




¶
 if the address is reserved for multicast use.  See
RFC 3171 (for IPv4) or RFC 2373 (for IPv6).



¶
 if the address is allocated for private networks.  See
iana-ipv4-special-registry (for IPv4) or iana-ipv6-special-registry
(for IPv6).



¶
 if the address is allocated for public networks.  See
iana-ipv4-special-registry (for IPv4) or iana-ipv6-special-registry
(for IPv6).

New in version 3.4.




¶
 if the address is unspecified.  See RFC 5735 (for IPv4)
or RFC 2373 (for IPv6).



¶
 if the address is otherwise IETF reserved.



¶
 if this is a loopback address.  See RFC 3330 (for IPv4)
or RFC 2373 (for IPv6).



¶
 if the address is reserved for link-local usage.  See
RFC 3927.




class (address)¶
Construct an IPv6 address.  An  is raised if
address is not a valid IPv6 address.
The following constitutes a valid IPv6 address:

A string consisting of eight groups of four hexadecimal digits, each
group representing 16 bits.  The groups are separated by colons.
This describes an exploded (longhand) notation.  The string can
also be compressed (shorthand notation) by various means.  See
RFC 4291 for details.  For example,
 can be compressed to
.
An integer that fits into 128 bits.
An integer packed into a  object of length 16, big-endian.





¶

The short form of the address representation, with leading zeroes in
groups omitted and the longest sequence of groups consisting entirely of
zeroes collapsed to a single empty group.
This is also the value returned by  for IPv6 addresses.


¶

The long form of the address representation, with all leading zeroes and
groups consisting entirely of zeroes included.
For the following attributes, see the corresponding documentation of the
 class:


¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶

New in version 3.4: is_global




¶
 if the address is reserved for site-local usage.  Note that
the site-local address space has been deprecated by RFC 3879. Use
 to test if this address is in the
space of unique local addresses as defined by RFC 4193.



¶
For addresses that appear to be IPv4 mapped addresses (starting with
), this property will report the embedded IPv4 address.
For any other address, this property will be .



¶
For addresses that appear to be 6to4 addresses  (starting with
) as defined by RFC 3056, this property will report
the embedded IPv4 address.  For any other address, this property will
be .



¶
For addresses that appear to be Teredo addresses (starting with
) as defined by RFC 4380, this property will report
the embedded  IP address pair.  For any other
address, this property will be .


