link:
library/unittest.mock.html

docs:


 — mock object library¶

New in version 3.3.

Source code: Lib/unittest/mock.py

 is a library for testing in Python. It allows you to
replace parts of your system under test with mock objects and make assertions
about how they have been used.
 provides a core  class removing the need to
create a host of stubs throughout your test suite. After performing an
action, you can make assertions about which methods / attributes were used
and arguments they were called with. You can also specify return values and
set needed attributes in the normal way.
Additionally, mock provides a  decorator that handles patching
module and class level attributes within the scope of a test, along with
 for creating unique objects. See the quick guide for
some examples of how to use ,  and
.
Mock is very easy to use and is designed for use with . Mock
is based on the ‘action -> assertion’ pattern instead of ‘record -> replay’
used by many mocking frameworks.
There is a backport of  for earlier versions of Python,
available as mock on PyPI.

Quick Guide¶
 and  objects create all attributes and
methods as you access them and store details of how they have been used. You
can configure them, to specify return values or limit what attributes are
available, and then make assertions about how they have been used:


 allows you to perform side effects, including raising an
exception when a mock is called:




Mock has many other ways you can configure it and control its behaviour. For
example the spec argument configures the mock to take its specification
from another object. Attempting to access attributes or methods on the mock
that don’t exist on the spec will fail with an .
The  decorator / context manager makes it easy to mock classes or
objects in a module under test. The object you specify will be replaced with a
mock (or other object) during the test and restored when the test ends:



Note
When you nest patch decorators the mocks are passed in to the decorated
function in the same order they applied (the normal Python order that
decorators are applied). This means from the bottom up, so in the example
above the mock for  is passed in first.
With  it matters that you patch objects in the namespace where they
are looked up. This is normally straightforward, but for a quick guide
read where to patch.

As well as a decorator  can be used as a context manager in a with
statement:


There is also  for setting values in a dictionary just
during a scope and restoring the dictionary to its original state when the test
ends:


Mock supports the mocking of Python magic methods. The
easiest way of using magic methods is with the  class. It
allows you to do things like:


Mock allows you to assign functions (or other Mock instances) to magic methods
and they will be called appropriately. The  class is just a Mock
variant that has all of the magic methods pre-created for you (well, all the
useful ones anyway).
The following is an example of using magic methods with the ordinary Mock
class:


For ensuring that the mock objects in your tests have the same api as the
objects they are replacing, you can use auto-speccing.
Auto-speccing can be done through the autospec argument to patch, or the
 function. Auto-speccing creates mock objects that
have the same attributes and methods as the objects they are replacing, and
any functions and methods (including constructors) have the same call
signature as the real object.
This ensures that your mocks will fail in the same way as your production
code if they are used incorrectly:


 can also be used on classes, where it copies the signature of
the  method, and on callable objects where it copies the signature of
the  method.


The Mock Class¶
 is a flexible mock object intended to replace the use of stubs and
test doubles throughout your code. Mocks are callable and create attributes as
new mocks when you access them [1]. Accessing the same attribute will always
return the same mock. Mocks record how you use them, allowing you to make
assertions about what your code has done to them.
 is a subclass of  with all the magic methods
pre-created and ready to use. There are also non-callable variants, useful
when you are mocking out objects that aren’t callable:
 and 
The  decorators makes it easy to temporarily replace classes
in a particular module with a  object. By default  will create
a  for you. You can specify an alternative class of  using
the new_callable argument to .


class (spec=None, side_effect=None, return_value=DEFAULT, wraps=None, name=None, spec_set=None, unsafe=False, **kwargs)¶
Create a new  object.  takes several optional arguments
that specify the behaviour of the Mock object:

spec: This can be either a list of strings or an existing object (a
class or instance) that acts as the specification for the mock object. If
you pass in an object then a list of strings is formed by calling dir on
the object (excluding unsupported magic attributes and methods).
Accessing any attribute not in this list will raise an .
If spec is an object (rather than a list of strings) then
 returns the class of the spec object. This
allows mocks to pass  tests.

spec_set: A stricter variant of spec. If used, attempting to set
or get an attribute on the mock that isn’t on the object passed as
spec_set will raise an .

side_effect: A function to be called whenever the Mock is called. See
the  attribute. Useful for raising exceptions or
dynamically changing return values. The function is called with the same
arguments as the mock, and unless it returns , the return
value of this function is used as the return value.
Alternatively side_effect can be an exception class or instance. In
this case the exception will be raised when the mock is called.
If side_effect is an iterable then each call to the mock will return
the next value from the iterable.
A side_effect can be cleared by setting it to .

return_value: The value returned when the mock is called. By default
this is a new Mock (created on first access). See the
 attribute.

unsafe: By default if any attribute starts with assert or
assret will raise an . Passing 
will allow access to these attributes.

New in version 3.5.


wraps: Item for the mock object to wrap. If wraps is not  then
calling the Mock will pass the call through to the wrapped object
(returning the real result). Attribute access on the mock will return a
Mock object that wraps the corresponding attribute of the wrapped
object (so attempting to access an attribute that doesn’t exist will
raise an ).
If the mock has an explicit return_value set then calls are not passed
to the wrapped object and the return_value is returned instead.

name: If the mock has a name then it will be used in the repr of the
mock. This can be useful for debugging. The name is propagated to child
mocks.


Mocks can also be called with arbitrary keyword arguments. These will be
used to set attributes on the mock after it is created. See the
 method for details.


(*args, **kwargs)¶
Assert that the mock was called at least once.



New in version 3.6.




(*args, **kwargs)¶
Assert that the mock was called exactly once.



New in version 3.6.




(*args, **kwargs)¶
This method is a convenient way of asserting that calls are made in a
particular way:





(*args, **kwargs)¶
Assert that the mock was called exactly once and that that call was
with the specified arguments.





(*args, **kwargs)¶
assert the mock has been called with the specified arguments.
The assert passes if the mock has ever been called, unlike
 and  that
only pass if the call is the most recent one, and in the case of
 it must also be the only call.





(calls, any_order=False)¶
assert the mock has been called with the specified calls.
The  list is checked for the calls.
If any_order is false (the default) then the calls must be
sequential. There can be extra calls before or after the
specified calls.
If any_order is true then the calls can be in any order, but
they must all appear in .





()¶
Assert the mock was never called.



New in version 3.5.




(*, return_value=False, side_effect=False)¶
The reset_mock method resets all the call attributes on a mock object:



Changed in version 3.6: Added two keyword only argument to the reset_mock function.

This can be useful where you want to make a series of assertions that
reuse the same object. Note that  doesn’t clear the
return value,  or any child attributes you have
set using normal assignment by default. In case you want to reset
return_value or , then pass the corresponding
parameter as . Child mocks and the return value mock
(if any) are reset as well.

Note
return_value, and  are keyword only
argument.




(spec, spec_set=False)¶
Add a spec to a mock. spec can either be an object or a
list of strings. Only attributes on the spec can be fetched as
attributes from the mock.
If spec_set is true then only attributes on the spec can be set.



(mock, attribute)¶
Attach a mock as an attribute of this one, replacing its name and
parent. Calls to the attached mock will be recorded in the
 and  attributes of this one.



(**kwargs)¶
Set attributes on the mock through keyword arguments.
Attributes plus return values and side effects can be set on child
mocks using standard dot notation and unpacking a dictionary in the
method call:


The same thing can be achieved in the constructor call to mocks:


 exists to make it easier to do configuration
after the mock has been created.



()¶
 objects limit the results of  to useful results.
For mocks with a spec this includes all the permitted attributes
for the mock.
See  for what this filtering does, and how to
switch it off.



(**kw)¶
Create the child mocks for attributes and return value.
By default child mocks will be the same type as the parent.
Subclasses of Mock may want to override this to customize the way
child mocks are made.
For non-callable mocks the callable variant will be used (rather than
any custom subclass).



¶
A boolean representing whether or not the mock object has been called:





¶
An integer telling you how many times the mock object has been called:





¶
Set this to configure the value returned by calling the mock:


The default return value is a mock object and you can configure it in
the normal way:


 can also be set in the constructor:





¶
This can either be a function to be called when the mock is called,
an iterable or an exception (class or instance) to be raised.
If you pass in a function it will be called with same arguments as the
mock and unless the function returns the  singleton the
call to the mock will then return whatever the function returns. If the
function returns  then the mock will return its normal
value (from the ).
If you pass in an iterable, it is used to retrieve an iterator which
must yield a value on every call.  This value can either be an exception
instance to be raised, or a value to be returned from the call to the
mock ( handling is identical to the function case).
An example of a mock that raises an exception (to test exception
handling of an API):


Using  to return a sequence of values:


Using a callable:


 can be set in the constructor. Here’s an example that
adds one to the value the mock is called with and returns it:


Setting  to  clears it:





¶
This is either  (if the mock hasn’t been called), or the
arguments that the mock was last called with. This will be in the
form of a tuple: the first member is any ordered arguments the mock
was called with (or an empty tuple) and the second member is any
keyword arguments (or an empty dictionary).


, along with members of the lists ,
 and  are  objects.
These are tuples, so they can be unpacked to get at the individual
arguments and make more complex assertions. See
calls as tuples.



¶
This is a list of all the calls made to the mock object in sequence
(so the length of the list is the number of times it has been
called). Before any calls have been made it is an empty list. The
 object can be used for conveniently constructing lists of
calls to compare with .


Members of  are  objects. These can be
unpacked as tuples to get at the individual arguments. See
calls as tuples.



¶
As well as tracking calls to themselves, mocks also track calls to
methods and attributes, and their methods and attributes:


Members of  are  objects. These can be
unpacked as tuples to get at the individual arguments. See
calls as tuples.



¶
 records all calls to the mock object, its methods,
magic methods and return value mocks.


Members of  are  objects. These can be
unpacked as tuples to get at the individual arguments. See
calls as tuples.

Note
The way  are recorded means that where nested
calls are made, the parameters of ancestor calls are not recorded
and so will always compare equal:






¶
Normally the  attribute of an object will return its type.
For a mock object with a ,  returns the spec class
instead. This allows mock objects to pass  tests for the
object they are replacing / masquerading as:


 is assignable to, this allows a mock to pass an
 check without forcing you to use a spec:






class (spec=None, wraps=None, name=None, spec_set=None, **kwargs)¶
A non-callable version of . The constructor parameters have the same
meaning of , with the exception of return_value and side_effect
which have no meaning on a non-callable mock.

Mock objects that use a class or an instance as a  or
 are able to pass  tests:


The  classes have support for mocking magic methods. See magic
methods for the full details.
The mock classes and the  decorators all take arbitrary keyword
arguments for configuration. For the  decorators the keywords are
passed to the constructor of the mock being created. The keyword arguments
are for configuring attributes of the mock:


The return value and side effect of child mocks can be set in the same way,
using dotted notation. As you can’t use dotted names directly in a call you
have to create a dictionary and unpack it using :


A callable mock which was created with a spec (or a spec_set) will
introspect the specification object’s signature when matching calls to
the mock.  Therefore, it can match the actual call’s arguments regardless
of whether they were passed positionally or by name:


This applies to ,
,  and
.  When Autospeccing, it will also
apply to method calls on the mock object.


Changed in version 3.4: Added signature introspection on specced and autospecced mock objects.




class (*args, **kwargs)¶
A mock intended to be used as a property, or other descriptor, on a class.
 provides  and  methods
so you can specify a return value when it is fetched.
Fetching a  instance from an object calls the mock, with
no args. Setting it calls the mock with the value being set.



Because of the way mock attributes are stored you can’t directly attach a
 to a mock object. Instead you can attach it to the mock type
object:



Calling¶
Mock objects are callable. The call will return the value set as the
 attribute. The default return value is a new Mock
object; it is created the first time the return value is accessed (either
explicitly or by calling the Mock) - but it is stored and the same one
returned each time.
Calls made to the object will be recorded in the attributes
like  and .
If  is set then it will be called after the call has
been recorded, so if  raises an exception the call is still
recorded.
The simplest way to make a mock raise an exception when called is to make
 an exception class or instance:


If  is a function then whatever that function returns is what
calls to the mock return. The  function is called with the
same arguments as the mock. This allows you to vary the return value of the
call dynamically, based on the input:


If you want the mock to still return the default return value (a new mock), or
any set return value, then there are two ways of doing this. Either return
 from inside , or return :


To remove a , and return to the default behaviour, set the
 to :


The  can also be any iterable object. Repeated calls to the mock
will return values from the iterable (until the iterable is exhausted and
a  is raised):


If any members of the iterable are exceptions they will be raised instead of
returned:




Deleting Attributes¶
Mock objects create attributes on demand. This allows them to pretend to be
objects of any type.
You may want a mock object to return  to a  call, or raise an
 when an attribute is fetched. You can do this by providing
an object as a  for a mock, but that isn’t always convenient.
You “block” attributes by deleting them. Once deleted, accessing an attribute
will raise an .




Mock names and the name attribute¶
Since “name” is an argument to the  constructor, if you want your
mock object to have a “name” attribute you can’t just pass it in at creation
time. There are two alternatives. One option is to use
:


A simpler option is to simply set the “name” attribute after mock creation:




Attaching Mocks as Attributes¶
When you attach a mock as an attribute of another mock (or as the return
value) it becomes a “child” of that mock. Calls to the child are recorded in
the  and  attributes of the
parent. This is useful for configuring child mocks and then attaching them to
the parent, or for attaching mocks to a parent that records all calls to the
children and allows you to make assertions about the order of calls between
mocks:


The exception to this is if the mock has a name. This allows you to prevent
the “parenting” if for some reason you don’t want it to happen.


Mocks created for you by  are automatically given names. To
attach mocks that have names to a parent you use the 
method:





[1]The only exceptions are magic methods and attributes (those that have
leading and trailing double underscores). Mock doesn’t create these but
instead raises an . This is because the interpreter
will often implicitly request these methods, and gets very confused to
get a new Mock object when it expects a magic method. If you need magic
method support see magic methods.





The patchers¶
The patch decorators are used for patching objects only within the scope of
the function they decorate. They automatically handle the unpatching for you,
even if exceptions are raised. All of these functions can also be used in with
statements or as class decorators.

patch¶

Note
 is straightforward to use. The key is to do the patching in the
right namespace. See the section where to patch.



(target, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)¶
 acts as a function decorator, class decorator or a context
manager. Inside the body of the function or with statement, the target
is patched with a new object. When the function/with statement exits
the patch is undone.
If new is omitted, then the target is replaced with a
. If  is used as a decorator and new is
omitted, the created mock is passed in as an extra argument to the
decorated function. If  is used as a context manager the created
mock is returned by the context manager.
target should be a string in the form . The
target is imported and the specified object replaced with the new
object, so the target must be importable from the environment you are
calling  from. The target is imported when the decorated function
is executed, not at decoration time.
The spec and spec_set keyword arguments are passed to the 
if patch is creating one for you.
In addition you can pass  or , which causes
patch to pass in the object being mocked as the spec/spec_set object.
new_callable allows you to specify a different class, or callable object,
that will be called to create the new object. By default  is
used.
A more powerful form of spec is autospec. If you set 
then the mock will be created with a spec from the object being replaced.
All attributes of the mock will also have the spec of the corresponding
attribute of the object being replaced. Methods and functions being mocked
will have their arguments checked and will raise a  if they are
called with the wrong signature. For mocks
replacing a class, their return value (the ‘instance’) will have the same
spec as the class. See the  function and
Autospeccing.
Instead of  you can pass  to use an
arbitrary object as the spec instead of the one being replaced.
By default  will fail to replace attributes that don’t exist.
If you pass in , and the attribute doesn’t exist, patch will
create the attribute for you when the patched function is called, and delete
it again after the patched function has exited. This is useful for writing
tests against attributes that your production code creates at runtime. It is
off by default because it can be dangerous. With it switched on you can
write passing tests against APIs that don’t actually exist!

Note

Changed in version 3.5: If you are patching builtins in a module then you don’t
need to pass , it will be added by default.


Patch can be used as a  class decorator. It works by
decorating each test method in the class. This reduces the boilerplate
code when your test methods share a common patchings set.  finds
tests by looking for method names that start with .
By default this is , which matches the way  finds tests.
You can specify an alternative prefix by setting .
Patch can be used as a context manager, with the with statement. Here the
patching applies to the indented block after the with statement. If you
use “as” then the patched object will be bound to the name after the
“as”; very useful if  is creating a mock object for you.
 takes arbitrary keyword arguments. These will be passed to
the  (or new_callable) on construction.
,  and  are
available for alternate use-cases.

 as function decorator, creating the mock for you and passing it into
the decorated function:


Patching a class replaces the class with a  instance. If the
class is instantiated in the code under test then it will be the
 of the mock that will be used.
If the class is instantiated multiple times you could use
 to return a new mock each time. Alternatively you
can set the return_value to be anything you want.
To configure return values on methods of instances on the patched class
you must do this on the . For example:


If you use spec or spec_set and  is replacing a class, then the
return value of the created mock will have the same spec.


The new_callable argument is useful where you want to use an alternative
class to the default  for the created mock. For example, if
you wanted a  to be used:


Another use case might be to replace an object with an  instance:


When  is creating a mock for you, it is common that the first thing
you need to do is to configure the mock. Some of that configuration can be done
in the call to patch. Any arbitrary keywords you pass into the call will be
used to set attributes on the created mock:


As well as attributes on the created mock attributes, like the
 and , of child mocks can
also be configured. These aren’t syntactically valid to pass in directly as
keyword arguments, but a dictionary with these as keys can still be expanded
into a  call using :


By default, attempting to patch a function in a module (or a method or an
attribute in a class) that does not exist will fail with :


but adding  in the call to  will make the previous example
work as expected:




patch.object¶


(target, attribute, new=DEFAULT, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)¶
patch the named member (attribute) on an object (target) with a mock
object.
 can be used as a decorator, class decorator or a context
manager. Arguments new, spec, create, spec_set, autospec and
new_callable have the same meaning as for . Like ,
 takes arbitrary keyword arguments for configuring the mock
object it creates.
When used as a class decorator  honours 
for choosing which methods to wrap.

You can either call  with three arguments or two arguments. The
three argument form takes the object to be patched, the attribute name and the
object to replace the attribute with.
When calling with the two argument form you omit the replacement object, and a
mock is created for you and passed in as an extra argument to the decorated
function:


spec, create and the other arguments to  have the same
meaning as they do for .


patch.dict¶


(in_dict, values=(), clear=False, **kwargs)¶
Patch a dictionary, or dictionary like object, and restore the dictionary
to its original state after the test.
in_dict can be a dictionary or a mapping like container. If it is a
mapping then it must at least support getting, setting and deleting items
plus iterating over keys.
in_dict can also be a string specifying the name of the dictionary, which
will then be fetched by importing it.
values can be a dictionary of values to set in the dictionary. values
can also be an iterable of  pairs.
If clear is true then the dictionary will be cleared before the new
values are set.
 can also be called with arbitrary keyword arguments to set
values in the dictionary.
 can be used as a context manager, decorator or class
decorator. When used as a class decorator  honours
 for choosing which methods to wrap.

 can be used to add members to a dictionary, or simply let a test
change a dictionary, and ensure the dictionary is restored when the test
ends.




Keywords can be used in the  call to set values in the dictionary:


 can be used with dictionary like objects that aren’t actually
dictionaries. At the very minimum they must support item getting, setting,
deleting and either iteration or membership test. This corresponds to the
magic methods , ,  and either
 or .




patch.multiple¶


(target, spec=None, create=False, spec_set=None, autospec=None, new_callable=None, **kwargs)¶
Perform multiple patches in a single call. It takes the object to be
patched (either as an object or a string to fetch the object by importing)
and keyword arguments for the patches:


Use  as the value if you want  to create
mocks for you. In this case the created mocks are passed into a decorated
function by keyword, and a dictionary is returned when  is
used as a context manager.
 can be used as a decorator, class decorator or a context
manager. The arguments spec, spec_set, create, autospec and
new_callable have the same meaning as for . These arguments will
be applied to all patches done by .
When used as a class decorator  honours 
for choosing which methods to wrap.

If you want  to create mocks for you, then you can use
 as the value. If you use  as a decorator
then the created mocks are passed into the decorated function by keyword.




 can be nested with other  decorators, but put arguments
passed by keyword after any of the standard arguments created by :


If  is used as a context manager, the value returned by the
context manager is a dictionary where created mocks are keyed by name:




patch methods: start and stop¶
All the patchers have  and  methods. These make it simpler to do
patching in  methods or where you want to do multiple patches without
nesting decorators or with statements.
To use them call ,  or  as
normal and keep a reference to the returned  object. You can then
call  to put the patch in place and  to undo it.
If you are using  to create a mock for you then it will be returned by
the call to .


A typical use case for this might be for doing multiple patches in the 
method of a :



Caution
If you use this technique you must ensure that the patching is “undone” by
calling . This can be fiddlier than you might think, because if an
exception is raised in the  then  is not called.
 makes this easier:


As an added bonus you no longer need to keep a reference to the 
object.

It is also possible to stop all patches which have been started by using
.


()¶
Stop all active patches. Only stops patches started with .



patch builtins¶
You can patch any builtins within a module. The following example patches
builtin :




TEST_PREFIX¶
All of the patchers can be used as class decorators. When used in this way
they wrap every test method on the class. The patchers recognise methods that
start with  as being test methods. This is the same way that the
 finds test methods by default.
It is possible that you want to use a different prefix for your tests. You can
inform the patchers of the different prefix by setting :




Nesting Patch Decorators¶
If you want to perform multiple patches then you can simply stack up the
decorators.
You can stack up multiple patch decorators using this pattern:


Note that the decorators are applied from the bottom upwards. This is the
standard way that Python applies decorators. The order of the created mocks
passed into your test function matches this order.


Where to patch¶
 works by (temporarily) changing the object that a name points to with
another one. There can be many names pointing to any individual object, so
for patching to work you must ensure that you patch the name used by the system
under test.
The basic principle is that you patch where an object is looked up, which
is not necessarily the same place as where it is defined. A couple of
examples will help to clarify this.
Imagine we have a project that we want to test with the following structure:


Now we want to test  but we want to mock out  using
. The problem is that when we import module b, which we will have to
do then it imports  from module a. If we use  to mock out
 then it will have no effect on our test; module b already has a
reference to the real  and it looks like our patching had no
effect.
The key is to patch out  where it is used (or where it is looked up).
In this case  will actually look up  in module b,
where we have imported it. The patching should look like:


However, consider the alternative scenario where instead of  module b does  and  uses . Both
of these import forms are common. In this case the class we want to patch is
being looked up in the module and so we have to patch  instead:




Patching Descriptors and Proxy Objects¶
Both patch and patch.object correctly patch and restore descriptors: class
methods, static methods and properties. You should patch these on the class
rather than an instance. They also work with some objects
that proxy attribute access, like the django settings object.



MagicMock and magic method support¶

Mocking Magic Methods¶
 supports mocking the Python protocol methods, also known as
“magic methods”. This allows mock objects to replace containers or other
objects that implement Python protocols.
Because magic methods are looked up differently from normal methods [2], this
support has been specially implemented. This means that only specific magic
methods are supported. The supported list includes almost all of them. If
there are any missing that you need please let us know.
You mock magic methods by setting the method you are interested in to a function
or a mock instance. If you are using a function then it must take  as
the first argument [3].






One use case for this is for mocking objects used as context managers in a
 statement:


Calls to magic methods do not appear in , but they
are recorded in .

Note
If you use the spec keyword argument to create a mock then attempting to
set a magic method that isn’t in the spec will raise an .

The full list of supported magic methods is:

, ,  and 
,  and 
,  and 
Comparisons: , , , ,
 and 
Container methods: , , ,
, , , 
and 
Context manager:  and 
Unary numeric methods: ,  and 
The numeric methods (including right hand and in-place variants):
, , , , , ,
, , , ,
, , , , and 
Numeric conversion methods: , , 
and 
Descriptor methods: ,  and 
Pickling: , , ,
,  and 

The following methods exist but are not supported as they are either in use
by mock, can’t be set dynamically, or can cause problems:

, ,  and 
, , , 



Magic Mock¶
There are two  variants:  and .


class (*args, **kw)¶
 is a subclass of  with default implementations
of most of the magic methods. You can use  without having to
configure the magic methods yourself.
The constructor parameters have the same meaning as for .
If you use the spec or spec_set arguments then only magic methods
that exist in the spec will be created.



class (*args, **kw)¶
A non-callable version of .
The constructor parameters have the same meaning as for
, with the exception of return_value and
side_effect which have no meaning on a non-callable mock.

The magic methods are setup with  objects, so you can configure them
and use them in the usual way:


By default many of the protocol methods are required to return objects of a
specific type. These methods are preconfigured with a default return value, so
that they can be used without you having to do anything if you aren’t interested
in the return value. You can still set the return value manually if you want
to change the default.
Methods and their defaults:

: NotImplemented
: NotImplemented
: NotImplemented
: NotImplemented
: 1
: False
: 0
: iter([])
: False
: 1j
: 1.0
: True
: 1
: default hash for the mock
: default str for the mock
: default sizeof for the mock

For example:


The two equality methods,  and , are special.
They do the default equality comparison on identity, using the
 attribute, unless you change their return value to
return something else:


The return value of  can be any iterable object and isn’t
required to be an iterator:


If the return value is an iterator, then iterating over it once will consume
it and subsequent iterations will result in an empty list:


 has all of the supported magic methods configured except for some
of the obscure and obsolete ones. You can still set these up if you want.
Magic methods that are supported but not setup by default in  are:




,  and 
 and 
, , , ,
 and 
 and 




[2]Magic methods should be looked up on the class rather than the
instance. Different versions of Python are inconsistent about applying this
rule. The supported protocol methods should work with all supported versions
of Python.





[3]The function is basically hooked up to the class, but each 
instance is kept isolated from the others.





Helpers¶

sentinel¶


¶
The  object provides a convenient way of providing unique
objects for your tests.
Attributes are created on demand when you access them by name. Accessing
the same attribute will always return the same object. The objects
returned have a sensible repr so that test failure messages are readable.

Changed in version 3.7: The  attributes now preserve their identity when they are
 or .


Sometimes when testing you need to test that a specific object is passed as an
argument to another method, or returned. It can be common to create named
sentinel objects to test this.  provides a convenient way of
creating and testing the identity of objects like this.
In this example we monkey patch  to return :




DEFAULT¶


¶
The  object is a pre-created sentinel (actually
). It can be used by 
functions to indicate that the normal return value should be used.



call¶


(*args, **kwargs)¶
 is a helper object for making simpler assertions, for comparing with
, ,
 and .  can also be
used with .





()¶
For a call object that represents multiple calls, 
returns a list of all the intermediate calls as well as the
final call.

 is particularly useful for making assertions on “chained calls”. A
chained call is multiple calls on a single line of code. This results in
multiple entries in  on a mock. Manually constructing
the sequence of calls can be tedious.
 can construct the sequence of calls from the same
chained call:


A  object is either a tuple of (positional args, keyword args) or
(name, positional args, keyword args) depending on how it was constructed. When
you construct them yourself this isn’t particularly interesting, but the 
objects that are in the ,  and
 attributes can be introspected to get at the individual
arguments they contain.
The  objects in  and 
are two-tuples of (positional args, keyword args) whereas the  objects
in , along with ones you construct yourself, are
three-tuples of (name, positional args, keyword args).
You can use their “tupleness” to pull out the individual arguments for more
complex introspection and assertions. The positional arguments are a tuple
(an empty tuple if there are no positional arguments) and the keyword
arguments are a dictionary:






create_autospec¶


(spec, spec_set=False, instance=False, **kwargs)¶
Create a mock object using another object as a spec. Attributes on the
mock will use the corresponding attribute on the spec object as their
spec.
Functions or methods being mocked will have their arguments checked to
ensure that they are called with the correct signature.
If spec_set is  then attempting to set attributes that don’t exist
on the spec object will raise an .
If a class is used as a spec then the return value of the mock (the
instance of the class) will have the same spec. You can use a class as the
spec for an instance object by passing . The returned mock
will only be callable if instances of the mock are callable.
 also takes arbitrary keyword arguments that are passed to
the constructor of the created mock.

See Autospeccing for examples of how to use auto-speccing with
 and the autospec argument to .


ANY¶


¶

Sometimes you may need to make assertions about some of the arguments in a
call to mock, but either not care about some of the arguments or want to pull
them individually out of  and make more complex
assertions on them.
To ignore certain arguments you can pass in objects that compare equal to
everything. Calls to  and
 will then succeed no matter what was
passed in.


 can also be used in comparisons with call lists like
:




FILTER_DIR¶


¶

 is a module level variable that controls the way mock objects
respond to  (only for Python 2.6 or more recent). The default is ,
which uses the filtering described below, to only show useful members. If you
dislike this filtering, or need to switch it off for diagnostic purposes, then
set .
With filtering on,  shows only useful attributes and will
include any dynamically created attributes that wouldn’t normally be shown.
If the mock was created with a spec (or autospec of course) then all the
attributes from the original are shown, even if they haven’t been accessed
yet:


Many of the not-very-useful (private to  rather than the thing being
mocked) underscore and double underscore prefixed attributes have been
filtered from the result of calling  on a . If you dislike this
behaviour you can switch it off by setting the module level switch
:


Alternatively you can just use  (instance members) and
 (type members) to bypass the filtering irrespective of
.


mock_open¶


(mock=None, read_data=None)¶
A helper function to create a mock to replace the use of . It works
for  called directly or used as a context manager.
The mock argument is the mock object to configure. If  (the
default) then a  will be created for you, with the API limited
to methods or attributes available on standard file handles.
read_data is a string for the ,
, and  methods
of the file handle to return.  Calls to those methods will take data from
read_data until it is depleted.  The mock of these methods is pretty
simplistic: every time the mock is called, the read_data is rewound to
the start.  If you need more control over the data that you are feeding to
the tested code you will need to customize this mock for yourself.  When that
is insufficient, one of the in-memory filesystem packages on PyPI can offer a realistic filesystem for testing.

Changed in version 3.4: Added  and  support.
The mock of  changed to consume read_data rather
than returning it on each call.


Changed in version 3.5: read_data is now reset on each call to the mock.


Changed in version 3.7.1: Added  to implementation so that iteration (such as in for
loops) correctly consumes read_data.


Using  as a context manager is a great way to ensure your file handles
are closed properly and is becoming common:


The issue is that even if you mock out the call to  it is the
returned object that is used as a context manager (and has  and
 called).
Mocking context managers with a  is common enough and fiddly
enough that a helper function is useful.


And for reading files:




Autospeccing¶
Autospeccing is based on the existing  feature of mock. It limits the
api of mocks to the api of an original object (the spec), but it is recursive
(implemented lazily) so that attributes of mocks only have the same api as
the attributes of the spec. In addition mocked functions / methods have the
same call signature as the original so they raise a  if they are
called incorrectly.
Before I explain how auto-speccing works, here’s why it is needed.
 is a very powerful and flexible object, but it suffers from two flaws
when used to mock out objects from a system under test. One of these flaws is
specific to the  api and the other is a more general problem with using
mock objects.
First the problem specific to .  has two assert methods that are
extremely handy:  and
.


Because mocks auto-create attributes on demand, and allow you to call them
with arbitrary arguments, if you misspell one of these assert methods then
your assertion is gone:


Your tests can pass silently and incorrectly because of the typo.
The second issue is more general to mocking. If you refactor some of your
code, rename members and so on, any tests for code that is still using the
old api but uses mocks instead of the real objects will still pass. This
means your tests can all pass even though your code is broken.
Note that this is another reason why you need integration tests as well as
unit tests. Testing everything in isolation is all fine and dandy, but if you
don’t test how your units are “wired together” there is still lots of room
for bugs that tests might have caught.
 already provides a feature to help with this, called speccing. If you
use a class or instance as the  for a mock then you can only access
attributes on the mock that exist on the real class:


The spec only applies to the mock itself, so we still have the same issue
with any methods on the mock:


Auto-speccing solves this problem. You can either pass  to
 /  or use the  function to create a
mock with a spec. If you use the  argument to  then the
object that is being replaced will be used as the spec object. Because the
speccing is done “lazily” (the spec is created as attributes on the mock are
accessed) you can use it with very complex or deeply nested objects (like
modules that import modules that import modules) without a big performance
hit.
Here’s an example of it in use:


You can see that  has a spec.  takes two
arguments in the constructor (one of which is self). Here’s what happens if
we try to call it incorrectly:


The spec also applies to instantiated classes (i.e. the return value of
specced mocks):


 objects are not callable, so the return value of instantiating our
mocked out  is a non-callable mock. With the spec in place
any typos in our asserts will raise the correct error:


In many cases you will just be able to add  to your existing
 calls and then be protected against bugs due to typos and api
changes.
As well as using autospec through  there is a
 for creating autospecced mocks directly:


This isn’t without caveats and limitations however, which is why it is not
the default behaviour. In order to know what attributes are available on the
spec object, autospec has to introspect (access attributes) the spec. As you
traverse attributes on the mock a corresponding traversal of the original
object is happening under the hood. If any of your specced objects have
properties or descriptors that can trigger code execution then you may not be
able to use autospec. On the other hand it is much better to design your
objects so that introspection is safe [4].
A more serious problem is that it is common for instance attributes to be
created in the  method and not to exist on the class at all.
autospec can’t know about any dynamically created attributes and restricts
the api to visible attributes.


There are a few different ways of resolving this problem. The easiest, but
not necessarily the least annoying, way is to simply set the required
attributes on the mock after creation. Just because autospec doesn’t allow
you to fetch attributes that don’t exist on the spec it doesn’t prevent you
setting them:


There is a more aggressive version of both spec and autospec that does
prevent you setting non-existent attributes. This is useful if you want to
ensure your code only sets valid attributes too, but obviously it prevents
this particular scenario:


Probably the best way of solving the problem is to add class attributes as
default values for instance members initialised in . Note that if
you are only setting default attributes in  then providing them via
class attributes (shared between instances of course) is faster too. e.g.


This brings up another issue. It is relatively common to provide a default
value of  for members that will later be an object of a different type.
 would be useless as a spec because it wouldn’t let you access any
attributes or methods on it. As  is never going to be useful as a
spec, and probably indicates a member that will normally of some other type,
autospec doesn’t use a spec for members that are set to . These will
just be ordinary mocks (well - MagicMocks):


If modifying your production classes to add defaults isn’t to your liking
then there are more options. One of these is simply to use an instance as the
spec rather than the class. The other is to create a subclass of the
production class and add the defaults to the subclass without affecting the
production class. Both of these require you to use an alternative object as
the spec. Thankfully  supports this - you can simply pass the
alternative object as the autospec argument:





[4]This only applies to classes or already instantiated objects. Calling
a mocked class to create a mock instance does not create a real instance.
It is only attribute lookups - along with calls to  - that are done.




Sealing mocks¶


(mock)¶
Seal will disable the automatic creation of mocks when accessing an attribute of
the mock being sealed or any of its attributes that are already mocks recursively.
If a mock instance with a name or a spec is assigned to an attribute
it won’t be considered in the sealing chain. This allows one to prevent seal from
fixing part of the mock object.



New in version 3.7.





