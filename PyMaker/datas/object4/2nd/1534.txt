link:
library/numbers.html#implementing-the-arithmetic-operations

docs:

Implementing the arithmetic operations¶
We want to implement the arithmetic operations so that mixed-mode
operations either call an implementation whose author knew about the
types of both arguments, or convert both to the nearest built in type
and do the operation there. For subtypes of , this
means that  and  should be defined as:


There are 5 different cases for a mixed-type operation on subclasses
of . I’ll refer to all of the above code that doesn’t
refer to  and  as
“boilerplate”.  will be an instance of , which is a subtype
of  (), and . I’ll consider :


If  defines an  which accepts , all is
well.
If  falls back to the boilerplate code, and it were to
return a value from , we’d miss the possibility
that  defines a more intelligent , so the
boilerplate should return  from
. (Or  may not implement  at
all.)
Then ’s  gets a chance. If it accepts
, all is well.
If it falls back to the boilerplate, there are no more possible
methods to try, so this is where the default implementation
should live.
If , Python tries  before
. This is ok, because it was implemented with
knowledge of , so it can handle those instances before
delegating to .


If  and  without sharing any other knowledge,
then the appropriate shared operation is the one involving the built
in , and both  s land there, so .
Because most of the operations on any given type will be very similar,
it can be useful to define a helper function which generates the
forward and reverse instances of any given operator. For example,
 uses:


