link:
library/turtle.html

docs:


 — Turtle graphics¶
Source code: Lib/turtle.py


Introduction¶
Turtle graphics is a popular way for introducing programming to kids.  It was
part of the original Logo programming language developed by Wally Feurzig and
Seymour Papert in 1966.
Imagine a robotic turtle starting at (0, 0) in the x-y plane.  After an , give it the
command , and it moves (on-screen!) 15 pixels in the
direction it is facing, drawing a line as it moves.  Give it the command
, and it rotates in-place 25 degrees clockwise.

Turtle star
Turtle can draw intricate shapes using programs that repeat simple
moves.




By combining together these and similar commands, intricate shapes and pictures
can easily be drawn.
The  module is an extended reimplementation of the same-named
module from the Python standard distribution up to version Python 2.5.
It tries to keep the merits of the old turtle module and to be (nearly) 100%
compatible with it.  This means in the first place to enable the learning
programmer to use all the commands, classes and methods interactively when using
the module from within IDLE run with the  switch.
The turtle module provides turtle graphics primitives, in both object-oriented
and procedure-oriented ways.  Because it uses  for the underlying
graphics, it needs a version of Python installed with Tk support.
The object-oriented interface uses essentially two+two classes:

The  class defines graphics windows as a playground for
the drawing turtles.  Its constructor needs a  or a
 as argument.  It should be used when  is
used as part of some application.
The function  returns a singleton object of a
 subclass. This function should be used when
 is used as a standalone tool for doing graphics.
As a singleton object, inheriting from its class is not possible.
All methods of TurtleScreen/Screen also exist as functions, i.e. as part of
the procedure-oriented interface.

 (alias: ) defines Turtle objects which draw
on a .  Its constructor needs a Canvas, ScrolledCanvas
or TurtleScreen as argument, so the RawTurtle objects know where to draw.
Derived from RawTurtle is the subclass  (alias: ),
which draws on “the”  instance which is automatically
created, if not already present.
All methods of RawTurtle/Turtle also exist as functions, i.e. part of the
procedure-oriented interface.


The procedural interface provides functions which are derived from the methods
of the classes  and .  They have the same names as
the corresponding methods.  A screen object is automatically created whenever a
function derived from a Screen method is called.  An (unnamed) turtle object is
automatically created whenever any of the functions derived from a Turtle method
is called.
To use multiple turtles on a screen one has to use the object-oriented interface.

Note
In the following documentation the argument list for functions is given.
Methods, of course, have the additional first argument self which is
omitted here.



Overview of available Turtle and Screen methods¶

Turtle methods¶

Turtle motion

Move and draw

 | 
 |  | 
 | 
 | 
 |  | 


 | 










Tell Turtle’s state

 | 







Setting and measurement







Pen control

Drawing state

 |  | 
 |  | 
 | 




Color control






Filling






More drawing control








Turtle state

Visibility

 | 
 | 



Appearance



 | 










Using events






Special Turtle methods





 | 








Methods of TurtleScreen/Screen¶

Window control



 | 
 | 




Animation control






Using screen events


 | 

 | 

 | 


Settings and special methods





 | 





Input methods





Methods specific to Screen











Methods of RawTurtle/Turtle and corresponding functions¶
Most of the examples in this section refer to a Turtle instance called
.

Turtle motion¶


(distance)¶

(distance)¶




Parameters:distance – a number (integer or float)



Move the turtle forward by the specified distance, in the direction the
turtle is headed.





(distance)¶

(distance)¶

(distance)¶




Parameters:distance – a number



Move the turtle backward by distance, opposite to the direction the
turtle is headed.  Do not change the turtle’s heading.





(angle)¶

(angle)¶




Parameters:angle – a number (integer or float)



Turn turtle right by angle units.  (Units are by default degrees, but
can be set via the  and  functions.)  Angle
orientation depends on the turtle mode, see .





(angle)¶

(angle)¶




Parameters:angle – a number (integer or float)



Turn turtle left by angle units.  (Units are by default degrees, but
can be set via the  and  functions.)  Angle
orientation depends on the turtle mode, see .





(x, y=None)¶

(x, y=None)¶

(x, y=None)¶




Parameters:
x – a number or a pair/vector of numbers
y – a number or 





If y is , x must be a pair of coordinates or a 
(e.g. as returned by ).
Move turtle to an absolute position.  If the pen is down, draw line.  Do
not change the turtle’s orientation.





(x)¶




Parameters:x – a number (integer or float)



Set the turtle’s first coordinate to x, leave second coordinate
unchanged.





(y)¶




Parameters:y – a number (integer or float)



Set the turtle’s second coordinate to y, leave first coordinate unchanged.





(to_angle)¶

(to_angle)¶




Parameters:to_angle – a number (integer or float)



Set the orientation of the turtle to to_angle.  Here are some common
directions in degrees:






standard mode
logo mode



0 - east
0 - north

90 - north
90 - east

180 - west
180 - south

270 - south
270 - west








()¶
Move turtle to the origin – coordinates (0,0) – and set its heading to
its start-orientation (which depends on the mode, see ).





(radius, extent=None, steps=None)¶




Parameters:
radius – a number
extent – a number (or )
steps – an integer (or )





Draw a circle with given radius.  The center is radius units left of
the turtle; extent – an angle – determines which part of the circle
is drawn.  If extent is not given, draw the entire circle.  If extent
is not a full circle, one endpoint of the arc is the current pen
position.  Draw the arc in counterclockwise direction if radius is
positive, otherwise in clockwise direction.  Finally the direction of the
turtle is changed by the amount of extent.
As the circle is approximated by an inscribed regular polygon, steps
determines the number of steps to use.  If not given, it will be
calculated automatically.  May be used to draw regular polygons.





(size=None, *color)¶




Parameters:
size – an integer >= 1 (if given)
color – a colorstring or a numeric color tuple





Draw a circular dot with diameter size, using color.  If size is
not given, the maximum of pensize+4 and 2*pensize is used.





()¶
Stamp a copy of the turtle shape onto the canvas at the current turtle
position.  Return a stamp_id for that stamp, which can be used to delete
it by calling .





(stampid)¶




Parameters:stampid – an integer, must be return value of previous
 call



Delete stamp with given stampid.





(n=None)¶




Parameters:n – an integer (or )



Delete all or first/last n of turtle’s stamps.  If n is , delete
all stamps, if n > 0 delete first n stamps, else if n < 0 delete
last n stamps.





()¶
Undo (repeatedly) the last turtle action(s).  Number of available
undo actions is determined by the size of the undobuffer.





(speed=None)¶




Parameters:speed – an integer in the range 0..10 or a speedstring (see below)



Set the turtle’s speed to an integer value in the range 0..10.  If no
argument is given, return current speed.
If input is a number greater than 10 or smaller than 0.5, speed is set
to 0.  Speedstrings are mapped to speedvalues as follows:

“fastest”:  0
“fast”:  10
“normal”:  6
“slow”:  3
“slowest”:  1

Speeds from 1 to 10 enforce increasingly faster animation of line drawing
and turtle turning.
Attention: speed = 0 means that no animation takes
place. forward/back makes turtle jump and likewise left/right make the
turtle turn instantly.





Tell Turtle’s state¶


()¶

()¶
Return the turtle’s current location (x,y) (as a  vector).





(x, y=None)¶




Parameters:
x – a number or a pair/vector of numbers or a turtle instance
y – a number if x is a number, else 





Return the angle between the line from turtle position to position specified
by (x,y), the vector or the other turtle.  This depends on the turtle’s start
orientation which depends on the mode - “standard”/”world” or “logo”).





()¶
Return the turtle’s x coordinate.





()¶
Return the turtle’s y coordinate.





()¶
Return the turtle’s current heading (value depends on the turtle mode, see
).





(x, y=None)¶




Parameters:
x – a number or a pair/vector of numbers or a turtle instance
y – a number if x is a number, else 





Return the distance from the turtle to (x,y), the given vector, or the given
other turtle, in turtle step units.





Settings for measurement¶


(fullcircle=360.0)¶




Parameters:fullcircle – a number



Set angle measurement units, i.e. set number of “degrees” for a full circle.
Default value is 360 degrees.





()¶
Set the angle measurement units to radians.  Equivalent to
.





Pen control¶

Drawing state¶


()¶

()¶

()¶
Pull the pen down – drawing when moving.



()¶

()¶

()¶
Pull the pen up – no drawing when moving.



(width=None)¶

(width=None)¶




Parameters:width – a positive number



Set the line thickness to width or return it.  If resizemode is set to
“auto” and turtleshape is a polygon, that polygon is drawn with the same line
thickness.  If no argument is given, the current pensize is returned.





(pen=None, **pendict)¶




Parameters:
pen – a dictionary with some or all of the below listed keys
pendict – one or more keyword-arguments with the below listed keys as keywords





Return or set the pen’s attributes in a “pen-dictionary” with the following
key/value pairs:

“shown”: True/False
“pendown”: True/False
“pencolor”: color-string or color-tuple
“fillcolor”: color-string or color-tuple
“pensize”: positive number
“speed”: number in range 0..10
“resizemode”: “auto” or “user” or “noresize”
“stretchfactor”: (positive number, positive number)
“outline”: positive number
“tilt”: number

This dictionary can be used as argument for a subsequent call to 
to restore the former pen-state.  Moreover one or more of these attributes
can be provided as keyword-arguments.  This can be used to set several pen
attributes in one statement.





()¶
Return  if pen is down,  if it’s up.





Color control¶


(*args)¶
Return or set the pencolor.
Four input formats are allowed:


Return the current pencolor as color specification string or
as a tuple (see example).  May be used as input to another
color/pencolor/fillcolor call.

Set pencolor to colorstring, which is a Tk color specification string,
such as , , or .

Set pencolor to the RGB color represented by the tuple of r, g, and
b.  Each of r, g, and b must be in the range 0..colormode, where
colormode is either 1.0 or 255 (see ).


Set pencolor to the RGB color represented by r, g, and b.  Each of
r, g, and b must be in the range 0..colormode.
If turtleshape is a polygon, the outline of that polygon is drawn with the
newly set pencolor.







(*args)¶
Return or set the fillcolor.
Four input formats are allowed:


Return the current fillcolor as color specification string, possibly
in tuple format (see example).  May be used as input to another
color/pencolor/fillcolor call.

Set fillcolor to colorstring, which is a Tk color specification string,
such as , , or .

Set fillcolor to the RGB color represented by the tuple of r, g, and
b.  Each of r, g, and b must be in the range 0..colormode, where
colormode is either 1.0 or 255 (see ).


Set fillcolor to the RGB color represented by r, g, and b.  Each of
r, g, and b must be in the range 0..colormode.
If turtleshape is a polygon, the interior of that polygon is drawn
with the newly set fillcolor.







(*args)¶
Return or set pencolor and fillcolor.
Several input formats are allowed.  They use 0 to 3 arguments as
follows:


Return the current pencolor and the current fillcolor as a pair of color
specification strings or tuples as returned by  and
.
, , 
Inputs as in , set both, fillcolor and pencolor, to the
given value.
, 

Equivalent to  and 
and analogously if the other input format is used.
If turtleshape is a polygon, outline and interior of that polygon is drawn
with the newly set colors.





See also: Screen method .


Filling¶


()¶
Return fillstate ( if filling,  else).





()¶
To be called just before drawing a shape to be filled.



()¶
Fill the shape drawn after the last call to .





More drawing control¶


()¶
Delete the turtle’s drawings from the screen, re-center the turtle and set
variables to the default values.





()¶
Delete the turtle’s drawings from the screen.  Do not move turtle.  State and
position of the turtle as well as drawings of other turtles are not affected.



(arg, move=False, align="left", font=("Arial", 8, "normal"))¶




Parameters:
arg – object to be written to the TurtleScreen
move – True/False
align – one of the strings “left”, “center” or right”
font – a triple (fontname, fontsize, fonttype)





Write text - the string representation of arg - at the current turtle
position according to align (“left”, “center” or right”) and with the given
font.  If move is true, the pen is moved to the bottom-right corner of the
text.  By default, move is .






Turtle state¶

Visibility¶


()¶

()¶
Make the turtle invisible.  It’s a good idea to do this while you’re in the
middle of doing some complex drawing, because hiding the turtle speeds up the
drawing observably.





()¶

()¶
Make the turtle visible.





()¶
Return  if the Turtle is shown,  if it’s hidden.





Appearance¶


(name=None)¶




Parameters:name – a string which is a valid shapename



Set turtle shape to shape with given name or, if name is not given, return
name of current shape.  Shape with name must exist in the TurtleScreen’s
shape dictionary.  Initially there are the following polygon shapes: “arrow”,
“turtle”, “circle”, “square”, “triangle”, “classic”.  To learn about how to
deal with shapes see Screen method .





(rmode=None)¶




Parameters:rmode – one of the strings “auto”, “user”, “noresize”



Set resizemode to one of the values: “auto”, “user”, “noresize”.  If rmode
is not given, return current resizemode.  Different resizemodes have the
following effects:

“auto”: adapts the appearance of the turtle corresponding to the value of pensize.
“user”: adapts the appearance of the turtle according to the values of
stretchfactor and outlinewidth (outline), which are set by
.
“noresize”: no adaption of the turtle’s appearance takes place.

resizemode(“user”) is called by  when used with arguments.





(stretch_wid=None, stretch_len=None, outline=None)¶

(stretch_wid=None, stretch_len=None, outline=None)¶




Parameters:
stretch_wid – positive number
stretch_len – positive number
outline – positive number





Return or set the pen’s attributes x/y-stretchfactors and/or outline.  Set
resizemode to “user”.  If and only if resizemode is set to “user”, the turtle
will be displayed stretched according to its stretchfactors: stretch_wid is
stretchfactor perpendicular to its orientation, stretch_len is
stretchfactor in direction of its orientation, outline determines the width
of the shapes’s outline.





(shear=None)¶




Parameters:shear – number (optional)



Set or return the current shearfactor. Shear the turtleshape according to
the given shearfactor shear, which is the tangent of the shear angle.
Do not change the turtle’s heading (direction of movement).
If shear is not given: return the current shearfactor, i. e. the
tangent of the shear angle, by which lines parallel to the
heading of the turtle are sheared.





(angle)¶




Parameters:angle – a number



Rotate the turtleshape by angle from its current tilt-angle, but do not
change the turtle’s heading (direction of movement).





(angle)¶




Parameters:angle – a number



Rotate the turtleshape to point in the direction specified by angle,
regardless of its current tilt-angle.  Do not change the turtle’s heading
(direction of movement).



Deprecated since version 3.1.




(angle=None)¶




Parameters:angle – a number (optional)



Set or return the current tilt-angle. If angle is given, rotate the
turtleshape to point in the direction specified by angle,
regardless of its current tilt-angle. Do not change the turtle’s
heading (direction of movement).
If angle is not given: return the current tilt-angle, i. e. the angle
between the orientation of the turtleshape and the heading of the
turtle (its direction of movement).





(t11=None, t12=None, t21=None, t22=None)¶




Parameters:
t11 – a number (optional)
t12 – a number (optional)
t21 – a number (optional)
t12 – a number (optional)





Set or return the current transformation matrix of the turtle shape.
If none of the matrix elements are given, return the transformation
matrix as a tuple of 4 elements.
Otherwise set the given elements and transform the turtleshape
according to the matrix consisting of first row t11, t12 and
second row t21, 22. The determinant t11 * t22 - t12 * t21 must not be
zero, otherwise an error is raised.
Modify stretchfactor, shearfactor and tiltangle according to the
given matrix.





()¶
Return the current shape polygon as tuple of coordinate pairs. This
can be used to define a new shape or components of a compound shape.






Using events¶


(fun, btn=1, add=None)¶




Parameters:
fun – a function with two arguments which will be called with the
coordinates of the clicked point on the canvas
btn – number of the mouse-button, defaults to 1 (left mouse button)
add –  or  – if , a new binding will be
added, otherwise it will replace a former binding





Bind fun to mouse-click events on this turtle.  If fun is ,
existing bindings are removed.  Example for the anonymous turtle, i.e. the
procedural way:





(fun, btn=1, add=None)¶




Parameters:
fun – a function with two arguments which will be called with the
coordinates of the clicked point on the canvas
btn – number of the mouse-button, defaults to 1 (left mouse button)
add –  or  – if , a new binding will be
added, otherwise it will replace a former binding





Bind fun to mouse-button-release events on this turtle.  If fun is
, existing bindings are removed.





(fun, btn=1, add=None)¶




Parameters:
fun – a function with two arguments which will be called with the
coordinates of the clicked point on the canvas
btn – number of the mouse-button, defaults to 1 (left mouse button)
add –  or  – if , a new binding will be
added, otherwise it will replace a former binding





Bind fun to mouse-move events on this turtle.  If fun is ,
existing bindings are removed.
Remark: Every sequence of mouse-move-events on a turtle is preceded by a
mouse-click event on that turtle.


Subsequently, clicking and dragging the Turtle will move it across
the screen thereby producing handdrawings (if pen is down).



Special Turtle methods¶


()¶
Start recording the vertices of a polygon.  Current turtle position is first
vertex of polygon.



()¶
Stop recording the vertices of a polygon.  Current turtle position is last
vertex of polygon.  This will be connected with the first vertex.



()¶
Return the last recorded polygon.





()¶
Create and return a clone of the turtle with same position, heading and
turtle properties.





()¶

()¶
Return the Turtle object itself.  Only reasonable use: as a function to
return the “anonymous turtle”:





()¶
Return the  object the turtle is drawing on.
TurtleScreen methods can then be called for that object.





(size)¶




Parameters:size – an integer or 



Set or disable undobuffer.  If size is an integer an empty undobuffer of
given size is installed.  size gives the maximum number of turtle actions
that can be undone by the  method/function.  If size is
, the undobuffer is disabled.





()¶
Return number of entries in the undobuffer.





Compound shapes¶
To use compound turtle shapes, which consist of several polygons of different
color, you must use the helper class  explicitly as described
below:

Create an empty Shape object of type “compound”.

Add as many components to this object as desired, using the
 method.
For example:



Now add the Shape to the Screen’s shapelist and use it:





Note
The  class is used internally by the 
method in different ways.  The application programmer has to deal with the
Shape class only when using compound shapes like shown above!




Methods of TurtleScreen/Screen and corresponding functions¶
Most of the examples in this section refer to a TurtleScreen instance called
.

Window control¶


(*args)¶




Parameters:args – a color string or three numbers in the range 0..colormode or a
3-tuple of such numbers



Set or return background color of the TurtleScreen.





(picname=None)¶




Parameters:picname – a string, name of a gif-file or , or 



Set background image or return name of current backgroundimage.  If picname
is a filename, set the corresponding image as background.  If picname is
, delete background image, if present.  If picname is ,
return the filename of the current backgroundimage.





()

()¶
Delete all drawings and all turtles from the TurtleScreen.  Reset the now
empty TurtleScreen to its initial state: white background, no background
image, no event bindings and tracing on.

Note
This TurtleScreen method is available as a global function only under the
name .  The global function  is a different one
derived from the Turtle method .




()

()¶
Reset all Turtles on the Screen to their initial state.

Note
This TurtleScreen method is available as a global function only under the
name .  The global function  is another one
derived from the Turtle method .




(canvwidth=None, canvheight=None, bg=None)¶




Parameters:
canvwidth – positive integer, new width of canvas in pixels
canvheight – positive integer, new height of canvas in pixels
bg – colorstring or color-tuple, new background color





If no arguments are given, return current (canvaswidth, canvasheight).  Else
resize the canvas the turtles are drawing on.  Do not alter the drawing
window.  To observe hidden parts of the canvas, use the scrollbars. With this
method, one can make visible those parts of a drawing which were outside the
canvas before.


e.g. to search for an erroneously escaped turtle ;-)



(llx, lly, urx, ury)¶




Parameters:
llx – a number, x-coordinate of lower left corner of canvas
lly – a number, y-coordinate of lower left corner of canvas
urx – a number, x-coordinate of upper right corner of canvas
ury – a number, y-coordinate of upper right corner of canvas





Set up user-defined coordinate system and switch to mode “world” if
necessary.  This performs a .  If mode “world” is already
active, all drawings are redrawn according to the new coordinates.
ATTENTION: in user-defined coordinate systems angles may appear
distorted.





Animation control¶


(delay=None)¶




Parameters:delay – positive integer



Set or return the drawing delay in milliseconds.  (This is approximately
the time interval between two consecutive canvas updates.)  The longer the
drawing delay, the slower the animation.
Optional argument:





(n=None, delay=None)¶




Parameters:
n – nonnegative integer
delay – nonnegative integer





Turn turtle animation on/off and set delay for update drawings.  If
n is given, only each n-th regular screen update is really
performed.  (Can be used to accelerate the drawing of complex
graphics.)  When called without arguments, returns the currently
stored value of n. Second argument sets delay value (see
).





()¶
Perform a TurtleScreen update. To be used when tracer is turned off.

See also the RawTurtle/Turtle method .


Using screen events¶


(xdummy=None, ydummy=None)¶
Set focus on TurtleScreen (in order to collect key-events).  Dummy arguments
are provided in order to be able to pass  to the onclick method.



(fun, key)¶

(fun, key)¶




Parameters:
fun – a function with no arguments or 
key – a string: key (e.g. “a”) or key-symbol (e.g. “space”)





Bind fun to key-release event of key.  If fun is , event bindings
are removed. Remark: in order to be able to register key-events, TurtleScreen
must have the focus. (See method .)





(fun, key=None)¶




Parameters:
fun – a function with no arguments or 
key – a string: key (e.g. “a”) or key-symbol (e.g. “space”)





Bind fun to key-press event of key if key is given,
or to any key-press-event if no key is given.
Remark: in order to be able to register key-events, TurtleScreen
must have focus. (See method .)





(fun, btn=1, add=None)

(fun, btn=1, add=None)¶




Parameters:
fun – a function with two arguments which will be called with the
coordinates of the clicked point on the canvas
btn – number of the mouse-button, defaults to 1 (left mouse button)
add –  or  – if , a new binding will be
added, otherwise it will replace a former binding





Bind fun to mouse-click events on this screen.  If fun is ,
existing bindings are removed.
Example for a TurtleScreen instance named  and a Turtle instance
named turtle:



Note
This TurtleScreen method is available as a global function only under the
name .  The global function  is another one
derived from the Turtle method .




(fun, t=0)¶




Parameters:
fun – a function with no arguments
t – a number >= 0





Install a timer that calls fun after t milliseconds.





()¶

()¶
Starts event loop - calling Tkinter’s mainloop function.
Must be the last statement in a turtle graphics program.
Must not be used if a script is run from within IDLE in -n mode
(No subprocess) - for interactive use of turtle graphics.





Input methods¶


(title, prompt)¶




Parameters:
title – string
prompt – string





Pop up a dialog window for input of a string. Parameter title is
the title of the dialog window, prompt is a text mostly describing
what information to input.
Return the string input. If the dialog is canceled, return .





(title, prompt, default=None, minval=None, maxval=None)¶




Parameters:
title – string
prompt – string
default – number (optional)
minval – number (optional)
maxval – number (optional)





Pop up a dialog window for input of a number. title is the title of the
dialog window, prompt is a text mostly describing what numerical information
to input. default: default value, minval: minimum value for input,
maxval: maximum value for input
The number input must be in the range minval .. maxval if these are
given. If not, a hint is issued and the dialog remains open for
correction.
Return the number input. If the dialog is canceled,  return .





Settings and special methods¶


(mode=None)¶




Parameters:mode – one of the strings “standard”, “logo” or “world”



Set turtle mode (“standard”, “logo” or “world”) and perform reset.  If mode
is not given, current mode is returned.
Mode “standard” is compatible with old .  Mode “logo” is
compatible with most Logo turtle graphics.  Mode “world” uses user-defined
“world coordinates”. Attention: in this mode angles appear distorted if
 unit-ratio doesn’t equal 1.







Mode
Initial turtle heading
positive angles



“standard”
to the right (east)
counterclockwise

“logo”
upward    (north)
clockwise








(cmode=None)¶




Parameters:cmode – one of the values 1.0 or 255



Return the colormode or set it to 1.0 or 255.  Subsequently r, g, b
values of color triples have to be in the range 0..cmode.





()¶
Return the Canvas of this TurtleScreen.  Useful for insiders who know what to
do with a Tkinter Canvas.





()¶
Return a list of names of all currently available turtle shapes.





(name, shape=None)¶

(name, shape=None)¶
There are three different ways to call this function:

name is the name of a gif-file and shape is : Install the
corresponding image shape.



Note
Image shapes do not rotate when turning the turtle, so they do not
display the heading of the turtle!


name is an arbitrary string and shape is a tuple of pairs of
coordinates: Install the corresponding polygon shape.



name is an arbitrary string and shape is a (compound) 
object: Install the corresponding compound shape.


Add a turtle shape to TurtleScreen’s shapelist.  Only thusly registered
shapes can be used by issuing the command .



()¶
Return the list of turtles on the screen.





()¶
Return the height of the turtle window.





()¶
Return the width of the turtle window.





Methods specific to Screen, not inherited from TurtleScreen¶


()¶
Shut the turtlegraphics window.



()¶
Bind bye() method to mouse clicks on the Screen.
If the value “using_IDLE” in the configuration dictionary is 
(default value), also enter mainloop.  Remark: If IDLE with the  switch
(no subprocess) is used, this value should be set to  in
.  In this case IDLE’s own mainloop is active also for the
client script.



(width=_CFG["width"], height=_CFG["height"], startx=_CFG["leftright"], starty=_CFG["topbottom"])¶
Set the size and position of the main window.  Default values of arguments
are stored in the configuration dictionary and can be changed via a
 file.




Parameters:
width – if an integer, a size in pixels, if a float, a fraction of the
screen; default is 50% of screen
height – if an integer, the height in pixels, if a float, a fraction of
the screen; default is 75% of screen
startx – if positive, starting position in pixels from the left
edge of the screen, if negative from the right edge, if ,
center window horizontally
starty – if positive, starting position in pixels from the top
edge of the screen, if negative from the bottom edge, if ,
center window vertically










(titlestring)¶




Parameters:titlestring – a string that is shown in the titlebar of the turtle
graphics window



Set title of turtle window to titlestring.






Public classes¶


class (canvas)¶

class (canvas)¶




Parameters:canvas – a , a  or a




Create a turtle.  The turtle has all methods described above as “methods of
Turtle/RawTurtle”.



class ¶
Subclass of RawTurtle, has the same interface but draws on a default
 object created automatically when needed for the first time.



class (cv)¶




Parameters:cv – a 



Provides screen oriented methods like  etc. that are described
above.



class ¶
Subclass of TurtleScreen, with four methods added.



class (master)¶




Parameters:master – some Tkinter widget to contain the ScrolledCanvas, i.e.
a Tkinter-canvas with scrollbars added



Used by class Screen, which thus automatically provides a ScrolledCanvas as
playground for the turtles.



class (type_, data)¶




Parameters:type_ – one of the strings “polygon”, “image”, “compound”



Data structure modeling shapes.  The pair  must follow this
specification:






type_
data



“polygon”
a polygon-tuple, i.e. a tuple of pairs of coordinates

“image”
an image  (in this form only used internally!)

“compound”
 (a compound shape has to be constructed using the
 method)





(poly, fill, outline=None)¶




Parameters:
poly – a polygon, i.e. a tuple of pairs of numbers
fill – a color the poly will be filled with
outline – a color for the poly’s outline (if given)





Example:


See Compound shapes.




class (x, y)¶
A two-dimensional vector class, used as a helper class for implementing
turtle graphics.  May be useful for turtle graphics programs too.  Derived
from tuple, so a vector is a tuple!
Provides (for a, b vectors, k number):

 vector addition
 vector subtraction
 inner product
 and  multiplication with scalar
 absolute value of a
 rotation




Help and configuration¶

How to use help¶
The public methods of the Screen and Turtle classes are documented extensively
via docstrings.  So these can be used as online-help via the Python help
facilities:

When using IDLE, tooltips show the signatures and first lines of the
docstrings of typed in function-/method calls.

Calling  on methods or functions displays the docstrings:



The docstrings of the functions which are derived from methods have a modified
form:




These modified docstrings are created automatically together with the function
definitions that are derived from the methods at import time.


Translation of docstrings into different languages¶
There is a utility to create a dictionary the keys of which are the method names
and the values of which are the docstrings of the public methods of the classes
Screen and Turtle.


(filename="turtle_docstringdict")¶




Parameters:filename – a string, used as filename



Create and write docstring-dictionary to a Python script with the given
filename.  This function has to be called explicitly (it is not used by the
turtle graphics classes).  The docstring dictionary will be written to the
Python script .  It is intended to serve as a template
for translation of the docstrings into different languages.

If you (or your students) want to use  with online help in your
native language, you have to translate the docstrings and save the resulting
file as e.g. .
If you have an appropriate entry in your  file this dictionary
will be read in at import time and will replace the original English docstrings.
At the time of this writing there are docstring dictionaries in German and in
Italian.  (Requests please to glingl@aon.at.)


How to configure Screen and Turtles¶
The built-in default configuration mimics the appearance and behaviour of the
old turtle module in order to retain best possible compatibility with it.
If you want to use a different configuration which better reflects the features
of this module or which better fits to your needs, e.g. for use in a classroom,
you can prepare a configuration file  which will be read at import
time and modify the configuration according to its settings.
The built in configuration would correspond to the following turtle.cfg:


Short explanation of selected entries:

The first four lines correspond to the arguments of the 
method.
Line 5 and 6 correspond to the arguments of the method
.
shape can be any of the built-in shapes, e.g: arrow, turtle, etc.  For more
info try .
If you want to use no fillcolor (i.e. make the turtle transparent), you have
to write  (but all nonempty strings must not have quotes in
the cfg-file).
If you want to reflect the turtle its state, you have to use .
If you set e.g.  the docstringdict
 will be loaded at import time (if
present on the import path, e.g. in the same directory as .
The entries exampleturtle and examplescreen define the names of these
objects as they occur in the docstrings.  The transformation of
method-docstrings to function-docstrings will delete these names from the
docstrings.
using_IDLE: Set this to  if you regularly work with IDLE and its -n
switch (“no subprocess”).  This will prevent  to enter the
mainloop.

There can be a  file in the directory where  is
stored and an additional one in the current working directory.  The latter will
override the settings of the first one.
The  directory contains a  file.  You can
study it as an example and see its effects when running the demos (preferably
not from within the demo-viewer).



 — Demo scripts¶
The  package includes a set of demo scripts.  These
scripts can be run and viewed using the supplied demo viewer as follows:


Alternatively, you can run the demo scripts individually.  For example,


The  package directory contains:

A demo viewer  which can be used to view the sourcecode
of the scripts and run them at the same time.
Multiple scripts demonstrating different features of the 
module.  Examples can be accessed via the Examples menu.  They can also
be run standalone.
A  file which serves as an example of how to write
and use such files.

The demo scripts are:







Name
Description
Features



bytedesign
complex classical
turtle graphics pattern
, delay,


chaos
graphs Verhulst dynamics,
shows that computer’s
computations can generate
results sometimes against the
common sense expectations
world coordinates

clock
analog clock showing time
of your computer
turtles as clock’s
hands, ontimer

colormixer
experiment with r, g, b


forest
3 breadth-first trees
randomization

fractalcurves
Hilbert & Koch curves
recursion

lindenmayer
ethnomathematics
(indian kolams)
L-System

minimal_hanoi
Towers of Hanoi
Rectangular Turtles
as Hanoi discs
(shape, shapesize)

nim
play the classical nim game
with three heaps of sticks
against the computer.
turtles as nimsticks,
event driven (mouse,
keyboard)

paint
super minimalistic
drawing program


peace
elementary
turtle: appearance
and animation

penrose
aperiodic tiling with
kites and darts


planet_and_moon
simulation of
gravitational system
compound shapes,


round_dance
dancing turtles rotating
pairwise in opposite
direction
compound shapes, clone
shapesize, tilt,
get_shapepoly, update

sorting_animate
visual demonstration of
different sorting methods
simple alignment,
randomization

tree
a (graphical) breadth
first tree (using generators)


two_canvases
simple design
turtles on two
canvases

wikipedia
a pattern from the wikipedia
article on turtle graphics
,


yinyang
another elementary example




Have fun!


Changes since Python 2.6¶

The methods ,  and
 have been eliminated.
Methods with these names and functionality are now available only
as methods of . The functions derived from these remain
available. (In fact already in Python 2.6 these methods were merely
duplications of the corresponding
/-methods.)
The method  has been eliminated.
The behaviour of  and 
have changed slightly: now  every filling-process must be completed with an
 call.
A method  has been added. It returns a boolean
value:  if a filling process is under way,  otherwise.
This behaviour corresponds to a  call without arguments in
Python 2.6.



Changes since Python 3.0¶

The methods ,  and
 have been added. Thus the full range of
regular linear transforms is now available for transforming turtle shapes.
 has been enhanced in functionality: it now can
be used to get or set the tiltangle.  has been
deprecated.
The method  has been added as a complement to
 which in fact binds actions to the keyrelease event.
Accordingly the latter has got an alias: .
The method   has been added. So when working only
with Screen and Turtle objects one must not additionally import
 anymore.
Two input methods has been added  and
. These popup input dialogs and return
strings and numbers respectively.
Two example scripts  and 
have been added to the  directory.



