link:
library/urllib.request.html#urllib.request.urlopen

docs:


(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)¶
Open the URL url, which can be either a string or a
 object.
data must be an object specifying additional data to be sent to the
server, or  if no such data is needed.  See 
for details.
urllib.request module uses HTTP/1.1 and includes  header
in its HTTP requests.
The optional timeout parameter specifies a timeout in seconds for
blocking operations like the connection attempt (if not specified,
the global default timeout setting will be used).  This actually
only works for HTTP, HTTPS and FTP connections.
If context is specified, it must be a  instance
describing the various SSL options. See 
for more details.
The optional cafile and capath parameters specify a set of trusted
CA certificates for HTTPS requests.  cafile should point to a single
file containing a bundle of CA certificates, whereas capath should
point to a directory of hashed certificate files.  More information can
be found in .
The cadefault parameter is ignored.
This function always returns an object which can work as a
context manager and has methods such as

 — return the URL of the resource retrieved,
commonly used to determine if a redirect was followed
 — return the meta-information of the page, such as headers,
in the form of an  instance (see
Quick Reference to HTTP Headers)
 – return the HTTP status code of the response.

For HTTP and HTTPS URLs, this function returns a
 object slightly modified. In addition
to the three new methods above, the msg attribute contains the
same information as the 
attribute — the reason phrase returned by server — instead of
the response headers as it is specified in the documentation for
.
For FTP, file, and data URLs and requests explicitly handled by legacy
 and  classes, this function
returns a  object.
Raises  on protocol errors.
Note that  may be returned if no handler handles the request (though
the default installed global  uses
 to ensure this never happens).
In addition, if proxy settings are detected (for example, when a 
environment variable like  is set),
 is default installed and makes sure the requests are
handled through the proxy.
The legacy  function from Python 2.6 and earlier has been
discontinued;  corresponds to the old
.  Proxy handling, which was done by passing a dictionary
parameter to , can be obtained by using
 objects.

Changed in version 3.2: cafile and capath were added.


Changed in version 3.2: HTTPS virtual hosts are now supported if possible (that is, if
 is true).


New in version 3.2: data can be an iterable object.


Changed in version 3.3: cadefault was added.


Changed in version 3.4.3: context was added.


Deprecated since version 3.6: cafile, capath and cadefault are deprecated in favor of context.
Please use  instead, or let
 select the system’s trusted CA
certificates for you.

