link:
library/wsgiref.html#module-wsgiref.util

docs:

 – WSGI environment utilities¶
This module provides a variety of utility functions for working with WSGI
environments.  A WSGI environment is a dictionary containing HTTP request
variables as described in PEP 3333.  All of the functions taking an environ
parameter expect a WSGI-compliant dictionary to be supplied; please see
PEP 3333 for a detailed specification.


(environ)¶
Return a guess for whether  should be “http” or “https”, by
checking for a  environment variable in the environ dictionary.  The
return value is a string.
This function is useful when creating a gateway that wraps CGI or a CGI-like
protocol such as FastCGI.  Typically, servers providing such protocols will
include a  variable with a value of “1” “yes”, or “on” when a request
is received via SSL.  So, this function returns “https” if such a value is
found, and “http” otherwise.



(environ, include_query=True)¶
Return the full request URI, optionally including the query string, using the
algorithm found in the “URL Reconstruction” section of PEP 3333.  If
include_query is false, the query string is not included in the resulting URI.



(environ)¶
Similar to , except that the  and
 variables are ignored.  The result is the base URI of the
application object addressed by the request.



(environ)¶
Shift a single name from  to  and return the name.
The environ dictionary is modified in-place; use a copy if you need to keep
the original  or  intact.
If there are no remaining path segments in ,  is returned.
Typically, this routine is used to process each portion of a request URI path,
for example to treat the path as a series of dictionary keys. This routine
modifies the passed-in environment to make it suitable for invoking another WSGI
application that is located at the target URI. For example, if there is a WSGI
application at , and the request URI path is , and the
WSGI application at  calls , it will receive the
string “bar”, and the environment will be updated to be suitable for passing to
a WSGI application at .  That is,  will change from
 to , and  will change from  to
.
When  is just a “/”, this routine returns an empty string and
appends a trailing slash to , even though empty path segments are
normally ignored, and  doesn’t normally end in a slash.  This is
intentional behavior, to ensure that an application can tell the difference
between URIs ending in  from ones ending in  when using this
routine to do object traversal.



(environ)¶
Update environ with trivial defaults for testing purposes.
This routine adds various parameters required for WSGI, including ,
, , , ,
, and all of the PEP 3333-defined  variables.  It
only supplies default values, and does not replace any existing settings for
these variables.
This routine is intended to make it easier for unit tests of WSGI servers and
applications to set up dummy environments.  It should NOT be used by actual WSGI
servers or applications, since the data is fake!
Example usage:



In addition to the environment functions above, the  module
also provides these miscellaneous utilities:


(header_name)¶
Return true if ‘header_name’ is an HTTP/1.1 “Hop-by-Hop” header, as defined by
RFC 2616.



class (filelike, blksize=8192)¶
A wrapper to convert a file-like object to an iterator.  The resulting objects
support both  and  iteration styles, for
compatibility with Python 2.1 and Jython. As the object is iterated over, the
optional blksize parameter will be repeatedly passed to the filelike
object’s  method to obtain bytestrings to yield.  When 
returns an empty bytestring, iteration is ended and is not resumable.
If filelike has a  method, the returned object will also have a
 method, and it will invoke the filelike object’s 
method when called.
Example usage:



