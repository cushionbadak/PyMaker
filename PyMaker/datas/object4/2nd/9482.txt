link:
library/inspect.html#introspecting-callables-with-the-signature-object

docs:

Introspecting callables with the Signature object¶

New in version 3.3.

The Signature object represents the call signature of a callable object and its
return annotation.  To retrieve a Signature object, use the 
function.


(callable, *, follow_wrapped=True)¶
Return a  object for the given :


Accepts a wide range of Python callables, from plain functions and classes to
 objects.
Raises  if no signature can be provided, and
 if that type of object is not supported.
A slash(/) in the signature of a function denotes that the parameters prior
to it are positional-only. For more info, see
the FAQ entry on positional-only parameters.

New in version 3.5:  parameter. Pass  to get a signature of
 specifically ( will not be used to
unwrap decorated callables.)


Note
Some callables may not be introspectable in certain implementations of
Python.  For example, in CPython, some built-in functions defined in
C provide no metadata about their arguments.




class (parameters=None, *, return_annotation=Signature.empty)¶
A Signature object represents the call signature of a function and its return
annotation.  For each parameter accepted by the function it stores a
 object in its  collection.
The optional parameters argument is a sequence of 
objects, which is validated to check that there are no parameters with
duplicate names, and that the parameters are in the right order, i.e.
positional-only first, then positional-or-keyword, and that parameters with
defaults follow parameters without defaults.
The optional return_annotation argument, can be an arbitrary Python object,
is the “return” annotation of the callable.
Signature objects are immutable.  Use  to make a
modified copy.

Changed in version 3.5: Signature objects are picklable and hashable.



¶
A special class-level marker to specify absence of a return annotation.



¶
An ordered mapping of parameters’ names to the corresponding
 objects.  Parameters appear in strict definition
order, including keyword-only parameters.

Changed in version 3.7: Python only explicitly guaranteed that it preserved the declaration
order of keyword-only parameters as of version 3.7, although in practice
this order had always been preserved in Python 3.




¶
The “return” annotation for the callable.  If the callable has no “return”
annotation, this attribute is set to .



(*args, **kwargs)¶
Create a mapping from positional and keyword arguments to parameters.
Returns  if  and  match the
signature, or raises a .



(*args, **kwargs)¶
Works the same way as , but allows the omission of
some required arguments (mimics  behavior.)
Returns , or raises a  if the
passed arguments do not match the signature.



(*[, parameters][, return_annotation])¶
Create a new Signature instance based on the instance replace was invoked
on.  It is possible to pass different  and/or
 to override the corresponding properties of the base
signature.  To remove return_annotation from the copied Signature, pass in
.





classmethod (obj, *, follow_wrapped=True)¶
Return a  (or its subclass) object for a given callable
.  Pass  to get a signature of 
without unwrapping its  chain.
This method simplifies subclassing of :



New in version 3.5.





class (name, kind, *, default=Parameter.empty, annotation=Parameter.empty)¶
Parameter objects are immutable.  Instead of modifying a Parameter object,
you can use  to create a modified copy.

Changed in version 3.5: Parameter objects are picklable and hashable.



¶
A special class-level marker to specify absence of default values and
annotations.



¶
The name of the parameter as a string.  The name must be a valid
Python identifier.

CPython implementation detail: CPython generates implicit parameter names of the form  on the
code objects used to implement comprehensions and generator
expressions.

Changed in version 3.6: These parameter names are exposed by this module as names like
.





¶
The default value for the parameter.  If the parameter has no default
value, this attribute is set to .



¶
The annotation for the parameter.  If the parameter has no annotation,
this attribute is set to .



¶
Describes how argument values are bound to the parameter.  Possible values
(accessible via , like ):






Name
Meaning



POSITIONAL_ONLY
Value must be supplied as a positional
argument.
Python has no explicit syntax for defining
positional-only parameters, but many built-in
and extension module functions (especially
those that accept only one or two parameters)
accept them.


POSITIONAL_OR_KEYWORD
Value may be supplied as either a keyword or
positional argument (this is the standard
binding behaviour for functions implemented
in Python.)

VAR_POSITIONAL
A tuple of positional arguments that aren’t
bound to any other parameter. This
corresponds to a  parameter in a
Python function definition.

KEYWORD_ONLY
Value must be supplied as a keyword argument.
Keyword only parameters are those which
appear after a  or  entry in a
Python function definition.

VAR_KEYWORD
A dict of keyword arguments that aren’t bound
to any other parameter. This corresponds to a
 parameter in a Python function
definition.



Example: print all keyword-only arguments without default values:





(*[, name][, kind][, default][, annotation])¶

Create a new Parameter instance based on the instance replaced was invoked
on.  To override a  attribute, pass the corresponding
argument.  To remove a default value or/and an annotation from a
Parameter, pass .




Changed in version 3.4: In Python 3.3 Parameter objects were allowed to have  set
to  if their  was set to .
This is no longer permitted.





class ¶
Result of a  or  call.
Holds the mapping of arguments to the function’s parameters.


¶
An ordered, mutable mapping () of
parameters’ names to arguments’ values.  Contains only explicitly bound
arguments.  Changes in  will reflect in  and
.
Should be used in conjunction with  for any
argument processing purposes.

Note
Arguments for which  or
 relied on a default value are skipped.
However, if needed, use  to add
them.




¶
A tuple of positional arguments values.  Dynamically computed from the
 attribute.



¶
A dict of keyword arguments values.  Dynamically computed from the
 attribute.



¶
A reference to the parent  object.



()¶
Set default values for missing arguments.
For variable-positional arguments () the default is an
empty tuple.
For variable-keyword arguments () the default is an
empty dict.



New in version 3.5.


The  and  properties can be used to invoke
functions:




See also

PEP 362 - Function Signature Object.
The detailed specification, implementation details and examples.


