link:
library/abc.html#module-abc

docs:

 — Abstract Base Classes¶
Source code: Lib/abc.py

This module provides the infrastructure for defining abstract base
classes (ABCs) in Python, as outlined in PEP 3119;
see the PEP for why this was added to Python. (See also PEP 3141 and the
 module regarding a type hierarchy for numbers based on ABCs.)
The  module has some concrete classes that derive from
ABCs; these can, of course, be further derived. In addition, the
 submodule has some ABCs that can be used to test whether
a class or instance provides a particular interface, for example, if it is
hashable or if it is a mapping.
This module provides the metaclass  for defining ABCs and
a helper class  to alternatively define ABCs through inheritance:


class ¶
A helper class that has  as its metaclass.  With this class,
an abstract base class can be created by simply deriving from 
avoiding sometimes confusing metaclass usage, for example:


Note that the type of  is still , therefore
inheriting from  requires the usual precautions regarding
metaclass usage, as multiple inheritance may lead to metaclass conflicts.
One may also define an abstract base class by passing the metaclass
keyword and using  directly, for example:



New in version 3.4.




class ¶
Metaclass for defining Abstract Base Classes (ABCs).
Use this metaclass to create an ABC.  An ABC can be subclassed directly, and
then acts as a mix-in class.  You can also register unrelated concrete
classes (even built-in classes) and unrelated ABCs as “virtual subclasses” –
these and their descendants will be considered subclasses of the registering
ABC by the built-in  function, but the registering ABC
won’t show up in their MRO (Method Resolution Order) nor will method
implementations defined by the registering ABC be callable (not even via
). [1]
Classes created with a metaclass of  have the following method:


(subclass)¶
Register subclass as a “virtual subclass” of this ABC. For
example:



Changed in version 3.3: Returns the registered subclass, to allow usage as a class decorator.


Changed in version 3.4: To detect calls to , you can use the
 function.


You can also override this method in an abstract base class:


(subclass)¶
(Must be defined as a class method.)
Check whether subclass is considered a subclass of this ABC.  This means
that you can customize the behavior of  further without the
need to call  on every class you want to consider a
subclass of the ABC.  (This class method is called from the
 method of the ABC.)
This method should return ,  or .  If
it returns , the subclass is considered a subclass of this ABC.
If it returns , the subclass is not considered a subclass of
this ABC, even if it would normally be one.  If it returns
, the subclass check is continued with the usual
mechanism.

For a demonstration of these concepts, look at this example ABC definition:


The ABC  defines the standard iterable method,
, as an abstract method.  The implementation given
here can still be called from subclasses.  The  method
is also part of the  abstract base class, but it does not have
to be overridden in non-abstract derived classes.
The  class method defined here says that any class
that has an  method in its
 (or in that of one of its base classes, accessed
via the  list) is considered a  too.
Finally, the last line makes  a virtual subclass of ,
even though it does not define an  method (it uses
the old-style iterable protocol, defined in terms of  and
).  Note that this will not make 
available as a method of , so it is provided separately.

The  module also provides the following decorator:


¶
A decorator indicating abstract methods.
Using this decorator requires that the class’s metaclass is 
or is derived from it.  A class that has a metaclass derived from
 cannot be instantiated unless all of its abstract methods
and properties are overridden.  The abstract methods can be called using any
of the normal ‘super’ call mechanisms.   may be used
to declare abstract methods for properties and descriptors.
Dynamically adding abstract methods to a class, or attempting to modify the
abstraction status of a method or class once it is created, are not
supported.  The  only affects subclasses derived using
regular inheritance; “virtual subclasses” registered with the ABC’s
 method are not affected.
When  is applied in combination with other method
descriptors, it should be applied as the innermost decorator, as shown in
the following usage examples:


In order to correctly interoperate with the abstract base class machinery,
the descriptor must identify itself as abstract using
. In general, this attribute should be 
if any of the methods used to compose the descriptor are abstract. For
example, Python’s built-in  does the equivalent of:



Note
Unlike Java abstract methods, these abstract
methods may have an implementation. This implementation can be
called via the  mechanism from the class that
overrides it.  This could be useful as an end-point for a
super-call in a framework that uses cooperative
multiple-inheritance.


The  module also supports the following legacy decorators:


¶

New in version 3.2.


Deprecated since version 3.3: It is now possible to use  with
, making this decorator redundant.

A subclass of the built-in , indicating an abstract
classmethod. Otherwise it is similar to .
This special case is deprecated, as the  decorator
is now correctly identified as abstract when applied to an abstract
method:





¶

New in version 3.2.


Deprecated since version 3.3: It is now possible to use  with
, making this decorator redundant.

A subclass of the built-in , indicating an abstract
staticmethod. Otherwise it is similar to .
This special case is deprecated, as the  decorator
is now correctly identified as abstract when applied to an abstract
method:





¶

Deprecated since version 3.3: It is now possible to use , ,
 and  with
, making this decorator redundant.

A subclass of the built-in , indicating an abstract
property.
This special case is deprecated, as the  decorator
is now correctly identified as abstract when applied to an abstract
method:


The above example defines a read-only property; you can also define a
read-write abstract property by appropriately marking one or more of the
underlying methods as abstract:


If only some components are abstract, only those components need to be
updated to create a concrete property in a subclass:



The  module also provides the following functions:


()¶
Returns the current abstract base class cache token.
The token is an opaque object (that supports equality testing) identifying
the current version of the abstract base class cache for virtual subclasses.
The token changes with every call to  on any ABC.

New in version 3.4.


Footnotes



[1]C++ programmers should note that Python’s virtual base class
concept is not the same as C++’s.


