link:
library/shutil.html#archiving-operations

docs:

Archiving operations¶

New in version 3.2.


Changed in version 3.5: Added support for the xztar format.

High-level utilities to create and read compressed and archived files are also
provided.  They rely on the  and  modules.


(base_name, format[, root_dir[, base_dir[, verbose[, dry_run[, owner[, group[, logger]]]]]]])¶
Create an archive file (such as zip or tar) and return its name.
base_name is the name of the file to create, including the path, minus
any format-specific extension. format is the archive format: one of
“zip” (if the  module is available), “tar”, “gztar” (if the
 module is available), “bztar” (if the  module is
available), or “xztar” (if the  module is available).
root_dir is a directory that will be the root directory of the
archive; for example, we typically chdir into root_dir before creating the
archive.
base_dir is the directory where we start archiving from;
i.e. base_dir will be the common prefix of all files and
directories in the archive.
root_dir and base_dir both default to the current directory.
If dry_run is true, no archive is created, but the operations that would be
executed are logged to logger.
owner and group are used when creating a tar archive. By default,
uses the current owner and group.
logger must be an object compatible with PEP 282, usually an instance of
.
The verbose argument is unused and deprecated.



()¶
Return a list of supported formats for archiving.
Each element of the returned sequence is a tuple .
By default  provides these formats:

zip: ZIP file (if the  module is available).
tar: uncompressed tar file.
gztar: gzip’ed tar-file (if the  module is available).
bztar: bzip2’ed tar-file (if the  module is available).
xztar: xz’ed tar-file (if the  module is available).

You can register new formats or provide your own archiver for any existing
formats, by using .



(name, function[, extra_args[, description]])¶
Register an archiver for the format name.
function is the callable that will be used to unpack archives. The callable
will receive the base_name of the file to create, followed by the
base_dir (which defaults to ) to start archiving from.
Further arguments are passed as keyword arguments: owner, group,
dry_run and logger (as passed in ).
If given, extra_args is a sequence of  pairs that will be
used as extra keywords arguments when the archiver callable is used.
description is used by  which returns the
list of archivers.  Defaults to an empty string.



(name)¶
Remove the archive format name from the list of supported formats.



(filename[, extract_dir[, format]])¶
Unpack an archive. filename is the full path of the archive.
extract_dir is the name of the target directory where the archive is
unpacked. If not provided, the current working directory is used.
format is the archive format: one of “zip”, “tar”, “gztar”, “bztar”, or
“xztar”.  Or any other format registered with
.  If not provided, 
will use the archive file name extension and see if an unpacker was
registered for that extension.  In case none is found,
a  is raised.

Changed in version 3.7: Accepts a path-like object for filename and extract_dir.




(name, extensions, function[, extra_args[, description]])¶
Registers an unpack format. name is the name of the format and
extensions is a list of extensions corresponding to the format, like
 for Zip files.
function is the callable that will be used to unpack archives. The
callable will receive the path of the archive, followed by the directory
the archive must be extracted to.
When provided, extra_args is a sequence of  tuples that
will be passed as keywords arguments to the callable.
description can be provided to describe the format, and will be returned
by the  function.



(name)¶
Unregister an unpack format. name is the name of the format.



()¶
Return a list of all registered formats for unpacking.
Each element of the returned sequence is a tuple
.
By default  provides these formats:

zip: ZIP file (unpacking compressed files works only if the corresponding
module is available).
tar: uncompressed tar file.
gztar: gzip’ed tar-file (if the  module is available).
bztar: bzip2’ed tar-file (if the  module is available).
xztar: xz’ed tar-file (if the  module is available).

You can register new formats or provide your own unpacker for any existing
formats, by using .


Archiving example¶
In this example, we create a gzip’ed tar-file archive containing all files
found in the  directory of the user:


The resulting archive contains:



