link:
library/unittest.mock-examples.html#side-effect-functions-and-iterables

docs:

Side effect functions and iterablesÂ¶
 can also be set to a function or an iterable. The use case for
 as an iterable is where your mock is going to be called several
times, and you want each call to return a different value. When you set
 to an iterable every call to the mock returns the next value
from the iterable:


For more advanced use cases, like dynamically varying the return values
depending on what the mock is called with,  can be a function.
The function will be called with the same arguments as the mock. Whatever the
function returns is what the call returns:


