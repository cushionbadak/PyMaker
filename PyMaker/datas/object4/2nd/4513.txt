link:
library/subprocess.html#replacing-older-functions-with-the-subprocess-module

docs:

Replacing Older Functions with the  Module¶
In this section, “a becomes b” means that b can be used as a replacement for a.

Note
All “a” functions in this section fail (more or less) silently if the
executed program cannot be found; the “b” replacements raise 
instead.
In addition, the replacements using  will fail with a
 if the requested operation produces a non-zero
return code. The output is still available as the
 attribute of the raised exception.

In the following examples, we assume that the relevant functions have already
been imported from the  module.

Replacing /bin/sh shell backquote¶


becomes:




Replacing shell pipeline¶


becomes:


The p1.stdout.close() call after starting the p2 is important in order for p1
to receive a SIGPIPE if p2 exits before p1.
Alternatively, for trusted input, the shell’s own pipeline support may still
be used directly:


becomes:




Replacing ¶


Notes:

Calling the program through the shell is usually not required.

A more realistic example would look like this:




Replacing the  family¶
P_NOWAIT example:


P_WAIT example:


Vector example:


Environment example:




Replacing , , ¶






Return code handling translates as follows:




Replacing functions from the  module¶

Note
If the cmd argument to popen2 functions is a string, the command is executed
through /bin/sh.  If it is a list, the command is directly executed.





 and  basically work as
, except that:

 raises an exception if the execution fails.
The capturestderr argument is replaced with the stderr argument.
 and  must be specified.
popen2 closes all file descriptors by default, but you have to specify
 with  to guarantee this behavior on
all platforms or past Python versions.


