link:
library/os.html#os.execvpe

docs:


(path, arg0, arg1, ...)¶

(path, arg0, arg1, ..., env)¶

(file, arg0, arg1, ...)¶

(file, arg0, arg1, ..., env)¶

(path, args)¶

(path, args, env)¶

(file, args)¶

(file, args, env)¶
These functions all execute a new program, replacing the current process; they
do not return.  On Unix, the new executable is loaded into the current process,
and will have the same process id as the caller.  Errors will be reported as
 exceptions.
The current process is replaced immediately. Open file objects and
descriptors are not flushed, so if there may be data buffered
on these open files, you should flush them using
 or  before calling an
 function.
The “l” and “v” variants of the  functions differ in how
command-line arguments are passed.  The “l” variants are perhaps the easiest
to work with if the number of parameters is fixed when the code is written; the
individual parameters simply become additional parameters to the 
functions.  The “v” variants are good when the number of parameters is
variable, with the arguments being passed in a list or tuple as the args
parameter.  In either case, the arguments to the child process should start with
the name of the command being run, but this is not enforced.
The variants which include a “p” near the end (,
, , and ) will use the
 environment variable to locate the program file.  When the
environment is being replaced (using one of the  variants,
discussed in the next paragraph), the new environment is used as the source of
the  variable. The other variants, , ,
, and , will not use the  variable to
locate the executable; path must contain an appropriate absolute or relative
path.
For , , , and  (note
that these all end in “e”), the env parameter must be a mapping which is
used to define the environment variables for the new process (these are used
instead of the current process’ environment); the functions ,
, , and  all cause the new process to
inherit the environment of the current process.
For  on some platforms, path may also be specified as an open
file descriptor.  This functionality may not be supported on your platform;
you can check whether or not it is available using .
If it is unavailable, using it will raise a .
Availability: Unix, Windows.

New in version 3.3: Added support for specifying an open file descriptor for path
for .


Changed in version 3.6: Accepts a path-like object.

