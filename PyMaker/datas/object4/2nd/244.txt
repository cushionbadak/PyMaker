link:
reference/expressions.html#binary-arithmetic-operations

docs:

6.7. Binary arithmetic operations¶
The binary arithmetic operations have the conventional priority levels.  Note
that some of these operations also apply to certain non-numeric types.  Apart
from the power operator, there are only two levels, one for multiplicative
operators and one for additive operators:

The  (multiplication) operator yields the product of its arguments.  The
arguments must either both be numbers, or one argument must be an integer and
the other must be a sequence. In the former case, the numbers are converted to a
common type and then multiplied together.  In the latter case, sequence
repetition is performed; a negative repetition factor yields an empty sequence.
The  (at) operator is intended to be used for matrix multiplication.  No
builtin Python types implement this operator.

New in version 3.5.

The  (division) and  (floor division) operators yield the quotient of
their arguments.  The numeric arguments are first converted to a common type.
Division of integers yields a float, while floor division of integers results in an
integer; the result is that of mathematical division with the ‘floor’ function
applied to the result.  Division by zero raises the 
exception.
The  (modulo) operator yields the remainder from the division of the first
argument by the second.  The numeric arguments are first converted to a common
type.  A zero right argument raises the  exception.  The
arguments may be floating point numbers, e.g.,  equals 
(since  equals .)  The modulo operator always yields a
result with the same sign as its second operand (or zero); the absolute value of
the result is strictly smaller than the absolute value of the second operand
[1].
The floor division and modulo operators are connected by the following
identity: .  Floor division and modulo are also
connected with the built-in function : . [2].
In addition to performing the modulo operation on numbers, the  operator is
also overloaded by string objects to perform old-style string formatting (also
known as interpolation).  The syntax for string formatting is described in the
Python Library Reference, section printf-style String Formatting.
The floor division operator, the modulo operator, and the 
function are not defined for complex numbers.  Instead, convert to a floating
point number using the  function if appropriate.
The  (addition) operator yields the sum of its arguments.  The arguments
must either both be numbers or both be sequences of the same type.  In the
former case, the numbers are converted to a common type and then added together.
In the latter case, the sequences are concatenated.
The  (subtraction) operator yields the difference of its arguments.  The
numeric arguments are first converted to a common type.
