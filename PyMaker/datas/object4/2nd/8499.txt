link:
library/unittest.html#grouping-tests

docs:

Grouping tests¶


class (tests=())¶
This class represents an aggregation of individual test cases and test suites.
The class presents the interface needed by the test runner to allow it to be run
as any other test case.  Running a  instance is the same as
iterating over the suite, running each test individually.
If tests is given, it must be an iterable of individual test cases or other
test suites that will be used to build the suite initially. Additional methods
are provided to add test cases and suites to the collection later on.
 objects behave much like  objects, except
they do not actually implement a test.  Instead, they are used to aggregate
tests into groups of tests that should be run together. Some additional
methods are available to add tests to  instances:


(test)¶
Add a  or  to the suite.



(tests)¶
Add all the tests from an iterable of  and 
instances to this test suite.
This is equivalent to iterating over tests, calling  for
each element.

 shares the following methods with :


(result)¶
Run the tests associated with this suite, collecting the result into the
test result object passed as result.  Note that unlike
,  requires the result object to
be passed in.



()¶
Run the tests associated with this suite without collecting the
result. This allows exceptions raised by the test to be propagated to the
caller and can be used to support running tests under a debugger.



()¶
Return the number of tests represented by this test object, including all
individual tests and sub-suites.



()¶
Tests grouped by a  are always accessed by iteration.
Subclasses can lazily provide tests by overriding . Note
that this method may be called several times on a single suite (for
example when counting tests or comparing for equality) so the tests
returned by repeated iterations before  must be the
same for each call iteration. After , callers should
not rely on the tests returned by this method unless the caller uses a
subclass that overrides  to preserve
test references.

Changed in version 3.2: In earlier versions the  accessed tests directly rather
than through iteration, so overriding  wasn’t sufficient
for providing tests.


Changed in version 3.4: In earlier versions the  held references to each
 after . Subclasses can restore
that behavior by overriding .


In the typical usage of a  object, the  method
is invoked by a  rather than by the end-user test harness.

