link:
library/doctest.html#advanced-api

docs:

Advanced API¶
The basic API is a simple wrapper that’s intended to make doctest easy to use.
It is fairly flexible, and should meet most users’ needs; however, if you
require more fine-grained control over testing, or wish to extend doctest’s
capabilities, then you should use the advanced API.
The advanced API revolves around two container classes, which are used to store
the interactive examples extracted from doctest cases:

: A single Python statement, paired with its expected
output.
: A collection of s, typically extracted
from a single docstring or text file.

Additional processing classes are defined to find, parse, and run, and check
doctest examples:

: Finds all docstrings in a given module, and uses a
 to create a  from every docstring that
contains interactive examples.
: Creates a  object from a string (such
as an object’s docstring).
: Executes the examples in a , and uses
an  to verify their output.
: Compares the actual output from a doctest example with
the expected output, and decides whether they match.

The relationships among these processing classes are summarized in the following
diagram:



DocTest Objects¶


class (examples, globs, name, filename, lineno, docstring)¶
A collection of doctest examples that should be run in a single namespace.  The
constructor arguments are used to initialize the attributes of the same names.
 defines the following attributes.  They are initialized by
the constructor, and should not be modified directly.


¶
A list of  objects encoding the individual interactive Python
examples that should be run by this test.



¶
The namespace (aka globals) that the examples should be run in. This is a
dictionary mapping names to values.  Any changes to the namespace made by the
examples (such as binding new variables) will be reflected in 
after the test is run.



¶
A string name identifying the .  Typically, this is the name
of the object or file that the test was extracted from.



¶
The name of the file that this  was extracted from; or
 if the filename is unknown, or if the  was not
extracted from a file.



¶
The line number within  where this  begins, or
 if the line number is unavailable.  This line number is zero-based
with respect to the beginning of the file.



¶
The string that the test was extracted from, or  if the string is
unavailable, or if the test was not extracted from a string.




Example Objects¶


class (source, want, exc_msg=None, lineno=0, indent=0, options=None)¶
A single interactive example, consisting of a Python statement and its expected
output.  The constructor arguments are used to initialize the attributes of
the same names.
 defines the following attributes.  They are initialized by
the constructor, and should not be modified directly.


¶
A string containing the example’s source code.  This source code consists of a
single Python statement, and always ends with a newline; the constructor adds
a newline when necessary.



¶
The expected output from running the example’s source code (either from
stdout, or a traceback in case of exception).   ends with a
newline unless no output is expected, in which case it’s an empty string.  The
constructor adds a newline when necessary.



¶
The exception message generated by the example, if the example is expected to
generate an exception; or  if it is not expected to generate an
exception.  This exception message is compared against the return value of
.   ends with a newline
unless it’s .  The constructor adds a newline if needed.



¶
The line number within the string containing this example where the example
begins.  This line number is zero-based with respect to the beginning of the
containing string.



¶
The example’s indentation in the containing string, i.e., the number of space
characters that precede the example’s first prompt.



¶
A dictionary mapping from option flags to  or , which is used
to override default options for this example.  Any option flags not contained
in this dictionary are left at their default value (as specified by the
’s ). By default, no options are set.




DocTestFinder objects¶


class (verbose=False, parser=DocTestParser(), recurse=True, exclude_empty=True)¶
A processing class used to extract the s that are relevant to
a given object, from its docstring and the docstrings of its contained objects.
s can be extracted from modules, classes, functions,
methods, staticmethods, classmethods, and properties.
The optional argument verbose can be used to display the objects searched by
the finder.  It defaults to  (no output).
The optional argument parser specifies the  object (or a
drop-in replacement) that is used to extract doctests from docstrings.
If the optional argument recurse is false, then 
will only examine the given object, and not any contained objects.
If the optional argument exclude_empty is false, then
 will include tests for objects with empty docstrings.
 defines the following method:


(obj[, name][, module][, globs][, extraglobs])¶
Return a list of the s that are defined by obj’s
docstring, or by any of its contained objects’ docstrings.
The optional argument name specifies the object’s name; this name will be
used to construct names for the returned s.  If name is
not specified, then  is used.
The optional parameter module is the module that contains the given object.
If the module is not specified or is , then the test finder will attempt
to automatically determine the correct module.  The object’s module is used:

As a default namespace, if globs is not specified.
To prevent the DocTestFinder from extracting DocTests from objects that are
imported from other modules.  (Contained objects with modules other than
module are ignored.)
To find the name of the file containing the object.
To help find the line number of the object within its file.

If module is , no attempt to find the module will be made.  This is
obscure, of use mostly in testing doctest itself: if module is , or
is  but cannot be found automatically, then all objects are considered
to belong to the (non-existent) module, so all contained objects will
(recursively) be searched for doctests.
The globals for each  is formed by combining globs and
extraglobs (bindings in extraglobs override bindings in globs).  A new
shallow copy of the globals dictionary is created for each .
If globs is not specified, then it defaults to the module’s __dict__, if
specified, or  otherwise.  If extraglobs is not specified, then it
defaults to .




DocTestParser objects¶


class ¶
A processing class used to extract interactive examples from a string, and use
them to create a  object.
 defines the following methods:


(string, globs, name, filename, lineno)¶
Extract all doctest examples from the given string, and collect them into a
 object.
globs, name, filename, and lineno are attributes for the new
 object.  See the documentation for  for more
information.



(string, name='<string>')¶
Extract all doctest examples from the given string, and return them as a list
of  objects.  Line numbers are 0-based.  The optional argument
name is a name identifying this string, and is only used for error messages.



(string, name='<string>')¶
Divide the given string into examples and intervening text, and return them as
a list of alternating s and strings. Line numbers for the
s are 0-based.  The optional argument name is a name
identifying this string, and is only used for error messages.




DocTestRunner objects¶


class (checker=None, verbose=None, optionflags=0)¶
A processing class used to execute and verify the interactive examples in a
.
The comparison between expected outputs and actual outputs is done by an
.  This comparison may be customized with a number of
option flags; see section Option Flags for more information.  If the
option flags are insufficient, then the comparison may also be customized by
passing a subclass of  to the constructor.
The test runner’s display output can be controlled in two ways. First, an output
function can be passed to ; this function will be called
with strings that should be displayed.  It defaults to .  If
capturing the output is not sufficient, then the display output can be also
customized by subclassing DocTestRunner, and overriding the methods
, ,
, and .
The optional keyword argument checker specifies the 
object (or drop-in replacement) that should be used to compare the expected
outputs to the actual outputs of doctest examples.
The optional keyword argument verbose controls the ’s
verbosity.  If verbose is , then information is printed about each
example, as it is run.  If verbose is , then only failures are
printed.  If verbose is unspecified, or , then verbose output is used
iff the command-line switch  is used.
The optional keyword argument optionflags can be used to control how the test
runner compares expected output to actual output, and how it displays failures.
For more information, see section Option Flags.
 defines the following methods:


(out, test, example)¶
Report that the test runner is about to process the given example. This method
is provided to allow subclasses of  to customize their
output; it should not be called directly.
example is the example about to be processed.  test is the test
containing example.  out is the output function that was passed to
.



(out, test, example, got)¶
Report that the given example ran successfully.  This method is provided to
allow subclasses of  to customize their output; it
should not be called directly.
example is the example about to be processed.  got is the actual output
from the example.  test is the test containing example.  out is the
output function that was passed to .



(out, test, example, got)¶
Report that the given example failed.  This method is provided to allow
subclasses of  to customize their output; it should not
be called directly.
example is the example about to be processed.  got is the actual output
from the example.  test is the test containing example.  out is the
output function that was passed to .



(out, test, example, exc_info)¶
Report that the given example raised an unexpected exception. This method is
provided to allow subclasses of  to customize their
output; it should not be called directly.
example is the example about to be processed. exc_info is a tuple
containing information about the unexpected exception (as returned by
). test is the test containing example.  out is the
output function that was passed to .



(test, compileflags=None, out=None, clear_globs=True)¶
Run the examples in test (a  object), and display the
results using the writer function out.
The examples are run in the namespace .  If clear_globs is
true (the default), then this namespace will be cleared after the test runs,
to help with garbage collection. If you would like to examine the namespace
after the test completes, then use clear_globs=False.
compileflags gives the set of flags that should be used by the Python
compiler when running the examples.  If not specified, then it will default to
the set of future-import flags that apply to globs.
The output of each example is checked using the ’s
output checker, and the results are formatted by the
 methods.



(verbose=None)¶
Print a summary of all the test cases that have been run by this DocTestRunner,
and return a named tuple .
The optional verbose argument controls how detailed the summary is.  If the
verbosity is not specified, then the ’s verbosity is
used.




OutputChecker objects¶


class ¶
A class used to check the whether the actual output from a doctest example
matches the expected output.   defines two methods:
, which compares a given pair of outputs, and returns true
if they match; and , which returns a string describing
the differences between two outputs.
 defines the following methods:


(want, got, optionflags)¶
Return  iff the actual output from an example (got) matches the
expected output (want).  These strings are always considered to match if
they are identical; but depending on what option flags the test runner is
using, several non-exact match types are also possible.  See section
Option Flags for more information about option flags.



(example, got, optionflags)¶
Return a string describing the differences between the expected output for a
given example (example) and the actual output (got).  optionflags is the
set of option flags used to compare want and got.



