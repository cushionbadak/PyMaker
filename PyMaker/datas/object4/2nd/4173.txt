link:
library/threading.html

docs:


 — Thread-based parallelism¶
Source code: Lib/threading.py

This module constructs higher-level threading interfaces on top of the lower
level  module.  See also the  module.

Changed in version 3.7: This module used to be optional, it is now always available.


Note
While they are not listed below, the  names used for some
methods and functions in this module in the Python 2.x series are still
supported by this module.

This module defines the following functions:


()¶
Return the number of  objects currently alive.  The returned
count is equal to the length of the list returned by .



()¶
Return the current  object, corresponding to the caller’s thread
of control.  If the caller’s thread of control was not created through the
 module, a dummy thread object with limited functionality is
returned.



()¶
Return the ‘thread identifier’ of the current thread.  This is a nonzero
integer.  Its value has no direct meaning; it is intended as a magic cookie
to be used e.g. to index a dictionary of thread-specific data.  Thread
identifiers may be recycled when a thread exits and another thread is
created.

New in version 3.3.




()¶
Return a list of all  objects currently alive.  The list
includes daemonic threads, dummy thread objects created by
, and the main thread.  It excludes terminated threads
and threads that have not yet been started.



()¶
Return the main  object.  In normal conditions, the
main thread is the thread from which the Python interpreter was
started.

New in version 3.4.




(func)¶
Set a trace function for all threads started from the  module.
The func will be passed to   for each thread, before its
 method is called.



(func)¶
Set a profile function for all threads started from the  module.
The func will be passed to   for each thread, before its
 method is called.



([size])¶
Return the thread stack size used when creating new threads.  The optional
size argument specifies the stack size to be used for subsequently created
threads, and must be 0 (use platform or configured default) or a positive
integer value of at least 32,768 (32 KiB). If size is not specified,
0 is used.  If changing the thread stack size is
unsupported, a  is raised.  If the specified stack size is
invalid, a  is raised and the stack size is unmodified.  32 KiB
is currently the minimum supported stack size value to guarantee sufficient
stack space for the interpreter itself.  Note that some platforms may have
particular restrictions on values for the stack size, such as requiring a
minimum stack size > 32 KiB or requiring allocation in multiples of the system
memory page size - platform documentation should be referred to for more
information (4 KiB pages are common; using multiples of 4096 for the stack size is
the suggested approach in the absence of more specific information).
Availability: Windows, systems with POSIX threads.

This module also defines the following constant:


¶
The maximum value allowed for the timeout parameter of blocking functions
(, , , etc.).
Specifying a timeout greater than this value will raise an
.

New in version 3.2.


This module defines a number of classes, which are detailed in the sections
below.
The design of this module is loosely based on Java’s threading model. However,
where Java makes locks and condition variables basic behavior of every object,
they are separate objects in Python.  Python’s  class supports a
subset of the behavior of Java’s Thread class; currently, there are no
priorities, no thread groups, and threads cannot be destroyed, stopped,
suspended, resumed, or interrupted.  The static methods of Java’s Thread class,
when implemented, are mapped to module-level functions.
All of the methods described below are executed atomically.

Thread-Local Data¶
Thread-local data is data whose values are thread specific.  To manage
thread-local data, just create an instance of  (or a
subclass) and store attributes on it:


The instance’s values will be different for separate threads.


class ¶
A class that represents thread-local data.
For more details and extensive examples, see the documentation string of the
 module.



Thread Objects¶
The  class represents an activity that is run in a separate
thread of control.  There are two ways to specify the activity: by passing a
callable object to the constructor, or by overriding the 
method in a subclass.  No other methods (except for the constructor) should be
overridden in a subclass.  In other words, only  override the
 and  methods of this class.
Once a thread object is created, its activity must be started by calling the
thread’s  method.  This invokes the 
method in a separate thread of control.
Once the thread’s activity is started, the thread is considered ‘alive’. It
stops being alive when its  method terminates – either
normally, or by raising an unhandled exception.  The 
method tests whether the thread is alive.
Other threads can call a thread’s  method.  This blocks
the calling thread until the thread whose  method is
called is terminated.
A thread has a name.  The name can be passed to the constructor, and read or
changed through the  attribute.
A thread can be flagged as a “daemon thread”.  The significance of this flag is
that the entire Python program exits when only daemon threads are left.  The
initial value is inherited from the creating thread.  The flag can be set
through the  property or the daemon constructor
argument.

Note
Daemon threads are abruptly stopped at shutdown.  Their resources (such
as open files, database transactions, etc.) may not be released properly.
If you want your threads to stop gracefully, make them non-daemonic and
use a suitable signalling mechanism such as an .

There is a “main thread” object; this corresponds to the initial thread of
control in the Python program.  It is not a daemon thread.
There is the possibility that “dummy thread objects” are created. These are
thread objects corresponding to “alien threads”, which are threads of control
started outside the threading module, such as directly from C code.  Dummy
thread objects have limited functionality; they are always considered alive and
daemonic, and cannot be ed.  They are never deleted,
since it is impossible to detect the termination of alien threads.


class (group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)¶
This constructor should always be called with keyword arguments.  Arguments
are:
group should be ; reserved for future extension when a
 class is implemented.
target is the callable object to be invoked by the  method.
Defaults to , meaning nothing is called.
name is the thread name.  By default, a unique name is constructed of the
form “Thread-N” where N is a small decimal number.
args is the argument tuple for the target invocation.  Defaults to .
kwargs is a dictionary of keyword arguments for the target invocation.
Defaults to .
If not , daemon explicitly sets whether the thread is daemonic.
If  (the default), the daemonic property is inherited from the
current thread.
If the subclass overrides the constructor, it must make sure to invoke the
base class constructor () before doing anything else to
the thread.

Changed in version 3.3: Added the daemon argument.



()¶
Start the thread’s activity.
It must be called at most once per thread object.  It arranges for the
object’s  method to be invoked in a separate thread
of control.
This method will raise a  if called more than once
on the same thread object.



()¶
Method representing the thread’s activity.
You may override this method in a subclass.  The standard 
method invokes the callable object passed to the object’s constructor as
the target argument, if any, with positional and keyword arguments taken
from the args and kwargs arguments, respectively.



(timeout=None)¶
Wait until the thread terminates. This blocks the calling thread until
the thread whose  method is called terminates – either
normally or through an unhandled exception – or until the optional
timeout occurs.
When the timeout argument is present and not , it should be a
floating point number specifying a timeout for the operation in seconds
(or fractions thereof). As  always returns ,
you must call  after  to
decide whether a timeout happened – if the thread is still alive, the
 call timed out.
When the timeout argument is not present or , the operation will
block until the thread terminates.
A thread can be ed many times.
 raises a  if an attempt is made
to join the current thread as that would cause a deadlock. It is also
an error to  a thread before it has been started
and attempts to do so raise the same exception.



¶
A string used for identification purposes only. It has no semantics.
Multiple threads may be given the same name.  The initial name is set by
the constructor.



()¶

()¶
Old getter/setter API for ; use it directly as a
property instead.



¶
The ‘thread identifier’ of this thread or  if the thread has not
been started.  This is a nonzero integer.  See the 
function.  Thread identifiers may be recycled when a thread exits and
another thread is created.  The identifier is available even after the
thread has exited.



()¶
Return whether the thread is alive.
This method returns  just before the  method
starts until just after the  method terminates.  The
module function  returns a list of all alive threads.



¶
A boolean value indicating whether this thread is a daemon thread (True)
or not (False).  This must be set before  is called,
otherwise  is raised.  Its initial value is inherited
from the creating thread; the main thread is not a daemon thread and
therefore all threads created in the main thread default to
 = .
The entire Python program exits when no alive non-daemon threads are left.



()¶

()¶
Old getter/setter API for ; use it directly as a
property instead.



CPython implementation detail: In CPython, due to the Global Interpreter Lock, only one thread
can execute Python code at once (even though certain performance-oriented
libraries might overcome this limitation).
If you want your application to make better use of the computational
resources of multi-core machines, you are advised to use
 or .
However, threading is still an appropriate model if you want to run
multiple I/O-bound tasks simultaneously.



Lock Objects¶
A primitive lock is a synchronization primitive that is not owned by a
particular thread when locked.  In Python, it is currently the lowest level
synchronization primitive available, implemented directly by the 
extension module.
A primitive lock is in one of two states, “locked” or “unlocked”. It is created
in the unlocked state.  It has two basic methods,  and
.  When the state is unlocked, 
changes the state to locked and returns immediately.  When the state is locked,
 blocks until a call to  in another
thread changes it to unlocked, then the  call resets it
to locked and returns.  The  method should only be
called in the locked state; it changes the state to unlocked and returns
immediately. If an attempt is made to release an unlocked lock, a
 will be raised.
Locks also support the context management protocol.
When more than one thread is blocked in  waiting for the
state to turn to unlocked, only one thread proceeds when a 
call resets the state to unlocked; which one of the waiting threads proceeds
is not defined, and may vary across implementations.
All methods are executed atomically.


class ¶
The class implementing primitive lock objects.  Once a thread has acquired a
lock, subsequent attempts to acquire it block, until it is released; any
thread may release it.
Note that  is actually a factory function which returns an instance
of the most efficient version of the concrete Lock class that is supported
by the platform.


(blocking=True, timeout=-1)¶
Acquire a lock, blocking or non-blocking.
When invoked with the blocking argument set to  (the default),
block until the lock is unlocked, then set it to locked and return .
When invoked with the blocking argument set to , do not block.
If a call with blocking set to  would block, return 
immediately; otherwise, set the lock to locked and return .
When invoked with the floating-point timeout argument set to a positive
value, block for at most the number of seconds specified by timeout
and as long as the lock cannot be acquired.  A timeout argument of 
specifies an unbounded wait.  It is forbidden to specify a timeout
when blocking is false.
The return value is  if the lock is acquired successfully,
 if not (for example if the timeout expired).

Changed in version 3.2: The timeout parameter is new.


Changed in version 3.2: Lock acquisition can now be interrupted by signals on POSIX if the
underlying threading implementation supports it.




()¶
Release a lock.  This can be called from any thread, not only the thread
which has acquired the lock.
When the lock is locked, reset it to unlocked, and return.  If any other threads
are blocked waiting for the lock to become unlocked, allow exactly one of them
to proceed.
When invoked on an unlocked lock, a  is raised.
There is no return value.




RLock Objects¶
A reentrant lock is a synchronization primitive that may be acquired multiple
times by the same thread.  Internally, it uses the concepts of “owning thread”
and “recursion level” in addition to the locked/unlocked state used by primitive
locks.  In the locked state, some thread owns the lock; in the unlocked state,
no thread owns it.
To lock the lock, a thread calls its  method; this
returns once the thread owns the lock.  To unlock the lock, a thread calls
its  method. /
call pairs may be nested; only the final  (the
 of the outermost pair) resets the lock to unlocked and
allows another thread blocked in  to proceed.
Reentrant locks also support the context management protocol.


class ¶
This class implements reentrant lock objects.  A reentrant lock must be
released by the thread that acquired it.  Once a thread has acquired a
reentrant lock, the same thread may acquire it again without blocking; the
thread must release it once for each time it has acquired it.
Note that  is actually a factory function which returns an instance
of the most efficient version of the concrete RLock class that is supported
by the platform.


(blocking=True, timeout=-1)¶
Acquire a lock, blocking or non-blocking.
When invoked without arguments: if this thread already owns the lock, increment
the recursion level by one, and return immediately.  Otherwise, if another
thread owns the lock, block until the lock is unlocked.  Once the lock is
unlocked (not owned by any thread), then grab ownership, set the recursion level
to one, and return.  If more than one thread is blocked waiting until the lock
is unlocked, only one at a time will be able to grab ownership of the lock.
There is no return value in this case.
When invoked with the blocking argument set to true, do the same thing as when
called without arguments, and return true.
When invoked with the blocking argument set to false, do not block.  If a call
without an argument would block, return false immediately; otherwise, do the
same thing as when called without arguments, and return true.
When invoked with the floating-point timeout argument set to a positive
value, block for at most the number of seconds specified by timeout
and as long as the lock cannot be acquired.  Return true if the lock has
been acquired, false if the timeout has elapsed.

Changed in version 3.2: The timeout parameter is new.




()¶
Release a lock, decrementing the recursion level.  If after the decrement it is
zero, reset the lock to unlocked (not owned by any thread), and if any other
threads are blocked waiting for the lock to become unlocked, allow exactly one
of them to proceed.  If after the decrement the recursion level is still
nonzero, the lock remains locked and owned by the calling thread.
Only call this method when the calling thread owns the lock. A
 is raised if this method is called when the lock is
unlocked.
There is no return value.




Condition Objects¶
A condition variable is always associated with some kind of lock; this can be
passed in or one will be created by default.  Passing one in is useful when
several condition variables must share the same lock.  The lock is part of
the condition object: you don’t have to track it separately.
A condition variable obeys the context management protocol:
using the  statement acquires the associated lock for the duration of
the enclosed block.  The  and
 methods also call the corresponding methods of
the associated lock.
Other methods must be called with the associated lock held.  The
 method releases the lock, and then blocks until
another thread awakens it by calling  or
.  Once awakened, 
re-acquires the lock and returns.  It is also possible to specify a timeout.
The  method wakes up one of the threads waiting for
the condition variable, if any are waiting.  The 
method wakes up all threads waiting for the condition variable.
Note: the  and  methods
don’t release the lock; this means that the thread or threads awakened will
not return from their  call immediately, but only when
the thread that called  or 
finally relinquishes ownership of the lock.
The typical programming style using condition variables uses the lock to
synchronize access to some shared state; threads that are interested in a
particular change of state call  repeatedly until they
see the desired state, while threads that modify the state call
 or  when they change
the state in such a way that it could possibly be a desired state for one
of the waiters.  For example, the following code is a generic
producer-consumer situation with unlimited buffer capacity:


The  loop checking for the application’s condition is necessary
because  can return after an arbitrary long time,
and the condition which prompted the  call may
no longer hold true.  This is inherent to multi-threaded programming.  The
 method can be used to automate the condition
checking, and eases the computation of timeouts:


To choose between  and ,
consider whether one state change can be interesting for only one or several
waiting threads.  E.g. in a typical producer-consumer situation, adding one
item to the buffer only needs to wake up one consumer thread.


class (lock=None)¶
This class implements condition variable objects.  A condition variable
allows one or more threads to wait until they are notified by another thread.
If the lock argument is given and not , it must be a 
or  object, and it is used as the underlying lock.  Otherwise,
a new  object is created and used as the underlying lock.

Changed in version 3.3: changed from a factory function to a class.



(*args)¶
Acquire the underlying lock. This method calls the corresponding method on
the underlying lock; the return value is whatever that method returns.



()¶
Release the underlying lock. This method calls the corresponding method on
the underlying lock; there is no return value.



(timeout=None)¶
Wait until notified or until a timeout occurs. If the calling thread has
not acquired the lock when this method is called, a  is
raised.
This method releases the underlying lock, and then blocks until it is
awakened by a  or  call for the same
condition variable in another thread, or until the optional timeout
occurs.  Once awakened or timed out, it re-acquires the lock and returns.
When the timeout argument is present and not , it should be a
floating point number specifying a timeout for the operation in seconds
(or fractions thereof).
When the underlying lock is an , it is not released using
its  method, since this may not actually unlock the lock
when it was acquired multiple times recursively.  Instead, an internal
interface of the  class is used, which really unlocks it
even when it has been recursively acquired several times. Another internal
interface is then used to restore the recursion level when the lock is
reacquired.
The return value is  unless a given timeout expired, in which
case it is .

Changed in version 3.2: Previously, the method always returned .




(predicate, timeout=None)¶
Wait until a condition evaluates to true.  predicate should be a
callable which result will be interpreted as a boolean value.
A timeout may be provided giving the maximum time to wait.
This utility method may call  repeatedly until the predicate
is satisfied, or until a timeout occurs. The return value is
the last return value of the predicate and will evaluate to
 if the method timed out.
Ignoring the timeout feature, calling this method is roughly equivalent to
writing:


Therefore, the same rules apply as with : The lock must be
held when called and is re-acquired on return.  The predicate is evaluated
with the lock held.

New in version 3.2.




(n=1)¶
By default, wake up one thread waiting on this condition, if any.  If the
calling thread has not acquired the lock when this method is called, a
 is raised.
This method wakes up at most n of the threads waiting for the condition
variable; it is a no-op if no threads are waiting.
The current implementation wakes up exactly n threads, if at least n
threads are waiting.  However, it’s not safe to rely on this behavior.
A future, optimized implementation may occasionally wake up more than
n threads.
Note: an awakened thread does not actually return from its 
call until it can reacquire the lock.  Since  does not
release the lock, its caller should.



()¶
Wake up all threads waiting on this condition.  This method acts like
, but wakes up all waiting threads instead of one. If the
calling thread has not acquired the lock when this method is called, a
 is raised.




Semaphore Objects¶
This is one of the oldest synchronization primitives in the history of computer
science, invented by the early Dutch computer scientist Edsger W. Dijkstra (he
used the names  and  instead of  and
).
A semaphore manages an internal counter which is decremented by each
 call and incremented by each 
call.  The counter can never go below zero; when 
finds that it is zero, it blocks, waiting until some other thread calls
.
Semaphores also support the context management protocol.


class (value=1)¶
This class implements semaphore objects.  A semaphore manages an atomic
counter representing the number of  calls minus the number of
 calls, plus an initial value.  The  method
blocks if necessary until it can return without making the counter negative.
If not given, value defaults to 1.
The optional argument gives the initial value for the internal counter; it
defaults to . If the value given is less than 0,  is
raised.

Changed in version 3.3: changed from a factory function to a class.



(blocking=True, timeout=None)¶
Acquire a semaphore.
When invoked without arguments:

If the internal counter is larger than zero on entry, decrement it by
one and return true immediately.
If the internal counter is zero on entry, block until awoken by a call to
.  Once awoken (and the counter is greater
than 0), decrement the counter by 1 and return true.  Exactly one
thread will be awoken by each call to .  The
order in which threads are awoken should not be relied on.

When invoked with blocking set to false, do not block.  If a call
without an argument would block, return false immediately; otherwise, do
the same thing as when called without arguments, and return true.
When invoked with a timeout other than , it will block for at
most timeout seconds.  If acquire does not complete successfully in
that interval, return false.  Return true otherwise.

Changed in version 3.2: The timeout parameter is new.




()¶
Release a semaphore, incrementing the internal counter by one.  When it
was zero on entry and another thread is waiting for it to become larger
than zero again, wake up that thread.




class (value=1)¶
Class implementing bounded semaphore objects.  A bounded semaphore checks to
make sure its current value doesn’t exceed its initial value.  If it does,
 is raised. In most situations semaphores are used to guard
resources with limited capacity.  If the semaphore is released too many times
it’s a sign of a bug.  If not given, value defaults to 1.

Changed in version 3.3: changed from a factory function to a class.



 Example¶
Semaphores are often used to guard resources with limited capacity, for example,
a database server.  In any situation where the size of the resource is fixed,
you should use a bounded semaphore.  Before spawning any worker threads, your
main thread would initialize the semaphore:


Once spawned, worker threads call the semaphore’s acquire and release methods
when they need to connect to the server:


The use of a bounded semaphore reduces the chance that a programming error which
causes the semaphore to be released more than it’s acquired will go undetected.



Event Objects¶
This is one of the simplest mechanisms for communication between threads: one
thread signals an event and other threads wait for it.
An event object manages an internal flag that can be set to true with the
 method and reset to false with the 
method.  The  method blocks until the flag is true.


class ¶
Class implementing event objects.  An event manages a flag that can be set to
true with the  method and reset to false with the
 method.  The  method blocks until the flag is true.
The flag is initially false.

Changed in version 3.3: changed from a factory function to a class.



()¶
Return true if and only if the internal flag is true.



()¶
Set the internal flag to true. All threads waiting for it to become true
are awakened. Threads that call  once the flag is true will
not block at all.



()¶
Reset the internal flag to false. Subsequently, threads calling
 will block until  is called to set the internal
flag to true again.



(timeout=None)¶
Block until the internal flag is true.  If the internal flag is true on
entry, return immediately.  Otherwise, block until another thread calls
 to set the flag to true, or until the optional timeout occurs.
When the timeout argument is present and not , it should be a
floating point number specifying a timeout for the operation in seconds
(or fractions thereof).
This method returns true if and only if the internal flag has been set to
true, either before the wait call or after the wait starts, so it will
always return  except if a timeout is given and the operation
times out.

Changed in version 3.1: Previously, the method always returned .





Timer Objects¶
This class represents an action that should be run only after a certain amount
of time has passed — a timer.   is a subclass of 
and as such also functions as an example of creating custom threads.
Timers are started, as with threads, by calling their 
method.  The timer can be stopped (before its action has begun) by calling the
 method.  The interval the timer will wait before
executing its action may not be exactly the same as the interval specified by
the user.
For example:




class (interval, function, args=None, kwargs=None)¶
Create a timer that will run function with arguments args and  keyword
arguments kwargs, after interval seconds have passed.
If args is  (the default) then an empty list will be used.
If kwargs is  (the default) then an empty dict will be used.

Changed in version 3.3: changed from a factory function to a class.



()¶
Stop the timer, and cancel the execution of the timer’s action.  This will
only work if the timer is still in its waiting stage.




Barrier Objects¶

New in version 3.2.

This class provides a simple synchronization primitive for use by a fixed number
of threads that need to wait for each other.  Each of the threads tries to pass
the barrier by calling the  method and will block until
all of the threads have made their  calls. At this point,
the threads are released simultaneously.
The barrier can be reused any number of times for the same number of threads.
As an example, here is a simple way to synchronize a client and server thread:




class (parties, action=None, timeout=None)¶
Create a barrier object for parties number of threads.  An action, when
provided, is a callable to be called by one of the threads when they are
released.  timeout is the default timeout value if none is specified for
the  method.


(timeout=None)¶
Pass the barrier.  When all the threads party to the barrier have called
this function, they are all released simultaneously.  If a timeout is
provided, it is used in preference to any that was supplied to the class
constructor.
The return value is an integer in the range 0 to parties – 1, different
for each thread.  This can be used to select a thread to do some special
housekeeping, e.g.:


If an action was provided to the constructor, one of the threads will
have called it prior to being released.  Should this call raise an error,
the barrier is put into the broken state.
If the call times out, the barrier is put into the broken state.
This method may raise a  exception if the
barrier is broken or reset while a thread is waiting.



()¶
Return the barrier to the default, empty state.  Any threads waiting on it
will receive the  exception.
Note that using this function may can require some external
synchronization if there are other threads whose state is unknown.  If a
barrier is broken it may be better to just leave it and create a new one.



()¶
Put the barrier into a broken state.  This causes any active or future
calls to  to fail with the .  Use
this for example if one of the needs to abort, to avoid deadlocking the
application.
It may be preferable to simply create the barrier with a sensible
timeout value to automatically guard against one of the threads going
awry.



¶
The number of threads required to pass the barrier.



¶
The number of threads currently waiting in the barrier.



¶
A boolean that is  if the barrier is in the broken state.




exception ¶
This exception, a subclass of , is raised when the
 object is reset or broken.



Using locks, conditions, and semaphores in the  statement¶
All of the objects provided by this module that have  and
 methods can be used as context managers for a 
statement.  The  method will be called when the block is
entered, and  will be called when the block is exited.  Hence,
the following snippet:


is equivalent to:


Currently, , , ,
, and  objects may be used as
 statement context managers.


