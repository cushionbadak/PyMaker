link:
library/asyncio-stream.html#streams

docs:

Streams¶
Streams are high-level async/await-ready primitives to work with
network connections.  Streams allow sending and receiving data without
using callbacks or low-level protocols and transports.
Here is an example of a TCP echo client written using asyncio
streams:


See also the Examples section below.
Stream Functions
The following top-level asyncio functions can be used to create
and work with streams:


coroutine (host=None, port=None, *, loop=None, limit=None, ssl=None, family=0, proto=0, flags=0, sock=None, local_addr=None, server_hostname=None, ssl_handshake_timeout=None)¶
Establish a network connection and return a pair of
 objects.
The returned reader and writer objects are instances of
 and  classes.
The loop argument is optional and can always be determined
automatically when this function is awaited from a coroutine.
limit determines the buffer size limit used by the
returned  instance.  By default the limit
is set to 64 KiB.
The rest of the arguments are passed directly to
.

New in version 3.7: The ssl_handshake_timeout parameter.




coroutine (client_connected_cb, host=None, port=None, *, loop=None, limit=None, family=socket.AF_UNSPEC, flags=socket.AI_PASSIVE, sock=None, backlog=100, ssl=None, reuse_address=None, reuse_port=None, ssl_handshake_timeout=None, start_serving=True)¶
Start a socket server.
The client_connected_cb callback is called whenever a new client
connection is established.  It receives a  pair
as two arguments, instances of the  and
 classes.
client_connected_cb can be a plain callable or a
coroutine function; if it is a coroutine function,
it will be automatically scheduled as a .
The loop argument is optional and can always be determined
automatically when this method is awaited from a coroutine.
limit determines the buffer size limit used by the
returned  instance.  By default the limit
is set to 64 KiB.
The rest of the arguments are passed directly to
.

New in version 3.7: The ssl_handshake_timeout and start_serving parameters.


Unix Sockets


coroutine (path=None, *, loop=None, limit=None, ssl=None, sock=None, server_hostname=None, ssl_handshake_timeout=None)¶
Establish a Unix socket connection and return a pair of
.
Similar to  but operates on Unix sockets.
See also the documentation of .
Availability: Unix.

New in version 3.7: The ssl_handshake_timeout parameter.


Changed in version 3.7: The path parameter can now be a path-like object




coroutine (client_connected_cb, path=None, *, loop=None, limit=None, sock=None, backlog=100, ssl=None, ssl_handshake_timeout=None, start_serving=True)¶
Start a Unix socket server.
Similar to  but works with Unix sockets.
See also the documentation of .
Availability: Unix.

New in version 3.7: The ssl_handshake_timeout and start_serving parameters.


Changed in version 3.7: The path parameter can now be a path-like object.




StreamReader¶


class ¶
Represents a reader object that provides APIs to read data
from the IO stream.
It is not recommended to instantiate StreamReader objects
directly; use  and 
instead.


coroutine (n=-1)¶
Read up to n bytes.  If n is not provided, or set to ,
read until EOF and return all read bytes.
If EOF was received and the internal buffer is empty,
return an empty  object.



coroutine ()¶
Read one line, where “line” is a sequence of bytes
ending with .
If EOF is received and  was not found, the method
returns partially read data.
If EOF is received and the internal buffer is empty,
return an empty  object.



coroutine (n)¶
Read exactly n bytes.
Raise an  if EOF is reached before n
can be read.  Use the 
attribute to get the partially read data.



coroutine (separator=b'\n')¶
Read data from the stream until separator is found.
On success, the data and separator will be removed from the
internal buffer (consumed). Returned data will include the
separator at the end.
If the amount of data read exceeds the configured stream limit, a
 exception is raised, and the data
is left in the internal buffer and can be read again.
If EOF is reached before the complete separator is found,
an  exception is raised, and the internal
buffer is reset.  The  attribute
may contain a portion of the separator.

New in version 3.5.2.




()¶
Return  if the buffer is empty and 
was called.




StreamWriter¶


class ¶
Represents a writer object that provides APIs to write data
to the IO stream.
It is not recommended to instantiate StreamWriter objects
directly; use  and 
instead.


()¶
Return True if the underlying transport supports
the  method, False otherwise.



()¶
Close the write end of the stream after the buffered write
data is flushed.



¶
Return the underlying asyncio transport.



(name, default=None)¶
Access optional transport information; see
 for details.



(data)¶
Write data to the stream.
This method is not subject to flow control.  Calls to  should
be followed by .



(data)¶
Write a list (or any iterable) of bytes to the stream.
This method is not subject to flow control. Calls to 
should be followed by .



coroutine ()¶
Wait until it is appropriate to resume writing to the stream.
Example:


This is a flow control method that interacts with the underlying
IO write buffer.  When the size of the buffer reaches
the high watermark, drain() blocks until the size of the
buffer is drained down to the low watermark and writing can
be resumed.  When there is nothing to wait for, the 
returns immediately.



()¶
Close the stream.



()¶
Return  if the stream is closed or in the process of
being closed.

New in version 3.7.




coroutine ()¶
Wait until the stream is closed.
Should be called after  to wait until the underlying
connection is closed.

New in version 3.7.





Examples¶

TCP echo client using streams¶
TCP echo client using the  function:



See also
The TCP echo client protocol
example uses the low-level  method.



TCP echo server using streams¶
TCP echo server using the  function:



See also
The TCP echo server protocol
example uses the  method.



Get HTTP headers¶
Simple example querying HTTP headers of the URL passed on the command line:


Usage:


or with HTTPS:




Register an open socket to wait for data using streams¶
Coroutine waiting until a socket receives data using the
 function:



See also
The register an open socket to wait for data using a protocol example uses a low-level protocol and
the  method.
The watch a file descriptor for read events example uses the low-level
 method to watch a file descriptor.



