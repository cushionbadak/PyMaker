link:
library/xml.etree.elementtree.html#functions

docs:

Functions¶


(text=None)¶
Comment element factory.  This factory function creates a special element
that will be serialized as an XML comment by the standard serializer.  The
comment string can be either a bytestring or a Unicode string.  text is a
string containing the comment string.  Returns an element instance
representing a comment.
Note that  skips over comments in the input
instead of creating comment objects for them. An  will
only contain comment nodes if they have been inserted into to
the tree using one of the  methods.



(elem)¶
Writes an element tree or element structure to sys.stdout.  This function
should be used for debugging only.
The exact output format is implementation dependent.  In this version, it’s
written as an ordinary XML file.
elem is an element tree or an individual element.



(text, parser=None)¶
Parses an XML section from a string constant.  Same as .  text
is a string containing XML data.  parser is an optional parser instance.
If not given, the standard  parser is used.
Returns an  instance.



(sequence, parser=None)¶
Parses an XML document from a sequence of string fragments.  sequence is a
list or other sequence containing XML data fragments.  parser is an
optional parser instance.  If not given, the standard 
parser is used.  Returns an  instance.

New in version 3.2.




(element)¶
Checks if an object appears to be a valid element object.  element is an
element instance.  Returns a true value if this is an element object.



(source, events=None, parser=None)¶
Parses an XML section into an element tree incrementally, and reports what’s
going on to the user.  source is a filename or file object
containing XML data.  events is a sequence of events to report back.  The
supported events are the strings , ,  and
 (the “ns” events are used to get detailed namespace
information).  If events is omitted, only  events are reported.
parser is an optional parser instance.  If not given, the standard
 parser is used.  parser must be a subclass of
 and can only use the default  as a
target.  Returns an iterator providing  pairs.
Note that while  builds the tree incrementally, it issues
blocking reads on source (or the file it names).  As such, it’s unsuitable
for applications where blocking reads can’t be made.  For fully non-blocking
parsing, see .

Note
 only guarantees that it has seen the “>” character of a
starting tag when it emits a “start” event, so the attributes are defined,
but the contents of the text and tail attributes are undefined at that
point.  The same applies to the element children; they may or may not be
present.
If you need a fully populated element, look for “end” events instead.


Deprecated since version 3.4: The parser argument.




(source, parser=None)¶
Parses an XML section into an element tree.  source is a filename or file
object containing XML data.  parser is an optional parser instance.  If
not given, the standard  parser is used.  Returns an
 instance.



(target, text=None)¶
PI element factory.  This factory function creates a special element that
will be serialized as an XML processing instruction.  target is a string
containing the PI target.  text is a string containing the PI contents, if
given.  Returns an element instance, representing a processing instruction.
Note that  skips over processing instructions
in the input instead of creating comment objects for them. An
 will only contain processing instruction nodes if
they have been inserted into to the tree using one of the
 methods.



(prefix, uri)¶
Registers a namespace prefix.  The registry is global, and any existing
mapping for either the given prefix or the namespace URI will be removed.
prefix is a namespace prefix.  uri is a namespace uri.  Tags and
attributes in this namespace will be serialized with the given prefix, if at
all possible.

New in version 3.2.




(parent, tag, attrib={}, **extra)¶
Subelement factory.  This function creates an element instance, and appends
it to an existing element.
The element name, attribute names, and attribute values can be either
bytestrings or Unicode strings.  parent is the parent element.  tag is
the subelement name.  attrib is an optional dictionary, containing element
attributes.  extra contains additional attributes, given as keyword
arguments.  Returns an element instance.



(element, encoding="us-ascii", method="xml", *, short_empty_elements=True)¶
Generates a string representation of an XML element, including all
subelements.  element is an  instance.  encoding [1] is
the output encoding (default is US-ASCII).  Use  to
generate a Unicode string (otherwise, a bytestring is generated).  method
is either ,  or  (default is ).
short_empty_elements has the same meaning as in .
Returns an (optionally) encoded string containing the XML data.

New in version 3.4: The short_empty_elements parameter.




(element, encoding="us-ascii", method="xml", *, short_empty_elements=True)¶
Generates a string representation of an XML element, including all
subelements.  element is an  instance.  encoding [1] is
the output encoding (default is US-ASCII).  Use  to
generate a Unicode string (otherwise, a bytestring is generated).  method
is either ,  or  (default is ).
short_empty_elements has the same meaning as in .
Returns a list of (optionally) encoded strings containing the XML data.
It does not guarantee any specific sequence, except that
.

New in version 3.2.


New in version 3.4: The short_empty_elements parameter.




(text, parser=None)¶
Parses an XML section from a string constant.  This function can be used to
embed “XML literals” in Python code.  text is a string containing XML
data.  parser is an optional parser instance.  If not given, the standard
 parser is used.  Returns an  instance.



(text, parser=None)¶
Parses an XML section from a string constant, and also returns a dictionary
which maps from element id:s to elements.  text is a string containing XML
data.  parser is an optional parser instance.  If not given, the standard
 parser is used.  Returns a tuple containing an
 instance and a dictionary.

