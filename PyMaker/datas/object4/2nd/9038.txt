link:
library/trace.html

docs:


 — Trace or track Python statement execution¶
Source code: Lib/trace.py

The  module allows you to trace program execution, generate
annotated statement coverage listings, print caller/callee relationships and
list functions executed during a program run.  It can be used in another program
or from the command line.

See also

Coverage.py
A popular third-party coverage tool that provides HTML
output along with advanced features such as branch coverage.



Command-Line Usage¶
The  module can be invoked from the command line.  It can be as
simple as


The above will execute  and generate annotated listings of
all Python modules imported during the execution into the current directory.


¶
Display usage and exit.



¶
Display the version of the module and exit.


Main options¶
At least one of the following options must be specified when invoking
.  The  option is mutually exclusive with
the  and  options. When
 is provided, neither  nor
 are accepted, and vice versa.


¶
Produce a set of annotated listing files upon program completion that shows
how many times each statement was executed.  See also
,  and
 below.



¶
Display lines as they are executed.



¶
Display the functions executed by running the program.



¶
Produce an annotated list from an earlier program run that used the
 and  option.  This does not
execute any code.



¶
Display the calling relationships exposed by running the program.



Modifiers¶


¶
Name of a file to accumulate counts over several tracing runs.  Should be
used with the  option.



¶
Directory where the report files go.  The coverage report for
 is written to file .



¶
When generating annotated listings, mark lines which were not executed with
.



¶
When using  or , write a brief
summary to stdout for each file processed.



¶
Do not generate annotated listings.  This is useful if you intend to make
several runs with , and then produce a single set of
annotated listings at the end.



¶
Prefix each line with the time since the program started.  Only used while
tracing.



Filters¶
These options may be repeated multiple times.


¶
Ignore each of the given module names and its submodules (if it is a
package).  The argument can be a list of names separated by a comma.



¶
Ignore all modules and packages in the named directory and subdirectories.
The argument can be a list of directories separated by .




Programmatic Interface¶


class (count=1, trace=1, countfuncs=0, countcallers=0, ignoremods=(), ignoredirs=(), infile=None, outfile=None, timing=False)¶
Create an object to trace execution of a single statement or expression.  All
parameters are optional.  count enables counting of line numbers.  trace
enables line execution tracing.  countfuncs enables listing of the
functions called during the run.  countcallers enables call relationship
tracking.  ignoremods is a list of modules or packages to ignore.
ignoredirs is a list of directories whose modules or packages should be
ignored.  infile is the name of the file from which to read stored count
information.  outfile is the name of the file in which to write updated
count information.  timing enables a timestamp relative to when tracing was
started to be displayed.



(cmd)¶
Execute the command and gather statistics from the execution with
the current tracing parameters.  cmd must be a string or code object,
suitable for passing into .



(cmd, globals=None, locals=None)¶
Execute the command and gather statistics from the execution with the
current tracing parameters, in the defined global and local
environments.  If not defined, globals and locals default to empty
dictionaries.



(func, *args, **kwds)¶
Call func with the given arguments under control of the 
object with the current tracing parameters.



()¶
Return a  object that contains the cumulative
results of all previous calls to ,  and 
for the given  instance.  Does not reset the accumulated
trace results.





class ¶
A container for coverage results, created by .  Should
not be created directly by the user.



(other)¶
Merge in data from another  object.



(show_missing=True, summary=False, coverdir=None)¶
Write coverage results.  Set show_missing to show lines that had no
hits.  Set summary to include in the output the coverage summary per
module.  coverdir specifies the directory into which the coverage
result files will be output.  If , the results for each source
file are placed in its directory.



A simple example demonstrating the use of the programmatic interface:




