link:
library/decimal.html#quick-start-tutorial

docs:

Quick-start Tutorial¶
The usual start to using decimals is importing the module, viewing the current
context with  and, if necessary, setting new values for
precision, rounding, or enabled traps:


Decimal instances can be constructed from integers, strings, floats, or tuples.
Construction from an integer or a float performs an exact conversion of the
value of that integer or float.  Decimal numbers include special values such as
 which stands for “Not a number”, positive and negative
, and :


If the  signal is trapped, accidental mixing of
decimals and floats in constructors or ordering comparisons raises
an exception:



New in version 3.3.

The significance of a new Decimal is determined solely by the number of digits
input.  Context precision and rounding only come into play during arithmetic
operations.


If the internal limits of the C version are exceeded, constructing
a decimal raises :



Changed in version 3.3.

Decimals interact well with much of the rest of Python.  Here is a small decimal
floating point flying circus:


And some mathematical functions are also available to Decimal:


The  method rounds a number to a fixed exponent.  This method is
useful for monetary applications that often round results to a fixed number of
places:


As shown above, the  function accesses the current context and
allows the settings to be changed.  This approach meets the needs of most
applications.
For more advanced work, it may be useful to create alternate contexts using the
Context() constructor.  To make an alternate active, use the 
function.
In accordance with the standard, the  module provides two ready to
use standard contexts,  and . The
former is especially useful for debugging because many of the traps are
enabled:


Contexts also have signal flags for monitoring exceptional conditions
encountered during computations.  The flags remain set until explicitly cleared,
so it is best to clear the flags before each set of monitored computations by
using the  method.


The flags entry shows that the rational approximation to  was
rounded (digits beyond the context precision were thrown away) and that the
result is inexact (some of the discarded digits were non-zero).
Individual traps are set using the dictionary in the  field of a
context:


Most programs adjust the current context only once, at the beginning of the
program.  And, in many applications, data is converted to  with
a single cast inside a loop.  With context set and decimals created, the bulk of
the program manipulates the data no differently than with other Python numeric
types.
