link:
library/pickle.html#what-can-be-pickled-and-unpickled

docs:

What can be pickled and unpickled?¶
The following types can be pickled:

, , and 
integers, floating point numbers, complex numbers
strings, bytes, bytearrays
tuples, lists, sets, and dictionaries containing only picklable objects
functions defined at the top level of a module (using , not
)
built-in functions defined at the top level of a module
classes that are defined at the top level of a module
instances of such classes whose  or the result of
calling  is picklable  (see section Pickling Class Instances for
details).

Attempts to pickle unpicklable objects will raise the 
exception; when this happens, an unspecified number of bytes may have already
been written to the underlying file.  Trying to pickle a highly recursive data
structure may exceed the maximum recursion depth, a  will be
raised in this case.  You can carefully raise this limit with
.
Note that functions (built-in and user-defined) are pickled by “fully qualified”
name reference, not by value. [2]  This means that only the function name is
pickled, along with the name of the module the function is defined in.  Neither
the function’s code, nor any of its function attributes are pickled.  Thus the
defining module must be importable in the unpickling environment, and the module
must contain the named object, otherwise an exception will be raised. [3]
Similarly, classes are pickled by named reference, so the same restrictions in
the unpickling environment apply.  Note that none of the class’s code or data is
pickled, so in the following example the class attribute  is not
restored in the unpickling environment:


These restrictions are why picklable functions and classes must be defined in
the top level of a module.
Similarly, when class instances are pickled, their class’s code and data are not
pickled along with them.  Only the instance data are pickled.  This is done on
purpose, so you can fix bugs in a class or add methods to the class and still
load objects that were created with an earlier version of the class.  If you
plan to have long-lived objects that will see many versions of a class, it may
be worthwhile to put a version number in the objects so that suitable
conversions can be made by the class’s  method.
