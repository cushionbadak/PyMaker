link:
reference/datamodel.html#implementing-descriptors

docs:

3.3.2.2. Implementing Descriptors¶
The following methods only apply when an instance of the class containing the
method (a so-called descriptor class) appears in an owner class (the
descriptor must be in either the owner’s class dictionary or in the class
dictionary for one of its parents).  In the examples below, “the attribute”
refers to the attribute whose name is the key of the property in the owner
class’ .


(self, instance, owner)¶
Called to get the attribute of the owner class (class attribute access) or of an
instance of that class (instance attribute access). owner is always the owner
class, while instance is the instance that the attribute was accessed through,
or  when the attribute is accessed through the owner.  This method
should return the (computed) attribute value or raise an 
exception.



(self, instance, value)¶
Called to set the attribute on an instance instance of the owner class to a
new value, value.



(self, instance)¶
Called to delete the attribute on an instance instance of the owner class.



(self, owner, name)¶
Called at the time the owning class owner is created. The
descriptor has been assigned to name.

New in version 3.6.


The attribute  is interpreted by the  module
as specifying the class where this object was defined (setting this
appropriately can assist in runtime introspection of dynamic class attributes).
For callables, it may indicate that an instance of the given type (or a
subclass) is expected or required as the first positional argument (for example,
CPython sets this attribute for unbound methods that are implemented in C).
