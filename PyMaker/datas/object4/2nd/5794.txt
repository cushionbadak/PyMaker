link:
library/json.html#encoders-and-decoders

docs:

Encoders and Decoders¶


class (*, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)¶
Simple JSON decoder.
Performs the following translations in decoding by default:






JSON
Python



object
dict

array
list

string
str

number (int)
int

number (real)
float

true
True

false
False

null
None



It also understands , , and  as their
corresponding  values, which is outside the JSON spec.
object_hook, if specified, will be called with the result of every JSON
object decoded and its return value will be used in place of the given
.  This can be used to provide custom deserializations (e.g. to
support JSON-RPC class hinting).
object_pairs_hook, if specified will be called with the result of every
JSON object decoded with an ordered list of pairs.  The return value of
object_pairs_hook will be used instead of the .  This
feature can be used to implement custom decoders.  If object_hook is also
defined, the object_pairs_hook takes priority.

Changed in version 3.1: Added support for object_pairs_hook.

parse_float, if specified, will be called with the string of every JSON
float to be decoded.  By default, this is equivalent to .
This can be used to use another datatype or parser for JSON floats
(e.g. ).
parse_int, if specified, will be called with the string of every JSON int
to be decoded.  By default, this is equivalent to .  This can
be used to use another datatype or parser for JSON integers
(e.g. ).
parse_constant, if specified, will be called with one of the following
strings: , , .
This can be used to raise an exception if invalid JSON numbers
are encountered.
If strict is false ( is the default), then control characters
will be allowed inside strings.  Control characters in this context are
those with character codes in the 0–31 range, including  (tab),
,  and .
If the data being deserialized is not a valid JSON document, a
 will be raised.

Changed in version 3.6: All parameters are now keyword-only.



(s)¶
Return the Python representation of s (a  instance
containing a JSON document).
 will be raised if the given JSON document is not
valid.



(s)¶
Decode a JSON document from s (a  beginning with a
JSON document) and return a 2-tuple of the Python representation
and the index in s where the document ended.
This can be used to decode a JSON document from a string that may have
extraneous data at the end.




class (*, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, default=None)¶
Extensible JSON encoder for Python data structures.
Supports the following objects and types by default:






Python
JSON



dict
object

list, tuple
array

str
string

int, float, int- & float-derived Enums
number

True
true

False
false

None
null




Changed in version 3.4: Added support for int- and float-derived Enum classes.

To extend this to recognize other objects, subclass and implement a
 method with another method that returns a serializable object
for  if possible, otherwise it should call the superclass implementation
(to raise ).
If skipkeys is false (the default), then it is a  to
attempt encoding of keys that are not , ,
 or .  If skipkeys is true, such items are simply
skipped.
If ensure_ascii is true (the default), the output is guaranteed to
have all incoming non-ASCII characters escaped.  If ensure_ascii is
false, these characters will be output as-is.
If check_circular is true (the default), then lists, dicts, and custom
encoded objects will be checked for circular references during encoding to
prevent an infinite recursion (which would cause an ).
Otherwise, no such check takes place.
If allow_nan is true (the default), then , , and
 will be encoded as such.  This behavior is not JSON
specification compliant, but is consistent with most JavaScript based
encoders and decoders.  Otherwise, it will be a  to encode
such floats.
If sort_keys is true (default: ), then the output of dictionaries
will be sorted by key; this is useful for regression tests to ensure that
JSON serializations can be compared on a day-to-day basis.
If indent is a non-negative integer or string, then JSON array elements and
object members will be pretty-printed with that indent level.  An indent level
of 0, negative, or  will only insert newlines.   (the default)
selects the most compact representation. Using a positive integer indent
indents that many spaces per level.  If indent is a string (such as ),
that string is used to indent each level.

Changed in version 3.2: Allow strings for indent in addition to integers.

If specified, separators should be an 
tuple.  The default is  if indent is  and
 otherwise.  To get the most compact JSON representation,
you should specify  to eliminate whitespace.

Changed in version 3.4: Use  as default if indent is not .

If specified, default should be a function that gets called for objects that
can’t otherwise be serialized.  It should return a JSON encodable version of
the object or raise a .  If not specified, 
is raised.

Changed in version 3.6: All parameters are now keyword-only.



(o)¶
Implement this method in a subclass such that it returns a serializable
object for o, or calls the base implementation (to raise a
).
For example, to support arbitrary iterators, you could implement default
like this:





(o)¶
Return a JSON string representation of a Python data structure, o.  For
example:





(o)¶
Encode the given object, o, and yield each string representation as
available.  For example:




