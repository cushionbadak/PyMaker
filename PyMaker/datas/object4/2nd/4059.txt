link:
library/ctypes.html#type-conversions

docs:

Type conversionsÂ¶
Usually, ctypes does strict type checking.  This means, if you have
 in the  list of a function or as the type of
a member field in a structure definition, only instances of exactly the same
type are accepted.  There are some exceptions to this rule, where ctypes accepts
other objects.  For example, you can pass compatible array instances instead of
pointer types.  So, for , ctypes accepts an array of c_int:


In addition, if a function argument is explicitly declared to be a pointer type
(such as ) in , an object of the pointed
type ( in this case) can be passed to the function.  ctypes will apply
the required  conversion in this case automatically.
To set a POINTER type field to , you can assign :


Sometimes you have instances of incompatible types.  In C, you can cast one type
into another type.   provides a  function which can be
used in the same way.  The  structure defined above accepts
 pointers or  arrays for its  field,
but not instances of other types:


For these cases, the  function is handy.
The  function can be used to cast a ctypes instance into a pointer
to a different ctypes data type.   takes two parameters, a ctypes
object that is or can be converted to a pointer of some kind, and a ctypes
pointer type.  It returns an instance of the second argument, which references
the same memory block as the first argument:


So,  can be used to assign to the  field of  the
structure:


