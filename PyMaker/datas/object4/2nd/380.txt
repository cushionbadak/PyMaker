link:
library/stdtypes.html#comparisons

docs:

ComparisonsÂ¶
There are eight comparison operations in Python.  They all have the same
priority (which is higher than that of the Boolean operations).  Comparisons can
be chained arbitrarily; for example,  is equivalent to , except that y is evaluated only once (but in both cases z is not
evaluated at all when  is found to be false).
This table summarizes the comparison operations:






Operation
Meaning




strictly less than


less than or equal


strictly greater than


greater than or equal


equal


not equal


object identity


negated object identity



Objects of different types, except different numeric types, never compare equal.
Furthermore, some types (for example, function objects) support only a degenerate
notion of comparison where any two objects of that type are unequal.  The ,
,  and  operators will raise a  exception when
comparing a complex number with another built-in numeric type, when the objects
are of different types that cannot be compared, or in other cases where there is
no defined ordering.
Non-identical instances of a class normally compare as non-equal unless the
class defines the  method.
Instances of a class cannot be ordered with respect to other instances of the
same class, or other types of object, unless the class defines enough of the
methods , , , and  (in
general,  and  are sufficient, if you want the
conventional meanings of the comparison operators).
The behavior of the  and  operators cannot be
customized; also they can be applied to any two objects and never raise an
exception.
Two more operations with the same syntactic priority,  and
, are supported by types that are iterable or
implement the  method.
