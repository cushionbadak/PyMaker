link:
library/ipaddress.html#module-ipaddress

docs:

 — IPv4/IPv6 manipulation library¶
Source code: Lib/ipaddress.py

 provides the capabilities to create, manipulate and
operate on IPv4 and IPv6 addresses and networks.
The functions and classes in this module make it straightforward to handle
various tasks related to IP addresses, including checking whether or not two
hosts are on the same subnet, iterating over all hosts in a particular
subnet, checking whether or not a string represents a valid IP address or
network definition, and so on.
This is the full module API reference—for an overview and introduction, see
An introduction to the ipaddress module.

New in version 3.3.


Convenience factory functions¶
The  module provides factory functions to conveniently create
IP addresses, networks and interfaces:


(address)¶
Return an  or  object depending on
the IP address passed as argument.  Either IPv4 or IPv6 addresses may be
supplied; integers less than 2**32 will be considered to be IPv4 by default.
A  is raised if address does not represent a valid IPv4
or IPv6 address.





(address, strict=True)¶
Return an  or  object depending on
the IP address passed as argument.  address is a string or integer
representing the IP network.  Either IPv4 or IPv6 networks may be supplied;
integers less than 2**32 will be considered to be IPv4 by default.  strict
is passed to  or  constructor.  A
 is raised if address does not represent a valid IPv4 or
IPv6 address, or if the network has host bits set.





(address)¶
Return an  or  object depending
on the IP address passed as argument.  address is a string or integer
representing the IP address.  Either IPv4 or IPv6 addresses may be supplied;
integers less than 2**32 will be considered to be IPv4 by default.  A
 is raised if address does not represent a valid IPv4 or
IPv6 address.

One downside of these convenience functions is that the need to handle both
IPv4 and IPv6 formats means that error messages provide minimal
information on the precise error, as the functions don’t know whether the
IPv4 or IPv6 format was intended. More detailed error reporting can be
obtained by calling the appropriate version specific class constructors
directly.


IP Addresses¶

Address objects¶
The  and  objects share a lot of common
attributes.  Some attributes that are only meaningful for IPv6 addresses are
also implemented by  objects, in order to make it easier to
write code that handles both IP versions correctly.  Address objects are
hashable, so they can be used as keys in dictionaries.


class (address)¶
Construct an IPv4 address.  An  is raised if
address is not a valid IPv4 address.
The following constitutes a valid IPv4 address:

A string in decimal-dot notation, consisting of four decimal integers in
the inclusive range 0–255, separated by dots (e.g. ). Each
integer represents an octet (byte) in the address. Leading zeroes are
tolerated only for values less than 8 (as there is no ambiguity
between the decimal and octal interpretations of such strings).
An integer that fits into 32 bits.
An integer packed into a  object of length 4 (most
significant octet first).





¶
The appropriate version number:  for IPv4,  for IPv6.



¶
The total number of bits in the address representation for this
version:  for IPv4,  for IPv6.
The prefix defines the number of leading bits in an  address that
are compared to determine whether or not an address is part of a
network.



¶



¶
The string representation in dotted decimal notation. Leading zeroes
are never included in the representation.
As IPv4 does not define a shorthand notation for addresses with octets
set to zero, these two attributes are always the same as 
for IPv4 addresses. Exposing these attributes makes it easier to
write display code that can handle both IPv4 and IPv6 addresses.



¶
The binary representation of this address - a  object of
the appropriate length (most significant octet first). This is 4 bytes
for IPv4 and 16 bytes for IPv6.



¶
The name of the reverse DNS PTR record for the IP address, e.g.:


This is the name that could be used for performing a PTR lookup, not the
resolved hostname itself.

New in version 3.5.




¶
 if the address is reserved for multicast use.  See
RFC 3171 (for IPv4) or RFC 2373 (for IPv6).



¶
 if the address is allocated for private networks.  See
iana-ipv4-special-registry (for IPv4) or iana-ipv6-special-registry
(for IPv6).



¶
 if the address is allocated for public networks.  See
iana-ipv4-special-registry (for IPv4) or iana-ipv6-special-registry
(for IPv6).

New in version 3.4.




¶
 if the address is unspecified.  See RFC 5735 (for IPv4)
or RFC 2373 (for IPv6).



¶
 if the address is otherwise IETF reserved.



¶
 if this is a loopback address.  See RFC 3330 (for IPv4)
or RFC 2373 (for IPv6).



¶
 if the address is reserved for link-local usage.  See
RFC 3927.




class (address)¶
Construct an IPv6 address.  An  is raised if
address is not a valid IPv6 address.
The following constitutes a valid IPv6 address:

A string consisting of eight groups of four hexadecimal digits, each
group representing 16 bits.  The groups are separated by colons.
This describes an exploded (longhand) notation.  The string can
also be compressed (shorthand notation) by various means.  See
RFC 4291 for details.  For example,
 can be compressed to
.
An integer that fits into 128 bits.
An integer packed into a  object of length 16, big-endian.





¶

The short form of the address representation, with leading zeroes in
groups omitted and the longest sequence of groups consisting entirely of
zeroes collapsed to a single empty group.
This is also the value returned by  for IPv6 addresses.


¶

The long form of the address representation, with all leading zeroes and
groups consisting entirely of zeroes included.
For the following attributes, see the corresponding documentation of the
 class:


¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶

New in version 3.4: is_global




¶
 if the address is reserved for site-local usage.  Note that
the site-local address space has been deprecated by RFC 3879. Use
 to test if this address is in the
space of unique local addresses as defined by RFC 4193.



¶
For addresses that appear to be IPv4 mapped addresses (starting with
), this property will report the embedded IPv4 address.
For any other address, this property will be .



¶
For addresses that appear to be 6to4 addresses  (starting with
) as defined by RFC 3056, this property will report
the embedded IPv4 address.  For any other address, this property will
be .



¶
For addresses that appear to be Teredo addresses (starting with
) as defined by RFC 4380, this property will report
the embedded  IP address pair.  For any other
address, this property will be .




Conversion to Strings and Integers¶
To interoperate with networking interfaces such as the socket module,
addresses must be converted to strings or integers. This is handled using
the  and  builtin functions:




Operators¶
Address objects support some operators.  Unless stated otherwise, operators can
only be applied between compatible objects (i.e. IPv4 with IPv4, IPv6 with
IPv6).

Comparison operators¶
Address objects can be compared with the usual set of comparison operators.  Some
examples:




Arithmetic operators¶
Integers can be added to or subtracted from address objects.  Some examples:






IP Network definitions¶
The  and  objects provide a mechanism
for defining and inspecting IP network definitions.  A network definition
consists of a mask and a network address, and as such defines a range of
IP addresses that equal the network address when masked (binary AND) with the
mask.  For example, a network definition with the mask  and
the network address  consists of IP addresses in the inclusive
range  to .

Prefix, net mask and host mask¶
There are several equivalent ways to specify IP network masks.  A prefix
 is a notation that denotes how many high-order bits are set in
the network mask.  A net mask is an IP address with some number of
high-order bits set.  Thus the prefix  is equivalent to the net mask
 in IPv4, or  in IPv6.  In addition, a
host mask is the logical inverse of a net mask, and is sometimes used
(for example in Cisco access control lists) to denote a network mask.  The
host mask equivalent to  in IPv4 is .


Network objects¶
All attributes implemented by address objects are implemented by network
objects as well.  In addition, network objects implement additional attributes.
All of these are common between  and ,
so to avoid duplication they are only documented for .
Network objects are hashable, so they can be used as keys in
dictionaries.


class (address, strict=True)¶
Construct an IPv4 network definition.  address can be one of the following:

A string consisting of an IP address and an optional mask, separated by
a slash ().  The IP address is the network address, and the mask
can be either a single number, which means it’s a prefix, or a string
representation of an IPv4 address.  If it’s the latter, the mask is
interpreted as a net mask if it starts with a non-zero field, or as a
host mask if it starts with a zero field, with the single exception of
an all-zero mask which is treated as a net mask.  If no mask is provided,
it’s considered to be .
For example, the following address specifications are equivalent:
,  and
.

An integer that fits into 32 bits.  This is equivalent to a
single-address network, with the network address being address and
the mask being .

An integer packed into a  object of length 4, big-endian.
The interpretation is similar to an integer address.

A two-tuple of an address description and a netmask, where the address
description is either a string, a 32-bits integer, a 4-bytes packed
integer, or an existing IPv4Address object; and the netmask is either
an integer representing the prefix length (e.g. ) or a string
representing the prefix mask (e.g. ).


An  is raised if address is not a valid IPv4
address.  A  is raised if the mask is not valid for
an IPv4 address.
If strict is  and host bits are set in the supplied address,
then  is raised.  Otherwise, the host bits are masked out
to determine the appropriate network address.
Unless stated otherwise, all network methods accepting other network/address
objects will raise  if the argument’s IP version is
incompatible to .

Changed in version 3.5: Added the two-tuple form for the address constructor parameter.



¶



¶
Refer to the corresponding attribute documentation in
.



¶



¶



¶



¶



¶



¶
These attributes are true for the network as a whole if they are true
for both the network address and the broadcast address.



¶
The network address for the network. The network address and the
prefix length together uniquely define a network.



¶
The broadcast address for the network. Packets sent to the broadcast
address should be received by every host on the network.



¶
The host mask, as an  object.



¶
The net mask, as an  object.



¶



¶



¶
A string representation of the network, with the mask in prefix
notation.
 and  are always the same as
.
 uses the exploded form the network address.



¶
A string representation of the network, with the mask in net mask
notation.



¶
A string representation of the network, with the mask in host mask
notation.



¶
The total number of addresses in the network.



¶
Length of the network prefix, in bits.



()¶
Returns an iterator over the usable hosts in the network.  The usable
hosts are all the IP addresses that belong to the network, except the
network address itself and the network broadcast address.  For networks
with a mask length of 31, the network address and network broadcast
address are also included in the result.





(other)¶
 if this network is partly or wholly contained in other or
other is wholly contained in this network.



(network)¶
Computes the network definitions resulting from removing the given
network from this one.  Returns an iterator of network objects.
Raises  if network is not completely contained in
this network.





(prefixlen_diff=1, new_prefix=None)¶
The subnets that join to make the current network definition, depending
on the argument values.  prefixlen_diff is the amount our prefix
length should be increased by.  new_prefix is the desired new
prefix of the subnets; it must be larger than our prefix.  One and
only one of prefixlen_diff and new_prefix must be set.  Returns an
iterator of network objects.





(prefixlen_diff=1, new_prefix=None)¶
The supernet containing this network definition, depending on the
argument values.  prefixlen_diff is the amount our prefix length
should be decreased by.  new_prefix is the desired new prefix of
the supernet; it must be smaller than our prefix.  One and only one
of prefixlen_diff and new_prefix must be set.  Returns a single
network object.





(other)¶
Returns True if this network is a subnet of other.



New in version 3.7.




(other)¶
Returns True if this network is a supernet of other.



New in version 3.7.




(other)¶
Compare this network to other.  In this comparison only the network
addresses are considered; host bits aren’t.  Returns either ,
 or .



Deprecated since version 3.7: It uses the same ordering and comparison algorithm as “<”, “==”, and “>”





class (address, strict=True)¶
Construct an IPv6 network definition.  address can be one of the following:

A string consisting of an IP address and an optional prefix length,
separated by a slash ().  The IP address is the network address,
and the prefix length must be a single number, the prefix.  If no
prefix length is provided, it’s considered to be .
Note that currently expanded netmasks are not supported.  That means
 is a valid argument while 
not.

An integer that fits into 128 bits.  This is equivalent to a
single-address network, with the network address being address and
the mask being .

An integer packed into a  object of length 16, big-endian.
The interpretation is similar to an integer address.

A two-tuple of an address description and a netmask, where the address
description is either a string, a 128-bits integer, a 16-bytes packed
integer, or an existing IPv6Address object; and the netmask is an
integer representing the prefix length.


An  is raised if address is not a valid IPv6
address.  A  is raised if the mask is not valid for
an IPv6 address.
If strict is  and host bits are set in the supplied address,
then  is raised.  Otherwise, the host bits are masked out
to determine the appropriate network address.

Changed in version 3.5: Added the two-tuple form for the address constructor parameter.



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



¶



()¶
Returns an iterator over the usable hosts in the network.  The usable
hosts are all the IP addresses that belong to the network, except the
Subnet-Router anycast address.  For networks with a mask length of 127,
the Subnet-Router anycast address is also included in the result.



(other)¶



(network)¶



(prefixlen_diff=1, new_prefix=None)¶



(prefixlen_diff=1, new_prefix=None)¶



(other)¶



(other)¶



(other)¶
Refer to the corresponding attribute documentation in
.



¶
These attribute is true for the network as a whole if it is true
for both the network address and the broadcast address.




Operators¶
Network objects support some operators.  Unless stated otherwise, operators can
only be applied between compatible objects (i.e. IPv4 with IPv4, IPv6 with
IPv6).

Logical operators¶
Network objects can be compared with the usual set of logical operators.
Network objects are ordered first by network address, then by net mask.


Iteration¶
Network objects can be iterated to list all the addresses belonging to the
network.  For iteration, all hosts are returned, including unusable hosts
(for usable hosts, use the  method).  An
example:




Networks as containers of addresses¶
Network objects can act as containers of addresses.  Some examples:






Interface objects¶
Interface objects are hashable, so they can be used as keys in
dictionaries.


class (address)¶
Construct an IPv4 interface.  The meaning of address is as in the
constructor of , except that arbitrary host addresses
are always accepted.
 is a subclass of , so it inherits
all the attributes from that class.  In addition, the following attributes
are available:


¶
The address () without network information.





¶
The network () this interface belongs to.





¶
A string representation of the interface with the mask in prefix notation.





¶
A string representation of the interface with the network as a net mask.





¶
A string representation of the interface with the network as a host mask.






class (address)¶
Construct an IPv6 interface.  The meaning of address is as in the
constructor of , except that arbitrary host addresses
are always accepted.
 is a subclass of , so it inherits
all the attributes from that class.  In addition, the following attributes
are available:


¶



¶



¶



¶



¶
Refer to the corresponding attribute documentation in
.



Operators¶
Interface objects support some operators.  Unless stated otherwise, operators
can only be applied between compatible objects (i.e. IPv4 with IPv4, IPv6 with
IPv6).

Logical operators¶
Interface objects can be compared with the usual set of logical operators.
For equality comparison ( and ), both the IP address and network
must be the same for the objects to be equal.  An interface will not compare
equal to any address or network object.
For ordering (, , etc) the rules are different.  Interface and
address objects with the same IP version can be compared, and the address
objects will always sort before the interface objects.  Two interface objects
are first compared by their networks and, if those are the same, then by their
IP addresses.




Other Module Level Functions¶
The module also provides the following module level functions:


(address)¶
Represent an address as 4 packed bytes in network (big-endian) order.
address is an integer representation of an IPv4 IP address.  A
 is raised if the integer is negative or too large to be an
IPv4 IP address.





(address)¶
Represent an address as 16 packed bytes in network (big-endian) order.
address is an integer representation of an IPv6 IP address.  A
 is raised if the integer is negative or too large to be an
IPv6 IP address.



(first, last)¶
Return an iterator of the summarized network range given the first and last
IP addresses.  first is the first  or
 in the range and last is the last 
or  in the range.  A  is raised if
first or last are not IP addresses or are not of the same version.  A
 is raised if last is not greater than first or if
first address version is not 4 or 6.





(addresses)¶
Return an iterator of the collapsed  or
 objects.  addresses is an iterator of
 or  objects.  A  is
raised if addresses contains mixed version objects.





(obj)¶
Return a key suitable for sorting between networks and addresses.  Address
and Network objects are not sortable by default; they’re fundamentally
different, so the expression:


doesn’t make sense.  There are some times however, where you may wish to
have  sort these anyway.  If you need to do this, you can use
this function as the key argument to .
obj is either a network or address object.



Custom Exceptions¶
To support more specific error reporting from class constructors, the
module defines the following exceptions:


exception (ValueError)¶
Any value error related to the address.



exception (ValueError)¶
Any value error related to the net mask.


