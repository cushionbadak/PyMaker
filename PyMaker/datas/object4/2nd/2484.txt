link:
library/gzip.html#module-gzip

docs:

 — Support for gzip files¶
Source code: Lib/gzip.py

This module provides a simple interface to compress and decompress files just
like the GNU programs gzip and gunzip would.
The data compression is provided by the  module.
The  module provides the  class, as well as the
,  and  convenience functions.
The  class reads and writes gzip-format files,
automatically compressing or decompressing the data so that it looks like an
ordinary file object.
Note that additional file formats which can be decompressed by the
gzip and gunzip programs, such  as those produced by
compress and pack, are not supported by this module.
The module defines the following items:


(filename, mode='rb', compresslevel=9, encoding=None, errors=None, newline=None)¶
Open a gzip-compressed file in binary or text mode, returning a file
object.
The filename argument can be an actual filename (a  or
 object), or an existing file object to read from or write to.
The mode argument can be any of , , , ,
, ,  or  for binary mode, or ,
, , or  for text mode. The default is .
The compresslevel argument is an integer from 0 to 9, as for the
 constructor.
For binary mode, this function is equivalent to the 
constructor: . In this case, the
encoding, errors and newline arguments must not be provided.
For text mode, a  object is created, and wrapped in an
 instance with the specified encoding, error
handling behavior, and line ending(s).

Changed in version 3.3: Added support for filename being a file object, support for text mode,
and the encoding, errors and newline arguments.


Changed in version 3.4: Added support for the ,  and  modes.


Changed in version 3.6: Accepts a path-like object.




class (filename=None, mode=None, compresslevel=9, fileobj=None, mtime=None)¶
Constructor for the  class, which simulates most of the
methods of a file object, with the exception of the 
method.  At least one of fileobj and filename must be given a non-trivial
value.
The new class instance is based on fileobj, which can be a regular file, an
 object, or any other object which simulates a file.  It
defaults to , in which case filename is opened to provide a file
object.
When fileobj is not , the filename argument is only used to be
included in the gzip file header, which may include the original
filename of the uncompressed file.  It defaults to the filename of fileobj, if
discernible; otherwise, it defaults to the empty string, and in this case the
original filename is not included in the header.
The mode argument can be any of , , , , ,
, , or , depending on whether the file will be read or
written.  The default is the mode of fileobj if discernible; otherwise, the
default is .
Note that the file is always opened in binary mode. To open a compressed file
in text mode, use  (or wrap your  with an
).
The compresslevel argument is an integer from  to  controlling
the level of compression;  is fastest and produces the least
compression, and  is slowest and produces the most compression. 
is no compression. The default is .
The mtime argument is an optional numeric timestamp to be written to
the last modification time field in the stream when compressing.  It
should only be provided in compression mode.  If omitted or , the
current time is used.  See the  attribute for more details.
Calling a  object’s  method does not close
fileobj, since you might wish to append more material after the compressed
data.  This also allows you to pass an  object opened for
writing as fileobj, and retrieve the resulting memory buffer using the
 object’s  method.
 supports the  interface,
including iteration and the  statement.  Only the
 method isn’t implemented.
 also provides the following method and attribute:


(n)¶
Read n uncompressed bytes without advancing the file position.
At most one single read on the compressed stream is done to satisfy
the call.  The number of bytes returned may be more or less than
requested.

Note
While calling  does not change the file position of
the , it may change the position of the underlying
file object (e.g. if the  was constructed with the
fileobj parameter).


New in version 3.2.




¶
When decompressing, the value of the last modification time field in
the most recently read header may be read from this attribute, as an
integer.  The initial value before reading any headers is .
All gzip compressed streams are required to contain this
timestamp field.  Some programs, such as gunzip, make use
of the timestamp.  The format is the same as the return value of
 and the  attribute of
the object returned by .


Changed in version 3.1: Support for the  statement was added, along with the
mtime constructor argument and  attribute.


Changed in version 3.2: Support for zero-padded and unseekable files was added.


Changed in version 3.3: The  method is now implemented.


Changed in version 3.4: Added support for the  and  modes.


Changed in version 3.5: Added support for writing arbitrary
bytes-like objects.
The  method now accepts an argument of
.


Changed in version 3.6: Accepts a path-like object.




(data, compresslevel=9)¶
Compress the data, returning a  object containing
the compressed data.  compresslevel has the same meaning as in
the  constructor above.

New in version 3.2.




(data)¶
Decompress the data, returning a  object containing the
uncompressed data.

New in version 3.2.



Examples of usage¶
Example of how to read a compressed file:


Example of how to create a compressed GZIP file:


Example of how to GZIP compress an existing file:


Example of how to GZIP compress a binary string:



See also

Module 
The basic data compression module needed to support the gzip file
format.



