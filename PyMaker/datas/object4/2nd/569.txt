link:
library/stdtypes.html#set

docs:


class ([iterable])¶

class ([iterable])¶
Return a new set or frozenset object whose elements are taken from
iterable.  The elements of a set must be hashable.  To
represent sets of sets, the inner sets must be 
objects.  If iterable is not specified, a new empty set is
returned.
Instances of  and  provide the following
operations:



Return the number of elements in set s (cardinality of s).




Test x for membership in s.




Test x for non-membership in s.



(other)¶
Return  if the set has no elements in common with other.  Sets are
disjoint if and only if their intersection is the empty set.



(other)¶


Test whether every element in the set is in other.




Test whether the set is a proper subset of other, that is,
.



(other)¶


Test whether every element in other is in the set.




Test whether the set is a proper superset of other, that is, .



(*others)¶


Return a new set with elements from the set and all others.



(*others)¶


Return a new set with elements common to the set and all others.



(*others)¶


Return a new set with elements in the set that are not in the others.



(other)¶


Return a new set with elements in either the set or other but not both.



()¶
Return a shallow copy of the set.

Note, the non-operator versions of , ,
, and , , and
 methods will accept any iterable as an argument.  In
contrast, their operator based counterparts require their arguments to be
sets.  This precludes error-prone constructions like 
in favor of the more readable .
Both  and  support set to set comparisons. Two
sets are equal if and only if every element of each set is contained in the
other (each is a subset of the other). A set is less than another set if and
only if the first set is a proper subset of the second set (is a subset, but
is not equal). A set is greater than another set if and only if the first set
is a proper superset of the second set (is a superset, but is not equal).
Instances of  are compared to instances of 
based on their members.  For example, 
returns  and so does .
The subset and equality comparisons do not generalize to a total ordering
function.  For example, any two nonempty disjoint sets are not equal and are not
subsets of each other, so all of the following return : ,
, or .
Since sets only define partial ordering (subset relationships), the output of
the  method is undefined for lists of sets.
Set elements, like dictionary keys, must be hashable.
Binary operations that mix  instances with 
return the type of the first operand.  For example:  returns an instance of .
The following table lists operations available for  that do not
apply to immutable instances of :


(*others)¶


Update the set, adding elements from all others.



(*others)¶


Update the set, keeping only elements found in it and all others.



(*others)¶


Update the set, removing elements found in others.



(other)¶


Update the set, keeping only elements found in either set, but not in both.



(elem)¶
Add element elem to the set.



(elem)¶
Remove element elem from the set.  Raises  if elem is
not contained in the set.



(elem)¶
Remove element elem from the set if it is present.



()¶
Remove and return an arbitrary element from the set.  Raises
 if the set is empty.



()¶
Remove all elements from the set.

Note, the non-operator versions of the ,
, , and
 methods will accept any iterable as an
argument.
Note, the elem argument to the , , and
 methods may be a set.  To support searching for an equivalent
frozenset, a temporary one is created from elem.
