link:
library/struct.html#format-strings

docs:

Format Strings¶
Format strings are the mechanism used to specify the expected layout when
packing and unpacking data.  They are built up from Format Characters,
which specify the type of data being packed/unpacked.  In addition, there are
special characters for controlling the Byte Order, Size, and Alignment.

Byte Order, Size, and Alignment¶
By default, C types are represented in the machine’s native format and byte
order, and properly aligned by skipping pad bytes if necessary (according to the
rules used by the C compiler).
Alternatively, the first character of the format string can be used to indicate
the byte order, size and alignment of the packed data, according to the
following table:








Character
Byte order
Size
Alignment




native
native
native


native
standard
none


little-endian
standard
none


big-endian
standard
none


network (= big-endian)
standard
none



If the first character is not one of these,  is assumed.
Native byte order is big-endian or little-endian, depending on the host
system. For example, Intel x86 and AMD64 (x86-64) are little-endian;
Motorola 68000 and PowerPC G5 are big-endian; ARM and Intel Itanium feature
switchable endianness (bi-endian). Use  to check the
endianness of your system.
Native size and alignment are determined using the C compiler’s
 expression.  This is always combined with native byte order.
Standard size depends only on the format character;  see the table in
the Format Characters section.
Note the difference between  and : both use native byte order, but
the size and alignment of the latter is standardized.
The form  is available for those poor souls who claim they can’t remember
whether network byte order is big-endian or little-endian.
There is no way to indicate non-native byte order (force byte-swapping); use the
appropriate choice of  or .
Notes:

Padding is only automatically added between successive structure members.
No padding is added at the beginning or the end of the encoded struct.
No padding is added when using non-native size and alignment, e.g.
with ‘<’, ‘>’, ‘=’, and ‘!’.
To align the end of a structure to the alignment requirement of a
particular type, end the format with the code for that type with a repeat
count of zero.  See Examples.



Format Characters¶
Format characters have the following meaning; the conversion between C and
Python values should be obvious given their types.  The ‘Standard size’ column
refers to the size of the packed value in bytes when using standard size; that
is, when the format string starts with one of , ,  or
.  When using native size, the size of the packed value is
platform-dependent.









Format
C Type
Python type
Standard size
Notes




pad byte
no value
 
 



bytes of length 1
1
 



integer
1
(1),(3)



integer
1
(3)



bool
1
(1)



integer
2
(3)



integer
2
(3)



integer
4
(3)



integer
4
(3)



integer
4
(3)



integer
4
(3)



integer
8
(2), (3)



integer
8
(2), (3)



integer
 
(4)



integer
 
(4)


(7)
float
2
(5)



float
4
(5)



float
8
(5)



bytes
 
 



bytes
 
 



integer
 
(6)




Changed in version 3.3: Added support for the  and  formats.


Changed in version 3.6: Added support for the  format.

Notes:

The  conversion code corresponds to the  type defined by
C99. If this type is not available, it is simulated using a . In
standard mode, it is always represented by one byte.

The  and  conversion codes are available in native mode only if
the platform C compiler supports C , or, on Windows,
.  They are always available in standard modes.

When attempting to pack a non-integer using any of the integer conversion
codes, if the non-integer has a  method then that method is
called to convert the argument to an integer before packing.

Changed in version 3.2: Use of the  method for non-integers is new in 3.2.


The  and  conversion codes are only available for the native
size (selected as the default or with the  byte order character).
For the standard size, you can use whichever of the other integer formats
fits your application.

For the ,  and  conversion codes, the packed
representation uses the IEEE 754 binary32, binary64 or binary16 format (for
,  or  respectively), regardless of the floating-point
format used by the platform.

The  format character is only available for the native byte ordering
(selected as the default or with the  byte order character). The byte
order character  chooses to use little- or big-endian ordering based
on the host system. The struct module does not interpret this as native
ordering, so the  format is not available.

The IEEE 754 binary16 “half precision” type was introduced in the 2008
revision of the IEEE 754 standard. It has a sign
bit, a 5-bit exponent and 11-bit precision (with 10 bits explicitly stored),
and can represent numbers between approximately  and 
at full precision. This type is not widely supported by C compilers: on a
typical machine, an unsigned short can be used for storage, but not for math
operations. See the Wikipedia page on the half-precision floating-point
format for more information.


A format character may be preceded by an integral repeat count.  For example,
the format string  means exactly the same as .
Whitespace characters between formats are ignored; a count and its format must
not contain whitespace though.
For the  format character, the count is interpreted as the length of the
bytes, not a repeat count like for the other format characters; for example,
 means a single 10-byte string, while  means 10 characters.
If a count is not given, it defaults to 1.  For packing, the string is
truncated or padded with null bytes as appropriate to make it fit. For
unpacking, the resulting bytes object always has exactly the specified number
of bytes.  As a special case,  means a single, empty string (while
 means 0 characters).
When packing a value  using one of the integer formats (,
, , , , , , ,
, ), if  is outside the valid range for that format
then  is raised.

Changed in version 3.1: In 3.0, some of the integer formats wrapped out-of-range values and
raised  instead of .

The  format character encodes a “Pascal string”, meaning a short
variable-length string stored in a fixed number of bytes, given by the count.
The first byte stored is the length of the string, or 255, whichever is
smaller.  The bytes of the string follow.  If the string passed in to
 is too long (longer than the count minus 1), only the leading
 bytes of the string are stored.  If the string is shorter than
, it is padded with null bytes so that exactly count bytes in all
are used.  Note that for , the  format character consumes
 bytes, but that the string returned can never contain more than 255
bytes.
For the  format character, the return value is either  or
. When packing, the truth value of the argument object is used.
Either 0 or 1 in the native or standard bool representation will be packed, and
any non-zero value will be  when unpacking.


Examples¶

Note
All examples assume a native byte order, size, and alignment with a
big-endian machine.

A basic example of packing/unpacking three integers:


Unpacked fields can be named by assigning them to variables or by wrapping
the result in a named tuple:


The ordering of format characters may have an impact on size since the padding
needed to satisfy alignment requirements is different:


The following format  specifies two pad bytes at the end, assuming
longs are aligned on 4-byte boundaries:


This only works when native size and alignment are in effect; standard size and
alignment does not enforce any alignment.

See also

Module 
Packed binary storage of homogeneous data.
Module 
Packing and unpacking of XDR data.



