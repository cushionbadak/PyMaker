link:
library/stdtypes.html#dict

docs:


class (**kwarg)¶

class (mapping, **kwarg)

class (iterable, **kwarg)
Return a new dictionary initialized from an optional positional argument
and a possibly empty set of keyword arguments.
If no positional argument is given, an empty dictionary is created.
If a positional argument is given and it is a mapping object, a dictionary
is created with the same key-value pairs as the mapping object.  Otherwise,
the positional argument must be an iterable object.  Each item in
the iterable must itself be an iterable with exactly two objects.  The
first object of each item becomes a key in the new dictionary, and the
second object the corresponding value.  If a key occurs more than once, the
last value for that key becomes the corresponding value in the new
dictionary.
If keyword arguments are given, the keyword arguments and their values are
added to the dictionary created from the positional argument.  If a key
being added is already present, the value from the keyword argument
replaces the value from the positional argument.
To illustrate, the following examples all return a dictionary equal to
:


Providing keyword arguments as in the first example only works for keys that
are valid Python identifiers.  Otherwise, any valid keys can be used.
These are the operations that dictionaries support (and therefore, custom
mapping types should support too):



Return the number of items in the dictionary d.




Return the item of d with key key.  Raises a  if key is
not in the map.
If a subclass of dict defines a method  and key
is not present, the  operation calls that method with the key key
as argument.  The  operation then returns or raises whatever is
returned or raised by the  call.
No other operations or methods invoke . If
 is not defined,  is raised.
 must be a method; it cannot be an instance variable:


The example above shows part of the implementation of
.  A different  method is used
by .




Set  to value.




Remove  from d.  Raises a  if key is not in the
map.




Return  if d has a key key, else .




Equivalent to .




Return an iterator over the keys of the dictionary.  This is a shortcut
for .



()¶
Remove all items from the dictionary.



()¶
Return a shallow copy of the dictionary.



classmethod (iterable[, value])¶
Create a new dictionary with keys from iterable and values set to value.
 is a class method that returns a new dictionary. value
defaults to .



(key[, default])¶
Return the value for key if key is in the dictionary, else default.
If default is not given, it defaults to , so that this method
never raises a .



()¶
Return a new view of the dictionary’s items ( pairs).
See the documentation of view objects.



()¶
Return a new view of the dictionary’s keys.  See the documentation
of view objects.



(key[, default])¶
If key is in the dictionary, remove it and return its value, else return
default.  If default is not given and key is not in the dictionary,
a  is raised.



()¶
Remove and return a  pair from the dictionary.
Pairs are returned in LIFO order.
 is useful to destructively iterate over a dictionary, as
often used in set algorithms.  If the dictionary is empty, calling
 raises a .

Changed in version 3.7: LIFO order is now guaranteed. In prior versions,  would
return an arbitrary key/value pair.




(key[, default])¶
If key is in the dictionary, return its value.  If not, insert key
with a value of default and return default.  default defaults to
.



([other])¶
Update the dictionary with the key/value pairs from other, overwriting
existing keys.  Return .
 accepts either another dictionary object or an iterable of
key/value pairs (as tuples or other iterables of length two).  If keyword
arguments are specified, the dictionary is then updated with those
key/value pairs: .



()¶
Return a new view of the dictionary’s values.  See the
documentation of view objects.

Dictionaries compare equal if and only if they have the same  pairs. Order comparisons (‘<’, ‘<=’, ‘>=’, ‘>’) raise
.
Dictionaries preserve insertion order.  Note that updating a key does not
affect the order.  Keys added after deletion are inserted at the end.



Changed in version 3.7: Dictionary order is guaranteed to be insertion order.  This behavior was
an implementation detail of CPython from 3.6.

