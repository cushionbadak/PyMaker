link:
library/zipimport.html#module-zipimport

docs:

 — Import modules from Zip archives¶

This module adds the ability to import Python modules (,
) and packages from ZIP-format archives. It is usually not
needed to use the  module explicitly; it is automatically used
by the built-in  mechanism for  items that are paths
to ZIP archives.
Typically,  is a list of directory names as strings.  This module
also allows an item of  to be a string naming a ZIP file archive.
The ZIP archive can contain a subdirectory structure to support package imports,
and a path within the archive can be specified to only import from a
subdirectory.  For example, the path  would only
import from the  subdirectory within the archive.
Any files may be present in the ZIP archive, but only files  and
 are available for import.  ZIP import of dynamic modules
(, ) is disallowed. Note that if an archive only contains
 files, Python will not attempt to modify the archive by adding the
corresponding  file, meaning that if a ZIP archive
doesn’t contain  files, importing may be rather slow.
ZIP archives with an archive comment are currently not supported.

See also

PKZIP Application Note
Documentation on the ZIP file format by Phil Katz, the creator of the format and
algorithms used.
PEP 273 - Import Modules from Zip Archives
Written by James C. Ahlstrom, who also provided an implementation. Python 2.3
follows the specification in PEP 273, but uses an implementation written by Just
van Rossum that uses the import hooks described in PEP 302.
PEP 302 - New Import Hooks
The PEP to add the import hooks that help this module work.


This module defines an exception:


exception ¶
Exception raised by zipimporter objects. It’s a subclass of ,
so it can be caught as , too.


zipimporter Objects¶
 is the class for importing ZIP files.


class (archivepath)¶
Create a new zipimporter instance. archivepath must be a path to a ZIP
file, or to a specific path within a ZIP file.  For example, an archivepath
of  will look for modules in the  directory
inside the ZIP file  (provided that it exists).
 is raised if archivepath doesn’t point to a valid ZIP
archive.


(fullname[, path])¶
Search for a module specified by fullname. fullname must be the fully
qualified (dotted) module name. It returns the zipimporter instance itself
if the module was found, or  if it wasn’t. The optional
path argument is ignored—it’s there for compatibility with the
importer protocol.



(fullname)¶
Return the code object for the specified module. Raise
 if the module couldn’t be found.



(pathname)¶
Return the data associated with pathname. Raise  if the
file wasn’t found.

Changed in version 3.3:  used to be raised instead of .




(fullname)¶
Return the value  would be set to if the specified module
was imported. Raise  if the module couldn’t be
found.

New in version 3.1.




(fullname)¶
Return the source code for the specified module. Raise
 if the module couldn’t be found, return
 if the archive does contain the module, but has no source
for it.



(fullname)¶
Return  if the module specified by fullname is a package. Raise
 if the module couldn’t be found.



(fullname)¶
Load the module specified by fullname. fullname must be the fully
qualified (dotted) module name. It returns the imported module, or raises
 if it wasn’t found.



¶
The file name of the importer’s associated ZIP file, without a possible
subpath.



¶
The subpath within the ZIP file where modules are searched.  This is the
empty string for zipimporter objects which point to the root of the ZIP
file.

The  and  attributes, when combined with a
slash, equal the original archivepath argument given to the
 constructor.



Examples¶
Here is an example that imports a module from a ZIP archive - note that the
 module is not explicitly used.



